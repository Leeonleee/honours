You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Segmentation fault on macro creation
**What does happen?**
Creating the following macro causes a segmentation fault:
```sql
create macro extract_field(my_struct, my_field) as my_struct[my_field];
```

This is equivalent, and also results in a segmentation fault:
```sql
create macro extract_field(my_struct, my_field) as array_extract(my_struct, my_field);
```

**What should happen?**
The macro should be created succesfully.

**To Reproduce**
Steps to reproduce the behavior. Bonus points if those are only SQL queries.
1. Run one of the queries as shown above

**Environment (please complete the following information):**
 - OS: macOS Big Sur
 - DuckDB Version 3.0 (latest master branch)

**Before submitting**
- [x] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?
- [x] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/common/enums/expression_type.cpp]
1: #include "duckdb/common/enums/expression_type.hpp"
2: 
3: #include "duckdb/common/exception.hpp"
4: 
5: namespace duckdb {
6: 
7: // LCOV_EXCL_START
8: string ExpressionTypeToString(ExpressionType type) {
9: 	switch (type) {
10: 	case ExpressionType::OPERATOR_CAST:
11: 		return "CAST";
12: 	case ExpressionType::OPERATOR_NOT:
13: 		return "NOT";
14: 	case ExpressionType::OPERATOR_IS_NULL:
15: 		return "IS_NULL";
16: 	case ExpressionType::OPERATOR_IS_NOT_NULL:
17: 		return "IS_NOT_NULL";
18: 	case ExpressionType::COMPARE_EQUAL:
19: 		return "EQUAL";
20: 	case ExpressionType::COMPARE_NOTEQUAL:
21: 		return "NOTEQUAL";
22: 	case ExpressionType::COMPARE_LESSTHAN:
23: 		return "LESSTHAN";
24: 	case ExpressionType::COMPARE_GREATERTHAN:
25: 		return "GREATERTHAN";
26: 	case ExpressionType::COMPARE_LESSTHANOREQUALTO:
27: 		return "LESSTHANOREQUALTO";
28: 	case ExpressionType::COMPARE_GREATERTHANOREQUALTO:
29: 		return "GREATERTHANOREQUALTO";
30: 	case ExpressionType::COMPARE_IN:
31: 		return "IN";
32: 	case ExpressionType::COMPARE_DISTINCT_FROM:
33: 		return "DISTINCT_FROM";
34: 	case ExpressionType::COMPARE_NOT_DISTINCT_FROM:
35: 		return "NOT_DISTINCT_FROM";
36: 	case ExpressionType::CONJUNCTION_AND:
37: 		return "AND";
38: 	case ExpressionType::CONJUNCTION_OR:
39: 		return "OR";
40: 	case ExpressionType::VALUE_CONSTANT:
41: 		return "CONSTANT";
42: 	case ExpressionType::VALUE_PARAMETER:
43: 		return "PARAMETER";
44: 	case ExpressionType::VALUE_TUPLE:
45: 		return "TUPLE";
46: 	case ExpressionType::VALUE_TUPLE_ADDRESS:
47: 		return "TUPLE_ADDRESS";
48: 	case ExpressionType::VALUE_NULL:
49: 		return "NULL";
50: 	case ExpressionType::VALUE_VECTOR:
51: 		return "VECTOR";
52: 	case ExpressionType::VALUE_SCALAR:
53: 		return "SCALAR";
54: 	case ExpressionType::AGGREGATE:
55: 		return "AGGREGATE";
56: 	case ExpressionType::WINDOW_AGGREGATE:
57: 		return "WINDOW_AGGREGATE";
58: 	case ExpressionType::WINDOW_RANK:
59: 		return "RANK";
60: 	case ExpressionType::WINDOW_RANK_DENSE:
61: 		return "RANK_DENSE";
62: 	case ExpressionType::WINDOW_PERCENT_RANK:
63: 		return "PERCENT_RANK";
64: 	case ExpressionType::WINDOW_ROW_NUMBER:
65: 		return "ROW_NUMBER";
66: 	case ExpressionType::WINDOW_FIRST_VALUE:
67: 		return "FIRST_VALUE";
68: 	case ExpressionType::WINDOW_LAST_VALUE:
69: 		return "LAST_VALUE";
70: 	case ExpressionType::WINDOW_NTH_VALUE:
71: 		return "NTH_VALUE";
72: 	case ExpressionType::WINDOW_CUME_DIST:
73: 		return "CUME_DIST";
74: 	case ExpressionType::WINDOW_LEAD:
75: 		return "LEAD";
76: 	case ExpressionType::WINDOW_LAG:
77: 		return "LAG";
78: 	case ExpressionType::WINDOW_NTILE:
79: 		return "NTILE";
80: 	case ExpressionType::FUNCTION:
81: 		return "FUNCTION";
82: 	case ExpressionType::CASE_EXPR:
83: 		return "CASE";
84: 	case ExpressionType::OPERATOR_NULLIF:
85: 		return "NULLIF";
86: 	case ExpressionType::OPERATOR_COALESCE:
87: 		return "COALESCE";
88: 	case ExpressionType::ARRAY_EXTRACT:
89: 		return "ARRAY_EXTRACT";
90: 	case ExpressionType::ARRAY_SLICE:
91: 		return "ARRAY_SLICE";
92: 	case ExpressionType::STRUCT_EXTRACT:
93: 		return "STRUCT_EXTRACT";
94: 	case ExpressionType::SUBQUERY:
95: 		return "SUBQUERY";
96: 	case ExpressionType::STAR:
97: 		return "STAR";
98: 	case ExpressionType::PLACEHOLDER:
99: 		return "PLACEHOLDER";
100: 	case ExpressionType::COLUMN_REF:
101: 		return "COLUMN_REF";
102: 	case ExpressionType::FUNCTION_REF:
103: 		return "FUNCTION_REF";
104: 	case ExpressionType::TABLE_REF:
105: 		return "TABLE_REF";
106: 	case ExpressionType::CAST:
107: 		return "CAST";
108: 	case ExpressionType::COMPARE_NOT_IN:
109: 		return "COMPARE_NOT_IN";
110: 	case ExpressionType::COMPARE_BETWEEN:
111: 		return "COMPARE_BETWEEN";
112: 	case ExpressionType::COMPARE_NOT_BETWEEN:
113: 		return "COMPARE_NOT_BETWEEN";
114: 	case ExpressionType::VALUE_DEFAULT:
115: 		return "VALUE_DEFAULT";
116: 	case ExpressionType::BOUND_REF:
117: 		return "BOUND_REF";
118: 	case ExpressionType::BOUND_COLUMN_REF:
119: 		return "BOUND_COLUMN_REF";
120: 	case ExpressionType::BOUND_FUNCTION:
121: 		return "BOUND_FUNCTION";
122: 	case ExpressionType::BOUND_AGGREGATE:
123: 		return "BOUND_AGGREGATE";
124: 	case ExpressionType::ARRAY_CONSTRUCTOR:
125: 		return "ARRAY_CONSTRUCTOR";
126: 	case ExpressionType::TABLE_STAR:
127: 		return "TABLE_STAR";
128: 	case ExpressionType::BOUND_UNNEST:
129: 		return "BOUND_UNNEST";
130: 	case ExpressionType::COLLATE:
131: 		return "COLLATE";
132: 	case ExpressionType::POSITIONAL_REFERENCE:
133: 		return "POSITIONAL_REFERENCE";
134: 	case ExpressionType::LAMBDA:
135: 		return "LAMBDA";
136: 	case ExpressionType::INVALID:
137: 		break;
138: 	}
139: 	return "INVALID";
140: }
141: // LCOV_EXCL_STOP
142: 
143: string ExpressionTypeToOperator(ExpressionType type) {
144: 	switch (type) {
145: 	case ExpressionType::OPERATOR_NOT:
146: 		return "!";
147: 	case ExpressionType::COMPARE_EQUAL:
148: 		return "=";
149: 	case ExpressionType::COMPARE_NOTEQUAL:
150: 		return "!=";
151: 	case ExpressionType::COMPARE_LESSTHAN:
152: 		return "<";
153: 	case ExpressionType::COMPARE_GREATERTHAN:
154: 		return ">";
155: 	case ExpressionType::COMPARE_LESSTHANOREQUALTO:
156: 		return "<=";
157: 	case ExpressionType::COMPARE_GREATERTHANOREQUALTO:
158: 		return ">=";
159: 	case ExpressionType::CONJUNCTION_AND:
160: 		return "AND";
161: 	case ExpressionType::CONJUNCTION_OR:
162: 		return "OR";
163: 	default:
164: 		return "";
165: 	}
166: }
167: 
168: ExpressionType NegateComparisionExpression(ExpressionType type) {
169: 	ExpressionType negated_type = ExpressionType::INVALID;
170: 	switch (type) {
171: 	case ExpressionType::COMPARE_EQUAL:
172: 		negated_type = ExpressionType::COMPARE_NOTEQUAL;
173: 		break;
174: 	case ExpressionType::COMPARE_NOTEQUAL:
175: 		negated_type = ExpressionType::COMPARE_EQUAL;
176: 		break;
177: 	case ExpressionType::COMPARE_LESSTHAN:
178: 		negated_type = ExpressionType::COMPARE_GREATERTHANOREQUALTO;
179: 		break;
180: 	case ExpressionType::COMPARE_GREATERTHAN:
181: 		negated_type = ExpressionType::COMPARE_LESSTHANOREQUALTO;
182: 		break;
183: 	case ExpressionType::COMPARE_LESSTHANOREQUALTO:
184: 		negated_type = ExpressionType::COMPARE_GREATERTHAN;
185: 		break;
186: 	case ExpressionType::COMPARE_GREATERTHANOREQUALTO:
187: 		negated_type = ExpressionType::COMPARE_LESSTHAN;
188: 		break;
189: 	default:
190: 		throw InternalException("Unsupported comparison type in negation");
191: 	}
192: 	return negated_type;
193: }
194: 
195: ExpressionType FlipComparisionExpression(ExpressionType type) {
196: 	ExpressionType flipped_type = ExpressionType::INVALID;
197: 	switch (type) {
198: 	case ExpressionType::COMPARE_NOT_DISTINCT_FROM:
199: 	case ExpressionType::COMPARE_DISTINCT_FROM:
200: 	case ExpressionType::COMPARE_NOTEQUAL:
201: 	case ExpressionType::COMPARE_EQUAL:
202: 		flipped_type = type;
203: 		break;
204: 	case ExpressionType::COMPARE_LESSTHAN:
205: 		flipped_type = ExpressionType::COMPARE_GREATERTHAN;
206: 		break;
207: 	case ExpressionType::COMPARE_GREATERTHAN:
208: 		flipped_type = ExpressionType::COMPARE_LESSTHAN;
209: 		break;
210: 	case ExpressionType::COMPARE_LESSTHANOREQUALTO:
211: 		flipped_type = ExpressionType::COMPARE_GREATERTHANOREQUALTO;
212: 		break;
213: 	case ExpressionType::COMPARE_GREATERTHANOREQUALTO:
214: 		flipped_type = ExpressionType::COMPARE_LESSTHANOREQUALTO;
215: 		break;
216: 	default:
217: 		throw InternalException("Unsupported comparison type in flip");
218: 	}
219: 	return flipped_type;
220: }
221: 
222: } // namespace duckdb
[end of src/common/enums/expression_type.cpp]
[start of src/execution/CMakeLists.txt]
1: add_subdirectory(expression_executor)
2: add_subdirectory(merge_join)
3: add_subdirectory(nested_loop_join)
4: add_subdirectory(operator)
5: add_subdirectory(physical_plan)
6: add_subdirectory(index/art)
7: 
8: add_library_unity(
9:   duckdb_execution
10:   OBJECT
11:   adaptive_filter.cpp
12:   aggregate_hashtable.cpp
13:   base_aggregate_hashtable.cpp
14:   column_binding_resolver.cpp
15:   expression_executor.cpp
16:   expression_executor_state.cpp
17:   join_hashtable.cpp
18:   partitionable_hashtable.cpp
19:   perfect_aggregate_hashtable.cpp
20:   physical_operator.cpp
21:   physical_plan_generator.cpp
22:   reservoir_sample.cpp
23:   window_segment_tree.cpp)
24: set(ALL_OBJECT_FILES
25:     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_execution>
26:     PARENT_SCOPE)
[end of src/execution/CMakeLists.txt]
[start of src/execution/operator/aggregate/physical_hash_aggregate.cpp]
1: #include "duckdb/execution/operator/aggregate/physical_hash_aggregate.hpp"
2: 
3: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
4: #include "duckdb/common/vector_operations/vector_operations.hpp"
5: #include "duckdb/execution/aggregate_hashtable.hpp"
6: #include "duckdb/execution/partitionable_hashtable.hpp"
7: #include "duckdb/main/client_context.hpp"
8: #include "duckdb/parallel/pipeline.hpp"
9: #include "duckdb/parallel/task_scheduler.hpp"
10: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
11: #include "duckdb/planner/expression/bound_constant_expression.hpp"
12: #include "duckdb/parallel/event.hpp"
13: #include "duckdb/common/atomic.hpp"
14: 
15: namespace duckdb {
16: 
17: PhysicalHashAggregate::PhysicalHashAggregate(ClientContext &context, vector<LogicalType> types,
18:                                              vector<unique_ptr<Expression>> expressions, idx_t estimated_cardinality,
19:                                              PhysicalOperatorType type)
20:     : PhysicalHashAggregate(context, move(types), move(expressions), {}, estimated_cardinality, type) {
21: }
22: 
23: PhysicalHashAggregate::PhysicalHashAggregate(ClientContext &context, vector<LogicalType> types,
24:                                              vector<unique_ptr<Expression>> expressions,
25:                                              vector<unique_ptr<Expression>> groups_p, idx_t estimated_cardinality,
26:                                              PhysicalOperatorType type)
27:     : PhysicalOperator(type, move(types), estimated_cardinality), groups(move(groups_p)), all_combinable(true),
28:       any_distinct(false) {
29: 	// get a list of all aggregates to be computed
30: 	// fake a single group with a constant value for aggregation without groups
31: 	if (this->groups.empty()) {
32: 		group_types.push_back(LogicalType::TINYINT);
33: 		is_implicit_aggr = true;
34: 	} else {
35: 		is_implicit_aggr = false;
36: 	}
37: 	for (auto &expr : groups) {
38: 		group_types.push_back(expr->return_type);
39: 	}
40: 	vector<LogicalType> payload_types_filters;
41: 	for (auto &expr : expressions) {
42: 		D_ASSERT(expr->expression_class == ExpressionClass::BOUND_AGGREGATE);
43: 		D_ASSERT(expr->IsAggregate());
44: 		auto &aggr = (BoundAggregateExpression &)*expr;
45: 		bindings.push_back(&aggr);
46: 
47: 		if (aggr.distinct) {
48: 			any_distinct = true;
49: 		}
50: 
51: 		aggregate_return_types.push_back(aggr.return_type);
52: 		for (auto &child : aggr.children) {
53: 			payload_types.push_back(child->return_type);
54: 		}
55: 		if (aggr.filter) {
56: 			payload_types_filters.push_back(aggr.filter->return_type);
57: 		}
58: 		if (!aggr.function.combine) {
59: 			all_combinable = false;
60: 		}
61: 		aggregates.push_back(move(expr));
62: 	}
63: 
64: 	for (const auto &pay_filters : payload_types_filters) {
65: 		payload_types.push_back(pay_filters);
66: 	}
67: 
68: 	// 10000 seems like a good compromise here
69: 	radix_limit = 10000;
70: 
71: 	// filter_indexes must be pre-built, not lazily instantiated in parallel...
72: 	idx_t aggregate_input_idx = 0;
73: 	for (auto &aggregate : aggregates) {
74: 		auto &aggr = (BoundAggregateExpression &)*aggregate;
75: 		aggregate_input_idx += aggr.children.size();
76: 	}
77: 	for (auto &aggregate : aggregates) {
78: 		auto &aggr = (BoundAggregateExpression &)*aggregate;
79: 		if (aggr.filter) {
80: 			auto &bound_ref_expr = (BoundReferenceExpression &)*aggr.filter;
81: 			auto it = filter_indexes.find(aggr.filter.get());
82: 			if (it == filter_indexes.end()) {
83: 				filter_indexes[aggr.filter.get()] = bound_ref_expr.index;
84: 				bound_ref_expr.index = aggregate_input_idx++;
85: 			} else {
86: 				++aggregate_input_idx;
87: 			}
88: 		}
89: 	}
90: }
91: 
92: //===--------------------------------------------------------------------===//
93: // Sink
94: //===--------------------------------------------------------------------===//
95: class HashAggregateGlobalState : public GlobalSinkState {
96: public:
97: 	HashAggregateGlobalState(const PhysicalHashAggregate &op_p, ClientContext &context)
98: 	    : op(op_p), is_empty(true), multi_scan(true), total_groups(0),
99: 	      partition_info((idx_t)TaskScheduler::GetScheduler(context).NumberOfThreads()) {
100: 	}
101: 
102: 	const PhysicalHashAggregate &op;
103: 	vector<unique_ptr<PartitionableHashTable>> intermediate_hts;
104: 	vector<unique_ptr<GroupedAggregateHashTable>> finalized_hts;
105: 
106: 	//! Whether or not any tuples were added to the HT
107: 	bool is_empty;
108: 	//! Whether or not the hash table should be scannable multiple times
109: 	bool multi_scan;
110: 	//! The lock for updating the global aggregate state
111: 	mutex lock;
112: 	//! a counter to determine if we should switch over to p
113: 	atomic<idx_t> total_groups;
114: 
115: 	bool is_finalized = false;
116: 
117: 	RadixPartitionInfo partition_info;
118: };
119: 
120: class HashAggregateLocalState : public LocalSinkState {
121: public:
122: 	explicit HashAggregateLocalState(const PhysicalHashAggregate &op_p) : op(op_p), is_empty(true) {
123: 		group_chunk.InitializeEmpty(op.group_types);
124: 		if (!op.payload_types.empty()) {
125: 			aggregate_input_chunk.InitializeEmpty(op.payload_types);
126: 		}
127: 
128: 		// if there are no groups we create a fake group so everything has the same group
129: 		if (op.groups.empty()) {
130: 			group_chunk.data[0].Reference(Value::TINYINT(42));
131: 		}
132: 	}
133: 
134: 	const PhysicalHashAggregate &op;
135: 
136: 	DataChunk group_chunk;
137: 	DataChunk aggregate_input_chunk;
138: 
139: 	//! The aggregate HT
140: 	unique_ptr<PartitionableHashTable> ht;
141: 
142: 	//! Whether or not any tuples were added to the HT
143: 	bool is_empty;
144: };
145: 
146: void PhysicalHashAggregate::SetMultiScan(GlobalSinkState &state) {
147: 	auto &gstate = (HashAggregateGlobalState &)state;
148: 	gstate.multi_scan = true;
149: }
150: 
151: unique_ptr<GlobalSinkState> PhysicalHashAggregate::GetGlobalSinkState(ClientContext &context) const {
152: 	return make_unique<HashAggregateGlobalState>(*this, context);
153: }
154: 
155: unique_ptr<LocalSinkState> PhysicalHashAggregate::GetLocalSinkState(ExecutionContext &context) const {
156: 	return make_unique<HashAggregateLocalState>(*this);
157: }
158: 
159: SinkResultType PhysicalHashAggregate::Sink(ExecutionContext &context, GlobalSinkState &state, LocalSinkState &lstate,
160:                                            DataChunk &input) const {
161: 	auto &llstate = (HashAggregateLocalState &)lstate;
162: 	auto &gstate = (HashAggregateGlobalState &)state;
163: 	D_ASSERT(!gstate.is_finalized);
164: 
165: 	DataChunk &group_chunk = llstate.group_chunk;
166: 	DataChunk &aggregate_input_chunk = llstate.aggregate_input_chunk;
167: 
168: 	for (idx_t group_idx = 0; group_idx < groups.size(); group_idx++) {
169: 		auto &group = groups[group_idx];
170: 		D_ASSERT(group->type == ExpressionType::BOUND_REF);
171: 		auto &bound_ref_expr = (BoundReferenceExpression &)*group;
172: 		group_chunk.data[group_idx].Reference(input.data[bound_ref_expr.index]);
173: 	}
174: 	idx_t aggregate_input_idx = 0;
175: 	for (auto &aggregate : aggregates) {
176: 		auto &aggr = (BoundAggregateExpression &)*aggregate;
177: 		for (auto &child_expr : aggr.children) {
178: 			D_ASSERT(child_expr->type == ExpressionType::BOUND_REF);
179: 			auto &bound_ref_expr = (BoundReferenceExpression &)*child_expr;
180: 			aggregate_input_chunk.data[aggregate_input_idx++].Reference(input.data[bound_ref_expr.index]);
181: 		}
182: 	}
183: 	for (auto &aggregate : aggregates) {
184: 		auto &aggr = (BoundAggregateExpression &)*aggregate;
185: 		if (aggr.filter) {
186: 			auto it = filter_indexes.find(aggr.filter.get());
187: 			D_ASSERT(it != filter_indexes.end());
188: 			aggregate_input_chunk.data[aggregate_input_idx++].Reference(input.data[it->second]);
189: 		}
190: 	}
191: 
192: 	group_chunk.SetCardinality(input.size());
193: 	aggregate_input_chunk.SetCardinality(input.size());
194: 
195: 	group_chunk.Verify();
196: 	aggregate_input_chunk.Verify();
197: 	D_ASSERT(aggregate_input_chunk.ColumnCount() == 0 || group_chunk.size() == aggregate_input_chunk.size());
198: 
199: 	// if we have non-combinable aggregates (e.g. string_agg) or any distinct aggregates we cannot keep parallel hash
200: 	// tables
201: 	if (ForceSingleHT(state)) {
202: 		lock_guard<mutex> glock(gstate.lock);
203: 		gstate.is_empty = gstate.is_empty && group_chunk.size() == 0;
204: 		if (gstate.finalized_hts.empty()) {
205: 			gstate.finalized_hts.push_back(
206: 			    make_unique<GroupedAggregateHashTable>(BufferManager::GetBufferManager(context.client), group_types,
207: 			                                           payload_types, bindings, HtEntryType::HT_WIDTH_64));
208: 		}
209: 		D_ASSERT(gstate.finalized_hts.size() == 1);
210: 		D_ASSERT(gstate.finalized_hts[0]);
211: 		gstate.total_groups += gstate.finalized_hts[0]->AddChunk(group_chunk, aggregate_input_chunk);
212: 		return SinkResultType::NEED_MORE_INPUT;
213: 	}
214: 
215: 	D_ASSERT(all_combinable);
216: 	D_ASSERT(!any_distinct);
217: 
218: 	if (group_chunk.size() > 0) {
219: 		llstate.is_empty = false;
220: 	}
221: 
222: 	if (!llstate.ht) {
223: 		llstate.ht = make_unique<PartitionableHashTable>(BufferManager::GetBufferManager(context.client),
224: 		                                                 gstate.partition_info, group_types, payload_types, bindings);
225: 	}
226: 
227: 	gstate.total_groups +=
228: 	    llstate.ht->AddChunk(group_chunk, aggregate_input_chunk,
229: 	                         gstate.total_groups > radix_limit && gstate.partition_info.n_partitions > 1);
230: 	return SinkResultType::NEED_MORE_INPUT;
231: }
232: 
233: void PhysicalHashAggregate::Combine(ExecutionContext &context, GlobalSinkState &state, LocalSinkState &lstate) const {
234: 	auto &gstate = (HashAggregateGlobalState &)state;
235: 	auto &llstate = (HashAggregateLocalState &)lstate;
236: 	D_ASSERT(!gstate.is_finalized);
237: 
238: 	// this actually does not do a lot but just pushes the local HTs into the global state so we can later combine them
239: 	// in parallel
240: 
241: 	if (ForceSingleHT(state)) {
242: 		D_ASSERT(gstate.finalized_hts.size() <= 1);
243: 		return;
244: 	}
245: 
246: 	if (!llstate.ht) {
247: 		return; // no data
248: 	}
249: 
250: 	if (!llstate.ht->IsPartitioned() && gstate.partition_info.n_partitions > 1 && gstate.total_groups > radix_limit) {
251: 		llstate.ht->Partition();
252: 	}
253: 
254: 	lock_guard<mutex> glock(gstate.lock);
255: 	D_ASSERT(all_combinable);
256: 	D_ASSERT(!any_distinct);
257: 
258: 	if (!llstate.is_empty) {
259: 		gstate.is_empty = false;
260: 	}
261: 
262: 	// we will never add new values to these HTs so we can drop the first part of the HT
263: 	llstate.ht->Finalize();
264: 
265: 	// at this point we just collect them the PhysicalHashAggregateFinalizeTask (below) will merge them in parallel
266: 	gstate.intermediate_hts.push_back(move(llstate.ht));
267: }
268: 
269: // this task is run in multiple threads and combines the radix-partitioned hash tables into a single onen and then
270: // folds them into the global ht finally.
271: class PhysicalHashAggregateFinalizeTask : public ExecutorTask {
272: public:
273: 	PhysicalHashAggregateFinalizeTask(Executor &executor, shared_ptr<Event> event_p, HashAggregateGlobalState &state_p,
274: 	                                  idx_t radix_p)
275: 	    : ExecutorTask(executor), event(move(event_p)), state(state_p), radix(radix_p) {
276: 	}
277: 	static void FinalizeHT(HashAggregateGlobalState &gstate, idx_t radix) {
278: 		D_ASSERT(gstate.partition_info.n_partitions <= gstate.finalized_hts.size());
279: 		D_ASSERT(gstate.finalized_hts[radix]);
280: 		for (auto &pht : gstate.intermediate_hts) {
281: 			for (auto &ht : pht->GetPartition(radix)) {
282: 				gstate.finalized_hts[radix]->Combine(*ht);
283: 				ht.reset();
284: 			}
285: 		}
286: 		gstate.finalized_hts[radix]->Finalize();
287: 	}
288: 
289: 	void ExecuteTask() override {
290: 		FinalizeHT(state, radix);
291: 		event->FinishTask();
292: 	}
293: 
294: private:
295: 	shared_ptr<Event> event;
296: 	HashAggregateGlobalState &state;
297: 	idx_t radix;
298: };
299: 
300: class HashAggregateFinalizeEvent : public Event {
301: public:
302: 	HashAggregateFinalizeEvent(HashAggregateGlobalState &gstate_p, Pipeline *pipeline_p)
303: 	    : Event(pipeline_p->executor), gstate(gstate_p), pipeline(pipeline_p) {
304: 	}
305: 
306: 	HashAggregateGlobalState &gstate;
307: 	Pipeline *pipeline;
308: 
309: public:
310: 	void Schedule() override {
311: 		vector<unique_ptr<Task>> tasks;
312: 		for (idx_t r = 0; r < gstate.partition_info.n_partitions; r++) {
313: 			D_ASSERT(gstate.partition_info.n_partitions <= gstate.finalized_hts.size());
314: 			D_ASSERT(gstate.finalized_hts[r]);
315: 			tasks.push_back(
316: 			    make_unique<PhysicalHashAggregateFinalizeTask>(pipeline->executor, shared_from_this(), gstate, r));
317: 		}
318: 		SetTasks(move(tasks));
319: 	}
320: };
321: 
322: SinkFinalizeType PhysicalHashAggregate::Finalize(Pipeline &pipeline, Event &event, ClientContext &context,
323:                                                  GlobalSinkState &gstate_p) const {
324: 	auto &gstate = (HashAggregateGlobalState &)gstate_p;
325: 	gstate.is_finalized = true;
326: 	// special case if we have non-combinable aggregates
327: 	// we have already aggreagted into a global shared HT that does not require any additional finalization steps
328: 	if (ForceSingleHT(gstate)) {
329: 		D_ASSERT(gstate.finalized_hts.size() <= 1);
330: 		D_ASSERT(gstate.finalized_hts.empty() || gstate.finalized_hts[0]);
331: 		return SinkFinalizeType::READY;
332: 	}
333: 
334: 	// we can have two cases now, non-partitioned for few groups and radix-partitioned for very many groups.
335: 	// go through all of the child hts and see if we ever called partition() on any of them
336: 	// if we did, its the latter case.
337: 	bool any_partitioned = false;
338: 	for (auto &pht : gstate.intermediate_hts) {
339: 		if (pht->IsPartitioned()) {
340: 			any_partitioned = true;
341: 			break;
342: 		}
343: 	}
344: 
345: 	if (any_partitioned) {
346: 		// if one is partitioned, all have to be
347: 		// this should mostly have already happened in Combine, but if not we do it here
348: 		for (auto &pht : gstate.intermediate_hts) {
349: 			if (!pht->IsPartitioned()) {
350: 				pht->Partition();
351: 			}
352: 		}
353: 		// schedule additional tasks to combine the partial HTs
354: 		gstate.finalized_hts.resize(gstate.partition_info.n_partitions);
355: 		for (idx_t r = 0; r < gstate.partition_info.n_partitions; r++) {
356: 			gstate.finalized_hts[r] =
357: 			    make_unique<GroupedAggregateHashTable>(BufferManager::GetBufferManager(context), group_types,
358: 			                                           payload_types, bindings, HtEntryType::HT_WIDTH_64);
359: 		}
360: 
361: 		auto new_event = make_shared<HashAggregateFinalizeEvent>(gstate, &pipeline);
362: 		event.InsertEvent(move(new_event));
363: 	} else { // in the non-partitioned case we immediately combine all the unpartitioned hts created by the threads.
364: 		     // TODO possible optimization, if total count < limit for 32 bit ht, use that one
365: 		     // create this ht here so finalize needs no lock on gstate
366: 
367: 		gstate.finalized_hts.push_back(make_unique<GroupedAggregateHashTable>(
368: 		    BufferManager::GetBufferManager(context), group_types, payload_types, bindings, HtEntryType::HT_WIDTH_64));
369: 		for (auto &pht : gstate.intermediate_hts) {
370: 			auto unpartitioned = pht->GetUnpartitioned();
371: 			for (auto &unpartitioned_ht : unpartitioned) {
372: 				D_ASSERT(unpartitioned_ht);
373: 				gstate.finalized_hts[0]->Combine(*unpartitioned_ht);
374: 				unpartitioned_ht.reset();
375: 			}
376: 			unpartitioned.clear();
377: 		}
378: 		D_ASSERT(gstate.finalized_hts[0]);
379: 		gstate.finalized_hts[0]->Finalize();
380: 	}
381: 	return SinkFinalizeType::READY;
382: }
383: 
384: //===--------------------------------------------------------------------===//
385: // Source
386: //===--------------------------------------------------------------------===//
387: class PhysicalHashAggregateState : public GlobalSourceState {
388: public:
389: 	PhysicalHashAggregateState(const vector<LogicalType> &group_types, const vector<LogicalType> &aggregate_types)
390: 	    : ht_index(0), ht_scan_position(0), finished(false) {
391: 		auto scan_chunk_types = group_types;
392: 		for (auto &aggr_type : aggregate_types) {
393: 			scan_chunk_types.push_back(aggr_type);
394: 		}
395: 		scan_chunk.Initialize(scan_chunk_types);
396: 	}
397: 
398: 	//! Materialized GROUP BY expressions & aggregates
399: 	DataChunk scan_chunk;
400: 
401: 	//! The current position to scan the HT for output tuples
402: 	idx_t ht_index;
403: 	idx_t ht_scan_position;
404: 	bool finished;
405: };
406: 
407: unique_ptr<GlobalSourceState> PhysicalHashAggregate::GetGlobalSourceState(ClientContext &context) const {
408: 	return make_unique<PhysicalHashAggregateState>(group_types, aggregate_return_types);
409: }
410: 
411: void PhysicalHashAggregate::GetData(ExecutionContext &context, DataChunk &chunk, GlobalSourceState &gstate_p,
412:                                     LocalSourceState &lstate) const {
413: 	auto &gstate = (HashAggregateGlobalState &)*sink_state;
414: 	auto &state = (PhysicalHashAggregateState &)gstate_p;
415: 	D_ASSERT(gstate.is_finalized);
416: 	if (state.finished) {
417: 		return;
418: 	}
419: 
420: 	state.scan_chunk.Reset();
421: 
422: 	// special case hack to sort out aggregating from empty intermediates
423: 	// for aggregations without groups
424: 	if (gstate.is_empty && is_implicit_aggr) {
425: 		D_ASSERT(chunk.ColumnCount() == aggregates.size());
426: 		// for each column in the aggregates, set to initial state
427: 		chunk.SetCardinality(1);
428: 		for (idx_t i = 0; i < chunk.ColumnCount(); i++) {
429: 			D_ASSERT(aggregates[i]->GetExpressionClass() == ExpressionClass::BOUND_AGGREGATE);
430: 			auto &aggr = (BoundAggregateExpression &)*aggregates[i];
431: 			auto aggr_state = unique_ptr<data_t[]>(new data_t[aggr.function.state_size()]);
432: 			aggr.function.initialize(aggr_state.get());
433: 
434: 			Vector state_vector(Value::POINTER((uintptr_t)aggr_state.get()));
435: 			aggr.function.finalize(state_vector, aggr.bind_info.get(), chunk.data[i], 1, 0);
436: 			if (aggr.function.destructor) {
437: 				aggr.function.destructor(state_vector, 1);
438: 			}
439: 		}
440: 		state.finished = true;
441: 		return;
442: 	}
443: 	if (gstate.is_empty && !state.finished) {
444: 		state.finished = true;
445: 		return;
446: 	}
447: 	idx_t elements_found = 0;
448: 
449: 	while (true) {
450: 		if (state.ht_index == gstate.finalized_hts.size()) {
451: 			state.finished = true;
452: 			return;
453: 		}
454: 		D_ASSERT(gstate.finalized_hts[state.ht_index]);
455: 		elements_found = gstate.finalized_hts[state.ht_index]->Scan(state.ht_scan_position, state.scan_chunk);
456: 
457: 		if (elements_found > 0) {
458: 			break;
459: 		}
460: 		if (!gstate.multi_scan) {
461: 			gstate.finalized_hts[state.ht_index].reset();
462: 		}
463: 		state.ht_index++;
464: 		state.ht_scan_position = 0;
465: 	}
466: 
467: 	// compute the final projection list
468: 	idx_t chunk_index = 0;
469: 	chunk.SetCardinality(elements_found);
470: 	if (group_types.size() + aggregates.size() == chunk.ColumnCount()) {
471: 		for (idx_t col_idx = 0; col_idx < group_types.size(); col_idx++) {
472: 			chunk.data[chunk_index++].Reference(state.scan_chunk.data[col_idx]);
473: 		}
474: 	} else {
475: 		D_ASSERT(aggregates.size() == chunk.ColumnCount());
476: 	}
477: 
478: 	for (idx_t col_idx = 0; col_idx < aggregates.size(); col_idx++) {
479: 		chunk.data[chunk_index++].Reference(state.scan_chunk.data[group_types.size() + col_idx]);
480: 	}
481: }
482: 
483: bool PhysicalHashAggregate::ForceSingleHT(GlobalSinkState &state) const {
484: 	auto &gstate = (HashAggregateGlobalState &)state;
485: 
486: 	return !all_combinable || any_distinct || gstate.partition_info.n_partitions < 2;
487: }
488: 
489: string PhysicalHashAggregate::ParamsToString() const {
490: 	string result;
491: 	for (idx_t i = 0; i < groups.size(); i++) {
492: 		if (i > 0) {
493: 			result += "\n";
494: 		}
495: 		result += groups[i]->GetName();
496: 	}
497: 	for (idx_t i = 0; i < aggregates.size(); i++) {
498: 		auto &aggregate = (BoundAggregateExpression &)*aggregates[i];
499: 		if (i > 0 || !groups.empty()) {
500: 			result += "\n";
501: 		}
502: 		result += aggregates[i]->GetName();
503: 		if (aggregate.filter) {
504: 			result += " Filter: " + aggregate.filter->GetName();
505: 		}
506: 	}
507: 	return result;
508: }
509: 
510: } // namespace duckdb
[end of src/execution/operator/aggregate/physical_hash_aggregate.cpp]
[start of src/execution/physical_plan/plan_aggregate.cpp]
1: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
2: #include "duckdb/common/operator/subtract.hpp"
3: #include "duckdb/execution/operator/aggregate/physical_hash_aggregate.hpp"
4: #include "duckdb/execution/operator/aggregate/physical_perfecthash_aggregate.hpp"
5: #include "duckdb/execution/operator/aggregate/physical_simple_aggregate.hpp"
6: #include "duckdb/execution/operator/projection/physical_projection.hpp"
7: #include "duckdb/execution/physical_plan_generator.hpp"
8: #include "duckdb/main/client_context.hpp"
9: #include "duckdb/parser/expression/comparison_expression.hpp"
10: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
11: #include "duckdb/planner/operator/logical_aggregate.hpp"
12: #include "duckdb/storage/statistics/numeric_statistics.hpp"
13: namespace duckdb {
14: 
15: static uint32_t RequiredBitsForValue(uint32_t n) {
16: 	idx_t required_bits = 0;
17: 	while (n > 0) {
18: 		n >>= 1;
19: 		required_bits++;
20: 	}
21: 	return required_bits;
22: }
23: 
24: static bool CanUsePerfectHashAggregate(ClientContext &context, LogicalAggregate &op, vector<idx_t> &bits_per_group) {
25: 	idx_t perfect_hash_bits = 0;
26: 	if (op.group_stats.empty()) {
27: 		op.group_stats.resize(op.groups.size());
28: 	}
29: 	for (idx_t group_idx = 0; group_idx < op.groups.size(); group_idx++) {
30: 		auto &group = op.groups[group_idx];
31: 		auto &stats = op.group_stats[group_idx];
32: 
33: 		switch (group->return_type.InternalType()) {
34: 		case PhysicalType::INT8:
35: 		case PhysicalType::INT16:
36: 		case PhysicalType::INT32:
37: 		case PhysicalType::INT64:
38: 			break;
39: 		default:
40: 			// we only support simple integer types for perfect hashing
41: 			return false;
42: 		}
43: 		// check if the group has stats available
44: 		auto &group_type = group->return_type;
45: 		if (!stats) {
46: 			// no stats, but we might still be able to use perfect hashing if the type is small enough
47: 			// for small types we can just set the stats to [type_min, type_max]
48: 			switch (group_type.InternalType()) {
49: 			case PhysicalType::INT8:
50: 				stats = make_unique<NumericStatistics>(group_type, Value::MinimumValue(group_type),
51: 				                                       Value::MaximumValue(group_type));
52: 				break;
53: 			case PhysicalType::INT16:
54: 				stats = make_unique<NumericStatistics>(group_type, Value::MinimumValue(group_type),
55: 				                                       Value::MaximumValue(group_type));
56: 				break;
57: 			default:
58: 				// type is too large and there are no stats: skip perfect hashing
59: 				return false;
60: 			}
61: 			// we had no stats before, so we have no clue if there are null values or not
62: 			stats->validity_stats = make_unique<ValidityStatistics>(true);
63: 		}
64: 		auto &nstats = (NumericStatistics &)*stats;
65: 
66: 		if (nstats.min.is_null || nstats.max.is_null) {
67: 			return false;
68: 		}
69: 		// we have a min and a max value for the stats: use that to figure out how many bits we have
70: 		// we add two here, one for the NULL value, and one to make the computation one-indexed
71: 		// (e.g. if min and max are the same, we still need one entry in total)
72: 		int64_t range;
73: 		switch (group_type.InternalType()) {
74: 		case PhysicalType::INT8:
75: 			range = int64_t(nstats.max.GetValueUnsafe<int8_t>()) - int64_t(nstats.min.GetValueUnsafe<int8_t>());
76: 			break;
77: 		case PhysicalType::INT16:
78: 			range = int64_t(nstats.max.GetValueUnsafe<int16_t>()) - int64_t(nstats.min.GetValueUnsafe<int16_t>());
79: 			break;
80: 		case PhysicalType::INT32:
81: 			range = int64_t(nstats.max.GetValueUnsafe<int32_t>()) - int64_t(nstats.min.GetValueUnsafe<int32_t>());
82: 			break;
83: 		case PhysicalType::INT64:
84: 			if (!TrySubtractOperator::Operation(nstats.max.GetValueUnsafe<int64_t>(),
85: 			                                    nstats.min.GetValueUnsafe<int64_t>(), range)) {
86: 				return false;
87: 			}
88: 			break;
89: 		default:
90: 			throw InternalException("Unsupported type for perfect hash (should be caught before)");
91: 		}
92: 		// bail out on any range bigger than 2^32
93: 		if (range >= NumericLimits<int32_t>::Maximum()) {
94: 			return false;
95: 		}
96: 		range += 2;
97: 		// figure out how many bits we need
98: 		idx_t required_bits = RequiredBitsForValue(range);
99: 		bits_per_group.push_back(required_bits);
100: 		perfect_hash_bits += required_bits;
101: 		// check if we have exceeded the bits for the hash
102: 		if (perfect_hash_bits > context.perfect_ht_threshold) {
103: 			// too many bits for perfect hash
104: 			return false;
105: 		}
106: 	}
107: 	for (auto &expression : op.expressions) {
108: 		auto &aggregate = (BoundAggregateExpression &)*expression;
109: 		if (aggregate.distinct || !aggregate.function.combine) {
110: 			// distinct aggregates are not supported in perfect hash aggregates
111: 			return false;
112: 		}
113: 	}
114: 	return true;
115: }
116: 
117: unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalAggregate &op) {
118: 	unique_ptr<PhysicalOperator> groupby;
119: 	D_ASSERT(op.children.size() == 1);
120: 
121: 	bool all_combinable = true;
122: 	for (auto &expression : op.expressions) {
123: 		auto &aggregate = (BoundAggregateExpression &)*expression;
124: 		if (!aggregate.function.combine) {
125: 			// unsupported aggregate for simple aggregation: use hash aggregation
126: 			all_combinable = false;
127: 			break;
128: 		}
129: 	}
130: 
131: 	auto plan = CreatePlan(*op.children[0]);
132: 
133: 	plan = ExtractAggregateExpressions(move(plan), op.expressions, op.groups);
134: 
135: 	if (op.groups.empty()) {
136: 		// no groups, check if we can use a simple aggregation
137: 		// special case: aggregate entire columns together
138: 		bool use_simple_aggregation = true;
139: 		for (auto &expression : op.expressions) {
140: 			auto &aggregate = (BoundAggregateExpression &)*expression;
141: 			if (!aggregate.function.simple_update || aggregate.distinct) {
142: 				// unsupported aggregate for simple aggregation: use hash aggregation
143: 				use_simple_aggregation = false;
144: 				break;
145: 			}
146: 		}
147: 		if (use_simple_aggregation) {
148: 			groupby = make_unique_base<PhysicalOperator, PhysicalSimpleAggregate>(
149: 			    op.types, move(op.expressions), all_combinable, op.estimated_cardinality);
150: 		} else {
151: 			groupby = make_unique_base<PhysicalOperator, PhysicalHashAggregate>(context, op.types, move(op.expressions),
152: 			                                                                    op.estimated_cardinality);
153: 		}
154: 	} else {
155: 		// groups! create a GROUP BY aggregator
156: 		// use a perfect hash aggregate if possible
157: 		vector<idx_t> required_bits;
158: 		if (CanUsePerfectHashAggregate(context, op, required_bits)) {
159: 			groupby = make_unique_base<PhysicalOperator, PhysicalPerfectHashAggregate>(
160: 			    context, op.types, move(op.expressions), move(op.groups), move(op.group_stats), move(required_bits),
161: 			    op.estimated_cardinality);
162: 		} else {
163: 			groupby = make_unique_base<PhysicalOperator, PhysicalHashAggregate>(
164: 			    context, op.types, move(op.expressions), move(op.groups), op.estimated_cardinality);
165: 		}
166: 	}
167: 	groupby->children.push_back(move(plan));
168: 	return groupby;
169: }
170: 
171: unique_ptr<PhysicalOperator>
172: PhysicalPlanGenerator::ExtractAggregateExpressions(unique_ptr<PhysicalOperator> child,
173:                                                    vector<unique_ptr<Expression>> &aggregates,
174:                                                    vector<unique_ptr<Expression>> &groups) {
175: 	vector<unique_ptr<Expression>> expressions;
176: 	vector<LogicalType> types;
177: 
178: 	for (auto &group : groups) {
179: 		auto ref = make_unique<BoundReferenceExpression>(group->return_type, expressions.size());
180: 		types.push_back(group->return_type);
181: 		expressions.push_back(move(group));
182: 		group = move(ref);
183: 	}
184: 
185: 	for (auto &aggr : aggregates) {
186: 		auto &bound_aggr = (BoundAggregateExpression &)*aggr;
187: 		for (auto &child : bound_aggr.children) {
188: 			auto ref = make_unique<BoundReferenceExpression>(child->return_type, expressions.size());
189: 			types.push_back(child->return_type);
190: 			expressions.push_back(move(child));
191: 			child = move(ref);
192: 		}
193: 		if (bound_aggr.filter) {
194: 			auto &filter = bound_aggr.filter;
195: 			auto ref = make_unique<BoundReferenceExpression>(filter->return_type, expressions.size());
196: 			types.push_back(filter->return_type);
197: 			expressions.push_back(move(filter));
198: 			bound_aggr.filter = move(ref);
199: 		}
200: 	}
201: 	if (expressions.empty()) {
202: 		return child;
203: 	}
204: 	auto projection = make_unique<PhysicalProjection>(move(types), move(expressions), child->estimated_cardinality);
205: 	projection->children.push_back(move(child));
206: 	return move(projection);
207: }
208: 
209: } // namespace duckdb
[end of src/execution/physical_plan/plan_aggregate.cpp]
[start of src/function/aggregate/distributive/arg_min_max.cpp]
1: #include "duckdb/common/exception.hpp"
2: #include "duckdb/common/vector_operations/vector_operations.hpp"
3: #include "duckdb/function/aggregate/distributive_functions.hpp"
4: #include "duckdb/function/function_set.hpp"
5: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
6: 
7: #include <utility>
8: 
9: namespace duckdb {
10: 
11: template <class T, class T2>
12: struct ArgMinMaxState {
13: 	T arg;
14: 	T2 value;
15: 	bool is_initialized;
16: };
17: 
18: struct ArgMinMaxOperation {
19: 	template <class STATE>
20: 	static void Initialize(STATE *state) {
21: 		state->is_initialized = false;
22: 	}
23: 
24: 	template <class T, class STATE>
25: 	static void Finalize(Vector &result, FunctionData *, STATE *state, T *target, ValidityMask &mask, idx_t idx) {
26: 		if (!state->is_initialized) {
27: 			mask.SetInvalid(idx);
28: 		} else {
29: 			target[idx] = state->arg;
30: 		}
31: 	}
32: 
33: 	static bool IgnoreNull() {
34: 		return true;
35: 	}
36: };
37: 
38: struct ArgMinOperation : ArgMinMaxOperation {
39: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
40: 	static void Operation(STATE *state, FunctionData *bind_data, A_TYPE *x_data, B_TYPE *y_data, ValidityMask &amask,
41: 	                      ValidityMask &bmask, idx_t xidx, idx_t yidx) {
42: 		if (!state->is_initialized) {
43: 			state->value = y_data[yidx];
44: 			state->arg = x_data[xidx];
45: 			state->is_initialized = true;
46: 		} else {
47: 			if (y_data[yidx] < state->value) {
48: 				state->value = y_data[yidx];
49: 				state->arg = x_data[xidx];
50: 			}
51: 		}
52: 	}
53: 
54: 	template <class STATE, class OP>
55: 	static void Combine(const STATE &source, STATE *target) {
56: 		if (!source.is_initialized) {
57: 			return;
58: 		}
59: 		if (!target->is_initialized) {
60: 			target->is_initialized = true;
61: 			target->value = source.value;
62: 			target->arg = source.arg;
63: 			return;
64: 		}
65: 		if (source.value < target->value) {
66: 			target->value = source.value;
67: 			target->arg = source.arg;
68: 		}
69: 	}
70: };
71: 
72: struct ArgMaxOperation : ArgMinMaxOperation {
73: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
74: 	static void Operation(STATE *state, FunctionData *bind_data, A_TYPE *x_data, B_TYPE *y_data, ValidityMask &amask,
75: 	                      ValidityMask &bmask, idx_t xidx, idx_t yidx) {
76: 		if (!state->is_initialized) {
77: 			state->value = y_data[yidx];
78: 			state->arg = x_data[xidx];
79: 			state->is_initialized = true;
80: 		} else {
81: 			if (state->value < y_data[yidx]) {
82: 				state->value = y_data[yidx];
83: 				state->arg = x_data[xidx];
84: 			}
85: 		}
86: 	}
87: 
88: 	template <class STATE, class OP>
89: 	static void Combine(const STATE &source, STATE *target) {
90: 		if (!source.is_initialized) {
91: 			return;
92: 		}
93: 		if (!target->is_initialized) {
94: 			target->is_initialized = true;
95: 			target->value = source.value;
96: 			target->arg = source.arg;
97: 			return;
98: 		}
99: 		if (target->value < source.value) {
100: 			target->value = source.value;
101: 			target->arg = source.arg;
102: 		}
103: 	}
104: };
105: 
106: template <class OP, class T>
107: AggregateFunction GetArgMinMaxFunctionArg2(LogicalTypeId arg_2, const LogicalType &arg) {
108: 	switch (arg_2) {
109: 	case LogicalTypeId::INTEGER:
110: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, int>, T, int, T, OP>(arg, LogicalType::INTEGER,
111: 		                                                                                 arg);
112: 	case LogicalTypeId::BIGINT:
113: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
114: 		    arg, LogicalType::BIGINT, arg);
115: 	case LogicalTypeId::DOUBLE:
116: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, double>, T, double, T, OP>(arg, LogicalType::DOUBLE,
117: 		                                                                                       arg);
118: 	case LogicalTypeId::VARCHAR:
119: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, string_t>, T, string_t, T, OP>(
120: 		    arg, LogicalType::VARCHAR, arg);
121: 	case LogicalTypeId::DATE:
122: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
123: 		    arg, LogicalType::DATE, arg);
124: 	case LogicalTypeId::TIMESTAMP:
125: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
126: 		    arg, LogicalType::TIMESTAMP, arg);
127: 	case LogicalTypeId::BLOB:
128: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, string_t>, T, string_t, T, OP>(
129: 		    arg, LogicalType::BLOB, arg);
130: 	default:
131: 		throw InternalException("Unimplemented arg_min/arg_max aggregate");
132: 	}
133: }
134: 
135: template <class OP>
136: void GetArgMinMaxFunction(LogicalTypeId arg_1, AggregateFunctionSet &fun) {
137: 	switch (arg_1) {
138: 	case LogicalTypeId::INTEGER:
139: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::INTEGER, LogicalType::INTEGER));
140: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::BIGINT, LogicalType::INTEGER));
141: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::DOUBLE, LogicalType::INTEGER));
142: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::VARCHAR, LogicalType::INTEGER));
143: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::DATE, LogicalType::INTEGER));
144: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::TIMESTAMP, LogicalType::INTEGER));
145: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::BLOB, LogicalType::INTEGER));
146: 		break;
147: 	case LogicalTypeId::BIGINT:
148: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::BIGINT));
149: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::BIGINT));
150: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::BIGINT));
151: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::BIGINT));
152: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::BIGINT));
153: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::BIGINT));
154: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::BIGINT));
155: 		break;
156: 	case LogicalTypeId::DOUBLE:
157: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::INTEGER, LogicalType::DOUBLE));
158: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::BIGINT, LogicalType::DOUBLE));
159: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::DOUBLE, LogicalType::DOUBLE));
160: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::VARCHAR, LogicalType::DOUBLE));
161: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::DATE, LogicalType::DOUBLE));
162: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::TIMESTAMP, LogicalType::DOUBLE));
163: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::BLOB, LogicalType::DOUBLE));
164: 		break;
165: 	case LogicalTypeId::VARCHAR:
166: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::INTEGER, LogicalType::VARCHAR));
167: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BIGINT, LogicalType::VARCHAR));
168: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DOUBLE, LogicalType::VARCHAR));
169: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::VARCHAR, LogicalType::VARCHAR));
170: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DATE, LogicalType::VARCHAR));
171: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::TIMESTAMP, LogicalType::VARCHAR));
172: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BLOB, LogicalType::VARCHAR));
173: 		break;
174: 	case LogicalTypeId::DATE:
175: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::DATE));
176: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::DATE));
177: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::DATE));
178: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::DATE));
179: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::DATE));
180: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::DATE));
181: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::DATE));
182: 		break;
183: 	case LogicalTypeId::TIMESTAMP:
184: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::TIMESTAMP));
185: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::TIMESTAMP));
186: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::TIMESTAMP));
187: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::TIMESTAMP));
188: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::TIMESTAMP));
189: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::TIMESTAMP));
190: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::TIMESTAMP));
191: 		break;
192: 	case LogicalTypeId::BLOB:
193: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::INTEGER, LogicalType::BLOB));
194: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BIGINT, LogicalType::BLOB));
195: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DOUBLE, LogicalType::BLOB));
196: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::VARCHAR, LogicalType::BLOB));
197: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DATE, LogicalType::BLOB));
198: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::TIMESTAMP, LogicalType::BLOB));
199: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BLOB, LogicalType::BLOB));
200: 		break;
201: 	default:
202: 		throw InternalException("Unimplemented arg_min/arg_max aggregate");
203: 	}
204: }
205: void ArgMinFun::RegisterFunction(BuiltinFunctions &set) {
206: 	AggregateFunctionSet fun("argmin");
207: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::INTEGER, fun);
208: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::BIGINT, fun);
209: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::DOUBLE, fun);
210: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::VARCHAR, fun);
211: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::DATE, fun);
212: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::TIMESTAMP, fun);
213: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::BLOB, fun);
214: 	set.AddFunction(fun);
215: 
216: 	//! Add min_by alias
217: 	fun.name = "min_by";
218: 	set.AddFunction(fun);
219: 
220: 	//! Add arg_min alias
221: 	fun.name = "arg_min";
222: 	set.AddFunction(fun);
223: }
224: 
225: void ArgMaxFun::RegisterFunction(BuiltinFunctions &set) {
226: 	AggregateFunctionSet fun("argmax");
227: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::INTEGER, fun);
228: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::BIGINT, fun);
229: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::DOUBLE, fun);
230: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::VARCHAR, fun);
231: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::DATE, fun);
232: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::TIMESTAMP, fun);
233: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::BLOB, fun);
234: 	set.AddFunction(fun);
235: 
236: 	//! Add max_by alias
237: 	fun.name = "max_by";
238: 	set.AddFunction(fun);
239: 
240: 	//! Add arg_max alias
241: 	fun.name = "arg_max";
242: 	set.AddFunction(fun);
243: }
244: 
245: } // namespace duckdb
[end of src/function/aggregate/distributive/arg_min_max.cpp]
[start of src/function/aggregate/holistic/quantile.cpp]
1: #include "duckdb/execution/expression_executor.hpp"
2: #include "duckdb/function/aggregate/holistic_functions.hpp"
3: #include "duckdb/planner/expression.hpp"
4: #include "duckdb/common/operator/cast_operators.hpp"
5: #include "duckdb/common/types/chunk_collection.hpp"
6: #include "duckdb/common/types/timestamp.hpp"
7: 
8: #include <algorithm>
9: #include <queue>
10: #include <stdlib.h>
11: #include <utility>
12: 
13: namespace duckdb {
14: 
15: // HUGEINT scaling by a double
16: hugeint_t operator*(const hugeint_t &h, const double &d) {
17: 	return Hugeint::Convert(Hugeint::Cast<double>(h) * d);
18: }
19: 
20: using FrameBounds = std::pair<idx_t, idx_t>;
21: 
22: struct QuantileState {
23: 	data_ptr_t v;
24: 	idx_t len;
25: 	idx_t pos;
26: 
27: 	// List temporaries
28: 	std::vector<idx_t> disturbed;
29: 	std::vector<idx_t> lower;
30: 	std::vector<idx_t> upper;
31: 
32: 	QuantileState() : v(nullptr), len(0), pos(0) {
33: 	}
34: 
35: 	~QuantileState() {
36: 		if (v) {
37: 			free(v);
38: 			v = nullptr;
39: 		}
40: 	}
41: 
42: 	template <typename T>
43: 	void Resize(idx_t new_len) {
44: 		if (new_len <= len) {
45: 			return;
46: 		}
47: 		v = (data_ptr_t)realloc(v, new_len * sizeof(T));
48: 		if (!v) {
49: 			throw InternalException("Memory allocation failure");
50: 		}
51: 		len = new_len;
52: 	}
53: };
54: 
55: void ReuseIndexes(idx_t *index, const FrameBounds &frame, const FrameBounds &prev) {
56: 	idx_t j = 0;
57: 
58: 	//  Copy overlapping indices
59: 	for (idx_t p = 0; p < (prev.second - prev.first); ++p) {
60: 		auto idx = index[p];
61: 
62: 		//  Shift down into any hole
63: 		if (j != p) {
64: 			index[j] = idx;
65: 		}
66: 
67: 		//  Skip overlapping values
68: 		if (frame.first <= idx && idx < frame.second) {
69: 			++j;
70: 		}
71: 	}
72: 
73: 	//  Insert new indices
74: 	if (j > 0) {
75: 		// Overlap: append the new ends
76: 		for (auto f = frame.first; f < prev.first; ++f, ++j) {
77: 			index[j] = f;
78: 		}
79: 		for (auto f = prev.second; f < frame.second; ++f, ++j) {
80: 			index[j] = f;
81: 		}
82: 	} else {
83: 		//  No overlap: overwrite with new values
84: 		for (auto f = frame.first; f < frame.second; ++f, ++j) {
85: 			index[j] = f;
86: 		}
87: 	}
88: }
89: 
90: template <class STATE>
91: static idx_t ReplaceIndex(STATE *state, const FrameBounds &frame, const FrameBounds &prev) {
92: 	D_ASSERT(state->v);
93: 	auto index = (idx_t *)state->v;
94: 
95: 	idx_t j = 0;
96: 	for (idx_t p = 0; p < (prev.second - prev.first); ++p) {
97: 		auto idx = index[p];
98: 		if (j != p) {
99: 			break;
100: 		}
101: 
102: 		if (frame.first <= idx && idx < frame.second) {
103: 			++j;
104: 		}
105: 	}
106: 	index[j] = frame.second - 1;
107: 
108: 	return j;
109: }
110: 
111: template <class INPUT_TYPE, class STATE>
112: static inline bool CanReplace(STATE *state, const INPUT_TYPE *fdata, const idx_t j, const idx_t k0, const idx_t k1) {
113: 	auto same = false;
114: 
115: 	D_ASSERT(state->v);
116: 	auto index = (idx_t *)state->v;
117: 
118: 	auto curr = fdata[index[j]];
119: 	if (k1 < j) {
120: 		auto hi = fdata[index[k1]];
121: 		same = hi < curr;
122: 	} else if (j < k0) {
123: 		auto lo = fdata[index[k0]];
124: 		same = curr < lo;
125: 	}
126: 
127: 	return same;
128: }
129: 
130: struct IndirectNotNull {
131: 	inline explicit IndirectNotNull(const ValidityMask &mask_p, idx_t bias_p) : mask(mask_p), bias(bias_p) {
132: 	}
133: 
134: 	inline bool operator()(const idx_t &idx) const {
135: 		return mask.RowIsValid(idx - bias);
136: 	}
137: 	const ValidityMask &mask;
138: 	const idx_t bias;
139: };
140: 
141: template <class INPUT_TYPE>
142: struct IndirectLess {
143: 	inline explicit IndirectLess(const INPUT_TYPE *inputs_p) : inputs(inputs_p) {
144: 	}
145: 
146: 	inline bool operator()(const idx_t &lhi, const idx_t &rhi) const {
147: 		return inputs[lhi] < inputs[rhi];
148: 	}
149: 
150: 	const INPUT_TYPE *inputs;
151: };
152: 
153: template <class INPUT_TYPE, class TARGET_TYPE, bool DISCRETE>
154: struct Interpolator {
155: 	Interpolator(const double q, const idx_t n_p) : n(n_p), RN((double)(n_p - 1) * q), FRN(floor(RN)), CRN(ceil(RN)) {
156: 	}
157: 
158: 	TARGET_TYPE operator()(INPUT_TYPE *v_t) const {
159: 		if (CRN == FRN) {
160: 			std::nth_element(v_t, v_t + FRN, v_t + n);
161: 			return Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[FRN]);
162: 		} else {
163: 			std::nth_element(v_t, v_t + FRN, v_t + n);
164: 			std::nth_element(v_t + FRN, v_t + CRN, v_t + n);
165: 			auto lo = Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[FRN]);
166: 			auto hi = Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[CRN]);
167: 			auto delta = hi - lo;
168: 			return lo + delta * (RN - FRN);
169: 		}
170: 	}
171: 
172: 	TARGET_TYPE operator()(const INPUT_TYPE *v_t, const idx_t *index) const {
173: 		if (CRN == FRN) {
174: 			return Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[index[FRN]]);
175: 		} else {
176: 			auto lo = Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[index[FRN]]);
177: 			auto hi = Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[index[CRN]]);
178: 			auto delta = hi - lo;
179: 			return lo + delta * (RN - FRN);
180: 		}
181: 	}
182: 
183: 	const idx_t n;
184: 	const double RN;
185: 	const idx_t FRN;
186: 	const idx_t CRN;
187: };
188: 
189: template <class INPUT_TYPE, class TARGET_TYPE>
190: struct Interpolator<INPUT_TYPE, TARGET_TYPE, true> {
191: 	Interpolator(const double q, const idx_t n_p) : n(n_p), RN((double)(n_p - 1) * q), FRN(floor(RN)), CRN(FRN) {
192: 	}
193: 
194: 	TARGET_TYPE operator()(INPUT_TYPE *v_t) const {
195: 		std::nth_element(v_t, v_t + FRN, v_t + n);
196: 		return Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[FRN]);
197: 	}
198: 
199: 	TARGET_TYPE operator()(const INPUT_TYPE *v_t, const idx_t *index) {
200: 		return Cast::Operation<INPUT_TYPE, TARGET_TYPE>(v_t[index[FRN]]);
201: 	}
202: 
203: 	const idx_t n;
204: 	const double RN;
205: 	const idx_t FRN;
206: 	const idx_t CRN;
207: };
208: 
209: struct QuantileBindData : public FunctionData {
210: 	explicit QuantileBindData(double quantile_p) : quantiles(1, quantile_p), order(1, 0) {
211: 	}
212: 
213: 	explicit QuantileBindData(const vector<double> &quantiles_p) : quantiles(quantiles_p) {
214: 		for (idx_t i = 0; i < quantiles.size(); ++i) {
215: 			order.push_back(i);
216: 		}
217: 
218: 		IndirectLess<double> lt(quantiles.data());
219: 		std::sort(order.begin(), order.end(), lt);
220: 	}
221: 
222: 	unique_ptr<FunctionData> Copy() override {
223: 		return make_unique<QuantileBindData>(quantiles);
224: 	}
225: 
226: 	bool Equals(FunctionData &other_p) override {
227: 		auto &other = (QuantileBindData &)other_p;
228: 		return quantiles == other.quantiles;
229: 	}
230: 
231: 	vector<double> quantiles;
232: 	vector<idx_t> order;
233: };
234: 
235: template <typename SAVE_TYPE>
236: struct QuantileOperation {
237: 	template <class STATE>
238: 	static void Initialize(STATE *state) {
239: 		new (state) STATE;
240: 	}
241: 
242: 	template <class INPUT_TYPE, class STATE, class OP>
243: 	static void ConstantOperation(STATE *state, FunctionData *bind_data, INPUT_TYPE *input, ValidityMask &mask,
244: 	                              idx_t count) {
245: 		for (idx_t i = 0; i < count; i++) {
246: 			Operation<INPUT_TYPE, STATE, OP>(state, bind_data, input, mask, 0);
247: 		}
248: 	}
249: 
250: 	template <class INPUT_TYPE, class STATE, class OP>
251: 	static void Operation(STATE *state, FunctionData *bind_data_p, INPUT_TYPE *data, ValidityMask &mask, idx_t idx) {
252: 		if (state->pos == state->len) {
253: 			// growing conservatively here since we could be running this on many small groups
254: 			state->template Resize<SAVE_TYPE>(state->len == 0 ? 1 : state->len * 2);
255: 		}
256: 		D_ASSERT(state->v);
257: 		((SAVE_TYPE *)state->v)[state->pos++] = data[idx];
258: 	}
259: 
260: 	template <class STATE, class OP>
261: 	static void Combine(const STATE &source, STATE *target) {
262: 		if (source.pos == 0) {
263: 			return;
264: 		}
265: 		target->template Resize<SAVE_TYPE>(target->pos + source.pos);
266: 		memcpy(target->v + target->pos * sizeof(SAVE_TYPE), source.v, source.pos * sizeof(SAVE_TYPE));
267: 		target->pos += source.pos;
268: 	}
269: 
270: 	template <class STATE>
271: 	static void Destroy(STATE *state) {
272: 		state->~STATE();
273: 	}
274: 
275: 	static bool IgnoreNull() {
276: 		return true;
277: 	}
278: };
279: 
280: template <class STATE_TYPE, class RESULT_TYPE, class OP>
281: static void ExecuteListFinalize(Vector &states, FunctionData *bind_data_p, Vector &result, idx_t count, idx_t offset) {
282: 	D_ASSERT(result.GetType().id() == LogicalTypeId::LIST);
283: 
284: 	D_ASSERT(bind_data_p);
285: 	auto bind_data = (QuantileBindData *)bind_data_p;
286: 	ListVector::SetListSize(result, 0);
287: 
288: 	if (states.GetVectorType() == VectorType::CONSTANT_VECTOR) {
289: 		result.SetVectorType(VectorType::CONSTANT_VECTOR);
290: 		ListVector::Reserve(result, bind_data->quantiles.size());
291: 
292: 		auto sdata = ConstantVector::GetData<STATE_TYPE *>(states);
293: 		auto rdata = ConstantVector::GetData<RESULT_TYPE>(result);
294: 		auto &mask = ConstantVector::Validity(result);
295: 		OP::template Finalize<RESULT_TYPE, STATE_TYPE>(result, bind_data, sdata[0], rdata, mask, 0);
296: 	} else {
297: 		D_ASSERT(states.GetVectorType() == VectorType::FLAT_VECTOR);
298: 		result.SetVectorType(VectorType::FLAT_VECTOR);
299: 		ListVector::Reserve(result, count * bind_data->quantiles.size());
300: 
301: 		auto sdata = FlatVector::GetData<STATE_TYPE *>(states);
302: 		auto rdata = FlatVector::GetData<RESULT_TYPE>(result);
303: 		auto &mask = FlatVector::Validity(result);
304: 		for (idx_t i = 0; i < count; i++) {
305: 			OP::template Finalize<RESULT_TYPE, STATE_TYPE>(result, bind_data, sdata[i], rdata, mask, i + offset);
306: 		}
307: 	}
308: 
309: 	result.Verify(count);
310: }
311: 
312: template <class STATE, class INPUT_TYPE, class RESULT_TYPE, class OP>
313: static AggregateFunction QuantileListAggregate(const LogicalType &input_type, const LogicalType &child_type) {
314: 	LogicalType result_type = LogicalType::LIST(child_type);
315: 	return AggregateFunction(
316: 	    {input_type}, result_type, AggregateFunction::StateSize<STATE>, AggregateFunction::StateInitialize<STATE, OP>,
317: 	    AggregateFunction::UnaryScatterUpdate<STATE, INPUT_TYPE, OP>, AggregateFunction::StateCombine<STATE, OP>,
318: 	    ExecuteListFinalize<STATE, RESULT_TYPE, OP>, AggregateFunction::UnaryUpdate<STATE, INPUT_TYPE, OP>, nullptr,
319: 	    AggregateFunction::StateDestroy<STATE, OP>);
320: }
321: 
322: template <class SAVE_TYPE, bool DISCRETE>
323: struct QuantileScalarOperation : public QuantileOperation<SAVE_TYPE> {
324: 
325: 	template <class RESULT_TYPE, class STATE>
326: 	static void Finalize(Vector &result, FunctionData *bind_data_p, STATE *state, RESULT_TYPE *target,
327: 	                     ValidityMask &mask, idx_t idx) {
328: 		if (state->pos == 0) {
329: 			mask.SetInvalid(idx);
330: 			return;
331: 		}
332: 		D_ASSERT(state->v);
333: 		D_ASSERT(bind_data_p);
334: 		auto bind_data = (QuantileBindData *)bind_data_p;
335: 		D_ASSERT(bind_data->quantiles.size() == 1);
336: 		Interpolator<SAVE_TYPE, RESULT_TYPE, DISCRETE> interp(bind_data->quantiles[0], state->pos);
337: 		auto v_t = (SAVE_TYPE *)state->v;
338: 		target[idx] = interp(v_t);
339: 	}
340: 
341: 	template <class STATE, class INPUT_TYPE, class RESULT_TYPE>
342: 	static void Window(const INPUT_TYPE *data, const ValidityMask &dmask, FunctionData *bind_data_p, STATE *state,
343: 	                   const FrameBounds &frame, const FrameBounds &prev, Vector &result, idx_t ridx) {
344: 		auto rdata = FlatVector::GetData<RESULT_TYPE>(result);
345: 		auto &rmask = FlatVector::Validity(result);
346: 
347: 		//  Lazily initialise frame state
348: 		const auto prev_valid = state->pos == (prev.second - prev.first);
349: 		state->pos = frame.second - frame.first;
350: 		state->template Resize<idx_t>(state->pos);
351: 
352: 		D_ASSERT(state->v);
353: 		auto index = (idx_t *)state->v;
354: 
355: 		D_ASSERT(bind_data_p);
356: 		auto bind_data = (QuantileBindData *)bind_data_p;
357: 
358: 		// Find the two positions needed
359: 		const auto q = bind_data->quantiles[0];
360: 
361: 		bool same = false;
362: 		if (prev_valid && dmask.AllValid() && frame.first == prev.first + 1 && frame.second == prev.second + 1) {
363: 			//  Fixed frame size
364: 			const auto j = ReplaceIndex(state, frame, prev);
365: 			Interpolator<INPUT_TYPE, RESULT_TYPE, DISCRETE> interp(q, state->pos);
366: 			same = CanReplace(state, data, j, interp.FRN, interp.CRN);
367: 		} else {
368: 			ReuseIndexes(index, frame, prev);
369: 		}
370: 
371: 		if (!same) {
372: 			if (!dmask.AllValid()) {
373: 				IndirectNotNull not_null(dmask, MinValue(frame.first, prev.first));
374: 				state->pos = std::partition(index, index + state->pos, not_null) - index;
375: 			}
376: 			if (state->pos) {
377: 				Interpolator<INPUT_TYPE, RESULT_TYPE, DISCRETE> interp(q, state->pos);
378: 				IndirectLess<INPUT_TYPE> lt(data);
379: 				std::nth_element(index, index + interp.FRN, index + state->pos, lt);
380: 				if (interp.CRN != interp.FRN) {
381: 					std::nth_element(index + interp.CRN, index + interp.CRN, index + interp.n, lt);
382: 				}
383: 				rdata[ridx] = interp(data, index);
384: 			} else {
385: 				rmask.Set(ridx, false);
386: 			}
387: 		} else {
388: 			Interpolator<INPUT_TYPE, RESULT_TYPE, DISCRETE> interp(q, state->pos);
389: 			rdata[ridx] = interp(data, index);
390: 		}
391: 	}
392: };
393: 
394: template <typename INPUT_TYPE>
395: AggregateFunction GetTypedDiscreteQuantileAggregateFunction(const LogicalType &type) {
396: 	using STATE = QuantileState;
397: 	using OP = QuantileScalarOperation<INPUT_TYPE, true>;
398: 	auto fun = AggregateFunction::UnaryAggregateDestructor<STATE, INPUT_TYPE, INPUT_TYPE, OP>(type, type);
399: 	fun.window = AggregateFunction::UnaryWindow<STATE, INPUT_TYPE, INPUT_TYPE, OP>;
400: 	return fun;
401: }
402: 
403: AggregateFunction GetDiscreteQuantileAggregateFunction(const LogicalType &type) {
404: 	switch (type.id()) {
405: 	case LogicalTypeId::TINYINT:
406: 		return GetTypedDiscreteQuantileAggregateFunction<int8_t>(type);
407: 	case LogicalTypeId::SMALLINT:
408: 		return GetTypedDiscreteQuantileAggregateFunction<int16_t>(type);
409: 	case LogicalTypeId::INTEGER:
410: 		return GetTypedDiscreteQuantileAggregateFunction<int32_t>(type);
411: 	case LogicalTypeId::BIGINT:
412: 		return GetTypedDiscreteQuantileAggregateFunction<int64_t>(type);
413: 	case LogicalTypeId::HUGEINT:
414: 		return GetTypedDiscreteQuantileAggregateFunction<hugeint_t>(type);
415: 
416: 	case LogicalTypeId::FLOAT:
417: 		return GetTypedDiscreteQuantileAggregateFunction<float>(type);
418: 	case LogicalTypeId::DOUBLE:
419: 		return GetTypedDiscreteQuantileAggregateFunction<double>(type);
420: 	case LogicalTypeId::DECIMAL:
421: 		switch (type.InternalType()) {
422: 		case PhysicalType::INT16:
423: 			return GetTypedDiscreteQuantileAggregateFunction<int16_t>(type);
424: 		case PhysicalType::INT32:
425: 			return GetTypedDiscreteQuantileAggregateFunction<int32_t>(type);
426: 		case PhysicalType::INT64:
427: 			return GetTypedDiscreteQuantileAggregateFunction<int64_t>(type);
428: 		case PhysicalType::INT128:
429: 			return GetTypedDiscreteQuantileAggregateFunction<hugeint_t>(type);
430: 		default:
431: 			throw NotImplementedException("Unimplemented discrete quantile aggregate");
432: 		}
433: 		break;
434: 
435: 	case LogicalTypeId::DATE:
436: 		return GetTypedDiscreteQuantileAggregateFunction<int32_t>(type);
437: 	case LogicalTypeId::TIMESTAMP:
438: 		return GetTypedDiscreteQuantileAggregateFunction<int64_t>(type);
439: 	case LogicalTypeId::TIME:
440: 		return GetTypedDiscreteQuantileAggregateFunction<int64_t>(type);
441: 	case LogicalTypeId::INTERVAL:
442: 		return GetTypedDiscreteQuantileAggregateFunction<interval_t>(type);
443: 
444: 	default:
445: 		throw NotImplementedException("Unimplemented discrete quantile aggregate");
446: 	}
447: }
448: 
449: template <class SAVE_TYPE, class CHILD_TYPE, bool DISCRETE>
450: struct QuantileListOperation : public QuantileOperation<SAVE_TYPE> {
451: 
452: 	template <class RESULT_TYPE, class STATE>
453: 	static void Finalize(Vector &result_list, FunctionData *bind_data_p, STATE *state, RESULT_TYPE *target,
454: 	                     ValidityMask &mask, idx_t idx) {
455: 		if (state->pos == 0) {
456: 			mask.SetInvalid(idx);
457: 			return;
458: 		}
459: 
460: 		D_ASSERT(bind_data_p);
461: 		auto bind_data = (QuantileBindData *)bind_data_p;
462: 
463: 		auto &result = ListVector::GetEntry(result_list);
464: 		auto ridx = ListVector::GetListSize(result_list);
465: 		ListVector::Reserve(result_list, ridx + bind_data->quantiles.size());
466: 		auto rdata = FlatVector::GetData<CHILD_TYPE>(result);
467: 
468: 		D_ASSERT(state->v);
469: 		auto v_t = (SAVE_TYPE *)state->v;
470: 
471: 		target[idx].offset = ridx;
472: 		for (const auto &quantile : bind_data->quantiles) {
473: 			Interpolator<SAVE_TYPE, CHILD_TYPE, DISCRETE> interp(quantile, state->pos);
474: 			rdata[ridx] = interp(v_t);
475: 			++ridx;
476: 		}
477: 		target[idx].length = bind_data->quantiles.size();
478: 
479: 		ListVector::SetListSize(result_list, ridx);
480: 	}
481: 
482: 	template <class STATE, class INPUT_TYPE, class RESULT_TYPE>
483: 	static void Window(const INPUT_TYPE *data, const ValidityMask &dmask, FunctionData *bind_data_p, STATE *state,
484: 	                   const FrameBounds &frame, const FrameBounds &prev, Vector &list, idx_t lidx) {
485: 		D_ASSERT(bind_data_p);
486: 		auto bind_data = (QuantileBindData *)bind_data_p;
487: 
488: 		// Result is a constant LIST<RESULT_TYPE> with a fixed length
489: 		auto ldata = FlatVector::GetData<RESULT_TYPE>(list);
490: 		auto &lmask = FlatVector::Validity(list);
491: 		auto &lentry = ldata[lidx];
492: 		lentry.offset = ListVector::GetListSize(list);
493: 		lentry.length = bind_data->quantiles.size();
494: 
495: 		ListVector::Reserve(list, lentry.offset + lentry.length);
496: 		ListVector::SetListSize(list, lentry.offset + lentry.length);
497: 		auto &result = ListVector::GetEntry(list);
498: 		auto rdata = FlatVector::GetData<CHILD_TYPE>(result);
499: 
500: 		//  Lazily initialise frame state
501: 		const auto prev_valid = state->pos == (prev.second - prev.first);
502: 		state->pos = frame.second - frame.first;
503: 		state->template Resize<idx_t>(state->pos);
504: 
505: 		D_ASSERT(state->v);
506: 		auto index = (idx_t *)state->v;
507: 
508: 		bool fixed = false;
509: 		auto j = state->pos;
510: 		if (prev_valid && dmask.AllValid() && frame.first == prev.first + 1 && frame.second == prev.second + 1) {
511: 			//  Fixed frame size
512: 			j = ReplaceIndex(state, frame, prev);
513: 			fixed = true;
514: 		} else {
515: 			ReuseIndexes(index, frame, prev);
516: 			if (!dmask.AllValid()) {
517: 				IndirectNotNull not_null(dmask, MinValue(frame.first, prev.first));
518: 				state->pos = std::partition(index, index + state->pos, not_null) - index;
519: 			}
520: 		}
521: 
522: 		if (!state->pos) {
523: 			lmask.Set(lidx, false);
524: 			return;
525: 		}
526: 
527: 		// First pass: Fill in the undisturbed values and find the islands of stability.
528: 		state->disturbed.clear();
529: 		state->lower.clear();
530: 		state->upper.clear();
531: 		idx_t lb = 0;
532: 		for (idx_t i = 0; i < bind_data->order.size(); ++i) {
533: 			const auto q = bind_data->order[i];
534: 			const auto &quantile = bind_data->quantiles[q];
535: 			Interpolator<INPUT_TYPE, CHILD_TYPE, DISCRETE> interp(quantile, state->pos);
536: 
537: 			if (fixed && CanReplace(state, data, j, interp.FRN, interp.CRN)) {
538: 				rdata[lentry.offset + q] = interp(data, index);
539: 				state->upper.resize(state->lower.size(), interp.FRN);
540: 			} else {
541: 				state->disturbed.push_back(q);
542: 				state->lower.push_back(MinValue(lb, interp.FRN));
543: 			}
544: 			lb = interp.CRN + 1;
545: 		}
546: 		state->upper.resize(state->lower.size(), state->pos);
547: 
548: 		// Second pass: select the disturbed values
549: 		for (idx_t i = 0; i < state->disturbed.size(); ++i) {
550: 			const auto &q = state->disturbed[i];
551: 			const auto &quantile = bind_data->quantiles[q];
552: 			Interpolator<INPUT_TYPE, CHILD_TYPE, DISCRETE> interp(quantile, state->pos);
553: 
554: 			IndirectLess<INPUT_TYPE> lt(data);
555: 			std::nth_element(index + state->lower[i], index + interp.FRN, index + state->upper[i], lt);
556: 			if (interp.CRN != interp.FRN) {
557: 				std::nth_element(index + interp.CRN, index + interp.CRN, index + state->upper[i], lt);
558: 			}
559: 			rdata[lentry.offset + q] = interp(data, index);
560: 		}
561: 	}
562: };
563: 
564: template <typename INPUT_TYPE>
565: AggregateFunction GetTypedDiscreteQuantileListAggregateFunction(const LogicalType &type) {
566: 	using STATE = QuantileState;
567: 	using OP = QuantileListOperation<INPUT_TYPE, INPUT_TYPE, true>;
568: 	auto fun = QuantileListAggregate<STATE, INPUT_TYPE, list_entry_t, OP>(type, type);
569: 	fun.window = AggregateFunction::UnaryWindow<STATE, INPUT_TYPE, list_entry_t, OP>;
570: 	return fun;
571: }
572: 
573: AggregateFunction GetDiscreteQuantileListAggregateFunction(const LogicalType &type) {
574: 	switch (type.id()) {
575: 	case LogicalTypeId::TINYINT:
576: 		return GetTypedDiscreteQuantileListAggregateFunction<int8_t>(type);
577: 	case LogicalTypeId::SMALLINT:
578: 		return GetTypedDiscreteQuantileListAggregateFunction<int16_t>(type);
579: 	case LogicalTypeId::INTEGER:
580: 		return GetTypedDiscreteQuantileListAggregateFunction<int32_t>(type);
581: 	case LogicalTypeId::BIGINT:
582: 		return GetTypedDiscreteQuantileListAggregateFunction<int64_t>(type);
583: 	case LogicalTypeId::HUGEINT:
584: 		return GetTypedDiscreteQuantileListAggregateFunction<hugeint_t>(type);
585: 
586: 	case LogicalTypeId::FLOAT:
587: 		return GetTypedDiscreteQuantileListAggregateFunction<float>(type);
588: 	case LogicalTypeId::DOUBLE:
589: 		return GetTypedDiscreteQuantileListAggregateFunction<double>(type);
590: 	case LogicalTypeId::DECIMAL:
591: 		switch (type.InternalType()) {
592: 		case PhysicalType::INT16:
593: 			return GetTypedDiscreteQuantileListAggregateFunction<int16_t>(type);
594: 		case PhysicalType::INT32:
595: 			return GetTypedDiscreteQuantileListAggregateFunction<int32_t>(type);
596: 		case PhysicalType::INT64:
597: 			return GetTypedDiscreteQuantileListAggregateFunction<int64_t>(type);
598: 		case PhysicalType::INT128:
599: 			return GetTypedDiscreteQuantileListAggregateFunction<hugeint_t>(type);
600: 		default:
601: 			throw NotImplementedException("Unimplemented discrete quantile list aggregate");
602: 		}
603: 		break;
604: 
605: 	case LogicalTypeId::DATE:
606: 		return GetTypedDiscreteQuantileListAggregateFunction<date_t>(type);
607: 	case LogicalTypeId::TIMESTAMP:
608: 		return GetTypedDiscreteQuantileListAggregateFunction<timestamp_t>(type);
609: 	case LogicalTypeId::TIME:
610: 		return GetTypedDiscreteQuantileListAggregateFunction<dtime_t>(type);
611: 	case LogicalTypeId::INTERVAL:
612: 		return GetTypedDiscreteQuantileListAggregateFunction<interval_t>(type);
613: 
614: 	default:
615: 		throw NotImplementedException("Unimplemented discrete quantile list aggregate");
616: 	}
617: }
618: 
619: template <typename INPUT_TYPE, typename TARGET_TYPE>
620: AggregateFunction GetTypedContinuousQuantileAggregateFunction(const LogicalType &input_type,
621:                                                               const LogicalType &target_type) {
622: 	using STATE = QuantileState;
623: 	using OP = QuantileScalarOperation<INPUT_TYPE, false>;
624: 	auto fun = AggregateFunction::UnaryAggregateDestructor<STATE, INPUT_TYPE, TARGET_TYPE, OP>(input_type, target_type);
625: 	fun.window = AggregateFunction::UnaryWindow<STATE, INPUT_TYPE, TARGET_TYPE, OP>;
626: 	return fun;
627: }
628: 
629: AggregateFunction GetContinuousQuantileAggregateFunction(const LogicalType &type) {
630: 	switch (type.id()) {
631: 	case LogicalTypeId::TINYINT:
632: 		return GetTypedContinuousQuantileAggregateFunction<int8_t, double>(type, LogicalType::DOUBLE);
633: 	case LogicalTypeId::SMALLINT:
634: 		return GetTypedContinuousQuantileAggregateFunction<int16_t, double>(type, LogicalType::DOUBLE);
635: 	case LogicalTypeId::INTEGER:
636: 		return GetTypedContinuousQuantileAggregateFunction<int32_t, double>(type, LogicalType::DOUBLE);
637: 	case LogicalTypeId::BIGINT:
638: 		return GetTypedContinuousQuantileAggregateFunction<int64_t, double>(type, LogicalType::DOUBLE);
639: 	case LogicalTypeId::HUGEINT:
640: 		return GetTypedContinuousQuantileAggregateFunction<hugeint_t, double>(type, LogicalType::DOUBLE);
641: 
642: 	case LogicalTypeId::FLOAT:
643: 		return GetTypedContinuousQuantileAggregateFunction<float, float>(type, type);
644: 	case LogicalTypeId::DOUBLE:
645: 		return GetTypedContinuousQuantileAggregateFunction<double, double>(type, type);
646: 	case LogicalTypeId::DECIMAL:
647: 		switch (type.InternalType()) {
648: 		case PhysicalType::INT16:
649: 			return GetTypedContinuousQuantileAggregateFunction<int16_t, int16_t>(type, type);
650: 		case PhysicalType::INT32:
651: 			return GetTypedContinuousQuantileAggregateFunction<int32_t, int32_t>(type, type);
652: 		case PhysicalType::INT64:
653: 			return GetTypedContinuousQuantileAggregateFunction<int64_t, int64_t>(type, type);
654: 		case PhysicalType::INT128:
655: 			return GetTypedContinuousQuantileAggregateFunction<hugeint_t, hugeint_t>(type, type);
656: 		default:
657: 			throw NotImplementedException("Unimplemented continuous quantile DECIMAL aggregate");
658: 		}
659: 		break;
660: 
661: 	case LogicalTypeId::DATE:
662: 		return GetTypedContinuousQuantileAggregateFunction<date_t, timestamp_t>(type, LogicalType::TIMESTAMP);
663: 	case LogicalTypeId::TIMESTAMP:
664: 		return GetTypedContinuousQuantileAggregateFunction<timestamp_t, timestamp_t>(type, type);
665: 	case LogicalTypeId::TIME:
666: 		return GetTypedContinuousQuantileAggregateFunction<dtime_t, dtime_t>(type, type);
667: 
668: 	default:
669: 		throw NotImplementedException("Unimplemented continuous quantile aggregate");
670: 	}
671: }
672: 
673: template <typename INPUT_TYPE, typename CHILD_TYPE>
674: AggregateFunction GetTypedContinuousQuantileListAggregateFunction(const LogicalType &input_type,
675:                                                                   const LogicalType &result_type) {
676: 	using STATE = QuantileState;
677: 	using OP = QuantileListOperation<INPUT_TYPE, CHILD_TYPE, false>;
678: 	auto fun = QuantileListAggregate<STATE, INPUT_TYPE, list_entry_t, OP>(input_type, result_type);
679: 	fun.window = AggregateFunction::UnaryWindow<STATE, INPUT_TYPE, list_entry_t, OP>;
680: 	return fun;
681: }
682: 
683: AggregateFunction GetContinuousQuantileListAggregateFunction(const LogicalType &type) {
684: 	switch (type.id()) {
685: 	case LogicalTypeId::TINYINT:
686: 		return GetTypedContinuousQuantileListAggregateFunction<int8_t, double>(type, LogicalType::DOUBLE);
687: 	case LogicalTypeId::SMALLINT:
688: 		return GetTypedContinuousQuantileListAggregateFunction<int16_t, double>(type, LogicalType::DOUBLE);
689: 	case LogicalTypeId::INTEGER:
690: 		return GetTypedContinuousQuantileListAggregateFunction<int32_t, double>(type, LogicalType::DOUBLE);
691: 	case LogicalTypeId::BIGINT:
692: 		return GetTypedContinuousQuantileListAggregateFunction<int64_t, double>(type, LogicalType::DOUBLE);
693: 	case LogicalTypeId::HUGEINT:
694: 		return GetTypedContinuousQuantileListAggregateFunction<hugeint_t, double>(type, LogicalType::DOUBLE);
695: 
696: 	case LogicalTypeId::FLOAT:
697: 		return GetTypedContinuousQuantileListAggregateFunction<float, float>(type, type);
698: 	case LogicalTypeId::DOUBLE:
699: 		return GetTypedContinuousQuantileListAggregateFunction<double, double>(type, type);
700: 	case LogicalTypeId::DECIMAL:
701: 		switch (type.InternalType()) {
702: 		case PhysicalType::INT16:
703: 			return GetTypedContinuousQuantileListAggregateFunction<int16_t, int16_t>(type, type);
704: 		case PhysicalType::INT32:
705: 			return GetTypedContinuousQuantileListAggregateFunction<int32_t, int32_t>(type, type);
706: 		case PhysicalType::INT64:
707: 			return GetTypedContinuousQuantileListAggregateFunction<int64_t, int64_t>(type, type);
708: 		case PhysicalType::INT128:
709: 			return GetTypedContinuousQuantileListAggregateFunction<hugeint_t, hugeint_t>(type, type);
710: 		default:
711: 			throw NotImplementedException("Unimplemented discrete quantile DECIMAL list aggregate");
712: 		}
713: 		break;
714: 
715: 	case LogicalTypeId::DATE:
716: 		return GetTypedContinuousQuantileListAggregateFunction<date_t, timestamp_t>(type, LogicalType::TIMESTAMP);
717: 	case LogicalTypeId::TIMESTAMP:
718: 		return GetTypedContinuousQuantileListAggregateFunction<timestamp_t, timestamp_t>(type, type);
719: 	case LogicalTypeId::TIME:
720: 		return GetTypedContinuousQuantileListAggregateFunction<dtime_t, dtime_t>(type, type);
721: 
722: 	default:
723: 		throw NotImplementedException("Unimplemented discrete quantile list aggregate");
724: 	}
725: }
726: 
727: unique_ptr<FunctionData> BindMedian(ClientContext &context, AggregateFunction &function,
728:                                     vector<unique_ptr<Expression>> &arguments) {
729: 	return make_unique<QuantileBindData>(0.5);
730: }
731: 
732: unique_ptr<FunctionData> BindMedianDecimal(ClientContext &context, AggregateFunction &function,
733:                                            vector<unique_ptr<Expression>> &arguments) {
734: 	auto bind_data = BindMedian(context, function, arguments);
735: 
736: 	function = GetDiscreteQuantileAggregateFunction(arguments[0]->return_type);
737: 	function.name = "median";
738: 	return bind_data;
739: }
740: 
741: static double CheckQuantile(const Value &quantile_val) {
742: 	auto quantile = quantile_val.GetValue<double>();
743: 
744: 	if (quantile_val.is_null || quantile < 0 || quantile > 1) {
745: 		throw BinderException("QUANTILE can only take parameters in the range [0, 1]");
746: 	}
747: 
748: 	return quantile;
749: }
750: 
751: unique_ptr<FunctionData> BindQuantile(ClientContext &context, AggregateFunction &function,
752:                                       vector<unique_ptr<Expression>> &arguments) {
753: 	if (!arguments[1]->IsFoldable()) {
754: 		throw BinderException("QUANTILE can only take constant parameters");
755: 	}
756: 	Value quantile_val = ExpressionExecutor::EvaluateScalar(*arguments[1]);
757: 	vector<double> quantiles;
758: 	if (quantile_val.type().id() != LogicalTypeId::LIST) {
759: 		quantiles.push_back(CheckQuantile(quantile_val));
760: 	} else {
761: 		for (const auto &element_val : quantile_val.list_value) {
762: 			quantiles.push_back(CheckQuantile(element_val));
763: 		}
764: 	}
765: 
766: 	arguments.pop_back();
767: 	return make_unique<QuantileBindData>(quantiles);
768: }
769: 
770: unique_ptr<FunctionData> BindDiscreteQuantileDecimal(ClientContext &context, AggregateFunction &function,
771:                                                      vector<unique_ptr<Expression>> &arguments) {
772: 	auto bind_data = BindQuantile(context, function, arguments);
773: 	function = GetDiscreteQuantileAggregateFunction(arguments[0]->return_type);
774: 	function.name = "quantile_disc";
775: 	return bind_data;
776: }
777: 
778: unique_ptr<FunctionData> BindDiscreteQuantileDecimalList(ClientContext &context, AggregateFunction &function,
779:                                                          vector<unique_ptr<Expression>> &arguments) {
780: 	auto bind_data = BindQuantile(context, function, arguments);
781: 	function = GetDiscreteQuantileListAggregateFunction(arguments[0]->return_type);
782: 	function.name = "quantile_disc";
783: 	return bind_data;
784: }
785: 
786: unique_ptr<FunctionData> BindContinuousQuantileDecimal(ClientContext &context, AggregateFunction &function,
787:                                                        vector<unique_ptr<Expression>> &arguments) {
788: 	auto bind_data = BindQuantile(context, function, arguments);
789: 	function = GetContinuousQuantileAggregateFunction(arguments[0]->return_type);
790: 	function.name = "quantile_cont";
791: 	return bind_data;
792: }
793: 
794: unique_ptr<FunctionData> BindContinuousQuantileDecimalList(ClientContext &context, AggregateFunction &function,
795:                                                            vector<unique_ptr<Expression>> &arguments) {
796: 	auto bind_data = BindQuantile(context, function, arguments);
797: 	function = GetContinuousQuantileListAggregateFunction(arguments[0]->return_type);
798: 	function.name = "quantile_cont";
799: 	return bind_data;
800: }
801: 
802: AggregateFunction GetMedianAggregate(const LogicalType &type) {
803: 	auto fun = (type.id() != LogicalTypeId::INTERVAL) ? GetContinuousQuantileAggregateFunction(type)
804: 	                                                  : GetDiscreteQuantileAggregateFunction(type);
805: 	fun.bind = BindMedian;
806: 	return fun;
807: }
808: 
809: AggregateFunction GetDiscreteQuantileAggregate(const LogicalType &type) {
810: 	auto fun = GetDiscreteQuantileAggregateFunction(type);
811: 	fun.bind = BindQuantile;
812: 	// temporarily push an argument so we can bind the actual quantile
813: 	fun.arguments.push_back(LogicalType::DOUBLE);
814: 	return fun;
815: }
816: 
817: AggregateFunction GetDiscreteQuantileListAggregate(const LogicalType &type) {
818: 	auto fun = GetDiscreteQuantileListAggregateFunction(type);
819: 	fun.bind = BindQuantile;
820: 	// temporarily push an argument so we can bind the actual quantile
821: 	auto list_of_double = LogicalType::LIST(LogicalType::DOUBLE);
822: 	fun.arguments.push_back(list_of_double);
823: 	return fun;
824: }
825: 
826: AggregateFunction GetContinuousQuantileAggregate(const LogicalType &type) {
827: 	auto fun = GetContinuousQuantileAggregateFunction(type);
828: 	fun.bind = BindQuantile;
829: 	// temporarily push an argument so we can bind the actual quantile
830: 	fun.arguments.push_back(LogicalType::DOUBLE);
831: 	return fun;
832: }
833: 
834: AggregateFunction GetContinuousQuantileListAggregate(const LogicalType &type) {
835: 	auto fun = GetContinuousQuantileListAggregateFunction(type);
836: 	fun.bind = BindQuantile;
837: 	// temporarily push an argument so we can bind the actual quantile
838: 	auto list_of_double = LogicalType::LIST(LogicalType::DOUBLE);
839: 	fun.arguments.push_back(list_of_double);
840: 	return fun;
841: }
842: 
843: void QuantileFun::RegisterFunction(BuiltinFunctions &set) {
844: 	const vector<LogicalType> QUANTILES = {LogicalType::TINYINT, LogicalType::SMALLINT, LogicalType::INTEGER,
845: 	                                       LogicalType::BIGINT,  LogicalType::HUGEINT,  LogicalType::FLOAT,
846: 	                                       LogicalType::DOUBLE,  LogicalType::DATE,     LogicalType::TIMESTAMP,
847: 	                                       LogicalType::TIME,    LogicalType::INTERVAL};
848: 
849: 	AggregateFunctionSet median("median");
850: 	median.AddFunction(AggregateFunction({LogicalTypeId::DECIMAL}, LogicalTypeId::DECIMAL, nullptr, nullptr, nullptr,
851: 	                                     nullptr, nullptr, nullptr, BindMedianDecimal));
852: 
853: 	AggregateFunctionSet quantile_disc("quantile_disc");
854: 	quantile_disc.AddFunction(AggregateFunction({LogicalTypeId::DECIMAL, LogicalType::DOUBLE}, LogicalTypeId::DECIMAL,
855: 	                                            nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
856: 	                                            BindDiscreteQuantileDecimal));
857: 	quantile_disc.AddFunction(AggregateFunction({LogicalTypeId::DECIMAL, LogicalType::LIST(LogicalType::DOUBLE)},
858: 	                                            LogicalType::LIST(LogicalTypeId::DECIMAL), nullptr, nullptr, nullptr,
859: 	                                            nullptr, nullptr, nullptr, BindDiscreteQuantileDecimalList));
860: 
861: 	AggregateFunctionSet quantile_cont("quantile_cont");
862: 	quantile_cont.AddFunction(AggregateFunction({LogicalTypeId::DECIMAL, LogicalType::DOUBLE}, LogicalTypeId::DECIMAL,
863: 	                                            nullptr, nullptr, nullptr, nullptr, nullptr, nullptr,
864: 	                                            BindContinuousQuantileDecimal));
865: 	quantile_cont.AddFunction(AggregateFunction({LogicalTypeId::DECIMAL, LogicalType::LIST(LogicalType::DOUBLE)},
866: 	                                            LogicalType::LIST(LogicalTypeId::DECIMAL), nullptr, nullptr, nullptr,
867: 	                                            nullptr, nullptr, nullptr, BindContinuousQuantileDecimalList));
868: 
869: 	for (const auto &type : QUANTILES) {
870: 		median.AddFunction(GetMedianAggregate(type));
871: 		quantile_disc.AddFunction(GetDiscreteQuantileAggregate(type));
872: 		quantile_disc.AddFunction(GetDiscreteQuantileListAggregate(type));
873: 		if (type.id() != LogicalTypeId::INTERVAL) {
874: 			quantile_cont.AddFunction(GetContinuousQuantileAggregate(type));
875: 			quantile_cont.AddFunction(GetContinuousQuantileListAggregate(type));
876: 		}
877: 	}
878: 
879: 	set.AddFunction(median);
880: 	set.AddFunction(quantile_disc);
881: 	set.AddFunction(quantile_cont);
882: 
883: 	quantile_disc.name = "quantile";
884: 	set.AddFunction(quantile_disc);
885: }
886: 
887: } // namespace duckdb
[end of src/function/aggregate/holistic/quantile.cpp]
[start of src/function/function.cpp]
1: #include "duckdb/function/function.hpp"
2: 
3: #include "duckdb/catalog/catalog.hpp"
4: #include "duckdb/catalog/catalog_entry/scalar_function_catalog_entry.hpp"
5: #include "duckdb/common/types/hash.hpp"
6: #include "duckdb/common/limits.hpp"
7: #include "duckdb/common/string_util.hpp"
8: #include "duckdb/function/aggregate_function.hpp"
9: #include "duckdb/function/cast_rules.hpp"
10: #include "duckdb/function/scalar/string_functions.hpp"
11: #include "duckdb/function/scalar_function.hpp"
12: #include "duckdb/parser/parsed_data/create_aggregate_function_info.hpp"
13: #include "duckdb/parser/parsed_data/create_collation_info.hpp"
14: #include "duckdb/parser/parsed_data/create_copy_function_info.hpp"
15: #include "duckdb/parser/parsed_data/create_pragma_function_info.hpp"
16: #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
17: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
18: #include "duckdb/parser/parsed_data/pragma_info.hpp"
19: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
20: #include "duckdb/planner/expression/bound_cast_expression.hpp"
21: #include "duckdb/planner/expression/bound_function_expression.hpp"
22: 
23: namespace duckdb {
24: 
25: // add your initializer for new functions here
26: void BuiltinFunctions::Initialize() {
27: 	RegisterSQLiteFunctions();
28: 	RegisterReadFunctions();
29: 	RegisterTableFunctions();
30: 	RegisterArrowFunctions();
31: 
32: 	RegisterAlgebraicAggregates();
33: 	RegisterDistributiveAggregates();
34: 	RegisterNestedAggregates();
35: 	RegisterHolisticAggregates();
36: 	RegisterRegressiveAggregates();
37: 
38: 	RegisterDateFunctions();
39: 	RegisterGenericFunctions();
40: 	RegisterMathFunctions();
41: 	RegisterOperators();
42: 	RegisterSequenceFunctions();
43: 	RegisterStringFunctions();
44: 	RegisterNestedFunctions();
45: 	RegisterTrigonometricsFunctions();
46: 
47: 	RegisterPragmaFunctions();
48: 
49: 	// initialize collations
50: 	AddCollation("nocase", LowerFun::GetFunction(), true);
51: 	AddCollation("noaccent", StripAccentsFun::GetFunction());
52: 	AddCollation("nfc", NFCNormalizeFun::GetFunction());
53: }
54: 
55: BuiltinFunctions::BuiltinFunctions(ClientContext &context, Catalog &catalog) : context(context), catalog(catalog) {
56: }
57: 
58: void BuiltinFunctions::AddCollation(string name, ScalarFunction function, bool combinable,
59:                                     bool not_required_for_equality) {
60: 	CreateCollationInfo info(move(name), move(function), combinable, not_required_for_equality);
61: 	catalog.CreateCollation(context, &info);
62: }
63: 
64: void BuiltinFunctions::AddFunction(AggregateFunctionSet set) {
65: 	CreateAggregateFunctionInfo info(move(set));
66: 	catalog.CreateFunction(context, &info);
67: }
68: 
69: void BuiltinFunctions::AddFunction(AggregateFunction function) {
70: 	CreateAggregateFunctionInfo info(move(function));
71: 	catalog.CreateFunction(context, &info);
72: }
73: 
74: void BuiltinFunctions::AddFunction(PragmaFunction function) {
75: 	CreatePragmaFunctionInfo info(move(function));
76: 	catalog.CreatePragmaFunction(context, &info);
77: }
78: 
79: void BuiltinFunctions::AddFunction(const string &name, vector<PragmaFunction> functions) {
80: 	CreatePragmaFunctionInfo info(name, move(functions));
81: 	catalog.CreatePragmaFunction(context, &info);
82: }
83: 
84: void BuiltinFunctions::AddFunction(ScalarFunction function) {
85: 	CreateScalarFunctionInfo info(move(function));
86: 	catalog.CreateFunction(context, &info);
87: }
88: 
89: void BuiltinFunctions::AddFunction(const vector<string> &names, ScalarFunction function) { // NOLINT: false positive
90: 	for (auto &name : names) {
91: 		function.name = name;
92: 		AddFunction(function);
93: 	}
94: }
95: 
96: void BuiltinFunctions::AddFunction(ScalarFunctionSet set) {
97: 	CreateScalarFunctionInfo info(move(set));
98: 	catalog.CreateFunction(context, &info);
99: }
100: 
101: void BuiltinFunctions::AddFunction(TableFunction function) {
102: 	CreateTableFunctionInfo info(move(function));
103: 	catalog.CreateTableFunction(context, &info);
104: }
105: 
106: void BuiltinFunctions::AddFunction(TableFunctionSet set) {
107: 	CreateTableFunctionInfo info(move(set));
108: 	catalog.CreateTableFunction(context, &info);
109: }
110: 
111: void BuiltinFunctions::AddFunction(CopyFunction function) {
112: 	CreateCopyFunctionInfo info(move(function));
113: 	catalog.CreateCopyFunction(context, &info);
114: }
115: 
116: hash_t BaseScalarFunction::Hash() const {
117: 	hash_t hash = return_type.Hash();
118: 	for (auto &arg : arguments) {
119: 		duckdb::CombineHash(hash, arg.Hash());
120: 	}
121: 	return hash;
122: }
123: 
124: string Function::CallToString(const string &name, const vector<LogicalType> &arguments) {
125: 	string result = name + "(";
126: 	result += StringUtil::Join(arguments, arguments.size(), ", ",
127: 	                           [](const LogicalType &argument) { return argument.ToString(); });
128: 	return result + ")";
129: }
130: 
131: string Function::CallToString(const string &name, const vector<LogicalType> &arguments,
132:                               const LogicalType &return_type) {
133: 	string result = CallToString(name, arguments);
134: 	result += " -> " + return_type.ToString();
135: 	return result;
136: }
137: 
138: string Function::CallToString(const string &name, const vector<LogicalType> &arguments,
139:                               const unordered_map<string, LogicalType> &named_parameters) {
140: 	vector<string> input_arguments;
141: 	input_arguments.reserve(arguments.size() + named_parameters.size());
142: 	for (auto &arg : arguments) {
143: 		input_arguments.push_back(arg.ToString());
144: 	}
145: 	for (auto &kv : named_parameters) {
146: 		input_arguments.push_back(StringUtil::Format("%s : %s", kv.first, kv.second.ToString()));
147: 	}
148: 	return StringUtil::Format("%s(%s)", name, StringUtil::Join(input_arguments, ", "));
149: }
150: 
151: static int64_t BindVarArgsFunctionCost(SimpleFunction &func, vector<LogicalType> &arguments) {
152: 	if (arguments.size() < func.arguments.size()) {
153: 		// not enough arguments to fulfill the non-vararg part of the function
154: 		return -1;
155: 	}
156: 	int64_t cost = 0;
157: 	for (idx_t i = 0; i < arguments.size(); i++) {
158: 		LogicalType arg_type = i < func.arguments.size() ? func.arguments[i] : func.varargs;
159: 		if (arguments[i] == arg_type) {
160: 			// arguments match: do nothing
161: 			continue;
162: 		}
163: 		int64_t cast_cost = CastRules::ImplicitCast(arguments[i], arg_type);
164: 		if (cast_cost >= 0) {
165: 			// we can implicitly cast, add the cost to the total cost
166: 			cost += cast_cost;
167: 		} else {
168: 			// we can't implicitly cast: throw an error
169: 			return -1;
170: 		}
171: 	}
172: 	return cost;
173: }
174: 
175: static int64_t BindFunctionCost(SimpleFunction &func, vector<LogicalType> &arguments) {
176: 	if (func.HasVarArgs()) {
177: 		// special case varargs function
178: 		return BindVarArgsFunctionCost(func, arguments);
179: 	}
180: 	if (func.arguments.size() != arguments.size()) {
181: 		// invalid argument count: check the next function
182: 		return -1;
183: 	}
184: 	int64_t cost = 0;
185: 	for (idx_t i = 0; i < arguments.size(); i++) {
186: 		if (arguments[i].id() == func.arguments[i].id()) {
187: 			// arguments match: do nothing
188: 			continue;
189: 		}
190: 		int64_t cast_cost = CastRules::ImplicitCast(arguments[i], func.arguments[i]);
191: 		if (cast_cost >= 0) {
192: 			// we can implicitly cast, add the cost to the total cost
193: 			cost += cast_cost;
194: 		} else {
195: 			// we can't implicitly cast: throw an error
196: 			return -1;
197: 		}
198: 	}
199: 	return cost;
200: }
201: 
202: template <class T>
203: static idx_t BindFunctionFromArguments(const string &name, vector<T> &functions, vector<LogicalType> &arguments,
204:                                        string &error) {
205: 	idx_t best_function = INVALID_INDEX;
206: 	int64_t lowest_cost = NumericLimits<int64_t>::Maximum();
207: 	vector<idx_t> conflicting_functions;
208: 	for (idx_t f_idx = 0; f_idx < functions.size(); f_idx++) {
209: 		auto &func = functions[f_idx];
210: 		// check the arguments of the function
211: 		int64_t cost = BindFunctionCost(func, arguments);
212: 		if (cost < 0) {
213: 			// auto casting was not possible
214: 			continue;
215: 		}
216: 		if (cost == lowest_cost) {
217: 			conflicting_functions.push_back(f_idx);
218: 			continue;
219: 		}
220: 		if (cost > lowest_cost) {
221: 			continue;
222: 		}
223: 		conflicting_functions.clear();
224: 		lowest_cost = cost;
225: 		best_function = f_idx;
226: 	}
227: 	if (!conflicting_functions.empty()) {
228: 		// there are multiple possible function definitions
229: 		// throw an exception explaining which overloads are there
230: 		conflicting_functions.push_back(best_function);
231: 		string call_str = Function::CallToString(name, arguments);
232: 		string candidate_str = "";
233: 		for (auto &conf : conflicting_functions) {
234: 			auto &f = functions[conf];
235: 			candidate_str += "\t" + f.ToString() + "\n";
236: 		}
237: 		error =
238: 		    StringUtil::Format("Could not choose a best candidate function for the function call \"%s\". In order to "
239: 		                       "select one, please add explicit type casts.\n\tCandidate functions:\n%s",
240: 		                       call_str, candidate_str);
241: 		return INVALID_INDEX;
242: 	}
243: 	if (best_function == INVALID_INDEX) {
244: 		// no matching function was found, throw an error
245: 		string call_str = Function::CallToString(name, arguments);
246: 		string candidate_str = "";
247: 		for (auto &f : functions) {
248: 			candidate_str += "\t" + f.ToString() + "\n";
249: 		}
250: 		error = StringUtil::Format("No function matches the given name and argument types '%s'. You might need to add "
251: 		                           "explicit type casts.\n\tCandidate functions:\n%s",
252: 		                           call_str, candidate_str);
253: 		return INVALID_INDEX;
254: 	}
255: 	return best_function;
256: }
257: 
258: idx_t Function::BindFunction(const string &name, vector<ScalarFunction> &functions, vector<LogicalType> &arguments,
259:                              string &error) {
260: 	return BindFunctionFromArguments(name, functions, arguments, error);
261: }
262: 
263: idx_t Function::BindFunction(const string &name, vector<AggregateFunction> &functions, vector<LogicalType> &arguments,
264:                              string &error) {
265: 	return BindFunctionFromArguments(name, functions, arguments, error);
266: }
267: 
268: idx_t Function::BindFunction(const string &name, vector<TableFunction> &functions, vector<LogicalType> &arguments,
269:                              string &error) {
270: 	return BindFunctionFromArguments(name, functions, arguments, error);
271: }
272: 
273: idx_t Function::BindFunction(const string &name, vector<PragmaFunction> &functions, PragmaInfo &info, string &error) {
274: 	vector<LogicalType> types;
275: 	for (auto &value : info.parameters) {
276: 		types.push_back(value.type());
277: 	}
278: 	idx_t entry = BindFunctionFromArguments(name, functions, types, error);
279: 	if (entry == INVALID_INDEX) {
280: 		throw BinderException(error);
281: 	}
282: 	auto &candidate_function = functions[entry];
283: 	// cast the input parameters
284: 	for (idx_t i = 0; i < info.parameters.size(); i++) {
285: 		auto target_type =
286: 		    i < candidate_function.arguments.size() ? candidate_function.arguments[i] : candidate_function.varargs;
287: 		info.parameters[i] = info.parameters[i].CastAs(target_type);
288: 	}
289: 	return entry;
290: }
291: 
292: vector<LogicalType> GetLogicalTypesFromExpressions(vector<unique_ptr<Expression>> &arguments) {
293: 	vector<LogicalType> types;
294: 	types.reserve(arguments.size());
295: 	for (auto &argument : arguments) {
296: 		types.push_back(argument->return_type);
297: 	}
298: 	return types;
299: }
300: 
301: idx_t Function::BindFunction(const string &name, vector<ScalarFunction> &functions,
302:                              vector<unique_ptr<Expression>> &arguments, string &error) {
303: 	auto types = GetLogicalTypesFromExpressions(arguments);
304: 	return Function::BindFunction(name, functions, types, error);
305: }
306: 
307: idx_t Function::BindFunction(const string &name, vector<AggregateFunction> &functions,
308:                              vector<unique_ptr<Expression>> &arguments, string &error) {
309: 	auto types = GetLogicalTypesFromExpressions(arguments);
310: 	return Function::BindFunction(name, functions, types, error);
311: }
312: 
313: idx_t Function::BindFunction(const string &name, vector<TableFunction> &functions,
314:                              vector<unique_ptr<Expression>> &arguments, string &error) {
315: 	auto types = GetLogicalTypesFromExpressions(arguments);
316: 	return Function::BindFunction(name, functions, types, error);
317: }
318: 
319: void BaseScalarFunction::CastToFunctionArguments(vector<unique_ptr<Expression>> &children) {
320: 	for (idx_t i = 0; i < children.size(); i++) {
321: 		auto target_type = i < this->arguments.size() ? this->arguments[i] : this->varargs;
322: 		target_type.Verify();
323: 		// check if the type of child matches the type of function argument
324: 		// if not we need to add a cast
325: 		bool require_cast = children[i]->return_type != target_type;
326: 		// except for one special case: if the function accepts ANY argument
327: 		// in that case we don't add a cast
328: 		if (target_type.id() == LogicalTypeId::ANY) {
329: 			if (children[i]->return_type.id() == LogicalTypeId::UNKNOWN) {
330: 				// UNLESS the child is a prepared statement parameter
331: 				// in that case we default the prepared statement parameter to VARCHAR
332: 				target_type = LogicalType::VARCHAR;
333: 			} else {
334: 				require_cast = false;
335: 			}
336: 		}
337: 		if (require_cast) {
338: 			children[i] = BoundCastExpression::AddCastToType(move(children[i]), target_type);
339: 		}
340: 	}
341: }
342: 
343: unique_ptr<BoundFunctionExpression> ScalarFunction::BindScalarFunction(ClientContext &context, const string &schema,
344:                                                                        const string &name,
345:                                                                        vector<unique_ptr<Expression>> children,
346:                                                                        string &error, bool is_operator) {
347: 	// bind the function
348: 	auto function = Catalog::GetCatalog(context).GetEntry(context, CatalogType::SCALAR_FUNCTION_ENTRY, schema, name);
349: 	D_ASSERT(function && function->type == CatalogType::SCALAR_FUNCTION_ENTRY);
350: 	return ScalarFunction::BindScalarFunction(context, (ScalarFunctionCatalogEntry &)*function, move(children), error,
351: 	                                          is_operator);
352: }
353: 
354: unique_ptr<BoundFunctionExpression> ScalarFunction::BindScalarFunction(ClientContext &context,
355:                                                                        ScalarFunctionCatalogEntry &func,
356:                                                                        vector<unique_ptr<Expression>> children,
357:                                                                        string &error, bool is_operator) {
358: 	// bind the function
359: 	idx_t best_function = Function::BindFunction(func.name, func.functions, children, error);
360: 	if (best_function == INVALID_INDEX) {
361: 		return nullptr;
362: 	}
363: 	// found a matching function!
364: 	auto &bound_function = func.functions[best_function];
365: 	return ScalarFunction::BindScalarFunction(context, bound_function, move(children), is_operator);
366: }
367: 
368: unique_ptr<BoundFunctionExpression> ScalarFunction::BindScalarFunction(ClientContext &context,
369:                                                                        ScalarFunction bound_function,
370:                                                                        vector<unique_ptr<Expression>> children,
371:                                                                        bool is_operator) {
372: 	unique_ptr<FunctionData> bind_info;
373: 	if (bound_function.bind) {
374: 		bind_info = bound_function.bind(context, bound_function, children);
375: 	}
376: 	// check if we need to add casts to the children
377: 	bound_function.CastToFunctionArguments(children);
378: 
379: 	// now create the function
380: 	auto return_type = bound_function.return_type;
381: 	return make_unique<BoundFunctionExpression>(move(return_type), move(bound_function), move(children),
382: 	                                            move(bind_info), is_operator);
383: }
384: 
385: unique_ptr<BoundAggregateExpression>
386: AggregateFunction::BindAggregateFunction(ClientContext &context, AggregateFunction bound_function,
387:                                          vector<unique_ptr<Expression>> children, unique_ptr<Expression> filter,
388:                                          bool is_distinct, unique_ptr<BoundOrderModifier> order_bys) {
389: 	unique_ptr<FunctionData> bind_info;
390: 	if (bound_function.bind) {
391: 		bind_info = bound_function.bind(context, bound_function, children);
392: 		// we may have lost some arguments in the bind
393: 		children.resize(MinValue(bound_function.arguments.size(), children.size()));
394: 	}
395: 
396: 	// check if we need to add casts to the children
397: 	bound_function.CastToFunctionArguments(children);
398: 
399: 	// Special case: for ORDER BY aggregates, we wrap the aggregate function in a SortedAggregateFunction
400: 	// The children are the sort clauses and the binding contains the ordering data.
401: 	if (order_bys && !order_bys->orders.empty()) {
402: 		bind_info = BindSortedAggregate(bound_function, children, move(bind_info), move(order_bys));
403: 	}
404: 
405: 	return make_unique<BoundAggregateExpression>(move(bound_function), move(children), move(filter), move(bind_info),
406: 	                                             is_distinct);
407: }
408: 
409: } // namespace duckdb
[end of src/function/function.cpp]
[start of src/function/scalar/list/list_extract.cpp]
1: #include "duckdb/planner/expression/bound_function_expression.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/common/vector_operations/binary_executor.hpp"
4: #include "duckdb/parser/expression/bound_expression.hpp"
5: #include "duckdb/function/scalar/nested_functions.hpp"
6: #include "duckdb/function/scalar/string_functions.hpp"
7: #include "duckdb/common/types/chunk_collection.hpp"
8: #include "duckdb/common/types/data_chunk.hpp"
9: #include "duckdb/common/pair.hpp"
10: #include "duckdb/storage/statistics/list_statistics.hpp"
11: #include "duckdb/storage/statistics/validity_statistics.hpp"
12: 
13: namespace duckdb {
14: 
15: template <class T, bool HEAP_REF = false, bool VALIDITY_ONLY = false>
16: void ListExtractTemplate(idx_t count, VectorData &list_data, VectorData &offsets_data, Vector &child_vector,
17:                          idx_t list_size, Vector &result) {
18: 	VectorData child_data;
19: 	child_vector.Orrify(list_size, child_data);
20: 
21: 	T *result_data;
22: 
23: 	result.SetVectorType(VectorType::FLAT_VECTOR);
24: 	if (!VALIDITY_ONLY) {
25: 		result_data = FlatVector::GetData<T>(result);
26: 	}
27: 	auto &result_mask = FlatVector::Validity(result);
28: 
29: 	// heap-ref once
30: 	if (HEAP_REF) {
31: 		StringVector::AddHeapReference(result, child_vector);
32: 	}
33: 
34: 	// this is lifted from ExecuteGenericLoop because we can't push the list child data into this otherwise
35: 	// should have gone with GetValue perhaps
36: 	for (idx_t i = 0; i < count; i++) {
37: 		auto list_index = list_data.sel->get_index(i);
38: 		auto offsets_index = offsets_data.sel->get_index(i);
39: 		if (list_data.validity.RowIsValid(list_index) && offsets_data.validity.RowIsValid(offsets_index)) {
40: 			auto list_entry = ((list_entry_t *)list_data.data)[list_index];
41: 			auto offsets_entry = ((int64_t *)offsets_data.data)[offsets_index];
42: 			idx_t child_offset;
43: 			if (offsets_entry < 0) {
44: 				if ((idx_t)-offsets_entry > list_entry.length) {
45: 					result_mask.SetInvalid(i);
46: 					continue;
47: 				}
48: 				child_offset = list_entry.offset + list_entry.length + offsets_entry;
49: 			} else {
50: 				if ((idx_t)offsets_entry >= list_entry.length) {
51: 					result_mask.SetInvalid(i);
52: 					continue;
53: 				}
54: 				child_offset = list_entry.offset + offsets_entry;
55: 			}
56: 			if (child_data.validity.RowIsValid(child_offset)) {
57: 				if (!VALIDITY_ONLY) {
58: 					result_data[i] = ((T *)child_data.data)[child_offset];
59: 				}
60: 			} else {
61: 				result_mask.SetInvalid(i);
62: 			}
63: 		} else {
64: 			result_mask.SetInvalid(i);
65: 		}
66: 	}
67: 	if (count == 1) {
68: 		result.SetVectorType(VectorType::CONSTANT_VECTOR);
69: 	}
70: }
71: static void ExecuteListExtractInternal(const idx_t count, VectorData &list, VectorData &offsets, Vector &child_vector,
72:                                        idx_t list_size, Vector &result) {
73: 	D_ASSERT(child_vector.GetType() == result.GetType());
74: 	switch (result.GetType().id()) {
75: 	case LogicalTypeId::UTINYINT:
76: 		ListExtractTemplate<uint8_t>(count, list, offsets, child_vector, list_size, result);
77: 		break;
78: 	case LogicalTypeId::TINYINT:
79: 		ListExtractTemplate<int8_t>(count, list, offsets, child_vector, list_size, result);
80: 		break;
81: 	case LogicalTypeId::USMALLINT:
82: 		ListExtractTemplate<uint16_t>(count, list, offsets, child_vector, list_size, result);
83: 		break;
84: 	case LogicalTypeId::SMALLINT:
85: 		ListExtractTemplate<int16_t>(count, list, offsets, child_vector, list_size, result);
86: 		break;
87: 	case LogicalTypeId::UINTEGER:
88: 		ListExtractTemplate<uint32_t>(count, list, offsets, child_vector, list_size, result);
89: 		break;
90: 	case LogicalTypeId::INTEGER:
91: 		ListExtractTemplate<int32_t>(count, list, offsets, child_vector, list_size, result);
92: 		break;
93: 	case LogicalTypeId::UBIGINT:
94: 		ListExtractTemplate<uint64_t>(count, list, offsets, child_vector, list_size, result);
95: 		break;
96: 	case LogicalTypeId::BIGINT:
97: 		ListExtractTemplate<int64_t>(count, list, offsets, child_vector, list_size, result);
98: 		break;
99: 	case LogicalTypeId::HUGEINT:
100: 		ListExtractTemplate<hugeint_t>(count, list, offsets, child_vector, list_size, result);
101: 		break;
102: 	case LogicalTypeId::FLOAT:
103: 		ListExtractTemplate<float>(count, list, offsets, child_vector, list_size, result);
104: 		break;
105: 	case LogicalTypeId::DOUBLE:
106: 		ListExtractTemplate<double>(count, list, offsets, child_vector, list_size, result);
107: 		break;
108: 	case LogicalTypeId::DATE:
109: 		ListExtractTemplate<date_t>(count, list, offsets, child_vector, list_size, result);
110: 		break;
111: 	case LogicalTypeId::TIME:
112: 		ListExtractTemplate<dtime_t>(count, list, offsets, child_vector, list_size, result);
113: 		break;
114: 	case LogicalTypeId::TIMESTAMP:
115: 		ListExtractTemplate<timestamp_t>(count, list, offsets, child_vector, list_size, result);
116: 		break;
117: 	case LogicalTypeId::BLOB:
118: 	case LogicalTypeId::VARCHAR:
119: 		ListExtractTemplate<string_t, true>(count, list, offsets, child_vector, list_size, result);
120: 		break;
121: 	case LogicalTypeId::SQLNULL:
122: 		result.Reference(Value());
123: 		break;
124: 	case LogicalTypeId::STRUCT: {
125: 		auto &entries = StructVector::GetEntries(child_vector);
126: 		auto &result_entries = StructVector::GetEntries(result);
127: 		D_ASSERT(entries.size() == result_entries.size());
128: 		// extract the child entries of the struct
129: 		for (idx_t i = 0; i < entries.size(); i++) {
130: 			ExecuteListExtractInternal(count, list, offsets, *entries[i], list_size, *result_entries[i]);
131: 		}
132: 		// extract the validity mask
133: 		ListExtractTemplate<bool, false, true>(count, list, offsets, child_vector, list_size, result);
134: 		break;
135: 	}
136: 	case LogicalTypeId::LIST: {
137: 		// nested list: we have to reference the child
138: 		auto &child_child_list = ListVector::GetEntry(child_vector);
139: 
140: 		ListVector::GetEntry(result).Reference(child_child_list);
141: 		ListVector::SetListSize(result, ListVector::GetListSize(child_vector));
142: 		ListExtractTemplate<list_entry_t>(count, list, offsets, child_vector, list_size, result);
143: 		break;
144: 	}
145: 	default:
146: 		throw NotImplementedException("Unimplemented type for LIST_EXTRACT");
147: 	}
148: }
149: 
150: static void ExecuteListExtract(Vector &result, Vector &list, Vector &offsets, const idx_t count) {
151: 	D_ASSERT(list.GetType().id() == LogicalTypeId::LIST);
152: 	VectorData list_data;
153: 	VectorData offsets_data;
154: 
155: 	list.Orrify(count, list_data);
156: 	offsets.Orrify(count, offsets_data);
157: 	ExecuteListExtractInternal(count, list_data, offsets_data, ListVector::GetEntry(list),
158: 	                           ListVector::GetListSize(list), result);
159: 	result.Verify(count);
160: }
161: 
162: static void ExecuteStringExtract(Vector &result, Vector &input_vector, Vector &subscript_vector, const idx_t count) {
163: 	BinaryExecutor::Execute<string_t, int32_t, string_t>(
164: 	    input_vector, subscript_vector, result, count, [&](string_t input_string, int32_t subscript) {
165: 		    return SubstringFun::SubstringScalarFunction(result, input_string, subscript + int32_t(subscript >= 0), 1);
166: 	    });
167: }
168: 
169: static void ListExtractFunction(DataChunk &args, ExpressionState &state, Vector &result) {
170: 	D_ASSERT(args.ColumnCount() == 2);
171: 	auto count = args.size();
172: 
173: 	result.SetVectorType(VectorType::CONSTANT_VECTOR);
174: 	for (idx_t i = 0; i < args.ColumnCount(); i++) {
175: 		if (args.data[i].GetVectorType() != VectorType::CONSTANT_VECTOR) {
176: 			result.SetVectorType(VectorType::FLAT_VECTOR);
177: 		}
178: 	}
179: 
180: 	Vector &base = args.data[0];
181: 	Vector &subscript = args.data[1];
182: 
183: 	switch (base.GetType().id()) {
184: 	case LogicalTypeId::LIST:
185: 		ExecuteListExtract(result, base, subscript, count);
186: 		break;
187: 	case LogicalTypeId::VARCHAR:
188: 		ExecuteStringExtract(result, base, subscript, count);
189: 		break;
190: 	default:
191: 		throw NotImplementedException("Specifier type not implemented");
192: 	}
193: }
194: 
195: static unique_ptr<FunctionData> ListExtractBind(ClientContext &context, ScalarFunction &bound_function,
196:                                                 vector<unique_ptr<Expression>> &arguments) {
197: 	D_ASSERT(bound_function.arguments.size() == 2);
198: 	D_ASSERT(LogicalTypeId::LIST == arguments[0]->return_type.id());
199: 	// list extract returns the child type of the list as return type
200: 	bound_function.return_type = ListType::GetChildType(arguments[0]->return_type);
201: 
202: 	return make_unique<VariableReturnBindData>(bound_function.return_type);
203: }
204: 
205: static unique_ptr<BaseStatistics> ListExtractStats(ClientContext &context, BoundFunctionExpression &expr,
206:                                                    FunctionData *bind_data,
207:                                                    vector<unique_ptr<BaseStatistics>> &child_stats) {
208: 	if (!child_stats[0]) {
209: 		return nullptr;
210: 	}
211: 	auto &list_stats = (ListStatistics &)*child_stats[0];
212: 	if (!list_stats.child_stats) {
213: 		return nullptr;
214: 	}
215: 	auto child_copy = list_stats.child_stats->Copy();
216: 	// list_extract always pushes a NULL, since if the offset is out of range for a list it inserts a null
217: 	child_copy->validity_stats = make_unique<ValidityStatistics>(true);
218: 	return child_copy;
219: }
220: 
221: void ListExtractFun::RegisterFunction(BuiltinFunctions &set) {
222: 	// the arguments and return types are actually set in the binder function
223: 	ScalarFunction lfun({LogicalType::LIST(LogicalType::ANY), LogicalType::BIGINT}, LogicalType::ANY,
224: 	                    ListExtractFunction, false, ListExtractBind, nullptr, ListExtractStats);
225: 
226: 	ScalarFunction sfun({LogicalType::VARCHAR, LogicalType::INTEGER}, LogicalType::VARCHAR, ListExtractFunction, false,
227: 	                    nullptr);
228: 
229: 	ScalarFunctionSet list_extract("list_extract");
230: 	list_extract.AddFunction(lfun);
231: 	list_extract.AddFunction(sfun);
232: 	set.AddFunction(list_extract);
233: 
234: 	ScalarFunctionSet list_element("list_element");
235: 	list_element.AddFunction(lfun);
236: 	list_element.AddFunction(sfun);
237: 	set.AddFunction(list_element);
238: 
239: 	ScalarFunctionSet array_extract("array_extract");
240: 	array_extract.AddFunction(lfun);
241: 	array_extract.AddFunction(sfun);
242: 	array_extract.AddFunction(StructExtractFun::GetFunction());
243: 	set.AddFunction(array_extract);
244: }
245: 
246: } // namespace duckdb
[end of src/function/scalar/list/list_extract.cpp]
[start of src/function/scalar/string/length.cpp]
1: #include "duckdb/function/scalar/string_functions.hpp"
2: 
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/vector_operations/vector_operations.hpp"
5: #include "duckdb/planner/expression/bound_function_expression.hpp"
6: #include "duckdb/storage/statistics/string_statistics.hpp"
7: #include "utf8proc.hpp"
8: 
9: namespace duckdb {
10: 
11: // length returns the size in characters
12: struct StringLengthOperator {
13: 	template <class TA, class TR>
14: 	static inline TR Operation(TA input) {
15: 		return LengthFun::Length<TA, TR>(input);
16: 	}
17: };
18: 
19: struct ArrayLengthOperator {
20: 	template <class TA, class TR>
21: 	static inline TR Operation(TA input) {
22: 		return input.length;
23: 	}
24: };
25: 
26: struct ArrayLengthBinaryOperator {
27: 	template <class TA, class TB, class TR>
28: 	static inline TR Operation(TA input, TB dimension) {
29: 		if (dimension != 1) {
30: 			throw NotImplementedException("array_length for dimensions other than 1 not implemented");
31: 		}
32: 		return input.length;
33: 	}
34: };
35: 
36: // strlen returns the size in bytes
37: struct StrLenOperator {
38: 	template <class TA, class TR>
39: 	static inline TR Operation(TA input) {
40: 		return input.GetSize();
41: 	}
42: };
43: 
44: // bitlen returns the size in bits
45: struct BitLenOperator {
46: 	template <class TA, class TR>
47: 	static inline TR Operation(TA input) {
48: 		return 8 * input.GetSize();
49: 	}
50: };
51: 
52: static unique_ptr<BaseStatistics> LengthPropagateStats(ClientContext &context, BoundFunctionExpression &expr,
53:                                                        FunctionData *bind_data,
54:                                                        vector<unique_ptr<BaseStatistics>> &child_stats) {
55: 	D_ASSERT(child_stats.size() == 1);
56: 	// can only propagate stats if the children have stats
57: 	if (!child_stats[0]) {
58: 		return nullptr;
59: 	}
60: 	auto &sstats = (StringStatistics &)*child_stats[0];
61: 	if (!sstats.has_unicode) {
62: 		expr.function.function = ScalarFunction::UnaryFunction<string_t, int64_t, StrLenOperator>;
63: 	}
64: 	return nullptr;
65: }
66: 
67: static unique_ptr<FunctionData> ListLengthBind(ClientContext &context, ScalarFunction &bound_function,
68:                                                vector<unique_ptr<Expression>> &arguments) {
69: 	bound_function.arguments[0] = arguments[0]->return_type;
70: 	return nullptr;
71: }
72: 
73: void LengthFun::RegisterFunction(BuiltinFunctions &set) {
74: 	ScalarFunction array_length_unary = ScalarFunction(
75: 	    {LogicalTypeId::LIST}, LogicalType::BIGINT,
76: 	    ScalarFunction::UnaryFunction<list_entry_t, int64_t, ArrayLengthOperator>, false, ListLengthBind);
77: 	ScalarFunctionSet length("length");
78: 	length.AddFunction(ScalarFunction({LogicalType::VARCHAR}, LogicalType::BIGINT,
79: 	                                  ScalarFunction::UnaryFunction<string_t, int64_t, StringLengthOperator>, false,
80: 	                                  nullptr, nullptr, LengthPropagateStats));
81: 	length.AddFunction(array_length_unary);
82: 	set.AddFunction(length);
83: 	length.name = "len";
84: 	set.AddFunction(length);
85: 
86: 	ScalarFunctionSet array_length("array_length");
87: 	array_length.AddFunction(array_length_unary);
88: 	array_length.AddFunction(
89: 	    ScalarFunction({LogicalTypeId::LIST, LogicalType::BIGINT}, LogicalType::BIGINT,
90: 	                   ScalarFunction::BinaryFunction<list_entry_t, int64_t, int64_t, ArrayLengthBinaryOperator>, false,
91: 	                   ListLengthBind));
92: 	set.AddFunction(array_length);
93: 
94: 	set.AddFunction(ScalarFunction("strlen", {LogicalType::VARCHAR}, LogicalType::BIGINT,
95: 	                               ScalarFunction::UnaryFunction<string_t, int64_t, StrLenOperator>));
96: 	set.AddFunction(ScalarFunction("bit_length", {LogicalType::VARCHAR}, LogicalType::BIGINT,
97: 	                               ScalarFunction::UnaryFunction<string_t, int64_t, BitLenOperator>));
98: 	// length for BLOB type
99: 	set.AddFunction(ScalarFunction("octet_length", {LogicalType::BLOB}, LogicalType::BIGINT,
100: 	                               ScalarFunction::UnaryFunction<string_t, int64_t, StrLenOperator>));
101: }
102: 
103: struct UnicodeOperator {
104: 	template <class TA, class TR>
105: 	static inline TR Operation(const TA &input) {
106: 		auto str = reinterpret_cast<const utf8proc_uint8_t *>(input.GetDataUnsafe());
107: 		auto len = input.GetSize();
108: 		utf8proc_int32_t codepoint;
109: 		(void)utf8proc_iterate(str, len, &codepoint);
110: 		return codepoint;
111: 	}
112: };
113: 
114: void UnicodeFun::RegisterFunction(BuiltinFunctions &set) {
115: 	ScalarFunction unicode("unicode", {LogicalType::VARCHAR}, LogicalType::INTEGER,
116: 	                       ScalarFunction::UnaryFunction<string_t, int32_t, UnicodeOperator>);
117: 	set.AddFunction(unicode);
118: 	unicode.name = "ord";
119: 	set.AddFunction(unicode);
120: }
121: 
122: } // namespace duckdb
[end of src/function/scalar/string/length.cpp]
[start of src/include/duckdb/common/enums/expression_type.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/common/enums/expression_type.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/constants.hpp"
12: 
13: namespace duckdb {
14: 
15: //===--------------------------------------------------------------------===//
16: // Predicate Expression Operation Types
17: //===--------------------------------------------------------------------===//
18: enum class ExpressionType : uint8_t {
19: 	INVALID = 0,
20: 
21: 	// explicitly cast left as right (right is integer in ValueType enum)
22: 	OPERATOR_CAST = 12,
23: 	// logical not operator
24: 	OPERATOR_NOT = 13,
25: 	// is null operator
26: 	OPERATOR_IS_NULL = 14,
27: 	// is not null operator
28: 	OPERATOR_IS_NOT_NULL = 15,
29: 
30: 	// -----------------------------
31: 	// Comparison Operators
32: 	// -----------------------------
33: 	// equal operator between left and right
34: 	COMPARE_EQUAL = 25,
35: 	// compare initial boundary
36: 	COMPARE_BOUNDARY_START = COMPARE_EQUAL,
37: 	// inequal operator between left and right
38: 	COMPARE_NOTEQUAL = 26,
39: 	// less than operator between left and right
40: 	COMPARE_LESSTHAN = 27,
41: 	// greater than operator between left and right
42: 	COMPARE_GREATERTHAN = 28,
43: 	// less than equal operator between left and right
44: 	COMPARE_LESSTHANOREQUALTO = 29,
45: 	// greater than equal operator between left and right
46: 	COMPARE_GREATERTHANOREQUALTO = 30,
47: 	// IN operator [left IN (right1, right2, ...)]
48: 	COMPARE_IN = 35,
49: 	// NOT IN operator [left NOT IN (right1, right2, ...)]
50: 	COMPARE_NOT_IN = 36,
51: 	// IS DISTINCT FROM operator
52: 	COMPARE_DISTINCT_FROM = 37,
53: 
54: 	COMPARE_BETWEEN = 38,
55: 	COMPARE_NOT_BETWEEN = 39,
56: 	// IS NOT DISTINCT FROM operator
57: 	COMPARE_NOT_DISTINCT_FROM = 40,
58: 	// compare final boundary
59: 	COMPARE_BOUNDARY_END = COMPARE_NOT_DISTINCT_FROM,
60: 
61: 	// -----------------------------
62: 	// Conjunction Operators
63: 	// -----------------------------
64: 	CONJUNCTION_AND = 50,
65: 	CONJUNCTION_OR = 51,
66: 
67: 	// -----------------------------
68: 	// Values
69: 	// -----------------------------
70: 	VALUE_CONSTANT = 75,
71: 	VALUE_PARAMETER = 76,
72: 	VALUE_TUPLE = 77,
73: 	VALUE_TUPLE_ADDRESS = 78,
74: 	VALUE_NULL = 79,
75: 	VALUE_VECTOR = 80,
76: 	VALUE_SCALAR = 81,
77: 	VALUE_DEFAULT = 82,
78: 
79: 	// -----------------------------
80: 	// Aggregates
81: 	// -----------------------------
82: 	AGGREGATE = 100,
83: 	BOUND_AGGREGATE = 101,
84: 
85: 	// -----------------------------
86: 	// Window Functions
87: 	// -----------------------------
88: 	WINDOW_AGGREGATE = 110,
89: 
90: 	WINDOW_RANK = 120,
91: 	WINDOW_RANK_DENSE = 121,
92: 	WINDOW_NTILE = 122,
93: 	WINDOW_PERCENT_RANK = 123,
94: 	WINDOW_CUME_DIST = 124,
95: 	WINDOW_ROW_NUMBER = 125,
96: 
97: 	WINDOW_FIRST_VALUE = 130,
98: 	WINDOW_LAST_VALUE = 131,
99: 	WINDOW_LEAD = 132,
100: 	WINDOW_LAG = 133,
101: 	WINDOW_NTH_VALUE = 134,
102: 
103: 	// -----------------------------
104: 	// Functions
105: 	// -----------------------------
106: 	FUNCTION = 140,
107: 	BOUND_FUNCTION = 141,
108: 
109: 	// -----------------------------
110: 	// Operators
111: 	// -----------------------------
112: 	CASE_EXPR = 150,
113: 	OPERATOR_NULLIF = 151,
114: 	OPERATOR_COALESCE = 152,
115: 	ARRAY_EXTRACT = 153,
116: 	ARRAY_SLICE = 154,
117: 	STRUCT_EXTRACT = 155,
118: 	ARRAY_CONSTRUCTOR = 156,
119: 
120: 	// -----------------------------
121: 	// Subquery IN/EXISTS
122: 	// -----------------------------
123: 	SUBQUERY = 175,
124: 
125: 	// -----------------------------
126: 	// Parser
127: 	// -----------------------------
128: 	STAR = 200,
129: 	TABLE_STAR = 201,
130: 	PLACEHOLDER = 202,
131: 	COLUMN_REF = 203,
132: 	FUNCTION_REF = 204,
133: 	TABLE_REF = 205,
134: 
135: 	// -----------------------------
136: 	// Miscellaneous
137: 	// -----------------------------
138: 	CAST = 225,
139: 	BOUND_REF = 227,
140: 	BOUND_COLUMN_REF = 228,
141: 	BOUND_UNNEST = 229,
142: 	COLLATE = 230,
143: 	LAMBDA = 231,
144: 	POSITIONAL_REFERENCE = 232
145: };
146: 
147: //===--------------------------------------------------------------------===//
148: // Expression Class
149: //===--------------------------------------------------------------------===//
150: enum class ExpressionClass : uint8_t {
151: 	INVALID = 0,
152: 	//===--------------------------------------------------------------------===//
153: 	// Parsed Expressions
154: 	//===--------------------------------------------------------------------===//
155: 	AGGREGATE = 1,
156: 	CASE = 2,
157: 	CAST = 3,
158: 	COLUMN_REF = 4,
159: 	COMPARISON = 5,
160: 	CONJUNCTION = 6,
161: 	CONSTANT = 7,
162: 	DEFAULT = 8,
163: 	FUNCTION = 9,
164: 	OPERATOR = 10,
165: 	STAR = 11,
166: 	SUBQUERY = 13,
167: 	WINDOW = 14,
168: 	PARAMETER = 15,
169: 	COLLATE = 16,
170: 	LAMBDA = 17,
171: 	POSITIONAL_REFERENCE = 18,
172: 	BETWEEN = 19,
173: 	//===--------------------------------------------------------------------===//
174: 	// Bound Expressions
175: 	//===--------------------------------------------------------------------===//
176: 	BOUND_AGGREGATE = 25,
177: 	BOUND_CASE = 26,
178: 	BOUND_CAST = 27,
179: 	BOUND_COLUMN_REF = 28,
180: 	BOUND_COMPARISON = 29,
181: 	BOUND_CONJUNCTION = 30,
182: 	BOUND_CONSTANT = 31,
183: 	BOUND_DEFAULT = 32,
184: 	BOUND_FUNCTION = 33,
185: 	BOUND_OPERATOR = 34,
186: 	BOUND_PARAMETER = 35,
187: 	BOUND_REF = 36,
188: 	BOUND_SUBQUERY = 37,
189: 	BOUND_WINDOW = 38,
190: 	BOUND_BETWEEN = 39,
191: 	BOUND_UNNEST = 40,
192: 	//===--------------------------------------------------------------------===//
193: 	// Miscellaneous
194: 	//===--------------------------------------------------------------------===//
195: 	BOUND_EXPRESSION = 50
196: };
197: 
198: string ExpressionTypeToString(ExpressionType type);
199: string ExpressionTypeToOperator(ExpressionType type);
200: 
201: //! Negate a comparison expression, turning e.g. = into !=, or < into >=
202: ExpressionType NegateComparisionExpression(ExpressionType type);
203: //! Flip a comparison expression, turning e.g. < into >, or = into =
204: ExpressionType FlipComparisionExpression(ExpressionType type);
205: 
206: } // namespace duckdb
[end of src/include/duckdb/common/enums/expression_type.hpp]
[start of src/include/duckdb/execution/operator/aggregate/physical_hash_aggregate.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/execution/operator/aggregate/physical_hash_aggregate.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/execution/physical_operator.hpp"
12: #include "duckdb/storage/data_table.hpp"
13: 
14: namespace duckdb {
15: 
16: class ClientContext;
17: class BufferManager;
18: 
19: //! PhysicalHashAggregate is an group-by and aggregate implementation that uses
20: //! a hash table to perform the grouping
21: class PhysicalHashAggregate : public PhysicalOperator {
22: public:
23: 	PhysicalHashAggregate(ClientContext &context, vector<LogicalType> types, vector<unique_ptr<Expression>> expressions,
24: 	                      idx_t estimated_cardinality, PhysicalOperatorType type = PhysicalOperatorType::HASH_GROUP_BY);
25: 	PhysicalHashAggregate(ClientContext &context, vector<LogicalType> types, vector<unique_ptr<Expression>> expressions,
26: 	                      vector<unique_ptr<Expression>> groups, idx_t estimated_cardinality,
27: 	                      PhysicalOperatorType type = PhysicalOperatorType::HASH_GROUP_BY);
28: 
29: 	//! The groups
30: 	vector<unique_ptr<Expression>> groups;
31: 	//! The aggregates that have to be computed
32: 	vector<unique_ptr<Expression>> aggregates;
33: 	//! Whether or not the aggregate is an implicit (i.e. ungrouped) aggregate
34: 	bool is_implicit_aggr;
35: 	//! Whether or not all aggregates are combinable
36: 	bool all_combinable;
37: 
38: 	//! Whether or not any aggregation is DISTINCT
39: 	bool any_distinct;
40: 
41: 	//! The group types
42: 	vector<LogicalType> group_types;
43: 	//! The payload types
44: 	vector<LogicalType> payload_types;
45: 	//! The aggregate return types
46: 	vector<LogicalType> aggregate_return_types;
47: 
48: 	//! Pointers to the aggregates
49: 	vector<BoundAggregateExpression *> bindings;
50: 
51: 	unordered_map<Expression *, size_t> filter_indexes;
52: 
53: public:
54: 	// Source interface
55: 	unique_ptr<GlobalSourceState> GetGlobalSourceState(ClientContext &context) const override;
56: 	void GetData(ExecutionContext &context, DataChunk &chunk, GlobalSourceState &gstate,
57: 	             LocalSourceState &lstate) const override;
58: 
59: public:
60: 	// Sink interface
61: 	SinkResultType Sink(ExecutionContext &context, GlobalSinkState &state, LocalSinkState &lstate,
62: 	                    DataChunk &input) const override;
63: 	void Combine(ExecutionContext &context, GlobalSinkState &state, LocalSinkState &lstate) const override;
64: 	SinkFinalizeType Finalize(Pipeline &pipeline, Event &event, ClientContext &context,
65: 	                          GlobalSinkState &gstate) const override;
66: 
67: 	unique_ptr<LocalSinkState> GetLocalSinkState(ExecutionContext &context) const override;
68: 	unique_ptr<GlobalSinkState> GetGlobalSinkState(ClientContext &context) const override;
69: 
70: 	bool IsSink() const override {
71: 		return true;
72: 	}
73: 
74: 	bool ParallelSink() const override {
75: 		return all_combinable;
76: 	}
77: 
78: public:
79: 	string ParamsToString() const override;
80: 	//! Toggle multi-scan capability on a hash table, which prevents the scan of the aggregate from being destructive
81: 	//! If this is not toggled the GetData method will destroy the hash table as it is scanning it
82: 	static void SetMultiScan(GlobalSinkState &state);
83: 
84: private:
85: 	//! how many groups can we have in the operator before we switch to radix partitioning
86: 	idx_t radix_limit;
87: 
88: private:
89: 	bool ForceSingleHT(GlobalSinkState &state) const;
90: };
91: 
92: } // namespace duckdb
[end of src/include/duckdb/execution/operator/aggregate/physical_hash_aggregate.hpp]
[start of src/include/duckdb/parser/query_node/select_node.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/parser/query_node/select_node.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/parser/parsed_expression.hpp"
12: #include "duckdb/parser/query_node.hpp"
13: #include "duckdb/parser/sql_statement.hpp"
14: #include "duckdb/parser/tableref.hpp"
15: #include "duckdb/parser/parsed_data/sample_options.hpp"
16: 
17: namespace duckdb {
18: 
19: enum class AggregateHandling : uint8_t {
20: 	STANDARD_HANDLING,     // standard handling as in the SELECT clause
21: 	NO_AGGREGATES_ALLOWED, // no aggregates allowed: any aggregates in this node will result in an error
22: 	FORCE_AGGREGATES       // force aggregates: any non-aggregate select list entry will become a GROUP
23: };
24: 
25: //! SelectNode represents a standard SELECT statement
26: class SelectNode : public QueryNode {
27: public:
28: 	SelectNode() : QueryNode(QueryNodeType::SELECT_NODE), aggregate_handling(AggregateHandling::STANDARD_HANDLING) {
29: 	}
30: 
31: 	//! The projection list
32: 	vector<unique_ptr<ParsedExpression>> select_list;
33: 	//! The FROM clause
34: 	unique_ptr<TableRef> from_table;
35: 	//! The WHERE clause
36: 	unique_ptr<ParsedExpression> where_clause;
37: 	//! list of groups
38: 	vector<unique_ptr<ParsedExpression>> groups;
39: 	//! HAVING clause
40: 	unique_ptr<ParsedExpression> having;
41: 	//! Aggregate handling during binding
42: 	AggregateHandling aggregate_handling;
43: 	//! The SAMPLE clause
44: 	unique_ptr<SampleOptions> sample;
45: 
46: 	const vector<unique_ptr<ParsedExpression>> &GetSelectList() const override {
47: 		return select_list;
48: 	}
49: 
50: public:
51: 	bool Equals(const QueryNode *other) const override;
52: 	//! Create a copy of this SelectNode
53: 	unique_ptr<QueryNode> Copy() override;
54: 	//! Serializes a SelectNode to a stand-alone binary blob
55: 	void Serialize(Serializer &serializer) override;
56: 	//! Deserializes a blob back into a SelectNode
57: 	static unique_ptr<QueryNode> Deserialize(Deserializer &source);
58: };
59: } // namespace duckdb
[end of src/include/duckdb/parser/query_node/select_node.hpp]
[start of src/include/duckdb/parser/transformer.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/parser/transformer.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/constants.hpp"
12: #include "duckdb/common/enums/expression_type.hpp"
13: #include "duckdb/common/types.hpp"
14: #include "duckdb/common/unordered_map.hpp"
15: #include "duckdb/parser/qualified_name.hpp"
16: #include "duckdb/parser/tokens.hpp"
17: 
18: #include "pg_definitions.hpp"
19: #include "nodes/parsenodes.hpp"
20: 
21: namespace duckdb {
22: 
23: class ColumnDefinition;
24: struct OrderByNode;
25: struct CopyInfo;
26: struct CommonTableExpressionInfo;
27: 
28: //! The transformer class is responsible for transforming the internal Postgres
29: //! parser representation into the DuckDB representation
30: class Transformer {
31: 	static constexpr const idx_t DEFAULT_MAX_EXPRESSION_DEPTH = 1000;
32: 
33: public:
34: 	explicit Transformer(Transformer *parent = nullptr, idx_t max_expression_depth_p = DEFAULT_MAX_EXPRESSION_DEPTH)
35: 	    : parent(parent), max_expression_depth(parent ? parent->max_expression_depth : max_expression_depth_p) {
36: 	}
37: 
38: 	//! Transforms a Postgres parse tree into a set of SQL Statements
39: 	bool TransformParseTree(duckdb_libpgquery::PGList *tree, vector<unique_ptr<SQLStatement>> &statements);
40: 	string NodetypeToString(duckdb_libpgquery::PGNodeTag type);
41: 
42: 	idx_t ParamCount() {
43: 		return parent ? parent->ParamCount() : prepared_statement_parameter_index;
44: 	}
45: 
46: private:
47: 	Transformer *parent;
48: 	idx_t max_expression_depth;
49: 	//! The current prepared statement parameter index
50: 	idx_t prepared_statement_parameter_index = 0;
51: 	//! Holds window expressions defined by name. We need those when transforming the expressions referring to them.
52: 	unordered_map<string, duckdb_libpgquery::PGWindowDef *> window_clauses;
53: 
54: 	void SetParamCount(idx_t new_count) {
55: 		if (parent) {
56: 			parent->SetParamCount(new_count);
57: 		} else {
58: 			this->prepared_statement_parameter_index = new_count;
59: 		}
60: 	}
61: 
62: private:
63: 	//! Transforms a Postgres statement into a single SQL statement
64: 	unique_ptr<SQLStatement> TransformStatement(duckdb_libpgquery::PGNode *stmt);
65: 	//===--------------------------------------------------------------------===//
66: 	// Statement transformation
67: 	//===--------------------------------------------------------------------===//
68: 	//! Transform a Postgres duckdb_libpgquery::T_PGSelectStmt node into a SelectStatement
69: 	unique_ptr<SelectStatement> TransformSelect(duckdb_libpgquery::PGNode *node, bool isSelect = true);
70: 	//! Transform a Postgres T_AlterStmt node into a AlterStatement
71: 	unique_ptr<AlterStatement> TransformAlter(duckdb_libpgquery::PGNode *node);
72: 	//! Transform a Postgres duckdb_libpgquery::T_PGRenameStmt node into a RenameStatement
73: 	unique_ptr<AlterStatement> TransformRename(duckdb_libpgquery::PGNode *node);
74: 	//! Transform a Postgres duckdb_libpgquery::T_PGCreateStmt node into a CreateStatement
75: 	unique_ptr<CreateStatement> TransformCreateTable(duckdb_libpgquery::PGNode *node);
76: 	//! Transform a Postgres duckdb_libpgquery::T_PGCreateStmt node into a CreateStatement
77: 	unique_ptr<CreateStatement> TransformCreateTableAs(duckdb_libpgquery::PGNode *node);
78: 	//! Transform a Postgres node into a CreateStatement
79: 	unique_ptr<CreateStatement> TransformCreateSchema(duckdb_libpgquery::PGNode *node);
80: 	//! Transform a Postgres duckdb_libpgquery::T_PGCreateSeqStmt node into a CreateStatement
81: 	unique_ptr<CreateStatement> TransformCreateSequence(duckdb_libpgquery::PGNode *node);
82: 	//! Transform a Postgres duckdb_libpgquery::T_PGViewStmt node into a CreateStatement
83: 	unique_ptr<CreateStatement> TransformCreateView(duckdb_libpgquery::PGNode *node);
84: 	//! Transform a Postgres duckdb_libpgquery::T_PGIndexStmt node into CreateStatement
85: 	unique_ptr<CreateStatement> TransformCreateIndex(duckdb_libpgquery::PGNode *node);
86: 	//! Transform a Postgres duckdb_libpgquery::T_PGCreateFunctionStmt node into CreateStatement
87: 	unique_ptr<CreateStatement> TransformCreateFunction(duckdb_libpgquery::PGNode *node);
88: 	//! Transform a Postgres duckdb_libpgquery::T_PGCreateEnumStmt node into CreateStatement
89: 	unique_ptr<CreateStatement> TransformCreateEnum(duckdb_libpgquery::PGNode *node);
90: 	//! Transform a Postgres duckdb_libpgquery::T_PGDropStmt node into a Drop[Table,Schema]Statement
91: 	unique_ptr<SQLStatement> TransformDrop(duckdb_libpgquery::PGNode *node);
92: 	//! Transform a Postgres duckdb_libpgquery::T_PGInsertStmt node into a InsertStatement
93: 	unique_ptr<InsertStatement> TransformInsert(duckdb_libpgquery::PGNode *node);
94: 	//! Transform a Postgres duckdb_libpgquery::T_PGCopyStmt node into a CopyStatement
95: 	unique_ptr<CopyStatement> TransformCopy(duckdb_libpgquery::PGNode *node);
96: 	void TransformCopyOptions(CopyInfo &info, duckdb_libpgquery::PGList *options);
97: 	//! Transform a Postgres duckdb_libpgquery::T_PGTransactionStmt node into a TransactionStatement
98: 	unique_ptr<TransactionStatement> TransformTransaction(duckdb_libpgquery::PGNode *node);
99: 	//! Transform a Postgres T_DeleteStatement node into a DeleteStatement
100: 	unique_ptr<DeleteStatement> TransformDelete(duckdb_libpgquery::PGNode *node);
101: 	//! Transform a Postgres duckdb_libpgquery::T_PGUpdateStmt node into a UpdateStatement
102: 	unique_ptr<UpdateStatement> TransformUpdate(duckdb_libpgquery::PGNode *node);
103: 	//! Transform a Postgres duckdb_libpgquery::T_PGPragmaStmt node into a PragmaStatement
104: 	unique_ptr<PragmaStatement> TransformPragma(duckdb_libpgquery::PGNode *node);
105: 	//! Transform a Postgres duckdb_libpgquery::T_PGExportStmt node into a ExportStatement
106: 	unique_ptr<ExportStatement> TransformExport(duckdb_libpgquery::PGNode *node);
107: 	//! Transform a Postgres duckdb_libpgquery::T_PGImportStmt node into a PragmaStatement
108: 	unique_ptr<PragmaStatement> TransformImport(duckdb_libpgquery::PGNode *node);
109: 	unique_ptr<ExplainStatement> TransformExplain(duckdb_libpgquery::PGNode *node);
110: 	unique_ptr<VacuumStatement> TransformVacuum(duckdb_libpgquery::PGNode *node);
111: 	unique_ptr<SQLStatement> TransformShow(duckdb_libpgquery::PGNode *node);
112: 	unique_ptr<ShowStatement> TransformShowSelect(duckdb_libpgquery::PGNode *node);
113: 
114: 	unique_ptr<PrepareStatement> TransformPrepare(duckdb_libpgquery::PGNode *node);
115: 	unique_ptr<ExecuteStatement> TransformExecute(duckdb_libpgquery::PGNode *node);
116: 	unique_ptr<CallStatement> TransformCall(duckdb_libpgquery::PGNode *node);
117: 	unique_ptr<DropStatement> TransformDeallocate(duckdb_libpgquery::PGNode *node);
118: 	unique_ptr<SetStatement> TransformSet(duckdb_libpgquery::PGNode *node);
119: 	unique_ptr<SQLStatement> TransformCheckpoint(duckdb_libpgquery::PGNode *node);
120: 	unique_ptr<LoadStatement> TransformLoad(duckdb_libpgquery::PGNode *node);
121: 
122: 	//===--------------------------------------------------------------------===//
123: 	// Query Node Transform
124: 	//===--------------------------------------------------------------------===//
125: 	//! Transform a Postgres duckdb_libpgquery::T_PGSelectStmt node into a QueryNode
126: 	unique_ptr<QueryNode> TransformSelectNode(duckdb_libpgquery::PGSelectStmt *node);
127: 
128: 	//===--------------------------------------------------------------------===//
129: 	// Expression Transform
130: 	//===--------------------------------------------------------------------===//
131: 	//! Transform a Postgres boolean expression into an Expression
132: 	unique_ptr<ParsedExpression> TransformBoolExpr(duckdb_libpgquery::PGBoolExpr *root, idx_t depth);
133: 	//! Transform a Postgres case expression into an Expression
134: 	unique_ptr<ParsedExpression> TransformCase(duckdb_libpgquery::PGCaseExpr *root, idx_t depth);
135: 	//! Transform a Postgres type cast into an Expression
136: 	unique_ptr<ParsedExpression> TransformTypeCast(duckdb_libpgquery::PGTypeCast *root, idx_t depth);
137: 	//! Transform a Postgres coalesce into an Expression
138: 	unique_ptr<ParsedExpression> TransformCoalesce(duckdb_libpgquery::PGAExpr *root, idx_t depth);
139: 	//! Transform a Postgres column reference into an Expression
140: 	unique_ptr<ParsedExpression> TransformColumnRef(duckdb_libpgquery::PGColumnRef *root, idx_t depth);
141: 	//! Transform a Postgres constant value into an Expression
142: 	unique_ptr<ConstantExpression> TransformValue(duckdb_libpgquery::PGValue val, idx_t depth);
143: 	//! Transform a Postgres operator into an Expression
144: 	unique_ptr<ParsedExpression> TransformAExpr(duckdb_libpgquery::PGAExpr *root, idx_t depth);
145: 	//! Transform a Postgres abstract expression into an Expression
146: 	unique_ptr<ParsedExpression> TransformExpression(duckdb_libpgquery::PGNode *node, idx_t depth);
147: 	//! Transform a Postgres function call into an Expression
148: 	unique_ptr<ParsedExpression> TransformFuncCall(duckdb_libpgquery::PGFuncCall *root, idx_t depth);
149: 	//! Transform a Postgres boolean expression into an Expression
150: 	unique_ptr<ParsedExpression> TransformInterval(duckdb_libpgquery::PGIntervalConstant *root, idx_t depth);
151: 	//! Transform a Postgres lambda node [e.g. (x, y) -> x + y] into a lambda expression
152: 	unique_ptr<ParsedExpression> TransformLambda(duckdb_libpgquery::PGLambdaFunction *node, idx_t depth);
153: 	//! Transform a Postgres array access node (e.g. x[1] or x[1:3])
154: 	unique_ptr<ParsedExpression> TransformArrayAccess(duckdb_libpgquery::PGAIndirection *node, idx_t depth);
155: 	//! Transform a positional reference (e.g. #1)
156: 	unique_ptr<ParsedExpression> TransformPositionalReference(duckdb_libpgquery::PGPositionalReference *node,
157: 	                                                          idx_t depth);
158: 	unique_ptr<ParsedExpression> TransformStarExpression(duckdb_libpgquery::PGNode *node, idx_t depth);
159: 
160: 	//! Transform a Postgres constant value into an Expression
161: 	unique_ptr<ParsedExpression> TransformConstant(duckdb_libpgquery::PGAConst *c, idx_t depth);
162: 
163: 	unique_ptr<ParsedExpression> TransformResTarget(duckdb_libpgquery::PGResTarget *root, idx_t depth);
164: 	unique_ptr<ParsedExpression> TransformNullTest(duckdb_libpgquery::PGNullTest *root, idx_t depth);
165: 	unique_ptr<ParsedExpression> TransformParamRef(duckdb_libpgquery::PGParamRef *node, idx_t depth);
166: 	unique_ptr<ParsedExpression> TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root, idx_t depth);
167: 
168: 	unique_ptr<ParsedExpression> TransformSQLValueFunction(duckdb_libpgquery::PGSQLValueFunction *node, idx_t depth);
169: 
170: 	unique_ptr<ParsedExpression> TransformSubquery(duckdb_libpgquery::PGSubLink *root, idx_t depth);
171: 	//===--------------------------------------------------------------------===//
172: 	// Constraints transform
173: 	//===--------------------------------------------------------------------===//
174: 	unique_ptr<Constraint> TransformConstraint(duckdb_libpgquery::PGListCell *cell);
175: 
176: 	unique_ptr<Constraint> TransformConstraint(duckdb_libpgquery::PGListCell *cell, ColumnDefinition &column,
177: 	                                           idx_t index);
178: 
179: 	//===--------------------------------------------------------------------===//
180: 	// Collation transform
181: 	//===--------------------------------------------------------------------===//
182: 	unique_ptr<ParsedExpression> TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate, idx_t depth);
183: 
184: 	string TransformCollation(duckdb_libpgquery::PGCollateClause *collate);
185: 
186: 	ColumnDefinition TransformColumnDefinition(duckdb_libpgquery::PGColumnDef *cdef);
187: 	//===--------------------------------------------------------------------===//
188: 	// Helpers
189: 	//===--------------------------------------------------------------------===//
190: 	string TransformAlias(duckdb_libpgquery::PGAlias *root, vector<string> &column_name_alias);
191: 	void TransformCTE(duckdb_libpgquery::PGWithClause *de_with_clause, QueryNode &select);
192: 	unique_ptr<SelectStatement> TransformRecursiveCTE(duckdb_libpgquery::PGCommonTableExpr *node,
193: 	                                                  CommonTableExpressionInfo &info);
194: 	// Operator String to ExpressionType (e.g. + => OPERATOR_ADD)
195: 	ExpressionType OperatorToExpressionType(const string &op);
196: 
197: 	unique_ptr<ParsedExpression> TransformUnaryOperator(const string &op, unique_ptr<ParsedExpression> child);
198: 	unique_ptr<ParsedExpression> TransformBinaryOperator(const string &op, unique_ptr<ParsedExpression> left,
199: 	                                                     unique_ptr<ParsedExpression> right);
200: 	//===--------------------------------------------------------------------===//
201: 	// TableRef transform
202: 	//===--------------------------------------------------------------------===//
203: 	//! Transform a Postgres node into a TableRef
204: 	unique_ptr<TableRef> TransformTableRefNode(duckdb_libpgquery::PGNode *node);
205: 	//! Transform a Postgres FROM clause into a TableRef
206: 	unique_ptr<TableRef> TransformFrom(duckdb_libpgquery::PGList *root);
207: 	//! Transform a Postgres table reference into a TableRef
208: 	unique_ptr<TableRef> TransformRangeVar(duckdb_libpgquery::PGRangeVar *root);
209: 	//! Transform a Postgres table-producing function into a TableRef
210: 	unique_ptr<TableRef> TransformRangeFunction(duckdb_libpgquery::PGRangeFunction *root);
211: 	//! Transform a Postgres join node into a TableRef
212: 	unique_ptr<TableRef> TransformJoin(duckdb_libpgquery::PGJoinExpr *root);
213: 	//! Transform a table producing subquery into a TableRef
214: 	unique_ptr<TableRef> TransformRangeSubselect(duckdb_libpgquery::PGRangeSubselect *root);
215: 	//! Transform a VALUES list into a set of expressions
216: 	unique_ptr<TableRef> TransformValuesList(duckdb_libpgquery::PGList *list);
217: 
218: 	//! Transform a range var into a (schema) qualified name
219: 	QualifiedName TransformQualifiedName(duckdb_libpgquery::PGRangeVar *root);
220: 
221: 	//! Transform a Postgres TypeName string into a LogicalType
222: 	LogicalType TransformTypeName(duckdb_libpgquery::PGTypeName *name);
223: 
224: 	//! Transform a Postgres GROUP BY expression into a list of Expression
225: 	bool TransformGroupBy(duckdb_libpgquery::PGList *group, vector<unique_ptr<ParsedExpression>> &result);
226: 	//! Transform a Postgres ORDER BY expression into an OrderByDescription
227: 	bool TransformOrderBy(duckdb_libpgquery::PGList *order, vector<OrderByNode> &result);
228: 
229: 	//! Transform a Postgres SELECT clause into a list of Expressions
230: 	void TransformExpressionList(duckdb_libpgquery::PGList &list, vector<unique_ptr<ParsedExpression>> &result,
231: 	                             idx_t depth);
232: 
233: 	//! Transform a Postgres PARTITION BY/ORDER BY specification into lists of expressions
234: 	void TransformWindowDef(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr, idx_t depth);
235: 	//! Transform a Postgres window frame specification into frame expressions
236: 	void TransformWindowFrame(duckdb_libpgquery::PGWindowDef *window_spec, WindowExpression *expr, idx_t depth);
237: 
238: 	unique_ptr<SampleOptions> TransformSampleOptions(duckdb_libpgquery::PGNode *options);
239: };
240: 
241: } // namespace duckdb
[end of src/include/duckdb/parser/transformer.hpp]
[start of src/include/duckdb/planner/expression_binder.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/expression_binder.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/exception.hpp"
12: #include "duckdb/parser/expression/bound_expression.hpp"
13: #include "duckdb/parser/parsed_expression.hpp"
14: #include "duckdb/parser/tokens.hpp"
15: #include "duckdb/planner/expression.hpp"
16: #include "duckdb/common/unordered_map.hpp"
17: 
18: namespace duckdb {
19: 
20: class Binder;
21: class ClientContext;
22: class QueryNode;
23: 
24: class ScalarFunctionCatalogEntry;
25: class AggregateFunctionCatalogEntry;
26: class MacroCatalogEntry;
27: class CatalogEntry;
28: class SimpleFunction;
29: 
30: struct MacroBinding;
31: 
32: struct BoundColumnReferenceInfo {
33: 	string name;
34: 	idx_t query_location;
35: };
36: 
37: struct BindResult {
38: 	explicit BindResult(string error) : error(error) {
39: 	}
40: 	explicit BindResult(unique_ptr<Expression> expr) : expression(move(expr)) {
41: 	}
42: 
43: 	bool HasError() {
44: 		return !error.empty();
45: 	}
46: 
47: 	unique_ptr<Expression> expression;
48: 	string error;
49: };
50: 
51: class ExpressionBinder {
52: public:
53: 	ExpressionBinder(Binder &binder, ClientContext &context, bool replace_binder = false);
54: 	virtual ~ExpressionBinder();
55: 
56: 	//! The target type that should result from the binder. If the result is not of this type, a cast to this type will
57: 	//! be added. Defaults to INVALID.
58: 	LogicalType target_type;
59: 
60: public:
61: 	unique_ptr<Expression> Bind(unique_ptr<ParsedExpression> &expr, LogicalType *result_type = nullptr,
62: 	                            bool root_expression = true);
63: 
64: 	//! Returns whether or not any columns have been bound by the expression binder
65: 	bool HasBoundColumns() {
66: 		return !bound_columns.empty();
67: 	}
68: 	const vector<BoundColumnReferenceInfo> &GetBoundColumns() {
69: 		return bound_columns;
70: 	}
71: 
72: 	string Bind(unique_ptr<ParsedExpression> *expr, idx_t depth, bool root_expression = false);
73: 
74: 	// Bind table names to ColumnRefExpressions
75: 	static void BindTableNames(Binder &binder, ParsedExpression &expr,
76: 	                           unordered_map<string, idx_t> *alias_map = nullptr);
77: 	static unique_ptr<Expression> PushCollation(ClientContext &context, unique_ptr<Expression> source,
78: 	                                            const string &collation, bool equality_only = false);
79: 	static void TestCollation(ClientContext &context, const string &collation);
80: 
81: 	bool BindCorrelatedColumns(unique_ptr<ParsedExpression> &expr);
82: 
83: 	void BindChild(unique_ptr<ParsedExpression> &expr, idx_t depth, string &error);
84: 	static void ExtractCorrelatedExpressions(Binder &binder, Expression &expr);
85: 
86: 	static bool ContainsNullType(const LogicalType &type);
87: 	static LogicalType ExchangeNullType(const LogicalType &type);
88: 	static bool ContainsType(const LogicalType &type, LogicalTypeId target);
89: 	static LogicalType ExchangeType(const LogicalType &type, LogicalTypeId target, LogicalType new_type);
90: 
91: 	static void ResolveParameterType(LogicalType &type);
92: 	static void ResolveParameterType(unique_ptr<Expression> &expr);
93: 
94: protected:
95: 	virtual BindResult BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth,
96: 	                                  bool root_expression = false);
97: 
98: 	BindResult BindExpression(BetweenExpression &expr, idx_t depth);
99: 	BindResult BindExpression(CaseExpression &expr, idx_t depth);
100: 	BindResult BindExpression(CollateExpression &expr, idx_t depth);
101: 	BindResult BindExpression(CastExpression &expr, idx_t depth);
102: 	BindResult BindExpression(ColumnRefExpression &expr, idx_t depth);
103: 	BindResult BindExpression(ComparisonExpression &expr, idx_t depth);
104: 	BindResult BindExpression(ConjunctionExpression &expr, idx_t depth);
105: 	BindResult BindExpression(ConstantExpression &expr, idx_t depth);
106: 	BindResult BindExpression(FunctionExpression &expr, idx_t depth, unique_ptr<ParsedExpression> *expr_ptr);
107: 	BindResult BindExpression(LambdaExpression &expr, idx_t depth);
108: 	BindResult BindExpression(OperatorExpression &expr, idx_t depth);
109: 	BindResult BindExpression(ParameterExpression &expr, idx_t depth);
110: 	BindResult BindExpression(PositionalReferenceExpression &ref, idx_t depth);
111: 	BindResult BindExpression(StarExpression &expr, idx_t depth);
112: 	BindResult BindExpression(SubqueryExpression &expr, idx_t depth);
113: 
114: protected:
115: 	virtual BindResult BindFunction(FunctionExpression &expr, ScalarFunctionCatalogEntry *function, idx_t depth);
116: 	virtual BindResult BindAggregate(FunctionExpression &expr, AggregateFunctionCatalogEntry *function, idx_t depth);
117: 	virtual BindResult BindUnnest(FunctionExpression &expr, idx_t depth);
118: 	virtual BindResult BindMacro(FunctionExpression &expr, MacroCatalogEntry *macro, idx_t depth,
119: 	                             unique_ptr<ParsedExpression> *expr_ptr);
120: 
121: 	virtual void ReplaceMacroParametersRecursive(unique_ptr<ParsedExpression> &expr);
122: 	virtual void ReplaceMacroParametersRecursive(ParsedExpression &expr, QueryNode &node);
123: 	virtual void ReplaceMacroParametersRecursive(ParsedExpression &expr, TableRef &ref);
124: 
125: 	virtual string UnsupportedAggregateMessage();
126: 	virtual string UnsupportedUnnestMessage();
127: 
128: 	Binder &binder;
129: 	ClientContext &context;
130: 	ExpressionBinder *stored_binder;
131: 	MacroBinding *macro_binding;
132: 	vector<BoundColumnReferenceInfo> bound_columns;
133: };
134: 
135: } // namespace duckdb
[end of src/include/duckdb/planner/expression_binder.hpp]
[start of src/include/duckdb/planner/expression_binder/select_binder.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/expression_binder/select_binder.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/unordered_map.hpp"
12: #include "duckdb/parser/expression_map.hpp"
13: #include "duckdb/planner/expression_binder.hpp"
14: 
15: namespace duckdb {
16: class BoundColumnRefExpression;
17: class WindowExpression;
18: 
19: class BoundSelectNode;
20: 
21: struct BoundGroupInformation {
22: 	expression_map_t<idx_t> map;
23: 	unordered_map<string, idx_t> alias_map;
24: };
25: 
26: //! The SELECT binder is responsible for binding an expression within the SELECT clause of a SQL statement
27: class SelectBinder : public ExpressionBinder {
28: public:
29: 	SelectBinder(Binder &binder, ClientContext &context, BoundSelectNode &node, BoundGroupInformation &info);
30: 
31: 	bool BoundAggregates() {
32: 		return bound_aggregate;
33: 	}
34: 	void ResetBindings() {
35: 		this->bound_aggregate = false;
36: 		this->bound_columns.clear();
37: 	}
38: 
39: protected:
40: 	BindResult BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth,
41: 	                          bool root_expression = false) override;
42: 
43: 	BindResult BindAggregate(FunctionExpression &expr, AggregateFunctionCatalogEntry *function, idx_t depth) override;
44: 
45: 	BindResult BindUnnest(FunctionExpression &function, idx_t depth) override;
46: 
47: 	bool inside_window;
48: 	bool bound_aggregate = false;
49: 
50: 	BoundSelectNode &node;
51: 	BoundGroupInformation &info;
52: 
53: protected:
54: 	BindResult BindWindow(WindowExpression &expr, idx_t depth);
55: 
56: 	idx_t TryBindGroup(ParsedExpression &expr, idx_t depth);
57: 	BindResult BindGroup(ParsedExpression &expr, idx_t depth, idx_t group_index);
58: };
59: 
60: } // namespace duckdb
[end of src/include/duckdb/planner/expression_binder/select_binder.hpp]
[start of src/include/duckdb/planner/operator/logical_aggregate.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/operator/logical_aggregate.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/planner/logical_operator.hpp"
12: #include "duckdb/planner/column_binding.hpp"
13: #include "duckdb/storage/statistics/base_statistics.hpp"
14: namespace duckdb {
15: 
16: //! LogicalAggregate represents an aggregate operation with (optional) GROUP BY
17: //! operator.
18: class LogicalAggregate : public LogicalOperator {
19: public:
20: 	LogicalAggregate(idx_t group_index, idx_t aggregate_index, vector<unique_ptr<Expression>> select_list);
21: 
22: 	//! The table index for the groups of the LogicalAggregate
23: 	idx_t group_index;
24: 	//! The table index for the aggregates of the LogicalAggregate
25: 	idx_t aggregate_index;
26: 	//! The set of groups (optional).
27: 	vector<unique_ptr<Expression>> groups;
28: 	//! Group statistics (optional)
29: 	vector<unique_ptr<BaseStatistics>> group_stats;
30: 
31: public:
32: 	string ParamsToString() const override;
33: 
34: 	vector<ColumnBinding> GetColumnBindings() override;
35: 
36: protected:
37: 	void ResolveTypes() override;
38: };
39: } // namespace duckdb
[end of src/include/duckdb/planner/operator/logical_aggregate.hpp]
[start of src/include/duckdb/planner/query_node/bound_select_node.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/planner/query_node/bound_select_node.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/planner/bound_query_node.hpp"
12: #include "duckdb/planner/logical_operator.hpp"
13: #include "duckdb/parser/expression_map.hpp"
14: #include "duckdb/planner/bound_tableref.hpp"
15: #include "duckdb/parser/parsed_data/sample_options.hpp"
16: 
17: namespace duckdb {
18: 
19: //! Bound equivalent of SelectNode
20: class BoundSelectNode : public BoundQueryNode {
21: public:
22: 	BoundSelectNode() : BoundQueryNode(QueryNodeType::SELECT_NODE) {
23: 	}
24: 
25: 	//! The original unparsed expressions. This is exported after binding, because the binding might change the
26: 	//! expressions (e.g. when a * clause is present)
27: 	vector<unique_ptr<ParsedExpression>> original_expressions;
28: 
29: 	//! The projection list
30: 	vector<unique_ptr<Expression>> select_list;
31: 	//! The FROM clause
32: 	unique_ptr<BoundTableRef> from_table;
33: 	//! The WHERE clause
34: 	unique_ptr<Expression> where_clause;
35: 	//! list of groups
36: 	vector<unique_ptr<Expression>> groups;
37: 	//! HAVING clause
38: 	unique_ptr<Expression> having;
39: 	//! SAMPLE clause
40: 	unique_ptr<SampleOptions> sample_options;
41: 
42: 	//! The amount of columns in the final result
43: 	idx_t column_count;
44: 
45: 	//! Index used by the LogicalProjection
46: 	idx_t projection_index;
47: 
48: 	//! Group index used by the LogicalAggregate (only used if HasAggregation is true)
49: 	idx_t group_index;
50: 	//! Table index for the projection child of the group op
51: 	idx_t group_projection_index;
52: 	//! Aggregate index used by the LogicalAggregate (only used if HasAggregation is true)
53: 	idx_t aggregate_index;
54: 	//! Aggregate functions to compute (only used if HasAggregation is true)
55: 	vector<unique_ptr<Expression>> aggregates;
56: 
57: 	//! Map from aggregate function to aggregate index (used to eliminate duplicate aggregates)
58: 	expression_map_t<idx_t> aggregate_map;
59: 
60: 	//! Window index used by the LogicalWindow (only used if HasWindow is true)
61: 	idx_t window_index;
62: 	//! Window functions to compute (only used if HasWindow is true)
63: 	vector<unique_ptr<Expression>> windows;
64: 
65: 	idx_t unnest_index;
66: 	//! Unnest expression
67: 	vector<unique_ptr<Expression>> unnests;
68: 
69: 	//! Index of pruned node
70: 	idx_t prune_index;
71: 	bool need_prune = false;
72: 
73: public:
74: 	idx_t GetRootIndex() override {
75: 		return need_prune ? prune_index : projection_index;
76: 	}
77: };
78: } // namespace duckdb
[end of src/include/duckdb/planner/query_node/bound_select_node.hpp]
[start of src/main/relation/aggregate_relation.cpp]
1: #include "duckdb/main/relation/aggregate_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: 
6: namespace duckdb {
7: 
8: AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,
9:                                      vector<unique_ptr<ParsedExpression>> parsed_expressions)
10:     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),
11:       child(move(child_p)) {
12: 	// bind the expressions
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,
17:                                      vector<unique_ptr<ParsedExpression>> parsed_expressions,
18:                                      vector<unique_ptr<ParsedExpression>> groups_p)
19:     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),
20:       groups(move(groups_p)), child(move(child_p)) {
21: 	// bind the expressions
22: 	context.TryBindRelation(*this, this->columns);
23: }
24: 
25: unique_ptr<QueryNode> AggregateRelation::GetQueryNode() {
26: 	auto child_ptr = child.get();
27: 	while (child_ptr->InheritsColumnBindings()) {
28: 		child_ptr = child_ptr->ChildRelation();
29: 	}
30: 	unique_ptr<QueryNode> result;
31: 	if (child_ptr->type == RelationType::JOIN_RELATION) {
32: 		// child node is a join: push projection into the child query node
33: 		result = child->GetQueryNode();
34: 	} else {
35: 		// child node is not a join: create a new select node and push the child as a table reference
36: 		auto select = make_unique<SelectNode>();
37: 		select->from_table = child->GetTableRef();
38: 		result = move(select);
39: 	}
40: 	D_ASSERT(result->type == QueryNodeType::SELECT_NODE);
41: 	auto &select_node = (SelectNode &)*result;
42: 	if (!groups.empty()) {
43: 		// explicit groups provided: use standard handling
44: 		select_node.aggregate_handling = AggregateHandling::STANDARD_HANDLING;
45: 		select_node.groups.clear();
46: 		for (auto &group : groups) {
47: 			select_node.groups.push_back(group->Copy());
48: 		}
49: 	} else {
50: 		// no groups provided: automatically figure out groups (if any)
51: 		select_node.aggregate_handling = AggregateHandling::FORCE_AGGREGATES;
52: 	}
53: 	select_node.select_list.clear();
54: 	for (auto &expr : expressions) {
55: 		select_node.select_list.push_back(expr->Copy());
56: 	}
57: 	return result;
58: }
59: 
60: string AggregateRelation::GetAlias() {
61: 	return child->GetAlias();
62: }
63: 
64: const vector<ColumnDefinition> &AggregateRelation::Columns() {
65: 	return columns;
66: }
67: 
68: string AggregateRelation::ToString(idx_t depth) {
69: 	string str = RenderWhitespace(depth) + "Aggregate [";
70: 	for (idx_t i = 0; i < expressions.size(); i++) {
71: 		if (i != 0) {
72: 			str += ", ";
73: 		}
74: 		str += expressions[i]->ToString();
75: 	}
76: 	str += "]\n";
77: 	return str + child->ToString(depth + 1);
78: }
79: 
80: } // namespace duckdb
[end of src/main/relation/aggregate_relation.cpp]
[start of src/optimizer/pushdown/pushdown_aggregate.cpp]
1: #include "duckdb/optimizer/filter_pushdown.hpp"
2: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
3: #include "duckdb/planner/expression_iterator.hpp"
4: #include "duckdb/planner/operator/logical_aggregate.hpp"
5: #include "duckdb/planner/operator/logical_empty_result.hpp"
6: #include "duckdb/planner/operator/logical_join.hpp"
7: 
8: namespace duckdb {
9: 
10: using Filter = FilterPushdown::Filter;
11: 
12: static unique_ptr<Expression> ReplaceGroupBindings(LogicalAggregate &proj, unique_ptr<Expression> expr) {
13: 	if (expr->type == ExpressionType::BOUND_COLUMN_REF) {
14: 		auto &colref = (BoundColumnRefExpression &)*expr;
15: 		D_ASSERT(colref.binding.table_index == proj.group_index);
16: 		D_ASSERT(colref.binding.column_index < proj.groups.size());
17: 		D_ASSERT(colref.depth == 0);
18: 		// replace the binding with a copy to the expression at the referenced index
19: 		return proj.groups[colref.binding.column_index]->Copy();
20: 	}
21: 	ExpressionIterator::EnumerateChildren(
22: 	    *expr, [&](unique_ptr<Expression> &child) { child = ReplaceGroupBindings(proj, move(child)); });
23: 	return expr;
24: }
25: 
26: unique_ptr<LogicalOperator> FilterPushdown::PushdownAggregate(unique_ptr<LogicalOperator> op) {
27: 	D_ASSERT(op->type == LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY);
28: 	auto &aggr = (LogicalAggregate &)*op;
29: 
30: 	// pushdown into AGGREGATE and GROUP BY
31: 	// we cannot push expressions that refer to the aggregate
32: 	FilterPushdown child_pushdown(optimizer);
33: 	for (idx_t i = 0; i < filters.size(); i++) {
34: 		auto &f = *filters[i];
35: 		// check if the aggregate is in the set
36: 		if (f.bindings.find(aggr.aggregate_index) == f.bindings.end()) {
37: 			// no aggregate! we can push this down
38: 			// rewrite any group bindings within the filter
39: 			f.filter = ReplaceGroupBindings(aggr, move(f.filter));
40: 			// add the filter to the child node
41: 			if (child_pushdown.AddFilter(move(f.filter)) == FilterResult::UNSATISFIABLE) {
42: 				// filter statically evaluates to false, strip tree
43: 				return make_unique<LogicalEmptyResult>(move(op));
44: 			}
45: 			// erase the filter from here
46: 			filters.erase(filters.begin() + i);
47: 			i--;
48: 		}
49: 	}
50: 	child_pushdown.GenerateFilters();
51: 
52: 	op->children[0] = child_pushdown.Rewrite(move(op->children[0]));
53: 	return FinishPushdown(move(op));
54: }
55: 
56: } // namespace duckdb
[end of src/optimizer/pushdown/pushdown_aggregate.cpp]
[start of src/optimizer/statistics/operator/propagate_aggregate.cpp]
1: #include "duckdb/optimizer/statistics_propagator.hpp"
2: #include "duckdb/planner/operator/logical_aggregate.hpp"
3: 
4: namespace duckdb {
5: 
6: unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalAggregate &aggr,
7:                                                                      unique_ptr<LogicalOperator> *node_ptr) {
8: 	// first propagate statistics in the child node
9: 	node_stats = PropagateStatistics(aggr.children[0]);
10: 
11: 	// handle the groups: simply propagate statistics and assign the stats to the group binding
12: 	aggr.group_stats.resize(aggr.groups.size());
13: 	for (idx_t group_idx = 0; group_idx < aggr.groups.size(); group_idx++) {
14: 		auto stats = PropagateExpression(aggr.groups[group_idx]);
15: 		aggr.group_stats[group_idx] = stats ? stats->Copy() : nullptr;
16: 		if (!stats) {
17: 			continue;
18: 		}
19: 		ColumnBinding group_binding(aggr.group_index, group_idx);
20: 		statistics_map[group_binding] = move(stats);
21: 	}
22: 	// propagate statistics in the aggregates
23: 	for (idx_t aggregate_idx = 0; aggregate_idx < aggr.expressions.size(); aggregate_idx++) {
24: 		auto stats = PropagateExpression(aggr.expressions[aggregate_idx]);
25: 		if (!stats) {
26: 			continue;
27: 		}
28: 		ColumnBinding aggregate_binding(aggr.aggregate_index, aggregate_idx);
29: 		statistics_map[aggregate_binding] = move(stats);
30: 	}
31: 	// the max cardinality of an aggregate is the max cardinality of the input (i.e. when every row is a unique group)
32: 	return move(node_stats);
33: }
34: 
35: } // namespace duckdb
[end of src/optimizer/statistics/operator/propagate_aggregate.cpp]
[start of src/parser/expression/subquery_expression.cpp]
1: #include "duckdb/parser/expression/subquery_expression.hpp"
2: 
3: #include "duckdb/common/exception.hpp"
4: #include "duckdb/common/serializer.hpp"
5: 
6: namespace duckdb {
7: 
8: SubqueryExpression::SubqueryExpression()
9:     : ParsedExpression(ExpressionType::SUBQUERY, ExpressionClass::SUBQUERY), subquery_type(SubqueryType::INVALID),
10:       comparison_type(ExpressionType::INVALID) {
11: }
12: 
13: string SubqueryExpression::ToString() const {
14: 	return "SUBQUERY";
15: }
16: 
17: bool SubqueryExpression::Equals(const SubqueryExpression *a, const SubqueryExpression *b) {
18: 	if (!a->subquery || !b->subquery) {
19: 		return false;
20: 	}
21: 	return a->subquery_type == b->subquery_type && a->subquery->Equals(b->subquery.get());
22: }
23: 
24: unique_ptr<ParsedExpression> SubqueryExpression::Copy() const {
25: 	auto copy = make_unique<SubqueryExpression>();
26: 	copy->CopyProperties(*this);
27: 	copy->subquery = unique_ptr_cast<SQLStatement, SelectStatement>(subquery->Copy());
28: 	copy->subquery_type = subquery_type;
29: 	copy->child = child ? child->Copy() : nullptr;
30: 	copy->comparison_type = comparison_type;
31: 	return move(copy);
32: }
33: 
34: void SubqueryExpression::Serialize(Serializer &serializer) {
35: 	ParsedExpression::Serialize(serializer);
36: 	serializer.Write<SubqueryType>(subquery_type);
37: 	subquery->Serialize(serializer);
38: 	serializer.WriteOptional(child);
39: 	serializer.Write<ExpressionType>(comparison_type);
40: }
41: 
42: unique_ptr<ParsedExpression> SubqueryExpression::Deserialize(ExpressionType type, Deserializer &source) {
43: 	auto subquery_type = source.Read<SubqueryType>();
44: 	auto subquery = SelectStatement::Deserialize(source);
45: 
46: 	auto expression = make_unique<SubqueryExpression>();
47: 	expression->subquery_type = subquery_type;
48: 	expression->subquery = move(subquery);
49: 	expression->child = source.ReadOptional<ParsedExpression>();
50: 	expression->comparison_type = source.Read<ExpressionType>();
51: 	return move(expression);
52: }
53: 
54: } // namespace duckdb
[end of src/parser/expression/subquery_expression.cpp]
[start of src/parser/query_node/select_node.cpp]
1: #include "duckdb/parser/query_node/select_node.hpp"
2: #include "duckdb/parser/expression_util.hpp"
3: 
4: namespace duckdb {
5: 
6: bool SelectNode::Equals(const QueryNode *other_p) const {
7: 	if (!QueryNode::Equals(other_p)) {
8: 		return false;
9: 	}
10: 	if (this == other_p) {
11: 		return true;
12: 	}
13: 	auto other = (SelectNode *)other_p;
14: 
15: 	// SELECT
16: 	if (!ExpressionUtil::ListEquals(select_list, other->select_list)) {
17: 		return false;
18: 	}
19: 	// FROM
20: 	if (from_table) {
21: 		// we have a FROM clause, compare to the other one
22: 		if (!from_table->Equals(other->from_table.get())) {
23: 			return false;
24: 		}
25: 	} else if (other->from_table) {
26: 		// we don't have a FROM clause, if the other statement has one they are
27: 		// not equal
28: 		return false;
29: 	}
30: 	// WHERE
31: 	if (!BaseExpression::Equals(where_clause.get(), other->where_clause.get())) {
32: 		return false;
33: 	}
34: 	// GROUP BY
35: 	if (!ExpressionUtil::ListEquals(groups, other->groups)) {
36: 		return false;
37: 	}
38: 	if (!SampleOptions::Equals(sample.get(), other->sample.get())) {
39: 		return false;
40: 	}
41: 	// HAVING
42: 	if (!BaseExpression::Equals(having.get(), other->having.get())) {
43: 		return false;
44: 	}
45: 	return true;
46: }
47: 
48: unique_ptr<QueryNode> SelectNode::Copy() {
49: 	auto result = make_unique<SelectNode>();
50: 	for (auto &child : select_list) {
51: 		result->select_list.push_back(child->Copy());
52: 	}
53: 	result->from_table = from_table ? from_table->Copy() : nullptr;
54: 	result->where_clause = where_clause ? where_clause->Copy() : nullptr;
55: 	// groups
56: 	for (auto &group : groups) {
57: 		result->groups.push_back(group->Copy());
58: 	}
59: 	result->having = having ? having->Copy() : nullptr;
60: 	result->sample = sample ? sample->Copy() : nullptr;
61: 	this->CopyProperties(*result);
62: 	return move(result);
63: }
64: 
65: void SelectNode::Serialize(Serializer &serializer) {
66: 	QueryNode::Serialize(serializer);
67: 	// select_list
68: 	serializer.WriteList(select_list);
69: 	// from clause
70: 	serializer.WriteOptional(from_table);
71: 	// where_clause
72: 	serializer.WriteOptional(where_clause);
73: 	// group by / having
74: 	serializer.WriteList(groups);
75: 	serializer.WriteOptional(having);
76: 	serializer.WriteOptional(sample);
77: }
78: 
79: unique_ptr<QueryNode> SelectNode::Deserialize(Deserializer &source) {
80: 	auto result = make_unique<SelectNode>();
81: 	// select_list
82: 	source.ReadList<ParsedExpression>(result->select_list);
83: 	// from clause
84: 	result->from_table = source.ReadOptional<TableRef>();
85: 	// where_clause
86: 	result->where_clause = source.ReadOptional<ParsedExpression>();
87: 	// group by / having
88: 	source.ReadList<ParsedExpression>(result->groups);
89: 	result->having = source.ReadOptional<ParsedExpression>();
90: 	result->sample = source.ReadOptional<SampleOptions>();
91: 	return move(result);
92: }
93: 
94: } // namespace duckdb
[end of src/parser/query_node/select_node.cpp]
[start of src/parser/transform/expression/CMakeLists.txt]
1: add_library_unity(
2:   duckdb_transformer_expression
3:   OBJECT
4:   transform_array_access.cpp
5:   transform_bool_expr.cpp
6:   transform_case.cpp
7:   transform_cast.cpp
8:   transform_coalesce.cpp
9:   transform_columnref.cpp
10:   transform_constant.cpp
11:   transform_expression.cpp
12:   transform_function.cpp
13:   transform_lambda.cpp
14:   transform_interval.cpp
15:   transform_is_null.cpp
16:   transform_operator.cpp
17:   transform_param_ref.cpp
18:   transform_positional_reference.cpp
19:   transform_subquery.cpp)
20: set(ALL_OBJECT_FILES
21:     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_transformer_expression>
22:     PARENT_SCOPE)
[end of src/parser/transform/expression/CMakeLists.txt]
[start of src/parser/transform/expression/transform_expression.cpp]
1: #include "duckdb/common/exception.hpp"
2: #include "duckdb/parser/expression/default_expression.hpp"
3: #include "duckdb/parser/transformer.hpp"
4: 
5: namespace duckdb {
6: 
7: unique_ptr<ParsedExpression> Transformer::TransformResTarget(duckdb_libpgquery::PGResTarget *root, idx_t depth) {
8: 	D_ASSERT(root);
9: 
10: 	auto expr = TransformExpression(root->val, depth + 1);
11: 	if (!expr) {
12: 		return nullptr;
13: 	}
14: 	if (root->name) {
15: 		expr->alias = string(root->name);
16: 	}
17: 	return expr;
18: }
19: 
20: unique_ptr<ParsedExpression> Transformer::TransformNamedArg(duckdb_libpgquery::PGNamedArgExpr *root, idx_t depth) {
21: 	D_ASSERT(root);
22: 
23: 	auto expr = TransformExpression((duckdb_libpgquery::PGNode *)root->arg, depth + 1);
24: 	if (root->name) {
25: 		expr->alias = string(root->name);
26: 	}
27: 	return expr;
28: }
29: 
30: unique_ptr<ParsedExpression> Transformer::TransformExpression(duckdb_libpgquery::PGNode *node, idx_t depth) {
31: 	if (!node) {
32: 		return nullptr;
33: 	}
34: 
35: 	if (depth > max_expression_depth) {
36: 		throw ParserException("Expression tree is too deep (maximum depth %d)", max_expression_depth);
37: 	}
38: 
39: 	switch (node->type) {
40: 	case duckdb_libpgquery::T_PGColumnRef:
41: 		return TransformColumnRef(reinterpret_cast<duckdb_libpgquery::PGColumnRef *>(node), depth);
42: 	case duckdb_libpgquery::T_PGAConst:
43: 		return TransformConstant(reinterpret_cast<duckdb_libpgquery::PGAConst *>(node), depth);
44: 	case duckdb_libpgquery::T_PGAExpr:
45: 		return TransformAExpr(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node), depth);
46: 	case duckdb_libpgquery::T_PGFuncCall:
47: 		return TransformFuncCall(reinterpret_cast<duckdb_libpgquery::PGFuncCall *>(node), depth);
48: 	case duckdb_libpgquery::T_PGBoolExpr:
49: 		return TransformBoolExpr(reinterpret_cast<duckdb_libpgquery::PGBoolExpr *>(node), depth);
50: 	case duckdb_libpgquery::T_PGTypeCast:
51: 		return TransformTypeCast(reinterpret_cast<duckdb_libpgquery::PGTypeCast *>(node), depth);
52: 	case duckdb_libpgquery::T_PGCaseExpr:
53: 		return TransformCase(reinterpret_cast<duckdb_libpgquery::PGCaseExpr *>(node), depth);
54: 	case duckdb_libpgquery::T_PGSubLink:
55: 		return TransformSubquery(reinterpret_cast<duckdb_libpgquery::PGSubLink *>(node), depth);
56: 	case duckdb_libpgquery::T_PGCoalesceExpr:
57: 		return TransformCoalesce(reinterpret_cast<duckdb_libpgquery::PGAExpr *>(node), depth);
58: 	case duckdb_libpgquery::T_PGNullTest:
59: 		return TransformNullTest(reinterpret_cast<duckdb_libpgquery::PGNullTest *>(node), depth);
60: 	case duckdb_libpgquery::T_PGResTarget:
61: 		return TransformResTarget(reinterpret_cast<duckdb_libpgquery::PGResTarget *>(node), depth);
62: 	case duckdb_libpgquery::T_PGParamRef:
63: 		return TransformParamRef(reinterpret_cast<duckdb_libpgquery::PGParamRef *>(node), depth);
64: 	case duckdb_libpgquery::T_PGNamedArgExpr:
65: 		return TransformNamedArg(reinterpret_cast<duckdb_libpgquery::PGNamedArgExpr *>(node), depth);
66: 	case duckdb_libpgquery::T_PGSQLValueFunction:
67: 		return TransformSQLValueFunction(reinterpret_cast<duckdb_libpgquery::PGSQLValueFunction *>(node), depth);
68: 	case duckdb_libpgquery::T_PGSetToDefault:
69: 		return make_unique<DefaultExpression>();
70: 	case duckdb_libpgquery::T_PGCollateClause:
71: 		return TransformCollateExpr(reinterpret_cast<duckdb_libpgquery::PGCollateClause *>(node), depth);
72: 	case duckdb_libpgquery::T_PGIntervalConstant:
73: 		return TransformInterval(reinterpret_cast<duckdb_libpgquery::PGIntervalConstant *>(node), depth);
74: 	case duckdb_libpgquery::T_PGLambdaFunction:
75: 		return TransformLambda(reinterpret_cast<duckdb_libpgquery::PGLambdaFunction *>(node), depth);
76: 	case duckdb_libpgquery::T_PGAIndirection:
77: 		return TransformArrayAccess(reinterpret_cast<duckdb_libpgquery::PGAIndirection *>(node), depth);
78: 	case duckdb_libpgquery::T_PGPositionalReference:
79: 		return TransformPositionalReference(reinterpret_cast<duckdb_libpgquery::PGPositionalReference *>(node), depth);
80: 	default:
81: 		throw NotImplementedException("Expr of type %d not implemented\n", (int)node->type);
82: 	}
83: }
84: 
85: void Transformer::TransformExpressionList(duckdb_libpgquery::PGList &list, vector<unique_ptr<ParsedExpression>> &result,
86:                                           idx_t depth) {
87: 	for (auto node = list.head; node != nullptr; node = node->next) {
88: 		auto target = reinterpret_cast<duckdb_libpgquery::PGNode *>(node->data.ptr_value);
89: 		D_ASSERT(target);
90: 
91: 		auto expr = TransformExpression(target, depth + 1);
92: 		D_ASSERT(expr);
93: 
94: 		result.push_back(move(expr));
95: 	}
96: }
97: 
98: } // namespace duckdb
[end of src/parser/transform/expression/transform_expression.cpp]
[start of src/parser/transform/helpers/transform_groupby.cpp]
1: #include "duckdb/parser/parsed_expression.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: 
4: namespace duckdb {
5: 
6: // FIXME: what is the difference between GroupBy and expression list?
7: bool Transformer::TransformGroupBy(duckdb_libpgquery::PGList *group, vector<unique_ptr<ParsedExpression>> &result) {
8: 	if (!group) {
9: 		return false;
10: 	}
11: 
12: 	for (auto node = group->head; node != nullptr; node = node->next) {
13: 		auto n = reinterpret_cast<duckdb_libpgquery::PGNode *>(node->data.ptr_value);
14: 		result.push_back(TransformExpression(n, 0));
15: 	}
16: 	return true;
17: }
18: 
19: } // namespace duckdb
[end of src/parser/transform/helpers/transform_groupby.cpp]
[start of src/parser/transform/statement/transform_create_index.cpp]
1: #include "duckdb/parser/expression/columnref_expression.hpp"
2: #include "duckdb/parser/statement/create_statement.hpp"
3: #include "duckdb/parser/parsed_data/create_index_info.hpp"
4: #include "duckdb/parser/tableref/basetableref.hpp"
5: #include "duckdb/parser/transformer.hpp"
6: #include "duckdb/common/string_util.hpp"
7: 
8: namespace duckdb {
9: 
10: static IndexType StringToIndexType(const string &str) {
11: 	string upper_str = StringUtil::Upper(str);
12: 	if (upper_str == "INVALID") {
13: 		return IndexType::INVALID;
14: 	} else if (upper_str == "ART") {
15: 		return IndexType::ART;
16: 	} else {
17: 		throw ConversionException("No IndexType conversion from string '%s'", upper_str);
18: 	}
19: 	return IndexType::INVALID;
20: }
21: 
22: unique_ptr<CreateStatement> Transformer::TransformCreateIndex(duckdb_libpgquery::PGNode *node) {
23: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGIndexStmt *>(node);
24: 	D_ASSERT(stmt);
25: 	auto result = make_unique<CreateStatement>();
26: 	auto info = make_unique<CreateIndexInfo>();
27: 
28: 	info->unique = stmt->unique;
29: 	info->on_conflict =
30: 	    stmt->if_not_exists ? OnCreateConflict::IGNORE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
31: 
32: 	for (auto cell = stmt->indexParams->head; cell != nullptr; cell = cell->next) {
33: 		auto index_element = (duckdb_libpgquery::PGIndexElem *)cell->data.ptr_value;
34: 		if (index_element->collation) {
35: 			throw NotImplementedException("Index with collation not supported yet!");
36: 		}
37: 		if (index_element->opclass) {
38: 			throw NotImplementedException("Index with opclass not supported yet!");
39: 		}
40: 
41: 		if (index_element->name) {
42: 			// create a column reference expression
43: 			info->expressions.push_back(make_unique<ColumnRefExpression>(index_element->name, stmt->relation->relname));
44: 		} else {
45: 			// parse the index expression
46: 			D_ASSERT(index_element->expr);
47: 			info->expressions.push_back(TransformExpression(index_element->expr, 0));
48: 		}
49: 	}
50: 
51: 	info->index_type = StringToIndexType(string(stmt->accessMethod));
52: 	auto tableref = make_unique<BaseTableRef>();
53: 	tableref->table_name = stmt->relation->relname;
54: 	if (stmt->relation->schemaname) {
55: 		tableref->schema_name = stmt->relation->schemaname;
56: 	}
57: 	info->table = move(tableref);
58: 	if (stmt->idxname) {
59: 		info->index_name = stmt->idxname;
60: 	} else {
61: 		throw NotImplementedException("Index wout a name not supported yet!");
62: 	}
63: 	result->info = move(info);
64: 	return result;
65: }
66: 
67: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_index.cpp]
[start of src/parser/transform/statement/transform_create_schema.cpp]
1: #include "duckdb/parser/statement/create_statement.hpp"
2: #include "duckdb/parser/parsed_data/create_schema_info.hpp"
3: #include "duckdb/parser/transformer.hpp"
4: 
5: namespace duckdb {
6: 
7: unique_ptr<CreateStatement> Transformer::TransformCreateSchema(duckdb_libpgquery::PGNode *node) {
8: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGCreateSchemaStmt *>(node);
9: 	D_ASSERT(stmt);
10: 	auto result = make_unique<CreateStatement>();
11: 	auto info = make_unique<CreateSchemaInfo>();
12: 
13: 	D_ASSERT(stmt->schemaname);
14: 	info->schema = stmt->schemaname;
15: 	info->on_conflict =
16: 	    stmt->if_not_exists ? OnCreateConflict::IGNORE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
17: 
18: 	if (stmt->schemaElts) {
19: 		// schema elements
20: 		for (auto cell = stmt->schemaElts->head; cell != nullptr; cell = cell->next) {
21: 			auto node = reinterpret_cast<duckdb_libpgquery::PGNode *>(cell->data.ptr_value);
22: 			switch (node->type) {
23: 			case duckdb_libpgquery::T_PGCreateStmt:
24: 			case duckdb_libpgquery::T_PGViewStmt:
25: 			default:
26: 				throw NotImplementedException("Schema element not supported yet!");
27: 			}
28: 		}
29: 	}
30: 	result->info = move(info);
31: 	return result;
32: }
33: 
34: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_schema.cpp]
[start of src/parser/transform/statement/transform_create_sequence.cpp]
1: #include "duckdb/parser/statement/create_statement.hpp"
2: #include "duckdb/parser/parsed_data/create_sequence_info.hpp"
3: #include "duckdb/parser/transformer.hpp"
4: #include "duckdb/common/operator/cast_operators.hpp"
5: 
6: namespace duckdb {
7: 
8: unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgquery::PGNode *node) {
9: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGCreateSeqStmt *>(node);
10: 
11: 	auto result = make_unique<CreateStatement>();
12: 	auto info = make_unique<CreateSequenceInfo>();
13: 
14: 	auto qname = TransformQualifiedName(stmt->sequence);
15: 	info->schema = qname.schema;
16: 	info->name = qname.name;
17: 
18: 	if (stmt->options) {
19: 		duckdb_libpgquery::PGListCell *cell = nullptr;
20: 		for_each_cell(cell, stmt->options->head) {
21: 			auto *def_elem = reinterpret_cast<duckdb_libpgquery::PGDefElem *>(cell->data.ptr_value);
22: 			string opt_name = string(def_elem->defname);
23: 
24: 			auto val = (duckdb_libpgquery::PGValue *)def_elem->arg;
25: 			if (def_elem->defaction == duckdb_libpgquery::PG_DEFELEM_UNSPEC && !val) { // e.g. NO MINVALUE
26: 				continue;
27: 			}
28: 			D_ASSERT(val);
29: 			int64_t opt_value;
30: 			if (val->type == duckdb_libpgquery::T_PGInteger) {
31: 				opt_value = val->val.ival;
32: 			} else if (val->type == duckdb_libpgquery::T_PGFloat) {
33: 				if (!TryCast::Operation<string_t, int64_t>(string_t(val->val.str), opt_value, true)) {
34: 					throw ParserException("Expected an integer argument for option %s", opt_name);
35: 				}
36: 			} else {
37: 				throw ParserException("Expected an integer argument for option %s", opt_name);
38: 			}
39: 			if (opt_name == "increment") {
40: 				info->increment = opt_value;
41: 				if (info->increment == 0) {
42: 					throw ParserException("Increment must not be zero");
43: 				}
44: 				if (info->increment < 0) {
45: 					info->start_value = info->max_value = -1;
46: 					info->min_value = NumericLimits<int64_t>::Minimum();
47: 				} else {
48: 					info->start_value = info->min_value = 1;
49: 					info->max_value = NumericLimits<int64_t>::Maximum();
50: 				}
51: 			} else if (opt_name == "minvalue") {
52: 				info->min_value = opt_value;
53: 				if (info->increment > 0) {
54: 					info->start_value = info->min_value;
55: 				}
56: 			} else if (opt_name == "maxvalue") {
57: 				info->max_value = opt_value;
58: 				if (info->increment < 0) {
59: 					info->start_value = info->max_value;
60: 				}
61: 			} else if (opt_name == "start") {
62: 				info->start_value = opt_value;
63: 			} else if (opt_name == "cycle") {
64: 				info->cycle = opt_value > 0;
65: 			} else {
66: 				throw ParserException("Unrecognized option \"%s\" for CREATE SEQUENCE", opt_name);
67: 			}
68: 		}
69: 	}
70: 	info->temporary = !stmt->sequence->relpersistence;
71: 	info->on_conflict =
72: 	    stmt->if_not_exists ? OnCreateConflict::IGNORE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
73: 	if (info->max_value <= info->min_value) {
74: 		throw ParserException("MINVALUE (%lld) must be less than MAXVALUE (%lld)", info->min_value, info->max_value);
75: 	}
76: 	if (info->start_value < info->min_value) {
77: 		throw ParserException("START value (%lld) cannot be less than MINVALUE (%lld)", info->start_value,
78: 		                      info->min_value);
79: 	}
80: 	if (info->start_value > info->max_value) {
81: 		throw ParserException("START value (%lld) cannot be greater than MAXVALUE (%lld)", info->start_value,
82: 		                      info->max_value);
83: 	}
84: 	result->info = move(info);
85: 	return result;
86: }
87: 
88: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_sequence.cpp]
[start of src/parser/transform/statement/transform_create_table.cpp]
1: #include "duckdb/parser/statement/create_statement.hpp"
2: #include "duckdb/parser/parsed_data/create_table_info.hpp"
3: #include "duckdb/parser/transformer.hpp"
4: #include "duckdb/parser/constraint.hpp"
5: #include "duckdb/parser/expression/collate_expression.hpp"
6: 
7: namespace duckdb {
8: 
9: string Transformer::TransformCollation(duckdb_libpgquery::PGCollateClause *collate) {
10: 	if (!collate) {
11: 		return string();
12: 	}
13: 	string collation;
14: 	for (auto c = collate->collname->head; c != nullptr; c = lnext(c)) {
15: 		auto pgvalue = (duckdb_libpgquery::PGValue *)c->data.ptr_value;
16: 		if (pgvalue->type != duckdb_libpgquery::T_PGString) {
17: 			throw ParserException("Expected a string as collation type!");
18: 		}
19: 		auto collation_argument = string(pgvalue->val.str);
20: 		if (collation.empty()) {
21: 			collation = collation_argument;
22: 		} else {
23: 			collation += "." + collation_argument;
24: 		}
25: 	}
26: 	return collation;
27: }
28: 
29: unique_ptr<ParsedExpression> Transformer::TransformCollateExpr(duckdb_libpgquery::PGCollateClause *collate,
30:                                                                idx_t depth) {
31: 	auto child = TransformExpression(collate->arg, depth + 1);
32: 	auto collation = TransformCollation(collate);
33: 	return make_unique<CollateExpression>(collation, move(child));
34: }
35: 
36: ColumnDefinition Transformer::TransformColumnDefinition(duckdb_libpgquery::PGColumnDef *cdef) {
37: 	string colname;
38: 	if (cdef->colname) {
39: 		colname = cdef->colname;
40: 	}
41: 	LogicalType target_type = TransformTypeName(cdef->typeName);
42: 	if (cdef->collClause) {
43: 		if (target_type.id() != LogicalTypeId::VARCHAR) {
44: 			throw ParserException("Only VARCHAR columns can have collations!");
45: 		}
46: 		target_type = LogicalType::VARCHAR_COLLATION(TransformCollation(cdef->collClause));
47: 	}
48: 
49: 	return ColumnDefinition(colname, target_type);
50: }
51: 
52: unique_ptr<CreateStatement> Transformer::TransformCreateTable(duckdb_libpgquery::PGNode *node) {
53: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGCreateStmt *>(node);
54: 	D_ASSERT(stmt);
55: 	auto result = make_unique<CreateStatement>();
56: 	auto info = make_unique<CreateTableInfo>();
57: 
58: 	if (stmt->inhRelations) {
59: 		throw NotImplementedException("inherited relations not implemented");
60: 	}
61: 	D_ASSERT(stmt->relation);
62: 
63: 	info->schema = INVALID_SCHEMA;
64: 	if (stmt->relation->schemaname) {
65: 		info->schema = stmt->relation->schemaname;
66: 	}
67: 	info->table = stmt->relation->relname;
68: 	info->on_conflict =
69: 	    stmt->if_not_exists ? OnCreateConflict::IGNORE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
70: 	info->temporary =
71: 	    stmt->relation->relpersistence == duckdb_libpgquery::PGPostgresRelPersistence::PG_RELPERSISTENCE_TEMP;
72: 
73: 	if (info->temporary && stmt->oncommit != duckdb_libpgquery::PGOnCommitAction::PG_ONCOMMIT_PRESERVE_ROWS &&
74: 	    stmt->oncommit != duckdb_libpgquery::PGOnCommitAction::PG_ONCOMMIT_NOOP) {
75: 		throw NotImplementedException("Only ON COMMIT PRESERVE ROWS is supported");
76: 	}
77: 	if (!stmt->tableElts) {
78: 		throw ParserException("Table must have at least one column!");
79: 	}
80: 
81: 	for (auto c = stmt->tableElts->head; c != nullptr; c = lnext(c)) {
82: 		auto node = reinterpret_cast<duckdb_libpgquery::PGNode *>(c->data.ptr_value);
83: 		switch (node->type) {
84: 		case duckdb_libpgquery::T_PGColumnDef: {
85: 			auto cdef = (duckdb_libpgquery::PGColumnDef *)c->data.ptr_value;
86: 			auto centry = TransformColumnDefinition(cdef);
87: 			if (cdef->constraints) {
88: 				for (auto constr = cdef->constraints->head; constr != nullptr; constr = constr->next) {
89: 					auto constraint = TransformConstraint(constr, centry, info->columns.size());
90: 					if (constraint) {
91: 						info->constraints.push_back(move(constraint));
92: 					}
93: 				}
94: 			}
95: 			info->columns.push_back(move(centry));
96: 			break;
97: 		}
98: 		case duckdb_libpgquery::T_PGConstraint: {
99: 			info->constraints.push_back(TransformConstraint(c));
100: 			break;
101: 		}
102: 		default:
103: 			throw NotImplementedException("ColumnDef type not handled yet");
104: 		}
105: 	}
106: 	result->info = move(info);
107: 	return result;
108: }
109: 
110: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_table.cpp]
[start of src/parser/transform/statement/transform_create_table_as.cpp]
1: #include "duckdb/parser/statement/create_statement.hpp"
2: #include "duckdb/parser/parsed_data/create_table_info.hpp"
3: #include "duckdb/parser/transformer.hpp"
4: 
5: namespace duckdb {
6: 
7: unique_ptr<CreateStatement> Transformer::TransformCreateTableAs(duckdb_libpgquery::PGNode *node) {
8: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGCreateTableAsStmt *>(node);
9: 	D_ASSERT(stmt);
10: 	if (stmt->relkind == duckdb_libpgquery::PG_OBJECT_MATVIEW) {
11: 		throw NotImplementedException("Materialized view not implemented");
12: 	}
13: 	if (stmt->is_select_into || stmt->into->colNames || stmt->into->options) {
14: 		throw NotImplementedException("Unimplemented features for CREATE TABLE as");
15: 	}
16: 	auto qname = TransformQualifiedName(stmt->into->rel);
17: 	auto query = TransformSelect(stmt->query, false);
18: 
19: 	auto result = make_unique<CreateStatement>();
20: 	auto info = make_unique<CreateTableInfo>();
21: 	info->schema = qname.schema;
22: 	info->table = qname.name;
23: 	info->on_conflict =
24: 	    stmt->if_not_exists ? OnCreateConflict::IGNORE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
25: 	info->temporary =
26: 	    stmt->into->rel->relpersistence == duckdb_libpgquery::PGPostgresRelPersistence::PG_RELPERSISTENCE_TEMP;
27: 	info->query = move(query);
28: 	result->info = move(info);
29: 	return result;
30: }
31: 
32: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_table_as.cpp]
[start of src/parser/transform/statement/transform_create_view.cpp]
1: #include "duckdb/parser/statement/create_statement.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/parser/parsed_data/create_view_info.hpp"
4: 
5: namespace duckdb {
6: 
7: unique_ptr<CreateStatement> Transformer::TransformCreateView(duckdb_libpgquery::PGNode *node) {
8: 	D_ASSERT(node);
9: 	D_ASSERT(node->type == duckdb_libpgquery::T_PGViewStmt);
10: 
11: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGViewStmt *>(node);
12: 	D_ASSERT(stmt);
13: 	D_ASSERT(stmt->view);
14: 
15: 	auto result = make_unique<CreateStatement>();
16: 	auto info = make_unique<CreateViewInfo>();
17: 
18: 	if (stmt->view->schemaname) {
19: 		info->schema = stmt->view->schemaname;
20: 	}
21: 	info->view_name = stmt->view->relname;
22: 	info->temporary = !stmt->view->relpersistence;
23: 	if (info->temporary) {
24: 		info->schema = TEMP_SCHEMA;
25: 	}
26: 	info->on_conflict = stmt->replace ? OnCreateConflict::REPLACE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
27: 
28: 	info->query = TransformSelect(stmt->query, false);
29: 
30: 	if (stmt->aliases && stmt->aliases->length > 0) {
31: 		for (auto c = stmt->aliases->head; c != nullptr; c = lnext(c)) {
32: 			auto node = reinterpret_cast<duckdb_libpgquery::PGNode *>(c->data.ptr_value);
33: 			switch (node->type) {
34: 			case duckdb_libpgquery::T_PGString: {
35: 				auto val = (duckdb_libpgquery::PGValue *)node;
36: 				info->aliases.emplace_back(val->val.str);
37: 				break;
38: 			}
39: 			default:
40: 				throw NotImplementedException("View projection type");
41: 			}
42: 		}
43: 		if (info->aliases.empty()) {
44: 			throw ParserException("Need at least one column name in CREATE VIEW projection list");
45: 		}
46: 	}
47: 
48: 	if (stmt->options && stmt->options->length > 0) {
49: 		throw NotImplementedException("VIEW options");
50: 	}
51: 
52: 	if (stmt->withCheckOption != duckdb_libpgquery::PGViewCheckOption::PG_NO_CHECK_OPTION) {
53: 		throw NotImplementedException("VIEW CHECK options");
54: 	}
55: 	result->info = move(info);
56: 	return result;
57: }
58: 
59: } // namespace duckdb
[end of src/parser/transform/statement/transform_create_view.cpp]
[start of src/planner/binder/expression/bind_macro_expression.cpp]
1: #include "duckdb/catalog/catalog_entry/macro_catalog_entry.hpp"
2: #include "duckdb/parser/expression/function_expression.hpp"
3: #include "duckdb/parser/expression/subquery_expression.hpp"
4: #include "duckdb/parser/parsed_expression_iterator.hpp"
5: #include "duckdb/parser/query_node.hpp"
6: #include "duckdb/parser/query_node/recursive_cte_node.hpp"
7: #include "duckdb/parser/query_node/select_node.hpp"
8: #include "duckdb/parser/query_node/set_operation_node.hpp"
9: #include "duckdb/parser/tableref/list.hpp"
10: #include "duckdb/planner/expression_binder.hpp"
11: #include "duckdb/common/string_util.hpp"
12: 
13: namespace duckdb {
14: 
15: void ExpressionBinder::ReplaceMacroParametersRecursive(unique_ptr<ParsedExpression> &expr) {
16: 	switch (expr->GetExpressionClass()) {
17: 	case ExpressionClass::COLUMN_REF: {
18: 		// if expr is a parameter, replace it with its argument
19: 		auto &colref = (ColumnRefExpression &)*expr;
20: 		if (colref.table_name.empty() && macro_binding->HasMatchingBinding(colref.column_name)) {
21: 			expr = macro_binding->ParamToArg(colref);
22: 		}
23: 		return;
24: 	}
25: 	case ExpressionClass::SUBQUERY: {
26: 		// replacing parameters within a subquery is slightly different
27: 		auto &sq = ((SubqueryExpression &)*expr).subquery;
28: 		ReplaceMacroParametersRecursive(*expr, *sq->node);
29: 		break;
30: 	}
31: 	default: // fall through
32: 		break;
33: 	}
34: 	// unfold child expressions
35: 	ParsedExpressionIterator::EnumerateChildren(
36: 	    *expr, [&](unique_ptr<ParsedExpression> &child) { ReplaceMacroParametersRecursive(child); });
37: }
38: 
39: void ExpressionBinder::ReplaceMacroParametersRecursive(ParsedExpression &expr, TableRef &ref) {
40: 	switch (ref.type) {
41: 	case TableReferenceType::CROSS_PRODUCT: {
42: 		auto &cp_ref = (CrossProductRef &)ref;
43: 		ReplaceMacroParametersRecursive(expr, *cp_ref.left);
44: 		ReplaceMacroParametersRecursive(expr, *cp_ref.right);
45: 		break;
46: 	}
47: 	case TableReferenceType::EXPRESSION_LIST: {
48: 		auto &el_ref = (ExpressionListRef &)ref;
49: 		for (idx_t i = 0; i < el_ref.values.size(); i++) {
50: 			for (idx_t j = 0; j < el_ref.values[i].size(); j++) {
51: 				ReplaceMacroParametersRecursive(el_ref.values[i][j]);
52: 			}
53: 		}
54: 		break;
55: 	}
56: 	case TableReferenceType::JOIN: {
57: 		auto &j_ref = (JoinRef &)ref;
58: 		ReplaceMacroParametersRecursive(expr, *j_ref.left);
59: 		ReplaceMacroParametersRecursive(expr, *j_ref.right);
60: 		ReplaceMacroParametersRecursive(j_ref.condition);
61: 		break;
62: 	}
63: 	case TableReferenceType::SUBQUERY: {
64: 		auto &sq_ref = (SubqueryRef &)ref;
65: 		ReplaceMacroParametersRecursive(expr, *sq_ref.subquery->node);
66: 		break;
67: 	}
68: 	case TableReferenceType::TABLE_FUNCTION: {
69: 		auto &tf_ref = (TableFunctionRef &)ref;
70: 		ReplaceMacroParametersRecursive(tf_ref.function);
71: 		break;
72: 	}
73: 	case TableReferenceType::BASE_TABLE:
74: 	case TableReferenceType::EMPTY:
75: 		// these TableRefs do not need to be unfolded
76: 		break;
77: 	default:
78: 		throw NotImplementedException("TableRef type not implemented for macro's!");
79: 	}
80: }
81: 
82: void ExpressionBinder::ReplaceMacroParametersRecursive(ParsedExpression &expr, QueryNode &node) {
83: 	switch (node.type) {
84: 	case QueryNodeType::RECURSIVE_CTE_NODE: {
85: 		auto &rcte_node = (RecursiveCTENode &)node;
86: 		ReplaceMacroParametersRecursive(expr, *rcte_node.left);
87: 		ReplaceMacroParametersRecursive(expr, *rcte_node.right);
88: 		break;
89: 	}
90: 	case QueryNodeType::SELECT_NODE: {
91: 		auto &sel_node = (SelectNode &)node;
92: 		for (idx_t i = 0; i < sel_node.select_list.size(); i++) {
93: 			ReplaceMacroParametersRecursive(sel_node.select_list[i]);
94: 		}
95: 		for (idx_t i = 0; i < sel_node.groups.size(); i++) {
96: 			ReplaceMacroParametersRecursive(sel_node.groups[i]);
97: 		}
98: 		if (sel_node.where_clause != nullptr) {
99: 			ReplaceMacroParametersRecursive(sel_node.where_clause);
100: 		}
101: 		if (sel_node.having != nullptr) {
102: 			ReplaceMacroParametersRecursive(sel_node.having);
103: 		}
104: 
105: 		ReplaceMacroParametersRecursive(expr, *sel_node.from_table.get());
106: 		break;
107: 	}
108: 	case QueryNodeType::SET_OPERATION_NODE: {
109: 		auto &setop_node = (SetOperationNode &)node;
110: 		ReplaceMacroParametersRecursive(expr, *setop_node.left);
111: 		ReplaceMacroParametersRecursive(expr, *setop_node.right);
112: 		break;
113: 	}
114: 	default:
115: 		throw NotImplementedException("QueryNode type not implemented for macro's!");
116: 	}
117: 	for (auto &kv : node.cte_map) {
118: 		ReplaceMacroParametersRecursive(expr, *kv.second->query->node);
119: 	}
120: }
121: 
122: BindResult ExpressionBinder::BindMacro(FunctionExpression &function, MacroCatalogEntry *macro_func, idx_t depth,
123:                                        unique_ptr<ParsedExpression> *expr) {
124: 	auto &macro_def = *macro_func->function;
125: 	// validate the arguments and separate positional and default arguments
126: 	vector<unique_ptr<ParsedExpression>> positionals;
127: 	unordered_map<string, unique_ptr<ParsedExpression>> defaults;
128: 	string error = MacroFunction::ValidateArguments(*macro_func, function, positionals, defaults);
129: 	if (!error.empty()) {
130: 		return BindResult(binder.FormatError(*expr->get(), error));
131: 	}
132: 
133: 	// create a MacroBinding to bind this macro's parameters to its arguments
134: 	vector<LogicalType> types;
135: 	vector<string> names;
136: 	// positional parameters
137: 	for (idx_t i = 0; i < macro_def.parameters.size(); i++) {
138: 		types.push_back(LogicalType::SQLNULL);
139: 		auto &param = (ColumnRefExpression &)*macro_def.parameters[i];
140: 		names.push_back(param.column_name);
141: 	}
142: 	// default parameters
143: 	for (auto it = macro_def.default_parameters.begin(); it != macro_def.default_parameters.end(); it++) {
144: 		types.push_back(LogicalType::SQLNULL);
145: 		names.push_back(it->first);
146: 		// now push the defaults into the positionals
147: 		positionals.push_back(move(defaults[it->first]));
148: 	}
149: 	auto new_macro_binding = make_unique<MacroBinding>(types, names, macro_func->name);
150: 	new_macro_binding->arguments = move(positionals);
151: 	macro_binding = new_macro_binding.get();
152: 
153: 	// replace current expression with stored macro expression, and replace params
154: 	*expr = macro_func->function->expression->Copy();
155: 	ReplaceMacroParametersRecursive(*expr);
156: 
157: 	// bind the unfolded macro
158: 	return BindExpression(expr, depth);
159: }
160: 
161: } // namespace duckdb
[end of src/planner/binder/expression/bind_macro_expression.cpp]
[start of src/planner/binder/expression/bind_operator_expression.cpp]
1: #include "duckdb/parser/expression/operator_expression.hpp"
2: #include "duckdb/planner/expression/bound_cast_expression.hpp"
3: #include "duckdb/planner/expression/bound_operator_expression.hpp"
4: #include "duckdb/planner/expression/bound_case_expression.hpp"
5: #include "duckdb/parser/expression/function_expression.hpp"
6: #include "duckdb/planner/expression_binder.hpp"
7: 
8: namespace duckdb {
9: 
10: static LogicalType ResolveNotType(OperatorExpression &op, vector<BoundExpression *> &children) {
11: 	// NOT expression, cast child to BOOLEAN
12: 	D_ASSERT(children.size() == 1);
13: 	children[0]->expr = BoundCastExpression::AddCastToType(move(children[0]->expr), LogicalType::BOOLEAN);
14: 	return LogicalType(LogicalTypeId::BOOLEAN);
15: }
16: 
17: static LogicalType ResolveInType(OperatorExpression &op, vector<BoundExpression *> &children) {
18: 	if (children.empty()) {
19: 		return LogicalType::BOOLEAN;
20: 	}
21: 	// get the maximum type from the children
22: 	LogicalType max_type = children[0]->expr->return_type;
23: 	for (idx_t i = 1; i < children.size(); i++) {
24: 		max_type = LogicalType::MaxLogicalType(max_type, children[i]->expr->return_type);
25: 	}
26: 	ExpressionBinder::ResolveParameterType(max_type);
27: 
28: 	// cast all children to the same type
29: 	for (idx_t i = 0; i < children.size(); i++) {
30: 		children[i]->expr = BoundCastExpression::AddCastToType(move(children[i]->expr), max_type);
31: 	}
32: 	// (NOT) IN always returns a boolean
33: 	return LogicalType::BOOLEAN;
34: }
35: 
36: static LogicalType ResolveOperatorType(OperatorExpression &op, vector<BoundExpression *> &children) {
37: 	switch (op.type) {
38: 	case ExpressionType::OPERATOR_IS_NULL:
39: 	case ExpressionType::OPERATOR_IS_NOT_NULL:
40: 		// IS (NOT) NULL always returns a boolean, and does not cast its children
41: 		ExpressionBinder::ResolveParameterType(children[0]->expr);
42: 		return LogicalType::BOOLEAN;
43: 	case ExpressionType::COMPARE_IN:
44: 	case ExpressionType::COMPARE_NOT_IN:
45: 	case ExpressionType::OPERATOR_COALESCE:
46: 		return ResolveInType(op, children);
47: 	default:
48: 		D_ASSERT(op.type == ExpressionType::OPERATOR_NOT);
49: 		return ResolveNotType(op, children);
50: 	}
51: }
52: 
53: BindResult ExpressionBinder::BindExpression(OperatorExpression &op, idx_t depth) {
54: 	// bind the children of the operator expression
55: 	string error;
56: 	for (idx_t i = 0; i < op.children.size(); i++) {
57: 		BindChild(op.children[i], depth, error);
58: 	}
59: 	if (!error.empty()) {
60: 		return BindResult(error);
61: 	}
62: 	// all children bound successfully
63: 	string function_name;
64: 	switch (op.type) {
65: 	case ExpressionType::ARRAY_EXTRACT: {
66: 		D_ASSERT(op.children[0]->expression_class == ExpressionClass::BOUND_EXPRESSION);
67: 		auto &b_exp = (BoundExpression &)*op.children[0];
68: 		if (b_exp.expr->return_type.id() == LogicalTypeId::MAP) {
69: 			function_name = "map_extract";
70: 		} else {
71: 			function_name = "array_extract";
72: 		}
73: 		break;
74: 	}
75: 	case ExpressionType::ARRAY_SLICE:
76: 		function_name = "array_slice";
77: 		break;
78: 	case ExpressionType::STRUCT_EXTRACT:
79: 		function_name = "struct_extract";
80: 		break;
81: 	case ExpressionType::ARRAY_CONSTRUCTOR:
82: 		function_name = "list_value";
83: 		break;
84: 	default:
85: 		break;
86: 	}
87: 	if (!function_name.empty()) {
88: 		auto function = make_unique<FunctionExpression>(function_name, move(op.children));
89: 		return BindExpression(*function, depth, nullptr);
90: 	}
91: 
92: 	vector<BoundExpression *> children;
93: 	for (idx_t i = 0; i < op.children.size(); i++) {
94: 		D_ASSERT(op.children[i]->expression_class == ExpressionClass::BOUND_EXPRESSION);
95: 		children.push_back((BoundExpression *)op.children[i].get());
96: 	}
97: 	// now resolve the types
98: 	LogicalType result_type = ResolveOperatorType(op, children);
99: 	if (op.type == ExpressionType::OPERATOR_COALESCE) {
100: 		if (children.empty()) {
101: 			return BindResult("COALESCE needs at least one child");
102: 		}
103: 		unique_ptr<Expression> current_node;
104: 		for (size_t i = children.size(); i > 0; i--) {
105: 			auto child = move(children[i - 1]->expr);
106: 			if (!current_node) {
107: 				// no node yet: simply move the child
108: 				current_node = move(child);
109: 			} else {
110: 				// create a case statement
111: 				auto check =
112: 				    make_unique<BoundOperatorExpression>(ExpressionType::OPERATOR_IS_NOT_NULL, LogicalType::BOOLEAN);
113: 				check->children.push_back(child->Copy());
114: 				current_node = make_unique<BoundCaseExpression>(move(check), move(child), move(current_node));
115: 			}
116: 		}
117: 		return BindResult(move(current_node));
118: 	}
119: 
120: 	auto result = make_unique<BoundOperatorExpression>(op.type, result_type);
121: 	for (auto &child : children) {
122: 		result->children.push_back(move(child->expr));
123: 	}
124: 	return BindResult(move(result));
125: }
126: 
127: } // namespace duckdb
[end of src/planner/binder/expression/bind_operator_expression.cpp]
[start of src/planner/binder/query_node/bind_select_node.cpp]
1: #include "duckdb/common/limits.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/execution/expression_executor.hpp"
4: #include "duckdb/main/config.hpp"
5: #include "duckdb/parser/expression/columnref_expression.hpp"
6: #include "duckdb/parser/expression/comparison_expression.hpp"
7: #include "duckdb/parser/expression/constant_expression.hpp"
8: #include "duckdb/parser/expression/subquery_expression.hpp"
9: #include "duckdb/parser/query_node/select_node.hpp"
10: #include "duckdb/parser/tableref/joinref.hpp"
11: #include "duckdb/planner/binder.hpp"
12: #include "duckdb/planner/expression_binder/constant_binder.hpp"
13: #include "duckdb/planner/expression_binder/group_binder.hpp"
14: #include "duckdb/planner/expression_binder/having_binder.hpp"
15: #include "duckdb/planner/expression_binder/order_binder.hpp"
16: #include "duckdb/planner/expression_binder/select_binder.hpp"
17: #include "duckdb/planner/expression_binder/where_binder.hpp"
18: #include "duckdb/planner/query_node/bound_select_node.hpp"
19: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
20: 
21: namespace duckdb {
22: unique_ptr<Expression> Binder::BindFilter(unique_ptr<ParsedExpression> condition) {
23: 	WhereBinder where_binder(*this, context);
24: 	return where_binder.Bind(condition);
25: }
26: 
27: unique_ptr<Expression> Binder::BindOrderExpression(OrderBinder &order_binder, unique_ptr<ParsedExpression> expr) {
28: 	// we treat the Distinct list as a order by
29: 	auto bound_expr = order_binder.Bind(move(expr));
30: 	if (!bound_expr) {
31: 		// DISTINCT ON non-integer constant
32: 		// remove the expression from the DISTINCT ON list
33: 		return nullptr;
34: 	}
35: 	D_ASSERT(bound_expr->type == ExpressionType::BOUND_COLUMN_REF);
36: 	return bound_expr;
37: }
38: 
39: unique_ptr<Expression> Binder::BindDelimiter(ClientContext &context, unique_ptr<ParsedExpression> delimiter,
40:                                              int64_t &delimiter_value) {
41: 	auto new_binder = Binder::CreateBinder(context, this, true);
42: 	ExpressionBinder expr_binder(*new_binder, context);
43: 	expr_binder.target_type = LogicalType::UBIGINT;
44: 	auto expr = expr_binder.Bind(delimiter);
45: 	if (expr->IsFoldable()) {
46: 		//! this is a constant
47: 		Value value = ExpressionExecutor::EvaluateScalar(*expr).CastAs(LogicalType::BIGINT);
48: 		delimiter_value = value.GetValue<int64_t>();
49: 		return nullptr;
50: 	}
51: 	return expr;
52: }
53: 
54: unique_ptr<BoundResultModifier> Binder::BindLimit(LimitModifier &limit_mod) {
55: 	auto result = make_unique<BoundLimitModifier>();
56: 	if (limit_mod.limit) {
57: 		result->limit = BindDelimiter(context, move(limit_mod.limit), result->limit_val);
58: 	}
59: 	if (limit_mod.offset) {
60: 		result->offset = BindDelimiter(context, move(limit_mod.offset), result->offset_val);
61: 	}
62: 	return move(result);
63: }
64: 
65: void Binder::BindModifiers(OrderBinder &order_binder, QueryNode &statement, BoundQueryNode &result) {
66: 	for (auto &mod : statement.modifiers) {
67: 		unique_ptr<BoundResultModifier> bound_modifier;
68: 		switch (mod->type) {
69: 		case ResultModifierType::DISTINCT_MODIFIER: {
70: 			auto &distinct = (DistinctModifier &)*mod;
71: 			auto bound_distinct = make_unique<BoundDistinctModifier>();
72: 			for (auto &distinct_on_target : distinct.distinct_on_targets) {
73: 				auto expr = BindOrderExpression(order_binder, move(distinct_on_target));
74: 				if (!expr) {
75: 					continue;
76: 				}
77: 				bound_distinct->target_distincts.push_back(move(expr));
78: 			}
79: 			bound_modifier = move(bound_distinct);
80: 			break;
81: 		}
82: 		case ResultModifierType::ORDER_MODIFIER: {
83: 			auto &order = (OrderModifier &)*mod;
84: 			auto bound_order = make_unique<BoundOrderModifier>();
85: 			auto &config = DBConfig::GetConfig(context);
86: 			for (auto &order_node : order.orders) {
87: 				auto order_expression = BindOrderExpression(order_binder, move(order_node.expression));
88: 				if (!order_expression) {
89: 					continue;
90: 				}
91: 				auto type = order_node.type == OrderType::ORDER_DEFAULT ? config.default_order_type : order_node.type;
92: 				auto null_order = order_node.null_order == OrderByNullType::ORDER_DEFAULT ? config.default_null_order
93: 				                                                                          : order_node.null_order;
94: 				bound_order->orders.emplace_back(type, null_order, move(order_expression));
95: 			}
96: 			if (!bound_order->orders.empty()) {
97: 				bound_modifier = move(bound_order);
98: 			}
99: 			break;
100: 		}
101: 		case ResultModifierType::LIMIT_MODIFIER:
102: 			bound_modifier = BindLimit((LimitModifier &)*mod);
103: 			break;
104: 		default:
105: 			throw Exception("Unsupported result modifier");
106: 		}
107: 		if (bound_modifier) {
108: 			result.modifiers.push_back(move(bound_modifier));
109: 		}
110: 	}
111: }
112: 
113: void Binder::BindModifierTypes(BoundQueryNode &result, const vector<LogicalType> &sql_types, idx_t projection_index) {
114: 	for (auto &bound_mod : result.modifiers) {
115: 		switch (bound_mod->type) {
116: 		case ResultModifierType::DISTINCT_MODIFIER: {
117: 			auto &distinct = (BoundDistinctModifier &)*bound_mod;
118: 			if (distinct.target_distincts.empty()) {
119: 				// DISTINCT without a target: push references to the standard select list
120: 				for (idx_t i = 0; i < sql_types.size(); i++) {
121: 					distinct.target_distincts.push_back(
122: 					    make_unique<BoundColumnRefExpression>(sql_types[i], ColumnBinding(projection_index, i)));
123: 				}
124: 			} else {
125: 				// DISTINCT with target list: set types
126: 				for (auto &expr : distinct.target_distincts) {
127: 					D_ASSERT(expr->type == ExpressionType::BOUND_COLUMN_REF);
128: 					auto &bound_colref = (BoundColumnRefExpression &)*expr;
129: 					if (bound_colref.binding.column_index == INVALID_INDEX) {
130: 						throw BinderException("Ambiguous name in DISTINCT ON!");
131: 					}
132: 					D_ASSERT(bound_colref.binding.column_index < sql_types.size());
133: 					bound_colref.return_type = sql_types[bound_colref.binding.column_index];
134: 				}
135: 			}
136: 			for (auto &target_distinct : distinct.target_distincts) {
137: 				auto &bound_colref = (BoundColumnRefExpression &)*target_distinct;
138: 				auto sql_type = sql_types[bound_colref.binding.column_index];
139: 				if (sql_type.id() == LogicalTypeId::VARCHAR) {
140: 					target_distinct = ExpressionBinder::PushCollation(context, move(target_distinct),
141: 					                                                  StringType::GetCollation(sql_type), true);
142: 				}
143: 			}
144: 			break;
145: 		}
146: 		case ResultModifierType::ORDER_MODIFIER: {
147: 			auto &order = (BoundOrderModifier &)*bound_mod;
148: 			for (auto &order_node : order.orders) {
149: 				auto &expr = order_node.expression;
150: 				D_ASSERT(expr->type == ExpressionType::BOUND_COLUMN_REF);
151: 				auto &bound_colref = (BoundColumnRefExpression &)*expr;
152: 				if (bound_colref.binding.column_index == INVALID_INDEX) {
153: 					throw BinderException("Ambiguous name in ORDER BY!");
154: 				}
155: 				D_ASSERT(bound_colref.binding.column_index < sql_types.size());
156: 				auto sql_type = sql_types[bound_colref.binding.column_index];
157: 				bound_colref.return_type = sql_types[bound_colref.binding.column_index];
158: 				if (sql_type.id() == LogicalTypeId::VARCHAR) {
159: 					order_node.expression = ExpressionBinder::PushCollation(context, move(order_node.expression),
160: 					                                                        StringType::GetCollation(sql_type));
161: 				}
162: 			}
163: 			break;
164: 		}
165: 		default:
166: 			break;
167: 		}
168: 	}
169: }
170: 
171: unique_ptr<BoundQueryNode> Binder::BindNode(SelectNode &statement) {
172: 	auto result = make_unique<BoundSelectNode>();
173: 	result->projection_index = GenerateTableIndex();
174: 	result->group_index = GenerateTableIndex();
175: 	result->aggregate_index = GenerateTableIndex();
176: 	result->window_index = GenerateTableIndex();
177: 	result->unnest_index = GenerateTableIndex();
178: 	result->prune_index = GenerateTableIndex();
179: 
180: 	// first bind the FROM table statement
181: 	result->from_table = Bind(*statement.from_table);
182: 
183: 	// bind the sample clause
184: 	if (statement.sample) {
185: 		result->sample_options = move(statement.sample);
186: 	}
187: 
188: 	// visit the select list and expand any "*" statements
189: 	vector<unique_ptr<ParsedExpression>> new_select_list;
190: 	for (auto &select_element : statement.select_list) {
191: 		if (select_element->GetExpressionType() == ExpressionType::STAR) {
192: 			// * statement, expand to all columns from the FROM clause
193: 			bind_context.GenerateAllColumnExpressions((StarExpression &)*select_element, new_select_list);
194: 		} else {
195: 			// regular statement, add it to the list
196: 			new_select_list.push_back(move(select_element));
197: 		}
198: 	}
199: 	if (new_select_list.empty()) {
200: 		throw BinderException("SELECT list is empty after resolving * expressions!");
201: 	}
202: 	statement.select_list = move(new_select_list);
203: 
204: 	// create a mapping of (alias -> index) and a mapping of (Expression -> index) for the SELECT list
205: 	unordered_map<string, idx_t> alias_map;
206: 	expression_map_t<idx_t> projection_map;
207: 	for (idx_t i = 0; i < statement.select_list.size(); i++) {
208: 		auto &expr = statement.select_list[i];
209: 		result->names.push_back(expr->GetName());
210: 		ExpressionBinder::BindTableNames(*this, *expr);
211: 		if (!expr->alias.empty()) {
212: 			alias_map[expr->alias] = i;
213: 			result->names[i] = expr->alias;
214: 		}
215: 		projection_map[expr.get()] = i;
216: 		result->original_expressions.push_back(expr->Copy());
217: 	}
218: 	result->column_count = statement.select_list.size();
219: 
220: 	// first visit the WHERE clause
221: 	// the WHERE clause happens before the GROUP BY, PROJECTION or HAVING clauses
222: 	if (statement.where_clause) {
223: 		result->where_clause = BindFilter(move(statement.where_clause));
224: 	}
225: 
226: 	// now bind all the result modifiers; including DISTINCT and ORDER BY targets
227: 	OrderBinder order_binder({this}, result->projection_index, statement, alias_map, projection_map);
228: 	BindModifiers(order_binder, statement, *result);
229: 
230: 	vector<unique_ptr<ParsedExpression>> unbound_groups;
231: 	BoundGroupInformation info;
232: 	if (!statement.groups.empty()) {
233: 		// the statement has a GROUP BY clause, bind it
234: 		unbound_groups.resize(statement.groups.size());
235: 		GroupBinder group_binder(*this, context, statement, result->group_index, alias_map, info.alias_map);
236: 		for (idx_t i = 0; i < statement.groups.size(); i++) {
237: 
238: 			// we keep a copy of the unbound expression;
239: 			// we keep the unbound copy around to check for group references in the SELECT and HAVING clause
240: 			// the reason we want the unbound copy is because we want to figure out whether an expression
241: 			// is a group reference BEFORE binding in the SELECT/HAVING binder
242: 			group_binder.unbound_expression = statement.groups[i]->Copy();
243: 			group_binder.bind_index = i;
244: 
245: 			// bind the groups
246: 			LogicalType group_type;
247: 			auto bound_expr = group_binder.Bind(statement.groups[i], &group_type);
248: 			D_ASSERT(bound_expr->return_type.id() != LogicalTypeId::INVALID);
249: 
250: 			// push a potential collation, if necessary
251: 			bound_expr =
252: 			    ExpressionBinder::PushCollation(context, move(bound_expr), StringType::GetCollation(group_type), true);
253: 			result->groups.push_back(move(bound_expr));
254: 
255: 			// in the unbound expression we DO bind the table names of any ColumnRefs
256: 			// we do this to make sure that "table.a" and "a" are treated the same
257: 			// if we wouldn't do this then (SELECT test.a FROM test GROUP BY a) would not work because "test.a" <> "a"
258: 			// hence we convert "a" -> "test.a" in the unbound expression
259: 			unbound_groups[i] = move(group_binder.unbound_expression);
260: 			ExpressionBinder::BindTableNames(*this, *unbound_groups[i]);
261: 			info.map[unbound_groups[i].get()] = i;
262: 		}
263: 	}
264: 
265: 	// bind the HAVING clause, if any
266: 	if (statement.having) {
267: 		HavingBinder having_binder(*this, context, *result, info, alias_map);
268: 		ExpressionBinder::BindTableNames(*this, *statement.having, &alias_map);
269: 		result->having = having_binder.Bind(statement.having);
270: 	}
271: 
272: 	// after that, we bind to the SELECT list
273: 	SelectBinder select_binder(*this, context, *result, info);
274: 	vector<LogicalType> internal_sql_types;
275: 	for (idx_t i = 0; i < statement.select_list.size(); i++) {
276: 		LogicalType result_type;
277: 		auto expr = select_binder.Bind(statement.select_list[i], &result_type);
278: 		if (statement.aggregate_handling == AggregateHandling::FORCE_AGGREGATES && select_binder.HasBoundColumns()) {
279: 			if (select_binder.BoundAggregates()) {
280: 				throw BinderException("Cannot mix aggregates with non-aggregated columns!");
281: 			}
282: 			// we are forcing aggregates, and the node has columns bound
283: 			// this entry becomes a group
284: 			auto group_ref = make_unique<BoundColumnRefExpression>(
285: 			    expr->return_type, ColumnBinding(result->group_index, result->groups.size()));
286: 			result->groups.push_back(move(expr));
287: 			expr = move(group_ref);
288: 		}
289: 		result->select_list.push_back(move(expr));
290: 		if (i < result->column_count) {
291: 			result->types.push_back(result_type);
292: 		}
293: 		internal_sql_types.push_back(result_type);
294: 		if (statement.aggregate_handling == AggregateHandling::FORCE_AGGREGATES) {
295: 			select_binder.ResetBindings();
296: 		}
297: 	}
298: 	result->need_prune = result->select_list.size() > result->column_count;
299: 
300: 	// in the normal select binder, we bind columns as if there is no aggregation
301: 	// i.e. in the query [SELECT i, SUM(i) FROM integers;] the "i" will be bound as a normal column
302: 	// since we have an aggregation, we need to either (1) throw an error, or (2) wrap the column in a FIRST() aggregate
303: 	// we choose the former one [CONTROVERSIAL: this is the PostgreSQL behavior]
304: 	if (!result->groups.empty() || !result->aggregates.empty() || statement.having) {
305: 		if (statement.aggregate_handling == AggregateHandling::NO_AGGREGATES_ALLOWED) {
306: 			throw BinderException("Aggregates cannot be present in a Project relation!");
307: 		} else if (statement.aggregate_handling == AggregateHandling::STANDARD_HANDLING) {
308: 			if (select_binder.HasBoundColumns()) {
309: 				auto &bound_columns = select_binder.GetBoundColumns();
310: 				throw BinderException(
311: 				    FormatError(bound_columns[0].query_location,
312: 				                "column \"%s\" must appear in the GROUP BY clause or be used in an aggregate function",
313: 				                bound_columns[0].name));
314: 			}
315: 		}
316: 	}
317: 
318: 	// now that the SELECT list is bound, we set the types of DISTINCT/ORDER BY expressions
319: 	BindModifierTypes(*result, internal_sql_types, result->projection_index);
320: 	return move(result);
321: }
322: 
323: } // namespace duckdb
[end of src/planner/binder/query_node/bind_select_node.cpp]
[start of src/planner/binder/query_node/plan_select_node.cpp]
1: #include "duckdb/planner/binder.hpp"
2: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
3: #include "duckdb/planner/expression/bound_reference_expression.hpp"
4: #include "duckdb/planner/operator/list.hpp"
5: #include "duckdb/planner/operator/logical_expression_get.hpp"
6: #include "duckdb/planner/operator/logical_limit.hpp"
7: #include "duckdb/planner/query_node/bound_select_node.hpp"
8: 
9: namespace duckdb {
10: 
11: unique_ptr<LogicalOperator> Binder::PlanFilter(unique_ptr<Expression> condition, unique_ptr<LogicalOperator> root) {
12: 	PlanSubqueries(&condition, &root);
13: 	auto filter = make_unique<LogicalFilter>(move(condition));
14: 	filter->AddChild(move(root));
15: 	return move(filter);
16: }
17: 
18: unique_ptr<LogicalOperator> Binder::CreatePlan(BoundSelectNode &statement) {
19: 	unique_ptr<LogicalOperator> root;
20: 	D_ASSERT(statement.from_table);
21: 	root = CreatePlan(*statement.from_table);
22: 	D_ASSERT(root);
23: 
24: 	// plan the sample clause
25: 	if (statement.sample_options) {
26: 		root = make_unique<LogicalSample>(move(statement.sample_options), move(root));
27: 	}
28: 
29: 	if (statement.where_clause) {
30: 		root = PlanFilter(move(statement.where_clause), move(root));
31: 	}
32: 
33: 	if (!statement.aggregates.empty() || !statement.groups.empty()) {
34: 		if (!statement.groups.empty()) {
35: 			// visit the groups
36: 			for (auto &group : statement.groups) {
37: 				PlanSubqueries(&group, &root);
38: 			}
39: 		}
40: 		// now visit all aggregate expressions
41: 		for (auto &expr : statement.aggregates) {
42: 			PlanSubqueries(&expr, &root);
43: 		}
44: 		// finally create the aggregate node with the group_index and aggregate_index as obtained from the binder
45: 		auto aggregate =
46: 		    make_unique<LogicalAggregate>(statement.group_index, statement.aggregate_index, move(statement.aggregates));
47: 		aggregate->groups = move(statement.groups);
48: 
49: 		aggregate->AddChild(move(root));
50: 		root = move(aggregate);
51: 	}
52: 
53: 	if (statement.having) {
54: 		PlanSubqueries(&statement.having, &root);
55: 		auto having = make_unique<LogicalFilter>(move(statement.having));
56: 
57: 		having->AddChild(move(root));
58: 		root = move(having);
59: 	}
60: 
61: 	if (!statement.windows.empty()) {
62: 		auto win = make_unique<LogicalWindow>(statement.window_index);
63: 		win->expressions = move(statement.windows);
64: 		// visit the window expressions
65: 		for (auto &expr : win->expressions) {
66: 			PlanSubqueries(&expr, &root);
67: 		}
68: 		D_ASSERT(!win->expressions.empty());
69: 		win->AddChild(move(root));
70: 		root = move(win);
71: 	}
72: 
73: 	if (!statement.unnests.empty()) {
74: 		auto unnest = make_unique<LogicalUnnest>(statement.unnest_index);
75: 		unnest->expressions = move(statement.unnests);
76: 		// visit the unnest expressions
77: 		for (auto &expr : unnest->expressions) {
78: 			PlanSubqueries(&expr, &root);
79: 		}
80: 		D_ASSERT(!unnest->expressions.empty());
81: 		unnest->AddChild(move(root));
82: 		root = move(unnest);
83: 	}
84: 
85: 	for (auto &expr : statement.select_list) {
86: 		PlanSubqueries(&expr, &root);
87: 	}
88: 
89: 	for (size_t i = 0; i < statement.modifiers.size(); i++) {
90: 		auto &modifier = statement.modifiers[i];
91: 		if (modifier->type != ResultModifierType::LIMIT_MODIFIER) {
92: 			continue;
93: 		}
94: 		auto &limit_modifier = (BoundLimitModifier &)*modifier;
95: 		if (limit_modifier.limit || limit_modifier.offset) {
96: 			PlanSubqueries(&limit_modifier.limit, &root);
97: 			PlanSubqueries(&limit_modifier.offset, &root);
98: 			auto limit = make_unique<LogicalLimit>(limit_modifier.limit_val, limit_modifier.offset_val,
99: 			                                       move(limit_modifier.limit), move(limit_modifier.offset));
100: 			limit->AddChild(move(root));
101: 			root = move(limit);
102: 			// Delete from modifiers
103: 			std::swap(statement.modifiers[i], statement.modifiers.back());
104: 			statement.modifiers.erase(statement.modifiers.end() - 1);
105: 			i--;
106: 		}
107: 	}
108: 
109: 	// create the projection
110: 	auto proj = make_unique<LogicalProjection>(statement.projection_index, move(statement.select_list));
111: 	auto &projection = *proj;
112: 	proj->AddChild(move(root));
113: 	root = move(proj);
114: 
115: 	// finish the plan by handling the elements of the QueryNode
116: 	root = VisitQueryNode(statement, move(root));
117: 
118: 	// add a prune node if necessary
119: 	if (statement.need_prune) {
120: 		D_ASSERT(root);
121: 		vector<unique_ptr<Expression>> prune_expressions;
122: 		for (idx_t i = 0; i < statement.column_count; i++) {
123: 			prune_expressions.push_back(make_unique<BoundColumnRefExpression>(
124: 			    projection.expressions[i]->return_type, ColumnBinding(statement.projection_index, i)));
125: 		}
126: 		auto prune = make_unique<LogicalProjection>(statement.prune_index, move(prune_expressions));
127: 		prune->AddChild(move(root));
128: 		root = move(prune);
129: 	}
130: 	return root;
131: }
132: 
133: } // namespace duckdb
[end of src/planner/binder/query_node/plan_select_node.cpp]
[start of src/planner/expression_binder/select_binder.cpp]
1: #include "duckdb/planner/expression_binder/select_binder.hpp"
2: 
3: #include "duckdb/parser/expression/columnref_expression.hpp"
4: #include "duckdb/parser/expression/window_expression.hpp"
5: #include "duckdb/parser/parsed_expression_iterator.hpp"
6: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
7: #include "duckdb/planner/expression/bound_window_expression.hpp"
8: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
9: #include "duckdb/planner/query_node/bound_select_node.hpp"
10: 
11: namespace duckdb {
12: 
13: SelectBinder::SelectBinder(Binder &binder, ClientContext &context, BoundSelectNode &node, BoundGroupInformation &info)
14:     : ExpressionBinder(binder, context), inside_window(false), node(node), info(info) {
15: }
16: 
17: BindResult SelectBinder::BindExpression(unique_ptr<ParsedExpression> *expr_ptr, idx_t depth, bool root_expression) {
18: 	auto &expr = **expr_ptr;
19: 	// check if the expression binds to one of the groups
20: 	auto group_index = TryBindGroup(expr, depth);
21: 	if (group_index != INVALID_INDEX) {
22: 		return BindGroup(expr, depth, group_index);
23: 	}
24: 	switch (expr.expression_class) {
25: 	case ExpressionClass::DEFAULT:
26: 		return BindResult("SELECT clause cannot contain DEFAULT clause");
27: 	case ExpressionClass::WINDOW:
28: 		return BindWindow((WindowExpression &)expr, depth);
29: 	default:
30: 		return ExpressionBinder::BindExpression(expr_ptr, depth);
31: 	}
32: }
33: 
34: idx_t SelectBinder::TryBindGroup(ParsedExpression &expr, idx_t depth) {
35: 	// first check the group alias map, if expr is a ColumnRefExpression
36: 	if (expr.type == ExpressionType::COLUMN_REF) {
37: 		auto &colref = (ColumnRefExpression &)expr;
38: 		if (colref.table_name.empty()) {
39: 			auto alias_entry = info.alias_map.find(colref.column_name);
40: 			if (alias_entry != info.alias_map.end()) {
41: 				// found entry!
42: 				return alias_entry->second;
43: 			}
44: 		}
45: 	}
46: 	// no alias reference found
47: 	// check the list of group columns for a match
48: 	auto entry = info.map.find(&expr);
49: 	if (entry != info.map.end()) {
50: 		return entry->second;
51: 	}
52: #ifdef DEBUG
53: 	for (auto entry : info.map) {
54: 		D_ASSERT(!entry.first->Equals(&expr));
55: 		D_ASSERT(!expr.Equals(entry.first));
56: 	}
57: #endif
58: 	return INVALID_INDEX;
59: }
60: 
61: BindResult SelectBinder::BindGroup(ParsedExpression &expr, idx_t depth, idx_t group_index) {
62: 	auto &group = node.groups[group_index];
63: 	return BindResult(make_unique<BoundColumnRefExpression>(expr.GetName(), group->return_type,
64: 	                                                        ColumnBinding(node.group_index, group_index), depth));
65: }
66: 
67: } // namespace duckdb
[end of src/planner/expression_binder/select_binder.cpp]
[start of src/planner/expression_iterator.cpp]
1: #include "duckdb/planner/expression_iterator.hpp"
2: 
3: #include "duckdb/planner/bound_query_node.hpp"
4: #include "duckdb/planner/expression/list.hpp"
5: #include "duckdb/planner/query_node/bound_select_node.hpp"
6: #include "duckdb/planner/query_node/bound_set_operation_node.hpp"
7: #include "duckdb/planner/tableref/list.hpp"
8: 
9: namespace duckdb {
10: 
11: void ExpressionIterator::EnumerateChildren(const Expression &expr,
12:                                            const std::function<void(const Expression &child)> &callback) {
13: 	EnumerateChildren((Expression &)expr, [&](unique_ptr<Expression> &child) { callback(*child); });
14: }
15: 
16: void ExpressionIterator::EnumerateChildren(Expression &expr, const std::function<void(Expression &child)> &callback) {
17: 	EnumerateChildren(expr, [&](unique_ptr<Expression> &child) { callback(*child); });
18: }
19: 
20: void ExpressionIterator::EnumerateChildren(Expression &expr,
21:                                            const std::function<void(unique_ptr<Expression> &child)> &callback) {
22: 	switch (expr.expression_class) {
23: 	case ExpressionClass::BOUND_AGGREGATE: {
24: 		auto &aggr_expr = (BoundAggregateExpression &)expr;
25: 		for (auto &child : aggr_expr.children) {
26: 			callback(child);
27: 		}
28: 		if (aggr_expr.filter) {
29: 			callback(aggr_expr.filter);
30: 		}
31: 		break;
32: 	}
33: 	case ExpressionClass::BOUND_BETWEEN: {
34: 		auto &between_expr = (BoundBetweenExpression &)expr;
35: 		callback(between_expr.input);
36: 		callback(between_expr.lower);
37: 		callback(between_expr.upper);
38: 		break;
39: 	}
40: 	case ExpressionClass::BOUND_CASE: {
41: 		auto &case_expr = (BoundCaseExpression &)expr;
42: 		callback(case_expr.check);
43: 		callback(case_expr.result_if_true);
44: 		callback(case_expr.result_if_false);
45: 		break;
46: 	}
47: 	case ExpressionClass::BOUND_CAST: {
48: 		auto &cast_expr = (BoundCastExpression &)expr;
49: 		callback(cast_expr.child);
50: 		break;
51: 	}
52: 	case ExpressionClass::BOUND_COMPARISON: {
53: 		auto &comp_expr = (BoundComparisonExpression &)expr;
54: 		callback(comp_expr.left);
55: 		callback(comp_expr.right);
56: 		break;
57: 	}
58: 	case ExpressionClass::BOUND_CONJUNCTION: {
59: 		auto &conj_expr = (BoundConjunctionExpression &)expr;
60: 		for (auto &child : conj_expr.children) {
61: 			callback(child);
62: 		}
63: 		break;
64: 	}
65: 	case ExpressionClass::BOUND_FUNCTION: {
66: 		auto &func_expr = (BoundFunctionExpression &)expr;
67: 		for (auto &child : func_expr.children) {
68: 			callback(child);
69: 		}
70: 		break;
71: 	}
72: 	case ExpressionClass::BOUND_OPERATOR: {
73: 		auto &op_expr = (BoundOperatorExpression &)expr;
74: 		for (auto &child : op_expr.children) {
75: 			callback(child);
76: 		}
77: 		break;
78: 	}
79: 	case ExpressionClass::BOUND_SUBQUERY: {
80: 		auto &subquery_expr = (BoundSubqueryExpression &)expr;
81: 		if (subquery_expr.child) {
82: 			callback(subquery_expr.child);
83: 		}
84: 		break;
85: 	}
86: 	case ExpressionClass::BOUND_WINDOW: {
87: 		auto &window_expr = (BoundWindowExpression &)expr;
88: 		for (auto &partition : window_expr.partitions) {
89: 			callback(partition);
90: 		}
91: 		for (auto &order : window_expr.orders) {
92: 			callback(order.expression);
93: 		}
94: 		for (auto &child : window_expr.children) {
95: 			callback(child);
96: 		}
97: 		if (window_expr.start_expr) {
98: 			callback(window_expr.start_expr);
99: 		}
100: 		if (window_expr.end_expr) {
101: 			callback(window_expr.end_expr);
102: 		}
103: 		if (window_expr.offset_expr) {
104: 			callback(window_expr.offset_expr);
105: 		}
106: 		if (window_expr.default_expr) {
107: 			callback(window_expr.default_expr);
108: 		}
109: 		break;
110: 	}
111: 	case ExpressionClass::BOUND_UNNEST: {
112: 		auto &unnest_expr = (BoundUnnestExpression &)expr;
113: 		callback(unnest_expr.child);
114: 		break;
115: 	}
116: 	case ExpressionClass::BOUND_COLUMN_REF:
117: 	case ExpressionClass::BOUND_CONSTANT:
118: 	case ExpressionClass::BOUND_DEFAULT:
119: 	case ExpressionClass::BOUND_PARAMETER:
120: 	case ExpressionClass::BOUND_REF:
121: 		// these node types have no children
122: 		break;
123: 	default:
124: 		throw InternalException("ExpressionIterator used on unbound expression");
125: 	}
126: }
127: 
128: void ExpressionIterator::EnumerateExpression(unique_ptr<Expression> &expr,
129:                                              const std::function<void(Expression &child)> &callback) {
130: 	if (!expr) {
131: 		return;
132: 	}
133: 	callback(*expr);
134: 	ExpressionIterator::EnumerateChildren(*expr,
135: 	                                      [&](unique_ptr<Expression> &child) { EnumerateExpression(child, callback); });
136: }
137: 
138: void ExpressionIterator::EnumerateTableRefChildren(BoundTableRef &ref,
139:                                                    const std::function<void(Expression &child)> &callback) {
140: 	switch (ref.type) {
141: 	case TableReferenceType::CROSS_PRODUCT: {
142: 		auto &bound_crossproduct = (BoundCrossProductRef &)ref;
143: 		EnumerateTableRefChildren(*bound_crossproduct.left, callback);
144: 		EnumerateTableRefChildren(*bound_crossproduct.right, callback);
145: 		break;
146: 	}
147: 	case TableReferenceType::JOIN: {
148: 		auto &bound_join = (BoundJoinRef &)ref;
149: 		EnumerateExpression(bound_join.condition, callback);
150: 		EnumerateTableRefChildren(*bound_join.left, callback);
151: 		EnumerateTableRefChildren(*bound_join.right, callback);
152: 		break;
153: 	}
154: 	case TableReferenceType::SUBQUERY: {
155: 		auto &bound_subquery = (BoundSubqueryRef &)ref;
156: 		EnumerateQueryNodeChildren(*bound_subquery.subquery, callback);
157: 		break;
158: 	}
159: 	default:
160: 		D_ASSERT(ref.type == TableReferenceType::TABLE_FUNCTION || ref.type == TableReferenceType::BASE_TABLE ||
161: 		         ref.type == TableReferenceType::EMPTY);
162: 		break;
163: 	}
164: }
165: 
166: void ExpressionIterator::EnumerateQueryNodeChildren(BoundQueryNode &node,
167:                                                     const std::function<void(Expression &child)> &callback) {
168: 	switch (node.type) {
169: 	case QueryNodeType::SET_OPERATION_NODE: {
170: 		auto &bound_setop = (BoundSetOperationNode &)node;
171: 		EnumerateQueryNodeChildren(*bound_setop.left, callback);
172: 		EnumerateQueryNodeChildren(*bound_setop.right, callback);
173: 		break;
174: 	}
175: 	default:
176: 		D_ASSERT(node.type == QueryNodeType::SELECT_NODE);
177: 		auto &bound_select = (BoundSelectNode &)node;
178: 		for (idx_t i = 0; i < bound_select.select_list.size(); i++) {
179: 			EnumerateExpression(bound_select.select_list[i], callback);
180: 		}
181: 		EnumerateExpression(bound_select.where_clause, callback);
182: 		for (idx_t i = 0; i < bound_select.groups.size(); i++) {
183: 			EnumerateExpression(bound_select.groups[i], callback);
184: 		}
185: 		EnumerateExpression(bound_select.having, callback);
186: 		for (idx_t i = 0; i < bound_select.aggregates.size(); i++) {
187: 			EnumerateExpression(bound_select.aggregates[i], callback);
188: 		}
189: 		for (idx_t i = 0; i < bound_select.unnests.size(); i++) {
190: 			EnumerateExpression(bound_select.unnests[i], callback);
191: 		}
192: 		for (idx_t i = 0; i < bound_select.windows.size(); i++) {
193: 			EnumerateExpression(bound_select.windows[i], callback);
194: 		}
195: 		if (bound_select.from_table) {
196: 			EnumerateTableRefChildren(*bound_select.from_table, callback);
197: 		}
198: 		break;
199: 	}
200: 	for (idx_t i = 0; i < node.modifiers.size(); i++) {
201: 		switch (node.modifiers[i]->type) {
202: 		case ResultModifierType::DISTINCT_MODIFIER:
203: 			for (auto &expr : ((BoundDistinctModifier &)*node.modifiers[i]).target_distincts) {
204: 				EnumerateExpression(expr, callback);
205: 			}
206: 			break;
207: 		case ResultModifierType::ORDER_MODIFIER:
208: 			for (auto &order : ((BoundOrderModifier &)*node.modifiers[i]).orders) {
209: 				EnumerateExpression(order.expression, callback);
210: 			}
211: 			break;
212: 		default:
213: 			break;
214: 		}
215: 	}
216: }
217: 
218: } // namespace duckdb
[end of src/planner/expression_iterator.cpp]
[start of src/planner/operator/logical_aggregate.cpp]
1: #include "duckdb/planner/operator/logical_aggregate.hpp"
2: #include "duckdb/common/string_util.hpp"
3: 
4: namespace duckdb {
5: 
6: LogicalAggregate::LogicalAggregate(idx_t group_index, idx_t aggregate_index, vector<unique_ptr<Expression>> select_list)
7:     : LogicalOperator(LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY, move(select_list)), group_index(group_index),
8:       aggregate_index(aggregate_index) {
9: }
10: 
11: void LogicalAggregate::ResolveTypes() {
12: 	for (auto &expr : groups) {
13: 		types.push_back(expr->return_type);
14: 	}
15: 	// get the chunk types from the projection list
16: 	for (auto &expr : expressions) {
17: 		types.push_back(expr->return_type);
18: 	}
19: }
20: 
21: vector<ColumnBinding> LogicalAggregate::GetColumnBindings() {
22: 	vector<ColumnBinding> result;
23: 	for (idx_t i = 0; i < groups.size(); i++) {
24: 		result.emplace_back(group_index, i);
25: 	}
26: 	for (idx_t i = 0; i < expressions.size(); i++) {
27: 		result.emplace_back(aggregate_index, i);
28: 	}
29: 	return result;
30: }
31: 
32: string LogicalAggregate::ParamsToString() const {
33: 	string result;
34: 	for (idx_t i = 0; i < groups.size(); i++) {
35: 		if (i > 0) {
36: 			result += "\n";
37: 		}
38: 		result += groups[i]->GetName();
39: 	}
40: 	for (idx_t i = 0; i < expressions.size(); i++) {
41: 		if (i > 0 || !groups.empty()) {
42: 			result += "\n";
43: 		}
44: 		result += expressions[i]->GetName();
45: 	}
46: 	return result;
47: }
48: 
49: } // namespace duckdb
[end of src/planner/operator/logical_aggregate.cpp]
[start of src/planner/planner.cpp]
1: #include "duckdb/planner/planner.hpp"
2: #include "duckdb/main/query_profiler.hpp"
3: #include "duckdb/common/serializer.hpp"
4: #include "duckdb/main/client_context.hpp"
5: #include "duckdb/main/database.hpp"
6: #include "duckdb/parser/statement/pragma_statement.hpp"
7: #include "duckdb/parser/statement/prepare_statement.hpp"
8: #include "duckdb/main/prepared_statement_data.hpp"
9: #include "duckdb/planner/binder.hpp"
10: #include "duckdb/planner/expression/bound_parameter_expression.hpp"
11: #include "duckdb/planner/operator/logical_execute.hpp"
12: #include "duckdb/planner/operator/logical_prepare.hpp"
13: #include "duckdb/planner/expression_binder/constant_binder.hpp"
14: #include "duckdb/parser/statement/execute_statement.hpp"
15: #include "duckdb/execution/expression_executor.hpp"
16: #include "duckdb/transaction/transaction.hpp"
17: 
18: namespace duckdb {
19: 
20: Planner::Planner(ClientContext &context) : binder(Binder::CreateBinder(context)), context(context) {
21: }
22: 
23: void Planner::CreatePlan(SQLStatement &statement) {
24: 	vector<BoundParameterExpression *> bound_parameters;
25: 
26: 	// first bind the tables and columns to the catalog
27: 	context.profiler->StartPhase("binder");
28: 	binder->parameters = &bound_parameters;
29: 	auto bound_statement = binder->Bind(statement);
30: 	context.profiler->EndPhase();
31: 
32: 	this->read_only = binder->read_only;
33: 	this->requires_valid_transaction = binder->requires_valid_transaction;
34: 	this->allow_stream_result = binder->allow_stream_result;
35: 	this->names = bound_statement.names;
36: 	this->types = bound_statement.types;
37: 	this->plan = move(bound_statement.plan);
38: 
39: 	// set up a map of parameter number -> value entries
40: 	for (auto &expr : bound_parameters) {
41: 		// check if the type of the parameter could be resolved
42: 		if (expr->return_type.id() == LogicalTypeId::INVALID || expr->return_type.id() == LogicalTypeId::UNKNOWN) {
43: 			throw InternalException("Could not determine type of parameters");
44: 		}
45: 		auto value = make_unique<Value>(expr->return_type);
46: 		expr->value = value.get();
47: 		// check if the parameter number has been used before
48: 		if (value_map.find(expr->parameter_nr) == value_map.end()) {
49: 			// not used before, create vector
50: 			value_map[expr->parameter_nr] = vector<unique_ptr<Value>>();
51: 		} else if (value_map[expr->parameter_nr].back()->type() != value->type()) {
52: 			// used before, but types are inconsistent
53: 			throw BinderException("Inconsistent types found for parameter with index %llu", expr->parameter_nr);
54: 		}
55: 		value_map[expr->parameter_nr].push_back(move(value));
56: 	}
57: }
58: 
59: shared_ptr<PreparedStatementData> Planner::PrepareSQLStatement(unique_ptr<SQLStatement> statement) {
60: 	auto copied_statement = statement->Copy();
61: 	// create a plan of the underlying statement
62: 	CreatePlan(move(statement));
63: 	// now create the logical prepare
64: 	auto prepared_data = make_shared<PreparedStatementData>(copied_statement->type);
65: 	prepared_data->unbound_statement = move(copied_statement);
66: 	prepared_data->names = names;
67: 	prepared_data->types = types;
68: 	prepared_data->value_map = move(value_map);
69: 	prepared_data->read_only = this->read_only;
70: 	prepared_data->requires_valid_transaction = this->requires_valid_transaction;
71: 	prepared_data->allow_stream_result = this->allow_stream_result;
72: 	prepared_data->catalog_version = Transaction::GetTransaction(context).catalog_version;
73: 	return prepared_data;
74: }
75: 
76: void Planner::PlanExecute(unique_ptr<SQLStatement> statement) {
77: 	auto &stmt = (ExecuteStatement &)*statement;
78: 
79: 	// bind the prepared statement
80: 	auto entry = context.prepared_statements.find(stmt.name);
81: 	if (entry == context.prepared_statements.end()) {
82: 		throw BinderException("Prepared statement \"%s\" does not exist", stmt.name);
83: 	}
84: 
85: 	// check if we need to rebind the prepared statement
86: 	// this happens if the catalog changes, since in this case e.g. tables we relied on may have been deleted
87: 	auto prepared = entry->second;
88: 	auto &catalog = Catalog::GetCatalog(context);
89: 	bool rebound = false;
90: 	if (catalog.GetCatalogVersion() != entry->second->catalog_version) {
91: 		// catalog was modified: rebind the statement before running the execute
92: 		prepared = PrepareSQLStatement(entry->second->unbound_statement->Copy());
93: 		if (prepared->types != entry->second->types) {
94: 			throw BinderException("Rebinding statement \"%s\" after catalog change resulted in change of types",
95: 			                      stmt.name);
96: 		}
97: 		rebound = true;
98: 	}
99: 
100: 	// the bound prepared statement is ready: bind any supplied parameters
101: 	vector<Value> bind_values;
102: 	for (idx_t i = 0; i < stmt.values.size(); i++) {
103: 		ConstantBinder cbinder(*binder, context, "EXECUTE statement");
104: 		cbinder.target_type = prepared->GetType(i + 1);
105: 		auto bound_expr = cbinder.Bind(stmt.values[i]);
106: 
107: 		Value value = ExpressionExecutor::EvaluateScalar(*bound_expr);
108: 		bind_values.push_back(move(value));
109: 	}
110: 	prepared->Bind(move(bind_values));
111: 	if (rebound) {
112: 		return;
113: 	}
114: 
115: 	// copy the properties of the prepared statement into the planner
116: 	this->read_only = prepared->read_only;
117: 	this->requires_valid_transaction = prepared->requires_valid_transaction;
118: 	this->allow_stream_result = prepared->allow_stream_result;
119: 	this->names = prepared->names;
120: 	this->types = prepared->types;
121: 	this->plan = make_unique<LogicalExecute>(move(prepared));
122: }
123: 
124: void Planner::PlanPrepare(unique_ptr<SQLStatement> statement) {
125: 	auto &stmt = (PrepareStatement &)*statement;
126: 	auto prepared_data = PrepareSQLStatement(move(stmt.statement));
127: 
128: 	auto prepare = make_unique<LogicalPrepare>(stmt.name, move(prepared_data), move(plan));
129: 	// we can prepare in read-only mode: prepared statements are not written to the catalog
130: 	this->read_only = true;
131: 	// we can always prepare, even if the transaction has been invalidated
132: 	// this is required because most clients ALWAYS invoke prepared statements
133: 	this->requires_valid_transaction = false;
134: 	this->allow_stream_result = false;
135: 	this->names = {"Success"};
136: 	this->types = {LogicalType::BOOLEAN};
137: 	this->plan = move(prepare);
138: }
139: 
140: void Planner::CreatePlan(unique_ptr<SQLStatement> statement) {
141: 	D_ASSERT(statement);
142: 	switch (statement->type) {
143: 	case StatementType::SELECT_STATEMENT:
144: 	case StatementType::INSERT_STATEMENT:
145: 	case StatementType::COPY_STATEMENT:
146: 	case StatementType::DELETE_STATEMENT:
147: 	case StatementType::UPDATE_STATEMENT:
148: 	case StatementType::CREATE_STATEMENT:
149: 	case StatementType::DROP_STATEMENT:
150: 	case StatementType::ALTER_STATEMENT:
151: 	case StatementType::TRANSACTION_STATEMENT:
152: 	case StatementType::EXPLAIN_STATEMENT:
153: 	case StatementType::VACUUM_STATEMENT:
154: 	case StatementType::RELATION_STATEMENT:
155: 	case StatementType::CALL_STATEMENT:
156: 	case StatementType::EXPORT_STATEMENT:
157: 	case StatementType::PRAGMA_STATEMENT:
158: 	case StatementType::SHOW_STATEMENT:
159: 	case StatementType::SET_STATEMENT:
160: 	case StatementType::LOAD_STATEMENT:
161: 		CreatePlan(*statement);
162: 		break;
163: 	case StatementType::EXECUTE_STATEMENT:
164: 		PlanExecute(move(statement));
165: 		break;
166: 	case StatementType::PREPARE_STATEMENT:
167: 		PlanPrepare(move(statement));
168: 		break;
169: 	default:
170: 		throw NotImplementedException("Cannot plan statement of type %s!", StatementTypeToString(statement->type));
171: 	}
172: }
173: 
174: } // namespace duckdb
[end of src/planner/planner.cpp]
[start of src/planner/subquery/flatten_dependent_join.cpp]
1: #include "duckdb/planner/subquery/flatten_dependent_join.hpp"
2: 
3: #include "duckdb/planner/binder.hpp"
4: #include "duckdb/planner/expression/list.hpp"
5: #include "duckdb/planner/logical_operator_visitor.hpp"
6: #include "duckdb/planner/binder.hpp"
7: #include "duckdb/planner/operator/list.hpp"
8: #include "duckdb/planner/subquery/has_correlated_expressions.hpp"
9: #include "duckdb/planner/subquery/rewrite_correlated_expressions.hpp"
10: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
11: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
12: #include "duckdb/function/aggregate/distributive_functions.hpp"
13: 
14: namespace duckdb {
15: 
16: FlattenDependentJoins::FlattenDependentJoins(Binder &binder, const vector<CorrelatedColumnInfo> &correlated)
17:     : binder(binder), correlated_columns(correlated) {
18: 	for (idx_t i = 0; i < correlated_columns.size(); i++) {
19: 		auto &col = correlated_columns[i];
20: 		correlated_map[col.binding] = i;
21: 		delim_types.push_back(col.type);
22: 	}
23: }
24: 
25: bool FlattenDependentJoins::DetectCorrelatedExpressions(LogicalOperator *op) {
26: 	D_ASSERT(op);
27: 	// check if this entry has correlated expressions
28: 	HasCorrelatedExpressions visitor(correlated_columns);
29: 	visitor.VisitOperator(*op);
30: 	bool has_correlation = visitor.has_correlated_expressions;
31: 	// now visit the children of this entry and check if they have correlated expressions
32: 	for (auto &child : op->children) {
33: 		// we OR the property with its children such that has_correlation is true if either
34: 		// (1) this node has a correlated expression or
35: 		// (2) one of its children has a correlated expression
36: 		if (DetectCorrelatedExpressions(child.get())) {
37: 			has_correlation = true;
38: 		}
39: 	}
40: 	// set the entry in the map
41: 	has_correlated_expressions[op] = has_correlation;
42: 	return has_correlation;
43: }
44: 
45: unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoin(unique_ptr<LogicalOperator> plan) {
46: 	auto result = PushDownDependentJoinInternal(move(plan));
47: 	if (!replacement_map.empty()) {
48: 		// check if we have to replace any COUNT aggregates into "CASE WHEN X IS NULL THEN 0 ELSE COUNT END"
49: 		RewriteCountAggregates aggr(replacement_map);
50: 		aggr.VisitOperator(*result);
51: 	}
52: 	return result;
53: }
54: 
55: unique_ptr<LogicalOperator> FlattenDependentJoins::PushDownDependentJoinInternal(unique_ptr<LogicalOperator> plan) {
56: 	// first check if the logical operator has correlated expressions
57: 	auto entry = has_correlated_expressions.find(plan.get());
58: 	D_ASSERT(entry != has_correlated_expressions.end());
59: 	if (!entry->second) {
60: 		// we reached a node without correlated expressions
61: 		// we can eliminate the dependent join now and create a simple cross product
62: 		auto cross_product = make_unique<LogicalCrossProduct>();
63: 		// now create the duplicate eliminated scan for this node
64: 		auto delim_index = binder.GenerateTableIndex();
65: 		this->base_binding = ColumnBinding(delim_index, 0);
66: 		auto delim_scan = make_unique<LogicalDelimGet>(delim_index, delim_types);
67: 		cross_product->children.push_back(move(delim_scan));
68: 		cross_product->children.push_back(move(plan));
69: 		return move(cross_product);
70: 	}
71: 	switch (plan->type) {
72: 	case LogicalOperatorType::LOGICAL_UNNEST:
73: 	case LogicalOperatorType::LOGICAL_FILTER: {
74: 		// filter
75: 		// first we flatten the dependent join in the child of the filter
76: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
77: 		// then we replace any correlated expressions with the corresponding entry in the correlated_map
78: 		RewriteCorrelatedExpressions rewriter(base_binding, correlated_map);
79: 		rewriter.VisitOperator(*plan);
80: 		return plan;
81: 	}
82: 	case LogicalOperatorType::LOGICAL_PROJECTION: {
83: 		// projection
84: 		// first we flatten the dependent join in the child of the projection
85: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
86: 		// then we replace any correlated expressions with the corresponding entry in the correlated_map
87: 		RewriteCorrelatedExpressions rewriter(base_binding, correlated_map);
88: 		rewriter.VisitOperator(*plan);
89: 		// now we add all the columns of the delim_scan to the projection list
90: 		auto proj = (LogicalProjection *)plan.get();
91: 		for (idx_t i = 0; i < correlated_columns.size(); i++) {
92: 			auto colref = make_unique<BoundColumnRefExpression>(
93: 			    correlated_columns[i].type, ColumnBinding(base_binding.table_index, base_binding.column_index + i));
94: 			plan->expressions.push_back(move(colref));
95: 		}
96: 
97: 		base_binding.table_index = proj->table_index;
98: 		this->delim_offset = base_binding.column_index = plan->expressions.size() - correlated_columns.size();
99: 		this->data_offset = 0;
100: 		return plan;
101: 	}
102: 	case LogicalOperatorType::LOGICAL_AGGREGATE_AND_GROUP_BY: {
103: 		auto &aggr = (LogicalAggregate &)*plan;
104: 		// aggregate and group by
105: 		// first we flatten the dependent join in the child of the projection
106: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
107: 		// then we replace any correlated expressions with the corresponding entry in the correlated_map
108: 		RewriteCorrelatedExpressions rewriter(base_binding, correlated_map);
109: 		rewriter.VisitOperator(*plan);
110: 		// now we add all the columns of the delim_scan to the grouping operators AND the projection list
111: 		for (idx_t i = 0; i < correlated_columns.size(); i++) {
112: 			auto colref = make_unique<BoundColumnRefExpression>(
113: 			    correlated_columns[i].type, ColumnBinding(base_binding.table_index, base_binding.column_index + i));
114: 			aggr.groups.push_back(move(colref));
115: 		}
116: 		if (aggr.groups.size() == correlated_columns.size()) {
117: 			// we have to perform a LEFT OUTER JOIN between the result of this aggregate and the delim scan
118: 			// FIXME: this does not always have to be a LEFT OUTER JOIN, depending on whether aggr.expressions return
119: 			// NULL or a value
120: 			auto left_outer_join = make_unique<LogicalComparisonJoin>(JoinType::LEFT);
121: 			auto left_index = binder.GenerateTableIndex();
122: 			auto delim_scan = make_unique<LogicalDelimGet>(left_index, delim_types);
123: 			left_outer_join->children.push_back(move(delim_scan));
124: 			left_outer_join->children.push_back(move(plan));
125: 			for (idx_t i = 0; i < correlated_columns.size(); i++) {
126: 				JoinCondition cond;
127: 				cond.left =
128: 				    make_unique<BoundColumnRefExpression>(correlated_columns[i].type, ColumnBinding(left_index, i));
129: 				cond.right = make_unique<BoundColumnRefExpression>(
130: 				    correlated_columns[i].type,
131: 				    ColumnBinding(aggr.group_index, (aggr.groups.size() - correlated_columns.size()) + i));
132: 				cond.comparison = ExpressionType::COMPARE_EQUAL;
133: 				cond.null_values_are_equal = true;
134: 				left_outer_join->conditions.push_back(move(cond));
135: 			}
136: 			// for any COUNT aggregate we replace references to the column with: CASE WHEN COUNT(*) IS NULL THEN 0
137: 			// ELSE COUNT(*) END
138: 			for (idx_t i = 0; i < aggr.expressions.size(); i++) {
139: 				D_ASSERT(aggr.expressions[i]->GetExpressionClass() == ExpressionClass::BOUND_AGGREGATE);
140: 				auto bound = (BoundAggregateExpression *)&*aggr.expressions[i];
141: 				vector<LogicalType> arguments;
142: 				if (bound->function == CountFun::GetFunction() || bound->function == CountStarFun::GetFunction()) {
143: 					// have to replace this ColumnBinding with the CASE expression
144: 					replacement_map[ColumnBinding(aggr.aggregate_index, i)] = i;
145: 				}
146: 			}
147: 			// now we update the delim_index
148: 
149: 			base_binding.table_index = left_index;
150: 			this->delim_offset = base_binding.column_index = 0;
151: 			this->data_offset = 0;
152: 			return move(left_outer_join);
153: 		} else {
154: 			// update the delim_index
155: 			base_binding.table_index = aggr.group_index;
156: 			this->delim_offset = base_binding.column_index = aggr.groups.size() - correlated_columns.size();
157: 			this->data_offset = aggr.groups.size();
158: 			return plan;
159: 		}
160: 	}
161: 	case LogicalOperatorType::LOGICAL_CROSS_PRODUCT: {
162: 		// cross product
163: 		// push into both sides of the plan
164: 		bool left_has_correlation = has_correlated_expressions.find(plan->children[0].get())->second;
165: 		bool right_has_correlation = has_correlated_expressions.find(plan->children[1].get())->second;
166: 		if (!right_has_correlation) {
167: 			// only left has correlation: push into left
168: 			plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
169: 			return plan;
170: 		}
171: 		if (!left_has_correlation) {
172: 			// only right has correlation: push into right
173: 			plan->children[1] = PushDownDependentJoinInternal(move(plan->children[1]));
174: 			return plan;
175: 		}
176: 		// both sides have correlation
177: 		// turn into an inner join
178: 		auto join = make_unique<LogicalComparisonJoin>(JoinType::INNER);
179: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
180: 		auto left_binding = this->base_binding;
181: 		plan->children[1] = PushDownDependentJoinInternal(move(plan->children[1]));
182: 		// add the correlated columns to the join conditions
183: 		for (idx_t i = 0; i < correlated_columns.size(); i++) {
184: 			JoinCondition cond;
185: 			cond.left = make_unique<BoundColumnRefExpression>(
186: 			    correlated_columns[i].type, ColumnBinding(left_binding.table_index, left_binding.column_index + i));
187: 			cond.right = make_unique<BoundColumnRefExpression>(
188: 			    correlated_columns[i].type, ColumnBinding(base_binding.table_index, base_binding.column_index + i));
189: 			cond.comparison = ExpressionType::COMPARE_EQUAL;
190: 			cond.null_values_are_equal = true;
191: 			join->conditions.push_back(move(cond));
192: 		}
193: 		join->children.push_back(move(plan->children[0]));
194: 		join->children.push_back(move(plan->children[1]));
195: 		return move(join);
196: 	}
197: 	case LogicalOperatorType::LOGICAL_COMPARISON_JOIN: {
198: 		auto &join = (LogicalComparisonJoin &)*plan;
199: 		D_ASSERT(plan->children.size() == 2);
200: 		// check the correlated expressions in the children of the join
201: 		bool left_has_correlation = has_correlated_expressions.find(plan->children[0].get())->second;
202: 		bool right_has_correlation = has_correlated_expressions.find(plan->children[1].get())->second;
203: 
204: 		if (join.join_type == JoinType::INNER) {
205: 			// inner join
206: 			if (!right_has_correlation) {
207: 				// only left has correlation: push into left
208: 				plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
209: 				return plan;
210: 			}
211: 			if (!left_has_correlation) {
212: 				// only right has correlation: push into right
213: 				plan->children[1] = PushDownDependentJoinInternal(move(plan->children[1]));
214: 				return plan;
215: 			}
216: 		} else if (join.join_type == JoinType::LEFT) {
217: 			// left outer join
218: 			if (!right_has_correlation) {
219: 				// only left has correlation: push into left
220: 				plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
221: 				return plan;
222: 			}
223: 		} else if (join.join_type == JoinType::MARK) {
224: 			if (right_has_correlation) {
225: 				throw Exception("MARK join with correlation in RHS not supported");
226: 			}
227: 			// push the child into the LHS
228: 			plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
229: 			// rewrite expressions in the join conditions
230: 			RewriteCorrelatedExpressions rewriter(base_binding, correlated_map);
231: 			rewriter.VisitOperator(*plan);
232: 			return plan;
233: 		} else {
234: 			throw Exception("Unsupported join type for flattening correlated subquery");
235: 		}
236: 		// both sides have correlation
237: 		// push into both sides
238: 		// NOTE: for OUTER JOINS it matters what the BASE BINDING is after the join
239: 		// for the LEFT OUTER JOIN, we want the LEFT side to be the base binding after we push
240: 		// because the RIGHT binding might contain NULL values
241: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
242: 		auto left_binding = this->base_binding;
243: 		plan->children[1] = PushDownDependentJoinInternal(move(plan->children[1]));
244: 		auto right_binding = this->base_binding;
245: 		if (join.join_type == JoinType::LEFT) {
246: 			this->base_binding = left_binding;
247: 		}
248: 		// add the correlated columns to the join conditions
249: 		for (idx_t i = 0; i < correlated_columns.size(); i++) {
250: 			JoinCondition cond;
251: 
252: 			cond.left = make_unique<BoundColumnRefExpression>(
253: 			    correlated_columns[i].type, ColumnBinding(left_binding.table_index, left_binding.column_index + i));
254: 			cond.right = make_unique<BoundColumnRefExpression>(
255: 			    correlated_columns[i].type, ColumnBinding(right_binding.table_index, right_binding.column_index + i));
256: 			cond.comparison = ExpressionType::COMPARE_EQUAL;
257: 			cond.null_values_are_equal = true;
258: 			join.conditions.push_back(move(cond));
259: 		}
260: 		// then we replace any correlated expressions with the corresponding entry in the correlated_map
261: 		RewriteCorrelatedExpressions rewriter(right_binding, correlated_map);
262: 		rewriter.VisitOperator(*plan);
263: 		return plan;
264: 	}
265: 	case LogicalOperatorType::LOGICAL_LIMIT: {
266: 		auto &limit = (LogicalLimit &)*plan;
267: 		if (limit.offset_val > 0) {
268: 			throw ParserException("OFFSET not supported in correlated subquery");
269: 		}
270: 		if (limit.limit) {
271: 			throw ParserException("Non-constant limit not supported in correlated subquery");
272: 		}
273: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
274: 		if (limit.limit_val == 0) {
275: 			// limit = 0 means we return zero columns here
276: 			return plan;
277: 		} else {
278: 			// limit > 0 does nothing
279: 			return move(plan->children[0]);
280: 		}
281: 	}
282: 	case LogicalOperatorType::LOGICAL_WINDOW: {
283: 		auto &window = (LogicalWindow &)*plan;
284: 		// push into children
285: 		plan->children[0] = PushDownDependentJoinInternal(move(plan->children[0]));
286: 		// add the correlated columns to the PARTITION BY clauses in the Window
287: 		for (auto &expr : window.expressions) {
288: 			D_ASSERT(expr->GetExpressionClass() == ExpressionClass::BOUND_WINDOW);
289: 			auto &w = (BoundWindowExpression &)*expr;
290: 			for (idx_t i = 0; i < correlated_columns.size(); i++) {
291: 				w.partitions.push_back(make_unique<BoundColumnRefExpression>(
292: 				    correlated_columns[i].type,
293: 				    ColumnBinding(base_binding.table_index, base_binding.column_index + i)));
294: 			}
295: 		}
296: 		return plan;
297: 	}
298: 	case LogicalOperatorType::LOGICAL_EXCEPT:
299: 	case LogicalOperatorType::LOGICAL_INTERSECT:
300: 	case LogicalOperatorType::LOGICAL_UNION: {
301: 		auto &setop = (LogicalSetOperation &)*plan;
302: 		// set operator, push into both children
303: 		plan->children[0] = PushDownDependentJoin(move(plan->children[0]));
304: 		plan->children[1] = PushDownDependentJoin(move(plan->children[1]));
305: 		// we have to refer to the setop index now
306: 		base_binding.table_index = setop.table_index;
307: 		base_binding.column_index = setop.column_count;
308: 		setop.column_count += correlated_columns.size();
309: 		return plan;
310: 	}
311: 	case LogicalOperatorType::LOGICAL_DISTINCT:
312: 		plan->children[0] = PushDownDependentJoin(move(plan->children[0]));
313: 		return plan;
314: 	case LogicalOperatorType::LOGICAL_ORDER_BY:
315: 		throw ParserException("ORDER BY not supported in correlated subquery");
316: 	default:
317: 		throw InternalException("Logical operator type \"%s\" for dependent join", LogicalOperatorToString(plan->type));
318: 	}
319: }
320: 
321: } // namespace duckdb
[end of src/planner/subquery/flatten_dependent_join.cpp]
[start of src/storage/storage_info.cpp]
1: #include "duckdb/storage/storage_info.hpp"
2: 
3: namespace duckdb {
4: 
5: const uint64_t VERSION_NUMBER = 26;
6: 
7: } // namespace duckdb
[end of src/storage/storage_info.cpp]
[start of third_party/libpg_query/grammar/grammar.y]
1: %{
2: {{{ GRAMMAR_HEADER }}}
3: %}
4: #line 5 "third_party/libpg_query/grammar/grammar.y"
5: %pure-parser
6: %expect 0
7: %name-prefix="base_yy"
8: %locations
9: 
10: %parse-param {core_yyscan_t yyscanner}
11: %lex-param   {core_yyscan_t yyscanner}
12: 
13: %union
14: {
15: 	core_YYSTYPE		core_yystype;
16: 	/* these fields must match core_YYSTYPE: */
17: 	int					ival;
18: 	char				*str;
19: 	const char			*keyword;
20: 	const char          *conststr;
21: 
22: 	char				chr;
23: 	bool				boolean;
24: 	PGJoinType			jtype;
25: 	PGDropBehavior		dbehavior;
26: 	PGOnCommitAction		oncommit;
27: 	PGList				*list;
28: 	PGNode				*node;
29: 	PGValue				*value;
30: 	PGObjectType			objtype;
31: 	PGTypeName			*typnam;
32: 	PGObjectWithArgs		*objwithargs;
33: 	PGDefElem				*defelt;
34: 	PGSortBy				*sortby;
35: 	PGWindowDef			*windef;
36: 	PGJoinExpr			*jexpr;
37: 	PGIndexElem			*ielem;
38: 	PGAlias				*alias;
39: 	PGRangeVar			*range;
40: 	PGIntoClause			*into;
41: 	PGWithClause			*with;
42: 	PGInferClause			*infer;
43: 	PGOnConflictClause	*onconflict;
44: 	PGAIndices			*aind;
45: 	PGResTarget			*target;
46: 	PGInsertStmt			*istmt;
47: 	PGVariableSetStmt		*vsetstmt;
48: 	PGOverridingKind       override;
49: 	PGSortByDir            sortorder;
50: 	PGSortByNulls          nullorder;
51: 	PGLockClauseStrength lockstrength;
52: 	PGLockWaitPolicy lockwaitpolicy;
53: 	PGSubLinkType subquerytype;
54: 	PGViewCheckOption viewcheckoption;
55: }
56: 
57: %type <node> stmt
58: %type <list> stmtblock
59: %type <list> stmtmulti
60: {{{ TYPES }}}
61: 
62: /*
63:  * Non-keyword token types.  These are hard-wired into the "flex" lexer.
64:  * They must be listed first so that their numeric codes do not depend on
65:  * the set of keywords.  PL/pgSQL depends on this so that it can share the
66:  * same lexer.  If you add/change tokens here, fix PL/pgSQL to match!
67:  *
68:  * DOT_DOT is unused in the core SQL grammar, and so will always provoke
69:  * parse errors.  It is needed by PL/pgSQL.
70:  */
71: %token <str>	IDENT FCONST SCONST BCONST XCONST Op
72: %token <ival>	ICONST PARAM
73: %token			TYPECAST DOT_DOT COLON_EQUALS EQUALS_GREATER LAMBDA_ARROW
74: %token			LESS_EQUALS GREATER_EQUALS NOT_EQUALS
75: 
76: /*
77:  * If you want to make any keyword changes, update the keyword table in
78:  * src/include/parser/kwlist.h and add new keywords to the appropriate one
79:  * of the reserved-or-not-so-reserved keyword lists, below; search
80:  * this file for "Keyword category lists".
81:  */
82: 
83: /* ordinary key words in alphabetical order */
84: {{{ KEYWORDS }}}
85: 
86: /*
87:  * The grammar thinks these are keywords, but they are not in the kwlist.h
88:  * list and so can never be entered directly.  The filter in parser.c
89:  * creates these tokens when required (based on looking one token ahead).
90:  *
91:  * NOT_LA exists so that productions such as NOT LIKE can be given the same
92:  * precedence as LIKE; otherwise they'd effectively have the same precedence
93:  * as NOT, at least with respect to their left-hand subexpression.
94:  * NULLS_LA and WITH_LA are needed to make the grammar LALR(1).
95:  */
96: %token		NOT_LA NULLS_LA WITH_LA
97: 
98: 
99: /* Precedence: lowest to highest */
100: %nonassoc	SET				/* see */
101: %left		UNION EXCEPT
102: %left		INTERSECT
103: %left		LAMBDA_ARROW
104: %left		OR
105: %left		AND
106: %right		NOT
107: %nonassoc	IS ISNULL NOTNULL	/* IS sets precedence for IS NULL, etc */
108: %nonassoc	'<' '>' '=' LESS_EQUALS GREATER_EQUALS NOT_EQUALS
109: %nonassoc	BETWEEN IN_P GLOB LIKE ILIKE SIMILAR NOT_LA
110: %nonassoc	ESCAPE			/* ESCAPE must be just above LIKE/ILIKE/SIMILAR */
111: %left		POSTFIXOP		/* dummy for postfix Op rules */
112: /*
113:  * To support target_el without AS, we must give IDENT an explicit priority
114:  * between POSTFIXOP and Op.  We can safely assign the same priority to
115:  * various unreserved keywords as needed to resolve ambiguities (this can't
116:  * have any bad effects since obviously the keywords will still behave the
117:  * same as if they weren't keywords).  We need to do this for PARTITION,
118:  * RANGE, ROWS to support opt_existing_window_name; and for RANGE, ROWS
119:  * so that they can follow a_expr without creating postfix-operator problems;
120:  * for GENERATED so that it can follow b_expr;
121:  * and for NULL so that it can follow b_expr in without creating
122:  * postfix-operator problems.
123:  *
124:  * To support CUBE and ROLLUP in GROUP BY without reserving them, we give them
125:  * an explicit priority lower than '(', so that a rule with CUBE '(' will shift
126:  * rather than reducing a conflicting rule that takes CUBE as a function name.
127:  * Using the same precedence as IDENT seems right for the reasons given above.
128:  *
129:  * The frame_bound productions UNBOUNDED PRECEDING and UNBOUNDED FOLLOWING
130:  * are even messier: since UNBOUNDED is an unreserved keyword (per spec!),
131:  * there is no principled way to distinguish these from the productions
132:  * a_expr PRECEDING/FOLLOWING.  We hack this up by giving UNBOUNDED slightly
133:  * lower precedence than PRECEDING and FOLLOWING.  At present this doesn't
134:  * appear to cause UNBOUNDED to be treated differently from other unreserved
135:  * keywords anywhere else in the grammar, but it's definitely risky.  We can
136:  * blame any funny behavior of UNBOUNDED on the SQL standard, though.
137:  */
138: %nonassoc	UNBOUNDED		/* ideally should have same precedence as IDENT */
139: %nonassoc	IDENT GENERATED NULL_P PARTITION RANGE ROWS PRECEDING FOLLOWING CUBE ROLLUP
140: %left		Op OPERATOR		/* multi-character ops and user-defined operators */
141: %left		'+' '-'
142: %left		'*' '/' '%'
143: %left		'^'
144: /* Unary Operators */
145: %left		AT				/* sets precedence for AT TIME ZONE */
146: %left		COLLATE
147: %right		UMINUS
148: %left		'[' ']'
149: %left		'(' ')'
150: %left		TYPECAST
151: %left		'.'
152: /*
153:  * These might seem to be low-precedence, but actually they are not part
154:  * of the arithmetic hierarchy at all in their use as JOIN operators.
155:  * We make them high-precedence to support their use as function names.
156:  * They wouldn't be given a precedence at all, were it not that we need
157:  * left-associativity among the JOIN rules themselves.
158:  */
159: %left		JOIN CROSS LEFT FULL RIGHT INNER_P NATURAL
160: /* kluge to keep from causing shift/reduce conflicts */
161: %right		PRESERVE STRIP_P
162: 
163: %%
164: 
165: /*
166:  *	The target production for the whole parse.
167:  */
168: stmtblock:	stmtmulti
169: 			{
170: 				pg_yyget_extra(yyscanner)->parsetree = $1;
171: 			}
172: 		;
173: 
174: /*
175:  * At top level, we wrap each stmt with a PGRawStmt node carrying start location
176:  * and length of the stmt's text.  Notice that the start loc/len are driven
177:  * entirely from semicolon locations (@2).  It would seem natural to use
178:  * @1 or @3 to get the true start location of a stmt, but that doesn't work
179:  * for statements that can start with empty nonterminals (opt_with_clause is
180:  * the main offender here); as noted in the comments for YYLLOC_DEFAULT,
181:  * we'd get -1 for the location in such cases.
182:  * We also take care to discard empty statements entirely.
183:  */
184: stmtmulti:	stmtmulti ';' stmt
185: 				{
186: 					if ($1 != NIL)
187: 					{
188: 						/* update length of previous stmt */
189: 						updateRawStmtEnd(llast_node(PGRawStmt, $1), @2);
190: 					}
191: 					if ($3 != NULL)
192: 						$$ = lappend($1, makeRawStmt($3, @2 + 1));
193: 					else
194: 						$$ = $1;
195: 				}
196: 			| stmt
197: 				{
198: 					if ($1 != NULL)
199: 						$$ = list_make1(makeRawStmt($1, 0));
200: 					else
201: 						$$ = NIL;
202: 				}
203: 		;
204: 
205: {{{ STATEMENTS }}}
206: 
207: {{{ GRAMMAR RULES }}}
208: 
209: {{{ KEYWORD_DEFINITIONS }}}
210: 
211: %%
212: 
213: {{{ GRAMMAR_SOURCE }}}
[end of third_party/libpg_query/grammar/grammar.y]
[start of third_party/libpg_query/grammar/keywords/column_name_keywords.list]
1: BETWEEN
2: BIGINT
3: BIT
4: BOOLEAN_P
5: CHAR_P
6: CHARACTER
7: COALESCE
8: DEC
9: DECIMAL_P
10: EXISTS
11: EXTRACT
12: FLOAT_P
13: GROUPING
14: INOUT
15: INT_P
16: INTEGER
17: INTERVAL
18: MAP
19: NATIONAL
20: NCHAR
21: NONE
22: NULLIF
23: NUMERIC
24: OUT_P
25: OVERLAY
26: POSITION
27: PRECISION
28: REAL
29: ROW
30: SETOF
31: SMALLINT
32: SUBSTRING
33: STRUCT
34: TIME
35: TIMESTAMP
36: TREAT
37: TRIM
38: TRY_CAST
39: VALUES
40: VARCHAR
41: XMLATTRIBUTES
42: XMLCONCAT
43: XMLELEMENT
44: XMLEXISTS
45: XMLFOREST
46: XMLNAMESPACES
47: XMLPARSE
48: XMLPI
49: XMLROOT
50: XMLSERIALIZE
51: XMLTABLE
[end of third_party/libpg_query/grammar/keywords/column_name_keywords.list]
[start of third_party/libpg_query/grammar/statements/create.y]
1: /*****************************************************************************
2:  *
3:  *		QUERY :
4:  *				CREATE TABLE relname
5:  *
6:  *****************************************************************************/
7: CreateStmt:	CREATE_P OptTemp TABLE qualified_name '(' OptTableElementList ')'
8: 			OptWith OnCommitOption
9: 				{
10: 					PGCreateStmt *n = makeNode(PGCreateStmt);
11: 					$4->relpersistence = $2;
12: 					n->relation = $4;
13: 					n->tableElts = $6;
14: 					n->ofTypename = NULL;
15: 					n->constraints = NIL;
16: 					n->options = $8;
17: 					n->oncommit = $9;
18: 					n->if_not_exists = false;
19: 					$$ = (PGNode *)n;
20: 				}
21: 		| CREATE_P OptTemp TABLE IF_P NOT EXISTS qualified_name '('
22: 			OptTableElementList ')' OptWith
23: 			OnCommitOption
24: 				{
25: 					PGCreateStmt *n = makeNode(PGCreateStmt);
26: 					$7->relpersistence = $2;
27: 					n->relation = $7;
28: 					n->tableElts = $9;
29: 					n->ofTypename = NULL;
30: 					n->constraints = NIL;
31: 					n->options = $11;
32: 					n->oncommit = $12;
33: 					n->if_not_exists = true;
34: 					$$ = (PGNode *)n;
35: 				}
36: 		;
37: 
38: 
39: ConstraintAttributeSpec:
40: 			/*EMPTY*/
41: 				{ $$ = 0; }
42: 			| ConstraintAttributeSpec ConstraintAttributeElem
43: 				{
44: 					/*
45: 					 * We must complain about conflicting options.
46: 					 * We could, but choose not to, complain about redundant
47: 					 * options (ie, where $2's bit is already set in $1).
48: 					 */
49: 					int		newspec = $1 | $2;
50: 
51: 					/* special message for this case */
52: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
53: 						ereport(ERROR,
54: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
55: 								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
56: 								 parser_errposition(@2)));
57: 					/* generic message for other conflicts */
58: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
59: 						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
60: 						ereport(ERROR,
61: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
62: 								 errmsg("conflicting constraint properties"),
63: 								 parser_errposition(@2)));
64: 					$$ = newspec;
65: 				}
66: 		;
67: 
68: 
69: def_arg:	func_type						{ $$ = (PGNode *)$1; }
70: 			| reserved_keyword				{ $$ = (PGNode *)makeString(pstrdup($1)); }
71: 			| qual_all_Op					{ $$ = (PGNode *)$1; }
72: 			| NumericOnly					{ $$ = (PGNode *)$1; }
73: 			| Sconst						{ $$ = (PGNode *)makeString($1); }
74: 			| NONE							{ $$ = (PGNode *)makeString(pstrdup($1)); }
75: 		;
76: 
77: 
78: OptParenthesizedSeqOptList: '(' SeqOptList ')'		{ $$ = $2; }
79: 			| /*EMPTY*/								{ $$ = NIL; }
80: 		;
81: 
82: 
83: generic_option_arg:
84: 				Sconst				{ $$ = (PGNode *) makeString($1); }
85: 		;
86: 
87: 
88: key_action:
89: 			NO ACTION					{ $$ = PG_FKCONSTR_ACTION_NOACTION; }
90: 			| RESTRICT					{ $$ = PG_FKCONSTR_ACTION_RESTRICT; }
91: 			| CASCADE					{ $$ = PG_FKCONSTR_ACTION_CASCADE; }
92: 			| SET NULL_P				{ $$ = PG_FKCONSTR_ACTION_SETNULL; }
93: 			| SET DEFAULT				{ $$ = PG_FKCONSTR_ACTION_SETDEFAULT; }
94: 		;
95: 
96: 
97: ColConstraint:
98: 			CONSTRAINT name ColConstraintElem
99: 				{
100: 					PGConstraint *n = castNode(PGConstraint, $3);
101: 					n->conname = $2;
102: 					n->location = @1;
103: 					$$ = (PGNode *) n;
104: 				}
105: 			| ColConstraintElem						{ $$ = $1; }
106: 			| ConstraintAttr						{ $$ = $1; }
107: 			| COLLATE any_name
108: 				{
109: 					/*
110: 					 * Note: the PGCollateClause is momentarily included in
111: 					 * the list built by ColQualList, but we split it out
112: 					 * again in SplitColQualList.
113: 					 */
114: 					PGCollateClause *n = makeNode(PGCollateClause);
115: 					n->arg = NULL;
116: 					n->collname = $2;
117: 					n->location = @1;
118: 					$$ = (PGNode *) n;
119: 				}
120: 		;
121: 
122: 
123: ColConstraintElem:
124: 			NOT NULL_P
125: 				{
126: 					PGConstraint *n = makeNode(PGConstraint);
127: 					n->contype = PG_CONSTR_NOTNULL;
128: 					n->location = @1;
129: 					$$ = (PGNode *)n;
130: 				}
131: 			| NULL_P
132: 				{
133: 					PGConstraint *n = makeNode(PGConstraint);
134: 					n->contype = PG_CONSTR_NULL;
135: 					n->location = @1;
136: 					$$ = (PGNode *)n;
137: 				}
138: 			| UNIQUE opt_definition
139: 				{
140: 					PGConstraint *n = makeNode(PGConstraint);
141: 					n->contype = PG_CONSTR_UNIQUE;
142: 					n->location = @1;
143: 					n->keys = NULL;
144: 					n->options = $2;
145: 					n->indexname = NULL;
146: 					$$ = (PGNode *)n;
147: 				}
148: 			| PRIMARY KEY opt_definition
149: 				{
150: 					PGConstraint *n = makeNode(PGConstraint);
151: 					n->contype = PG_CONSTR_PRIMARY;
152: 					n->location = @1;
153: 					n->keys = NULL;
154: 					n->options = $3;
155: 					n->indexname = NULL;
156: 					$$ = (PGNode *)n;
157: 				}
158: 			| CHECK_P '(' a_expr ')' opt_no_inherit
159: 				{
160: 					PGConstraint *n = makeNode(PGConstraint);
161: 					n->contype = PG_CONSTR_CHECK;
162: 					n->location = @1;
163: 					n->is_no_inherit = $5;
164: 					n->raw_expr = $3;
165: 					n->cooked_expr = NULL;
166: 					n->skip_validation = false;
167: 					n->initially_valid = true;
168: 					$$ = (PGNode *)n;
169: 				}
170: 			| DEFAULT b_expr
171: 				{
172: 					PGConstraint *n = makeNode(PGConstraint);
173: 					n->contype = PG_CONSTR_DEFAULT;
174: 					n->location = @1;
175: 					n->raw_expr = $2;
176: 					n->cooked_expr = NULL;
177: 					$$ = (PGNode *)n;
178: 				}
179: 			| GENERATED generated_when AS IDENTITY_P OptParenthesizedSeqOptList
180: 				{
181: 					PGConstraint *n = makeNode(PGConstraint);
182: 					n->contype = PG_CONSTR_IDENTITY;
183: 					n->generated_when = $2;
184: 					n->options = $5;
185: 					n->location = @1;
186: 					$$ = (PGNode *)n;
187: 				}
188: 			| REFERENCES qualified_name opt_column_list key_match key_actions
189: 				{
190: 					PGConstraint *n = makeNode(PGConstraint);
191: 					n->contype = PG_CONSTR_FOREIGN;
192: 					n->location = @1;
193: 					n->pktable			= $2;
194: 					n->fk_attrs			= NIL;
195: 					n->pk_attrs			= $3;
196: 					n->fk_matchtype		= $4;
197: 					n->fk_upd_action	= (char) ($5 >> 8);
198: 					n->fk_del_action	= (char) ($5 & 0xFF);
199: 					n->skip_validation  = false;
200: 					n->initially_valid  = true;
201: 					$$ = (PGNode *)n;
202: 				}
203: 		;
204: 
205: 
206: generic_option_elem:
207: 			generic_option_name generic_option_arg
208: 				{
209: 					$$ = makeDefElem($1, $2, @1);
210: 				}
211: 		;
212: 
213: 
214: key_update: ON UPDATE key_action		{ $$ = $3; }
215: 		;
216: 
217: 
218: key_actions:
219: 			key_update
220: 				{ $$ = ($1 << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
221: 			| key_delete
222: 				{ $$ = (PG_FKCONSTR_ACTION_NOACTION << 8) | ($1 & 0xFF); }
223: 			| key_update key_delete
224: 				{ $$ = ($1 << 8) | ($2 & 0xFF); }
225: 			| key_delete key_update
226: 				{ $$ = ($2 << 8) | ($1 & 0xFF); }
227: 			| /*EMPTY*/
228: 				{ $$ = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
229: 		;
230: 
231: 
232: create_generic_options:
233: 			OPTIONS '(' generic_option_list ')'			{ $$ = $3; }
234: 			| /*EMPTY*/									{ $$ = NIL; }
235: 		;
236: 
237: 
238: OnCommitOption:  ON COMMIT DROP				{ $$ = ONCOMMIT_DROP; }
239: 			| ON COMMIT DELETE_P ROWS		{ $$ = PG_ONCOMMIT_DELETE_ROWS; }
240: 			| ON COMMIT PRESERVE ROWS		{ $$ = PG_ONCOMMIT_PRESERVE_ROWS; }
241: 			| /*EMPTY*/						{ $$ = PG_ONCOMMIT_NOOP; }
242: 		;
243: 
244: 
245: reloptions:
246: 			'(' reloption_list ')'					{ $$ = $2; }
247: 		;
248: 
249: 
250: opt_no_inherit:	NO INHERIT							{  $$ = true; }
251: 			| /* EMPTY */							{  $$ = false; }
252: 		;
253: 
254: 
255: TableConstraint:
256: 			CONSTRAINT name ConstraintElem
257: 				{
258: 					PGConstraint *n = castNode(PGConstraint, $3);
259: 					n->conname = $2;
260: 					n->location = @1;
261: 					$$ = (PGNode *) n;
262: 				}
263: 			| ConstraintElem						{ $$ = $1; }
264: 		;
265: 
266: 
267: TableLikeOption:
268: 				COMMENTS			{ $$ = PG_CREATE_TABLE_LIKE_COMMENTS; }
269: 				| CONSTRAINTS		{ $$ = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
270: 				| DEFAULTS			{ $$ = PG_CREATE_TABLE_LIKE_DEFAULTS; }
271: 				| IDENTITY_P		{ $$ = PG_CREATE_TABLE_LIKE_IDENTITY; }
272: 				| INDEXES			{ $$ = PG_CREATE_TABLE_LIKE_INDEXES; }
273: 				| STATISTICS		{ $$ = PG_CREATE_TABLE_LIKE_STATISTICS; }
274: 				| STORAGE			{ $$ = PG_CREATE_TABLE_LIKE_STORAGE; }
275: 				| ALL				{ $$ = PG_CREATE_TABLE_LIKE_ALL; }
276: 		;
277: 
278: 
279: 
280: reloption_list:
281: 			reloption_elem							{ $$ = list_make1($1); }
282: 			| reloption_list ',' reloption_elem		{ $$ = lappend($1, $3); }
283: 		;
284: 
285: 
286: ExistingIndex:   USING INDEX index_name				{ $$ = $3; }
287: 		;
288: 
289: 
290: ConstraintAttr:
291: 			DEFERRABLE
292: 				{
293: 					PGConstraint *n = makeNode(PGConstraint);
294: 					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
295: 					n->location = @1;
296: 					$$ = (PGNode *)n;
297: 				}
298: 			| NOT DEFERRABLE
299: 				{
300: 					PGConstraint *n = makeNode(PGConstraint);
301: 					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
302: 					n->location = @1;
303: 					$$ = (PGNode *)n;
304: 				}
305: 			| INITIALLY DEFERRED
306: 				{
307: 					PGConstraint *n = makeNode(PGConstraint);
308: 					n->contype = PG_CONSTR_ATTR_DEFERRED;
309: 					n->location = @1;
310: 					$$ = (PGNode *)n;
311: 				}
312: 			| INITIALLY IMMEDIATE
313: 				{
314: 					PGConstraint *n = makeNode(PGConstraint);
315: 					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
316: 					n->location = @1;
317: 					$$ = (PGNode *)n;
318: 				}
319: 		;
320: 
321: 
322: 
323: OptWith:
324: 			WITH reloptions				{ $$ = $2; }
325: 			| WITH OIDS					{ $$ = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), @1)); }
326: 			| WITHOUT OIDS				{ $$ = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), @1)); }
327: 			| /*EMPTY*/					{ $$ = NIL; }
328: 		;
329: 
330: 
331: definition: '(' def_list ')'						{ $$ = $2; }
332: 		;
333: 
334: 
335: TableLikeOptionList:
336: 				TableLikeOptionList INCLUDING TableLikeOption	{ $$ = $1 | $3; }
337: 				| TableLikeOptionList EXCLUDING TableLikeOption	{ $$ = $1 & ~$3; }
338: 				| /* EMPTY */						{ $$ = 0; }
339: 		;
340: 
341: 
342: generic_option_name:
343: 				ColLabel			{ $$ = $1; }
344: 		;
345: 
346: 
347: ConstraintAttributeElem:
348: 			NOT DEFERRABLE					{ $$ = CAS_NOT_DEFERRABLE; }
349: 			| DEFERRABLE					{ $$ = CAS_DEFERRABLE; }
350: 			| INITIALLY IMMEDIATE			{ $$ = CAS_INITIALLY_IMMEDIATE; }
351: 			| INITIALLY DEFERRED			{ $$ = CAS_INITIALLY_DEFERRED; }
352: 			| NOT VALID						{ $$ = CAS_NOT_VALID; }
353: 			| NO INHERIT					{ $$ = CAS_NO_INHERIT; }
354: 		;
355: 
356: 
357: 
358: columnDef:	ColId Typename create_generic_options ColQualList
359: 				{
360: 					PGColumnDef *n = makeNode(PGColumnDef);
361: 					n->colname = $1;
362: 					n->typeName = $2;
363: 					n->inhcount = 0;
364: 					n->is_local = true;
365: 					n->is_not_null = false;
366: 					n->is_from_type = false;
367: 					n->storage = 0;
368: 					n->raw_default = NULL;
369: 					n->cooked_default = NULL;
370: 					n->collOid = InvalidOid;
371: 					n->fdwoptions = $3;
372: 					SplitColQualList($4, &n->constraints, &n->collClause,
373: 									 yyscanner);
374: 					n->location = @1;
375: 					$$ = (PGNode *)n;
376: 				}
377: 		;
378: 
379: 
380: generic_option_list:
381: 			generic_option_elem
382: 				{
383: 					$$ = list_make1($1);
384: 				}
385: 			| generic_option_list ',' generic_option_elem
386: 				{
387: 					$$ = lappend($1, $3);
388: 				}
389: 		;
390: 
391: 
392: def_list:	def_elem								{ $$ = list_make1($1); }
393: 			| def_list ',' def_elem					{ $$ = lappend($1, $3); }
394: 		;
395: 
396: 
397: index_name: ColId									{ $$ = $1; };
398: 
399: 
400: TableElement:
401: 			columnDef							{ $$ = $1; }
402: 			| TableLikeClause					{ $$ = $1; }
403: 			| TableConstraint					{ $$ = $1; }
404: 		;
405: 
406: 
407: def_elem:	ColLabel '=' def_arg
408: 				{
409: 					$$ = makeDefElem($1, (PGNode *) $3, @1);
410: 				}
411: 			| ColLabel
412: 				{
413: 					$$ = makeDefElem($1, NULL, @1);
414: 				}
415: 		;
416: 
417: 
418: opt_definition:
419: 			WITH definition							{ $$ = $2; }
420: 			| /*EMPTY*/								{ $$ = NIL; }
421: 		;
422: 
423: 
424: OptTableElementList:
425: 			TableElementList					{ $$ = $1; }
426: 			| /*EMPTY*/							{ $$ = NIL; }
427: 		;
428: 
429: 
430: columnElem: ColId
431: 				{
432: 					$$ = (PGNode *) makeString($1);
433: 				}
434: 		;
435: 
436: 
437: opt_column_list:
438: 			'(' columnList ')'						{ $$ = $2; }
439: 			| /*EMPTY*/								{ $$ = NIL; }
440: 		;
441: 
442: 
443: ColQualList:
444: 			ColQualList ColConstraint				{ $$ = lappend($1, $2); }
445: 			| /*EMPTY*/								{ $$ = NIL; }
446: 		;
447: 
448: 
449: key_delete: ON DELETE_P key_action		{ $$ = $3; }
450: 		;
451: 
452: 
453: reloption_elem:
454: 			ColLabel '=' def_arg
455: 				{
456: 					$$ = makeDefElem($1, (PGNode *) $3, @1);
457: 				}
458: 			| ColLabel
459: 				{
460: 					$$ = makeDefElem($1, NULL, @1);
461: 				}
462: 			| ColLabel '.' ColLabel '=' def_arg
463: 				{
464: 					$$ = makeDefElemExtended($1, $3, (PGNode *) $5,
465: 											 PG_DEFELEM_UNSPEC, @1);
466: 				}
467: 			| ColLabel '.' ColLabel
468: 				{
469: 					$$ = makeDefElemExtended($1, $3, NULL, PG_DEFELEM_UNSPEC, @1);
470: 				}
471: 		;
472: 
473: 
474: columnList:
475: 			columnElem								{ $$ = list_make1($1); }
476: 			| columnList ',' columnElem				{ $$ = lappend($1, $3); }
477: 		;
478: 
479: 
480: func_type:	Typename								{ $$ = $1; }
481: 			| type_function_name attrs '%' TYPE_P
482: 				{
483: 					$$ = makeTypeNameFromNameList(lcons(makeString($1), $2));
484: 					$$->pct_type = true;
485: 					$$->location = @1;
486: 				}
487: 			| SETOF type_function_name attrs '%' TYPE_P
488: 				{
489: 					$$ = makeTypeNameFromNameList(lcons(makeString($2), $3));
490: 					$$->pct_type = true;
491: 					$$->setof = true;
492: 					$$->location = @2;
493: 				}
494: 		;
495: 
496: 
497: ConstraintElem:
498: 			CHECK_P '(' a_expr ')' ConstraintAttributeSpec
499: 				{
500: 					PGConstraint *n = makeNode(PGConstraint);
501: 					n->contype = PG_CONSTR_CHECK;
502: 					n->location = @1;
503: 					n->raw_expr = $3;
504: 					n->cooked_expr = NULL;
505: 					processCASbits($5, @5, "CHECK",
506: 								   NULL, NULL, &n->skip_validation,
507: 								   &n->is_no_inherit, yyscanner);
508: 					n->initially_valid = !n->skip_validation;
509: 					$$ = (PGNode *)n;
510: 				}
511: 			| UNIQUE '(' columnList ')' opt_definition
512: 				ConstraintAttributeSpec
513: 				{
514: 					PGConstraint *n = makeNode(PGConstraint);
515: 					n->contype = PG_CONSTR_UNIQUE;
516: 					n->location = @1;
517: 					n->keys = $3;
518: 					n->options = $5;
519: 					n->indexname = NULL;
520: 					processCASbits($6, @6, "UNIQUE",
521: 								   &n->deferrable, &n->initdeferred, NULL,
522: 								   NULL, yyscanner);
523: 					$$ = (PGNode *)n;
524: 				}
525: 			| UNIQUE ExistingIndex ConstraintAttributeSpec
526: 				{
527: 					PGConstraint *n = makeNode(PGConstraint);
528: 					n->contype = PG_CONSTR_UNIQUE;
529: 					n->location = @1;
530: 					n->keys = NIL;
531: 					n->options = NIL;
532: 					n->indexname = $2;
533: 					n->indexspace = NULL;
534: 					processCASbits($3, @3, "UNIQUE",
535: 								   &n->deferrable, &n->initdeferred, NULL,
536: 								   NULL, yyscanner);
537: 					$$ = (PGNode *)n;
538: 				}
539: 			| PRIMARY KEY '(' columnList ')' opt_definition
540: 				ConstraintAttributeSpec
541: 				{
542: 					PGConstraint *n = makeNode(PGConstraint);
543: 					n->contype = PG_CONSTR_PRIMARY;
544: 					n->location = @1;
545: 					n->keys = $4;
546: 					n->options = $6;
547: 					n->indexname = NULL;
548: 					processCASbits($7, @7, "PRIMARY KEY",
549: 								   &n->deferrable, &n->initdeferred, NULL,
550: 								   NULL, yyscanner);
551: 					$$ = (PGNode *)n;
552: 				}
553: 			| PRIMARY KEY ExistingIndex ConstraintAttributeSpec
554: 				{
555: 					PGConstraint *n = makeNode(PGConstraint);
556: 					n->contype = PG_CONSTR_PRIMARY;
557: 					n->location = @1;
558: 					n->keys = NIL;
559: 					n->options = NIL;
560: 					n->indexname = $3;
561: 					n->indexspace = NULL;
562: 					processCASbits($4, @4, "PRIMARY KEY",
563: 								   &n->deferrable, &n->initdeferred, NULL,
564: 								   NULL, yyscanner);
565: 					$$ = (PGNode *)n;
566: 				}
567: 			| FOREIGN KEY '(' columnList ')' REFERENCES qualified_name
568: 				opt_column_list key_match key_actions ConstraintAttributeSpec
569: 				{
570: 					PGConstraint *n = makeNode(PGConstraint);
571: 					n->contype = PG_CONSTR_FOREIGN;
572: 					n->location = @1;
573: 					n->pktable			= $7;
574: 					n->fk_attrs			= $4;
575: 					n->pk_attrs			= $8;
576: 					n->fk_matchtype		= $9;
577: 					n->fk_upd_action	= (char) ($10 >> 8);
578: 					n->fk_del_action	= (char) ($10 & 0xFF);
579: 					processCASbits($11, @11, "FOREIGN KEY",
580: 								   &n->deferrable, &n->initdeferred,
581: 								   &n->skip_validation, NULL,
582: 								   yyscanner);
583: 					n->initially_valid = !n->skip_validation;
584: 					$$ = (PGNode *)n;
585: 				}
586: 		;
587: 
588: 
589: TableElementList:
590: 			TableElement
591: 				{
592: 					$$ = list_make1($1);
593: 				}
594: 			| TableElementList ',' TableElement
595: 				{
596: 					$$ = lappend($1, $3);
597: 				}
598: 		;
599: 
600: 
601: key_match:  MATCH FULL
602: 			{
603: 				$$ = PG_FKCONSTR_MATCH_FULL;
604: 			}
605: 		| MATCH PARTIAL
606: 			{
607: 				ereport(ERROR,
608: 						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
609: 						 errmsg("MATCH PARTIAL not yet implemented"),
610: 						 parser_errposition(@1)));
611: 				$$ = PG_FKCONSTR_MATCH_PARTIAL;
612: 			}
613: 		| MATCH SIMPLE
614: 			{
615: 				$$ = PG_FKCONSTR_MATCH_SIMPLE;
616: 			}
617: 		| /*EMPTY*/
618: 			{
619: 				$$ = PG_FKCONSTR_MATCH_SIMPLE;
620: 			}
621: 		;
622: 
623: 
624: TableLikeClause:
625: 			LIKE qualified_name TableLikeOptionList
626: 				{
627: 					PGTableLikeClause *n = makeNode(PGTableLikeClause);
628: 					n->relation = $2;
629: 					n->options = $3;
630: 					$$ = (PGNode *)n;
631: 				}
632: 		;
633: 
634: 
635: OptTemp:	TEMPORARY					{ $$ = PG_RELPERSISTENCE_TEMP; }
636: 			| TEMP						{ $$ = PG_RELPERSISTENCE_TEMP; }
637: 			| LOCAL TEMPORARY			{ $$ = PG_RELPERSISTENCE_TEMP; }
638: 			| LOCAL TEMP				{ $$ = PG_RELPERSISTENCE_TEMP; }
639: 			| GLOBAL TEMPORARY
640: 				{
641: 					ereport(PGWARNING,
642: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
643: 							 parser_errposition(@1)));
644: 					$$ = PG_RELPERSISTENCE_TEMP;
645: 				}
646: 			| GLOBAL TEMP
647: 				{
648: 					ereport(PGWARNING,
649: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
650: 							 parser_errposition(@1)));
651: 					$$ = PG_RELPERSISTENCE_TEMP;
652: 				}
653: 			| UNLOGGED					{ $$ = PG_RELPERSISTENCE_UNLOGGED; }
654: 			| /*EMPTY*/					{ $$ = RELPERSISTENCE_PERMANENT; }
655: 		;
656: 
657: 
658: generated_when:
659: 			ALWAYS			{ $$ = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
660: 			| BY DEFAULT	{ $$ = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
661: 		;
[end of third_party/libpg_query/grammar/statements/create.y]
[start of third_party/libpg_query/grammar/statements/create_as.y]
1: /*****************************************************************************
2:  *
3:  *		QUERY :
4:  *				CREATE TABLE relname AS PGSelectStmt [ WITH [NO] DATA ]
5:  *
6:  *
7:  * Note: SELECT ... INTO is a now-deprecated alternative for this.
8:  *
9:  *****************************************************************************/
10: CreateAsStmt:
11: 		CREATE_P OptTemp TABLE create_as_target AS SelectStmt opt_with_data
12: 				{
13: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
14: 					ctas->query = $6;
15: 					ctas->into = $4;
16: 					ctas->relkind = PG_OBJECT_TABLE;
17: 					ctas->is_select_into = false;
18: 					ctas->if_not_exists = false;
19: 					/* cram additional flags into the PGIntoClause */
20: 					$4->rel->relpersistence = $2;
21: 					$4->skipData = !($7);
22: 					$$ = (PGNode *) ctas;
23: 				}
24: 		| CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS SelectStmt opt_with_data
25: 				{
26: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
27: 					ctas->query = $9;
28: 					ctas->into = $7;
29: 					ctas->relkind = PG_OBJECT_TABLE;
30: 					ctas->is_select_into = false;
31: 					ctas->if_not_exists = true;
32: 					/* cram additional flags into the PGIntoClause */
33: 					$7->rel->relpersistence = $2;
34: 					$7->skipData = !($10);
35: 					$$ = (PGNode *) ctas;
36: 				}
37: 		;
38: 
39: 
40: opt_with_data:
41: 			WITH DATA_P								{ $$ = true; }
42: 			| WITH NO DATA_P						{ $$ = false; }
43: 			| /*EMPTY*/								{ $$ = true; }
44: 		;
45: 
46: 
47: create_as_target:
48: 			qualified_name opt_column_list OptWith OnCommitOption
49: 				{
50: 					$$ = makeNode(PGIntoClause);
51: 					$$->rel = $1;
52: 					$$->colNames = $2;
53: 					$$->options = $3;
54: 					$$->onCommit = $4;
55: 					$$->viewQuery = NULL;
56: 					$$->skipData = false;		/* might get changed later */
57: 				}
58: 		;
[end of third_party/libpg_query/grammar/statements/create_as.y]
[start of third_party/libpg_query/grammar/statements/create_schema.y]
1: /*****************************************************************************
2:  *
3:  * Manipulate a schema
4:  *
5:  *****************************************************************************/
6: CreateSchemaStmt:
7: 			CREATE_P SCHEMA ColId OptSchemaEltList
8: 				{
9: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
10: 					/* ...but not both */
11: 					n->schemaname = $3;
12: 					n->schemaElts = $4;
13: 					n->if_not_exists = false;
14: 					$$ = (PGNode *)n;
15: 				}
16: 			| CREATE_P SCHEMA IF_P NOT EXISTS ColId OptSchemaEltList
17: 				{
18: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
19: 					/* ...but not here */
20: 					n->schemaname = $6;
21: 					if ($7 != NIL)
22: 						ereport(ERROR,
23: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24: 								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
25: 								 parser_errposition(@7)));
26: 					n->schemaElts = $7;
27: 					n->if_not_exists = true;
28: 					$$ = (PGNode *)n;
29: 				}
30: 		;
31: 
32: 
33: OptSchemaEltList:
34: 			OptSchemaEltList schema_stmt
35: 				{
36: 					if (@$ < 0)			/* see comments for YYLLOC_DEFAULT */
37: 						@$ = @2;
38: 					$$ = lappend($1, $2);
39: 				}
40: 			| /* EMPTY */
41: 				{ $$ = NIL; }
42: 		;
43: 
44: 
45: schema_stmt:
46: 			CreateStmt
47: 			| IndexStmt
48: 			| CreateSeqStmt
49: 			| ViewStmt
50: 		;
[end of third_party/libpg_query/grammar/statements/create_schema.y]
[start of third_party/libpg_query/grammar/statements/create_sequence.y]
1: /*****************************************************************************
2:  *
3:  *		QUERY :
4:  *				CREATE SEQUENCE seqname
5:  *				ALTER SEQUENCE seqname
6:  *
7:  *****************************************************************************/
8: CreateSeqStmt:
9: 			CREATE_P OptTemp SEQUENCE qualified_name OptSeqOptList
10: 				{
11: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
12: 					$4->relpersistence = $2;
13: 					n->sequence = $4;
14: 					n->options = $5;
15: 					n->ownerId = InvalidOid;
16: 					n->if_not_exists = false;
17: 					$$ = (PGNode *)n;
18: 				}
19: 			| CREATE_P OptTemp SEQUENCE IF_P NOT EXISTS qualified_name OptSeqOptList
20: 				{
21: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
22: 					$7->relpersistence = $2;
23: 					n->sequence = $7;
24: 					n->options = $8;
25: 					n->ownerId = InvalidOid;
26: 					n->if_not_exists = true;
27: 					$$ = (PGNode *)n;
28: 				}
29: 		;
30: 
31: 
32: OptSeqOptList: SeqOptList							{ $$ = $1; }
33: 			| /*EMPTY*/								{ $$ = NIL; }
34: 		;
[end of third_party/libpg_query/grammar/statements/create_sequence.y]
[start of third_party/libpg_query/grammar/statements/execute.y]
1: /*****************************************************************************
2:  *
3:  * EXECUTE <plan_name> [(params, ...)]
4:  * CREATE TABLE <name> AS EXECUTE <plan_name> [(params, ...)]
5:  *
6:  *****************************************************************************/
7: ExecuteStmt: EXECUTE name execute_param_clause
8: 				{
9: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
10: 					n->name = $2;
11: 					n->params = $3;
12: 					$$ = (PGNode *) n;
13: 				}
14: 			| CREATE_P OptTemp TABLE create_as_target AS
15: 				EXECUTE name execute_param_clause opt_with_data
16: 				{
17: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
18: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
19: 					n->name = $7;
20: 					n->params = $8;
21: 					ctas->query = (PGNode *) n;
22: 					ctas->into = $4;
23: 					ctas->relkind = PG_OBJECT_TABLE;
24: 					ctas->is_select_into = false;
25: 					ctas->if_not_exists = false;
26: 					/* cram additional flags into the PGIntoClause */
27: 					$4->rel->relpersistence = $2;
28: 					$4->skipData = !($9);
29: 					$$ = (PGNode *) ctas;
30: 				}
31: 			| CREATE_P OptTemp TABLE IF_P NOT EXISTS create_as_target AS
32: 				EXECUTE name execute_param_clause opt_with_data
33: 				{
34: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
35: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
36: 					n->name = $10;
37: 					n->params = $11;
38: 					ctas->query = (PGNode *) n;
39: 					ctas->into = $7;
40: 					ctas->relkind = PG_OBJECT_TABLE;
41: 					ctas->is_select_into = false;
42: 					ctas->if_not_exists = true;
43: 					/* cram additional flags into the PGIntoClause */
44: 					$7->rel->relpersistence = $2;
45: 					$7->skipData = !($12);
46: 					$$ = (PGNode *) ctas;
47: 				}
48: 		;
49: 
50: 
51: execute_param_clause: '(' expr_list ')'				{ $$ = $2; }
52: 					| /* EMPTY */					{ $$ = NIL; }
53: 					;
[end of third_party/libpg_query/grammar/statements/execute.y]
[start of third_party/libpg_query/grammar/statements/index.y]
1: /*****************************************************************************
2:  *
3:  *		QUERY: CREATE INDEX
4:  *
5:  * Note: we cannot put TABLESPACE clause after WHERE clause unless we are
6:  * willing to make TABLESPACE a fully reserved word.
7:  *****************************************************************************/
8: IndexStmt:	CREATE_P opt_unique INDEX opt_concurrently opt_index_name
9: 			ON qualified_name access_method_clause '(' index_params ')'
10: 			opt_reloptions where_clause
11: 				{
12: 					PGIndexStmt *n = makeNode(PGIndexStmt);
13: 					n->unique = $2;
14: 					n->concurrent = $4;
15: 					n->idxname = $5;
16: 					n->relation = $7;
17: 					n->accessMethod = $8;
18: 					n->indexParams = $10;
19: 					n->options = $12;
20: 					n->whereClause = $13;
21: 					n->excludeOpNames = NIL;
22: 					n->idxcomment = NULL;
23: 					n->indexOid = InvalidOid;
24: 					n->oldNode = InvalidOid;
25: 					n->primary = false;
26: 					n->isconstraint = false;
27: 					n->deferrable = false;
28: 					n->initdeferred = false;
29: 					n->transformed = false;
30: 					n->if_not_exists = false;
31: 					$$ = (PGNode *)n;
32: 				}
33: 			| CREATE_P opt_unique INDEX opt_concurrently IF_P NOT EXISTS index_name
34: 			ON qualified_name access_method_clause '(' index_params ')'
35: 			opt_reloptions where_clause
36: 				{
37: 					PGIndexStmt *n = makeNode(PGIndexStmt);
38: 					n->unique = $2;
39: 					n->concurrent = $4;
40: 					n->idxname = $8;
41: 					n->relation = $10;
42: 					n->accessMethod = $11;
43: 					n->indexParams = $13;
44: 					n->options = $15;
45: 					n->whereClause = $16;
46: 					n->excludeOpNames = NIL;
47: 					n->idxcomment = NULL;
48: 					n->indexOid = InvalidOid;
49: 					n->oldNode = InvalidOid;
50: 					n->primary = false;
51: 					n->isconstraint = false;
52: 					n->deferrable = false;
53: 					n->initdeferred = false;
54: 					n->transformed = false;
55: 					n->if_not_exists = true;
56: 					$$ = (PGNode *)n;
57: 				}
58: 		;
59: 
60: 
61: access_method:
62: 			ColId									{ $$ = $1; };
63: 
64: 
65: access_method_clause:
66: 			USING access_method						{ $$ = $2; }
67: 			| /*EMPTY*/								{ $$ = (char*) DEFAULT_INDEX_TYPE; }
68: 		;
69: 
70: 
71: opt_concurrently:
72: 			CONCURRENTLY							{ $$ = true; }
73: 			| /*EMPTY*/								{ $$ = false; }
74: 		;
75: 
76: 
77: opt_index_name:
78: 			index_name								{ $$ = $1; }
79: 			| /*EMPTY*/								{ $$ = NULL; }
80: 		;
81: 
82: 
83: opt_reloptions:		WITH reloptions					{ $$ = $2; }
84: 			 |		/* EMPTY */						{ $$ = NIL; }
85: 		;
86: 
87: 
88: opt_unique:
89: 			UNIQUE									{ $$ = true; }
90: 			| /*EMPTY*/								{ $$ = false; }
91: 		;
[end of third_party/libpg_query/grammar/statements/index.y]
[start of third_party/libpg_query/grammar/statements/select.y]
1: 
2: /*****************************************************************************
3:  *
4:  *		QUERY:
5:  *				SELECT STATEMENTS
6:  *
7:  *****************************************************************************/
8: 
9: /* A complete SELECT statement looks like this.
10:  *
11:  * The rule returns either a single PGSelectStmt node or a tree of them,
12:  * representing a set-operation tree.
13:  *
14:  * There is an ambiguity when a sub-SELECT is within an a_expr and there
15:  * are excess parentheses: do the parentheses belong to the sub-SELECT or
16:  * to the surrounding a_expr?  We don't really care, but bison wants to know.
17:  * To resolve the ambiguity, we are careful to define the grammar so that
18:  * the decision is staved off as long as possible: as long as we can keep
19:  * absorbing parentheses into the sub-SELECT, we will do so, and only when
20:  * it's no longer possible to do that will we decide that parens belong to
21:  * the expression.	For example, in "SELECT (((SELECT 2)) + 3)" the extra
22:  * parentheses are treated as part of the sub-select.  The necessity of doing
23:  * it that way is shown by "SELECT (((SELECT 2)) UNION SELECT 2)".	Had we
24:  * parsed "((SELECT 2))" as an a_expr, it'd be too late to go back to the
25:  * SELECT viewpoint when we see the UNION.
26:  *
27:  * This approach is implemented by defining a nonterminal select_with_parens,
28:  * which represents a SELECT with at least one outer layer of parentheses,
29:  * and being careful to use select_with_parens, never '(' PGSelectStmt ')',
30:  * in the expression grammar.  We will then have shift-reduce conflicts
31:  * which we can resolve in favor of always treating '(' <select> ')' as
32:  * a select_with_parens.  To resolve the conflicts, the productions that
33:  * conflict with the select_with_parens productions are manually given
34:  * precedences lower than the precedence of ')', thereby ensuring that we
35:  * shift ')' (and then reduce to select_with_parens) rather than trying to
36:  * reduce the inner <select> nonterminal to something else.  We use UMINUS
37:  * precedence for this, which is a fairly arbitrary choice.
38:  *
39:  * To be able to define select_with_parens itself without ambiguity, we need
40:  * a nonterminal select_no_parens that represents a SELECT structure with no
41:  * outermost parentheses.  This is a little bit tedious, but it works.
42:  *
43:  * In non-expression contexts, we use PGSelectStmt which can represent a SELECT
44:  * with or without outer parentheses.
45:  */
46: 
47: SelectStmt: select_no_parens			%prec UMINUS
48: 			| select_with_parens		%prec UMINUS
49: 		;
50: 
51: select_with_parens:
52: 			'(' select_no_parens ')'				{ $$ = $2; }
53: 			| '(' select_with_parens ')'			{ $$ = $2; }
54: 		;
55: 
56: /*
57:  * This rule parses the equivalent of the standard's <query expression>.
58:  * The duplicative productions are annoying, but hard to get rid of without
59:  * creating shift/reduce conflicts.
60:  *
61:  *	The locking clause (FOR UPDATE etc) may be before or after LIMIT/OFFSET.
62:  *	In <=7.2.X, LIMIT/OFFSET had to be after FOR UPDATE
63:  *	We now support both orderings, but prefer LIMIT/OFFSET before the locking
64:  * clause.
65:  *	2002-08-28 bjm
66:  */
67: select_no_parens:
68: 			simple_select						{ $$ = $1; }
69: 			| select_clause sort_clause
70: 				{
71: 					insertSelectOptions((PGSelectStmt *) $1, $2, NIL,
72: 										NULL, NULL, NULL,
73: 										yyscanner);
74: 					$$ = $1;
75: 				}
76: 			| select_clause opt_sort_clause for_locking_clause opt_select_limit
77: 				{
78: 					insertSelectOptions((PGSelectStmt *) $1, $2, $3,
79: 										(PGNode*) list_nth($4, 0), (PGNode*) list_nth($4, 1),
80: 										NULL,
81: 										yyscanner);
82: 					$$ = $1;
83: 				}
84: 			| select_clause opt_sort_clause select_limit opt_for_locking_clause
85: 				{
86: 					insertSelectOptions((PGSelectStmt *) $1, $2, $4,
87: 										(PGNode*) list_nth($3, 0), (PGNode*) list_nth($3, 1),
88: 										NULL,
89: 										yyscanner);
90: 					$$ = $1;
91: 				}
92: 			| with_clause select_clause
93: 				{
94: 					insertSelectOptions((PGSelectStmt *) $2, NULL, NIL,
95: 										NULL, NULL,
96: 										$1,
97: 										yyscanner);
98: 					$$ = $2;
99: 				}
100: 			| with_clause select_clause sort_clause
101: 				{
102: 					insertSelectOptions((PGSelectStmt *) $2, $3, NIL,
103: 										NULL, NULL,
104: 										$1,
105: 										yyscanner);
106: 					$$ = $2;
107: 				}
108: 			| with_clause select_clause opt_sort_clause for_locking_clause opt_select_limit
109: 				{
110: 					insertSelectOptions((PGSelectStmt *) $2, $3, $4,
111: 										(PGNode*) list_nth($5, 0), (PGNode*) list_nth($5, 1),
112: 										$1,
113: 										yyscanner);
114: 					$$ = $2;
115: 				}
116: 			| with_clause select_clause opt_sort_clause select_limit opt_for_locking_clause
117: 				{
118: 					insertSelectOptions((PGSelectStmt *) $2, $3, $5,
119: 										(PGNode*) list_nth($4, 0), (PGNode*) list_nth($4, 1),
120: 										$1,
121: 										yyscanner);
122: 					$$ = $2;
123: 				}
124: 		;
125: 
126: select_clause:
127: 			simple_select							{ $$ = $1; }
128: 			| select_with_parens					{ $$ = $1; }
129: 		;
130: 
131: /*
132:  * This rule parses SELECT statements that can appear within set operations,
133:  * including UNION, INTERSECT and EXCEPT.  '(' and ')' can be used to specify
134:  * the ordering of the set operations.	Without '(' and ')' we want the
135:  * operations to be ordered per the precedence specs at the head of this file.
136:  *
137:  * As with select_no_parens, simple_select cannot have outer parentheses,
138:  * but can have parenthesized subclauses.
139:  *
140:  * Note that sort clauses cannot be included at this level --- SQL requires
141:  *		SELECT foo UNION SELECT bar ORDER BY baz
142:  * to be parsed as
143:  *		(SELECT foo UNION SELECT bar) ORDER BY baz
144:  * not
145:  *		SELECT foo UNION (SELECT bar ORDER BY baz)
146:  * Likewise for WITH, FOR UPDATE and LIMIT.  Therefore, those clauses are
147:  * described as part of the select_no_parens production, not simple_select.
148:  * This does not limit functionality, because you can reintroduce these
149:  * clauses inside parentheses.
150:  *
151:  * NOTE: only the leftmost component PGSelectStmt should have INTO.
152:  * However, this is not checked by the grammar; parse analysis must check it.
153:  */
154: simple_select:
155: 			SELECT opt_all_clause opt_target_list
156: 			into_clause from_clause where_clause
157: 			group_clause having_clause window_clause sample_clause
158: 				{
159: 					PGSelectStmt *n = makeNode(PGSelectStmt);
160: 					n->targetList = $3;
161: 					n->intoClause = $4;
162: 					n->fromClause = $5;
163: 					n->whereClause = $6;
164: 					n->groupClause = $7;
165: 					n->havingClause = $8;
166: 					n->windowClause = $9;
167: 					n->sampleOptions = $10;
168: 					$$ = (PGNode *)n;
169: 				}
170: 			| SELECT distinct_clause target_list
171: 			into_clause from_clause where_clause
172: 			group_clause having_clause window_clause sample_clause
173: 				{
174: 					PGSelectStmt *n = makeNode(PGSelectStmt);
175: 					n->distinctClause = $2;
176: 					n->targetList = $3;
177: 					n->intoClause = $4;
178: 					n->fromClause = $5;
179: 					n->whereClause = $6;
180: 					n->groupClause = $7;
181: 					n->havingClause = $8;
182: 					n->windowClause = $9;
183: 					n->sampleOptions = $10;
184: 					$$ = (PGNode *)n;
185: 				}
186: 			| values_clause							{ $$ = $1; }
187: 			| TABLE relation_expr
188: 				{
189: 					/* same as SELECT * FROM relation_expr */
190: 					PGColumnRef *cr = makeNode(PGColumnRef);
191: 					PGResTarget *rt = makeNode(PGResTarget);
192: 					PGSelectStmt *n = makeNode(PGSelectStmt);
193: 
194: 					cr->fields = list_make1(makeNode(PGAStar));
195: 					cr->location = -1;
196: 
197: 					rt->name = NULL;
198: 					rt->indirection = NIL;
199: 					rt->val = (PGNode *)cr;
200: 					rt->location = -1;
201: 
202: 					n->targetList = list_make1(rt);
203: 					n->fromClause = list_make1($2);
204: 					$$ = (PGNode *)n;
205: 				}
206: 			| select_clause UNION all_or_distinct select_clause
207: 				{
208: 					$$ = makeSetOp(PG_SETOP_UNION, $3, $1, $4);
209: 				}
210: 			| select_clause INTERSECT all_or_distinct select_clause
211: 				{
212: 					$$ = makeSetOp(PG_SETOP_INTERSECT, $3, $1, $4);
213: 				}
214: 			| select_clause EXCEPT all_or_distinct select_clause
215: 				{
216: 					$$ = makeSetOp(PG_SETOP_EXCEPT, $3, $1, $4);
217: 				}
218: 		;
219: 
220: /*
221:  * SQL standard WITH clause looks like:
222:  *
223:  * WITH [ RECURSIVE ] <query name> [ (<column>,...) ]
224:  *		AS (query) [ SEARCH or CYCLE clause ]
225:  *
226:  * We don't currently support the SEARCH or CYCLE clause.
227:  *
228:  * Recognizing WITH_LA here allows a CTE to be named TIME or ORDINALITY.
229:  */
230: with_clause:
231: 		WITH cte_list
232: 			{
233: 				$$ = makeNode(PGWithClause);
234: 				$$->ctes = $2;
235: 				$$->recursive = false;
236: 				$$->location = @1;
237: 			}
238: 		| WITH_LA cte_list
239: 			{
240: 				$$ = makeNode(PGWithClause);
241: 				$$->ctes = $2;
242: 				$$->recursive = false;
243: 				$$->location = @1;
244: 			}
245: 		| WITH RECURSIVE cte_list
246: 			{
247: 				$$ = makeNode(PGWithClause);
248: 				$$->ctes = $3;
249: 				$$->recursive = true;
250: 				$$->location = @1;
251: 			}
252: 		;
253: 
254: cte_list:
255: 		common_table_expr						{ $$ = list_make1($1); }
256: 		| cte_list ',' common_table_expr		{ $$ = lappend($1, $3); }
257: 		;
258: 
259: common_table_expr:  name opt_name_list AS '(' PreparableStmt ')'
260: 			{
261: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
262: 				n->ctename = $1;
263: 				n->aliascolnames = $2;
264: 				n->ctequery = $5;
265: 				n->location = @1;
266: 				$$ = (PGNode *) n;
267: 			}
268: 		;
269: 
270: into_clause:
271: 			INTO OptTempTableName
272: 				{
273: 					$$ = makeNode(PGIntoClause);
274: 					$$->rel = $2;
275: 					$$->colNames = NIL;
276: 					$$->options = NIL;
277: 					$$->onCommit = PG_ONCOMMIT_NOOP;
278: 					$$->viewQuery = NULL;
279: 					$$->skipData = false;
280: 				}
281: 			| /*EMPTY*/
282: 				{ $$ = NULL; }
283: 		;
284: 
285: /*
286:  * Redundancy here is needed to avoid shift/reduce conflicts,
287:  * since TEMP is not a reserved word.  See also OptTemp.
288:  */
289: OptTempTableName:
290: 			TEMPORARY opt_table qualified_name
291: 				{
292: 					$$ = $3;
293: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
294: 				}
295: 			| TEMP opt_table qualified_name
296: 				{
297: 					$$ = $3;
298: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
299: 				}
300: 			| LOCAL TEMPORARY opt_table qualified_name
301: 				{
302: 					$$ = $4;
303: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
304: 				}
305: 			| LOCAL TEMP opt_table qualified_name
306: 				{
307: 					$$ = $4;
308: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
309: 				}
310: 			| GLOBAL TEMPORARY opt_table qualified_name
311: 				{
312: 					ereport(PGWARNING,
313: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
314: 							 parser_errposition(@1)));
315: 					$$ = $4;
316: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
317: 				}
318: 			| GLOBAL TEMP opt_table qualified_name
319: 				{
320: 					ereport(PGWARNING,
321: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
322: 							 parser_errposition(@1)));
323: 					$$ = $4;
324: 					$$->relpersistence = PG_RELPERSISTENCE_TEMP;
325: 				}
326: 			| UNLOGGED opt_table qualified_name
327: 				{
328: 					$$ = $3;
329: 					$$->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
330: 				}
331: 			| TABLE qualified_name
332: 				{
333: 					$$ = $2;
334: 					$$->relpersistence = RELPERSISTENCE_PERMANENT;
335: 				}
336: 			| qualified_name
337: 				{
338: 					$$ = $1;
339: 					$$->relpersistence = RELPERSISTENCE_PERMANENT;
340: 				}
341: 		;
342: 
343: opt_table:	TABLE									{}
344: 			| /*EMPTY*/								{}
345: 		;
346: 
347: all_or_distinct:
348: 			ALL										{ $$ = true; }
349: 			| DISTINCT								{ $$ = false; }
350: 			| /*EMPTY*/								{ $$ = false; }
351: 		;
352: 
353: /* We use (NIL) as a placeholder to indicate that all target expressions
354:  * should be placed in the DISTINCT list during parsetree analysis.
355:  */
356: distinct_clause:
357: 			DISTINCT								{ $$ = list_make1(NIL); }
358: 			| DISTINCT ON '(' expr_list ')'			{ $$ = $4; }
359: 		;
360: 
361: opt_all_clause:
362: 			ALL										{ $$ = NIL;}
363: 			| /*EMPTY*/								{ $$ = NIL; }
364: 		;
365: 
366: opt_sort_clause:
367: 			sort_clause								{ $$ = $1;}
368: 			| /*EMPTY*/								{ $$ = NIL; }
369: 		;
370: 
371: sort_clause:
372: 			ORDER BY sortby_list					{ $$ = $3; }
373: 		;
374: 
375: sortby_list:
376: 			sortby									{ $$ = list_make1($1); }
377: 			| sortby_list ',' sortby				{ $$ = lappend($1, $3); }
378: 		;
379: 
380: sortby:		a_expr USING qual_all_Op opt_nulls_order
381: 				{
382: 					$$ = makeNode(PGSortBy);
383: 					$$->node = $1;
384: 					$$->sortby_dir = SORTBY_USING;
385: 					$$->sortby_nulls = $4;
386: 					$$->useOp = $3;
387: 					$$->location = @3;
388: 				}
389: 			| a_expr opt_asc_desc opt_nulls_order
390: 				{
391: 					$$ = makeNode(PGSortBy);
392: 					$$->node = $1;
393: 					$$->sortby_dir = $2;
394: 					$$->sortby_nulls = $3;
395: 					$$->useOp = NIL;
396: 					$$->location = -1;		/* no operator */
397: 				}
398: 		;
399: 
400: opt_asc_desc: ASC_P							{ $$ = PG_SORTBY_ASC; }
401: 			| DESC_P						{ $$ = PG_SORTBY_DESC; }
402: 			| /*EMPTY*/						{ $$ = PG_SORTBY_DEFAULT; }
403: 		;
404: 
405: opt_nulls_order: NULLS_LA FIRST_P			{ $$ = PG_SORTBY_NULLS_FIRST; }
406: 			| NULLS_LA LAST_P				{ $$ = PG_SORTBY_NULLS_LAST; }
407: 			| /*EMPTY*/						{ $$ = PG_SORTBY_NULLS_DEFAULT; }
408: 		;
409: 
410: select_limit:
411: 			limit_clause offset_clause			{ $$ = list_make2($2, $1); }
412: 			| offset_clause limit_clause		{ $$ = list_make2($1, $2); }
413: 			| limit_clause						{ $$ = list_make2(NULL, $1); }
414: 			| offset_clause						{ $$ = list_make2($1, NULL); }
415: 		;
416: 
417: opt_select_limit:
418: 			select_limit						{ $$ = $1; }
419: 			| /* EMPTY */						{ $$ = list_make2(NULL,NULL); }
420: 		;
421: 
422: limit_clause:
423: 			LIMIT select_limit_value
424: 				{ $$ = $2; }
425: 			| LIMIT select_limit_value ',' select_offset_value
426: 				{
427: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
428: 					ereport(ERROR,
429: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
430: 							 errmsg("LIMIT #,# syntax is not supported"),
431: 							 errhint("Use separate LIMIT and OFFSET clauses."),
432: 							 parser_errposition(@1)));
433: 				}
434: 			/* SQL:2008 syntax */
435: 			/* to avoid shift/reduce conflicts, handle the optional value with
436: 			 * a separate production rather than an opt_ expression.  The fact
437: 			 * that ONLY is fully reserved means that this way, we defer any
438: 			 * decision about what rule reduces ROW or ROWS to the point where
439: 			 * we can see the ONLY token in the lookahead slot.
440: 			 */
441: 			| FETCH first_or_next select_fetch_first_value row_or_rows ONLY
442: 				{ $$ = $3; }
443: 			| FETCH first_or_next row_or_rows ONLY
444: 				{ $$ = makeIntConst(1, -1); }
445: 		;
446: 
447: offset_clause:
448: 			OFFSET select_offset_value
449: 				{ $$ = $2; }
450: 			/* SQL:2008 syntax */
451: 			| OFFSET select_fetch_first_value row_or_rows
452: 				{ $$ = $2; }
453: 		;
454: 
455: /*
456:  * SAMPLE clause
457:  */
458: sample_count:
459: 	FCONST '%'
460: 		{
461: 			$$ = makeSampleSize(makeFloat($1), true);
462: 		}
463: 	| ICONST '%'
464: 		{
465: 			$$ = makeSampleSize(makeInteger($1), true);
466: 		}
467: 	| FCONST PERCENT
468: 		{
469: 			$$ = makeSampleSize(makeFloat($1), true);
470: 		}
471: 	| ICONST PERCENT
472: 		{
473: 			$$ = makeSampleSize(makeInteger($1), true);
474: 		}
475: 	| ICONST
476: 		{
477: 			$$ = makeSampleSize(makeInteger($1), false);
478: 		}
479: 	| ICONST ROWS
480: 		{
481: 			$$ = makeSampleSize(makeInteger($1), false);
482: 		}
483: 	;
484: 
485: sample_clause:
486: 			USING SAMPLE tablesample_entry
487: 				{
488: 					$$ = $3;
489: 				}
490: 			| /* EMPTY */
491: 				{ $$ = NULL; }
492: 		;
493: 
494: /*
495:  * TABLESAMPLE decoration in a FROM item
496:  */
497: opt_sample_func:
498: 			ColId					{ $$ = $1; }
499: 			| /*EMPTY*/				{ $$ = NULL; }
500: 		;
501: 
502: tablesample_entry:
503: 	opt_sample_func '(' sample_count ')' opt_repeatable_clause
504: 				{
505: 					$$ = makeSampleOptions($3, $1, $5, @1);
506: 				}
507: 	| sample_count
508: 		{
509: 			$$ = makeSampleOptions($1, NULL, -1, @1);
510: 		}
511: 	| sample_count '(' ColId ')'
512: 		{
513: 			$$ = makeSampleOptions($1, $3, -1, @1);
514: 		}
515: 	| sample_count '(' ColId ',' ICONST ')'
516: 		{
517: 			$$ = makeSampleOptions($1, $3, $5, @1);
518: 		}
519: 	;
520: 
521: tablesample_clause:
522: 			TABLESAMPLE tablesample_entry
523: 				{
524: 					$$ = $2;
525: 				}
526: 		;
527: 
528: opt_tablesample_clause:
529: 			tablesample_clause			{ $$ = $1; }
530: 			| /*EMPTY*/					{ $$ = NULL; }
531: 		;
532: 
533: 
534: opt_repeatable_clause:
535: 			REPEATABLE '(' ICONST ')'	{ $$ = $3; }
536: 			| /*EMPTY*/					{ $$ = -1; }
537: 		;
538: 
539: select_limit_value:
540: 			a_expr									{ $$ = $1; }
541: 			| ALL
542: 				{
543: 					/* LIMIT ALL is represented as a NULL constant */
544: 					$$ = makeNullAConst(@1);
545: 				}
546: 		;
547: 
548: select_offset_value:
549: 			a_expr									{ $$ = $1; }
550: 		;
551: 
552: /*
553:  * Allowing full expressions without parentheses causes various parsing
554:  * problems with the trailing ROW/ROWS key words.  SQL spec only calls for
555:  * <simple value specification>, which is either a literal or a parameter (but
556:  * an <SQL parameter reference> could be an identifier, bringing up conflicts
557:  * with ROW/ROWS). We solve this by leveraging the presence of ONLY (see above)
558:  * to determine whether the expression is missing rather than trying to make it
559:  * optional in this rule.
560:  *
561:  * c_expr covers almost all the spec-required cases (and more), but it doesn't
562:  * cover signed numeric literals, which are allowed by the spec. So we include
563:  * those here explicitly. We need FCONST as well as ICONST because values that
564:  * don't fit in the platform's "long", but do fit in bigint, should still be
565:  * accepted here. (This is possible in 64-bit Windows as well as all 32-bit
566:  * builds.)
567:  */
568: select_fetch_first_value:
569: 			c_expr									{ $$ = $1; }
570: 			| '+' I_or_F_const
571: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
572: 			| '-' I_or_F_const
573: 				{ $$ = doNegate($2, @1); }
574: 		;
575: 
576: I_or_F_const:
577: 			Iconst									{ $$ = makeIntConst($1,@1); }
578: 			| FCONST								{ $$ = makeFloatConst($1,@1); }
579: 		;
580: 
581: /* noise words */
582: row_or_rows: ROW									{ $$ = 0; }
583: 			| ROWS									{ $$ = 0; }
584: 		;
585: 
586: first_or_next: FIRST_P								{ $$ = 0; }
587: 			| NEXT									{ $$ = 0; }
588: 		;
589: 
590: 
591: /*
592:  * This syntax for group_clause tries to follow the spec quite closely.
593:  * However, the spec allows only column references, not expressions,
594:  * which introduces an ambiguity between implicit row constructors
595:  * (a,b) and lists of column references.
596:  *
597:  * We handle this by using the a_expr production for what the spec calls
598:  * <ordinary grouping set>, which in the spec represents either one column
599:  * reference or a parenthesized list of column references. Then, we check the
600:  * top node of the a_expr to see if it's an implicit PGRowExpr, and if so, just
601:  * grab and use the list, discarding the node. (this is done in parse analysis,
602:  * not here)
603:  *
604:  * (we abuse the row_format field of PGRowExpr to distinguish implicit and
605:  * explicit row constructors; it's debatable if anyone sanely wants to use them
606:  * in a group clause, but if they have a reason to, we make it possible.)
607:  *
608:  * Each item in the group_clause list is either an expression tree or a
609:  * PGGroupingSet node of some type.
610:  */
611: group_clause:
612: 			GROUP_P BY group_by_list				{ $$ = $3; }
613: 			| /*EMPTY*/								{ $$ = NIL; }
614: 		;
615: 
616: group_by_list:
617: 			group_by_item							{ $$ = list_make1($1); }
618: 			| group_by_list ',' group_by_item		{ $$ = lappend($1,$3); }
619: 		;
620: 
621: group_by_item:
622: 			a_expr									{ $$ = $1; }
623: 			| empty_grouping_set					{ $$ = $1; }
624: 		;
625: 
626: empty_grouping_set:
627: 			'(' ')'
628: 				{
629: 					$$ = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, @1);
630: 				}
631: 		;
632: 
633: /*
634:  * These hacks rely on setting precedence of CUBE and ROLLUP below that of '(',
635:  * so that they shift in these rules rather than reducing the conflicting
636:  * unreserved_keyword rule.
637:  */
638: 
639: having_clause:
640: 			HAVING a_expr							{ $$ = $2; }
641: 			| /*EMPTY*/								{ $$ = NULL; }
642: 		;
643: 
644: for_locking_clause:
645: 			for_locking_items						{ $$ = $1; }
646: 			| FOR READ_P ONLY							{ $$ = NIL; }
647: 		;
648: 
649: opt_for_locking_clause:
650: 			for_locking_clause						{ $$ = $1; }
651: 			| /* EMPTY */							{ $$ = NIL; }
652: 		;
653: 
654: for_locking_items:
655: 			for_locking_item						{ $$ = list_make1($1); }
656: 			| for_locking_items for_locking_item	{ $$ = lappend($1, $2); }
657: 		;
658: 
659: for_locking_item:
660: 			for_locking_strength locked_rels_list opt_nowait_or_skip
661: 				{
662: 					PGLockingClause *n = makeNode(PGLockingClause);
663: 					n->lockedRels = $2;
664: 					n->strength = $1;
665: 					n->waitPolicy = $3;
666: 					$$ = (PGNode *) n;
667: 				}
668: 		;
669: 
670: for_locking_strength:
671: 			FOR UPDATE 							{ $$ = LCS_FORUPDATE; }
672: 			| FOR NO KEY UPDATE 				{ $$ = PG_LCS_FORNOKEYUPDATE; }
673: 			| FOR SHARE 						{ $$ = PG_LCS_FORSHARE; }
674: 			| FOR KEY SHARE 					{ $$ = PG_LCS_FORKEYSHARE; }
675: 		;
676: 
677: locked_rels_list:
678: 			OF qualified_name_list					{ $$ = $2; }
679: 			| /* EMPTY */							{ $$ = NIL; }
680: 		;
681: 
682: 
683: opt_nowait_or_skip:
684: 			NOWAIT							{ $$ = LockWaitError; }
685: 			| SKIP LOCKED					{ $$ = PGLockWaitSkip; }
686: 			| /*EMPTY*/						{ $$ = PGLockWaitBlock; }
687: 		;
688: 
689: /*
690:  * We should allow ROW '(' expr_list ')' too, but that seems to require
691:  * making VALUES a fully reserved word, which will probably break more apps
692:  * than allowing the noise-word is worth.
693:  */
694: values_clause:
695: 			VALUES '(' expr_list ')'
696: 				{
697: 					PGSelectStmt *n = makeNode(PGSelectStmt);
698: 					n->valuesLists = list_make1($3);
699: 					$$ = (PGNode *) n;
700: 				}
701: 			| values_clause ',' '(' expr_list ')'
702: 				{
703: 					PGSelectStmt *n = (PGSelectStmt *) $1;
704: 					n->valuesLists = lappend(n->valuesLists, $4);
705: 					$$ = (PGNode *) n;
706: 				}
707: 		;
708: 
709: 
710: /*****************************************************************************
711:  *
712:  *	clauses common to all Optimizable Stmts:
713:  *		from_clause		- allow list of both JOIN expressions and table names
714:  *		where_clause	- qualifications for joins or restrictions
715:  *
716:  *****************************************************************************/
717: 
718: from_clause:
719: 			FROM from_list							{ $$ = $2; }
720: 			| /*EMPTY*/								{ $$ = NIL; }
721: 		;
722: 
723: from_list:
724: 			table_ref								{ $$ = list_make1($1); }
725: 			| from_list ',' table_ref				{ $$ = lappend($1, $3); }
726: 		;
727: 
728: /*
729:  * table_ref is where an alias clause can be attached.
730:  */
731: table_ref:	relation_expr opt_alias_clause opt_tablesample_clause
732: 				{
733: 					$1->alias = $2;
734: 					$1->sample = $3;
735: 					$$ = (PGNode *) $1;
736: 				}
737: 			| func_table func_alias_clause opt_tablesample_clause
738: 				{
739: 					PGRangeFunction *n = (PGRangeFunction *) $1;
740: 					n->alias = (PGAlias*) linitial($2);
741: 					n->coldeflist = (PGList*) lsecond($2);
742: 					n->sample = $3;
743: 					$$ = (PGNode *) n;
744: 				}
745: 			| LATERAL_P func_table func_alias_clause
746: 				{
747: 					PGRangeFunction *n = (PGRangeFunction *) $2;
748: 					n->lateral = true;
749: 					n->alias = (PGAlias*) linitial($3);
750: 					n->coldeflist = (PGList*) lsecond($3);
751: 					$$ = (PGNode *) n;
752: 				}
753: 			| select_with_parens opt_alias_clause opt_tablesample_clause
754: 				{
755: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
756: 					n->lateral = false;
757: 					n->subquery = $1;
758: 					n->alias = $2;
759: 					n->sample = $3;
760: 					$$ = (PGNode *) n;
761: 				}
762: 			| LATERAL_P select_with_parens opt_alias_clause
763: 				{
764: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
765: 					n->lateral = true;
766: 					n->subquery = $2;
767: 					n->alias = $3;
768: 					n->sample = NULL;
769: 					$$ = (PGNode *) n;
770: 				}
771: 			| joined_table
772: 				{
773: 					$$ = (PGNode *) $1;
774: 				}
775: 			| '(' joined_table ')' alias_clause
776: 				{
777: 					$2->alias = $4;
778: 					$$ = (PGNode *) $2;
779: 				}
780: 		;
781: 
782: 
783: /*
784:  * It may seem silly to separate joined_table from table_ref, but there is
785:  * method in SQL's madness: if you don't do it this way you get reduce-
786:  * reduce conflicts, because it's not clear to the parser generator whether
787:  * to expect alias_clause after ')' or not.  For the same reason we must
788:  * treat 'JOIN' and 'join_type JOIN' separately, rather than allowing
789:  * join_type to expand to empty; if we try it, the parser generator can't
790:  * figure out when to reduce an empty join_type right after table_ref.
791:  *
792:  * Note that a CROSS JOIN is the same as an unqualified
793:  * INNER JOIN, and an INNER JOIN/ON has the same shape
794:  * but a qualification expression to limit membership.
795:  * A NATURAL JOIN implicitly matches column names between
796:  * tables and the shape is determined by which columns are
797:  * in common. We'll collect columns during the later transformations.
798:  */
799: 
800: joined_table:
801: 			'(' joined_table ')'
802: 				{
803: 					$$ = $2;
804: 				}
805: 			| table_ref CROSS JOIN table_ref
806: 				{
807: 					/* CROSS JOIN is same as unqualified inner join */
808: 					PGJoinExpr *n = makeNode(PGJoinExpr);
809: 					n->jointype = PG_JOIN_INNER;
810: 					n->isNatural = false;
811: 					n->larg = $1;
812: 					n->rarg = $4;
813: 					n->usingClause = NIL;
814: 					n->quals = NULL;
815: 					n->location = @2;
816: 					$$ = n;
817: 				}
818: 			| table_ref join_type JOIN table_ref join_qual
819: 				{
820: 					PGJoinExpr *n = makeNode(PGJoinExpr);
821: 					n->jointype = $2;
822: 					n->isNatural = false;
823: 					n->larg = $1;
824: 					n->rarg = $4;
825: 					if ($5 != NULL && IsA($5, PGList))
826: 						n->usingClause = (PGList *) $5; /* USING clause */
827: 					else
828: 						n->quals = $5; /* ON clause */
829: 					n->location = @2;
830: 					$$ = n;
831: 				}
832: 			| table_ref JOIN table_ref join_qual
833: 				{
834: 					/* letting join_type reduce to empty doesn't work */
835: 					PGJoinExpr *n = makeNode(PGJoinExpr);
836: 					n->jointype = PG_JOIN_INNER;
837: 					n->isNatural = false;
838: 					n->larg = $1;
839: 					n->rarg = $3;
840: 					if ($4 != NULL && IsA($4, PGList))
841: 						n->usingClause = (PGList *) $4; /* USING clause */
842: 					else
843: 						n->quals = $4; /* ON clause */
844: 					n->location = @2;
845: 					$$ = n;
846: 				}
847: 			| table_ref NATURAL join_type JOIN table_ref
848: 				{
849: 					PGJoinExpr *n = makeNode(PGJoinExpr);
850: 					n->jointype = $3;
851: 					n->isNatural = true;
852: 					n->larg = $1;
853: 					n->rarg = $5;
854: 					n->usingClause = NIL; /* figure out which columns later... */
855: 					n->quals = NULL; /* fill later */
856: 					n->location = @2;
857: 					$$ = n;
858: 				}
859: 			| table_ref NATURAL JOIN table_ref
860: 				{
861: 					/* letting join_type reduce to empty doesn't work */
862: 					PGJoinExpr *n = makeNode(PGJoinExpr);
863: 					n->jointype = PG_JOIN_INNER;
864: 					n->isNatural = true;
865: 					n->larg = $1;
866: 					n->rarg = $4;
867: 					n->usingClause = NIL; /* figure out which columns later... */
868: 					n->quals = NULL; /* fill later */
869: 					n->location = @2;
870: 					$$ = n;
871: 				}
872: 		;
873: 
874: alias_clause:
875: 			AS ColId '(' name_list ')'
876: 				{
877: 					$$ = makeNode(PGAlias);
878: 					$$->aliasname = $2;
879: 					$$->colnames = $4;
880: 				}
881: 			| AS ColIdOrString
882: 				{
883: 					$$ = makeNode(PGAlias);
884: 					$$->aliasname = $2;
885: 				}
886: 			| ColId '(' name_list ')'
887: 				{
888: 					$$ = makeNode(PGAlias);
889: 					$$->aliasname = $1;
890: 					$$->colnames = $3;
891: 				}
892: 			| ColId
893: 				{
894: 					$$ = makeNode(PGAlias);
895: 					$$->aliasname = $1;
896: 				}
897: 		;
898: 
899: opt_alias_clause: alias_clause						{ $$ = $1; }
900: 			| /*EMPTY*/								{ $$ = NULL; }
901: 		;
902: 
903: /*
904:  * func_alias_clause can include both an PGAlias and a coldeflist, so we make it
905:  * return a 2-element list that gets disassembled by calling production.
906:  */
907: func_alias_clause:
908: 			alias_clause
909: 				{
910: 					$$ = list_make2($1, NIL);
911: 				}
912: 			| AS '(' TableFuncElementList ')'
913: 				{
914: 					$$ = list_make2(NULL, $3);
915: 				}
916: 			| AS ColId '(' TableFuncElementList ')'
917: 				{
918: 					PGAlias *a = makeNode(PGAlias);
919: 					a->aliasname = $2;
920: 					$$ = list_make2(a, $4);
921: 				}
922: 			| ColId '(' TableFuncElementList ')'
923: 				{
924: 					PGAlias *a = makeNode(PGAlias);
925: 					a->aliasname = $1;
926: 					$$ = list_make2(a, $3);
927: 				}
928: 			| /*EMPTY*/
929: 				{
930: 					$$ = list_make2(NULL, NIL);
931: 				}
932: 		;
933: 
934: join_type:	FULL join_outer							{ $$ = PG_JOIN_FULL; }
935: 			| LEFT join_outer						{ $$ = PG_JOIN_LEFT; }
936: 			| RIGHT join_outer						{ $$ = PG_JOIN_RIGHT; }
937: 			| INNER_P								{ $$ = PG_JOIN_INNER; }
938: 		;
939: 
940: /* OUTER is just noise... */
941: join_outer: OUTER_P									{ $$ = NULL; }
942: 			| /*EMPTY*/								{ $$ = NULL; }
943: 		;
944: 
945: /* JOIN qualification clauses
946:  * Possibilities are:
947:  *	USING ( column list ) allows only unqualified column names,
948:  *						  which must match between tables.
949:  *	ON expr allows more general qualifications.
950:  *
951:  * We return USING as a PGList node, while an ON-expr will not be a List.
952:  */
953: 
954: join_qual:	USING '(' name_list ')'					{ $$ = (PGNode *) $3; }
955: 			| ON a_expr								{ $$ = $2; }
956: 		;
957: 
958: 
959: relation_expr:
960: 			qualified_name
961: 				{
962: 					/* inheritance query, implicitly */
963: 					$$ = $1;
964: 					$$->inh = true;
965: 					$$->alias = NULL;
966: 				}
967: 			| qualified_name '*'
968: 				{
969: 					/* inheritance query, explicitly */
970: 					$$ = $1;
971: 					$$->inh = true;
972: 					$$->alias = NULL;
973: 				}
974: 			| ONLY qualified_name
975: 				{
976: 					/* no inheritance */
977: 					$$ = $2;
978: 					$$->inh = false;
979: 					$$->alias = NULL;
980: 				}
981: 			| ONLY '(' qualified_name ')'
982: 				{
983: 					/* no inheritance, SQL99-style syntax */
984: 					$$ = $3;
985: 					$$->inh = false;
986: 					$$->alias = NULL;
987: 				}
988: 		;
989: 
990: 
991: /*
992:  * Given "UPDATE foo set set ...", we have to decide without looking any
993:  * further ahead whether the first "set" is an alias or the UPDATE's SET
994:  * keyword.  Since "set" is allowed as a column name both interpretations
995:  * are feasible.  We resolve the shift/reduce conflict by giving the first
996:  * production a higher precedence than the SET token
997:  * has, causing the parser to prefer to reduce, in effect assuming that the
998:  * SET is not an alias.
999:  */
1000: 
1001: /*
1002:  * func_table represents a function invocation in a FROM list. It can be
1003:  * a plain function call, like "foo(...)", or a ROWS FROM expression with
1004:  * one or more function calls, "ROWS FROM (foo(...), bar(...))",
1005:  * optionally with WITH ORDINALITY attached.
1006:  * In the ROWS FROM syntax, a column list can be given for each
1007:  * function, for example:
1008:  *     ROWS FROM (foo() AS (foo_res_a text, foo_res_b text),
1009:  *                bar() AS (bar_res_a text, bar_res_b text))
1010:  * It's also possible to attach a column list to the PGRangeFunction
1011:  * as a whole, but that's handled by the table_ref production.
1012:  */
1013: func_table: func_expr_windowless opt_ordinality
1014: 				{
1015: 					PGRangeFunction *n = makeNode(PGRangeFunction);
1016: 					n->lateral = false;
1017: 					n->ordinality = $2;
1018: 					n->is_rowsfrom = false;
1019: 					n->functions = list_make1(list_make2($1, NIL));
1020: 					n->sample = NULL;
1021: 					/* alias and coldeflist are set by table_ref production */
1022: 					$$ = (PGNode *) n;
1023: 				}
1024: 			| ROWS FROM '(' rowsfrom_list ')' opt_ordinality
1025: 				{
1026: 					PGRangeFunction *n = makeNode(PGRangeFunction);
1027: 					n->lateral = false;
1028: 					n->ordinality = $6;
1029: 					n->is_rowsfrom = true;
1030: 					n->functions = $4;
1031: 					n->sample = NULL;
1032: 					/* alias and coldeflist are set by table_ref production */
1033: 					$$ = (PGNode *) n;
1034: 				}
1035: 		;
1036: 
1037: rowsfrom_item: func_expr_windowless opt_col_def_list
1038: 				{ $$ = list_make2($1, $2); }
1039: 		;
1040: 
1041: rowsfrom_list:
1042: 			rowsfrom_item						{ $$ = list_make1($1); }
1043: 			| rowsfrom_list ',' rowsfrom_item	{ $$ = lappend($1, $3); }
1044: 		;
1045: 
1046: opt_col_def_list: AS '(' TableFuncElementList ')'	{ $$ = $3; }
1047: 			| /*EMPTY*/								{ $$ = NIL; }
1048: 		;
1049: 
1050: opt_ordinality: WITH_LA ORDINALITY					{ $$ = true; }
1051: 			| /*EMPTY*/								{ $$ = false; }
1052: 		;
1053: 
1054: 
1055: where_clause:
1056: 			WHERE a_expr							{ $$ = $2; }
1057: 			| /*EMPTY*/								{ $$ = NULL; }
1058: 		;
1059: 
1060: /* variant for UPDATE and DELETE */
1061: TableFuncElementList:
1062: 			TableFuncElement
1063: 				{
1064: 					$$ = list_make1($1);
1065: 				}
1066: 			| TableFuncElementList ',' TableFuncElement
1067: 				{
1068: 					$$ = lappend($1, $3);
1069: 				}
1070: 		;
1071: 
1072: TableFuncElement:	ColId Typename opt_collate_clause
1073: 				{
1074: 					PGColumnDef *n = makeNode(PGColumnDef);
1075: 					n->colname = $1;
1076: 					n->typeName = $2;
1077: 					n->inhcount = 0;
1078: 					n->is_local = true;
1079: 					n->is_not_null = false;
1080: 					n->is_from_type = false;
1081: 					n->storage = 0;
1082: 					n->raw_default = NULL;
1083: 					n->cooked_default = NULL;
1084: 					n->collClause = (PGCollateClause *) $3;
1085: 					n->collOid = InvalidOid;
1086: 					n->constraints = NIL;
1087: 					n->location = @1;
1088: 					$$ = (PGNode *)n;
1089: 				}
1090: 		;
1091: 
1092: opt_collate_clause:
1093: 			COLLATE any_name
1094: 				{
1095: 					PGCollateClause *n = makeNode(PGCollateClause);
1096: 					n->arg = NULL;
1097: 					n->collname = $2;
1098: 					n->location = @1;
1099: 					$$ = (PGNode *) n;
1100: 				}
1101: 			| /* EMPTY */				{ $$ = NULL; }
1102: 		;
1103: /*****************************************************************************
1104:  *
1105:  *	Type syntax
1106:  *		SQL introduces a large amount of type-specific syntax.
1107:  *		Define individual clauses to handle these cases, and use
1108:  *		 the generic case to handle regular type-extensible Postgres syntax.
1109:  *		- thomas 1997-10-10
1110:  *
1111:  *****************************************************************************/
1112: 
1113: colid_type_list:
1114:             ColId Typename   {
1115:              $$ = list_make1(list_make2(makeString($1), $2));
1116:             }
1117:             | colid_type_list ',' ColId Typename {
1118:              $$ = lappend($1, list_make2(makeString($3), $4));
1119:             }
1120: 
1121: RowOrStruct: ROW | STRUCT
1122: 
1123: Typename:	SimpleTypename opt_array_bounds
1124: 				{
1125: 					$$ = $1;
1126: 					$$->arrayBounds = $2;
1127: 				}
1128: 			| SETOF SimpleTypename opt_array_bounds
1129: 				{
1130: 					$$ = $2;
1131: 					$$->arrayBounds = $3;
1132: 					$$->setof = true;
1133: 				}
1134: 			/* SQL standard syntax, currently only one-dimensional */
1135: 			| SimpleTypename ARRAY '[' Iconst ']'
1136: 				{
1137: 					$$ = $1;
1138: 					$$->arrayBounds = list_make1(makeInteger($4));
1139: 				}
1140: 			| SETOF SimpleTypename ARRAY '[' Iconst ']'
1141: 				{
1142: 					$$ = $2;
1143: 					$$->arrayBounds = list_make1(makeInteger($5));
1144: 					$$->setof = true;
1145: 				}
1146: 			| SimpleTypename ARRAY
1147: 				{
1148: 					$$ = $1;
1149: 					$$->arrayBounds = list_make1(makeInteger(-1));
1150: 				}
1151: 			| SETOF SimpleTypename ARRAY
1152: 				{
1153: 					$$ = $2;
1154: 					$$->arrayBounds = list_make1(makeInteger(-1));
1155: 					$$->setof = true;
1156: 				}
1157: 			| RowOrStruct '(' colid_type_list ')' opt_array_bounds {
1158:                $$ = SystemTypeName("struct");
1159:                $$->arrayBounds = $5;
1160:                $$->typmods = $3;
1161:                $$->location = @1;
1162:                }
1163:             | MAP '(' type_list ')' opt_array_bounds {
1164:                $$ = SystemTypeName("map");
1165:                $$->arrayBounds = $5;
1166:                $$->typmods = $3;
1167:                $$->location = @1;
1168: 			}
1169: 		;
1170: 
1171: opt_array_bounds:
1172: 			opt_array_bounds '[' ']'
1173: 					{  $$ = lappend($1, makeInteger(-1)); }
1174: 			| opt_array_bounds '[' Iconst ']'
1175: 					{  $$ = lappend($1, makeInteger($3)); }
1176: 			| /*EMPTY*/
1177: 					{  $$ = NIL; }
1178: 		;
1179: 
1180: SimpleTypename:
1181: 			GenericType								{ $$ = $1; }
1182: 			| Numeric								{ $$ = $1; }
1183: 			| Bit									{ $$ = $1; }
1184: 			| Character								{ $$ = $1; }
1185: 			| ConstDatetime							{ $$ = $1; }
1186: 			| ConstInterval opt_interval
1187: 				{
1188: 					$$ = $1;
1189: 					$$->typmods = $2;
1190: 				}
1191: 			| ConstInterval '(' Iconst ')'
1192: 				{
1193: 					$$ = $1;
1194: 					$$->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
1195: 											 makeIntConst($3, @3));
1196: 				}
1197: 		;
1198: 
1199: /* We have a separate ConstTypename to allow defaulting fixed-length
1200:  * types such as CHAR() and BIT() to an unspecified length.
1201:  * SQL9x requires that these default to a length of one, but this
1202:  * makes no sense for constructs like CHAR 'hi' and BIT '0101',
1203:  * where there is an obvious better choice to make.
1204:  * Note that ConstInterval is not included here since it must
1205:  * be pushed up higher in the rules to accommodate the postfix
1206:  * options (e.g. INTERVAL '1' YEAR). Likewise, we have to handle
1207:  * the generic-type-name case in AExprConst to avoid premature
1208:  * reduce/reduce conflicts against function names.
1209:  */
1210: ConstTypename:
1211: 			Numeric									{ $$ = $1; }
1212: 			| ConstBit								{ $$ = $1; }
1213: 			| ConstCharacter						{ $$ = $1; }
1214: 			| ConstDatetime							{ $$ = $1; }
1215: 		;
1216: 
1217: /*
1218:  * GenericType covers all type names that don't have special syntax mandated
1219:  * by the standard, including qualified names.  We also allow type modifiers.
1220:  * To avoid parsing conflicts against function invocations, the modifiers
1221:  * have to be shown as expr_list here, but parse analysis will only accept
1222:  * constants for them.
1223:  */
1224: GenericType:
1225: 			type_name_token opt_type_modifiers
1226: 				{
1227: 					$$ = makeTypeName($1);
1228: 					$$->typmods = $2;
1229: 					$$->location = @1;
1230: 				}
1231: 			// | type_name_token attrs opt_type_modifiers
1232: 			// 	{
1233: 			// 		$$ = makeTypeNameFromNameList(lcons(makeString($1), $2));
1234: 			// 		$$->typmods = $3;
1235: 			// 		$$->location = @1;
1236: 			// 	}
1237: 		;
1238: 
1239: opt_type_modifiers: '(' expr_list ')'				{ $$ = $2; }
1240: 					| /* EMPTY */					{ $$ = NIL; }
1241: 		;
1242: 
1243: /*
1244:  * SQL numeric data types
1245:  */
1246: Numeric:	INT_P
1247: 				{
1248: 					$$ = SystemTypeName("int4");
1249: 					$$->location = @1;
1250: 				}
1251: 			| INTEGER
1252: 				{
1253: 					$$ = SystemTypeName("int4");
1254: 					$$->location = @1;
1255: 				}
1256: 			| SMALLINT
1257: 				{
1258: 					$$ = SystemTypeName("int2");
1259: 					$$->location = @1;
1260: 				}
1261: 			| BIGINT
1262: 				{
1263: 					$$ = SystemTypeName("int8");
1264: 					$$->location = @1;
1265: 				}
1266: 			| REAL
1267: 				{
1268: 					$$ = SystemTypeName("float4");
1269: 					$$->location = @1;
1270: 				}
1271: 			| FLOAT_P opt_float
1272: 				{
1273: 					$$ = $2;
1274: 					$$->location = @1;
1275: 				}
1276: 			| DOUBLE_P PRECISION
1277: 				{
1278: 					$$ = SystemTypeName("float8");
1279: 					$$->location = @1;
1280: 				}
1281: 			| DECIMAL_P opt_type_modifiers
1282: 				{
1283: 					$$ = SystemTypeName("numeric");
1284: 					$$->typmods = $2;
1285: 					$$->location = @1;
1286: 				}
1287: 			| DEC opt_type_modifiers
1288: 				{
1289: 					$$ = SystemTypeName("numeric");
1290: 					$$->typmods = $2;
1291: 					$$->location = @1;
1292: 				}
1293: 			| NUMERIC opt_type_modifiers
1294: 				{
1295: 					$$ = SystemTypeName("numeric");
1296: 					$$->typmods = $2;
1297: 					$$->location = @1;
1298: 				}
1299: 			| BOOLEAN_P
1300: 				{
1301: 					$$ = SystemTypeName("bool");
1302: 					$$->location = @1;
1303: 				}
1304: 		;
1305: 
1306: opt_float:	'(' Iconst ')'
1307: 				{
1308: 					/*
1309: 					 * Check FLOAT() precision limits assuming IEEE floating
1310: 					 * types - thomas 1997-09-18
1311: 					 */
1312: 					if ($2 < 1)
1313: 						ereport(ERROR,
1314: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
1315: 								 errmsg("precision for type float must be at least 1 bit"),
1316: 								 parser_errposition(@2)));
1317: 					else if ($2 <= 24)
1318: 						$$ = SystemTypeName("float4");
1319: 					else if ($2 <= 53)
1320: 						$$ = SystemTypeName("float8");
1321: 					else
1322: 						ereport(ERROR,
1323: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
1324: 								 errmsg("precision for type float must be less than 54 bits"),
1325: 								 parser_errposition(@2)));
1326: 				}
1327: 			| /*EMPTY*/
1328: 				{
1329: 					$$ = SystemTypeName("float4");
1330: 				}
1331: 		;
1332: 
1333: /*
1334:  * SQL bit-field data types
1335:  * The following implements BIT() and BIT VARYING().
1336:  */
1337: Bit:		BitWithLength
1338: 				{
1339: 					$$ = $1;
1340: 				}
1341: 			| BitWithoutLength
1342: 				{
1343: 					$$ = $1;
1344: 				}
1345: 		;
1346: 
1347: /* ConstBit is like Bit except "BIT" defaults to unspecified length */
1348: /* See notes for ConstCharacter, which addresses same issue for "CHAR" */
1349: ConstBit:	BitWithLength
1350: 				{
1351: 					$$ = $1;
1352: 				}
1353: 			| BitWithoutLength
1354: 				{
1355: 					$$ = $1;
1356: 					$$->typmods = NIL;
1357: 				}
1358: 		;
1359: 
1360: BitWithLength:
1361: 			BIT opt_varying '(' expr_list ')'
1362: 				{
1363: 					const char *typname;
1364: 
1365: 					typname = $2 ? "varbit" : "bit";
1366: 					$$ = SystemTypeName(typname);
1367: 					$$->typmods = $4;
1368: 					$$->location = @1;
1369: 				}
1370: 		;
1371: 
1372: BitWithoutLength:
1373: 			BIT opt_varying
1374: 				{
1375: 					/* bit defaults to bit(1), varbit to no limit */
1376: 					if ($2)
1377: 					{
1378: 						$$ = SystemTypeName("varbit");
1379: 					}
1380: 					else
1381: 					{
1382: 						$$ = SystemTypeName("bit");
1383: 						$$->typmods = list_make1(makeIntConst(1, -1));
1384: 					}
1385: 					$$->location = @1;
1386: 				}
1387: 		;
1388: 
1389: 
1390: /*
1391:  * SQL character data types
1392:  * The following implements CHAR() and VARCHAR().
1393:  */
1394: Character:  CharacterWithLength
1395: 				{
1396: 					$$ = $1;
1397: 				}
1398: 			| CharacterWithoutLength
1399: 				{
1400: 					$$ = $1;
1401: 				}
1402: 		;
1403: 
1404: ConstCharacter:  CharacterWithLength
1405: 				{
1406: 					$$ = $1;
1407: 				}
1408: 			| CharacterWithoutLength
1409: 				{
1410: 					/* Length was not specified so allow to be unrestricted.
1411: 					 * This handles problems with fixed-length (bpchar) strings
1412: 					 * which in column definitions must default to a length
1413: 					 * of one, but should not be constrained if the length
1414: 					 * was not specified.
1415: 					 */
1416: 					$$ = $1;
1417: 					$$->typmods = NIL;
1418: 				}
1419: 		;
1420: 
1421: CharacterWithLength:  character '(' Iconst ')'
1422: 				{
1423: 					$$ = SystemTypeName($1);
1424: 					$$->typmods = list_make1(makeIntConst($3, @3));
1425: 					$$->location = @1;
1426: 				}
1427: 		;
1428: 
1429: CharacterWithoutLength:	 character
1430: 				{
1431: 					$$ = SystemTypeName($1);
1432: 					/* char defaults to char(1), varchar to no limit */
1433: 					if (strcmp($1, "bpchar") == 0)
1434: 						$$->typmods = list_make1(makeIntConst(1, -1));
1435: 					$$->location = @1;
1436: 				}
1437: 		;
1438: 
1439: character:	CHARACTER opt_varying
1440: 										{ $$ = $2 ? "varchar": "bpchar"; }
1441: 			| CHAR_P opt_varying
1442: 										{ $$ = $2 ? "varchar": "bpchar"; }
1443: 			| VARCHAR
1444: 										{ $$ = "varchar"; }
1445: 			| NATIONAL CHARACTER opt_varying
1446: 										{ $$ = $3 ? "varchar": "bpchar"; }
1447: 			| NATIONAL CHAR_P opt_varying
1448: 										{ $$ = $3 ? "varchar": "bpchar"; }
1449: 			| NCHAR opt_varying
1450: 										{ $$ = $2 ? "varchar": "bpchar"; }
1451: 		;
1452: 
1453: opt_varying:
1454: 			VARYING									{ $$ = true; }
1455: 			| /*EMPTY*/								{ $$ = false; }
1456: 		;
1457: 
1458: /*
1459:  * SQL date/time types
1460:  */
1461: ConstDatetime:
1462: 			TIMESTAMP '(' Iconst ')' opt_timezone
1463: 				{
1464: 					if ($5)
1465: 						$$ = SystemTypeName("timestamptz");
1466: 					else
1467: 						$$ = SystemTypeName("timestamp");
1468: 					$$->typmods = list_make1(makeIntConst($3, @3));
1469: 					$$->location = @1;
1470: 				}
1471: 			| TIMESTAMP opt_timezone
1472: 				{
1473: 					if ($2)
1474: 						$$ = SystemTypeName("timestamptz");
1475: 					else
1476: 						$$ = SystemTypeName("timestamp");
1477: 					$$->location = @1;
1478: 				}
1479: 			| TIME '(' Iconst ')' opt_timezone
1480: 				{
1481: 					if ($5)
1482: 						$$ = SystemTypeName("timetz");
1483: 					else
1484: 						$$ = SystemTypeName("time");
1485: 					$$->typmods = list_make1(makeIntConst($3, @3));
1486: 					$$->location = @1;
1487: 				}
1488: 			| TIME opt_timezone
1489: 				{
1490: 					if ($2)
1491: 						$$ = SystemTypeName("timetz");
1492: 					else
1493: 						$$ = SystemTypeName("time");
1494: 					$$->location = @1;
1495: 				}
1496: 		;
1497: 
1498: ConstInterval:
1499: 			INTERVAL
1500: 				{
1501: 					$$ = SystemTypeName("interval");
1502: 					$$->location = @1;
1503: 				}
1504: 		;
1505: 
1506: opt_timezone:
1507: 			WITH_LA TIME ZONE						{ $$ = true; }
1508: 			| WITHOUT TIME ZONE						{ $$ = false; }
1509: 			| /*EMPTY*/								{ $$ = false; }
1510: 		;
1511: 
1512: year_keyword:
1513: 	YEAR_P | YEARS_P
1514: 
1515: month_keyword:
1516: 	MONTH_P | MONTHS_P
1517: 
1518: day_keyword:
1519: 	DAY_P | DAYS_P
1520: 
1521: hour_keyword:
1522: 	HOUR_P | HOURS_P
1523: 
1524: minute_keyword:
1525: 	MINUTE_P | MINUTES_P
1526: 
1527: second_keyword:
1528: 	SECOND_P | SECONDS_P
1529: 
1530: millisecond_keyword:
1531: 	MILLISECOND_P | MILLISECONDS_P
1532: 
1533: microsecond_keyword:
1534: 	MICROSECOND_P | MICROSECONDS_P
1535: 
1536: opt_interval:
1537: 			year_keyword
1538: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(YEAR), @1)); }
1539: 			| month_keyword
1540: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MONTH), @1)); }
1541: 			| day_keyword
1542: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(DAY), @1)); }
1543: 			| hour_keyword
1544: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR), @1)); }
1545: 			| minute_keyword
1546: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), @1)); }
1547: 			| second_keyword
1548: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(SECOND), @1)); }
1549: 			| millisecond_keyword
1550: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), @1)); }
1551: 			| microsecond_keyword
1552: 				{ $$ = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), @1)); }
1553: 			| year_keyword TO month_keyword
1554: 				{
1555: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
1556: 												 INTERVAL_MASK(MONTH), @1));
1557: 				}
1558: 			| day_keyword TO hour_keyword
1559: 				{
1560: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1561: 												 INTERVAL_MASK(HOUR), @1));
1562: 				}
1563: 			| day_keyword TO minute_keyword
1564: 				{
1565: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1566: 												 INTERVAL_MASK(HOUR) |
1567: 												 INTERVAL_MASK(MINUTE), @1));
1568: 				}
1569: 			| day_keyword TO second_keyword
1570: 				{
1571: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
1572: 												 INTERVAL_MASK(HOUR) |
1573: 												 INTERVAL_MASK(MINUTE) |
1574: 												 INTERVAL_MASK(SECOND), @1));
1575: 				}
1576: 			| hour_keyword TO minute_keyword
1577: 				{
1578: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
1579: 												 INTERVAL_MASK(MINUTE), @1));
1580: 				}
1581: 			| hour_keyword TO second_keyword
1582: 				{
1583: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
1584: 												 INTERVAL_MASK(MINUTE) |
1585: 												 INTERVAL_MASK(SECOND), @1));
1586: 				}
1587: 			| minute_keyword TO second_keyword
1588: 				{
1589: 					$$ = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
1590: 												 INTERVAL_MASK(SECOND), @1));
1591: 				}
1592: 			| /*EMPTY*/
1593: 				{ $$ = NIL; }
1594: 		;
1595: 
1596: /*****************************************************************************
1597:  *
1598:  *	expression grammar
1599:  *
1600:  *****************************************************************************/
1601: 
1602: /*
1603:  * General expressions
1604:  * This is the heart of the expression syntax.
1605:  *
1606:  * We have two expression types: a_expr is the unrestricted kind, and
1607:  * b_expr is a subset that must be used in some places to avoid shift/reduce
1608:  * conflicts.  For example, we can't do BETWEEN as "BETWEEN a_expr AND a_expr"
1609:  * because that use of AND conflicts with AND as a boolean operator.  So,
1610:  * b_expr is used in BETWEEN and we remove boolean keywords from b_expr.
1611:  *
1612:  * Note that '(' a_expr ')' is a b_expr, so an unrestricted expression can
1613:  * always be used by surrounding it with parens.
1614:  *
1615:  * c_expr is all the productions that are common to a_expr and b_expr;
1616:  * it's factored out just to eliminate redundant coding.
1617:  *
1618:  * Be careful of productions involving more than one terminal token.
1619:  * By default, bison will assign such productions the precedence of their
1620:  * last terminal, but in nearly all cases you want it to be the precedence
1621:  * of the first terminal instead; otherwise you will not get the behavior
1622:  * you expect!  So we use %prec annotations freely to set precedences.
1623:  */
1624: a_expr:		c_expr									{ $$ = $1; }
1625: 			|
1626: 			a_expr TYPECAST Typename
1627: 					{ $$ = makeTypeCast($1, $3, 0, @2); }
1628: 			| a_expr COLLATE any_name
1629: 				{
1630: 					PGCollateClause *n = makeNode(PGCollateClause);
1631: 					n->arg = $1;
1632: 					n->collname = $3;
1633: 					n->location = @2;
1634: 					$$ = (PGNode *) n;
1635: 				}
1636: 			| a_expr AT TIME ZONE a_expr			%prec AT
1637: 				{
1638: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
1639: 											   list_make2($5, $1),
1640: 											   @2);
1641: 				}
1642: 		/*
1643: 		 * These operators must be called out explicitly in order to make use
1644: 		 * of bison's automatic operator-precedence handling.  All other
1645: 		 * operator names are handled by the generic productions using "Op",
1646: 		 * below; and all those operators will have the same precedence.
1647: 		 *
1648: 		 * If you add more explicitly-known operators, be sure to add them
1649: 		 * also to b_expr and to the MathOp list below.
1650: 		 */
1651: 			| '+' a_expr					%prec UMINUS
1652: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
1653: 			| '-' a_expr					%prec UMINUS
1654: 				{ $$ = doNegate($2, @1); }
1655: 			| a_expr '+' a_expr
1656: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", $1, $3, @2); }
1657: 			| a_expr '-' a_expr
1658: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", $1, $3, @2); }
1659: 			| a_expr '*' a_expr
1660: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", $1, $3, @2); }
1661: 			| a_expr '/' a_expr
1662: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", $1, $3, @2); }
1663: 			| a_expr '%' a_expr
1664: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", $1, $3, @2); }
1665: 			| a_expr '^' a_expr
1666: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", $1, $3, @2); }
1667: 			| a_expr '<' a_expr
1668: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", $1, $3, @2); }
1669: 			| a_expr '>' a_expr
1670: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", $1, $3, @2); }
1671: 			| a_expr '=' a_expr
1672: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", $1, $3, @2); }
1673: 			| a_expr LESS_EQUALS a_expr
1674: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", $1, $3, @2); }
1675: 			| a_expr GREATER_EQUALS a_expr
1676: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", $1, $3, @2); }
1677: 			| a_expr NOT_EQUALS a_expr
1678: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", $1, $3, @2); }
1679: 
1680: 			| a_expr qual_Op a_expr				%prec Op
1681: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, $3, @2); }
1682: 			| qual_Op a_expr					%prec Op
1683: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $1, NULL, $2, @1); }
1684: 			| a_expr qual_Op					%prec POSTFIXOP
1685: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, NULL, @2); }
1686: 
1687: 			| a_expr AND a_expr
1688: 				{ $$ = makeAndExpr($1, $3, @2); }
1689: 			| a_expr OR a_expr
1690: 				{ $$ = makeOrExpr($1, $3, @2); }
1691: 			| NOT a_expr
1692: 				{ $$ = makeNotExpr($2, @1); }
1693: 			| NOT_LA a_expr						%prec NOT
1694: 				{ $$ = makeNotExpr($2, @1); }
1695: 
1696: 			| a_expr GLOB a_expr %prec GLOB
1697: 				{
1698: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
1699: 												   $1, $3, @2);
1700: 				}
1701: 			| a_expr LIKE a_expr
1702: 				{
1703: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
1704: 												   $1, $3, @2);
1705: 				}
1706: 			| a_expr LIKE a_expr ESCAPE a_expr					%prec LIKE
1707: 				{
1708: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
1709: 											   list_make3($1, $3, $5),
1710: 											   @2);
1711: 					$$ = (PGNode *) n;
1712: 				}
1713: 			| a_expr NOT_LA LIKE a_expr							%prec NOT_LA
1714: 				{
1715: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
1716: 												   $1, $4, @2);
1717: 				}
1718: 			| a_expr NOT_LA LIKE a_expr ESCAPE a_expr			%prec NOT_LA
1719: 				{
1720: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
1721: 											   list_make3($1, $4, $6),
1722: 											   @2);
1723: 					$$ = (PGNode *) n;
1724: 				}
1725: 			| a_expr ILIKE a_expr
1726: 				{
1727: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
1728: 												   $1, $3, @2);
1729: 				}
1730: 			| a_expr ILIKE a_expr ESCAPE a_expr					%prec ILIKE
1731: 				{
1732: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
1733: 											   list_make2($3, $5),
1734: 											   @2);
1735: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
1736: 												   $1, (PGNode *) n, @2);
1737: 				}
1738: 			| a_expr NOT_LA ILIKE a_expr						%prec NOT_LA
1739: 				{
1740: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
1741: 												   $1, $4, @2);
1742: 				}
1743: 			| a_expr NOT_LA ILIKE a_expr ESCAPE a_expr			%prec NOT_LA
1744: 				{
1745: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
1746: 											   list_make2($4, $6),
1747: 											   @2);
1748: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
1749: 												   $1, (PGNode *) n, @2);
1750: 				}
1751: 
1752: 			| a_expr SIMILAR TO a_expr							%prec SIMILAR
1753: 				{
1754: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1755: 											   list_make2($4, makeNullAConst(-1)),
1756: 											   @2);
1757: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
1758: 												   $1, (PGNode *) n, @2);
1759: 				}
1760: 			| a_expr SIMILAR TO a_expr ESCAPE a_expr			%prec SIMILAR
1761: 				{
1762: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1763: 											   list_make2($4, $6),
1764: 											   @2);
1765: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
1766: 												   $1, (PGNode *) n, @2);
1767: 				}
1768: 			| a_expr NOT_LA SIMILAR TO a_expr					%prec NOT_LA
1769: 				{
1770: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1771: 											   list_make2($5, makeNullAConst(-1)),
1772: 											   @2);
1773: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
1774: 												   $1, (PGNode *) n, @2);
1775: 				}
1776: 			| a_expr NOT_LA SIMILAR TO a_expr ESCAPE a_expr		%prec NOT_LA
1777: 				{
1778: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
1779: 											   list_make2($5, $7),
1780: 											   @2);
1781: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
1782: 												   $1, (PGNode *) n, @2);
1783: 				}
1784: 
1785: 			/* PGNullTest clause
1786: 			 * Define SQL-style Null test clause.
1787: 			 * Allow two forms described in the standard:
1788: 			 *	a IS NULL
1789: 			 *	a IS NOT NULL
1790: 			 * Allow two SQL extensions
1791: 			 *	a ISNULL
1792: 			 *	a NOTNULL
1793: 			 */
1794: 			| a_expr IS NULL_P							%prec IS
1795: 				{
1796: 					PGNullTest *n = makeNode(PGNullTest);
1797: 					n->arg = (PGExpr *) $1;
1798: 					n->nulltesttype = PG_IS_NULL;
1799: 					n->location = @2;
1800: 					$$ = (PGNode *)n;
1801: 				}
1802: 			| a_expr ISNULL
1803: 				{
1804: 					PGNullTest *n = makeNode(PGNullTest);
1805: 					n->arg = (PGExpr *) $1;
1806: 					n->nulltesttype = PG_IS_NULL;
1807: 					n->location = @2;
1808: 					$$ = (PGNode *)n;
1809: 				}
1810: 			| a_expr IS NOT NULL_P						%prec IS
1811: 				{
1812: 					PGNullTest *n = makeNode(PGNullTest);
1813: 					n->arg = (PGExpr *) $1;
1814: 					n->nulltesttype = IS_NOT_NULL;
1815: 					n->location = @2;
1816: 					$$ = (PGNode *)n;
1817: 				}
1818: 			| a_expr NOT NULL_P
1819: 				{
1820: 					PGNullTest *n = makeNode(PGNullTest);
1821: 					n->arg = (PGExpr *) $1;
1822: 					n->nulltesttype = IS_NOT_NULL;
1823: 					n->location = @2;
1824: 					$$ = (PGNode *)n;
1825: 				}
1826: 			| a_expr NOTNULL
1827: 				{
1828: 					PGNullTest *n = makeNode(PGNullTest);
1829: 					n->arg = (PGExpr *) $1;
1830: 					n->nulltesttype = IS_NOT_NULL;
1831: 					n->location = @2;
1832: 					$$ = (PGNode *)n;
1833: 				}
1834: 			| row {
1835: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), $1, @1);
1836: 				$$ = (PGNode *) n;
1837: 			}
1838: 			| '{' dict_arguments '}' {
1839: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), $2, @2);
1840: 				$$ = (PGNode *) n;
1841: 			}
1842: 			| '[' opt_expr_list ']' {
1843: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), $2, @2);
1844: 				$$ = (PGNode *) n;
1845: 			}
1846: 			| row LAMBDA_ARROW a_expr
1847: 			{
1848: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
1849: 				n->parameters = $1;
1850: 				n->function = $3;
1851: 				n->location = @2;
1852: 				$$ = (PGNode *) n;
1853: 			}
1854: 			| columnref LAMBDA_ARROW a_expr
1855: 			{
1856: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
1857: 				n->parameters = list_make1($1);
1858: 				n->function = $3;
1859: 				n->location = @2;
1860: 				$$ = (PGNode *) n;
1861: 			}
1862: 			| row OVERLAPS row
1863: 				{
1864: 					if (list_length($1) != 2)
1865: 						ereport(ERROR,
1866: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
1867: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
1868: 								 parser_errposition(@1)));
1869: 					if (list_length($3) != 2)
1870: 						ereport(ERROR,
1871: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
1872: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
1873: 								 parser_errposition(@3)));
1874: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
1875: 											   list_concat($1, $3),
1876: 											   @2);
1877: 				}
1878: 			| a_expr IS TRUE_P							%prec IS
1879: 				{
1880: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1881: 					b->arg = (PGExpr *) $1;
1882: 					b->booltesttype = PG_IS_TRUE;
1883: 					b->location = @2;
1884: 					$$ = (PGNode *)b;
1885: 				}
1886: 			| a_expr IS NOT TRUE_P						%prec IS
1887: 				{
1888: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1889: 					b->arg = (PGExpr *) $1;
1890: 					b->booltesttype = IS_NOT_TRUE;
1891: 					b->location = @2;
1892: 					$$ = (PGNode *)b;
1893: 				}
1894: 			| a_expr IS FALSE_P							%prec IS
1895: 				{
1896: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1897: 					b->arg = (PGExpr *) $1;
1898: 					b->booltesttype = IS_FALSE;
1899: 					b->location = @2;
1900: 					$$ = (PGNode *)b;
1901: 				}
1902: 			| a_expr IS NOT FALSE_P						%prec IS
1903: 				{
1904: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1905: 					b->arg = (PGExpr *) $1;
1906: 					b->booltesttype = IS_NOT_FALSE;
1907: 					b->location = @2;
1908: 					$$ = (PGNode *)b;
1909: 				}
1910: 			| a_expr IS UNKNOWN							%prec IS
1911: 				{
1912: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1913: 					b->arg = (PGExpr *) $1;
1914: 					b->booltesttype = IS_UNKNOWN;
1915: 					b->location = @2;
1916: 					$$ = (PGNode *)b;
1917: 				}
1918: 			| a_expr IS NOT UNKNOWN						%prec IS
1919: 				{
1920: 					PGBooleanTest *b = makeNode(PGBooleanTest);
1921: 					b->arg = (PGExpr *) $1;
1922: 					b->booltesttype = IS_NOT_UNKNOWN;
1923: 					b->location = @2;
1924: 					$$ = (PGNode *)b;
1925: 				}
1926: 			| a_expr IS DISTINCT FROM a_expr			%prec IS
1927: 				{
1928: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", $1, $5, @2);
1929: 				}
1930: 			| a_expr IS NOT DISTINCT FROM a_expr		%prec IS
1931: 				{
1932: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", $1, $6, @2);
1933: 				}
1934: 			| a_expr IS OF '(' type_list ')'			%prec IS
1935: 				{
1936: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", $1, (PGNode *) $5, @2);
1937: 				}
1938: 			| a_expr IS NOT OF '(' type_list ')'		%prec IS
1939: 				{
1940: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", $1, (PGNode *) $6, @2);
1941: 				}
1942: 			| a_expr BETWEEN opt_asymmetric b_expr AND a_expr		%prec BETWEEN
1943: 				{
1944: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
1945: 												   "BETWEEN",
1946: 												   $1,
1947: 												   (PGNode *) list_make2($4, $6),
1948: 												   @2);
1949: 				}
1950: 			| a_expr NOT_LA BETWEEN opt_asymmetric b_expr AND a_expr %prec NOT_LA
1951: 				{
1952: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
1953: 												   "NOT BETWEEN",
1954: 												   $1,
1955: 												   (PGNode *) list_make2($5, $7),
1956: 												   @2);
1957: 				}
1958: 			| a_expr BETWEEN SYMMETRIC b_expr AND a_expr			%prec BETWEEN
1959: 				{
1960: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
1961: 												   "BETWEEN SYMMETRIC",
1962: 												   $1,
1963: 												   (PGNode *) list_make2($4, $6),
1964: 												   @2);
1965: 				}
1966: 			| a_expr NOT_LA BETWEEN SYMMETRIC b_expr AND a_expr		%prec NOT_LA
1967: 				{
1968: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
1969: 												   "NOT BETWEEN SYMMETRIC",
1970: 												   $1,
1971: 												   (PGNode *) list_make2($5, $7),
1972: 												   @2);
1973: 				}
1974: 			| a_expr IN_P in_expr
1975: 				{
1976: 					/* in_expr returns a PGSubLink or a list of a_exprs */
1977: 					if (IsA($3, PGSubLink))
1978: 					{
1979: 						/* generate foo = ANY (subquery) */
1980: 						PGSubLink *n = (PGSubLink *) $3;
1981: 						n->subLinkType = PG_ANY_SUBLINK;
1982: 						n->subLinkId = 0;
1983: 						n->testexpr = $1;
1984: 						n->operName = NIL;		/* show it's IN not = ANY */
1985: 						n->location = @2;
1986: 						$$ = (PGNode *)n;
1987: 					}
1988: 					else
1989: 					{
1990: 						/* generate scalar IN expression */
1991: 						$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", $1, $3, @2);
1992: 					}
1993: 				}
1994: 			| a_expr NOT_LA IN_P in_expr						%prec NOT_LA
1995: 				{
1996: 					/* in_expr returns a PGSubLink or a list of a_exprs */
1997: 					if (IsA($4, PGSubLink))
1998: 					{
1999: 						/* generate NOT (foo = ANY (subquery)) */
2000: 						/* Make an = ANY node */
2001: 						PGSubLink *n = (PGSubLink *) $4;
2002: 						n->subLinkType = PG_ANY_SUBLINK;
2003: 						n->subLinkId = 0;
2004: 						n->testexpr = $1;
2005: 						n->operName = NIL;		/* show it's IN not = ANY */
2006: 						n->location = @2;
2007: 						/* Stick a NOT on top; must have same parse location */
2008: 						$$ = makeNotExpr((PGNode *) n, @2);
2009: 					}
2010: 					else
2011: 					{
2012: 						/* generate scalar NOT IN expression */
2013: 						$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", $1, $4, @2);
2014: 					}
2015: 				}
2016: 			| a_expr subquery_Op sub_type select_with_parens	%prec Op
2017: 				{
2018: 					PGSubLink *n = makeNode(PGSubLink);
2019: 					n->subLinkType = $3;
2020: 					n->subLinkId = 0;
2021: 					n->testexpr = $1;
2022: 					n->operName = $2;
2023: 					n->subselect = $4;
2024: 					n->location = @2;
2025: 					$$ = (PGNode *)n;
2026: 				}
2027: 			| a_expr subquery_Op sub_type '(' a_expr ')'		%prec Op
2028: 				{
2029: 					if ($3 == PG_ANY_SUBLINK)
2030: 						$$ = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, $2, $1, $5, @2);
2031: 					else
2032: 						$$ = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, $2, $1, $5, @2);
2033: 				}
2034: 			| DEFAULT
2035: 				{
2036: 					/*
2037: 					 * The SQL spec only allows DEFAULT in "contextually typed
2038: 					 * expressions", but for us, it's easier to allow it in
2039: 					 * any a_expr and then throw error during parse analysis
2040: 					 * if it's in an inappropriate context.  This way also
2041: 					 * lets us say something smarter than "syntax error".
2042: 					 */
2043: 					PGSetToDefault *n = makeNode(PGSetToDefault);
2044: 					/* parse analysis will fill in the rest */
2045: 					n->location = @1;
2046: 					$$ = (PGNode *)n;
2047: 				}
2048: 			| ARRAY '[' opt_expr_list ']' {
2049: 				PGList *func_name = list_make1(makeString("construct_array"));
2050: 				PGFuncCall *n = makeFuncCall(func_name, $3, @1);
2051: 				$$ = (PGNode *) n;
2052: 			}
2053: 		;
2054: 
2055: /*
2056:  * Restricted expressions
2057:  *
2058:  * b_expr is a subset of the complete expression syntax defined by a_expr.
2059:  *
2060:  * Presently, AND, NOT, IS, and IN are the a_expr keywords that would
2061:  * cause trouble in the places where b_expr is used.  For simplicity, we
2062:  * just eliminate all the boolean-keyword-operator productions from b_expr.
2063:  */
2064: b_expr:		c_expr
2065: 				{ $$ = $1; }
2066: 			| b_expr TYPECAST Typename
2067: 				{ $$ = makeTypeCast($1, $3, 0, @2); }
2068: 			| '+' b_expr					%prec UMINUS
2069: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, $2, @1); }
2070: 			| '-' b_expr					%prec UMINUS
2071: 				{ $$ = doNegate($2, @1); }
2072: 			| b_expr '+' b_expr
2073: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", $1, $3, @2); }
2074: 			| b_expr '-' b_expr
2075: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", $1, $3, @2); }
2076: 			| b_expr '*' b_expr
2077: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", $1, $3, @2); }
2078: 			| b_expr '/' b_expr
2079: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", $1, $3, @2); }
2080: 			| b_expr '%' b_expr
2081: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", $1, $3, @2); }
2082: 			| b_expr '^' b_expr
2083: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", $1, $3, @2); }
2084: 			| b_expr '<' b_expr
2085: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", $1, $3, @2); }
2086: 			| b_expr '>' b_expr
2087: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", $1, $3, @2); }
2088: 			| b_expr '=' b_expr
2089: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", $1, $3, @2); }
2090: 			| b_expr LESS_EQUALS b_expr
2091: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", $1, $3, @2); }
2092: 			| b_expr GREATER_EQUALS b_expr
2093: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", $1, $3, @2); }
2094: 			| b_expr NOT_EQUALS b_expr
2095: 				{ $$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", $1, $3, @2); }
2096: 			| b_expr qual_Op b_expr				%prec Op
2097: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, $3, @2); }
2098: 			| qual_Op b_expr					%prec Op
2099: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $1, NULL, $2, @1); }
2100: 			| b_expr qual_Op					%prec POSTFIXOP
2101: 				{ $$ = (PGNode *) makeAExpr(PG_AEXPR_OP, $2, $1, NULL, @2); }
2102: 			| b_expr IS DISTINCT FROM b_expr		%prec IS
2103: 				{
2104: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", $1, $5, @2);
2105: 				}
2106: 			| b_expr IS NOT DISTINCT FROM b_expr	%prec IS
2107: 				{
2108: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", $1, $6, @2);
2109: 				}
2110: 			| b_expr IS OF '(' type_list ')'		%prec IS
2111: 				{
2112: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", $1, (PGNode *) $5, @2);
2113: 				}
2114: 			| b_expr IS NOT OF '(' type_list ')'	%prec IS
2115: 				{
2116: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", $1, (PGNode *) $6, @2);
2117: 				}
2118: 		;
2119: 
2120: /*
2121:  * Productions that can be used in both a_expr and b_expr.
2122:  *
2123:  * Note: productions that refer recursively to a_expr or b_expr mostly
2124:  * cannot appear here.	However, it's OK to refer to a_exprs that occur
2125:  * inside parentheses, such as function arguments; that cannot introduce
2126:  * ambiguity to the b_expr syntax.
2127:  */
2128: c_expr:		columnref								{ $$ = $1; }
2129: 			| AexprConst							{ $$ = $1; }
2130: 			| '#' ICONST
2131: 				{
2132: 					PGPositionalReference *n = makeNode(PGPositionalReference);
2133: 					n->position = $2;
2134: 					n->location = @1;
2135: 					$$ = (PGNode *) n;
2136: 				}
2137: 			| '?' opt_indirection
2138: 				{
2139: 					if ($2)
2140: 					{
2141: 						PGAIndirection *n = makeNode(PGAIndirection);
2142: 						n->arg = makeParamRef(0, @1);
2143: 						n->indirection = check_indirection($2, yyscanner);
2144: 						$$ = (PGNode *) n;
2145: 					}
2146: 					else
2147: 						$$ = makeParamRef(0, @1);
2148: 				}
2149: 			| PARAM opt_indirection
2150: 				{
2151: 					PGParamRef *p = makeNode(PGParamRef);
2152: 					p->number = $1;
2153: 					p->location = @1;
2154: 					if ($2)
2155: 					{
2156: 						PGAIndirection *n = makeNode(PGAIndirection);
2157: 						n->arg = (PGNode *) p;
2158: 						n->indirection = check_indirection($2, yyscanner);
2159: 						$$ = (PGNode *) n;
2160: 					}
2161: 					else
2162: 						$$ = (PGNode *) p;
2163: 				}
2164: 			| '(' a_expr ')' opt_indirection
2165: 				{
2166: 					if ($4)
2167: 					{
2168: 						PGAIndirection *n = makeNode(PGAIndirection);
2169: 						n->arg = $2;
2170: 						n->indirection = check_indirection($4, yyscanner);
2171: 						$$ = (PGNode *)n;
2172: 					}
2173: 					else
2174: 						$$ = $2;
2175: 				}
2176: 			| case_expr
2177: 				{ $$ = $1; }
2178: 			| func_expr opt_indirection
2179: 				{
2180: 					if ($2) {
2181: 						PGAIndirection *n = makeNode(PGAIndirection);
2182: 						n->arg = $1;
2183: 						n->indirection = check_indirection($2, yyscanner);
2184: 						$$ = (PGNode *)n;
2185: 					}
2186: 					else {
2187: 						$$ = $1;
2188: 					}
2189: 				}
2190: 			| select_with_parens			%prec UMINUS
2191: 				{
2192: 					PGSubLink *n = makeNode(PGSubLink);
2193: 					n->subLinkType = PG_EXPR_SUBLINK;
2194: 					n->subLinkId = 0;
2195: 					n->testexpr = NULL;
2196: 					n->operName = NIL;
2197: 					n->subselect = $1;
2198: 					n->location = @1;
2199: 					$$ = (PGNode *)n;
2200: 				}
2201: 			| select_with_parens indirection
2202: 				{
2203: 					/*
2204: 					 * Because the select_with_parens nonterminal is designed
2205: 					 * to "eat" as many levels of parens as possible, the
2206: 					 * '(' a_expr ')' opt_indirection production above will
2207: 					 * fail to match a sub-SELECT with indirection decoration;
2208: 					 * the sub-SELECT won't be regarded as an a_expr as long
2209: 					 * as there are parens around it.  To support applying
2210: 					 * subscripting or field selection to a sub-SELECT result,
2211: 					 * we need this redundant-looking production.
2212: 					 */
2213: 					PGSubLink *n = makeNode(PGSubLink);
2214: 					PGAIndirection *a = makeNode(PGAIndirection);
2215: 					n->subLinkType = PG_EXPR_SUBLINK;
2216: 					n->subLinkId = 0;
2217: 					n->testexpr = NULL;
2218: 					n->operName = NIL;
2219: 					n->subselect = $1;
2220: 					n->location = @1;
2221: 					a->arg = (PGNode *)n;
2222: 					a->indirection = check_indirection($2, yyscanner);
2223: 					$$ = (PGNode *)a;
2224: 				}
2225: 			| EXISTS select_with_parens
2226: 				{
2227: 					PGSubLink *n = makeNode(PGSubLink);
2228: 					n->subLinkType = PG_EXISTS_SUBLINK;
2229: 					n->subLinkId = 0;
2230: 					n->testexpr = NULL;
2231: 					n->operName = NIL;
2232: 					n->subselect = $2;
2233: 					n->location = @1;
2234: 					$$ = (PGNode *)n;
2235: 				}
2236: 		;
2237: 
2238: func_application: func_name '(' ')'
2239: 				{
2240: 					$$ = (PGNode *) makeFuncCall($1, NIL, @1);
2241: 				}
2242: 			| func_name '(' func_arg_list opt_sort_clause ')'
2243: 				{
2244: 					PGFuncCall *n = makeFuncCall($1, $3, @1);
2245: 					n->agg_order = $4;
2246: 					$$ = (PGNode *)n;
2247: 				}
2248: 			| func_name '(' VARIADIC func_arg_expr opt_sort_clause ')'
2249: 				{
2250: 					PGFuncCall *n = makeFuncCall($1, list_make1($4), @1);
2251: 					n->func_variadic = true;
2252: 					n->agg_order = $5;
2253: 					$$ = (PGNode *)n;
2254: 				}
2255: 			| func_name '(' func_arg_list ',' VARIADIC func_arg_expr opt_sort_clause ')'
2256: 				{
2257: 					PGFuncCall *n = makeFuncCall($1, lappend($3, $6), @1);
2258: 					n->func_variadic = true;
2259: 					n->agg_order = $7;
2260: 					$$ = (PGNode *)n;
2261: 				}
2262: 			| func_name '(' ALL func_arg_list opt_sort_clause ')'
2263: 				{
2264: 					PGFuncCall *n = makeFuncCall($1, $4, @1);
2265: 					n->agg_order = $5;
2266: 					/* Ideally we'd mark the PGFuncCall node to indicate
2267: 					 * "must be an aggregate", but there's no provision
2268: 					 * for that in PGFuncCall at the moment.
2269: 					 */
2270: 					$$ = (PGNode *)n;
2271: 				}
2272: 			| func_name '(' DISTINCT func_arg_list opt_sort_clause ')'
2273: 				{
2274: 					PGFuncCall *n = makeFuncCall($1, $4, @1);
2275: 					n->agg_order = $5;
2276: 					n->agg_distinct = true;
2277: 					$$ = (PGNode *)n;
2278: 				}
2279: 			| func_name '(' '*' ')'
2280: 				{
2281: 					/*
2282: 					 * We consider AGGREGATE(*) to invoke a parameterless
2283: 					 * aggregate.  This does the right thing for COUNT(*),
2284: 					 * and there are no other aggregates in SQL that accept
2285: 					 * '*' as parameter.
2286: 					 *
2287: 					 * The PGFuncCall node is also marked agg_star = true,
2288: 					 * so that later processing can detect what the argument
2289: 					 * really was.
2290: 					 */
2291: 					PGFuncCall *n = makeFuncCall($1, NIL, @1);
2292: 					n->agg_star = true;
2293: 					$$ = (PGNode *)n;
2294: 				}
2295: 		;
2296: 
2297: 
2298: /*
2299:  * func_expr and its cousin func_expr_windowless are split out from c_expr just
2300:  * so that we have classifications for "everything that is a function call or
2301:  * looks like one".  This isn't very important, but it saves us having to
2302:  * document which variants are legal in places like "FROM function()" or the
2303:  * backwards-compatible functional-index syntax for CREATE INDEX.
2304:  * (Note that many of the special SQL functions wouldn't actually make any
2305:  * sense as functional index entries, but we ignore that consideration here.)
2306:  */
2307: func_expr: func_application within_group_clause filter_clause over_clause
2308: 				{
2309: 					PGFuncCall *n = (PGFuncCall *) $1;
2310: 					/*
2311: 					 * The order clause for WITHIN GROUP and the one for
2312: 					 * plain-aggregate ORDER BY share a field, so we have to
2313: 					 * check here that at most one is present.  We also check
2314: 					 * for DISTINCT and VARIADIC here to give a better error
2315: 					 * location.  Other consistency checks are deferred to
2316: 					 * parse analysis.
2317: 					 */
2318: 					if ($2 != NIL)
2319: 					{
2320: 						if (n->agg_order != NIL)
2321: 							ereport(ERROR,
2322: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2323: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
2324: 									 parser_errposition(@2)));
2325: 						if (n->agg_distinct)
2326: 							ereport(ERROR,
2327: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2328: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
2329: 									 parser_errposition(@2)));
2330: 						if (n->func_variadic)
2331: 							ereport(ERROR,
2332: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
2333: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
2334: 									 parser_errposition(@2)));
2335: 						n->agg_order = $2;
2336: 						n->agg_within_group = true;
2337: 					}
2338: 					n->agg_filter = $3;
2339: 					n->over = $4;
2340: 					$$ = (PGNode *) n;
2341: 				}
2342: 			| func_expr_common_subexpr
2343: 				{ $$ = $1; }
2344: 		;
2345: 
2346: /*
2347:  * As func_expr but does not accept WINDOW functions directly
2348:  * (but they can still be contained in arguments for functions etc).
2349:  * Use this when window expressions are not allowed, where needed to
2350:  * disambiguate the grammar (e.g. in CREATE INDEX).
2351:  */
2352: func_expr_windowless:
2353: 			func_application						{ $$ = $1; }
2354: 			| func_expr_common_subexpr				{ $$ = $1; }
2355: 		;
2356: 
2357: /*
2358:  * Special expressions that are considered to be functions.
2359:  */
2360: func_expr_common_subexpr:
2361: 			COLLATION FOR '(' a_expr ')'
2362: 				{
2363: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
2364: 											   list_make1($4),
2365: 											   @1);
2366: 				}
2367: 			| CURRENT_DATE
2368: 				{
2369: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, @1);
2370: 				}
2371: 			| CURRENT_TIME
2372: 				{
2373: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, @1);
2374: 				}
2375: 			| CURRENT_TIME '(' Iconst ')'
2376: 				{
2377: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, $3, @1);
2378: 				}
2379: 			| CURRENT_TIMESTAMP
2380: 				{
2381: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, @1);
2382: 				}
2383: 			| CURRENT_TIMESTAMP '(' Iconst ')'
2384: 				{
2385: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, $3, @1);
2386: 				}
2387: 			| LOCALTIME
2388: 				{
2389: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, @1);
2390: 				}
2391: 			| LOCALTIME '(' Iconst ')'
2392: 				{
2393: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, $3, @1);
2394: 				}
2395: 			| LOCALTIMESTAMP
2396: 				{
2397: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, @1);
2398: 				}
2399: 			| LOCALTIMESTAMP '(' Iconst ')'
2400: 				{
2401: 					$$ = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, $3, @1);
2402: 				}
2403: 			| CURRENT_ROLE
2404: 				{
2405: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, @1);
2406: 				}
2407: 			| CURRENT_USER
2408: 				{
2409: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, @1);
2410: 				}
2411: 			| SESSION_USER
2412: 				{
2413: 					$$ = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, @1);
2414: 				}
2415: 			| USER
2416: 				{
2417: 					$$ = makeSQLValueFunction(PG_SVFOP_USER, -1, @1);
2418: 				}
2419: 			| CURRENT_CATALOG
2420: 				{
2421: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, @1);
2422: 				}
2423: 			| CURRENT_SCHEMA
2424: 				{
2425: 					$$ = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, @1);
2426: 				}
2427: 			| CAST '(' a_expr AS Typename ')'
2428: 				{ $$ = makeTypeCast($3, $5, 0, @1); }
2429: 			| TRY_CAST '(' a_expr AS Typename ')'
2430: 				{ $$ = makeTypeCast($3, $5, 1, @1); }
2431: 			| EXTRACT '(' extract_list ')'
2432: 				{
2433: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("date_part"), $3, @1);
2434: 				}
2435: 			| OVERLAY '(' overlay_list ')'
2436: 				{
2437: 					/* overlay(A PLACING B FROM C FOR D) is converted to
2438: 					 * overlay(A, B, C, D)
2439: 					 * overlay(A PLACING B FROM C) is converted to
2440: 					 * overlay(A, B, C)
2441: 					 */
2442: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("overlay"), $3, @1);
2443: 				}
2444: 			| POSITION '(' position_list ')'
2445: 				{
2446: 					/* position(A in B) is converted to position(B, A) */
2447: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("position"), $3, @1);
2448: 				}
2449: 			| SUBSTRING '(' substr_list ')'
2450: 				{
2451: 					/* substring(A from B for C) is converted to
2452: 					 * substring(A, B, C) - thomas 2000-11-28
2453: 					 */
2454: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("substring"), $3, @1);
2455: 				}
2456: 			| TREAT '(' a_expr AS Typename ')'
2457: 				{
2458: 					/* TREAT(expr AS target) converts expr of a particular type to target,
2459: 					 * which is defined to be a subtype of the original expression.
2460: 					 * In SQL99, this is intended for use with structured UDTs,
2461: 					 * but let's make this a generally useful form allowing stronger
2462: 					 * coercions than are handled by implicit casting.
2463: 					 *
2464: 					 * Convert SystemTypeName() to SystemFuncName() even though
2465: 					 * at the moment they result in the same thing.
2466: 					 */
2467: 					$$ = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast($5->names))->val.str),
2468: 												list_make1($3),
2469: 												@1);
2470: 				}
2471: 			| TRIM '(' BOTH trim_list ')'
2472: 				{
2473: 					/* various trim expressions are defined in SQL
2474: 					 * - thomas 1997-07-19
2475: 					 */
2476: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("trim"), $4, @1);
2477: 				}
2478: 			| TRIM '(' LEADING trim_list ')'
2479: 				{
2480: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), $4, @1);
2481: 				}
2482: 			| TRIM '(' TRAILING trim_list ')'
2483: 				{
2484: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), $4, @1);
2485: 				}
2486: 			| TRIM '(' trim_list ')'
2487: 				{
2488: 					$$ = (PGNode *) makeFuncCall(SystemFuncName("trim"), $3, @1);
2489: 				}
2490: 			| NULLIF '(' a_expr ',' a_expr ')'
2491: 				{
2492: 					$$ = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", $3, $5, @1);
2493: 				}
2494: 			| COALESCE '(' expr_list ')'
2495: 				{
2496: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
2497: 					c->args = $3;
2498: 					c->location = @1;
2499: 					$$ = (PGNode *)c;
2500: 				}
2501: 		;
2502: 
2503: /* We allow several variants for SQL and other compatibility. */
2504: /*
2505:  * Aggregate decoration clauses
2506:  */
2507: within_group_clause:
2508: 			WITHIN GROUP_P '(' sort_clause ')'		{ $$ = $4; }
2509: 			| /*EMPTY*/								{ $$ = NIL; }
2510: 		;
2511: 
2512: filter_clause:
2513: 			FILTER '(' WHERE a_expr ')'				{ $$ = $4; }
2514: 			| /*EMPTY*/								{ $$ = NULL; }
2515: 		;
2516: 
2517: 
2518: /*
2519:  * Window Definitions
2520:  */
2521: window_clause:
2522: 			WINDOW window_definition_list			{ $$ = $2; }
2523: 			| /*EMPTY*/								{ $$ = NIL; }
2524: 		;
2525: 
2526: window_definition_list:
2527: 			window_definition						{ $$ = list_make1($1); }
2528: 			| window_definition_list ',' window_definition
2529: 													{ $$ = lappend($1, $3); }
2530: 		;
2531: 
2532: window_definition:
2533: 			ColId AS window_specification
2534: 				{
2535: 					PGWindowDef *n = $3;
2536: 					n->name = $1;
2537: 					$$ = n;
2538: 				}
2539: 		;
2540: 
2541: over_clause: OVER window_specification
2542: 				{ $$ = $2; }
2543: 			| OVER ColId
2544: 				{
2545: 					PGWindowDef *n = makeNode(PGWindowDef);
2546: 					n->name = $2;
2547: 					n->refname = NULL;
2548: 					n->partitionClause = NIL;
2549: 					n->orderClause = NIL;
2550: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
2551: 					n->startOffset = NULL;
2552: 					n->endOffset = NULL;
2553: 					n->location = @2;
2554: 					$$ = n;
2555: 				}
2556: 			| /*EMPTY*/
2557: 				{ $$ = NULL; }
2558: 		;
2559: 
2560: window_specification: '(' opt_existing_window_name opt_partition_clause
2561: 						opt_sort_clause opt_frame_clause ')'
2562: 				{
2563: 					PGWindowDef *n = makeNode(PGWindowDef);
2564: 					n->name = NULL;
2565: 					n->refname = $2;
2566: 					n->partitionClause = $3;
2567: 					n->orderClause = $4;
2568: 					/* copy relevant fields of opt_frame_clause */
2569: 					n->frameOptions = $5->frameOptions;
2570: 					n->startOffset = $5->startOffset;
2571: 					n->endOffset = $5->endOffset;
2572: 					n->location = @1;
2573: 					$$ = n;
2574: 				}
2575: 		;
2576: 
2577: /*
2578:  * If we see PARTITION, RANGE, or ROWS as the first token after the '('
2579:  * of a window_specification, we want the assumption to be that there is
2580:  * no existing_window_name; but those keywords are unreserved and so could
2581:  * be ColIds.  We fix this by making them have the same precedence as IDENT
2582:  * and giving the empty production here a slightly higher precedence, so
2583:  * that the shift/reduce conflict is resolved in favor of reducing the rule.
2584:  * These keywords are thus precluded from being an existing_window_name but
2585:  * are not reserved for any other purpose.
2586:  */
2587: opt_existing_window_name: ColId						{ $$ = $1; }
2588: 			| /*EMPTY*/				%prec Op		{ $$ = NULL; }
2589: 		;
2590: 
2591: opt_partition_clause: PARTITION BY expr_list		{ $$ = $3; }
2592: 			| /*EMPTY*/								{ $$ = NIL; }
2593: 		;
2594: 
2595: /*
2596:  * For frame clauses, we return a PGWindowDef, but only some fields are used:
2597:  * frameOptions, startOffset, and endOffset.
2598:  *
2599:  * This is only a subset of the full SQL:2008 frame_clause grammar.
2600:  * We don't support <window frame exclusion> yet.
2601:  */
2602: opt_frame_clause:
2603: 			RANGE frame_extent
2604: 				{
2605: 					PGWindowDef *n = $2;
2606: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
2607: 					$$ = n;
2608: 				}
2609: 			| ROWS frame_extent
2610: 				{
2611: 					PGWindowDef *n = $2;
2612: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
2613: 					$$ = n;
2614: 				}
2615: 			| /*EMPTY*/
2616: 				{
2617: 					PGWindowDef *n = makeNode(PGWindowDef);
2618: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
2619: 					n->startOffset = NULL;
2620: 					n->endOffset = NULL;
2621: 					$$ = n;
2622: 				}
2623: 		;
2624: 
2625: frame_extent: frame_bound
2626: 				{
2627: 					PGWindowDef *n = $1;
2628: 					/* reject invalid cases */
2629: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
2630: 						ereport(ERROR,
2631: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2632: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
2633: 								 parser_errposition(@1)));
2634: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
2635: 						ereport(ERROR,
2636: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2637: 								 errmsg("frame starting from following row cannot end with current row"),
2638: 								 parser_errposition(@1)));
2639: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
2640: 					$$ = n;
2641: 				}
2642: 			| BETWEEN frame_bound AND frame_bound
2643: 				{
2644: 					PGWindowDef *n1 = $2;
2645: 					PGWindowDef *n2 = $4;
2646: 					/* form merged options */
2647: 					int		frameOptions = n1->frameOptions;
2648: 					/* shift converts START_ options to END_ options */
2649: 					frameOptions |= n2->frameOptions << 1;
2650: 					frameOptions |= FRAMEOPTION_BETWEEN;
2651: 					/* reject invalid cases */
2652: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
2653: 						ereport(ERROR,
2654: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2655: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
2656: 								 parser_errposition(@2)));
2657: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
2658: 						ereport(ERROR,
2659: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2660: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
2661: 								 parser_errposition(@4)));
2662: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
2663: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
2664: 						ereport(ERROR,
2665: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2666: 								 errmsg("frame starting from current row cannot have preceding rows"),
2667: 								 parser_errposition(@4)));
2668: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
2669: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
2670: 										 FRAMEOPTION_END_CURRENT_ROW)))
2671: 						ereport(ERROR,
2672: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
2673: 								 errmsg("frame starting from following row cannot have preceding rows"),
2674: 								 parser_errposition(@4)));
2675: 					n1->frameOptions = frameOptions;
2676: 					n1->endOffset = n2->startOffset;
2677: 					$$ = n1;
2678: 				}
2679: 		;
2680: 
2681: /*
2682:  * This is used for both frame start and frame end, with output set up on
2683:  * the assumption it's frame start; the frame_extent productions must reject
2684:  * invalid cases.
2685:  */
2686: frame_bound:
2687: 			UNBOUNDED PRECEDING
2688: 				{
2689: 					PGWindowDef *n = makeNode(PGWindowDef);
2690: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
2691: 					n->startOffset = NULL;
2692: 					n->endOffset = NULL;
2693: 					$$ = n;
2694: 				}
2695: 			| UNBOUNDED FOLLOWING
2696: 				{
2697: 					PGWindowDef *n = makeNode(PGWindowDef);
2698: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
2699: 					n->startOffset = NULL;
2700: 					n->endOffset = NULL;
2701: 					$$ = n;
2702: 				}
2703: 			| CURRENT_P ROW
2704: 				{
2705: 					PGWindowDef *n = makeNode(PGWindowDef);
2706: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
2707: 					n->startOffset = NULL;
2708: 					n->endOffset = NULL;
2709: 					$$ = n;
2710: 				}
2711: 			| a_expr PRECEDING
2712: 				{
2713: 					PGWindowDef *n = makeNode(PGWindowDef);
2714: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
2715: 					n->startOffset = $1;
2716: 					n->endOffset = NULL;
2717: 					$$ = n;
2718: 				}
2719: 			| a_expr FOLLOWING
2720: 				{
2721: 					PGWindowDef *n = makeNode(PGWindowDef);
2722: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
2723: 					n->startOffset = $1;
2724: 					n->endOffset = NULL;
2725: 					$$ = n;
2726: 				}
2727: 		;
2728: 
2729: 
2730: /*
2731:  * Supporting nonterminals for expressions.
2732:  */
2733: 
2734: /* Explicit row production.
2735:  *
2736:  * SQL99 allows an optional ROW keyword, so we can now do single-element rows
2737:  * without conflicting with the parenthesized a_expr production.  Without the
2738:  * ROW keyword, there must be more than one a_expr inside the parens.
2739:  */
2740: qualified_row:	ROW '(' expr_list ')'					{ $$ = $3; }
2741: 			| ROW '(' ')'							{ $$ = NIL; }
2742: 		;
2743: 
2744: row:		qualified_row							{ $$ = $1;}
2745: 			| '(' expr_list ',' a_expr ')'			{ $$ = lappend($2, $4); }
2746: 		;
2747: 
2748: dict_arg:
2749: 	ColIdOrString ':' a_expr						{
2750: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2751: 		na->name = $1;
2752: 		na->arg = (PGExpr *) $3;
2753: 		na->argnumber = -1;
2754: 		na->location = @1;
2755: 		$$ = (PGNode *) na;
2756: 	}
2757: 
2758: dict_arguments:
2759: 	dict_arg						{ $$ = list_make1($1); }
2760: 	| dict_arguments ',' dict_arg	{ $$ = lappend($1, $3); }
2761: 
2762: sub_type:	ANY										{ $$ = PG_ANY_SUBLINK; }
2763: 			| SOME									{ $$ = PG_ANY_SUBLINK; }
2764: 			| ALL									{ $$ = PG_ALL_SUBLINK; }
2765: 		;
2766: 
2767: all_Op:		Op										{ $$ = $1; }
2768: 			| MathOp								{ $$ = (char*) $1; }
2769: 		;
2770: 
2771: MathOp:		 '+'									{ $$ = "+"; }
2772: 			| '-'									{ $$ = "-"; }
2773: 			| '*'									{ $$ = "*"; }
2774: 			| '/'									{ $$ = "/"; }
2775: 			| '%'									{ $$ = "%"; }
2776: 			| '^'									{ $$ = "^"; }
2777: 			| '<'									{ $$ = "<"; }
2778: 			| '>'									{ $$ = ">"; }
2779: 			| '='									{ $$ = "="; }
2780: 			| LESS_EQUALS							{ $$ = "<="; }
2781: 			| GREATER_EQUALS						{ $$ = ">="; }
2782: 			| NOT_EQUALS							{ $$ = "<>"; }
2783: 		;
2784: 
2785: qual_Op:	Op
2786: 					{ $$ = list_make1(makeString($1)); }
2787: 			| OPERATOR '(' any_operator ')'
2788: 					{ $$ = $3; }
2789: 		;
2790: 
2791: qual_all_Op:
2792: 			all_Op
2793: 					{ $$ = list_make1(makeString($1)); }
2794: 			| OPERATOR '(' any_operator ')'
2795: 					{ $$ = $3; }
2796: 		;
2797: 
2798: subquery_Op:
2799: 			all_Op
2800: 					{ $$ = list_make1(makeString($1)); }
2801: 			| OPERATOR '(' any_operator ')'
2802: 					{ $$ = $3; }
2803: 			| LIKE
2804: 					{ $$ = list_make1(makeString("~~")); }
2805: 			| NOT_LA LIKE
2806: 					{ $$ = list_make1(makeString("!~~")); }
2807: 			| GLOB
2808: 					{ $$ = list_make1(makeString("~~~")); }
2809: 			| NOT_LA GLOB
2810: 					{ $$ = list_make1(makeString("!~~~")); }
2811: 			| ILIKE
2812: 					{ $$ = list_make1(makeString("~~*")); }
2813: 			| NOT_LA ILIKE
2814: 					{ $$ = list_make1(makeString("!~~*")); }
2815: /* cannot put SIMILAR TO here, because SIMILAR TO is a hack.
2816:  * the regular expression is preprocessed by a function (similar_escape),
2817:  * and the ~ operator for posix regular expressions is used.
2818:  *        x SIMILAR TO y     ->    x ~ similar_escape(y)
2819:  * this transformation is made on the fly by the parser upwards.
2820:  * however the PGSubLink structure which handles any/some/all stuff
2821:  * is not ready for such a thing.
2822:  */
2823: 			;
2824: 
2825: 
2826: any_operator:
2827: 			all_Op
2828: 					{ $$ = list_make1(makeString($1)); }
2829: 			| ColId '.' any_operator
2830: 					{ $$ = lcons(makeString($1), $3); }
2831: 		;
2832: 
2833: expr_list:	a_expr
2834: 				{
2835: 					$$ = list_make1($1);
2836: 				}
2837: 			| expr_list ',' a_expr
2838: 				{
2839: 					$$ = lappend($1, $3);
2840: 				}
2841: 		;
2842: 
2843: opt_expr_list:
2844: 			expr_list
2845: 				{
2846: 					$$ = $1;
2847: 				}
2848: 			| /* empty */
2849: 				{
2850: 					$$ = NULL;
2851: 				}
2852: 		;
2853: 
2854: 
2855: /* function arguments can have names */
2856: func_arg_list:  func_arg_expr
2857: 				{
2858: 					$$ = list_make1($1);
2859: 				}
2860: 			| func_arg_list ',' func_arg_expr
2861: 				{
2862: 					$$ = lappend($1, $3);
2863: 				}
2864: 		;
2865: 
2866: func_arg_expr:  a_expr
2867: 				{
2868: 					$$ = $1;
2869: 				}
2870: 			| param_name COLON_EQUALS a_expr
2871: 				{
2872: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2873: 					na->name = $1;
2874: 					na->arg = (PGExpr *) $3;
2875: 					na->argnumber = -1;		/* until determined */
2876: 					na->location = @1;
2877: 					$$ = (PGNode *) na;
2878: 				}
2879: 			| param_name EQUALS_GREATER a_expr
2880: 				{
2881: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
2882: 					na->name = $1;
2883: 					na->arg = (PGExpr *) $3;
2884: 					na->argnumber = -1;		/* until determined */
2885: 					na->location = @1;
2886: 					$$ = (PGNode *) na;
2887: 				}
2888: 		;
2889: 
2890: type_list:	Typename								{ $$ = list_make1($1); }
2891: 			| type_list ',' Typename				{ $$ = lappend($1, $3); }
2892: 		;
2893: 
2894: extract_list:
2895: 			extract_arg FROM a_expr
2896: 				{
2897: 					$$ = list_make2(makeStringConst($1, @1), $3);
2898: 				}
2899: 			| /*EMPTY*/								{ $$ = NIL; }
2900: 		;
2901: 
2902: /* Allow delimited string Sconst in extract_arg as an SQL extension.
2903:  * - thomas 2001-04-12
2904:  */
2905: extract_arg:
2906: 			IDENT											{ $$ = $1; }
2907: 			| year_keyword									{ $$ = (char*) "year"; }
2908: 			| month_keyword									{ $$ = (char*) "month"; }
2909: 			| day_keyword									{ $$ = (char*) "day"; }
2910: 			| hour_keyword									{ $$ = (char*) "hour"; }
2911: 			| minute_keyword								{ $$ = (char*) "minute"; }
2912: 			| second_keyword								{ $$ = (char*) "second"; }
2913: 			| millisecond_keyword							{ $$ = (char*) "millisecond"; }
2914: 			| microsecond_keyword							{ $$ = (char*) "microsecond"; }
2915: 			| Sconst										{ $$ = $1; }
2916: 		;
2917: 
2918: /* OVERLAY() arguments
2919:  * SQL99 defines the OVERLAY() function:
2920:  * o overlay(text placing text from int for int)
2921:  * o overlay(text placing text from int)
2922:  * and similarly for binary strings
2923:  */
2924: overlay_list:
2925: 			a_expr overlay_placing substr_from substr_for
2926: 				{
2927: 					$$ = list_make4($1, $2, $3, $4);
2928: 				}
2929: 			| a_expr overlay_placing substr_from
2930: 				{
2931: 					$$ = list_make3($1, $2, $3);
2932: 				}
2933: 		;
2934: 
2935: overlay_placing:
2936: 			PLACING a_expr
2937: 				{ $$ = $2; }
2938: 		;
2939: 
2940: /* position_list uses b_expr not a_expr to avoid conflict with general IN */
2941: 
2942: position_list:
2943: 			b_expr IN_P b_expr						{ $$ = list_make2($3, $1); }
2944: 			| /*EMPTY*/								{ $$ = NIL; }
2945: 		;
2946: 
2947: /* SUBSTRING() arguments
2948:  * SQL9x defines a specific syntax for arguments to SUBSTRING():
2949:  * o substring(text from int for int)
2950:  * o substring(text from int) get entire string from starting point "int"
2951:  * o substring(text for int) get first "int" characters of string
2952:  * o substring(text from pattern) get entire string matching pattern
2953:  * o substring(text from pattern for escape) same with specified escape char
2954:  * We also want to support generic substring functions which accept
2955:  * the usual generic list of arguments. So we will accept both styles
2956:  * here, and convert the SQL9x style to the generic list for further
2957:  * processing. - thomas 2000-11-28
2958:  */
2959: substr_list:
2960: 			a_expr substr_from substr_for
2961: 				{
2962: 					$$ = list_make3($1, $2, $3);
2963: 				}
2964: 			| a_expr substr_for substr_from
2965: 				{
2966: 					/* not legal per SQL99, but might as well allow it */
2967: 					$$ = list_make3($1, $3, $2);
2968: 				}
2969: 			| a_expr substr_from
2970: 				{
2971: 					$$ = list_make2($1, $2);
2972: 				}
2973: 			| a_expr substr_for
2974: 				{
2975: 					/*
2976: 					 * Since there are no cases where this syntax allows
2977: 					 * a textual FOR value, we forcibly cast the argument
2978: 					 * to int4.  The possible matches in pg_proc are
2979: 					 * substring(text,int4) and substring(text,text),
2980: 					 * and we don't want the parser to choose the latter,
2981: 					 * which it is likely to do if the second argument
2982: 					 * is unknown or doesn't have an implicit cast to int4.
2983: 					 */
2984: 					$$ = list_make3($1, makeIntConst(1, -1),
2985: 									makeTypeCast($2,
2986: 												 SystemTypeName("int4"), 0, -1));
2987: 				}
2988: 			| expr_list
2989: 				{
2990: 					$$ = $1;
2991: 				}
2992: 			| /*EMPTY*/
2993: 				{ $$ = NIL; }
2994: 		;
2995: 
2996: substr_from:
2997: 			FROM a_expr								{ $$ = $2; }
2998: 		;
2999: 
3000: substr_for: FOR a_expr								{ $$ = $2; }
3001: 		;
3002: 
3003: trim_list:	a_expr FROM expr_list					{ $$ = lappend($3, $1); }
3004: 			| FROM expr_list						{ $$ = $2; }
3005: 			| expr_list								{ $$ = $1; }
3006: 		;
3007: 
3008: in_expr:	select_with_parens
3009: 				{
3010: 					PGSubLink *n = makeNode(PGSubLink);
3011: 					n->subselect = $1;
3012: 					/* other fields will be filled later */
3013: 					$$ = (PGNode *)n;
3014: 				}
3015: 			| '(' expr_list ')'						{ $$ = (PGNode *)$2; }
3016: 		;
3017: 
3018: /*
3019:  * Define SQL-style CASE clause.
3020:  * - Full specification
3021:  *	CASE WHEN a = b THEN c ... ELSE d END
3022:  * - Implicit argument
3023:  *	CASE a WHEN b THEN c ... ELSE d END
3024:  */
3025: case_expr:	CASE case_arg when_clause_list case_default END_P
3026: 				{
3027: 					PGCaseExpr *c = makeNode(PGCaseExpr);
3028: 					c->casetype = InvalidOid; /* not analyzed yet */
3029: 					c->arg = (PGExpr *) $2;
3030: 					c->args = $3;
3031: 					c->defresult = (PGExpr *) $4;
3032: 					c->location = @1;
3033: 					$$ = (PGNode *)c;
3034: 				}
3035: 		;
3036: 
3037: when_clause_list:
3038: 			/* There must be at least one */
3039: 			when_clause								{ $$ = list_make1($1); }
3040: 			| when_clause_list when_clause			{ $$ = lappend($1, $2); }
3041: 		;
3042: 
3043: when_clause:
3044: 			WHEN a_expr THEN a_expr
3045: 				{
3046: 					PGCaseWhen *w = makeNode(PGCaseWhen);
3047: 					w->expr = (PGExpr *) $2;
3048: 					w->result = (PGExpr *) $4;
3049: 					w->location = @1;
3050: 					$$ = (PGNode *)w;
3051: 				}
3052: 		;
3053: 
3054: case_default:
3055: 			ELSE a_expr								{ $$ = $2; }
3056: 			| /*EMPTY*/								{ $$ = NULL; }
3057: 		;
3058: 
3059: case_arg:	a_expr									{ $$ = $1; }
3060: 			| /*EMPTY*/								{ $$ = NULL; }
3061: 		;
3062: 
3063: columnref:	ColId
3064: 				{
3065: 					$$ = makeColumnRef($1, NIL, @1, yyscanner);
3066: 				}
3067: 			| ColId indirection
3068: 				{
3069: 					$$ = makeColumnRef($1, $2, @1, yyscanner);
3070: 				}
3071: 		;
3072: 
3073: indirection_el:
3074: 			'.' attr_name
3075: 				{
3076: 					$$ = (PGNode *) makeString($2);
3077: 				}
3078: 			| '[' a_expr ']'
3079: 				{
3080: 					PGAIndices *ai = makeNode(PGAIndices);
3081: 					ai->is_slice = false;
3082: 					ai->lidx = NULL;
3083: 					ai->uidx = $2;
3084: 					$$ = (PGNode *) ai;
3085: 				}
3086: 			| '[' opt_slice_bound ':' opt_slice_bound ']'
3087: 				{
3088: 					PGAIndices *ai = makeNode(PGAIndices);
3089: 					ai->is_slice = true;
3090: 					ai->lidx = $2;
3091: 					ai->uidx = $4;
3092: 					$$ = (PGNode *) ai;
3093: 				}
3094: 		;
3095: 
3096: opt_slice_bound:
3097: 			a_expr									{ $$ = $1; }
3098: 			| /*EMPTY*/								{ $$ = NULL; }
3099: 		;
3100: 
3101: indirection:
3102: 			indirection_el							{ $$ = list_make1($1); }
3103: 			| indirection indirection_el			{ $$ = lappend($1, $2); }
3104: 		;
3105: 
3106: opt_indirection:
3107: 			/*EMPTY*/								{ $$ = NIL; }
3108: 			| opt_indirection indirection_el		{ $$ = lappend($1, $2); }
3109: 		;
3110: 
3111: opt_asymmetric: ASYMMETRIC
3112: 			| /*EMPTY*/
3113: 		;
3114: 
3115: 
3116: /*****************************************************************************
3117:  *
3118:  *	target list for SELECT
3119:  *
3120:  *****************************************************************************/
3121: 
3122: opt_target_list: target_list						{ $$ = $1; }
3123: 			| /* EMPTY */							{ $$ = NIL; }
3124: 		;
3125: 
3126: target_list:
3127: 			target_el								{ $$ = list_make1($1); }
3128: 			| target_list ',' target_el				{ $$ = lappend($1, $3); }
3129: 		;
3130: 
3131: target_el:	a_expr AS ColLabelOrString
3132: 				{
3133: 					$$ = makeNode(PGResTarget);
3134: 					$$->name = $3;
3135: 					$$->indirection = NIL;
3136: 					$$->val = (PGNode *)$1;
3137: 					$$->location = @1;
3138: 				}
3139: 			/*
3140: 			 * We support omitting AS only for column labels that aren't
3141: 			 * any known keyword.  There is an ambiguity against postfix
3142: 			 * operators: is "a ! b" an infix expression, or a postfix
3143: 			 * expression and a column label?  We prefer to resolve this
3144: 			 * as an infix expression, which we accomplish by assigning
3145: 			 * IDENT a precedence higher than POSTFIXOP.
3146: 			 */
3147: 			| a_expr IDENT
3148: 				{
3149: 					$$ = makeNode(PGResTarget);
3150: 					$$->name = $2;
3151: 					$$->indirection = NIL;
3152: 					$$->val = (PGNode *)$1;
3153: 					$$->location = @1;
3154: 				}
3155: 			| a_expr
3156: 				{
3157: 					$$ = makeNode(PGResTarget);
3158: 					$$->name = NULL;
3159: 					$$->indirection = NIL;
3160: 					$$->val = (PGNode *)$1;
3161: 					$$->location = @1;
3162: 				}
3163: 			| '*' opt_except_list opt_replace_list
3164: 				{
3165: 					PGColumnRef *n = makeNode(PGColumnRef);
3166: 					PGAStar *star = makeNode(PGAStar);
3167: 					n->fields = list_make1(star);
3168: 					n->location = @1;
3169: 					star->except_list = $2;
3170: 					star->replace_list = $3;
3171: 
3172: 					$$ = makeNode(PGResTarget);
3173: 					$$->name = NULL;
3174: 					$$->indirection = NIL;
3175: 					$$->val = (PGNode *)n;
3176: 					$$->location = @1;
3177: 				}
3178: 			| ColId '.' '*' opt_except_list opt_replace_list
3179: 				{
3180: 					PGColumnRef *n = makeNode(PGColumnRef);
3181: 					PGAStar *star = makeNode(PGAStar);
3182: 					n->fields = list_make1(star);
3183: 					n->location = @1;
3184: 					star->relation = $1;
3185: 					star->except_list = $4;
3186: 					star->replace_list = $5;
3187: 
3188: 					$$ = makeNode(PGResTarget);
3189: 					$$->name = NULL;
3190: 					$$->indirection = NIL;
3191: 					$$->val = (PGNode *)n;
3192: 					$$->location = @1;
3193: 				}
3194: 		;
3195: 
3196: except_list: EXCLUDE '(' name_list ')'					{ $$ = $3; }
3197: 			| EXCLUDE ColId								{ $$ = list_make1(makeString($2)); }
3198: 		;
3199: 
3200: opt_except_list: except_list						{ $$ = $1; }
3201: 			| /*EMPTY*/								{ $$ = NULL; }
3202: 		;
3203: 
3204: replace_list_el: a_expr AS ColId					{ $$ = list_make2($1, makeString($3)); }
3205: 		;
3206: 
3207: replace_list:
3208: 			replace_list_el							{ $$ = list_make1($1); }
3209: 			| replace_list ',' replace_list_el		{ $$ = lappend($1, $3); }
3210: 		;
3211: 
3212: opt_replace_list: REPLACE '(' replace_list ')'		{ $$ = $3; }
3213: 			| REPLACE replace_list_el				{ $$ = list_make1($2); }
3214: 			| /*EMPTY*/								{ $$ = NULL; }
3215: 		;
3216: 
3217: /*****************************************************************************
3218:  *
3219:  *	Names and constants
3220:  *
3221:  *****************************************************************************/
3222: 
3223: qualified_name_list:
3224: 			qualified_name							{ $$ = list_make1($1); }
3225: 			| qualified_name_list ',' qualified_name { $$ = lappend($1, $3); }
3226: 		;
3227: 
3228: /*
3229:  * The production for a qualified relation name has to exactly match the
3230:  * production for a qualified func_name, because in a FROM clause we cannot
3231:  * tell which we are parsing until we see what comes after it ('(' for a
3232:  * func_name, something else for a relation). Therefore we allow 'indirection'
3233:  * which may contain subscripts, and reject that case in the C code.
3234:  */
3235: qualified_name:
3236: 			ColIdOrString
3237: 				{
3238: 					$$ = makeRangeVar(NULL, $1, @1);
3239: 				}
3240: 			| ColId indirection
3241: 				{
3242: 					check_qualified_name($2, yyscanner);
3243: 					$$ = makeRangeVar(NULL, NULL, @1);
3244: 					switch (list_length($2))
3245: 					{
3246: 						case 1:
3247: 							$$->catalogname = NULL;
3248: 							$$->schemaname = $1;
3249: 							$$->relname = strVal(linitial($2));
3250: 							break;
3251: 						case 2:
3252: 							$$->catalogname = $1;
3253: 							$$->schemaname = strVal(linitial($2));
3254: 							$$->relname = strVal(lsecond($2));
3255: 							break;
3256: 						default:
3257: 							ereport(ERROR,
3258: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3259: 									 errmsg("improper qualified name (too many dotted names): %s",
3260: 											NameListToString(lcons(makeString($1), $2))),
3261: 									 parser_errposition(@1)));
3262: 							break;
3263: 					}
3264: 				}
3265: 		;
3266: 
3267: name_list:	name
3268: 					{ $$ = list_make1(makeString($1)); }
3269: 			| name_list ',' name
3270: 					{ $$ = lappend($1, makeString($3)); }
3271: 		;
3272: 
3273: 
3274: name:		ColId									{ $$ = $1; };
3275: 
3276: attr_name:	ColLabel								{ $$ = $1; };
3277: 
3278: /*
3279:  * The production for a qualified func_name has to exactly match the
3280:  * production for a qualified columnref, because we cannot tell which we
3281:  * are parsing until we see what comes after it ('(' or Sconst for a func_name,
3282:  * anything else for a columnref).  Therefore we allow 'indirection' which
3283:  * may contain subscripts, and reject that case in the C code.  (If we
3284:  * ever implement SQL99-like methods, such syntax may actually become legal!)
3285:  */
3286: func_name:	function_name_token
3287: 					{ $$ = list_make1(makeString($1)); }
3288: 			|
3289: 			ColId indirection
3290: 					{
3291: 						$$ = check_func_name(lcons(makeString($1), $2),
3292: 											 yyscanner);
3293: 					}
3294: 		;
3295: 
3296: 
3297: /*
3298:  * Constants
3299:  */
3300: AexprConst: Iconst
3301: 				{
3302: 					$$ = makeIntConst($1, @1);
3303: 				}
3304: 			| FCONST
3305: 				{
3306: 					$$ = makeFloatConst($1, @1);
3307: 				}
3308: 			| Sconst opt_indirection
3309: 				{
3310: 					if ($2)
3311: 					{
3312: 						PGAIndirection *n = makeNode(PGAIndirection);
3313: 						n->arg = makeStringConst($1, @1);
3314: 						n->indirection = check_indirection($2, yyscanner);
3315: 						$$ = (PGNode *) n;
3316: 					}
3317: 					else
3318: 						$$ = makeStringConst($1, @1);
3319: 				}
3320: 			| BCONST
3321: 				{
3322: 					$$ = makeBitStringConst($1, @1);
3323: 				}
3324: 			| XCONST
3325: 				{
3326: 					/* This is a bit constant per SQL99:
3327: 					 * Without Feature F511, "BIT data type",
3328: 					 * a <general literal> shall not be a
3329: 					 * <bit string literal> or a <hex string literal>.
3330: 					 */
3331: 					$$ = makeBitStringConst($1, @1);
3332: 				}
3333: 			| func_name Sconst
3334: 				{
3335: 					/* generic type 'literal' syntax */
3336: 					PGTypeName *t = makeTypeNameFromNameList($1);
3337: 					t->location = @1;
3338: 					$$ = makeStringConstCast($2, @2, t);
3339: 				}
3340: 			| func_name '(' func_arg_list opt_sort_clause ')' Sconst
3341: 				{
3342: 					/* generic syntax with a type modifier */
3343: 					PGTypeName *t = makeTypeNameFromNameList($1);
3344: 					PGListCell *lc;
3345: 
3346: 					/*
3347: 					 * We must use func_arg_list and opt_sort_clause in the
3348: 					 * production to avoid reduce/reduce conflicts, but we
3349: 					 * don't actually wish to allow PGNamedArgExpr in this
3350: 					 * context, nor ORDER BY.
3351: 					 */
3352: 					foreach(lc, $3)
3353: 					{
3354: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
3355: 
3356: 						if (IsA(arg, PGNamedArgExpr))
3357: 							ereport(ERROR,
3358: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3359: 									 errmsg("type modifier cannot have parameter name"),
3360: 									 parser_errposition(arg->location)));
3361: 					}
3362: 					if ($4 != NIL)
3363: 							ereport(ERROR,
3364: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
3365: 									 errmsg("type modifier cannot have ORDER BY"),
3366: 									 parser_errposition(@4)));
3367: 
3368: 					t->typmods = $3;
3369: 					t->location = @1;
3370: 					$$ = makeStringConstCast($6, @6, t);
3371: 				}
3372: 			| ConstTypename Sconst
3373: 				{
3374: 					$$ = makeStringConstCast($2, @2, $1);
3375: 				}
3376: 			| ConstInterval '(' a_expr ')' opt_interval
3377: 				{
3378: 					$$ = makeIntervalNode($3, @3, $5);
3379: 				}
3380: 			| ConstInterval Iconst opt_interval
3381: 				{
3382: 					$$ = makeIntervalNode($2, @2, $3);
3383: 				}
3384: 			| ConstInterval Sconst opt_interval
3385: 				{
3386: 					$$ = makeIntervalNode($2, @2, $3);
3387: 				}
3388: 			| TRUE_P
3389: 				{
3390: 					$$ = makeBoolAConst(true, @1);
3391: 				}
3392: 			| FALSE_P
3393: 				{
3394: 					$$ = makeBoolAConst(false, @1);
3395: 				}
3396: 			| NULL_P
3397: 				{
3398: 					$$ = makeNullAConst(@1);
3399: 				}
3400: 		;
3401: 
3402: Iconst:		ICONST									{ $$ = $1; };
3403: Sconst:		SCONST									{ $$ = $1; };
3404: 
3405: /* Role specifications */
3406: /*
3407:  * Name classification hierarchy.
3408:  *
3409:  * IDENT is the lexeme returned by the lexer for identifiers that match
3410:  * no known keyword.  In most cases, we can accept certain keywords as
3411:  * names, not only IDENTs.	We prefer to accept as many such keywords
3412:  * as possible to minimize the impact of "reserved words" on programmers.
3413:  * So, we divide names into several possible classes.  The classification
3414:  * is chosen in part to make keywords acceptable as names wherever possible.
3415:  */
3416: 
3417: /* Column identifier --- names that can be column, table, etc names.
3418:  */
3419: ColId:		IDENT									{ $$ = $1; }
3420: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3421: 			| col_name_keyword						{ $$ = pstrdup($1); }
3422: 		;
3423: 
3424: ColIdOrString:	ColId											{ $$ = $1; }
3425: 				| SCONST										{ $$ = $1; }
3426: 		;
3427: 
3428: 
3429: /* Type/function identifier --- names that can be type or function names.
3430:  */
3431: type_function_name:	IDENT							{ $$ = $1; }
3432: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3433: 			| type_func_name_keyword				{ $$ = pstrdup($1); }
3434: 		;
3435: 
3436: function_name_token:	IDENT						{ $$ = $1; }
3437: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3438: 			| func_name_keyword						{ $$ = pstrdup($1); }
3439: 		;
3440: 
3441: type_name_token:	IDENT						{ $$ = $1; }
3442: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3443: 			| type_name_keyword						{ $$ = pstrdup($1); }
3444: 		;
3445: 
3446: any_name:	ColId						{ $$ = list_make1(makeString($1)); }
3447: 			| ColId attrs				{ $$ = lcons(makeString($1), $2); }
3448: 		;
3449: 
3450: attrs:		'.' attr_name
3451: 					{ $$ = list_make1(makeString($2)); }
3452: 			| attrs '.' attr_name
3453: 					{ $$ = lappend($1, makeString($3)); }
3454: 		;
3455: 
3456: opt_name_list:
3457: 			'(' name_list ')'						{ $$ = $2; }
3458: 			| /*EMPTY*/								{ $$ = NIL; }
3459: 		;
3460: 
3461: param_name:	type_function_name
3462: 		;
3463: 
3464: /* Any not-fully-reserved word --- these names can be, eg, role names.
3465:  */
3466: /* Column label --- allowed labels in "AS" clauses.
3467:  * This presently includes *all* Postgres keywords.
3468:  */
3469: ColLabel:	IDENT									{ $$ = $1; }
3470: 			| other_keyword							{ $$ = pstrdup($1); }
3471: 			| unreserved_keyword					{ $$ = pstrdup($1); }
3472: 			| reserved_keyword						{ $$ = pstrdup($1); }
3473: 		;
3474: 
3475: ColLabelOrString:	ColLabel						{ $$ = $1; }
3476: 					| SCONST						{ $$ = $1; }
3477: 		;
[end of third_party/libpg_query/grammar/statements/select.y]
[start of third_party/libpg_query/grammar/statements/view.y]
1: /*****************************************************************************
2:  *
3:  *	QUERY:
4:  *		CREATE [ OR REPLACE ] [ TEMP ] VIEW <viewname> '('target-list ')'
5:  *			AS <query> [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]
6:  *
7:  *****************************************************************************/
8: ViewStmt: CREATE_P OptTemp VIEW qualified_name opt_column_list opt_reloptions
9: 				AS SelectStmt opt_check_option
10: 				{
11: 					PGViewStmt *n = makeNode(PGViewStmt);
12: 					n->view = $4;
13: 					n->view->relpersistence = $2;
14: 					n->aliases = $5;
15: 					n->query = $8;
16: 					n->replace = false;
17: 					n->options = $6;
18: 					n->withCheckOption = $9;
19: 					$$ = (PGNode *) n;
20: 				}
21: 		| CREATE_P OR REPLACE OptTemp VIEW qualified_name opt_column_list opt_reloptions
22: 				AS SelectStmt opt_check_option
23: 				{
24: 					PGViewStmt *n = makeNode(PGViewStmt);
25: 					n->view = $6;
26: 					n->view->relpersistence = $4;
27: 					n->aliases = $7;
28: 					n->query = $10;
29: 					n->replace = true;
30: 					n->options = $8;
31: 					n->withCheckOption = $11;
32: 					$$ = (PGNode *) n;
33: 				}
34: 		| CREATE_P OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions
35: 				AS SelectStmt opt_check_option
36: 				{
37: 					PGViewStmt *n = makeNode(PGViewStmt);
38: 					n->view = $5;
39: 					n->view->relpersistence = $2;
40: 					n->aliases = $7;
41: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, $11);
42: 					n->replace = false;
43: 					n->options = $9;
44: 					n->withCheckOption = $12;
45: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
46: 						ereport(ERROR,
47: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
48: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
49: 								 parser_errposition(@12)));
50: 					$$ = (PGNode *) n;
51: 				}
52: 		| CREATE_P OR REPLACE OptTemp RECURSIVE VIEW qualified_name '(' columnList ')' opt_reloptions
53: 				AS SelectStmt opt_check_option
54: 				{
55: 					PGViewStmt *n = makeNode(PGViewStmt);
56: 					n->view = $7;
57: 					n->view->relpersistence = $4;
58: 					n->aliases = $9;
59: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, $13);
60: 					n->replace = true;
61: 					n->options = $11;
62: 					n->withCheckOption = $14;
63: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
64: 						ereport(ERROR,
65: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
66: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
67: 								 parser_errposition(@14)));
68: 					$$ = (PGNode *) n;
69: 				}
70: 		;
71: 
72: 
73: opt_check_option:
74: 		WITH CHECK_P OPTION				{ $$ = CASCADED_CHECK_OPTION; }
75: 		| WITH CASCADED CHECK_P OPTION	{ $$ = CASCADED_CHECK_OPTION; }
76: 		| WITH LOCAL CHECK_P OPTION		{ $$ = PG_LOCAL_CHECK_OPTION; }
77: 		| /* EMPTY */					{ $$ = PG_NO_CHECK_OPTION; }
78: 		;
[end of third_party/libpg_query/grammar/statements/view.y]
[start of third_party/libpg_query/grammar/types/select.yh]
1: %type <node>	select_no_parens select_with_parens select_clause
2: 				simple_select values_clause
3: 
4: 
5: %type <sortorder> opt_asc_desc
6: %type <nullorder> opt_nulls_order
7: 
8: %type <node> opt_collate_clause
9: 
10: 
11: 
12: 
13: %type <lockwaitpolicy>	opt_nowait_or_skip
14: 
15: %type <str>	 			 attr_name
16: 				name
17: %type <list>	func_name qual_Op qual_all_Op subquery_Op
18: 
19: %type <range>	qualified_name
20: %type <str>		all_Op
21: %type <conststr> MathOp
22: 
23: 
24: %type <list>	distinct_clause opt_all_clause 			 			 			 			 			 			 opt_name_list
25: 				sort_clause opt_sort_clause sortby_list 				name_list from_clause from_list opt_array_bounds
26: 				qualified_name_list any_name 				any_operator expr_list	opt_expr_list attrs
27: 				target_list opt_target_list 			 			 indirection opt_indirection
28: 			 group_clause select_limit
29: 				opt_select_limit 			 			 TableFuncElementList opt_type_modifiers
30: %type <list>	group_by_list
31: %type <node>	group_by_item empty_grouping_set
32: %type <range>	OptTempTableName
33: %type <into>	into_clause
34: 
35: %type <lockstrength>	for_locking_strength
36: %type <node>	for_locking_item
37: %type <list>	for_locking_clause opt_for_locking_clause for_locking_items
38: %type <list>	locked_rels_list
39: %type <boolean>	all_or_distinct
40: 
41: %type <node>	join_outer join_qual
42: %type <jtype>	join_type
43: 
44: %type <list>	extract_list overlay_list position_list
45: %type <list>	substr_list trim_list
46: %type <list>	opt_interval
47: %type <node>	overlay_placing substr_from substr_for
48: 
49: %type <list>	except_list opt_except_list replace_list_el replace_list opt_replace_list
50: 
51: %type <node> limit_clause select_limit_value
52: 				offset_clause select_offset_value
53: 				select_fetch_first_value I_or_F_const
54: %type <ival>	row_or_rows first_or_next
55: 
56: 
57: 
58: %type <node> TableFuncElement
59: 
60: 
61: %type <node> where_clause 				a_expr b_expr c_expr AexprConst indirection_el opt_slice_bound
62: 				columnref in_expr having_clause func_table
63: %type <list>	rowsfrom_item rowsfrom_list opt_col_def_list
64: %type <boolean> opt_ordinality
65: %type <list>	func_arg_list
66: %type <node>	func_arg_expr
67: %type <list>	row qualified_row type_list colid_type_list
68: %type <node>	case_expr case_arg when_clause case_default
69: %type <list>	when_clause_list
70: %type <subquerytype>	sub_type
71: 
72: %type <node>	dict_arg
73: %type <list>	dict_arguments
74: 
75: %type <alias>	alias_clause opt_alias_clause
76: %type <list>	func_alias_clause
77: %type <sortby>	sortby
78: 
79: %type <node>	table_ref
80: %type <jexpr>	joined_table
81: %type <range>	relation_expr
82: 
83: %type <node>	tablesample_clause opt_tablesample_clause tablesample_entry
84: %type <node>	sample_clause sample_count
85: %type <str>	opt_sample_func
86: %type <ival>	opt_repeatable_clause
87: 
88: %type <target>	target_el
89: 
90: 
91: 
92: %type <typnam>	Typename SimpleTypename ConstTypename
93: 				GenericType Numeric opt_float
94: 				Character ConstCharacter
95: 				CharacterWithLength CharacterWithoutLength
96: 				ConstDatetime ConstInterval
97: 				Bit ConstBit BitWithLength BitWithoutLength
98: %type <conststr>		character
99: %type <str>		extract_arg
100: %type <boolean> opt_varying opt_timezone
101: %type <ival>	Iconst
102: %type <str>		Sconst
103: %type <str>		ColId ColLabel type_function_name param_name type_name_token function_name_token
104: %type <str>		ColIdOrString ColLabelOrString
105: 
106: %type <keyword> unreserved_keyword type_func_name_keyword type_name_keyword func_name_keyword
107: %type <keyword> col_name_keyword reserved_keyword other_keyword
108: 
109: 
110: 
111: 
112: %type <node>	func_application func_expr_common_subexpr
113: %type <node>	func_expr func_expr_windowless
114: %type <node>	common_table_expr
115: %type <with>	with_clause
116: %type <list>	cte_list
117: 
118: %type <list>	within_group_clause
119: %type <node>	filter_clause
120: %type <list>	window_clause window_definition_list opt_partition_clause
121: %type <windef>	window_definition over_clause window_specification
122: 				opt_frame_clause frame_extent frame_bound
123: %type <str>		opt_existing_window_name
[end of third_party/libpg_query/grammar/types/select.yh]
[start of third_party/libpg_query/include/nodes/parsenodes.hpp]
1: /*-------------------------------------------------------------------------
2:  *
3:  * parsenodes.h
4:  *	  definitions for parse tree nodes
5:  *
6:  * Many of the node types used in parsetrees include a "location" field.
7:  * This is a byte (not character) offset in the original source text, to be
8:  * used for positioning an error cursor when there is an error related to
9:  * the node.  Access to the original source text is needed to make use of
10:  * the location.  At the topmost (statement) level, we also provide a
11:  * statement length, likewise measured in bytes, for convenience in
12:  * identifying statement boundaries in multi-statement source strings.
13:  *
14:  *
15:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
16:  * Portions Copyright (c) 1994, Regents of the University of California
17:  *
18:  * src/include/nodes/parsenodes.h
19:  *
20:  *-------------------------------------------------------------------------
21:  */
22: #pragma once
23: 
24: #include "nodes/bitmapset.hpp"
25: #include "nodes/lockoptions.hpp"
26: #include "nodes/primnodes.hpp"
27: #include "nodes/value.hpp"
28: 
29: namespace duckdb_libpgquery {
30: 
31: typedef enum PGOverridingKind {
32: 	PG_OVERRIDING_NOT_SET = 0,
33: 	PG_OVERRIDING_USER_VALUE,
34: 	OVERRIDING_SYSTEM_VALUE
35: } PGOverridingKind;
36: 
37: /* Possible sources of a PGQuery */
38: typedef enum PGQuerySource {
39: 	PG_QSRC_ORIGINAL,          /* original parsetree (explicit query) */
40: 	PG_QSRC_PARSER,            /* added by parse analysis (now unused) */
41: 	PG_QSRC_INSTEAD_RULE,      /* added by unconditional INSTEAD rule */
42: 	PG_QSRC_QUAL_INSTEAD_RULE, /* added by conditional INSTEAD rule */
43: 	QSRC_NON_INSTEAD_RULE      /* added by non-INSTEAD rule */
44: } PGQuerySource;
45: 
46: /* PGSort ordering options for ORDER BY and CREATE INDEX */
47: typedef enum PGSortByDir {
48: 	PG_SORTBY_DEFAULT,
49: 	PG_SORTBY_ASC,
50: 	PG_SORTBY_DESC,
51: 	SORTBY_USING /* not allowed in CREATE INDEX ... */
52: } PGSortByDir;
53: 
54: typedef enum PGSortByNulls { PG_SORTBY_NULLS_DEFAULT, PG_SORTBY_NULLS_FIRST, PG_SORTBY_NULLS_LAST } PGSortByNulls;
55: 
56: /*****************************************************************************
57:  *	PGQuery Tree
58:  *****************************************************************************/
59: 
60: /*
61:  * PGQuery -
62:  *	  Parse analysis turns all statements into a PGQuery tree
63:  *	  for further processing by the rewriter and planner.
64:  *
65:  *	  Utility statements (i.e. non-optimizable statements) have the
66:  *	  utilityStmt field set, and the rest of the PGQuery is mostly dummy.
67:  *
68:  *	  Planning converts a PGQuery tree into a PGPlan tree headed by a PGPlannedStmt
69:  *	  node --- the PGQuery structure is not used by the executor.
70:  */
71: typedef struct PGQuery {
72: 	PGNodeTag type;
73: 
74: 	PGCmdType commandType; /* select|insert|update|delete|utility */
75: 
76: 	PGQuerySource querySource; /* where did I come from? */
77: 
78: 	uint32_t queryId; /* query identifier (can be set by plugins) */
79: 
80: 	bool canSetTag; /* do I set the command result tag? */
81: 
82: 	PGNode *utilityStmt; /* non-null if commandType == PG_CMD_UTILITY */
83: 
84: 	int resultRelation; /* rtable index of target relation for
85: 								 * INSERT/UPDATE/DELETE; 0 for SELECT */
86: 
87: 	bool hasAggs;         /* has aggregates in tlist or havingQual */
88: 	bool hasWindowFuncs;  /* has window functions in tlist */
89: 	bool hasTargetSRFs;   /* has set-returning functions in tlist */
90: 	bool hasSubLinks;     /* has subquery PGSubLink */
91: 	bool hasDistinctOn;   /* distinctClause is from DISTINCT ON */
92: 	bool hasRecursive;    /* WITH RECURSIVE was specified */
93: 	bool hasModifyingCTE; /* has INSERT/UPDATE/DELETE in WITH */
94: 	bool hasForUpdate;    /* FOR [KEY] UPDATE/SHARE was specified */
95: 	bool hasRowSecurity;  /* rewriter has applied some RLS policy */
96: 
97: 	PGList *cteList; /* WITH list (of CommonTableExpr's) */
98: 
99: 	PGList *rtable;       /* list of range table entries */
100: 	PGFromExpr *jointree; /* table join tree (FROM and WHERE clauses) */
101: 
102: 	PGList *targetList; /* target list (of PGTargetEntry) */
103: 
104: 	PGOverridingKind override; /* OVERRIDING clause */
105: 
106: 	PGOnConflictExpr *onConflict; /* ON CONFLICT DO [NOTHING | UPDATE] */
107: 
108: 	PGList *returningList; /* return-values list (of PGTargetEntry) */
109: 
110: 	PGList *groupClause; /* a list of SortGroupClause's */
111: 
112: 	PGList *groupingSets; /* a list of GroupingSet's if present */
113: 
114: 	PGNode *havingQual; /* qualifications applied to groups */
115: 
116: 	PGList *windowClause; /* a list of WindowClause's */
117: 
118: 	PGList *distinctClause; /* a list of SortGroupClause's */
119: 
120: 	PGList *sortClause; /* a list of SortGroupClause's */
121: 
122: 	PGNode *limitOffset; /* # of result tuples to skip (int8_t expr) */
123: 	PGNode *limitCount;  /* # of result tuples to return (int8_t expr) */
124: 
125: 	PGList *rowMarks; /* a list of RowMarkClause's */
126: 
127: 	PGNode *setOperations; /* set-operation tree if this is top level of
128: 								 * a UNION/INTERSECT/EXCEPT query */
129: 
130: 	PGList *constraintDeps; /* a list of pg_constraint OIDs that the query
131: 								 * depends on to be semantically valid */
132: 
133: 	PGList *withCheckOptions; /* a list of WithCheckOption's, which are
134: 									 * only added during rewrite and therefore
135: 									 * are not written out as part of Query. */
136: 
137: 	/*
138: 	 * The following two fields identify the portion of the source text string
139: 	 * containing this query.  They are typically only populated in top-level
140: 	 * Queries, not in sub-queries.  When not set, they might both be zero, or
141: 	 * both be -1 meaning "unknown".
142: 	 */
143: 	int stmt_location; /* start location, or -1 if unknown */
144: 	int stmt_len;      /* length in bytes; 0 means "rest of string" */
145: } PGQuery;
146: 
147: /****************************************************************************
148:  *	Supporting data structures for Parse Trees
149:  *
150:  *	Most of these node types appear in raw parsetrees output by the grammar,
151:  *	and get transformed to something else by the analyzer.  A few of them
152:  *	are used as-is in transformed querytrees.
153:  ****************************************************************************/
154: 
155: /*
156:  * PGTypeName - specifies a type in definitions
157:  *
158:  * For PGTypeName structures generated internally, it is often easier to
159:  * specify the type by OID than by name.  If "names" is NIL then the
160:  * actual type OID is given by typeOid, otherwise typeOid is unused.
161:  * Similarly, if "typmods" is NIL then the actual typmod is expected to
162:  * be prespecified in typemod, otherwise typemod is unused.
163:  *
164:  * If pct_type is true, then names is actually a field name and we look up
165:  * the type of that field.  Otherwise (the normal case), names is a type
166:  * name possibly qualified with schema and database name.
167:  */
168: typedef struct PGTypeName {
169: 	PGNodeTag type;
170: 	PGList *names;       /* qualified name (list of PGValue strings) */
171: 	PGOid typeOid;       /* type identified by OID */
172: 	bool setof;          /* is a set? */
173: 	bool pct_type;       /* %TYPE specified? */
174: 	PGList *typmods;     /* type modifier expression(s) */
175: 	int32_t typemod;     /* prespecified type modifier */
176: 	PGList *arrayBounds; /* array bounds */
177: 	int location;        /* token location, or -1 if unknown */
178: } PGTypeName;
179: 
180: /*
181:  * PGColumnRef - specifies a reference to a column, or possibly a whole tuple
182:  *
183:  * The "fields" list must be nonempty.  It can contain string PGValue nodes
184:  * (representing names) and PGAStar nodes (representing occurrence of a '*').
185:  * Currently, PGAStar must appear only as the last list element --- the grammar
186:  * is responsible for enforcing this!
187:  *
188:  * Note: any array subscripting or selection of fields from composite columns
189:  * is represented by an PGAIndirection node above the ColumnRef.  However,
190:  * for simplicity in the normal case, initial field selection from a table
191:  * name is represented within PGColumnRef and not by adding AIndirection.
192:  */
193: typedef struct PGColumnRef {
194: 	PGNodeTag type;
195: 	PGList *fields;       /* field names (PGValue strings) or PGAStar */
196: 	int location;         /* token location, or -1 if unknown */
197: } PGColumnRef;
198: 
199: /*
200:  * PGParamRef - specifies a $n parameter reference
201:  */
202: typedef struct PGParamRef {
203: 	PGNodeTag type;
204: 	int number;   /* the number of the parameter */
205: 	int location; /* token location, or -1 if unknown */
206: } PGParamRef;
207: 
208: /*
209:  * PGAExpr - infix, prefix, and postfix expressions
210:  */
211: typedef enum PGAExpr_Kind {
212: 	PG_AEXPR_OP,              /* normal operator */
213: 	PG_AEXPR_OP_ANY,          /* scalar op ANY (array) */
214: 	PG_AEXPR_OP_ALL,          /* scalar op ALL (array) */
215: 	PG_AEXPR_DISTINCT,        /* IS DISTINCT FROM - name must be "=" */
216: 	PG_AEXPR_NOT_DISTINCT,    /* IS NOT DISTINCT FROM - name must be "=" */
217: 	PG_AEXPR_NULLIF,          /* NULLIF - name must be "=" */
218: 	PG_AEXPR_OF,              /* IS [NOT] OF - name must be "=" or "<>" */
219: 	PG_AEXPR_IN,              /* [NOT] IN - name must be "=" or "<>" */
220: 	PG_AEXPR_LIKE,            /* [NOT] LIKE - name must be "~~" or "!~~" */
221: 	PG_AEXPR_ILIKE,           /* [NOT] ILIKE - name must be "~~*" or "!~~*" */
222: 	PG_AEXPR_GLOB,            /* [NOT] GLOB - name must be "~~~" or "!~~~" */
223: 	PG_AEXPR_SIMILAR,         /* [NOT] SIMILAR - name must be "~" or "!~" */
224: 	PG_AEXPR_BETWEEN,         /* name must be "BETWEEN" */
225: 	PG_AEXPR_NOT_BETWEEN,     /* name must be "NOT BETWEEN" */
226: 	PG_AEXPR_BETWEEN_SYM,     /* name must be "BETWEEN SYMMETRIC" */
227: 	PG_AEXPR_NOT_BETWEEN_SYM, /* name must be "NOT BETWEEN SYMMETRIC" */
228: 	AEXPR_PAREN               /* nameless dummy node for parentheses */
229: } PGAExpr_Kind;
230: 
231: typedef struct PGAExpr {
232: 	PGNodeTag type;
233: 	PGAExpr_Kind kind; /* see above */
234: 	PGList *name;      /* possibly-qualified name of operator */
235: 	PGNode *lexpr;     /* left argument, or NULL if none */
236: 	PGNode *rexpr;     /* right argument, or NULL if none */
237: 	int location;      /* token location, or -1 if unknown */
238: } PGAExpr;
239: 
240: /*
241:  * PGAConst - a literal constant
242:  */
243: typedef struct PGAConst {
244: 	PGNodeTag type;
245: 	PGValue val;  /* value (includes type info, see value.h) */
246: 	int location; /* token location, or -1 if unknown */
247: } PGAConst;
248: 
249: /*
250:  * PGTypeCast - a CAST expression
251:  */
252: typedef struct PGTypeCast {
253: 	PGNodeTag type;
254: 	PGNode *arg;          /* the expression being casted */
255: 	PGTypeName *typeName; /* the target type */
256: 	int tryCast;          /* TRY_CAST or CAST */
257: 	int location;         /* token location, or -1 if unknown */
258: } PGTypeCast;
259: 
260: /*
261:  * PGCollateClause - a COLLATE expression
262:  */
263: typedef struct PGCollateClause {
264: 	PGNodeTag type;
265: 	PGNode *arg;      /* input expression */
266: 	PGList *collname; /* possibly-qualified collation name */
267: 	int location;     /* token location, or -1 if unknown */
268: } PGCollateClause;
269: 
270: /*
271:  * PGFuncCall - a function or aggregate invocation
272:  *
273:  * agg_order (if not NIL) indicates we saw 'foo(... ORDER BY ...)', or if
274:  * agg_within_group is true, it was 'foo(...) WITHIN GROUP (ORDER BY ...)'.
275:  * agg_star indicates we saw a 'foo(*)' construct, while agg_distinct
276:  * indicates we saw 'foo(DISTINCT ...)'.  In any of these cases, the
277:  * construct *must* be an aggregate call.  Otherwise, it might be either an
278:  * aggregate or some other kind of function.  However, if FILTER or OVER is
279:  * present it had better be an aggregate or window function.
280:  *
281:  * Normally, you'd initialize this via makeFuncCall() and then only change the
282:  * parts of the struct its defaults don't match afterwards, as needed.
283:  */
284: typedef struct PGFuncCall {
285: 	PGNodeTag type;
286: 	PGList *funcname;         /* qualified name of function */
287: 	PGList *args;             /* the arguments (list of exprs) */
288: 	PGList *agg_order;        /* ORDER BY (list of PGSortBy) */
289: 	PGNode *agg_filter;       /* FILTER clause, if any */
290: 	bool agg_within_group;    /* ORDER BY appeared in WITHIN GROUP */
291: 	bool agg_star;            /* argument was really '*' */
292: 	bool agg_distinct;        /* arguments were labeled DISTINCT */
293: 	bool func_variadic;       /* last argument was labeled VARIADIC */
294: 	struct PGWindowDef *over; /* OVER clause, if any */
295: 	int location;             /* token location, or -1 if unknown */
296: } PGFuncCall;
297: 
298: /*
299:  * PGAStar - '*' representing all columns of a table or compound field
300:  *
301:  * This can appear within ColumnRef.fields, AIndirection.indirection, and
302:  * ResTarget.indirection lists.
303:  */
304: typedef struct PGAStar {
305: 	PGNodeTag type;
306: 	char *relation;       /* relation name (optional) */
307: 	PGList *except_list;  /* optional: EXCLUDE list */
308: 	PGList *replace_list; /* optional: REPLACE list */
309: } PGAStar;
310: 
311: /*
312:  * PGAIndices - array subscript or slice bounds ([idx] or [lidx:uidx])
313:  *
314:  * In slice case, either or both of lidx and uidx can be NULL (omitted).
315:  * In non-slice case, uidx holds the single subscript and lidx is always NULL.
316:  */
317: typedef struct PGAIndices {
318: 	PGNodeTag type;
319: 	bool is_slice; /* true if slice (i.e., colon present) */
320: 	PGNode *lidx;  /* slice lower bound, if any */
321: 	PGNode *uidx;  /* subscript, or slice upper bound if any */
322: } PGAIndices;
323: 
324: /*
325:  * PGAIndirection - select a field and/or array element from an expression
326:  *
327:  * The indirection list can contain PGAIndices nodes (representing
328:  * subscripting), string PGValue nodes (representing field selection --- the
329:  * string value is the name of the field to select), and PGAStar nodes
330:  * (representing selection of all fields of a composite type).
331:  * For example, a complex selection operation like
332:  *				(foo).field1[42][7].field2
333:  * would be represented with a single PGAIndirection node having a 4-element
334:  * indirection list.
335:  *
336:  * Currently, PGAStar must appear only as the last list element --- the grammar
337:  * is responsible for enforcing this!
338:  */
339: typedef struct PGAIndirection {
340: 	PGNodeTag type;
341: 	PGNode *arg;         /* the thing being selected from */
342: 	PGList *indirection; /* subscripts and/or field names and/or * */
343: } PGAIndirection;
344: 
345: /*
346:  * PGAArrayExpr - an ARRAY[] construct
347:  */
348: typedef struct PGAArrayExpr {
349: 	PGNodeTag type;
350: 	PGList *elements; /* array element expressions */
351: 	int location;     /* token location, or -1 if unknown */
352: } PGAArrayExpr;
353: 
354: /*
355:  * PGResTarget -
356:  *	  result target (used in target list of pre-transformed parse trees)
357:  *
358:  * In a SELECT target list, 'name' is the column label from an
359:  * 'AS ColumnLabel' clause, or NULL if there was none, and 'val' is the
360:  * value expression itself.  The 'indirection' field is not used.
361:  *
362:  * INSERT uses PGResTarget in its target-column-names list.  Here, 'name' is
363:  * the name of the destination column, 'indirection' stores any subscripts
364:  * attached to the destination, and 'val' is not used.
365:  *
366:  * In an UPDATE target list, 'name' is the name of the destination column,
367:  * 'indirection' stores any subscripts attached to the destination, and
368:  * 'val' is the expression to assign.
369:  *
370:  * See PGAIndirection for more info about what can appear in 'indirection'.
371:  */
372: typedef struct PGResTarget {
373: 	PGNodeTag type;
374: 	char *name;          /* column name or NULL */
375: 	PGList *indirection; /* subscripts, field names, and '*', or NIL */
376: 	PGNode *val;         /* the value expression to compute or assign */
377: 	int location;        /* token location, or -1 if unknown */
378: } PGResTarget;
379: 
380: /*
381:  * PGMultiAssignRef - element of a row source expression for UPDATE
382:  *
383:  * In an UPDATE target list, when we have SET (a,b,c) = row-valued-expression,
384:  * we generate separate PGResTarget items for each of a,b,c.  Their "val" trees
385:  * are PGMultiAssignRef nodes numbered 1..n, linking to a common copy of the
386:  * row-valued-expression (which parse analysis will process only once, when
387:  * handling the PGMultiAssignRef with colno=1).
388:  */
389: typedef struct PGMultiAssignRef {
390: 	PGNodeTag type;
391: 	PGNode *source; /* the row-valued expression */
392: 	int colno;      /* column number for this target (1..n) */
393: 	int ncolumns;   /* number of targets in the construct */
394: } PGMultiAssignRef;
395: 
396: /*
397:  * PGSortBy - for ORDER BY clause
398:  */
399: typedef struct PGSortBy {
400: 	PGNodeTag type;
401: 	PGNode *node;               /* expression to sort on */
402: 	PGSortByDir sortby_dir;     /* ASC/DESC/USING/default */
403: 	PGSortByNulls sortby_nulls; /* NULLS FIRST/LAST */
404: 	PGList *useOp;              /* name of op to use, if SORTBY_USING */
405: 	int location;               /* operator location, or -1 if none/unknown */
406: } PGSortBy;
407: 
408: /*
409:  * PGWindowDef - raw representation of WINDOW and OVER clauses
410:  *
411:  * For entries in a WINDOW list, "name" is the window name being defined.
412:  * For OVER clauses, we use "name" for the "OVER window" syntax, or "refname"
413:  * for the "OVER (window)" syntax, which is subtly different --- the latter
414:  * implies overriding the window frame clause.
415:  */
416: typedef struct PGWindowDef {
417: 	PGNodeTag type;
418: 	char *name;              /* window's own name */
419: 	char *refname;           /* referenced window name, if any */
420: 	PGList *partitionClause; /* PARTITION BY expression list */
421: 	PGList *orderClause;     /* ORDER BY (list of PGSortBy) */
422: 	int frameOptions;        /* frame_clause options, see below */
423: 	PGNode *startOffset;     /* expression for starting bound, if any */
424: 	PGNode *endOffset;       /* expression for ending bound, if any */
425: 	int location;            /* parse location, or -1 if none/unknown */
426: } PGWindowDef;
427: 
428: /*
429:  * frameOptions is an OR of these bits.  The NONDEFAULT and BETWEEN bits are
430:  * used so that ruleutils.c can tell which properties were specified and
431:  * which were defaulted; the correct behavioral bits must be set either way.
432:  * The START_foo and END_foo options must come in pairs of adjacent bits for
433:  * the convenience of gram.y, even though some of them are useless/invalid.
434:  * We will need more bits (and fields) to cover the full SQL:2008 option set.
435:  */
436: #define FRAMEOPTION_NONDEFAULT 0x00001 /* any specified? */
437: #define FRAMEOPTION_RANGE 0x00002 /* RANGE behavior */
438: #define FRAMEOPTION_ROWS 0x00004 /* ROWS behavior */
439: #define FRAMEOPTION_BETWEEN 0x00008 /* BETWEEN given? */
440: #define FRAMEOPTION_START_UNBOUNDED_PRECEDING 0x00010 /* start is U. P. */
441: #define FRAMEOPTION_END_UNBOUNDED_PRECEDING 0x00020 /* (disallowed) */
442: #define FRAMEOPTION_START_UNBOUNDED_FOLLOWING 0x00040 /* (disallowed) */
443: #define FRAMEOPTION_END_UNBOUNDED_FOLLOWING 0x00080 /* end is U. F. */
444: #define FRAMEOPTION_START_CURRENT_ROW 0x00100 /* start is C. R. */
445: #define FRAMEOPTION_END_CURRENT_ROW 0x00200 /* end is C. R. */
446: #define FRAMEOPTION_START_VALUE_PRECEDING 0x00400 /* start is V. P. */
447: #define FRAMEOPTION_END_VALUE_PRECEDING 0x00800 /* end is V. P. */
448: #define FRAMEOPTION_START_VALUE_FOLLOWING 0x01000 /* start is V. F. */
449: #define FRAMEOPTION_END_VALUE_FOLLOWING 0x02000 /* end is V. F. */
450: 
451: #define FRAMEOPTION_START_VALUE (FRAMEOPTION_START_VALUE_PRECEDING | FRAMEOPTION_START_VALUE_FOLLOWING)
452: #define FRAMEOPTION_END_VALUE (FRAMEOPTION_END_VALUE_PRECEDING | FRAMEOPTION_END_VALUE_FOLLOWING)
453: 
454: #define FRAMEOPTION_DEFAULTS (FRAMEOPTION_RANGE | FRAMEOPTION_START_UNBOUNDED_PRECEDING | FRAMEOPTION_END_CURRENT_ROW)
455: 
456: /*
457:  * PGRangeSubselect - subquery appearing in a FROM clause
458:  */
459: typedef struct PGRangeSubselect {
460: 	PGNodeTag type;
461: 	bool lateral;     /* does it have LATERAL prefix? */
462: 	PGNode *subquery; /* the untransformed sub-select clause */
463: 	PGAlias *alias;   /* table alias & optional column aliases */
464: 	PGNode *sample;   /* sample options (if any) */
465: } PGRangeSubselect;
466: 
467: /*
468:  * PGRangeFunction - function call appearing in a FROM clause
469:  *
470:  * functions is a PGList because we use this to represent the construct
471:  * ROWS FROM(func1(...), func2(...), ...).  Each element of this list is a
472:  * two-element sublist, the first element being the untransformed function
473:  * call tree, and the second element being a possibly-empty list of PGColumnDef
474:  * nodes representing any columndef list attached to that function within the
475:  * ROWS FROM() syntax.
476:  *
477:  * alias and coldeflist represent any alias and/or columndef list attached
478:  * at the top level.  (We disallow coldeflist appearing both here and
479:  * per-function, but that's checked in parse analysis, not by the grammar.)
480:  */
481: typedef struct PGRangeFunction {
482: 	PGNodeTag type;
483: 	bool lateral;       /* does it have LATERAL prefix? */
484: 	bool ordinality;    /* does it have WITH ORDINALITY suffix? */
485: 	bool is_rowsfrom;   /* is result of ROWS FROM() syntax? */
486: 	PGList *functions;  /* per-function information, see above */
487: 	PGAlias *alias;     /* table alias & optional column aliases */
488: 	PGList *coldeflist; /* list of PGColumnDef nodes to describe result
489: 								 * of function returning RECORD */
490: 	PGNode *sample;   /* sample options (if any) */
491: } PGRangeFunction;
492: 
493: /*
494:  * PGColumnDef - column definition (used in various creates)
495:  *
496:  * If the column has a default value, we may have the value expression
497:  * in either "raw" form (an untransformed parse tree) or "cooked" form
498:  * (a post-parse-analysis, executable expression tree), depending on
499:  * how this PGColumnDef node was created (by parsing, or by inheritance
500:  * from an existing relation).  We should never have both in the same node!
501:  *
502:  * Similarly, we may have a COLLATE specification in either raw form
503:  * (represented as a PGCollateClause with arg==NULL) or cooked form
504:  * (the collation's OID).
505:  *
506:  * The constraints list may contain a PG_CONSTR_DEFAULT item in a raw
507:  * parsetree produced by gram.y, but transformCreateStmt will remove
508:  * the item and set raw_default instead.  PG_CONSTR_DEFAULT items
509:  * should not appear in any subsequent processing.
510:  */
511: typedef struct PGColumnDef {
512: 	PGNodeTag type;
513: 	char *colname;                /* name of column */
514: 	PGTypeName *typeName;         /* type of column */
515: 	int inhcount;                 /* number of times column is inherited */
516: 	bool is_local;                /* column has local (non-inherited) def'n */
517: 	bool is_not_null;             /* NOT NULL constraint specified? */
518: 	bool is_from_type;            /* column definition came from table type */
519: 	bool is_from_parent;          /* column def came from partition parent */
520: 	char storage;                 /* attstorage setting, or 0 for default */
521: 	PGNode *raw_default;          /* default value (untransformed parse tree) */
522: 	PGNode *cooked_default;       /* default value (transformed expr tree) */
523: 	char identity;                /* attidentity setting */
524: 	PGRangeVar *identitySequence; /* to store identity sequence name for ALTER
525: 								   * TABLE ... ADD COLUMN */
526: 	PGCollateClause *collClause;  /* untransformed COLLATE spec, if any */
527: 	PGOid collOid;                /* collation OID (InvalidOid if not set) */
528: 	PGList *constraints;          /* other constraints on column */
529: 	PGList *fdwoptions;           /* per-column FDW options */
530: 	int location;                 /* parse location, or -1 if none/unknown */
531: } PGColumnDef;
532: 
533: /*
534:  * PGTableLikeClause - CREATE TABLE ( ... LIKE ... ) clause
535:  */
536: typedef struct PGTableLikeClause {
537: 	PGNodeTag type;
538: 	PGRangeVar *relation;
539: 	uint32_t options; /* OR of PGTableLikeOption flags */
540: } PGTableLikeClause;
541: 
542: typedef enum PGTableLikeOption {
543: 	PG_CREATE_TABLE_LIKE_DEFAULTS = 1 << 0,
544: 	PG_CREATE_TABLE_LIKE_CONSTRAINTS = 1 << 1,
545: 	PG_CREATE_TABLE_LIKE_IDENTITY = 1 << 2,
546: 	PG_CREATE_TABLE_LIKE_INDEXES = 1 << 3,
547: 	PG_CREATE_TABLE_LIKE_STORAGE = 1 << 4,
548: 	PG_CREATE_TABLE_LIKE_COMMENTS = 1 << 5,
549: 	PG_CREATE_TABLE_LIKE_STATISTICS = 1 << 6,
550: 	PG_CREATE_TABLE_LIKE_ALL = INT_MAX
551: } PGTableLikeOption;
552: 
553: /*
554:  * PGIndexElem - index parameters (used in CREATE INDEX, and in ON CONFLICT)
555:  *
556:  * For a plain index attribute, 'name' is the name of the table column to
557:  * index, and 'expr' is NULL.  For an index expression, 'name' is NULL and
558:  * 'expr' is the expression tree.
559:  */
560: typedef struct PGIndexElem {
561: 	PGNodeTag type;
562: 	char *name;                   /* name of attribute to index, or NULL */
563: 	PGNode *expr;                 /* expression to index, or NULL */
564: 	char *indexcolname;           /* name for index column; NULL = default */
565: 	PGList *collation;            /* name of collation; NIL = default */
566: 	PGList *opclass;              /* name of desired opclass; NIL = default */
567: 	PGSortByDir ordering;         /* ASC/DESC/default */
568: 	PGSortByNulls nulls_ordering; /* FIRST/LAST/default */
569: } PGIndexElem;
570: 
571: /*
572:  * PGDefElem - a generic "name = value" option definition
573:  *
574:  * In some contexts the name can be qualified.  Also, certain SQL commands
575:  * allow a SET/ADD/DROP action to be attached to option settings, so it's
576:  * convenient to carry a field for that too.  (Note: currently, it is our
577:  * practice that the grammar allows namespace and action only in statements
578:  * where they are relevant; C code can just ignore those fields in other
579:  * statements.)
580:  */
581: typedef enum PGDefElemAction {
582: 	PG_DEFELEM_UNSPEC, /* no action given */
583: 	PG_DEFELEM_SET,
584: 	PG_DEFELEM_ADD,
585: 	DEFELEM_DROP
586: } PGDefElemAction;
587: 
588: typedef struct PGDefElem {
589: 	PGNodeTag type;
590: 	char *defnamespace; /* NULL if unqualified name */
591: 	char *defname;
592: 	PGNode *arg;               /* a (PGValue *) or a (PGTypeName *) */
593: 	PGDefElemAction defaction; /* unspecified action, or SET/ADD/DROP */
594: 	int location;              /* token location, or -1 if unknown */
595: } PGDefElem;
596: 
597: /*
598:  * PGLockingClause - raw representation of FOR [NO KEY] UPDATE/[KEY] SHARE
599:  *		options
600:  *
601:  * Note: lockedRels == NIL means "all relations in query".  Otherwise it
602:  * is a list of PGRangeVar nodes.  (We use PGRangeVar mainly because it carries
603:  * a location field --- currently, parse analysis insists on unqualified
604:  * names in LockingClause.)
605:  */
606: typedef struct PGLockingClause {
607: 	PGNodeTag type;
608: 	PGList *lockedRels; /* FOR [KEY] UPDATE/SHARE relations */
609: 	PGLockClauseStrength strength;
610: 	PGLockWaitPolicy waitPolicy; /* NOWAIT and SKIP LOCKED */
611: } PGLockingClause;
612: 
613: /****************************************************************************
614:  *	Nodes for a PGQuery tree
615:  ****************************************************************************/
616: 
617: /*--------------------
618:  * PGRangeTblEntry -
619:  *	  A range table is a PGList of PGRangeTblEntry nodes.
620:  *
621:  *	  A range table entry may represent a plain relation, a sub-select in
622:  *	  FROM, or the result of a JOIN clause.  (Only explicit JOIN syntax
623:  *	  produces an RTE, not the implicit join resulting from multiple FROM
624:  *	  items.  This is because we only need the RTE to deal with SQL features
625:  *	  like outer joins and join-output-column aliasing.)  Other special
626:  *	  RTE types also exist, as indicated by RTEKind.
627:  *
628:  *	  Note that we consider PG_RTE_RELATION to cover anything that has a pg_class
629:  *	  entry.  relkind distinguishes the sub-cases.
630:  *
631:  *	  alias is an PGAlias node representing the AS alias-clause attached to the
632:  *	  FROM expression, or NULL if no clause.
633:  *
634:  *	  eref is the table reference name and column reference names (either
635:  *	  real or aliases).  Note that system columns (OID etc) are not included
636:  *	  in the column list.
637:  *	  eref->aliasname is required to be present, and should generally be used
638:  *	  to identify the RTE for error messages etc.
639:  *
640:  *	  In RELATION RTEs, the colnames in both alias and eref are indexed by
641:  *	  physical attribute number; this means there must be colname entries for
642:  *	  dropped columns.  When building an RTE we insert empty strings ("") for
643:  *	  dropped columns.  Note however that a stored rule may have nonempty
644:  *	  colnames for columns dropped since the rule was created (and for that
645:  *	  matter the colnames might be out of date due to column renamings).
646:  *	  The same comments apply to FUNCTION RTEs when a function's return type
647:  *	  is a named composite type.
648:  *
649:  *	  In JOIN RTEs, the colnames in both alias and eref are one-to-one with
650:  *	  joinaliasvars entries.  A JOIN RTE will omit columns of its inputs when
651:  *	  those columns are known to be dropped at parse time.  Again, however,
652:  *	  a stored rule might contain entries for columns dropped since the rule
653:  *	  was created.  (This is only possible for columns not actually referenced
654:  *	  in the rule.)  When loading a stored rule, we replace the joinaliasvars
655:  *	  items for any such columns with null pointers.  (We can't simply delete
656:  *	  them from the joinaliasvars list, because that would affect the attnums
657:  *	  of Vars referencing the rest of the list.)
658:  *
659:  *	  inh is true for relation references that should be expanded to include
660:  *	  inheritance children, if the rel has any.  This *must* be false for
661:  *	  RTEs other than PG_RTE_RELATION entries.
662:  *
663:  *	  inFromCl marks those range variables that are listed in the FROM clause.
664:  *	  It's false for RTEs that are added to a query behind the scenes, such
665:  *	  as the NEW and OLD variables for a rule, or the subqueries of a UNION.
666:  *	  This flag is not used anymore during parsing, since the parser now uses
667:  *	  a separate "namespace" data structure to control visibility, but it is
668:  *	  needed by ruleutils.c to determine whether RTEs should be shown in
669:  *	  decompiled queries.
670:  *--------------------
671:  */
672: typedef enum PGRTEKind {
673: 	PG_RTE_RELATION,    /* ordinary relation reference */
674: 	PG_RTE_SUBQUERY,    /* subquery in FROM */
675: 	PG_RTE_JOIN,        /* join */
676: 	PG_RTE_FUNCTION,    /* function in FROM */
677: 	PG_RTE_TABLEFUNC,   /* TableFunc(.., column list) */
678: 	PG_RTE_VALUES,      /* VALUES (<exprlist>), (<exprlist>), ... */
679: 	PG_RTE_CTE,         /* common table expr (WITH list element) */
680: 	RTE_NAMEDTUPLESTORE /* tuplestore, e.g. for AFTER triggers */
681: } PGRTEKind;
682: 
683: typedef struct PGRangeTblEntry {
684: 	PGNodeTag type;
685: 
686: 	PGRTEKind rtekind; /* see above */
687: 
688: 	/*
689: 	 * XXX the fields applicable to only some rte kinds should be merged into
690: 	 * a union.  I didn't do this yet because the diffs would impact a lot of
691: 	 * code that is being actively worked on.  FIXME someday.
692: 	 */
693: 
694: 	/*
695: 	 * Fields valid for a plain relation RTE (else zero):
696: 	 *
697: 	 * As a special case, RTE_NAMEDTUPLESTORE can also set relid to indicate
698: 	 * that the tuple format of the tuplestore is the same as the referenced
699: 	 * relation.  This allows plans referencing AFTER trigger transition
700: 	 * tables to be invalidated if the underlying table is altered.
701: 	 */
702: 	PGOid relid;                             /* OID of the relation */
703: 	char relkind;                            /* relation kind (see pg_class.relkind) */
704: 	struct PGTableSampleClause *tablesample; /* sampling info, or NULL */
705: 
706: 	/*
707: 	 * Fields valid for a subquery RTE (else NULL):
708: 	 */
709: 	PGQuery *subquery; /* the sub-query */
710: 
711: 	/*
712: 	 * Fields valid for a join RTE (else NULL/zero):
713: 	 *
714: 	 * joinaliasvars is a list of (usually) Vars corresponding to the columns
715: 	 * of the join result.  An alias PGVar referencing column K of the join
716: 	 * result can be replaced by the K'th element of joinaliasvars --- but to
717: 	 * simplify the task of reverse-listing aliases correctly, we do not do
718: 	 * that until planning time.  In detail: an element of joinaliasvars can
719: 	 * be a PGVar of one of the join's input relations, or such a PGVar with an
720: 	 * implicit coercion to the join's output column type, or a COALESCE
721: 	 * expression containing the two input column Vars (possibly coerced).
722: 	 * Within a PGQuery loaded from a stored rule, it is also possible for
723: 	 * joinaliasvars items to be null pointers, which are placeholders for
724: 	 * (necessarily unreferenced) columns dropped since the rule was made.
725: 	 * Also, once planning begins, joinaliasvars items can be almost anything,
726: 	 * as a result of subquery-flattening substitutions.
727: 	 */
728: 	PGJoinType jointype;   /* type of join */
729: 	PGList *joinaliasvars; /* list of alias-var expansions */
730: 
731: 	/*
732: 	 * Fields valid for a function RTE (else NIL/zero):
733: 	 *
734: 	 * When funcordinality is true, the eref->colnames list includes an alias
735: 	 * for the ordinality column.  The ordinality column is otherwise
736: 	 * implicit, and must be accounted for "by hand" in places such as
737: 	 * expandRTE().
738: 	 */
739: 	PGList *functions;   /* list of PGRangeTblFunction nodes */
740: 	bool funcordinality; /* is this called WITH ORDINALITY? */
741: 
742: 	/*
743: 	 * Fields valid for a PGTableFunc RTE (else NULL):
744: 	 */
745: 	PGTableFunc *tablefunc;
746: 
747: 	/*
748: 	 * Fields valid for a values RTE (else NIL):
749: 	 */
750: 	PGList *values_lists; /* list of expression lists */
751: 
752: 	/*
753: 	 * Fields valid for a CTE RTE (else NULL/zero):
754: 	 */
755: 	char *ctename;       /* name of the WITH list item */
756: 	PGIndex ctelevelsup; /* number of query levels up */
757: 	bool self_reference; /* is this a recursive self-reference? */
758: 
759: 	/*
760: 	 * Fields valid for table functions, values, CTE and ENR RTEs (else NIL):
761: 	 *
762: 	 * We need these for CTE RTEs so that the types of self-referential
763: 	 * columns are well-defined.  For VALUES RTEs, storing these explicitly
764: 	 * saves having to re-determine the info by scanning the values_lists. For
765: 	 * ENRs, we store the types explicitly here (we could get the information
766: 	 * from the catalogs if 'relid' was supplied, but we'd still need these
767: 	 * for TupleDesc-based ENRs, so we might as well always store the type
768: 	 * info here).
769: 	 *
770: 	 * For ENRs only, we have to consider the possibility of dropped columns.
771: 	 * A dropped column is included in these lists, but it will have zeroes in
772: 	 * all three lists (as well as an empty-string entry in eref).  Testing
773: 	 * for zero coltype is the standard way to detect a dropped column.
774: 	 */
775: 	PGList *coltypes;      /* OID list of column type OIDs */
776: 	PGList *coltypmods;    /* integer list of column typmods */
777: 	PGList *colcollations; /* OID list of column collation OIDs */
778: 
779: 	/*
780: 	 * Fields valid for ENR RTEs (else NULL/zero):
781: 	 */
782: 	char *enrname;    /* name of ephemeral named relation */
783: 	double enrtuples; /* estimated or actual from caller */
784: 
785: 	/*
786: 	 * Fields valid in all RTEs:
787: 	 */
788: 	PGAlias *alias; /* user-written alias clause, if any */
789: 	PGAlias *eref;  /* expanded reference names */
790: 	bool lateral;   /* subquery, function, or values is LATERAL? */
791: 	bool inh;       /* inheritance requested? */
792: 	bool inFromCl;  /* present in FROM clause? */
793: } PGRangeTblEntry;
794: 
795: /*
796:  * PGRangeTblFunction -
797:  *	  PGRangeTblEntry subsidiary data for one function in a FUNCTION RTE.
798:  *
799:  * If the function had a column definition list (required for an
800:  * otherwise-unspecified RECORD result), funccolnames lists the names given
801:  * in the definition list, funccoltypes lists their declared column types,
802:  * funccoltypmods lists their typmods, funccolcollations their collations.
803:  * Otherwise, those fields are NIL.
804:  *
805:  * Notice we don't attempt to store info about the results of functions
806:  * returning named composite types, because those can change from time to
807:  * time.  We do however remember how many columns we thought the type had
808:  * (including dropped columns!), so that we can successfully ignore any
809:  * columns added after the query was parsed.
810:  */
811: typedef struct PGRangeTblFunction {
812: 	PGNodeTag type;
813: 
814: 	PGNode *funcexpr; /* expression tree for func call */
815: 	int funccolcount; /* number of columns it contributes to RTE */
816: 	/* These fields record the contents of a column definition list, if any: */
817: 	PGList *funccolnames;      /* column names (list of String) */
818: 	PGList *funccoltypes;      /* OID list of column type OIDs */
819: 	PGList *funccoltypmods;    /* integer list of column typmods */
820: 	PGList *funccolcollations; /* OID list of column collation OIDs */
821: 	/* This is set during planning for use by the executor: */
822: 	PGBitmapset *funcparams; /* PG_PARAM_EXEC PGParam IDs affecting this func */
823: } PGRangeTblFunction;
824: 
825: /*
826:  * PGSortGroupClause -
827:  *		representation of ORDER BY, GROUP BY, PARTITION BY,
828:  *		DISTINCT, DISTINCT ON items
829:  *
830:  * You might think that ORDER BY is only interested in defining ordering,
831:  * and GROUP/DISTINCT are only interested in defining equality.  However,
832:  * one way to implement grouping is to sort and then apply a "uniq"-like
833:  * filter.  So it's also interesting to keep track of possible sort operators
834:  * for GROUP/DISTINCT, and in particular to try to sort for the grouping
835:  * in a way that will also yield a requested ORDER BY ordering.  So we need
836:  * to be able to compare ORDER BY and GROUP/DISTINCT lists, which motivates
837:  * the decision to give them the same representation.
838:  *
839:  * tleSortGroupRef must match ressortgroupref of exactly one entry of the
840:  *		query's targetlist; that is the expression to be sorted or grouped by.
841:  * eqop is the OID of the equality operator.
842:  * sortop is the OID of the ordering operator (a "<" or ">" operator),
843:  *		or InvalidOid if not available.
844:  * nulls_first means about what you'd expect.  If sortop is InvalidOid
845:  *		then nulls_first is meaningless and should be set to false.
846:  * hashable is true if eqop is hashable (note this condition also depends
847:  *		on the datatype of the input expression).
848:  *
849:  * In an ORDER BY item, all fields must be valid.  (The eqop isn't essential
850:  * here, but it's cheap to get it along with the sortop, and requiring it
851:  * to be valid eases comparisons to grouping items.)  Note that this isn't
852:  * actually enough information to determine an ordering: if the sortop is
853:  * collation-sensitive, a collation OID is needed too.  We don't store the
854:  * collation in PGSortGroupClause because it's not available at the time the
855:  * parser builds the PGSortGroupClause; instead, consult the exposed collation
856:  * of the referenced targetlist expression to find out what it is.
857:  *
858:  * In a grouping item, eqop must be valid.  If the eqop is a btree equality
859:  * operator, then sortop should be set to a compatible ordering operator.
860:  * We prefer to set eqop/sortop/nulls_first to match any ORDER BY item that
861:  * the query presents for the same tlist item.  If there is none, we just
862:  * use the default ordering op for the datatype.
863:  *
864:  * If the tlist item's type has a hash opclass but no btree opclass, then
865:  * we will set eqop to the hash equality operator, sortop to InvalidOid,
866:  * and nulls_first to false.  A grouping item of this kind can only be
867:  * implemented by hashing, and of course it'll never match an ORDER BY item.
868:  *
869:  * The hashable flag is provided since we generally have the requisite
870:  * information readily available when the PGSortGroupClause is constructed,
871:  * and it's relatively expensive to get it again later.  Note there is no
872:  * need for a "sortable" flag since OidIsValid(sortop) serves the purpose.
873:  *
874:  * A query might have both ORDER BY and DISTINCT (or DISTINCT ON) clauses.
875:  * In SELECT DISTINCT, the distinctClause list is as long or longer than the
876:  * sortClause list, while in SELECT DISTINCT ON it's typically shorter.
877:  * The two lists must match up to the end of the shorter one --- the parser
878:  * rearranges the distinctClause if necessary to make this true.  (This
879:  * restriction ensures that only one sort step is needed to both satisfy the
880:  * ORDER BY and set up for the PGUnique step.  This is semantically necessary
881:  * for DISTINCT ON, and presents no real drawback for DISTINCT.)
882:  */
883: typedef struct PGSortGroupClause {
884: 	PGNodeTag type;
885: 	PGIndex tleSortGroupRef; /* reference into targetlist */
886: 	PGOid eqop;              /* the equality operator ('=' op) */
887: 	PGOid sortop;            /* the ordering operator ('<' op), or 0 */
888: 	bool nulls_first;        /* do NULLs come before normal values? */
889: 	bool hashable;           /* can eqop be implemented by hashing? */
890: } PGSortGroupClause;
891: 
892: /*
893:  * PGGroupingSet -
894:  *		representation of CUBE, ROLLUP and GROUPING SETS clauses
895:  *
896:  * In a PGQuery with grouping sets, the groupClause contains a flat list of
897:  * PGSortGroupClause nodes for each distinct expression used.  The actual
898:  * structure of the GROUP BY clause is given by the groupingSets tree.
899:  *
900:  * In the raw parser output, PGGroupingSet nodes (of all types except SIMPLE
901:  * which is not used) are potentially mixed in with the expressions in the
902:  * groupClause of the SelectStmt.  (An expression can't contain a PGGroupingSet,
903:  * but a list may mix PGGroupingSet and expression nodes.)  At this stage, the
904:  * content of each node is a list of expressions, some of which may be RowExprs
905:  * which represent sublists rather than actual row constructors, and nested
906:  * PGGroupingSet nodes where legal in the grammar.  The structure directly
907:  * reflects the query syntax.
908:  *
909:  * In parse analysis, the transformed expressions are used to build the tlist
910:  * and groupClause list (of PGSortGroupClause nodes), and the groupingSets tree
911:  * is eventually reduced to a fixed format:
912:  *
913:  * EMPTY nodes represent (), and obviously have no content
914:  *
915:  * SIMPLE nodes represent a list of one or more expressions to be treated as an
916:  * atom by the enclosing structure; the content is an integer list of
917:  * ressortgroupref values (see PGSortGroupClause)
918:  *
919:  * CUBE and ROLLUP nodes contain a list of one or more SIMPLE nodes.
920:  *
921:  * SETS nodes contain a list of EMPTY, SIMPLE, CUBE or ROLLUP nodes, but after
922:  * parse analysis they cannot contain more SETS nodes; enough of the syntactic
923:  * transforms of the spec have been applied that we no longer have arbitrarily
924:  * deep nesting (though we still preserve the use of cube/rollup).
925:  *
926:  * Note that if the groupingSets tree contains no SIMPLE nodes (only EMPTY
927:  * nodes at the leaves), then the groupClause will be empty, but this is still
928:  * an aggregation query (similar to using aggs or HAVING without GROUP BY).
929:  *
930:  * As an example, the following clause:
931:  *
932:  * GROUP BY GROUPING SETS ((a,b), CUBE(c,(d,e)))
933:  *
934:  * looks like this after raw parsing:
935:  *
936:  * SETS( RowExpr(a,b) , CUBE( c, RowExpr(d,e) ) )
937:  *
938:  * and parse analysis converts it to:
939:  *
940:  * SETS( SIMPLE(1,2), CUBE( SIMPLE(3), SIMPLE(4,5) ) )
941:  */
942: typedef enum {
943: 	GROUPING_SET_EMPTY,
944: 	GROUPING_SET_SIMPLE,
945: 	GROUPING_SET_ROLLUP,
946: 	GROUPING_SET_CUBE,
947: 	GROUPING_SET_SETS
948: } GroupingSetKind;
949: 
950: typedef struct PGGroupingSet {
951: 	PGNodeTag type;
952: 	GroupingSetKind kind;
953: 	PGList *content;
954: 	int location;
955: } PGGroupingSet;
956: 
957: /*
958:  * PGWindowClause -
959:  *		transformed representation of WINDOW and OVER clauses
960:  *
961:  * A parsed Query's windowClause list contains these structs.  "name" is set
962:  * if the clause originally came from WINDOW, and is NULL if it originally
963:  * was an OVER clause (but note that we collapse out duplicate OVERs).
964:  * partitionClause and orderClause are lists of PGSortGroupClause structs.
965:  * winref is an ID number referenced by PGWindowFunc nodes; it must be unique
966:  * among the members of a Query's windowClause list.
967:  * When refname isn't null, the partitionClause is always copied from there;
968:  * the orderClause might or might not be copied (see copiedOrder); the framing
969:  * options are never copied, per spec.
970:  */
971: typedef struct PGWindowClause {
972: 	PGNodeTag type;
973: 	char *name;              /* window name (NULL in an OVER clause) */
974: 	char *refname;           /* referenced window name, if any */
975: 	PGList *partitionClause; /* PARTITION BY list */
976: 	PGList *orderClause;     /* ORDER BY list */
977: 	int frameOptions;        /* frame_clause options, see PGWindowDef */
978: 	PGNode *startOffset;     /* expression for starting bound, if any */
979: 	PGNode *endOffset;       /* expression for ending bound, if any */
980: 	PGIndex winref;          /* ID referenced by window functions */
981: 	bool copiedOrder;        /* did we copy orderClause from refname? */
982: } PGWindowClause;
983: 
984: /*
985:  * RowMarkClause -
986:  *	   parser output representation of FOR [KEY] UPDATE/SHARE clauses
987:  *
988:  * Query.rowMarks contains a separate RowMarkClause node for each relation
989:  * identified as a FOR [KEY] UPDATE/SHARE target.  If one of these clauses
990:  * is applied to a subquery, we generate RowMarkClauses for all normal and
991:  * subquery rels in the subquery, but they are marked pushedDown = true to
992:  * distinguish them from clauses that were explicitly written at this query
993:  * level.  Also, Query.hasForUpdate tells whether there were explicit FOR
994:  * UPDATE/SHARE/KEY SHARE clauses in the current query level.
995:  */
996: 
997: /*
998:  * PGWithClause -
999:  *	   representation of WITH clause
1000:  *
1001:  * Note: PGWithClause does not propagate into the PGQuery representation;
1002:  * but PGCommonTableExpr does.
1003:  */
1004: typedef struct PGWithClause {
1005: 	PGNodeTag type;
1006: 	PGList *ctes;   /* list of CommonTableExprs */
1007: 	bool recursive; /* true = WITH RECURSIVE */
1008: 	int location;   /* token location, or -1 if unknown */
1009: } PGWithClause;
1010: 
1011: /*
1012:  * PGInferClause -
1013:  *		ON CONFLICT unique index inference clause
1014:  *
1015:  * Note: PGInferClause does not propagate into the PGQuery representation.
1016:  */
1017: typedef struct PGInferClause {
1018: 	PGNodeTag type;
1019: 	PGList *indexElems;  /* IndexElems to infer unique index */
1020: 	PGNode *whereClause; /* qualification (partial-index predicate) */
1021: 	char *conname;       /* PGConstraint name, or NULL if unnamed */
1022: 	int location;        /* token location, or -1 if unknown */
1023: } PGInferClause;
1024: 
1025: /*
1026:  * PGOnConflictClause -
1027:  *		representation of ON CONFLICT clause
1028:  *
1029:  * Note: PGOnConflictClause does not propagate into the PGQuery representation.
1030:  */
1031: typedef struct PGOnConflictClause {
1032: 	PGNodeTag type;
1033: 	PGOnConflictAction action; /* DO NOTHING or UPDATE? */
1034: 	PGInferClause *infer;      /* Optional index inference clause */
1035: 	PGList *targetList;        /* the target list (of PGResTarget) */
1036: 	PGNode *whereClause;       /* qualifications */
1037: 	int location;              /* token location, or -1 if unknown */
1038: } PGOnConflictClause;
1039: 
1040: /*
1041:  * PGCommonTableExpr -
1042:  *	   representation of WITH list element
1043:  *
1044:  * We don't currently support the SEARCH or CYCLE clause.
1045:  */
1046: typedef struct PGCommonTableExpr {
1047: 	PGNodeTag type;
1048: 	char *ctename;         /* query name (never qualified) */
1049: 	PGList *aliascolnames; /* optional list of column names */
1050: 	/* SelectStmt/InsertStmt/etc before parse analysis, PGQuery afterwards: */
1051: 	PGNode *ctequery; /* the CTE's subquery */
1052: 	int location;     /* token location, or -1 if unknown */
1053: 	/* These fields are set during parse analysis: */
1054: 	bool cterecursive;        /* is this CTE actually recursive? */
1055: 	int cterefcount;          /* number of RTEs referencing this CTE
1056: 								 * (excluding internal self-references) */
1057: 	PGList *ctecolnames;      /* list of output column names */
1058: 	PGList *ctecoltypes;      /* OID list of output column type OIDs */
1059: 	PGList *ctecoltypmods;    /* integer list of output column typmods */
1060: 	PGList *ctecolcollations; /* OID list of column collation OIDs */
1061: } PGCommonTableExpr;
1062: 
1063: /* Convenience macro to get the output tlist of a CTE's query */
1064: #define GetCTETargetList(cte) \
1065: 	(AssertMacro(IsA((cte)->ctequery, PGQuery)), ((PGQuery *)(cte)->ctequery)->commandType == PG_CMD_SELECT ? ((PGQuery *)(cte)->ctequery)->targetList : ((PGQuery *)(cte)->ctequery)->returningList)
1066: 
1067: /*
1068:  * TriggerTransition -
1069:  *	   representation of transition row or table naming clause
1070:  *
1071:  * Only transition tables are initially supported in the syntax, and only for
1072:  * AFTER triggers, but other permutations are accepted by the parser so we can
1073:  * give a meaningful message from C code.
1074:  */
1075: 
1076: /*****************************************************************************
1077:  *		Raw Grammar Output Statements
1078:  *****************************************************************************/
1079: 
1080: /*
1081:  *		PGRawStmt --- container for any one statement's raw parse tree
1082:  *
1083:  * Parse analysis converts a raw parse tree headed by a PGRawStmt node into
1084:  * an analyzed statement headed by a PGQuery node.  For optimizable statements,
1085:  * the conversion is complex.  For utility statements, the parser usually just
1086:  * transfers the raw parse tree (sans PGRawStmt) into the utilityStmt field of
1087:  * the PGQuery node, and all the useful work happens at execution time.
1088:  *
1089:  * stmt_location/stmt_len identify the portion of the source text string
1090:  * containing this raw statement (useful for multi-statement strings).
1091:  */
1092: typedef struct PGRawStmt {
1093: 	PGNodeTag type;
1094: 	PGNode *stmt;      /* raw parse tree */
1095: 	int stmt_location; /* start location, or -1 if unknown */
1096: 	int stmt_len;      /* length in bytes; 0 means "rest of string" */
1097: } PGRawStmt;
1098: 
1099: /*****************************************************************************
1100:  *		Optimizable Statements
1101:  *****************************************************************************/
1102: 
1103: /* ----------------------
1104:  *		Insert Statement
1105:  *
1106:  * The source expression is represented by PGSelectStmt for both the
1107:  * SELECT and VALUES cases.  If selectStmt is NULL, then the query
1108:  * is INSERT ... DEFAULT VALUES.
1109:  * ----------------------
1110:  */
1111: typedef struct PGInsertStmt {
1112: 	PGNodeTag type;
1113: 	PGRangeVar *relation;                 /* relation to insert into */
1114: 	PGList *cols;                         /* optional: names of the target columns */
1115: 	PGNode *selectStmt;                   /* the source SELECT/VALUES, or NULL */
1116: 	PGOnConflictClause *onConflictClause; /* ON CONFLICT clause */
1117: 	PGList *returningList;                /* list of expressions to return */
1118: 	PGWithClause *withClause;             /* WITH clause */
1119: 	PGOverridingKind override;            /* OVERRIDING clause */
1120: } PGInsertStmt;
1121: 
1122: /* ----------------------
1123:  *		Delete Statement
1124:  * ----------------------
1125:  */
1126: typedef struct PGDeleteStmt {
1127: 	PGNodeTag type;
1128: 	PGRangeVar *relation;     /* relation to delete from */
1129: 	PGList *usingClause;      /* optional using clause for more tables */
1130: 	PGNode *whereClause;      /* qualifications */
1131: 	PGList *returningList;    /* list of expressions to return */
1132: 	PGWithClause *withClause; /* WITH clause */
1133: } PGDeleteStmt;
1134: 
1135: /* ----------------------
1136:  *		Update Statement
1137:  * ----------------------
1138:  */
1139: typedef struct PGUpdateStmt {
1140: 	PGNodeTag type;
1141: 	PGRangeVar *relation;     /* relation to update */
1142: 	PGList *targetList;       /* the target list (of PGResTarget) */
1143: 	PGNode *whereClause;      /* qualifications */
1144: 	PGList *fromClause;       /* optional from clause for more tables */
1145: 	PGList *returningList;    /* list of expressions to return */
1146: 	PGWithClause *withClause; /* WITH clause */
1147: } PGUpdateStmt;
1148: 
1149: /* ----------------------
1150:  *		Select Statement
1151:  *
1152:  * A "simple" SELECT is represented in the output of gram.y by a single
1153:  * PGSelectStmt node; so is a VALUES construct.  A query containing set
1154:  * operators (UNION, INTERSECT, EXCEPT) is represented by a tree of PGSelectStmt
1155:  * nodes, in which the leaf nodes are component SELECTs and the internal nodes
1156:  * represent UNION, INTERSECT, or EXCEPT operators.  Using the same node
1157:  * type for both leaf and internal nodes allows gram.y to stick ORDER BY,
1158:  * LIMIT, etc, clause values into a SELECT statement without worrying
1159:  * whether it is a simple or compound SELECT.
1160:  * ----------------------
1161:  */
1162: typedef enum PGSetOperation { PG_SETOP_NONE = 0, PG_SETOP_UNION, PG_SETOP_INTERSECT, PG_SETOP_EXCEPT } PGSetOperation;
1163: 
1164: typedef struct PGSelectStmt {
1165: 	PGNodeTag type;
1166: 
1167: 	/*
1168: 	 * These fields are used only in "leaf" SelectStmts.
1169: 	 */
1170: 	PGList *distinctClause;   /* NULL, list of DISTINCT ON exprs, or
1171: 								 * lcons(NIL,NIL) for all (SELECT DISTINCT) */
1172: 	PGIntoClause *intoClause; /* target for SELECT INTO */
1173: 	PGList *targetList;       /* the target list (of PGResTarget) */
1174: 	PGList *fromClause;       /* the FROM clause */
1175: 	PGNode *whereClause;      /* WHERE qualification */
1176: 	PGList *groupClause;      /* GROUP BY clauses */
1177: 	PGNode *havingClause;     /* HAVING conditional-expression */
1178: 	PGList *windowClause;     /* WINDOW window_name AS (...), ... */
1179: 
1180: 	/*
1181: 	 * In a "leaf" node representing a VALUES list, the above fields are all
1182: 	 * null, and instead this field is set.  Note that the elements of the
1183: 	 * sublists are just expressions, without PGResTarget decoration. Also note
1184: 	 * that a list element can be DEFAULT (represented as a PGSetToDefault
1185: 	 * node), regardless of the context of the VALUES list. It's up to parse
1186: 	 * analysis to reject that where not valid.
1187: 	 */
1188: 	PGList *valuesLists; /* untransformed list of expression lists */
1189: 
1190: 	/*
1191: 	 * These fields are used in both "leaf" SelectStmts and upper-level
1192: 	 * SelectStmts.
1193: 	 */
1194: 	PGList *sortClause;       /* sort clause (a list of SortBy's) */
1195: 	PGNode *limitOffset;      /* # of result tuples to skip */
1196: 	PGNode *limitCount;       /* # of result tuples to return */
1197: 	PGNode *sampleOptions;    /* sample options (if any) */
1198: 	PGList *lockingClause;    /* FOR UPDATE (list of LockingClause's) */
1199: 	PGWithClause *withClause; /* WITH clause */
1200: 
1201: 	/*
1202: 	 * These fields are used only in upper-level SelectStmts.
1203: 	 */
1204: 	PGSetOperation op;         /* type of set op */
1205: 	bool all;                  /* ALL specified? */
1206: 	struct PGSelectStmt *larg; /* left child */
1207: 	struct PGSelectStmt *rarg; /* right child */
1208: 	                           /* Eventually add fields for CORRESPONDING spec here */
1209: } PGSelectStmt;
1210: 
1211: /* ----------------------
1212:  *		Set Operation node for post-analysis query trees
1213:  *
1214:  * After parse analysis, a SELECT with set operations is represented by a
1215:  * top-level PGQuery node containing the leaf SELECTs as subqueries in its
1216:  * range table.  Its setOperations field shows the tree of set operations,
1217:  * with leaf PGSelectStmt nodes replaced by PGRangeTblRef nodes, and internal
1218:  * nodes replaced by SetOperationStmt nodes.  Information about the output
1219:  * column types is added, too.  (Note that the child nodes do not necessarily
1220:  * produce these types directly, but we've checked that their output types
1221:  * can be coerced to the output column type.)  Also, if it's not UNION ALL,
1222:  * information about the types' sort/group semantics is provided in the form
1223:  * of a PGSortGroupClause list (same representation as, eg, DISTINCT).
1224:  * The resolved common column collations are provided too; but note that if
1225:  * it's not UNION ALL, it's okay for a column to not have a common collation,
1226:  * so a member of the colCollations list could be InvalidOid even though the
1227:  * column has a collatable type.
1228:  * ----------------------
1229:  */
1230: 
1231: /*****************************************************************************
1232:  *		Other Statements (no optimizations required)
1233:  *
1234:  *		These are not touched by parser/analyze.c except to put them into
1235:  *		the utilityStmt field of a Query.  This is eventually passed to
1236:  *		ProcessUtility (by-passing rewriting and planning).  Some of the
1237:  *		statements do need attention from parse analysis, and this is
1238:  *		done by routines in parser/parse_utilcmd.c after ProcessUtility
1239:  *		receives the command for execution.
1240:  *		DECLARE CURSOR, EXPLAIN, and CREATE TABLE AS are special cases:
1241:  *		they contain optimizable statements, which get processed normally
1242:  *		by parser/analyze.c.
1243:  *****************************************************************************/
1244: 
1245: /*
1246:  * When a command can act on several kinds of objects with only one
1247:  * parse structure required, use these constants to designate the
1248:  * object type.  Note that commands typically don't support all the types.
1249:  */
1250: 
1251: typedef enum PGObjectType {
1252: 	PG_OBJECT_ACCESS_METHOD,
1253: 	PG_OBJECT_AGGREGATE,
1254: 	PG_OBJECT_AMOP,
1255: 	PG_OBJECT_AMPROC,
1256: 	PG_OBJECT_ATTRIBUTE, /* type's attribute, when distinct from column */
1257: 	PG_OBJECT_CAST,
1258: 	PG_OBJECT_COLUMN,
1259: 	PG_OBJECT_COLLATION,
1260: 	PG_OBJECT_CONVERSION,
1261: 	PG_OBJECT_DATABASE,
1262: 	PG_OBJECT_DEFAULT,
1263: 	PG_OBJECT_DEFACL,
1264: 	PG_OBJECT_DOMAIN,
1265: 	PG_OBJECT_DOMCONSTRAINT,
1266: 	PG_OBJECT_EVENT_TRIGGER,
1267: 	PG_OBJECT_EXTENSION,
1268: 	PG_OBJECT_FDW,
1269: 	PG_OBJECT_FOREIGN_SERVER,
1270: 	PG_OBJECT_FOREIGN_TABLE,
1271: 	PG_OBJECT_FUNCTION,
1272: 	PG_OBJECT_INDEX,
1273: 	PG_OBJECT_LANGUAGE,
1274: 	PG_OBJECT_LARGEOBJECT,
1275: 	PG_OBJECT_MATVIEW,
1276: 	PG_OBJECT_OPCLASS,
1277: 	PG_OBJECT_OPERATOR,
1278: 	PG_OBJECT_OPFAMILY,
1279: 	PG_OBJECT_POLICY,
1280: 	PG_OBJECT_PUBLICATION,
1281: 	PG_OBJECT_PUBLICATION_REL,
1282: 	PG_OBJECT_ROLE,
1283: 	PG_OBJECT_RULE,
1284: 	PG_OBJECT_SCHEMA,
1285: 	PG_OBJECT_SEQUENCE,
1286: 	PG_OBJECT_SUBSCRIPTION,
1287: 	PG_OBJECT_STATISTIC_EXT,
1288: 	PG_OBJECT_TABCONSTRAINT,
1289: 	PG_OBJECT_TABLE,
1290: 	PG_OBJECT_TABLESPACE,
1291: 	PG_OBJECT_TRANSFORM,
1292: 	PG_OBJECT_TRIGGER,
1293: 	PG_OBJECT_TSCONFIGURATION,
1294: 	PG_OBJECT_TSDICTIONARY,
1295: 	PG_OBJECT_TSPARSER,
1296: 	PG_OBJECT_TSTEMPLATE,
1297: 	PG_OBJECT_TYPE,
1298: 	PG_OBJECT_USER_MAPPING,
1299: 	PG_OBJECT_VIEW
1300: } PGObjectType;
1301: 
1302: /* ----------------------
1303:  *		Create Schema Statement
1304:  *
1305:  * NOTE: the schemaElts list contains raw parsetrees for component statements
1306:  * of the schema, such as CREATE TABLE, GRANT, etc.  These are analyzed and
1307:  * executed after the schema itself is created.
1308:  * ----------------------
1309:  */
1310: typedef struct PGCreateSchemaStmt {
1311: 	PGNodeTag type;
1312: 	char *schemaname;   /* the name of the schema to create */
1313: 	PGList *schemaElts; /* schema components (list of parsenodes) */
1314: 	bool if_not_exists; /* just do nothing if schema already exists? */
1315: } PGCreateSchemaStmt;
1316: 
1317: typedef enum PGDropBehavior {
1318: 	PG_DROP_RESTRICT, /* drop fails if any dependent objects */
1319: 	PG_DROP_CASCADE   /* remove dependent objects too */
1320: } PGDropBehavior;
1321: 
1322: /* ----------------------
1323:  *	Alter Table
1324:  * ----------------------
1325:  */
1326: typedef struct PGAlterTableStmt {
1327: 	PGNodeTag type;
1328: 	PGRangeVar *relation; /* table to work on */
1329: 	PGList *cmds;         /* list of subcommands */
1330: 	PGObjectType relkind; /* type of object */
1331: 	bool missing_ok;      /* skip error if table missing */
1332: } PGAlterTableStmt;
1333: 
1334: typedef enum PGAlterTableType {
1335: 	PG_AT_AddColumn,                 /* add column */
1336: 	PG_AT_AddColumnRecurse,          /* internal to commands/tablecmds.c */
1337: 	PG_AT_AddColumnToView,           /* implicitly via CREATE OR REPLACE VIEW */
1338: 	PG_AT_ColumnDefault,             /* alter column default */
1339: 	PG_AT_DropNotNull,               /* alter column drop not null */
1340: 	PG_AT_SetNotNull,                /* alter column set not null */
1341: 	PG_AT_SetStatistics,             /* alter column set statistics */
1342: 	PG_AT_SetOptions,                /* alter column set ( options ) */
1343: 	PG_AT_ResetOptions,              /* alter column reset ( options ) */
1344: 	PG_AT_SetStorage,                /* alter column set storage */
1345: 	PG_AT_DropColumn,                /* drop column */
1346: 	PG_AT_DropColumnRecurse,         /* internal to commands/tablecmds.c */
1347: 	PG_AT_AddIndex,                  /* add index */
1348: 	PG_AT_ReAddIndex,                /* internal to commands/tablecmds.c */
1349: 	PG_AT_AddConstraint,             /* add constraint */
1350: 	PG_AT_AddConstraintRecurse,      /* internal to commands/tablecmds.c */
1351: 	PG_AT_ReAddConstraint,           /* internal to commands/tablecmds.c */
1352: 	PG_AT_AlterConstraint,           /* alter constraint */
1353: 	PG_AT_ValidateConstraint,        /* validate constraint */
1354: 	PG_AT_ValidateConstraintRecurse, /* internal to commands/tablecmds.c */
1355: 	PG_AT_ProcessedConstraint,       /* pre-processed add constraint (local in
1356: 								 * parser/parse_utilcmd.c) */
1357: 	PG_AT_AddIndexConstraint,        /* add constraint using existing index */
1358: 	PG_AT_DropConstraint,            /* drop constraint */
1359: 	PG_AT_DropConstraintRecurse,     /* internal to commands/tablecmds.c */
1360: 	PG_AT_ReAddComment,              /* internal to commands/tablecmds.c */
1361: 	PG_AT_AlterColumnType,           /* alter column type */
1362: 	PG_AT_AlterColumnGenericOptions, /* alter column OPTIONS (...) */
1363: 	PG_AT_ChangeOwner,               /* change owner */
1364: 	PG_AT_ClusterOn,                 /* CLUSTER ON */
1365: 	PG_AT_DropCluster,               /* SET WITHOUT CLUSTER */
1366: 	PG_AT_SetLogged,                 /* SET LOGGED */
1367: 	PG_AT_SetUnLogged,               /* SET UNLOGGED */
1368: 	PG_AT_AddOids,                   /* SET WITH OIDS */
1369: 	PG_AT_AddOidsRecurse,            /* internal to commands/tablecmds.c */
1370: 	PG_AT_DropOids,                  /* SET WITHOUT OIDS */
1371: 	PG_AT_SetTableSpace,             /* SET TABLESPACE */
1372: 	PG_AT_SetRelOptions,             /* SET (...) -- AM specific parameters */
1373: 	PG_AT_ResetRelOptions,           /* RESET (...) -- AM specific parameters */
1374: 	PG_AT_ReplaceRelOptions,         /* replace reloption list in its entirety */
1375: 	PG_AT_EnableTrig,                /* ENABLE TRIGGER name */
1376: 	PG_AT_EnableAlwaysTrig,          /* ENABLE ALWAYS TRIGGER name */
1377: 	PG_AT_EnableReplicaTrig,         /* ENABLE REPLICA TRIGGER name */
1378: 	PG_AT_DisableTrig,               /* DISABLE TRIGGER name */
1379: 	PG_AT_EnableTrigAll,             /* ENABLE TRIGGER ALL */
1380: 	PG_AT_DisableTrigAll,            /* DISABLE TRIGGER ALL */
1381: 	PG_AT_EnableTrigUser,            /* ENABLE TRIGGER USER */
1382: 	PG_AT_DisableTrigUser,           /* DISABLE TRIGGER USER */
1383: 	PG_AT_EnableRule,                /* ENABLE RULE name */
1384: 	PG_AT_EnableAlwaysRule,          /* ENABLE ALWAYS RULE name */
1385: 	PG_AT_EnableReplicaRule,         /* ENABLE REPLICA RULE name */
1386: 	PG_AT_DisableRule,               /* DISABLE RULE name */
1387: 	PG_AT_AddInherit,                /* INHERIT parent */
1388: 	PG_AT_DropInherit,               /* NO INHERIT parent */
1389: 	PG_AT_AddOf,                     /* OF <type_name> */
1390: 	PG_AT_DropOf,                    /* NOT OF */
1391: 	PG_AT_ReplicaIdentity,           /* REPLICA IDENTITY */
1392: 	PG_AT_EnableRowSecurity,         /* ENABLE ROW SECURITY */
1393: 	PG_AT_DisableRowSecurity,        /* DISABLE ROW SECURITY */
1394: 	PG_AT_ForceRowSecurity,          /* FORCE ROW SECURITY */
1395: 	PG_AT_NoForceRowSecurity,        /* NO FORCE ROW SECURITY */
1396: 	PG_AT_GenericOptions,            /* OPTIONS (...) */
1397: 	PG_AT_AttachPartition,           /* ATTACH PARTITION */
1398: 	PG_AT_DetachPartition,           /* DETACH PARTITION */
1399: 	PG_AT_AddIdentity,               /* ADD IDENTITY */
1400: 	PG_AT_SetIdentity,               /* SET identity column options */
1401: 	AT_DropIdentity                  /* DROP IDENTITY */
1402: } PGAlterTableType;
1403: 
1404: typedef struct PGAlterTableCmd /* one subcommand of an ALTER TABLE */
1405: {
1406: 	PGNodeTag type;
1407: 	PGAlterTableType subtype; /* Type of table alteration to apply */
1408: 	char *name;               /* column, constraint, or trigger to act on,
1409: 								 * or tablespace */
1410: 	PGNode *def;              /* definition of new column, index,
1411: 								 * constraint, or parent table */
1412: 	PGDropBehavior behavior;  /* RESTRICT or CASCADE for DROP cases */
1413: 	bool missing_ok;          /* skip error if missing? */
1414: } PGAlterTableCmd;
1415: 
1416: /*
1417:  * Note: PGObjectWithArgs carries only the types of the input parameters of the
1418:  * function.  So it is sufficient to identify an existing function, but it
1419:  * is not enough info to define a function nor to call it.
1420:  */
1421: typedef struct PGObjectWithArgs {
1422: 	PGNodeTag type;
1423: 	PGList *objname;       /* qualified name of function/operator */
1424: 	PGList *objargs;       /* list of Typename nodes */
1425: 	bool args_unspecified; /* argument list was omitted, so name must
1426: 									 * be unique (note that objargs == NIL
1427: 									 * means zero args) */
1428: } PGObjectWithArgs;
1429: 
1430: /* ----------------------
1431:  *		Copy Statement
1432:  *
1433:  * We support "COPY relation FROM file", "COPY relation TO file", and
1434:  * "COPY (query) TO file".  In any given PGCopyStmt, exactly one of "relation"
1435:  * and "query" must be non-NULL.
1436:  * ----------------------
1437:  */
1438: typedef struct PGCopyStmt {
1439: 	PGNodeTag type;
1440: 	PGRangeVar *relation; /* the relation to copy */
1441: 	PGNode *query;        /* the query (SELECT or DML statement with
1442: 								 * RETURNING) to copy, as a raw parse tree */
1443: 	PGList *attlist;      /* PGList of column names (as Strings), or NIL
1444: 								 * for all columns */
1445: 	bool is_from;         /* TO or FROM */
1446: 	bool is_program;      /* is 'filename' a program to popen? */
1447: 	char *filename;       /* filename, or NULL for STDIN/STDOUT */
1448: 	PGList *options;      /* PGList of PGDefElem nodes */
1449: } PGCopyStmt;
1450: 
1451: /* ----------------------
1452:  * SET Statement (includes RESET)
1453:  *
1454:  * "SET var TO DEFAULT" and "RESET var" are semantically equivalent, but we
1455:  * preserve the distinction in VariableSetKind for CreateCommandTag().
1456:  * ----------------------
1457:  */
1458: typedef enum {
1459: 	VAR_SET_VALUE,   /* SET var = value */
1460: 	VAR_SET_DEFAULT, /* SET var TO DEFAULT */
1461: 	VAR_SET_CURRENT, /* SET var FROM CURRENT */
1462: 	VAR_SET_MULTI,   /* special case for SET TRANSACTION ... */
1463: 	VAR_RESET,       /* RESET var */
1464: 	VAR_RESET_ALL    /* RESET ALL */
1465: } VariableSetKind;
1466: 
1467: typedef enum {
1468: 	VAR_SET_SCOPE_LOCAL,   /* SET LOCAL var */
1469: 	VAR_SET_SCOPE_SESSION, /* SET SESSION var */
1470: 	VAR_SET_SCOPE_GLOBAL,  /* SET GLOBAL var */
1471: 	VAR_SET_SCOPE_DEFAULT  /* SET var (same as SET_SESSION) */
1472: } VariableSetScope;
1473: 
1474: typedef struct PGVariableSetStmt {
1475: 	PGNodeTag type;
1476: 	VariableSetKind kind;
1477: 	VariableSetScope scope;
1478: 	char *name;    /* variable to be set */
1479: 	PGList *args;  /* PGList of PGAConst nodes */
1480: } PGVariableSetStmt;
1481: 
1482: /* ----------------------
1483:  * Show Statement
1484:  * ----------------------
1485:  */
1486: typedef struct PGVariableShowStmt {
1487: 	PGNodeTag   type;
1488: 	char       *name;
1489: 	int         is_summary; // whether or not this is a DESCRIBE or a SUMMARIZE
1490: } PGVariableShowStmt;
1491: 
1492: /* ----------------------
1493:  * Show Statement with Select Statement
1494:  * ----------------------
1495:  */
1496: typedef struct PGVariableShowSelectStmt
1497: {
1498: 	PGNodeTag   type;
1499: 	PGNode     *stmt;
1500: 	char       *name;
1501: 	int         is_summary; // whether or not this is a DESCRIBE or a SUMMARIZE
1502: } PGVariableShowSelectStmt;
1503: 
1504: 
1505: /* ----------------------
1506:  *		Create Table Statement
1507:  *
1508:  * NOTE: in the raw gram.y output, PGColumnDef and PGConstraint nodes are
1509:  * intermixed in tableElts, and constraints is NIL.  After parse analysis,
1510:  * tableElts contains just ColumnDefs, and constraints contains just
1511:  * PGConstraint nodes (in fact, only PG_CONSTR_CHECK nodes, in the present
1512:  * implementation).
1513:  * ----------------------
1514:  */
1515: 
1516: typedef struct PGCreateStmt {
1517: 	PGNodeTag type;
1518: 	PGRangeVar *relation;      /* relation to create */
1519: 	PGList *tableElts;         /* column definitions (list of PGColumnDef) */
1520: 	PGList *inhRelations;      /* relations to inherit from (list of
1521: 								 * inhRelation) */
1522: 	PGTypeName *ofTypename;    /* OF typename */
1523: 	PGList *constraints;       /* constraints (list of PGConstraint nodes) */
1524: 	PGList *options;           /* options from WITH clause */
1525: 	PGOnCommitAction oncommit; /* what do we do at COMMIT? */
1526: 	char *tablespacename;      /* table space to use, or NULL */
1527: 	bool if_not_exists;        /* just do nothing if it already exists? */
1528: } PGCreateStmt;
1529: 
1530: /* ----------
1531:  * Definitions for constraints in PGCreateStmt
1532:  *
1533:  * Note that column defaults are treated as a type of constraint,
1534:  * even though that's a bit odd semantically.
1535:  *
1536:  * For constraints that use expressions (CONSTR_CHECK, PG_CONSTR_DEFAULT)
1537:  * we may have the expression in either "raw" form (an untransformed
1538:  * parse tree) or "cooked" form (the nodeToString representation of
1539:  * an executable expression tree), depending on how this PGConstraint
1540:  * node was created (by parsing, or by inheritance from an existing
1541:  * relation).  We should never have both in the same node!
1542:  *
1543:  * PG_FKCONSTR_ACTION_xxx values are stored into pg_constraint.confupdtype
1544:  * and pg_constraint.confdeltype columns; PG_FKCONSTR_MATCH_xxx values are
1545:  * stored into pg_constraint.confmatchtype.  Changing the code values may
1546:  * require an initdb!
1547:  *
1548:  * If skip_validation is true then we skip checking that the existing rows
1549:  * in the table satisfy the constraint, and just install the catalog entries
1550:  * for the constraint.  A new FK constraint is marked as valid iff
1551:  * initially_valid is true.  (Usually skip_validation and initially_valid
1552:  * are inverses, but we can set both true if the table is known empty.)
1553:  *
1554:  * PGConstraint attributes (DEFERRABLE etc) are initially represented as
1555:  * separate PGConstraint nodes for simplicity of parsing.  parse_utilcmd.c makes
1556:  * a pass through the constraints list to insert the info into the appropriate
1557:  * PGConstraint node.
1558:  * ----------
1559:  */
1560: 
1561: typedef enum PGConstrType /* types of constraints */
1562: { PG_CONSTR_NULL,         /* not standard SQL, but a lot of people
1563: 								 * expect it */
1564:   PG_CONSTR_NOTNULL,
1565:   PG_CONSTR_DEFAULT,
1566:   PG_CONSTR_IDENTITY,
1567:   PG_CONSTR_CHECK,
1568:   PG_CONSTR_PRIMARY,
1569:   PG_CONSTR_UNIQUE,
1570:   PG_CONSTR_EXCLUSION,
1571:   PG_CONSTR_FOREIGN,
1572:   PG_CONSTR_ATTR_DEFERRABLE, /* attributes for previous constraint node */
1573:   PG_CONSTR_ATTR_NOT_DEFERRABLE,
1574:   PG_CONSTR_ATTR_DEFERRED,
1575:   PG_CONSTR_ATTR_IMMEDIATE } PGConstrType;
1576: 
1577: /* Foreign key action codes */
1578: #define PG_FKCONSTR_ACTION_NOACTION 'a'
1579: #define PG_FKCONSTR_ACTION_RESTRICT 'r'
1580: #define PG_FKCONSTR_ACTION_CASCADE 'c'
1581: #define PG_FKCONSTR_ACTION_SETNULL 'n'
1582: #define PG_FKCONSTR_ACTION_SETDEFAULT 'd'
1583: 
1584: /* Foreign key matchtype codes */
1585: #define PG_FKCONSTR_MATCH_FULL 'f'
1586: #define PG_FKCONSTR_MATCH_PARTIAL 'p'
1587: #define PG_FKCONSTR_MATCH_SIMPLE 's'
1588: 
1589: typedef struct PGConstraint {
1590: 	PGNodeTag type;
1591: 	PGConstrType contype; /* see above */
1592: 
1593: 	/* Fields used for most/all constraint types: */
1594: 	char *conname;     /* PGConstraint name, or NULL if unnamed */
1595: 	bool deferrable;   /* DEFERRABLE? */
1596: 	bool initdeferred; /* INITIALLY DEFERRED? */
1597: 	int location;      /* token location, or -1 if unknown */
1598: 
1599: 	/* Fields used for constraints with expressions (CHECK and DEFAULT): */
1600: 	bool is_no_inherit; /* is constraint non-inheritable? */
1601: 	PGNode *raw_expr;   /* expr, as untransformed parse tree */
1602: 	char *cooked_expr;  /* expr, as nodeToString representation */
1603: 	char generated_when;
1604: 
1605: 	/* Fields used for unique constraints (UNIQUE and PRIMARY KEY): */
1606: 	PGList *keys; /* String nodes naming referenced column(s) */
1607: 
1608: 	/* Fields used for EXCLUSION constraints: */
1609: 	PGList *exclusions; /* list of (PGIndexElem, operator name) pairs */
1610: 
1611: 	/* Fields used for index constraints (UNIQUE, PRIMARY KEY, EXCLUSION): */
1612: 	PGList *options;  /* options from WITH clause */
1613: 	char *indexname;  /* existing index to use; otherwise NULL */
1614: 	char *indexspace; /* index tablespace; NULL for default */
1615: 	/* These could be, but currently are not, used for UNIQUE/PKEY: */
1616: 	char *access_method;  /* index access method; NULL for default */
1617: 	PGNode *where_clause; /* partial index predicate */
1618: 
1619: 	/* Fields used for FOREIGN KEY constraints: */
1620: 	PGRangeVar *pktable;   /* Primary key table */
1621: 	PGList *fk_attrs;      /* Attributes of foreign key */
1622: 	PGList *pk_attrs;      /* Corresponding attrs in PK table */
1623: 	char fk_matchtype;     /* FULL, PARTIAL, SIMPLE */
1624: 	char fk_upd_action;    /* ON UPDATE action */
1625: 	char fk_del_action;    /* ON DELETE action */
1626: 	PGList *old_conpfeqop; /* pg_constraint.conpfeqop of my former self */
1627: 	PGOid old_pktable_oid; /* pg_constraint.confrelid of my former
1628: 									 * self */
1629: 
1630: 	/* Fields used for constraints that allow a NOT VALID specification */
1631: 	bool skip_validation; /* skip validation of existing rows? */
1632: 	bool initially_valid; /* mark the new constraint as valid? */
1633: } PGConstraint;
1634: 
1635: /* ----------------------
1636:  *		{Create|Alter} SEQUENCE Statement
1637:  * ----------------------
1638:  */
1639: 
1640: typedef struct PGCreateSeqStmt {
1641: 	PGNodeTag type;
1642: 	PGRangeVar *sequence; /* the sequence to create */
1643: 	PGList *options;
1644: 	PGOid ownerId; /* ID of owner, or InvalidOid for default */
1645: 	bool for_identity;
1646: 	bool if_not_exists; /* just do nothing if it already exists? */
1647: } PGCreateSeqStmt;
1648: 
1649: typedef struct PGAlterSeqStmt {
1650: 	PGNodeTag type;
1651: 	PGRangeVar *sequence; /* the sequence to alter */
1652: 	PGList *options;
1653: 	bool for_identity;
1654: 	bool missing_ok; /* skip error if a role is missing? */
1655: } PGAlterSeqStmt;
1656: 
1657: /* ----------------------
1658:  *		CREATE FUNCTION Statement
1659:  * ----------------------
1660:  */
1661: 
1662: typedef struct PGCreateFunctionStmt {
1663: 	PGNodeTag type;
1664: 	PGRangeVar *name;
1665: 	PGList *params;
1666: 	PGNode *function;
1667: } PGCreateFunctionStmt;
1668: 
1669: /* ----------------------
1670:  *		Drop Table|Sequence|View|Index|Type|Domain|Conversion|Schema Statement
1671:  * ----------------------
1672:  */
1673: 
1674: typedef struct PGDropStmt {
1675: 	PGNodeTag type;
1676: 	PGList *objects;         /* list of names */
1677: 	PGObjectType removeType; /* object type */
1678: 	PGDropBehavior behavior; /* RESTRICT or CASCADE behavior */
1679: 	bool missing_ok;         /* skip error if object is missing? */
1680: 	bool concurrent;         /* drop index concurrently? */
1681: } PGDropStmt;
1682: 
1683: /* ----------------------
1684:  *		Create PGIndex Statement
1685:  *
1686:  * This represents creation of an index and/or an associated constraint.
1687:  * If isconstraint is true, we should create a pg_constraint entry along
1688:  * with the index.  But if indexOid isn't InvalidOid, we are not creating an
1689:  * index, just a UNIQUE/PKEY constraint using an existing index.  isconstraint
1690:  * must always be true in this case, and the fields describing the index
1691:  * properties are empty.
1692:  * ----------------------
1693:  */
1694: typedef struct PGIndexStmt {
1695: 	PGNodeTag type;
1696: 	char *idxname;          /* name of new index, or NULL for default */
1697: 	PGRangeVar *relation;   /* relation to build index on */
1698: 	char *accessMethod;     /* name of access method (eg. btree) */
1699: 	char *tableSpace;       /* tablespace, or NULL for default */
1700: 	PGList *indexParams;    /* columns to index: a list of PGIndexElem */
1701: 	PGList *options;        /* WITH clause options: a list of PGDefElem */
1702: 	PGNode *whereClause;    /* qualification (partial-index predicate) */
1703: 	PGList *excludeOpNames; /* exclusion operator names, or NIL if none */
1704: 	char *idxcomment;       /* comment to apply to index, or NULL */
1705: 	PGOid indexOid;         /* OID of an existing index, if any */
1706: 	PGOid oldNode;          /* relfilenode of existing storage, if any */
1707: 	bool unique;            /* is index unique? */
1708: 	bool primary;           /* is index a primary key? */
1709: 	bool isconstraint;      /* is it for a pkey/unique constraint? */
1710: 	bool deferrable;        /* is the constraint DEFERRABLE? */
1711: 	bool initdeferred;      /* is the constraint INITIALLY DEFERRED? */
1712: 	bool transformed;       /* true when transformIndexStmt is finished */
1713: 	bool concurrent;        /* should this be a concurrent index build? */
1714: 	bool if_not_exists;     /* just do nothing if index already exists? */
1715: } PGIndexStmt;
1716: 
1717: /* ----------------------
1718:  *		Alter Object Rename Statement
1719:  * ----------------------
1720:  */
1721: typedef struct PGRenameStmt {
1722: 	PGNodeTag type;
1723: 	PGObjectType renameType;   /* PG_OBJECT_TABLE, PG_OBJECT_COLUMN, etc */
1724: 	PGObjectType relationType; /* if column name, associated relation type */
1725: 	PGRangeVar *relation;      /* in case it's a table */
1726: 	PGNode *object;            /* in case it's some other object */
1727: 	char *subname;             /* name of contained object (column, rule,
1728: 								 * trigger, etc) */
1729: 	char *newname;             /* the new name */
1730: 	PGDropBehavior behavior;   /* RESTRICT or CASCADE behavior */
1731: 	bool missing_ok;           /* skip error if missing? */
1732: } PGRenameStmt;
1733: 
1734: /* ----------------------
1735:  *		ALTER object SET SCHEMA Statement
1736:  * ----------------------
1737:  */
1738: typedef struct PGAlterObjectSchemaStmt {
1739: 	PGNodeTag type;
1740: 	PGObjectType objectType; /* PG_OBJECT_TABLE, PG_OBJECT_TYPE, etc */
1741: 	PGRangeVar *relation;    /* in case it's a table */
1742: 	PGNode *object;          /* in case it's some other object */
1743: 	char *newschema;         /* the new schema */
1744: 	bool missing_ok;         /* skip error if missing? */
1745: } PGAlterObjectSchemaStmt;
1746: 
1747: /* ----------------------
1748:  *		{Begin|Commit|Rollback} Transaction Statement
1749:  * ----------------------
1750:  */
1751: typedef enum PGTransactionStmtKind {
1752: 	PG_TRANS_STMT_BEGIN,
1753: 	PG_TRANS_STMT_START, /* semantically identical to BEGIN */
1754: 	PG_TRANS_STMT_COMMIT,
1755: 	PG_TRANS_STMT_ROLLBACK,
1756: 	PG_TRANS_STMT_SAVEPOINT,
1757: 	PG_TRANS_STMT_RELEASE,
1758: 	PG_TRANS_STMT_ROLLBACK_TO,
1759: 	PG_TRANS_STMT_PREPARE,
1760: 	PG_TRANS_STMT_COMMIT_PREPARED,
1761: 	TRANS_STMT_ROLLBACK_PREPARED
1762: } PGTransactionStmtKind;
1763: 
1764: typedef struct PGTransactionStmt {
1765: 	PGNodeTag type;
1766: 	PGTransactionStmtKind kind; /* see above */
1767: 	PGList *options;            /* for BEGIN/START and savepoint commands */
1768: 	char *gid;                  /* for two-phase-commit related commands */
1769: } PGTransactionStmt;
1770: 
1771: /* ----------------------
1772:  *		Create View Statement
1773:  * ----------------------
1774:  */
1775: typedef enum PGViewCheckOption { PG_NO_CHECK_OPTION, PG_LOCAL_CHECK_OPTION, CASCADED_CHECK_OPTION } PGViewCheckOption;
1776: 
1777: typedef struct PGViewStmt {
1778: 	PGNodeTag type;
1779: 	PGRangeVar *view;                  /* the view to be created */
1780: 	PGList *aliases;                   /* target column names */
1781: 	PGNode *query;                     /* the SELECT query (as a raw parse tree) */
1782: 	bool replace;                      /* replace an existing view? */
1783: 	PGList *options;                   /* options from WITH clause */
1784: 	PGViewCheckOption withCheckOption; /* WITH CHECK OPTION */
1785: } PGViewStmt;
1786: 
1787: /* ----------------------
1788:  *		Load Statement
1789:  * ----------------------
1790:  */
1791: typedef struct PGLoadStmt {
1792: 	PGNodeTag type;
1793: 	char *filename; /* file to load */
1794: } PGLoadStmt;
1795: 
1796: /* ----------------------
1797:  *		Vacuum and Analyze Statements
1798:  *
1799:  * Even though these are nominally two statements, it's convenient to use
1800:  * just one node type for both.  Note that at least one of PG_VACOPT_VACUUM
1801:  * and PG_VACOPT_ANALYZE must be set in options.
1802:  * ----------------------
1803:  */
1804: typedef enum PGVacuumOption {
1805: 	PG_VACOPT_VACUUM = 1 << 0,               /* do VACUUM */
1806: 	PG_VACOPT_ANALYZE = 1 << 1,              /* do ANALYZE */
1807: 	PG_VACOPT_VERBOSE = 1 << 2,              /* print progress info */
1808: 	PG_VACOPT_FREEZE = 1 << 3,               /* FREEZE option */
1809: 	PG_VACOPT_FULL = 1 << 4,                 /* FULL (non-concurrent) vacuum */
1810: 	PG_VACOPT_NOWAIT = 1 << 5,               /* don't wait to get lock (autovacuum only) */
1811: 	PG_VACOPT_SKIPTOAST = 1 << 6,            /* don't process the TOAST table, if any */
1812: 	PG_VACOPT_DISABLE_PAGE_SKIPPING = 1 << 7 /* don't skip any pages */
1813: } PGVacuumOption;
1814: 
1815: typedef struct PGVacuumStmt {
1816: 	PGNodeTag type;
1817: 	int options;          /* OR of PGVacuumOption flags */
1818: 	PGRangeVar *relation; /* single table to process, or NULL */
1819: 	PGList *va_cols;      /* list of column names, or NIL for all */
1820: } PGVacuumStmt;
1821: 
1822: /* ----------------------
1823:  *		Explain Statement
1824:  *
1825:  * The "query" field is initially a raw parse tree, and is converted to a
1826:  * PGQuery node during parse analysis.  Note that rewriting and planning
1827:  * of the query are always postponed until execution.
1828:  * ----------------------
1829:  */
1830: typedef struct PGExplainStmt {
1831: 	PGNodeTag type;
1832: 	PGNode *query;   /* the query (see comments above) */
1833: 	PGList *options; /* list of PGDefElem nodes */
1834: } PGExplainStmt;
1835: 
1836: /* ----------------------
1837:  *		CREATE TABLE AS Statement (a/k/a SELECT INTO)
1838:  *
1839:  * A query written as CREATE TABLE AS will produce this node type natively.
1840:  * A query written as SELECT ... INTO will be transformed to this form during
1841:  * parse analysis.
1842:  * A query written as CREATE MATERIALIZED view will produce this node type,
1843:  * during parse analysis, since it needs all the same data.
1844:  *
1845:  * The "query" field is handled similarly to EXPLAIN, though note that it
1846:  * can be a SELECT or an EXECUTE, but not other DML statements.
1847:  * ----------------------
1848:  */
1849: typedef struct PGCreateTableAsStmt {
1850: 	PGNodeTag type;
1851: 	PGNode *query;        /* the query (see comments above) */
1852: 	PGIntoClause *into;   /* destination table */
1853: 	PGObjectType relkind; /* PG_OBJECT_TABLE or PG_OBJECT_MATVIEW */
1854: 	bool is_select_into;  /* it was written as SELECT INTO */
1855: 	bool if_not_exists;   /* just do nothing if it already exists? */
1856: } PGCreateTableAsStmt;
1857: 
1858: /* ----------------------
1859:  * Checkpoint Statement
1860:  * ----------------------
1861:  */
1862: typedef struct PGCheckPointStmt {
1863: 	PGNodeTag type;
1864: 	bool force;
1865: } PGCheckPointStmt;
1866: 
1867: /* ----------------------
1868:  *		PREPARE Statement
1869:  * ----------------------
1870:  */
1871: typedef struct PGPrepareStmt {
1872: 	PGNodeTag type;
1873: 	char *name;       /* Name of plan, arbitrary */
1874: 	PGList *argtypes; /* Types of parameters (PGList of PGTypeName) */
1875: 	PGNode *query;    /* The query itself (as a raw parsetree) */
1876: } PGPrepareStmt;
1877: 
1878: /* ----------------------
1879:  *		EXECUTE Statement
1880:  * ----------------------
1881:  */
1882: 
1883: typedef struct PGExecuteStmt {
1884: 	PGNodeTag type;
1885: 	char *name;     /* The name of the plan to execute */
1886: 	PGList *params; /* Values to assign to parameters */
1887: } PGExecuteStmt;
1888: 
1889: /* ----------------------
1890:  *		DEALLOCATE Statement
1891:  * ----------------------
1892:  */
1893: typedef struct PGDeallocateStmt {
1894: 	PGNodeTag type;
1895: 	char *name; /* The name of the plan to remove */
1896: 	            /* NULL means DEALLOCATE ALL */
1897: } PGDeallocateStmt;
1898: 
1899: /* ----------------------
1900:  * PRAGMA statements
1901:  * Three types of pragma statements:
1902:  * PRAGMA pragma_name;          (NOTHING)
1903:  * PRAGMA pragma_name='param';  (ASSIGNMENT)
1904:  * PRAGMA pragma_name('param'); (CALL)
1905:  * ----------------------
1906:  */
1907: typedef enum { PG_PRAGMA_TYPE_NOTHING, PG_PRAGMA_TYPE_ASSIGNMENT, PG_PRAGMA_TYPE_CALL } PGPragmaKind;
1908: 
1909: typedef struct PGPragmaStmt {
1910: 	PGNodeTag type;
1911: 	PGPragmaKind kind;
1912: 	char *name;   /* variable to be set */
1913: 	PGList *args; /* PGList of PGAConst nodes */
1914: } PGPragmaStmt;
1915: 
1916: /* ----------------------
1917:  *		CALL Statement
1918:  * ----------------------
1919:  */
1920: 
1921: typedef struct PGCallStmt {
1922: 	PGNodeTag type;
1923: 	PGNode *func;
1924: } PGCallStmt;
1925: 
1926: /* ----------------------
1927:  *		EXPORT/IMPORT Statements
1928:  * ----------------------
1929:  */
1930: 
1931: typedef struct PGExportStmt {
1932: 	PGNodeTag type;
1933: 	char *filename;       /* filename */
1934: 	PGList *options;      /* PGList of PGDefElem nodes */
1935: } PGExportStmt;
1936: 
1937: typedef struct PGImportStmt {
1938: 	PGNodeTag type;
1939: 	char *filename;       /* filename */
1940: } PGImportStmt;
1941: 
1942: /* ----------------------
1943:  *		Interval Constant
1944:  * ----------------------
1945:  */
1946: typedef struct PGIntervalConstant {
1947: 	PGNodeTag type;
1948: 	int val_type;         /* interval constant type, either duckdb_libpgquery::T_PGString, duckdb_libpgquery::T_PGInteger or duckdb_libpgquery::T_PGAExpr */
1949: 	char *sval;           /* duckdb_libpgquery::T_PGString */
1950: 	int ival;             /* duckdb_libpgquery::T_PGString */
1951: 	PGNode *eval;         /* duckdb_libpgquery::T_PGAExpr */
1952: 	PGList *typmods;      /* how to interpret the interval constant (year, month, day, etc)  */
1953: 	int location;         /* token location, or -1 if unknown */
1954: } PGIntervalConstant;
1955: 
1956: /* ----------------------
1957:  *		Sample Options
1958:  * ----------------------
1959:  */
1960: typedef struct PGSampleSize {
1961: 	PGNodeTag type;
1962: 	bool is_percentage;   /* whether or not the sample size is expressed in row numbers or a percentage */
1963: 	PGValue sample_size;  /* sample size */
1964: } PGSampleSize;
1965: 
1966: typedef struct PGSampleOptions {
1967: 	PGNodeTag type;
1968: 	PGNode *sample_size;      /* the size of the sample to take */
1969: 	char *method;             /* sample method, or NULL for default */
1970: 	int seed;                 /* seed, or NULL for default; */
1971: 	int location;             /* token location, or -1 if unknown */
1972: } PGSampleOptions;
1973: 
1974: 
1975: /* ----------------------
1976:  *		Lambda Function
1977:  * ----------------------
1978:  */
1979: typedef struct PGLambdaFunction {
1980: 	PGNodeTag type;
1981: 	PGList *parameters;          /* list of input parameters */
1982: 	PGNode *function;            /* lambda expression */
1983: 	int location;                /* token location, or -1 if unknown */
1984: } PGLambdaFunction;
1985: 
1986: /* ----------------------
1987:  *		Positional Reference
1988:  * ----------------------
1989:  */
1990: typedef struct PGPositionalReference {
1991: 	PGNodeTag type;
1992: 	int position;
1993: 	int location;                /* token location, or -1 if unknown */
1994: } PGPositionalReference;
1995: 
1996: /* ----------------------
1997:  *		Enum Statement
1998:  * ----------------------
1999:  */
2000: 
2001: typedef struct PGCreateEnumStmt
2002: {
2003: 	PGNodeTag		type;
2004: 	PGList	   *typeName;		/* qualified name (list of Value strings) */
2005: 	PGList	   *vals;			/* enum values (list of Value strings) */
2006: } PGCreateEnumStmt;
2007: 
2008: 
2009: 
2010: 
2011: 
2012: }
[end of third_party/libpg_query/include/nodes/parsenodes.hpp]
[start of third_party/libpg_query/include/nodes/primnodes.hpp]
1: /*-------------------------------------------------------------------------
2:  *
3:  * primnodes.h
4:  *	  Definitions for "primitive" node types, those that are used in more
5:  *	  than one of the parse/plan/execute stages of the query pipeline.
6:  *	  Currently, these are mostly nodes for executable expressions
7:  *	  and join trees.
8:  *
9:  *
10:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
11:  * Portions Copyright (c) 1994, Regents of the University of California
12:  *
13:  * src/include/nodes/primnodes.h
14:  *
15:  *-------------------------------------------------------------------------
16:  */
17: #pragma once
18: 
19: #include "access/attnum.hpp"
20: #include "nodes/bitmapset.hpp"
21: #include "nodes/pg_list.hpp"
22: 
23: namespace duckdb_libpgquery {
24: 
25: /* ----------------------------------------------------------------
26:  *						node definitions
27:  * ----------------------------------------------------------------
28:  */
29: 
30: /*
31:  * PGAlias -
32:  *	  specifies an alias for a range variable; the alias might also
33:  *	  specify renaming of columns within the table.
34:  *
35:  * Note: colnames is a list of PGValue nodes (always strings).  In PGAlias structs
36:  * associated with RTEs, there may be entries corresponding to dropped
37:  * columns; these are normally empty strings ("").  See parsenodes.h for info.
38:  */
39: typedef struct PGAlias {
40: 	PGNodeTag type;
41: 	char *aliasname;  /* aliased rel name (never qualified) */
42: 	PGList *colnames; /* optional list of column aliases */
43: } PGAlias;
44: 
45: /* What to do at commit time for temporary relations */
46: typedef enum PGOnCommitAction {
47: 	PG_ONCOMMIT_NOOP,          /* No ON COMMIT clause (do nothing) */
48: 	PG_ONCOMMIT_PRESERVE_ROWS, /* ON COMMIT PRESERVE ROWS (do nothing) */
49: 	PG_ONCOMMIT_DELETE_ROWS,   /* ON COMMIT DELETE ROWS */
50: 	ONCOMMIT_DROP              /* ON COMMIT DROP */
51: } PGOnCommitAction;
52: 
53: /*
54:  * PGRangeVar - range variable, used in FROM clauses
55:  *
56:  * Also used to represent table names in utility statements; there, the alias
57:  * field is not used, and inh tells whether to apply the operation
58:  * recursively to child tables.  In some contexts it is also useful to carry
59:  * a TEMP table indication here.
60:  */
61: typedef struct PGRangeVar {
62: 	PGNodeTag type;
63: 	char *catalogname;   /* the catalog (database) name, or NULL */
64: 	char *schemaname;    /* the schema name, or NULL */
65: 	char *relname;       /* the relation/sequence name */
66: 	bool inh;            /* expand rel by inheritance? recursively act
67: 								 * on children? */
68: 	char relpersistence; /* see RELPERSISTENCE_* in pg_class.h */
69: 	PGAlias *alias;      /* table alias & optional column aliases */
70: 	int location;        /* token location, or -1 if unknown */
71: 	PGNode *sample;      /* sample, if any */
72: } PGRangeVar;
73: 
74: /*
75:  * PGTableFunc - node for a table function, such as XMLTABLE.
76:  */
77: typedef struct PGTableFunc {
78: 	PGNodeTag type;
79: 	PGList *ns_uris;       /* list of namespace uri */
80: 	PGList *ns_names;      /* list of namespace names */
81: 	PGNode *docexpr;       /* input document expression */
82: 	PGNode *rowexpr;       /* row filter expression */
83: 	PGList *colnames;      /* column names (list of String) */
84: 	PGList *coltypes;      /* OID list of column type OIDs */
85: 	PGList *coltypmods;    /* integer list of column typmods */
86: 	PGList *colcollations; /* OID list of column collation OIDs */
87: 	PGList *colexprs;      /* list of column filter expressions */
88: 	PGList *coldefexprs;   /* list of column default expressions */
89: 	PGBitmapset *notnulls; /* nullability flag for each output column */
90: 	int ordinalitycol;     /* counts from 0; -1 if none specified */
91: 	int location;          /* token location, or -1 if unknown */
92: } PGTableFunc;
93: 
94: /*
95:  * PGIntoClause - target information for SELECT INTO, CREATE TABLE AS, and
96:  * CREATE MATERIALIZED VIEW
97:  *
98:  * For CREATE MATERIALIZED VIEW, viewQuery is the parsed-but-not-rewritten
99:  * SELECT PGQuery for the view; otherwise it's NULL.  (Although it's actually
100:  * PGQuery*, we declare it as PGNode* to avoid a forward reference.)
101:  */
102: typedef struct PGIntoClause {
103: 	PGNodeTag type;
104: 
105: 	PGRangeVar *rel;           /* target relation name */
106: 	PGList *colNames;          /* column names to assign, or NIL */
107: 	PGList *options;           /* options from WITH clause */
108: 	PGOnCommitAction onCommit; /* what do we do at COMMIT? */
109: 	char *tableSpaceName;      /* table space to use, or NULL */
110: 	PGNode *viewQuery;         /* materialized view's SELECT query */
111: 	bool skipData;             /* true for WITH NO DATA */
112: } PGIntoClause;
113: 
114: /* ----------------------------------------------------------------
115:  *					node types for executable expressions
116:  * ----------------------------------------------------------------
117:  */
118: 
119: /*
120:  * PGExpr - generic superclass for executable-expression nodes
121:  *
122:  * All node types that are used in executable expression trees should derive
123:  * from PGExpr (that is, have PGExpr as their first field).  Since PGExpr only
124:  * contains PGNodeTag, this is a formality, but it is an easy form of
125:  * documentation.  See also the ExprState node types in execnodes.h.
126:  */
127: typedef struct PGExpr {
128: 	PGNodeTag type;
129: } PGExpr;
130: 
131: /*
132:  * PGVar - expression node representing a variable (ie, a table column)
133:  *
134:  * Note: during parsing/planning, varnoold/varoattno are always just copies
135:  * of varno/varattno.  At the tail end of planning, PGVar nodes appearing in
136:  * upper-level plan nodes are reassigned to point to the outputs of their
137:  * subplans; for example, in a join node varno becomes INNER_VAR or OUTER_VAR
138:  * and varattno becomes the index of the proper element of that subplan's
139:  * target list.  Similarly, INDEX_VAR is used to identify Vars that reference
140:  * an index column rather than a heap column.  (In PGForeignScan and PGCustomScan
141:  * plan nodes, INDEX_VAR is abused to signify references to columns of a
142:  * custom scan tuple type.)  In all these cases, varnoold/varoattno hold the
143:  * original values.  The code doesn't really need varnoold/varoattno, but they
144:  * are very useful for debugging and interpreting completed plans, so we keep
145:  * them around.
146:  */
147: #define INNER_VAR 65000 /* reference to inner subplan */
148: #define OUTER_VAR 65001 /* reference to outer subplan */
149: #define INDEX_VAR 65002 /* reference to index column */
150: 
151: #define IS_SPECIAL_VARNO(varno) ((varno) >= INNER_VAR)
152: 
153: /* Symbols for the indexes of the special RTE entries in rules */
154: #define PRS2_OLD_VARNO 1
155: #define PRS2_NEW_VARNO 2
156: 
157: typedef struct PGVar {
158: 	PGExpr xpr;
159: 	PGIndex varno;          /* index of this var's relation in the range
160: 								 * table, or INNER_VAR/OUTER_VAR/INDEX_VAR */
161: 	PGAttrNumber varattno;  /* attribute number of this var, or zero for
162: 								 * all */
163: 	PGOid vartype;          /* pg_type OID for the type of this var */
164: 	int32_t vartypmod;      /* pg_attribute typmod value */
165: 	PGOid varcollid;        /* OID of collation, or InvalidOid if none */
166: 	PGIndex varlevelsup;    /* for subquery variables referencing outer
167: 								 * relations; 0 in a normal var, >0 means N
168: 								 * levels up */
169: 	PGIndex varnoold;       /* original value of varno, for debugging */
170: 	PGAttrNumber varoattno; /* original value of varattno */
171: 	int location;           /* token location, or -1 if unknown */
172: } PGVar;
173: 
174: /*
175:  * PGConst
176:  *
177:  * Note: for pg_varlena data types, we make a rule that a PGConst node's value
178:  * must be in non-extended form (4-byte header, no compression or external
179:  * references).  This ensures that the PGConst node is self-contained and makes
180:  * it more likely that equal() will see logically identical values as equal.
181:  */
182: typedef struct PGConst {
183: 	PGExpr xpr;
184: 	PGOid consttype;     /* pg_type OID of the constant's datatype */
185: 	int32_t consttypmod; /* typmod value, if any */
186: 	PGOid constcollid;   /* OID of collation, or InvalidOid if none */
187: 	int constlen;        /* typlen of the constant's datatype */
188: 	PGDatum constvalue;  /* the constant's value */
189: 	bool constisnull;    /* whether the constant is null (if true,
190: 								 * constvalue is undefined) */
191: 	bool constbyval;     /* whether this datatype is passed by value.
192: 								 * If true, then all the information is stored
193: 								 * in the Datum. If false, then the PGDatum
194: 								 * contains a pointer to the information. */
195: 	int location;        /* token location, or -1 if unknown */
196: } PGConst;
197: 
198: /*
199:  * PGParam
200:  *
201:  *		paramkind specifies the kind of parameter. The possible values
202:  *		for this field are:
203:  *
204:  *		PG_PARAM_EXTERN:  The parameter value is supplied from outside the plan.
205:  *				Such parameters are numbered from 1 to n.
206:  *
207:  *		PG_PARAM_EXEC:  The parameter is an internal executor parameter, used
208:  *				for passing values into and out of sub-queries or from
209:  *				nestloop joins to their inner scans.
210:  *				For historical reasons, such parameters are numbered from 0.
211:  *				These numbers are independent of PG_PARAM_EXTERN numbers.
212:  *
213:  *		PG_PARAM_SUBLINK:	The parameter represents an output column of a PGSubLink
214:  *				node's sub-select.  The column number is contained in the
215:  *				`paramid' field.  (This type of PGParam is converted to
216:  *				PG_PARAM_EXEC during planning.)
217:  *
218:  *		PG_PARAM_MULTIEXPR:  Like PG_PARAM_SUBLINK, the parameter represents an
219:  *				output column of a PGSubLink node's sub-select, but here, the
220:  *				PGSubLink is always a MULTIEXPR SubLink.  The high-order 16 bits
221:  *				of the `paramid' field contain the SubLink's subLinkId, and
222:  *				the low-order 16 bits contain the column number.  (This type
223:  *				of PGParam is also converted to PG_PARAM_EXEC during planning.)
224:  */
225: typedef enum PGParamKind { PG_PARAM_EXTERN, PG_PARAM_EXEC, PG_PARAM_SUBLINK, PG_PARAM_MULTIEXPR } PGParamKind;
226: 
227: typedef struct PGParam {
228: 	PGExpr xpr;
229: 	PGParamKind paramkind; /* kind of parameter. See above */
230: 	int paramid;           /* numeric ID for parameter */
231: 	PGOid paramtype;       /* pg_type OID of parameter's datatype */
232: 	int32_t paramtypmod;   /* typmod value, if known */
233: 	PGOid paramcollid;     /* OID of collation, or InvalidOid if none */
234: 	int location;          /* token location, or -1 if unknown */
235: } PGParam;
236: 
237: /*
238:  * PGAggref
239:  *
240:  * The aggregate's args list is a targetlist, ie, a list of PGTargetEntry nodes.
241:  *
242:  * For a normal (non-ordered-set) aggregate, the non-resjunk TargetEntries
243:  * represent the aggregate's regular arguments (if any) and resjunk TLEs can
244:  * be added at the end to represent ORDER BY expressions that are not also
245:  * arguments.  As in a top-level PGQuery, the TLEs can be marked with
246:  * ressortgroupref indexes to let them be referenced by PGSortGroupClause
247:  * entries in the aggorder and/or aggdistinct lists.  This represents ORDER BY
248:  * and DISTINCT operations to be applied to the aggregate input rows before
249:  * they are passed to the transition function.  The grammar only allows a
250:  * simple "DISTINCT" specifier for the arguments, but we use the full
251:  * query-level representation to allow more code sharing.
252:  *
253:  * For an ordered-set aggregate, the args list represents the WITHIN GROUP
254:  * (aggregated) arguments, all of which will be listed in the aggorder list.
255:  * DISTINCT is not supported in this case, so aggdistinct will be NIL.
256:  * The direct arguments appear in aggdirectargs (as a list of plain
257:  * expressions, not PGTargetEntry nodes).
258:  *
259:  * aggtranstype is the data type of the state transition values for this
260:  * aggregate (resolved to an actual type, if agg's transtype is polymorphic).
261:  * This is determined during planning and is InvalidOid before that.
262:  *
263:  * aggargtypes is an OID list of the data types of the direct and regular
264:  * arguments.  Normally it's redundant with the aggdirectargs and args lists,
265:  * but in a combining aggregate, it's not because the args list has been
266:  * replaced with a single argument representing the partial-aggregate
267:  * transition values.
268:  *
269:  * aggsplit indicates the expected partial-aggregation mode for the Aggref's
270:  * parent plan node.  It's always set to PG_AGGSPLIT_SIMPLE in the parser, but
271:  * the planner might change it to something else.  We use this mainly as
272:  * a crosscheck that the Aggrefs match the plan; but note that when aggsplit
273:  * indicates a non-final mode, aggtype reflects the transition data type
274:  * not the SQL-level output type of the aggregate.
275:  */
276: typedef struct PGAggref {
277: 	PGExpr xpr;
278: 	PGOid aggfnoid;        /* pg_proc PGOid of the aggregate */
279: 	PGOid aggtype;         /* type PGOid of result of the aggregate */
280: 	PGOid aggcollid;       /* OID of collation of result */
281: 	PGOid inputcollid;     /* OID of collation that function should use */
282: 	PGOid aggtranstype;    /* type PGOid of aggregate's transition value */
283: 	PGList *aggargtypes;   /* type Oids of direct and aggregated args */
284: 	PGList *aggdirectargs; /* direct arguments, if an ordered-set agg */
285: 	PGList *args;          /* aggregated arguments and sort expressions */
286: 	PGList *aggorder;      /* ORDER BY (list of PGSortGroupClause) */
287: 	PGList *aggdistinct;   /* DISTINCT (list of PGSortGroupClause) */
288: 	PGExpr *aggfilter;     /* FILTER expression, if any */
289: 	bool aggstar;          /* true if argument list was really '*' */
290: 	bool aggvariadic;      /* true if variadic arguments have been
291: 								 * combined into an array last argument */
292: 	char aggkind;          /* aggregate kind (see pg_aggregate.h) */
293: 	PGIndex agglevelsup;   /* > 0 if agg belongs to outer query */
294: 	PGAggSplit aggsplit;   /* expected agg-splitting mode of parent PGAgg */
295: 	int location;          /* token location, or -1 if unknown */
296: } PGAggref;
297: 
298: /*
299:  * PGGroupingFunc
300:  *
301:  * A PGGroupingFunc is a GROUPING(...) expression, which behaves in many ways
302:  * like an aggregate function (e.g. it "belongs" to a specific query level,
303:  * which might not be the one immediately containing it), but also differs in
304:  * an important respect: it never evaluates its arguments, they merely
305:  * designate expressions from the GROUP BY clause of the query level to which
306:  * it belongs.
307:  *
308:  * The spec defines the evaluation of GROUPING() purely by syntactic
309:  * replacement, but we make it a real expression for optimization purposes so
310:  * that one PGAgg node can handle multiple grouping sets at once.  Evaluating the
311:  * result only needs the column positions to check against the grouping set
312:  * being projected.  However, for EXPLAIN to produce meaningful output, we have
313:  * to keep the original expressions around, since expression deparse does not
314:  * give us any feasible way to get at the GROUP BY clause.
315:  *
316:  * Also, we treat two PGGroupingFunc nodes as equal if they have equal arguments
317:  * lists and agglevelsup, without comparing the refs and cols annotations.
318:  *
319:  * In raw parse output we have only the args list; parse analysis fills in the
320:  * refs list, and the planner fills in the cols list.
321:  */
322: typedef struct PGGroupingFunc {
323: 	PGExpr xpr;
324: 	PGList *args;        /* arguments, not evaluated but kept for
325: 								 * benefit of EXPLAIN etc. */
326: 	PGList *refs;        /* ressortgrouprefs of arguments */
327: 	PGList *cols;        /* actual column positions set by planner */
328: 	PGIndex agglevelsup; /* same as Aggref.agglevelsup */
329: 	int location;        /* token location */
330: } PGGroupingFunc;
331: 
332: /*
333:  * PGWindowFunc
334:  */
335: typedef struct PGWindowFunc {
336: 	PGExpr xpr;
337: 	PGOid winfnoid;    /* pg_proc PGOid of the function */
338: 	PGOid wintype;     /* type PGOid of result of the window function */
339: 	PGOid wincollid;   /* OID of collation of result */
340: 	PGOid inputcollid; /* OID of collation that function should use */
341: 	PGList *args;      /* arguments to the window function */
342: 	PGExpr *aggfilter; /* FILTER expression, if any */
343: 	PGIndex winref;    /* index of associated PGWindowClause */
344: 	bool winstar;      /* true if argument list was really '*' */
345: 	bool winagg;       /* is function a simple aggregate? */
346: 	int location;      /* token location, or -1 if unknown */
347: } PGWindowFunc;
348: 
349: /* ----------------
350:  *	PGArrayRef: describes an array subscripting operation
351:  *
352:  * An PGArrayRef can describe fetching a single element from an array,
353:  * fetching a subarray (array slice), storing a single element into
354:  * an array, or storing a slice.  The "store" cases work with an
355:  * initial array value and a source value that is inserted into the
356:  * appropriate part of the array; the result of the operation is an
357:  * entire new modified array value.
358:  *
359:  * If reflowerindexpr = NIL, then we are fetching or storing a single array
360:  * element at the subscripts given by refupperindexpr.  Otherwise we are
361:  * fetching or storing an array slice, that is a rectangular subarray
362:  * with lower and upper bounds given by the index expressions.
363:  * reflowerindexpr must be the same length as refupperindexpr when it
364:  * is not NIL.
365:  *
366:  * In the slice case, individual expressions in the subscript lists can be
367:  * NULL, meaning "substitute the array's current lower or upper bound".
368:  *
369:  * Note: the result datatype is the element type when fetching a single
370:  * element; but it is the array type when doing subarray fetch or either
371:  * type of store.
372:  *
373:  * Note: for the cases where an array is returned, if refexpr yields a R/W
374:  * expanded array, then the implementation is allowed to modify that object
375:  * in-place and return the same object.)
376:  * ----------------
377:  */
378: typedef struct PGArrayRef {
379: 	PGExpr xpr;
380: 	PGOid refarraytype;      /* type of the array proper */
381: 	PGOid refelemtype;       /* type of the array elements */
382: 	int32_t reftypmod;       /* typmod of the array (and elements too) */
383: 	PGOid refcollid;         /* OID of collation, or InvalidOid if none */
384: 	PGList *refupperindexpr; /* expressions that evaluate to upper
385: 									 * array indexes */
386: 	PGList *reflowerindexpr; /* expressions that evaluate to lower
387: 									 * array indexes, or NIL for single array
388: 									 * element */
389: 	PGExpr *refexpr;         /* the expression that evaluates to an array
390: 								 * value */
391: 	PGExpr *refassgnexpr;    /* expression for the source value, or NULL if
392: 								 * fetch */
393: } PGArrayRef;
394: 
395: /*
396:  * PGCoercionContext - distinguishes the allowed set of type casts
397:  *
398:  * NB: ordering of the alternatives is significant; later (larger) values
399:  * allow more casts than earlier ones.
400:  */
401: typedef enum PGCoercionContext {
402: 	PG_COERCION_IMPLICIT,   /* coercion in context of expression */
403: 	PG_COERCION_ASSIGNMENT, /* coercion in context of assignment */
404: 	PG_COERCION_EXPLICIT    /* explicit cast operation */
405: } PGCoercionContext;
406: 
407: /*
408:  * PGCoercionForm - how to display a node that could have come from a cast
409:  *
410:  * NB: equal() ignores PGCoercionForm fields, therefore this *must* not carry
411:  * any semantically significant information.  We need that behavior so that
412:  * the planner will consider equivalent implicit and explicit casts to be
413:  * equivalent.  In cases where those actually behave differently, the coercion
414:  * function's arguments will be different.
415:  */
416: typedef enum PGCoercionForm {
417: 	PG_COERCE_EXPLICIT_CALL, /* display as a function call */
418: 	PG_COERCE_EXPLICIT_CAST, /* display as an explicit cast */
419: 	PG_COERCE_IMPLICIT_CAST  /* implicit cast, so hide it */
420: } PGCoercionForm;
421: 
422: /*
423:  * PGFuncExpr - expression node for a function call
424:  */
425: typedef struct PGFuncExpr {
426: 	PGExpr xpr;
427: 	PGOid funcid;              /* PG_PROC OID of the function */
428: 	PGOid funcresulttype;      /* PG_TYPE OID of result value */
429: 	bool funcretset;           /* true if function returns set */
430: 	bool funcvariadic;         /* true if variadic arguments have been
431: 								 * combined into an array last argument */
432: 	PGCoercionForm funcformat; /* how to display this function call */
433: 	PGOid funccollid;          /* OID of collation of result */
434: 	PGOid inputcollid;         /* OID of collation that function should use */
435: 	PGList *args;              /* arguments to the function */
436: 	int location;              /* token location, or -1 if unknown */
437: } PGFuncExpr;
438: 
439: /*
440:  * PGNamedArgExpr - a named argument of a function
441:  *
442:  * This node type can only appear in the args list of a PGFuncCall or PGFuncExpr
443:  * node.  We support pure positional call notation (no named arguments),
444:  * named notation (all arguments are named), and mixed notation (unnamed
445:  * arguments followed by named ones).
446:  *
447:  * Parse analysis sets argnumber to the positional index of the argument,
448:  * but doesn't rearrange the argument list.
449:  *
450:  * The planner will convert argument lists to pure positional notation
451:  * during expression preprocessing, so execution never sees a NamedArgExpr.
452:  */
453: typedef struct PGNamedArgExpr {
454: 	PGExpr xpr;
455: 	PGExpr *arg;   /* the argument expression */
456: 	char *name;    /* the name */
457: 	int argnumber; /* argument's number in positional notation */
458: 	int location;  /* argument name location, or -1 if unknown */
459: } PGNamedArgExpr;
460: 
461: /*
462:  * PGOpExpr - expression node for an operator invocation
463:  *
464:  * Semantically, this is essentially the same as a function call.
465:  *
466:  * Note that opfuncid is not necessarily filled in immediately on creation
467:  * of the node.  The planner makes sure it is valid before passing the node
468:  * tree to the executor, but during parsing/planning opfuncid can be 0.
469:  */
470: typedef struct PGOpExpr {
471: 	PGExpr xpr;
472: 	PGOid opno;         /* PG_OPERATOR OID of the operator */
473: 	PGOid opfuncid;     /* PG_PROC OID of underlying function */
474: 	PGOid opresulttype; /* PG_TYPE OID of result value */
475: 	bool opretset;      /* true if operator returns set */
476: 	PGOid opcollid;     /* OID of collation of result */
477: 	PGOid inputcollid;  /* OID of collation that operator should use */
478: 	PGList *args;       /* arguments to the operator (1 or 2) */
479: 	int location;       /* token location, or -1 if unknown */
480: } PGOpExpr;
481: 
482: /*
483:  * DistinctExpr - expression node for "x IS DISTINCT FROM y"
484:  *
485:  * Except for the nodetag, this is represented identically to an PGOpExpr
486:  * referencing the "=" operator for x and y.
487:  * We use "=", not the more obvious "<>", because more datatypes have "="
488:  * than "<>".  This means the executor must invert the operator result.
489:  * Note that the operator function won't be called at all if either input
490:  * is NULL, since then the result can be determined directly.
491:  */
492: typedef PGOpExpr DistinctExpr;
493: 
494: /*
495:  * NullIfExpr - a NULLIF expression
496:  *
497:  * Like DistinctExpr, this is represented the same as an PGOpExpr referencing
498:  * the "=" operator for x and y.
499:  */
500: typedef PGOpExpr NullIfExpr;
501: 
502: /*
503:  * PGScalarArrayOpExpr - expression node for "scalar op ANY/ALL (array)"
504:  *
505:  * The operator must yield boolean.  It is applied to the left operand
506:  * and each element of the righthand array, and the results are combined
507:  * with OR or AND (for ANY or ALL respectively).  The node representation
508:  * is almost the same as for the underlying operator, but we need a useOr
509:  * flag to remember whether it's ANY or ALL, and we don't have to store
510:  * the result type (or the collation) because it must be boolean.
511:  */
512: typedef struct PGScalarArrayOpExpr {
513: 	PGExpr xpr;
514: 	PGOid opno;        /* PG_OPERATOR OID of the operator */
515: 	PGOid opfuncid;    /* PG_PROC OID of underlying function */
516: 	bool useOr;        /* true for ANY, false for ALL */
517: 	PGOid inputcollid; /* OID of collation that operator should use */
518: 	PGList *args;      /* the scalar and array operands */
519: 	int location;      /* token location, or -1 if unknown */
520: } PGScalarArrayOpExpr;
521: 
522: /*
523:  * PGBoolExpr - expression node for the basic Boolean operators AND, OR, NOT
524:  *
525:  * Notice the arguments are given as a List.  For NOT, of course the list
526:  * must always have exactly one element.  For AND and OR, there can be two
527:  * or more arguments.
528:  */
529: typedef enum PGBoolExprType { PG_AND_EXPR, PG_OR_EXPR, PG_NOT_EXPR } PGBoolExprType;
530: 
531: typedef struct PGBoolExpr {
532: 	PGExpr xpr;
533: 	PGBoolExprType boolop;
534: 	PGList *args; /* arguments to this expression */
535: 	int location; /* token location, or -1 if unknown */
536: } PGBoolExpr;
537: 
538: /*
539:  * PGSubLink
540:  *
541:  * A PGSubLink represents a subselect appearing in an expression, and in some
542:  * cases also the combining operator(s) just above it.  The subLinkType
543:  * indicates the form of the expression represented:
544:  *	PG_EXISTS_SUBLINK		EXISTS(SELECT ...)
545:  *	PG_ALL_SUBLINK			(lefthand) op ALL (SELECT ...)
546:  *	PG_ANY_SUBLINK			(lefthand) op ANY (SELECT ...)
547:  *	PG_ROWCOMPARE_SUBLINK	(lefthand) op (SELECT ...)
548:  *	PG_EXPR_SUBLINK		(SELECT with single targetlist item ...)
549:  *	PG_MULTIEXPR_SUBLINK	(SELECT with multiple targetlist items ...)
550:  *	PG_ARRAY_SUBLINK		ARRAY(SELECT with single targetlist item ...)
551:  *	PG_CTE_SUBLINK			WITH query (never actually part of an expression)
552:  * For ALL, ANY, and ROWCOMPARE, the lefthand is a list of expressions of the
553:  * same length as the subselect's targetlist.  ROWCOMPARE will *always* have
554:  * a list with more than one entry; if the subselect has just one target
555:  * then the parser will create an PG_EXPR_SUBLINK instead (and any operator
556:  * above the subselect will be represented separately).
557:  * ROWCOMPARE, EXPR, and MULTIEXPR require the subselect to deliver at most
558:  * one row (if it returns no rows, the result is NULL).
559:  * ALL, ANY, and ROWCOMPARE require the combining operators to deliver boolean
560:  * results.  ALL and ANY combine the per-row results using AND and OR
561:  * semantics respectively.
562:  * ARRAY requires just one target column, and creates an array of the target
563:  * column's type using any number of rows resulting from the subselect.
564:  *
565:  * PGSubLink is classed as an PGExpr node, but it is not actually executable;
566:  * it must be replaced in the expression tree by a PGSubPlan node during
567:  * planning.
568:  *
569:  * NOTE: in the raw output of gram.y, testexpr contains just the raw form
570:  * of the lefthand expression (if any), and operName is the String name of
571:  * the combining operator.  Also, subselect is a raw parsetree.  During parse
572:  * analysis, the parser transforms testexpr into a complete boolean expression
573:  * that compares the lefthand value(s) to PG_PARAM_SUBLINK nodes representing the
574:  * output columns of the subselect.  And subselect is transformed to a Query.
575:  * This is the representation seen in saved rules and in the rewriter.
576:  *
577:  * In EXISTS, EXPR, MULTIEXPR, and ARRAY SubLinks, testexpr and operName
578:  * are unused and are always null.
579:  *
580:  * subLinkId is currently used only for MULTIEXPR SubLinks, and is zero in
581:  * other SubLinks.  This number identifies different multiple-assignment
582:  * subqueries within an UPDATE statement's SET list.  It is unique only
583:  * within a particular targetlist.  The output column(s) of the MULTIEXPR
584:  * are referenced by PG_PARAM_MULTIEXPR Params appearing elsewhere in the tlist.
585:  *
586:  * The PG_CTE_SUBLINK case never occurs in actual PGSubLink nodes, but it is used
587:  * in SubPlans generated for WITH subqueries.
588:  */
589: typedef enum PGSubLinkType {
590: 	PG_EXISTS_SUBLINK,
591: 	PG_ALL_SUBLINK,
592: 	PG_ANY_SUBLINK,
593: 	PG_ROWCOMPARE_SUBLINK,
594: 	PG_EXPR_SUBLINK,
595: 	PG_MULTIEXPR_SUBLINK,
596: 	PG_ARRAY_SUBLINK,
597: 	PG_CTE_SUBLINK /* for SubPlans only */
598: } PGSubLinkType;
599: 
600: typedef struct PGSubLink {
601: 	PGExpr xpr;
602: 	PGSubLinkType subLinkType; /* see above */
603: 	int subLinkId;             /* ID (1..n); 0 if not MULTIEXPR */
604: 	PGNode *testexpr;          /* outer-query test for ALL/ANY/ROWCOMPARE */
605: 	PGList *operName;          /* originally specified operator name */
606: 	PGNode *subselect;         /* subselect as PGQuery* or raw parsetree */
607: 	int location;              /* token location, or -1 if unknown */
608: } PGSubLink;
609: 
610: /*
611:  * PGSubPlan - executable expression node for a subplan (sub-SELECT)
612:  *
613:  * The planner replaces PGSubLink nodes in expression trees with PGSubPlan
614:  * nodes after it has finished planning the subquery.  PGSubPlan references
615:  * a sub-plantree stored in the subplans list of the toplevel PlannedStmt.
616:  * (We avoid a direct link to make it easier to copy expression trees
617:  * without causing multiple processing of the subplan.)
618:  *
619:  * In an ordinary subplan, testexpr points to an executable expression
620:  * (PGOpExpr, an AND/OR tree of OpExprs, or PGRowCompareExpr) for the combining
621:  * operator(s); the left-hand arguments are the original lefthand expressions,
622:  * and the right-hand arguments are PG_PARAM_EXEC PGParam nodes representing the
623:  * outputs of the sub-select.  (NOTE: runtime coercion functions may be
624:  * inserted as well.)  This is just the same expression tree as testexpr in
625:  * the original PGSubLink node, but the PG_PARAM_SUBLINK nodes are replaced by
626:  * suitably numbered PG_PARAM_EXEC nodes.
627:  *
628:  * If the sub-select becomes an initplan rather than a subplan, the executable
629:  * expression is part of the outer plan's expression tree (and the PGSubPlan
630:  * node itself is not, but rather is found in the outer plan's initPlan
631:  * list).  In this case testexpr is NULL to avoid duplication.
632:  *
633:  * The planner also derives lists of the values that need to be passed into
634:  * and out of the subplan.  Input values are represented as a list "args" of
635:  * expressions to be evaluated in the outer-query context (currently these
636:  * args are always just Vars, but in principle they could be any expression).
637:  * The values are assigned to the global PG_PARAM_EXEC params indexed by parParam
638:  * (the parParam and args lists must have the same ordering).  setParam is a
639:  * list of the PG_PARAM_EXEC params that are computed by the sub-select, if it
640:  * is an initplan; they are listed in order by sub-select output column
641:  * position.  (parParam and setParam are integer Lists, not Bitmapsets,
642:  * because their ordering is significant.)
643:  *
644:  * Also, the planner computes startup and per-call costs for use of the
645:  * SubPlan.  Note that these include the cost of the subquery proper,
646:  * evaluation of the testexpr if any, and any hashtable management overhead.
647:  */
648: typedef struct PGSubPlan {
649: 	PGExpr xpr;
650: 	/* Fields copied from original PGSubLink: */
651: 	PGSubLinkType subLinkType; /* see above */
652: 	/* The combining operators, transformed to an executable expression: */
653: 	PGNode *testexpr; /* PGOpExpr or PGRowCompareExpr expression tree */
654: 	PGList *paramIds; /* IDs of Params embedded in the above */
655: 	/* Identification of the PGPlan tree to use: */
656: 	int plan_id; /* PGIndex (from 1) in PlannedStmt.subplans */
657: 	/* Identification of the PGSubPlan for EXPLAIN and debugging purposes: */
658: 	char *plan_name; /* A name assigned during planning */
659: 	/* Extra data useful for determining subplan's output type: */
660: 	PGOid firstColType;      /* Type of first column of subplan result */
661: 	int32_t firstColTypmod;  /* Typmod of first column of subplan result */
662: 	PGOid firstColCollation; /* Collation of first column of subplan
663: 									 * result */
664: 	/* Information about execution strategy: */
665: 	bool useHashTable;   /* true to store subselect output in a hash
666: 								 * table (implies we are doing "IN") */
667: 	bool unknownEqFalse; /* true if it's okay to return false when the
668: 								 * spec result is UNKNOWN; this allows much
669: 								 * simpler handling of null values */
670: 	bool parallel_safe;  /* is the subplan parallel-safe? */
671: 	/* Note: parallel_safe does not consider contents of testexpr or args */
672: 	/* Information for passing params into and out of the subselect: */
673: 	/* setParam and parParam are lists of integers (param IDs) */
674: 	PGList *setParam; /* initplan subqueries have to set these
675: 								 * Params for parent plan */
676: 	PGList *parParam; /* indices of input Params from parent plan */
677: 	PGList *args;     /* exprs to pass as parParam values */
678: 	/* Estimated execution costs: */
679: 	Cost startup_cost;  /* one-time setup cost */
680: 	Cost per_call_cost; /* cost for each subplan evaluation */
681: } PGSubPlan;
682: 
683: /*
684:  * PGAlternativeSubPlan - expression node for a choice among SubPlans
685:  *
686:  * The subplans are given as a PGList so that the node definition need not
687:  * change if there's ever more than two alternatives.  For the moment,
688:  * though, there are always exactly two; and the first one is the fast-start
689:  * plan.
690:  */
691: typedef struct PGAlternativeSubPlan {
692: 	PGExpr xpr;
693: 	PGList *subplans; /* SubPlan(s) with equivalent results */
694: } PGAlternativeSubPlan;
695: 
696: /* ----------------
697:  * PGFieldSelect
698:  *
699:  * PGFieldSelect represents the operation of extracting one field from a tuple
700:  * value.  At runtime, the input expression is expected to yield a rowtype
701:  * Datum.  The specified field number is extracted and returned as a Datum.
702:  * ----------------
703:  */
704: 
705: typedef struct PGFieldSelect {
706: 	PGExpr xpr;
707: 	PGExpr *arg;           /* input expression */
708: 	PGAttrNumber fieldnum; /* attribute number of field to extract */
709: 	PGOid resulttype;      /* type of the field (result type of this
710: 								 * node) */
711: 	int32_t resulttypmod;  /* output typmod (usually -1) */
712: 	PGOid resultcollid;    /* OID of collation of the field */
713: } PGFieldSelect;
714: 
715: /* ----------------
716:  * PGFieldStore
717:  *
718:  * PGFieldStore represents the operation of modifying one field in a tuple
719:  * value, yielding a new tuple value (the input is not touched!).  Like
720:  * the assign case of PGArrayRef, this is used to implement UPDATE of a
721:  * portion of a column.
722:  *
723:  * A single PGFieldStore can actually represent updates of several different
724:  * fields.  The parser only generates FieldStores with single-element lists,
725:  * but the planner will collapse multiple updates of the same base column
726:  * into one FieldStore.
727:  * ----------------
728:  */
729: 
730: typedef struct PGFieldStore {
731: 	PGExpr xpr;
732: 	PGExpr *arg;       /* input tuple value */
733: 	PGList *newvals;   /* new value(s) for field(s) */
734: 	PGList *fieldnums; /* integer list of field attnums */
735: 	PGOid resulttype;  /* type of result (same as type of arg) */
736: 	                   /* Like PGRowExpr, we deliberately omit a typmod and collation here */
737: } PGFieldStore;
738: 
739: /* ----------------
740:  * PGRelabelType
741:  *
742:  * PGRelabelType represents a "dummy" type coercion between two binary-
743:  * compatible datatypes, such as reinterpreting the result of an OID
744:  * expression as an int4.  It is a no-op at runtime; we only need it
745:  * to provide a place to store the correct type to be attributed to
746:  * the expression result during type resolution.  (We can't get away
747:  * with just overwriting the type field of the input expression node,
748:  * so we need a separate node to show the coercion's result type.)
749:  * ----------------
750:  */
751: 
752: typedef struct PGRelabelType {
753: 	PGExpr xpr;
754: 	PGExpr *arg;                  /* input expression */
755: 	PGOid resulttype;             /* output type of coercion expression */
756: 	int32_t resulttypmod;         /* output typmod (usually -1) */
757: 	PGOid resultcollid;           /* OID of collation, or InvalidOid if none */
758: 	PGCoercionForm relabelformat; /* how to display this node */
759: 	int location;                 /* token location, or -1 if unknown */
760: } PGRelabelType;
761: 
762: /* ----------------
763:  * PGCoerceViaIO
764:  *
765:  * PGCoerceViaIO represents a type coercion between two types whose textual
766:  * representations are compatible, implemented by invoking the source type's
767:  * typoutput function then the destination type's typinput function.
768:  * ----------------
769:  */
770: 
771: typedef struct PGCoerceViaIO {
772: 	PGExpr xpr;
773: 	PGExpr *arg;      /* input expression */
774: 	PGOid resulttype; /* output type of coercion */
775: 	/* output typmod is not stored, but is presumed -1 */
776: 	PGOid resultcollid;          /* OID of collation, or InvalidOid if none */
777: 	PGCoercionForm coerceformat; /* how to display this node */
778: 	int location;                /* token location, or -1 if unknown */
779: } PGCoerceViaIO;
780: 
781: /* ----------------
782:  * PGArrayCoerceExpr
783:  *
784:  * PGArrayCoerceExpr represents a type coercion from one array type to another,
785:  * which is implemented by applying the indicated element-type coercion
786:  * function to each element of the source array.  If elemfuncid is InvalidOid
787:  * then the element types are binary-compatible, but the coercion still
788:  * requires some effort (we have to fix the element type ID stored in the
789:  * array header).
790:  * ----------------
791:  */
792: 
793: typedef struct PGArrayCoerceExpr {
794: 	PGExpr xpr;
795: 	PGExpr *arg;                 /* input expression (yields an array) */
796: 	PGOid elemfuncid;            /* OID of element coercion function, or 0 */
797: 	PGOid resulttype;            /* output type of coercion (an array type) */
798: 	int32_t resulttypmod;        /* output typmod (also element typmod) */
799: 	PGOid resultcollid;          /* OID of collation, or InvalidOid if none */
800: 	bool isExplicit;             /* conversion semantics flag to pass to func */
801: 	PGCoercionForm coerceformat; /* how to display this node */
802: 	int location;                /* token location, or -1 if unknown */
803: } PGArrayCoerceExpr;
804: 
805: /* ----------------
806:  * PGConvertRowtypeExpr
807:  *
808:  * PGConvertRowtypeExpr represents a type coercion from one composite type
809:  * to another, where the source type is guaranteed to contain all the columns
810:  * needed for the destination type plus possibly others; the columns need not
811:  * be in the same positions, but are matched up by name.  This is primarily
812:  * used to convert a whole-row value of an inheritance child table into a
813:  * valid whole-row value of its parent table's rowtype.
814:  * ----------------
815:  */
816: 
817: typedef struct PGConvertRowtypeExpr {
818: 	PGExpr xpr;
819: 	PGExpr *arg;      /* input expression */
820: 	PGOid resulttype; /* output type (always a composite type) */
821: 	/* Like PGRowExpr, we deliberately omit a typmod and collation here */
822: 	PGCoercionForm convertformat; /* how to display this node */
823: 	int location;                 /* token location, or -1 if unknown */
824: } PGConvertRowtypeExpr;
825: 
826: /*----------
827:  * PGCollateExpr - COLLATE
828:  *
829:  * The planner replaces PGCollateExpr with PGRelabelType during expression
830:  * preprocessing, so execution never sees a CollateExpr.
831:  *----------
832:  */
833: typedef struct PGCollateExpr {
834: 	PGExpr xpr;
835: 	PGExpr *arg;   /* input expression */
836: 	PGOid collOid; /* collation's OID */
837: 	int location;  /* token location, or -1 if unknown */
838: } PGCollateExpr;
839: 
840: /*----------
841:  * PGCaseExpr - a CASE expression
842:  *
843:  * We support two distinct forms of CASE expression:
844:  *		CASE WHEN boolexpr THEN expr [ WHEN boolexpr THEN expr ... ]
845:  *		CASE testexpr WHEN compexpr THEN expr [ WHEN compexpr THEN expr ... ]
846:  * These are distinguishable by the "arg" field being NULL in the first case
847:  * and the testexpr in the second case.
848:  *
849:  * In the raw grammar output for the second form, the condition expressions
850:  * of the WHEN clauses are just the comparison values.  Parse analysis
851:  * converts these to valid boolean expressions of the form
852:  *		PGCaseTestExpr '=' compexpr
853:  * where the PGCaseTestExpr node is a placeholder that emits the correct
854:  * value at runtime.  This structure is used so that the testexpr need be
855:  * evaluated only once.  Note that after parse analysis, the condition
856:  * expressions always yield boolean.
857:  *
858:  * Note: we can test whether a PGCaseExpr has been through parse analysis
859:  * yet by checking whether casetype is InvalidOid or not.
860:  *----------
861:  */
862: typedef struct PGCaseExpr {
863: 	PGExpr xpr;
864: 	PGOid casetype;    /* type of expression result */
865: 	PGOid casecollid;  /* OID of collation, or InvalidOid if none */
866: 	PGExpr *arg;       /* implicit equality comparison argument */
867: 	PGList *args;      /* the arguments (list of WHEN clauses) */
868: 	PGExpr *defresult; /* the default result (ELSE clause) */
869: 	int location;      /* token location, or -1 if unknown */
870: } PGCaseExpr;
871: 
872: /*
873:  * PGCaseWhen - one arm of a CASE expression
874:  */
875: typedef struct PGCaseWhen {
876: 	PGExpr xpr;
877: 	PGExpr *expr;   /* condition expression */
878: 	PGExpr *result; /* substitution result */
879: 	int location;   /* token location, or -1 if unknown */
880: } PGCaseWhen;
881: 
882: /*
883:  * Placeholder node for the test value to be processed by a CASE expression.
884:  * This is effectively like a PGParam, but can be implemented more simply
885:  * since we need only one replacement value at a time.
886:  *
887:  * We also use this in nested UPDATE expressions.
888:  * See transformAssignmentIndirection().
889:  */
890: typedef struct PGCaseTestExpr {
891: 	PGExpr xpr;
892: 	PGOid typeId;    /* type for substituted value */
893: 	int32_t typeMod; /* typemod for substituted value */
894: 	PGOid collation; /* collation for the substituted value */
895: } PGCaseTestExpr;
896: 
897: /*
898:  * PGArrayExpr - an ARRAY[] expression
899:  *
900:  * Note: if multidims is false, the constituent expressions all yield the
901:  * scalar type identified by element_typeid.  If multidims is true, the
902:  * constituent expressions all yield arrays of element_typeid (ie, the same
903:  * type as array_typeid); at runtime we must check for compatible subscripts.
904:  */
905: typedef struct PGArrayExpr {
906: 	PGExpr xpr;
907: 	PGOid array_typeid;   /* type of expression result */
908: 	PGOid array_collid;   /* OID of collation, or InvalidOid if none */
909: 	PGOid element_typeid; /* common type of array elements */
910: 	PGList *elements;     /* the array elements or sub-arrays */
911: 	bool multidims;       /* true if elements are sub-arrays */
912: 	int location;         /* token location, or -1 if unknown */
913: } PGArrayExpr;
914: 
915: /*
916:  * PGRowExpr - a ROW() expression
917:  *
918:  * Note: the list of fields must have a one-for-one correspondence with
919:  * physical fields of the associated rowtype, although it is okay for it
920:  * to be shorter than the rowtype.  That is, the N'th list element must
921:  * match up with the N'th physical field.  When the N'th physical field
922:  * is a dropped column (attisdropped) then the N'th list element can just
923:  * be a NULL constant.  (This case can only occur for named composite types,
924:  * not RECORD types, since those are built from the PGRowExpr itself rather
925:  * than vice versa.)  It is important not to assume that length(args) is
926:  * the same as the number of columns logically present in the rowtype.
927:  *
928:  * colnames provides field names in cases where the names can't easily be
929:  * obtained otherwise.  Names *must* be provided if row_typeid is RECORDOID.
930:  * If row_typeid identifies a known composite type, colnames can be NIL to
931:  * indicate the type's cataloged field names apply.  Note that colnames can
932:  * be non-NIL even for a composite type, and typically is when the PGRowExpr
933:  * was created by expanding a whole-row Var.  This is so that we can retain
934:  * the column alias names of the RTE that the PGVar referenced (which would
935:  * otherwise be very difficult to extract from the parsetree).  Like the
936:  * args list, colnames is one-for-one with physical fields of the rowtype.
937:  */
938: typedef struct PGRowExpr {
939: 	PGExpr xpr;
940: 	PGList *args;     /* the fields */
941: 	PGOid row_typeid; /* RECORDOID or a composite type's ID */
942: 
943: 	/*
944: 	 * Note: we deliberately do NOT store a typmod.  Although a typmod will be
945: 	 * associated with specific RECORD types at runtime, it will differ for
946: 	 * different backends, and so cannot safely be stored in stored
947: 	 * parsetrees.  We must assume typmod -1 for a PGRowExpr node.
948: 	 *
949: 	 * We don't need to store a collation either.  The result type is
950: 	 * necessarily composite, and composite types never have a collation.
951: 	 */
952: 	PGCoercionForm row_format; /* how to display this node */
953: 	PGList *colnames;          /* list of String, or NIL */
954: 	int location;              /* token location, or -1 if unknown */
955: } PGRowExpr;
956: 
957: /*
958:  * PGRowCompareExpr - row-wise comparison, such as (a, b) <= (1, 2)
959:  *
960:  * We support row comparison for any operator that can be determined to
961:  * act like =, <>, <, <=, >, or >= (we determine this by looking for the
962:  * operator in btree opfamilies).  Note that the same operator name might
963:  * map to a different operator for each pair of row elements, since the
964:  * element datatypes can vary.
965:  *
966:  * A PGRowCompareExpr node is only generated for the < <= > >= cases;
967:  * the = and <> cases are translated to simple AND or OR combinations
968:  * of the pairwise comparisons.  However, we include = and <> in the
969:  * PGRowCompareType enum for the convenience of parser logic.
970:  */
971: typedef enum PGRowCompareType {
972: 	/* Values of this enum are chosen to match btree strategy numbers */
973: 	PG_ROWCOMPARE_LT = 1, /* BTLessStrategyNumber */
974: 	PG_ROWCOMPARE_LE = 2, /* BTLessEqualStrategyNumber */
975: 	PG_ROWCOMPARE_EQ = 3, /* BTEqualStrategyNumber */
976: 	PG_ROWCOMPARE_GE = 4, /* BTGreaterEqualStrategyNumber */
977: 	PG_ROWCOMPARE_GT = 5, /* BTGreaterStrategyNumber */
978: 	PG_ROWCOMPARE_NE = 6  /* no such btree strategy */
979: } PGRowCompareType;
980: 
981: typedef struct PGRowCompareExpr {
982: 	PGExpr xpr;
983: 	PGRowCompareType rctype; /* LT LE GE or GT, never EQ or NE */
984: 	PGList *opnos;           /* OID list of pairwise comparison ops */
985: 	PGList *opfamilies;      /* OID list of containing operator families */
986: 	PGList *inputcollids;    /* OID list of collations for comparisons */
987: 	PGList *largs;           /* the left-hand input arguments */
988: 	PGList *rargs;           /* the right-hand input arguments */
989: } PGRowCompareExpr;
990: 
991: /*
992:  * PGCoalesceExpr - a COALESCE expression
993:  */
994: typedef struct PGCoalesceExpr {
995: 	PGExpr xpr;
996: 	PGOid coalescetype;   /* type of expression result */
997: 	PGOid coalescecollid; /* OID of collation, or InvalidOid if none */
998: 	PGList *args;         /* the arguments */
999: 	int location;         /* token location, or -1 if unknown */
1000: } PGCoalesceExpr;
1001: 
1002: /*
1003:  * PGMinMaxExpr - a GREATEST or LEAST function
1004:  */
1005: typedef enum PGMinMaxOp { PG_IS_GREATEST, IS_LEAST } PGMinMaxOp;
1006: 
1007: typedef struct PGMinMaxExpr {
1008: 	PGExpr xpr;
1009: 	PGOid minmaxtype;   /* common type of arguments and result */
1010: 	PGOid minmaxcollid; /* OID of collation of result */
1011: 	PGOid inputcollid;  /* OID of collation that function should use */
1012: 	PGMinMaxOp op;      /* function to execute */
1013: 	PGList *args;       /* the arguments */
1014: 	int location;       /* token location, or -1 if unknown */
1015: } PGMinMaxExpr;
1016: 
1017: /*
1018:  * PGSQLValueFunction - parameterless functions with special grammar productions
1019:  *
1020:  * The SQL standard categorizes some of these as <datetime value function>
1021:  * and others as <general value specification>.  We call 'em SQLValueFunctions
1022:  * for lack of a better term.  We store type and typmod of the result so that
1023:  * some code doesn't need to know each function individually, and because
1024:  * we would need to store typmod anyway for some of the datetime functions.
1025:  * Note that currently, all variants return non-collating datatypes, so we do
1026:  * not need a collation field; also, all these functions are stable.
1027:  */
1028: typedef enum PGSQLValueFunctionOp {
1029: 	PG_SVFOP_CURRENT_DATE,
1030: 	PG_SVFOP_CURRENT_TIME,
1031: 	PG_SVFOP_CURRENT_TIME_N,
1032: 	PG_SVFOP_CURRENT_TIMESTAMP,
1033: 	PG_SVFOP_CURRENT_TIMESTAMP_N,
1034: 	PG_SVFOP_LOCALTIME,
1035: 	PG_SVFOP_LOCALTIME_N,
1036: 	PG_SVFOP_LOCALTIMESTAMP,
1037: 	PG_SVFOP_LOCALTIMESTAMP_N,
1038: 	PG_SVFOP_CURRENT_ROLE,
1039: 	PG_SVFOP_CURRENT_USER,
1040: 	PG_SVFOP_USER,
1041: 	PG_SVFOP_SESSION_USER,
1042: 	PG_SVFOP_CURRENT_CATALOG,
1043: 	PG_SVFOP_CURRENT_SCHEMA
1044: } PGSQLValueFunctionOp;
1045: 
1046: typedef struct PGSQLValueFunction {
1047: 	PGExpr xpr;
1048: 	PGSQLValueFunctionOp op; /* which function this is */
1049: 	PGOid type;              /* result type/typmod */
1050: 	int32_t typmod;
1051: 	int location; /* token location, or -1 if unknown */
1052: } PGSQLValueFunction;
1053: 
1054: /* ----------------
1055:  * PGNullTest
1056:  *
1057:  * PGNullTest represents the operation of testing a value for NULLness.
1058:  * The appropriate test is performed and returned as a boolean Datum.
1059:  *
1060:  * When argisrow is false, this simply represents a test for the null value.
1061:  *
1062:  * When argisrow is true, the input expression must yield a rowtype, and
1063:  * the node implements "row IS [NOT] NULL" per the SQL standard.  This
1064:  * includes checking individual fields for NULLness when the row datum
1065:  * itself isn't NULL.
1066:  *
1067:  * NOTE: the combination of a rowtype input and argisrow==false does NOT
1068:  * correspond to the SQL notation "row IS [NOT] NULL"; instead, this case
1069:  * represents the SQL notation "row IS [NOT] DISTINCT FROM NULL".
1070:  * ----------------
1071:  */
1072: 
1073: typedef enum PGNullTestType { PG_IS_NULL, IS_NOT_NULL } PGNullTestType;
1074: 
1075: typedef struct PGNullTest {
1076: 	PGExpr xpr;
1077: 	PGExpr *arg;                 /* input expression */
1078: 	PGNullTestType nulltesttype; /* IS NULL, IS NOT NULL */
1079: 	bool argisrow;               /* T to perform field-by-field null checks */
1080: 	int location;                /* token location, or -1 if unknown */
1081: } PGNullTest;
1082: 
1083: /*
1084:  * PGBooleanTest
1085:  *
1086:  * PGBooleanTest represents the operation of determining whether a boolean
1087:  * is true, false, or UNKNOWN (ie, NULL).  All six meaningful combinations
1088:  * are supported.  Note that a NULL input does *not* cause a NULL result.
1089:  * The appropriate test is performed and returned as a boolean Datum.
1090:  */
1091: 
1092: typedef enum PGBoolTestType {
1093: 	PG_IS_TRUE,
1094: 	IS_NOT_TRUE,
1095: 	IS_FALSE,
1096: 	IS_NOT_FALSE,
1097: 	IS_UNKNOWN,
1098: 	IS_NOT_UNKNOWN
1099: } PGBoolTestType;
1100: 
1101: typedef struct PGBooleanTest {
1102: 	PGExpr xpr;
1103: 	PGExpr *arg;                 /* input expression */
1104: 	PGBoolTestType booltesttype; /* test type */
1105: 	int location;                /* token location, or -1 if unknown */
1106: } PGBooleanTest;
1107: 
1108: /*
1109:  * PGCoerceToDomain
1110:  *
1111:  * PGCoerceToDomain represents the operation of coercing a value to a domain
1112:  * type.  At runtime (and not before) the precise set of constraints to be
1113:  * checked will be determined.  If the value passes, it is returned as the
1114:  * result; if not, an error is raised.  Note that this is equivalent to
1115:  * PGRelabelType in the scenario where no constraints are applied.
1116:  */
1117: typedef struct PGCoerceToDomain {
1118: 	PGExpr xpr;
1119: 	PGExpr *arg;                   /* input expression */
1120: 	PGOid resulttype;              /* domain type ID (result type) */
1121: 	int32_t resulttypmod;          /* output typmod (currently always -1) */
1122: 	PGOid resultcollid;            /* OID of collation, or InvalidOid if none */
1123: 	PGCoercionForm coercionformat; /* how to display this node */
1124: 	int location;                  /* token location, or -1 if unknown */
1125: } PGCoerceToDomain;
1126: 
1127: /*
1128:  * Placeholder node for the value to be processed by a domain's check
1129:  * constraint.  This is effectively like a PGParam, but can be implemented more
1130:  * simply since we need only one replacement value at a time.
1131:  *
1132:  * Note: the typeId/typeMod/collation will be set from the domain's base type,
1133:  * not the domain itself.  This is because we shouldn't consider the value
1134:  * to be a member of the domain if we haven't yet checked its constraints.
1135:  */
1136: typedef struct PGCoerceToDomainValue {
1137: 	PGExpr xpr;
1138: 	PGOid typeId;    /* type for substituted value */
1139: 	int32_t typeMod; /* typemod for substituted value */
1140: 	PGOid collation; /* collation for the substituted value */
1141: 	int location;    /* token location, or -1 if unknown */
1142: } PGCoerceToDomainValue;
1143: 
1144: /*
1145:  * Placeholder node for a DEFAULT marker in an INSERT or UPDATE command.
1146:  *
1147:  * This is not an executable expression: it must be replaced by the actual
1148:  * column default expression during rewriting.  But it is convenient to
1149:  * treat it as an expression node during parsing and rewriting.
1150:  */
1151: typedef struct PGSetToDefault {
1152: 	PGExpr xpr;
1153: 	PGOid typeId;    /* type for substituted value */
1154: 	int32_t typeMod; /* typemod for substituted value */
1155: 	PGOid collation; /* collation for the substituted value */
1156: 	int location;    /* token location, or -1 if unknown */
1157: } PGSetToDefault;
1158: 
1159: /*
1160:  * PGNode representing [WHERE] CURRENT OF cursor_name
1161:  *
1162:  * CURRENT OF is a bit like a PGVar, in that it carries the rangetable index
1163:  * of the target relation being constrained; this aids placing the expression
1164:  * correctly during planning.  We can assume however that its "levelsup" is
1165:  * always zero, due to the syntactic constraints on where it can appear.
1166:  *
1167:  * The referenced cursor can be represented either as a hardwired string
1168:  * or as a reference to a run-time parameter of type REFCURSOR.  The latter
1169:  * case is for the convenience of plpgsql.
1170:  */
1171: typedef struct PGCurrentOfExpr {
1172: 	PGExpr xpr;
1173: 	PGIndex cvarno;    /* RT index of target relation */
1174: 	char *cursor_name; /* name of referenced cursor, or NULL */
1175: 	int cursor_param;  /* refcursor parameter number, or 0 */
1176: } PGCurrentOfExpr;
1177: 
1178: /*
1179:  * PGNextValueExpr - get next value from sequence
1180:  *
1181:  * This has the same effect as calling the nextval() function, but it does not
1182:  * check permissions on the sequence.  This is used for identity columns,
1183:  * where the sequence is an implicit dependency without its own permissions.
1184:  */
1185: typedef struct PGNextValueExpr {
1186: 	PGExpr xpr;
1187: 	PGOid seqid;
1188: 	PGOid typeId;
1189: } PGNextValueExpr;
1190: 
1191: /*
1192:  * PGInferenceElem - an element of a unique index inference specification
1193:  *
1194:  * This mostly matches the structure of IndexElems, but having a dedicated
1195:  * primnode allows for a clean separation between the use of index parameters
1196:  * by utility commands, and this node.
1197:  */
1198: typedef struct PGInferenceElem {
1199: 	PGExpr xpr;
1200: 	PGNode *expr;       /* expression to infer from, or NULL */
1201: 	PGOid infercollid;  /* OID of collation, or InvalidOid */
1202: 	PGOid inferopclass; /* OID of att opclass, or InvalidOid */
1203: } PGInferenceElem;
1204: 
1205: /*--------------------
1206:  * PGTargetEntry -
1207:  *	   a target entry (used in query target lists)
1208:  *
1209:  * Strictly speaking, a PGTargetEntry isn't an expression node (since it can't
1210:  * be evaluated by ExecEvalExpr).  But we treat it as one anyway, since in
1211:  * very many places it's convenient to process a whole query targetlist as a
1212:  * single expression tree.
1213:  *
1214:  * In a SELECT's targetlist, resno should always be equal to the item's
1215:  * ordinal position (counting from 1).  However, in an INSERT or UPDATE
1216:  * targetlist, resno represents the attribute number of the destination
1217:  * column for the item; so there may be missing or out-of-order resnos.
1218:  * It is even legal to have duplicated resnos; consider
1219:  *		UPDATE table SET arraycol[1] = ..., arraycol[2] = ..., ...
1220:  * The two meanings come together in the executor, because the planner
1221:  * transforms INSERT/UPDATE tlists into a normalized form with exactly
1222:  * one entry for each column of the destination table.  Before that's
1223:  * happened, however, it is risky to assume that resno == position.
1224:  * Generally get_tle_by_resno() should be used rather than list_nth()
1225:  * to fetch tlist entries by resno, and only in SELECT should you assume
1226:  * that resno is a unique identifier.
1227:  *
1228:  * resname is required to represent the correct column name in non-resjunk
1229:  * entries of top-level SELECT targetlists, since it will be used as the
1230:  * column title sent to the frontend.  In most other contexts it is only
1231:  * a debugging aid, and may be wrong or even NULL.  (In particular, it may
1232:  * be wrong in a tlist from a stored rule, if the referenced column has been
1233:  * renamed by ALTER TABLE since the rule was made.  Also, the planner tends
1234:  * to store NULL rather than look up a valid name for tlist entries in
1235:  * non-toplevel plan nodes.)  In resjunk entries, resname should be either
1236:  * a specific system-generated name (such as "ctid") or NULL; anything else
1237:  * risks confusing ExecGetJunkAttribute!
1238:  *
1239:  * ressortgroupref is used in the representation of ORDER BY, GROUP BY, and
1240:  * DISTINCT items.  Targetlist entries with ressortgroupref=0 are not
1241:  * sort/group items.  If ressortgroupref>0, then this item is an ORDER BY,
1242:  * GROUP BY, and/or DISTINCT target value.  No two entries in a targetlist
1243:  * may have the same nonzero ressortgroupref --- but there is no particular
1244:  * meaning to the nonzero values, except as tags.  (For example, one must
1245:  * not assume that lower ressortgroupref means a more significant sort key.)
1246:  * The order of the associated PGSortGroupClause lists determine the semantics.
1247:  *
1248:  * resorigtbl/resorigcol identify the source of the column, if it is a
1249:  * simple reference to a column of a base table (or view).  If it is not
1250:  * a simple reference, these fields are zeroes.
1251:  *
1252:  * If resjunk is true then the column is a working column (such as a sort key)
1253:  * that should be removed from the final output of the query.  Resjunk columns
1254:  * must have resnos that cannot duplicate any regular column's resno.  Also
1255:  * note that there are places that assume resjunk columns come after non-junk
1256:  * columns.
1257:  *--------------------
1258:  */
1259: typedef struct PGTargetEntry {
1260: 	PGExpr xpr;
1261: 	PGExpr *expr;            /* expression to evaluate */
1262: 	PGAttrNumber resno;      /* attribute number (see notes above) */
1263: 	char *resname;           /* name of the column (could be NULL) */
1264: 	PGIndex ressortgroupref; /* nonzero if referenced by a sort/group
1265: 									 * clause */
1266: 	PGOid resorigtbl;        /* OID of column's source table */
1267: 	PGAttrNumber resorigcol; /* column's number in source table */
1268: 	bool resjunk;            /* set to true to eliminate the attribute from
1269: 								 * final target list */
1270: } PGTargetEntry;
1271: 
1272: /* ----------------------------------------------------------------
1273:  *					node types for join trees
1274:  *
1275:  * The leaves of a join tree structure are PGRangeTblRef nodes.  Above
1276:  * these, PGJoinExpr nodes can appear to denote a specific kind of join
1277:  * or qualified join.  Also, PGFromExpr nodes can appear to denote an
1278:  * ordinary cross-product join ("FROM foo, bar, baz WHERE ...").
1279:  * PGFromExpr is like a PGJoinExpr of jointype PG_JOIN_INNER, except that it
1280:  * may have any number of child nodes, not just two.
1281:  *
1282:  * NOTE: the top level of a Query's jointree is always a FromExpr.
1283:  * Even if the jointree contains no rels, there will be a FromExpr.
1284:  *
1285:  * NOTE: the qualification expressions present in PGJoinExpr nodes are
1286:  * *in addition to* the query's main WHERE clause, which appears as the
1287:  * qual of the top-level FromExpr.  The reason for associating quals with
1288:  * specific nodes in the jointree is that the position of a qual is critical
1289:  * when outer joins are present.  (If we enforce a qual too soon or too late,
1290:  * that may cause the outer join to produce the wrong set of NULL-extended
1291:  * rows.)  If all joins are inner joins then all the qual positions are
1292:  * semantically interchangeable.
1293:  *
1294:  * NOTE: in the raw output of gram.y, a join tree contains PGRangeVar,
1295:  * PGRangeSubselect, and PGRangeFunction nodes, which are all replaced by
1296:  * PGRangeTblRef nodes during the parse analysis phase.  Also, the top-level
1297:  * PGFromExpr is added during parse analysis; the grammar regards FROM and
1298:  * WHERE as separate.
1299:  * ----------------------------------------------------------------
1300:  */
1301: 
1302: /*
1303:  * PGRangeTblRef - reference to an entry in the query's rangetable
1304:  *
1305:  * We could use direct pointers to the RT entries and skip having these
1306:  * nodes, but multiple pointers to the same node in a querytree cause
1307:  * lots of headaches, so it seems better to store an index into the RT.
1308:  */
1309: typedef struct PGRangeTblRef {
1310: 	PGNodeTag type;
1311: 	int rtindex;
1312: } PGRangeTblRef;
1313: 
1314: /*----------
1315:  * PGJoinExpr - for SQL JOIN expressions
1316:  *
1317:  * isNatural, usingClause, and quals are interdependent.  The user can write
1318:  * only one of NATURAL, USING(), or ON() (this is enforced by the grammar).
1319:  * If he writes NATURAL then parse analysis generates the equivalent USING()
1320:  * list, and from that fills in "quals" with the right equality comparisons.
1321:  * If he writes USING() then "quals" is filled with equality comparisons.
1322:  * If he writes ON() then only "quals" is set.  Note that NATURAL/USING
1323:  * are not equivalent to ON() since they also affect the output column list.
1324:  *
1325:  * alias is an PGAlias node representing the AS alias-clause attached to the
1326:  * join expression, or NULL if no clause.  NB: presence or absence of the
1327:  * alias has a critical impact on semantics, because a join with an alias
1328:  * restricts visibility of the tables/columns inside it.
1329:  *
1330:  * During parse analysis, an RTE is created for the PGJoin, and its index
1331:  * is filled into rtindex.  This RTE is present mainly so that Vars can
1332:  * be created that refer to the outputs of the join.  The planner sometimes
1333:  * generates JoinExprs internally; these can have rtindex = 0 if there are
1334:  * no join alias variables referencing such joins.
1335:  *----------
1336:  */
1337: typedef struct PGJoinExpr {
1338: 	PGNodeTag type;
1339: 	PGJoinType jointype; /* type of join */
1340: 	bool isNatural;      /* Natural join? Will need to shape table */
1341: 	PGNode *larg;        /* left subtree */
1342: 	PGNode *rarg;        /* right subtree */
1343: 	PGList *usingClause; /* USING clause, if any (list of String) */
1344: 	PGNode *quals;       /* qualifiers on join, if any */
1345: 	PGAlias *alias;      /* user-written alias clause, if any */
1346: 	int rtindex;         /* RT index assigned for join, or 0 */
1347: 	int location;          /* token location, or -1 if unknown */
1348: } PGJoinExpr;
1349: 
1350: /*----------
1351:  * PGFromExpr - represents a FROM ... WHERE ... construct
1352:  *
1353:  * This is both more flexible than a PGJoinExpr (it can have any number of
1354:  * children, including zero) and less so --- we don't need to deal with
1355:  * aliases and so on.  The output column set is implicitly just the union
1356:  * of the outputs of the children.
1357:  *----------
1358:  */
1359: typedef struct PGFromExpr {
1360: 	PGNodeTag type;
1361: 	PGList *fromlist; /* PGList of join subtrees */
1362: 	PGNode *quals;    /* qualifiers on join, if any */
1363: } PGFromExpr;
1364: 
1365: /*----------
1366:  * PGOnConflictExpr - represents an ON CONFLICT DO ... expression
1367:  *
1368:  * The optimizer requires a list of inference elements, and optionally a WHERE
1369:  * clause to infer a unique index.  The unique index (or, occasionally,
1370:  * indexes) inferred are used to arbitrate whether or not the alternative ON
1371:  * CONFLICT path is taken.
1372:  *----------
1373:  */
1374: typedef struct PGOnConflictExpr {
1375: 	PGNodeTag type;
1376: 	PGOnConflictAction action; /* DO NOTHING or UPDATE? */
1377: 
1378: 	/* Arbiter */
1379: 	PGList *arbiterElems; /* unique index arbiter list (of
1380: 								 * InferenceElem's) */
1381: 	PGNode *arbiterWhere; /* unique index arbiter WHERE clause */
1382: 	PGOid constraint;     /* pg_constraint OID for arbiter */
1383: 
1384: 	/* ON CONFLICT UPDATE */
1385: 	PGList *onConflictSet;   /* PGList of ON CONFLICT SET TargetEntrys */
1386: 	PGNode *onConflictWhere; /* qualifiers to restrict UPDATE to */
1387: 	int exclRelIndex;        /* RT index of 'excluded' relation */
1388: 	PGList *exclRelTlist;    /* tlist of the EXCLUDED pseudo relation */
1389: } PGOnConflictExpr;
1390: 
1391: }
[end of third_party/libpg_query/include/nodes/primnodes.hpp]
[start of third_party/libpg_query/include/parser/gram.hpp]
1: /* A Bison parser, made by GNU Bison 2.3.  */
2: 
3: /* Skeleton interface for Bison's Yacc-like parsers in C
4: 
5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
6:    Free Software Foundation, Inc.
7: 
8:    This program is free software; you can redistribute it and/or modify
9:    it under the terms of the GNU General Public License as published by
10:    the Free Software Foundation; either version 2, or (at your option)
11:    any later version.
12: 
13:    This program is distributed in the hope that it will be useful,
14:    but WITHOUT ANY WARRANTY; without even the implied warranty of
15:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
16:    GNU General Public License for more details.
17: 
18:    You should have received a copy of the GNU General Public License
19:    along with this program; if not, write to the Free Software
20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,
21:    Boston, MA 02110-1301, USA.  */
22: 
23: /* As a special exception, you may create a larger work that contains
24:    part or all of the Bison parser skeleton and distribute that work
25:    under terms of your choice, so long as that work isn't itself a
26:    parser generator using the skeleton or a modified version thereof
27:    as a parser skeleton.  Alternatively, if you modify or redistribute
28:    the parser skeleton itself, you may (at your option) remove this
29:    special exception, which will cause the skeleton and the resulting
30:    Bison output files to be licensed under the GNU General Public
31:    License without this special exception.
32: 
33:    This special exception was added by the Free Software Foundation in
34:    version 2.2 of Bison.  */
35: 
36: /* Tokens.  */
37: #ifndef YYTOKENTYPE
38: # define YYTOKENTYPE
39:    /* Put the tokens into the symbol table, so that GDB and other debuggers
40:       know about them.  */
41:    enum yytokentype {
42:      IDENT = 258,
43:      FCONST = 259,
44:      SCONST = 260,
45:      BCONST = 261,
46:      XCONST = 262,
47:      Op = 263,
48:      ICONST = 264,
49:      PARAM = 265,
50:      TYPECAST = 266,
51:      DOT_DOT = 267,
52:      COLON_EQUALS = 268,
53:      EQUALS_GREATER = 269,
54:      LAMBDA_ARROW = 270,
55:      LESS_EQUALS = 271,
56:      GREATER_EQUALS = 272,
57:      NOT_EQUALS = 273,
58:      ABORT_P = 274,
59:      ABSOLUTE_P = 275,
60:      ACCESS = 276,
61:      ACTION = 277,
62:      ADD_P = 278,
63:      ADMIN = 279,
64:      AFTER = 280,
65:      AGGREGATE = 281,
66:      ALL = 282,
67:      ALSO = 283,
68:      ALTER = 284,
69:      ALWAYS = 285,
70:      ANALYSE = 286,
71:      ANALYZE = 287,
72:      AND = 288,
73:      ANY = 289,
74:      ARRAY = 290,
75:      AS = 291,
76:      ASC_P = 292,
77:      ASSERTION = 293,
78:      ASSIGNMENT = 294,
79:      ASYMMETRIC = 295,
80:      AT = 296,
81:      ATTACH = 297,
82:      ATTRIBUTE = 298,
83:      AUTHORIZATION = 299,
84:      BACKWARD = 300,
85:      BEFORE = 301,
86:      BEGIN_P = 302,
87:      BETWEEN = 303,
88:      BIGINT = 304,
89:      BINARY = 305,
90:      BIT = 306,
91:      BOOLEAN_P = 307,
92:      BOTH = 308,
93:      BY = 309,
94:      CACHE = 310,
95:      CALL_P = 311,
96:      CALLED = 312,
97:      CASCADE = 313,
98:      CASCADED = 314,
99:      CASE = 315,
100:      CAST = 316,
101:      CATALOG_P = 317,
102:      CHAIN = 318,
103:      CHAR_P = 319,
104:      CHARACTER = 320,
105:      CHARACTERISTICS = 321,
106:      CHECK_P = 322,
107:      CHECKPOINT = 323,
108:      CLASS = 324,
109:      CLOSE = 325,
110:      CLUSTER = 326,
111:      COALESCE = 327,
112:      COLLATE = 328,
113:      COLLATION = 329,
114:      COLUMN = 330,
115:      COLUMNS = 331,
116:      COMMENT = 332,
117:      COMMENTS = 333,
118:      COMMIT = 334,
119:      COMMITTED = 335,
120:      CONCURRENTLY = 336,
121:      CONFIGURATION = 337,
122:      CONFLICT = 338,
123:      CONNECTION = 339,
124:      CONSTRAINT = 340,
125:      CONSTRAINTS = 341,
126:      CONTENT_P = 342,
127:      CONTINUE_P = 343,
128:      CONVERSION_P = 344,
129:      COPY = 345,
130:      COST = 346,
131:      CREATE_P = 347,
132:      CROSS = 348,
133:      CSV = 349,
134:      CUBE = 350,
135:      CURRENT_P = 351,
136:      CURRENT_CATALOG = 352,
137:      CURRENT_DATE = 353,
138:      CURRENT_ROLE = 354,
139:      CURRENT_SCHEMA = 355,
140:      CURRENT_TIME = 356,
141:      CURRENT_TIMESTAMP = 357,
142:      CURRENT_USER = 358,
143:      CURSOR = 359,
144:      CYCLE = 360,
145:      DATA_P = 361,
146:      DATABASE = 362,
147:      DAY_P = 363,
148:      DAYS_P = 364,
149:      DEALLOCATE = 365,
150:      DEC = 366,
151:      DECIMAL_P = 367,
152:      DECLARE = 368,
153:      DEFAULT = 369,
154:      DEFAULTS = 370,
155:      DEFERRABLE = 371,
156:      DEFERRED = 372,
157:      DEFINER = 373,
158:      DELETE_P = 374,
159:      DELIMITER = 375,
160:      DELIMITERS = 376,
161:      DEPENDS = 377,
162:      DESC_P = 378,
163:      DESCRIBE = 379,
164:      DETACH = 380,
165:      DICTIONARY = 381,
166:      DISABLE_P = 382,
167:      DISCARD = 383,
168:      DISTINCT = 384,
169:      DO = 385,
170:      DOCUMENT_P = 386,
171:      DOMAIN_P = 387,
172:      DOUBLE_P = 388,
173:      DROP = 389,
174:      EACH = 390,
175:      ELSE = 391,
176:      ENABLE_P = 392,
177:      ENCODING = 393,
178:      ENCRYPTED = 394,
179:      END_P = 395,
180:      ENUM_P = 396,
181:      ESCAPE = 397,
182:      EVENT = 398,
183:      EXCEPT = 399,
184:      EXCLUDE = 400,
185:      EXCLUDING = 401,
186:      EXCLUSIVE = 402,
187:      EXECUTE = 403,
188:      EXISTS = 404,
189:      EXPLAIN = 405,
190:      EXPORT_P = 406,
191:      EXTENSION = 407,
192:      EXTERNAL = 408,
193:      EXTRACT = 409,
194:      FALSE_P = 410,
195:      FAMILY = 411,
196:      FETCH = 412,
197:      FILTER = 413,
198:      FIRST_P = 414,
199:      FLOAT_P = 415,
200:      FOLLOWING = 416,
201:      FOR = 417,
202:      FORCE = 418,
203:      FOREIGN = 419,
204:      FORWARD = 420,
205:      FREEZE = 421,
206:      FROM = 422,
207:      FULL = 423,
208:      FUNCTION = 424,
209:      FUNCTIONS = 425,
210:      GENERATED = 426,
211:      GLOB = 427,
212:      GLOBAL = 428,
213:      GRANT = 429,
214:      GRANTED = 430,
215:      GROUP_P = 431,
216:      GROUPING = 432,
217:      HANDLER = 433,
218:      HAVING = 434,
219:      HEADER_P = 435,
220:      HOLD = 436,
221:      HOUR_P = 437,
222:      HOURS_P = 438,
223:      IDENTITY_P = 439,
224:      IF_P = 440,
225:      ILIKE = 441,
226:      IMMEDIATE = 442,
227:      IMMUTABLE = 443,
228:      IMPLICIT_P = 444,
229:      IMPORT_P = 445,
230:      IN_P = 446,
231:      INCLUDING = 447,
232:      INCREMENT = 448,
233:      INDEX = 449,
234:      INDEXES = 450,
235:      INHERIT = 451,
236:      INHERITS = 452,
237:      INITIALLY = 453,
238:      INLINE_P = 454,
239:      INNER_P = 455,
240:      INOUT = 456,
241:      INPUT_P = 457,
242:      INSENSITIVE = 458,
243:      INSERT = 459,
244:      INSTEAD = 460,
245:      INT_P = 461,
246:      INTEGER = 462,
247:      INTERSECT = 463,
248:      INTERVAL = 464,
249:      INTO = 465,
250:      INVOKER = 466,
251:      IS = 467,
252:      ISNULL = 468,
253:      ISOLATION = 469,
254:      JOIN = 470,
255:      KEY = 471,
256:      LABEL = 472,
257:      LANGUAGE = 473,
258:      LARGE_P = 474,
259:      LAST_P = 475,
260:      LATERAL_P = 476,
261:      LEADING = 477,
262:      LEAKPROOF = 478,
263:      LEFT = 479,
264:      LEVEL = 480,
265:      LIKE = 481,
266:      LIMIT = 482,
267:      LISTEN = 483,
268:      LOAD = 484,
269:      LOCAL = 485,
270:      LOCALTIME = 486,
271:      LOCALTIMESTAMP = 487,
272:      LOCATION = 488,
273:      LOCK_P = 489,
274:      LOCKED = 490,
275:      LOGGED = 491,
276:      MACRO = 492,
277:      MAP = 493,
278:      MAPPING = 494,
279:      MATCH = 495,
280:      MATERIALIZED = 496,
281:      MAXVALUE = 497,
282:      METHOD = 498,
283:      MICROSECOND_P = 499,
284:      MICROSECONDS_P = 500,
285:      MILLISECOND_P = 501,
286:      MILLISECONDS_P = 502,
287:      MINUTE_P = 503,
288:      MINUTES_P = 504,
289:      MINVALUE = 505,
290:      MODE = 506,
291:      MONTH_P = 507,
292:      MONTHS_P = 508,
293:      MOVE = 509,
294:      NAME_P = 510,
295:      NAMES = 511,
296:      NATIONAL = 512,
297:      NATURAL = 513,
298:      NCHAR = 514,
299:      NEW = 515,
300:      NEXT = 516,
301:      NO = 517,
302:      NONE = 518,
303:      NOT = 519,
304:      NOTHING = 520,
305:      NOTIFY = 521,
306:      NOTNULL = 522,
307:      NOWAIT = 523,
308:      NULL_P = 524,
309:      NULLIF = 525,
310:      NULLS_P = 526,
311:      NUMERIC = 527,
312:      OBJECT_P = 528,
313:      OF = 529,
314:      OFF = 530,
315:      OFFSET = 531,
316:      OIDS = 532,
317:      OLD = 533,
318:      ON = 534,
319:      ONLY = 535,
320:      OPERATOR = 536,
321:      OPTION = 537,
322:      OPTIONS = 538,
323:      OR = 539,
324:      ORDER = 540,
325:      ORDINALITY = 541,
326:      OUT_P = 542,
327:      OUTER_P = 543,
328:      OVER = 544,
329:      OVERLAPS = 545,
330:      OVERLAY = 546,
331:      OVERRIDING = 547,
332:      OWNED = 548,
333:      OWNER = 549,
334:      PARALLEL = 550,
335:      PARSER = 551,
336:      PARTIAL = 552,
337:      PARTITION = 553,
338:      PASSING = 554,
339:      PASSWORD = 555,
340:      PERCENT = 556,
341:      PLACING = 557,
342:      PLANS = 558,
343:      POLICY = 559,
344:      POSITION = 560,
345:      PRAGMA_P = 561,
346:      PRECEDING = 562,
347:      PRECISION = 563,
348:      PREPARE = 564,
349:      PREPARED = 565,
350:      PRESERVE = 566,
351:      PRIMARY = 567,
352:      PRIOR = 568,
353:      PRIVILEGES = 569,
354:      PROCEDURAL = 570,
355:      PROCEDURE = 571,
356:      PROGRAM = 572,
357:      PUBLICATION = 573,
358:      QUOTE = 574,
359:      RANGE = 575,
360:      READ_P = 576,
361:      REAL = 577,
362:      REASSIGN = 578,
363:      RECHECK = 579,
364:      RECURSIVE = 580,
365:      REF = 581,
366:      REFERENCES = 582,
367:      REFERENCING = 583,
368:      REFRESH = 584,
369:      REINDEX = 585,
370:      RELATIVE_P = 586,
371:      RELEASE = 587,
372:      RENAME = 588,
373:      REPEATABLE = 589,
374:      REPLACE = 590,
375:      REPLICA = 591,
376:      RESET = 592,
377:      RESTART = 593,
378:      RESTRICT = 594,
379:      RETURNING = 595,
380:      RETURNS = 596,
381:      REVOKE = 597,
382:      RIGHT = 598,
383:      ROLE = 599,
384:      ROLLBACK = 600,
385:      ROLLUP = 601,
386:      ROW = 602,
387:      ROWS = 603,
388:      RULE = 604,
389:      SAMPLE = 605,
390:      SAVEPOINT = 606,
391:      SCHEMA = 607,
392:      SCHEMAS = 608,
393:      SCROLL = 609,
394:      SEARCH = 610,
395:      SECOND_P = 611,
396:      SECONDS_P = 612,
397:      SECURITY = 613,
398:      SELECT = 614,
399:      SEQUENCE = 615,
400:      SEQUENCES = 616,
401:      SERIALIZABLE = 617,
402:      SERVER = 618,
403:      SESSION = 619,
404:      SESSION_USER = 620,
405:      SET = 621,
406:      SETOF = 622,
407:      SETS = 623,
408:      SHARE = 624,
409:      SHOW = 625,
410:      SIMILAR = 626,
411:      SIMPLE = 627,
412:      SKIP = 628,
413:      SMALLINT = 629,
414:      SNAPSHOT = 630,
415:      SOME = 631,
416:      SQL_P = 632,
417:      STABLE = 633,
418:      STANDALONE_P = 634,
419:      START = 635,
420:      STATEMENT = 636,
421:      STATISTICS = 637,
422:      STDIN = 638,
423:      STDOUT = 639,
424:      STORAGE = 640,
425:      STRICT_P = 641,
426:      STRIP_P = 642,
427:      STRUCT = 643,
428:      SUBSCRIPTION = 644,
429:      SUBSTRING = 645,
430:      SUMMARIZE = 646,
431:      SYMMETRIC = 647,
432:      SYSID = 648,
433:      SYSTEM_P = 649,
434:      TABLE = 650,
435:      TABLES = 651,
436:      TABLESAMPLE = 652,
437:      TABLESPACE = 653,
438:      TEMP = 654,
439:      TEMPLATE = 655,
440:      TEMPORARY = 656,
441:      TEXT_P = 657,
442:      THEN = 658,
443:      TIME = 659,
444:      TIMESTAMP = 660,
445:      TO = 661,
446:      TRAILING = 662,
447:      TRANSACTION = 663,
448:      TRANSFORM = 664,
449:      TREAT = 665,
450:      TRIGGER = 666,
451:      TRIM = 667,
452:      TRUE_P = 668,
453:      TRUNCATE = 669,
454:      TRUSTED = 670,
455:      TRY_CAST = 671,
456:      TYPE_P = 672,
457:      TYPES_P = 673,
458:      UNBOUNDED = 674,
459:      UNCOMMITTED = 675,
460:      UNENCRYPTED = 676,
461:      UNION = 677,
462:      UNIQUE = 678,
463:      UNKNOWN = 679,
464:      UNLISTEN = 680,
465:      UNLOGGED = 681,
466:      UNTIL = 682,
467:      UPDATE = 683,
468:      USER = 684,
469:      USING = 685,
470:      VACUUM = 686,
471:      VALID = 687,
472:      VALIDATE = 688,
473:      VALIDATOR = 689,
474:      VALUE_P = 690,
475:      VALUES = 691,
476:      VARCHAR = 692,
477:      VARIADIC = 693,
478:      VARYING = 694,
479:      VERBOSE = 695,
480:      VERSION_P = 696,
481:      VIEW = 697,
482:      VIEWS = 698,
483:      VOLATILE = 699,
484:      WHEN = 700,
485:      WHERE = 701,
486:      WHITESPACE_P = 702,
487:      WINDOW = 703,
488:      WITH = 704,
489:      WITHIN = 705,
490:      WITHOUT = 706,
491:      WORK = 707,
492:      WRAPPER = 708,
493:      WRITE_P = 709,
494:      XML_P = 710,
495:      XMLATTRIBUTES = 711,
496:      XMLCONCAT = 712,
497:      XMLELEMENT = 713,
498:      XMLEXISTS = 714,
499:      XMLFOREST = 715,
500:      XMLNAMESPACES = 716,
501:      XMLPARSE = 717,
502:      XMLPI = 718,
503:      XMLROOT = 719,
504:      XMLSERIALIZE = 720,
505:      XMLTABLE = 721,
506:      YEAR_P = 722,
507:      YEARS_P = 723,
508:      YES_P = 724,
509:      ZONE = 725,
510:      NOT_LA = 726,
511:      NULLS_LA = 727,
512:      WITH_LA = 728,
513:      POSTFIXOP = 729,
514:      UMINUS = 730
515:    };
516: #endif
517: /* Tokens.  */
518: #define IDENT 258
519: #define FCONST 259
520: #define SCONST 260
521: #define BCONST 261
522: #define XCONST 262
523: #define Op 263
524: #define ICONST 264
525: #define PARAM 265
526: #define TYPECAST 266
527: #define DOT_DOT 267
528: #define COLON_EQUALS 268
529: #define EQUALS_GREATER 269
530: #define LAMBDA_ARROW 270
531: #define LESS_EQUALS 271
532: #define GREATER_EQUALS 272
533: #define NOT_EQUALS 273
534: #define ABORT_P 274
535: #define ABSOLUTE_P 275
536: #define ACCESS 276
537: #define ACTION 277
538: #define ADD_P 278
539: #define ADMIN 279
540: #define AFTER 280
541: #define AGGREGATE 281
542: #define ALL 282
543: #define ALSO 283
544: #define ALTER 284
545: #define ALWAYS 285
546: #define ANALYSE 286
547: #define ANALYZE 287
548: #define AND 288
549: #define ANY 289
550: #define ARRAY 290
551: #define AS 291
552: #define ASC_P 292
553: #define ASSERTION 293
554: #define ASSIGNMENT 294
555: #define ASYMMETRIC 295
556: #define AT 296
557: #define ATTACH 297
558: #define ATTRIBUTE 298
559: #define AUTHORIZATION 299
560: #define BACKWARD 300
561: #define BEFORE 301
562: #define BEGIN_P 302
563: #define BETWEEN 303
564: #define BIGINT 304
565: #define BINARY 305
566: #define BIT 306
567: #define BOOLEAN_P 307
568: #define BOTH 308
569: #define BY 309
570: #define CACHE 310
571: #define CALL_P 311
572: #define CALLED 312
573: #define CASCADE 313
574: #define CASCADED 314
575: #define CASE 315
576: #define CAST 316
577: #define CATALOG_P 317
578: #define CHAIN 318
579: #define CHAR_P 319
580: #define CHARACTER 320
581: #define CHARACTERISTICS 321
582: #define CHECK_P 322
583: #define CHECKPOINT 323
584: #define CLASS 324
585: #define CLOSE 325
586: #define CLUSTER 326
587: #define COALESCE 327
588: #define COLLATE 328
589: #define COLLATION 329
590: #define COLUMN 330
591: #define COLUMNS 331
592: #define COMMENT 332
593: #define COMMENTS 333
594: #define COMMIT 334
595: #define COMMITTED 335
596: #define CONCURRENTLY 336
597: #define CONFIGURATION 337
598: #define CONFLICT 338
599: #define CONNECTION 339
600: #define CONSTRAINT 340
601: #define CONSTRAINTS 341
602: #define CONTENT_P 342
603: #define CONTINUE_P 343
604: #define CONVERSION_P 344
605: #define COPY 345
606: #define COST 346
607: #define CREATE_P 347
608: #define CROSS 348
609: #define CSV 349
610: #define CUBE 350
611: #define CURRENT_P 351
612: #define CURRENT_CATALOG 352
613: #define CURRENT_DATE 353
614: #define CURRENT_ROLE 354
615: #define CURRENT_SCHEMA 355
616: #define CURRENT_TIME 356
617: #define CURRENT_TIMESTAMP 357
618: #define CURRENT_USER 358
619: #define CURSOR 359
620: #define CYCLE 360
621: #define DATA_P 361
622: #define DATABASE 362
623: #define DAY_P 363
624: #define DAYS_P 364
625: #define DEALLOCATE 365
626: #define DEC 366
627: #define DECIMAL_P 367
628: #define DECLARE 368
629: #define DEFAULT 369
630: #define DEFAULTS 370
631: #define DEFERRABLE 371
632: #define DEFERRED 372
633: #define DEFINER 373
634: #define DELETE_P 374
635: #define DELIMITER 375
636: #define DELIMITERS 376
637: #define DEPENDS 377
638: #define DESC_P 378
639: #define DESCRIBE 379
640: #define DETACH 380
641: #define DICTIONARY 381
642: #define DISABLE_P 382
643: #define DISCARD 383
644: #define DISTINCT 384
645: #define DO 385
646: #define DOCUMENT_P 386
647: #define DOMAIN_P 387
648: #define DOUBLE_P 388
649: #define DROP 389
650: #define EACH 390
651: #define ELSE 391
652: #define ENABLE_P 392
653: #define ENCODING 393
654: #define ENCRYPTED 394
655: #define END_P 395
656: #define ENUM_P 396
657: #define ESCAPE 397
658: #define EVENT 398
659: #define EXCEPT 399
660: #define EXCLUDE 400
661: #define EXCLUDING 401
662: #define EXCLUSIVE 402
663: #define EXECUTE 403
664: #define EXISTS 404
665: #define EXPLAIN 405
666: #define EXPORT_P 406
667: #define EXTENSION 407
668: #define EXTERNAL 408
669: #define EXTRACT 409
670: #define FALSE_P 410
671: #define FAMILY 411
672: #define FETCH 412
673: #define FILTER 413
674: #define FIRST_P 414
675: #define FLOAT_P 415
676: #define FOLLOWING 416
677: #define FOR 417
678: #define FORCE 418
679: #define FOREIGN 419
680: #define FORWARD 420
681: #define FREEZE 421
682: #define FROM 422
683: #define FULL 423
684: #define FUNCTION 424
685: #define FUNCTIONS 425
686: #define GENERATED 426
687: #define GLOB 427
688: #define GLOBAL 428
689: #define GRANT 429
690: #define GRANTED 430
691: #define GROUP_P 431
692: #define GROUPING 432
693: #define HANDLER 433
694: #define HAVING 434
695: #define HEADER_P 435
696: #define HOLD 436
697: #define HOUR_P 437
698: #define HOURS_P 438
699: #define IDENTITY_P 439
700: #define IF_P 440
701: #define ILIKE 441
702: #define IMMEDIATE 442
703: #define IMMUTABLE 443
704: #define IMPLICIT_P 444
705: #define IMPORT_P 445
706: #define IN_P 446
707: #define INCLUDING 447
708: #define INCREMENT 448
709: #define INDEX 449
710: #define INDEXES 450
711: #define INHERIT 451
712: #define INHERITS 452
713: #define INITIALLY 453
714: #define INLINE_P 454
715: #define INNER_P 455
716: #define INOUT 456
717: #define INPUT_P 457
718: #define INSENSITIVE 458
719: #define INSERT 459
720: #define INSTEAD 460
721: #define INT_P 461
722: #define INTEGER 462
723: #define INTERSECT 463
724: #define INTERVAL 464
725: #define INTO 465
726: #define INVOKER 466
727: #define IS 467
728: #define ISNULL 468
729: #define ISOLATION 469
730: #define JOIN 470
731: #define KEY 471
732: #define LABEL 472
733: #define LANGUAGE 473
734: #define LARGE_P 474
735: #define LAST_P 475
736: #define LATERAL_P 476
737: #define LEADING 477
738: #define LEAKPROOF 478
739: #define LEFT 479
740: #define LEVEL 480
741: #define LIKE 481
742: #define LIMIT 482
743: #define LISTEN 483
744: #define LOAD 484
745: #define LOCAL 485
746: #define LOCALTIME 486
747: #define LOCALTIMESTAMP 487
748: #define LOCATION 488
749: #define LOCK_P 489
750: #define LOCKED 490
751: #define LOGGED 491
752: #define MACRO 492
753: #define MAP 493
754: #define MAPPING 494
755: #define MATCH 495
756: #define MATERIALIZED 496
757: #define MAXVALUE 497
758: #define METHOD 498
759: #define MICROSECOND_P 499
760: #define MICROSECONDS_P 500
761: #define MILLISECOND_P 501
762: #define MILLISECONDS_P 502
763: #define MINUTE_P 503
764: #define MINUTES_P 504
765: #define MINVALUE 505
766: #define MODE 506
767: #define MONTH_P 507
768: #define MONTHS_P 508
769: #define MOVE 509
770: #define NAME_P 510
771: #define NAMES 511
772: #define NATIONAL 512
773: #define NATURAL 513
774: #define NCHAR 514
775: #define NEW 515
776: #define NEXT 516
777: #define NO 517
778: #define NONE 518
779: #define NOT 519
780: #define NOTHING 520
781: #define NOTIFY 521
782: #define NOTNULL 522
783: #define NOWAIT 523
784: #define NULL_P 524
785: #define NULLIF 525
786: #define NULLS_P 526
787: #define NUMERIC 527
788: #define OBJECT_P 528
789: #define OF 529
790: #define OFF 530
791: #define OFFSET 531
792: #define OIDS 532
793: #define OLD 533
794: #define ON 534
795: #define ONLY 535
796: #define OPERATOR 536
797: #define OPTION 537
798: #define OPTIONS 538
799: #define OR 539
800: #define ORDER 540
801: #define ORDINALITY 541
802: #define OUT_P 542
803: #define OUTER_P 543
804: #define OVER 544
805: #define OVERLAPS 545
806: #define OVERLAY 546
807: #define OVERRIDING 547
808: #define OWNED 548
809: #define OWNER 549
810: #define PARALLEL 550
811: #define PARSER 551
812: #define PARTIAL 552
813: #define PARTITION 553
814: #define PASSING 554
815: #define PASSWORD 555
816: #define PERCENT 556
817: #define PLACING 557
818: #define PLANS 558
819: #define POLICY 559
820: #define POSITION 560
821: #define PRAGMA_P 561
822: #define PRECEDING 562
823: #define PRECISION 563
824: #define PREPARE 564
825: #define PREPARED 565
826: #define PRESERVE 566
827: #define PRIMARY 567
828: #define PRIOR 568
829: #define PRIVILEGES 569
830: #define PROCEDURAL 570
831: #define PROCEDURE 571
832: #define PROGRAM 572
833: #define PUBLICATION 573
834: #define QUOTE 574
835: #define RANGE 575
836: #define READ_P 576
837: #define REAL 577
838: #define REASSIGN 578
839: #define RECHECK 579
840: #define RECURSIVE 580
841: #define REF 581
842: #define REFERENCES 582
843: #define REFERENCING 583
844: #define REFRESH 584
845: #define REINDEX 585
846: #define RELATIVE_P 586
847: #define RELEASE 587
848: #define RENAME 588
849: #define REPEATABLE 589
850: #define REPLACE 590
851: #define REPLICA 591
852: #define RESET 592
853: #define RESTART 593
854: #define RESTRICT 594
855: #define RETURNING 595
856: #define RETURNS 596
857: #define REVOKE 597
858: #define RIGHT 598
859: #define ROLE 599
860: #define ROLLBACK 600
861: #define ROLLUP 601
862: #define ROW 602
863: #define ROWS 603
864: #define RULE 604
865: #define SAMPLE 605
866: #define SAVEPOINT 606
867: #define SCHEMA 607
868: #define SCHEMAS 608
869: #define SCROLL 609
870: #define SEARCH 610
871: #define SECOND_P 611
872: #define SECONDS_P 612
873: #define SECURITY 613
874: #define SELECT 614
875: #define SEQUENCE 615
876: #define SEQUENCES 616
877: #define SERIALIZABLE 617
878: #define SERVER 618
879: #define SESSION 619
880: #define SESSION_USER 620
881: #define SET 621
882: #define SETOF 622
883: #define SETS 623
884: #define SHARE 624
885: #define SHOW 625
886: #define SIMILAR 626
887: #define SIMPLE 627
888: #define SKIP 628
889: #define SMALLINT 629
890: #define SNAPSHOT 630
891: #define SOME 631
892: #define SQL_P 632
893: #define STABLE 633
894: #define STANDALONE_P 634
895: #define START 635
896: #define STATEMENT 636
897: #define STATISTICS 637
898: #define STDIN 638
899: #define STDOUT 639
900: #define STORAGE 640
901: #define STRICT_P 641
902: #define STRIP_P 642
903: #define STRUCT 643
904: #define SUBSCRIPTION 644
905: #define SUBSTRING 645
906: #define SUMMARIZE 646
907: #define SYMMETRIC 647
908: #define SYSID 648
909: #define SYSTEM_P 649
910: #define TABLE 650
911: #define TABLES 651
912: #define TABLESAMPLE 652
913: #define TABLESPACE 653
914: #define TEMP 654
915: #define TEMPLATE 655
916: #define TEMPORARY 656
917: #define TEXT_P 657
918: #define THEN 658
919: #define TIME 659
920: #define TIMESTAMP 660
921: #define TO 661
922: #define TRAILING 662
923: #define TRANSACTION 663
924: #define TRANSFORM 664
925: #define TREAT 665
926: #define TRIGGER 666
927: #define TRIM 667
928: #define TRUE_P 668
929: #define TRUNCATE 669
930: #define TRUSTED 670
931: #define TRY_CAST 671
932: #define TYPE_P 672
933: #define TYPES_P 673
934: #define UNBOUNDED 674
935: #define UNCOMMITTED 675
936: #define UNENCRYPTED 676
937: #define UNION 677
938: #define UNIQUE 678
939: #define UNKNOWN 679
940: #define UNLISTEN 680
941: #define UNLOGGED 681
942: #define UNTIL 682
943: #define UPDATE 683
944: #define USER 684
945: #define USING 685
946: #define VACUUM 686
947: #define VALID 687
948: #define VALIDATE 688
949: #define VALIDATOR 689
950: #define VALUE_P 690
951: #define VALUES 691
952: #define VARCHAR 692
953: #define VARIADIC 693
954: #define VARYING 694
955: #define VERBOSE 695
956: #define VERSION_P 696
957: #define VIEW 697
958: #define VIEWS 698
959: #define VOLATILE 699
960: #define WHEN 700
961: #define WHERE 701
962: #define WHITESPACE_P 702
963: #define WINDOW 703
964: #define WITH 704
965: #define WITHIN 705
966: #define WITHOUT 706
967: #define WORK 707
968: #define WRAPPER 708
969: #define WRITE_P 709
970: #define XML_P 710
971: #define XMLATTRIBUTES 711
972: #define XMLCONCAT 712
973: #define XMLELEMENT 713
974: #define XMLEXISTS 714
975: #define XMLFOREST 715
976: #define XMLNAMESPACES 716
977: #define XMLPARSE 717
978: #define XMLPI 718
979: #define XMLROOT 719
980: #define XMLSERIALIZE 720
981: #define XMLTABLE 721
982: #define YEAR_P 722
983: #define YEARS_P 723
984: #define YES_P 724
985: #define ZONE 725
986: #define NOT_LA 726
987: #define NULLS_LA 727
988: #define WITH_LA 728
989: #define POSTFIXOP 729
990: #define UMINUS 730
991: 
992: 
993: 
994: 
995: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
996: typedef union YYSTYPE
997: #line 14 "third_party/libpg_query/grammar/grammar.y"
998: {
999: 	core_YYSTYPE		core_yystype;
1000: 	/* these fields must match core_YYSTYPE: */
1001: 	int					ival;
1002: 	char				*str;
1003: 	const char			*keyword;
1004: 	const char          *conststr;
1005: 
1006: 	char				chr;
1007: 	bool				boolean;
1008: 	PGJoinType			jtype;
1009: 	PGDropBehavior		dbehavior;
1010: 	PGOnCommitAction		oncommit;
1011: 	PGList				*list;
1012: 	PGNode				*node;
1013: 	PGValue				*value;
1014: 	PGObjectType			objtype;
1015: 	PGTypeName			*typnam;
1016: 	PGObjectWithArgs		*objwithargs;
1017: 	PGDefElem				*defelt;
1018: 	PGSortBy				*sortby;
1019: 	PGWindowDef			*windef;
1020: 	PGJoinExpr			*jexpr;
1021: 	PGIndexElem			*ielem;
1022: 	PGAlias				*alias;
1023: 	PGRangeVar			*range;
1024: 	PGIntoClause			*into;
1025: 	PGWithClause			*with;
1026: 	PGInferClause			*infer;
1027: 	PGOnConflictClause	*onconflict;
1028: 	PGAIndices			*aind;
1029: 	PGResTarget			*target;
1030: 	PGInsertStmt			*istmt;
1031: 	PGVariableSetStmt		*vsetstmt;
1032: 	PGOverridingKind       override;
1033: 	PGSortByDir            sortorder;
1034: 	PGSortByNulls          nullorder;
1035: 	PGLockClauseStrength lockstrength;
1036: 	PGLockWaitPolicy lockwaitpolicy;
1037: 	PGSubLinkType subquerytype;
1038: 	PGViewCheckOption viewcheckoption;
1039: }
1040: /* Line 1529 of yacc.c.  */
1041: #line 1042 "third_party/libpg_query/grammar/grammar_out.hpp"
1042: 	YYSTYPE;
1043: # define yystype YYSTYPE /* obsolescent; will be withdrawn */
1044: # define YYSTYPE_IS_DECLARED 1
1045: # define YYSTYPE_IS_TRIVIAL 1
1046: #endif
1047: 
1048: 
1049: 
1050: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
1051: typedef struct YYLTYPE
1052: {
1053:   int first_line;
1054:   int first_column;
1055:   int last_line;
1056:   int last_column;
1057: } YYLTYPE;
1058: # define yyltype YYLTYPE /* obsolescent; will be withdrawn */
1059: # define YYLTYPE_IS_DECLARED 1
1060: # define YYLTYPE_IS_TRIVIAL 1
1061: #endif
1062: 
1063: 
[end of third_party/libpg_query/include/parser/gram.hpp]
[start of third_party/libpg_query/include/parser/kwlist.hpp]
1: 
2: namespace duckdb_libpgquery {
3: #define PG_KEYWORD(a,b,c) {a,b,c},
4: 
5: const PGScanKeyword ScanKeywords[] = {
6: PG_KEYWORD("abort", ABORT_P, UNRESERVED_KEYWORD)
7: PG_KEYWORD("absolute", ABSOLUTE_P, UNRESERVED_KEYWORD)
8: PG_KEYWORD("access", ACCESS, UNRESERVED_KEYWORD)
9: PG_KEYWORD("action", ACTION, UNRESERVED_KEYWORD)
10: PG_KEYWORD("add", ADD_P, UNRESERVED_KEYWORD)
11: PG_KEYWORD("admin", ADMIN, UNRESERVED_KEYWORD)
12: PG_KEYWORD("after", AFTER, UNRESERVED_KEYWORD)
13: PG_KEYWORD("aggregate", AGGREGATE, UNRESERVED_KEYWORD)
14: PG_KEYWORD("all", ALL, RESERVED_KEYWORD)
15: PG_KEYWORD("also", ALSO, UNRESERVED_KEYWORD)
16: PG_KEYWORD("alter", ALTER, UNRESERVED_KEYWORD)
17: PG_KEYWORD("always", ALWAYS, UNRESERVED_KEYWORD)
18: PG_KEYWORD("analyse", ANALYSE, RESERVED_KEYWORD)
19: PG_KEYWORD("analyze", ANALYZE, RESERVED_KEYWORD)
20: PG_KEYWORD("and", AND, RESERVED_KEYWORD)
21: PG_KEYWORD("any", ANY, RESERVED_KEYWORD)
22: PG_KEYWORD("array", ARRAY, RESERVED_KEYWORD)
23: PG_KEYWORD("as", AS, RESERVED_KEYWORD)
24: PG_KEYWORD("asc", ASC_P, RESERVED_KEYWORD)
25: PG_KEYWORD("assertion", ASSERTION, UNRESERVED_KEYWORD)
26: PG_KEYWORD("assignment", ASSIGNMENT, UNRESERVED_KEYWORD)
27: PG_KEYWORD("asymmetric", ASYMMETRIC, RESERVED_KEYWORD)
28: PG_KEYWORD("at", AT, UNRESERVED_KEYWORD)
29: PG_KEYWORD("attach", ATTACH, UNRESERVED_KEYWORD)
30: PG_KEYWORD("attribute", ATTRIBUTE, UNRESERVED_KEYWORD)
31: PG_KEYWORD("authorization", AUTHORIZATION, TYPE_FUNC_NAME_KEYWORD)
32: PG_KEYWORD("backward", BACKWARD, UNRESERVED_KEYWORD)
33: PG_KEYWORD("before", BEFORE, UNRESERVED_KEYWORD)
34: PG_KEYWORD("begin", BEGIN_P, UNRESERVED_KEYWORD)
35: PG_KEYWORD("between", BETWEEN, COL_NAME_KEYWORD)
36: PG_KEYWORD("bigint", BIGINT, COL_NAME_KEYWORD)
37: PG_KEYWORD("binary", BINARY, TYPE_FUNC_NAME_KEYWORD)
38: PG_KEYWORD("bit", BIT, COL_NAME_KEYWORD)
39: PG_KEYWORD("boolean", BOOLEAN_P, COL_NAME_KEYWORD)
40: PG_KEYWORD("both", BOTH, RESERVED_KEYWORD)
41: PG_KEYWORD("by", BY, UNRESERVED_KEYWORD)
42: PG_KEYWORD("cache", CACHE, UNRESERVED_KEYWORD)
43: PG_KEYWORD("call", CALL_P, UNRESERVED_KEYWORD)
44: PG_KEYWORD("called", CALLED, UNRESERVED_KEYWORD)
45: PG_KEYWORD("cascade", CASCADE, UNRESERVED_KEYWORD)
46: PG_KEYWORD("cascaded", CASCADED, UNRESERVED_KEYWORD)
47: PG_KEYWORD("case", CASE, RESERVED_KEYWORD)
48: PG_KEYWORD("cast", CAST, RESERVED_KEYWORD)
49: PG_KEYWORD("catalog", CATALOG_P, UNRESERVED_KEYWORD)
50: PG_KEYWORD("chain", CHAIN, UNRESERVED_KEYWORD)
51: PG_KEYWORD("char", CHAR_P, COL_NAME_KEYWORD)
52: PG_KEYWORD("character", CHARACTER, COL_NAME_KEYWORD)
53: PG_KEYWORD("characteristics", CHARACTERISTICS, UNRESERVED_KEYWORD)
54: PG_KEYWORD("check", CHECK_P, RESERVED_KEYWORD)
55: PG_KEYWORD("checkpoint", CHECKPOINT, UNRESERVED_KEYWORD)
56: PG_KEYWORD("class", CLASS, UNRESERVED_KEYWORD)
57: PG_KEYWORD("close", CLOSE, UNRESERVED_KEYWORD)
58: PG_KEYWORD("cluster", CLUSTER, UNRESERVED_KEYWORD)
59: PG_KEYWORD("coalesce", COALESCE, COL_NAME_KEYWORD)
60: PG_KEYWORD("collate", COLLATE, RESERVED_KEYWORD)
61: PG_KEYWORD("collation", COLLATION, TYPE_FUNC_NAME_KEYWORD)
62: PG_KEYWORD("column", COLUMN, RESERVED_KEYWORD)
63: PG_KEYWORD("columns", COLUMNS, UNRESERVED_KEYWORD)
64: PG_KEYWORD("comment", COMMENT, UNRESERVED_KEYWORD)
65: PG_KEYWORD("comments", COMMENTS, UNRESERVED_KEYWORD)
66: PG_KEYWORD("commit", COMMIT, UNRESERVED_KEYWORD)
67: PG_KEYWORD("committed", COMMITTED, UNRESERVED_KEYWORD)
68: PG_KEYWORD("concurrently", CONCURRENTLY, TYPE_FUNC_NAME_KEYWORD)
69: PG_KEYWORD("configuration", CONFIGURATION, UNRESERVED_KEYWORD)
70: PG_KEYWORD("conflict", CONFLICT, UNRESERVED_KEYWORD)
71: PG_KEYWORD("connection", CONNECTION, UNRESERVED_KEYWORD)
72: PG_KEYWORD("constraint", CONSTRAINT, RESERVED_KEYWORD)
73: PG_KEYWORD("constraints", CONSTRAINTS, UNRESERVED_KEYWORD)
74: PG_KEYWORD("content", CONTENT_P, UNRESERVED_KEYWORD)
75: PG_KEYWORD("continue", CONTINUE_P, UNRESERVED_KEYWORD)
76: PG_KEYWORD("conversion", CONVERSION_P, UNRESERVED_KEYWORD)
77: PG_KEYWORD("copy", COPY, UNRESERVED_KEYWORD)
78: PG_KEYWORD("cost", COST, UNRESERVED_KEYWORD)
79: PG_KEYWORD("create", CREATE_P, RESERVED_KEYWORD)
80: PG_KEYWORD("cross", CROSS, TYPE_FUNC_NAME_KEYWORD)
81: PG_KEYWORD("csv", CSV, UNRESERVED_KEYWORD)
82: PG_KEYWORD("cube", CUBE, UNRESERVED_KEYWORD)
83: PG_KEYWORD("current", CURRENT_P, UNRESERVED_KEYWORD)
84: PG_KEYWORD("current_catalog", CURRENT_CATALOG, RESERVED_KEYWORD)
85: PG_KEYWORD("current_date", CURRENT_DATE, RESERVED_KEYWORD)
86: PG_KEYWORD("current_role", CURRENT_ROLE, RESERVED_KEYWORD)
87: PG_KEYWORD("current_schema", CURRENT_SCHEMA, TYPE_FUNC_NAME_KEYWORD)
88: PG_KEYWORD("current_time", CURRENT_TIME, RESERVED_KEYWORD)
89: PG_KEYWORD("current_timestamp", CURRENT_TIMESTAMP, RESERVED_KEYWORD)
90: PG_KEYWORD("current_user", CURRENT_USER, RESERVED_KEYWORD)
91: PG_KEYWORD("cursor", CURSOR, UNRESERVED_KEYWORD)
92: PG_KEYWORD("cycle", CYCLE, UNRESERVED_KEYWORD)
93: PG_KEYWORD("data", DATA_P, UNRESERVED_KEYWORD)
94: PG_KEYWORD("database", DATABASE, UNRESERVED_KEYWORD)
95: PG_KEYWORD("day", DAY_P, UNRESERVED_KEYWORD)
96: PG_KEYWORD("days", DAYS_P, UNRESERVED_KEYWORD)
97: PG_KEYWORD("deallocate", DEALLOCATE, UNRESERVED_KEYWORD)
98: PG_KEYWORD("dec", DEC, COL_NAME_KEYWORD)
99: PG_KEYWORD("decimal", DECIMAL_P, COL_NAME_KEYWORD)
100: PG_KEYWORD("declare", DECLARE, UNRESERVED_KEYWORD)
101: PG_KEYWORD("default", DEFAULT, RESERVED_KEYWORD)
102: PG_KEYWORD("defaults", DEFAULTS, UNRESERVED_KEYWORD)
103: PG_KEYWORD("deferrable", DEFERRABLE, RESERVED_KEYWORD)
104: PG_KEYWORD("deferred", DEFERRED, UNRESERVED_KEYWORD)
105: PG_KEYWORD("definer", DEFINER, UNRESERVED_KEYWORD)
106: PG_KEYWORD("delete", DELETE_P, UNRESERVED_KEYWORD)
107: PG_KEYWORD("delimiter", DELIMITER, UNRESERVED_KEYWORD)
108: PG_KEYWORD("delimiters", DELIMITERS, UNRESERVED_KEYWORD)
109: PG_KEYWORD("depends", DEPENDS, UNRESERVED_KEYWORD)
110: PG_KEYWORD("desc", DESC_P, RESERVED_KEYWORD)
111: PG_KEYWORD("describe", DESCRIBE, UNRESERVED_KEYWORD)
112: PG_KEYWORD("detach", DETACH, UNRESERVED_KEYWORD)
113: PG_KEYWORD("dictionary", DICTIONARY, UNRESERVED_KEYWORD)
114: PG_KEYWORD("disable", DISABLE_P, UNRESERVED_KEYWORD)
115: PG_KEYWORD("discard", DISCARD, UNRESERVED_KEYWORD)
116: PG_KEYWORD("distinct", DISTINCT, RESERVED_KEYWORD)
117: PG_KEYWORD("do", DO, RESERVED_KEYWORD)
118: PG_KEYWORD("document", DOCUMENT_P, UNRESERVED_KEYWORD)
119: PG_KEYWORD("domain", DOMAIN_P, UNRESERVED_KEYWORD)
120: PG_KEYWORD("double", DOUBLE_P, UNRESERVED_KEYWORD)
121: PG_KEYWORD("drop", DROP, UNRESERVED_KEYWORD)
122: PG_KEYWORD("each", EACH, UNRESERVED_KEYWORD)
123: PG_KEYWORD("else", ELSE, RESERVED_KEYWORD)
124: PG_KEYWORD("enable", ENABLE_P, UNRESERVED_KEYWORD)
125: PG_KEYWORD("encoding", ENCODING, UNRESERVED_KEYWORD)
126: PG_KEYWORD("encrypted", ENCRYPTED, UNRESERVED_KEYWORD)
127: PG_KEYWORD("end", END_P, RESERVED_KEYWORD)
128: PG_KEYWORD("enum", ENUM_P, UNRESERVED_KEYWORD)
129: PG_KEYWORD("escape", ESCAPE, UNRESERVED_KEYWORD)
130: PG_KEYWORD("event", EVENT, UNRESERVED_KEYWORD)
131: PG_KEYWORD("except", EXCEPT, RESERVED_KEYWORD)
132: PG_KEYWORD("exclude", EXCLUDE, UNRESERVED_KEYWORD)
133: PG_KEYWORD("excluding", EXCLUDING, UNRESERVED_KEYWORD)
134: PG_KEYWORD("exclusive", EXCLUSIVE, UNRESERVED_KEYWORD)
135: PG_KEYWORD("execute", EXECUTE, UNRESERVED_KEYWORD)
136: PG_KEYWORD("exists", EXISTS, COL_NAME_KEYWORD)
137: PG_KEYWORD("explain", EXPLAIN, UNRESERVED_KEYWORD)
138: PG_KEYWORD("export", EXPORT_P, UNRESERVED_KEYWORD)
139: PG_KEYWORD("extension", EXTENSION, UNRESERVED_KEYWORD)
140: PG_KEYWORD("external", EXTERNAL, UNRESERVED_KEYWORD)
141: PG_KEYWORD("extract", EXTRACT, COL_NAME_KEYWORD)
142: PG_KEYWORD("false", FALSE_P, RESERVED_KEYWORD)
143: PG_KEYWORD("family", FAMILY, UNRESERVED_KEYWORD)
144: PG_KEYWORD("fetch", FETCH, RESERVED_KEYWORD)
145: PG_KEYWORD("filter", FILTER, UNRESERVED_KEYWORD)
146: PG_KEYWORD("first", FIRST_P, UNRESERVED_KEYWORD)
147: PG_KEYWORD("float", FLOAT_P, COL_NAME_KEYWORD)
148: PG_KEYWORD("following", FOLLOWING, UNRESERVED_KEYWORD)
149: PG_KEYWORD("for", FOR, RESERVED_KEYWORD)
150: PG_KEYWORD("force", FORCE, UNRESERVED_KEYWORD)
151: PG_KEYWORD("foreign", FOREIGN, RESERVED_KEYWORD)
152: PG_KEYWORD("forward", FORWARD, UNRESERVED_KEYWORD)
153: PG_KEYWORD("freeze", FREEZE, TYPE_FUNC_NAME_KEYWORD)
154: PG_KEYWORD("from", FROM, RESERVED_KEYWORD)
155: PG_KEYWORD("full", FULL, TYPE_FUNC_NAME_KEYWORD)
156: PG_KEYWORD("function", FUNCTION, UNRESERVED_KEYWORD)
157: PG_KEYWORD("functions", FUNCTIONS, UNRESERVED_KEYWORD)
158: PG_KEYWORD("generated", GENERATED, UNRESERVED_KEYWORD)
159: PG_KEYWORD("glob", GLOB, TYPE_FUNC_NAME_KEYWORD)
160: PG_KEYWORD("global", GLOBAL, UNRESERVED_KEYWORD)
161: PG_KEYWORD("grant", GRANT, RESERVED_KEYWORD)
162: PG_KEYWORD("granted", GRANTED, UNRESERVED_KEYWORD)
163: PG_KEYWORD("group", GROUP_P, RESERVED_KEYWORD)
164: PG_KEYWORD("grouping", GROUPING, COL_NAME_KEYWORD)
165: PG_KEYWORD("handler", HANDLER, UNRESERVED_KEYWORD)
166: PG_KEYWORD("having", HAVING, RESERVED_KEYWORD)
167: PG_KEYWORD("header", HEADER_P, UNRESERVED_KEYWORD)
168: PG_KEYWORD("hold", HOLD, UNRESERVED_KEYWORD)
169: PG_KEYWORD("hour", HOUR_P, UNRESERVED_KEYWORD)
170: PG_KEYWORD("hours", HOURS_P, UNRESERVED_KEYWORD)
171: PG_KEYWORD("identity", IDENTITY_P, UNRESERVED_KEYWORD)
172: PG_KEYWORD("if", IF_P, UNRESERVED_KEYWORD)
173: PG_KEYWORD("ilike", ILIKE, TYPE_FUNC_NAME_KEYWORD)
174: PG_KEYWORD("immediate", IMMEDIATE, UNRESERVED_KEYWORD)
175: PG_KEYWORD("immutable", IMMUTABLE, UNRESERVED_KEYWORD)
176: PG_KEYWORD("implicit", IMPLICIT_P, UNRESERVED_KEYWORD)
177: PG_KEYWORD("import", IMPORT_P, UNRESERVED_KEYWORD)
178: PG_KEYWORD("in", IN_P, RESERVED_KEYWORD)
179: PG_KEYWORD("including", INCLUDING, UNRESERVED_KEYWORD)
180: PG_KEYWORD("increment", INCREMENT, UNRESERVED_KEYWORD)
181: PG_KEYWORD("index", INDEX, UNRESERVED_KEYWORD)
182: PG_KEYWORD("indexes", INDEXES, UNRESERVED_KEYWORD)
183: PG_KEYWORD("inherit", INHERIT, UNRESERVED_KEYWORD)
184: PG_KEYWORD("inherits", INHERITS, UNRESERVED_KEYWORD)
185: PG_KEYWORD("initially", INITIALLY, RESERVED_KEYWORD)
186: PG_KEYWORD("inline", INLINE_P, UNRESERVED_KEYWORD)
187: PG_KEYWORD("inner", INNER_P, TYPE_FUNC_NAME_KEYWORD)
188: PG_KEYWORD("inout", INOUT, COL_NAME_KEYWORD)
189: PG_KEYWORD("input", INPUT_P, UNRESERVED_KEYWORD)
190: PG_KEYWORD("insensitive", INSENSITIVE, UNRESERVED_KEYWORD)
191: PG_KEYWORD("insert", INSERT, UNRESERVED_KEYWORD)
192: PG_KEYWORD("instead", INSTEAD, UNRESERVED_KEYWORD)
193: PG_KEYWORD("int", INT_P, COL_NAME_KEYWORD)
194: PG_KEYWORD("integer", INTEGER, COL_NAME_KEYWORD)
195: PG_KEYWORD("intersect", INTERSECT, RESERVED_KEYWORD)
196: PG_KEYWORD("interval", INTERVAL, COL_NAME_KEYWORD)
197: PG_KEYWORD("into", INTO, RESERVED_KEYWORD)
198: PG_KEYWORD("invoker", INVOKER, UNRESERVED_KEYWORD)
199: PG_KEYWORD("is", IS, TYPE_FUNC_NAME_KEYWORD)
200: PG_KEYWORD("isnull", ISNULL, TYPE_FUNC_NAME_KEYWORD)
201: PG_KEYWORD("isolation", ISOLATION, UNRESERVED_KEYWORD)
202: PG_KEYWORD("join", JOIN, TYPE_FUNC_NAME_KEYWORD)
203: PG_KEYWORD("key", KEY, UNRESERVED_KEYWORD)
204: PG_KEYWORD("label", LABEL, UNRESERVED_KEYWORD)
205: PG_KEYWORD("language", LANGUAGE, UNRESERVED_KEYWORD)
206: PG_KEYWORD("large", LARGE_P, UNRESERVED_KEYWORD)
207: PG_KEYWORD("last", LAST_P, UNRESERVED_KEYWORD)
208: PG_KEYWORD("lateral", LATERAL_P, RESERVED_KEYWORD)
209: PG_KEYWORD("leading", LEADING, RESERVED_KEYWORD)
210: PG_KEYWORD("leakproof", LEAKPROOF, UNRESERVED_KEYWORD)
211: PG_KEYWORD("left", LEFT, TYPE_FUNC_NAME_KEYWORD)
212: PG_KEYWORD("level", LEVEL, UNRESERVED_KEYWORD)
213: PG_KEYWORD("like", LIKE, TYPE_FUNC_NAME_KEYWORD)
214: PG_KEYWORD("limit", LIMIT, RESERVED_KEYWORD)
215: PG_KEYWORD("listen", LISTEN, UNRESERVED_KEYWORD)
216: PG_KEYWORD("load", LOAD, UNRESERVED_KEYWORD)
217: PG_KEYWORD("local", LOCAL, UNRESERVED_KEYWORD)
218: PG_KEYWORD("localtime", LOCALTIME, RESERVED_KEYWORD)
219: PG_KEYWORD("localtimestamp", LOCALTIMESTAMP, RESERVED_KEYWORD)
220: PG_KEYWORD("location", LOCATION, UNRESERVED_KEYWORD)
221: PG_KEYWORD("lock", LOCK_P, UNRESERVED_KEYWORD)
222: PG_KEYWORD("locked", LOCKED, UNRESERVED_KEYWORD)
223: PG_KEYWORD("logged", LOGGED, UNRESERVED_KEYWORD)
224: PG_KEYWORD("macro", MACRO, UNRESERVED_KEYWORD)
225: PG_KEYWORD("map", MAP, TYPE_FUNC_NAME_KEYWORD)
226: PG_KEYWORD("mapping", MAPPING, UNRESERVED_KEYWORD)
227: PG_KEYWORD("match", MATCH, UNRESERVED_KEYWORD)
228: PG_KEYWORD("materialized", MATERIALIZED, UNRESERVED_KEYWORD)
229: PG_KEYWORD("maxvalue", MAXVALUE, UNRESERVED_KEYWORD)
230: PG_KEYWORD("method", METHOD, UNRESERVED_KEYWORD)
231: PG_KEYWORD("microsecond", MICROSECOND_P, UNRESERVED_KEYWORD)
232: PG_KEYWORD("microseconds", MICROSECONDS_P, UNRESERVED_KEYWORD)
233: PG_KEYWORD("millisecond", MILLISECOND_P, UNRESERVED_KEYWORD)
234: PG_KEYWORD("milliseconds", MILLISECONDS_P, UNRESERVED_KEYWORD)
235: PG_KEYWORD("minute", MINUTE_P, UNRESERVED_KEYWORD)
236: PG_KEYWORD("minutes", MINUTES_P, UNRESERVED_KEYWORD)
237: PG_KEYWORD("minvalue", MINVALUE, UNRESERVED_KEYWORD)
238: PG_KEYWORD("mode", MODE, UNRESERVED_KEYWORD)
239: PG_KEYWORD("month", MONTH_P, UNRESERVED_KEYWORD)
240: PG_KEYWORD("months", MONTHS_P, UNRESERVED_KEYWORD)
241: PG_KEYWORD("move", MOVE, UNRESERVED_KEYWORD)
242: PG_KEYWORD("name", NAME_P, UNRESERVED_KEYWORD)
243: PG_KEYWORD("names", NAMES, UNRESERVED_KEYWORD)
244: PG_KEYWORD("national", NATIONAL, COL_NAME_KEYWORD)
245: PG_KEYWORD("natural", NATURAL, TYPE_FUNC_NAME_KEYWORD)
246: PG_KEYWORD("nchar", NCHAR, COL_NAME_KEYWORD)
247: PG_KEYWORD("new", NEW, UNRESERVED_KEYWORD)
248: PG_KEYWORD("next", NEXT, UNRESERVED_KEYWORD)
249: PG_KEYWORD("no", NO, UNRESERVED_KEYWORD)
250: PG_KEYWORD("none", NONE, COL_NAME_KEYWORD)
251: PG_KEYWORD("not", NOT, RESERVED_KEYWORD)
252: PG_KEYWORD("nothing", NOTHING, UNRESERVED_KEYWORD)
253: PG_KEYWORD("notify", NOTIFY, UNRESERVED_KEYWORD)
254: PG_KEYWORD("notnull", NOTNULL, TYPE_FUNC_NAME_KEYWORD)
255: PG_KEYWORD("nowait", NOWAIT, UNRESERVED_KEYWORD)
256: PG_KEYWORD("null", NULL_P, RESERVED_KEYWORD)
257: PG_KEYWORD("nullif", NULLIF, COL_NAME_KEYWORD)
258: PG_KEYWORD("nulls", NULLS_P, UNRESERVED_KEYWORD)
259: PG_KEYWORD("numeric", NUMERIC, COL_NAME_KEYWORD)
260: PG_KEYWORD("object", OBJECT_P, UNRESERVED_KEYWORD)
261: PG_KEYWORD("of", OF, UNRESERVED_KEYWORD)
262: PG_KEYWORD("off", OFF, UNRESERVED_KEYWORD)
263: PG_KEYWORD("offset", OFFSET, RESERVED_KEYWORD)
264: PG_KEYWORD("oids", OIDS, UNRESERVED_KEYWORD)
265: PG_KEYWORD("old", OLD, UNRESERVED_KEYWORD)
266: PG_KEYWORD("on", ON, RESERVED_KEYWORD)
267: PG_KEYWORD("only", ONLY, RESERVED_KEYWORD)
268: PG_KEYWORD("operator", OPERATOR, UNRESERVED_KEYWORD)
269: PG_KEYWORD("option", OPTION, UNRESERVED_KEYWORD)
270: PG_KEYWORD("options", OPTIONS, UNRESERVED_KEYWORD)
271: PG_KEYWORD("or", OR, RESERVED_KEYWORD)
272: PG_KEYWORD("order", ORDER, RESERVED_KEYWORD)
273: PG_KEYWORD("ordinality", ORDINALITY, UNRESERVED_KEYWORD)
274: PG_KEYWORD("out", OUT_P, COL_NAME_KEYWORD)
275: PG_KEYWORD("outer", OUTER_P, TYPE_FUNC_NAME_KEYWORD)
276: PG_KEYWORD("over", OVER, UNRESERVED_KEYWORD)
277: PG_KEYWORD("overlaps", OVERLAPS, TYPE_FUNC_NAME_KEYWORD)
278: PG_KEYWORD("overlay", OVERLAY, COL_NAME_KEYWORD)
279: PG_KEYWORD("overriding", OVERRIDING, UNRESERVED_KEYWORD)
280: PG_KEYWORD("owned", OWNED, UNRESERVED_KEYWORD)
281: PG_KEYWORD("owner", OWNER, UNRESERVED_KEYWORD)
282: PG_KEYWORD("parallel", PARALLEL, UNRESERVED_KEYWORD)
283: PG_KEYWORD("parser", PARSER, UNRESERVED_KEYWORD)
284: PG_KEYWORD("partial", PARTIAL, UNRESERVED_KEYWORD)
285: PG_KEYWORD("partition", PARTITION, UNRESERVED_KEYWORD)
286: PG_KEYWORD("passing", PASSING, UNRESERVED_KEYWORD)
287: PG_KEYWORD("password", PASSWORD, UNRESERVED_KEYWORD)
288: PG_KEYWORD("percent", PERCENT, UNRESERVED_KEYWORD)
289: PG_KEYWORD("placing", PLACING, RESERVED_KEYWORD)
290: PG_KEYWORD("plans", PLANS, UNRESERVED_KEYWORD)
291: PG_KEYWORD("policy", POLICY, UNRESERVED_KEYWORD)
292: PG_KEYWORD("position", POSITION, COL_NAME_KEYWORD)
293: PG_KEYWORD("pragma", PRAGMA_P, UNRESERVED_KEYWORD)
294: PG_KEYWORD("preceding", PRECEDING, UNRESERVED_KEYWORD)
295: PG_KEYWORD("precision", PRECISION, COL_NAME_KEYWORD)
296: PG_KEYWORD("prepare", PREPARE, UNRESERVED_KEYWORD)
297: PG_KEYWORD("prepared", PREPARED, UNRESERVED_KEYWORD)
298: PG_KEYWORD("preserve", PRESERVE, UNRESERVED_KEYWORD)
299: PG_KEYWORD("primary", PRIMARY, RESERVED_KEYWORD)
300: PG_KEYWORD("prior", PRIOR, UNRESERVED_KEYWORD)
301: PG_KEYWORD("privileges", PRIVILEGES, UNRESERVED_KEYWORD)
302: PG_KEYWORD("procedural", PROCEDURAL, UNRESERVED_KEYWORD)
303: PG_KEYWORD("procedure", PROCEDURE, UNRESERVED_KEYWORD)
304: PG_KEYWORD("program", PROGRAM, UNRESERVED_KEYWORD)
305: PG_KEYWORD("publication", PUBLICATION, UNRESERVED_KEYWORD)
306: PG_KEYWORD("quote", QUOTE, UNRESERVED_KEYWORD)
307: PG_KEYWORD("range", RANGE, UNRESERVED_KEYWORD)
308: PG_KEYWORD("read", READ_P, UNRESERVED_KEYWORD)
309: PG_KEYWORD("real", REAL, COL_NAME_KEYWORD)
310: PG_KEYWORD("reassign", REASSIGN, UNRESERVED_KEYWORD)
311: PG_KEYWORD("recheck", RECHECK, UNRESERVED_KEYWORD)
312: PG_KEYWORD("recursive", RECURSIVE, UNRESERVED_KEYWORD)
313: PG_KEYWORD("ref", REF, UNRESERVED_KEYWORD)
314: PG_KEYWORD("references", REFERENCES, RESERVED_KEYWORD)
315: PG_KEYWORD("referencing", REFERENCING, UNRESERVED_KEYWORD)
316: PG_KEYWORD("refresh", REFRESH, UNRESERVED_KEYWORD)
317: PG_KEYWORD("reindex", REINDEX, UNRESERVED_KEYWORD)
318: PG_KEYWORD("relative", RELATIVE_P, UNRESERVED_KEYWORD)
319: PG_KEYWORD("release", RELEASE, UNRESERVED_KEYWORD)
320: PG_KEYWORD("rename", RENAME, UNRESERVED_KEYWORD)
321: PG_KEYWORD("repeatable", REPEATABLE, UNRESERVED_KEYWORD)
322: PG_KEYWORD("replace", REPLACE, UNRESERVED_KEYWORD)
323: PG_KEYWORD("replica", REPLICA, UNRESERVED_KEYWORD)
324: PG_KEYWORD("reset", RESET, UNRESERVED_KEYWORD)
325: PG_KEYWORD("restart", RESTART, UNRESERVED_KEYWORD)
326: PG_KEYWORD("restrict", RESTRICT, UNRESERVED_KEYWORD)
327: PG_KEYWORD("returning", RETURNING, RESERVED_KEYWORD)
328: PG_KEYWORD("returns", RETURNS, UNRESERVED_KEYWORD)
329: PG_KEYWORD("revoke", REVOKE, UNRESERVED_KEYWORD)
330: PG_KEYWORD("right", RIGHT, TYPE_FUNC_NAME_KEYWORD)
331: PG_KEYWORD("role", ROLE, UNRESERVED_KEYWORD)
332: PG_KEYWORD("rollback", ROLLBACK, UNRESERVED_KEYWORD)
333: PG_KEYWORD("rollup", ROLLUP, UNRESERVED_KEYWORD)
334: PG_KEYWORD("row", ROW, COL_NAME_KEYWORD)
335: PG_KEYWORD("rows", ROWS, UNRESERVED_KEYWORD)
336: PG_KEYWORD("rule", RULE, UNRESERVED_KEYWORD)
337: PG_KEYWORD("sample", SAMPLE, UNRESERVED_KEYWORD)
338: PG_KEYWORD("savepoint", SAVEPOINT, UNRESERVED_KEYWORD)
339: PG_KEYWORD("schema", SCHEMA, UNRESERVED_KEYWORD)
340: PG_KEYWORD("schemas", SCHEMAS, UNRESERVED_KEYWORD)
341: PG_KEYWORD("scroll", SCROLL, UNRESERVED_KEYWORD)
342: PG_KEYWORD("search", SEARCH, UNRESERVED_KEYWORD)
343: PG_KEYWORD("second", SECOND_P, UNRESERVED_KEYWORD)
344: PG_KEYWORD("seconds", SECONDS_P, UNRESERVED_KEYWORD)
345: PG_KEYWORD("security", SECURITY, UNRESERVED_KEYWORD)
346: PG_KEYWORD("select", SELECT, RESERVED_KEYWORD)
347: PG_KEYWORD("sequence", SEQUENCE, UNRESERVED_KEYWORD)
348: PG_KEYWORD("sequences", SEQUENCES, UNRESERVED_KEYWORD)
349: PG_KEYWORD("serializable", SERIALIZABLE, UNRESERVED_KEYWORD)
350: PG_KEYWORD("server", SERVER, UNRESERVED_KEYWORD)
351: PG_KEYWORD("session", SESSION, UNRESERVED_KEYWORD)
352: PG_KEYWORD("session_user", SESSION_USER, RESERVED_KEYWORD)
353: PG_KEYWORD("set", SET, UNRESERVED_KEYWORD)
354: PG_KEYWORD("setof", SETOF, COL_NAME_KEYWORD)
355: PG_KEYWORD("sets", SETS, UNRESERVED_KEYWORD)
356: PG_KEYWORD("share", SHARE, UNRESERVED_KEYWORD)
357: PG_KEYWORD("show", SHOW, UNRESERVED_KEYWORD)
358: PG_KEYWORD("similar", SIMILAR, TYPE_FUNC_NAME_KEYWORD)
359: PG_KEYWORD("simple", SIMPLE, UNRESERVED_KEYWORD)
360: PG_KEYWORD("skip", SKIP, UNRESERVED_KEYWORD)
361: PG_KEYWORD("smallint", SMALLINT, COL_NAME_KEYWORD)
362: PG_KEYWORD("snapshot", SNAPSHOT, UNRESERVED_KEYWORD)
363: PG_KEYWORD("some", SOME, RESERVED_KEYWORD)
364: PG_KEYWORD("sql", SQL_P, UNRESERVED_KEYWORD)
365: PG_KEYWORD("stable", STABLE, UNRESERVED_KEYWORD)
366: PG_KEYWORD("standalone", STANDALONE_P, UNRESERVED_KEYWORD)
367: PG_KEYWORD("start", START, UNRESERVED_KEYWORD)
368: PG_KEYWORD("statement", STATEMENT, UNRESERVED_KEYWORD)
369: PG_KEYWORD("statistics", STATISTICS, UNRESERVED_KEYWORD)
370: PG_KEYWORD("stdin", STDIN, UNRESERVED_KEYWORD)
371: PG_KEYWORD("stdout", STDOUT, UNRESERVED_KEYWORD)
372: PG_KEYWORD("storage", STORAGE, UNRESERVED_KEYWORD)
373: PG_KEYWORD("strict", STRICT_P, UNRESERVED_KEYWORD)
374: PG_KEYWORD("strip", STRIP_P, UNRESERVED_KEYWORD)
375: PG_KEYWORD("struct", STRUCT, TYPE_FUNC_NAME_KEYWORD)
376: PG_KEYWORD("subscription", SUBSCRIPTION, UNRESERVED_KEYWORD)
377: PG_KEYWORD("substring", SUBSTRING, COL_NAME_KEYWORD)
378: PG_KEYWORD("summarize", SUMMARIZE, UNRESERVED_KEYWORD)
379: PG_KEYWORD("symmetric", SYMMETRIC, RESERVED_KEYWORD)
380: PG_KEYWORD("sysid", SYSID, UNRESERVED_KEYWORD)
381: PG_KEYWORD("system", SYSTEM_P, UNRESERVED_KEYWORD)
382: PG_KEYWORD("table", TABLE, RESERVED_KEYWORD)
383: PG_KEYWORD("tables", TABLES, UNRESERVED_KEYWORD)
384: PG_KEYWORD("tablesample", TABLESAMPLE, TYPE_FUNC_NAME_KEYWORD)
385: PG_KEYWORD("tablespace", TABLESPACE, UNRESERVED_KEYWORD)
386: PG_KEYWORD("temp", TEMP, UNRESERVED_KEYWORD)
387: PG_KEYWORD("template", TEMPLATE, UNRESERVED_KEYWORD)
388: PG_KEYWORD("temporary", TEMPORARY, UNRESERVED_KEYWORD)
389: PG_KEYWORD("text", TEXT_P, UNRESERVED_KEYWORD)
390: PG_KEYWORD("then", THEN, RESERVED_KEYWORD)
391: PG_KEYWORD("time", TIME, COL_NAME_KEYWORD)
392: PG_KEYWORD("timestamp", TIMESTAMP, COL_NAME_KEYWORD)
393: PG_KEYWORD("to", TO, RESERVED_KEYWORD)
394: PG_KEYWORD("trailing", TRAILING, RESERVED_KEYWORD)
395: PG_KEYWORD("transaction", TRANSACTION, UNRESERVED_KEYWORD)
396: PG_KEYWORD("transform", TRANSFORM, UNRESERVED_KEYWORD)
397: PG_KEYWORD("treat", TREAT, COL_NAME_KEYWORD)
398: PG_KEYWORD("trigger", TRIGGER, UNRESERVED_KEYWORD)
399: PG_KEYWORD("trim", TRIM, COL_NAME_KEYWORD)
400: PG_KEYWORD("true", TRUE_P, RESERVED_KEYWORD)
401: PG_KEYWORD("truncate", TRUNCATE, UNRESERVED_KEYWORD)
402: PG_KEYWORD("trusted", TRUSTED, UNRESERVED_KEYWORD)
403: PG_KEYWORD("try_cast", TRY_CAST, TYPE_FUNC_NAME_KEYWORD)
404: PG_KEYWORD("type", TYPE_P, UNRESERVED_KEYWORD)
405: PG_KEYWORD("types", TYPES_P, UNRESERVED_KEYWORD)
406: PG_KEYWORD("unbounded", UNBOUNDED, UNRESERVED_KEYWORD)
407: PG_KEYWORD("uncommitted", UNCOMMITTED, UNRESERVED_KEYWORD)
408: PG_KEYWORD("unencrypted", UNENCRYPTED, UNRESERVED_KEYWORD)
409: PG_KEYWORD("union", UNION, RESERVED_KEYWORD)
410: PG_KEYWORD("unique", UNIQUE, RESERVED_KEYWORD)
411: PG_KEYWORD("unknown", UNKNOWN, UNRESERVED_KEYWORD)
412: PG_KEYWORD("unlisten", UNLISTEN, UNRESERVED_KEYWORD)
413: PG_KEYWORD("unlogged", UNLOGGED, UNRESERVED_KEYWORD)
414: PG_KEYWORD("until", UNTIL, UNRESERVED_KEYWORD)
415: PG_KEYWORD("update", UPDATE, UNRESERVED_KEYWORD)
416: PG_KEYWORD("user", USER, RESERVED_KEYWORD)
417: PG_KEYWORD("using", USING, RESERVED_KEYWORD)
418: PG_KEYWORD("vacuum", VACUUM, UNRESERVED_KEYWORD)
419: PG_KEYWORD("valid", VALID, UNRESERVED_KEYWORD)
420: PG_KEYWORD("validate", VALIDATE, UNRESERVED_KEYWORD)
421: PG_KEYWORD("validator", VALIDATOR, UNRESERVED_KEYWORD)
422: PG_KEYWORD("value", VALUE_P, UNRESERVED_KEYWORD)
423: PG_KEYWORD("values", VALUES, COL_NAME_KEYWORD)
424: PG_KEYWORD("varchar", VARCHAR, COL_NAME_KEYWORD)
425: PG_KEYWORD("variadic", VARIADIC, RESERVED_KEYWORD)
426: PG_KEYWORD("varying", VARYING, UNRESERVED_KEYWORD)
427: PG_KEYWORD("verbose", VERBOSE, TYPE_FUNC_NAME_KEYWORD)
428: PG_KEYWORD("version", VERSION_P, UNRESERVED_KEYWORD)
429: PG_KEYWORD("view", VIEW, UNRESERVED_KEYWORD)
430: PG_KEYWORD("views", VIEWS, UNRESERVED_KEYWORD)
431: PG_KEYWORD("volatile", VOLATILE, UNRESERVED_KEYWORD)
432: PG_KEYWORD("when", WHEN, RESERVED_KEYWORD)
433: PG_KEYWORD("where", WHERE, RESERVED_KEYWORD)
434: PG_KEYWORD("whitespace", WHITESPACE_P, UNRESERVED_KEYWORD)
435: PG_KEYWORD("window", WINDOW, RESERVED_KEYWORD)
436: PG_KEYWORD("with", WITH, RESERVED_KEYWORD)
437: PG_KEYWORD("within", WITHIN, UNRESERVED_KEYWORD)
438: PG_KEYWORD("without", WITHOUT, UNRESERVED_KEYWORD)
439: PG_KEYWORD("work", WORK, UNRESERVED_KEYWORD)
440: PG_KEYWORD("wrapper", WRAPPER, UNRESERVED_KEYWORD)
441: PG_KEYWORD("write", WRITE_P, UNRESERVED_KEYWORD)
442: PG_KEYWORD("xml", XML_P, UNRESERVED_KEYWORD)
443: PG_KEYWORD("xmlattributes", XMLATTRIBUTES, COL_NAME_KEYWORD)
444: PG_KEYWORD("xmlconcat", XMLCONCAT, COL_NAME_KEYWORD)
445: PG_KEYWORD("xmlelement", XMLELEMENT, COL_NAME_KEYWORD)
446: PG_KEYWORD("xmlexists", XMLEXISTS, COL_NAME_KEYWORD)
447: PG_KEYWORD("xmlforest", XMLFOREST, COL_NAME_KEYWORD)
448: PG_KEYWORD("xmlnamespaces", XMLNAMESPACES, COL_NAME_KEYWORD)
449: PG_KEYWORD("xmlparse", XMLPARSE, COL_NAME_KEYWORD)
450: PG_KEYWORD("xmlpi", XMLPI, COL_NAME_KEYWORD)
451: PG_KEYWORD("xmlroot", XMLROOT, COL_NAME_KEYWORD)
452: PG_KEYWORD("xmlserialize", XMLSERIALIZE, COL_NAME_KEYWORD)
453: PG_KEYWORD("xmltable", XMLTABLE, COL_NAME_KEYWORD)
454: PG_KEYWORD("year", YEAR_P, UNRESERVED_KEYWORD)
455: PG_KEYWORD("years", YEARS_P, UNRESERVED_KEYWORD)
456: PG_KEYWORD("yes", YES_P, UNRESERVED_KEYWORD)
457: PG_KEYWORD("zone", ZONE, UNRESERVED_KEYWORD)
458: 
459: };
460: 
461: const int NumScanKeywords = lengthof(ScanKeywords);
462: } // namespace duckdb_libpgquery
[end of third_party/libpg_query/include/parser/kwlist.hpp]
[start of third_party/libpg_query/src_backend_parser_gram.cpp]
1: /* A Bison parser, made by GNU Bison 2.3.  */
2: 
3: /* Skeleton implementation for Bison's Yacc-like parsers in C
4: 
5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
6:    Free Software Foundation, Inc.
7: 
8:    This program is free software; you can redistribute it and/or modify
9:    it under the terms of the GNU General Public License as published by
10:    the Free Software Foundation; either version 2, or (at your option)
11:    any later version.
12: 
13:    This program is distributed in the hope that it will be useful,
14:    but WITHOUT ANY WARRANTY; without even the implied warranty of
15:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
16:    GNU General Public License for more details.
17: 
18:    You should have received a copy of the GNU General Public License
19:    along with this program; if not, write to the Free Software
20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,
21:    Boston, MA 02110-1301, USA.  */
22: 
23: /* As a special exception, you may create a larger work that contains
24:    part or all of the Bison parser skeleton and distribute that work
25:    under terms of your choice, so long as that work isn't itself a
26:    parser generator using the skeleton or a modified version thereof
27:    as a parser skeleton.  Alternatively, if you modify or redistribute
28:    the parser skeleton itself, you may (at your option) remove this
29:    special exception, which will cause the skeleton and the resulting
30:    Bison output files to be licensed under the GNU General Public
31:    License without this special exception.
32: 
33:    This special exception was added by the Free Software Foundation in
34:    version 2.2 of Bison.  */
35: 
36: /* C LALR(1) parser skeleton written by Richard Stallman, by
37:    simplifying the original so-called "semantic" parser.  */
38: 
39: /* All symbols defined below should begin with yy or YY, to avoid
40:    infringing on user name space.  This should be done even for local
41:    variables, as they might otherwise be expanded by user macros.
42:    There are some unavoidable exceptions within include files to
43:    define necessary library symbols; they are noted "INFRINGES ON
44:    USER NAME SPACE" below.  */
45: 
46: /* Identify Bison output.  */
47: #define YYBISON 1
48: 
49: /* Bison version.  */
50: #define YYBISON_VERSION "2.3"
51: 
52: /* Skeleton name.  */
53: #define YYSKELETON_NAME "yacc.c"
54: 
55: /* Pure parsers.  */
56: #define YYPURE 1
57: 
58: /* Using locations.  */
59: #define YYLSP_NEEDED 1
60: 
61: /* Substitute the variable and function names.  */
62: #define yyparse base_yyparse
63: #define yylex   base_yylex
64: #define yyerror base_yyerror
65: #define yylval  base_yylval
66: #define yychar  base_yychar
67: #define yydebug base_yydebug
68: #define yynerrs base_yynerrs
69: #define yylloc base_yylloc
70: 
71: /* Tokens.  */
72: #ifndef YYTOKENTYPE
73: # define YYTOKENTYPE
74:    /* Put the tokens into the symbol table, so that GDB and other debuggers
75:       know about them.  */
76:    enum yytokentype {
77:      IDENT = 258,
78:      FCONST = 259,
79:      SCONST = 260,
80:      BCONST = 261,
81:      XCONST = 262,
82:      Op = 263,
83:      ICONST = 264,
84:      PARAM = 265,
85:      TYPECAST = 266,
86:      DOT_DOT = 267,
87:      COLON_EQUALS = 268,
88:      EQUALS_GREATER = 269,
89:      LAMBDA_ARROW = 270,
90:      LESS_EQUALS = 271,
91:      GREATER_EQUALS = 272,
92:      NOT_EQUALS = 273,
93:      ABORT_P = 274,
94:      ABSOLUTE_P = 275,
95:      ACCESS = 276,
96:      ACTION = 277,
97:      ADD_P = 278,
98:      ADMIN = 279,
99:      AFTER = 280,
100:      AGGREGATE = 281,
101:      ALL = 282,
102:      ALSO = 283,
103:      ALTER = 284,
104:      ALWAYS = 285,
105:      ANALYSE = 286,
106:      ANALYZE = 287,
107:      AND = 288,
108:      ANY = 289,
109:      ARRAY = 290,
110:      AS = 291,
111:      ASC_P = 292,
112:      ASSERTION = 293,
113:      ASSIGNMENT = 294,
114:      ASYMMETRIC = 295,
115:      AT = 296,
116:      ATTACH = 297,
117:      ATTRIBUTE = 298,
118:      AUTHORIZATION = 299,
119:      BACKWARD = 300,
120:      BEFORE = 301,
121:      BEGIN_P = 302,
122:      BETWEEN = 303,
123:      BIGINT = 304,
124:      BINARY = 305,
125:      BIT = 306,
126:      BOOLEAN_P = 307,
127:      BOTH = 308,
128:      BY = 309,
129:      CACHE = 310,
130:      CALL_P = 311,
131:      CALLED = 312,
132:      CASCADE = 313,
133:      CASCADED = 314,
134:      CASE = 315,
135:      CAST = 316,
136:      CATALOG_P = 317,
137:      CHAIN = 318,
138:      CHAR_P = 319,
139:      CHARACTER = 320,
140:      CHARACTERISTICS = 321,
141:      CHECK_P = 322,
142:      CHECKPOINT = 323,
143:      CLASS = 324,
144:      CLOSE = 325,
145:      CLUSTER = 326,
146:      COALESCE = 327,
147:      COLLATE = 328,
148:      COLLATION = 329,
149:      COLUMN = 330,
150:      COLUMNS = 331,
151:      COMMENT = 332,
152:      COMMENTS = 333,
153:      COMMIT = 334,
154:      COMMITTED = 335,
155:      CONCURRENTLY = 336,
156:      CONFIGURATION = 337,
157:      CONFLICT = 338,
158:      CONNECTION = 339,
159:      CONSTRAINT = 340,
160:      CONSTRAINTS = 341,
161:      CONTENT_P = 342,
162:      CONTINUE_P = 343,
163:      CONVERSION_P = 344,
164:      COPY = 345,
165:      COST = 346,
166:      CREATE_P = 347,
167:      CROSS = 348,
168:      CSV = 349,
169:      CUBE = 350,
170:      CURRENT_P = 351,
171:      CURRENT_CATALOG = 352,
172:      CURRENT_DATE = 353,
173:      CURRENT_ROLE = 354,
174:      CURRENT_SCHEMA = 355,
175:      CURRENT_TIME = 356,
176:      CURRENT_TIMESTAMP = 357,
177:      CURRENT_USER = 358,
178:      CURSOR = 359,
179:      CYCLE = 360,
180:      DATA_P = 361,
181:      DATABASE = 362,
182:      DAY_P = 363,
183:      DAYS_P = 364,
184:      DEALLOCATE = 365,
185:      DEC = 366,
186:      DECIMAL_P = 367,
187:      DECLARE = 368,
188:      DEFAULT = 369,
189:      DEFAULTS = 370,
190:      DEFERRABLE = 371,
191:      DEFERRED = 372,
192:      DEFINER = 373,
193:      DELETE_P = 374,
194:      DELIMITER = 375,
195:      DELIMITERS = 376,
196:      DEPENDS = 377,
197:      DESC_P = 378,
198:      DESCRIBE = 379,
199:      DETACH = 380,
200:      DICTIONARY = 381,
201:      DISABLE_P = 382,
202:      DISCARD = 383,
203:      DISTINCT = 384,
204:      DO = 385,
205:      DOCUMENT_P = 386,
206:      DOMAIN_P = 387,
207:      DOUBLE_P = 388,
208:      DROP = 389,
209:      EACH = 390,
210:      ELSE = 391,
211:      ENABLE_P = 392,
212:      ENCODING = 393,
213:      ENCRYPTED = 394,
214:      END_P = 395,
215:      ENUM_P = 396,
216:      ESCAPE = 397,
217:      EVENT = 398,
218:      EXCEPT = 399,
219:      EXCLUDE = 400,
220:      EXCLUDING = 401,
221:      EXCLUSIVE = 402,
222:      EXECUTE = 403,
223:      EXISTS = 404,
224:      EXPLAIN = 405,
225:      EXPORT_P = 406,
226:      EXTENSION = 407,
227:      EXTERNAL = 408,
228:      EXTRACT = 409,
229:      FALSE_P = 410,
230:      FAMILY = 411,
231:      FETCH = 412,
232:      FILTER = 413,
233:      FIRST_P = 414,
234:      FLOAT_P = 415,
235:      FOLLOWING = 416,
236:      FOR = 417,
237:      FORCE = 418,
238:      FOREIGN = 419,
239:      FORWARD = 420,
240:      FREEZE = 421,
241:      FROM = 422,
242:      FULL = 423,
243:      FUNCTION = 424,
244:      FUNCTIONS = 425,
245:      GENERATED = 426,
246:      GLOB = 427,
247:      GLOBAL = 428,
248:      GRANT = 429,
249:      GRANTED = 430,
250:      GROUP_P = 431,
251:      GROUPING = 432,
252:      HANDLER = 433,
253:      HAVING = 434,
254:      HEADER_P = 435,
255:      HOLD = 436,
256:      HOUR_P = 437,
257:      HOURS_P = 438,
258:      IDENTITY_P = 439,
259:      IF_P = 440,
260:      ILIKE = 441,
261:      IMMEDIATE = 442,
262:      IMMUTABLE = 443,
263:      IMPLICIT_P = 444,
264:      IMPORT_P = 445,
265:      IN_P = 446,
266:      INCLUDING = 447,
267:      INCREMENT = 448,
268:      INDEX = 449,
269:      INDEXES = 450,
270:      INHERIT = 451,
271:      INHERITS = 452,
272:      INITIALLY = 453,
273:      INLINE_P = 454,
274:      INNER_P = 455,
275:      INOUT = 456,
276:      INPUT_P = 457,
277:      INSENSITIVE = 458,
278:      INSERT = 459,
279:      INSTEAD = 460,
280:      INT_P = 461,
281:      INTEGER = 462,
282:      INTERSECT = 463,
283:      INTERVAL = 464,
284:      INTO = 465,
285:      INVOKER = 466,
286:      IS = 467,
287:      ISNULL = 468,
288:      ISOLATION = 469,
289:      JOIN = 470,
290:      KEY = 471,
291:      LABEL = 472,
292:      LANGUAGE = 473,
293:      LARGE_P = 474,
294:      LAST_P = 475,
295:      LATERAL_P = 476,
296:      LEADING = 477,
297:      LEAKPROOF = 478,
298:      LEFT = 479,
299:      LEVEL = 480,
300:      LIKE = 481,
301:      LIMIT = 482,
302:      LISTEN = 483,
303:      LOAD = 484,
304:      LOCAL = 485,
305:      LOCALTIME = 486,
306:      LOCALTIMESTAMP = 487,
307:      LOCATION = 488,
308:      LOCK_P = 489,
309:      LOCKED = 490,
310:      LOGGED = 491,
311:      MACRO = 492,
312:      MAP = 493,
313:      MAPPING = 494,
314:      MATCH = 495,
315:      MATERIALIZED = 496,
316:      MAXVALUE = 497,
317:      METHOD = 498,
318:      MICROSECOND_P = 499,
319:      MICROSECONDS_P = 500,
320:      MILLISECOND_P = 501,
321:      MILLISECONDS_P = 502,
322:      MINUTE_P = 503,
323:      MINUTES_P = 504,
324:      MINVALUE = 505,
325:      MODE = 506,
326:      MONTH_P = 507,
327:      MONTHS_P = 508,
328:      MOVE = 509,
329:      NAME_P = 510,
330:      NAMES = 511,
331:      NATIONAL = 512,
332:      NATURAL = 513,
333:      NCHAR = 514,
334:      NEW = 515,
335:      NEXT = 516,
336:      NO = 517,
337:      NONE = 518,
338:      NOT = 519,
339:      NOTHING = 520,
340:      NOTIFY = 521,
341:      NOTNULL = 522,
342:      NOWAIT = 523,
343:      NULL_P = 524,
344:      NULLIF = 525,
345:      NULLS_P = 526,
346:      NUMERIC = 527,
347:      OBJECT_P = 528,
348:      OF = 529,
349:      OFF = 530,
350:      OFFSET = 531,
351:      OIDS = 532,
352:      OLD = 533,
353:      ON = 534,
354:      ONLY = 535,
355:      OPERATOR = 536,
356:      OPTION = 537,
357:      OPTIONS = 538,
358:      OR = 539,
359:      ORDER = 540,
360:      ORDINALITY = 541,
361:      OUT_P = 542,
362:      OUTER_P = 543,
363:      OVER = 544,
364:      OVERLAPS = 545,
365:      OVERLAY = 546,
366:      OVERRIDING = 547,
367:      OWNED = 548,
368:      OWNER = 549,
369:      PARALLEL = 550,
370:      PARSER = 551,
371:      PARTIAL = 552,
372:      PARTITION = 553,
373:      PASSING = 554,
374:      PASSWORD = 555,
375:      PERCENT = 556,
376:      PLACING = 557,
377:      PLANS = 558,
378:      POLICY = 559,
379:      POSITION = 560,
380:      PRAGMA_P = 561,
381:      PRECEDING = 562,
382:      PRECISION = 563,
383:      PREPARE = 564,
384:      PREPARED = 565,
385:      PRESERVE = 566,
386:      PRIMARY = 567,
387:      PRIOR = 568,
388:      PRIVILEGES = 569,
389:      PROCEDURAL = 570,
390:      PROCEDURE = 571,
391:      PROGRAM = 572,
392:      PUBLICATION = 573,
393:      QUOTE = 574,
394:      RANGE = 575,
395:      READ_P = 576,
396:      REAL = 577,
397:      REASSIGN = 578,
398:      RECHECK = 579,
399:      RECURSIVE = 580,
400:      REF = 581,
401:      REFERENCES = 582,
402:      REFERENCING = 583,
403:      REFRESH = 584,
404:      REINDEX = 585,
405:      RELATIVE_P = 586,
406:      RELEASE = 587,
407:      RENAME = 588,
408:      REPEATABLE = 589,
409:      REPLACE = 590,
410:      REPLICA = 591,
411:      RESET = 592,
412:      RESTART = 593,
413:      RESTRICT = 594,
414:      RETURNING = 595,
415:      RETURNS = 596,
416:      REVOKE = 597,
417:      RIGHT = 598,
418:      ROLE = 599,
419:      ROLLBACK = 600,
420:      ROLLUP = 601,
421:      ROW = 602,
422:      ROWS = 603,
423:      RULE = 604,
424:      SAMPLE = 605,
425:      SAVEPOINT = 606,
426:      SCHEMA = 607,
427:      SCHEMAS = 608,
428:      SCROLL = 609,
429:      SEARCH = 610,
430:      SECOND_P = 611,
431:      SECONDS_P = 612,
432:      SECURITY = 613,
433:      SELECT = 614,
434:      SEQUENCE = 615,
435:      SEQUENCES = 616,
436:      SERIALIZABLE = 617,
437:      SERVER = 618,
438:      SESSION = 619,
439:      SESSION_USER = 620,
440:      SET = 621,
441:      SETOF = 622,
442:      SETS = 623,
443:      SHARE = 624,
444:      SHOW = 625,
445:      SIMILAR = 626,
446:      SIMPLE = 627,
447:      SKIP = 628,
448:      SMALLINT = 629,
449:      SNAPSHOT = 630,
450:      SOME = 631,
451:      SQL_P = 632,
452:      STABLE = 633,
453:      STANDALONE_P = 634,
454:      START = 635,
455:      STATEMENT = 636,
456:      STATISTICS = 637,
457:      STDIN = 638,
458:      STDOUT = 639,
459:      STORAGE = 640,
460:      STRICT_P = 641,
461:      STRIP_P = 642,
462:      STRUCT = 643,
463:      SUBSCRIPTION = 644,
464:      SUBSTRING = 645,
465:      SUMMARIZE = 646,
466:      SYMMETRIC = 647,
467:      SYSID = 648,
468:      SYSTEM_P = 649,
469:      TABLE = 650,
470:      TABLES = 651,
471:      TABLESAMPLE = 652,
472:      TABLESPACE = 653,
473:      TEMP = 654,
474:      TEMPLATE = 655,
475:      TEMPORARY = 656,
476:      TEXT_P = 657,
477:      THEN = 658,
478:      TIME = 659,
479:      TIMESTAMP = 660,
480:      TO = 661,
481:      TRAILING = 662,
482:      TRANSACTION = 663,
483:      TRANSFORM = 664,
484:      TREAT = 665,
485:      TRIGGER = 666,
486:      TRIM = 667,
487:      TRUE_P = 668,
488:      TRUNCATE = 669,
489:      TRUSTED = 670,
490:      TRY_CAST = 671,
491:      TYPE_P = 672,
492:      TYPES_P = 673,
493:      UNBOUNDED = 674,
494:      UNCOMMITTED = 675,
495:      UNENCRYPTED = 676,
496:      UNION = 677,
497:      UNIQUE = 678,
498:      UNKNOWN = 679,
499:      UNLISTEN = 680,
500:      UNLOGGED = 681,
501:      UNTIL = 682,
502:      UPDATE = 683,
503:      USER = 684,
504:      USING = 685,
505:      VACUUM = 686,
506:      VALID = 687,
507:      VALIDATE = 688,
508:      VALIDATOR = 689,
509:      VALUE_P = 690,
510:      VALUES = 691,
511:      VARCHAR = 692,
512:      VARIADIC = 693,
513:      VARYING = 694,
514:      VERBOSE = 695,
515:      VERSION_P = 696,
516:      VIEW = 697,
517:      VIEWS = 698,
518:      VOLATILE = 699,
519:      WHEN = 700,
520:      WHERE = 701,
521:      WHITESPACE_P = 702,
522:      WINDOW = 703,
523:      WITH = 704,
524:      WITHIN = 705,
525:      WITHOUT = 706,
526:      WORK = 707,
527:      WRAPPER = 708,
528:      WRITE_P = 709,
529:      XML_P = 710,
530:      XMLATTRIBUTES = 711,
531:      XMLCONCAT = 712,
532:      XMLELEMENT = 713,
533:      XMLEXISTS = 714,
534:      XMLFOREST = 715,
535:      XMLNAMESPACES = 716,
536:      XMLPARSE = 717,
537:      XMLPI = 718,
538:      XMLROOT = 719,
539:      XMLSERIALIZE = 720,
540:      XMLTABLE = 721,
541:      YEAR_P = 722,
542:      YEARS_P = 723,
543:      YES_P = 724,
544:      ZONE = 725,
545:      NOT_LA = 726,
546:      NULLS_LA = 727,
547:      WITH_LA = 728,
548:      POSTFIXOP = 729,
549:      UMINUS = 730
550:    };
551: #endif
552: /* Tokens.  */
553: #define IDENT 258
554: #define FCONST 259
555: #define SCONST 260
556: #define BCONST 261
557: #define XCONST 262
558: #define Op 263
559: #define ICONST 264
560: #define PARAM 265
561: #define TYPECAST 266
562: #define DOT_DOT 267
563: #define COLON_EQUALS 268
564: #define EQUALS_GREATER 269
565: #define LAMBDA_ARROW 270
566: #define LESS_EQUALS 271
567: #define GREATER_EQUALS 272
568: #define NOT_EQUALS 273
569: #define ABORT_P 274
570: #define ABSOLUTE_P 275
571: #define ACCESS 276
572: #define ACTION 277
573: #define ADD_P 278
574: #define ADMIN 279
575: #define AFTER 280
576: #define AGGREGATE 281
577: #define ALL 282
578: #define ALSO 283
579: #define ALTER 284
580: #define ALWAYS 285
581: #define ANALYSE 286
582: #define ANALYZE 287
583: #define AND 288
584: #define ANY 289
585: #define ARRAY 290
586: #define AS 291
587: #define ASC_P 292
588: #define ASSERTION 293
589: #define ASSIGNMENT 294
590: #define ASYMMETRIC 295
591: #define AT 296
592: #define ATTACH 297
593: #define ATTRIBUTE 298
594: #define AUTHORIZATION 299
595: #define BACKWARD 300
596: #define BEFORE 301
597: #define BEGIN_P 302
598: #define BETWEEN 303
599: #define BIGINT 304
600: #define BINARY 305
601: #define BIT 306
602: #define BOOLEAN_P 307
603: #define BOTH 308
604: #define BY 309
605: #define CACHE 310
606: #define CALL_P 311
607: #define CALLED 312
608: #define CASCADE 313
609: #define CASCADED 314
610: #define CASE 315
611: #define CAST 316
612: #define CATALOG_P 317
613: #define CHAIN 318
614: #define CHAR_P 319
615: #define CHARACTER 320
616: #define CHARACTERISTICS 321
617: #define CHECK_P 322
618: #define CHECKPOINT 323
619: #define CLASS 324
620: #define CLOSE 325
621: #define CLUSTER 326
622: #define COALESCE 327
623: #define COLLATE 328
624: #define COLLATION 329
625: #define COLUMN 330
626: #define COLUMNS 331
627: #define COMMENT 332
628: #define COMMENTS 333
629: #define COMMIT 334
630: #define COMMITTED 335
631: #define CONCURRENTLY 336
632: #define CONFIGURATION 337
633: #define CONFLICT 338
634: #define CONNECTION 339
635: #define CONSTRAINT 340
636: #define CONSTRAINTS 341
637: #define CONTENT_P 342
638: #define CONTINUE_P 343
639: #define CONVERSION_P 344
640: #define COPY 345
641: #define COST 346
642: #define CREATE_P 347
643: #define CROSS 348
644: #define CSV 349
645: #define CUBE 350
646: #define CURRENT_P 351
647: #define CURRENT_CATALOG 352
648: #define CURRENT_DATE 353
649: #define CURRENT_ROLE 354
650: #define CURRENT_SCHEMA 355
651: #define CURRENT_TIME 356
652: #define CURRENT_TIMESTAMP 357
653: #define CURRENT_USER 358
654: #define CURSOR 359
655: #define CYCLE 360
656: #define DATA_P 361
657: #define DATABASE 362
658: #define DAY_P 363
659: #define DAYS_P 364
660: #define DEALLOCATE 365
661: #define DEC 366
662: #define DECIMAL_P 367
663: #define DECLARE 368
664: #define DEFAULT 369
665: #define DEFAULTS 370
666: #define DEFERRABLE 371
667: #define DEFERRED 372
668: #define DEFINER 373
669: #define DELETE_P 374
670: #define DELIMITER 375
671: #define DELIMITERS 376
672: #define DEPENDS 377
673: #define DESC_P 378
674: #define DESCRIBE 379
675: #define DETACH 380
676: #define DICTIONARY 381
677: #define DISABLE_P 382
678: #define DISCARD 383
679: #define DISTINCT 384
680: #define DO 385
681: #define DOCUMENT_P 386
682: #define DOMAIN_P 387
683: #define DOUBLE_P 388
684: #define DROP 389
685: #define EACH 390
686: #define ELSE 391
687: #define ENABLE_P 392
688: #define ENCODING 393
689: #define ENCRYPTED 394
690: #define END_P 395
691: #define ENUM_P 396
692: #define ESCAPE 397
693: #define EVENT 398
694: #define EXCEPT 399
695: #define EXCLUDE 400
696: #define EXCLUDING 401
697: #define EXCLUSIVE 402
698: #define EXECUTE 403
699: #define EXISTS 404
700: #define EXPLAIN 405
701: #define EXPORT_P 406
702: #define EXTENSION 407
703: #define EXTERNAL 408
704: #define EXTRACT 409
705: #define FALSE_P 410
706: #define FAMILY 411
707: #define FETCH 412
708: #define FILTER 413
709: #define FIRST_P 414
710: #define FLOAT_P 415
711: #define FOLLOWING 416
712: #define FOR 417
713: #define FORCE 418
714: #define FOREIGN 419
715: #define FORWARD 420
716: #define FREEZE 421
717: #define FROM 422
718: #define FULL 423
719: #define FUNCTION 424
720: #define FUNCTIONS 425
721: #define GENERATED 426
722: #define GLOB 427
723: #define GLOBAL 428
724: #define GRANT 429
725: #define GRANTED 430
726: #define GROUP_P 431
727: #define GROUPING 432
728: #define HANDLER 433
729: #define HAVING 434
730: #define HEADER_P 435
731: #define HOLD 436
732: #define HOUR_P 437
733: #define HOURS_P 438
734: #define IDENTITY_P 439
735: #define IF_P 440
736: #define ILIKE 441
737: #define IMMEDIATE 442
738: #define IMMUTABLE 443
739: #define IMPLICIT_P 444
740: #define IMPORT_P 445
741: #define IN_P 446
742: #define INCLUDING 447
743: #define INCREMENT 448
744: #define INDEX 449
745: #define INDEXES 450
746: #define INHERIT 451
747: #define INHERITS 452
748: #define INITIALLY 453
749: #define INLINE_P 454
750: #define INNER_P 455
751: #define INOUT 456
752: #define INPUT_P 457
753: #define INSENSITIVE 458
754: #define INSERT 459
755: #define INSTEAD 460
756: #define INT_P 461
757: #define INTEGER 462
758: #define INTERSECT 463
759: #define INTERVAL 464
760: #define INTO 465
761: #define INVOKER 466
762: #define IS 467
763: #define ISNULL 468
764: #define ISOLATION 469
765: #define JOIN 470
766: #define KEY 471
767: #define LABEL 472
768: #define LANGUAGE 473
769: #define LARGE_P 474
770: #define LAST_P 475
771: #define LATERAL_P 476
772: #define LEADING 477
773: #define LEAKPROOF 478
774: #define LEFT 479
775: #define LEVEL 480
776: #define LIKE 481
777: #define LIMIT 482
778: #define LISTEN 483
779: #define LOAD 484
780: #define LOCAL 485
781: #define LOCALTIME 486
782: #define LOCALTIMESTAMP 487
783: #define LOCATION 488
784: #define LOCK_P 489
785: #define LOCKED 490
786: #define LOGGED 491
787: #define MACRO 492
788: #define MAP 493
789: #define MAPPING 494
790: #define MATCH 495
791: #define MATERIALIZED 496
792: #define MAXVALUE 497
793: #define METHOD 498
794: #define MICROSECOND_P 499
795: #define MICROSECONDS_P 500
796: #define MILLISECOND_P 501
797: #define MILLISECONDS_P 502
798: #define MINUTE_P 503
799: #define MINUTES_P 504
800: #define MINVALUE 505
801: #define MODE 506
802: #define MONTH_P 507
803: #define MONTHS_P 508
804: #define MOVE 509
805: #define NAME_P 510
806: #define NAMES 511
807: #define NATIONAL 512
808: #define NATURAL 513
809: #define NCHAR 514
810: #define NEW 515
811: #define NEXT 516
812: #define NO 517
813: #define NONE 518
814: #define NOT 519
815: #define NOTHING 520
816: #define NOTIFY 521
817: #define NOTNULL 522
818: #define NOWAIT 523
819: #define NULL_P 524
820: #define NULLIF 525
821: #define NULLS_P 526
822: #define NUMERIC 527
823: #define OBJECT_P 528
824: #define OF 529
825: #define OFF 530
826: #define OFFSET 531
827: #define OIDS 532
828: #define OLD 533
829: #define ON 534
830: #define ONLY 535
831: #define OPERATOR 536
832: #define OPTION 537
833: #define OPTIONS 538
834: #define OR 539
835: #define ORDER 540
836: #define ORDINALITY 541
837: #define OUT_P 542
838: #define OUTER_P 543
839: #define OVER 544
840: #define OVERLAPS 545
841: #define OVERLAY 546
842: #define OVERRIDING 547
843: #define OWNED 548
844: #define OWNER 549
845: #define PARALLEL 550
846: #define PARSER 551
847: #define PARTIAL 552
848: #define PARTITION 553
849: #define PASSING 554
850: #define PASSWORD 555
851: #define PERCENT 556
852: #define PLACING 557
853: #define PLANS 558
854: #define POLICY 559
855: #define POSITION 560
856: #define PRAGMA_P 561
857: #define PRECEDING 562
858: #define PRECISION 563
859: #define PREPARE 564
860: #define PREPARED 565
861: #define PRESERVE 566
862: #define PRIMARY 567
863: #define PRIOR 568
864: #define PRIVILEGES 569
865: #define PROCEDURAL 570
866: #define PROCEDURE 571
867: #define PROGRAM 572
868: #define PUBLICATION 573
869: #define QUOTE 574
870: #define RANGE 575
871: #define READ_P 576
872: #define REAL 577
873: #define REASSIGN 578
874: #define RECHECK 579
875: #define RECURSIVE 580
876: #define REF 581
877: #define REFERENCES 582
878: #define REFERENCING 583
879: #define REFRESH 584
880: #define REINDEX 585
881: #define RELATIVE_P 586
882: #define RELEASE 587
883: #define RENAME 588
884: #define REPEATABLE 589
885: #define REPLACE 590
886: #define REPLICA 591
887: #define RESET 592
888: #define RESTART 593
889: #define RESTRICT 594
890: #define RETURNING 595
891: #define RETURNS 596
892: #define REVOKE 597
893: #define RIGHT 598
894: #define ROLE 599
895: #define ROLLBACK 600
896: #define ROLLUP 601
897: #define ROW 602
898: #define ROWS 603
899: #define RULE 604
900: #define SAMPLE 605
901: #define SAVEPOINT 606
902: #define SCHEMA 607
903: #define SCHEMAS 608
904: #define SCROLL 609
905: #define SEARCH 610
906: #define SECOND_P 611
907: #define SECONDS_P 612
908: #define SECURITY 613
909: #define SELECT 614
910: #define SEQUENCE 615
911: #define SEQUENCES 616
912: #define SERIALIZABLE 617
913: #define SERVER 618
914: #define SESSION 619
915: #define SESSION_USER 620
916: #define SET 621
917: #define SETOF 622
918: #define SETS 623
919: #define SHARE 624
920: #define SHOW 625
921: #define SIMILAR 626
922: #define SIMPLE 627
923: #define SKIP 628
924: #define SMALLINT 629
925: #define SNAPSHOT 630
926: #define SOME 631
927: #define SQL_P 632
928: #define STABLE 633
929: #define STANDALONE_P 634
930: #define START 635
931: #define STATEMENT 636
932: #define STATISTICS 637
933: #define STDIN 638
934: #define STDOUT 639
935: #define STORAGE 640
936: #define STRICT_P 641
937: #define STRIP_P 642
938: #define STRUCT 643
939: #define SUBSCRIPTION 644
940: #define SUBSTRING 645
941: #define SUMMARIZE 646
942: #define SYMMETRIC 647
943: #define SYSID 648
944: #define SYSTEM_P 649
945: #define TABLE 650
946: #define TABLES 651
947: #define TABLESAMPLE 652
948: #define TABLESPACE 653
949: #define TEMP 654
950: #define TEMPLATE 655
951: #define TEMPORARY 656
952: #define TEXT_P 657
953: #define THEN 658
954: #define TIME 659
955: #define TIMESTAMP 660
956: #define TO 661
957: #define TRAILING 662
958: #define TRANSACTION 663
959: #define TRANSFORM 664
960: #define TREAT 665
961: #define TRIGGER 666
962: #define TRIM 667
963: #define TRUE_P 668
964: #define TRUNCATE 669
965: #define TRUSTED 670
966: #define TRY_CAST 671
967: #define TYPE_P 672
968: #define TYPES_P 673
969: #define UNBOUNDED 674
970: #define UNCOMMITTED 675
971: #define UNENCRYPTED 676
972: #define UNION 677
973: #define UNIQUE 678
974: #define UNKNOWN 679
975: #define UNLISTEN 680
976: #define UNLOGGED 681
977: #define UNTIL 682
978: #define UPDATE 683
979: #define USER 684
980: #define USING 685
981: #define VACUUM 686
982: #define VALID 687
983: #define VALIDATE 688
984: #define VALIDATOR 689
985: #define VALUE_P 690
986: #define VALUES 691
987: #define VARCHAR 692
988: #define VARIADIC 693
989: #define VARYING 694
990: #define VERBOSE 695
991: #define VERSION_P 696
992: #define VIEW 697
993: #define VIEWS 698
994: #define VOLATILE 699
995: #define WHEN 700
996: #define WHERE 701
997: #define WHITESPACE_P 702
998: #define WINDOW 703
999: #define WITH 704
1000: #define WITHIN 705
1001: #define WITHOUT 706
1002: #define WORK 707
1003: #define WRAPPER 708
1004: #define WRITE_P 709
1005: #define XML_P 710
1006: #define XMLATTRIBUTES 711
1007: #define XMLCONCAT 712
1008: #define XMLELEMENT 713
1009: #define XMLEXISTS 714
1010: #define XMLFOREST 715
1011: #define XMLNAMESPACES 716
1012: #define XMLPARSE 717
1013: #define XMLPI 718
1014: #define XMLROOT 719
1015: #define XMLSERIALIZE 720
1016: #define XMLTABLE 721
1017: #define YEAR_P 722
1018: #define YEARS_P 723
1019: #define YES_P 724
1020: #define ZONE 725
1021: #define NOT_LA 726
1022: #define NULLS_LA 727
1023: #define WITH_LA 728
1024: #define POSTFIXOP 729
1025: #define UMINUS 730
1026: 
1027: 
1028: 
1029: 
1030: /* Copy the first part of user declarations.  */
1031: #line 1 "third_party/libpg_query/grammar/grammar.y.tmp"
1032: 
1033: #line 1 "third_party/libpg_query/grammar/grammar.hpp"
1034: /*#define YYDEBUG 1*/
1035: /*-------------------------------------------------------------------------
1036:  *
1037:  * gram.y
1038:  *	  POSTGRESQL BISON rules/actions
1039:  *
1040:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
1041:  * Portions Copyright (c) 1994, Regents of the University of California
1042:  *
1043:  *
1044:  * IDENTIFICATION
1045:  *	  src/backend/parser/gram.y
1046:  *
1047:  * HISTORY
1048:  *	  AUTHOR			DATE			MAJOR EVENT
1049:  *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
1050:  *	  Andrew Yu			Oct, 1994		lispy code conversion
1051:  *
1052:  * NOTES
1053:  *	  CAPITALS are used to represent terminal symbols.
1054:  *	  non-capitals are used to represent non-terminals.
1055:  *
1056:  *	  In general, nothing in this file should initiate database accesses
1057:  *	  nor depend on changeable state (such as SET variables).  If you do
1058:  *	  database accesses, your code will fail when we have aborted the
1059:  *	  current transaction and are just parsing commands to find the next
1060:  *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
1061:  *	  will do the wrong thing in multi-query strings like this:
1062:  *			SET constraint_exclusion TO off; SELECT * FROM foo;
1063:  *	  because the entire string is parsed by gram.y before the SET gets
1064:  *	  executed.  Anything that depends on the database or changeable state
1065:  *	  should be handled during parse analysis so that it happens at the
1066:  *	  right time not the wrong time.
1067:  *
1068:  * WARNINGS
1069:  *	  If you use a list, make sure the datum is a node so that the printing
1070:  *	  routines work.
1071:  *
1072:  *	  Sometimes we assign constants to makeStrings. Make sure we don't free
1073:  *	  those.
1074:  *
1075:  *-------------------------------------------------------------------------
1076:  */
1077: #include "pg_functions.hpp"
1078: #include <string.h>
1079: 
1080: #include <ctype.h>
1081: #include <limits.h>
1082: 
1083: #include "nodes/makefuncs.hpp"
1084: #include "nodes/nodeFuncs.hpp"
1085: #include "parser/gramparse.hpp"
1086: #include "parser/parser.hpp"
1087: #include "utils/datetime.hpp"
1088: 
1089: namespace duckdb_libpgquery {
1090: #define DEFAULT_SCHEMA "main"
1091: 
1092: /*
1093:  * Location tracking support --- simpler than bison's default, since we only
1094:  * want to track the start position not the end position of each nonterminal.
1095:  */
1096: #define YYLLOC_DEFAULT(Current, Rhs, N) \
1097: 	do { \
1098: 		if ((N) > 0) \
1099: 			(Current) = (Rhs)[1]; \
1100: 		else \
1101: 			(Current) = (-1); \
1102: 	} while (0)
1103: 
1104: /*
1105:  * The above macro assigns -1 (unknown) as the parse location of any
1106:  * nonterminal that was reduced from an empty rule, or whose leftmost
1107:  * component was reduced from an empty rule.  This is problematic
1108:  * for nonterminals defined like
1109:  *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
1110:  * because we'll set -1 as the location during the first reduction and then
1111:  * copy it during each subsequent reduction, leaving us with -1 for the
1112:  * location even when the list is not empty.  To fix that, do this in the
1113:  * action for the nonempty rule(s):
1114:  *		if (@$ < 0) @$ = @2;
1115:  * (Although we have many nonterminals that follow this pattern, we only
1116:  * bother with fixing @$ like this when the nonterminal's parse location
1117:  * is actually referenced in some rule.)
1118:  *
1119:  * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
1120:  * locations until it's found one that's not -1.  Then we'd get a correct
1121:  * location for any nonterminal that isn't entirely empty.  But this way
1122:  * would add overhead to every rule reduction, and so far there's not been
1123:  * a compelling reason to pay that overhead.
1124:  */
1125: 
1126: /*
1127:  * Bison doesn't allocate anything that needs to live across parser calls,
1128:  * so we can easily have it use palloc instead of malloc.  This prevents
1129:  * memory leaks if we error out during parsing.  Note this only works with
1130:  * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
1131:  * if possible, so there's not really much problem anyhow, at least if
1132:  * you're building with gcc.
1133:  */
1134: #define YYMALLOC palloc
1135: #define YYFREE   pfree
1136: #define YYINITDEPTH 1000
1137: 
1138: /* yields an integer bitmask of these flags: */
1139: #define CAS_NOT_DEFERRABLE			0x01
1140: #define CAS_DEFERRABLE				0x02
1141: #define CAS_INITIALLY_IMMEDIATE		0x04
1142: #define CAS_INITIALLY_DEFERRED		0x08
1143: #define CAS_NOT_VALID				0x10
1144: #define CAS_NO_INHERIT				0x20
1145: 
1146: 
1147: #define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
1148: #define parser_errposition(pos)  scanner_errposition(pos, yyscanner)
1149: 
1150: static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
1151: 						 const char *msg);
1152: static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
1153: static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
1154: static PGNode *makeColumnRef(char *colname, PGList *indirection,
1155: 						   int location, core_yyscan_t yyscanner);
1156: static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
1157: static PGNode *makeStringConst(char *str, int location);
1158: static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
1159: static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
1160: static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
1161: static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
1162: static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
1163: static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
1164: static PGNode *makeIntConst(int val, int location);
1165: static PGNode *makeFloatConst(char *str, int location);
1166: static PGNode *makeBitStringConst(char *str, int location);
1167: static PGNode *makeNullAConst(int location);
1168: static PGNode *makeAConst(PGValue *v, int location);
1169: static PGNode *makeBoolAConst(bool state, int location);
1170: static PGNode *makeParamRef(int number, int location);
1171: static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
1172: static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
1173: static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
1174: static void insertSelectOptions(PGSelectStmt *stmt,
1175: 								PGList *sortClause, PGList *lockingClause,
1176: 								PGNode *limitOffset, PGNode *limitCount,
1177: 								PGWithClause *withClause,
1178: 								core_yyscan_t yyscanner);
1179: static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
1180: static PGNode *doNegate(PGNode *n, int location);
1181: static void doNegateFloat(PGValue *v);
1182: static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
1183: static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
1184: static PGNode *makeNotExpr(PGNode *expr, int location);
1185: static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
1186: 								  int location);
1187: static void SplitColQualList(PGList *qualList,
1188: 							 PGList **constraintList, PGCollateClause **collClause,
1189: 							 core_yyscan_t yyscanner);
1190: static void processCASbits(int cas_bits, int location, const char *constrType,
1191: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
1192: 			   bool *no_inherit, core_yyscan_t yyscanner);
1193: static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
1194: 
1195: 
1196: 
1197: /* Enabling traces.  */
1198: #ifndef YYDEBUG
1199: # define YYDEBUG 0
1200: #endif
1201: 
1202: /* Enabling verbose error messages.  */
1203: #ifdef YYERROR_VERBOSE
1204: # undef YYERROR_VERBOSE
1205: # define YYERROR_VERBOSE 1
1206: #else
1207: # define YYERROR_VERBOSE 0
1208: #endif
1209: 
1210: /* Enabling the token table.  */
1211: #ifndef YYTOKEN_TABLE
1212: # define YYTOKEN_TABLE 0
1213: #endif
1214: 
1215: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
1216: typedef union YYSTYPE
1217: #line 14 "third_party/libpg_query/grammar/grammar.y"
1218: {
1219: 	core_YYSTYPE		core_yystype;
1220: 	/* these fields must match core_YYSTYPE: */
1221: 	int					ival;
1222: 	char				*str;
1223: 	const char			*keyword;
1224: 	const char          *conststr;
1225: 
1226: 	char				chr;
1227: 	bool				boolean;
1228: 	PGJoinType			jtype;
1229: 	PGDropBehavior		dbehavior;
1230: 	PGOnCommitAction		oncommit;
1231: 	PGList				*list;
1232: 	PGNode				*node;
1233: 	PGValue				*value;
1234: 	PGObjectType			objtype;
1235: 	PGTypeName			*typnam;
1236: 	PGObjectWithArgs		*objwithargs;
1237: 	PGDefElem				*defelt;
1238: 	PGSortBy				*sortby;
1239: 	PGWindowDef			*windef;
1240: 	PGJoinExpr			*jexpr;
1241: 	PGIndexElem			*ielem;
1242: 	PGAlias				*alias;
1243: 	PGRangeVar			*range;
1244: 	PGIntoClause			*into;
1245: 	PGWithClause			*with;
1246: 	PGInferClause			*infer;
1247: 	PGOnConflictClause	*onconflict;
1248: 	PGAIndices			*aind;
1249: 	PGResTarget			*target;
1250: 	PGInsertStmt			*istmt;
1251: 	PGVariableSetStmt		*vsetstmt;
1252: 	PGOverridingKind       override;
1253: 	PGSortByDir            sortorder;
1254: 	PGSortByNulls          nullorder;
1255: 	PGLockClauseStrength lockstrength;
1256: 	PGLockWaitPolicy lockwaitpolicy;
1257: 	PGSubLinkType subquerytype;
1258: 	PGViewCheckOption viewcheckoption;
1259: }
1260: /* Line 193 of yacc.c.  */
1261: #line 1262 "third_party/libpg_query/grammar/grammar_out.cpp"
1262: 	YYSTYPE;
1263: # define yystype YYSTYPE /* obsolescent; will be withdrawn */
1264: # define YYSTYPE_IS_DECLARED 1
1265: # define YYSTYPE_IS_TRIVIAL 1
1266: #endif
1267: 
1268: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
1269: typedef struct YYLTYPE
1270: {
1271:   int first_line;
1272:   int first_column;
1273:   int last_line;
1274:   int last_column;
1275: } YYLTYPE;
1276: # define yyltype YYLTYPE /* obsolescent; will be withdrawn */
1277: # define YYLTYPE_IS_DECLARED 1
1278: # define YYLTYPE_IS_TRIVIAL 1
1279: #endif
1280: 
1281: 
1282: /* Copy the second part of user declarations.  */
1283: 
1284: 
1285: /* Line 216 of yacc.c.  */
1286: #line 1287 "third_party/libpg_query/grammar/grammar_out.cpp"
1287: 
1288: #ifdef short
1289: # undef short
1290: #endif
1291: 
1292: #ifdef YYTYPE_UINT8
1293: typedef YYTYPE_UINT8 yytype_uint8;
1294: #else
1295: typedef unsigned char yytype_uint8;
1296: #endif
1297: 
1298: #ifdef YYTYPE_INT8
1299: typedef YYTYPE_INT8 yytype_int8;
1300: #elif (defined __STDC__ || defined __C99__FUNC__ \
1301:      || defined __cplusplus || defined _MSC_VER)
1302: typedef signed char yytype_int8;
1303: #else
1304: typedef short int yytype_int8;
1305: #endif
1306: 
1307: #ifdef YYTYPE_UINT16
1308: typedef YYTYPE_UINT16 yytype_uint16;
1309: #else
1310: typedef unsigned short int yytype_uint16;
1311: #endif
1312: 
1313: #ifdef YYTYPE_INT16
1314: typedef YYTYPE_INT16 yytype_int16;
1315: #else
1316: typedef short int yytype_int16;
1317: #endif
1318: 
1319: #ifndef YYSIZE_T
1320: # ifdef __SIZE_TYPE__
1321: #  define YYSIZE_T __SIZE_TYPE__
1322: # elif defined size_t
1323: #  define YYSIZE_T size_t
1324: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
1325:      || defined __cplusplus || defined _MSC_VER)
1326: #  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
1327: #  define YYSIZE_T size_t
1328: # else
1329: #  define YYSIZE_T unsigned int
1330: # endif
1331: #endif
1332: 
1333: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
1334: 
1335: #ifndef YY_
1336: # if defined YYENABLE_NLS && YYENABLE_NLS
1337: #  if ENABLE_NLS
1338: #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
1339: #   define YY_(msgid) dgettext ("bison-runtime", msgid)
1340: #  endif
1341: # endif
1342: # ifndef YY_
1343: #  define YY_(msgid) msgid
1344: # endif
1345: #endif
1346: 
1347: /* Suppress unused-variable warnings by "using" E.  */
1348: #if ! defined lint || defined __GNUC__
1349: # define YYUSE(e) ((void) (e))
1350: #else
1351: # define YYUSE(e) /* empty */
1352: #endif
1353: 
1354: /* Identity function, used to suppress warnings about constant conditions.  */
1355: #ifndef lint
1356: # define YYID(n) (n)
1357: #else
1358: #if (defined __STDC__ || defined __C99__FUNC__ \
1359:      || defined __cplusplus || defined _MSC_VER)
1360: static int
1361: YYID (int i)
1362: #else
1363: static int
1364: YYID (i)
1365:     int i;
1366: #endif
1367: {
1368:   return i;
1369: }
1370: #endif
1371: 
1372: #if ! defined yyoverflow || YYERROR_VERBOSE
1373: 
1374: /* The parser invokes alloca or malloc; define the necessary symbols.  */
1375: 
1376: # ifdef YYSTACK_USE_ALLOCA
1377: #  if YYSTACK_USE_ALLOCA
1378: #   ifdef __GNUC__
1379: #    define YYSTACK_ALLOC __builtin_alloca
1380: #   elif defined __BUILTIN_VA_ARG_INCR
1381: #    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
1382: #   elif defined _AIX
1383: #    define YYSTACK_ALLOC __alloca
1384: #   elif defined _MSC_VER
1385: #    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
1386: #    define alloca _alloca
1387: #   else
1388: #    define YYSTACK_ALLOC alloca
1389: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1390:      || defined __cplusplus || defined _MSC_VER)
1391: #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1392: #     ifndef _STDLIB_H
1393: #      define _STDLIB_H 1
1394: #     endif
1395: #    endif
1396: #   endif
1397: #  endif
1398: # endif
1399: 
1400: # ifdef YYSTACK_ALLOC
1401:    /* Pacify GCC's `empty if-body' warning.  */
1402: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
1403: #  ifndef YYSTACK_ALLOC_MAXIMUM
1404:     /* The OS might guarantee only one guard page at the bottom of the stack,
1405:        and a page size can be as small as 4096 bytes.  So we cannot safely
1406:        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
1407:        to allow for a few compiler-allocated temporary stack slots.  */
1408: #   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
1409: #  endif
1410: # else
1411: #  define YYSTACK_ALLOC YYMALLOC
1412: #  define YYSTACK_FREE YYFREE
1413: #  ifndef YYSTACK_ALLOC_MAXIMUM
1414: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
1415: #  endif
1416: #  if (defined __cplusplus && ! defined _STDLIB_H \
1417:        && ! ((defined YYMALLOC || defined malloc) \
1418: 	     && (defined YYFREE || defined free)))
1419: #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1420: #   ifndef _STDLIB_H
1421: #    define _STDLIB_H 1
1422: #   endif
1423: #  endif
1424: #  ifndef YYMALLOC
1425: #   define YYMALLOC malloc
1426: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1427:      || defined __cplusplus || defined _MSC_VER)
1428: void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
1429: #   endif
1430: #  endif
1431: #  ifndef YYFREE
1432: #   define YYFREE free
1433: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1434:      || defined __cplusplus || defined _MSC_VER)
1435: void free (void *); /* INFRINGES ON USER NAME SPACE */
1436: #   endif
1437: #  endif
1438: # endif
1439: #endif /* ! defined yyoverflow || YYERROR_VERBOSE */
1440: 
1441: 
1442: #if (! defined yyoverflow \
1443:      && (! defined __cplusplus \
1444: 	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
1445: 	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
1446: 
1447: /* A type that is properly aligned for any stack member.  */
1448: union yyalloc
1449: {
1450:   yytype_int16 yyss;
1451:   YYSTYPE yyvs;
1452:     YYLTYPE yyls;
1453: };
1454: 
1455: /* The size of the maximum gap between one aligned stack and the next.  */
1456: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
1457: 
1458: /* The size of an array large to enough to hold all stacks, each with
1459:    N elements.  */
1460: # define YYSTACK_BYTES(N) \
1461:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
1462:       + 2 * YYSTACK_GAP_MAXIMUM)
1463: 
1464: /* Copy COUNT objects from FROM to TO.  The source and destination do
1465:    not overlap.  */
1466: # ifndef YYCOPY
1467: #  if defined __GNUC__ && 1 < __GNUC__
1468: #   define YYCOPY(To, From, Count) \
1469:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
1470: #  else
1471: #   define YYCOPY(To, From, Count)		\
1472:       do					\
1473: 	{					\
1474: 	  YYSIZE_T yyi;				\
1475: 	  for (yyi = 0; yyi < (Count); yyi++)	\
1476: 	    (To)[yyi] = (From)[yyi];		\
1477: 	}					\
1478:       while (YYID (0))
1479: #  endif
1480: # endif
1481: 
1482: /* Relocate STACK from its old location to the new one.  The
1483:    local variables YYSIZE and YYSTACKSIZE give the old and new number of
1484:    elements in the stack, and YYPTR gives the new location of the
1485:    stack.  Advance YYPTR to a properly aligned location for the next
1486:    stack.  */
1487: # define YYSTACK_RELOCATE(Stack)					\
1488:     do									\
1489:       {									\
1490: 	YYSIZE_T yynewbytes;						\
1491: 	YYCOPY (&yyptr->Stack, Stack, yysize);				\
1492: 	Stack = &yyptr->Stack;						\
1493: 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
1494: 	yyptr += yynewbytes / sizeof (*yyptr);				\
1495:       }									\
1496:     while (YYID (0))
1497: 
1498: #endif
1499: 
1500: /* YYFINAL -- State number of the termination state.  */
1501: #define YYFINAL  587
1502: /* YYLAST -- Last index in YYTABLE.  */
1503: #define YYLAST   50957
1504: 
1505: /* YYNTOKENS -- Number of terminals.  */
1506: #define YYNTOKENS  497
1507: /* YYNNTS -- Number of nonterminals.  */
1508: #define YYNNTS  378
1509: /* YYNRULES -- Number of rules.  */
1510: #define YYNRULES  1775
1511: /* YYNRULES -- Number of states.  */
1512: #define YYNSTATES  2920
1513: 
1514: /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
1515: #define YYUNDEFTOK  2
1516: #define YYMAXUTOK   730
1517: 
1518: #define YYTRANSLATE(YYX)						\
1519:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
1520: 
1521: /* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
1522: static const yytype_uint16 yytranslate[] =
1523: {
1524:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1525:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1526:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1527:        2,     2,     2,     2,     2,   494,     2,   482,     2,     2,
1528:      487,   488,   480,   478,   491,   479,   489,   481,     2,     2,
1529:        2,     2,     2,     2,     2,     2,     2,     2,   496,   490,
1530:      474,   476,   475,   495,     2,     2,     2,     2,     2,     2,
1531:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1532:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1533:        2,   485,     2,   486,   483,     2,     2,     2,     2,     2,
1534:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1535:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1536:        2,     2,     2,   492,     2,   493,     2,     2,     2,     2,
1537:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1538:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1539:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1540:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1541:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1542:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1543:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1544:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1545:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1546:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1547:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1548:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1549:        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
1550:        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
1551:       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
1552:       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
1553:       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
1554:       45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
1555:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
1556:       65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
1557:       75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
1558:       85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
1559:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
1560:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
1561:      115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
1562:      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
1563:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
1564:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
1565:      155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
1566:      165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
1567:      175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
1568:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
1569:      195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
1570:      205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
1571:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
1572:      225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
1573:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
1574:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
1575:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
1576:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
1577:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
1578:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
1579:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
1580:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
1581:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
1582:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
1583:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
1584:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
1585:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
1586:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
1587:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
1588:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
1589:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
1590:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
1591:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
1592:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
1593:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
1594:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
1595:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
1596:      465,   466,   467,   468,   469,   470,   471,   472,   473,   477,
1597:      484
1598: };
1599: 
1600: #if YYDEBUG
1601: /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
1602:    YYRHS.  */
1603: static const yytype_uint16 yyprhs[] =
1604: {
1605:        0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
1606:       21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
1607:       41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
1608:       61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
1609:       80,    85,    92,    97,   104,   109,   116,   121,   128,   130,
1610:      133,   137,   140,   142,   146,   149,   153,   155,   159,   162,
1611:      168,   172,   179,   184,   191,   198,   205,   211,   217,   224,
1612:      234,   239,   245,   253,   260,   265,   274,   279,   282,   287,
1613:      291,   298,   303,   306,   309,   312,   315,   317,   320,   321,
1614:      323,   326,   329,   332,   334,   338,   343,   346,   348,   349,
1615:      352,   356,   359,   363,   372,   374,   375,   377,   381,   388,
1616:      395,   404,   411,   420,   427,   436,   443,   452,   461,   472,
1617:      481,   492,   494,   495,   503,   505,   510,   515,   523,   526,
1618:      528,   532,   537,   541,   542,   544,   545,   548,   552,   558,
1619:      567,   573,   574,   580,   586,   594,   597,   598,   600,   602,
1620:      604,   608,   611,   612,   614,   615,   617,   621,   623,   627,
1621:      629,   633,   636,   639,   644,   650,   656,   665,   667,   668,
1622:      672,   682,   695,   699,   700,   705,   712,   714,   717,   719,
1623:      721,   722,   724,   727,   730,   732,   735,   738,   740,   743,
1624:      747,   750,   753,   756,   759,   763,   767,   771,   773,   777,
1625:      779,   780,   782,   785,   788,   791,   794,   797,   800,   803,
1626:      806,   808,   810,   811,   821,   834,   835,   838,   840,   842,
1627:      844,   846,   848,   850,   854,   855,   857,   860,   862,   864,
1628:      867,   870,   874,   876,   878,   881,   884,   886,   889,   893,
1629:      899,   902,   908,   914,   917,   921,   923,   925,   928,   931,
1630:      932,   937,   938,   942,   947,   952,   953,   957,   960,   961,
1631:      965,   967,   969,   971,   973,   975,   977,   979,   981,   983,
1632:      985,   989,   993,   995,   998,  1001,  1004,  1007,  1010,  1013,
1633:     1014,  1018,  1022,  1026,  1027,  1029,  1032,  1034,  1037,  1040,
1634:     1043,  1046,  1051,  1053,  1057,  1059,  1063,  1065,  1067,  1069,
1635:     1071,  1075,  1077,  1080,  1081,  1083,  1084,  1086,  1090,  1091,
1636:     1094,  1095,  1099,  1103,  1105,  1111,  1115,  1117,  1121,  1123,
1637:     1128,  1134,  1140,  1147,  1151,  1159,  1164,  1176,  1178,  1182,
1638:     1185,  1188,  1191,  1192,  1196,  1198,  1200,  1203,  1206,  1209,
1639:     1212,  1214,  1215,  1217,  1220,  1227,  1232,  1239,  1244,  1251,
1640:     1260,  1265,  1272,  1274,  1276,  1278,  1280,  1282,  1285,  1287,
1641:     1290,  1292,  1294,  1296,  1300,  1304,  1308,  1312,  1315,  1318,
1642:     1320,  1324,  1326,  1328,  1330,  1332,  1336,  1338,  1340,  1341,
1643:     1343,  1345,  1347,  1349,  1353,  1360,  1362,  1364,  1367,  1371,
1644:     1380,  1392,  1402,  1404,  1406,  1410,  1411,  1413,  1417,  1419,
1645:     1420,  1422,  1423,  1425,  1426,  1428,  1432,  1434,  1436,  1438,
1646:     1442,  1443,  1446,  1449,  1450,  1453,  1454,  1456,  1457,  1459,
1647:     1461,  1463,  1467,  1471,  1473,  1475,  1479,  1483,  1487,  1491,
1648:     1496,  1500,  1503,  1505,  1507,  1509,  1511,  1513,  1517,  1519,
1649:     1521,  1525,  1529,  1531,  1534,  1539,  1544,  1547,  1551,  1557,
1650:     1563,  1565,  1567,  1578,  1589,  1591,  1594,  1599,  1604,  1609,
1651:     1612,  1615,  1619,  1621,  1625,  1632,  1635,  1636,  1640,  1644,
1652:     1649,  1654,  1659,  1664,  1668,  1671,  1673,  1675,  1676,  1678,
1653:     1680,  1681,  1683,  1689,  1691,  1692,  1694,  1695,  1699,  1701,
1654:     1705,  1710,  1714,  1716,  1718,  1719,  1722,  1725,  1726,  1729,
1655:     1732,  1734,  1736,  1738,  1739,  1742,  1747,  1753,  1758,  1761,
1656:     1765,  1768,  1771,  1774,  1777,  1779,  1782,  1786,  1787,  1789,
1657:     1790,  1796,  1798,  1803,  1810,  1813,  1815,  1816,  1821,  1822,
1658:     1824,  1826,  1828,  1830,  1833,  1836,  1838,  1840,  1842,  1844,
1659:     1846,  1848,  1852,  1853,  1855,  1859,  1861,  1863,  1866,  1869,
1660:     1870,  1872,  1876,  1878,  1879,  1881,  1884,  1888,  1891,  1896,
1661:     1899,  1903,  1906,  1907,  1909,  1912,  1913,  1918,  1924,  1927,
1662:     1928,  1930,  1934,  1938,  1942,  1946,  1950,  1954,  1956,  1961,
1663:     1965,  1970,  1976,  1981,  1987,  1992,  1998,  2001,  2006,  2008,
1664:     2010,  2011,  2013,  2018,  2024,  2029,  2030,  2033,  2036,  2039,
1665:     2041,  2043,  2044,  2049,  2052,  2054,  2057,  2060,  2065,  2068,
1666:     2075,  2078,  2080,  2084,  2089,  2090,  2093,  2094,  2097,  2098,
1667:     2100,  2104,  2108,  2111,  2112,  2115,  2120,  2122,  2124,  2127,
1668:     2131,  2137,  2144,  2147,  2151,  2157,  2163,  2167,  2172,  2173,
1669:     2175,  2177,  2179,  2181,  2183,  2186,  2191,  2193,  2195,  2197,
1670:     2199,  2202,  2206,  2207,  2209,  2211,  2213,  2215,  2217,  2220,
1671:     2223,  2226,  2229,  2232,  2234,  2238,  2239,  2241,  2243,  2245,
1672:     2247,  2253,  2256,  2258,  2260,  2262,  2264,  2269,  2271,  2274,
1673:     2277,  2279,  2283,  2287,  2290,  2292,  2293,  2299,  2302,  2308,
1674:     2311,  2313,  2317,  2321,  2322,  2324,  2326,  2328,  2330,  2332,
1675:     2334,  2336,  2338,  2340,  2342,  2344,  2346,  2348,  2350,  2352,
1676:     2354,  2356,  2358,  2360,  2362,  2364,  2366,  2368,  2370,  2374,
1677:     2378,  2382,  2386,  2390,  2394,  2398,  2399,  2401,  2405,  2409,
1678:     2415,  2418,  2421,  2425,  2429,  2433,  2437,  2441,  2445,  2449,
1679:     2453,  2457,  2461,  2465,  2469,  2473,  2476,  2479,  2483,  2487,
1680:     2490,  2493,  2497,  2501,  2507,  2512,  2519,  2523,  2529,  2534,
1681:     2541,  2546,  2553,  2559,  2567,  2571,  2574,  2579,  2583,  2586,
1682:     2588,  2592,  2596,  2600,  2604,  2608,  2612,  2617,  2621,  2626,
1683:     2630,  2635,  2641,  2648,  2655,  2663,  2670,  2678,  2685,  2693,
1684:     2697,  2702,  2707,  2714,  2716,  2721,  2723,  2727,  2730,  2733,
1685:     2737,  2741,  2745,  2749,  2753,  2757,  2761,  2765,  2769,  2773,
1686:     2777,  2781,  2785,  2788,  2791,  2797,  2804,  2811,  2819,  2821,
1687:     2823,  2826,  2829,  2832,  2837,  2839,  2842,  2844,  2847,  2850,
1688:     2854,  2860,  2867,  2876,  2883,  2890,  2895,  2900,  2902,  2904,
1689:     2906,  2912,  2914,  2916,  2921,  2923,  2928,  2930,  2935,  2937,
1690:     2942,  2944,  2946,  2948,  2950,  2952,  2954,  2961,  2968,  2973,
1691:     2978,  2983,  2988,  2995,  3001,  3007,  3013,  3018,  3025,  3030,
1692:     3036,  3037,  3043,  3044,  3047,  3048,  3050,  3054,  3058,  3061,
1693:     3064,  3065,  3072,  3074,  3075,  3079,  3080,  3083,  3086,  3087,
1694:     3089,  3094,  3097,  3100,  3103,  3106,  3109,  3114,  3118,  3120,
1695:     3126,  3130,  3132,  3136,  3138,  3140,  3142,  3144,  3146,  3148,
1696:     3150,  3152,  3154,  3156,  3158,  3160,  3162,  3164,  3166,  3168,
1697:     3170,  3172,  3177,  3179,  3184,  3186,  3191,  3193,  3196,  3198,
1698:     3201,  3203,  3206,  3208,  3212,  3214,  3218,  3220,  3221,  3223,
1699:     3227,  3229,  3233,  3237,  3239,  3243,  3247,  3248,  3250,  3252,
1700:     3254,  3256,  3258,  3260,  3262,  3264,  3266,  3268,  3273,  3277,
1701:     3280,  3284,  3285,  3289,  3293,  3296,  3299,  3301,  3302,  3305,
1702:     3308,  3312,  3315,  3317,  3319,  3323,  3329,  3331,  3334,  3339,
1703:     3342,  3343,  3345,  3346,  3348,  3351,  3354,  3358,  3364,  3366,
1704:     3367,  3369,  3372,  3373,  3376,  3378,  3379,  3381,  3382,  3384,
1705:     3388,  3392,  3395,  3397,  3401,  3407,  3412,  3415,  3417,  3418,
1706:     3422,  3424,  3428,  3433,  3436,  3437,  3439,  3443,  3445,  3448,
1707:     3450,  3454,  3456,  3458,  3460,  3463,  3465,  3467,  3470,  3472,
1708:     3474,  3477,  3484,  3487,  3493,  3497,  3501,  3503,  3505,  3507,
1709:     3509,  3511,  3513,  3515,  3517,  3519,  3521,  3523,  3525,  3527,
1710:     3529,  3531,  3533,  3535,  3537,  3539,  3541,  3544,  3547,  3551,
1711:     3555,  3556,  3558,  3560,  3562,  3564,  3566,  3568,  3570,  3576,
1712:     3580,  3581,  3583,  3585,  3587,  3589,  3594,  3602,  3605,  3606,
1713:     3608,  3610,  3612,  3614,  3628,  3645,  3647,  3650,  3651,  3653,
1714:     3654,  3656,  3657,  3660,  3661,  3663,  3664,  3671,  3680,  3687,
1715:     3696,  3703,  3712,  3715,  3717,  3722,  3726,  3729,  3734,  3738,
1716:     3744,  3746,  3747,  3749,  3751,  3752,  3754,  3756,  3758,  3760,
1717:     3762,  3764,  3766,  3768,  3770,  3772,  3774,  3778,  3780,  3782,
1718:     3784,  3786,  3788,  3790,  3793,  3795,  3797,  3800,  3804,  3808,
1719:     3812,  3814,  3818,  3822,  3825,  3829,  3833,  3837,  3841,  3843,
1720:     3845,  3847,  3849,  3853,  3859,  3861,  3863,  3865,  3867,  3871,
1721:     3874,  3876,  3881,  3887,  3893,  3898,  3905,  3907,  3909,  3911,
1722:     3913,  3915,  3917,  3918,  3920,  3924,  3926,  3927,  3935,  3937,
1723:     3940,  3944,  3947,  3948,  3951,  3952,  3955,  3960,  3963,  3965,
1724:     3967,  3969,  3972,  3976,  3979,  3982,  3985,  3988,  3992,  3997,
1725:     4000,  4002,  4004,  4006,  4010,  4013,  4023,  4035,  4048,  4063,
1726:     4067,  4072,  4077,  4078,  4086,  4097,  4100,  4104,  4105,  4110,
1727:     4112,  4114,  4116,  4118,  4120,  4122,  4124,  4126,  4128,  4130,
1728:     4132,  4134,  4136,  4138,  4140,  4142,  4144,  4146,  4148,  4150,
1729:     4152,  4154,  4156,  4158,  4160,  4162,  4164,  4166,  4168,  4170,
1730:     4172,  4174,  4176,  4178,  4180,  4182,  4184,  4186,  4188,  4190,
1731:     4192,  4194,  4196,  4198,  4200,  4202,  4204,  4206,  4208,  4210,
1732:     4212,  4214,  4216,  4218,  4220,  4222,  4224,  4226,  4228,  4230,
1733:     4232,  4234,  4236,  4238,  4240,  4242,  4244,  4246,  4248,  4250,
1734:     4252,  4254,  4256,  4258,  4260,  4262,  4264,  4266,  4268,  4270,
1735:     4272,  4274,  4276,  4278,  4280,  4282,  4284,  4286,  4288,  4290,
1736:     4292,  4294,  4296,  4298,  4300,  4302,  4304,  4306,  4308,  4310,
1737:     4312,  4314,  4316,  4318,  4320,  4322,  4324,  4326,  4328,  4330,
1738:     4332,  4334,  4336,  4338,  4340,  4342,  4344,  4346,  4348,  4350,
1739:     4352,  4354,  4356,  4358,  4360,  4362,  4364,  4366,  4368,  4370,
1740:     4372,  4374,  4376,  4378,  4380,  4382,  4384,  4386,  4388,  4390,
1741:     4392,  4394,  4396,  4398,  4400,  4402,  4404,  4406,  4408,  4410,
1742:     4412,  4414,  4416,  4418,  4420,  4422,  4424,  4426,  4428,  4430,
1743:     4432,  4434,  4436,  4438,  4440,  4442,  4444,  4446,  4448,  4450,
1744:     4452,  4454,  4456,  4458,  4460,  4462,  4464,  4466,  4468,  4470,
1745:     4472,  4474,  4476,  4478,  4480,  4482,  4484,  4486,  4488,  4490,
1746:     4492,  4494,  4496,  4498,  4500,  4502,  4504,  4506,  4508,  4510,
1747:     4512,  4514,  4516,  4518,  4520,  4522,  4524,  4526,  4528,  4530,
1748:     4532,  4534,  4536,  4538,  4540,  4542,  4544,  4546,  4548,  4550,
1749:     4552,  4554,  4556,  4558,  4560,  4562,  4564,  4566,  4568,  4570,
1750:     4572,  4574,  4576,  4578,  4580,  4582,  4584,  4586,  4588,  4590,
1751:     4592,  4594,  4596,  4598,  4600,  4602,  4604,  4606,  4608,  4610,
1752:     4612,  4614,  4616,  4618,  4620,  4622,  4624,  4626,  4628,  4630,
1753:     4632,  4634,  4636,  4638,  4640,  4642,  4644,  4646,  4648,  4650,
1754:     4652,  4654,  4656,  4658,  4660,  4662,  4664,  4666,  4668,  4670,
1755:     4672,  4674,  4676,  4678,  4680,  4682,  4684,  4686,  4688,  4690,
1756:     4692,  4694,  4696,  4698,  4700,  4702,  4704,  4706,  4708,  4710,
1757:     4712,  4714,  4716,  4718,  4720,  4722,  4724,  4726,  4728,  4730,
1758:     4732,  4734,  4736,  4738,  4740,  4742,  4744,  4746,  4748,  4750,
1759:     4752,  4754,  4756,  4758,  4760,  4762,  4764,  4766,  4768,  4770,
1760:     4772,  4774,  4776,  4778,  4780,  4782,  4784,  4786,  4788,  4790,
1761:     4792,  4794,  4796,  4798,  4800,  4802,  4804,  4806,  4808,  4810,
1762:     4812,  4814,  4816,  4818,  4820,  4822,  4824,  4826,  4828,  4830,
1763:     4832,  4834,  4836,  4838,  4840,  4842,  4844,  4846,  4848,  4850,
1764:     4852,  4854,  4856,  4858,  4860,  4862,  4864,  4866,  4868,  4870,
1765:     4872,  4874,  4876,  4878,  4880,  4882,  4884,  4886,  4888,  4890,
1766:     4892,  4894,  4896,  4898,  4900,  4902,  4904,  4906,  4908,  4910,
1767:     4912,  4914,  4916,  4918,  4920,  4922,  4924,  4926,  4928,  4930,
1768:     4932,  4934,  4936,  4938,  4940,  4942,  4944,  4946,  4948,  4950,
1769:     4952,  4954,  4956,  4958,  4960,  4962,  4964,  4966,  4968,  4970,
1770:     4972,  4974,  4976,  4978,  4980,  4982,  4984,  4986,  4988,  4990,
1771:     4992,  4994,  4996,  4998,  5000,  5002,  5004,  5006,  5008,  5010,
1772:     5012,  5014,  5016,  5018,  5020,  5022,  5024,  5026,  5028,  5030,
1773:     5032,  5034,  5036,  5038,  5040,  5042,  5044,  5046,  5048,  5050,
1774:     5052,  5054,  5056,  5058,  5060,  5062,  5064,  5066,  5068,  5070,
1775:     5072,  5074,  5076,  5078,  5080,  5082,  5084,  5086,  5088,  5090,
1776:     5092,  5094,  5096,  5098,  5100,  5102,  5104,  5106,  5108,  5110,
1777:     5112,  5114,  5116,  5118,  5120,  5122,  5124,  5126,  5128,  5130,
1778:     5132,  5134,  5136,  5138,  5140,  5142,  5144,  5146,  5148,  5150,
1779:     5152,  5154,  5156,  5158,  5160,  5162,  5164,  5166,  5168,  5170,
1780:     5172,  5174,  5176,  5178,  5180,  5182,  5184,  5186,  5188,  5190,
1781:     5192,  5194,  5196,  5198,  5200,  5202,  5204,  5206,  5208,  5210,
1782:     5212,  5214,  5216,  5218,  5220,  5222
1783: };
1784: 
1785: /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
1786: static const yytype_int16 yyrhs[] =
1787: {
1788:      498,     0,    -1,   499,    -1,   499,   490,   500,    -1,   500,
1789:       -1,   823,    -1,   541,    -1,   501,    -1,   855,    -1,   862,
1790:       -1,   824,    -1,   607,    -1,   865,    -1,   513,    -1,   603,
1791:       -1,   813,    -1,   537,    -1,   550,    -1,   512,    -1,   851,
1792:       -1,   596,    -1,   539,    -1,   827,    -1,   825,    -1,   826,
1793:       -1,   816,    -1,   518,    -1,   844,    -1,   536,    -1,   810,
1794:       -1,   516,    -1,   624,    -1,   548,    -1,   606,    -1,   846,
1795:       -1,   856,    -1,   838,    -1,   859,    -1,   863,    -1,    -1,
1796:       29,   395,   684,   509,    -1,    29,   395,   185,   149,   684,
1797:      509,    -1,    29,   194,   791,   509,    -1,    29,   194,   185,
1798:      149,   791,   509,    -1,    29,   360,   791,   509,    -1,    29,
1799:      360,   185,   149,   791,   509,    -1,    29,   442,   791,   509,
1800:       -1,    29,   442,   185,   149,   791,   509,    -1,   504,    -1,
1801:      502,   504,    -1,   366,   114,   726,    -1,   134,   114,    -1,
1802:      338,    -1,   338,   543,   544,    -1,   366,   545,    -1,   366,
1803:      171,   595,    -1,   508,    -1,   505,   491,   508,    -1,    23,
1804:      575,    -1,    23,   185,   264,   149,   575,    -1,    23,    75,
1805:      575,    -1,    23,    75,   185,   264,   149,   575,    -1,    29,
1806:      517,   799,   503,    -1,    29,   517,   799,   134,   264,   269,
1807:       -1,    29,   517,   799,   366,   264,   269,    -1,    29,   517,
1808:      799,   366,   382,   547,    -1,    29,   517,   799,   366,   563,
1809:       -1,    29,   517,   799,   337,   563,    -1,    29,   517,   799,
1810:      366,   385,   799,    -1,    29,   517,   799,    23,   171,   595,
1811:       36,   184,   553,    -1,    29,   517,   799,   502,    -1,    29,
1812:      517,   799,   134,   184,    -1,    29,   517,   799,   134,   184,
1813:      185,   149,    -1,   134,   517,   185,   149,   799,   600,    -1,
1814:      134,   517,   799,   600,    -1,    29,   517,   799,   511,   417,
1815:      696,   693,   507,    -1,    29,   517,   799,   510,    -1,    23,
1816:      565,    -1,    29,    85,   793,   551,    -1,   433,    85,   793,
1817:       -1,   134,    85,   185,   149,   793,   600,    -1,   134,    85,
1818:      793,   600,    -1,   366,   236,    -1,   366,   426,    -1,   366,
1819:      563,    -1,   337,   563,    -1,   510,    -1,   430,   726,    -1,
1820:       -1,   558,    -1,   366,   558,    -1,    23,   558,    -1,   134,
1821:      573,    -1,   506,    -1,   509,   491,   506,    -1,   283,   487,
1822:      505,   488,    -1,   366,   106,    -1,   366,    -1,    -1,   110,
1823:      793,    -1,   110,   309,   793,    -1,   110,    27,    -1,   110,
1824:      309,    27,    -1,    92,   417,   804,    36,   141,   487,   514,
1825:      488,    -1,   515,    -1,    -1,   798,    -1,   515,   491,   798,
1826:       -1,    29,   352,   793,   333,   406,   793,    -1,    29,   395,
1827:      684,   333,   406,   793,    -1,    29,   395,   185,   149,   684,
1828:      333,   406,   793,    -1,    29,   360,   791,   333,   406,   793,
1829:       -1,    29,   360,   185,   149,   791,   333,   406,   793,    -1,
1830:       29,   442,   791,   333,   406,   793,    -1,    29,   442,   185,
1831:      149,   791,   333,   406,   793,    -1,    29,   194,   791,   333,
1832:      406,   793,    -1,    29,   194,   185,   149,   791,   333,   406,
1833:      793,    -1,    29,   395,   684,   333,   517,   793,   406,   793,
1834:       -1,    29,   395,   185,   149,   684,   333,   517,   793,   406,
1835:      793,    -1,    29,   395,   684,   333,    85,   793,   406,   793,
1836:       -1,    29,   395,   185,   149,   684,   333,    85,   793,   406,
1837:      793,    -1,    75,    -1,    -1,   522,   204,   210,   520,   519,
1838:      525,   527,    -1,   624,    -1,   292,   528,   435,   624,    -1,
1839:      487,   532,   488,   624,    -1,   487,   532,   488,   292,   528,
1840:      435,   624,    -1,   114,   436,    -1,   791,    -1,   791,    36,
1841:      799,    -1,   487,   534,   488,   690,    -1,   279,    85,   793,
1842:       -1,    -1,   629,    -1,    -1,   799,   780,    -1,   535,   476,
1843:      726,    -1,   487,   529,   488,   476,   726,    -1,   279,    83,
1844:      521,   130,   428,   366,   533,   690,    -1,   279,    83,   521,
1845:      130,   265,    -1,    -1,   799,   530,   531,   642,   643,    -1,
1846:      731,   530,   531,   642,   643,    -1,   487,   726,   488,   530,
1847:      531,   642,   643,    -1,   340,   783,    -1,    -1,   429,    -1,
1848:      394,    -1,   535,    -1,   529,   491,   535,    -1,    73,   804,
1849:       -1,    -1,   804,    -1,    -1,   523,    -1,   532,   491,   523,
1850:       -1,   524,    -1,   533,   491,   524,    -1,   526,    -1,   534,
1851:      491,   526,    -1,   799,   780,    -1,   306,   799,    -1,   306,
1852:      799,   476,   843,    -1,   306,   799,   487,   758,   488,    -1,
1853:       92,   594,   360,   791,   538,    -1,    92,   594,   360,   185,
1854:      264,   149,   791,   538,    -1,   542,    -1,    -1,   148,   793,
1855:      540,    -1,    92,   594,   395,   867,    36,   148,   793,   540,
1856:      866,    -1,    92,   594,   395,   185,   264,   149,   867,    36,
1857:      148,   793,   540,   866,    -1,   487,   756,   488,    -1,    -1,
1858:       29,   360,   791,   542,    -1,    29,   360,   185,   149,   791,
1859:      542,    -1,   545,    -1,   542,   545,    -1,   449,    -1,   473,
1860:       -1,    -1,     4,    -1,   478,     4,    -1,   479,     4,    -1,
1861:      547,    -1,    36,   698,    -1,    55,   544,    -1,   105,    -1,
1862:      262,   105,    -1,   193,   546,   544,    -1,   242,   544,    -1,
1863:      250,   544,    -1,   262,   242,    -1,   262,   250,    -1,   293,
1864:       54,   804,    -1,   360,   255,   804,    -1,   380,   543,   544,
1865:       -1,   338,    -1,   338,   543,   544,    -1,    54,    -1,    -1,
1866:      797,    -1,   478,   797,    -1,   479,   797,    -1,    19,   549,
1867:       -1,    47,   549,    -1,   380,   549,    -1,    79,   549,    -1,
1868:      140,   549,    -1,   345,   549,    -1,   452,    -1,   408,    -1,
1869:       -1,    92,   594,   395,   791,   487,   582,   488,   570,   562,
1870:       -1,    92,   594,   395,   185,   264,   149,   791,   487,   582,
1871:      488,   570,   562,    -1,    -1,   551,   574,    -1,   589,    -1,
1872:      874,    -1,   753,    -1,   544,    -1,   798,    -1,   263,    -1,
1873:      487,   542,   488,    -1,    -1,   798,    -1,   262,    22,    -1,
1874:      339,    -1,    58,    -1,   366,   269,    -1,   366,   114,    -1,
1875:       85,   793,   557,    -1,   557,    -1,   569,    -1,    73,   804,
1876:       -1,   264,   269,    -1,   269,    -1,   423,   581,    -1,   312,
1877:      216,   581,    -1,    67,   487,   726,   488,   564,    -1,   114,
1878:      727,    -1,   171,   595,    36,   184,   553,    -1,   327,   791,
1879:      584,   592,   560,    -1,   573,   554,    -1,   279,   428,   555,
1880:       -1,   559,    -1,   586,    -1,   559,   586,    -1,   586,   559,
1881:       -1,    -1,   283,   487,   576,   488,    -1,    -1,   279,    79,
1882:      134,    -1,   279,    79,   119,   348,    -1,   279,    79,   311,
1883:      348,    -1,    -1,   487,   567,   488,    -1,   262,   196,    -1,
1884:       -1,    85,   793,   590,    -1,   590,    -1,    78,    -1,    86,
1885:       -1,   115,    -1,   184,    -1,   195,    -1,   382,    -1,   385,
1886:       -1,    27,    -1,   587,    -1,   567,   491,   587,    -1,   430,
1887:      194,   578,    -1,   116,    -1,   264,   116,    -1,   198,   117,
1888:       -1,   198,   187,    -1,   449,   563,    -1,   449,   277,    -1,
1889:      451,   277,    -1,    -1,   487,   577,   488,    -1,   572,   192,
1890:      566,    -1,   572,   146,   566,    -1,    -1,   808,    -1,   264,
1891:      116,    -1,   116,    -1,   198,   187,    -1,   198,   117,    -1,
1892:      264,   432,    -1,   262,   196,    -1,   799,   696,   561,   585,
1893:       -1,   558,    -1,   576,   491,   558,    -1,   580,    -1,   577,
1894:      491,   580,    -1,   799,    -1,   575,    -1,   593,    -1,   565,
1895:       -1,   808,   476,   552,    -1,   808,    -1,   449,   571,    -1,
1896:       -1,   591,    -1,    -1,   799,    -1,   487,   588,   488,    -1,
1897:       -1,   585,   556,    -1,    -1,   279,   119,   555,    -1,   808,
1898:      476,   552,    -1,   808,    -1,   808,   489,   808,   476,   552,
1899:       -1,   808,   489,   808,    -1,   583,    -1,   588,   491,   583,
1900:       -1,   696,    -1,   801,   805,   482,   417,    -1,   367,   801,
1901:      805,   482,   417,    -1,    67,   487,   726,   488,   551,    -1,
1902:      423,   487,   588,   488,   581,   551,    -1,   423,   568,   551,
1903:       -1,   312,   216,   487,   588,   488,   581,   551,    -1,   312,
1904:      216,   568,   551,    -1,   164,   216,   487,   588,   488,   327,
1905:      791,   584,   592,   560,   551,    -1,   579,    -1,   591,   491,
1906:      579,    -1,   240,   168,    -1,   240,   297,    -1,   240,   372,
1907:       -1,    -1,   226,   791,   572,    -1,   401,    -1,   399,    -1,
1908:      230,   401,    -1,   230,   399,    -1,   173,   401,    -1,   173,
1909:      399,    -1,   426,    -1,    -1,    30,    -1,    54,   114,    -1,
1910:      134,   597,   185,   149,   599,   600,    -1,   134,   597,   599,
1911:      600,    -1,   134,   598,   185,   149,   792,   600,    -1,   134,
1912:      598,   792,   600,    -1,   134,   601,   793,   279,   804,   600,
1913:       -1,   134,   601,   185,   149,   793,   279,   804,   600,    -1,
1914:      134,   417,   602,   600,    -1,   134,   417,   185,   149,   602,
1915:      600,    -1,   395,    -1,   360,    -1,   169,    -1,   237,    -1,
1916:      442,    -1,   241,   442,    -1,   194,    -1,   164,   395,    -1,
1917:       74,    -1,    89,    -1,   382,    -1,   402,   355,   296,    -1,
1918:      402,   355,   126,    -1,   402,   355,   400,    -1,   402,   355,
1919:       82,    -1,    21,   243,    -1,   143,   411,    -1,   152,    -1,
1920:      164,   106,   453,    -1,   318,    -1,   352,    -1,   363,    -1,
1921:      804,    -1,   599,   491,   804,    -1,    58,    -1,   339,    -1,
1922:       -1,   304,    -1,   349,    -1,   411,    -1,   696,    -1,   602,
1923:      491,   696,    -1,    92,   604,   791,   605,    36,   726,    -1,
1924:      169,    -1,   237,    -1,   487,   488,    -1,   487,   758,   488,
1925:       -1,   522,   428,   852,   366,   533,   674,   853,   527,    -1,
1926:       90,   619,   791,   584,   617,   608,   613,   622,   609,   543,
1927:      614,    -1,    90,   487,   812,   488,   406,   613,   622,   543,
1928:      614,    -1,   167,    -1,   406,    -1,   611,   121,   798,    -1,
1929:       -1,   621,    -1,   610,   491,   621,    -1,   430,    -1,    -1,
1930:       36,    -1,    -1,   317,    -1,    -1,   618,    -1,   487,   623,
1931:      488,    -1,   835,    -1,   544,    -1,   480,    -1,   487,   610,
1932:      488,    -1,    -1,   808,   615,    -1,   449,   277,    -1,    -1,
1933:      618,   620,    -1,    -1,    50,    -1,    -1,    50,    -1,   277,
1934:       -1,   166,    -1,   120,   612,   798,    -1,   269,   612,   798,
1935:       -1,    94,    -1,   180,    -1,   319,   612,   798,    -1,   142,
1936:      612,   798,    -1,   163,   319,   588,    -1,   163,   319,   480,
1937:       -1,   163,   264,   269,   588,    -1,   163,   269,   588,    -1,
1938:      138,   798,    -1,   835,    -1,   798,    -1,   383,    -1,   384,
1939:       -1,   616,    -1,   623,   491,   616,    -1,   626,    -1,   625,
1940:       -1,   487,   626,   488,    -1,   487,   625,   488,    -1,   628,
1941:       -1,   627,   639,    -1,   627,   638,   666,   645,    -1,   627,
1942:      638,   644,   667,    -1,   629,   627,    -1,   629,   627,   639,
1943:       -1,   629,   627,   638,   666,   645,    -1,   629,   627,   638,
1944:      644,   667,    -1,   628,    -1,   625,    -1,   359,   637,   782,
1945:      632,   674,   690,   661,   665,   735,   649,    -1,   359,   636,
1946:      783,   632,   674,   690,   661,   665,   735,   649,    -1,   673,
1947:       -1,   395,   684,    -1,   627,   422,   635,   627,    -1,   627,
1948:      208,   635,   627,    -1,   627,   144,   635,   627,    -1,   449,
1949:      630,    -1,   473,   630,    -1,   449,   325,   630,    -1,   631,
1950:       -1,   630,   491,   631,    -1,   793,   806,    36,   487,   812,
1951:      488,    -1,   210,   633,    -1,    -1,   401,   634,   791,    -1,
1952:      399,   634,   791,    -1,   230,   401,   634,   791,    -1,   230,
1953:      399,   634,   791,    -1,   173,   401,   634,   791,    -1,   173,
1954:      399,   634,   791,    -1,   426,   634,   791,    -1,   395,   791,
1955:       -1,   791,    -1,   395,    -1,    -1,    27,    -1,   129,    -1,
1956:       -1,   129,    -1,   129,   279,   487,   756,   488,    -1,    27,
1957:       -1,    -1,   639,    -1,    -1,   285,    54,   640,    -1,   641,
1958:       -1,   640,   491,   641,    -1,   726,   430,   753,   643,    -1,
1959:      726,   642,   643,    -1,    37,    -1,   123,    -1,    -1,   472,
1960:      159,    -1,   472,   220,    -1,    -1,   646,   647,    -1,   647,
1961:      646,    -1,   646,    -1,   647,    -1,   644,    -1,    -1,   227,
1962:      655,    -1,   227,   655,   491,   656,    -1,   157,   660,   657,
1963:      659,   280,    -1,   157,   660,   659,   280,    -1,   276,   656,
1964:       -1,   276,   657,   659,    -1,     4,   482,    -1,     9,   482,
1965:       -1,     4,   301,    -1,     9,   301,    -1,     9,    -1,     9,
1966:      348,    -1,   430,   350,   651,    -1,    -1,   799,    -1,    -1,
1967:      650,   487,   648,   488,   654,    -1,   648,    -1,   648,   487,
1968:      799,   488,    -1,   648,   487,   799,   491,     9,   488,    -1,
1969:      397,   651,    -1,   652,    -1,    -1,   334,   487,     9,   488,
1970:       -1,    -1,   726,    -1,    27,    -1,   726,    -1,   728,    -1,
1971:      478,   658,    -1,   479,   658,    -1,   797,    -1,     4,    -1,
1972:      347,    -1,   348,    -1,   159,    -1,   261,    -1,   176,    54,
1973:      662,    -1,    -1,   663,    -1,   662,   491,   663,    -1,   726,
1974:       -1,   664,    -1,   487,   488,    -1,   179,   726,    -1,    -1,
1975:      668,    -1,   162,   321,   280,    -1,   666,    -1,    -1,   669,
1976:       -1,   668,   669,    -1,   670,   671,   672,    -1,   162,   428,
1977:       -1,   162,   262,   216,   428,    -1,   162,   369,    -1,   162,
1978:      216,   369,    -1,   274,   790,    -1,    -1,   268,    -1,   373,
1979:      235,    -1,    -1,   436,   487,   756,   488,    -1,   673,   491,
1980:      487,   756,   488,    -1,   167,   675,    -1,    -1,   676,    -1,
1981:      675,   491,   676,    -1,   684,   679,   653,    -1,   685,   680,
1982:      653,    -1,   221,   685,   680,    -1,   625,   679,   653,    -1,
1983:      221,   625,   679,    -1,   677,    -1,   487,   677,   488,   678,
1984:       -1,   487,   677,   488,    -1,   676,    93,   215,   676,    -1,
1985:      676,   681,   215,   676,   683,    -1,   676,   215,   676,   683,
1986:       -1,   676,   258,   681,   215,   676,    -1,   676,   258,   215,
1987:      676,    -1,    36,   799,   487,   792,   488,    -1,    36,   800,
1988:       -1,   799,   487,   792,   488,    -1,   799,    -1,   678,    -1,
1989:       -1,   678,    -1,    36,   487,   691,   488,    -1,    36,   799,
1990:      487,   691,   488,    -1,   799,   487,   691,   488,    -1,    -1,
1991:      168,   682,    -1,   224,   682,    -1,   343,   682,    -1,   200,
1992:       -1,   288,    -1,    -1,   430,   487,   792,   488,    -1,   279,
1993:      726,    -1,   791,    -1,   791,   480,    -1,   280,   791,    -1,
1994:      280,   487,   791,   488,    -1,   731,   689,    -1,   348,   167,
1995:      487,   687,   488,   689,    -1,   731,   688,    -1,   686,    -1,
1996:      687,   491,   686,    -1,    36,   487,   691,   488,    -1,    -1,
1997:      473,   286,    -1,    -1,   446,   726,    -1,    -1,   692,    -1,
1998:      691,   491,   692,    -1,   799,   696,   693,    -1,    73,   804,
1999:       -1,    -1,   799,   696,    -1,   694,   491,   799,   696,    -1,
2000:      347,    -1,   388,    -1,   698,   697,    -1,   367,   698,   697,
2001:       -1,   698,    35,   485,   797,   486,    -1,   367,   698,    35,
2002:      485,   797,   486,    -1,   698,    35,    -1,   367,   698,    35,
2003:       -1,   695,   487,   694,   488,   697,    -1,   238,   487,   760,
2004:      488,   697,    -1,   697,   485,   486,    -1,   697,   485,   797,
2005:      486,    -1,    -1,   700,    -1,   702,    -1,   704,    -1,   708,
2006:       -1,   714,    -1,   715,   725,    -1,   715,   487,   797,   488,
2007:       -1,   702,    -1,   705,    -1,   709,    -1,   714,    -1,   803,
2008:      701,    -1,   487,   756,   488,    -1,    -1,   206,    -1,   207,
2009:       -1,   374,    -1,    49,    -1,   322,    -1,   160,   703,    -1,
2010:      133,   308,    -1,   112,   701,    -1,   111,   701,    -1,   272,
2011:      701,    -1,    52,    -1,   487,   797,   488,    -1,    -1,   706,
2012:       -1,   707,    -1,   706,    -1,   707,    -1,    51,   713,   487,
2013:      756,   488,    -1,    51,   713,    -1,   710,    -1,   711,    -1,
2014:      710,    -1,   711,    -1,   712,   487,   797,   488,    -1,   712,
2015:       -1,    65,   713,    -1,    64,   713,    -1,   437,    -1,   257,
2016:       65,   713,    -1,   257,    64,   713,    -1,   259,   713,    -1,
2017:      439,    -1,    -1,   405,   487,   797,   488,   716,    -1,   405,
2018:      716,    -1,   404,   487,   797,   488,   716,    -1,   404,   716,
2019:       -1,   209,    -1,   473,   404,   470,    -1,   451,   404,   470,
2020:       -1,    -1,   467,    -1,   468,    -1,   252,    -1,   253,    -1,
2021:      108,    -1,   109,    -1,   182,    -1,   183,    -1,   248,    -1,
2022:      249,    -1,   356,    -1,   357,    -1,   246,    -1,   247,    -1,
2023:      244,    -1,   245,    -1,   717,    -1,   718,    -1,   719,    -1,
2024:      720,    -1,   721,    -1,   722,    -1,   723,    -1,   724,    -1,
2025:      717,   406,   718,    -1,   719,   406,   720,    -1,   719,   406,
2026:      721,    -1,   719,   406,   722,    -1,   720,   406,   721,    -1,
2027:      720,   406,   722,    -1,   721,   406,   722,    -1,    -1,   728,
2028:       -1,   726,    11,   696,    -1,   726,    73,   804,    -1,   726,
2029:       41,   404,   470,   726,    -1,   478,   726,    -1,   479,   726,
2030:       -1,   726,   478,   726,    -1,   726,   479,   726,    -1,   726,
2031:      480,   726,    -1,   726,   481,   726,    -1,   726,   482,   726,
2032:       -1,   726,   483,   726,    -1,   726,   474,   726,    -1,   726,
2033:      475,   726,    -1,   726,   476,   726,    -1,   726,    16,   726,
2034:       -1,   726,    17,   726,    -1,   726,    18,   726,    -1,   726,
2035:      752,   726,    -1,   752,   726,    -1,   726,   752,    -1,   726,
2036:       33,   726,    -1,   726,   284,   726,    -1,   264,   726,    -1,
2037:      471,   726,    -1,   726,   172,   726,    -1,   726,   226,   726,
2038:       -1,   726,   226,   726,   142,   726,    -1,   726,   471,   226,
2039:      726,    -1,   726,   471,   226,   726,   142,   726,    -1,   726,
2040:      186,   726,    -1,   726,   186,   726,   142,   726,    -1,   726,
2041:      471,   186,   726,    -1,   726,   471,   186,   726,   142,   726,
2042:       -1,   726,   371,   406,   726,    -1,   726,   371,   406,   726,
2043:      142,   726,    -1,   726,   471,   371,   406,   726,    -1,   726,
2044:      471,   371,   406,   726,   142,   726,    -1,   726,   212,   269,
2045:       -1,   726,   213,    -1,   726,   212,   264,   269,    -1,   726,
2046:      264,   269,    -1,   726,   267,    -1,   746,    -1,   492,   748,
2047:      493,    -1,   485,   757,   486,    -1,   746,    15,   726,    -1,
2048:      776,    15,   726,    -1,   746,   290,   746,    -1,   726,   212,
2049:      413,    -1,   726,   212,   264,   413,    -1,   726,   212,   155,
2050:       -1,   726,   212,   264,   155,    -1,   726,   212,   424,    -1,
2051:      726,   212,   264,   424,    -1,   726,   212,   129,   167,   726,
2052:       -1,   726,   212,   264,   129,   167,   726,    -1,   726,   212,
2053:      274,   487,   760,   488,    -1,   726,   212,   264,   274,   487,
2054:      760,   488,    -1,   726,    48,   781,   727,    33,   726,    -1,
2055:      726,   471,    48,   781,   727,    33,   726,    -1,   726,    48,
2056:      392,   727,    33,   726,    -1,   726,   471,    48,   392,   727,
2057:       33,   726,    -1,   726,   191,   770,    -1,   726,   471,   191,
2058:      770,    -1,   726,   754,   749,   625,    -1,   726,   754,   749,
2059:      487,   726,   488,    -1,   114,    -1,    35,   485,   757,   486,
2060:       -1,   728,    -1,   727,    11,   696,    -1,   478,   727,    -1,
2061:      479,   727,    -1,   727,   478,   727,    -1,   727,   479,   727,
2062:       -1,   727,   480,   727,    -1,   727,   481,   727,    -1,   727,
2063:      482,   727,    -1,   727,   483,   727,    -1,   727,   474,   727,
2064:       -1,   727,   475,   727,    -1,   727,   476,   727,    -1,   727,
2065:       16,   727,    -1,   727,    17,   727,    -1,   727,    18,   727,
2066:       -1,   727,   752,   727,    -1,   752,   727,    -1,   727,   752,
2067:       -1,   727,   212,   129,   167,   727,    -1,   727,   212,   264,
2068:      129,   167,   727,    -1,   727,   212,   274,   487,   760,   488,
2069:       -1,   727,   212,   264,   274,   487,   760,   488,    -1,   776,
2070:       -1,   796,    -1,   494,     9,    -1,   495,   780,    -1,    10,
2071:      780,    -1,   487,   726,   488,   780,    -1,   771,    -1,   730,
2072:      780,    -1,   625,    -1,   625,   779,    -1,   149,   625,    -1,
2073:      795,   487,   488,    -1,   795,   487,   758,   638,   488,    -1,
2074:      795,   487,   438,   759,   638,   488,    -1,   795,   487,   758,
2075:      491,   438,   759,   638,   488,    -1,   795,   487,    27,   758,
2076:      638,   488,    -1,   795,   487,   129,   758,   638,   488,    -1,
2077:      795,   487,   480,   488,    -1,   729,   733,   734,   738,    -1,
2078:      732,    -1,   729,    -1,   732,    -1,    74,   162,   487,   726,
2079:      488,    -1,    98,    -1,   101,    -1,   101,   487,   797,   488,
2080:       -1,   102,    -1,   102,   487,   797,   488,    -1,   231,    -1,
2081:      231,   487,   797,   488,    -1,   232,    -1,   232,   487,   797,
2082:      488,    -1,    99,    -1,   103,    -1,   365,    -1,   429,    -1,
2083:       97,    -1,   100,    -1,    61,   487,   726,    36,   696,   488,
2084:       -1,   416,   487,   726,    36,   696,   488,    -1,   154,   487,
2085:      761,   488,    -1,   291,   487,   763,   488,    -1,   305,   487,
2086:      765,   488,    -1,   390,   487,   766,   488,    -1,   410,   487,
2087:      726,    36,   696,   488,    -1,   412,   487,    53,   769,   488,
2088:       -1,   412,   487,   222,   769,   488,    -1,   412,   487,   407,
2089:      769,   488,    -1,   412,   487,   769,   488,    -1,   270,   487,
2090:      726,   491,   726,   488,    -1,    72,   487,   756,   488,    -1,
2091:      450,   176,   487,   639,   488,    -1,    -1,   158,   487,   446,
2092:      726,   488,    -1,    -1,   448,   736,    -1,    -1,   737,    -1,
2093:      736,   491,   737,    -1,   799,    36,   739,    -1,   289,   739,
2094:       -1,   289,   799,    -1,    -1,   487,   740,   741,   638,   742,
2095:      488,    -1,   799,    -1,    -1,   298,    54,   756,    -1,    -1,
2096:      320,   743,    -1,   348,   743,    -1,    -1,   744,    -1,    48,
2097:      744,    33,   744,    -1,   419,   307,    -1,   419,   161,    -1,
2098:       96,   347,    -1,   726,   307,    -1,   726,   161,    -1,   347,
2099:      487,   756,   488,    -1,   347,   487,   488,    -1,   745,    -1,
2100:      487,   756,   491,   726,   488,    -1,   800,   496,   726,    -1,
2101:      747,    -1,   748,   491,   747,    -1,    34,    -1,   376,    -1,
2102:       27,    -1,     8,    -1,   751,    -1,   478,    -1,   479,    -1,
2103:      480,    -1,   481,    -1,   482,    -1,   483,    -1,   474,    -1,
2104:      475,    -1,   476,    -1,    16,    -1,    17,    -1,    18,    -1,
2105:        8,    -1,   281,   487,   755,   488,    -1,   750,    -1,   281,
2106:      487,   755,   488,    -1,   750,    -1,   281,   487,   755,   488,
2107:       -1,   226,    -1,   471,   226,    -1,   172,    -1,   471,   172,
2108:       -1,   186,    -1,   471,   186,    -1,   750,    -1,   799,   489,
2109:      755,    -1,   726,    -1,   756,   491,   726,    -1,   756,    -1,
2110:       -1,   759,    -1,   758,   491,   759,    -1,   726,    -1,   807,
2111:       13,   726,    -1,   807,    14,   726,    -1,   696,    -1,   760,
2112:      491,   696,    -1,   762,   167,   726,    -1,    -1,     3,    -1,
2113:      717,    -1,   718,    -1,   719,    -1,   720,    -1,   721,    -1,
2114:      722,    -1,   723,    -1,   724,    -1,   798,    -1,   726,   764,
2115:      767,   768,    -1,   726,   764,   767,    -1,   302,   726,    -1,
2116:      727,   191,   727,    -1,    -1,   726,   767,   768,    -1,   726,
2117:      768,   767,    -1,   726,   767,    -1,   726,   768,    -1,   756,
2118:       -1,    -1,   167,   726,    -1,   162,   726,    -1,   726,   167,
2119:      756,    -1,   167,   756,    -1,   756,    -1,   625,    -1,   487,
2120:      756,   488,    -1,    60,   775,   772,   774,   140,    -1,   773,
2121:       -1,   772,   773,    -1,   445,   726,   403,   726,    -1,   136,
2122:      726,    -1,    -1,   726,    -1,    -1,   799,    -1,   799,   779,
2123:       -1,   489,   794,    -1,   485,   726,   486,    -1,   485,   778,
2124:      496,   778,   486,    -1,   726,    -1,    -1,   777,    -1,   779,
2125:      777,    -1,    -1,   780,   777,    -1,    40,    -1,    -1,   783,
2126:       -1,    -1,   784,    -1,   783,   491,   784,    -1,   726,    36,
2127:      809,    -1,   726,     3,    -1,   726,    -1,   480,   786,   789,
2128:       -1,   799,   489,   480,   786,   789,    -1,   145,   487,   792,
2129:      488,    -1,   145,   799,    -1,   785,    -1,    -1,   726,    36,
2130:      799,    -1,   787,    -1,   788,   491,   787,    -1,   335,   487,
2131:      788,   488,    -1,   335,   787,    -1,    -1,   791,    -1,   790,
2132:      491,   791,    -1,   800,    -1,   799,   779,    -1,   793,    -1,
2133:      792,   491,   793,    -1,   799,    -1,   808,    -1,   802,    -1,
2134:      799,   779,    -1,   797,    -1,     4,    -1,   798,   780,    -1,
2135:        6,    -1,     7,    -1,   795,   798,    -1,   795,   487,   758,
2136:      638,   488,   798,    -1,   699,   798,    -1,   715,   487,   726,
2137:      488,   725,    -1,   715,   797,   725,    -1,   715,   798,   725,
2138:       -1,   413,    -1,   155,    -1,   269,    -1,     9,    -1,     5,
2139:       -1,     3,    -1,   868,    -1,   869,    -1,   799,    -1,     5,
2140:       -1,     3,    -1,   868,    -1,   873,    -1,     3,    -1,   868,
2141:       -1,   870,    -1,     3,    -1,   868,    -1,   871,    -1,   799,
2142:       -1,   799,   805,    -1,   489,   794,    -1,   805,   489,   794,
2143:       -1,   487,   792,   488,    -1,    -1,   801,    -1,     3,    -1,
2144:      872,    -1,   868,    -1,   874,    -1,   808,    -1,     5,    -1,
2145:      309,   793,   811,    36,   812,    -1,   487,   760,   488,    -1,
2146:       -1,   624,    -1,   518,    -1,   606,    -1,   851,    -1,    92,
2147:      352,   799,   814,    -1,    92,   352,   185,   264,   149,   799,
2148:      814,    -1,   814,   815,    -1,    -1,   550,    -1,   816,    -1,
2149:      537,    -1,   863,    -1,    92,   822,   194,   819,   820,   279,
2150:      791,   818,   487,   534,   488,   821,   690,    -1,    92,   822,
2151:      194,   819,   185,   264,   149,   578,   279,   791,   818,   487,
2152:      534,   488,   821,   690,    -1,   799,    -1,   430,   817,    -1,
2153:       -1,    81,    -1,    -1,   578,    -1,    -1,   449,   563,    -1,
2154:       -1,   423,    -1,    -1,    29,   395,   684,   366,   352,   793,
2155:       -1,    29,   395,   185,   149,   684,   366,   352,   793,    -1,
2156:       29,   360,   791,   366,   352,   793,    -1,    29,   360,   185,
2157:      149,   791,   366,   352,   793,    -1,    29,   442,   791,   366,
2158:      352,   793,    -1,    29,   442,   185,   149,   791,   366,   352,
2159:      793,    -1,   163,    68,    -1,    68,    -1,   151,   107,   798,
2160:      614,    -1,   190,   107,   798,    -1,   150,   830,    -1,   150,
2161:      834,   828,   830,    -1,   150,   440,   830,    -1,   150,   487,
2162:      833,   488,   830,    -1,   440,    -1,    -1,   835,    -1,   544,
2163:       -1,    -1,   624,    -1,   518,    -1,   606,    -1,   851,    -1,
2164:      865,    -1,     3,    -1,   868,    -1,   872,    -1,   831,    -1,
2165:      798,    -1,   836,    -1,   833,   491,   836,    -1,    32,    -1,
2166:       31,    -1,   413,    -1,   155,    -1,   279,    -1,   832,    -1,
2167:      837,   829,    -1,   831,    -1,   834,    -1,   366,   839,    -1,
2168:      366,   230,   839,    -1,   366,   364,   839,    -1,   366,   173,
2169:      839,    -1,   840,    -1,   861,   167,    96,    -1,   404,   470,
2170:      842,    -1,   352,   798,    -1,   861,   406,   843,    -1,   861,
2171:      476,   843,    -1,   861,   406,   114,    -1,   861,   476,   114,
2172:       -1,   835,    -1,   544,    -1,   798,    -1,     3,    -1,   715,
2173:      798,   725,    -1,   715,   487,   797,   488,   798,    -1,   544,
2174:       -1,   114,    -1,   230,    -1,   841,    -1,   843,   491,   841,
2175:       -1,   229,   845,    -1,   798,    -1,   431,   848,   850,   828,
2176:       -1,   431,   848,   850,   828,   791,    -1,   431,   848,   850,
2177:      828,   855,    -1,   431,   487,   849,   488,    -1,   431,   487,
2178:      849,   488,   791,   806,    -1,   834,    -1,   440,    -1,   166,
2179:       -1,   168,    -1,     3,    -1,   168,    -1,    -1,   847,    -1,
2180:      849,   491,   847,    -1,   166,    -1,    -1,   522,   119,   167,
2181:      852,   854,   853,   527,    -1,   684,    -1,   684,   799,    -1,
2182:      684,    36,   799,    -1,   446,   726,    -1,    -1,   430,   675,
2183:       -1,    -1,   834,   828,    -1,   834,   828,   791,   806,    -1,
2184:      337,   858,    -1,   861,    -1,    27,    -1,   857,    -1,   404,
2185:      470,    -1,   408,   214,   225,    -1,   860,   624,    -1,   391,
2186:      624,    -1,   391,   861,    -1,   860,   861,    -1,   860,   404,
2187:      470,    -1,   860,   408,   214,   225,    -1,   860,    27,    -1,
2188:      370,    -1,   124,    -1,   799,    -1,   861,   489,   799,    -1,
2189:       56,   729,    -1,    92,   594,   442,   791,   584,   821,    36,
2190:      624,   864,    -1,    92,   284,   335,   594,   442,   791,   584,
2191:      821,    36,   624,   864,    -1,    92,   594,   325,   442,   791,
2192:      487,   588,   488,   821,    36,   624,   864,    -1,    92,   284,
2193:      335,   594,   325,   442,   791,   487,   588,   488,   821,    36,
2194:      624,   864,    -1,   449,    67,   282,    -1,   449,    59,    67,
2195:      282,    -1,   449,   230,    67,   282,    -1,    -1,    92,   594,
2196:      395,   867,    36,   624,   866,    -1,    92,   594,   395,   185,
2197:      264,   149,   867,    36,   624,   866,    -1,   449,   106,    -1,
2198:      449,   262,   106,    -1,    -1,   791,   584,   570,   562,    -1,
2199:       19,    -1,    20,    -1,    21,    -1,    22,    -1,    23,    -1,
2200:       24,    -1,    25,    -1,    26,    -1,    28,    -1,    29,    -1,
2201:       30,    -1,    38,    -1,    39,    -1,    41,    -1,    42,    -1,
2202:       43,    -1,    45,    -1,    46,    -1,    47,    -1,    54,    -1,
2203:       55,    -1,    56,    -1,    57,    -1,    58,    -1,    59,    -1,
2204:       62,    -1,    63,    -1,    66,    -1,    68,    -1,    69,    -1,
2205:       70,    -1,    71,    -1,    76,    -1,    77,    -1,    78,    -1,
2206:       79,    -1,    80,    -1,    82,    -1,    83,    -1,    84,    -1,
2207:       86,    -1,    87,    -1,    88,    -1,    89,    -1,    90,    -1,
2208:       91,    -1,    94,    -1,    95,    -1,    96,    -1,   104,    -1,
2209:      105,    -1,   106,    -1,   107,    -1,   108,    -1,   109,    -1,
2210:      110,    -1,   113,    -1,   115,    -1,   117,    -1,   118,    -1,
2211:      119,    -1,   120,    -1,   121,    -1,   122,    -1,   124,    -1,
2212:      125,    -1,   126,    -1,   127,    -1,   128,    -1,   131,    -1,
2213:      132,    -1,   133,    -1,   134,    -1,   135,    -1,   137,    -1,
2214:      138,    -1,   139,    -1,   141,    -1,   142,    -1,   143,    -1,
2215:      145,    -1,   146,    -1,   147,    -1,   148,    -1,   150,    -1,
2216:      151,    -1,   152,    -1,   153,    -1,   156,    -1,   158,    -1,
2217:      159,    -1,   161,    -1,   163,    -1,   165,    -1,   169,    -1,
2218:      170,    -1,   171,    -1,   173,    -1,   175,    -1,   178,    -1,
2219:      180,    -1,   181,    -1,   182,    -1,   183,    -1,   184,    -1,
2220:      185,    -1,   187,    -1,   188,    -1,   189,    -1,   190,    -1,
2221:      192,    -1,   193,    -1,   194,    -1,   195,    -1,   196,    -1,
2222:      197,    -1,   199,    -1,   202,    -1,   203,    -1,   204,    -1,
2223:      205,    -1,   211,    -1,   214,    -1,   216,    -1,   217,    -1,
2224:      218,    -1,   219,    -1,   220,    -1,   223,    -1,   225,    -1,
2225:      228,    -1,   229,    -1,   230,    -1,   233,    -1,   234,    -1,
2226:      235,    -1,   236,    -1,   237,    -1,   239,    -1,   240,    -1,
2227:      241,    -1,   242,    -1,   243,    -1,   244,    -1,   245,    -1,
2228:      246,    -1,   247,    -1,   248,    -1,   249,    -1,   250,    -1,
2229:      251,    -1,   252,    -1,   253,    -1,   254,    -1,   255,    -1,
2230:      256,    -1,   260,    -1,   261,    -1,   262,    -1,   265,    -1,
2231:      266,    -1,   268,    -1,   271,    -1,   273,    -1,   274,    -1,
2232:      275,    -1,   277,    -1,   278,    -1,   281,    -1,   282,    -1,
2233:      283,    -1,   286,    -1,   289,    -1,   292,    -1,   293,    -1,
2234:      294,    -1,   295,    -1,   296,    -1,   297,    -1,   298,    -1,
2235:      299,    -1,   300,    -1,   301,    -1,   303,    -1,   304,    -1,
2236:      306,    -1,   307,    -1,   309,    -1,   310,    -1,   311,    -1,
2237:      313,    -1,   314,    -1,   315,    -1,   316,    -1,   317,    -1,
2238:      318,    -1,   319,    -1,   320,    -1,   321,    -1,   323,    -1,
2239:      324,    -1,   325,    -1,   326,    -1,   328,    -1,   329,    -1,
2240:      330,    -1,   331,    -1,   332,    -1,   333,    -1,   334,    -1,
2241:      335,    -1,   336,    -1,   337,    -1,   338,    -1,   339,    -1,
2242:      341,    -1,   342,    -1,   344,    -1,   345,    -1,   346,    -1,
2243:      348,    -1,   349,    -1,   350,    -1,   351,    -1,   352,    -1,
2244:      353,    -1,   354,    -1,   355,    -1,   356,    -1,   357,    -1,
2245:      358,    -1,   360,    -1,   361,    -1,   362,    -1,   363,    -1,
2246:      364,    -1,   366,    -1,   368,    -1,   369,    -1,   370,    -1,
2247:      372,    -1,   373,    -1,   375,    -1,   377,    -1,   378,    -1,
2248:      379,    -1,   380,    -1,   381,    -1,   382,    -1,   383,    -1,
2249:      384,    -1,   385,    -1,   386,    -1,   387,    -1,   389,    -1,
2250:      391,    -1,   393,    -1,   394,    -1,   396,    -1,   398,    -1,
2251:      399,    -1,   400,    -1,   401,    -1,   402,    -1,   408,    -1,
2252:      409,    -1,   411,    -1,   414,    -1,   415,    -1,   417,    -1,
2253:      418,    -1,   419,    -1,   420,    -1,   421,    -1,   424,    -1,
2254:      425,    -1,   426,    -1,   427,    -1,   428,    -1,   431,    -1,
2255:      432,    -1,   433,    -1,   434,    -1,   435,    -1,   439,    -1,
2256:      441,    -1,   442,    -1,   443,    -1,   444,    -1,   447,    -1,
2257:      450,    -1,   451,    -1,   452,    -1,   453,    -1,   454,    -1,
2258:      455,    -1,   467,    -1,   468,    -1,   469,    -1,   470,    -1,
2259:       48,    -1,    49,    -1,    51,    -1,    52,    -1,    64,    -1,
2260:       65,    -1,    72,    -1,   111,    -1,   112,    -1,   149,    -1,
2261:      154,    -1,   160,    -1,   177,    -1,   201,    -1,   206,    -1,
2262:      207,    -1,   209,    -1,   238,    -1,   257,    -1,   259,    -1,
2263:      263,    -1,   270,    -1,   272,    -1,   287,    -1,   291,    -1,
2264:      305,    -1,   308,    -1,   322,    -1,   347,    -1,   367,    -1,
2265:      374,    -1,   388,    -1,   390,    -1,   404,    -1,   405,    -1,
2266:      410,    -1,   412,    -1,   416,    -1,   436,    -1,   437,    -1,
2267:      456,    -1,   457,    -1,   458,    -1,   459,    -1,   460,    -1,
2268:      461,    -1,   462,    -1,   463,    -1,   464,    -1,   465,    -1,
2269:      466,    -1,    44,    -1,    50,    -1,    74,    -1,    81,    -1,
2270:       93,    -1,   100,    -1,   166,    -1,   168,    -1,   172,    -1,
2271:      186,    -1,   200,    -1,   212,    -1,   213,    -1,   215,    -1,
2272:      224,    -1,   226,    -1,   238,    -1,   258,    -1,   267,    -1,
2273:      288,    -1,   290,    -1,   343,    -1,   371,    -1,   388,    -1,
2274:      397,    -1,   440,    -1,    44,    -1,    50,    -1,    74,    -1,
2275:       81,    -1,    93,    -1,   100,    -1,   166,    -1,   168,    -1,
2276:      172,    -1,   186,    -1,   200,    -1,   212,    -1,   213,    -1,
2277:      215,    -1,   224,    -1,   226,    -1,   258,    -1,   267,    -1,
2278:      288,    -1,   290,    -1,   343,    -1,   371,    -1,   397,    -1,
2279:      416,    -1,   440,    -1,    48,    -1,    49,    -1,    51,    -1,
2280:       52,    -1,    65,    -1,    64,    -1,    72,    -1,   111,    -1,
2281:      112,    -1,   149,    -1,   154,    -1,   160,    -1,   177,    -1,
2282:      201,    -1,   207,    -1,   209,    -1,   206,    -1,   238,    -1,
2283:      257,    -1,   259,    -1,   263,    -1,   270,    -1,   272,    -1,
2284:      287,    -1,   291,    -1,   305,    -1,   308,    -1,   322,    -1,
2285:      347,    -1,   367,    -1,   374,    -1,   388,    -1,   390,    -1,
2286:      404,    -1,   405,    -1,   410,    -1,   412,    -1,   416,    -1,
2287:      436,    -1,   437,    -1,   456,    -1,   457,    -1,   458,    -1,
2288:      459,    -1,   460,    -1,   461,    -1,   462,    -1,   463,    -1,
2289:      464,    -1,   465,    -1,   466,    -1,    44,    -1,    50,    -1,
2290:       74,    -1,    81,    -1,    93,    -1,   100,    -1,   166,    -1,
2291:      168,    -1,   172,    -1,   186,    -1,   200,    -1,   212,    -1,
2292:      213,    -1,   215,    -1,   224,    -1,   226,    -1,   238,    -1,
2293:      258,    -1,   267,    -1,   288,    -1,   290,    -1,   343,    -1,
2294:      371,    -1,   388,    -1,   397,    -1,   416,    -1,   440,    -1,
2295:       27,    -1,    31,    -1,    32,    -1,    33,    -1,    34,    -1,
2296:       35,    -1,    36,    -1,    37,    -1,    40,    -1,    53,    -1,
2297:       60,    -1,    61,    -1,    67,    -1,    73,    -1,    75,    -1,
2298:       85,    -1,    92,    -1,    97,    -1,    98,    -1,    99,    -1,
2299:      101,    -1,   102,    -1,   103,    -1,   114,    -1,   116,    -1,
2300:      123,    -1,   129,    -1,   130,    -1,   136,    -1,   140,    -1,
2301:      144,    -1,   155,    -1,   157,    -1,   162,    -1,   164,    -1,
2302:      167,    -1,   174,    -1,   176,    -1,   179,    -1,   191,    -1,
2303:      198,    -1,   208,    -1,   210,    -1,   221,    -1,   222,    -1,
2304:      227,    -1,   231,    -1,   232,    -1,   264,    -1,   269,    -1,
2305:      276,    -1,   279,    -1,   280,    -1,   284,    -1,   285,    -1,
2306:      302,    -1,   312,    -1,   327,    -1,   340,    -1,   359,    -1,
2307:      365,    -1,   376,    -1,   392,    -1,   395,    -1,   403,    -1,
2308:      406,    -1,   407,    -1,   413,    -1,   422,    -1,   423,    -1,
2309:      429,    -1,   430,    -1,   438,    -1,   445,    -1,   446,    -1,
2310:      448,    -1,   449,    -1
2311: };
2312: 
2313: /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
2314: static const yytype_uint16 yyrline[] =
2315: {
2316:        0,   463,   463,   479,   491,   500,   501,   502,   503,   504,
2317:      505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
2318:      515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
2319:      525,   526,   527,   528,   529,   530,   531,   532,   533,   535,
2320:        9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
2321:       93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
2322:      157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
2323:      253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
2324:      358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
2325:      428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
2326:       13,    19,    25,     7,    17,    18,    21,    23,     6,    15,
2327:       25,    35,    45,    55,    65,    75,    85,    95,   106,   117,
2328:      127,   140,   141,     8,    21,    27,    34,    40,    47,    57,
2329:       61,    70,    79,    88,    95,    96,   101,   113,   118,   143,
2330:      153,   163,   169,   180,   191,   206,   207,   213,   214,   219,
2331:      220,   226,   227,   231,   232,   237,   239,   245,   246,   250,
2332:      251,   256,     7,    14,    22,     9,    19,    32,    33,     7,
2333:       14,    31,    51,    52,     9,    17,    29,    30,    34,    35,
2334:       36,    41,    42,    43,    48,    52,    56,    60,    64,    68,
2335:       72,    76,    80,    84,    88,    92,    97,   101,   105,   112,
2336:      113,   117,   118,   119,     2,     9,    15,    21,    28,    35,
2337:       45,    46,    47,     7,    21,    41,    42,    69,    70,    71,
2338:       72,    73,    74,    78,    79,    84,    89,    90,    91,    92,
2339:       93,    98,   105,   106,   107,   124,   131,   138,   148,   158,
2340:      170,   179,   188,   207,   214,   219,   221,   223,   225,   228,
2341:      233,   234,   238,   239,   240,   241,   246,   250,   251,   256,
2342:      263,   268,   269,   270,   271,   272,   273,   274,   275,   281,
2343:      282,   286,   291,   298,   305,   312,   324,   325,   326,   327,
2344:      331,   336,   337,   338,   343,   348,   349,   350,   351,   352,
2345:      353,   358,   381,   385,   392,   393,   397,   401,   402,   403,
2346:      407,   411,   419,   420,   425,   426,   430,   438,   439,   444,
2347:      445,   449,   454,   458,   462,   467,   475,   476,   480,   481,
2348:      487,   498,   511,   525,   539,   553,   567,   590,   594,   601,
2349:      605,   613,   618,   625,   635,   636,   637,   638,   639,   646,
2350:      653,   654,   659,   660,     9,    19,    29,    39,    49,    59,
2351:       69,    79,    93,    94,    95,    96,    97,    98,    99,   100,
2352:      101,   102,   103,   104,   105,   106,   107,   112,   113,   114,
2353:      115,   116,   117,   118,   123,   124,   129,   130,   131,   136,
2354:      137,   138,   141,   142,     7,    18,    19,    23,    27,     7,
2355:        1,    30,    53,    54,    59,    63,    68,    72,    80,    81,
2356:       85,    86,    91,    92,    96,    97,   102,   103,   104,   105,
2357:      106,   111,   119,   123,   128,   129,   134,   138,   143,   147,
2358:      151,   155,   159,   163,   167,   171,   175,   179,   183,   187,
2359:      191,   195,   203,   209,   210,   211,   216,   220,    47,    48,
2360:       52,    53,    68,    69,    76,    84,    92,   100,   108,   116,
2361:      127,   128,   155,   170,   186,   187,   206,   210,   214,   231,
2362:      238,   245,   255,   256,   259,   271,   282,   290,   295,   300,
2363:      305,   310,   318,   326,   331,   336,   343,   344,   348,   349,
2364:      350,   357,   358,   362,   363,   367,   368,   372,   376,   377,
2365:      380,   389,   400,   401,   402,   405,   406,   407,   411,   412,
2366:      413,   414,   418,   419,   423,   425,   441,   443,   448,   451,
2367:      459,   463,   467,   471,   475,   479,   486,   491,   498,   499,
2368:      503,   507,   511,   515,   522,   529,   530,   535,   536,   540,
2369:      541,   549,   569,   570,   572,   577,   578,   582,   583,   586,
2370:      587,   612,   613,   617,   618,   622,   623,   627,   640,   641,
2371:      645,   646,   650,   651,   655,   656,   660,   671,   672,   673,
2372:      674,   678,   679,   684,   685,   686,   695,   701,   719,   720,
2373:      724,   725,   731,   737,   745,   753,   762,   771,   775,   801,
2374:      805,   818,   832,   847,   859,   875,   881,   886,   892,   899,
2375:      900,   908,   912,   916,   922,   929,   934,   935,   936,   937,
2376:      941,   942,   954,   955,   960,   967,   974,   981,  1013,  1024,
2377:     1037,  1042,  1043,  1046,  1047,  1050,  1051,  1056,  1057,  1062,
2378:     1066,  1072,  1093,  1101,  1114,  1117,  1121,  1121,  1123,  1128,
2379:     1135,  1140,  1146,  1151,  1157,  1163,  1172,  1174,  1177,  1181,
2380:     1182,  1183,  1184,  1185,  1186,  1191,  1211,  1212,  1213,  1214,
2381:     1225,  1239,  1240,  1246,  1251,  1256,  1261,  1266,  1271,  1276,
2382:     1281,  1287,  1293,  1299,  1306,  1328,  1337,  1341,  1349,  1353,
2383:     1361,  1373,  1394,  1398,  1404,  1408,  1421,  1429,  1439,  1441,
2384:     1443,  1445,  1447,  1449,  1454,  1455,  1462,  1471,  1479,  1488,
2385:     1499,  1507,  1508,  1509,  1513,  1513,  1516,  1516,  1519,  1519,
2386:     1522,  1522,  1525,  1525,  1528,  1528,  1531,  1531,  1534,  1534,
2387:     1537,  1539,  1541,  1543,  1545,  1547,  1549,  1551,  1553,  1558,
2388:     1563,  1569,  1576,  1581,  1587,  1593,  1624,  1626,  1628,  1636,
2389:     1651,  1653,  1655,  1657,  1659,  1661,  1663,  1665,  1667,  1669,
2390:     1671,  1673,  1675,  1677,  1680,  1682,  1684,  1687,  1689,  1691,
2391:     1693,  1696,  1701,  1706,  1713,  1718,  1725,  1730,  1738,  1743,
2392:     1752,  1760,  1768,  1776,  1794,  1802,  1810,  1818,  1826,  1834,
2393:     1838,  1842,  1846,  1854,  1862,  1878,  1886,  1894,  1902,  1910,
2394:     1918,  1926,  1930,  1934,  1938,  1942,  1950,  1958,  1966,  1974,
2395:     1994,  2016,  2027,  2034,  2048,  2064,  2066,  2068,  2070,  2072,
2396:     2074,  2076,  2078,  2080,  2082,  2084,  2086,  2088,  2090,  2092,
2397:     2094,  2096,  2098,  2100,  2102,  2106,  2110,  2114,  2128,  2129,
2398:     2130,  2137,  2149,  2164,  2176,  2178,  2190,  2201,  2225,  2238,
2399:     2242,  2248,  2255,  2262,  2272,  2279,  2307,  2342,  2353,  2354,
2400:     2361,  2367,  2371,  2375,  2379,  2383,  2387,  2391,  2395,  2399,
2401:     2403,  2407,  2411,  2415,  2419,  2423,  2427,  2429,  2431,  2435,
2402:     2444,  2449,  2456,  2471,  2478,  2482,  2486,  2490,  2494,  2508,
2403:     2509,  2513,  2514,  2522,  2523,  2527,  2528,  2533,  2541,  2543,
2404:     2557,  2560,  2587,  2588,  2591,  2592,  2603,  2609,  2616,  2625,
2405:     2642,  2687,  2695,  2703,  2711,  2719,  2740,  2741,  2744,  2745,
2406:     2749,  2759,  2760,  2762,  2763,  2764,  2767,  2768,  2771,  2772,
2407:     2773,  2774,  2775,  2776,  2777,  2778,  2779,  2780,  2781,  2782,
2408:     2785,  2787,  2792,  2794,  2799,  2801,  2803,  2805,  2807,  2809,
2409:     2811,  2813,  2827,  2829,  2833,  2837,  2844,  2849,  2856,  2860,
2410:     2866,  2870,  2879,  2890,  2891,  2895,  2899,  2906,  2907,  2908,
2411:     2909,  2910,  2911,  2912,  2913,  2914,  2915,  2925,  2929,  2936,
2412:     2943,  2944,  2960,  2964,  2969,  2973,  2988,  2993,  2997,  3000,
2413:     3003,  3004,  3005,  3008,  3015,  3025,  3039,  3040,  3044,  3055,
2414:     3056,  3059,  3060,  3063,  3067,  3074,  3078,  3086,  3097,  3098,
2415:     3102,  3103,  3107,  3108,  3111,  3112,  3122,  3123,  3127,  3128,
2416:     3131,  3147,  3155,  3163,  3178,  3196,  3197,  3200,  3201,  3204,
2417:     3208,  3209,  3212,  3213,  3214,  3224,  3225,  3236,  3240,  3267,
2418:     3269,  3274,  3276,  3286,  3289,  3300,  3304,  3308,  3320,  3324,
2419:     3333,  3340,  3372,  3376,  3380,  3384,  3388,  3392,  3396,  3402,
2420:     3403,  3419,  3420,  3421,  3424,  3425,  3431,  3432,  3433,  3436,
2421:     3437,  3438,  3441,  3442,  3443,  3446,  3447,  3450,  3452,  3457,
2422:     3458,  3461,  3469,  3470,  3471,  3472,  3475,  3476,     7,    18,
2423:       19,    23,    24,    25,    26,     7,    16,    34,    41,    46,
2424:       47,    48,    49,     8,    33,    62,    66,    67,    72,    73,
2425:       78,    79,    83,    84,    89,    90,     7,    16,    25,    34,
2426:       43,    52,     5,    11,     7,    20,     9,    16,    26,    33,
2427:       44,    45,    50,    51,    52,    57,    58,    59,    60,    61,
2428:       65,    66,    67,    72,    73,    78,    82,    90,    91,    96,
2429:       97,    98,   104,   109,   117,   118,    10,    16,    22,    28,
2430:       38,    39,    47,    58,    70,    78,    86,    93,   103,   105,
2431:      111,   115,   119,   134,   141,   142,   143,   147,   148,     7,
2432:       16,     8,    22,    36,    48,    56,    70,    71,    72,    73,
2433:       74,    87,    88,    93,    94,    98,    99,     7,    21,    25,
2434:       32,    43,    44,    50,    51,     9,    19,     2,     7,    14,
2435:       24,    25,    32,     3,    10,    17,    24,    31,    38,    45,
2436:       55,    55,    57,    58,     6,     8,    21,    34,    52,    74,
2437:       75,    76,    77,    11,    24,    41,    42,    43,    48,    61,
2438:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2439:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2440:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2441:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2442:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2443:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2444:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2445:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2446:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2447:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2448:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2449:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2450:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2451:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2452:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2453:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2454:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2455:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2456:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2457:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2458:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2459:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2460:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2461:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2462:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2463:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2464:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2465:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2466:       61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
2467:       61,    61,    61,    61,    61,    61,    61,    61,    61,    62,
2468:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2469:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2470:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2471:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2472:       62,    62,    62,    62,    62,    62,    62,    62,    62,    62,
2473:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2474:       63,    63,    63,    63,    63,    63,    63,    63,    63,    63,
2475:       63,    63,    63,    63,    63,    63,    64,    64,    64,    64,
2476:       64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2477:       64,    64,    64,    64,    64,    64,    64,    64,    64,    64,
2478:       64,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2479:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2480:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2481:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2482:       65,    65,    65,    65,    65,    65,    65,    65,    65,    65,
2483:       65,    65,    66,    66,    66,    66,    66,    66,    66,    66,
2484:       66,    66,    66,    66,    66,    66,    66,    66,    66,    66,
2485:       66,    66,    66,    66,    66,    66,    66,    66,    66,    67,
2486:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2487:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2488:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2489:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2490:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2491:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2492:       67,    67,    67,    67,    67,    67,    67,    67,    67,    67,
2493:       67,    67,    67,    67,    67,    67
2494: };
2495: #endif
2496: 
2497: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
2498: /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
2499:    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
2500: static const char *const yytname[] =
2501: {
2502:   "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
2503:   "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
2504:   "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
2505:   "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
2506:   "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
2507:   "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
2508:   "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
2509:   "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
2510:   "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
2511:   "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
2512:   "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
2513:   "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
2514:   "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY", "CONFIGURATION",
2515:   "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS", "CONTENT_P",
2516:   "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P", "CROSS", "CSV",
2517:   "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE", "CURRENT_ROLE",
2518:   "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP", "CURRENT_USER",
2519:   "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P", "DAYS_P", "DEALLOCATE",
2520:   "DEC", "DECIMAL_P", "DECLARE", "DEFAULT", "DEFAULTS", "DEFERRABLE",
2521:   "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER", "DELIMITERS", "DEPENDS",
2522:   "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY", "DISABLE_P", "DISCARD",
2523:   "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P", "DOUBLE_P", "DROP", "EACH",
2524:   "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE",
2525:   "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING", "EXCLUSIVE", "EXECUTE",
2526:   "EXISTS", "EXPLAIN", "EXPORT_P", "EXTENSION", "EXTERNAL", "EXTRACT",
2527:   "FALSE_P", "FAMILY", "FETCH", "FILTER", "FIRST_P", "FLOAT_P",
2528:   "FOLLOWING", "FOR", "FORCE", "FOREIGN", "FORWARD", "FREEZE", "FROM",
2529:   "FULL", "FUNCTION", "FUNCTIONS", "GENERATED", "GLOB", "GLOBAL", "GRANT",
2530:   "GRANTED", "GROUP_P", "GROUPING", "HANDLER", "HAVING", "HEADER_P",
2531:   "HOLD", "HOUR_P", "HOURS_P", "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE",
2532:   "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
2533:   "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
2534:   "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD",
2535:   "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS",
2536:   "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P",
2537:   "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE",
2538:   "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP",
2539:   "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING",
2540:   "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD", "MICROSECOND_P",
2541:   "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P", "MINUTE_P",
2542:   "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P", "MOVE", "NAME_P",
2543:   "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT", "NO", "NONE",
2544:   "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P", "NULLIF",
2545:   "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET", "OIDS", "OLD",
2546:   "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR", "ORDER",
2547:   "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
2548:   "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
2549:   "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
2550:   "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
2551:   "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
2552:   "PROCEDURE", "PROGRAM", "PUBLICATION", "QUOTE", "RANGE", "READ_P",
2553:   "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF", "REFERENCES",
2554:   "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P", "RELEASE", "RENAME",
2555:   "REPEATABLE", "REPLACE", "REPLICA", "RESET", "RESTART", "RESTRICT",
2556:   "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE", "ROLLBACK", "ROLLUP",
2557:   "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT", "SCHEMA", "SCHEMAS",
2558:   "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P", "SECURITY", "SELECT",
2559:   "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER", "SESSION",
2560:   "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW", "SIMILAR",
2561:   "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P", "STABLE",
2562:   "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN", "STDOUT",
2563:   "STORAGE", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING",
2564:   "SUMMARIZE", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
2565:   "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
2566:   "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
2567:   "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
2568:   "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
2569:   "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
2570:   "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
2571:   "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
2572:   "VERBOSE", "VERSION_P", "VIEW", "VIEWS", "VOLATILE", "WHEN", "WHERE",
2573:   "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK", "WRAPPER",
2574:   "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT",
2575:   "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI",
2576:   "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P",
2577:   "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
2578:   "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
2579:   "']'", "'('", "')'", "'.'", "';'", "','", "'{'", "'}'", "'#'", "'?'",
2580:   "':'", "$accept", "stmtblock", "stmtmulti", "stmt", "AlterTableStmt",
2581:   "alter_identity_column_option_list", "alter_column_default",
2582:   "alter_identity_column_option", "alter_generic_option_list",
2583:   "alter_table_cmd", "alter_using", "alter_generic_option_elem",
2584:   "alter_table_cmds", "alter_generic_options", "opt_set_data",
2585:   "DeallocateStmt", "CreateEnumStmt", "opt_enum_val_list", "enum_val_list",
2586:   "RenameStmt", "opt_column", "InsertStmt", "insert_rest", "insert_target",
2587:   "opt_conf_expr", "opt_with_clause", "insert_column_item", "set_clause",
2588:   "opt_on_conflict", "index_elem", "returning_clause", "override_kind",
2589:   "set_target_list", "opt_collate", "opt_class", "insert_column_list",
2590:   "set_clause_list", "index_params", "set_target", "PragmaStmt",
2591:   "CreateSeqStmt", "OptSeqOptList", "ExecuteStmt", "execute_param_clause",
2592:   "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
2593:   "opt_by", "SignedIconst", "TransactionStmt", "opt_transaction",
2594:   "CreateStmt", "ConstraintAttributeSpec", "def_arg",
2595:   "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
2596:   "ColConstraint", "ColConstraintElem", "generic_option_elem",
2597:   "key_update", "key_actions", "create_generic_options", "OnCommitOption",
2598:   "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
2599:   "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
2600:   "definition", "TableLikeOptionList", "generic_option_name",
2601:   "ConstraintAttributeElem", "columnDef", "generic_option_list",
2602:   "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
2603:   "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
2604:   "key_delete", "reloption_elem", "columnList", "func_type",
2605:   "ConstraintElem", "TableElementList", "key_match", "TableLikeClause",
2606:   "OptTemp", "generated_when", "DropStmt", "drop_type_any_name",
2607:   "drop_type_name", "any_name_list", "opt_drop_behavior",
2608:   "drop_type_name_on_any_name", "type_name_list", "CreateFunctionStmt",
2609:   "macro_alias", "param_list", "UpdateStmt", "CopyStmt", "copy_from",
2610:   "copy_delimiter", "copy_generic_opt_arg_list", "opt_using", "opt_as",
2611:   "opt_program", "copy_options", "copy_generic_opt_arg",
2612:   "copy_generic_opt_elem", "opt_oids", "copy_opt_list", "opt_binary",
2613:   "copy_opt_item", "copy_generic_opt_arg_list_item", "copy_file_name",
2614:   "copy_generic_opt_list", "SelectStmt", "select_with_parens",
2615:   "select_no_parens", "select_clause", "simple_select", "with_clause",
2616:   "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
2617:   "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
2618:   "opt_sort_clause", "sort_clause", "sortby_list", "sortby",
2619:   "opt_asc_desc", "opt_nulls_order", "select_limit", "opt_select_limit",
2620:   "limit_clause", "offset_clause", "sample_count", "sample_clause",
2621:   "opt_sample_func", "tablesample_entry", "tablesample_clause",
2622:   "opt_tablesample_clause", "opt_repeatable_clause", "select_limit_value",
2623:   "select_offset_value", "select_fetch_first_value", "I_or_F_const",
2624:   "row_or_rows", "first_or_next", "group_clause", "group_by_list",
2625:   "group_by_item", "empty_grouping_set", "having_clause",
2626:   "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
2627:   "for_locking_item", "for_locking_strength", "locked_rels_list",
2628:   "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
2629:   "table_ref", "joined_table", "alias_clause", "opt_alias_clause",
2630:   "func_alias_clause", "join_type", "join_outer", "join_qual",
2631:   "relation_expr", "func_table", "rowsfrom_item", "rowsfrom_list",
2632:   "opt_col_def_list", "opt_ordinality", "where_clause",
2633:   "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
2634:   "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
2635:   "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
2636:   "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
2637:   "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
2638:   "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
2639:   "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
2640:   "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
2641:   "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
2642:   "b_expr", "c_expr", "func_application", "func_expr",
2643:   "func_expr_windowless", "func_expr_common_subexpr",
2644:   "within_group_clause", "filter_clause", "window_clause",
2645:   "window_definition_list", "window_definition", "over_clause",
2646:   "window_specification", "opt_existing_window_name",
2647:   "opt_partition_clause", "opt_frame_clause", "frame_extent",
2648:   "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
2649:   "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
2650:   "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
2651:   "func_arg_expr", "type_list", "extract_list", "extract_arg",
2652:   "overlay_list", "overlay_placing", "position_list", "substr_list",
2653:   "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
2654:   "when_clause_list", "when_clause", "case_default", "case_arg",
2655:   "columnref", "indirection_el", "opt_slice_bound", "indirection",
2656:   "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
2657:   "target_el", "except_list", "opt_except_list", "replace_list_el",
2658:   "replace_list", "opt_replace_list", "qualified_name_list",
2659:   "qualified_name", "name_list", "name", "attr_name", "func_name",
2660:   "AexprConst", "Iconst", "Sconst", "ColId", "ColIdOrString",
2661:   "type_function_name", "function_name_token", "type_name_token",
2662:   "any_name", "attrs", "opt_name_list", "param_name", "ColLabel",
2663:   "ColLabelOrString", "PrepareStmt", "prep_type_clause", "PreparableStmt",
2664:   "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt", "IndexStmt",
2665:   "access_method", "access_method_clause", "opt_concurrently",
2666:   "opt_index_name", "opt_reloptions", "opt_unique",
2667:   "AlterObjectSchemaStmt", "CheckPointStmt", "ExportStmt", "ImportStmt",
2668:   "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
2669:   "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
2670:   "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
2671:   "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
2672:   "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
2673:   "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
2674:   "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
2675:   "where_or_current_clause", "using_clause", "AnalyzeStmt",
2676:   "VariableResetStmt", "generic_reset", "reset_rest", "VariableShowStmt",
2677:   "show_or_describe", "var_name", "CallStmt", "ViewStmt",
2678:   "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
2679:   "unreserved_keyword", "col_name_keyword", "func_name_keyword",
2680:   "type_name_keyword", "other_keyword", "type_func_name_keyword",
2681:   "reserved_keyword", 0
2682: };
2683: #endif
2684: 
2685: # ifdef YYPRINT
2686: /* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
2687:    token YYLEX-NUM.  */
2688: static const yytype_uint16 yytoknum[] =
2689: {
2690:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
2691:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
2692:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
2693:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
2694:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
2695:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
2696:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
2697:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
2698:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
2699:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
2700:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
2701:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
2702:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
2703:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
2704:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
2705:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
2706:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
2707:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
2708:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
2709:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
2710:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
2711:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
2712:      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
2713:      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
2714:      495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
2715:      505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
2716:      515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
2717:      525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
2718:      535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
2719:      545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
2720:      555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
2721:      565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
2722:      575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
2723:      585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
2724:      595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
2725:      605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
2726:      615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
2727:      625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
2728:      635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
2729:      645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
2730:      655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
2731:      665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
2732:      675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
2733:      685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
2734:      695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
2735:      705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
2736:      715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
2737:      725,   726,   727,   728,    60,    62,    61,   729,    43,    45,
2738:       42,    47,    37,    94,   730,    91,    93,    40,    41,    46,
2739:       59,    44,   123,   125,    35,    63,    58
2740: };
2741: # endif
2742: 
2743: /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
2744: static const yytype_uint16 yyr1[] =
2745: {
2746:        0,   497,   498,   499,   499,   500,   500,   500,   500,   500,
2747:      500,   500,   500,   500,   500,   500,   500,   500,   500,   500,
2748:      500,   500,   500,   500,   500,   500,   500,   500,   500,   500,
2749:      500,   500,   500,   500,   500,   500,   500,   500,   500,   500,
2750:      501,   501,   501,   501,   501,   501,   501,   501,   502,   502,
2751:      503,   503,   504,   504,   504,   504,   505,   505,   506,   506,
2752:      506,   506,   506,   506,   506,   506,   506,   506,   506,   506,
2753:      506,   506,   506,   506,   506,   506,   506,   506,   506,   506,
2754:      506,   506,   506,   506,   506,   506,   506,   507,   507,   508,
2755:      508,   508,   508,   509,   509,   510,   511,   511,   511,   512,
2756:      512,   512,   512,   513,   514,   514,   515,   515,   516,   516,
2757:      516,   516,   516,   516,   516,   516,   516,   516,   516,   516,
2758:      516,   517,   517,   518,   519,   519,   519,   519,   519,   520,
2759:      520,   521,   521,   521,   522,   522,   523,   524,   524,   525,
2760:      525,   525,   526,   526,   526,   527,   527,   528,   528,   529,
2761:      529,   530,   530,   531,   531,   532,   532,   533,   533,   534,
2762:      534,   535,   536,   536,   536,   537,   537,   538,   538,   539,
2763:      539,   539,   540,   540,   541,   541,   542,   542,   543,   543,
2764:      543,   544,   544,   544,   544,   545,   545,   545,   545,   545,
2765:      545,   545,   545,   545,   545,   545,   545,   545,   545,   546,
2766:      546,   547,   547,   547,   548,   548,   548,   548,   548,   548,
2767:      549,   549,   549,   550,   550,   551,   551,   552,   552,   552,
2768:      552,   552,   552,   553,   553,   554,   555,   555,   555,   555,
2769:      555,   556,   556,   556,   556,   557,   557,   557,   557,   557,
2770:      557,   557,   557,   558,   559,   560,   560,   560,   560,   560,
2771:      561,   561,   562,   562,   562,   562,   563,   564,   564,   565,
2772:      565,   566,   566,   566,   566,   566,   566,   566,   566,   567,
2773:      567,   568,   569,   569,   569,   569,   570,   570,   570,   570,
2774:      571,   572,   572,   572,   573,   574,   574,   574,   574,   574,
2775:      574,   575,   576,   576,   577,   577,   578,   579,   579,   579,
2776:      580,   580,   581,   581,   582,   582,   583,   584,   584,   585,
2777:      585,   586,   587,   587,   587,   587,   588,   588,   589,   589,
2778:      589,   590,   590,   590,   590,   590,   590,   591,   591,   592,
2779:      592,   592,   592,   593,   594,   594,   594,   594,   594,   594,
2780:      594,   594,   595,   595,   596,   596,   596,   596,   596,   596,
2781:      596,   596,   597,   597,   597,   597,   597,   597,   597,   597,
2782:      597,   597,   597,   597,   597,   597,   597,   598,   598,   598,
2783:      598,   598,   598,   598,   599,   599,   600,   600,   600,   601,
2784:      601,   601,   602,   602,   603,   604,   604,   605,   605,   606,
2785:      607,   607,   608,   608,   609,   609,   610,   610,   611,   611,
2786:      612,   612,   613,   613,   614,   614,   615,   615,   615,   615,
2787:      615,   616,   617,   617,   618,   618,   619,   619,   620,   620,
2788:      620,   620,   620,   620,   620,   620,   620,   620,   620,   620,
2789:      620,   620,   621,   622,   622,   622,   623,   623,   624,   624,
2790:      625,   625,   626,   626,   626,   626,   626,   626,   626,   626,
2791:      627,   627,   628,   628,   628,   628,   628,   628,   628,   629,
2792:      629,   629,   630,   630,   631,   632,   632,   633,   633,   633,
2793:      633,   633,   633,   633,   633,   633,   634,   634,   635,   635,
2794:      635,   636,   636,   637,   637,   638,   638,   639,   640,   640,
2795:      641,   641,   642,   642,   642,   643,   643,   643,   644,   644,
2796:      644,   644,   645,   645,   646,   646,   646,   646,   647,   647,
2797:      648,   648,   648,   648,   648,   648,   649,   649,   650,   650,
2798:      651,   651,   651,   651,   652,   653,   653,   654,   654,   655,
2799:      655,   656,   657,   657,   657,   658,   658,   659,   659,   660,
2800:      660,   661,   661,   662,   662,   663,   663,   664,   665,   665,
2801:      666,   666,   667,   667,   668,   668,   669,   670,   670,   670,
2802:      670,   671,   671,   672,   672,   672,   673,   673,   674,   674,
2803:      675,   675,   676,   676,   676,   676,   676,   676,   676,   677,
2804:      677,   677,   677,   677,   677,   678,   678,   678,   678,   679,
2805:      679,   680,   680,   680,   680,   680,   681,   681,   681,   681,
2806:      682,   682,   683,   683,   684,   684,   684,   684,   685,   685,
2807:      686,   687,   687,   688,   688,   689,   689,   690,   690,   691,
2808:      691,   692,   693,   693,   694,   694,   695,   695,   696,   696,
2809:      696,   696,   696,   696,   696,   696,   697,   697,   697,   698,
2810:      698,   698,   698,   698,   698,   698,   699,   699,   699,   699,
2811:      700,   701,   701,   702,   702,   702,   702,   702,   702,   702,
2812:      702,   702,   702,   702,   703,   703,   704,   704,   705,   705,
2813:      706,   707,   708,   708,   709,   709,   710,   711,   712,   712,
2814:      712,   712,   712,   712,   713,   713,   714,   714,   714,   714,
2815:      715,   716,   716,   716,   717,   717,   718,   718,   719,   719,
2816:      720,   720,   721,   721,   722,   722,   723,   723,   724,   724,
2817:      725,   725,   725,   725,   725,   725,   725,   725,   725,   725,
2818:      725,   725,   725,   725,   725,   725,   726,   726,   726,   726,
2819:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2820:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2821:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2822:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2823:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2824:      726,   726,   726,   726,   726,   726,   726,   726,   726,   726,
2825:      726,   726,   726,   726,   726,   727,   727,   727,   727,   727,
2826:      727,   727,   727,   727,   727,   727,   727,   727,   727,   727,
2827:      727,   727,   727,   727,   727,   727,   727,   727,   728,   728,
2828:      728,   728,   728,   728,   728,   728,   728,   728,   728,   729,
2829:      729,   729,   729,   729,   729,   729,   730,   730,   731,   731,
2830:      732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
2831:      732,   732,   732,   732,   732,   732,   732,   732,   732,   732,
2832:      732,   732,   732,   732,   732,   732,   732,   732,   732,   733,
2833:      733,   734,   734,   735,   735,   736,   736,   737,   738,   738,
2834:      738,   739,   740,   740,   741,   741,   742,   742,   742,   743,
2835:      743,   744,   744,   744,   744,   744,   745,   745,   746,   746,
2836:      747,   748,   748,   749,   749,   749,   750,   750,   751,   751,
2837:      751,   751,   751,   751,   751,   751,   751,   751,   751,   751,
2838:      752,   752,   753,   753,   754,   754,   754,   754,   754,   754,
2839:      754,   754,   755,   755,   756,   756,   757,   757,   758,   758,
2840:      759,   759,   759,   760,   760,   761,   761,   762,   762,   762,
2841:      762,   762,   762,   762,   762,   762,   762,   763,   763,   764,
2842:      765,   765,   766,   766,   766,   766,   766,   766,   767,   768,
2843:      769,   769,   769,   770,   770,   771,   772,   772,   773,   774,
2844:      774,   775,   775,   776,   776,   777,   777,   777,   778,   778,
2845:      779,   779,   780,   780,   781,   781,   782,   782,   783,   783,
2846:      784,   784,   784,   784,   784,   785,   785,   786,   786,   787,
2847:      788,   788,   789,   789,   789,   790,   790,   791,   791,   792,
2848:      792,   793,   794,   795,   795,   796,   796,   796,   796,   796,
2849:      796,   796,   796,   796,   796,   796,   796,   796,   796,   797,
2850:      798,   799,   799,   799,   800,   800,   801,   801,   801,   802,
2851:      802,   802,   803,   803,   803,   804,   804,   805,   805,   806,
2852:      806,   807,   808,   808,   808,   808,   809,   809,   810,   811,
2853:      811,   812,   812,   812,   812,   813,   813,   814,   814,   815,
2854:      815,   815,   815,   816,   816,   817,   818,   818,   819,   819,
2855:      820,   820,   821,   821,   822,   822,   823,   823,   823,   823,
2856:      823,   823,   824,   824,   825,   826,   827,   827,   827,   827,
2857:      828,   828,   829,   829,   829,   830,   830,   830,   830,   830,
2858:      831,   831,   831,   832,   832,   833,   833,   834,   834,   835,
2859:      835,   835,   835,   836,   837,   837,   838,   838,   838,   838,
2860:      839,   839,   839,   839,   840,   840,   840,   840,   841,   841,
2861:      842,   842,   842,   842,   842,   842,   842,   843,   843,   844,
2862:      845,   846,   846,   846,   846,   846,   847,   847,   847,   847,
2863:      847,   848,   848,   849,   849,   850,   850,   851,   852,   852,
2864:      852,   853,   853,   854,   854,   855,   855,   856,   857,   857,
2865:      858,   858,   858,   859,   859,   859,   859,   859,   859,   859,
2866:      860,   860,   861,   861,   862,   863,   863,   863,   863,   864,
2867:      864,   864,   864,   865,   865,   866,   866,   866,   867,   868,
2868:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2869:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2870:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2871:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2872:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2873:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2874:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2875:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2876:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2877:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2878:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2879:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2880:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2881:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2882:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2883:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2884:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2885:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2886:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2887:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2888:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2889:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2890:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2891:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2892:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2893:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2894:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2895:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2896:      868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
2897:      868,   868,   868,   868,   868,   868,   868,   868,   868,   869,
2898:      869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
2899:      869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
2900:      869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
2901:      869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
2902:      869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
2903:      870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
2904:      870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
2905:      870,   870,   870,   870,   870,   870,   871,   871,   871,   871,
2906:      871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
2907:      871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
2908:      871,   872,   872,   872,   872,   872,   872,   872,   872,   872,
2909:      872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
2910:      872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
2911:      872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
2912:      872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
2913:      872,   872,   873,   873,   873,   873,   873,   873,   873,   873,
2914:      873,   873,   873,   873,   873,   873,   873,   873,   873,   873,
2915:      873,   873,   873,   873,   873,   873,   873,   873,   873,   874,
2916:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2917:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2918:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2919:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2920:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2921:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2922:      874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
2923:      874,   874,   874,   874,   874,   874
2924: };
2925: 
2926: /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
2927: static const yytype_uint8 yyr2[] =
2928: {
2929:        0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
2930:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2931:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2932:        1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
2933:        4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
2934:        3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
2935:        3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
2936:        4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
2937:        6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
2938:        2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
2939:        3,     2,     3,     8,     1,     0,     1,     3,     6,     6,
2940:        8,     6,     8,     6,     8,     6,     8,     8,    10,     8,
2941:       10,     1,     0,     7,     1,     4,     4,     7,     2,     1,
2942:        3,     4,     3,     0,     1,     0,     2,     3,     5,     8,
2943:        5,     0,     5,     5,     7,     2,     0,     1,     1,     1,
2944:        3,     2,     0,     1,     0,     1,     3,     1,     3,     1,
2945:        3,     2,     2,     4,     5,     5,     8,     1,     0,     3,
2946:        9,    12,     3,     0,     4,     6,     1,     2,     1,     1,
2947:        0,     1,     2,     2,     1,     2,     2,     1,     2,     3,
2948:        2,     2,     2,     2,     3,     3,     3,     1,     3,     1,
2949:        0,     1,     2,     2,     2,     2,     2,     2,     2,     2,
2950:        1,     1,     0,     9,    12,     0,     2,     1,     1,     1,
2951:        1,     1,     1,     3,     0,     1,     2,     1,     1,     2,
2952:        2,     3,     1,     1,     2,     2,     1,     2,     3,     5,
2953:        2,     5,     5,     2,     3,     1,     1,     2,     2,     0,
2954:        4,     0,     3,     4,     4,     0,     3,     2,     0,     3,
2955:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2956:        3,     3,     1,     2,     2,     2,     2,     2,     2,     0,
2957:        3,     3,     3,     0,     1,     2,     1,     2,     2,     2,
2958:        2,     4,     1,     3,     1,     3,     1,     1,     1,     1,
2959:        3,     1,     2,     0,     1,     0,     1,     3,     0,     2,
2960:        0,     3,     3,     1,     5,     3,     1,     3,     1,     4,
2961:        5,     5,     6,     3,     7,     4,    11,     1,     3,     2,
2962:        2,     2,     0,     3,     1,     1,     2,     2,     2,     2,
2963:        1,     0,     1,     2,     6,     4,     6,     4,     6,     8,
2964:        4,     6,     1,     1,     1,     1,     1,     2,     1,     2,
2965:        1,     1,     1,     3,     3,     3,     3,     2,     2,     1,
2966:        3,     1,     1,     1,     1,     3,     1,     1,     0,     1,
2967:        1,     1,     1,     3,     6,     1,     1,     2,     3,     8,
2968:       11,     9,     1,     1,     3,     0,     1,     3,     1,     0,
2969:        1,     0,     1,     0,     1,     3,     1,     1,     1,     3,
2970:        0,     2,     2,     0,     2,     0,     1,     0,     1,     1,
2971:        1,     3,     3,     1,     1,     3,     3,     3,     3,     4,
2972:        3,     2,     1,     1,     1,     1,     1,     3,     1,     1,
2973:        3,     3,     1,     2,     4,     4,     2,     3,     5,     5,
2974:        1,     1,    10,    10,     1,     2,     4,     4,     4,     2,
2975:        2,     3,     1,     3,     6,     2,     0,     3,     3,     4,
2976:        4,     4,     4,     3,     2,     1,     1,     0,     1,     1,
2977:        0,     1,     5,     1,     0,     1,     0,     3,     1,     3,
2978:        4,     3,     1,     1,     0,     2,     2,     0,     2,     2,
2979:        1,     1,     1,     0,     2,     4,     5,     4,     2,     3,
2980:        2,     2,     2,     2,     1,     2,     3,     0,     1,     0,
2981:        5,     1,     4,     6,     2,     1,     0,     4,     0,     1,
2982:        1,     1,     1,     2,     2,     1,     1,     1,     1,     1,
2983:        1,     3,     0,     1,     3,     1,     1,     2,     2,     0,
2984:        1,     3,     1,     0,     1,     2,     3,     2,     4,     2,
2985:        3,     2,     0,     1,     2,     0,     4,     5,     2,     0,
2986:        1,     3,     3,     3,     3,     3,     3,     1,     4,     3,
2987:        4,     5,     4,     5,     4,     5,     2,     4,     1,     1,
2988:        0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
2989:        1,     0,     4,     2,     1,     2,     2,     4,     2,     6,
2990:        2,     1,     3,     4,     0,     2,     0,     2,     0,     1,
2991:        3,     3,     2,     0,     2,     4,     1,     1,     2,     3,
2992:        5,     6,     2,     3,     5,     5,     3,     4,     0,     1,
2993:        1,     1,     1,     1,     2,     4,     1,     1,     1,     1,
2994:        2,     3,     0,     1,     1,     1,     1,     1,     2,     2,
2995:        2,     2,     2,     1,     3,     0,     1,     1,     1,     1,
2996:        5,     2,     1,     1,     1,     1,     4,     1,     2,     2,
2997:        1,     3,     3,     2,     1,     0,     5,     2,     5,     2,
2998:        1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
2999:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3000:        1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
3001:        3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
3002:        2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
3003:        3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
3004:        2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
3005:        4,     6,     5,     7,     3,     2,     4,     3,     2,     1,
3006:        3,     3,     3,     3,     3,     3,     4,     3,     4,     3,
3007:        4,     5,     6,     6,     7,     6,     7,     6,     7,     3,
3008:        4,     4,     6,     1,     4,     1,     3,     2,     2,     3,
3009:        3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
3010:        3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
3011:        2,     2,     2,     4,     1,     2,     1,     2,     2,     3,
3012:        5,     6,     8,     6,     6,     4,     4,     1,     1,     1,
3013:        5,     1,     1,     4,     1,     4,     1,     4,     1,     4,
3014:        1,     1,     1,     1,     1,     1,     6,     6,     4,     4,
3015:        4,     4,     6,     5,     5,     5,     4,     6,     4,     5,
3016:        0,     5,     0,     2,     0,     1,     3,     3,     2,     2,
3017:        0,     6,     1,     0,     3,     0,     2,     2,     0,     1,
3018:        4,     2,     2,     2,     2,     2,     4,     3,     1,     5,
3019:        3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
3020:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3021:        1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
3022:        1,     2,     1,     3,     1,     3,     1,     0,     1,     3,
3023:        1,     3,     3,     1,     3,     3,     0,     1,     1,     1,
3024:        1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
3025:        3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
3026:        3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
3027:        0,     1,     0,     1,     2,     2,     3,     5,     1,     0,
3028:        1,     2,     0,     2,     1,     0,     1,     0,     1,     3,
3029:        3,     2,     1,     3,     5,     4,     2,     1,     0,     3,
3030:        1,     3,     4,     2,     0,     1,     3,     1,     2,     1,
3031:        3,     1,     1,     1,     2,     1,     1,     2,     1,     1,
3032:        2,     6,     2,     5,     3,     3,     1,     1,     1,     1,
3033:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3034:        1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
3035:        0,     1,     1,     1,     1,     1,     1,     1,     5,     3,
3036:        0,     1,     1,     1,     1,     4,     7,     2,     0,     1,
3037:        1,     1,     1,    13,    16,     1,     2,     0,     1,     0,
3038:        1,     0,     2,     0,     1,     0,     6,     8,     6,     8,
3039:        6,     8,     2,     1,     4,     3,     2,     4,     3,     5,
3040:        1,     0,     1,     1,     0,     1,     1,     1,     1,     1,
3041:        1,     1,     1,     1,     1,     1,     3,     1,     1,     1,
3042:        1,     1,     1,     2,     1,     1,     2,     3,     3,     3,
3043:        1,     3,     3,     2,     3,     3,     3,     3,     1,     1,
3044:        1,     1,     3,     5,     1,     1,     1,     1,     3,     2,
3045:        1,     4,     5,     5,     4,     6,     1,     1,     1,     1,
3046:        1,     1,     0,     1,     3,     1,     0,     7,     1,     2,
3047:        3,     2,     0,     2,     0,     2,     4,     2,     1,     1,
3048:        1,     2,     3,     2,     2,     2,     2,     3,     4,     2,
3049:        1,     1,     1,     3,     2,     9,    11,    12,    14,     3,
3050:        4,     4,     0,     7,    10,     2,     3,     0,     4,     1,
3051:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3052:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3053:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3054:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3055:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3056:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3057:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3058:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3059:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3060:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3061:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3062:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3063:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3064:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3065:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3066:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3067:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3068:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3069:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3070:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3071:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3072:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3073:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3074:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3075:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3076:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3077:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3078:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3079:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3080:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3081:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3082:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3083:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3084:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3085:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3086:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3087:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3088:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3089:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3090:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3091:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3092:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3093:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3094:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3095:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3096:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3097:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3098:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3099:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3100:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3101:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3102:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3103:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3104:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3105:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3106:        1,     1,     1,     1,     1,     1
3107: };
3108: 
3109: /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
3110:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
3111:    means the default is an error.  */
3112: static const yytype_uint16 yydefact[] =
3113: {
3114:      135,   212,     0,  1128,  1127,   212,     0,  1103,   212,   417,
3115:      341,     0,  1201,     0,   212,     0,   135,     0,     0,     0,
3116:        0,     0,     0,     0,   212,   484,     0,  1200,   212,     0,
3117:        0,  1172,     0,     0,     0,     0,     0,     2,     4,     7,
3118:       18,    13,    30,    26,     0,    28,    16,    21,     6,    32,
3119:       17,    20,    14,    33,    11,    31,   451,   438,   486,   450,
3120:      134,   454,    29,    15,    25,     5,    10,    23,    24,    22,
3121:     1111,    36,    27,    34,    19,     8,    35,    37,     0,     9,
3122:       38,    12,   211,   210,   204,     0,     0,     0,     0,     0,
3123:      205,  1041,  1219,  1220,  1221,  1222,  1223,  1224,  1225,  1226,
3124:     1227,  1228,  1229,  1230,  1231,  1232,  1233,  1234,  1570,  1235,
3125:     1236,  1237,  1519,  1520,  1571,  1521,  1522,  1238,  1239,  1240,
3126:     1241,  1242,  1243,  1244,  1245,  1523,  1524,  1246,  1247,  1248,
3127:     1249,  1250,  1525,  1572,  1251,  1252,  1253,  1254,  1255,  1573,
3128:     1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1264,  1574,
3129:     1265,  1266,  1267,  1575,  1268,  1269,  1270,  1271,  1272,  1273,
3130:     1274,  1526,  1527,  1275,  1276,  1277,  1278,  1279,  1280,  1281,
3131:     1282,  1283,  1284,  1285,  1286,  1287,  1288,  1289,  1290,  1291,
3132:     1292,  1293,  1294,  1295,  1296,  1297,  1298,  1299,  1300,  1301,
3133:     1302,  1528,  1303,  1304,  1305,  1306,  1529,  1307,  1308,  1309,
3134:     1530,  1310,  1311,  1312,  1576,  1577,  1313,  1314,  1315,  1578,
3135:     1316,  1317,  1531,  1318,  1319,  1320,  1321,  1322,  1323,  1324,
3136:     1579,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,  1333,
3137:     1334,  1335,  1580,  1532,  1336,  1337,  1338,  1339,  1533,  1534,
3138:     1535,  1340,  1581,  1582,  1341,  1583,  1342,  1343,  1344,  1345,
3139:     1346,  1347,  1584,  1348,  1585,  1349,  1350,  1351,  1352,  1353,
3140:     1354,  1355,  1356,  1536,  1357,  1358,  1359,  1360,  1361,  1362,
3141:     1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,  1372,
3142:     1373,  1374,  1537,  1587,  1538,  1375,  1376,  1377,  1539,  1378,
3143:     1379,  1588,  1380,  1540,  1381,  1541,  1382,  1383,  1384,  1385,
3144:     1386,  1387,  1388,  1389,  1390,  1542,  1589,  1391,  1590,  1543,
3145:     1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,  1401,
3146:     1402,  1403,  1544,  1404,  1405,  1545,  1406,  1407,  1408,  1409,
3147:     1410,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1546,  1418,
3148:     1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,
3149:     1429,  1430,  1431,  1432,  1433,  1434,  1435,  1591,  1436,  1437,
3150:     1438,  1547,  1439,  1440,  1441,  1442,  1443,  1444,  1445,  1446,
3151:     1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1455,  1548,
3152:     1456,  1457,  1458,  1592,  1459,  1460,  1549,  1461,  1462,  1463,
3153:     1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1472,  1550,
3154:     1473,  1551,  1474,  1475,  1476,  1477,  1594,  1478,  1479,  1480,
3155:     1481,  1482,  1552,  1553,  1483,  1484,  1554,  1485,  1555,  1486,
3156:     1487,  1556,  1488,  1489,  1490,  1491,  1492,  1493,  1494,  1495,
3157:     1496,  1497,  1498,  1499,  1500,  1501,  1502,  1557,  1558,  1503,
3158:     1595,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,  1512,
3159:     1513,  1514,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,
3160:     1567,  1568,  1569,  1515,  1516,  1517,  1518,  1204,     0,     0,
3161:     1023,  1042,  1043,  1051,   207,   416,   135,     0,   385,     0,
3162:        0,   386,     0,     0,   335,   334,     0,  1094,   340,     0,
3163:        0,     0,  1041,   101,  1536,  1406,  1550,    99,  1021,  1042,
3164:        0,   360,   361,     0,   369,     0,   354,   358,   355,     0,
3165:      379,   371,   380,   372,   353,   373,   362,   352,     0,   381,
3166:        0,   356,     0,     0,     0,   208,   173,   341,   135,     0,
3167:     1116,  1117,  1115,  1106,  1111,  1118,  1119,     0,  1102,     0,
3168:     1040,  1160,  1159,   162,  1070,  1189,  1552,  1483,  1202,  1190,
3169:     1187,  1188,   209,   483,   481,     0,   997,  1316,  1351,  1443,
3170:     1454,  1552,  1136,  1140,     0,   206,  1557,  1194,     0,  1195,
3171:     1045,     0,   455,   604,  1044,  1017,  1171,     0,  1176,     0,
3172:     1420,   459,   462,  1060,   460,   451,     0,     1,   135,     0,
3173:        0,     0,   480,   480,     0,   480,     0,   443,   451,   446,
3174:      450,     0,  1110,  1185,  1199,  1552,  1483,  1193,  1196,  1324,
3175:        0,     0,  1324,     0,  1324,     0,  1324,     0,     0,   989,
3176:        0,   990,  1024,  1072,  1073,  1071,     0,  1074,   308,   339,
3177:      338,   337,   336,   341,  1324,  1078,  1055,     0,     0,     0,
3178:        0,     0,     0,  1089,   102,   100,   367,   368,     0,   359,
3179:      357,     0,  1052,  1596,   656,  1597,   685,   663,   685,   685,
3180:     1598,  1599,  1600,  1601,   652,   652,  1290,   665,  1602,  1603,
3181:     1604,  1324,  1605,  1606,   653,   654,   690,  1607,  1608,  1609,
3182:     1610,  1611,     0,     0,  1612,   685,  1613,   652,  1614,  1615,
3183:      657,  1616,   626,     0,  1617,   655,   627,  1618,   693,   693,
3184:     1619,   680,  1620,   378,     0,   382,   638,   639,   640,   641,
3185:      666,   667,   642,   672,   673,   677,   643,   725,   652,  1053,
3186:     1054,  1324,   378,   374,  1324,   378,  1019,  1324,     0,     0,
3187:      169,     0,  1108,  1120,  1621,  1622,  1623,  1624,  1626,  1625,
3188:     1627,  1628,  1629,  1630,  1631,  1632,  1633,  1634,  1637,  1635,
3189:     1636,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
3190:     1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
3191:     1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
3192:     1667,  1668,  1669,  1670,  1671,  1134,     0,  1135,  1125,  1114,
3193:     1121,  1122,   135,   415,  1105,     0,     0,     0,     0,  1191,
3194:        0,     0,     0,  1026,  1028,  1029,   920,  1039,   992,     0,
3195:     1520,  1521,  1522,   982,     0,  1523,  1524,  1525,  1572,   854,
3196:      841,   850,   855,   842,   844,   851,  1526,  1527,   793,  1528,
3197:     1529,  1037,  1530,  1533,  1534,  1535,   846,   848,  1537,  1538,
3198:        0,  1038,  1540,  1541,  1387,  1543,  1544,  1546,  1547,   852,
3199:     1549,  1551,  1552,  1553,  1554,  1555,  1036,  1556,   853,  1558,
3200:        0,     0,     0,  1008,   937,     0,     0,     0,   992,   826,
3201:        0,   646,   647,   668,   669,   648,   674,   675,   649,     0,
3202:     1002,   726,   870,   992,   837,   898,   769,     0,   824,   818,
3203:      466,   998,     0,   819,  1025,   992,   983,   466,   996,  1139,
3204:     1137,  1143,  1138,     0,     0,     0,     0,     0,   606,   605,
3205:     1018,  1170,  1168,  1169,  1167,  1166,  1173,     0,  1175,  1111,
3206:      934,     0,   983,   461,     0,     0,     0,   441,   440,     3,
3207:        0,     0,  1178,     0,   478,   479,     0,     0,     0,     0,
3208:        0,     0,     0,     0,   553,   500,   501,   503,   550,   554,
3209:      562,     0,   447,     0,  1060,  1197,     0,     0,     0,   122,
3210:      122,     0,     0,     0,     0,     0,    93,    42,    86,     0,
3211:        0,     0,     0,   187,   200,     0,     0,     0,     0,     0,
3212:      197,     0,     0,   180,    44,   174,   176,     0,   122,     0,
3213:       40,     0,     0,     0,    46,  1041,     0,  1570,  1571,  1572,
3214:     1573,  1574,   855,     0,  1576,  1577,  1578,  1579,  1580,  1581,
3215:     1582,  1583,  1584,  1585,  1536,  1587,  1588,  1589,  1590,  1591,
3216:     1592,  1550,  1594,  1556,     0,  1595,     0,   829,   940,   486,
3217:      938,  1061,     0,  1042,  1048,   988,     0,  1062,  1699,  1700,
3218:     1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,
3219:     1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
3220:     1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,
3221:     1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
3222:     1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,
3223:     1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,
3224:     1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1770,
3225:     1659,  1771,  1772,  1773,  1774,  1775,   985,  1022,  1064,  1063,
3226:     1065,   991,     0,     0,   413,     0,     0,  1075,     0,  1056,
3227:        0,     0,  1324,   168,  1324,   308,     0,   308,     0,     0,
3228:     1088,  1091,   370,   366,   364,   363,   365,   684,   671,   679,
3229:      678,     0,   661,   660,   659,     0,   658,     0,     0,   685,
3230:      685,   683,   662,   638,     0,     0,     0,   689,     0,   687,
3231:      376,   377,     0,   350,     0,   632,   628,     0,   698,   699,
3232:      700,   701,   708,   709,   706,   707,   702,   703,   696,   697,
3233:      704,   705,   694,   695,     0,   710,   711,   712,   713,   714,
3234:      715,   716,   717,   644,   650,     0,     0,   345,     0,     0,
3235:      347,     0,     0,     0,     0,   135,     0,   181,  1130,  1131,
3236:     1129,     0,     0,  1113,   184,   201,  1124,  1133,  1123,  1132,
3237:     1112,  1107,     0,  1104,   404,  1149,  1148,  1157,   163,     0,
3238:      943,     0,   135,  1192,  1203,     0,   822,   937,   981,     0,
3239:        0,     0,     0,     0,     0,   828,   946,     0,     0,   749,
3240:        0,     0,     0,   961,     0,   967,     0,     0,     0,   750,
3241:      730,   731,     0,  1007,  1014,   936,     0,   826,   934,     0,
3242:      901,     0,  1044,     0,   820,   821,   827,  1032,     0,   725,
3243:      725,  1001,   920,     0,   917,   918,   919,     0,     0,     0,
3244:      995,     0,   928,   930,     0,     0,   765,   926,     0,   768,
3245:        0,     0,     0,     0,   914,   915,   916,   908,   909,   910,
3246:      911,   912,   913,   924,   907,   746,     0,     0,   872,   825,
3247:        0,     0,   745,     0,     0,     0,   569,     0,  1030,  1027,
3248:        0,   984,   569,  1151,  1155,  1156,  1154,     0,  1150,  1142,
3249:     1141,  1146,  1144,  1147,  1145,     0,  1164,     0,  1161,   566,
3250:        0,   463,     0,     0,  1184,     0,   129,     0,  1179,     0,
3251:      458,   457,   487,   488,   494,   456,   539,   540,     0,     0,
3252:        0,     0,   559,   557,   530,   504,   529,     0,     0,   508,
3253:        0,   531,   726,   552,   445,   498,   499,   502,   444,     0,
3254:      555,     0,   565,   553,   503,     0,  1186,  1198,     0,     0,
3255:        0,     0,     0,  1324,     0,     0,    77,    58,   260,     0,
3256:      121,     0,     0,     0,     0,     0,     0,     0,    85,    82,
3257:       83,    84,     0,     0,     0,     0,   185,   186,   199,     0,
3258:      190,   191,   188,   192,   193,     0,     0,   178,   179,     0,
3259:        0,     0,     0,   177,     0,     0,     0,     0,     0,     0,
3260:        0,     0,   486,   486,   486,   835,     0,     0,   485,     0,
3261:        0,   986,   989,   403,   316,     0,   306,     0,     0,     0,
3262:        0,     0,   341,  1081,  1079,  1077,  1080,  1082,  1057,     0,
3263:        0,     0,     0,   165,   167,     0,   305,   279,     0,  1093,
3264:      387,     0,     0,  1324,  1090,   296,     0,     0,     0,     0,
3265:      378,     0,   682,   681,   633,   629,     0,     0,     0,     0,
3266:      383,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3267:        0,   378,   375,   378,  1020,     0,   378,   172,  1324,   308,
3268:        0,  1109,  1126,   182,   202,   183,   203,   436,     0,   410,
3269:      418,   423,   401,     0,   401,     0,   420,   424,   401,   419,
3270:      401,   414,     0,   164,     0,  1069,     0,  1068,     0,   993,
3271:        0,     0,   980,   976,     0,     0,     0,     0,     0,   947,
3272:      948,   949,   950,   951,   952,   953,   954,   955,     0,     0,
3273:      956,     0,     0,     0,   906,   917,   918,   919,   914,   915,
3274:      916,   908,   909,   910,   911,   912,   913,   932,     0,     0,
3275:        0,     0,     0,     0,     0,     0,   795,     0,     0,   818,
3276:      897,     0,   934,   966,     0,     0,     0,     0,     0,     0,
3277:      934,   972,     0,     0,     0,  1006,     0,  1003,   771,   992,
3278:        0,     0,   770,     0,     0,  1034,  1035,   727,   741,   742,
3279:      743,   747,  1067,  1066,  1000,     0,   994,     0,     0,   728,
3280:      751,   756,     0,   973,   789,     0,   777,     0,   764,     0,
3281:      775,   779,   752,   767,     0,   748,     0,   995,   929,   931,
3282:        0,   927,     0,   738,   739,   740,   732,   733,   734,   735,
3283:      736,   737,   744,   905,   903,   904,     0,     0,     0,   880,
3284:      772,     0,     0,   774,   773,  1316,  1351,     0,   477,   477,
3285:      477,   465,   475,   999,     0,   618,   486,  1008,   618,     0,
3286:      725,   607,  1060,  1174,  1162,  1163,   935,  1059,   135,     0,
3287:     1182,     0,     0,     0,   141,   124,     0,  1180,     0,   157,
3288:      569,     0,   992,     0,   492,   493,     0,   497,  1547,  1439,
3289:        0,     0,     0,     0,   532,   560,     0,   551,     0,  1026,
3290:      533,  1025,   534,   537,   538,   509,   561,  1015,   563,     0,
3291:      556,   449,   448,   567,     0,    43,     0,  1324,    60,     0,
3292:        0,     0,     0,     0,     0,   215,   251,   215,    98,  1324,
3293:      378,  1324,   378,  1223,  1291,  1455,     0,    56,    89,     0,
3294:      284,   115,     0,   269,   313,    79,    94,   108,     0,     0,
3295:       45,   175,   189,   194,   111,   198,   195,  1098,   196,   122,
3296:        0,    41,     0,   109,     0,  1096,     0,     0,    47,   113,
3297:     1100,     0,     0,     0,     0,   939,   830,   941,   942,   988,
3298:        0,   402,     0,   307,     0,   412,   392,   393,   403,     0,
3299:      308,  1078,     0,  1058,   105,     0,     0,     0,     0,   299,
3300:      297,   327,     0,   304,   298,   306,     0,     0,   255,     0,
3301:     1217,     0,     0,   388,   384,     0,     0,     0,   651,   664,
3302:      351,   638,     0,   692,   691,   693,   693,   638,     0,   624,
3303:        0,   636,     0,   676,   645,   718,   719,   720,   721,   722,
3304:      723,   724,   344,   346,     0,   348,     0,     0,   405,     0,
3305:      408,     0,   407,   411,   406,   400,     0,   431,     0,     0,
3306:        0,     0,     0,     0,  1158,   944,   482,   794,     0,     0,
3307:      977,     0,     0,   868,     0,   843,   845,   858,     0,   847,
3308:      849,     0,   921,     0,     0,     0,   859,   797,   798,     0,
3309:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3310:        0,     0,     0,     0,     0,     0,   813,   812,   860,   896,
3311:        0,     0,   964,   965,   861,     0,     0,   971,     0,     0,
3312:        0,   866,     0,     0,     0,     0,  1013,   823,   935,   902,
3313:      900,   725,     0,     0,     0,     0,     0,     0,     0,   778,
3314:      766,     0,   776,   780,     0,     0,     0,   760,     0,     0,
3315:      758,   790,   754,     0,     0,   791,     0,     0,     0,   836,
3316:      477,   477,   477,   477,   474,   476,     0,     0,     0,     0,
3317:     1439,     0,   590,   568,   570,   577,   590,   595,   838,   616,
3318:      839,  1044,     0,   542,     0,  1014,   542,     0,  1152,  1165,
3319:        0,  1183,     0,   146,   128,   148,   147,     0,   155,     0,
3320:      992,     0,   146,   130,     0,   149,     0,  1182,     0,   161,
3321:      489,     0,   922,   497,     0,   491,   536,   535,     0,   507,
3322:      558,   505,     0,   564,     0,     0,     0,   259,     0,     0,
3323:        0,   215,     0,     0,   323,     0,   310,    78,     0,     0,
3324:        0,    52,    97,    70,    62,    48,    76,     0,     0,    81,
3325:        0,    74,    91,    92,    90,    95,     0,   243,   225,   256,
3326:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3327:        0,     0,     0,   833,   834,   831,   486,   987,   434,   435,
3328:      180,   433,   317,     0,     0,  1093,  1076,     0,     0,   104,
3329:      106,     0,   168,   308,     0,   283,   279,     0,   277,   276,
3330:      278,     0,  1218,   173,     0,  1213,  1092,     0,     0,  1087,
3331:      670,   635,     0,   688,   686,   634,     0,   630,   637,   378,
3332:        0,   437,     0,   396,   432,   421,   426,     0,   430,   428,
3333:      427,   422,   425,     0,   979,   975,     0,   840,   945,     0,
3334:      933,   959,   958,   796,   808,   809,   810,   960,     0,     0,
3335:        0,   805,   806,   807,   799,   800,   801,   802,   803,   804,
3336:      811,   969,   968,   962,   963,     0,   863,   864,   865,   970,
3337:        0,  1005,   934,  1010,     0,     0,   899,  1033,   729,     0,
3338:        0,   757,   974,   781,     0,     0,     0,   753,   921,     0,
3339:        0,     0,     0,     0,   762,     0,     0,     0,   883,   878,
3340:      879,     0,     0,     0,     0,   468,   467,   473,   590,   595,
3341:        0,   451,     0,   577,     0,   589,   526,   588,     0,     0,
3342:      601,   599,     0,   601,     0,   601,     0,   526,     0,   591,
3343:      526,   588,     0,   608,  1018,   617,     0,   549,   830,  1004,
3344:      549,     0,   464,  1181,     0,  1177,     0,     0,     0,   136,
3345:      133,   123,     0,     0,   158,   146,   137,     0,   490,   495,
3346:      496,   506,  1016,   116,   215,     0,     0,    59,     0,   325,
3347:      271,   303,   286,     0,     0,     0,   216,     0,   291,     0,
3348:       51,    71,     0,    67,     0,    96,     0,     0,     0,     0,
3349:        0,    54,    66,     0,    49,     0,   378,   378,    57,   270,
3350:     1052,  1596,  1597,  1598,  1599,  1600,  1601,  1602,  1603,  1604,
3351:     1605,  1606,  1607,  1608,  1609,  1610,  1611,  1688,  1612,   222,
3352:     1613,  1387,  1614,  1615,  1616,     0,  1617,   627,  1618,  1619,
3353:     1620,   908,   909,   220,   312,   217,   318,   219,   221,     0,
3354:     1053,   218,   315,   112,  1099,     0,   110,     0,  1097,   119,
3355:      117,   114,  1101,     0,   415,   395,     0,     0,  1324,     0,
3356:      103,     0,  1093,   166,   305,     0,   333,   255,   328,     0,
3357:     1217,  1215,     0,  1212,     0,     0,     0,   631,   625,   349,
3358:        0,   409,     0,   429,   978,   856,   867,   957,     0,     0,
3359:        0,     0,   862,   857,  1012,     0,  1009,   787,   785,   782,
3360:        0,   783,   761,     0,     0,   759,   755,     0,   792,   869,
3361:        0,   885,   882,   472,   471,   470,   469,   576,   574,     0,
3362:      579,  1044,   586,   519,   525,   575,     0,   571,     0,   600,
3363:      596,     0,   597,     0,     0,   598,     0,   572,     0,  1044,
3364:      573,     0,   615,     0,     0,   874,  1031,   874,  1153,   145,
3365:      125,     0,   126,   156,     0,     0,     0,     0,   150,   389,
3366:        0,   321,    61,     0,   303,     0,   215,   288,   287,   290,
3367:      285,   289,   292,     0,     0,     0,     0,     0,   272,     0,
3368:        0,     0,   236,     0,     0,   303,   309,   232,   233,   342,
3369:        0,     0,     0,    63,    53,    50,    55,    64,     0,     0,
3370:       65,    68,   623,    80,    73,  1688,  1695,     0,     0,     0,
3371:        0,     0,   832,   391,   398,   180,     0,     0,     0,     0,
3372:      305,   107,     0,     0,     0,  1217,     0,     0,   213,     0,
3373:      252,     0,   170,  1216,     0,  1205,     0,  1085,  1086,     0,
3374:        0,   397,   814,     0,     0,     0,  1011,   784,   788,   786,
3375:      763,   871,     0,   486,   611,     0,   614,   578,     0,     0,
3376:      514,   521,     0,   524,   518,     0,   580,     0,     0,   582,
3377:      584,     0,     0,     0,   619,     0,     0,     0,  1021,     0,
3378:      541,   543,   546,   545,   548,     0,   517,   517,     0,     0,
3379:        0,   159,     0,   152,   152,     0,   138,   923,     0,   215,
3380:        0,   302,   322,   250,     0,     0,   234,     0,   240,     0,
3381:      274,   275,   273,   235,   303,   308,   237,   343,     0,    72,
3382:        0,    88,     0,     0,   314,   120,   118,   415,     0,  1093,
3383:     1212,     0,     0,   279,   173,  1214,   268,   261,   262,   263,
3384:      264,   265,   266,   267,   282,   281,   253,   254,     0,     0,
3385:        0,  1087,     0,   815,     0,   816,     0,   888,   616,     0,
3386:        0,   610,     0,   512,   510,   513,   515,   511,     0,     0,
3387:      587,   603,     0,   583,   581,   592,     0,   623,     0,   594,
3388:      547,     0,   873,   875,     0,     0,   453,   452,     0,   132,
3389:        0,   618,     0,     0,   154,   154,   140,     0,   308,   324,
3390:        0,   294,   301,   293,     0,     0,   231,     0,   238,   332,
3391:      224,   622,     0,    75,     0,   319,   390,   394,     0,  1206,
3392:        0,  1212,   255,  1217,     0,  1209,     0,     0,  1093,   817,
3393:      884,     0,     0,     0,   609,   612,     0,   585,     0,     0,
3394:        0,   620,   621,   593,   544,     0,     0,   519,   127,   152,
3395:      131,   160,   151,   494,   153,   494,     0,   332,   280,     0,
3396:        0,   258,   224,     0,   249,     0,    69,    87,   320,     0,
3397:      305,  1207,   214,   171,  1210,  1211,     0,   618,  1519,  1267,
3398:     1490,     0,   886,   889,   887,   881,     0,   522,     0,   528,
3399:      602,   876,   877,   516,   154,   497,   497,   618,   249,   295,
3400:      300,     0,   239,   241,   329,   330,   331,     0,   245,   242,
3401:      246,     0,  1212,     0,  1083,     0,   893,   892,   891,   895,
3402:      894,   613,     0,     0,   520,   494,   143,   142,   139,   215,
3403:      257,     0,     0,     0,   247,     0,   248,   223,  1208,  1093,
3404:        0,   523,     0,   497,   326,   228,     0,   227,     0,   311,
3405:      244,   618,   890,     0,   144,   226,   230,   229,  1084,   527
3406: };
3407: 
3408: /* YYDEFGOTO[NTERM-NUM].  */
3409: static const yytype_int16 yydefgoto[] =
3410: {
3411:       -1,    36,    37,    38,    39,  2103,  2104,  2105,  1796,   966,
3412:     2773,  1797,   967,   968,  2107,    40,    41,  2148,  2149,    42,
3413:     1422,   530,  1734,  1365,  2516,    44,  2058,  1739,  2062,  2651,
3414:     2305,  2057,  2064,  2754,  2813,  2059,  1740,  2652,  1741,    45,
3415:       46,  1493,    47,   730,    48,  1494,  1449,  1235,   986,  1439,
3416:     1224,    49,    84,    50,  2094,  2394,  2826,  2117,  2909,  2546,
3417:     2547,  1798,  2868,  2869,  2096,  2162,  1431,  2862,  1859,  2704,
3418:     1802,  1785,  2548,  1868,  2661,  2426,  1799,  2336,  1860,  2533,
3419:     2760,  1504,  1861,  2761,  2526,  1862,  1474,  1497,  2338,  2870,
3420:     1803,  1475,  2395,  1418,  1863,  2824,  1864,   489,  2551,    51,
3421:      522,   523,   722,  1173,   524,   703,    52,   490,  1139,   531,
3422:       54,  1848,  2575,  2182,  2576,  1916,  1842,  1233,  1913,  1547,
3423:     1478,  1234,   477,  1561,  2183,  2140,  1548,   532,   869,    57,
3424:       58,    59,   568,   581,   582,  1336,  1711,  2026,   936,   555,
3425:      556,   596,  1468,  1372,  1373,  1747,  2075,  1397,  1398,   945,
3426:      946,  2621,  2746,  2622,  2623,  2484,  2485,  2884,  1385,  1389,
3427:     1390,  1760,  1753,  1378,  2297,  2640,  2641,  2642,  2505,  1393,
3428:     1394,   948,   949,   950,  1402,  1770,    61,  1715,  2033,  2034,
3429:     2035,  2275,  2276,  2290,  2286,  2490,  2629,  2036,  2037,  2614,
3430:     2615,  2721,  2293,  2043,  2633,  2634,  2681,  1521,   704,  1240,
3431:     1176,   706,   870,   707,  1152,   871,  1156,   709,   872,   873,
3432:      874,   712,   875,   876,   877,   715,  1148,   878,   879,  1167,
3433:     1195,  1196,  1197,  1198,  1199,  1200,  1201,  1202,  1203,   920,
3434:     1615,   881,   882,   883,  2039,   884,  1328,  1699,  2646,  2742,
3435:     2743,  2019,  2259,  2471,  2613,  2793,  2842,  2843,   885,   886,
3436:     1280,  1281,  1696,  1323,  1324,   887,  2397,  1326,  1608,  1279,
3437:     1276,  1029,  1030,  1241,  1588,  1589,  1611,  1945,  1618,  1624,
3438:     1972,  1973,  1632,  1664,   888,  1572,  1573,  1931,  1249,   889,
3439:      621,  1036,   622,  1246,  1658,   897,   890,   891,  1273,  1274,
3440:     1986,  2234,  1637,  1766,   573,  2625,   726,  1116,   892,   893,
3441:      894,   895,   922,   575,  1031,   470,   718,  2814,  1129,   926,
3442:     1032,  1800,  1654,    62,   798,   626,    63,  1127,  1485,    64,
3443:     2598,  2436,  1141,  1506,  1872,   491,    65,    66,    67,    68,
3444:       69,   603,  1227,   533,  1228,  1229,   786,    70,  1236,   788,
3445:      789,    71,   562,   563,  1237,  1349,  1238,    72,   542,    73,
3446:      916,   578,   917,   919,   535,   933,  2053,  1730,    75,    76,
3447:      549,   550,    77,    78,   564,    79,    80,  2595,   536,  2165,
3448:     1136,   499,   472,   473,   720,  1119,  1034,  1120
3449: };
3450: 
3451: /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
3452:    STATE-NUM.  */
3453: #define YYPACT_NINF -2516
3454: static const int yypact[] =
3455: {
3456:     4713,   -86,   631, -2516, -2516,   -86, 31812, -2516,   -86,    60,
3457:     2249, 36492, -2516,  5969,   -86, 42576,   644,   216,   418,   231,
3458:      526, 42576, 42576, 36960,   -86,   232, 43044, -2516,   -86, 21524,
3459:    34152,   -15,    77, 43512, 42576,  1091,   768,   191, -2516, -2516,
3460:    -2516, -2516, -2516, -2516,    62, -2516, -2516, -2516, -2516, -2516,
3461:    -2516, -2516, -2516, -2516, -2516, -2516,    94, -2516,    54,   108,
3462:      350,   271, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3463:      342, -2516, -2516, -2516, -2516, -2516, -2516, -2516, 21055, -2516,
3464:    -2516, -2516, -2516, -2516, -2516, 37428, 42576, 37896, 34620, 38364,
3465:    -2516,    92, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3466:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3467:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3468:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3469:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3470:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3471:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3472:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3473:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3474:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3475:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3476:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3477:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3478:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3479:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3480:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3481:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3482:    -2516, -2516, -2516,   107, -2516, -2516, -2516, -2516, -2516, -2516,
3483:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3484:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3485:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3486:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3487:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3488:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3489:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3490:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3491:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3492:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3493:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3494:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3495:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   122,
3496:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3497:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3498:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3499:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3500:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3501:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3502:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   313,  -131,
3503:    -2516,   124, -2516, -2516, -2516, -2516,  1091, 38832, -2516,   -96,
3504:      576, -2516,   471, 43980, -2516, -2516, 42576, -2516, -2516,   370,
3505:    38832,   633, -2516, -2516, -2516, 39300, -2516, -2516, -2516, -2516,
3506:      596, -2516, -2516,   457, -2516,    70, -2516, -2516, -2516,   435,
3507:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   530, -2516,
3508:    48660, -2516, 44448, 44916, 45384, -2516,   402,    42,   454, 20586,
3509:    -2516, -2516, -2516, -2516,   342, -2516, -2516,   526, -2516,   526,
3510:    -2516, -2516, -2516,   301,   423, -2516,   470,   732, -2516, -2516,
3511:    -2516,   523, -2516, -2516,   744,  8434,  8434, 45852, 45852,   526,
3512:    45852,   547, -2516, -2516,   -16, -2516,    77, -2516,   350,   523,
3513:    -2516, 21993, -2516,   558,  -131, -2516, -2516,   147,   889, 11392,
3514:    42576,   590, -2516,   580,   590,   612,   626, -2516,  4713,   944,
3515:      908, 34152,   272,   272,  1074,   272,   883,   929, -2516,   758,
3516:    -2516,   666, -2516, 38832, -2516,   668,   932, -2516,   523,  1008,
3517:     1060,   838,  1030,  2441,  1034,  1166,  1044,  1432,  6462, 11392,
3518:    30408, -2516,  -131, -2516, -2516, -2516,   718, -2516,   780, -2516,
3519:    -2516, -2516, -2516,    42,   948, -2516,   766,  1248,   834, 39768,
3520:    40236, 38832,   843,  1213, -2516, -2516, -2516, -2516,   893, -2516,
3521:    -2516,   100, -2516, -2516, -2516, -2516,   898, -2516,   898,   898,
3522:    -2516, -2516, -2516, -2516,   914,   914,  1087,   928, -2516, -2516,
3523:    -2516,  1274, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3524:    -2516, -2516,   938,   661, -2516,   898, -2516,   914, -2516, -2516,
3525:    -2516, -2516, -2516, 50487, -2516, -2516, -2516, -2516,   519,   537,
3526:    -2516, -2516, -2516,    68,   978, -2516,  1395, -2516, -2516, -2516,
3527:    -2516, -2516, -2516, -2516, -2516,   982, -2516,  3557,   914, -2516,
3528:    -2516,  1291,    99, -2516,  1298,   144, -2516,  1304,  1206, 11392,
3529:    -2516,  1063, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3530:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3531:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3532:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3533:    -2516, -2516,    77, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3534:    -2516, -2516, -2516, -2516, -2516, -2516,   255, -2516, -2516, 28281,
3535:    -2516, -2516,   454,  1003, -2516, 28281, 11885, 49113,  1458, -2516,
3536:     1277, 42576,  1032, -2516, -2516, -2516, -2516, -2516, -2516,  1036,
3537:     1518,    91,  1524, 11392,  1070,    91,    91,  1084,  1417, -2516,
3538:    -2516, -2516,   132,  1111,  1116, -2516,   134,   134, -2516,  1118,
3539:     1123, -2516,   138,  1613,  1628,   104,  1126,  1148,   661,    91,
3540:    11392, -2516,  1149,   134,  1159,  1160,  1161,  1644,  1163, -2516,
3541:     1649,  1171,    83,    85,  1172,  1175, -2516,  1176, -2516,   139,
3542:    11392, 11392, 11392,  1508, 11392,  7448, 38832,  1652, -2516,  -131,
3543:      526, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   119,
3544:     5137, -2516,  1214, -2516, -2516, -2516,   169, 11392, -2516,  1650,
3545:      -40, -2516,   141, -2516, -2516, -2516,   341,  1457,  1183, -2516,
3546:    -2516, -2516, -2516,   159,  1582, 27345, 27813, 38832, -2516, -2516,
3547:     -131, -2516, -2516, -2516, -2516, -2516, -2516,   376, -2516,   342,
3548:    29457,   587,  -131,   590, 42576, 42576,  1643, -2516, -2516, -2516,
3549:    34152, 38832, 46320,  1317, -2516, -2516,   350,   350, 11392,   350,
3550:      494,     8,  8927, 12378,  1526,  1408,   126,   532,  1536, -2516,
3551:     1412,   883,   929, 11392,   580, -2516,  1462, 38832, 32280,   685,
3552:      790,  1210,  1294,  1218,   -31,  1616, -2516,  1215, -2516,  1301,
3553:    38832, 50487,   168, -2516,  1656,   168,   168,   136,  1659,  1308,
3554:      195,  1461,     4,  -133,  1215,  2057, -2516, 34152,   131,    19,
3555:     1215, 38832,  1312,   481,  1215,    87, 11885,   915,  1082,   295,
3556:     1120,  1174,    90, 11885,  1219,  1224,  1356,  1364,  1422,  1495,
3557:     1498,  1501,  1504,  1520,   102,  1522,  1525,  1528,  1533,  1535,
3558:     1537,   118,  1539,   142, 11885,  1541,  1231, -2516, 29457,   -74,
3559:    -2516, -2516,  1549,   120, -2516, 25940,  1226, -2516, -2516, -2516,
3560:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3561:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3562:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3563:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3564:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3565:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3566:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3567:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3568:    -2516, -2516,  1314, 42576,  1276,   210,  1581,  1642, 30408,  1254,
3569:     1601, 38832,  1480,  2057,  1481,  1259,  1711,   780,  9420,  1712,
3570:    -2516, 46788, -2516, -2516, -2516, -2516, -2516, -2516,  1262, -2516,
3571:    -2516, 11392, -2516, -2516, -2516,  1745, -2516, 49113, 49113,   898,
3572:      898, -2516, -2516,  1724,  1358,  1359,  1745, -2516,  1745, -2516,
3573:    -2516, -2516, 49113, -2516, 42576,  1279,  1282,  1745, -2516, -2516,
3574:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3575:    -2516, -2516, -2516, -2516,  1745,  1360, -2516,  1362,  1365,  1366,
3576:    -2516, -2516, -2516, -2516, -2516, 42576, 42576, -2516, 42576, 42576,
3577:    -2516, 42576, 42576,   588, 40704,   454, 35088, -2516, -2516, -2516,
3578:    -2516,   776,   897, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3579:    -2516, -2516, 30408, -2516,  2287, -2516, -2516, -2516,  1284,   621,
3580:    -2516,   625,  1091, -2516, -2516, 11392,  -131, 11392, 29457,  1328,
3581:    11392, 11392,  1289,  1745,  1745, -2516,  3283,  1745,  1745, 29475,
3582:    11392, 24810, 11392, 15829,  9913, 11392, 11392,  7941, 11392, 29475,
3583:     1766,  1766, 22931, -2516,  1443,  1292,  1299,  1617,  5661,  1305,
3584:    -2516,   651, -2516,  1303, -2516,  -131,  -131, -2516, 11392,  1672,
3585:     1672, -2516,   125, 49113, 11392, 11392, 11392, 11392, 29940,  1386,
3586:      135, 42576, 11392, 11392,  1315,   695, -2516, 11392,  1534, -2516,
3587:     1330, 11392,  1398,   656, 11392, 11392, 11392, 11392, 11392, 11392,
3588:    11392, 11392, 11392, -2516, -2516, 17294,   176,  1645,  1660,  -131,
3589:    11392,  -120,   270, 11392, 35556,  8434,  1655,  6462, -2516,  -131,
3590:    26409,    78,  1655, -2516, -2516, -2516, -2516,   143, -2516, -2516,
3591:    -2516, -2516,  1284, -2516,  1284,  1335, 38832,   147, 33684, -2516,
3592:    11392, -2516,   652,  1337,  1396,   601,  1791, 42576, -2516, 23400,
3593:     1621, -2516,  1339, -2516, 28745,  1621, -2516, -2516, 16308,  1472,
3594:     1626,  1563, -2516, -2516, -2516,  1354, 29457, 12871, 12871, -2516,
3595:     1220, 29457,  1225, -2516, -2516, -2516, -2516, -2516, -2516,     7,
3596:    -2516, 38832,   -11,  1526,   532,   659, -2516, -2516,  1468,  1361,
3597:    47256, 42576,  1630,  1583,  1633,  -145, -2516, -2516, -2516, 49113,
3598:    -2516, 42576, 42576, 47724, 48192, 30876, 42576, 30408, -2516, -2516,
3599:    -2516, -2516, 42576,   996, 42576,  5106, -2516, -2516, -2516,   168,
3600:    -2516, -2516, -2516, -2516, -2516, 42576, 42576, -2516, -2516,   168,
3601:    42576, 42576,   168, -2516,  1648, 42576, 42576, 42576, 42576,  1883,
3602:    42576, 42576,   -41,   -41,  1565, -2516, 10406,  1363, -2516, 11392,
3603:    11392, -2516, 11392,  1540, -2516,   677, -2516,  1575,    40,  1411,
3604:    38832, 42576,  1216, -2516, -2516, -2516, -2516, -2516, -2516, 30408,
3605:     1369,  1371,  1723, -2516,  2057,  1728, 32748,   753,   712,  1435,
3606:    -2516,   681, 11392,  1596, -2516, -2516,  1606, 11392,   690,  1399,
3607:       68,   709, -2516, -2516,  1401,  1282,  1420,  1421,  1404,  1406,
3608:    -2516,   720, 49113,  1745,    76,  1407,  1409,  1338,   556,   436,
3609:     1240,    99, -2516,   144, -2516,  1620,   116, -2516,  1632,   780,
3610:     1868, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   725, 20117,
3611:    -2516, -2516,  1875,   526,  1875,   572, -2516, -2516,  1875, -2516,
3612:     1875, -2516, 28281, -2516, 11885, -2516, 49113, -2516,   726, -2516,
3613:     1427, 11392,    35, -2516, 28809,   730, 11392,  1426,  1434, -2516,
3614:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,  1440,  1748,
3615:    -2516,  1442,  1445,  5021, -2516, -2516, -2516, -2516, -2516, -2516,
3616:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,  1448,  1450,
3617:    28929,  1449, 15829, 15829,  7448,  1333, -2516, 15829,  1453, -2516,
3618:    -2516,   743, 28763,  1292,  1454, 29081, 10899, 11392, 10899, 10899,
3619:    29110,  1292,  1455, 29156, 42576, -2516, 13364, -2516, -2516, -2516,
3620:    11392, 38832, -2516, 11392, 25286, -2516, -2516, -2516,  5803,  5803,
3621:     5803, 29475, -2516, -2516, -2516,  1479, -2516, 15829, 15829, -2516,
3622:     2951,  2390,  7448, -2516, -2516,  1783, -2516,   779, -2516,  1476,
3623:    -2516, -2516,  2539, -2516, 24810,  5074, 11392,   193, -2516, 11392,
3624:     1315, 11392,  1560,  5803,  5803,  5803,   177,   177,   149,   149,
3625:      149,   691,   270, -2516, -2516, -2516,  1483,  1485,  1486,  1678,
3626:    29457,  1163, 11392, -2516, 29457,   869,   884, 38832,  3028,  3884,
3627:     4248, -2516, -2516, -2516, 18710,  1529,   -74,  1508,  1529,  1745,
3628:     1672, -2516,   580, -2516, -2516, -2516, 29457, -2516,  1091, 18710,
3629:     1531,  1532,   -99, 21524,  1700, -2516, 42576, -2516, 42576, -2516,
3630:       -2,  1506, -2516, 11392, -2516, -2516,   997,  1511,  1704,  1707,
3631:      972,   972,  1220,  1708, -2516, -2516,  1552, -2516, 11392,  1253,
3632:    -2516,  1281, -2516, -2516, -2516, -2516,  1499, -2516, -2516,  1758,
3633:    -2516, -2516, -2516, -2516,  1588,  1215, 11392,  1731, -2516,   227,
3634:     1509,  1848,   311,  1806, 42576, -2516,  1718, -2516,   150,  1855,
3635:      116,  1856,   116, 30408, 30408, 30408,   755, -2516, -2516,   526,
3636:    -2516, -2516,   760, -2516,   217, -2516, -2516, -2516,  1604,   492,
3637:     1215,  2057, -2516, -2516, -2516, -2516, -2516, -2516, -2516,   256,
3638:      535,  1215,  1605, -2516,  1607, -2516,  1609,   545,  1215, -2516,
3639:    -2516,  1538,  1542,  1543, 11885, -2516, -2516, 29457, 29457, 29457,
3640:     1547, -2516,   192, -2516, 42576, -2516, -2516, -2516,  1540, 38832,
3641:      780, -2516,   538, -2516,   526, 42576, 38832, 38832, 38832, -2516,
3642:    -2516, -2516,  1546,  1521, -2516, 49113,   -45,  1741,  1740, 42576,
3643:     1571,  1218,  1986, -2516, 29457,  1878, 38832,   761, -2516, -2516,
3644:    -2516, -2516,  1745, -2516, -2516,  -127,  -127, -2516, 42576, -2516,
3645:     1554, -2516,  1556, -2516, -2516, -2516, -2516, -2516, -2516, -2516,
3646:    -2516, -2516, -2516, -2516, 42576, -2516,  1886,  1091, -2516, 30408,
3647:    -2516, 33216, -2516, -2516, -2516, -2516,   526, -2516,   526,  1755,
3648:    42576, 26877,   526,   526, -2516, -2516, -2516, -2516, 29313, 11392,
3649:    -2516,  1898, 49113, -2516, 25304, -2516, -2516, -2516, 11392, -2516,
3650:    -2516, 11392, -2516, 24810, 11392,  1880, -2516,  2037,  2037,  5661,
3651:    49113, 15829, 15829, 15829, 15829,   101,  1159, 15829, 15829, 15829,
3652:    15829, 15829, 15829, 15829, 15829, 15829, 16801,   339, -2516, -2516,
3653:    11392, 11392,  1890,  1880, -2516, 49113,  1566,  1292,  1569,  1570,
3654:    11392, -2516, 49113,   762,  7448, 29428, -2516,  -131, 25322, -2516,
3655:    29457,  1672, 11392,  1400,  1608, 11392,   775, 11392,  1897, -2516,
3656:    -2516,  1578, -2516, -2516, 49113, 11392,  1579,  3399, 15829, 15829,
3657:     3752, -2516,  4497, 11392,  7448, -2516,  1565,  1622, 23869, -2516,
3658:     1671,  1671,  1671,  1671, -2516, -2516, 38832, 38832, 38832, 19179,
3659:     1902, 18241, 41172,  1589,  1179, -2516, 41172, 41640, -2516,  1597,
3660:    -2516,  -131, 11392,  1896,  1585,  1443,  1896,  1610, -2516, -2516,
3661:     1612,  1589, 11392,  1752, -2516, -2516, -2516,  1661, -2516,   807,
3662:    -2516,  2002,  1752, -2516,   811, -2516, 23400,  1531, 11392,  -131,
3663:    -2516,  1614, -2516,  1511,   128, -2516, -2516, -2516,  1815, -2516,
3664:    -2516, -2516, 38832, -2516, 42576, 25350,  1948, -2516, 42576, 42576,
3665:    42576, -2516, 42576,   815,   589,  1631, -2516,   589,  1936,   133,
3666:     1218,   195,  4838,   -75, -2516, -2516, -2516,  1691, 42576, -2516,
3667:    42576, -2516, -2516, -2516, -2516, -2516, 30876, -2516, -2516, -2516,
3668:    30408, 24341, 30408, 42576, 42576, 42576, 42576, 42576, 42576, 42576,
3669:    42576, 42576, 42576, -2516, -2516, -2516,  1565, -2516, -2516, -2516,
3670:     -133, -2516, -2516,   192,  1634,  1435,  1642, 42108,  1625,  1618,
3671:    -2516,   816,  2057,  1636,  2081, -2516,   753, 32748, -2516, -2516,
3672:    -2516,  2040, -2516,   402,   251, -2516, -2516,  1091, 42576,  1690,
3673:    -2516,  1282,  1639, -2516, -2516,  1282, 49113, -2516, -2516,   116,
3674:    38832, -2516,   829, -2516, -2516, -2516, -2516, 42576,  1635, -2516,
3675:     1635, -2516, -2516, 11392, 29457, -2516,  1640, -2516, 29457, 25368,
3676:    -2516, 29457,  1890, -2516,  1388,  1388,  1388,   623,  1960,   114,
3677:     1647,  1388,  1388,  1388,   293,   293,    88,    88,    88,  2037,
3678:      339, 29457, 29457, -2516, -2516,  1641, -2516, -2516, -2516,  1292,
3679:     1654, -2516,  5617, -2516,   835, 42576, -2516, -2516,   291, 11392,
3680:    11392,  2951, -2516,  2922, 11392, 49113,   837,  2951,   224, 11392,
3681:     3207,  3901, 11392, 11392,  4520, 25438,  1657, 11392, 49566, -2516,
3682:    -2516, 38832, 38832, 38832, 38832, -2516, -2516, -2516, 41172, 41640,
3683:     1651, 17771,  1179,  1658, 38832, -2516,  1733,  1662, 18710,  1916,
3684:     1847, -2516, 18710,  1847,   841,  1847,  1921,  1733, 22462, -2516,
3685:     1733,  1663,  1851, -2516,   581, 29457,  2093,  1964,   526, -2516,
3686:     1964,   526, -2516, 29457,  8434, -2516,  1091,   927, 42576,  -131,
3687:      -48, -2516,  1675, 42576, -2516,  1752, 29457, 24810, -2516, -2516,
3688:    -2516, -2516, -2516, -2516, -2516, 42576,   844, -2516,   848,   589,
3689:    -2516,  1703, -2516,   597,  1957,    53, -2516, 30408,  2216,   329,
3690:    -2516,  1969,  1887, -2516,   168, -2516, 11392,   329,  1892,    75,
3691:    42576, -2516, -2516,  2547, -2516, 49113,   116,   116, -2516, -2516,
3692:     1666,  1674,  1680,  1682,  1685,  1687,  1688,  1689,  1692,  1693,
3693:     1695,  1696,  1697,  1699,  1702,  1710,  1713,   938,  1715, -2516,
3694:     1716,  1614,  1717,  1720,  1721, 50034,  1722,  1725,  1726,  1730,
3695:     1732,   776,   897, -2516, -2516, -2516, -2516, -2516, -2516,   766,
3696:     1735, -2516,  1736, -2516, -2516,  1761, -2516,  1794, -2516, -2516,
3697:    -2516, -2516, -2516,  1676,  1003,   158, 42576,  2161,  1943,  1738,
3698:    -2516,   526,  1435, -2516, 32748,   728,   611,  1740, -2516,   173,
3699:     1571, -2516,  2111,  1773,  1953, 42576,  1749, -2516, -2516, -2516,
3700:     2191, -2516, 33216,  1635, 29457, -2516, -2516, -2516, 15829,  2068,
3701:     1750, 49113, -2516, -2516, -2516, 11392, -2516,  2951,  2951,  2922,
3702:      857, -2516,  2951, 11392, 11392,  2951,  2951, 11392, -2516, -2516,
3703:    25668,  1942, -2516, -2516, -2516, -2516, -2516, -2516, -2516, 31344,
3704:    41172,  1754, -2516, 36024, -2516, -2516, 42576,  1179, 18710, -2516,
3705:    -2516,   121, -2516, 18710,  2027, -2516, 18710, -2516, 42576,  1757,
3706:    -2516, 42576, -2516, 13857, 11392,  1797, -2516,  1797, -2516,  1183,
3707:    -2516,   -99, -2516, -2516,  2163, 19648,  2122, 11392, -2516, -2516,
3708:     1765,   589, -2516,  1927,  1703,  1768, -2516, -2516, -2516, -2516,
3709:    -2516, -2516, -2516,   864,  1769, 42576, 42576, 15829, -2516,   329,
3710:      614,   105, -2516,  2041, 38832,  1703, -2516, -2516, -2516, -2516,
3711:     2144,  2223,  2116, -2516, -2516, 29457, -2516, -2516,  1745,  1745,
3712:    -2516, -2516,  2187, -2516, -2516, -2516, -2516,   766,   432, 24341,
3713:    42576, 42576, -2516, -2516, -2516,  -133,  2146,   865,  1091,  2119,
3714:    32748, -2516,  2233,  1782, 42576,  1571,   160,   160, -2516,  1923,
3715:    -2516,  1925, -2516, -2516,   175, -2516, 38832, -2516, -2516, 19648,
3716:     1091, -2516,  1357, 15829, 49113,   870, -2516, -2516,  2951,  2951,
3717:     2951, -2516,  2220,  1565, -2516,   876,  2239, -2516, 42576,   -76,
3718:      363,  1792,  1793, -2516, -2516,   895, -2516, 11392,  1795, -2516,
3719:    -2516, 18710,   121,   896, -2516, 49113, 42576,   900, 49113,  6955,
3720:     1787, -2516, -2516, 29457, 29457, 42576,  1854,  1854,  1850, 42576,
3721:    11392, -2516,   936,  2214,   112,   -12, 29457, -2516, 38832, -2516,
3722:    30408, -2516,   589, -2516, 30408, 11392, -2516,   213,   623,  2252,
3723:    -2516, -2516, -2516, -2516,  1703,   780, -2516, -2516,  2107, -2516,
3724:    42576,  1862,   449,  1879, -2516, -2516, -2516,  1003,   526,  1435,
3725:     1773, 38832,  1091,   753,   402, -2516, -2516, -2516, -2516, -2516,
3726:    -2516, -2516, -2516, -2516, -2516, -2516, -2516, -2516,  2228,  2018,
3727:     2236,  1690,   943,  1357,   953, -2516, 11392,   -14,  1597, 31344,
3728:     1817, -2516,   960, -2516, -2516, -2516, -2516, -2516, 42576,   998,
3729:    -2516, 29457, 42576, -2516, -2516, -2516, 42576,  2187,   966, -2516,
3730:    -2516, 13857,  1814, -2516,  2272,  1961, -2516, -2516,  1091, -2516,
3731:    25715,  1529, 19648, 42576, 42576, 42576, -2516,  1944,   780,   589,
3732:      971, -2516,  1841, -2516, 25849,  2051, -2516,  2138, -2516,  2083,
3733:     1837, -2516, 11392, -2516,  1908, -2516, -2516, -2516,  2292, -2516,
3734:     1842,  1773,  1740,  1571,  2053, -2516,  2054,  1857,  1435, -2516,
3735:     1292, 14350, 14350,  1853, -2516, -2516, 42576, -2516,   979,  1860,
3736:     1001, -2516, -2516, -2516, -2516, 42576,  1864, 36024, -2516,  2214,
3737:    -2516, -2516, -2516,   228, -2516,   228, 23400,  2083, -2516, 30408,
3738:    24341,  2076,  1837,   106,  2064,  2057, -2516, 29457, -2516,  1091,
3739:    32748, -2516, -2516, -2516, -2516, -2516, 19648,  1529, 15336,  2005,
3740:       74, 28781, -2516, -2516, -2516, -2516,  1007, -2516,  2344,  2020,
3741:    -2516, -2516, -2516, -2516, 42576,  1511,  1511,  -156,  2064, -2516,
3742:    -2516,  2159, -2516, -2516, -2516, -2516, -2516,    64,  2077, -2516,
3743:     2088,   980,  1773,  1019, -2516,  2335, -2516, -2516, -2516, -2516,
3744:    -2516, -2516,  1881,  1884, -2516,   228, -2516, -2516, -2516, -2516,
3745:    -2516,   371,   371,  2251, -2516,  1945, -2516, -2516, -2516,  1435,
3746:    14843, -2516,  2363,  1511,   589, -2516,  2352, -2516,   103, -2516,
3747:    -2516,  1529, -2516,  1888, -2516, -2516, -2516, -2516, -2516, -2516
3748: };
3749: 
3750: /* YYPGOTO[NTERM-NUM].  */
3751: static const yytype_int16 yypgoto[] =
3752: {
3753:    -2516, -2516, -2516,  1789, -2516, -2516, -2516,   277, -2516,   949,
3754:    -2516,   267,  -524,   598, -2516, -2516, -2516, -2516, -2516, -2516,
3755:     -927,    22, -2516, -2516, -2516, -2516,    80,   318, -2516,  -367,
3756:    -1853,  -122, -2516, -2415, -2494, -2516,  -426, -2370, -1670, -2516,
3757:    -1092,   239, -2516, -2092, -2516,  -612,  -966,  -783,  -973, -2516,
3758:       44, -2516,  1162, -1089, -1763, -2349,  -430, -2516,  -498, -2516,
3759:     -271, -1742,  -473,  -459, -2516, -2278,  -904, -2516,  1444,  -184,
3760:    -2516,   622, -2516, -2075, -2516, -2516,   615, -2516,  -935, -2516,
3761:    -2516, -1821,   248,  -413, -1859, -2313,   564,  -626, -2516,  -458,
3762:      292, -1708, -2516,   632, -2516,  -404, -2516,  -488, -2095, -2516,
3763:    -2516, -2516,  1211,  -653, -2516,  1258, -2516, -2516, -2516,    29,
3764:    -2516, -2516, -2516, -2516, -2516,  -565,   573, -2213, -2516,   511,
3765:    -2516, -2516, -2516, -2516,   -19,   283, -2516,    27,  2016,   -22,
3766:      -20,   -13,     5,    43,  1503,  1544, -2516, -1301,   682, -2516,
3767:    -2516,  -592,   -55, -2516,   687, -2515, -2024,  -442,  1024,  1487,
3768:     1489,  -297,  -212, -2516,  -368, -2516, -1243, -2516, -2516,   686,
3769:     1062, -1258, -1255, -2516,   400, -2516,  -294, -2516,   148,  -429,
3770:     1048, -2516,  1507, -2516, -2516, -2516, -2516, -1220,   727, -1964,
3771:      428, -1920, -1828,   185,   178,  -926,  -172,    33,   437,  -254,
3772:    -2516, -2516,  -249, -1682, -2335,  -265,  -263, -2516, -2516,  -494,
3773:    -1109,  -683, -2516, -2516,   364,   902, -2516, -2516, -2516,  1000,
3774:     1368, -2516, -2516,  1530,  2089, -2516,  -579,  2296,  -445,  -658,
3775:     1222, -1060,  1227, -1065,  -857, -1076,  1228,  1232, -1224,  3284,
3776:    -1539,  -377,    12, -2516, -2321, -1627, -2516, -2516,   -35, -2516,
3777:     -330, -2516,  -325, -2516, -2516, -2516,  -316, -2158, -2516,  1158,
3778:      852, -2516, -2516, -1227, -2516,  3765,   748, -2516, -1610,  -568,
3779:     1252,  -710,  -972, -1130, -2516, -2516, -2516, -2516, -2516, -2516,
3780:    -1303, -1753,  -642,   822, -2516, -2516,   923, -2516, -2516, -1009,
3781:     -585,  1038,  -559,  -837,   827, -2516,  -548,  1178, -2516,   789,
3782:    -1886, -2516,   469, -2516,    51,  -514,   234,  -987,    24, -2516,
3783:     2108,   257,  1706,  -846, -2059, -2516, -2516,  -472, -2135,  -912,
3784:    -2516,  -616, -2516, -2516, -2516, -1160, -2516,   664, -2516, -1084,
3785:    -2516,  -195, -2516, -2516, -2090, -2516, -2516, -2516, -2516, -2516,
3786:    -2516,  -420, -2516,  -480,  -469, -2516, -2516,     9,  -770,  1302,
3787:    -2516, -2516,   473, -2516,   957, -2516,   738, -2516, -2516, -2516,
3788:     1164, -2516, -2516, -2516,    32,  1593,   462, -2516,  1177, -2516,
3789:    -2516, -2516, -2516, -2516,   817, -2516, -1083, -2462,    57, -2288,
3790:    -1169,    -6, -2516, -2516, -2516,  -513, -2516, -2051
3791: };
3792: 
3793: /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
3794:    positive, shift that token.  If negative, reduce the rule which
3795:    number is the opposite.  If zero, do what YYDEFACT says.
3796:    If YYTABLE_NINF, syntax error.  */
3797: #define YYTABLE_NINF -1699
3798: static const yytype_int16 yytable[] =
3799: {
3800:      471,   985,  1124,   597,  1117,    60,  1223,   951,   898,   725,
3801:     1163,   921,  1453,   586,   637,   910,   791,  1452,   467,  1230,
3802:     1283,    60,    43,  1417,  2097,   534,   705,    55,  1511,    53,
3803:      468,  1285,    74,  1424,  1607,  1483,  2046,  1121,  1484,   731,
3804:      599,  1169,  1406,  1486,  1487,  1540,  1329,   600,   732,  2318,
3805:      723,  2112,  1464,  2114,  1515,  2417,   567,    81,  1339,  1428,
3806:      785,  1457,  2399,   572,  2006,  1645,  1646,  2272,  2065,  1207,
3807:     2401,  2430,  1210,  1947,  1948,   717,  2093,   584,  1967,  1149,
3808:     1150,  2427,  1567, -1024,   807,   807,  1239,  2040,  -693,   984,
3809:     -693,   990, -1049,   994,  -439, -1575,  -685, -1049,  2233,  1950,
3810:    -1046, -1046,  2040, -1677, -1677,   607,  1161, -1586,  -442,  -690,
3811:      475,  2583, -1586,  -690,   792, -1688, -1688,  2289,  1993,  1994,
3812:     1346,   615,  1718, -1593,   540, -1050,  1170, -1593,   807, -1050,
3813:     1762, -1695, -1695, -1047, -1047,  1765,   610, -1575,   613,  -652,
3814:      617,  1488,  2592,  -665,  -680,  1125,   540,  2151,   540,  2588,
3815:      911,   904,  -906,   576,   944, -1697, -1697,  1170,  2616,  -906,
3816:     1293,  1213,  1343,  1217,   540,  1714,  2637,   947,   807,  2530,
3817:     1334,  1929,  1217,  2098,  1170,  1656,   648,   807,     3,     4,
3818:     1585,   589,  1143,  2891,  1330,  2753,  -439,  2696,  1293,  1437,
3819:     1299,  1583,  1440,  1441,  2653,  1169,  1581,   540,   592,  -180,
3820:     -442,  2573,  1170,  1693,  -180,  1429,  1420,  1846,  2287,  2311,
3821:     1694,   594,  2188,  2190,  2279,   479,  1455,  2916,  1299,  2223,
3822:     2684,  2672,  1301,  1379,  1379,  2723,  1144,  1701,  2779,  2712,
3823:     2208,  2514,  2158,  1656,  2708,  2877,  1149,  1150,  2697,  2755,
3824:     1429,  1442,  2709,  2449,   594,   497,  2698,  2340,   717,   526,
3825:     1301,  -925,  2556,  2756,  1619,  1429,   544,  1768,  -925,   553,
3826:     1161,  2815,   593,  2101,  2568,  1744,   590,   583,   583,  1380,
3827:     1380,  2330,   480,  1344,  2864,  2699,   791,   541,  2653,  -399,
3828:     2534,  1293,   791,   940,  2099,  1783,  1462,  2319,  1436,  2280,
3829:     2042,  2353,  2589,  1463,  1409,  2055,  1275,  2695,  2855,   934,
3830:     2856,  2738,  1293,   629,  1950,   630,  2791,  2590, -1674, -1674,
3831:     1286,  1299,  1231,   912,  2487,   913,  1447,  2341,  2491,  2831,
3832:      611,  2281,    82,   537,  1164,  1121,  2567,  2537,  2329,  1381,
3833:     2056,  1420,  2582,  2200,  2792,  2066,  2282,  1341,   539,   594,
3834:     1448,  2125,  1784,  1301,  2700,  2283,  1165,  2434,  2320,  2289,
3835:     1950,  1745,   717,   942,   619,  2701,  1451,  2431,   620,  2549,
3836:     2885,   554,  1769,  1341,  1301,  2209,    83,  1702,   676,  1619,
3837:     2903,  1458,  2917,  -439,  2673,  2210,  1382,  1382,  1443,  2284,
3838:     2326,  2878,  2328,  2550,  2539,  1405,  1444,  -442,  2450,  1345,
3839:      905,  1412,   791,   791,  2854,  1430,  1145,  2342,  2616,  1584,
3840:     2627,   935,  2040,  2865,  2040,  2710,  2724,  1171,  2027,  2028,
3841:     2898,  1362,  2204,  2205,  2206,  2207,  2757,  1466,  2211,  2212,
3842:     2213,  2214,  2215,  2216,  2217,  2218,  2219,  2220,  1501,  2905,
3843:     1430,  2653,  2682,   961,  -439,  1383,  1383,  1467,  1171,  2515,
3844:     2477,   484,  1427,   485,  2669,  1430,  1847,  1607,  -442,  2447,
3845:     1564,  1335,  1898,  1900,  1901,  1171,  1427,  1252,  1347,  1331,
3846:      906,  2846,  2519,  1896,  2285,   649,  2873,  1895,   488,  2250,
3847:     2251,  2860,   577,   801,  2776,  1778,   595,  2765,  2866,  2443,
3848:     1571,    60,  2542,  1171,  2591,  2531,   538,  2100,  2101,  2066,
3849:      591,  1427,  2892,  1762,  1835,  2833,  2048,  2078,   623,  1358,
3850:     1146,  -906,  1853,   625,  2832,   624,  1427,   586,   627,  1403,
3851:     2399,  1499,  1117,  2432,   719,  2653,  2102,  2583,  2401,  2072,
3852:     2067,  1453,  1404,   790,  2626,  2543,   717,  1657,   628,  2630,
3853:     1147,   540,  2632,    60,  1164,  1479,  1164,  1456,   787,  1414,
3854:     2544,   642,  2702,  -439,   952,  2703,   527,   476,   599,   471,
3855:      471,  2628,  1695,  2558,  2559,   600,  1165,  -442,  1165,  1172,
3856:     2617,  2521,  1891,   619,   579, -1024,  1392,   620,  2050,  2606,
3857:     1166,  1965,  1168,   471, -1049,  2138,  2139, -1575,  -685, -1049,
3858:     1512,  1513,  -439,  1508,  -439,  2008,   915,   914,  2574, -1586,
3859:     1206,  -690,  1835,    60, -1586,  2532,  -442,   619,  -442,  2778,
3860:     -925,   620,  2783,  1619,  1619, -1593,  1288, -1050,  1619, -1593,
3861:       43, -1050,  1033,   471,  1118,    55,  1549,    53,  2782, -1575,
3862:       74,  1151,   908,   923,   932,  1155,  -680,  1716,  1337,  1268,
3863:     1719,   806,  1322,  2906,  1950,  1209,  2545,  1221,  1222,  1951,
3864:     1952,  1953,  2202,  2518,  1447,    81,  1221,  1222,  1619,  1619,
3865:     1415,  2040,  1480,  1376,   954,  2040,  1812,  1319,  1320,  1321,
3866:     1322,  1569,  2126,   705,  2725,  2659,  1815,  2733,  1448,  1818,
3867:     2224,  1897,  1899,  -180,  -180,     3,     4,  1568,  1520,  1275,
3868:     2875,   588,  1653,  1575,  1186,  1187,  2676,   719,  2154,   940,
3869:     1133,  1135,  1137,  2121,  1533,   638,  1621,  1623,  2837,  1631,
3870:     1569,  1121,  1293,   791,  1677,  2332,  2122,  2520,  2577,    25,
3871:     2907,  2726,   717,   717,  2527,  1731,  1607,  1429,  1286,  2261,
3872:     2262,  2263,  2264,   471,  1117,  1159,  1160,   717,  1429,   645,
3873:      639,  2670,  1299,   723,  1532,  1541,   527,  2908,  1180,  1181,
3874:     1536,  1783,  2912,  1215,  1569,    30,  1216,   785,  1317,  1318,
3875:     1319,  1320,  1321,  1322,  1569,  1377,  1121,  2586,   728,   942,
3876:     1420,  2399,   601,  2662,  1301,   640,  1912,  2237,   587,  2401,
3877:     1421,  1429,  2171,  1962,  1963,  1964,  1965,   795,  2175,  1914,
3878:     1543,  1429,   602,   790,  2528,   807,    32,  2333,   796,   790,
3879:     1033,   719,  1190,  1191,   793,  1283,   794,    60,  2090,  1647,
3880:      618,  2671,  1987,  2587,  1186,  1187,   633,   471,   943,  2911,
3881:     2049,  1804,   641,    25,   583,  2768,   901,  1960,  1961,  1962,
3882:     1963,  1964,  1965,  1811,  1665,    85,   619,   643,  1678,  1659,
3883:     1340,  2886,  2887,  1461,   471,  1955,  1919,    35,  1453,   646,
3884:      551,  1920,  1679,   586,  2124,  2727,   569,  1680,   717,    30,
3885:     1666,  2334,  2040,  2335,   471,   471,   471,  1880,   471,   471,
3886:     1869,  2040,  2136,   638,  1356,  1420,  2040,  1357,   647,  2040,
3887:     1831,  1832,  1833,  1117,  2246,  1423,  2584,   650,  1902,  2914,
3888:     1903,   471,  1681,  1905,  1775,   651,  1616,  2128,  2040,   729,
3889:       32,  1921,  2127,  1732,  2072,   608,  2759,  2132,   639,   790,
3890:      790,  1545,   592,    33,  1956,  2069,   807,  1430,  1998,  2602,
3891:      797,  1810,  1190,  1191,  2683,  -486,  1370,  1371,  1430,  1375,
3892:     -486,  1489,  2763,   600,   600,  1786,   600,    34, -1672, -1672,
3893:     1821,  2774,   471,  2147,  1999,  1828,   471,   471,  1489,  1877,
3894:      799,    35,  1619,  1619,  1619,  1619,   800,   471,  1619,  1619,
3895:     1619,  1619,  1619,  1619,  1619,  1619,  1619,  1619,  1355,  1667,
3896:       25,  1430,  2159,   932,  1668,   719,   593,  2166,  1427,  1669,
3897:     1164,  1430,  2040,  1813,   717,   631,  2076,   632,  1816,  1427,
3898:      641,   807,  1366,    86,  1976,  -486,  1978,  1979,  1164,  1918,
3899:     1033,    87,  1165,  1922,  1852,  1923,    30,  1033,  2668,  1619,
3900:     1619,  1754,  2619,    25,  2040,  1594,  1166,  2620,  1408,  2280,
3901:     1165,  2440,   801,  1595,  1596,  1597,   971,   903,  1033,   958,
3902:     1454,  1435,  1427,   802,  1168,   959,    88,  1682,  1889,  1153,
3903:      899,   900,  1427,   902,  -486,   972,   791,    32,   909,    30,
3904:      940,  2281,  1459,   594,  2497,   941,  1226,  2500,  2000,   791,
3905:       33,  1162,  1226,  2001,  1483,   918,  2493,  1484,  1631,  1977,
3906:     1631,  1631,  1486,  1487,  2713,  2283,   619,   925, -1024,  2810,
3907:      620,    25,  1925,    89,    34,  1359,  1537,   717,  1360,  1360,
3908:       32,   924,  1204,   958,   528,   973,  -485,    25,  1733,   959,
3909:     1607,  -485,  2040,    33,  1996, -1673, -1673,  1957,  1958,  1959,
3910:      927,  1960,  1961,  1962,  1963,  1964,  1965,    30,  1670,  1563,
3911:      942,   930,  1564,  1565,   928,  2460,  1566,    34,   931,  1671,
3912:     1983,   717,  1118,    30,  2044,  2040,  2904,  1287,   938,  2351,
3913:      960,   529,  1033, -1675, -1675,  2344,  1290,  2109,   955,  2111,
3914:     1727,  2184,  1641,  1209,  1642,   471,   956,  1773,    32,  1338,
3915:     1360,   719,   719,   953,  2327,  2874,  -485,   957,   583,   943,
3916:     1348,    33,  1226,  1226,    32,  1843,   719,    90,  1844,  1873,
3917:      474,   969,  1564,   974,  2414,  2888,   525,    33,  1878,   970,
3918:      595,  1360,  1491,   987,  2285,    34,   552, -1676, -1676,   958,
3919:      565,  1153,  2002,   991,   960,   959,  2343,  1881,  2352,    35,
3920:     1566,    34,  1866,  2003,  1867,  -485,  1122,  1162,  1887,  2040,
3921:      790,  1888,  1126,  1908,  1926,    35,  1909,  1360,  1933,  2511,
3922:       60,  1360,   975,  2309,  2145,   787,  1118,  2173,  2174,  2918,
3923:      976,  1969, -1678, -1678,  1360,  1616,  1616, -1679, -1679,   471,
3924:     1616,   471,   977,  2115,   471,   471,  2116,    60,  2119,  2170,
3925:     2231,  2120,  1360,  1209,   471,  1128,   471,   471,   471,   471,
3926:      471,   471,   471,  2242,   623,  1539,  1360,  1123,  2020,   625,
3927:     2021,   624,  2279,   978,   627,   937,  1131,   939,  2071,   961,
3928:     1616,  1616,   471,  2022,  1130,  2023,    25,   719,   471,   471,
3929:      471,   471,  1118,  1549,  1140,  2307,   471,   471,  2308,  2312,
3930:      960,   471,  2313,  2331,  2422,   471,  1844,  1844,   471,   471,
3931:      471,   471,   471,   471,   471,   471,   471,  2441,   980,   471,
3932:     2442,  2605,    30,  2454,   471,  2461,  2455,   471,  1566,   471,
3933:     1138,  1033,  2523,   963,  1118,  1844,  2524,  1147,  2393,  1844,
3934:      981,   806,  2072,   961,  1950,  2607,  1142,  2280,  1566,  1951,
3935:     1952,  1953,  2663,  2689,   471,  2664,  1844,  2492,  2715,  2495,
3936:      983,  1566,   964,    32,  2718,   806,   915,  2719,  1950, -1680,
3937:    -1680,  1786,   471,  1951,  1952,  1953,    33, -1681, -1681,  2281,
3938:     2351,   471,   471,  2730,  2735,  1712,  1209,  2736,  2739,   479,
3939:     2522,  2736,  1735,   962,  2282,  1154,   806,   963,   791,  1950,
3940:       34,  1151,  1569,  2283, -1699, -1699, -1699,  1722,   806,  1724,
3941:    -1095,  1950,  2229,   719,    35,  1155,  1951,  1952,  1953,  1118,
3942:      717,  1118,   708,  1157,  2751,  1158,   964,  2752,  2482,   965,
3943:     1175,  2788,  2179,  2239,  2752, -1682, -1682,  2284,  2196,  1619,
3944:     1205,  2789,  2482,  1534,  1566,  1535,   480,  1208,  2797,   961,
3945:       25,  1209,  1767,  1211,  2803,   958,  2203,  2736,  1214,  2818,
3946:     1033,   959,  2819,   471,   471,  1174,   471,  2847,  2897,  1177,
3947:     2848,  1598,  1599,  1600,  2714,  1601,  1602,  1603,  1604,  1605,
3948:     1606,  2225,  2294,  1118,  1569,  1212,    30,   717,  2230,  2850,
3949:     1232,   958,  1209,   965,  1242,  2881,   471,   959,  2736,   988,
3950:      482,   471,  1243,   963,  1804,   717,  2402,  2899, -1683, -1683,
3951:     2752, -1684, -1684,  1590, -1685, -1685,   719, -1686, -1686,  1245,
3952:      710,  1247,  2285,  -656,  1954,  1870,  2439,    32,  1619,  -663,
3953:      717,  1850,   989, -1687, -1687, -1689, -1689,   717, -1690, -1690,
3954:       33, -1691, -1691,   790,  2413,  1955, -1692, -1692, -1693, -1693,
3955:    -1694, -1694, -1696, -1696, -1698, -1698,   790,  1250,  1033,   717,
3956:      719,  2554,  1469,  1470,    34,   471,   960,  1763,  1764, -1699,
3957:      471,  1251,  -532,  -532,  1616,  1616,  1616,  1616,    35,  1252,
3958:     1616,  1616,  1616,  1616,  1616,  1616,  1616,  1616,  1616,  1616,
3959:     1188,  1189,   586,  2072,  1619,   708,  1190,  1191,  1253,   965,
3960:     -536,  -536,   960,  1254,  1720,    35,   471,   471,   471,  2687,
3961:     1256,   471,  1955,  1257,  1956,   484,   806,   485,  -653,  1950,
3962:      471,   471,   471,   471,  1951,  1952,  1953,  2396,  -535,  -535,
3963:      471,  1616,  1616,  -654,   471,  1258,  1260,   471,  1956,   487,
3964:      586,  2240,   488,  1352,  1354,  1779,  1261,  1262,  1263,  -657,
3965:     1264,   471,   471,  1272,  -655,  1787,   471,  1790,  1265,  1266,
3966:     1801,  1284,  1267,  1268,  1327,  1333,  1805,  1334,  1807,  1956,
3967:      471,   958,  2184,   471,  1335,   471,   717,   959,  1350,  1363,
3968:     1814,  1956,  2438,  1369,   943,  1817,  1401,  1407,   941,  1822,
3969:     1823,  1824,  1825,   710,  1829,  1830,   471,  1425,  1399,   708,
3970:     1426,  1432,  1163,  2563,  2564,  1427,  1433,  1434,   471,  1121,
3971:     1438,   586,   469,  1445,  1446,   961,  1450,   498,  1460,  1465,
3972:     1473,   498,  1472,   471,  1569,  1477,  2038,   543,   498,   548,
3973:     1481,   717,   548,    60,  1482,   548,   574,   471,   468,   498,
3974:      498,  2038,  1490,  1489,  1492,  1495,  1496,  1498,  1502,  1507,
3975:      623,   961,   471,   468,   807,   625,  2509,   624,  2024,  1514,
3976:      627,  -451,  1516,  1517,  1523,   992,  1527,  1524,  1528,   963,
3977:      471,  1529,  1530,  1571,  -451,  1562,  1576,  1293,  1636,  -451,
3978:     1178,  1179,   960,  1360,   548,  1638,  2393,  1118,  1118,  1118,
3979:     1655,   574,   498,   574,   574,   574,  1640,   710,   993,  1643,
3980:      717,  1774,  1662,  1673,  1676,   963,  1226,  1957,  1958,  1959,
3981:     1917,  1960,  1961,  1962,  1963,  1964,  1965,  1674,  1698,  1226,
3982:     1955,  1697,  1714,  1721,  1728,  -451,  1729,  1736,  1033,   593,
3983:     1743,  1957,  1958,  1959,   964,  1960,  1961,  1962,  1963,  1964,
3984:     1965,  1755,  1756,  1757,  -451,  1758,  1780,  1781,  1776,  1782,
3985:      594,  1836,  1845,  1849,  1180,  1181,  1854,  1841,  1855,   719,
3986:     1875,  2562, -1699, -1699, -1699,   965,  1960,  1961,  1962,  1963,
3987:     1964,  1965,  1856,   708,  1957,  1958,  1959,  1857,  1960,  1961,
3988:     1962,  1963,  1964,  1965,  1871,  1876,  1882,  1879,   711,  1956,
3989:     1883,  1884,  1885,  -451,  1886,  1893,  1906,  1894,  1453,  1904,
3990:     2144,   965,  -451,  1118,  1907,   790,   958,  2152,  2153,  2155,
3991:      717,  1915,   959,  1927,  1935,  1938,  1182,  1183,  1184,  1185,
3992:     1186,  1187,  1936,   471,  1188,  1189,   719,  2169,  1937,   791,
3993:     1939,   961,   471,  1940,  1870,   471,  1942,  1946,   471,  1943,
3994:      717,  1968,  1974,  1981,   719,   471,   471,   471,   471,  1992,
3995:     1997,   471,   471,   471,   471,   471,   471,   471,   471,   471,
3996:      471,  2256,   586,  2004,   471,   471,  2013,  2018,  2054,   719,
3997:     2014,   710,  2016,  2017,   471,  2042,   719,  2052,   471,  2061,
3998:     2080,  1819,  2068,  2074,  -537,   963,   471,  -538,  2079,   471,
3999:     2082,   471,   586,  2083,  2084,  2086,  2088,  2089,   719,   471,
4000:     2092,  2095,   471,   471,  2108,  2110,   717,   471,   471,   586,
4001:     2123,  2129,  2157,  2130,  1820,  2131,    56,   960,  2160,  2161,
4002:     2164,  2717,  2167,   471,  2187,   471,  2133,  2168,  1190,  1191,
4003:     2134,  2135,    56,  2137,  2156,  2180,   471,  2393,  2195,  -451,
4004:     2177,  2038,  2178,  2038,  2762,    56,   471,  1971,  1950,  2769,
4005:      713,   585,  1970,   468,  2226,   468,  2118,  2227,  2228,   708,
4006:      708,   711,   471,  2666,  2244,  2245,  2025,  2248,  2257,  2270,
4007:     2292,  1616,  2296,  2298,   708,  2396,   598,  2265,  2266,  2267,
4008:     2278,   965,  1957,  1958,  1959,  2310,  1960,  1961,  1962,  1963,
4009:     1964,  1965,  2304,   971,    56,  2321,  2306,  2325,  2301,  2141,
4010:     2302,  2317,   619,  2163,  2722,   927,   620,  2339,  2355,  2421,
4011:     1118,  2150,   972,  2420,  1118,  2400,  1118,  2425,  2337,  2429,
4012:     2435,  2416,  2722,  2424,   717,  2437,  1844,  2448,  2445,  2452,
4013:     2483,  2488,  2817,  2322,  2451,  2489,  2496,  2502,  2479,  1192,
4014:     1193,  2737,  2453,  2504,  2737,  2469,  2480,  2503,  2790,  2486,
4015:     2501,  2517,  2525,  2529,  2552, -1046,  2553,   710,   710,   717,
4016:     1616,  2557,   973, -1672,  2572,   711,   961,  2570,  1226, -1673,
4017:      719, -1674,   710,  2185, -1675,  2186, -1676, -1677, -1678,  2191,
4018:     2192, -1679, -1680,   574, -1681, -1682, -1683,   471, -1684,   635,
4019:      717, -1685,   636,   717,  2433,   708,   574,  2578,  2419, -1686,
4020:     2571,   498, -1687,  2762, -1689, -1690, -1691,  2579,  2771, -1692,
4021:    -1693, -1694,  2569,  2871, -1695, -1696,  1826,  2593,  2800, -1697,
4022:      963, -1698,  2594,   713, -1047,  2580,  1616,  2600,   636,   498,
4023:      498,  1539,  2596,   471,   471,  2603,  2599,  2604,   471,   719,
4024:     2612,  2618,  2631,   471,  2636,  2645,   471,   471,  2649,  1827,
4025:      974,   471,  2655,  2657,  2658,  2660,  2665,  2674,  2677,  2678,
4026:     2680,   896,   896,   548,   548,  2679,   548,  2688,  2691,  2692,
4027:     2693,  2706,   471,  2707,  2716,  2720,   471,   574,  2741,  2728,
4028:     2729,  2812,  2732,  2534,  2745,  2748,   498,  2753,  2767,  2535,
4029:     2038,  2770,  2772,   710,  2038,  2784,  2775,   574,   471,   975,
4030:     2785,  2536,   468,  2786,  2796,  2805,   468,   976,  2806,   574,
4031:     2816,  2807,  2473,  2474,  2475,  2476,   965,  2820,  2323,   977,
4032:     2673,   708,  2822,  2823,  2825,  2828,  2396,   713,  2829,  2830,
4033:     2537,  1118,  2538,  2510,  2512,  2834,  2835,  1550,  2861,   711,
4034:      471,  2845,  2356,  2867,  2836,   574,   574,   574,  2849,   719,
4035:      978,  2258,  2876,  2882,  2883,  2890,  2893,  2403,  2404,  2405,
4036:     2406,  2407,  2408,  2409,  2410,  2411,  2412,  2895,  2900,  2901,
4037:     2891,  2902,  2913,  2892,  2915,   717,  2919,   929,  2398,  2400,
4038:     2354,  1551,  1806,  2358,  2314,  2811,  2106,  2539,  2513,  2648,
4039:     2857,  2423,  2863,  2560,  2910,   980,  2766,  2896,  1292,  2889,
4040:     2141,  1293,  1416,  2705,  2091,  2428,  2859,  1552,  2142,  2113,
4041:     2894,  2087,  2359,  2858,  2540,  1510,  1531,   981,   478,   710,
4042:     2181,  2143,   479,  2601,   708,  1553,  2415,  1361,  1772,  1554,
4043:     2070,  1299,  2799,  1396,  1395,  2747,   790,   983, -1699,  2853,
4044:     1752,  1342,   471, -1095,  2081,   719,  2300,  2804,  2507,   471,
4045:     1555,  1771,  2585,  1556,  2478,  1400,  2051,   471,   471,  2273,
4046:     2734,   471,  2494,  1301,   958,  2795,  2269,  1557,   708,  2794,
4047:      959,  2801,  2647,   471,  2802,  2851,  2844,   971,  1580,   480,
4048:     2541,  2852,   471,  1582,  1586,  2542,   481,   471,  1587,  1703,
4049:      471,  2038,    56,  1989,  2073,  1930,   972,   471,   471,  1570,
4050:     2038,   713,  2011,   468,  2009,  2038,  2045,  1244,  2038,   471,
4051:     1840,   471,   468,  1713,  2299,  2146,  2787,   468,  1542,  1924,
4052:      468,  1723,   710,  1364,     0,   711,   711,  2038,  2543,  2315,
4053:        0,   471,  1995,   482,     0,  1725,     0,     0,     0,   468,
4054:      711,     0,     0,  2544,    56,   585,   973,  1292,     0,     0,
4055:     1293,     0,     0,     0,     0,  2506,  1558,     0,  2508,     0,
4056:        0,     0, -1699,  2400,  1559,     0,   710,     0,     0,     0,
4057:        0,     0,  1282,     0,     0,   960, -1699,     0,     0,     0,
4058:     1299, -1699,     0,   971,   598,     0,     0, -1699,     0,     0,
4059:        0,     0,     0,   471,     0,  2675,     0,   471,   719,     0,
4060:        0,   483,   972,     0,    56,  2690,  1560,     0,     0,   714,
4061:        0,  2038,  1301,   574,     0,     0, -1699,   586,     0,     0,
4062:        0,   471,     0,   468,     0,   471,     0,  2585,     0,   719,
4063:      498,   498,   719,   471,   974,     0,   574,   574,  1368,  2545,
4064:        0,     0,     0,  2038,   471,     0,     0,  2711,   484,     0,
4065:      485,     0,   973,     0,  1118,   468,     0,     0,  1118,   471,
4066:        0,   711,     0,   574,  1419,     0,   486,     0,     0,     0,
4067:        0,  1310,   487,     0,     0,   488,   574,     0,  2581,     0,
4068:        0,  2005,     0,   975,     0,     0,     0,   713,   713,     0,
4069:        0,   976,     0,   574,     0,     0,     0,   574,     0,  1226,
4070:        0,     0,   713,   977,     0,     0,     0,     0,     0,  2758,
4071:      471, -1699,     0,   471,     0,     0,     0,     0,  2347,  2781,
4072:        0,     0,     0,     0,   961, -1699,     0,     0,     0,     0,
4073:    -1699,  2038,     0,     0,   978,   471,     0,     0,     0,     0,
4074:      974,     0,  2780,   468,     0,     0,   471,     0,     0,     0,
4075:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4076:        0, -1699,     0,     0,  2038, -1699,   471,   708,     0,     0,
4077:     2667,     0,     0,     0,   979,  2808,   468,     0,   963,   980,
4078:        0,     0,   714,     0,     0,   471,   471,   711,     0,   975,
4079:        0,     0,     0,     0,     0,     0,     0,   976,     0,     0,
4080:        0,   981,     0,     0,  2685,  2686,     0,   982,    56,   977,
4081:        0,     0,     0,  1118,  2400,     0,   716,     0,  2694,     0,
4082:     1310,   983,     0,   713,     0,     0,  2398,     0,     0,  1476,
4083:      471,     0,   471,     0,   708,     0,     0,   574,     0,     0,
4084:      978,     0,     0,     0,     0,  1255,     0,  1505,  2038,     0,
4085:        0,     0,   708,     0,     0,     0,  2872,     0,     0,     0,
4086:      468, -1699,     0,     0,     0,   710,     0,     0,  1317,  1318,
4087:     1319,  1320,  1321,  1322,   965,     0,     0,   708,     0,     0,
4088:     1522,  1277,     0,  2749,   708,   980,   714,     0,     0,     0,
4089:      711,     0,     0,     0,   471,     0,     0,  1225,     0,     0,
4090:        0,     0,     0,  1225,     0,     0,   708,   981,     0,     0,
4091:    -1699,   636,   636,     0,   498,   498,     0,   498,   636,     0,
4092:      574,     0,     0,     0,     0,     0,     0,   983,     0,     0,
4093:     1292,     0,   710,  1293,   711,     0,     0,     0,  1294,  1295,
4094:     1296,     0,     0,     0,     0,  2777,     0,     0,     0,   713,
4095:      710,     0,   598,   598,     0,   598,     0,     0,     0,  1292,
4096:        0,     0,  1293,  1299,     0,     0,     0,  1609,     0,     0,
4097:     1300,     0,     0,     0,     0,   710,     0,     0,  1635,     0,
4098:        0,     0,   710,     0,     0,     0,     0,  1289,     0,   716,
4099:        0,     0,  1299,     0,     0,  1301,     0,     0,     0, -1699,
4100:        0,     0,     0,     0,   710,     0,     0,   636,     0,     0,
4101:    -1699,  1225,     0,  1225,  1225,     0,     0,  1317,  1318,  1319,
4102:     1320,  1321,  1322,   708,  1301,     0,     0,     0, -1479,     0,
4103:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4104:      574,   896,     0,     0,     0,     0,     0,     0,     0,     0,
4105:        0,     0,   713,     0,     0,     0,     0,     0,     0,     0,
4106:      714,     0,   574,     0,   574,     0,     0,     0,     0,     0,
4107:        0,     0,     0,  1737,     0,  1742,     0,  2398,   708,     0,
4108:     1225,     0,     0,  1225,  1225,     0,     0,     0,     0,     0,
4109:        0,     0,     0,   716,  1302,     0,   713,     0,     0,     0,
4110:        0,     0,     0,     0,     0,     0,     0,   574,  1303,     0,
4111:        0,     0,     0,  1304,     0,     0,  1419,   498,     0,     0,
4112:    -1479,   710,     0, -1699,     0,     0,     0,   498,  1788,   498,
4113:     1792,     0,   498,     0, -1699, -1699,     0, -1699,   498,     0,
4114:      498,     0, -1699,     0,     0,     0,     0,   708,  1307,     0,
4115:        0,   636,   498,     0,     0,     0,   636,   498,     0,     0,
4116:        0,   498,   498,   498,   498,     0,   498,   498,     0,     0,
4117:        0,     0, -1479,     0,     0,     0,   710, -1699,     0,     0,
4118:        0,     0,     0,     0,     0, -1479,   574,  1851,     0, -1699,
4119:    -1479,     0,     0,     0,     0, -1479,     0,     0,     0,     0,
4120:        0,     0,  1865,  1310, -1479,     0,     0, -1479,     0,     0,
4121:        0,     0,     0,     0,     0,   806,     0,     0,  1950,     0,
4122:        0,     0,     0,  1951,  1952,  1953,     0,     0,     0,     0,
4123:        0,    56,  1310,   711,     0,     0, -1479,     0,     0,     0,
4124:     2463,     0,     0,     0,     0,   710,   714,   714,     0,     0,
4125:        0,     0,     0,     0,     0, -1479,     0,   708,    56,     0,
4126:        0,   714,     0,  1509,     0,     0,     0,   716,     0,     0,
4127:        0,     0,     0,     0,  1518,     0,  1519,     0,     0,     0,
4128:        0,     0,     0,     0,     0,  1525,  1579,   708,   540,     0,
4129:        0,     0,     0,  1312,     0,     0,     0,     0,     0,     0,
4130:      711,     0,  1526,     0, -1479,     0,     0, -1479,     0,     0,
4131:        0,     0,     0, -1479,     0,     0,     0,     0,   711,     0,
4132:     1663,     0, -1699,     0,     0,     0,     0,     0,     0,  1544,
4133:     1546,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4134:      498,     0,     0,   711,     0,     0,     0,  1282,     0,     0,
4135:      711,     0,     0,   708,     0,   710,     0,     0,     0,     0,
4136:        0,  1577,  1578,     0,     0,  1591,  1592,     0, -1479,     0,
4137:        0,     0,   711,     0,     0,     0,     0,     0,     0,     0,
4138:     1609,    56,   714,     0,     0,   710,     0,     0,     0,     0,
4139:        0,  1178,  1179,  1313,     0,   713,  1314,  1315,  1316,     0,
4140:     1317,  1318,  1319,  1320,  1321,  1322,     0,  1292,     0,     0,
4141:     1293,     0,     0,   574,     0,     0,     0,     0,     0,  1955,
4142:     2041,     0, -1699,  2025,     0,     0,     0,     0,     0,  1317,
4143:     1318,  1319,  1320,  1321,  1322,  2041,     0,     0,     0,  2060,
4144:     1299,     0,  2063,     0,  1742,     0,     0, -1699,     0,     0,
4145:    -1479,   710,     0,   716,   716,     0,     0,     0, -1479,     0,
4146:        0,     0,   713,     0,     0,  1180,  1181,     0,   716,     0,
4147:        0,   708,  1301,     0, -1479,     0, -1479, -1479,     0,     0,
4148:      713,     0,     0,     0,     0,     0,     0,     0,  1956,   711,
4149:     1476,     0,     0,     0,     0,  1761,  1761,     0,     0,     0,
4150:        0,     0,     0,     0,     0,   713,   708,     0,   714,     0,
4151:        0,     0,   713, -1479,    56,     0, -1479, -1479, -1479,     0,
4152:        0,     0,     0,     0,     0,     0,     0,  1182,  1183,  1184,
4153:     1185,  1186,  1187,     0,   713,  1188,  1189,   708,     0,     0,
4154:      708,  2249,     0,     0,   711,     0,     0,  1225,     0,     0,
4155:     1476,     0,     0,     0,     0,   574,     0,  1225,     0,     0,
4156:     1225,  1476,   574,   574,   574,     0,     0,     0,     0,   710,
4157:        0, -1699,     0,     0,     0,   498,     0,     0,     0,     0,
4158:        0,     0,   574,     0,     0, -1699,     0,     0,     0,   716,
4159:    -1699,     0,     0,     0,  2176,     0,     0,     0,     0,     0,
4160:        0,     0,     0,     0,   710,     0,     0,     0,     0,     0,
4161:      636,   714,     0,   711,     0,     0,     0,     0,     0,     0,
4162:        0,     0,     0,     0,     0, -1699,  1476,  1476,     0,     0,
4163:     1277,  1890,  1892,     0,     0,   710,     0,     0,   710,  1190,
4164:     1191,     0,     0,     0,     0,     0,     0,     0,     0,  1609,
4165:        0,   713,     0,     0,     0,   714,     0,  1225,     0,     0,
4166:        0,     0,     0,     0,     0,  1178,  1179,     0,     0,     0,
4167:     1225,     0,     0,     0,     0,     0,     0,     0,  1277,     0,
4168:     1310,  1957,  1958,  1959,     0,  1960,  1961,  1962,  1963,  1964,
4169:     1965,     0,     0,     0,     0,     0,  1663,     0,     0,     0,
4170:        0,     0,     0,     0,     0,     0,   713,     0,     0,     0,
4171:        0,     0,  2015,     0,     0,   716,     0,     0,     0,     0,
4172:        0,     0,   708,   711,  2260,     0,     0,     0,     0,     0,
4173:     2032,     0,   574,   574,   574,   469,     0,  2041,  2277,  1180,
4174:     1181,     0,  2277,  2291,    56,  2032,     0,     0,     0,   585,
4175:     1192,  1193,     0,   711,     0,     0,     0,     0,     0,     0,
4176:     1292,     0,     0,  1293,     0,     0,     0,     0,     0,     0,
4177:    -1699,     0,  1742,     0,     0,   713,     0,     0,     0,     0,
4178:        0,     0,     0,     0,     0,     0,     0,     0,   574,     0,
4179:      498,     0,     0,  1299,  1476,  1419,  1476,     0,  1505,     0,
4180:    -1699,  1182,  1183,  1184,  1185,  1186,  1187,     0,     0,  1188,
4181:     1189,     0,     0,     0,   498,     0,  2357,     0,   716,   711,
4182:      710,     0,     0,     0,     0,  1301,     0,  2047,     0,   498,
4183:      498,   498,   498,   498,   498,   498,   498,   498,   498,   880,
4184:      880,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4185:        0,     0,     0,   574,     0,     0,     0,     0,  2077,  2077,
4186:        0,     0,   716,  1419,     0,     0,     0,     0,     0,     0,
4187:    -1699,     0,     0,     0,  1505,     0,     0,  1317,  1318,  1319,
4188:     1320,  1321,  1322,     0, -1481,   713,   574,     0,     0,     0,
4189:        0,     0,     0,  1476,  2252,     0,     0,     0,     0,     0,
4190:        0,     0,  1028,  1035,     0,     0,     0,     0,     0,   806,
4191:        0,     0,  1950,  1190,  1191,   713,     0,  1951,  1952,  1953,
4192:        0,     0,     0,    56, -1699,     0,     0,     0,     0,     0,
4193:        0,     0,     0,     0,  2464,     0,     0,   711, -1699,     0,
4194:        0,  2456,     0, -1699,     0,     0,     0,     0,     0,     0,
4195:        0,     0,     0,     0,   714,     0,     0,     0,     0,     0,
4196:        0,     0,     0,     0,  2472,     0,     0,   574,   574,   574,
4197:      574,     0,   711,     0,  2277,  2291, -1481,  2277, -1699,     0,
4198:     2481,   713,     0,     0,  2041,     0,     0,     0,  2041,     0,
4199:     2172,     0,     0,     0,  2499,     0,     0,     0,     0,     0,
4200:     1277,     0,     0,   711,     0,     0,   711,     0,     0,     0,
4201:      896,     0,     0,     0,  2060,     0,     0,     0,     0,  1742,
4202:        0,   714,     0,  1609,  1192,  1193,     0,     0, -1481,     0,
4203:     1277,  1419,     0,  1310,     0,     0,     0,     0,     0,   714,
4204:        0, -1481,     0,     0,  1194,  2268, -1481,  2271,     0,     0,
4205:        0, -1481,     0,     0,     0,     0,  2561,     0,     0,     0,
4206:    -1481,     0,     0, -1481,   714,     0,     0,     0,     0,     0,
4207:        0,   714,     0,     0,     0,     0,     0,     0,     0,     0,
4208:     1028,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4209:        0,     0, -1481,   714,     0,     0,     0,  1248,     0,   713,
4210:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4211:        0, -1481,     0,  1955,     0,     0,     0,     0,     0,     0,
4212:        0,     0,  1476, -1699,  1259,     0,     0,     0,     0,     0,
4213:     1865,     0,     0,     0,   713,     0,     0,     0,     0,     0,
4214:        0,  2597,     0,     0,  1269,  1270,  1271,     0,     0,  1278,
4215:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4216:    -1481,   716,     0, -1481,     0,   713,     0,     0,   713, -1481,
4217:        0,  1332,     0,     0,     0,     0,     0,     0,     0,     0,
4218:        0,     0,  1956,    56,     0,   469,  2277,     0,   711,  2624,
4219:        0,     0,   498,     0,  2041,     0,     0,     0,     0,  2041,
4220:        0,     0,  2041,     0,  2635,     0,     0,  2638,     0,     0,
4221:      714,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4222:        0,  2654,  1374, -1699, -1481,     0,  1386,  1391,   716,  1225,
4223:     1317,  1318,  1319,  1320,  1321,  1322,     0,     0,     0,     0,
4224:        0,   636,   498,     0,     0,     0,   716,     0, -1495,     0,
4225:      574,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4226:        0,     0,     0,     0,     0,   714,     0,     0,     0,     0,
4227:        0,   716,     0,     0,     0,     0,   498,   498,   716,  2025,
4228:     1028,     0,     0,     0,     0,     0,  1419,  1028,     0,     0,
4229:      498,     0,     0,     0,  2032,     0,     0,     0,  2032,     0,
4230:      716,     0,   574,     0,     0,  2654, -1481,     0,  1028,     0,
4231:        0,     0,     0,     0, -1481,     0,     0,     0,     0,     0,
4232:        0,     0,    56,    56,   498,     0,     0,     0,     0,     0,
4233:    -1481,     0, -1481, -1481,   714,     0,     0,  2041,     0,     0,
4234:    -1495,     0,  2638,     0,     0,     0,     0,     0,     0,     0,
4235:      713,  2744,     0,     0,     0,   498,     0,     0,     0,     0,
4236:        0,     0,     0,     0,   574,     0,     0,     0,     0, -1481,
4237:        0,     0, -1481, -1481, -1481,  1957,  1958,  1959,     0,  1960,
4238:     1961,  1962,  1963,  1964,  1965,     0,   636,     0,     0,     0,
4239:        0,     0, -1495,     0,     0,     0,     0,   574,     0,     0,
4240:        0,     0,     0,     0,     0, -1495,     0,     0,     0,     0,
4241:    -1495,     0,     0,     0,     0, -1495,     0,   716,     0,     0,
4242:        0,     0,  1028,     0, -1495,   469,     0, -1495,     0,     0,
4243:        0,     0,     0,     0,  2798,     0,     0,     0,   498,     0,
4244:        0,    56,  2635,     0,   714,     0,     0,     0,     0,     0,
4245:        0,     0,  1225,     0,     0,     0, -1495,  1225,  2654,   636,
4246:      636,   636,     0,     0,     0,     0,     0,     0,     0,     0,
4247:        0,     0,   716,     0,   714, -1495,     0,     0,     0,     0,
4248:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4249:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1544,
4250:     1546,     0,  2635,     0,  2032,  1292,     0,     0,  1293,  2032,
4251:        0,  2744,  2032,  2624,     0,     0,     0,     0,     0,     0,
4252:        0,     0,  1742,     0, -1495,     0,     0, -1495,  1292,     0,
4253:        0,  1293,     0, -1495,  1574,     0,  1419,     0,  1299,     0,
4254:      714,   716,  2654,     0,  1593, -1699,  1610,     0,     0,  1622,
4255:     1625,  1630,  1633,     0,     0,     0,     0,     0,     0,     0,
4256:      636,  1299,     0,     0,     0,     0,     0,     0, -1699,     0,
4257:     1301,     0,  1644,     0,     0,     0,     0,     0,  1648,  1649,
4258:     1650,  1651,     0,     0,     0,     0,  1660,  1661, -1495,     0,
4259:        0,  1672,     0,  1301,    56,  1675,     0,     0,  1683,  1684,
4260:     1685,  1686,  1687,  1688,  1689,  1690,  1691,     0,     0,  1692,
4261:        0,     0,     0,     0,  1700,     0,    56,  1704,     0,   880,
4262:        0,  1028,     0,     0,     0,     0,     0,     0,     0,     0,
4263:        0,     0,     0,     0,     0,     0,     0,     0,     0,  2253,
4264:        0,     0,     0,  2025,  1726,  1325,     0,  2032,     0,     0,
4265:        0,   716,     0,     0,     0,  1277,     0,     0,   714,     0,
4266:        0,     0,  2467,     0,     0,     0,  1544,  1546,     0, -1699,
4267:    -1495,  1270,  1271,     0,     0,     0,     0,  1225, -1495,     0,
4268:        0,   716,     0, -1699,     0,  1325,     0,     0, -1699,     0,
4269:        0,     0, -1699,   714, -1495,     0, -1495, -1495,     0,     0,
4270:        0,     0,     0,     0,     0,     0, -1699,     0,    56,     0,
4271:        0, -1699,     0,   -39,     0,     0,     0,     0,     0,     0,
4272:        0,     0,     0, -1699,   714,     0,     0,   714,     0,     0,
4273:        0,     0,     1, -1495,     0,     0, -1495, -1495, -1495,     0,
4274:        0,     0,     2,     0,     3,     4, -1699,   716,     0,     0,
4275:     1028,     0,     0,  1837,  1838,     0,  1839,     0,     0,     0,
4276:        5,     0,     0,     0,    56,     0,     0,     0,     0,     6,
4277:        0,     0,     0,     0,     0,     0,     0,     0,  1310,     0,
4278:        0,     7,     0,     0,     0,     0,  1874,     0,     0,     0,
4279:        0,     0,     8,  1325,     0,     0,     0,     0,     0,     0,
4280:     1325,  1310,     0,     9,     0,    10,     0,     0,     0,     0,
4281:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4282:        0,     0,     0,    11,     0,     0,     0,     0,     0,     0,
4283:        0,     0,     0,     0,     0,     0,     0,    12,     0,     0,
4284:        0,     0,     0,     0,     0,    56,     0,    13,  1028,     0,
4285:        0,     0,     0,    14,     0,  1928,     0,     0,     0,     0,
4286:     1934,    15,     0,    16,    17,   716,     0,     0, -1699,     0,
4287:        0,     0,     0,     0,   971,     0,    18,     0,     0,     0,
4288:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4289:        0, -1699,     0,   972,     0,     0,     0,     0,  1949,     0,
4290:      716,     0,     0,    19,     0,     0,     0,     0,     0,   714,
4291:     1630,     0,  1630,  1630,     0,     0,     0,     0,     0,     0,
4292:     1985,     0,     0,     0,  1988,     0,     0,  1990,  1225,     0,
4293:        0,   716,     0,     0,   716,     0,     0,     0,     0,     0,
4294:        0,     0,    20,   973,  2345,     0,     0,     0,     0,     0,
4295:        0,     0,  2346,     0,     0,     0,     0,     0,     0,     0,
4296:     2007,     0,     0,  2010,     0,  2012,     0,     0, -1699,     0,
4297:        0,     0,     0,     0,     0,  1317,  1318,  1319,  1320,  1321,
4298:     1322,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4299:        0, -1699,     0,     0,     0,     0,     0,     0,  1317,  1318,
4300:     1319,  1320,  1321,  1322,     0,     0,     0,     0,     0,  2347,
4301:        0,     0,     0,  1325,     0,     0,     0,     0,     0,    21,
4302:        0,     0,    22,     0,  1325,     0,     0,  1374,  1617,  1292,
4303:        0,   974,  1293,     0,  1325,  1325,  1325,  1294,  1295,  1296,
4304:        0,     0,  1391,  1325,     0,     0,     0,     0,     0,     0,
4305:       23,     0,     0,     0,  1297,     0,     0,     0,    24,     0,
4306:     2085,     0,  1299,     0,     0,     0,     0,     0,     0,  1300,
4307:        0,     0,    25,     0,     0,     0,     0,     0,     0,    26,
4308:      975,     0,  1292,    27,     0,  1293,     0,     0,   976,     0,
4309:     1294,  1295,  1296,    28,  1301,     0,     0,  1325,     0,     0,
4310:      977,     0,  2348,     0,    29,     0,     0,  1297,    30,     0,
4311:        0,     0,     0,     0,     0,  1299,   716,     0,  1028,     0,
4312:        0,     0,  1300,     0,     0,     0,     0,     0,     0,   958,
4313:        0,   978,     0,     0,     0,   959,     0,     0,     0,  1325,
4314:     1291,     0,   971,     0,    31,  1292,     0,  1301,  1293,    32,
4315:        0,  1325,     0,  1294,  1295,  1296,  1325,     0,     0,     0,
4316:        0,   972,    33,     0,     0,     0,     0,     0,     0,     0,
4317:     1297,     0,     0,  1298,     0,     0,   980,     0,  1299,     0,
4318:        0,     0,     0,     0,     0,  1300,    34,     0,     0,     0,
4319:        0,     0,     0,  1302,     0,     0,     0,     0,   981,     0,
4320:       35,     0,     0,   -39,     0,     0,     0,  1303,     0,     0,
4321:     1301,   973,  1304,  2194,     0,     0,     0,     0,   983,     0,
4322:     2349,     0,  2198,  2350,     0,  2199,     0,     0,  2201,     0,
4323:        0,     0,     0,  1305,  1306,     0,     0,     0,     0,     0,
4324:      960,     0,     0,     0,     0,     0,  1302,  1307,     0,     0,
4325:        0,     0,     0,     0,  2221,  2222,     0,     0,     0,     0,
4326:     1303,     0,     0,     0,     0,  1304,     0,     0,  2232,     0,
4327:        0,     0,     0,     0,     0,     0,  2238,     0,     0,  2241,
4328:        0,  2243,     0,     0,     0,  1308,  1305,  1306,  1309,  2247,
4329:        0,     0,     0,     0,     0,     0,     0,  2254,  2255,   974,
4330:     1307,     0,  1310,     0,     0,  1311,     0,     0,     0,  1302,
4331:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4332:        0,     0,     0,  1303,     0,  1427,  2295,     0,  1304,     0,
4333:        0,     0,     0,     0,     0,     0,  2303,     0,  1308,  1325,
4334:        0,  1309,     0,     0,     0,     0,     0,     0,   975,  1305,
4335:     1306,     0,  2316,     0,     0,  1310,   976,     0,  1325,     0,
4336:        0,     0,     0,  1307,     0,     0,     0,     0,   977,     0,
4337:        0,     0,     0,     0,     0,  1325,     0,  1617,  1617,     0,
4338:     1966,     0,  1617,     0,     0,     0,     0,  1325,     0,   961,
4339:     1325,     0,  1312,     0,     0,  1325,     0,     0,  1325,   978,
4340:        0,  1308,     0,     0,  1309,     0,     0,     0,     0,  1325,
4341:        0,     0,     0,  1325,  1325,  1325,  1325,     0,  1310,     0,
4342:        0,  1311,  1617,  1617,     0,  1325,  1325,     0,     0,     0,
4343:        0,     0,     0,     0,     0,     0,     0,  1325,     0,  1808,
4344:     1325,     0,     0,   963,   980,  1312,     0,     0,  1325,  1325,
4345:     1325,  1325,  1325,  1325,  1325,  1325,  1325,  1325,     0,     0,
4346:        0,     0,     0,     0,     0,  1325,   981,     0,     0,  1325,
4347:        0,     0,  1809,     0,     0,     0,     0,  2444,     0,     0,
4348:        0,     0,     0,     0,     0,     0,   983,     0,     0,     0,
4349:        0,  1325,  1313,     0,     0,  1314,  1315,  1316,     0,  1317,
4350:     1318,  1319,  1320,  1321,  1322,     0,     0,     0,  1312,     0,
4351:        0,     0,  1941,     0,     0,     0,     0,     0,     0,     0,
4352:        0,     0,     0,  2457,  2458,     0,     0,     0,  2459,     0,
4353:        0,     0,     0,  2462,     0,     0,  2465,  2466,     0,   965,
4354:        0,  2470,     0,     0,     0,  1313,     0,     0,  1314,  1315,
4355:     1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,     0,     0,
4356:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4357:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4358:        0,     0,     0,     0,     0,     0,     0,     0,   880,     0,
4359:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4360:        0,     0,  1325,  1325,  1325,     0,     0,     0,  1313,     0,
4361:        0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,
4362:     1322,     0,     0,     0,     0,  1292,     0,     0,  1293,     0,
4363:     2555,     0,     0,  1294,  1295,  1296,     0,     0,     0,  1325,
4364:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4365:     1297,     0,     0,  2235,     0,     0,     0,     0,  1299,     0,
4366:        0,     0,     0,     0,     0,  1300,     0,     0,     0,  1292,
4367:        0,     0,  1293,     0,     0,     0,     0,  1294,  1295,  1296,
4368:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4369:     1301,     0,     0,  1325,  1297,     0,     0,     0,     0,  1325,
4370:        0,     0,  1299,     0,     0,     0,     0,     0,     0,  1300,
4371:        0,     0,  1966,  1966,  1325,     0,  1617,  1617,  1617,  1617,
4372:        0,     0,  1617,  1617,  1617,  1617,  1617,  1617,  1617,  1617,
4373:     1617,  1617,  1966,     0,  1301,     0,     0,     0,     0,  1985,
4374:        0,     0,     0,     0,     0,     0,     0,  2608,  2609,     0,
4375:     1325,  2610,     0,  1325,     0,  1325,     0,     0,  1966,  1966,
4376:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4377:        0,     0,  1325,  1617,  1617,  1325,     0,  1325,     0,     0,
4378:        0,     0,     0,     0,     0,     0,     0,  2643,  2644,  1302,
4379:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4380:        0,  2656,     0,  1303,     0,     0,     0,     0,  1304,     0,
4381:        0,  1292,     0,     0,  1293,     0,     0,     0,     0, -1699,
4382:    -1699, -1699,     0,     0,     0,     0,     0,     0,     0,  1305,
4383:     1306,     0,     0,  1302,     0,     0,     0,     0,     0,     0,
4384:        0,     0,     0,  1307,  1299,     0,     0,  1303,     0,     0,
4385:     1325,  1300,  1304,     0,     0,     0,     0,     0,     0,     0,
4386:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4387:        0,     0,     0,  1305,  1306,     0,  1301,     0,     0,     0,
4388:        0,  1308,     0,     0,  1309,     0,     0,  1307,     0,     0,
4389:        0,     0,     0,     0,     0,     0,     0,     0,  1310,     0,
4390:        0,  1311,     0,     0,     0,     0,     0,     0,     0,     0,
4391:        0,  2731,     0,     0,     0,     0,     0,     0,     0,     0,
4392:        0,     0,     0,  1278,     0,  1308,     0,     0,  1309,     0,
4393:        0,     0,     0,     0,  2750,     0,     0,     0,     0,     0,
4394:        0,     0,  1310,     0,     0,  1311,     0,     0,     0,  2764,
4395:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1325,
4396:        0,     0,     0,  1325,  1325,     0,  1325,     0,     0,  1966,
4397:     1966,  1966,  1966,     0,     0,  1302,  1966,  1966,  1966,  1966,
4398:     1966,  1966,  1966,  1966,  1966,  1966,  1325,  1325,  1312,  1303,
4399:      500,     0,     0,     0,  1304,     0,     0,  1325,     0,     0,
4400:        0,     0,     0,  1325,     0,     0,  1325,     0,  1325,     0,
4401:        0,     0,  1325,     0,     0,  1966,  1966,     0,     0,  1325,
4402:     1325,     0,     0,     0,     0,  2643,     0,     0,     0,  1307,
4403:        0,     0,  1312,     0,     0,     0,     0,     0,     0,     0,
4404:        0,     0,     0,   501,     0,     0,     0,     0,     0,     0,
4405:        0,     0,     0,     0,     0,     0,  2827,     0,   502,     0,
4406:     1325,     0,     0,     0,     0,     0,     0,     0,  1325,     0,
4407:        0,     0,     0,     0,     0,  2841,  2841,     0,     0,     0,
4408:        0,  1325,     0,     0,  1310,     0,     0,     0,  1313,     0,
4409:        0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,
4410:     1322,     0,     0,     0,     0,  1639,     0,     0,     0,     0,
4411:        0,     0,   503,     0,     0,     0,     0,     0,     0,     0,
4412:        0,   504,  2841,     0,     0,     0,     0,     0,     0,     0,
4413:        0,     0,  1313,   505,     0,  1314,  1315,  1316,   506,  1317,
4414:     1318,  1319,  1320,  1321,  1322,     0,     0,     0,     0,  1639,
4415:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4416:        0,     0,     0,   507,     0,     0,     0,     0,     0,     0,
4417:        0,     0,     0,     0,  1312,     0,     0,     0,     0,     0,
4418:        0,     0,     0,     0,  2841,     0,     0,     0,     0,     0,
4419:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4420:        0,     0,     0,     0,     0,     0,   508,     0,     0,  1325,
4421:      509,     0,     0,  1617,     0,     0,     0,     0,     0,     0,
4422:        0,     0,  1325,  1325,  1325,     0,     0,  1325,     0,     0,
4423:     1325,  1325,     0,     0,     0,  1325,     0,     0,     0,     0,
4424:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4425:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4426:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4427:        0,     0,     0,   510,  1313,     0,     0, -1699, -1699, -1699,
4428:        0,  1317,  1318,  1319,  1320,  1321,  1322,   511,     0,     0,
4429:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4430:        0,     0,  1617,     0,     0,     0,     0,     0,     0,     0,
4431:        0,     0,     0,     0,     0,     0,     0,     0,   512,     0,
4432:     1325,   513,     0,     0,     0,     0,     0,     0,     0,   514,
4433:        0,     0,   515,     0,     0,     0,     0,     0,     0,     0,
4434:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4435:        0,   516,     0,     0,     0,     0,     0,     0,     0,     0,
4436:        0,     0,     0,     0,   517,     0,     0,  1966,  1617,     0,
4437:        0,   518,     0,  1325,  1325,  1325,     0,     0,     0,     0,
4438:      519,     0,     0,     0,     0,     0,   520,     0,     0,     0,
4439:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4440:        0,     0,     0,     0,     0,     0,     0,     0,  1325,  1325,
4441:        0,   521,     0,     0,     0,     0,     0,     0,     0,     0,
4442:        0,  1325,     0,     0,     0,     0,     0,     0,     0,     0,
4443:        0,     0,     0,  1966,     0,     0,     0,     0,     0,     0,
4444:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4445:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4446:        0,     0,     0,     0,     0,   995,   803,   540,   804,   805,
4447:      806,   807,   808,     0,     0,     0,     0,     0,  1966,     0,
4448:        0,    92,    93,    94,    95,    96,    97,    98,    99,   996,
4449:      100,   101,   102,     0,     0,     0,  1325,   809,     0,     0,
4450:      103,   104,     0,   105,   106,   107,   997,   109,   110,   111,
4451:      112,   810,   998,   811,   812,  1325,   117,   118,   119,   120,
4452:      121,   122,   813,   814,   123,   124,   815,   816,   127,  1325,
4453:      128,   129,   130,   131,   817,     0,   999,     0,   134,   135,
4454:      136,   137,   138,  1000,   140,   141,   142,     0,   143,   144,
4455:      145,   146,   147,   148,     0,  1001,   150,   151,   152,   819,
4456:      820,   821,  1002,   823,   824,   825,   154,   155,   156,   157,
4457:      158,   159,   160,   826,   827,   163,   828,   164,     0,   165,
4458:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
4459:      175,  1003,  1325,   176,   177,   666,   179,   180,     0,   181,
4460:      182,   183,     0,   184,   185,   186,  1325,   187,   188,   189,
4461:      190,   829,   192,   193,   194,   195,   830,   831,   197,     0,
4462:      198,   199,   832,   201,     0,   202,     0,   203,  1004,     0,
4463:     1005,   206,   207,   208,  1006,   210,     0,   211,     0,   212,
4464:      213,     0,   214,   215,   216,   217,   218,   219,  1007,   221,
4465:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
4466:        0,   231,  1008,   233,   234,   235,   236,   237,   833,   834,
4467:        0,   835,     0,   241,  1009,  1010,   244,  1011,   246,   247,
4468:      248,   249,   250,     0,     0,   251,  1012,   253,  1013,     0,
4469:      255,   256,   257,   836,   837,   258,   259,   260,   261,   262,
4470:     1014,   264,   265,   266,   267,   268,   269,   270,   271,   272,
4471:      273,   274,   275,   276,   277,   278,   279,   280,   281,   838,
4472:     1015,   839,   285,   286,   287,   288,   840,   289,   290,  1016,
4473:      292,   841,   842,   294,   843,   296,   297,   298,     0,   299,
4474:      300,     0,     0,   844,   302,   303,     0,     0,   304,   305,
4475:     1017,   307,  1018,   845,   310,   311,   312,   313,   314,   315,
4476:      316,   317,   318,   319,     0,   320,   321,   846,   323,   324,
4477:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
4478:      334,   335,   336,   337,   847,   339,   340,   341,   342,     0,
4479:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
4480:      353,   354,     0,   355,   356,  1019,   358,   359,   360,   848,
4481:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
4482:      372,     0,   373,   374,   375,   376,   377,   849,   378,   379,
4483:      380,   381,   382,  1020,   384,   385,   850,   387,     0,   388,
4484:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
4485:     1021,   400,   851,   402,     0,   403,   404,     0,   405,  1022,
4486:      407,   408,   409,   410,   411,     0,   852,   853,     0,     0,
4487:      414,   415,   854,   417,   855,   856,   419,   420,  1023,   422,
4488:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
4489:      431,   858,     0,   432,   433,   434,   435,   436,   437,   859,
4490:     1024,   439,  1025,   441,   442,   443,   444,     0,     0,   445,
4491:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
4492:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
4493:      464,   465,   466,   860,     0,     0,     0,     0,     0,     0,
4494:      861,   862,  1026,     0,     0,     0,     0,   864,     0,   865,
4495:     1027,     0,     0,     0,   866,     0,   867,   868,    91,   803,
4496:      540,   804,   805,   806,   807,   808,     0,     0,     0,     0,
4497:        0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
4498:       98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
4499:      809,     0,     0,   103,   104,     0,   105,   106,   107,   108,
4500:      109,   110,   111,   112,   810,   114,   811,   812,     0,   117,
4501:      118,   119,   120,   121,   122,   813,   814,   123,   124,   815,
4502:      816,   127,     0,   128,   129,   130,   131,   817,     0,   818,
4503:        0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
4504:        0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
4505:      151,   152,   819,   820,   821,   822,   823,   824,   825,   154,
4506:      155,   156,   157,   158,   159,   160,   826,   827,   163,   828,
4507:      164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
4508:      172,   173,   174,   175,     0,     0,   176,   177,   666,   179,
4509:      180,     0,   181,   182,   183,     0,   184,   185,   186,     0,
4510:      187,   188,   189,   190,   829,   192,   193,   194,   195,   830,
4511:      831,   197,     0,   198,   199,   832,   201,     0,   202,     0,
4512:      203,   204,     0,   205,   206,   207,   208,   209,   210,     0,
4513:      211,     0,   212,   213,     0,   214,   215,   216,   217,   218,
4514:      219,   220,   221,   222,   223,   224,     0,   225,   226,   227,
4515:      228,   229,   230,     0,   231,   232,   233,   234,   235,   236,
4516:      237,   833,   834,     0,   835,     0,   241,   242,   243,   244,
4517:      245,   246,   247,   248,   249,   250,     0,     0,   251,   252,
4518:      253,   254,     0,   255,   256,   257,   836,   837,   258,   259,
4519:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
4520:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
4521:      280,   281,   838,   283,   839,   285,   286,   287,   288,   840,
4522:      289,   290,   291,   292,   841,   842,   294,   843,   296,   297,
4523:      298,     0,   299,   300,     0,     0,   844,   302,   303,     0,
4524:        0,   304,   305,   306,   307,   308,   845,   310,   311,   312,
4525:      313,   314,   315,   316,   317,   318,   319,     0,   320,   321,
4526:      846,   323,   324,   325,   326,   327,   328,     0,   329,   330,
4527:      331,   332,   333,   334,   335,   336,   337,   847,   339,   340,
4528:      341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
4529:      350,   351,   352,   353,   354,     0,   355,   356,   357,   358,
4530:      359,   360,   848,   362,   363,   364,   365,   366,   367,   368,
4531:      369,   370,   371,   372,    25,   373,   374,   375,   376,   377,
4532:      849,   378,   379,   380,   381,   382,   383,   384,   385,   850,
4533:      387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
4534:      396,   397,   398,   399,   400,   851,   402,     0,   403,   404,
4535:       30,   405,   406,   407,   408,   409,   410,   411,     0,   852,
4536:      853,     0,     0,   414,   415,   854,   417,   855,   856,   419,
4537:      420,   857,   422,   423,   424,   425,   426,     0,     0,   427,
4538:      428,   429,   430,   431,   858,     0,   432,   433,   434,   435,
4539:      436,   566,   859,     0,   439,   440,   441,   442,   443,   444,
4540:        0,     0,   445,     0,    33,   446,   447,   448,   449,   450,
4541:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
4542:      461,   462,   463,   464,   465,   466,   860,     0,    34,     0,
4543:        0,     0,     0,   861,   862,     0,     0,     0,     0,     0,
4544:      864,     0,   865,  2740,     0,     0,     0,   866,     0,   867,
4545:      868,    91,   803,   540,   804,   805,   806,   807,   808,     0,
4546:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
4547:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
4548:        0,     0,     0,   809,     0,     0,   103,   104,     0,   105,
4549:      106,   107,   108,   109,   110,   111,   112,   810,   114,   811,
4550:      812,     0,   117,   118,   119,   120,   121,   122,   813,   814,
4551:      123,   124,   815,   816,   127,     0,   128,   129,   130,   131,
4552:      817,     0,   818,     0,   134,   135,   136,   137,   138,   139,
4553:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
4554:        0,   149,   150,   151,   152,   819,   820,   821,   822,   823,
4555:      824,   825,   154,   155,   156,   157,   158,   159,   160,   826,
4556:      827,   163,   828,   164,     0,   165,   166,   167,   168,   169,
4557:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
4558:      177,   666,   179,   180,     0,   181,   182,   183,     0,   184,
4559:      185,   186,     0,   187,   188,   189,   190,   829,   192,   193,
4560:      194,   195,   830,   831,   197,     0,   198,   199,   832,   201,
4561:        0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
4562:      209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
4563:      216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
4564:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4565:      234,   235,   236,   237,   833,   834,     0,   835,     0,   241,
4566:      242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
4567:        0,   251,   252,   253,   254,     0,   255,   256,   257,   836,
4568:      837,   258,   259,   260,   261,   262,   263,   264,   265,   266,
4569:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
4570:      277,   278,   279,   280,   281,   838,   283,   839,   285,   286,
4571:      287,   288,   840,   289,   290,   291,   292,   841,   842,   294,
4572:      843,   296,   297,   298,     0,   299,   300,     0,     0,   844,
4573:      302,   303,     0,     0,   304,   305,   306,   307,   308,   845,
4574:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
4575:        0,   320,   321,   846,   323,   324,   325,   326,   327,   328,
4576:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
4577:      847,   339,   340,   341,   342,     0,   343,   344,   345,   346,
4578:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
4579:      356,   357,   358,   359,   360,   848,   362,   363,   364,   365,
4580:      366,   367,   368,   369,   370,   371,   372,    25,   373,   374,
4581:      375,   376,   377,   849,   378,   379,   380,   381,   382,   383,
4582:      384,   385,   850,   387,     0,   388,   389,   390,   391,   392,
4583:      393,   394,   395,   396,   397,   398,   399,   400,   851,   402,
4584:        0,   403,   404,    30,   405,   406,   407,   408,   409,   410,
4585:      411,     0,   852,   853,     0,     0,   414,   415,   854,   417,
4586:      855,   856,   419,   420,   857,   422,   423,   424,   425,   426,
4587:        0,     0,   427,   428,   429,   430,   431,   858,     0,   432,
4588:      433,   434,   435,   436,   566,   859,     0,   439,   440,   441,
4589:      442,   443,   444,     0,     0,   445,     0,    33,   446,   447,
4590:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
4591:      458,   459,   460,   461,   462,   463,   464,   465,   466,   860,
4592:        0,    34,     0,     0,     0,     0,   861,   862,     0,     0,
4593:        0,     0,     0,   864,     0,   865,     0,     0,     0,     0,
4594:      866,     0,   867,   868,    91,   803,   540,   804,   805,   806,
4595:      807,   808,     0,     0,     0,     0,     0,     0,     0,     0,
4596:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
4597:      101,   102,     0,     0,     0,     0,   809,     0,     0,   103,
4598:      104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
4599:      810,   114,   811,   812,  1626,   117,   118,   119,   120,   121,
4600:      122,   813,   814,   123,   124,   815,   816,   127,     0,   128,
4601:      129,   130,   131,   817,     0,   818,     0,   134,   135,   136,
4602:      137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
4603:      146,   147,   148,     0,   149,   150,   151,   152,   819,   820,
4604:      821,   822,   823,   824,   825,   154,   155,   156,   157,   158,
4605:      159,   160,   826,   827,   163,   828,   164,     0,   165,   166,
4606:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
4607:        0,     0,   176,   177,   666,   179,   180,     0,   181,   182,
4608:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
4609:      829,   192,   193,   194,   195,   830,   831,   197,     0,   198,
4610:      199,   832,   201,     0,   202,     0,   203,   204,  1627,   205,
4611:      206,   207,   208,   209,   210,     0,   211,     0,   212,   213,
4612:        0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
4613:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
4614:      231,   232,   233,   234,   235,   236,   237,   833,   834,     0,
4615:      835,     0,   241,   242,   243,   244,   245,   246,   247,   248,
4616:      249,   250,     0,  1628,   251,   252,   253,   254,     0,   255,
4617:      256,   257,   836,   837,   258,   259,   260,   261,   262,   263,
4618:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
4619:      274,   275,   276,   277,   278,   279,   280,   281,   838,   283,
4620:      839,   285,   286,   287,   288,   840,   289,   290,   291,   292,
4621:      841,   842,   294,   843,   296,   297,   298,     0,   299,   300,
4622:        0,     0,   844,   302,   303,     0,     0,   304,   305,   306,
4623:      307,   308,   845,   310,   311,   312,   313,   314,   315,   316,
4624:      317,   318,   319,     0,   320,   321,   846,   323,   324,   325,
4625:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
4626:      335,   336,   337,   847,   339,   340,   341,   342,     0,   343,
4627:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
4628:      354,     0,   355,   356,   357,   358,   359,   360,   848,   362,
4629:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
4630:        0,   373,   374,   375,   376,   377,   849,   378,   379,   380,
4631:      381,   382,   383,   384,   385,   850,   387,     0,   388,   389,
4632:      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
4633:      400,   851,   402,     0,   403,   404,     0,   405,   406,   407,
4634:      408,   409,   410,   411,     0,   852,   853,     0,  1629,   414,
4635:      415,   854,   417,   855,   856,   419,   420,   857,   422,   423,
4636:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
4637:      858,     0,   432,   433,   434,   435,   436,   437,   859,     0,
4638:      439,   440,   441,   442,   443,   444,     0,     0,   445,     0,
4639:        0,   446,   447,   448,   449,   450,   451,   452,   453,   454,
4640:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
4641:      465,   466,   860,     0,     0,     0,     0,     0,     0,   861,
4642:      862,     0,     0,     0,     0,     0,   864,     0,   865,     0,
4643:        0,     0,     0,   866,     0,   867,   868,    91,   803,   540,
4644:      804,   805,   806,   807,   808,     0,     0,     0,     0,     0,
4645:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
4646:       99,     0,   100,   101,   102,     0,     0,     0,     0,   809,
4647:        0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
4648:      110,   111,   112,   810,   114,   811,   812,     0,   117,   118,
4649:      119,   120,   121,   122,   813,   814,   123,   124,   815,   816,
4650:      127,     0,   128,   129,   130,   131,   817,     0,   818,     0,
4651:      134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
4652:      143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
4653:      152,   819,   820,   821,   822,   823,   824,   825,   154,   155,
4654:      156,   157,   158,   159,   160,   826,   827,   163,   828,   164,
4655:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
4656:      173,   174,   175,     0,     0,   176,   177,   666,   179,   180,
4657:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
4658:      188,   189,   190,   829,   192,   193,   194,   195,   830,   831,
4659:      197,     0,   198,   199,   832,   201,     0,   202,     0,   203,
4660:      204,     0,   205,   206,   207,   208,   209,   210,     0,   211,
4661:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
4662:      220,   221,   222,   223,   224,     0,   225,   226,   227,   228,
4663:      229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
4664:      833,   834,     0,   835,     0,   241,   242,   243,   244,   245,
4665:      246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
4666:      254,     0,   255,   256,   257,   836,   837,   258,   259,   260,
4667:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
4668:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
4669:      281,   838,   283,   839,   285,   286,   287,   288,   840,   289,
4670:      290,   291,   292,   841,   842,   294,   843,   296,   297,   298,
4671:        0,   299,   300,     0,     0,   844,   302,   303,     0,     0,
4672:      304,   305,   306,   307,   308,   845,   310,   311,   312,   313,
4673:      314,   315,   316,   317,   318,   319,     0,   320,   321,   846,
4674:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
4675:      332,   333,   334,   335,   336,   337,   847,   339,   340,   341,
4676:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
4677:      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
4678:      360,   848,   362,   363,   364,   365,   366,   367,   368,   369,
4679:      370,   371,   372,     0,   373,   374,   375,   376,   377,   849,
4680:      378,   379,   380,   381,   382,   383,   384,   385,   850,   387,
4681:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
4682:      397,   398,   399,   400,   851,   402,     0,   403,   404,     0,
4683:      405,   406,   407,   408,   409,   410,   411,     0,   852,   853,
4684:        0,     0,   414,   415,   854,   417,   855,   856,   419,   420,
4685:      857,   422,   423,   424,   425,   426,     0,     0,   427,   428,
4686:      429,   430,   431,   858,     0,   432,   433,   434,   435,   436,
4687:      437,   859,     0,   439,   440,   441,   442,   443,   444,     0,
4688:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
4689:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
4690:      462,   463,   464,   465,   466,   860,     0,     0,     0,     0,
4691:        0,     0,   861,   862,   863,     0,     0,     0,     0,   864,
4692:        0,   865,     0,     0,     0,     0,   866,     0,   867,   868,
4693:       91,   803,   540,   804,   805,   806,   807,   808,     0,     0,
4694:        0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
4695:       96,    97,    98,    99,  1384,   100,   101,   102,     0,     0,
4696:        0,     0,   809,     0,     0,   103,   104,     0,   105,   106,
4697:      107,   108,   109,   110,   111,   112,   810,   114,   811,   812,
4698:        0,   117,   118,   119,   120,   121,   122,   813,   814,   123,
4699:      124,   815,   816,   127,     0,   128,   129,   130,   131,   817,
4700:        0,   818,     0,   134,   135,   136,   137,   138,   139,   140,
4701:      141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
4702:      149,   150,   151,   152,   819,   820,   821,   822,   823,   824,
4703:      825,   154,   155,   156,   157,   158,   159,   160,   826,   827,
4704:      163,   828,   164,     0,   165,   166,   167,   168,   169,   170,
4705:        0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
4706:      666,   179,   180,     0,   181,   182,   183,     0,   184,   185,
4707:      186,     0,   187,   188,   189,   190,   829,   192,   193,   194,
4708:      195,   830,   831,   197,     0,   198,   199,   832,   201,     0,
4709:      202,     0,   203,   204,     0,   205,   206,   207,   208,   209,
4710:      210,     0,   211,     0,   212,   213,     0,   214,   215,   216,
4711:      217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
4712:      226,   227,   228,   229,   230,     0,   231,   232,   233,   234,
4713:      235,   236,   237,   833,   834,     0,   835,     0,   241,   242,
4714:      243,   244,   245,   246,   247,   248,   249,   250,     0,     0,
4715:      251,   252,   253,   254,     0,   255,   256,   257,   836,   837,
4716:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
4717:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
4718:      278,   279,   280,   281,   838,   283,   839,   285,   286,   287,
4719:      288,   840,   289,   290,   291,   292,   841,   842,   294,   843,
4720:      296,   297,   298,     0,   299,   300,     0,     0,   844,   302,
4721:      303,     0,     0,   304,   305,   306,   307,   308,   845,   310,
4722:      311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
4723:      320,   321,   846,   323,   324,   325,   326,   327,   328,     0,
4724:      329,   330,   331,   332,   333,   334,   335,   336,   337,   847,
4725:      339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
4726:      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
4727:      357,   358,   359,   360,   848,   362,   363,   364,   365,   366,
4728:      367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
4729:      376,   377,   849,   378,   379,   380,   381,   382,   383,   384,
4730:      385,   850,   387,     0,   388,   389,   390,   391,   392,   393,
4731:      394,   395,   396,   397,   398,   399,   400,   851,   402,     0,
4732:      403,   404,     0,   405,   406,   407,   408,   409,   410,   411,
4733:        0,   852,   853,     0,     0,   414,   415,   854,   417,   855,
4734:      856,   419,   420,   857,   422,   423,   424,   425,   426,     0,
4735:        0,   427,   428,   429,   430,   431,   858,     0,   432,   433,
4736:      434,   435,   436,   437,   859,     0,   439,   440,   441,   442,
4737:      443,   444,     0,     0,   445,     0,     0,   446,   447,   448,
4738:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
4739:      459,   460,   461,   462,   463,   464,   465,   466,   860,     0,
4740:        0,     0,     0,     0,     0,   861,   862,     0,     0,     0,
4741:        0,     0,   864,     0,   865,     0,     0,     0,     0,   866,
4742:        0,   867,   868,   995,   803,   540,   804,   805,   806,   807,
4743:      808,     0,     0,     0,     0,     0,     0,     0,     0,    92,
4744:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
4745:      102,     0,     0,     0,     0,   809,     0,     0,   103,   104,
4746:        0,   105,   106,   107,   997,   109,   110,   111,   112,   810,
4747:      998,   811,   812,     0,   117,   118,   119,   120,   121,   122,
4748:      813,   814,   123,   124,   815,   816,   127,     0,   128,   129,
4749:      130,   131,   817,     0,   999,     0,   134,   135,   136,   137,
4750:      138,  1000,   140,   141,   142,     0,   143,   144,   145,   146,
4751:      147,   148,     0,  1001,   150,   151,   152,   819,   820,   821,
4752:     1002,   823,   824,   825,   154,   155,   156,   157,   158,   159,
4753:      160,   826,   827,   163,   828,   164,     0,   165,   166,   167,
4754:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
4755:        0,   176,   177,   666,   179,   180,     0,   181,   182,   183,
4756:        0,   184,   185,   186,     0,   187,   188,   189,   190,   829,
4757:      192,   193,   194,   195,   830,   831,   197,     0,   198,   199,
4758:      832,   201,     0,   202,     0,   203,  1004,     0,  1005,   206,
4759:      207,   208,  1006,   210,     0,   211,     0,   212,   213,     0,
4760:      214,   215,   216,   217,   218,   219,  1007,   221,   222,   223,
4761:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
4762:     1008,   233,   234,   235,   236,   237,   833,   834,     0,   835,
4763:        0,   241,  1009,  1010,   244,  1011,   246,   247,   248,   249,
4764:      250,     0,     0,   251,  1012,   253,  1013,     0,   255,   256,
4765:      257,   836,   837,   258,   259,   260,   261,   262,  1014,   264,
4766:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
4767:      275,   276,   277,   278,   279,   280,   281,   838,  1015,   839,
4768:      285,   286,   287,   288,   840,   289,   290,  1016,   292,   841,
4769:      842,   294,   843,   296,   297,   298,     0,   299,   300,     0,
4770:        0,   844,   302,   303,     0,     0,   304,   305,  1017,   307,
4771:     1018,   845,   310,   311,   312,   313,   314,   315,   316,   317,
4772:      318,   319,     0,   320,   321,   846,   323,   324,   325,   326,
4773:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
4774:      336,   337,   847,   339,   340,   341,   342,     0,   343,   344,
4775:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
4776:        0,   355,   356,  1019,   358,   359,   360,   848,   362,   363,
4777:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
4778:      373,   374,   375,   376,   377,   849,   378,   379,   380,   381,
4779:      382,  1020,   384,   385,   850,   387,     0,   388,   389,   390,
4780:      391,   392,   393,   394,   395,   396,   397,   398,  1021,   400,
4781:      851,   402,     0,   403,   404,     0,   405,  1022,   407,   408,
4782:      409,   410,   411,     0,   852,   853,     0,     0,   414,   415,
4783:      854,   417,   855,   856,   419,   420,  1023,   422,   423,   424,
4784:      425,   426,     0,     0,   427,   428,   429,   430,   431,   858,
4785:        0,   432,   433,   434,   435,   436,   437,   859,     0,   439,
4786:     1025,   441,   442,   443,   444,     0,     0,   445,     0,     0,
4787:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
4788:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4789:      466,   860,     0,     0,     0,     0,     0,     0,   861,   862,
4790:        0,     0,     0,     0,     0,   864,     0,   865,  1500,     0,
4791:        0,     0,   866,     0,   867,   868,    91,   803,   540,   804,
4792:      805,   806,   807,   808,     0,     0,     0,     0,     0,     0,
4793:        0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
4794:        0,   100,   101,   102,     0,     0,     0,     0,   809,     0,
4795:        0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
4796:      111,   112,   810,   114,   811,   812,     0,   117,   118,   119,
4797:      120,   121,   122,   813,   814,   123,   124,   815,   816,   127,
4798:        0,   128,   129,   130,   131,   817,     0,   818,     0,   134,
4799:      135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
4800:      144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
4801:      819,   820,   821,   822,   823,   824,   825,   154,   155,   156,
4802:      157,   158,   159,   160,   826,   827,   163,   828,   164,     0,
4803:      165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
4804:      174,   175,     0,     0,   176,   177,   666,   179,   180,     0,
4805:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
4806:      189,   190,   829,   192,   193,   194,   195,   830,   831,   197,
4807:        0,   198,   199,   832,   201,     0,   202,     0,   203,   204,
4808:        0,   205,   206,   207,   208,   209,   210,     0,   211,     0,
4809:      212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
4810:      221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
4811:      230,     0,   231,   232,   233,   234,   235,   236,   237,   833,
4812:      834,     0,   835,     0,   241,   242,   243,   244,   245,   246,
4813:      247,   248,   249,   250,     0,     0,   251,   252,   253,   254,
4814:        0,   255,   256,   257,   836,   837,   258,   259,   260,   261,
4815:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
4816:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
4817:      838,   283,   839,   285,   286,   287,   288,   840,   289,   290,
4818:      291,   292,   841,   842,   294,   843,   296,   297,   298,     0,
4819:      299,   300,     0,     0,   844,   302,   303,     0,     0,   304,
4820:      305,   306,   307,   308,   845,   310,   311,   312,   313,   314,
4821:      315,   316,   317,   318,   319,     0,   320,   321,   846,   323,
4822:      324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
4823:      333,   334,   335,   336,   337,   847,   339,   340,   341,   342,
4824:        0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
4825:      352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
4826:      848,   362,   363,   364,   365,   366,   367,   368,   369,   370,
4827:      371,   372,     0,   373,   374,   375,   376,   377,   849,   378,
4828:      379,   380,   381,   382,   383,   384,   385,   850,   387,     0,
4829:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
4830:      398,   399,   400,   851,   402,     0,   403,   404,     0,   405,
4831:      406,   407,   408,   409,   410,   411,     0,   852,   853,     0,
4832:        0,   414,   415,   854,   417,   855,   856,   419,   420,   857,
4833:      422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
4834:      430,   431,   858,     0,   432,   433,   434,   435,   436,   437,
4835:      859,     0,   439,   440,   441,   442,   443,   444,     0,     0,
4836:      445,     0,     0,   446,   447,   448,   449,   450,   451,   452,
4837:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
4838:      463,   464,   465,   466,   860,     0,     0,     0,     0,     0,
4839:        0,   861,   862,     0,     0,     0,     0,     0,   864,     0,
4840:      865,  1620,     0,     0,     0,   866,     0,   867,   868,   995,
4841:      803,   540,   804,   805,   806,   807,   808,     0,     0,     0,
4842:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
4843:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
4844:        0,   809,     0,     0,   103,   104,     0,   105,   106,   107,
4845:      997,   109,   110,   111,   112,   810,   998,   811,   812,     0,
4846:      117,   118,   119,   120,   121,   122,   813,   814,   123,   124,
4847:      815,   816,   127,     0,   128,   129,   130,   131,   817,     0,
4848:      999,     0,   134,   135,   136,   137,   138,  1000,   140,   141,
4849:      142,     0,   143,   144,   145,   146,   147,   148,     0,  1001,
4850:      150,   151,   152,   819,   820,   821,  1002,   823,   824,   825,
4851:      154,   155,   156,   157,   158,   159,   160,   826,   827,   163,
4852:      828,   164,     0,   165,   166,   167,   168,   169,   170,     0,
4853:      171,   172,   173,   174,   175,     0,     0,   176,   177,   666,
4854:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
4855:        0,   187,   188,   189,   190,   829,   192,   193,   194,   195,
4856:      830,   831,   197,     0,   198,   199,   832,   201,     0,   202,
4857:        0,   203,  1004,     0,  1005,   206,   207,   208,  1006,   210,
4858:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
4859:      218,   219,  1007,   221,   222,   223,   224,     0,   225,   226,
4860:      227,   228,   229,   230,     0,   231,  1008,   233,   234,   235,
4861:      236,   237,   833,   834,     0,   835,     0,   241,  1009,  1010,
4862:      244,  1011,   246,   247,   248,   249,   250,     0,     0,   251,
4863:     1012,   253,  1013,     0,   255,   256,   257,   836,   837,   258,
4864:      259,   260,   261,   262,  1014,   264,   265,   266,   267,   268,
4865:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
4866:      279,   280,   281,   838,  1015,   839,   285,   286,   287,   288,
4867:      840,   289,   290,  1016,   292,   841,   842,   294,   843,   296,
4868:      297,   298,     0,   299,   300,     0,     0,   844,   302,   303,
4869:        0,     0,   304,   305,  1017,   307,  1018,   845,   310,   311,
4870:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
4871:      321,   846,   323,   324,   325,   326,   327,   328,     0,   329,
4872:      330,   331,   332,   333,   334,   335,   336,   337,   847,   339,
4873:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
4874:      349,   350,   351,   352,   353,   354,     0,   355,   356,  1019,
4875:      358,   359,   360,   848,   362,   363,   364,   365,   366,   367,
4876:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
4877:      377,   849,   378,   379,   380,   381,   382,  1020,   384,   385,
4878:      850,   387,     0,   388,   389,   390,   391,   392,   393,   394,
4879:      395,   396,   397,   398,  1021,   400,   851,   402,     0,   403,
4880:      404,     0,   405,  1022,   407,   408,   409,   410,   411,     0,
4881:      852,   853,     0,     0,   414,   415,   854,   417,   855,   856,
4882:      419,   420,  1023,   422,   423,   424,   425,   426,     0,     0,
4883:      427,   428,   429,   430,   431,   858,     0,   432,   433,   434,
4884:      435,   436,   437,   859,  1834,   439,  1025,   441,   442,   443,
4885:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
4886:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
4887:      460,   461,   462,   463,   464,   465,   466,   860,     0,     0,
4888:        0,     0,     0,     0,   861,   862,     0,     0,     0,     0,
4889:        0,   864,     0,   865,     0,     0,     0,     0,   866,     0,
4890:      867,   868,    91,   803,   540,   804,   805,   806,   807,   808,
4891:        0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
4892:       94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
4893:        0,     0,     0,     0,   809,     0,     0,   103,   104,     0,
4894:      105,   106,   107,   108,   109,   110,   111,   112,   810,   114,
4895:      811,   812,     0,   117,   118,   119,   120,   121,   122,   813,
4896:      814,   123,   124,   815,   816,   127,     0,   128,   129,   130,
4897:      131,   817,     0,   818,     0,   134,   135,   136,   137,   138,
4898:      139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
4899:      148,     0,   149,   150,   151,   152,   819,   820,   821,   822,
4900:      823,   824,   825,   154,   155,   156,   157,   158,   159,   160,
4901:      826,   827,   163,   828,   164,     0,   165,   166,   167,   168,
4902:      169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
4903:      176,   177,   666,   179,   180,     0,   181,   182,   183,     0,
4904:      184,   185,   186,     0,   187,   188,   189,   190,   829,   192,
4905:      193,   194,   195,   830,   831,   197,     0,   198,   199,   832,
4906:      201,     0,   202,     0,   203,   204,  1627,   205,   206,   207,
4907:      208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
4908:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
4909:        0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
4910:      233,   234,   235,   236,   237,   833,   834,     0,   835,     0,
4911:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
4912:        0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
4913:      836,   837,   258,   259,   260,   261,   262,   263,   264,   265,
4914:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4915:      276,   277,   278,   279,   280,   281,   838,   283,   839,   285,
4916:      286,   287,   288,   840,   289,   290,   291,   292,   841,   842,
4917:      294,   843,   296,   297,   298,     0,   299,   300,     0,     0,
4918:      844,   302,   303,     0,     0,   304,   305,   306,   307,   308,
4919:      845,   310,   311,   312,   313,   314,   315,   316,   317,   318,
4920:      319,     0,   320,   321,   846,   323,   324,   325,   326,   327,
4921:      328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
4922:      337,   847,   339,   340,   341,   342,     0,   343,   344,   345,
4923:      346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
4924:      355,   356,   357,   358,   359,   360,   848,   362,   363,   364,
4925:      365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
4926:      374,   375,   376,   377,   849,   378,   379,   380,   381,   382,
4927:      383,   384,   385,   850,   387,     0,   388,   389,   390,   391,
4928:      392,   393,   394,   395,   396,   397,   398,   399,   400,   851,
4929:      402,     0,   403,   404,     0,   405,   406,   407,   408,   409,
4930:      410,   411,     0,   852,   853,     0,     0,   414,   415,   854,
4931:      417,   855,   856,   419,   420,   857,   422,   423,   424,   425,
4932:      426,     0,     0,   427,   428,   429,   430,   431,   858,     0,
4933:      432,   433,   434,   435,   436,   437,   859,     0,   439,   440,
4934:      441,   442,   443,   444,     0,     0,   445,     0,     0,   446,
4935:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
4936:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
4937:      860,     0,     0,     0,     0,     0,     0,   861,   862,     0,
4938:        0,     0,     0,     0,   864,     0,   865,     0,     0,     0,
4939:        0,   866,     0,   867,   868,    91,   803,   540,   804,   805,
4940:      806,   807,   808,     0,     0,     0,     0,     0,     0,     0,
4941:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
4942:      100,   101,   102,     0,     0,     0,     0,   809,     0,     0,
4943:      103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
4944:      112,   810,   114,   811,   812,     0,   117,   118,   119,   120,
4945:      121,   122,   813,   814,   123,   124,   815,   816,   127,     0,
4946:      128,   129,   130,   131,   817,     0,   818,     0,   134,   135,
4947:      136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
4948:      145,   146,   147,   148,     0,   149,   150,   151,   152,   819,
4949:      820,   821,   822,   823,   824,   825,   154,   155,   156,   157,
4950:      158,   159,   160,   826,   827,   163,   828,   164,     0,   165,
4951:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
4952:      175,     0,     0,   176,   177,   666,   179,   180,     0,   181,
4953:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
4954:      190,   829,   192,   193,   194,   195,   830,   831,   197,     0,
4955:      198,   199,   832,   201,     0,   202,     0,   203,   204,     0,
4956:      205,   206,   207,   208,   209,   210,     0,   211,     0,   212,
4957:      213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
4958:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
4959:        0,   231,   232,   233,   234,   235,   236,   237,   833,   834,
4960:        0,   835,     0,   241,   242,   243,   244,   245,   246,   247,
4961:      248,   249,   250,     0,     0,   251,   252,   253,   254,     0,
4962:      255,   256,   257,   836,   837,   258,   259,   260,   261,   262,
4963:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
4964:      273,   274,   275,   276,   277,   278,   279,   280,   281,   838,
4965:      283,   839,   285,   286,   287,   288,   840,   289,   290,   291,
4966:      292,   841,   842,   294,   843,   296,   297,   298,     0,   299,
4967:      300,     0,     0,   844,   302,   303,     0,     0,   304,   305,
4968:      306,   307,   308,   845,   310,   311,   312,   313,   314,   315,
4969:      316,   317,   318,   319,     0,   320,   321,   846,   323,   324,
4970:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
4971:      334,   335,   336,   337,   847,   339,   340,   341,   342,     0,
4972:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
4973:      353,   354,     0,   355,   356,   357,   358,   359,   360,   848,
4974:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
4975:      372,     0,   373,   374,   375,   376,   377,   849,   378,   379,
4976:      380,   381,   382,   383,   384,   385,   850,   387,     0,   388,
4977:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
4978:      399,   400,   851,   402,     0,   403,   404,     0,   405,   406,
4979:      407,   408,   409,   410,   411,     0,   852,   853,     0,     0,
4980:      414,   415,   854,   417,   855,   856,   419,   420,   857,   422,
4981:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
4982:      431,   858,     0,   432,   433,   434,   435,   436,   437,   859,
4983:        0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
4984:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
4985:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
4986:      464,   465,   466,   860,     0,     0,     0,     0,     0,     0,
4987:      861,   862,     0,     0,     0,     0,     0,   864,     0,   865,
4988:        0,     0,     0,     0,   866,     0,   867,   868,   995,   803,
4989:      540,   804,   805,   806,   807,   808,     0,     0,     0,     0,
4990:        0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
4991:       98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
4992:      809,     0,     0,   103,   104,     0,   105,   106,   107,   997,
4993:      109,   110,   111,   112,   810,   998,   811,   812,     0,   117,
4994:      118,   119,   120,   121,   122,   813,   814,   123,   124,   815,
4995:      816,   127,     0,   128,   129,   130,   131,   817,     0,   999,
4996:        0,   134,   135,   136,   137,   138,  1000,   140,   141,   142,
4997:        0,   143,   144,   145,   146,   147,   148,     0,  1001,   150,
4998:      151,   152,   819,   820,   821,  1002,   823,   824,   825,   154,
4999:      155,   156,   157,   158,   159,   160,   826,   827,   163,   828,
5000:      164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
5001:      172,   173,   174,   175,     0,     0,   176,   177,   666,   179,
5002:      180,     0,   181,   182,   183,     0,   184,   185,   186,     0,
5003:      187,   188,   189,   190,   829,   192,   193,   194,   195,   830,
5004:      831,   197,     0,   198,   199,   832,   201,     0,   202,     0,
5005:      203,  1004,     0,  1005,   206,   207,   208,  1006,   210,     0,
5006:      211,     0,   212,   213,     0,   214,   215,   216,   217,   218,
5007:      219,  1007,   221,   222,   223,   224,     0,   225,   226,   227,
5008:      228,   229,   230,     0,   231,  1008,   233,   234,   235,   236,
5009:      237,   833,   834,     0,   835,     0,   241,  1009,  1010,   244,
5010:     1011,   246,   247,   248,   249,   250,     0,     0,   251,  1012,
5011:      253,  1013,     0,   255,   256,   257,   836,   837,   258,   259,
5012:      260,   261,   262,  1014,   264,   265,   266,   267,   268,   269,
5013:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5014:      280,   281,   838,  1015,   839,   285,   286,   287,   288,   840,
5015:      289,   290,  1016,   292,   841,   842,   294,   843,   296,   297,
5016:      298,     0,   299,   300,     0,     0,   844,   302,   303,     0,
5017:        0,   304,   305,  1017,   307,  1018,   845,   310,   311,   312,
5018:      313,   314,   315,   316,   317,   318,   319,     0,   320,   321,
5019:      846,   323,   324,   325,   326,   327,   328,     0,   329,   330,
5020:      331,   332,   333,   334,   335,   336,   337,   847,   339,   340,
5021:      341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
5022:      350,   351,   352,   353,   354,     0,   355,   356,  1019,   358,
5023:      359,   360,   848,   362,   363,   364,   365,   366,   367,   368,
5024:      369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
5025:      849,   378,   379,   380,   381,   382,  1020,   384,   385,   850,
5026:      387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
5027:      396,   397,   398,  1021,   400,   851,   402,     0,   403,   404,
5028:        0,   405,  1022,   407,   408,   409,   410,   411,     0,   852,
5029:      853,     0,     0,   414,   415,   854,   417,   855,   856,   419,
5030:      420,  1023,   422,   423,   424,   425,   426,     0,     0,   427,
5031:      428,   429,   430,   431,   858,     0,   432,   433,   434,   435,
5032:      436,   437,   859,     0,   439,  1025,   441,   442,   443,   444,
5033:        0,     0,   445,     0,     0,   446,   447,   448,   449,   450,
5034:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
5035:      461,   462,   463,   464,   465,   466,   860,     0,     0,     0,
5036:        0,     0,     0,   861,   862,     0,     0,     0,     0,     0,
5037:      864,     0,   865,     0,     0,     0,     0,   866,     0,   867,
5038:      868,    91,   803,   540,   804,   805,   806,   807,   808,     0,
5039:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
5040:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
5041:        0,     0,     0,   809,     0,     0,   103,   104,     0,   105,
5042:      106,   107,   108,   109,   110,   111,   112,   810,   114,   811,
5043:      812,     0,   117,   118,   119,   120,   121,   122,   813,   814,
5044:      123,   124,   815,   816,   127,     0,   128,   129,   130,   131,
5045:      817,     0,   818,     0,   134,   135,   136,   137,   138,   139,
5046:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
5047:        0,   149,   150,   151,   152,   819,   820,   821,   822,   823,
5048:      824,   825,   154,   155,   156,   157,   158,   159,   160,   826,
5049:      827,   163,   828,   164,     0,   165,   166,   167,   168,   169,
5050:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
5051:      177,   666,   179,   180,     0,   181,   182,   183,     0,   184,
5052:      185,   186,     0,   187,   188,   189,   190,   829,   192,   193,
5053:      194,   195,   830,   831,   197,     0,   198,   199,   832,   201,
5054:        0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
5055:      209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
5056:      216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
5057:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5058:      234,   235,   236,   237,   833,   834,     0,   835,     0,   241,
5059:      242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
5060:        0,   251,   252,   253,   254,     0,   255,   256,   257,   836,
5061:      837,   258,   259,   260,   261,   262,   263,   264,   265,   266,
5062:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
5063:      277,   278,   279,   280,   281,   838,   283,   839,   285,   286,
5064:      287,   288,   840,   289,   290,   291,   292,   841,   842,   294,
5065:      843,   296,   297,   298,     0,   299,   300,     0,     0,   844,
5066:      302,   303,     0,     0,   304,   305,   306,   307,   308,   845,
5067:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
5068:        0,   320,   321,   846,   323,   324,   325,   326,   327,   328,
5069:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
5070:      847,   339,   340,   341,   342,     0,   343,   344,   345,   346,
5071:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
5072:      356,   357,   358,   359,   360,   848,   362,   363,   364,   365,
5073:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
5074:      375,   376,   377,   849,   378,   379,   380,   381,   382,   383,
5075:      384,   385,   850,   387,     0,   388,   389,   390,   391,   392,
5076:      393,   394,   395,   396,   397,   398,   399,   400,   851,   402,
5077:        0,   403,   404,     0,   405,   406,   407,   408,   409,   410,
5078:      411,     0,   852,   853,     0,     0,   414,   415,   854,   417,
5079:      855,   856,   419,   420,   857,   422,   423,   424,   425,   426,
5080:        0,     0,   427,   428,   429,   430,   431,   858,     0,   432,
5081:      433,   434,   435,   436,   437,   859,     0,   439,   440,   441,
5082:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
5083:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
5084:      458,   459,   460,   461,   462,   463,   464,   465,   466,   860,
5085:        0,     0,     0,     0,     0,     0,  1387,  1388,     0,     0,
5086:        0,     0,     0,   864,     0,   865,     0,     0,     0,     0,
5087:      866,     0,   867,   868,    91,  1759,   540,   804,   805,   806,
5088:      807,   808,     0,     0,     0,     0,     0,     0,     0,     0,
5089:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
5090:      101,   102,     0,     0,     0,     0,   809,     0,     0,   103,
5091:      104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
5092:      810,   114,   811,   812,     0,   117,   118,   119,   120,   121,
5093:      122,   813,   814,   123,   124,   815,   816,   127,     0,   128,
5094:      129,   130,   131,   817,     0,   818,     0,   134,   135,   136,
5095:      137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
5096:      146,   147,   148,     0,   149,   150,   151,   152,   819,   820,
5097:      821,   822,   823,   824,   825,   154,   155,   156,   157,   158,
5098:      159,   160,   826,   827,   163,   828,   164,     0,   165,   166,
5099:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
5100:        0,     0,   176,   177,   666,   179,   180,     0,   181,   182,
5101:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
5102:      829,   192,   193,   194,   195,   830,   831,   197,     0,   198,
5103:      199,   832,   201,     0,   202,     0,   203,   204,     0,   205,
5104:      206,   207,   208,   209,   210,     0,   211,     0,   212,   213,
5105:        0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
5106:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
5107:      231,   232,   233,   234,   235,   236,   237,   833,   834,     0,
5108:      835,     0,   241,   242,   243,   244,   245,   246,   247,   248,
5109:      249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
5110:      256,   257,   836,   837,   258,   259,   260,   261,   262,   263,
5111:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5112:      274,   275,   276,   277,   278,   279,   280,   281,   838,   283,
5113:      839,   285,   286,   287,   288,   840,   289,   290,   291,   292,
5114:      841,   842,   294,   843,   296,   297,   298,     0,   299,   300,
5115:        0,     0,   844,   302,   303,     0,     0,   304,   305,   306,
5116:      307,   308,   845,   310,   311,   312,   313,   314,   315,   316,
5117:      317,   318,   319,     0,   320,   321,   846,   323,   324,   325,
5118:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
5119:      335,   336,   337,   847,   339,   340,   341,   342,     0,   343,
5120:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
5121:      354,     0,   355,   356,   357,   358,   359,   360,   848,   362,
5122:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
5123:        0,   373,   374,   375,   376,   377,   849,   378,   379,   380,
5124:      381,   382,   383,   384,   385,   850,   387,     0,   388,   389,
5125:      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
5126:      400,   851,   402,     0,   403,   404,     0,   405,   406,   407,
5127:      408,   409,   410,   411,     0,   852,   853,     0,     0,   414,
5128:      415,   854,   417,   855,   856,   419,   420,   857,   422,   423,
5129:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
5130:      858,     0,   432,   433,   434,   435,   436,   437,   859,     0,
5131:      439,   440,   441,   442,   443,   444,     0,     0,   445,     0,
5132:        0,   446,   447,   448,   449,   450,   451,   452,   453,   454,
5133:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
5134:      465,   466,   860,     0,     0,     0,     0,     0,     0,   861,
5135:      862,     0,     0,     0,     0,     0,   864,     0,   865,     0,
5136:        0,     0,     0,   866,     0,   867,   868,    91,   803,   540,
5137:      804,   805,   806,   807,   808,     0,     0,     0,     0,     0,
5138:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
5139:       99,     0,   100,   101,   102,     0,     0,     0,     0,   809,
5140:        0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
5141:      110,   111,   112,   810,   114,   811,   812,     0,   117,   118,
5142:      119,   120,   121,   122,   813,   814,   123,   124,   815,   816,
5143:      127,     0,   128,   129,   130,   131,   817,     0,   818,     0,
5144:      134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
5145:      143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
5146:      152,   819,   820,   821,   822,   823,   824,   825,   154,   155,
5147:      156,   157,   158,   159,   160,   826,   827,   163,   828,   164,
5148:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
5149:      173,   174,   175,     0,     0,   176,   177,   666,   179,   180,
5150:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
5151:      188,   189,   190,   829,   192,   193,   194,   195,   830,   831,
5152:      197,     0,   198,   199,   832,   201,     0,   202,     0,   203,
5153:      204,     0,   205,   206,   207,   208,   209,   210,     0,   211,
5154:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
5155:      220,   221,   222,   223,   224,     0,   225,   226,   227,   228,
5156:      229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
5157:      833,   834,     0,   835,     0,   241,   242,   243,   244,   245,
5158:      246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
5159:      254,     0,   255,   256,   257,   836,   837,   258,   259,   260,
5160:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
5161:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
5162:      281,   838,   283,   839,   285,   286,   287,   288,   840,   289,
5163:      290,   291,   292,   841,   842,   294,   843,   296,   297,   298,
5164:        0,   299,   300,     0,     0,   844,   302,   303,     0,     0,
5165:      304,   305,   306,   307,   308,   845,   310,   311,   312,   313,
5166:      314,   315,   316,   317,   318,   319,     0,   320,   321,   846,
5167:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
5168:      332,   333,   334,   335,   336,   337,   847,   339,   340,   341,
5169:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
5170:      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
5171:      360,   848,   362,   363,   364,   365,   366,   367,   368,   369,
5172:      370,   371,   372,     0,   373,   374,   375,   376,   377,   849,
5173:      378,   379,   380,   381,   382,   383,   384,   385,   850,   387,
5174:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5175:      397,   398,   399,   400,   851,   402,     0,   403,   404,     0,
5176:      405,   406,   407,   408,   409,   410,   411,     0,   852,   853,
5177:        0,     0,   414,   415,   854,   417,   855,   856,   419,   420,
5178:      857,   422,   423,   424,   425,   426,     0,     0,   427,   428,
5179:      429,   430,   431,   858,     0,   432,   433,   434,   435,   436,
5180:      437,   859,     0,   439,   440,   441,   442,   443,   444,     0,
5181:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
5182:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5183:      462,   463,   464,   465,   466,   860,     0,     0,     0,     0,
5184:        0,     0,   861,   862,     0,     0,     0,     0,     0,   864,
5185:        0,  1984,     0,     0,     0,     0,   866,     0,   867,   868,
5186:       91,   803,   540,   804,   805,   806,   807,   808,     0,     0,
5187:        0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
5188:       96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
5189:        0,     0,   809,     0,     0,   103,   104,     0,   105,   106,
5190:      107,   108,   109,   110,   111,   112,   810,   114,   811,   812,
5191:        0,   117,   118,   119,   120,   121,   122,   813,   814,   123,
5192:      124,   815,   816,   127,     0,   128,   129,   130,   131,   817,
5193:        0,   818,     0,   134,   135,   136,   137,   138,   139,   140,
5194:      141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
5195:      149,   150,   151,   152,   819,   820,   821,   822,   823,   824,
5196:      825,   154,   155,   156,   157,   158,   159,   160,   826,   827,
5197:      163,   828,   164,     0,   165,   166,   167,   168,   169,   170,
5198:        0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
5199:      666,   179,   180,     0,   181,   182,   183,     0,   184,   185,
5200:      186,     0,   187,   188,   189,   190,   829,   192,   193,   194,
5201:      195,   830,   831,   197,     0,   198,   199,   832,   201,     0,
5202:      202,     0,   203,   204,     0,   205,   206,   207,   208,   209,
5203:      210,     0,   211,     0,   212,   213,     0,   214,   215,   216,
5204:      217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
5205:      226,   227,   228,   229,   230,     0,   231,   232,   233,   234,
5206:      235,   236,   237,   833,   834,     0,   835,     0,   241,   242,
5207:      243,   244,   245,   246,   247,   248,   249,   250,     0,     0,
5208:      251,   252,   253,   254,     0,   255,   256,   257,   836,   837,
5209:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
5210:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5211:      278,   279,   280,   281,   838,   283,   839,   285,   286,   287,
5212:      288,   840,   289,   290,   291,   292,   841,   842,   294,   843,
5213:      296,   297,   298,     0,   299,   300,     0,     0,   844,   302,
5214:      303,     0,     0,   304,   305,   306,   307,   308,   845,   310,
5215:      311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
5216:      320,   321,   846,   323,   324,   325,   326,   327,   328,     0,
5217:      329,   330,   331,   332,   333,   334,   335,   336,   337,   847,
5218:      339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
5219:      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
5220:      357,   358,   359,   360,   848,   362,   363,   364,   365,   366,
5221:      367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
5222:      376,   377,   849,   378,   379,   380,   381,   382,   383,   384,
5223:      385,   850,   387,     0,   388,   389,   390,   391,   392,   393,
5224:      394,   395,   396,   397,   398,   399,   400,   851,   402,     0,
5225:      403,   404,     0,   405,   406,   407,   408,   409,   410,   411,
5226:        0,   852,   853,     0,     0,   414,   415,   854,   417,   855,
5227:      856,   419,   420,   857,   422,   423,   424,   425,   426,     0,
5228:        0,   427,   428,   429,   430,   431,   858,     0,   432,   433,
5229:      434,   435,   436,   437,   859,     0,   439,   440,   441,   442,
5230:      443,   444,     0,     0,   445,     0,     0,   446,   447,   448,
5231:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
5232:      459,   460,   461,   462,   463,   464,   465,   466,   860,     0,
5233:        0,     0,     0,     0,     0,   861,   862,     0,     0,     0,
5234:        0,     0,   864,     0,  2639,     0,     0,     0,     0,   866,
5235:        0,   867,   868,    91,   803,   540,   804,   805,   806,   807,
5236:      808,     0,     0,     0,     0,     0,     0,     0,     0,    92,
5237:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
5238:      102,     0,     0,     0,     0,   809,     0,     0,   103,   104,
5239:        0,   105,   106,   107,   108,   109,   110,   111,  2838,   810,
5240:      114,   811,   812,     0,   117,   118,   119,   120,   121,   122,
5241:      813,   814,   123,   124,   815,   816,   127,     0,   128,   129,
5242:      130,   131,   817,     0,   818,     0,   134,   135,   136,   137,
5243:      138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
5244:      147,   148,     0,   149,   150,   151,  2839,   819,   820,   821,
5245:      822,   823,   824,   825,   154,   155,   156,   157,   158,   159,
5246:      160,   826,   827,   163,   828,   164,     0,   165,   166,   167,
5247:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
5248:        0,   176,   177,   666,   179,   180,     0,   181,   182,   183,
5249:        0,   184,   185,   186,     0,   187,   188,   189,   190,   829,
5250:      192,   193,   194,   195,   830,   831,   197,     0,   198,   199,
5251:      832,   201,     0,   202,     0,   203,   204,     0,   205,   206,
5252:      207,   208,   209,   210,     0,   211,     0,   212,   213,     0,
5253:      214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
5254:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
5255:      232,   233,   234,   235,   236,   237,   833,   834,     0,   835,
5256:        0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
5257:      250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
5258:      257,   836,   837,   258,   259,   260,   261,   262,   263,   264,
5259:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
5260:      275,   276,   277,   278,   279,   280,   281,   838,   283,   839,
5261:      285,   286,   287,   288,   840,   289,   290,   291,   292,   841,
5262:      842,   294,   843,   296,   297,   298,     0,   299,   300,     0,
5263:        0,   844,   302,   303,     0,     0,   304,   305,   306,   307,
5264:      308,   845,   310,   311,   312,   313,   314,   315,   316,   317,
5265:      318,   319,     0,   320,   321,   846,   323,   324,   325,   326,
5266:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
5267:      336,   337,   847,   339,   340,   341,   342,     0,   343,   344,
5268:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
5269:        0,   355,   356,   357,   358,   359,   360,   848,   362,   363,
5270:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
5271:      373,   374,   375,   376,   377,   849,   378,   379,   380,   381,
5272:      382,   383,   384,   385,   850,   387,     0,   388,   389,   390,
5273:      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
5274:      851,   402,     0,   403,   404,     0,   405,   406,   407,   408,
5275:      409,   410,   411,     0,   852,   853,     0,     0,   414,   415,
5276:      854,   417,   855,   856,   419,   420,   857,   422,   423,  2840,
5277:      425,   426,     0,     0,   427,   428,   429,   430,   431,   858,
5278:        0,   432,   433,   434,   435,   436,   437,   859,     0,   439,
5279:      440,   441,   442,   443,   444,     0,     0,   445,     0,     0,
5280:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
5281:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5282:      466,   860,     0,     0,     0,     0,     0,     0,   861,   862,
5283:        0,     0,     0,     0,     0,   864,     0,   865,     0,     0,
5284:        0,     0,   866,     0,   867,   868,    91,   803,   540,   804,
5285:      805,   806,   807,   808,     0,     0,     0,     0,     0,     0,
5286:        0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
5287:        0,   100,   101,   102,     0,     0,     0,     0,   809,     0,
5288:        0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
5289:      111,   112,   810,   114,   811,   812,     0,   117,   118,   119,
5290:      120,   121,   122,   813,   814,   123,   124,   815,   816,   127,
5291:        0,   128,   129,   130,   131,   817,     0,   818,     0,   134,
5292:      135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
5293:      144,   145,   146,   147,   148,     0,   149,   150,   151,  2839,
5294:      819,   820,   821,   822,   823,   824,   825,   154,   155,   156,
5295:      157,   158,   159,   160,   826,   827,   163,   828,   164,     0,
5296:      165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
5297:      174,   175,     0,     0,   176,   177,   666,   179,   180,     0,
5298:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
5299:      189,   190,   829,   192,   193,   194,   195,   830,   831,   197,
5300:        0,   198,   199,   832,   201,     0,   202,     0,   203,   204,
5301:        0,   205,   206,   207,   208,   209,   210,     0,   211,     0,
5302:      212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
5303:      221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
5304:      230,     0,   231,   232,   233,   234,   235,   236,   237,   833,
5305:      834,     0,   835,     0,   241,   242,   243,   244,   245,   246,
5306:      247,   248,   249,   250,     0,     0,   251,   252,   253,   254,
5307:        0,   255,   256,   257,   836,   837,   258,   259,   260,   261,
5308:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
5309:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
5310:      838,   283,   839,   285,   286,   287,   288,   840,   289,   290,
5311:      291,   292,   841,   842,   294,   843,   296,   297,   298,     0,
5312:      299,   300,     0,     0,   844,   302,   303,     0,     0,   304,
5313:      305,   306,   307,   308,   845,   310,   311,   312,   313,   314,
5314:      315,   316,   317,   318,   319,     0,   320,   321,   846,   323,
5315:      324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
5316:      333,   334,   335,   336,   337,   847,   339,   340,   341,   342,
5317:        0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
5318:      352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
5319:      848,   362,   363,   364,   365,   366,   367,   368,   369,   370,
5320:      371,   372,     0,   373,   374,   375,   376,   377,   849,   378,
5321:      379,   380,   381,   382,   383,   384,   385,   850,   387,     0,
5322:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
5323:      398,   399,   400,   851,   402,     0,   403,   404,     0,   405,
5324:      406,   407,   408,   409,   410,   411,     0,   852,   853,     0,
5325:        0,   414,   415,   854,   417,   855,   856,   419,   420,   857,
5326:      422,   423,  2840,   425,   426,     0,     0,   427,   428,   429,
5327:      430,   431,   858,     0,   432,   433,   434,   435,   436,   437,
5328:      859,     0,   439,   440,   441,   442,   443,   444,     0,     0,
5329:      445,     0,     0,   446,   447,   448,   449,   450,   451,   452,
5330:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
5331:      463,   464,   465,   466,   860,     0,     0,     0,     0,     0,
5332:        0,   861,   862,     0,     0,     0,     0,     0,   864,     0,
5333:      865,     0,     0,     0,     0,   866,     0,   867,   868,    91,
5334:      803,   540,   804,   805,   806,   807,   808,     0,     0,     0,
5335:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
5336:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
5337:        0,   809,     0,     0,   103,   104,     0,   105,   106,   107,
5338:      108,   109,   110,   111, -1699,   810,   114,   811,   812,     0,
5339:      117,   118,   119,   120,   121,   122,   813,   814,   123,   124,
5340:      815,   816,   127,     0,   128,   129,   130,   131,   817,     0,
5341:      818,     0,   134,   135,   136,   137,   138,   139,   140,   141,
5342:      142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
5343:      150,   151,  2839,   819,   820,   821,   822,   823,   824,   825,
5344:      154,   155,   156,   157,   158,   159,   160,   826,   827,   163,
5345:      828,   164,     0,   165,   166,   167,   168,   169,   170,     0,
5346:      171,   172,   173,   174,   175,     0,     0,   176,   177,   666,
5347:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
5348:        0,   187,   188,   189,   190,   829,   192,   193,   194,   195,
5349:      830,   831,   197,     0,   198,   199,   832,   201,     0,   202,
5350:        0,   203,   204,     0,   205,   206,   207,   208, -1699,   210,
5351:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
5352:      218,   219, -1699,   221,   222,   223,   224,     0,   225,   226,
5353:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
5354:      236,   237,   833,   834,     0,   835,     0,   241,     0,     0,
5355:      244,   245,   246,   247,   248,   249,   250,     0,     0,   251,
5356:      252,   253, -1699,     0,   255,   256,   257,   836,   837,   258,
5357:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
5358:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5359:      279,   280,   281,   838,   283,   839,   285,   286,   287,   288,
5360:        0,   289,   290,     0,   292,   841,   842,   294,   843,   296,
5361:      297,   298,     0,   299,   300,     0,     0,   844,   302,   303,
5362:        0,     0,   304,   305,   306,   307,   308,   845,   310,   311,
5363:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
5364:      321,   846,   323,   324,   325,   326,   327,   328,     0,   329,
5365:      330,   331,   332,   333,   334,   335,   336,   337,   847,   339,
5366:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
5367:      349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
5368:      358,   359,   360,   848,   362,   363,   364,   365,   366,   367,
5369:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
5370:      377,   849,   378,   379,   380,   381,   382, -1699,   384,   385,
5371:      850,   387,     0,   388,   389,   390,   391,   392,   393,   394,
5372:      395,   396,   397,   398,   399,   400,   851,   402,     0,   403,
5373:      404,     0,   405,   406,   407,   408,   409,   410,   411,     0,
5374:      852,   853,     0,     0,   414,   415,   854,   417,   855,   856,
5375:      419,   420,   857,   422,   423,  2840,   425,   426,     0,     0,
5376:      427,   428,   429,   430,   431,   858,     0,   432,   433,   434,
5377:      435,   436,   437,   859,     0,   439,   440,   441,   442,   443,
5378:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
5379:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
5380:      460,   461,   462,   463,   464,   465,   466, -1699,     0,     0,
5381:        0,     0,     0,     0,   861,   862,     0,     0,     0,     0,
5382:        0,   864,     0,   865,     0,     0,     0,     0,   866,     0,
5383:      867,   868,    91,   803,   540,   804,   805,   806,   807,   808,
5384:        0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
5385:       94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
5386:        0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
5387:      105,   106,   107,   108,   109,   110,   111,   112,   810,   114,
5388:      811,   812,     0,   117,   118,   119,   120,   121,   122,   813,
5389:      814,   123,   124,   815,   816,   127,     0,   128,   129,   130,
5390:      131,   817,     0,   818,     0,   134,   135,   136,   137,   138,
5391:      139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
5392:      148,     0,   149,   150,   151,   152,   819,   820,   821,   822,
5393:      823,   824,   825,   154,   155,   156,   157,   158,   159,   160,
5394:      826,   827,   163,     0,   164,     0,   165,   166,   167,   168,
5395:      169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
5396:      176,   177,   666,   179,   180,     0,   181,   182,   183,     0,
5397:      184,   185,   186,     0,   187,   188,   189,   190,   829,   192,
5398:      193,   194,   195,   830,   831,   197,     0,   198,   199,   832,
5399:      201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
5400:      208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
5401:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
5402:        0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
5403:      233,   234,   235,   236,   237,   833,   834,     0,   835,     0,
5404:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
5405:        0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
5406:      836,   837,   258,   259,   260,   261,   262,   263,   264,   265,
5407:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5408:      276,   277,   278,   279,   280,   281,   838,   283,   839,   285,
5409:      286,   287,   288,     0,   289,   290,   291,   292,   841,   842,
5410:      294,   843,   296,   297,   298,     0,   299,   300,     0,     0,
5411:      844,   302,   303,     0,     0,   304,   305,   306,   307,   308,
5412:      845,   310,   311,   312,   313,   314,   315,   316,   317,   318,
5413:      319,     0,   320,   321,   846,   323,   324,   325,   326,   327,
5414:      328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
5415:      337,   847,   339,   340,   341,   342,     0,   343,   344,   345,
5416:      346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
5417:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
5418:      365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
5419:      374,   375,   376,   377,   849,   378,   379,   380,   381,   382,
5420:      383,   384,   385,   850,   387,     0,   388,   389,   390,   391,
5421:      392,   393,   394,   395,   396,   397,   398,   399,   400,   851,
5422:      402,     0,   403,   404,     0,   405,   406,   407,   408,   409,
5423:      410,   411,     0,   852,   853,     0,     0,   414,   415,   854,
5424:      417,   855,   856,   419,   420,   857,   422,   423,   424,   425,
5425:      426,     0,     0,   427,   428,   429,   430,   431,   858,     0,
5426:      432,   433,   434,   435,   436,   437,   859,     0,   439,   440,
5427:      441,   442,   443,   444,     0,     0,   445,     0,     0,   446,
5428:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
5429:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
5430:        0,     0,     0,     0,     0,     0,     0,  1612,  1613,     0,
5431:        0,    91,   803,   540,   804,   805,  1614,   807,   808,     0,
5432:        0,     0,     0,   867,   868,     0,     0,    92,    93,    94,
5433:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
5434:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
5435:      106,   107,   108,   109,   110,   111,   112,   810,   114,   811,
5436:      812,     0,   117,   118,   119,   120,   121,   122,   813,   814,
5437:      123,   124,   815,   816,   127,     0,   128,   129,   130,   131,
5438:      817,     0,   818,     0,   134,   135,   136,   137,   138,   139,
5439:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
5440:        0,   149,   150,   151,   152,   819,   820,   821,   822,   823,
5441:      824,   825,   154,   155,   156,   157,   158,   159,   160,   826,
5442:      827,   163,     0,   164,     0,   165,   166,   167,   168,   169,
5443:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
5444:      177,   666,   179,   180,     0,   181,   182,   183,     0,   184,
5445:      185,   186,     0,   187,   188,   189,   190,   829,   192,   193,
5446:      194,   195,   830,   831,   197,     0,   198,   199,   832,   201,
5447:        0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
5448:      209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
5449:      216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
5450:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5451:      234,   235,   236,   237,   833,   834,     0,   835,     0,   241,
5452:      242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
5453:        0,   251,   252,   253,   254,     0,   255,   256,   257,   836,
5454:      837,   258,   259,   260,   261,   262,   263,   264,   265,   266,
5455:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
5456:      277,   278,   279,   280,   281,   838,   283,   839,   285,   286,
5457:      287,   288,     0,   289,   290,   291,   292,   841,   842,   294,
5458:      843,   296,   297,   298,     0,   299,   300,     0,     0,   301,
5459:      302,   303,     0,     0,   304,   305,   306,   307,   308,   845,
5460:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
5461:        0,   320,   321,   846,   323,   324,   325,   326,   327,   328,
5462:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
5463:      847,   339,   340,   341,   342,     0,   343,   344,   345,   346,
5464:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
5465:      356,   357,   358,   359,   360,  1748,  1749,   363,   364,   365,
5466:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
5467:      375,   376,   377,   849,   378,   379,   380,   381,   382,   383,
5468:      384,   385,   850,   387,     0,   388,   389,   390,   391,   392,
5469:      393,   394,   395,   396,   397,   398,   399,   400,   851,   402,
5470:        0,   403,   404,     0,   405,   406,   407,   408,   409,   410,
5471:      411,     0,   852,   853,     0,     0,   414,   415,   854,   417,
5472:      855,   856,   419,   420,   857,   422,   423,   424,   425,   426,
5473:        0,     0,   427,   428,   429,   430,   431,   858,     0,   432,
5474:      433,   434,   435,   436,   437,   859,     0,   439,   440,   441,
5475:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
5476:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
5477:      458,   459,   460,   461,   462,   463,   464,   465,   466,     0,
5478:        0,     0,     0,     0,     0,     0,  1750,  1751,     0,     0,
5479:        0,     0,     0,     0,     0,  1614,     0,     0,     0,     0,
5480:        0,     0,   867,   868,    91,   803,   540,   804,   805,   806,
5481:      807,   808,     0,     0,     0,     0,     0,     0,     0,     0,
5482:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
5483:      101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
5484:      104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
5485:      810,   114,   811,   812,     0,   117,   118,   119,   120,   121,
5486:      122,   813,   814,   123,   124,   815,   816,   127,     0,   128,
5487:      129,   130,   131,   817,     0,   818,     0,   134,   135,   136,
5488:      137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
5489:      146,   147,   148,     0,   149,   150,   151,   152,   819,   820,
5490:      821,   822,   823,   824,   825,   154,   155,   156,   157,   158,
5491:      159,   160,   826,   827,   163,     0,   164,     0,   165,   166,
5492:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
5493:        0,     0,   176,   177,   666,   179,   180,     0,   181,   182,
5494:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
5495:      829,   192,   193,   194,   195,   830,   831,   197,     0,   198,
5496:      199,   832,   201,     0,   202,     0,   203,   204,     0,   205,
5497:      206,   207,   208,   209,   210,     0,   211,     0,   212,   213,
5498:        0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
5499:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
5500:      231,   232,   233,   234,   235,   236,   237,   833,   834,     0,
5501:      835,     0,   241,     0,   243,   244,   245,   246,   247,   248,
5502:      249,   250,     0,     0,   251,   252,   253,   254,     0,   255,
5503:      256,   257,   836,   837,   258,   259,   260,   261,   262,   263,
5504:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5505:      274,   275,   276,   277,   278,   279,   280,   281,   838,   283,
5506:      839,   285,   286,   287,   288,     0,   289,   290,   291,   292,
5507:      841,   842,   294,   843,   296,   297,   298,     0,   299,   300,
5508:        0,     0,   844,   302,   303,     0,     0,   304,   305,   306,
5509:      307,   308,   845,   310,   311,   312,   313,   314,   315,   316,
5510:      317,   318,   319,     0,   320,   321,   846,   323,   324,   325,
5511:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
5512:      335,   336,   337,   847,   339,   340,   341,   342,     0,   343,
5513:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
5514:      354,     0,   355,   356,   357,   358,   359,   360,   361,   362,
5515:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
5516:        0,   373,   374,   375,   376,   377,   849,   378,   379,   380,
5517:      381,   382,   383,   384,   385,   850,   387,     0,   388,   389,
5518:      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
5519:      400,   851,   402,     0,   403,   404,     0,   405,   406,   407,
5520:      408,   409,   410,   411,     0,   852,   853,     0,     0,   414,
5521:      415,   854,   417,   855,   856,   419,   420,   857,   422,   423,
5522:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
5523:      858,     0,   432,   433,   434,   435,   436,   437,   859,     0,
5524:      439,   440,   441,   442,   443,   444,     0,     0,   445,     0,
5525:        0,   446,   447,   448,   449,   450,   451,   452,   453,   454,
5526:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
5527:      465,   466,     0,     0,     0,     0,     0,     0,     0,  1612,
5528:     1613,     0,     0,     0,     0,     0,     0,     0,  1614,     0,
5529:        0,     0,     0,     0,     0,   867,   868,    91,   803,   540,
5530:      804,   805,   806,   807,   808,     0,     0,     0,     0,     0,
5531:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
5532:       99,     0,   100,   101,   102,     0,     0,     0,     0,   809,
5533:        0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
5534:      110,   111,     0,   810,   114,   811,   812,     0,   117,   118,
5535:      119,   120,   121,   122,   813,   814,   123,   124,   815,   816,
5536:      127,     0,   128,   129,   130,   131,   817,     0,   818,     0,
5537:      134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
5538:      143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
5539:      152,   819,   820,   821,   822,   823,   824,   825,   154,   155,
5540:      156,   157,   158,   159,   160,   826,   827,   163,   828,   164,
5541:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
5542:      173,   174,   175,     0,     0,   176,   177,   666,   179,   180,
5543:        0,   181,   182,   183,     0,   184,     0,   186,     0,   187,
5544:      188,   189,   190,   829,   192,   193,   194,   195,   830,   831,
5545:      197,     0,   198,   199,   832,   201,     0,   202,     0,   203,
5546:      204,     0,   205,   206,   207,   208,     0,   210,     0,   211,
5547:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
5548:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
5549:      229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
5550:      833,   834,     0,   835,     0,   241,     0,     0,   244,   245,
5551:      246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
5552:        0,     0,   255,   256,   257,   836,   837,   258,   259,   260,
5553:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
5554:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
5555:      281,   838,   283,   839,   285,   286,   287,   288,     0,   289,
5556:      290,     0,   292,   841,   842,   294,   843,   296,   297,   298,
5557:        0,   299,   300,     0,     0,   844,   302,   303,     0,     0,
5558:      304,   305,   306,   307,   308,   845,   310,   311,   312,   313,
5559:      314,   315,   316,   317,   318,   319,     0,   320,   321,   846,
5560:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
5561:      332,   333,   334,   335,   336,   337,   847,   339,   340,   341,
5562:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
5563:      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
5564:      360,   848,   362,   363,   364,   365,   366,   367,   368,   369,
5565:      370,   371,   372,     0,   373,   374,   375,   376,   377,   849,
5566:      378,   379,   380,   381,   382,     0,   384,   385,   850,   387,
5567:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5568:      397,   398,   399,   400,   851,   402,     0,   403,   404,     0,
5569:      405,   406,   407,   408,   409,   410,   411,     0,   852,   853,
5570:        0,     0,   414,   415,   854,   417,   855,   856,   419,   420,
5571:      857,   422,   423,   424,   425,   426,     0,     0,   427,   428,
5572:      429,   430,   431,   858,     0,   432,   433,   434,   435,   436,
5573:      437,   859,     0,   439,   440,   441,   442,   443,   444,     0,
5574:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
5575:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5576:      462,   463,   464,   465,   466,     0,     0,     0,     0,     0,
5577:        0,     0,   861,   862,   492,     0,     0,     0,     0,   864,
5578:        0,   865,     0,     0,     0,     0,   866,     0,   867,   868,
5579:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
5580:      101,   102,     0,     0,     0,     0,     0,  2274,     0,   103,
5581:      104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
5582:      113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
5583:      122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
5584:      129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
5585:      137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
5586:      146,   147,   148,     0,  -590,   150,   151,   152,     0,     0,
5587:        0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
5588:      159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
5589:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
5590:        0,     0,   176,   177,   178,   179,   180,     0,   181,   182,
5591:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
5592:      191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
5593:      199,   200,   201,     0,   202,     0,   203,     0,     0,  -590,
5594:      206,   207,   208,     0,   210,     0,   211,     0,   212,   213,
5595:        0,   214,   215,   216,   217,   218,   219,     0,   221,   222,
5596:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
5597:      231,  -590,   233,   234,   235,   236,   237,   238,   239,     0,
5598:      240,     0,   241,     0,     0,   244,  -590,   246,   247,   248,
5599:      249,   250,     0,     0,   251,  -590,   253,     0,     0,   255,
5600:      256,   257,     0,     0,   258,   259,   260,   261,   262,   494,
5601:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5602:      274,   275,   276,   277,   278,   279,   280,   281,   282,  -590,
5603:      284,   285,   286,   287,   288,     0,   289,   290,     0,   292,
5604:        0,   293,   294,   295,   296,   297,   298,     0,   299,   300,
5605:        0,     0,   301,   302,   303,     0,     0,   304,   305,     0,
5606:      307,     0,   309,   310,   311,   312,   313,   314,   315,   316,
5607:      317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
5608:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
5609:      335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
5610:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
5611:      354,     0,   355,   356,  -590,   358,   359,   360,   361,   362,
5612:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
5613:        0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
5614:      381,   382,     0,   384,   385,   386,   387,     0,   388,   389,
5615:      390,   391,   392,   393,   394,   395,   396,   397,   398,   496,
5616:      400,   401,   402,     0,   403,   404,     0,   405,  -590,   407,
5617:      408,   409,   410,   411,     0,   412,   413,     0,     0,   414,
5618:      415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
5619:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
5620:        0,     0,   432,   433,   434,   435,   436,   437,   438,     0,
5621:      439,     0,   441,   442,   443,   444,     0,     0,   445,     0,
5622:        0,   446,   447,   448,   449,   450,   451,   452,   453,   454,
5623:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
5624:      465,   466,     0,     0,    91,     0,   570,     0,     0,     0,
5625:        0,     0,     0,     0,     0,     0,     0,     0,     0,   927,
5626:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
5627:      101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
5628:      104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
5629:      113,   114,   115,   116,     0,   117,   118,   119,   120,   121,
5630:      122,     0,   814,   123,   124,   125,   126,   127,     0,   128,
5631:      129,   130,   131,   817,     0,   818,     0,   134,   135,   136,
5632:      137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
5633:      146,   147,   148,     0,   149,   150,   151,   152,   819,   820,
5634:      821,   822,   823,   824,   825,   154,   155,   156,   157,   158,
5635:      159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
5636:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
5637:        0,     0,   176,   177,   178,   179,   180,     0,   181,   182,
5638:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
5639:      191,   192,   193,   194,   195,   830,     0,   197,     0,   198,
5640:      199,   200,   201,     0,   202,     0,   203,   204,     0,   205,
5641:      206,   207,   208,   209,   210,     0,   211,     0,   212,   213,
5642:        0,   214,   215,   216,   217,   218,   219,   220,   221,   222,
5643:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
5644:      231,   232,   233,   234,   235,   236,   237,   238,   239,     0,
5645:      240,     0,   241,   242,   243,   244,   245,   246,   247,   248,
5646:      249,   250,  2029,     0,   251,   252,   253,   254,     0,   255,
5647:      256,   257,   836,   837,   258,   259,   260,   261,   262,   263,
5648:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
5649:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
5650:      284,   285,   286,   287,   288,     0,   289,   290,   291,   292,
5651:        0,   842,   294,   295,   296,   297,   298,     0,   299,   300,
5652:        0,   571,   301,   302,   303,     0,     0,   304,   305,   306,
5653:      307,   308,   845,   310,   311,   312,   313,   314,   315,   316,
5654:      317,   318,   319,     0,   320,   321,   846,   323,   324,   325,
5655:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
5656:      335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
5657:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
5658:      354,     0,   355,   356,   357,   358,   359,   360,   361,  2030,
5659:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
5660:       25,   373,   374,   375,   376,   377,   849,   378,   379,   380,
5661:      381,   382,   383,   384,   385,   386,   387,     0,   388,   389,
5662:      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
5663:      400,   851,   402,     0,   403,   404,    30,   405,   406,   407,
5664:      408,   409,   410,   411,     0,   412,   413,     0,     0,   414,
5665:      415,   854,   417,   855,     0,   419,   420,   857,   422,   423,
5666:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
5667:      858,     0,   432,   433,   434,   435,   436,   566,   438,     0,
5668:      439,   440,   441,   442,   443,   444,     0,     0,   445,     0,
5669:       33,   446,   447,   448,   449,   450,   451,   452,   453,   454,
5670:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
5671:      465,   466,     0,    91,    34,   570,     0,     0,     0,     0,
5672:        0,     0,     0,     0,     0,     0,     0,     0,  2031,    92,
5673:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
5674:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
5675:        0,   105,   106,   107,   108,   109,   110,   111,   112,   113,
5676:      114,   115,   116,     0,   117,   118,   119,   120,   121,   122,
5677:        0,   814,   123,   124,   125,   126,   127,     0,   128,   129,
5678:      130,   131,   817,     0,   818,     0,   134,   135,   136,   137,
5679:      138,   139,   140,   141,   142,     0,   143,   144,   145,   146,
5680:      147,   148,     0,   149,   150,   151,   152,   819,   820,   821,
5681:      822,   823,   824,   825,   154,   155,   156,   157,   158,   159,
5682:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
5683:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
5684:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
5685:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
5686:      192,   193,   194,   195,   830,     0,   197,     0,   198,   199,
5687:      200,   201,     0,   202,     0,   203,   204,     0,   205,   206,
5688:      207,   208,   209,   210,     0,   211,     0,   212,   213,     0,
5689:      214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
5690:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
5691:      232,   233,   234,   235,   236,   237,   238,   239,     0,   240,
5692:        0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
5693:      250,  2029,     0,   251,   252,   253,   254,     0,   255,   256,
5694:      257,   836,   837,   258,   259,   260,   261,   262,   263,   264,
5695:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
5696:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
5697:      285,   286,   287,   288,     0,   289,   290,   291,   292,     0,
5698:      842,   294,   295,   296,   297,   298,     0,   299,   300,     0,
5699:      571,   301,   302,   303,     0,     0,   304,   305,   306,   307,
5700:      308,   845,   310,   311,   312,   313,   314,   315,   316,   317,
5701:      318,   319,     0,   320,   321,   846,   323,   324,   325,   326,
5702:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
5703:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
5704:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
5705:        0,   355,   356,   357,   358,   359,   360,   361,  2030,   363,
5706:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
5707:      373,   374,   375,   376,   377,   849,   378,   379,   380,   381,
5708:      382,   383,   384,   385,   386,   387,     0,   388,   389,   390,
5709:      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
5710:      851,   402,     0,   403,   404,     0,   405,   406,   407,   408,
5711:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
5712:      854,   417,   855,     0,   419,   420,   857,   422,   423,   424,
5713:      425,   426,     0,     0,   427,   428,   429,   430,   431,   858,
5714:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
5715:      440,   441,   442,   443,   444,     0,     0,   445,     0,     0,
5716:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
5717:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5718:      466,     0,    91,     0,     0,     0,     0,     0,     0,     0,
5719:        0,     0,     0,     0,     0,     0,     0,  2031,    92,    93,
5720:       94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
5721:        0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
5722:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
5723:      115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
5724:      814,   123,   124,   125,   126,   127,     0,   128,   129,   130,
5725:      131,   817,     0,   818,     0,   134,   135,   136,   137,   138,
5726:      139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
5727:      148,     0,   149,   150,   151,   152,   819,   820,   821,   822,
5728:      823,   824,   825,   154,   155,   156,   157,   158,   159,   160,
5729:      161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
5730:      169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
5731:      176,   177,   178,   179,   180,     0,   181,   182,   183,     0,
5732:      184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
5733:      193,   194,   195,   830,     0,   197,     0,   198,   199,   200,
5734:      201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
5735:      208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
5736:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
5737:        0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
5738:      233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
5739:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
5740:        0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
5741:      836,   837,   258,   259,   260,   261,   262,   263,   264,   265,
5742:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5743:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5744:      286,   287,   288,     0,   289,   290,   291,   292,     0,   842,
5745:      294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
5746:      301,   302,   303,     0,     0,   304,   305,   306,   307,   308,
5747:      845,   310,   311,   312,   313,   314,   315,   316,   317,   318,
5748:      319,     0,   320,   321,   846,   323,   324,   325,   326,   327,
5749:      328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
5750:      337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
5751:      346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
5752:      355,   356,   357,   358,   359,   360,   361,  2030,   363,   364,
5753:      365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
5754:      374,   375,   376,   377,   849,   378,   379,   380,   381,   382,
5755:      383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
5756:      392,   393,   394,   395,   396,   397,   398,   399,   400,   851,
5757:      402,     0,   403,   404,     0,   405,   406,   407,   408,   409,
5758:      410,   411,     0,   412,   413,     0,     0,   414,   415,   854,
5759:      417,   855,     0,   419,   420,   857,   422,   423,   424,   425,
5760:      426,     0,     0,   427,   428,   429,   430,   431,   858,     0,
5761:      432,   433,   434,   435,   436,   437,   438,     0,   439,   440,
5762:      441,   442,   443,   444,     0,     0,   445,     0,     0,   446,
5763:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
5764:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
5765:        0,    91,     0,     0,     0,     0,     0,     0,     0,     0,
5766:        0,     0,     0,     0,     0,     0,    35,    92,    93,    94,
5767:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
5768:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
5769:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
5770:      116,     0,   117,   118,   119,   120,   121,   122,     0,   814,
5771:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
5772:      817,     0,   818,     0,   134,   135,   136,   137,   138,   139,
5773:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
5774:        0,   149,   150,   151,   152,   819,   820,   821,   822,   823,
5775:      824,   825,   154,   155,   156,   157,   158,   159,   160,   161,
5776:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
5777:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
5778:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
5779:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
5780:      194,   195,   830,     0,   197,     0,   198,   199,   200,   201,
5781:        0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
5782:      209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
5783:      216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
5784:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5785:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
5786:      242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
5787:        0,   251,   252,   253,   254,     0,   255,   256,   257,   836,
5788:      837,   258,   259,   260,   261,   262,   263,   264,   265,   266,
5789:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
5790:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
5791:      287,   288,     0,   289,   290,   291,   292,     0,   842,   294,
5792:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
5793:      302,   303,     0,     0,   304,   305,   306,   307,   308,   845,
5794:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
5795:        0,   320,   321,   846,   323,   324,   325,   326,   327,   328,
5796:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
5797:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
5798:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
5799:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
5800:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
5801:      375,   376,   377,   849,   378,   379,   380,   381,   382,   383,
5802:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
5803:      393,   394,   395,   396,   397,   398,   399,   400,   851,   402,
5804:        0,   403,   404,     0,   405,   406,   407,   408,   409,   410,
5805:      411,     0,   412,   413,     0,     0,   414,   415,   854,   417,
5806:      855,     0,   419,   420,   857,   422,   423,   424,   425,   426,
5807:        0,     0,   427,   428,   429,   430,   431,   858,     0,   432,
5808:      433,   434,   435,   436,   437,   438,     0,   439,   440,   441,
5809:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
5810:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
5811:      458,   459,   460,   461,   462,   463,   464,   465,   466,     0,
5812:      733,  1217,   540,     0,     0,     0,   807,     0,     0,     0,
5813:        0,     0,     0,     0,     0,  2650,    92,    93,    94,    95,
5814:       96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
5815:        0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
5816:      107,     0,   109,   110,   111,   734,   735,     0,   736,   737,
5817:        0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
5818:      124,   738,   739,   127,     0,   128,   129,   130,   131,   740,
5819:        0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
5820:      141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
5821:        0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
5822:        0,   154,   155,   156,   157,   158,   159,   160,   741,   742,
5823:      163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
5824:        0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
5825:      178,   179,   180,     0,   181,   182,   183,     0,   184,   185,
5826:      186,     0,   187,   188,   189,   190,   743,   192,   193,   194,
5827:      195,   744,  1218,   197,     0,   198,   199,   745,   201,     0,
5828:      202,     0,   203,     0,     0,     0,   206,   207,   208,     0,
5829:      210,     0,   211,     0,   746,   213,     0,   214,   215,   216,
5830:      217,   218,   219,     0,   221,   222,   223,   224,     0,   225,
5831:      226,   227,   228,   229,   230,     0,   231,     0,   747,   234,
5832:      235,   236,   237,   748,   749,     0,   750,     0,   241,     0,
5833:        0,   244,     0,   246,   247,   248,   249,   250,     0,     0,
5834:      251,     0,   253,     0,     0,   255,   256,   257,     0,     0,
5835:      258,   259,   260,   261,   262,   751,   264,   265,   266,   267,
5836:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
5837:      278,   279,   280,   281,   752,     0,   753,   285,   286,   287,
5838:      754,     0,   289,   290,     0,   292,     0,   755,   294,   756,
5839:      296,   297,   298,     0,   299,   300,  1219,     0,   301,   302,
5840:      303,     0,     0,   304,   757,     0,   307,     0,   758,   310,
5841:      311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
5842:      320,   321,   759,   323,   324,   760,   326,   327,   328,     0,
5843:      329,   330,   331,   332,   333,   334,   335,   336,   337,   761,
5844:      339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
5845:      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
5846:        0,   358,   359,   360,   762,   362,   363,   364,   365,   366,
5847:      367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
5848:      376,   377,     0,   378,   763,   380,   381,   382,     0,   384,
5849:      385,   764,   387,     0,   388,   389,   390,   391,   392,   393,
5850:      394,   395,   396,   397,   398,   765,   400,   766,   402,     0,
5851:      403,   404,     0,   405,     0,   407,   408,   409,   410,   411,
5852:        0,   767,   768,     0,     0,   414,   415,   769,   417,   770,
5853:     1220,   419,   420,   771,   422,   423,   424,   425,   426,     0,
5854:        0,   427,   428,   429,   430,   431,     0,     0,   432,   433,
5855:      434,   435,   436,  1110,   773,     0,   439,     0,   441,   442,
5856:      443,   444,     0,     0,   445,     0,     0,   446,   447,   448,
5857:      449,   450,   451,   774,   775,   776,   777,   778,   779,   780,
5858:      781,   782,   783,   784,   463,   464,   465,   466,     0,   733,
5859:        0,     0,     0,     0,     0,  1221,  1222,  1910,     0,     0,
5860:        0,     0,     0,     0,  1911,    92,    93,    94,    95,    96,
5861:       97,    98,    99,     0,   100,   101,   102,     3,     4,     0,
5862:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
5863:        0,   109,   110,   111,   734,   735,     0,   736,   737,     0,
5864:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
5865:      738,   739,   127,     0,   128,   129,   130,   131,   740,     0,
5866:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
5867:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
5868:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
5869:      154,   155,   156,   157,   158,   159,   160,   741,   742,   163,
5870:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
5871:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
5872:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
5873:        0,   187,   188,   189,   190,   743,   192,   193,   194,   195,
5874:      744,     0,   197,     0,   198,   199,   745,   201,     0,   202,
5875:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
5876:        0,   211,     0,   746,   213,     0,   214,   215,   216,   217,
5877:      218,   219,     0,   221,   222,   223,   224,     0,   225,   226,
5878:      227,   228,   229,   230,     0,   231,     0,   747,   234,   235,
5879:      236,   237,   748,   749,     0,   750,     0,   241,     0,     0,
5880:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
5881:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
5882:      259,   260,   261,   262,   751,   264,   265,   266,   267,   268,
5883:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5884:      279,   280,   281,   752,     0,   753,   285,   286,   287,   754,
5885:        0,   289,   290,     0,   292,     0,   755,   294,   756,   296,
5886:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
5887:        0,     0,   304,   757,     0,   307,     0,   758,   310,   311,
5888:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
5889:      321,   759,   323,   324,   760,   326,   327,   328,     0,   329,
5890:      330,   331,   332,   333,   334,   335,   336,   337,   761,   339,
5891:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
5892:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
5893:      358,   359,   360,   762,   362,   363,   364,   365,   366,   367,
5894:      368,   369,   370,   371,   372,    25,   373,   374,   375,   376,
5895:      377,     0,   378,   763,   380,   381,   382,     0,   384,   385,
5896:      764,   387,     0,   388,   389,   390,   391,   392,   393,   394,
5897:      395,   396,   397,   398,   765,   400,   766,   402,     0,   403,
5898:      404,    30,   405,     0,   407,   408,   409,   410,   411,     0,
5899:      767,   768,     0,     0,   414,   415,   769,   417,   770,     0,
5900:      419,   420,   771,   422,   423,   424,   425,   426,     0,     0,
5901:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
5902:      435,   436,   772,   773,     0,   439,     0,   441,   442,   443,
5903:      444,     0,     0,   445,     0,    33,   446,   447,   448,   449,
5904:      450,   451,   774,   775,   776,   777,   778,   779,   780,   781,
5905:      782,   783,   784,   463,   464,   465,   466,     0,   492,    34,
5906:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5907:        0,     0,     0,    35,    92,    93,    94,    95,    96,    97,
5908:       98,    99,   604,   100,   101,   102,     0,     0,     0,     0,
5909:        0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
5910:      109,   110,   111,   112,   113,     0,   115,   116,     0,   117,
5911:      118,   119,   120,   121,   122,     0,     0,   123,   124,   125,
5912:      126,   127,     0,   128,   129,   130,   131,   132,     0,     0,
5913:        0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
5914:        0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
5915:      151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
5916:      155,   156,   157,   158,   159,   160,   161,   162,   163,     0,
5917:      164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
5918:      172,   173,   174,   175,     0,     0,   176,   177,   178,   179,
5919:      180,     0,   181,   182,   183,     0,   184,   185,   186,     0,
5920:      187,   188,   189,   190,   191,   192,   193,   194,   195,   196,
5921:        0,   197,     0,   198,   199,   200,   201,     0,   202,     0,
5922:      203,     0,     0,     0,   206,   207,   208,     0,   210,     0,
5923:      211,     0,   212,   213,     0,   214,   215,   216,   217,   218,
5924:      219,     0,   221,   222,   223,   224,     0,   225,   226,   227,
5925:      228,   229,   230,     0,   231,     0,   233,   234,   235,   236,
5926:      237,   238,   239,     0,   240,     0,   241,     0,     0,   244,
5927:        0,   246,   247,   248,   249,   250,     0,     0,   251,     0,
5928:      253,     0,     0,   255,   256,   257,     0,     0,   258,   259,
5929:      260,   261,   262,   494,   264,   265,   266,   267,   268,   269,
5930:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5931:      280,   281,   282,     0,   284,   285,   286,   287,   288,     0,
5932:      289,   290,     0,   292,     0,   293,   294,   295,   296,   297,
5933:      298,     0,   299,   300,     0,     0,   301,   302,   303,     0,
5934:        0,   304,   305,     0,   307,     0,   309,   310,   311,   312,
5935:      313,   314,   315,   316,   317,   318,   319,     0,   320,   321,
5936:      322,   323,   324,   325,   326,   327,   328,     0,   329,   330,
5937:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
5938:      341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
5939:      350,   351,   352,   353,   354,     0,   355,   356,     0,   358,
5940:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
5941:      369,   370,   371,   372,    25,   373,   374,   375,   376,   377,
5942:        0,   378,   379,   380,   381,   382,     0,   384,   385,   386,
5943:      387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
5944:      396,   397,   398,   496,   400,   401,   402,     0,   403,   404,
5945:       30,   405,     0,   407,   408,   409,   410,   411,     0,   605,
5946:      413,     0,     0,   606,   415,   416,   417,   418,     0,   419,
5947:      420,   421,   422,   423,   424,   425,   426,     0,     0,   427,
5948:      428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
5949:      436,   566,   438,     0,   439,     0,   441,   442,   443,   444,
5950:        0,     0,   445,     0,    33,   446,   447,   448,   449,   450,
5951:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
5952:      461,   462,   463,   464,   465,   466,     0,   492,    34,     0,
5953:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5954:        0,     0,    35,    92,    93,    94,    95,    96,    97,    98,
5955:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
5956:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
5957:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
5958:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
5959:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
5960:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
5961:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
5962:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
5963:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
5964:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
5965:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
5966:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
5967:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
5968:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
5969:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
5970:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
5971:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
5972:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
5973:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
5974:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
5975:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
5976:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
5977:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
5978:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
5979:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
5980:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
5981:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
5982:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
5983:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
5984:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
5985:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
5986:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
5987:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
5988:      370,   371,   372,    25,   373,   374,   375,   376,   377,     0,
5989:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
5990:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
5991:      397,   398,   496,   400,   401,   402,     0,   403,   404,    30,
5992:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
5993:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
5994:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
5995:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
5996:      566,   438,     0,   439,     0,   441,   442,   443,   444,     0,
5997:        0,   445,     0,    33,   446,   447,   448,   449,   450,   451,
5998:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
5999:      462,   463,   464,   465,   466,     0,   492,    34,   570,     0,
6000:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6001:        0,    35,    92,    93,    94,    95,    96,    97,    98,    99,
6002:        0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
6003:        0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
6004:      111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
6005:      120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
6006:        0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
6007:      135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
6008:      144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
6009:        0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
6010:      157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
6011:      165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
6012:      174,   175,     0,     0,   176,   177,   178,   179,   180,     0,
6013:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
6014:      189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
6015:        0,   198,   199,   200,   201,     0,   202,     0,   203,     0,
6016:        0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
6017:      212,   213,     0,   214,   215,   216,   217,   218,   219,     0,
6018:      221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
6019:      230,     0,   231,     0,   233,   234,   235,   236,   237,   238,
6020:      239,     0,   240,     0,   241,     0,     0,   244,     0,   246,
6021:      247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
6022:        0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
6023:      262,   494,   264,   265,   266,   267,   268,   269,   270,   271,
6024:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
6025:      282,     0,   284,   285,   286,   287,   288,     0,   289,   290,
6026:        0,   292,     0,   293,   294,   295,   296,   297,   298,     0,
6027:      299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
6028:      305,     0,   307,     0,   309,   310,   311,   312,   313,   314,
6029:      315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
6030:      324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
6031:      333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
6032:        0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
6033:      352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
6034:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
6035:      371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
6036:      379,   380,   381,   382,     0,   384,   385,   386,   387,     0,
6037:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
6038:      398,   496,   400,   401,   402,     0,   403,   404,     0,   405,
6039:        0,   407,   408,   409,   410,   411,     0,   412,   413,     0,
6040:        0,   414,   415,   416,   417,   418,     0,   419,   420,   421,
6041:      422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
6042:      430,   431,     0,     0,   432,   433,   434,   435,   436,   437,
6043:      438,     0,   439,     0,   441,   442,   443,   444,     0,     0,
6044:      445,     0,     0,   446,   447,   448,   449,   450,   451,   452,
6045:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6046:      463,   464,   465,   466,     0,   492,     0,   570,     0,     0,
6047:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6048:      907,    92,    93,    94,    95,    96,    97,    98,    99,     0,
6049:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
6050:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
6051:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
6052:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
6053:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
6054:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
6055:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
6056:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
6057:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
6058:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
6059:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
6060:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
6061:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
6062:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
6063:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
6064:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
6065:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
6066:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
6067:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
6068:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
6069:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
6070:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
6071:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
6072:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
6073:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
6074:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
6075:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
6076:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
6077:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
6078:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
6079:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
6080:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
6081:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
6082:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
6083:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
6084:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
6085:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
6086:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
6087:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
6088:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
6089:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
6090:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
6091:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
6092:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
6093:      464,   465,   466,     0,   492,     0,     0,     0,     0,     0,
6094:        0,     0,     0,     0,     0,     0,     0,     0,     0,  2498,
6095:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
6096:      101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
6097:      104,     0,   105,   106,   107,     0,   109,   110,   111,   112,
6098:      113,     0,   115,   116,     0,   117,   118,   119,   120,   121,
6099:      122,     0,     0,   123,   124,   125,   126,   127,     0,   128,
6100:      129,   130,   131,   132,     0,     0,     0,   134,   135,   136,
6101:      137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
6102:      146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
6103:        0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
6104:      159,   160,   161,   162,   163,     0,   164,     0,   165,   166,
6105:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
6106:        0,     0,   176,   177,   178,   179,   180,     0,   181,   182,
6107:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
6108:      191,   192,   193,   194,   195,   196,     0,   197,     0,   198,
6109:      199,   200,   201,     0,   202,     0,   203,     0,     0,     0,
6110:      206,   207,   208,     0,   210,     0,   211,     0,   212,   213,
6111:        0,   214,   215,   216,   217,   218,   219,     0,   221,   222,
6112:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
6113:      231,     0,   233,   234,   235,   236,   237,   238,   239,     0,
6114:      240,     0,   241,     0,     0,   244,     0,   246,   247,   248,
6115:      249,   250,     0,     0,   251,     0,   253,     0,     0,   255,
6116:      256,   257,     0,     0,   258,   259,   260,   261,   262,   494,
6117:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
6118:      274,   275,   276,   277,   278,   279,   280,   281,   282,     0,
6119:      284,   285,   286,   287,   288,     0,   289,   290,     0,   292,
6120:        0,   293,   294,   295,   296,   297,   298,     0,   299,   300,
6121:        0,     0,   301,   302,   303,     0,     0,   304,   305,     0,
6122:      307,     0,   309,   310,   311,   312,   313,   314,   315,   316,
6123:      317,   318,   319,     0,   320,   321,   322,   323,   324,   325,
6124:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
6125:      335,   336,   337,   338,   339,   340,   341,   342,     0,   343,
6126:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
6127:      354,     0,   355,   356,     0,   358,   359,   360,   361,   362,
6128:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
6129:        0,   373,   374,   375,   376,   377,     0,   378,   379,   380,
6130:      381,   382,     0,   384,   385,   386,   387,     0,   388,   389,
6131:      390,   391,   392,   393,   394,   395,   396,   397,   398,   496,
6132:      400,   401,   402,     0,   403,   404,     0,   405,     0,   407,
6133:      408,   409,   410,   411,     0,   412,   413,     0,     0,   414,
6134:      415,   416,   417,   418,     0,   419,   420,   421,   422,   423,
6135:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
6136:        0,     0,   432,   433,   434,   435,   436,   437,   438,     0,
6137:      439,     0,   441,   442,   443,   444,     0,     0,   445,     0,
6138:        0,   446,   447,   448,   449,   450,   451,   452,   453,   454,
6139:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6140:      465,   466,     0,   492,     0,     0,     0,     0,     0,     0,
6141:        0,     0,     0,     0,     0,     0,     0,     0,  1634,    92,
6142:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
6143:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
6144:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
6145:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
6146:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
6147:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
6148:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
6149:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
6150:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
6151:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
6152:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
6153:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
6154:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
6155:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
6156:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
6157:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
6158:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
6159:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
6160:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
6161:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
6162:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
6163:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
6164:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
6165:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
6166:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
6167:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
6168:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
6169:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
6170:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
6171:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
6172:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
6173:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
6174:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
6175:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
6176:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
6177:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
6178:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
6179:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
6180:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
6181:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
6182:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
6183:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
6184:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
6185:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
6186:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
6187:      466,     0,   492,     0,     0,     0,     0,     0,     0,     0,
6188:        0,     0,     0,     0,     0,     0,     0,  1738,    92,    93,
6189:       94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
6190:        0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
6191:      105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
6192:      115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
6193:        0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
6194:      131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
6195:        0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
6196:      148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
6197:        0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
6198:      161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
6199:      169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
6200:      176,   177,   178,   179,   180,     0,   181,   182,   183,     0,
6201:      184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
6202:      193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
6203:      201,     0,   202,     0,   203,     0,     0,     0,   206,   207,
6204:      208,     0,   210,     0,   211,     0,   212,   213,     0,   214,
6205:      215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
6206:        0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
6207:      233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
6208:      241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
6209:        0,     0,   251,     0,   253,     0,     0,   255,   256,   257,
6210:        0,     0,   258,   259,   260,   261,   262,   494,   264,   265,
6211:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
6212:      276,   277,   278,   279,   280,   281,   282,     0,   284,   285,
6213:      286,   287,   288,     0,   289,   290,     0,   292,     0,   293,
6214:      294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
6215:      301,   302,   303,     0,     0,   304,   305,     0,   307,     0,
6216:      309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
6217:      319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
6218:      328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
6219:      337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
6220:      346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
6221:      355,   356,     0,   358,   359,   360,   361,   362,   363,   364,
6222:      365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
6223:      374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
6224:        0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
6225:      392,   393,   394,   395,   396,   397,   398,   496,   400,   401,
6226:      402,     0,   403,   404,     0,   405,     0,   407,   408,   409,
6227:      410,   411,     0,   412,   413,     0,     0,   414,   415,   416,
6228:      417,   418,     0,   419,   420,   421,   422,   423,   424,   425,
6229:      426,     0,     0,   427,   428,   429,   430,   431,     0,     0,
6230:      432,   433,   434,   435,   436,   437,   438,     0,   439,     0,
6231:      441,   442,   443,   444,     0,     0,   445,     0,     0,   446,
6232:      447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
6233:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
6234:        0,     0,     0,     0,  2360,  1217,   540,     0,     0,  1594,
6235:      807,     0,     0,     0,     0,     0,  2258,  1595,  1596,  1597,
6236:       92,    93,    94,    95,    96,    97,    98,    99,  1038,   100,
6237:      101,   102,  1039,  1040,  1041,  1042,  1043,  1044,  1045,   103,
6238:      104,  1046,   105,   106,   107,  2361,   109,   110,   111,     0,
6239:      654,  2362,   656,   657,  1047,   117,   118,   119,   120,   121,
6240:      122,  1048,  1049,   123,   124,   658,   659,   127,  1050,   128,
6241:      129,   130,   131,     0,  1051,  2363,  1052,   134,   135,   136,
6242:      137,   138,  2364,   140,   141,   142,  1053,   143,   144,   145,
6243:      146,   147,   148,  1054,  2365,   150,   151,   152,  1055,  1056,
6244:     1057,  2366,  1058,  1059,  1060,   154,   155,   156,   157,   158,
6245:      159,   160,   664,   665,   163,  1061,   164,  1062,   165,   166,
6246:      167,   168,   169,   170,  1063,   171,   172,   173,   174,   175,
6247:     1064,  1065,   176,   177,   666,   179,   180,  1066,   181,   182,
6248:      183,  1067,   184,   185,   186,  1068,   187,   188,   189,   190,
6249:        0,   192,   193,   194,   195,     0,  1069,   197,  1070,   198,
6250:      199,   667,   201,  1071,   202,  1072,   203,  2367,  1073,  2368,
6251:      206,   207,   208,  2369,   210,  1074,   211,  1075,     0,   213,
6252:     1076,   214,   215,   216,   217,   218,   219,  2370,   221,   222,
6253:      223,   224,  1077,   225,   226,   227,   228,   229,   230,  1078,
6254:      231,  2371,     0,   234,   235,   236,   237,   674,   675,  1079,
6255:      676,  1080,   241,  2372,  2373,   244,  2374,   246,   247,   248,
6256:      249,   250,  1081,  1082,   251,  2375,   253,  2376,  1083,   255,
6257:      256,   257,  1084,  1085,   258,   259,   260,   261,   262,  2377,
6258:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
6259:      274,   275,   276,   277,   278,   279,   280,   281,   683,  2378,
6260:      685,   285,   286,   287,  2379,  1086,   289,   290,  2380,   292,
6261:     1087,     0,   294,   687,   296,   297,   298,  1088,   299,   300,
6262:     1089,  1090,  2381,   302,   303,  1091,  1092,   304,     0,  2382,
6263:      307,  2383,     0,   310,   311,   312,   313,   314,   315,   316,
6264:      317,   318,   319,  1093,   320,   321,     0,   323,   324,     0,
6265:      326,   327,   328,  1094,   329,   330,   331,   332,   333,   334,
6266:      335,   336,   337,   690,   339,   340,   341,   342,  1095,   343,
6267:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
6268:      354,  1096,   355,   356,  2384,   358,   359,   360,   692,   362,
6269:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
6270:     1097,   373,   374,   375,   376,   377,  1098,   378,  2385,   380,
6271:      381,   382,  2386,   384,   385,   695,   387,  1099,   388,   389,
6272:      390,   391,   392,   393,   394,   395,   396,   397,   398,  2387,
6273:      400,     0,   402,  1100,   403,   404,  1101,   405,  2388,   407,
6274:      408,   409,   410,   411,  1102,   698,   699,  1103,  1104,   414,
6275:      415,     0,   417,     0,  1105,   419,   420,  2389,   422,   423,
6276:      424,   425,   426,  1106,  1107,   427,   428,   429,   430,   431,
6277:     1108,  1109,   432,   433,   434,   435,   436,     0,   701,  1111,
6278:      439,  2390,   441,   442,   443,   444,  1112,  1113,   445,  1114,
6279:     1115,   446,   447,   448,   449,   450,   451,     0,     0,     0,
6280:        0,     0,     0,     0,     0,     0,     0,     0,   463,   464,
6281:      465,   466,     0,   492,     0,  1598,  1599,  1600,  1594,  2391,
6282:     2392,  1603,  1604,  1605,  1606,     0,  1595,  1596,  1597,    92,
6283:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
6284:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
6285:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
6286:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
6287:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
6288:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
6289:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
6290:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
6291:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
6292:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
6293:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
6294:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
6295:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
6296:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
6297:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
6298:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
6299:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
6300:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
6301:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
6302:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
6303:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
6304:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
6305:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
6306:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
6307:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
6308:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
6309:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
6310:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
6311:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
6312:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
6313:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
6314:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
6315:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
6316:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
6317:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
6318:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
6319:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
6320:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
6321:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
6322:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
6323:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
6324:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
6325:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
6326:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
6327:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
6328:      466,     0,     0,     0,  1598,  1599,  1600,     0,  1601,  1602,
6329:     1603,  1604,  1605,  1606,  1292,     0,     0,  1293,     0,     0,
6330:        0,     0,  1294,  1295,  1296,     0,     0,     0,     0,     0,
6331:        0,     0,  1292,     0,     0,  1293,     0,     0,     0,  1297,
6332:     1294,  1295,  1296,     0,     0,     0,     0,  1299,     0,     0,
6333:     1292,     0,     0,  1293,  1300,     0,     0,  1297,  1294,  1295,
6334:     1296,     0,     0,     0,     0,  1299,     0,     0,     0,     0,
6335:        0,     0,  1300,     0,     0,  1297,     0,     0,  1292,  1301,
6336:        0,  1293,     0,  1299,     0,     0,  1294,  1295,  1296,     0,
6337:     1300,     0,     0,     0,     0,     0,  1292,  1301,     0,  1293,
6338:        0,     0,     0,  1297,  1294,  1295,  1296,     0,     0,     0,
6339:        0,  1299,     0,     0,     0,  1301,     0,     0,  1300,     0,
6340:        0,  1297,     0,     0,     0,     0,     0,     0,     0,  1299,
6341:        0,     0,     0,     0,     0,     0,  1300,     0,     0,     0,
6342:        0,     0,     0,  1301,     0,     0,     0,     0,     0,     0,
6343:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6344:        0,  1301,     0,     0,     0,     0,  1292,     0,     0,  1293,
6345:        0,     0,     0,     0,  1294,  1295,  1296,     0,  1302,     0,
6346:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6347:        0,  1297,  1303,     0,     0,     0,  1302,  1304,     0,  1299,
6348:        0,     0,     0,     0,     0,     0,  1300,     0,     0,     0,
6349:     1303,     0,     0,     0,  1302,  1304,     0,     0,  1305,  1306,
6350:        0,     0,     0,     0,     0,     0,     0,     0,  1303,     0,
6351:        0,  1301,  1307,  1304,     0,     0,  1305,  1306,     0,     0,
6352:        0,     0,  1302,     0,     0,     0,     0,     0,     0,     0,
6353:     1307,     0,     0,     0,  1305,  1306,  1303,     0,     0,     0,
6354:     1302,  1304,     0,     0,     0,     0,     0,     0,  1307,     0,
6355:     1308,     0,     0,  1309,  1303,     0,     0,     0,     0,  1304,
6356:        0,     0,  1305,  1306,     0,     0,     0,  1310,  1308,     0,
6357:     1311,  1309,     0,     0,     0,     0,  1307,     0,     0,     0,
6358:     1305,  1306,     0,     0,     0,  1310,  1308,     0,  1311,  1309,
6359:        0,     0,     0,     0,  1307,     0,     0,     0,     0,     0,
6360:        0,     0,     0,  1310,     0,     0,  1311,     0,     0,     0,
6361:     1302,     0,     0,     0,  1308,     0,     0,  1309,     0,     0,
6362:        0,     0,     0,     0,  1303,     0,     0,     0,     0,  1304,
6363:        0,  1310,  1308,     0,  1311,  1309,     0,     0,     0,     0,
6364:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1310,
6365:     1305,  1306,  1311,     0,     0,     0,     0,  1312,     0,     0,
6366:        0,     0,     0,     0,  1307,     0,     0,     0,     0,     0,
6367:        0,     0,     0,     0,     0,  1312,  1292,     0,     0,  1293,
6368:        0,     0,     0,     0,  1294,  1295,  1296,     0,     0,     0,
6369:        0,     0,     0,  1312,     0,     0,     0,     0,     0,     0,
6370:        0,  1297,  1308,     0,     0,  1309,     0,     0,     0,  1299,
6371:        0,     0,     0,     0,     0,     0,  1300,     0,     0,  1310,
6372:        0,  1312,  1311,  1292,     0,     0,  1293,     0,     0,     0,
6373:        0,  1294,  1295,  1296,     0,     0,     0,     0,     0,  1312,
6374:        0,  1301,     0,     0,     0,     0,     0,     0,  1297,     0,
6375:        0,     0,     0,     0,     0,     0,  1299,  1313,     0,     0,
6376:     1314,  1315,  1316,  1300,  1317,  1318,  1319,  1320,  1321,  1322,
6377:        0,     0,     0,     0,  1991,  1313,     0,     0,  1314,  1315,
6378:     1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,  1301,     0,
6379:        0,     0,  2197,  1313,     0,     0,  1314,  1315,  1316,     0,
6380:     1317,  1318,  1319,  1320,  1321,  1322,     0,     0,     0,  1312,
6381:     2236,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6382:        0,  1313,     0,     0,  1314,  1315,  1316,     0,  1317,  1318,
6383:     1319,  1320,  1321,  1322,     0,     0,     0,     0,  2324,  1313,
6384:     1302,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,
6385:     1321,  1322,     0,     0,  1303,     0,  2446,  1292,     0,  1304,
6386:     1293,     0,     0,     0,     0,  1294,  1295,  1296,     0,     0,
6387:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6388:     1305,  1306,  1297,     0,     0,     0,     0,  1302,     0,     0,
6389:     1299,     0,     0,     0,  1307,     0,     0,  1300,     0,     0,
6390:        0,  1303,     0,     0,     0,     0,  1304,     0,     0,  1313,
6391:        0,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,
6392:     1321,  1322,  1301,     0,     0,     0,  2468,  1305,  1306,     0,
6393:        0,     0,  1308,     0,     0,  1309,     0,     0,     0,     0,
6394:        0,  1307,     0,     0,     0,     0,     0,     0,  1292,  1310,
6395:        0,  1293,  1311,     0,     0,     0,  1294,  1295,  1296,     0,
6396:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6397:        0,     0,     0,  1297,     0,     0,     0,     0,     0,  1308,
6398:        0,  1299,  1309,     0,     0,     0,     0,     0,  1300,     0,
6399:        0,     0,     0,     0,     0,     0,  1310,     0,     0,  1311,
6400:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6401:        0,     0,     0,  1301,     0,     0,     0,     0,     0,     0,
6402:        0,  1302,     0,     0,     0,     0,     0,     0,     0,     0,
6403:        0,     0,     0,     0,     0,  1303,     0,     0,     0,  1312,
6404:     1304,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6405:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6406:        0,  1305,  1306,     0,     0,     0,     0,     0,     0,     0,
6407:        0,     0,     0,     0,     0,  1307,     0,     0,     0,     0,
6408:        0,     0,     0,     0,     0,     0,  1312,     0,     0,     0,
6409:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6410:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6411:        0,     0,  1302,  1308,     0,     0,  1309,     0,     0,     0,
6412:        0,     0,     0,     0,     0,     0,  1303,     0,     0,     0,
6413:     1310,  1304,     0,  1311,     0,     0,     0,     0,     0,  1313,
6414:        0,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,
6415:     1321,  1322,  1305,  1306,     0,     0,  2611,     0,     0,     0,
6416:        0,     0,     0,     0,     0,     0,  1307,     0,     0,     0,
6417:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6418:        0,     0,     0,     0,     0,     0,  1313,     0,     0,  1314,
6419:     1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,     0,
6420:        0,     0,     0,  2809,  1308,     0,     0,  1309,     0,     0,
6421:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6422:     1312,  1310,     0,     0,  1311,     0,     0,     0,     0,     0,
6423:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6424:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6425:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6426:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6427:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6428:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6429:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6430:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6431:        0,  1312,     0,     0,     0,     0,     0,     0,     0,     0,
6432:     1313,     0,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,
6433:     1320,  1321,  1322,     0,     0,     0,     0,  2821,     0,     0,
6434:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6435:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6436:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6437:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6438:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6439:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6440:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6441:        0,  1313,  1037,     0,  1314,  1315,  1316,     0,  1317,  1318,
6442:     1319,  1320,  1321,  1322,     0,     0,  1471,     0,    92,    93,
6443:       94,    95,    96,    97,    98,    99,  1038,   100,   101,   102,
6444:     1039,  1040,  1041,  1042,  1043,  1044,  1045,   103,   104,  1046,
6445:      105,   106,   107,     0,   109,   110,   111,   734,   735,     0,
6446:      736,   737,  1047,   117,   118,   119,   120,   121,   122,  1048,
6447:     1049,   123,   124,   738,   739,   127,  1050,   128,   129,   130,
6448:      131,   740,  1051,     0,  1052,   134,   135,   136,   137,   138,
6449:        0,   140,   141,   142,  1053,   143,   144,   145,   146,   147,
6450:      148,  1054,     0,   150,   151,   152,  1055,  1056,  1057,     0,
6451:     1058,  1059,  1060,   154,   155,   156,   157,   158,   159,   160,
6452:      741,   742,   163,  1061,   164,  1062,   165,   166,   167,   168,
6453:      169,   170,  1063,   171,   172,   173,   174,   175,  1064,  1065,
6454:      176,   177,   178,   179,   180,  1066,   181,   182,   183,  1067,
6455:      184,   185,   186,  1068,   187,   188,   189,   190,   743,   192,
6456:      193,   194,   195,   744,  1069,   197,  1070,   198,   199,   745,
6457:      201,  1071,   202,  1072,   203,     0,  1073,     0,   206,   207,
6458:      208,     0,   210,  1074,   211,  1075,   746,   213,  1076,   214,
6459:      215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
6460:     1077,   225,   226,   227,   228,   229,   230,  1078,   231,     0,
6461:      747,   234,   235,   236,   237,   748,   749,  1079,   750,  1080,
6462:      241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
6463:     1081,  1082,   251,     0,   253,     0,  1083,   255,   256,   257,
6464:     1084,  1085,   258,   259,   260,   261,   262,   751,   264,   265,
6465:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
6466:      276,   277,   278,   279,   280,   281,   752,     0,   753,   285,
6467:      286,   287,   754,  1086,   289,   290,     0,   292,  1087,   755,
6468:      294,   756,   296,   297,   298,  1088,   299,   300,  1089,  1090,
6469:      301,   302,   303,  1091,  1092,   304,   757,     0,   307,     0,
6470:      758,   310,   311,   312,   313,   314,   315,   316,   317,   318,
6471:      319,  1093,   320,   321,   759,   323,   324,   760,   326,   327,
6472:      328,  1094,   329,   330,   331,   332,   333,   334,   335,   336,
6473:      337,   761,   339,   340,   341,   342,  1095,   343,   344,   345,
6474:      346,   347,   348,   349,   350,   351,   352,   353,   354,  1096,
6475:      355,   356,     0,   358,   359,   360,   762,   362,   363,   364,
6476:      365,   366,   367,   368,   369,   370,   371,   372,  1097,   373,
6477:      374,   375,   376,   377,  1098,   378,   763,   380,   381,   382,
6478:        0,   384,   385,   764,   387,  1099,   388,   389,   390,   391,
6479:      392,   393,   394,   395,   396,   397,   398,   765,   400,   766,
6480:      402,  1100,   403,   404,  1101,   405,     0,   407,   408,   409,
6481:      410,   411,  1102,   767,   768,  1103,  1104,   414,   415,   769,
6482:      417,   770,  1105,   419,   420,   771,   422,   423,   424,   425,
6483:      426,  1106,  1107,   427,   428,   429,   430,   431,  1108,  1109,
6484:      432,   433,   434,   435,   436,  1110,   773,  1111,   439,     0,
6485:      441,   442,   443,   444,  1112,  1113,   445,  1114,  1115,   446,
6486:      447,   448,   449,   450,   451,   774,   775,   776,   777,   778,
6487:      779,   780,   781,   782,   783,   784,   463,   464,   465,   466,
6488:      492,     0,     0,     0,     0,     0,     0,     0,     0,  1717,
6489:        0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
6490:       96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
6491:        0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
6492:      107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
6493:        0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
6494:      124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
6495:        0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
6496:      141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
6497:        0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
6498:        0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
6499:      163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
6500:        0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
6501:      178,   179,   180,     0,   181,   182,   183,     0,   184,   185,
6502:      186,     0,   187,   188,   189,   190,   191,   192,   193,   194,
6503:      195,   196,     0,   197,     0,   198,   199,   200,   201,     0,
6504:      202,     0,   203,     0,     0,     0,   206,   207,   208,     0,
6505:      210,     0,   211,     0,   212,   213,     0,   214,   215,   216,
6506:      217,   218,   219,     0,   221,   222,   223,   224,     0,   225,
6507:      226,   227,   228,   229,   230,     0,   231,     0,   233,   234,
6508:      235,   236,   237,   238,   239,     0,   240,     0,   241,     0,
6509:        0,   244,     0,   246,   247,   248,   249,   250,     0,     0,
6510:      251,     0,   253,     0,     0,   255,   256,   257,     0,     0,
6511:      258,   259,   260,   261,   262,   494,   264,   265,   266,   267,
6512:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
6513:      278,   279,   280,   281,   282,     0,   284,   285,   286,   287,
6514:      288,     0,   289,   290,     0,   292,     0,   293,   294,   295,
6515:      296,   297,   298,     0,   299,   300,     0,     0,   301,   302,
6516:      303,     0,     0,   304,   305,     0,   307,     0,   309,   310,
6517:      311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
6518:      320,   321,   322,   323,   324,   325,   326,   327,   328,     0,
6519:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
6520:      339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
6521:      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
6522:        0,   358,   359,   360,   361,   362,   363,   364,   365,   366,
6523:      367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
6524:      376,   377,     0,   378,   379,   380,   381,   382,     0,   384,
6525:      385,   386,   387,     0,   388,   389,   390,   391,   392,   393,
6526:      394,   395,   396,   397,   398,   496,   400,   401,   402,     0,
6527:      403,   404,     0,   405,     0,   407,   408,   409,   410,   411,
6528:        0,   412,   413,     0,     0,   414,   415,   416,   417,   418,
6529:        0,   419,   420,   421,   422,   423,   424,   425,   426,     0,
6530:        0,   427,   428,   429,   430,   431,     0,     0,   432,   433,
6531:      434,   435,   436,   437,   438,     0,   439,     0,   441,   442,
6532:      443,   444,     0,     0,   445,     0,     0,   446,   447,   448,
6533:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
6534:      459,   460,   461,   462,   463,   464,   465,   466,   733,  1217,
6535:      540,     0,     0,     0,   807,     0,     0,  2189,     0,     0,
6536:        0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
6537:       98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
6538:        0,     0,     0,   103,   104,     0,   105,   106,   107,     0,
6539:      109,   110,   111,   734,   735,     0,   736,   737,     0,   117,
6540:      118,   119,   120,   121,   122,     0,     0,   123,   124,   738,
6541:      739,   127,     0,   128,   129,   130,   131,   740,     0,     0,
6542:        0,   134,   135,   136,   137,   138,     0,   140,   141,   142,
6543:        0,   143,   144,   145,   146,   147,   148,     0,     0,   150,
6544:      151,   152,     0,     0,     0,     0,     0,     0,     0,   154,
6545:      155,   156,   157,   158,   159,   160,   741,   742,   163,  1351,
6546:      164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
6547:      172,   173,   174,   175,     0,     0,   176,   177,   178,   179,
6548:      180,     0,   181,   182,   183,     0,   184,   185,   186,     0,
6549:      187,   188,   189,   190,   743,   192,   193,   194,   195,   744,
6550:     1218,   197,     0,   198,   199,   745,   201,     0,   202,     0,
6551:      203,     0,     0,     0,   206,   207,   208,     0,   210,     0,
6552:      211,     0,   746,   213,     0,   214,   215,   216,   217,   218,
6553:      219,     0,   221,   222,   223,   224,     0,   225,   226,   227,
6554:      228,   229,   230,     0,   231,     0,   747,   234,   235,   236,
6555:      237,   748,   749,     0,   750,     0,   241,     0,     0,   244,
6556:        0,   246,   247,   248,   249,   250,     0,     0,   251,     0,
6557:      253,     0,     0,   255,   256,   257,     0,     0,   258,   259,
6558:      260,   261,   262,   751,   264,   265,   266,   267,   268,   269,
6559:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6560:      280,   281,   752,     0,   753,   285,   286,   287,   754,     0,
6561:      289,   290,     0,   292,     0,   755,   294,   756,   296,   297,
6562:      298,     0,   299,   300,  1219,     0,   301,   302,   303,     0,
6563:        0,   304,   757,     0,   307,     0,   758,   310,   311,   312,
6564:      313,   314,   315,   316,   317,   318,   319,     0,   320,   321,
6565:      759,   323,   324,   760,   326,   327,   328,     0,   329,   330,
6566:      331,   332,   333,   334,   335,   336,   337,   761,   339,   340,
6567:      341,   342,     0,   343,   344,   345,   346,   347,   348,   349,
6568:      350,   351,   352,   353,   354,     0,   355,   356,     0,   358,
6569:      359,   360,   762,   362,   363,   364,   365,   366,   367,   368,
6570:      369,   370,   371,   372,     0,   373,   374,   375,   376,   377,
6571:        0,   378,   763,   380,   381,   382,     0,   384,   385,   764,
6572:      387,     0,   388,   389,   390,   391,   392,   393,   394,   395,
6573:      396,   397,   398,   765,   400,   766,   402,     0,   403,   404,
6574:        0,   405,     0,   407,   408,   409,   410,   411,     0,   767,
6575:      768,     0,     0,   414,   415,   769,   417,   770,  1220,   419,
6576:      420,   771,   422,   423,   424,   425,   426,     0,     0,   427,
6577:      428,   429,   430,   431,     0,     0,   432,   433,   434,   435,
6578:      436,  1110,   773,     0,   439,     0,   441,   442,   443,   444,
6579:        0,     0,   445,     0,     0,   446,   447,   448,   449,   450,
6580:      451,   774,   775,   776,   777,   778,   779,   780,   781,   782,
6581:      783,   784,   463,   464,   465,   466,   733,  1217,   540,     0,
6582:        0,     0,   807,  1221,  1222,     0,     0,     0,     0,     0,
6583:        0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
6584:        0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
6585:        0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
6586:      111,   734,   735,     0,   736,   737,     0,   117,   118,   119,
6587:      120,   121,   122,     0,     0,   123,   124,   738,   739,   127,
6588:        0,   128,   129,   130,   131,   740,     0,     0,     0,   134,
6589:      135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
6590:      144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
6591:        0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
6592:      157,   158,   159,   160,   741,   742,   163,  1353,   164,     0,
6593:      165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
6594:      174,   175,     0,     0,   176,   177,   178,   179,   180,     0,
6595:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
6596:      189,   190,   743,   192,   193,   194,   195,   744,  1218,   197,
6597:        0,   198,   199,   745,   201,     0,   202,     0,   203,     0,
6598:        0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
6599:      746,   213,     0,   214,   215,   216,   217,   218,   219,     0,
6600:      221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
6601:      230,     0,   231,     0,   747,   234,   235,   236,   237,   748,
6602:      749,     0,   750,     0,   241,     0,     0,   244,     0,   246,
6603:      247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
6604:        0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
6605:      262,   751,   264,   265,   266,   267,   268,   269,   270,   271,
6606:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
6607:      752,     0,   753,   285,   286,   287,   754,     0,   289,   290,
6608:        0,   292,     0,   755,   294,   756,   296,   297,   298,     0,
6609:      299,   300,  1219,     0,   301,   302,   303,     0,     0,   304,
6610:      757,     0,   307,     0,   758,   310,   311,   312,   313,   314,
6611:      315,   316,   317,   318,   319,     0,   320,   321,   759,   323,
6612:      324,   760,   326,   327,   328,     0,   329,   330,   331,   332,
6613:      333,   334,   335,   336,   337,   761,   339,   340,   341,   342,
6614:        0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
6615:      352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
6616:      762,   362,   363,   364,   365,   366,   367,   368,   369,   370,
6617:      371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
6618:      763,   380,   381,   382,     0,   384,   385,   764,   387,     0,
6619:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
6620:      398,   765,   400,   766,   402,     0,   403,   404,     0,   405,
6621:        0,   407,   408,   409,   410,   411,     0,   767,   768,     0,
6622:        0,   414,   415,   769,   417,   770,  1220,   419,   420,   771,
6623:      422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
6624:      430,   431,     0,     0,   432,   433,   434,   435,   436,  1110,
6625:      773,     0,   439,     0,   441,   442,   443,   444,     0,     0,
6626:      445,     0,     0,   446,   447,   448,   449,   450,   451,   774,
6627:      775,   776,   777,   778,   779,   780,   781,   782,   783,   784,
6628:      463,   464,   465,   466,   733,  1217,   540,     0,     0,     0,
6629:      807,  1221,  1222,     0,     0,     0,     0,     0,     0,     0,
6630:       92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
6631:      101,   102,     0,     0,     0,     0,     0,     0,     0,   103,
6632:      104,     0,   105,   106,   107,     0,   109,   110,   111,   734,
6633:      735,     0,   736,   737,     0,   117,   118,   119,   120,   121,
6634:      122,     0,     0,   123,   124,   738,   739,   127,     0,   128,
6635:      129,   130,   131,   740,     0,     0,     0,   134,   135,   136,
6636:      137,   138,     0,   140,   141,   142,     0,   143,   144,   145,
6637:      146,   147,   148,     0,     0,   150,   151,   152,     0,     0,
6638:        0,     0,     0,     0,     0,   154,   155,   156,   157,   158,
6639:      159,   160,   741,   742,   163,     0,   164,     0,   165,   166,
6640:      167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
6641:        0,     0,   176,   177,   178,   179,   180,     0,   181,   182,
6642:      183,     0,   184,   185,   186,     0,   187,   188,   189,   190,
6643:      743,   192,   193,   194,   195,   744,  1218,   197,     0,   198,
6644:      199,   745,   201,     0,   202,     0,   203,     0,     0,     0,
6645:      206,   207,   208,     0,   210,     0,   211,     0,   746,   213,
6646:        0,   214,   215,   216,   217,   218,   219,     0,   221,   222,
6647:      223,   224,     0,   225,   226,   227,   228,   229,   230,     0,
6648:      231,     0,   747,   234,   235,   236,   237,   748,   749,     0,
6649:      750,     0,   241,     0,     0,   244,     0,   246,   247,   248,
6650:      249,   250,     0,     0,   251,     0,   253,     0,     0,   255,
6651:      256,   257,     0,     0,   258,   259,   260,   261,   262,   751,
6652:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
6653:      274,   275,   276,   277,   278,   279,   280,   281,   752,     0,
6654:      753,   285,   286,   287,   754,     0,   289,   290,     0,   292,
6655:        0,   755,   294,   756,   296,   297,   298,     0,   299,   300,
6656:     1219,     0,   301,   302,   303,     0,     0,   304,   757,     0,
6657:      307,     0,   758,   310,   311,   312,   313,   314,   315,   316,
6658:      317,   318,   319,     0,   320,   321,   759,   323,   324,   760,
6659:      326,   327,   328,     0,   329,   330,   331,   332,   333,   334,
6660:      335,   336,   337,   761,   339,   340,   341,   342,     0,   343,
6661:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
6662:      354,     0,   355,   356,     0,   358,   359,   360,   762,   362,
6663:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
6664:        0,   373,   374,   375,   376,   377,     0,   378,   763,   380,
6665:      381,   382,     0,   384,   385,   764,   387,     0,   388,   389,
6666:      390,   391,   392,   393,   394,   395,   396,   397,   398,   765,
6667:      400,   766,   402,     0,   403,   404,     0,   405,     0,   407,
6668:      408,   409,   410,   411,     0,   767,   768,     0,     0,   414,
6669:      415,   769,   417,   770,  1220,   419,   420,   771,   422,   423,
6670:      424,   425,   426,     0,     0,   427,   428,   429,   430,   431,
6671:        0,     0,   432,   433,   434,   435,   436,  1110,   773,     0,
6672:      439,     0,   441,   442,   443,   444,     0,     0,   445,     0,
6673:        0,   446,   447,   448,   449,   450,   451,   774,   775,   776,
6674:      777,   778,   779,   780,   781,   782,   783,   784,   463,   464,
6675:      465,   466,     0,  1292,     0,     0,  1293,     0,     0,  1221,
6676:     1222,  1294,  1295,  1296,     0,     0,     0,     0,     0,     0,
6677:        0,  1292,     0,     0,  1293,     0,     0,     0,  1297,  1294,
6678:     1295,  1296,  1744,     0,     0,     0,  1299,     0,     0,  1292,
6679:        0,     0,  1293,  1300,     0,     0,  1297,  1294,  1295,  1296,
6680:        0,     0,     0,     0,  1299,     0,     0,     0,     0,     0,
6681:        0,  1300,     0,     0,  1297,     0,     0,  1292,  1301,     0,
6682:     1293,     0,  1299,     0,     0,  1294,  1295,  1296,     0,  1300,
6683:        0,     0,     0,     0,     0,     0,  1301,     0,     0,     0,
6684:        0,     0,  1297,     0,     0,  1932,     0,     0,     0,     0,
6685:     1299,     0,     0,     0,  1301,     0,     0,  1300,     0,     0,
6686:        0,     0,     0,     0,     0,     0,     0,     0,  1745,     0,
6687:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6688:        0,     0,  1301,     0,     0,     0,     0,     0,     0,     0,
6689:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6690:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6691:        0,     0,     0,     0,     0,     0,     0,  1302,     0,     0,
6692:        0,     0,     0,     0,     0,  1970,     0,     0,     0,     0,
6693:     1971,  1303,     0,     0,     0,  1302,  1304,  1292,     0,     0,
6694:     1293,     0,  2879,     0,     0,  1294,  1295,  1296,     0,  1303,
6695:        0,     0,     0,  1302,  1304,     0,     0,  1305,  1306,     0,
6696:        0,     0,  1297,     0,     0,     0,     0,  1303,     0,     0,
6697:     1299,  1307,  1304,     0,     0,  1305,  1306,  1300,     0,     0,
6698:        0,  1302,     0,     0,     0,     0,     0,     0,     0,  1307,
6699:        0,     0,     0,  1305,  1306,  1303,     0,     0,     0,     0,
6700:     1304,     0,  1301,     0,     0,     0,     0,  1307,     0,  1308,
6701:        0,     0,  1309,     0,     0,     0,     0,     0,     0,     0,
6702:        0,  1305,  1306,     0,     0,     0,  1310,  1308,     0,  1311,
6703:     1309,     0,     0,     0,     0,  1307,     0,     0,     0,     0,
6704:        0,     0,     0,     0,  1310,  1308,     0,  1311,  1309,     0,
6705:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6706:        0,     0,  1310,     0,     0,  1311,     0,     0,     0,     0,
6707:        0,     0,     0,  1308,     0,     0,  1309,     0,     0,     0,
6708:        0,     0,     0,     0,     0,     0,     0,     0,  2880,  1292,
6709:     1310,     0,  1293,  1311,     0,     0,     0,  1294,  1295,  1296,
6710:        0,  1302,     0,     0,     0,     0,     0,     0,     0,     0,
6711:        0,     0,     0,     0,  1297,  1303,  1312,  1975,  1292,     0,
6712:     1304,  1293,  1299,     0,     0,     0,  1294,  1295,  1296,  1300,
6713:        0,     0,     0,     0,  1312,     0,     0,     0,     0,     0,
6714:        0,  1305,  1306,  1297,     0,     0,     0,     0,     0,     0,
6715:        0,  1299,  1312,     0,  1301,  1307,     0,     0,  1300,     0,
6716:        0,     0,     0,     0,  1292,     0,     0,  1293,     0,     0,
6717:        0,     0,  1294,  1295,  1296,  1746,     0,     0,     0,     0,
6718:     1312,     0,     0,  1301,     0,     0,     0,     0,     0,  1297,
6719:        0,     0,  1982,  1308,     0,     0,  1309,  1299,     0,     0,
6720:        0,     0,     0,     0,  1300,     0,     0,     0,     0,     0,
6721:     1310,     0,     0,  1311,     0,     0,  1313,     0,     0,  1314,
6722:     1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,  1301,
6723:        0,  1944,     0,     0,  1313,     0,     0,  1314,  1315,  1316,
6724:        0,  1317,  1318,  1319,  1320,  1321,  1322,     0,     0,     0,
6725:        0,     0,  1313,  1302,     0,  1314,  1315,  1316,     0,  1317,
6726:     1318,  1319,  1320,  1321,  1322,     0,     0,  1303,     0,     0,
6727:        0,     0,  1304,     0,     0,     0,     0,  1980,     0,     0,
6728:     1313,     0,  1302,  1314,  1315,  1316,     0,  1317,  1318,  1319,
6729:     1320,  1321,  1322,  1305,  1306,     0,  1303,     0,     0,     0,
6730:     1312,  1304,     0,     0,     0,     0,     0,  1307,     0,     0,
6731:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6732:        0,  1292,  1305,  1306,  1293,     0,     0,     0,  1302,  1294,
6733:     1295,  1296,     0,     0,     0,     0,  1307,     0,     0,     0,
6734:        0,     0,  1303,     0,     0,  1308,  1297,  1304,  1309,     0,
6735:        0,     0,     0,     0,  1299,     0,     0,     0,     0,     0,
6736:        0,  1300,  1310,     0,     0,  1311,     0,     0,  1305,  1306,
6737:        0,     0,     0,     0,  1308,     0,     0,  1309,     0,     0,
6738:        0,     0,  1307,     0,     0,     0,  1301,     0,     0,     0,
6739:        0,  1310,     0,     0,  1311,     0,     0,     0,     0,     0,
6740:     1313,     0,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,
6741:     1320,  1321,  1322,     0,     0,     0,     0,     0,     0,     0,
6742:     1308,     0,     0,  1309,     0,     0,     0,     0,     0,     0,
6743:        0,     0,     0,     0,     0,     0,  1292,  1310,     0,  1293,
6744:     1311,     0,     0,     0,  1294,  1295,  1296,     0,     0,     0,
6745:        0,     0,  1312,     0,     0,     0,     0,     0,     0,     0,
6746:        0,  1297,     0,     0,  2235,  1292,     0,     0,  1293,  1299,
6747:        0,     0,     0,  1294,  1295,  1296,  1300,     0,     0,     0,
6748:        0,  1312,     0,  1292,     0,  1302,  1293,     0,     0,     0,
6749:     1297,  1294,  1295,  1296,     0,     0,     0,     0,  1299,  1303,
6750:        0,  1301,     0,     0,  1304,  1300,     0,     0,     0,     0,
6751:        0,     0,     0,     0,     0,     0,  1299,     0,     0,     0,
6752:        0,     0,     0,  1300,     0,  1305,  1306,  1312,     0,     0,
6753:     1301,     0,     0,     0,     0,     0,     0,     0,     0,  1307,
6754:        0,     0,     0,     0,     0,     0,     0,     0,  1301,     0,
6755:        0,     0,  1313,     0,     0,  1314,  1315,  1316,     0,  1317,
6756:     1318,  1319,  1320,  1321,  1322,     0,     0,     0,     0,     0,
6757:        0,     0,     0,     0,     0,     0,     0,  1308,     0,     0,
6758:     1309,  1313,     0,     0,  1314,  1315,  1316,     0,  1317,  1318,
6759:     1319,  1320,  1321,  1322,  1310,     0,     0,  1311,     0,     0,
6760:     1302,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6761:        0,     0,     0,     0,  1303,     0,     0,     0,     0,  1304,
6762:        0,     0,     0,     0,     0,     0,     0,  1313,     0,  1302,
6763:     1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,
6764:     1305,  1306,     0,  1303,     0,     0,     0,  1302,  1304,     0,
6765:        0,     0,     0,     0,  1307,     0,     0,     0,     0,     0,
6766:        0,  1303,     0,     0,     0,     0,  1304,     0,     0,  1305,
6767:     1306,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6768:        0,     0,     0,  1307,  1312,     0,     0,  1305,  1306,     0,
6769:        0,     0,  1308,     0,     0,  1309,     0,     0,     0,     0,
6770:        0,  1307,     0,     0,     0,     0,     0,     0,     0,  1310,
6771:        0,     0,  1311,     0,     0,     0,  2193,     0,     0,     0,
6772:        0,  1308,     0,     0,  1309,     0,     0,     0,     0,     0,
6773:        0,     0,     0,     0,     0,     0,     0,     0,  1310,  1308,
6774:        0,  1311,  1309,     0,     0,     0,     0,     0,     0,     0,
6775:        0,     0,     0,     0,     0,     0,  1310,     0,     0,     0,
6776:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6777:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6778:        0,     0,     0,     0,  1313,     0,     0,  1314,  1315,  1316,
6779:        0,  1317,  1318,  1319,  1320,  1321,  1322,     0,     0,  1312,
6780:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6781:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6782:        0,     0,     0,     0,     0,     0,     0,     0,  1312,     0,
6783:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6784:        0,     0,     0,     0,     0,     0,  1312,     0,     0,     0,
6785:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6786:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6787:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6788:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6789:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1313,
6790:        0,     0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,
6791:     1321,  1322,     0,     0,     0,     0,     0,     0,     0,     0,
6792:        0,     0,     0,     0,     0,     0,     0,     0,  1313,     0,
6793:        0,  1314,  1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,
6794:     1322,     0,     0,  1037,     0,  1652,  1313,     0,     0,  1314,
6795:     1315,  1316,     0,  1317,  1318,  1319,  1320,  1321,  1322,    92,
6796:       93,    94,    95,    96,    97,    98,    99,  1038,   100,   101,
6797:      102,  1039,  1040,  1041,  1042,  1043,  1044,  1045,   103,   104,
6798:     1046,   105,   106,   107,     0,   109,   110,   111,   734,   735,
6799:        0,   736,   737,  1047,   117,   118,   119,   120,   121,   122,
6800:     1048,  1049,   123,   124,   738,   739,   127,  1050,   128,   129,
6801:      130,   131,   740,  1051,     0,  1052,   134,   135,   136,   137,
6802:      138,     0,   140,   141,   142,  1053,   143,   144,   145,   146,
6803:      147,   148,  1054,     0,   150,   151,   152,  1055,  1056,  1057,
6804:        0,  1058,  1059,  1060,   154,   155,   156,   157,   158,   159,
6805:      160,   741,   742,   163,  1061,   164,  1062,   165,   166,   167,
6806:      168,   169,   170,  1063,   171,   172,   173,   174,   175,  1064,
6807:     1065,   176,   177,   178,   179,   180,  1066,   181,   182,   183,
6808:     1067,   184,   185,   186,  1068,   187,   188,   189,   190,   743,
6809:      192,   193,   194,   195,   744,  1069,   197,  1070,   198,   199,
6810:      745,   201,  1071,   202,  1072,   203,     0,  1073,     0,   206,
6811:      207,   208,     0,   210,  1074,   211,  1075,   746,   213,  1076,
6812:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
6813:      224,  1077,   225,   226,   227,   228,   229,   230,  1078,   231,
6814:        0,   747,   234,   235,   236,   237,   748,   749,  1079,   750,
6815:     1080,   241,     0,     0,   244,     0,   246,   247,   248,   249,
6816:      250,  1081,  1082,   251,     0,   253,     0,  1083,   255,   256,
6817:      257,  1084,  1085,   258,   259,   260,   261,   262,   751,   264,
6818:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
6819:      275,   276,   277,   278,   279,   280,   281,   752,     0,   753,
6820:      285,   286,   287,   754,  1086,   289,   290,     0,   292,  1087,
6821:      755,   294,   756,   296,   297,   298,  1088,   299,   300,  1089,
6822:     1090,   301,   302,   303,  1091,  1092,   304,   757,     0,   307,
6823:        0,   758,   310,   311,   312,   313,   314,   315,   316,   317,
6824:      318,   319,  1093,   320,   321,   759,   323,   324,   760,   326,
6825:      327,   328,  1094,   329,   330,   331,   332,   333,   334,   335,
6826:      336,   337,   761,   339,   340,   341,   342,  1095,   343,   344,
6827:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
6828:     1096,   355,   356,     0,   358,   359,   360,   762,   362,   363,
6829:      364,   365,   366,   367,   368,   369,   370,   371,   372,  1097,
6830:      373,   374,   375,   376,   377,  1098,   378,   763,   380,   381,
6831:      382,     0,   384,   385,   764,   387,  1099,   388,   389,   390,
6832:      391,   392,   393,   394,   395,   396,   397,   398,   765,   400,
6833:      766,   402,  1100,   403,   404,  1101,   405,     0,   407,   408,
6834:      409,   410,   411,  1102,   767,   768,  1103,  1104,   414,   415,
6835:      769,   417,   770,  1105,   419,   420,   771,   422,   423,   424,
6836:      425,   426,  1106,  1107,   427,   428,   429,   430,   431,  1108,
6837:     1109,   432,   433,   434,   435,   436,  1110,   773,  1111,   439,
6838:        0,   441,   442,   443,   444,  1112,  1113,   445,  1114,  1115,
6839:      446,   447,   448,   449,   450,   451,   774,   775,   776,   777,
6840:      778,   779,   780,   781,   782,   783,   784,   463,   464,   465,
6841:      466,  1037,     0,     0,     0,     0,     0,     0,     0,     0,
6842:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
6843:       95,    96,    97,    98,    99,  1038,   100,   101,   102,  1039,
6844:     1040,  1041,  1042,  1043,  1044,  1045,   103,   104,  1046,   105,
6845:      106,   107,     0,   109,   110,   111,   734,   735,     0,   736,
6846:      737,  1047,   117,   118,   119,   120,   121,   122,  1048,  1049,
6847:      123,   124,   738,   739,   127,  1050,   128,   129,   130,   131,
6848:      740,  1051,     0,  1052,   134,   135,   136,   137,   138,     0,
6849:      140,   141,   142,  1053,   143,   144,   145,   146,   147,   148,
6850:     1054,     0,   150,   151,   152,  1055,  1056,  1057,     0,  1058,
6851:     1059,  1060,   154,   155,   156,   157,   158,   159,   160,   741,
6852:      742,   163,  1061,   164,  1062,   165,   166,   167,   168,   169,
6853:      170,  1063,   171,   172,   173,   174,   175,  1064,  1065,   176,
6854:      177,   178,   179,   180,  1066,   181,   182,   183,  1067,   184,
6855:      185,   186,  1068,   187,   188,   189,   190,   743,   192,   193,
6856:      194,   195,   744,  1069,   197,  1070,   198,   199,   745,   201,
6857:     1071,   202,  1072,   203,     0,  1073,     0,   206,   207,   208,
6858:        0,   210,  1074,   211,  1075,   746,   213,  1076,   214,   215,
6859:      216,   217,   218,   219,     0,   221,   222,   223,   224,  1077,
6860:      225,   226,   227,   228,   229,   230,  1078,   231,     0,   747,
6861:      234,   235,   236,   237,   748,   749,  1079,   750,  1080,   241,
6862:        0,     0,   244,     0,   246,   247,   248,   249,   250,  1081,
6863:     1082,   251,     0,   253,     0,  1083,   255,   256,   257,  1084,
6864:     1085,   258,   259,   260,   261,   262,   751,   264,   265,   266,
6865:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
6866:      277,   278,   279,   280,   281,   752,     0,   753,   285,   286,
6867:      287,   754,  1086,   289,   290,     0,   292,  1087,   755,   294,
6868:      756,   296,   297,   298,  1088,   299,   300,  1089,  1090,   301,
6869:      302,   303,  1091,  1092,   304,   757,     0,   307,     0,   758,
6870:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
6871:     1093,   320,   321,   759,   323,   324,   760,   326,   327,   328,
6872:     1094,   329,   330,   331,   332,   333,   334,   335,   336,   337,
6873:      761,   339,   340,   341,   342,  1095,   343,   344,   345,   346,
6874:      347,   348,   349,   350,   351,   352,   353,   354,  1096,   355,
6875:      356,     0,   358,   359,   360,   762,   362,   363,   364,   365,
6876:      366,   367,   368,   369,   370,   371,   372,  1097,   373,   374,
6877:      375,   376,   377,  1098,   378,   763,   380,   381,   382,     0,
6878:      384,   385,   764,   387,  1099,   388,   389,   390,   391,   392,
6879:      393,   394,   395,   396,   397,   398,   765,   400,   766,   402,
6880:     1100,   403,   404,  1101,   405,     0,   407,   408,   409,   410,
6881:      411,  1102,   767,   768,  1103,  1104,   414,   415,   769,   417,
6882:      770,  1105,   419,   420,   771,   422,   423,   424,   425,   426,
6883:     1106,  1107,   427,   428,   429,   430,   431,  1108,  1109,   432,
6884:      433,   434,   435,   436,  1110,   773,  1111,   439,     0,   441,
6885:      442,   443,   444,  1112,  1113,   445,  1114,  1115,   446,   447,
6886:      448,   449,   450,   451,   774,   775,   776,   777,   778,   779,
6887:      780,   781,   782,   783,   784,   463,   464,   465,   466,  1037,
6888:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6889:        0,     0,     0,     0,     0,    92,    93,    94,    95,  1793,
6890:       97,    98,    99,  1038,   100,   101,   102,  1039,  1040,  1041,
6891:     1042,  1043,  1044,  1045,   103,   104,  1046,   105,   106,   107,
6892:        0,   109,   110,   111,   734,   735,     0,   736,   737,  1047,
6893:      117,   118,   119,   120,   121,   122,  1048,  1049,   123,   124,
6894:      738,   739,   127,  1050,   128,   129,   130,   131,   740,  1051,
6895:        0,  1052,   134,   135,   136,   137,   138,     0,   140,   141,
6896:      142,  1053,   143,   144,   145,   146,   147,   148,  1054,     0,
6897:      150,   151,   152,  1055,  1056,  1057,     0,  1058,  1059,  1060,
6898:      154,   155,   156,   157,   158,   159,   160,   741,   742,   163,
6899:     1061,   164,  1062,   165,   166,   167,   168,   169,   170,  1063,
6900:      171,   172,   173,   174,   175,  1064,  1065,   176,   177,   178,
6901:     1794,   180,  1066,   181,   182,   183,  1067,   184,   185,   186,
6902:     1068,   187,   188,   189,   190,   743,   192,   193,   194,   195,
6903:      744,  1069,   197,  1070,   198,   199,   745,   201,  1071,   202,
6904:     1072,   203,     0,  1073,     0,   206,   207,   208,     0,   210,
6905:     1074,   211,  1075,   746,   213,  1076,   214,   215,   216,   217,
6906:      218,   219,     0,   221,   222,   223,   224,  1077,   225,   226,
6907:      227,   228,   229,   230,  1078,   231,     0,   747,   234,   235,
6908:      236,   237,   748,   749,  1079,   750,  1080,   241,     0,     0,
6909:      244,     0,   246,   247,   248,   249,   250,  1081,  1082,   251,
6910:        0,   253,     0,  1083,   255,   256,   257,  1084,  1085,   258,
6911:      259,   260,   261,   262,   751,   264,   265,   266,   267,   268,
6912:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
6913:      279,   280,   281,   752,     0,   753,   285,   286,   287,   754,
6914:     1086,   289,   290,     0,   292,  1087,   755,   294,   756,   296,
6915:      297,   298,  1088,   299,   300,  1089,  1090,   301,   302,   303,
6916:     1091,  1092,   304,   757,     0,   307,     0,   758,   310,   311,
6917:      312,   313,   314,   315,   316,   317,   318,   319,  1093,   320,
6918:      321,   759,   323,   324,   760,   326,   327,   328,  1094,   329,
6919:      330,   331,   332,   333,   334,   335,   336,   337,   761,   339,
6920:      340,   341,   342,  1095,   343,   344,   345,   346,   347,   348,
6921:      349,   350,   351,   352,   353,   354,  1096,   355,   356,     0,
6922:      358,   359,   360,   762,   362,   363,   364,   365,   366,   367,
6923:      368,   369,   370,   371,   372,  1097,   373,   374,   375,   376,
6924:      377,  1098,  1795,   763,   380,   381,   382,     0,   384,   385,
6925:      764,   387,  1099,   388,   389,   390,   391,   392,   393,   394,
6926:      395,   396,   397,   398,   765,   400,   766,   402,  1100,   403,
6927:      404,  1101,   405,     0,   407,   408,   409,   410,   411,  1102,
6928:      767,   768,  1103,  1104,   414,   415,   769,   417,   770,  1105,
6929:      419,   420,   771,   422,   423,   424,   425,   426,  1106,  1107,
6930:      427,   428,   429,   430,   431,  1108,  1109,   432,   433,   434,
6931:      435,   436,  1110,   773,  1111,   439,     0,   441,   442,   443,
6932:      444,  1112,  1113,   445,  1114,  1115,   446,   447,   448,   449,
6933:      450,   451,   774,   775,   776,   777,   778,   779,   780,   781,
6934:      782,   783,   784,   463,   464,   465,   466,    91,     0,     0,
6935:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6936:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
6937:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
6938:        0,     0,   103,   104,     0,   105,   106,   107,   108,   109,
6939:      110,   111,   112,   113,   114,   115,   116,     0,   117,   118,
6940:      119,   120,   121,   122,     0,   814,   123,   124,   125,   126,
6941:      127,     0,   128,   129,   130,   131,   817,     0,   818,     0,
6942:      134,   135,   136,   137,   138,   139,   140,   141,   142,     0,
6943:      143,   144,   145,   146,   147,   148,     0,   149,   150,   151,
6944:      152,   819,   820,   821,   822,   823,   824,   825,   154,   155,
6945:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
6946:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
6947:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
6948:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
6949:      188,   189,   190,   191,   192,   193,   194,   195,   830,     0,
6950:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
6951:      204,     0,   205,   206,   207,   208,   209,   210,     0,   211,
6952:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
6953:      220,   221,   222,   223,   224,     0,   225,   226,   227,   228,
6954:      229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
6955:      238,   239,     0,   240,     0,   241,   242,   243,   244,   245,
6956:      246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
6957:      254,     0,   255,   256,   257,   836,   837,   258,   259,   260,
6958:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
6959:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
6960:      281,   282,   283,   284,   285,   286,   287,   288,     0,   289,
6961:      290,   291,   292,     0,   842,   294,   295,   296,   297,   298,
6962:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
6963:      304,   305,   306,   307,   308,   845,   310,   311,   312,   313,
6964:      314,   315,   316,   317,   318,   319,     0,   320,   321,   846,
6965:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
6966:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
6967:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
6968:      351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
6969:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
6970:      370,   371,   372,     0,   373,   374,   375,   376,   377,   849,
6971:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
6972:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
6973:      397,   398,   399,   400,   851,   402,     0,   403,   404,     0,
6974:      405,   406,   407,   408,   409,   410,   411,     0,   412,   413,
6975:        0,     0,   414,   415,   854,   417,   855,     0,   419,   420,
6976:      857,   422,   423,   424,   425,   426,     0,     0,   427,   428,
6977:      429,   430,   431,   858,     0,   432,   433,   434,   435,   436,
6978:      437,   438,     0,   439,   440,   441,   442,   443,   444,     0,
6979:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
6980:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
6981:      462,   463,   464,   465,   466,    91,     0,     0,     0,     0,
6982:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6983:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
6984:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
6985:      103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
6986:      112,   113,   114,   115,   116,     0,   117,   118,   119,   120,
6987:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
6988:      128,   129,   130,   131,   132,     0,   133,     0,   134,   135,
6989:      136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
6990:      145,   146,   147,   148,     0,   149,   150,   151,   152,     0,
6991:        0,     0,   153,     0,     0,     0,   154,   155,   156,   157,
6992:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
6993:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
6994:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
6995:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
6996:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
6997:      198,   199,   200,   201,     0,   202,     0,   203,   204,     0,
6998:      205,   206,   207,   208,   209,   210,     0,   211,     0,   212,
6999:      213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
7000:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
7001:        0,   231,   232,   233,   234,   235,   236,   237,   238,   239,
7002:        0,   240,     0,   241,   242,   243,   244,   245,   246,   247,
7003:      248,   249,   250,     0,     0,   251,   252,   253,   254,     0,
7004:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
7005:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7006:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7007:      283,   284,   285,   286,   287,   288,     0,   289,   290,   291,
7008:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
7009:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
7010:      306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
7011:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
7012:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
7013:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
7014:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7015:      353,   354,     0,   355,   356,   357,   358,   359,   360,   361,
7016:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
7017:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
7018:      380,   381,   382,   383,   384,   385,   386,   387,     0,   388,
7019:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
7020:      399,   400,   401,   402,     0,   403,   404,     0,   405,   406,
7021:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
7022:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
7023:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
7024:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
7025:        0,   439,   440,   441,   442,   443,   444,     0,     0,   445,
7026:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
7027:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7028:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
7029:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
7030:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
7031:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
7032:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
7033:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
7034:        0,     0,   123,   124,   125,   126,   127,  1409,   128,   129,
7035:      130,   131,   132,     0,     0,  1410,   134,   135,   136,   137,
7036:      138,     0,   140,   141,   142,  1411,   143,   144,   145,   146,
7037:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
7038:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
7039:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
7040:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
7041:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
7042:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
7043:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
7044:      200,   201,     0,   202,  1412,   203,     0,     0,     0,   206,
7045:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
7046:      214,   215,   216,   217,   218,  1413,     0,   221,   222,   223,
7047:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
7048:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
7049:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
7050:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
7051:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
7052:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7053:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
7054:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
7055:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
7056:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
7057:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7058:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
7059:      327,   328,  1414,   329,   330,   331,   332,   333,   334,   335,
7060:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
7061:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
7062:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
7063:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
7064:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
7065:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
7066:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
7067:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
7068:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
7069:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
7070:      425,   426,     0,  1415,   427,   428,   429,   430,   431,     0,
7071:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
7072:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
7073:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7074:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
7075:      466,   492,     0,     0,     0,     0,     0,     0,     0,     0,
7076:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
7077:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
7078:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
7079:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
7080:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
7081:      123,   124,   125,   126,   127,  1409,   128,   129,   130,   131,
7082:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
7083:      140,   141,   142,  1411,   143,   144,   145,   146,   147,   148,
7084:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
7085:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
7086:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
7087:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
7088:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
7089:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
7090:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
7091:        0,   202,  1412,   203,     0,     0,     0,   206,   207,   208,
7092:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
7093:      216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
7094:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
7095:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
7096:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
7097:        0,   251,     0,   253,  1858,     0,   255,   256,   257,     0,
7098:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
7099:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7100:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
7101:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
7102:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
7103:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
7104:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
7105:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
7106:     1414,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7107:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
7108:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
7109:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
7110:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
7111:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
7112:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
7113:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
7114:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
7115:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
7116:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
7117:        0,  1415,   427,   428,   429,   430,   431,     0,     0,   432,
7118:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
7119:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
7120:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
7121:      458,   459,   460,   461,   462,   463,   464,   465,   466,   733,
7122:        0,   540,     0,     0,     0,     0,     0,     0,     0,     0,
7123:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
7124:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
7125:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
7126:        0,   109,   110,   111,   734,   735,     0,   736,   737,     0,
7127:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
7128:      738,   739,   127,     0,   128,   129,   130,   131,   740,     0,
7129:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
7130:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
7131:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
7132:      154,   155,   156,   157,   158,   159,   160,   741,   742,   163,
7133:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
7134:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
7135:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
7136:        0,   187,   188,   189,   190,   743,   192,   193,   194,   195,
7137:      744,  1218,   197,     0,   198,   199,   745,   201,     0,   202,
7138:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
7139:        0,   211,     0,   746,   213,     0,   214,   215,   216,   217,
7140:      218,   219,     0,   221,   222,   223,   224,     0,   225,   226,
7141:      227,   228,   229,   230,     0,   231,     0,   747,   234,   235,
7142:      236,   237,   748,   749,     0,   750,     0,   241,     0,     0,
7143:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
7144:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
7145:      259,   260,   261,   262,   751,   264,   265,   266,   267,   268,
7146:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7147:      279,   280,   281,   752,     0,   753,   285,   286,   287,   754,
7148:        0,   289,   290,     0,   292,     0,   755,   294,   756,   296,
7149:      297,   298,     0,   299,   300,  1219,     0,   301,   302,   303,
7150:        0,     0,   304,   757,     0,   307,     0,   758,   310,   311,
7151:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
7152:      321,   759,   323,   324,   760,   326,   327,   328,     0,   329,
7153:      330,   331,   332,   333,   334,   335,   336,   337,   761,   339,
7154:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
7155:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
7156:      358,   359,   360,   762,   362,   363,   364,   365,   366,   367,
7157:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
7158:      377,     0,   378,   763,   380,   381,   382,     0,   384,   385,
7159:      764,   387,     0,   388,   389,   390,   391,   392,   393,   394,
7160:      395,   396,   397,   398,   765,   400,   766,   402,     0,   403,
7161:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
7162:      767,   768,     0,     0,   414,   415,   769,   417,   770,  1220,
7163:      419,   420,   771,   422,   423,   424,   425,   426,     0,     0,
7164:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
7165:      435,   436,  1110,   773,     0,   439,     0,   441,   442,   443,
7166:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
7167:      450,   451,   774,   775,   776,   777,   778,   779,   780,   781,
7168:      782,   783,   784,   463,   464,   465,   466,   492,     0,   570,
7169:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7170:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
7171:       99,     0,   100,   101,   102,     3,     4,     0,     0,     0,
7172:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
7173:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
7174:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
7175:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
7176:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
7177:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
7178:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
7179:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
7180:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
7181:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
7182:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
7183:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
7184:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
7185:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
7186:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
7187:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
7188:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
7189:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
7190:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
7191:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
7192:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
7193:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7194:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
7195:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
7196:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
7197:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
7198:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
7199:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
7200:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
7201:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
7202:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
7203:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7204:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
7205:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
7206:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7207:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
7208:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
7209:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
7210:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
7211:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
7212:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
7213:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
7214:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7215:      462,   463,   464,   465,   466,   492,     0,   570,     0,     0,
7216:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7217:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
7218:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
7219:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
7220:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
7221:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
7222:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
7223:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
7224:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
7225:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
7226:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
7227:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
7228:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
7229:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
7230:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
7231:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
7232:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
7233:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
7234:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
7235:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
7236:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
7237:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
7238:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
7239:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7240:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7241:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
7242:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
7243:      300,     0,   571,   301,   302,   303,     0,     0,   304,   305,
7244:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
7245:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
7246:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
7247:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
7248:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7249:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
7250:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
7251:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
7252:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
7253:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
7254:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
7255:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
7256:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
7257:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
7258:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
7259:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
7260:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
7261:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7262:      464,   465,   466,   492,     0,   570,     0,     0,     0,     0,
7263:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
7264:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
7265:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
7266:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
7267:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
7268:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
7269:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
7270:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
7271:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
7272:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
7273:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
7274:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
7275:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
7276:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
7277:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
7278:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
7279:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
7280:      214,   215,   216,   217,   218,   614,     0,   221,   222,   223,
7281:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
7282:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
7283:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
7284:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
7285:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
7286:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7287:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
7288:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
7289:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
7290:      571,   301,   302,   303,     0,     0,   304,   305,     0,   307,
7291:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7292:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
7293:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
7294:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
7295:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
7296:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
7297:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
7298:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
7299:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
7300:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
7301:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
7302:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
7303:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
7304:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
7305:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
7306:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
7307:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7308:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
7309:      466,   733,     0,     0,     0,     0,     0,     0,     0,     0,
7310:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
7311:       95,    96,    97,    98,    99,     0,   100,   101,   102,     3,
7312:        4,     0,     0,     0,     0,     0,   103,   104,     0,   105,
7313:      106,   107,     0,   109,   110,   111,   734,   735,     0,   736,
7314:      737,     0,   117,   118,   119,   120,   121,   122,     0,     0,
7315:      123,   124,   738,   739,   127,     0,   128,   129,   130,   131,
7316:      740,     0,     0,     0,   134,   135,   136,   137,   138,     0,
7317:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
7318:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
7319:        0,     0,   154,   155,   156,   157,   158,   159,   160,   741,
7320:      742,   163,     0,   164,     0,   165,   166,   167,   168,   169,
7321:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
7322:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
7323:      185,   186,     0,   187,   188,   189,   190,   743,   192,   193,
7324:      194,   195,   744,     0,   197,     0,   198,   199,   745,   201,
7325:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
7326:        0,   210,     0,   211,     0,   746,   213,     0,   214,   215,
7327:      216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
7328:      225,   226,   227,   228,   229,   230,     0,   231,     0,   747,
7329:      234,   235,   236,   237,   748,   749,     0,   750,     0,   241,
7330:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
7331:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
7332:        0,   258,   259,   260,   261,   262,   751,   264,   265,   266,
7333:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7334:      277,   278,   279,   280,   281,   752,     0,   753,   285,   286,
7335:      287,   754,     0,   289,   290,     0,   292,     0,   755,   294,
7336:      756,   296,   297,   298,     0,   299,   300,     0,     0,   301,
7337:      302,   303,     0,     0,   304,   757,     0,   307,     0,   758,
7338:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
7339:        0,   320,   321,   759,   323,   324,   760,   326,   327,   328,
7340:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7341:      761,   339,   340,   341,   342,     0,   343,   344,   345,   346,
7342:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
7343:      356,     0,   358,   359,   360,   762,   362,   363,   364,   365,
7344:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
7345:      375,   376,   377,     0,   378,   763,   380,   381,   382,     0,
7346:      384,   385,   764,   387,     0,   388,   389,   390,   391,   392,
7347:      393,   394,   395,   396,   397,   398,   765,   400,   766,   402,
7348:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
7349:      411,     0,   767,   768,     0,     0,   414,   415,   769,   417,
7350:      770,     0,   419,   420,   771,   422,   423,   424,   425,   426,
7351:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
7352:      433,   434,   435,   436,  1110,   773,     0,   439,     0,   441,
7353:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
7354:      448,   449,   450,   451,   774,   775,   776,   777,   778,   779,
7355:      780,   781,   782,   783,   784,   463,   464,   465,   466,   492,
7356:        0,   570,     0,     0,     0,     0,     0,     0,     0,     0,
7357:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
7358:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
7359:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
7360:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
7361:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
7362:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
7363:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
7364:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
7365:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
7366:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
7367:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
7368:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
7369:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
7370:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
7371:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
7372:        0,   203,     0,     0,     0,   206,   207,   208,     0,  1705,
7373:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
7374:      218,   219,     0,   221,   222,   223,   224,     0,   225,   226,
7375:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
7376:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
7377:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
7378:        0,   253,     0,     0,   255,   256,  1706,     0,     0,   258,
7379:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
7380:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7381:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
7382:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
7383:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
7384:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
7385:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
7386:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
7387:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
7388:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
7389:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
7390:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
7391:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
7392:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
7393:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
7394:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
7395:      404,  1707,   405,     0,   407,  1708,   409,  1709,   411,     0,
7396:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
7397:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
7398:      427,   428,  1710,   430,   431,     0,     0,   432,   433,   434,
7399:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
7400:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
7401:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
7402:      460,   461,   462,   463,   464,   465,   466,   492,  2619,     0,
7403:        0,     0,     0,  2620,     0,     0,     0,     0,     0,     0,
7404:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
7405:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
7406:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
7407:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
7408:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
7409:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
7410:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
7411:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
7412:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
7413:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
7414:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
7415:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
7416:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
7417:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
7418:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
7419:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
7420:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
7421:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
7422:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
7423:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
7424:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
7425:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
7426:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
7427:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7428:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
7429:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
7430:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
7431:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
7432:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
7433:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
7434:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
7435:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
7436:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
7437:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7438:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
7439:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
7440:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7441:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
7442:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
7443:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
7444:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
7445:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
7446:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
7447:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
7448:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7449:      462,   463,   464,   465,   466,   492,     0,     0,     0,     0,
7450:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7451:        0,    92,    93,    94,    95,    96,    97,    98,    99,   493,
7452:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
7453:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
7454:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
7455:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
7456:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
7457:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
7458:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
7459:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
7460:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
7461:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
7462:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
7463:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
7464:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
7465:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
7466:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
7467:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
7468:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
7469:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
7470:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
7471:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
7472:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
7473:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7474:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7475:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
7476:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
7477:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
7478:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
7479:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
7480:      325,   495,   327,   328,     0,   329,   330,   331,   332,   333,
7481:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
7482:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7483:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
7484:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
7485:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
7486:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
7487:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
7488:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
7489:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
7490:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
7491:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
7492:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
7493:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
7494:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
7495:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7496:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
7497:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
7498:       93,    94,    95,    96,    97,    98,    99,   545,   100,   101,
7499:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
7500:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
7501:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
7502:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
7503:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
7504:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
7505:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
7506:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
7507:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
7508:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
7509:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
7510:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
7511:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
7512:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
7513:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
7514:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
7515:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
7516:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
7517:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
7518:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
7519:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
7520:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7521:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
7522:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
7523:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
7524:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
7525:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7526:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
7527:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
7528:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
7529:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
7530:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
7531:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
7532:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
7533:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
7534:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
7535:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
7536:      409,   410,   411,     0,   546,   413,     0,     0,   547,   415,
7537:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
7538:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
7539:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
7540:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
7541:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7542:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
7543:      466,   492,     0,   570,     0,     0,     0,     0,     0,     0,
7544:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
7545:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
7546:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
7547:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
7548:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
7549:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
7550:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
7551:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
7552:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
7553:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
7554:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
7555:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
7556:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
7557:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
7558:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
7559:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
7560:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
7561:      216,   217,   218,   609,     0,   221,   222,   223,   224,     0,
7562:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
7563:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
7564:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
7565:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
7566:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
7567:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7568:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
7569:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
7570:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
7571:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
7572:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
7573:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
7574:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7575:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
7576:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
7577:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
7578:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
7579:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
7580:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
7581:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
7582:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
7583:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
7584:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
7585:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
7586:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
7587:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
7588:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
7589:      458,   459,   460,   461,   462,   463,   464,   465,   466,   492,
7590:        0,   570,     0,     0,     0,     0,     0,     0,     0,     0,
7591:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
7592:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
7593:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
7594:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
7595:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
7596:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
7597:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
7598:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
7599:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
7600:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
7601:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
7602:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
7603:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
7604:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
7605:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
7606:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
7607:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
7608:      218,   612,     0,   221,   222,   223,   224,     0,   225,   226,
7609:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
7610:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
7611:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
7612:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
7613:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
7614:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7615:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
7616:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
7617:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
7618:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
7619:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
7620:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
7621:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
7622:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
7623:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
7624:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
7625:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
7626:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
7627:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
7628:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
7629:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
7630:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
7631:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
7632:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
7633:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
7634:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
7635:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
7636:      460,   461,   462,   463,   464,   465,   466,   492,     0,   570,
7637:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7638:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
7639:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
7640:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
7641:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
7642:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
7643:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
7644:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
7645:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
7646:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
7647:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
7648:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
7649:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
7650:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
7651:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
7652:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
7653:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
7654:        0,   212,   213,     0,   214,   215,   216,   217,   218,   616,
7655:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
7656:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
7657:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
7658:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
7659:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
7660:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
7661:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7662:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
7663:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
7664:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
7665:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
7666:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
7667:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
7668:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
7669:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
7670:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
7671:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7672:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
7673:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
7674:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7675:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
7676:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
7677:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
7678:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
7679:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
7680:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
7681:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
7682:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7683:      462,   463,   464,   465,   466,   492,     0,   570,     0,     0,
7684:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7685:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
7686:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
7687:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
7688:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
7689:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
7690:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
7691:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
7692:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
7693:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
7694:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
7695:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
7696:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
7697:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
7698:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
7699:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
7700:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
7701:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
7702:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
7703:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
7704:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
7705:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
7706:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
7707:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7708:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7709:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
7710:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
7711:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
7712:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
7713:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
7714:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
7715:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
7716:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7717:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
7718:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
7719:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
7720:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
7721:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
7722:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
7723:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
7724:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
7725:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
7726:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
7727:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
7728:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
7729:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7730:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
7731:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
7732:       93,    94,    95,    96,    97,    98,    99,   644,   100,   101,
7733:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
7734:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
7735:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
7736:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
7737:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
7738:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
7739:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
7740:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
7741:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
7742:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
7743:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
7744:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
7745:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
7746:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
7747:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
7748:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
7749:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
7750:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
7751:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
7752:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
7753:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
7754:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7755:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
7756:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
7757:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
7758:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
7759:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7760:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
7761:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
7762:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
7763:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
7764:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
7765:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
7766:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
7767:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
7768:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
7769:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
7770:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
7771:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
7772:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
7773:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
7774:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
7775:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
7776:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
7777:      466,   492,     0,   570,     0,     0,     0,     0,     0,     0,
7778:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
7779:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
7780:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
7781:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
7782:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
7783:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
7784:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
7785:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
7786:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
7787:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
7788:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
7789:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
7790:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
7791:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
7792:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
7793:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
7794:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
7795:      216,   217,   218,  1132,     0,   221,   222,   223,   224,     0,
7796:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
7797:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
7798:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
7799:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
7800:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
7801:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
7802:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
7803:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
7804:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
7805:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
7806:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
7807:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
7808:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
7809:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
7810:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
7811:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
7812:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
7813:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
7814:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
7815:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
7816:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
7817:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
7818:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
7819:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
7820:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
7821:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
7822:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
7823:      458,   459,   460,   461,   462,   463,   464,   465,   466,   492,
7824:        0,   570,     0,     0,     0,     0,     0,     0,     0,     0,
7825:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
7826:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
7827:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
7828:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
7829:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
7830:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
7831:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
7832:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
7833:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
7834:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
7835:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
7836:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
7837:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
7838:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
7839:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
7840:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
7841:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
7842:      218,  1134,     0,   221,   222,   223,   224,     0,   225,   226,
7843:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
7844:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
7845:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
7846:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
7847:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
7848:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
7849:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
7850:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
7851:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
7852:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
7853:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
7854:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
7855:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
7856:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
7857:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
7858:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
7859:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
7860:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
7861:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
7862:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
7863:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
7864:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
7865:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
7866:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
7867:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
7868:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
7869:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
7870:      460,   461,   462,   463,   464,   465,   466,   492,     0,   570,
7871:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7872:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
7873:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
7874:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
7875:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
7876:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
7877:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
7878:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
7879:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
7880:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
7881:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
7882:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
7883:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
7884:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
7885:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
7886:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
7887:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
7888:        0,   212,   213,     0,   214,   215,   216,   217,   218,  1538,
7889:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
7890:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
7891:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
7892:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
7893:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
7894:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
7895:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
7896:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
7897:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
7898:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
7899:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
7900:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
7901:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
7902:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
7903:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
7904:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
7905:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
7906:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
7907:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
7908:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
7909:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
7910:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
7911:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
7912:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
7913:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
7914:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
7915:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
7916:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
7917:      462,   463,   464,   465,   466,   492,     0,     0,     0,     0,
7918:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7919:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
7920:      100,   101,   102,     0,     0,     0,     0,     0,  2274,     0,
7921:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
7922:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
7923:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
7924:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
7925:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
7926:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
7927:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
7928:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
7929:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
7930:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
7931:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
7932:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
7933:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
7934:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
7935:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
7936:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
7937:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
7938:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
7939:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
7940:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
7941:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
7942:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7943:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
7944:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
7945:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
7946:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
7947:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
7948:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
7949:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
7950:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
7951:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
7952:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
7953:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
7954:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
7955:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
7956:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
7957:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
7958:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
7959:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
7960:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
7961:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
7962:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
7963:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
7964:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
7965:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
7966:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
7967:      102,     0,     0,     0,     0,     0,  2288,     0,   103,   104,
7968:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
7969:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
7970:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
7971:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
7972:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
7973:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
7974:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
7975:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
7976:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
7977:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
7978:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
7979:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
7980:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
7981:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
7982:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
7983:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
7984:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
7985:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
7986:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
7987:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
7988:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
7989:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
7990:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
7991:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
7992:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
7993:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
7994:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
7995:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
7996:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
7997:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
7998:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
7999:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
8000:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
8001:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
8002:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
8003:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
8004:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
8005:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
8006:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
8007:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
8008:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
8009:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
8010:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
8011:      466,   492,     0,   570,     0,     0,     0,     0,     0,     0,
8012:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
8013:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
8014:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
8015:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
8016:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
8017:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
8018:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
8019:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
8020:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
8021:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
8022:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
8023:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
8024:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
8025:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
8026:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
8027:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
8028:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
8029:      216,   217,   218,  2418,     0,   221,   222,   223,   224,     0,
8030:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
8031:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
8032:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
8033:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
8034:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
8035:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
8036:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
8037:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
8038:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
8039:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
8040:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
8041:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
8042:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
8043:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
8044:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
8045:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
8046:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
8047:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
8048:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
8049:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
8050:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
8051:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
8052:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
8053:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
8054:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
8055:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
8056:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
8057:      458,   459,   460,   461,   462,   463,   464,   465,   466,   492,
8058:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8059:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
8060:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
8061:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
8062:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
8063:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
8064:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
8065:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
8066:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
8067:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
8068:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
8069:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
8070:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
8071:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
8072:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
8073:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
8074:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
8075:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
8076:      218,   219,     0,   221,   222,   223,   224,     0,   225,   226,
8077:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
8078:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
8079:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
8080:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
8081:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
8082:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8083:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
8084:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
8085:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
8086:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
8087:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
8088:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
8089:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
8090:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
8091:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
8092:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
8093:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
8094:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
8095:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
8096:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
8097:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
8098:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
8099:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
8100:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
8101:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
8102:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
8103:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
8104:      460,   461,   462,   463,   464,   465,   466,   492,     0,     0,
8105:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8106:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
8107:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
8108:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
8109:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
8110:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
8111:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
8112:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
8113:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
8114:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
8115:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
8116:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
8117:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
8118:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
8119:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
8120:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
8121:        0,     0,     0,   206,   207,   208,     0,   557,     0,   211,
8122:        0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
8123:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
8124:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
8125:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
8126:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
8127:        0,     0,   255,   256,   558,     0,     0,   258,   259,   260,
8128:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
8129:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
8130:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
8131:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
8132:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
8133:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
8134:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
8135:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
8136:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
8137:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
8138:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
8139:      360,   361,   362,   363,   364,   365,   559,   367,   368,   369,
8140:      370,   371,   372,     0,   373,   374,   375,   376,   560,     0,
8141:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
8142:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8143:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
8144:      405,     0,   407,   408,   409,   410,   411,     0,   561,   413,
8145:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
8146:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
8147:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
8148:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
8149:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
8150:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
8151:      462,   463,   464,   465,   466,   492,     0,     0,     0,     0,
8152:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8153:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
8154:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
8155:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
8156:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
8157:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
8158:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
8159:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
8160:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
8161:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
8162:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
8163:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
8164:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
8165:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
8166:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
8167:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
8168:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
8169:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
8170:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
8171:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
8172:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
8173:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
8174:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
8175:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
8176:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8177:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
8178:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
8179:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
8180:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
8181:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
8182:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
8183:      334,   335,   336,   337,   338,   339,   340,   580,   342,     0,
8184:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
8185:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
8186:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
8187:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
8188:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
8189:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
8190:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
8191:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
8192:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
8193:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
8194:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
8195:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
8196:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
8197:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
8198:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
8199:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
8200:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
8201:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
8202:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
8203:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
8204:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
8205:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
8206:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
8207:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
8208:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
8209:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
8210:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
8211:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
8212:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
8213:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
8214:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
8215:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
8216:      214,   215,   216,   217,   218,   634,     0,   221,   222,   223,
8217:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
8218:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
8219:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
8220:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
8221:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
8222:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
8223:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
8224:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
8225:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
8226:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
8227:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
8228:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
8229:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
8230:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
8231:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
8232:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
8233:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
8234:      373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
8235:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
8236:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
8237:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
8238:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
8239:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
8240:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
8241:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
8242:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
8243:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
8244:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
8245:      466,   492,     0,     0,     0,     0,     0,     0,     0,     0,
8246:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
8247:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
8248:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
8249:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
8250:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
8251:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
8252:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
8253:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
8254:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
8255:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
8256:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
8257:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
8258:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
8259:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
8260:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
8261:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
8262:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
8263:      216,   217,   218,   721,     0,   221,   222,   223,   224,     0,
8264:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
8265:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
8266:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
8267:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
8268:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
8269:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
8270:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
8271:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
8272:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
8273:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
8274:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
8275:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
8276:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
8277:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
8278:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
8279:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
8280:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
8281:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
8282:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
8283:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
8284:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
8285:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
8286:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
8287:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
8288:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
8289:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
8290:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
8291:      458,   459,   460,   461,   462,   463,   464,   465,   466,   492,
8292:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8293:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
8294:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
8295:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
8296:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
8297:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
8298:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
8299:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
8300:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
8301:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
8302:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
8303:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
8304:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
8305:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
8306:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
8307:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
8308:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
8309:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
8310:      218,   724,     0,   221,   222,   223,   224,     0,   225,   226,
8311:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
8312:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
8313:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
8314:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
8315:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
8316:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8317:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
8318:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
8319:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
8320:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
8321:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
8322:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
8323:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
8324:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
8325:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
8326:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
8327:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
8328:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
8329:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
8330:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
8331:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
8332:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
8333:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
8334:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
8335:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
8336:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
8337:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
8338:      460,   461,   462,   463,   464,   465,   466,   492,     0,     0,
8339:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8340:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
8341:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
8342:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
8343:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
8344:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
8345:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
8346:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
8347:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
8348:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
8349:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
8350:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
8351:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
8352:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
8353:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
8354:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
8355:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
8356:        0,   212,   213,     0,   214,   215,   216,   217,   218,   727,
8357:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
8358:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
8359:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
8360:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
8361:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
8362:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
8363:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
8364:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
8365:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
8366:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
8367:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
8368:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
8369:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
8370:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
8371:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
8372:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
8373:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
8374:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
8375:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
8376:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8377:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
8378:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
8379:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
8380:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
8381:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
8382:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
8383:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
8384:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
8385:      462,   463,   464,   465,   466,   492,     0,     0,     0,     0,
8386:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8387:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
8388:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
8389:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
8390:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
8391:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
8392:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
8393:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
8394:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
8395:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
8396:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
8397:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
8398:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
8399:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
8400:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
8401:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
8402:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
8403:      213,     0,   214,   215,   216,   217,   218,   219,     0,   221,
8404:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
8405:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
8406:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
8407:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
8408:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
8409:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
8410:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8411:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
8412:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
8413:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
8414:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
8415:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
8416:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
8417:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
8418:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
8419:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
8420:      362,   363,   364,   365,   559,   367,   368,   369,   370,   371,
8421:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
8422:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
8423:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
8424:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
8425:      407,   408,   409,   410,   411,     0,   561,   413,     0,     0,
8426:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
8427:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
8428:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
8429:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
8430:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
8431:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
8432:      464,   465,   466,   492,     0,     0,     0,     0,     0,     0,
8433:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
8434:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
8435:      102,     0,     0,     0,     0,     0,  1367,     0,   103,   104,
8436:        0,   105,   106,   107,     0,   109,   110,   111,   112,   113,
8437:        0,   115,   116,     0,   117,   118,   119,   120,   121,   122,
8438:        0,     0,   123,   124,   125,   126,   127,     0,   128,   129,
8439:      130,   131,   132,     0,     0,     0,   134,   135,   136,   137,
8440:      138,     0,   140,   141,   142,     0,   143,   144,   145,   146,
8441:      147,   148,     0,     0,   150,   151,   152,     0,     0,     0,
8442:        0,     0,     0,     0,   154,   155,   156,   157,   158,   159,
8443:      160,   161,   162,   163,     0,   164,     0,   165,   166,   167,
8444:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
8445:        0,   176,   177,   178,   179,   180,     0,   181,   182,   183,
8446:        0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
8447:      192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
8448:      200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
8449:      207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
8450:      214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
8451:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
8452:        0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
8453:        0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
8454:      250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
8455:      257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
8456:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
8457:      275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
8458:      285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
8459:      293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
8460:        0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
8461:        0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
8462:      318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
8463:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
8464:      336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
8465:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
8466:        0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
8467:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
8468:      373,   374,   375,   376,   377,     0,     0,   379,   380,   381,
8469:      382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
8470:      391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
8471:      401,   402,     0,   403,   404,     0,   405,     0,   407,   408,
8472:      409,   410,   411,     0,   412,   413,     0,     0,   414,   415,
8473:      416,   417,   418,     0,   419,   420,   421,   422,   423,   424,
8474:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
8475:        0,   432,   433,   434,   435,   436,   437,   438,     0,   439,
8476:        0,   441,   442,   443,   444,     0,     0,   445,     0,     0,
8477:      446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
8478:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
8479:      466,   492,     0,     0,     0,     0,     0,     0,     0,     0,
8480:        0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
8481:       95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
8482:        0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
8483:      106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
8484:      116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
8485:      123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
8486:      132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
8487:      140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
8488:        0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
8489:        0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
8490:      162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
8491:      170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
8492:      177,   178,   179,   180,     0,   181,   182,   183,     0,   184,
8493:      185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
8494:      194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
8495:        0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
8496:        0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
8497:      216,   217,   218,  1503,     0,   221,   222,   223,   224,     0,
8498:      225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
8499:      234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
8500:        0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
8501:        0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
8502:        0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
8503:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
8504:      277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
8505:      287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
8506:      295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
8507:      302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
8508:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
8509:        0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
8510:        0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
8511:      338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
8512:      347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
8513:      356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
8514:      366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
8515:      375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
8516:      384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
8517:      393,   394,   395,   396,   397,   398,   496,   400,   401,   402,
8518:        0,   403,   404,     0,   405,     0,   407,   408,   409,   410,
8519:      411,     0,   412,   413,     0,     0,   414,   415,   416,   417,
8520:      418,     0,   419,   420,   421,   422,   423,   424,   425,   426,
8521:        0,     0,   427,   428,   429,   430,   431,     0,     0,   432,
8522:      433,   434,   435,   436,   437,   438,     0,   439,     0,   441,
8523:      442,   443,   444,     0,     0,   445,     0,     0,   446,   447,
8524:      448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
8525:      458,   459,   460,   461,   462,   463,   464,   465,   466,   492,
8526:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8527:        0,     0,     0,     0,     0,    92,    93,    94,    95,    96,
8528:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
8529:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
8530:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
8531:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
8532:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
8533:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
8534:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
8535:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
8536:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
8537:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
8538:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
8539:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
8540:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
8541:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
8542:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
8543:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
8544:      218,  1777,     0,   221,   222,   223,   224,     0,   225,   226,
8545:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
8546:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
8547:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
8548:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
8549:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
8550:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8551:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
8552:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
8553:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
8554:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
8555:      312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
8556:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
8557:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
8558:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
8559:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
8560:      358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
8561:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
8562:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
8563:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
8564:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
8565:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
8566:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
8567:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
8568:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
8569:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
8570:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
8571:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
8572:      460,   461,   462,   463,   464,   465,   466,   492,     0,     0,
8573:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8574:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
8575:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
8576:        0,     0,   103,   104,     0,   105,   106,   107,     0,   109,
8577:      110,   111,   112,   113,     0,   115,   116,     0,   117,   118,
8578:      119,   120,   121,   122,     0,     0,   123,   124,   125,   126,
8579:      127,     0,   128,   129,   130,   131,   132,     0,     0,     0,
8580:      134,   135,   136,   137,   138,     0,   140,   141,   142,     0,
8581:      143,   144,   145,   146,   147,   148,     0,     0,   150,   151,
8582:      152,     0,     0,     0,     0,     0,     0,     0,   154,   155,
8583:      156,   157,   158,   159,   160,   161,   162,   163,     0,   164,
8584:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
8585:      173,   174,   175,     0,     0,   176,   177,   178,   179,   180,
8586:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
8587:      188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
8588:      197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
8589:        0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
8590:        0,   212,   213,     0,   214,   215,   216,   217,   218,  1789,
8591:        0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
8592:      229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
8593:      238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
8594:      246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
8595:        0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
8596:      261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
8597:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
8598:      281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
8599:      290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
8600:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
8601:      304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
8602:      314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
8603:      323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
8604:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
8605:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
8606:      351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
8607:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
8608:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
8609:      378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
8610:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8611:      397,   398,   496,   400,   401,   402,     0,   403,   404,     0,
8612:      405,     0,   407,   408,   409,   410,   411,     0,   412,   413,
8613:        0,     0,   414,   415,   416,   417,   418,     0,   419,   420,
8614:      421,   422,   423,   424,   425,   426,     0,     0,   427,   428,
8615:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
8616:      437,   438,     0,   439,     0,   441,   442,   443,   444,     0,
8617:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
8618:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
8619:      462,   463,   464,   465,   466,   492,     0,     0,     0,     0,
8620:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8621:        0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
8622:      100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
8623:      103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
8624:      112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
8625:      121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
8626:      128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
8627:      136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
8628:      145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
8629:        0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
8630:      158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
8631:      166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
8632:      175,     0,     0,   176,   177,   178,   179,   180,     0,   181,
8633:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
8634:      190,   191,   192,   193,   194,   195,   196,     0,   197,     0,
8635:      198,   199,   200,   201,     0,   202,     0,   203,     0,     0,
8636:        0,   206,   207,   208,     0,   210,     0,   211,     0,   212,
8637:      213,     0,   214,   215,   216,   217,   218,  1791,     0,   221,
8638:      222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
8639:        0,   231,     0,   233,   234,   235,   236,   237,   238,   239,
8640:        0,   240,     0,   241,     0,     0,   244,     0,   246,   247,
8641:      248,   249,   250,     0,     0,   251,     0,   253,     0,     0,
8642:      255,   256,   257,     0,     0,   258,   259,   260,   261,   262,
8643:      494,   264,   265,   266,   267,   268,   269,   270,   271,   272,
8644:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8645:        0,   284,   285,   286,   287,   288,     0,   289,   290,     0,
8646:      292,     0,   293,   294,   295,   296,   297,   298,     0,   299,
8647:      300,     0,     0,   301,   302,   303,     0,     0,   304,   305,
8648:        0,   307,     0,   309,   310,   311,   312,   313,   314,   315,
8649:      316,   317,   318,   319,     0,   320,   321,   322,   323,   324,
8650:      325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
8651:      334,   335,   336,   337,   338,   339,   340,   341,   342,     0,
8652:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
8653:      353,   354,     0,   355,   356,     0,   358,   359,   360,   361,
8654:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
8655:      372,     0,   373,   374,   375,   376,   377,     0,   378,   379,
8656:      380,   381,   382,     0,   384,   385,   386,   387,     0,   388,
8657:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
8658:      496,   400,   401,   402,     0,   403,   404,     0,   405,     0,
8659:      407,   408,   409,   410,   411,     0,   412,   413,     0,     0,
8660:      414,   415,   416,   417,   418,     0,   419,   420,   421,   422,
8661:      423,   424,   425,   426,     0,     0,   427,   428,   429,   430,
8662:      431,     0,     0,   432,   433,   434,   435,   436,   437,   438,
8663:        0,   439,     0,   441,   442,   443,   444,     0,     0,   445,
8664:        0,     0,   446,   447,   448,   449,   450,   451,   452,   453,
8665:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
8666:      464,   465,   466,   652,     0,     0,     0,     0,     0,     0,
8667:        0,     0,     0,     0,     0,     0,     0,     0,     0,    92,
8668:       93,    94,    95,    96,    97,    98,    99,     0,   100,   101,
8669:      102,     0,     0,     0,     0,     0,     0,     0,   103,   104,
8670:        0,   105,   106,   107,   653,   109,   110,   111,     0,   654,
8671:      655,   656,   657,     0,   117,   118,   119,   120,   121,   122,
8672:        0,     0,   123,   124,   658,   659,   127,     0,   128,   129,
8673:      130,   131,     0,     0,   660,     0,   134,   135,   136,   137,
8674:      138,   661,   140,   141,   142,     0,   143,   144,   145,   146,
8675:      147,   148,     0,   662,   150,   151,   152,     0,     0,     0,
8676:      663,     0,     0,     0,   154,   155,   156,   157,   158,   159,
8677:      160,   664,   665,   163,     0,   164,     0,   165,   166,   167,
8678:      168,   169,   170,     0,   171,   172,   173,   174,   175,     0,
8679:        0,   176,   177,   666,   179,   180,     0,   181,   182,   183,
8680:        0,   184,   185,   186,     0,   187,   188,   189,   190,     0,
8681:      192,   193,   194,   195,     0,     0,   197,     0,   198,   199,
8682:      667,   201,     0,   202,     0,   203,   668,     0,   669,   206,
8683:      207,   208,   670,   210,     0,   211,     0,     0,   213,     0,
8684:      214,   215,   216,   217,   218,   671,   672,   221,   222,   223,
8685:      224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
8686:      673,     0,   234,   235,   236,   237,   674,   675,     0,   676,
8687:        0,   241,   677,   678,   244,   679,   246,   247,   248,   249,
8688:      250,     0,     0,   251,   680,   253,   681,     0,   255,   256,
8689:      257,     0,     0,   258,   259,   260,   261,   262,   682,   264,
8690:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
8691:      275,   276,   277,   278,   279,   280,   281,   683,   684,   685,
8692:      285,   286,   287,     0,     0,   289,   290,   686,   292,     0,
8693:        0,   294,   687,   296,   297,   298,     0,   299,   300,     0,
8694:        0,   301,   302,   303,     0,     0,   304,     0,   688,   307,
8695:      689,     0,   310,   311,   312,   313,   314,   315,   316,   317,
8696:      318,   319,     0,   320,   321,     0,   323,   324,     0,   326,
8697:      327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
8698:      336,   337,   690,   339,   340,   341,   342,     0,   343,   344,
8699:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
8700:        0,   355,   356,   691,   358,   359,   360,   692,   362,   363,
8701:      364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
8702:      373,   374,   375,   376,   377,     0,   378,   693,   380,   381,
8703:      382,   694,   384,   385,   695,   387,     0,   388,   389,   390,
8704:      391,   392,   393,   394,   395,   396,   397,   398,   696,   400,
8705:        0,   402,     0,   403,   404,     0,   405,   697,   407,   408,
8706:      409,   410,   411,     0,   698,   699,     0,     0,   414,   415,
8707:        0,   417,     0,     0,   419,   420,   700,   422,   423,   424,
8708:      425,   426,     0,     0,   427,   428,   429,   430,   431,     0,
8709:        0,   432,   433,   434,   435,   436,     0,   701,     0,   439,
8710:      702,   441,   442,   443,   444,     0,     0,   445,     0,     0,
8711:      446,   447,   448,   449,   450,   451,   652,     0,     0,     0,
8712:        0,     0,     0,     0,     0,     0,     0,   463,   464,   465,
8713:      466,     0,    92,    93,    94,    95,    96,    97,    98,    99,
8714:        0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
8715:        0,   103,   104,     0,   105,   106,   107,   653,   109,   110,
8716:      111,     0,   654,   655,   656,   657,     0,   117,   118,   119,
8717:      120,   121,   122,     0,     0,   123,   124,   658,   659,   127,
8718:        0,   128,   129,   130,   131,     0,     0,   660,     0,   134,
8719:      135,   136,   137,   138,   661,   140,   141,   142,     0,   143,
8720:      144,   145,   146,   147,   148,     0,   662,   150,   151,   152,
8721:        0,     0,     0,   663,     0,     0,     0,   154,   155,   156,
8722:      157,   158,   159,   160,   664,   665,   163,     0,   164,     0,
8723:      165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
8724:      174,   175,     0,     0,   176,   177,   666,   179,   180,     0,
8725:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
8726:      189,   190,     0,   192,   193,   194,   195,     0,     0,   197,
8727:        0,   198,   199,   667,   201,     0,   202,     0,   203,   668,
8728:        0,   669,   206,   207,   208,   670,   210,     0,   211,     0,
8729:        0,   213,     0,   214,   215,   216,   217,   218,   219,   672,
8730:      221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
8731:      230,     0,   231,   673,     0,   234,   235,   236,   237,   674,
8732:      675,     0,   676,     0,   241,   677,   678,   244,   679,   246,
8733:      247,   248,   249,   250,     0,     0,   251,   680,   253,   681,
8734:        0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
8735:      262,   682,   264,   265,   266,   267,   268,   269,   270,   271,
8736:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
8737:      683,   684,   685,   285,   286,   287,     0,     0,   289,   290,
8738:      686,   292,     0,     0,   294,   687,   296,   297,   298,     0,
8739:      299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
8740:        0,   688,   307,   689,     0,   310,   311,   312,   313,   314,
8741:      315,   316,   317,   318,   319,     0,   320,   321,     0,   323,
8742:      324,     0,   326,   327,   328,     0,   329,   330,   331,   332,
8743:      333,   334,   335,   336,   337,   690,   339,   340,   341,   342,
8744:        0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
8745:      352,   353,   354,     0,   355,   356,   691,   358,   359,   360,
8746:      692,   362,   363,   364,   365,   366,   367,   368,   369,   370,
8747:      371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
8748:      693,   380,   381,   382,   694,   384,   385,   695,   387,     0,
8749:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
8750:      398,   696,   400,     0,   402,     0,   403,   404,     0,   405,
8751:      697,   407,   408,   409,   410,   411,     0,   698,   699,     0,
8752:        0,   414,   415,     0,   417,     0,     0,   419,   420,   700,
8753:      422,   423,   424,   425,   426,     0,     0,   427,   428,   429,
8754:      430,   431,     0,     0,   432,   433,   434,   435,   436,     0,
8755:      701,     0,   439,   702,   441,   442,   443,   444,     0,     0,
8756:      445,     0,     0,   446,   447,   448,   449,   450,   451,   492,
8757:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8758:      463,   464,   465,   466,     0,    92,    93,    94,    95,    96,
8759:       97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
8760:        0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
8761:        0,   109,   110,   111,   112,   113,     0,   115,   116,     0,
8762:      117,   118,   119,   120,   121,   122,     0,     0,   123,   124,
8763:      125,   126,   127,     0,   128,   129,   130,   131,   132,     0,
8764:        0,     0,   134,   135,   136,   137,   138,     0,   140,   141,
8765:      142,     0,   143,   144,   145,   146,   147,   148,     0,     0,
8766:      150,   151,   152,     0,     0,     0,     0,     0,     0,     0,
8767:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
8768:        0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
8769:      171,   172,   173,   174,   175,     0,     0,   176,   177,   178,
8770:      179,   180,     0,   181,   182,   183,     0,   184,   185,   186,
8771:        0,   187,   188,   189,   190,   191,   192,   193,   194,   195,
8772:      196,     0,   197,     0,   198,   199,   200,   201,     0,   202,
8773:        0,   203,     0,     0,     0,   206,   207,   208,     0,   210,
8774:        0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
8775:      218,   219,     0,   221,   222,   223,   224,     0,   225,   226,
8776:      227,   228,   229,   230,     0,   231,     0,   233,   234,   235,
8777:      236,   237,   238,   239,     0,   240,     0,   241,     0,     0,
8778:      244,     0,   246,   247,   248,   249,   250,     0,     0,   251,
8779:        0,   253,     0,     0,   255,   256,   257,     0,     0,   258,
8780:      259,   260,   261,   262,   494,   264,   265,   266,   267,   268,
8781:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
8782:      279,   280,   281,   282,     0,   284,   285,   286,   287,   288,
8783:        0,   289,   290,     0,   292,     0,   293,   294,   295,   296,
8784:      297,   298,     0,   299,   300,     0,     0,   301,   302,   303,
8785:        0,     0,   304,   305,     0,   307,     0,   309,   310,   311,
8786:      312,   313,   314,   315,     0,   317,   318,   319,     0,   320,
8787:      321,   322,   323,   324,   325,   326,   327,   328,     0,   329,
8788:      330,   331,   332,   333,   334,   335,     0,   337,   338,   339,
8789:      340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
8790:      349,   350,   351,   352,   353,   354,     0,   355,   356,     0,
8791:      358,   359,   360,   361,     0,   363,   364,   365,   366,   367,
8792:      368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
8793:      377,     0,   378,   379,   380,   381,   382,     0,   384,   385,
8794:      386,   387,     0,   388,   389,   390,   391,   392,   393,   394,
8795:      395,   396,   397,   398,   496,   400,   401,   402,     0,   403,
8796:      404,     0,   405,     0,   407,   408,   409,   410,   411,     0,
8797:      412,   413,     0,     0,   414,   415,   416,   417,   418,     0,
8798:      419,   420,   421,   422,   423,   424,   425,   426,     0,     0,
8799:      427,   428,   429,   430,   431,     0,     0,   432,   433,   434,
8800:      435,   436,   437,   438,     0,   439,     0,   441,   442,   443,
8801:      444,     0,     0,   445,     0,     0,   446,   447,   448,   449,
8802:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
8803:      460,   461,   462,   463,   464,   465,   466,  2360,     0,     0,
8804:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8805:        0,     0,     0,    92,    93,    94,    95,    96,    97,    98,
8806:       99,     0,   100,   101,   102,     0,     0,     0,     0,     0,
8807:        0,     0,   103,   104,     0,   105,   106,   107,  2361,   109,
8808:      110,   111,     0,   654,  2362,   656,   657,     0,   117,   118,
8809:      119,   120,   121,   122,     0,     0,   123,   124,   658,   659,
8810:      127,     0,   128,   129,   130,   131,     0,     0,  2363,     0,
8811:      134,   135,   136,   137,   138,  2364,   140,   141,   142,     0,
8812:      143,   144,   145,   146,   147,   148,     0,  2365,   150,   151,
8813:      152,     0,     0,     0,  2366,     0,     0,     0,   154,   155,
8814:      156,   157,   158,   159,   160,   664,   665,   163,     0,   164,
8815:        0,   165,   166,   167,   168,   169,   170,     0,   171,   172,
8816:      173,   174,   175,     0,     0,   176,   177,   666,   179,   180,
8817:        0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
8818:      188,   189,   190,     0,   192,   193,   194,   195,     0,     0,
8819:      197,     0,   198,   199,   667,   201,     0,   202,     0,   203,
8820:     2367,     0,  2368,   206,   207,   208,  2369,   210,     0,   211,
8821:        0,     0,   213,     0,   214,   215,   216,   217,   218,   219,
8822:     2370,   221,   222,   223,   224,     0,   225,   226,   227,   228,
8823:      229,   230,     0,   231,  2371,     0,   234,   235,   236,   237,
8824:      674,   675,     0,   676,     0,   241,  2372,  2373,   244,  2374,
8825:      246,   247,   248,   249,   250,     0,     0,   251,  2375,   253,
8826:     2376,     0,   255,   256,   257,     0,     0,   258,   259,   260,
8827:      261,   262,  2565,   264,   265,   266,   267,   268,   269,   270,
8828:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
8829:      281,   683,  2378,   685,   285,   286,   287,     0,     0,   289,
8830:      290,  2380,   292,     0,     0,   294,   687,   296,   297,   298,
8831:        0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
8832:      304,     0,  2382,   307,  2383,     0,   310,   311,   312,   313,
8833:      314,   315,   316,   317,   318,   319,     0,   320,   321,     0,
8834:      323,   324,     0,   326,   327,   328,     0,   329,   330,   331,
8835:      332,   333,   334,   335,   336,   337,   690,   339,   340,   341,
8836:      342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
8837:      351,   352,   353,   354,     0,   355,   356,  2384,   358,   359,
8838:      360,     0,   362,   363,   364,   365,   366,   367,   368,   369,
8839:      370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
8840:      378,     0,   380,   381,   382,  2386,   384,   385,   695,   387,
8841:        0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
8842:      397,   398,  2566,   400,     0,   402,     0,   403,   404,     0,
8843:      405,  2388,   407,   408,   409,   410,   411,     0,   698,   699,
8844:        0,     0,   414,   415,     0,   417,     0,     0,   419,   420,
8845:     2389,   422,   423,   424,   425,   426,     0,     0,   427,   428,
8846:      429,   430,   431,     0,     0,   432,   433,   434,   435,   436,
8847:        0,   701,     0,   439,  2390,   441,   442,   443,   444,     0,
8848:        0,   445,     0,     0,   446,   447,   448,   449,   450,   451,
8849:      652,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8850:        0,   463,   464,   465,   466,     0,    92,    93,    94,    95,
8851:       96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
8852:        0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
8853:      107,   653,   109,   110,   111,     0,   654,   655,   656,   657,
8854:        0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
8855:      124,   658,   659,   127,     0,   128,   129,   130,   131,     0,
8856:        0,   660,     0,   134,   135,   136,   137,   138,   661,   140,
8857:      141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
8858:      662,   150,   151,   152,     0,     0,     0,   663,     0,     0,
8859:        0,   154,   155,   156,   157,   158,   159,   160,   664,   665,
8860:      163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
8861:        0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
8862:      666,   179,   180,     0,   181,   182,   183,     0,   184,   185,
8863:      186,     0,   187,   188,   189,   190,     0,   192,   193,   194,
8864:      195,     0,     0,   197,     0,   198,   199,   667,   201,     0,
8865:      202,     0,   203,   668,     0,   669,   206,   207,   208,   670,
8866:      210,     0,   211,     0,     0,   213,     0,   214,   215,   216,
8867:      217,   218,   219,   672,   221,   222,   223,   224,     0,   225,
8868:      226,   227,   228,   229,   230,     0,   231,   673,     0,   234,
8869:      235,   236,   237,   674,   675,     0,   676,     0,   241,   677,
8870:      678,   244,   679,   246,   247,   248,   249,   250,     0,     0,
8871:      251,   680,   253,   681,     0,   255,   256,   257,     0,     0,
8872:      258,   259,   260,   261,   262,     0,   264,   265,   266,   267,
8873:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
8874:      278,   279,   280,   281,   683,   684,   685,   285,   286,   287,
8875:        0,     0,   289,   290,   686,   292,     0,     0,   294,   687,
8876:      296,   297,   298,     0,   299,   300,     0,     0,   301,   302,
8877:      303,     0,     0,   304,     0,   688,   307,   689,     0,   310,
8878:      311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
8879:      320,   321,     0,   323,   324,     0,   326,   327,   328,     0,
8880:      329,   330,   331,   332,   333,   334,   335,   336,   337,   690,
8881:      339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
8882:      348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
8883:      691,   358,   359,   360,     0,   362,   363,   364,   365,   366,
8884:      367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
8885:      376,   377,     0,   378,     0,   380,   381,   382,   694,   384,
8886:      385,   695,   387,     0,   388,   389,   390,   391,   392,   393,
8887:      394,   395,   396,   397,   398,     0,   400,     0,   402,     0,
8888:      403,   404,     0,   405,   697,   407,   408,   409,   410,   411,
8889:        0,   698,   699,     0,     0,   414,   415,     0,   417,     0,
8890:        0,   419,   420,   700,   422,   423,   424,   425,   426,     0,
8891:        0,   427,   428,   429,   430,   431,     0,     0,   432,   433,
8892:      434,   435,   436,     0,   701,     0,   439,   702,   441,   442,
8893:      443,   444,     0,     0,   445,     0,     0,   446,   447,   448,
8894:      449,   450,   451,     0,     0,     0,     0,     0,     0,     0,
8895:        0,     0,     0,     0,   463,   464,   465,   466
8896: };
8897: 
8898: static const yytype_int16 yycheck[] =
8899: {
8900:        6,   613,   628,    58,   620,     0,   789,   599,   556,   523,
8901:      693,   579,   985,    35,   486,   574,   529,   983,     6,   789,
8902:      866,    16,     0,   958,  1787,    16,   520,     0,  1158,     0,
8903:        6,   868,     0,   960,  1261,  1127,  1718,   622,  1127,   527,
8904:       60,   699,   954,  1127,  1127,  1214,   883,    60,   528,  2073,
8905:      522,  1793,  1024,  1795,  1163,  2145,    29,     0,   895,   963,
8906:      529,   988,  2121,    30,  1674,  1289,  1290,  2031,  1738,   722,
8907:     2121,  2163,   725,  1612,  1613,   520,  1784,    34,  1617,   658,
8908:      659,  2156,  1242,     5,     9,     9,   796,  1714,     5,   613,
8909:        5,   615,     5,   617,     0,     5,     5,     5,  1984,    11,
8910:       13,    14,  1729,    13,    14,    78,   685,     5,     0,     5,
8911:       50,  2424,     5,     9,   534,    13,    14,  2037,  1657,  1658,
8912:      903,    88,  1342,     5,     5,     5,    58,     5,     9,     5,
8913:     1388,    13,    14,    13,    14,  1390,    85,     5,    87,     5,
8914:       89,  1128,  2430,     5,     5,   633,     5,  1855,     5,  2427,
8915:        3,   167,    27,   168,   596,    13,    14,    58,  2479,    34,
8916:       11,   729,     3,     4,     5,   167,  2501,   596,     9,   116,
8917:      210,   136,     4,    23,    58,    40,   106,     9,    31,    32,
8918:     1256,   119,    82,   119,    15,    73,    92,    27,    11,   972,
8919:       41,  1256,   975,   976,  2515,   853,  1256,     5,   144,     4,
8920:       92,  2414,    58,    27,     9,   236,    75,   167,  2036,  2062,
8921:       34,   285,  1920,  1921,    93,   173,    85,   114,    41,  1972,
8922:     2569,   116,    73,   216,   216,   301,   126,   347,  2690,  2599,
8923:      129,   279,   277,    40,    59,   161,   815,   816,    78,  2654,
8924:      236,   105,    67,   129,   285,    11,    86,   114,   693,    15,
8925:       73,    27,  2347,   265,  1263,   236,    22,   268,    34,    27,
8926:      839,  2755,   208,   338,  2399,    37,   204,    33,    34,   262,
8927:      262,  2092,   230,   114,   168,   115,   789,    20,  2599,   121,
8928:       67,    11,   795,   157,   134,   430,   996,   159,   971,   168,
8929:      446,   366,   119,  1003,    67,   394,   864,  2585,  2813,    27,
8930:     2815,  2636,    11,   399,    11,   401,   320,   134,    13,    14,
8931:      869,    41,   792,   166,  2278,   168,   449,   184,  2282,  2781,
8932:       86,   200,   408,   107,   451,   910,  2385,   114,  2091,   321,
8933:      429,    75,  2422,  1943,   348,   491,   215,   896,   107,   285,
8934:      473,    85,   487,    73,   184,   224,   473,  2168,   220,  2269,
8935:       11,   123,   797,   227,   485,   195,   352,   106,   489,    30,
8936:     2854,   129,   373,   922,    73,   264,   452,   487,   209,  1378,
8937:     2885,   352,   269,   279,   269,   274,   369,   369,   242,   258,
8938:     2088,   307,  2090,    54,   171,   953,   250,   279,   274,   230,
8939:      406,   164,   905,   906,  2809,   426,   296,   264,  2719,  1256,
8940:      279,   129,  2029,   297,  2031,   230,   482,   339,  1709,  1710,
8941:     2872,   925,  1951,  1952,  1953,  1954,   428,   491,  1957,  1958,
8942:     1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,  1138,    58,
8943:      426,  2752,  2567,   283,   340,   428,   428,  1029,   339,   487,
8944:     2268,   399,   487,   401,  2539,   426,   406,  1674,   340,  2202,
8945:      491,   491,  1528,  1529,  1530,   339,   487,   162,   903,   290,
8946:      476,  2796,  2315,  1528,   343,   395,  2836,  1527,   426,  2008,
8947:     2009,  2820,   487,   489,  2687,  1410,   422,   264,   372,  2187,
8948:      445,   476,   269,   339,   311,   432,    68,   337,   338,   491,
8949:      428,   487,   428,  1751,  1466,  2783,  1720,  1752,   476,   919,
8950:      400,   376,  1489,   476,  2782,   476,   487,   529,   476,   951,
8951:     2569,  1137,  1128,   262,   520,  2836,   366,  2830,  2569,  1746,
8952:     1740,  1494,   951,   529,  2488,   312,   971,   392,   477,  2493,
8953:      439,     5,  2496,   528,   451,   325,   451,   406,   529,   312,
8954:      327,   490,   382,   449,   599,   385,    92,   487,   568,   555,
8955:      556,   430,   376,   478,   479,   568,   473,   449,   473,   491,
8956:     2480,  2324,   486,   485,   487,   487,   943,   489,  1728,  2455,
8957:      487,   483,   487,   579,   487,   383,   384,   487,   487,   487,
8958:     1159,  1160,   488,  1151,   490,   392,   577,   440,   430,   487,
8959:      491,   487,  1564,   588,   487,  2337,   488,   485,   490,  2689,
8960:      376,   489,  2694,  1612,  1613,   487,   487,   487,  1617,   487,
8961:      588,   487,   618,   619,   620,   588,  1232,   588,  2693,   487,
8962:      588,   487,   571,   580,   591,   487,   487,  1337,   487,   487,
8963:      487,     8,   483,   262,    11,   491,   423,   478,   479,    16,
8964:       17,    18,  1945,  2313,   449,   588,   478,   479,  1657,  1658,
8965:      423,  2278,   442,   159,   603,  2282,  1439,   480,   481,   482,
8966:      483,  1246,   406,  1157,   301,  2524,  1449,  2631,   473,  1452,
8967:     1973,  1528,  1529,   478,   479,    31,    32,  1245,  1172,  1247,
8968:     2838,   490,  1298,  1251,   248,   249,  2545,   693,  1857,   157,
8969:      639,   640,   641,   476,  1208,   325,  1264,  1265,  2788,  1267,
8970:     1285,  1286,    11,  1216,    48,   116,   489,  2317,  2416,   359,
8971:      339,   348,  1157,  1158,   117,   114,  1943,   236,  1277,  2020,
8972:     2021,  2022,  2023,   729,  1340,    64,    65,  1172,   236,   495,
8973:      360,   117,    41,  1205,  1206,  1215,    92,   366,   182,   183,
8974:     1212,   430,  2900,   488,  1329,   395,   491,  1216,   478,   479,
8975:      480,   481,   482,   483,  1339,   261,  1341,   146,   524,   227,
8976:       75,  2820,   491,  2526,    73,   395,  1549,  1991,     0,  2820,
8977:       85,   236,  1881,   480,   481,   482,   483,   476,  1887,  1549,
8978:        4,   236,   440,   789,   187,     9,   436,   198,   487,   795,
8979:      796,   797,   356,   357,   537,  1641,   539,   792,   487,  1293,
8980:      487,   187,  1639,   192,   248,   249,   335,   813,   276,  2899,
8981:     1722,  1427,   442,   359,   580,  2674,   559,   478,   479,   480,
8982:      481,   482,   483,  1435,   129,   194,   485,   194,   172,  1301,
8983:      489,  2855,  2856,   352,   840,   212,   264,   487,  1811,   243,
8984:       23,   269,   186,   865,   352,   482,    29,   191,  1293,   395,
8985:      155,   262,  2479,   264,   860,   861,   862,  1510,   864,   865,
8986:      148,  2488,  1834,   325,   488,    75,  2493,   491,   411,  2496,
8987:     1462,  1463,  1464,  1489,  2004,    85,   148,   442,  1531,  2903,
8988:     1533,   887,   226,  1536,  1408,   355,  1263,   352,  2515,   487,
8989:      436,   319,  1819,   292,  2121,    78,  2659,   352,   360,   905,
8990:      906,     4,   144,   449,   281,  1742,     9,   426,   129,  2448,
8991:      487,  1435,   356,   357,   482,   157,   936,   937,   426,   939,
8992:      162,   489,  2664,   936,   937,  1419,   939,   473,    13,    14,
8993:     1454,   482,   938,   395,   155,  1459,   942,   943,   489,  1507,
8994:      470,   487,  1951,  1952,  1953,  1954,   214,   953,  1957,  1958,
8995:     1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,   907,   264,
8996:      359,   426,  1866,   930,   269,   971,   208,  1871,   487,   274,
8997:      451,   426,  2599,  1445,  1419,   399,     4,   401,  1450,   487,
8998:      442,     9,   931,   352,  1626,   227,  1628,  1629,   451,  1554,
8999:      996,   360,   473,  1558,  1482,  1560,   395,  1003,  2537,  2008,
9000:     2009,  1378,     4,   359,  2631,     8,   487,     9,   957,   168,
9001:      473,  2180,   489,    16,    17,    18,    36,   470,  1024,    23,
9002:      987,   970,   487,   279,   487,    29,   395,   371,  1522,   665,
9003:      557,   558,   487,   560,   276,    55,  1549,   436,   480,   395,
9004:      157,   200,   991,   285,  2287,   162,   789,  2290,   269,  1562,
9005:      449,   687,   795,   274,  2146,   166,   215,  2146,  1626,  1627,
9006:     1628,  1629,  2146,  2146,  2603,   224,   485,   487,   487,  2751,
9007:      489,   359,  1566,   442,   473,   488,   488,  1522,   491,   491,
9008:      436,   491,   718,    23,   440,   105,   157,   359,   487,    29,
9009:     2317,   162,  2719,   449,  1662,    13,    14,   474,   475,   476,
9010:      488,   478,   479,   480,   481,   482,   483,   395,   413,   488,
9011:      227,   167,   491,   488,   488,  2245,   491,   473,   210,   424,
9012:     1634,  1566,  1128,   395,  1716,  2752,  2889,   870,    54,  2102,
9013:      134,   487,  1138,    13,    14,  2101,   879,  1790,   470,  1792,
9014:      488,  1911,   491,   491,   493,  1151,   214,   488,   436,   892,
9015:      491,  1157,  1158,   487,  2089,  2837,   227,   149,   924,   276,
9016:      903,   449,   905,   906,   436,   488,  1172,     5,   491,   488,
9017:        8,   333,   491,   193,  2140,  2857,    14,   449,   488,   149,
9018:      422,   491,  1131,   149,   343,   473,    24,    13,    14,    23,
9019:       28,   827,   413,   149,   134,    29,  2100,   488,  2102,   487,
9020:      491,   473,   449,   424,   451,   276,   488,   843,   488,  2836,
9021:     1216,   491,   264,   488,   488,   487,   491,   491,   488,   292,
9022:     1215,   491,   242,  2060,  1850,  1216,  1232,  1885,  1886,  2911,
9023:      250,   488,    13,    14,   491,  1612,  1613,    13,    14,  1245,
9024:     1617,  1247,   262,   488,  1250,  1251,   491,  1242,   488,   488,
9025:      488,   491,   491,   491,  1260,   489,  1262,  1263,  1264,  1265,
9026:     1266,  1267,  1268,   488,  1242,  1214,   491,   487,   399,  1242,
9027:      401,  1242,    93,   293,  1242,   593,   442,   595,   281,   283,
9028:     1657,  1658,  1288,   399,    36,   401,   359,  1293,  1294,  1295,
9029:     1296,  1297,  1298,  1909,    81,   488,  1302,  1303,   491,   488,
9030:      134,  1307,   491,   488,   488,  1311,   491,   491,  1314,  1315,
9031:     1316,  1317,  1318,  1319,  1320,  1321,  1322,   488,   338,  1325,
9032:      491,  2451,   395,   488,  1330,   488,   491,  1333,   491,  1335,
9033:      487,  1337,   488,   337,  1340,   491,   488,   439,  2121,   491,
9034:      360,     8,  2569,   283,    11,   488,   453,   168,   491,    16,
9035:       17,    18,   488,   488,  1360,   491,   491,  2283,   488,  2285,
9036:      380,   491,   366,   436,   488,     8,  1357,   491,    11,    13,
9037:       14,  1865,  1378,    16,    17,    18,   449,    13,    14,   200,
9038:     2353,  1387,  1388,   488,   488,  1334,   491,   491,   488,   173,
9039:     2325,   491,  1365,   333,   215,   308,     8,   337,  1911,    11,
9040:      473,   487,  1987,   224,    16,    17,    18,  1356,     8,  1358,
9041:      194,    11,  1980,  1419,   487,   487,    16,    17,    18,  1425,
9042:     1865,  1427,   520,   149,   488,   487,   366,   491,  2274,   433,
9043:       35,   488,  1904,    33,   491,    13,    14,   258,  1932,  2448,
9044:      149,   488,  2288,  1209,   491,  1211,   230,   149,   488,   283,
9045:      359,   491,  1401,   149,   488,    23,  1950,   491,   395,   488,
9046:     1466,    29,   491,  1469,  1470,   487,  1472,   488,   488,   487,
9047:      491,   474,   475,   476,  2604,   478,   479,   480,   481,   482,
9048:      483,  1975,  2041,  1489,  2069,   279,   395,  1932,  1982,   488,
9049:      487,    23,   491,   433,    36,   488,  1502,    29,   491,   333,
9050:      284,  1507,   225,   337,  2120,  1950,  2122,   488,    13,    14,
9051:      491,    13,    14,  1256,    13,    14,  1522,    13,    14,   487,
9052:      520,   485,   343,     5,   191,  1498,  2179,   436,  2537,     5,
9053:     1975,  1480,   366,    13,    14,    13,    14,  1982,    13,    14,
9054:      449,    13,    14,  1549,  2136,   212,    13,    14,    13,    14,
9055:       13,    14,    13,    14,    13,    14,  1562,   487,  1564,  2004,
9056:     1566,  2344,    13,    14,   473,  1571,   134,   347,   348,   212,
9057:     1576,   487,   347,   348,  1951,  1952,  1953,  1954,   487,   162,
9058:     1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,
9059:      252,   253,  1614,  2820,  2603,   693,   356,   357,   487,   433,
9060:      347,   348,   134,   487,  1347,   487,  1612,  1613,  1614,  2575,
9061:      487,  1617,   212,   487,   281,   399,     8,   401,     5,    11,
9062:     1626,  1627,  1628,  1629,    16,    17,    18,  2121,   347,   348,
9063:     1636,  2008,  2009,     5,  1640,   487,   487,  1643,   281,   423,
9064:     1662,    33,   426,   905,   906,  1411,   487,   487,   487,     5,
9065:      487,  1657,  1658,   145,     5,  1421,  1662,  1423,   487,   487,
9066:     1426,     9,   487,   487,   450,    15,  1432,   210,  1434,   281,
9067:     1676,    23,  2442,  1679,   491,  1681,  2121,    29,    96,    36,
9068:     1446,   281,  2176,   366,   276,  1451,   274,   225,   162,  1455,
9069:     1456,  1457,  1458,   693,  1460,  1461,  1702,   487,   162,   797,
9070:      406,    85,  2385,  2356,  2357,   487,   491,   406,  1714,  2294,
9071:       54,  1733,     6,    54,   406,   283,   255,    11,   406,   488,
9072:      406,    15,   496,  1729,  2309,   449,  1714,    21,    22,    23,
9073:      149,  2176,    26,  1728,    92,    29,    30,  1743,  1714,    33,
9074:       34,  1729,   141,   489,   264,   264,   487,    36,    36,   487,
9075:     1728,   283,  1758,  1729,     9,  1728,  2304,  1728,  1707,    35,
9076:     1728,   144,   404,   404,   485,   333,   406,   485,   406,   337,
9077:     1776,   406,   406,   445,   157,   491,   487,    11,   335,   162,
9078:      108,   109,   134,   491,    78,   486,  2569,  1793,  1794,  1795,
9079:      404,    85,    86,    87,    88,    89,   491,   797,   366,   496,
9080:     2245,   333,   487,   269,   406,   337,  1549,   474,   475,   476,
9081:     1553,   478,   479,   480,   481,   482,   483,   487,   158,  1562,
9082:      212,   176,   167,   488,   487,   208,   430,    36,  1834,   208,
9083:      491,   474,   475,   476,   366,   478,   479,   480,   481,   482,
9084:      483,   369,   216,   280,   227,   491,   216,   264,   487,   216,
9085:      285,   488,   277,   442,   182,   183,   487,   317,   487,  1865,
9086:      264,  2355,   474,   475,   476,   433,   478,   479,   480,   481,
9087:      482,   483,   149,   971,   474,   475,   476,   149,   478,   479,
9088:      480,   481,   482,   483,   449,   279,   485,   488,   520,   281,
9089:      470,   470,   488,   276,   488,   488,   264,   488,  2871,   279,
9090:     1849,   433,   285,  1909,    36,  1911,    23,  1856,  1857,  1858,
9091:     2355,    36,    29,   486,   488,   167,   244,   245,   246,   247,
9092:      248,   249,   488,  1929,   252,   253,  1932,  1876,   488,  2442,
9093:      488,   283,  1938,   488,  1907,  1941,   488,   488,  1944,   489,
9094:     2385,   488,   488,   488,  1950,  1951,  1952,  1953,  1954,   470,
9095:      167,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,
9096:     1966,  2016,  1984,   487,  1970,  1971,   406,   289,   436,  1975,
9097:      487,   971,   487,   487,  1980,   446,  1982,   446,  1984,   279,
9098:      428,   333,   476,   472,   280,   337,  1992,   280,   280,  1995,
9099:      491,  1997,  2014,   235,   406,   264,   487,   149,  2004,  2005,
9100:      194,   283,  2008,  2009,   149,   149,  2451,  2013,  2014,  2031,
9101:      406,   406,   491,   406,   366,   406,     0,   134,   277,   279,
9102:      449,  2613,    36,  2029,   269,  2031,   488,   149,   356,   357,
9103:      488,   488,    16,   486,   488,   149,  2042,  2820,   140,   422,
9104:      486,  2029,   486,  2031,  2660,    29,  2052,   167,    11,  2675,
9105:      520,    35,   162,  2029,   488,  2031,  1799,   488,   488,  1157,
9106:     1158,   693,  2068,  2535,   167,   487,   395,   488,   446,   167,
9107:      473,  2448,   176,   488,  1172,  2569,    60,  2026,  2027,  2028,
9108:      491,   433,   474,   475,   476,    83,   478,   479,   480,   481,
9109:      482,   483,   340,    36,    78,   280,   435,   149,   488,  1842,
9110:      488,   487,   485,  1869,  2618,   488,   489,   171,   417,   491,
9111:     2116,  1854,    55,   488,  2120,  2121,  2122,    36,   487,    79,
9112:      430,   487,  2636,   487,  2569,   486,   491,   167,   488,   488,
9113:      397,   215,  2758,  2082,   487,   288,   215,   286,   487,   467,
9114:      468,  2635,   488,   179,  2638,   488,   488,    54,  2716,   487,
9115:      487,   476,   449,   196,   185,   489,   269,  1157,  1158,  2604,
9116:     2537,   269,   105,   489,   488,   797,   283,   406,  1911,   489,
9117:     2176,   489,  1172,  1916,   489,  1918,   489,   489,   489,  1922,
9118:     1923,   489,   489,   477,   489,   489,   489,  2193,   489,   483,
9119:     2635,   489,   486,  2638,  2167,  1293,   490,    36,  2147,   489,
9120:      406,   495,   489,  2819,   489,   489,   489,   264,  2680,   489,
9121:      489,   489,   476,  2825,   489,   489,   333,   106,  2732,   489,
9122:      337,   489,   449,   693,   489,   487,  2603,    36,   522,   523,
9123:      524,  2180,   279,  2239,  2240,   167,   487,   487,  2244,  2245,
9124:      298,   487,   215,  2249,   487,   448,  2252,  2253,    85,   366,
9125:      193,  2257,   130,   488,   327,   487,   487,   216,   114,    36,
9126:       73,   555,   556,   557,   558,   149,   560,   121,   149,    36,
9127:      488,   348,  2278,   348,    54,    36,  2282,   571,   491,   487,
9128:      487,  2753,   487,    67,   430,   435,   580,    73,    36,    73,
9129:     2278,   184,   430,  1293,  2282,    67,   417,   591,  2304,   242,
9130:      282,    85,  2278,    67,   487,   491,  2282,   250,    36,   603,
9131:      366,   350,  2261,  2262,  2263,  2264,   433,   476,  2084,   262,
9132:      269,  1419,   184,   240,   487,   417,  2820,   797,    36,   487,
9133:      114,  2337,   116,  2306,  2307,   282,   282,    50,   262,   971,
9134:     2346,   488,  2108,   279,   487,   639,   640,   641,   488,  2355,
9135:      293,   487,   347,     9,   334,   196,   279,  2123,  2124,  2125,
9136:     2126,  2127,  2128,  2129,  2130,  2131,  2132,   279,    33,   488,
9137:      119,   487,     9,   428,    22,  2820,   488,   588,  2121,  2385,
9138:     2103,    94,  1433,  2116,  2066,  2752,  1788,   171,  2308,  2511,
9139:     2816,  2152,  2822,  2349,  2892,   338,  2667,  2870,     8,  2858,
9140:     2143,    11,   958,  2587,  1782,  2157,  2819,   120,  1844,  1794,
9141:     2868,  1779,  2120,  2817,   198,  1157,  1205,   360,   169,  1419,
9142:     1909,  1848,   173,  2442,  1522,   138,  2143,   924,  1404,   142,
9143:     1743,    41,  2729,   946,   945,  2647,  2442,   380,    48,  2807,
9144:     1378,   897,  2448,   194,  1758,  2451,  2046,  2741,  2300,  2455,
9145:      163,  1403,  2425,   166,  2269,   948,  1729,  2463,  2464,  2031,
9146:     2632,  2467,  2284,    73,    23,  2719,  2029,   180,  1566,  2718,
9147:       29,  2736,  2507,  2479,  2737,  2805,  2792,    36,  1256,   230,
9148:      264,  2806,  2488,  1256,  1256,   269,   237,  2493,  1256,  1331,
9149:     2496,  2479,   476,  1641,  1746,  1572,    55,  2503,  2504,  1247,
9150:     2488,   971,  1680,  2479,  1677,  2493,  1717,   801,  2496,  2515,
9151:     1472,  2517,  2488,  1335,  2045,  1851,  2711,  2493,  1216,  1562,
9152:     2496,  1357,  1522,   930,    -1,  1157,  1158,  2515,   312,  2067,
9153:       -1,  2537,   142,   284,    -1,  1358,    -1,    -1,    -1,  2515,
9154:     1172,    -1,    -1,   327,   528,   529,   105,     8,    -1,    -1,
9155:       11,    -1,    -1,    -1,    -1,  2298,   269,    -1,  2301,    -1,
9156:       -1,    -1,   172,  2569,   277,    -1,  1566,    -1,    -1,    -1,
9157:       -1,    -1,   866,    -1,    -1,   134,   186,    -1,    -1,    -1,
9158:       41,   191,    -1,    36,   568,    -1,    -1,    48,    -1,    -1,
9159:       -1,    -1,    -1,  2599,    -1,  2544,    -1,  2603,  2604,    -1,
9160:       -1,   352,    55,    -1,   588,  2578,   319,    -1,    -1,   520,
9161:       -1,  2599,    73,   907,    -1,    -1,   226,  2639,    -1,    -1,
9162:       -1,  2627,    -1,  2599,    -1,  2631,    -1,  2600,    -1,  2635,
9163:      924,   925,  2638,  2639,   193,    -1,   930,   931,   932,   423,
9164:       -1,    -1,    -1,  2631,  2650,    -1,    -1,  2596,   399,    -1,
9165:      401,    -1,   105,    -1,  2660,  2631,    -1,    -1,  2664,  2665,
9166:       -1,  1293,    -1,   957,   958,    -1,   417,    -1,    -1,    -1,
9167:       -1,   281,   423,    -1,    -1,   426,   970,    -1,  2421,    -1,
9168:       -1,   142,    -1,   242,    -1,    -1,    -1,  1157,  1158,    -1,
9169:       -1,   250,    -1,   987,    -1,    -1,    -1,   991,    -1,  2442,
9170:       -1,    -1,  1172,   262,    -1,    -1,    -1,    -1,    -1,  2658,
9171:     2716,   172,    -1,  2719,    -1,    -1,    -1,    -1,   171,  2692,
9172:       -1,    -1,    -1,    -1,   283,   186,    -1,    -1,    -1,    -1,
9173:      191,  2719,    -1,    -1,   293,  2741,    -1,    -1,    -1,    -1,
9174:      193,    -1,  2691,  2719,    -1,    -1,  2752,    -1,    -1,    -1,
9175:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9176:       -1,   371,    -1,    -1,  2752,   226,  2772,  1865,    -1,    -1,
9177:     2536,    -1,    -1,    -1,   333,  2748,  2752,    -1,   337,   338,
9178:       -1,    -1,   693,    -1,    -1,  2791,  2792,  1419,    -1,   242,
9179:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   250,    -1,    -1,
9180:       -1,   360,    -1,    -1,  2570,  2571,    -1,   366,   792,   262,
9181:       -1,    -1,    -1,  2819,  2820,    -1,   520,    -1,  2584,    -1,
9182:      281,   380,    -1,  1293,    -1,    -1,  2569,    -1,    -1,  1123,
9183:     2836,    -1,  2838,    -1,  1932,    -1,    -1,  1131,    -1,    -1,
9184:      293,    -1,    -1,    -1,    -1,   829,    -1,  1141,  2836,    -1,
9185:       -1,    -1,  1950,    -1,    -1,    -1,  2829,    -1,    -1,    -1,
9186:     2836,   471,    -1,    -1,    -1,  1865,    -1,    -1,   478,   479,
9187:      480,   481,   482,   483,   433,    -1,    -1,  1975,    -1,    -1,
9188:     1174,   865,    -1,  2649,  1982,   338,   797,    -1,    -1,    -1,
9189:     1522,    -1,    -1,    -1,  2900,    -1,    -1,   789,    -1,    -1,
9190:       -1,    -1,    -1,   795,    -1,    -1,  2004,   360,    -1,    -1,
9191:      371,  1205,  1206,    -1,  1208,  1209,    -1,  1211,  1212,    -1,
9192:     1214,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,
9193:        8,    -1,  1932,    11,  1566,    -1,    -1,    -1,    16,    17,
9194:       18,    -1,    -1,    -1,    -1,  2688,    -1,    -1,    -1,  1419,
9195:     1950,    -1,   936,   937,    -1,   939,    -1,    -1,    -1,     8,
9196:       -1,    -1,    11,    41,    -1,    -1,    -1,  1261,    -1,    -1,
9197:       48,    -1,    -1,    -1,    -1,  1975,    -1,    -1,  1272,    -1,
9198:       -1,    -1,  1982,    -1,    -1,    -1,    -1,   879,    -1,   693,
9199:       -1,    -1,    41,    -1,    -1,    73,    -1,    -1,    -1,    48,
9200:       -1,    -1,    -1,    -1,  2004,    -1,    -1,  1301,    -1,    -1,
9201:      471,   903,    -1,   905,   906,    -1,    -1,   478,   479,   480,
9202:      481,   482,   483,  2121,    73,    -1,    -1,    -1,     0,    -1,
9203:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9204:     1334,  1335,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9205:       -1,    -1,  1522,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9206:      971,    -1,  1356,    -1,  1358,    -1,    -1,    -1,    -1,    -1,
9207:       -1,    -1,    -1,  1367,    -1,  1369,    -1,  2820,  2176,    -1,
9208:      972,    -1,    -1,   975,   976,    -1,    -1,    -1,    -1,    -1,
9209:       -1,    -1,    -1,   797,   172,    -1,  1566,    -1,    -1,    -1,
9210:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1401,   186,    -1,
9211:       -1,    -1,    -1,   191,    -1,    -1,  1410,  1411,    -1,    -1,
9212:       92,  2121,    -1,   172,    -1,    -1,    -1,  1421,  1422,  1423,
9213:     1424,    -1,  1426,    -1,   212,   213,    -1,   186,  1432,    -1,
9214:     1434,    -1,   191,    -1,    -1,    -1,    -1,  2245,   226,    -1,
9215:       -1,  1445,  1446,    -1,    -1,    -1,  1450,  1451,    -1,    -1,
9216:       -1,  1455,  1456,  1457,  1458,    -1,  1460,  1461,    -1,    -1,
9217:       -1,    -1,   144,    -1,    -1,    -1,  2176,   226,    -1,    -1,
9218:       -1,    -1,    -1,    -1,    -1,   157,  1480,  1481,    -1,   267,
9219:      162,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,    -1,
9220:       -1,    -1,  1496,   281,   176,    -1,    -1,   179,    -1,    -1,
9221:       -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
9222:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
9223:       -1,  1215,   281,  1865,    -1,    -1,   208,    -1,    -1,    -1,
9224:       33,    -1,    -1,    -1,    -1,  2245,  1157,  1158,    -1,    -1,
9225:       -1,    -1,    -1,    -1,    -1,   227,    -1,  2355,  1242,    -1,
9226:       -1,  1172,    -1,  1155,    -1,    -1,    -1,   971,    -1,    -1,
9227:       -1,    -1,    -1,    -1,  1166,    -1,  1168,    -1,    -1,    -1,
9228:       -1,    -1,    -1,    -1,    -1,  1177,     3,  2385,     5,    -1,
9229:       -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
9230:     1932,    -1,  1194,    -1,   276,    -1,    -1,   279,    -1,    -1,
9231:       -1,    -1,    -1,   285,    -1,    -1,    -1,    -1,  1950,    -1,
9232:     1304,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,  1221,
9233:     1222,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9234:     1634,    -1,    -1,  1975,    -1,    -1,    -1,  1641,    -1,    -1,
9235:     1982,    -1,    -1,  2451,    -1,  2355,    -1,    -1,    -1,    -1,
9236:       -1,  1253,  1254,    -1,    -1,  1257,  1258,    -1,   340,    -1,
9237:       -1,    -1,  2004,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9238:     1674,  1365,  1293,    -1,    -1,  2385,    -1,    -1,    -1,    -1,
9239:       -1,   108,   109,   471,    -1,  1865,   474,   475,   476,    -1,
9240:      478,   479,   480,   481,   482,   483,    -1,     8,    -1,    -1,
9241:       11,    -1,    -1,  1707,    -1,    -1,    -1,    -1,    -1,   212,
9242:     1714,    -1,   471,   395,    -1,    -1,    -1,    -1,    -1,   478,
9243:      479,   480,   481,   482,   483,  1729,    -1,    -1,    -1,  1733,
9244:       41,    -1,  1736,    -1,  1738,    -1,    -1,    48,    -1,    -1,
9245:      422,  2451,    -1,  1157,  1158,    -1,    -1,    -1,   430,    -1,
9246:       -1,    -1,  1932,    -1,    -1,   182,   183,    -1,  1172,    -1,
9247:       -1,  2569,    73,    -1,   446,    -1,   448,   449,    -1,    -1,
9248:     1950,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,  2121,
9249:     1784,    -1,    -1,    -1,    -1,  1387,  1388,    -1,    -1,    -1,
9250:       -1,    -1,    -1,    -1,    -1,  1975,  2604,    -1,  1419,    -1,
9251:       -1,    -1,  1982,   485,  1498,    -1,   488,   489,   490,    -1,
9252:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   244,   245,   246,
9253:      247,   248,   249,    -1,  2004,   252,   253,  2635,    -1,    -1,
9254:     2638,   142,    -1,    -1,  2176,    -1,    -1,  1439,    -1,    -1,
9255:     1844,    -1,    -1,    -1,    -1,  1849,    -1,  1449,    -1,    -1,
9256:     1452,  1855,  1856,  1857,  1858,    -1,    -1,    -1,    -1,  2569,
9257:       -1,   172,    -1,    -1,    -1,  1869,    -1,    -1,    -1,    -1,
9258:       -1,    -1,  1876,    -1,    -1,   186,    -1,    -1,    -1,  1293,
9259:      191,    -1,    -1,    -1,  1888,    -1,    -1,    -1,    -1,    -1,
9260:       -1,    -1,    -1,    -1,  2604,    -1,    -1,    -1,    -1,    -1,
9261:     1904,  1522,    -1,  2245,    -1,    -1,    -1,    -1,    -1,    -1,
9262:       -1,    -1,    -1,    -1,    -1,   226,  1920,  1921,    -1,    -1,
9263:     1614,  1523,  1524,    -1,    -1,  2635,    -1,    -1,  2638,   356,
9264:      357,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1943,
9265:       -1,  2121,    -1,    -1,    -1,  1566,    -1,  1549,    -1,    -1,
9266:       -1,    -1,    -1,    -1,    -1,   108,   109,    -1,    -1,    -1,
9267:     1562,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1662,    -1,
9268:      281,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
9269:      483,    -1,    -1,    -1,    -1,    -1,  1680,    -1,    -1,    -1,
9270:       -1,    -1,    -1,    -1,    -1,    -1,  2176,    -1,    -1,    -1,
9271:       -1,    -1,  1696,    -1,    -1,  1419,    -1,    -1,    -1,    -1,
9272:       -1,    -1,  2820,  2355,  2018,    -1,    -1,    -1,    -1,    -1,
9273:     1714,    -1,  2026,  2027,  2028,  2029,    -1,  2031,  2032,   182,
9274:      183,    -1,  2036,  2037,  1728,  1729,    -1,    -1,    -1,  1733,
9275:      467,   468,    -1,  2385,    -1,    -1,    -1,    -1,    -1,    -1,
9276:        8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,    -1,
9277:      371,    -1,  2066,    -1,    -1,  2245,    -1,    -1,    -1,    -1,
9278:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2082,    -1,
9279:     2084,    -1,    -1,    41,  2088,  2089,  2090,    -1,  2092,    -1,
9280:       48,   244,   245,   246,   247,   248,   249,    -1,    -1,   252,
9281:      253,    -1,    -1,    -1,  2108,    -1,  2110,    -1,  1522,  2451,
9282:     2820,    -1,    -1,    -1,    -1,    73,    -1,  1719,    -1,  2123,
9283:     2124,  2125,  2126,  2127,  2128,  2129,  2130,  2131,  2132,   555,
9284:      556,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9285:       -1,    -1,    -1,  2147,    -1,    -1,    -1,    -1,  1750,  1751,
9286:       -1,    -1,  1566,  2157,    -1,    -1,    -1,    -1,    -1,    -1,
9287:      471,    -1,    -1,    -1,  2168,    -1,    -1,   478,   479,   480,
9288:      481,   482,   483,    -1,     0,  2355,  2180,    -1,    -1,    -1,
9289:       -1,    -1,    -1,  2187,   142,    -1,    -1,    -1,    -1,    -1,
9290:       -1,    -1,   618,   619,    -1,    -1,    -1,    -1,    -1,     8,
9291:       -1,    -1,    11,   356,   357,  2385,    -1,    16,    17,    18,
9292:       -1,    -1,    -1,  1907,   172,    -1,    -1,    -1,    -1,    -1,
9293:       -1,    -1,    -1,    -1,    33,    -1,    -1,  2569,   186,    -1,
9294:       -1,  2235,    -1,   191,    -1,    -1,    -1,    -1,    -1,    -1,
9295:       -1,    -1,    -1,    -1,  1865,    -1,    -1,    -1,    -1,    -1,
9296:       -1,    -1,    -1,    -1,  2258,    -1,    -1,  2261,  2262,  2263,
9297:     2264,    -1,  2604,    -1,  2268,  2269,    92,  2271,   226,    -1,
9298:     2274,  2451,    -1,    -1,  2278,    -1,    -1,    -1,  2282,    -1,
9299:     1882,    -1,    -1,    -1,  2288,    -1,    -1,    -1,    -1,    -1,
9300:     1984,    -1,    -1,  2635,    -1,    -1,  2638,    -1,    -1,    -1,
9301:     2304,    -1,    -1,    -1,  2308,    -1,    -1,    -1,    -1,  2313,
9302:       -1,  1932,    -1,  2317,   467,   468,    -1,    -1,   144,    -1,
9303:     2014,  2325,    -1,   281,    -1,    -1,    -1,    -1,    -1,  1950,
9304:       -1,   157,    -1,    -1,   487,  2029,   162,  2031,    -1,    -1,
9305:       -1,   167,    -1,    -1,    -1,    -1,  2350,    -1,    -1,    -1,
9306:      176,    -1,    -1,   179,  1975,    -1,    -1,    -1,    -1,    -1,
9307:       -1,  1982,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9308:      796,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9309:       -1,    -1,   208,  2004,    -1,    -1,    -1,   813,    -1,  2569,
9310:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9311:       -1,   227,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,
9312:       -1,    -1,  2416,   371,   840,    -1,    -1,    -1,    -1,    -1,
9313:     2424,    -1,    -1,    -1,  2604,    -1,    -1,    -1,    -1,    -1,
9314:       -1,  2435,    -1,    -1,   860,   861,   862,    -1,    -1,   865,
9315:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9316:      276,  1865,    -1,   279,    -1,  2635,    -1,    -1,  2638,   285,
9317:       -1,   887,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9318:       -1,    -1,   281,  2167,    -1,  2479,  2480,    -1,  2820,  2483,
9319:       -1,    -1,  2486,    -1,  2488,    -1,    -1,    -1,    -1,  2493,
9320:       -1,    -1,  2496,    -1,  2498,    -1,    -1,  2501,    -1,    -1,
9321:     2121,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9322:       -1,  2515,   938,   471,   340,    -1,   942,   943,  1932,  2121,
9323:      478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,
9324:       -1,  2535,  2536,    -1,    -1,    -1,  1950,    -1,     0,    -1,
9325:     2544,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9326:       -1,    -1,    -1,    -1,    -1,  2176,    -1,    -1,    -1,    -1,
9327:       -1,  1975,    -1,    -1,    -1,    -1,  2570,  2571,  1982,   395,
9328:      996,    -1,    -1,    -1,    -1,    -1,  2580,  1003,    -1,    -1,
9329:     2584,    -1,    -1,    -1,  2278,    -1,    -1,    -1,  2282,    -1,
9330:     2004,    -1,  2596,    -1,    -1,  2599,   422,    -1,  1024,    -1,
9331:       -1,    -1,    -1,    -1,   430,    -1,    -1,    -1,    -1,    -1,
9332:       -1,    -1,  2306,  2307,  2618,    -1,    -1,    -1,    -1,    -1,
9333:      446,    -1,   448,   449,  2245,    -1,    -1,  2631,    -1,    -1,
9334:       92,    -1,  2636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9335:     2820,  2645,    -1,    -1,    -1,  2649,    -1,    -1,    -1,    -1,
9336:       -1,    -1,    -1,    -1,  2658,    -1,    -1,    -1,    -1,   485,
9337:       -1,    -1,   488,   489,   490,   474,   475,   476,    -1,   478,
9338:      479,   480,   481,   482,   483,    -1,  2680,    -1,    -1,    -1,
9339:       -1,    -1,   144,    -1,    -1,    -1,    -1,  2691,    -1,    -1,
9340:       -1,    -1,    -1,    -1,    -1,   157,    -1,    -1,    -1,    -1,
9341:      162,    -1,    -1,    -1,    -1,   167,    -1,  2121,    -1,    -1,
9342:       -1,    -1,  1138,    -1,   176,  2719,    -1,   179,    -1,    -1,
9343:       -1,    -1,    -1,    -1,  2728,    -1,    -1,    -1,  2732,    -1,
9344:       -1,  2425,  2736,    -1,  2355,    -1,    -1,    -1,    -1,    -1,
9345:       -1,    -1,  2344,    -1,    -1,    -1,   208,  2349,  2752,  2753,
9346:     2754,  2755,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9347:       -1,    -1,  2176,    -1,  2385,   227,    -1,    -1,    -1,    -1,
9348:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9349:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2391,
9350:     2392,    -1,  2796,    -1,  2488,     8,    -1,    -1,    11,  2493,
9351:       -1,  2805,  2496,  2807,    -1,    -1,    -1,    -1,    -1,    -1,
9352:       -1,    -1,  2816,    -1,   276,    -1,    -1,   279,     8,    -1,
9353:       -1,    11,    -1,   285,  1250,    -1,  2830,    -1,    41,    -1,
9354:     2451,  2245,  2836,    -1,  1260,    48,  1262,    -1,    -1,  1265,
9355:     1266,  1267,  1268,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9356:     2854,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,
9357:       73,    -1,  1288,    -1,    -1,    -1,    -1,    -1,  1294,  1295,
9358:     1296,  1297,    -1,    -1,    -1,    -1,  1302,  1303,   340,    -1,
9359:       -1,  1307,    -1,    73,  2578,  1311,    -1,    -1,  1314,  1315,
9360:     1316,  1317,  1318,  1319,  1320,  1321,  1322,    -1,    -1,  1325,
9361:       -1,    -1,    -1,    -1,  1330,    -1,  2600,  1333,    -1,  1335,
9362:       -1,  1337,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9363:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   142,
9364:       -1,    -1,    -1,   395,  1360,   880,    -1,  2631,    -1,    -1,
9365:       -1,  2355,    -1,    -1,    -1,  2639,    -1,    -1,  2569,    -1,
9366:       -1,    -1,   142,    -1,    -1,    -1,  2558,  2559,    -1,   172,
9367:      422,  1387,  1388,    -1,    -1,    -1,    -1,  2569,   430,    -1,
9368:       -1,  2385,    -1,   186,    -1,   920,    -1,    -1,   191,    -1,
9369:       -1,    -1,   172,  2604,   446,    -1,   448,   449,    -1,    -1,
9370:       -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,  2692,    -1,
9371:       -1,   191,    -1,     0,    -1,    -1,    -1,    -1,    -1,    -1,
9372:       -1,    -1,    -1,   226,  2635,    -1,    -1,  2638,    -1,    -1,
9373:       -1,    -1,    19,   485,    -1,    -1,   488,   489,   490,    -1,
9374:       -1,    -1,    29,    -1,    31,    32,   226,  2451,    -1,    -1,
9375:     1466,    -1,    -1,  1469,  1470,    -1,  1472,    -1,    -1,    -1,
9376:       47,    -1,    -1,    -1,  2748,    -1,    -1,    -1,    -1,    56,
9377:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,
9378:       -1,    68,    -1,    -1,    -1,    -1,  1502,    -1,    -1,    -1,
9379:       -1,    -1,    79,  1028,    -1,    -1,    -1,    -1,    -1,    -1,
9380:     1035,   281,    -1,    90,    -1,    92,    -1,    -1,    -1,    -1,
9381:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9382:       -1,    -1,    -1,   110,    -1,    -1,    -1,    -1,    -1,    -1,
9383:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   124,    -1,    -1,
9384:       -1,    -1,    -1,    -1,    -1,  2829,    -1,   134,  1564,    -1,
9385:       -1,    -1,    -1,   140,    -1,  1571,    -1,    -1,    -1,    -1,
9386:     1576,   148,    -1,   150,   151,  2569,    -1,    -1,   371,    -1,
9387:       -1,    -1,    -1,    -1,    36,    -1,   163,    -1,    -1,    -1,
9388:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9389:       -1,   371,    -1,    55,    -1,    -1,    -1,    -1,  1614,    -1,
9390:     2604,    -1,    -1,   190,    -1,    -1,    -1,    -1,    -1,  2820,
9391:     1626,    -1,  1628,  1629,    -1,    -1,    -1,    -1,    -1,    -1,
9392:     1636,    -1,    -1,    -1,  1640,    -1,    -1,  1643,  2820,    -1,
9393:       -1,  2635,    -1,    -1,  2638,    -1,    -1,    -1,    -1,    -1,
9394:       -1,    -1,   229,   105,   106,    -1,    -1,    -1,    -1,    -1,
9395:       -1,    -1,   114,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9396:     1676,    -1,    -1,  1679,    -1,  1681,    -1,    -1,   471,    -1,
9397:       -1,    -1,    -1,    -1,    -1,   478,   479,   480,   481,   482,
9398:      483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9399:       -1,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
9400:      480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,   171,
9401:       -1,    -1,    -1,  1248,    -1,    -1,    -1,    -1,    -1,   306,
9402:       -1,    -1,   309,    -1,  1259,    -1,    -1,  1743,  1263,     8,
9403:       -1,   193,    11,    -1,  1269,  1270,  1271,    16,    17,    18,
9404:       -1,    -1,  1758,  1278,    -1,    -1,    -1,    -1,    -1,    -1,
9405:      337,    -1,    -1,    -1,    33,    -1,    -1,    -1,   345,    -1,
9406:     1776,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
9407:       -1,    -1,   359,    -1,    -1,    -1,    -1,    -1,    -1,   366,
9408:      242,    -1,     8,   370,    -1,    11,    -1,    -1,   250,    -1,
9409:       16,    17,    18,   380,    73,    -1,    -1,  1332,    -1,    -1,
9410:      262,    -1,   264,    -1,   391,    -1,    -1,    33,   395,    -1,
9411:       -1,    -1,    -1,    -1,    -1,    41,  2820,    -1,  1834,    -1,
9412:       -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    23,
9413:       -1,   293,    -1,    -1,    -1,    29,    -1,    -1,    -1,  1374,
9414:        3,    -1,    36,    -1,   431,     8,    -1,    73,    11,   436,
9415:       -1,  1386,    -1,    16,    17,    18,  1391,    -1,    -1,    -1,
9416:       -1,    55,   449,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9417:       33,    -1,    -1,    36,    -1,    -1,   338,    -1,    41,    -1,
9418:       -1,    -1,    -1,    -1,    -1,    48,   473,    -1,    -1,    -1,
9419:       -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,   360,    -1,
9420:      487,    -1,    -1,   490,    -1,    -1,    -1,   186,    -1,    -1,
9421:       73,   105,   191,  1929,    -1,    -1,    -1,    -1,   380,    -1,
9422:      382,    -1,  1938,   385,    -1,  1941,    -1,    -1,  1944,    -1,
9423:       -1,    -1,    -1,   212,   213,    -1,    -1,    -1,    -1,    -1,
9424:      134,    -1,    -1,    -1,    -1,    -1,   172,   226,    -1,    -1,
9425:       -1,    -1,    -1,    -1,  1970,  1971,    -1,    -1,    -1,    -1,
9426:      186,    -1,    -1,    -1,    -1,   191,    -1,    -1,  1984,    -1,
9427:       -1,    -1,    -1,    -1,    -1,    -1,  1992,    -1,    -1,  1995,
9428:       -1,  1997,    -1,    -1,    -1,   264,   212,   213,   267,  2005,
9429:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2013,  2014,   193,
9430:      226,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,   172,
9431:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9432:       -1,    -1,    -1,   186,    -1,   487,  2042,    -1,   191,    -1,
9433:       -1,    -1,    -1,    -1,    -1,    -1,  2052,    -1,   264,  1574,
9434:       -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,   242,   212,
9435:      213,    -1,  2068,    -1,    -1,   281,   250,    -1,  1593,    -1,
9436:       -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,   262,    -1,
9437:       -1,    -1,    -1,    -1,    -1,  1610,    -1,  1612,  1613,    -1,
9438:     1615,    -1,  1617,    -1,    -1,    -1,    -1,  1622,    -1,   283,
9439:     1625,    -1,   371,    -1,    -1,  1630,    -1,    -1,  1633,   293,
9440:       -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,  1644,
9441:       -1,    -1,    -1,  1648,  1649,  1650,  1651,    -1,   281,    -1,
9442:       -1,   284,  1657,  1658,    -1,  1660,  1661,    -1,    -1,    -1,
9443:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1672,    -1,   333,
9444:     1675,    -1,    -1,   337,   338,   371,    -1,    -1,  1683,  1684,
9445:     1685,  1686,  1687,  1688,  1689,  1690,  1691,  1692,    -1,    -1,
9446:       -1,    -1,    -1,    -1,    -1,  1700,   360,    -1,    -1,  1704,
9447:       -1,    -1,   366,    -1,    -1,    -1,    -1,  2193,    -1,    -1,
9448:       -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,
9449:       -1,  1726,   471,    -1,    -1,   474,   475,   476,    -1,   478,
9450:      479,   480,   481,   482,   483,    -1,    -1,    -1,   371,    -1,
9451:       -1,    -1,   491,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9452:       -1,    -1,    -1,  2239,  2240,    -1,    -1,    -1,  2244,    -1,
9453:       -1,    -1,    -1,  2249,    -1,    -1,  2252,  2253,    -1,   433,
9454:       -1,  2257,    -1,    -1,    -1,   471,    -1,    -1,   474,   475,
9455:      476,    -1,   478,   479,   480,   481,   482,   483,    -1,    -1,
9456:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9457:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9458:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2304,    -1,
9459:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9460:       -1,    -1,  1837,  1838,  1839,    -1,    -1,    -1,   471,    -1,
9461:       -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
9462:      483,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,
9463:     2346,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,  1874,
9464:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9465:       33,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,    -1,
9466:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,     8,
9467:       -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
9468:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9469:       73,    -1,    -1,  1928,    33,    -1,    -1,    -1,    -1,  1934,
9470:       -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
9471:       -1,    -1,  1947,  1948,  1949,    -1,  1951,  1952,  1953,  1954,
9472:       -1,    -1,  1957,  1958,  1959,  1960,  1961,  1962,  1963,  1964,
9473:     1965,  1966,  1967,    -1,    73,    -1,    -1,    -1,    -1,  2455,
9474:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2463,  2464,    -1,
9475:     1985,  2467,    -1,  1988,    -1,  1990,    -1,    -1,  1993,  1994,
9476:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9477:       -1,    -1,  2007,  2008,  2009,  2010,    -1,  2012,    -1,    -1,
9478:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2503,  2504,   172,
9479:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9480:       -1,  2517,    -1,   186,    -1,    -1,    -1,    -1,   191,    -1,
9481:       -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    16,
9482:       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   212,
9483:      213,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,
9484:       -1,    -1,    -1,   226,    41,    -1,    -1,   186,    -1,    -1,
9485:     2085,    48,   191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9486:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9487:       -1,    -1,    -1,   212,   213,    -1,    73,    -1,    -1,    -1,
9488:       -1,   264,    -1,    -1,   267,    -1,    -1,   226,    -1,    -1,
9489:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,
9490:       -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9491:       -1,  2627,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9492:       -1,    -1,    -1,  2639,    -1,   264,    -1,    -1,   267,    -1,
9493:       -1,    -1,    -1,    -1,  2650,    -1,    -1,    -1,    -1,    -1,
9494:       -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,  2665,
9495:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2194,
9496:       -1,    -1,    -1,  2198,  2199,    -1,  2201,    -1,    -1,  2204,
9497:     2205,  2206,  2207,    -1,    -1,   172,  2211,  2212,  2213,  2214,
9498:     2215,  2216,  2217,  2218,  2219,  2220,  2221,  2222,   371,   186,
9499:       21,    -1,    -1,    -1,   191,    -1,    -1,  2232,    -1,    -1,
9500:       -1,    -1,    -1,  2238,    -1,    -1,  2241,    -1,  2243,    -1,
9501:       -1,    -1,  2247,    -1,    -1,  2250,  2251,    -1,    -1,  2254,
9502:     2255,    -1,    -1,    -1,    -1,  2741,    -1,    -1,    -1,   226,
9503:       -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9504:       -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
9505:       -1,    -1,    -1,    -1,    -1,    -1,  2772,    -1,    89,    -1,
9506:     2295,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2303,    -1,
9507:       -1,    -1,    -1,    -1,    -1,  2791,  2792,    -1,    -1,    -1,
9508:       -1,  2316,    -1,    -1,   281,    -1,    -1,    -1,   471,    -1,
9509:       -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
9510:      483,    -1,    -1,    -1,    -1,   488,    -1,    -1,    -1,    -1,
9511:       -1,    -1,   143,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9512:       -1,   152,  2838,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9513:       -1,    -1,   471,   164,    -1,   474,   475,   476,   169,   478,
9514:      479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,   488,
9515:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9516:       -1,    -1,    -1,   194,    -1,    -1,    -1,    -1,    -1,    -1,
9517:       -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,
9518:       -1,    -1,    -1,    -1,  2900,    -1,    -1,    -1,    -1,    -1,
9519:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9520:       -1,    -1,    -1,    -1,    -1,    -1,   237,    -1,    -1,  2444,
9521:      241,    -1,    -1,  2448,    -1,    -1,    -1,    -1,    -1,    -1,
9522:       -1,    -1,  2457,  2458,  2459,    -1,    -1,  2462,    -1,    -1,
9523:     2465,  2466,    -1,    -1,    -1,  2470,    -1,    -1,    -1,    -1,
9524:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9525:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9526:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9527:       -1,    -1,    -1,   304,   471,    -1,    -1,   474,   475,   476,
9528:       -1,   478,   479,   480,   481,   482,   483,   318,    -1,    -1,
9529:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9530:       -1,    -1,  2537,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9531:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   349,    -1,
9532:     2555,   352,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   360,
9533:       -1,    -1,   363,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9534:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9535:       -1,   382,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9536:       -1,    -1,    -1,    -1,   395,    -1,    -1,  2602,  2603,    -1,
9537:       -1,   402,    -1,  2608,  2609,  2610,    -1,    -1,    -1,    -1,
9538:      411,    -1,    -1,    -1,    -1,    -1,   417,    -1,    -1,    -1,
9539:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9540:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2643,  2644,
9541:       -1,   442,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9542:       -1,  2656,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9543:       -1,    -1,    -1,  2668,    -1,    -1,    -1,    -1,    -1,    -1,
9544:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9545:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9546:       -1,    -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,
9547:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,  2713,    -1,
9548:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
9549:       28,    29,    30,    -1,    -1,    -1,  2731,    35,    -1,    -1,
9550:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
9551:       48,    49,    50,    51,    52,  2750,    54,    55,    56,    57,
9552:       58,    59,    60,    61,    62,    63,    64,    65,    66,  2764,
9553:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
9554:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
9555:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
9556:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
9557:      108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
9558:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
9559:      128,   129,  2827,   131,   132,   133,   134,   135,    -1,   137,
9560:      138,   139,    -1,   141,   142,   143,  2841,   145,   146,   147,
9561:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
9562:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
9563:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
9564:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
9565:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
9566:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
9567:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
9568:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
9569:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
9570:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
9571:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
9572:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
9573:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
9574:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
9575:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
9576:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
9577:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
9578:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
9579:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
9580:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
9581:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
9582:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
9583:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
9584:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
9585:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,   397,
9586:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
9587:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
9588:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
9589:      428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
9590:      438,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
9591:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
9592:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
9593:      468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
9594:      478,   479,   480,    -1,    -1,    -1,    -1,   485,    -1,   487,
9595:      488,    -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,
9596:        5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
9597:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
9598:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
9599:       35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
9600:       45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
9601:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
9602:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
9603:       -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
9604:       -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
9605:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
9606:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
9607:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
9608:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
9609:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
9610:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
9611:      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
9612:      165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
9613:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
9614:      185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
9615:      195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
9616:      205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
9617:      215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
9618:      225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
9619:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
9620:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
9621:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
9622:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
9623:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
9624:       -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
9625:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
9626:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
9627:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
9628:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
9629:      335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
9630:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
9631:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
9632:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
9633:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
9634:      385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
9635:      395,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
9636:      405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
9637:      415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
9638:      425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
9639:      435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
9640:       -1,    -1,   447,    -1,   449,   450,   451,   452,   453,   454,
9641:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
9642:      465,   466,   467,   468,   469,   470,   471,    -1,   473,    -1,
9643:       -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,
9644:      485,    -1,   487,   488,    -1,    -1,    -1,   492,    -1,   494,
9645:      495,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
9646:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
9647:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
9648:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
9649:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
9650:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
9651:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
9652:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
9653:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
9654:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
9655:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
9656:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
9657:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
9658:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
9659:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
9660:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
9661:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
9662:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
9663:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
9664:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
9665:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
9666:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
9667:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
9668:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
9669:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
9670:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
9671:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
9672:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
9673:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
9674:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
9675:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
9676:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
9677:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
9678:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
9679:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
9680:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9681:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
9682:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
9683:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
9684:       -1,   393,   394,   395,   396,   397,   398,   399,   400,   401,
9685:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
9686:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
9687:       -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
9688:      432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
9689:      442,   443,   444,    -1,    -1,   447,    -1,   449,   450,   451,
9690:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
9691:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
9692:       -1,   473,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
9693:       -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,
9694:      492,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
9695:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9696:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
9697:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
9698:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
9699:       49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
9700:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
9701:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
9702:       79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
9703:       89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
9704:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
9705:      109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
9706:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
9707:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
9708:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
9709:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
9710:      159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,
9711:      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
9712:       -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
9713:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
9714:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
9715:      209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
9716:      219,   220,    -1,   222,   223,   224,   225,   226,    -1,   228,
9717:      229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
9718:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
9719:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
9720:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
9721:      269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
9722:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
9723:      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
9724:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
9725:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
9726:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
9727:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
9728:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
9729:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
9730:       -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
9731:      369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
9732:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
9733:      389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
9734:      399,   400,   401,   402,    -1,   404,   405,    -1,   407,   408,
9735:      409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
9736:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
9737:      429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
9738:      439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
9739:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
9740:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
9741:      469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,
9742:      479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,
9743:       -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,     5,
9744:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
9745:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
9746:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
9747:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
9748:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
9749:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
9750:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
9751:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
9752:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
9753:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
9754:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
9755:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
9756:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
9757:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
9758:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
9759:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
9760:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
9761:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
9762:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
9763:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
9764:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
9765:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
9766:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
9767:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
9768:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
9769:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
9770:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
9771:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
9772:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
9773:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
9774:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
9775:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
9776:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
9777:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
9778:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
9779:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
9780:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
9781:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
9782:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
9783:      396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
9784:       -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
9785:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
9786:      426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
9787:      436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
9788:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
9789:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
9790:      466,   467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,
9791:       -1,    -1,   478,   479,   480,    -1,    -1,    -1,    -1,   485,
9792:       -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,
9793:        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
9794:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
9795:       23,    24,    25,    26,    27,    28,    29,    30,    -1,    -1,
9796:       -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
9797:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
9798:       -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
9799:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
9800:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
9801:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
9802:       93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
9803:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
9804:      113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
9805:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
9806:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
9807:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
9808:      153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
9809:      163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
9810:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
9811:      183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
9812:      193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
9813:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
9814:      213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
9815:      223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
9816:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
9817:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
9818:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
9819:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
9820:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
9821:      283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
9822:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
9823:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
9824:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
9825:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
9826:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
9827:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
9828:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
9829:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
9830:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
9831:      383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
9832:      393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
9833:       -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
9834:      413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
9835:       -1,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
9836:      433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
9837:      443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
9838:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
9839:      463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
9840:       -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,
9841:       -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,
9842:       -1,   494,   495,     3,     4,     5,     6,     7,     8,     9,
9843:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
9844:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
9845:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
9846:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
9847:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
9848:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
9849:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
9850:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
9851:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
9852:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
9853:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
9854:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
9855:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
9856:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
9857:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
9858:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
9859:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
9860:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
9861:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
9862:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
9863:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
9864:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
9865:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
9866:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
9867:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
9868:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
9869:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
9870:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
9871:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
9872:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
9873:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
9874:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
9875:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
9876:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
9877:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
9878:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
9879:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
9880:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
9881:      390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
9882:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
9883:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
9884:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
9885:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
9886:      440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
9887:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
9888:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
9889:      470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
9890:       -1,    -1,    -1,    -1,    -1,   485,    -1,   487,   488,    -1,
9891:       -1,    -1,   492,    -1,   494,   495,     3,     4,     5,     6,
9892:        7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
9893:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
9894:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
9895:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
9896:       47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
9897:       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
9898:       -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
9899:       77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
9900:       87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
9901:       97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
9902:      107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
9903:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
9904:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
9905:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
9906:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
9907:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
9908:       -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
9909:      177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
9910:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
9911:      197,    -1,   199,   200,   201,   202,   203,   204,   205,   206,
9912:      207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
9913:      217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
9914:       -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
9915:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
9916:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
9917:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
9918:      267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
9919:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
9920:      287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
9921:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
9922:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
9923:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
9924:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
9925:      337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
9926:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
9927:      357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
9928:      367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
9929:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
9930:      387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
9931:      397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
9932:       -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
9933:      417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
9934:      427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
9935:      437,    -1,   439,   440,   441,   442,   443,   444,    -1,    -1,
9936:      447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
9937:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
9938:      467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,
9939:       -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,
9940:      487,   488,    -1,    -1,    -1,   492,    -1,   494,   495,     3,
9941:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
9942:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
9943:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
9944:       -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
9945:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
9946:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
9947:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
9948:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
9949:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
9950:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
9951:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
9952:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
9953:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
9954:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
9955:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
9956:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
9957:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
9958:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
9959:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
9960:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
9961:      204,   205,   206,   207,    -1,   209,    -1,   211,   212,   213,
9962:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
9963:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
9964:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
9965:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
9966:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
9967:      264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
9968:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
9969:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
9970:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
9971:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
9972:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
9973:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
9974:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
9975:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
9976:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
9977:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
9978:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
9979:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
9980:      394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
9981:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
9982:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
9983:      424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
9984:      434,   435,   436,   437,   438,   439,   440,   441,   442,   443,
9985:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
9986:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
9987:      464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
9988:       -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,
9989:       -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,    -1,
9990:      494,   495,     3,     4,     5,     6,     7,     8,     9,    10,
9991:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
9992:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
9993:       -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,
9994:       41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
9995:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
9996:       61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
9997:       71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
9998:       81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
9999:       91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
10000:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
10001:      111,   112,   113,   114,   115,    -1,   117,   118,   119,   120,
10002:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10003:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10004:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10005:      151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
10006:      161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,
10007:      171,   172,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10008:      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
10009:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
10010:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10011:      211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
10012:       -1,    -1,   223,   224,   225,   226,    -1,   228,   229,   230,
10013:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
10014:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10015:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
10016:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
10017:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
10018:      281,   282,   283,    -1,    -1,   286,   287,   288,   289,   290,
10019:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10020:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10021:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10022:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10023:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10024:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
10025:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
10026:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
10027:      371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10028:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10029:      391,    -1,   393,   394,    -1,   396,   397,   398,   399,   400,
10030:      401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
10031:      411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
10032:      421,    -1,    -1,   424,   425,   426,   427,   428,   429,    -1,
10033:      431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
10034:      441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
10035:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10036:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
10037:      471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,
10038:       -1,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,
10039:       -1,   492,    -1,   494,   495,     3,     4,     5,     6,     7,
10040:        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10041:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
10042:       28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,
10043:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
10044:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
10045:       58,    59,    60,    61,    62,    63,    64,    65,    66,    -1,
10046:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
10047:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
10048:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    97,
10049:       98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
10050:      108,   109,   110,   111,   112,   113,   114,   115,    -1,   117,
10051:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
10052:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
10053:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
10054:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
10055:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
10056:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
10057:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
10058:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
10059:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
10060:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
10061:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
10062:      228,   229,   230,   231,   232,   233,   234,   235,   236,   237,
10063:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
10064:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
10065:      258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
10066:      268,   269,   270,   271,   272,   273,   274,   275,    -1,   277,
10067:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
10068:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
10069:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
10070:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
10071:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
10072:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
10073:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
10074:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
10075:      358,    -1,   360,   361,   362,   363,   364,   365,   366,   367,
10076:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
10077:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
10078:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,   397,
10079:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
10080:      408,   409,   410,   411,   412,   413,   414,   415,   416,   417,
10081:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
10082:      428,   429,    -1,   431,   432,   433,   434,   435,   436,   437,
10083:       -1,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
10084:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
10085:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
10086:      468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,
10087:      478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,
10088:       -1,    -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,
10089:        5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,
10090:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
10091:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
10092:       35,    -1,    -1,    38,    39,    -1,    41,    42,    43,    44,
10093:       45,    46,    47,    48,    49,    50,    51,    52,    -1,    54,
10094:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
10095:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    74,
10096:       -1,    76,    77,    78,    79,    80,    81,    82,    83,    84,
10097:       -1,    86,    87,    88,    89,    90,    91,    -1,    93,    94,
10098:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
10099:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
10100:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
10101:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
10102:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
10103:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
10104:      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
10105:      165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,
10106:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
10107:      185,   186,   187,   188,   189,   190,    -1,   192,   193,   194,
10108:      195,   196,   197,    -1,   199,   200,   201,   202,   203,   204,
10109:      205,   206,   207,    -1,   209,    -1,   211,   212,   213,   214,
10110:      215,   216,   217,   218,   219,   220,    -1,    -1,   223,   224,
10111:      225,   226,    -1,   228,   229,   230,   231,   232,   233,   234,
10112:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
10113:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
10114:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
10115:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
10116:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
10117:       -1,   286,   287,   288,   289,   290,   291,   292,   293,   294,
10118:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
10119:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
10120:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
10121:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
10122:      335,   336,   337,   338,   339,    -1,   341,   342,   343,   344,
10123:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
10124:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
10125:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
10126:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
10127:      385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
10128:       -1,   396,   397,   398,   399,   400,   401,   402,    -1,   404,
10129:      405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
10130:      415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
10131:      425,   426,   427,   428,   429,    -1,   431,   432,   433,   434,
10132:      435,   436,   437,    -1,   439,   440,   441,   442,   443,   444,
10133:       -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,   454,
10134:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
10135:      465,   466,   467,   468,   469,   470,   471,    -1,    -1,    -1,
10136:       -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,
10137:      485,    -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,
10138:      495,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
10139:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
10140:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10141:       -1,    -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,
10142:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10143:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10144:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10145:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10146:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
10147:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
10148:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10149:      112,   113,   114,   115,    -1,   117,   118,   119,   120,   121,
10150:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
10151:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
10152:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
10153:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
10154:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
10155:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
10156:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
10157:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
10158:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
10159:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
10160:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
10161:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10162:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10163:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10164:      262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
10165:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
10166:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
10167:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10168:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
10169:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
10170:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
10171:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
10172:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
10173:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
10174:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10175:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
10176:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
10177:       -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
10178:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
10179:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
10180:       -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
10181:      432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
10182:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
10183:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
10184:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
10185:       -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
10186:       -1,    -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,
10187:      492,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
10188:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10189:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10190:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10191:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10192:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10193:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10194:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10195:       79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
10196:       89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
10197:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10198:      109,   110,   111,   112,   113,   114,   115,    -1,   117,   118,
10199:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10200:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10201:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10202:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
10203:      159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
10204:      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
10205:       -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
10206:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10207:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
10208:      209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
10209:      219,   220,    -1,    -1,   223,   224,   225,   226,    -1,   228,
10210:      229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
10211:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10212:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10213:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10214:      269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10215:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
10216:      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
10217:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10218:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10219:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10220:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10221:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
10222:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10223:       -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
10224:      369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
10225:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10226:      389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
10227:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
10228:      409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
10229:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
10230:      429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
10231:      439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
10232:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10233:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10234:      469,   470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,
10235:      479,    -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,
10236:       -1,    -1,    -1,   492,    -1,   494,   495,     3,     4,     5,
10237:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
10238:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
10239:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
10240:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
10241:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
10242:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
10243:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
10244:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
10245:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
10246:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
10247:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
10248:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
10249:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
10250:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
10251:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
10252:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
10253:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
10254:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
10255:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
10256:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
10257:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
10258:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
10259:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
10260:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
10261:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
10262:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
10263:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
10264:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
10265:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
10266:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
10267:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
10268:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
10269:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
10270:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
10271:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
10272:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
10273:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
10274:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
10275:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
10276:      396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
10277:       -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
10278:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
10279:      426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
10280:      436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
10281:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
10282:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
10283:      466,   467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,
10284:       -1,    -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,
10285:       -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,
10286:        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
10287:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
10288:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
10289:       -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
10290:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
10291:       -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
10292:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
10293:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
10294:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
10295:       93,    94,    95,    96,    97,    98,    99,   100,   101,   102,
10296:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
10297:      113,   114,   115,    -1,   117,   118,   119,   120,   121,   122,
10298:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
10299:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
10300:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
10301:      153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
10302:      163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
10303:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
10304:      183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
10305:      193,   194,   195,   196,   197,    -1,   199,   200,   201,   202,
10306:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
10307:      213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
10308:      223,   224,   225,   226,    -1,   228,   229,   230,   231,   232,
10309:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
10310:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
10311:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
10312:      263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
10313:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
10314:      283,    -1,    -1,   286,   287,   288,   289,   290,   291,   292,
10315:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
10316:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
10317:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
10318:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
10319:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
10320:      343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
10321:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
10322:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
10323:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
10324:      383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
10325:      393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
10326:       -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
10327:      413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
10328:       -1,   424,   425,   426,   427,   428,   429,    -1,   431,   432,
10329:      433,   434,   435,   436,   437,    -1,   439,   440,   441,   442,
10330:      443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
10331:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
10332:      463,   464,   465,   466,   467,   468,   469,   470,   471,    -1,
10333:       -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,
10334:       -1,    -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,
10335:       -1,   494,   495,     3,     4,     5,     6,     7,     8,     9,
10336:       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
10337:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
10338:       30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,    39,
10339:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
10340:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
10341:       60,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
10342:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
10343:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
10344:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
10345:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
10346:      110,   111,   112,   113,   114,   115,    -1,   117,   118,   119,
10347:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
10348:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
10349:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
10350:      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,
10351:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
10352:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
10353:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
10354:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
10355:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
10356:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
10357:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
10358:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
10359:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
10360:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
10361:      260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
10362:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
10363:       -1,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
10364:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
10365:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
10366:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
10367:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
10368:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
10369:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
10370:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
10371:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
10372:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
10373:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
10374:      390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
10375:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
10376:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
10377:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
10378:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
10379:      440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
10380:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
10381:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
10382:      470,   471,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,
10383:       -1,    -1,    -1,    -1,    -1,   485,    -1,   487,    -1,    -1,
10384:       -1,    -1,   492,    -1,   494,   495,     3,     4,     5,     6,
10385:        7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,
10386:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
10387:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,    -1,
10388:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
10389:       47,    48,    49,    50,    51,    52,    -1,    54,    55,    56,
10390:       57,    58,    59,    60,    61,    62,    63,    64,    65,    66,
10391:       -1,    68,    69,    70,    71,    72,    -1,    74,    -1,    76,
10392:       77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
10393:       87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
10394:       97,    98,    99,   100,   101,   102,   103,   104,   105,   106,
10395:      107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
10396:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
10397:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
10398:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
10399:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
10400:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
10401:       -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
10402:      177,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
10403:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
10404:      197,    -1,   199,   200,   201,   202,   203,   204,   205,   206,
10405:      207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
10406:      217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
10407:       -1,   228,   229,   230,   231,   232,   233,   234,   235,   236,
10408:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
10409:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
10410:      257,   258,   259,   260,   261,   262,   263,   264,   265,   266,
10411:      267,   268,   269,   270,   271,   272,   273,   274,   275,    -1,
10412:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
10413:      287,   288,   289,   290,   291,   292,   293,   294,   295,   296,
10414:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
10415:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
10416:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
10417:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
10418:      337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
10419:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
10420:      357,   358,    -1,   360,   361,   362,   363,   364,   365,   366,
10421:      367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
10422:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
10423:      387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
10424:      397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
10425:       -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
10426:      417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
10427:      427,   428,   429,    -1,   431,   432,   433,   434,   435,   436,
10428:      437,    -1,   439,   440,   441,   442,   443,   444,    -1,    -1,
10429:      447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
10430:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
10431:      467,   468,   469,   470,   471,    -1,    -1,    -1,    -1,    -1,
10432:       -1,   478,   479,    -1,    -1,    -1,    -1,    -1,   485,    -1,
10433:      487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,     3,
10434:        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
10435:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
10436:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
10437:       -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,    43,
10438:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
10439:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
10440:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
10441:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
10442:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    93,
10443:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
10444:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
10445:      114,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
10446:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
10447:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
10448:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
10449:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
10450:       -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,
10451:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
10452:      184,   185,   186,   187,   188,   189,   190,    -1,   192,   193,
10453:      194,   195,   196,   197,    -1,   199,   200,   201,   202,   203,
10454:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
10455:      214,   215,   216,   217,   218,   219,   220,    -1,    -1,   223,
10456:      224,   225,   226,    -1,   228,   229,   230,   231,   232,   233,
10457:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
10458:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
10459:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
10460:       -1,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
10461:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
10462:       -1,    -1,   286,   287,   288,   289,   290,   291,   292,   293,
10463:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
10464:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
10465:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
10466:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
10467:      334,   335,   336,   337,   338,   339,    -1,   341,   342,   343,
10468:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
10469:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
10470:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
10471:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
10472:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
10473:      394,    -1,   396,   397,   398,   399,   400,   401,   402,    -1,
10474:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
10475:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
10476:      424,   425,   426,   427,   428,   429,    -1,   431,   432,   433,
10477:      434,   435,   436,   437,    -1,   439,   440,   441,   442,   443,
10478:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
10479:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
10480:      464,   465,   466,   467,   468,   469,   470,   471,    -1,    -1,
10481:       -1,    -1,    -1,    -1,   478,   479,    -1,    -1,    -1,    -1,
10482:       -1,   485,    -1,   487,    -1,    -1,    -1,    -1,   492,    -1,
10483:      494,   495,     3,     4,     5,     6,     7,     8,     9,    10,
10484:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
10485:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
10486:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
10487:       41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
10488:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    60,
10489:       61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
10490:       71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
10491:       81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
10492:       91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
10493:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
10494:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
10495:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10496:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10497:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10498:      151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,
10499:      161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
10500:      171,   172,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10501:      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
10502:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
10503:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10504:      211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
10505:       -1,    -1,   223,   224,   225,   226,    -1,   228,   229,   230,
10506:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
10507:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10508:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
10509:      261,   262,   263,    -1,   265,   266,   267,   268,   269,   270,
10510:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
10511:      281,   282,   283,    -1,    -1,   286,   287,   288,   289,   290,
10512:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10513:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10514:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10515:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10516:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10517:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
10518:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
10519:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
10520:      371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10521:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10522:      391,    -1,   393,   394,    -1,   396,   397,   398,   399,   400,
10523:      401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
10524:      411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
10525:      421,    -1,    -1,   424,   425,   426,   427,   428,   429,    -1,
10526:      431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
10527:      441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
10528:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10529:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
10530:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,
10531:       -1,     3,     4,     5,     6,     7,   487,     9,    10,    -1,
10532:       -1,    -1,    -1,   494,   495,    -1,    -1,    19,    20,    21,
10533:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10534:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
10535:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10536:       52,    -1,    54,    55,    56,    57,    58,    59,    60,    61,
10537:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10538:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10539:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
10540:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
10541:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10542:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
10543:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
10544:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
10545:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
10546:      152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,
10547:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
10548:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
10549:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
10550:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
10551:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
10552:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
10553:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
10554:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10555:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10556:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10557:      262,   263,    -1,   265,   266,   267,   268,   269,   270,   271,
10558:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
10559:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
10560:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10561:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
10562:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
10563:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
10564:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
10565:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
10566:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
10567:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10568:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
10569:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
10570:       -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
10571:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
10572:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
10573:       -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
10574:      432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
10575:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
10576:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
10577:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
10578:       -1,    -1,    -1,    -1,    -1,    -1,   478,   479,    -1,    -1,
10579:       -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,
10580:       -1,    -1,   494,   495,     3,     4,     5,     6,     7,     8,
10581:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10582:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10583:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
10584:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10585:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10586:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10587:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10588:       79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
10589:       89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
10590:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10591:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
10592:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10593:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10594:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10595:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
10596:      159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
10597:      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
10598:       -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
10599:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10600:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
10601:      209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
10602:      219,   220,    -1,    -1,   223,   224,   225,   226,    -1,   228,
10603:      229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
10604:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10605:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10606:      259,   260,   261,   262,   263,    -1,   265,   266,   267,   268,
10607:      269,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10608:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,   288,
10609:      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
10610:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10611:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10612:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10613:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10614:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
10615:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10616:       -1,   360,   361,   362,   363,   364,   365,   366,   367,   368,
10617:      369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
10618:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10619:      389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
10620:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
10621:      409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
10622:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
10623:      429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
10624:      439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
10625:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10626:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10627:      469,   470,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,
10628:      479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    -1,
10629:       -1,    -1,    -1,    -1,    -1,   494,   495,     3,     4,     5,
10630:        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
10631:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
10632:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    35,
10633:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
10634:       46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
10635:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
10636:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
10637:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
10638:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
10639:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
10640:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
10641:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
10642:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
10643:       -1,   137,   138,   139,    -1,   141,    -1,   143,    -1,   145,
10644:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
10645:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
10646:      166,    -1,   168,   169,   170,   171,    -1,   173,    -1,   175,
10647:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
10648:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
10649:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
10650:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,   215,
10651:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
10652:       -1,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
10653:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
10654:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
10655:      256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
10656:      266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,
10657:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
10658:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
10659:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
10660:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
10661:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
10662:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
10663:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
10664:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
10665:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
10666:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
10667:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
10668:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
10669:      396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
10670:       -1,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
10671:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
10672:      426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
10673:      436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
10674:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
10675:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
10676:      466,   467,   468,   469,   470,    -1,    -1,    -1,    -1,    -1,
10677:       -1,    -1,   478,   479,     3,    -1,    -1,    -1,    -1,   485,
10678:       -1,   487,    -1,    -1,    -1,    -1,   492,    -1,   494,   495,
10679:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10680:       29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
10681:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
10682:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
10683:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
10684:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
10685:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
10686:       89,    90,    91,    -1,    93,    94,    95,    96,    -1,    -1,
10687:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
10688:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
10689:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10690:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10691:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10692:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
10693:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,   168,
10694:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
10695:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
10696:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10697:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
10698:      209,    -1,   211,    -1,    -1,   214,   215,   216,   217,   218,
10699:      219,   220,    -1,    -1,   223,   224,   225,    -1,    -1,   228,
10700:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
10701:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10702:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10703:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
10704:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10705:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
10706:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10707:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10708:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10709:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10710:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10711:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
10712:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10713:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
10714:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
10715:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10716:      389,   390,   391,    -1,   393,   394,    -1,   396,   397,   398,
10717:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
10718:      409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
10719:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
10720:       -1,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
10721:      439,    -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,
10722:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10723:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10724:      469,   470,    -1,    -1,     3,    -1,     5,    -1,    -1,    -1,
10725:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   488,
10726:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10727:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
10728:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10729:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10730:       59,    -1,    61,    62,    63,    64,    65,    66,    -1,    68,
10731:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10732:       79,    80,    81,    82,    83,    84,    -1,    86,    87,    88,
10733:       89,    90,    91,    -1,    93,    94,    95,    96,    97,    98,
10734:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10735:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
10736:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
10737:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
10738:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
10739:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
10740:      159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,
10741:      169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,
10742:       -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
10743:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
10744:      199,   200,   201,   202,   203,   204,   205,   206,   207,    -1,
10745:      209,    -1,   211,   212,   213,   214,   215,   216,   217,   218,
10746:      219,   220,   221,    -1,   223,   224,   225,   226,    -1,   228,
10747:      229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
10748:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10749:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10750:      259,   260,   261,   262,   263,    -1,   265,   266,   267,   268,
10751:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
10752:       -1,   280,   281,   282,   283,    -1,    -1,   286,   287,   288,
10753:      289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
10754:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
10755:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
10756:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
10757:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
10758:      339,    -1,   341,   342,   343,   344,   345,   346,   347,   348,
10759:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10760:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
10761:      369,   370,   371,   372,   373,   374,   375,    -1,   377,   378,
10762:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10763:      389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
10764:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
10765:      409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
10766:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
10767:      429,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
10768:      439,   440,   441,   442,   443,   444,    -1,    -1,   447,    -1,
10769:      449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
10770:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10771:      469,   470,    -1,     3,   473,     5,    -1,    -1,    -1,    -1,
10772:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,
10773:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
10774:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
10775:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
10776:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
10777:       -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
10778:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
10779:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
10780:       90,    91,    -1,    93,    94,    95,    96,    97,    98,    99,
10781:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
10782:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
10783:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
10784:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
10785:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
10786:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
10787:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
10788:      170,   171,   172,   173,    -1,   175,    -1,   177,   178,    -1,
10789:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
10790:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
10791:      200,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
10792:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
10793:      220,   221,    -1,   223,   224,   225,   226,    -1,   228,   229,
10794:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
10795:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
10796:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
10797:      260,   261,   262,   263,    -1,   265,   266,   267,   268,    -1,
10798:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
10799:      280,   281,   282,   283,    -1,    -1,   286,   287,   288,   289,
10800:      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
10801:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
10802:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
10803:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
10804:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
10805:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
10806:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
10807:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
10808:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
10809:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
10810:      390,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
10811:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
10812:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
10813:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,   429,
10814:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
10815:      440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
10816:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
10817:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
10818:      470,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10819:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,
10820:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
10821:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
10822:       41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
10823:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
10824:       61,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
10825:       71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
10826:       81,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
10827:       91,    -1,    93,    94,    95,    96,    97,    98,    99,   100,
10828:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
10829:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
10830:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
10831:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
10832:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
10833:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
10834:      161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,
10835:      171,   172,   173,    -1,   175,    -1,   177,   178,    -1,   180,
10836:      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
10837:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,   200,
10838:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
10839:      211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
10840:       -1,    -1,   223,   224,   225,   226,    -1,   228,   229,   230,
10841:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
10842:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
10843:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
10844:      261,   262,   263,    -1,   265,   266,   267,   268,    -1,   270,
10845:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
10846:      281,   282,   283,    -1,    -1,   286,   287,   288,   289,   290,
10847:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
10848:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
10849:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
10850:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
10851:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
10852:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
10853:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
10854:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
10855:      371,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
10856:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
10857:      391,    -1,   393,   394,    -1,   396,   397,   398,   399,   400,
10858:      401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
10859:      411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
10860:      421,    -1,    -1,   424,   425,   426,   427,   428,   429,    -1,
10861:      431,   432,   433,   434,   435,   436,   437,    -1,   439,   440,
10862:      441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
10863:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
10864:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
10865:       -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10866:       -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,    21,
10867:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
10868:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
10869:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
10870:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
10871:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
10872:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
10873:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
10874:       -1,    93,    94,    95,    96,    97,    98,    99,   100,   101,
10875:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
10876:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
10877:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
10878:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
10879:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
10880:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
10881:       -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,
10882:      172,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
10883:      182,   183,   184,   185,   186,   187,   188,   189,   190,    -1,
10884:      192,   193,   194,   195,   196,   197,    -1,   199,   200,   201,
10885:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
10886:      212,   213,   214,   215,   216,   217,   218,   219,   220,    -1,
10887:       -1,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
10888:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
10889:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
10890:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
10891:      262,   263,    -1,   265,   266,   267,   268,    -1,   270,   271,
10892:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
10893:      282,   283,    -1,    -1,   286,   287,   288,   289,   290,   291,
10894:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
10895:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
10896:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
10897:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
10898:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
10899:      342,   343,   344,   345,   346,   347,   348,   349,   350,   351,
10900:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
10901:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
10902:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
10903:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
10904:       -1,   393,   394,    -1,   396,   397,   398,   399,   400,   401,
10905:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
10906:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
10907:       -1,    -1,   424,   425,   426,   427,   428,   429,    -1,   431,
10908:      432,   433,   434,   435,   436,   437,    -1,   439,   440,   441,
10909:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
10910:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
10911:      462,   463,   464,   465,   466,   467,   468,   469,   470,    -1,
10912:        3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,
10913:       -1,    -1,    -1,    -1,    -1,   487,    19,    20,    21,    22,
10914:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
10915:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
10916:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
10917:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
10918:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
10919:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
10920:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
10921:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
10922:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
10923:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
10924:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
10925:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
10926:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
10927:      153,   154,   155,   156,    -1,   158,   159,   160,   161,    -1,
10928:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
10929:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
10930:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
10931:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
10932:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
10933:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
10934:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
10935:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
10936:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
10937:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
10938:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
10939:      273,   274,   275,    -1,   277,   278,   279,    -1,   281,   282,
10940:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
10941:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
10942:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
10943:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
10944:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
10945:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
10946:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
10947:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
10948:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
10949:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
10950:      383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
10951:      393,   394,    -1,   396,    -1,   398,   399,   400,   401,   402,
10952:       -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
10953:      413,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
10954:       -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
10955:      433,   434,   435,   436,   437,    -1,   439,    -1,   441,   442,
10956:      443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
10957:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
10958:      463,   464,   465,   466,   467,   468,   469,   470,    -1,     3,
10959:       -1,    -1,    -1,    -1,    -1,   478,   479,   480,    -1,    -1,
10960:       -1,    -1,    -1,    -1,   487,    19,    20,    21,    22,    23,
10961:       24,    25,    26,    -1,    28,    29,    30,    31,    32,    -1,
10962:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
10963:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
10964:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
10965:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
10966:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
10967:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
10968:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10969:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
10970:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
10971:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
10972:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
10973:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
10974:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
10975:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
10976:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
10977:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
10978:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
10979:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
10980:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
10981:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
10982:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
10983:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
10984:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
10985:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
10986:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
10987:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
10988:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
10989:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
10990:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
10991:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
10992:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
10993:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
10994:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
10995:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
10996:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
10997:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
10998:      394,   395,   396,    -1,   398,   399,   400,   401,   402,    -1,
10999:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
11000:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
11001:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
11002:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
11003:      444,    -1,    -1,   447,    -1,   449,   450,   451,   452,   453,
11004:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
11005:      464,   465,   466,   467,   468,   469,   470,    -1,     3,   473,
11006:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11007:       -1,    -1,    -1,   487,    19,    20,    21,    22,    23,    24,
11008:       25,    26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,
11009:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11010:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11011:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11012:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
11013:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
11014:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
11015:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
11016:      105,   106,   107,   108,   109,   110,   111,   112,   113,    -1,
11017:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
11018:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
11019:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
11020:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11021:       -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
11022:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
11023:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
11024:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
11025:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
11026:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
11027:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
11028:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
11029:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
11030:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11031:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
11032:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
11033:      275,    -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,
11034:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
11035:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
11036:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
11037:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
11038:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
11039:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
11040:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
11041:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
11042:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
11043:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
11044:      385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
11045:      395,   396,    -1,   398,   399,   400,   401,   402,    -1,   404,
11046:      405,    -1,    -1,   408,   409,   410,   411,   412,    -1,   414,
11047:      415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
11048:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11049:      435,   436,   437,    -1,   439,    -1,   441,   442,   443,   444,
11050:       -1,    -1,   447,    -1,   449,   450,   451,   452,   453,   454,
11051:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
11052:      465,   466,   467,   468,   469,   470,    -1,     3,   473,    -1,
11053:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11054:       -1,    -1,   487,    19,    20,    21,    22,    23,    24,    25,
11055:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11056:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
11057:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
11058:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
11059:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
11060:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
11061:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
11062:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
11063:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
11064:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
11065:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
11066:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
11067:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
11068:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
11069:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
11070:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
11071:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
11072:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
11073:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
11074:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
11075:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
11076:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11077:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11078:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
11079:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
11080:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
11081:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
11082:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
11083:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
11084:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
11085:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
11086:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
11087:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
11088:      356,   357,   358,   359,   360,   361,   362,   363,   364,    -1,
11089:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
11090:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
11091:      386,   387,   388,   389,   390,   391,    -1,   393,   394,   395,
11092:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
11093:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
11094:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
11095:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11096:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
11097:       -1,   447,    -1,   449,   450,   451,   452,   453,   454,   455,
11098:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11099:      466,   467,   468,   469,   470,    -1,     3,   473,     5,    -1,
11100:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11101:       -1,   487,    19,    20,    21,    22,    23,    24,    25,    26,
11102:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
11103:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
11104:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
11105:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
11106:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
11107:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
11108:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
11109:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
11110:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
11111:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
11112:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
11113:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
11114:      147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,
11115:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
11116:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
11117:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
11118:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
11119:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
11120:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
11121:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
11122:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
11123:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11124:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11125:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
11126:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
11127:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
11128:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
11129:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
11130:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
11131:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
11132:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
11133:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
11134:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
11135:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
11136:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
11137:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
11138:      387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
11139:       -1,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
11140:       -1,   408,   409,   410,   411,   412,    -1,   414,   415,   416,
11141:      417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
11142:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
11143:      437,    -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,
11144:      447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
11145:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11146:      467,   468,   469,   470,    -1,     3,    -1,     5,    -1,    -1,
11147:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11148:      487,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
11149:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11150:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
11151:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
11152:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
11153:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
11154:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
11155:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
11156:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
11157:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
11158:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
11159:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
11160:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
11161:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
11162:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
11163:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
11164:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
11165:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
11166:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
11167:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
11168:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
11169:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
11170:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
11171:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
11172:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
11173:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
11174:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
11175:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
11176:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
11177:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
11178:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
11179:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
11180:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
11181:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
11182:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
11183:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
11184:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
11185:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
11186:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
11187:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
11188:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
11189:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
11190:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
11191:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
11192:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
11193:      468,   469,   470,    -1,     3,    -1,    -1,    -1,    -1,    -1,
11194:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,
11195:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11196:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11197:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
11198:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
11199:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11200:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
11201:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
11202:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
11203:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
11204:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
11205:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
11206:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
11207:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
11208:      149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,
11209:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
11210:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
11211:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
11212:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
11213:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
11214:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
11215:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
11216:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
11217:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11218:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
11219:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
11220:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
11221:       -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
11222:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
11223:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
11224:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
11225:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
11226:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
11227:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
11228:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11229:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
11230:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
11231:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
11232:      389,   390,   391,    -1,   393,   394,    -1,   396,    -1,   398,
11233:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
11234:      409,   410,   411,   412,    -1,   414,   415,   416,   417,   418,
11235:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
11236:       -1,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
11237:      439,    -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,
11238:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
11239:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11240:      469,   470,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
11241:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,
11242:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11243:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11244:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11245:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11246:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
11247:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
11248:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
11249:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
11250:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
11251:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
11252:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
11253:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
11254:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
11255:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
11256:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
11257:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
11258:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
11259:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
11260:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
11261:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
11262:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
11263:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
11264:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11265:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
11266:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
11267:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
11268:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
11269:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11270:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
11271:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
11272:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
11273:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
11274:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
11275:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
11276:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
11277:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
11278:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
11279:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
11280:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
11281:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
11282:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
11283:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
11284:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
11285:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
11286:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11287:      470,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11288:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   487,    19,    20,
11289:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
11290:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
11291:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
11292:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
11293:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
11294:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
11295:       -1,    82,    83,    84,    -1,    86,    87,    88,    89,    90,
11296:       91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,
11297:       -1,    -1,    -1,   104,   105,   106,   107,   108,   109,   110,
11298:      111,   112,   113,    -1,   115,    -1,   117,   118,   119,   120,
11299:      121,   122,    -1,   124,   125,   126,   127,   128,    -1,    -1,
11300:      131,   132,   133,   134,   135,    -1,   137,   138,   139,    -1,
11301:      141,   142,   143,    -1,   145,   146,   147,   148,   149,   150,
11302:      151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,
11303:      161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,
11304:      171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,
11305:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
11306:       -1,   192,   193,   194,   195,   196,   197,    -1,   199,    -1,
11307:      201,   202,   203,   204,   205,   206,   207,    -1,   209,    -1,
11308:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
11309:       -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,
11310:       -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,
11311:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11312:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
11313:      261,   262,   263,    -1,   265,   266,    -1,   268,    -1,   270,
11314:      271,   272,   273,   274,   275,    -1,   277,   278,    -1,    -1,
11315:      281,   282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,
11316:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
11317:      301,    -1,   303,   304,   305,   306,   307,   308,   309,   310,
11318:      311,    -1,   313,   314,   315,   316,   317,   318,   319,   320,
11319:      321,   322,   323,   324,   325,   326,    -1,   328,   329,   330,
11320:      331,   332,   333,   334,   335,   336,   337,   338,   339,    -1,
11321:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
11322:      351,   352,   353,   354,   355,   356,   357,   358,    -1,   360,
11323:      361,   362,   363,   364,    -1,   366,   367,   368,   369,   370,
11324:       -1,   372,   373,   374,   375,    -1,   377,   378,   379,   380,
11325:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
11326:      391,    -1,   393,   394,    -1,   396,    -1,   398,   399,   400,
11327:      401,   402,    -1,   404,   405,    -1,    -1,   408,   409,   410,
11328:      411,   412,    -1,   414,   415,   416,   417,   418,   419,   420,
11329:      421,    -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,
11330:      431,   432,   433,   434,   435,   436,   437,    -1,   439,    -1,
11331:      441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,
11332:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
11333:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
11334:       -1,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,
11335:        9,    -1,    -1,    -1,    -1,    -1,   487,    16,    17,    18,
11336:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
11337:       29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
11338:       39,    40,    41,    42,    43,    44,    45,    46,    47,    -1,
11339:       49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
11340:       59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
11341:       69,    70,    71,    -1,    73,    74,    75,    76,    77,    78,
11342:       79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
11343:       89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
11344:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
11345:      109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
11346:      119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
11347:      129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
11348:      139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
11349:       -1,   150,   151,   152,   153,    -1,   155,   156,   157,   158,
11350:      159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
11351:      169,   170,   171,   172,   173,   174,   175,   176,    -1,   178,
11352:      179,   180,   181,   182,   183,   184,   185,   186,   187,   188,
11353:      189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
11354:      199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,
11355:      209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
11356:      219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
11357:      229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
11358:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11359:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11360:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
11361:      269,    -1,   271,   272,   273,   274,   275,   276,   277,   278,
11362:      279,   280,   281,   282,   283,   284,   285,   286,    -1,   288,
11363:      289,   290,    -1,   292,   293,   294,   295,   296,   297,   298,
11364:      299,   300,   301,   302,   303,   304,    -1,   306,   307,    -1,
11365:      309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
11366:      319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
11367:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
11368:      339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
11369:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11370:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
11371:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
11372:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
11373:      389,    -1,   391,   392,   393,   394,   395,   396,   397,   398,
11374:      399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
11375:      409,    -1,   411,    -1,   413,   414,   415,   416,   417,   418,
11376:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
11377:      429,   430,   431,   432,   433,   434,   435,    -1,   437,   438,
11378:      439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
11379:      449,   450,   451,   452,   453,   454,   455,    -1,    -1,    -1,
11380:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,
11381:      469,   470,    -1,     3,    -1,   474,   475,   476,     8,   478,
11382:      479,   480,   481,   482,   483,    -1,    16,    17,    18,    19,
11383:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11384:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11385:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11386:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11387:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
11388:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
11389:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
11390:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
11391:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
11392:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
11393:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
11394:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
11395:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
11396:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
11397:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
11398:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
11399:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
11400:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
11401:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
11402:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
11403:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
11404:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
11405:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11406:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
11407:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
11408:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
11409:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
11410:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11411:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
11412:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
11413:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
11414:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
11415:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
11416:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
11417:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
11418:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
11419:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
11420:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
11421:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
11422:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
11423:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
11424:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
11425:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
11426:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
11427:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11428:      470,    -1,    -1,    -1,   474,   475,   476,    -1,   478,   479,
11429:      480,   481,   482,   483,     8,    -1,    -1,    11,    -1,    -1,
11430:       -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,
11431:       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,
11432:       16,    17,    18,    -1,    -1,    -1,    -1,    41,    -1,    -1,
11433:        8,    -1,    -1,    11,    48,    -1,    -1,    33,    16,    17,
11434:       18,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
11435:       -1,    -1,    48,    -1,    -1,    33,    -1,    -1,     8,    73,
11436:       -1,    11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,
11437:       48,    -1,    -1,    -1,    -1,    -1,     8,    73,    -1,    11,
11438:       -1,    -1,    -1,    33,    16,    17,    18,    -1,    -1,    -1,
11439:       -1,    41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,
11440:       -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
11441:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
11442:       -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
11443:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11444:       -1,    73,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
11445:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,   172,    -1,
11446:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11447:       -1,    33,   186,    -1,    -1,    -1,   172,   191,    -1,    41,
11448:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,
11449:      186,    -1,    -1,    -1,   172,   191,    -1,    -1,   212,   213,
11450:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,
11451:       -1,    73,   226,   191,    -1,    -1,   212,   213,    -1,    -1,
11452:       -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11453:      226,    -1,    -1,    -1,   212,   213,   186,    -1,    -1,    -1,
11454:      172,   191,    -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,
11455:      264,    -1,    -1,   267,   186,    -1,    -1,    -1,    -1,   191,
11456:       -1,    -1,   212,   213,    -1,    -1,    -1,   281,   264,    -1,
11457:      284,   267,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
11458:      212,   213,    -1,    -1,    -1,   281,   264,    -1,   284,   267,
11459:       -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,
11460:       -1,    -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,
11461:      172,    -1,    -1,    -1,   264,    -1,    -1,   267,    -1,    -1,
11462:       -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   191,
11463:       -1,   281,   264,    -1,   284,   267,    -1,    -1,    -1,    -1,
11464:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
11465:      212,   213,   284,    -1,    -1,    -1,    -1,   371,    -1,    -1,
11466:       -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,
11467:       -1,    -1,    -1,    -1,    -1,   371,     8,    -1,    -1,    11,
11468:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
11469:       -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,
11470:       -1,    33,   264,    -1,    -1,   267,    -1,    -1,    -1,    41,
11471:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,   281,
11472:       -1,   371,   284,     8,    -1,    -1,    11,    -1,    -1,    -1,
11473:       -1,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,   371,
11474:       -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,
11475:       -1,    -1,    -1,    -1,    -1,    -1,    41,   471,    -1,    -1,
11476:      474,   475,   476,    48,   478,   479,   480,   481,   482,   483,
11477:       -1,    -1,    -1,    -1,   488,   471,    -1,    -1,   474,   475,
11478:      476,    -1,   478,   479,   480,   481,   482,   483,    73,    -1,
11479:       -1,    -1,   488,   471,    -1,    -1,   474,   475,   476,    -1,
11480:      478,   479,   480,   481,   482,   483,    -1,    -1,    -1,   371,
11481:      488,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11482:       -1,   471,    -1,    -1,   474,   475,   476,    -1,   478,   479,
11483:      480,   481,   482,   483,    -1,    -1,    -1,    -1,   488,   471,
11484:      172,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
11485:      482,   483,    -1,    -1,   186,    -1,   488,     8,    -1,   191,
11486:       11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
11487:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11488:      212,   213,    33,    -1,    -1,    -1,    -1,   172,    -1,    -1,
11489:       41,    -1,    -1,    -1,   226,    -1,    -1,    48,    -1,    -1,
11490:       -1,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,   471,
11491:       -1,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
11492:      482,   483,    73,    -1,    -1,    -1,   488,   212,   213,    -1,
11493:       -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
11494:       -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,     8,   281,
11495:       -1,    11,   284,    -1,    -1,    -1,    16,    17,    18,    -1,
11496:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11497:       -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,   264,
11498:       -1,    41,   267,    -1,    -1,    -1,    -1,    -1,    48,    -1,
11499:       -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,   284,
11500:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11501:       -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,
11502:       -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11503:       -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,   371,
11504:      191,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11505:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11506:       -1,   212,   213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11507:       -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,
11508:       -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
11509:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11510:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11511:       -1,    -1,   172,   264,    -1,    -1,   267,    -1,    -1,    -1,
11512:       -1,    -1,    -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,
11513:      281,   191,    -1,   284,    -1,    -1,    -1,    -1,    -1,   471,
11514:       -1,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
11515:      482,   483,   212,   213,    -1,    -1,   488,    -1,    -1,    -1,
11516:       -1,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
11517:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11518:       -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,    -1,   474,
11519:      475,   476,    -1,   478,   479,   480,   481,   482,   483,    -1,
11520:       -1,    -1,    -1,   488,   264,    -1,    -1,   267,    -1,    -1,
11521:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11522:      371,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,
11523:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11524:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11525:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11526:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11527:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11528:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11529:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11530:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11531:       -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11532:      471,    -1,    -1,   474,   475,   476,    -1,   478,   479,   480,
11533:      481,   482,   483,    -1,    -1,    -1,    -1,   488,    -1,    -1,
11534:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11535:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11536:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11537:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11538:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11539:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11540:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11541:       -1,   471,     3,    -1,   474,   475,   476,    -1,   478,   479,
11542:      480,   481,   482,   483,    -1,    -1,   486,    -1,    19,    20,
11543:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
11544:       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
11545:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
11546:       51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
11547:       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
11548:       71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
11549:       -1,    82,    83,    84,    85,    86,    87,    88,    89,    90,
11550:       91,    92,    -1,    94,    95,    96,    97,    98,    99,    -1,
11551:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
11552:      111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
11553:      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
11554:      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
11555:      141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
11556:      151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
11557:      161,   162,   163,   164,   165,    -1,   167,    -1,   169,   170,
11558:      171,    -1,   173,   174,   175,   176,   177,   178,   179,   180,
11559:      181,   182,   183,   184,   185,    -1,   187,   188,   189,   190,
11560:      191,   192,   193,   194,   195,   196,   197,   198,   199,    -1,
11561:      201,   202,   203,   204,   205,   206,   207,   208,   209,   210,
11562:      211,    -1,    -1,   214,    -1,   216,   217,   218,   219,   220,
11563:      221,   222,   223,    -1,   225,    -1,   227,   228,   229,   230,
11564:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
11565:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11566:      251,   252,   253,   254,   255,   256,   257,    -1,   259,   260,
11567:      261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,
11568:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
11569:      281,   282,   283,   284,   285,   286,   287,    -1,   289,    -1,
11570:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
11571:      301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
11572:      311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
11573:      321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
11574:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
11575:      341,   342,    -1,   344,   345,   346,   347,   348,   349,   350,
11576:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
11577:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
11578:       -1,   372,   373,   374,   375,   376,   377,   378,   379,   380,
11579:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
11580:      391,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
11581:      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
11582:      411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
11583:      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
11584:      431,   432,   433,   434,   435,   436,   437,   438,   439,    -1,
11585:      441,   442,   443,   444,   445,   446,   447,   448,   449,   450,
11586:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
11587:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
11588:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,
11589:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
11590:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11591:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11592:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
11593:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
11594:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11595:       -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,    82,
11596:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
11597:       -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,
11598:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11599:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
11600:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
11601:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
11602:      143,    -1,   145,   146,   147,   148,   149,   150,   151,   152,
11603:      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,
11604:      163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,
11605:      173,    -1,   175,    -1,   177,   178,    -1,   180,   181,   182,
11606:      183,   184,   185,    -1,   187,   188,   189,   190,    -1,   192,
11607:      193,   194,   195,   196,   197,    -1,   199,    -1,   201,   202,
11608:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,    -1,
11609:       -1,   214,    -1,   216,   217,   218,   219,   220,    -1,    -1,
11610:      223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
11611:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11612:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11613:      253,   254,   255,   256,   257,    -1,   259,   260,   261,   262,
11614:      263,    -1,   265,   266,    -1,   268,    -1,   270,   271,   272,
11615:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
11616:      283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,
11617:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
11618:      303,   304,   305,   306,   307,   308,   309,   310,   311,    -1,
11619:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
11620:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
11621:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
11622:       -1,   344,   345,   346,   347,   348,   349,   350,   351,   352,
11623:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
11624:      363,   364,    -1,   366,   367,   368,   369,   370,    -1,   372,
11625:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
11626:      383,   384,   385,   386,   387,   388,   389,   390,   391,    -1,
11627:      393,   394,    -1,   396,    -1,   398,   399,   400,   401,   402,
11628:       -1,   404,   405,    -1,    -1,   408,   409,   410,   411,   412,
11629:       -1,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
11630:       -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11631:      433,   434,   435,   436,   437,    -1,   439,    -1,   441,   442,
11632:      443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
11633:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
11634:      463,   464,   465,   466,   467,   468,   469,   470,     3,     4,
11635:        5,    -1,    -1,    -1,     9,    -1,    -1,   480,    -1,    -1,
11636:       -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,    24,
11637:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
11638:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11639:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11640:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11641:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
11642:       -1,    76,    77,    78,    79,    80,    -1,    82,    83,    84,
11643:       -1,    86,    87,    88,    89,    90,    91,    -1,    -1,    94,
11644:       95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,
11645:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
11646:      115,    -1,   117,   118,   119,   120,   121,   122,    -1,   124,
11647:      125,   126,   127,   128,    -1,    -1,   131,   132,   133,   134,
11648:      135,    -1,   137,   138,   139,    -1,   141,   142,   143,    -1,
11649:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11650:      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,
11651:      165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,
11652:      175,    -1,   177,   178,    -1,   180,   181,   182,   183,   184,
11653:      185,    -1,   187,   188,   189,   190,    -1,   192,   193,   194,
11654:      195,   196,   197,    -1,   199,    -1,   201,   202,   203,   204,
11655:      205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,
11656:       -1,   216,   217,   218,   219,   220,    -1,    -1,   223,    -1,
11657:      225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,
11658:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
11659:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11660:      255,   256,   257,    -1,   259,   260,   261,   262,   263,    -1,
11661:      265,   266,    -1,   268,    -1,   270,   271,   272,   273,   274,
11662:      275,    -1,   277,   278,   279,    -1,   281,   282,   283,    -1,
11663:       -1,   286,   287,    -1,   289,    -1,   291,   292,   293,   294,
11664:      295,   296,   297,   298,   299,   300,   301,    -1,   303,   304,
11665:      305,   306,   307,   308,   309,   310,   311,    -1,   313,   314,
11666:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
11667:      325,   326,    -1,   328,   329,   330,   331,   332,   333,   334,
11668:      335,   336,   337,   338,   339,    -1,   341,   342,    -1,   344,
11669:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
11670:      355,   356,   357,   358,    -1,   360,   361,   362,   363,   364,
11671:       -1,   366,   367,   368,   369,   370,    -1,   372,   373,   374,
11672:      375,    -1,   377,   378,   379,   380,   381,   382,   383,   384,
11673:      385,   386,   387,   388,   389,   390,   391,    -1,   393,   394,
11674:       -1,   396,    -1,   398,   399,   400,   401,   402,    -1,   404,
11675:      405,    -1,    -1,   408,   409,   410,   411,   412,   413,   414,
11676:      415,   416,   417,   418,   419,   420,   421,    -1,    -1,   424,
11677:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11678:      435,   436,   437,    -1,   439,    -1,   441,   442,   443,   444,
11679:       -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,   454,
11680:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
11681:      465,   466,   467,   468,   469,   470,     3,     4,     5,    -1,
11682:       -1,    -1,     9,   478,   479,    -1,    -1,    -1,    -1,    -1,
11683:       -1,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
11684:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
11685:       -1,    38,    39,    -1,    41,    42,    43,    -1,    45,    46,
11686:       47,    48,    49,    -1,    51,    52,    -1,    54,    55,    56,
11687:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
11688:       -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,    76,
11689:       77,    78,    79,    80,    -1,    82,    83,    84,    -1,    86,
11690:       87,    88,    89,    90,    91,    -1,    -1,    94,    95,    96,
11691:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,
11692:      107,   108,   109,   110,   111,   112,   113,   114,   115,    -1,
11693:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
11694:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
11695:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
11696:      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,
11697:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,
11698:       -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,
11699:      177,   178,    -1,   180,   181,   182,   183,   184,   185,    -1,
11700:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
11701:      197,    -1,   199,    -1,   201,   202,   203,   204,   205,   206,
11702:      207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,
11703:      217,   218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,
11704:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
11705:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
11706:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
11707:      257,    -1,   259,   260,   261,   262,   263,    -1,   265,   266,
11708:       -1,   268,    -1,   270,   271,   272,   273,   274,   275,    -1,
11709:      277,   278,   279,    -1,   281,   282,   283,    -1,    -1,   286,
11710:      287,    -1,   289,    -1,   291,   292,   293,   294,   295,   296,
11711:      297,   298,   299,   300,   301,    -1,   303,   304,   305,   306,
11712:      307,   308,   309,   310,   311,    -1,   313,   314,   315,   316,
11713:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
11714:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
11715:      337,   338,   339,    -1,   341,   342,    -1,   344,   345,   346,
11716:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
11717:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
11718:      367,   368,   369,   370,    -1,   372,   373,   374,   375,    -1,
11719:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
11720:      387,   388,   389,   390,   391,    -1,   393,   394,    -1,   396,
11721:       -1,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
11722:       -1,   408,   409,   410,   411,   412,   413,   414,   415,   416,
11723:      417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
11724:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,   436,
11725:      437,    -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,
11726:      447,    -1,    -1,   450,   451,   452,   453,   454,   455,   456,
11727:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
11728:      467,   468,   469,   470,     3,     4,     5,    -1,    -1,    -1,
11729:        9,   478,   479,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11730:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11731:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11732:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
11733:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
11734:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11735:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
11736:       79,    80,    -1,    82,    83,    84,    -1,    86,    87,    88,
11737:       89,    90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,
11738:       -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,
11739:      109,   110,   111,   112,   113,    -1,   115,    -1,   117,   118,
11740:      119,   120,   121,   122,    -1,   124,   125,   126,   127,   128,
11741:       -1,    -1,   131,   132,   133,   134,   135,    -1,   137,   138,
11742:      139,    -1,   141,   142,   143,    -1,   145,   146,   147,   148,
11743:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
11744:      159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,
11745:      169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,
11746:       -1,   180,   181,   182,   183,   184,   185,    -1,   187,   188,
11747:      189,   190,    -1,   192,   193,   194,   195,   196,   197,    -1,
11748:      199,    -1,   201,   202,   203,   204,   205,   206,   207,    -1,
11749:      209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,
11750:      219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,
11751:      229,   230,    -1,    -1,   233,   234,   235,   236,   237,   238,
11752:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11753:      249,   250,   251,   252,   253,   254,   255,   256,   257,    -1,
11754:      259,   260,   261,   262,   263,    -1,   265,   266,    -1,   268,
11755:       -1,   270,   271,   272,   273,   274,   275,    -1,   277,   278,
11756:      279,    -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,
11757:      289,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
11758:      299,   300,   301,    -1,   303,   304,   305,   306,   307,   308,
11759:      309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,
11760:      319,   320,   321,   322,   323,   324,   325,   326,    -1,   328,
11761:      329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
11762:      339,    -1,   341,   342,    -1,   344,   345,   346,   347,   348,
11763:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11764:       -1,   360,   361,   362,   363,   364,    -1,   366,   367,   368,
11765:      369,   370,    -1,   372,   373,   374,   375,    -1,   377,   378,
11766:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
11767:      389,   390,   391,    -1,   393,   394,    -1,   396,    -1,   398,
11768:      399,   400,   401,   402,    -1,   404,   405,    -1,    -1,   408,
11769:      409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
11770:      419,   420,   421,    -1,    -1,   424,   425,   426,   427,   428,
11771:       -1,    -1,   431,   432,   433,   434,   435,   436,   437,    -1,
11772:      439,    -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,
11773:       -1,   450,   451,   452,   453,   454,   455,   456,   457,   458,
11774:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11775:      469,   470,    -1,     8,    -1,    -1,    11,    -1,    -1,   478,
11776:      479,    16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,
11777:       -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    33,    16,
11778:       17,    18,    37,    -1,    -1,    -1,    41,    -1,    -1,     8,
11779:       -1,    -1,    11,    48,    -1,    -1,    33,    16,    17,    18,
11780:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
11781:       -1,    48,    -1,    -1,    33,    -1,    -1,     8,    73,    -1,
11782:       11,    -1,    41,    -1,    -1,    16,    17,    18,    -1,    48,
11783:       -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
11784:       -1,    -1,    33,    -1,    -1,    36,    -1,    -1,    -1,    -1,
11785:       41,    -1,    -1,    -1,    73,    -1,    -1,    48,    -1,    -1,
11786:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   123,    -1,
11787:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11788:       -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11789:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11790:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11791:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,
11792:       -1,    -1,    -1,    -1,    -1,   162,    -1,    -1,    -1,    -1,
11793:      167,   186,    -1,    -1,    -1,   172,   191,     8,    -1,    -1,
11794:       11,    -1,   161,    -1,    -1,    16,    17,    18,    -1,   186,
11795:       -1,    -1,    -1,   172,   191,    -1,    -1,   212,   213,    -1,
11796:       -1,    -1,    33,    -1,    -1,    -1,    -1,   186,    -1,    -1,
11797:       41,   226,   191,    -1,    -1,   212,   213,    48,    -1,    -1,
11798:       -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,
11799:       -1,    -1,    -1,   212,   213,   186,    -1,    -1,    -1,    -1,
11800:      191,    -1,    73,    -1,    -1,    -1,    -1,   226,    -1,   264,
11801:       -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11802:       -1,   212,   213,    -1,    -1,    -1,   281,   264,    -1,   284,
11803:      267,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,
11804:       -1,    -1,    -1,    -1,   281,   264,    -1,   284,   267,    -1,
11805:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11806:       -1,    -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,
11807:       -1,    -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,
11808:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   307,     8,
11809:      281,    -1,    11,   284,    -1,    -1,    -1,    16,    17,    18,
11810:       -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11811:       -1,    -1,    -1,    -1,    33,   186,   371,    36,     8,    -1,
11812:      191,    11,    41,    -1,    -1,    -1,    16,    17,    18,    48,
11813:       -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,
11814:       -1,   212,   213,    33,    -1,    -1,    -1,    -1,    -1,    -1,
11815:       -1,    41,   371,    -1,    73,   226,    -1,    -1,    48,    -1,
11816:       -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
11817:       -1,    -1,    16,    17,    18,   430,    -1,    -1,    -1,    -1,
11818:      371,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,    33,
11819:       -1,    -1,    36,   264,    -1,    -1,   267,    41,    -1,    -1,
11820:       -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,
11821:      281,    -1,    -1,   284,    -1,    -1,   471,    -1,    -1,   474,
11822:      475,   476,    -1,   478,   479,   480,   481,   482,   483,    73,
11823:       -1,   302,    -1,    -1,   471,    -1,    -1,   474,   475,   476,
11824:       -1,   478,   479,   480,   481,   482,   483,    -1,    -1,    -1,
11825:       -1,    -1,   471,   172,    -1,   474,   475,   476,    -1,   478,
11826:      479,   480,   481,   482,   483,    -1,    -1,   186,    -1,    -1,
11827:       -1,    -1,   191,    -1,    -1,    -1,    -1,   167,    -1,    -1,
11828:      471,    -1,   172,   474,   475,   476,    -1,   478,   479,   480,
11829:      481,   482,   483,   212,   213,    -1,   186,    -1,    -1,    -1,
11830:      371,   191,    -1,    -1,    -1,    -1,    -1,   226,    -1,    -1,
11831:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11832:       -1,     8,   212,   213,    11,    -1,    -1,    -1,   172,    16,
11833:       17,    18,    -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,
11834:       -1,    -1,   186,    -1,    -1,   264,    33,   191,   267,    -1,
11835:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
11836:       -1,    48,   281,    -1,    -1,   284,    -1,    -1,   212,   213,
11837:       -1,    -1,    -1,    -1,   264,    -1,    -1,   267,    -1,    -1,
11838:       -1,    -1,   226,    -1,    -1,    -1,    73,    -1,    -1,    -1,
11839:       -1,   281,    -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,
11840:      471,    -1,    -1,   474,   475,   476,    -1,   478,   479,   480,
11841:      481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11842:      264,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,    -1,
11843:       -1,    -1,    -1,    -1,    -1,    -1,     8,   281,    -1,    11,
11844:      284,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
11845:       -1,    -1,   371,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11846:       -1,    33,    -1,    -1,    36,     8,    -1,    -1,    11,    41,
11847:       -1,    -1,    -1,    16,    17,    18,    48,    -1,    -1,    -1,
11848:       -1,   371,    -1,     8,    -1,   172,    11,    -1,    -1,    -1,
11849:       33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,   186,
11850:       -1,    73,    -1,    -1,   191,    48,    -1,    -1,    -1,    -1,
11851:       -1,    -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,
11852:       -1,    -1,    -1,    48,    -1,   212,   213,   371,    -1,    -1,
11853:       73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   226,
11854:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,
11855:       -1,    -1,   471,    -1,    -1,   474,   475,   476,    -1,   478,
11856:      479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,
11857:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   264,    -1,    -1,
11858:      267,   471,    -1,    -1,   474,   475,   476,    -1,   478,   479,
11859:      480,   481,   482,   483,   281,    -1,    -1,   284,    -1,    -1,
11860:      172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11861:       -1,    -1,    -1,    -1,   186,    -1,    -1,    -1,    -1,   191,
11862:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,   172,
11863:      474,   475,   476,    -1,   478,   479,   480,   481,   482,   483,
11864:      212,   213,    -1,   186,    -1,    -1,    -1,   172,   191,    -1,
11865:       -1,    -1,    -1,    -1,   226,    -1,    -1,    -1,    -1,    -1,
11866:       -1,   186,    -1,    -1,    -1,    -1,   191,    -1,    -1,   212,
11867:      213,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11868:       -1,    -1,    -1,   226,   371,    -1,    -1,   212,   213,    -1,
11869:       -1,    -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,
11870:       -1,   226,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,
11871:       -1,    -1,   284,    -1,    -1,    -1,   403,    -1,    -1,    -1,
11872:       -1,   264,    -1,    -1,   267,    -1,    -1,    -1,    -1,    -1,
11873:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   281,   264,
11874:       -1,   284,   267,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11875:       -1,    -1,    -1,    -1,    -1,    -1,   281,    -1,    -1,    -1,
11876:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11877:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11878:       -1,    -1,    -1,    -1,   471,    -1,    -1,   474,   475,   476,
11879:       -1,   478,   479,   480,   481,   482,   483,    -1,    -1,   371,
11880:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11881:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11882:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,
11883:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11884:       -1,    -1,    -1,    -1,    -1,    -1,   371,    -1,    -1,    -1,
11885:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11886:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11887:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11888:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11889:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,
11890:       -1,    -1,   474,   475,   476,    -1,   478,   479,   480,   481,
11891:      482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11892:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   471,    -1,
11893:       -1,   474,   475,   476,    -1,   478,   479,   480,   481,   482,
11894:      483,    -1,    -1,     3,    -1,     5,   471,    -1,    -1,   474,
11895:      475,   476,    -1,   478,   479,   480,   481,   482,   483,    19,
11896:       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
11897:       30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
11898:       40,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11899:       -1,    51,    52,    53,    54,    55,    56,    57,    58,    59,
11900:       60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
11901:       70,    71,    72,    73,    -1,    75,    76,    77,    78,    79,
11902:       80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
11903:       90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
11904:       -1,   101,   102,   103,   104,   105,   106,   107,   108,   109,
11905:      110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
11906:      120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
11907:      130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
11908:      140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
11909:      150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
11910:      160,   161,   162,   163,   164,   165,    -1,   167,    -1,   169,
11911:      170,   171,    -1,   173,   174,   175,   176,   177,   178,   179,
11912:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
11913:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
11914:       -1,   201,   202,   203,   204,   205,   206,   207,   208,   209,
11915:      210,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
11916:      220,   221,   222,   223,    -1,   225,    -1,   227,   228,   229,
11917:      230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
11918:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11919:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
11920:      260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,
11921:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
11922:      280,   281,   282,   283,   284,   285,   286,   287,    -1,   289,
11923:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11924:      300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
11925:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
11926:      320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
11927:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
11928:      340,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
11929:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
11930:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
11931:      370,    -1,   372,   373,   374,   375,   376,   377,   378,   379,
11932:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
11933:      390,   391,   392,   393,   394,   395,   396,    -1,   398,   399,
11934:      400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
11935:      410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
11936:      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
11937:      430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
11938:       -1,   441,   442,   443,   444,   445,   446,   447,   448,   449,
11939:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
11940:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11941:      470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11942:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
11943:       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
11944:       32,    33,    34,    35,    36,    37,    38,    39,    40,    41,
11945:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
11946:       52,    53,    54,    55,    56,    57,    58,    59,    60,    61,
11947:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
11948:       72,    73,    -1,    75,    76,    77,    78,    79,    80,    -1,
11949:       82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
11950:       92,    -1,    94,    95,    96,    97,    98,    99,    -1,   101,
11951:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
11952:      112,   113,   114,   115,   116,   117,   118,   119,   120,   121,
11953:      122,   123,   124,   125,   126,   127,   128,   129,   130,   131,
11954:      132,   133,   134,   135,   136,   137,   138,   139,   140,   141,
11955:      142,   143,   144,   145,   146,   147,   148,   149,   150,   151,
11956:      152,   153,   154,   155,   156,   157,   158,   159,   160,   161,
11957:      162,   163,   164,   165,    -1,   167,    -1,   169,   170,   171,
11958:       -1,   173,   174,   175,   176,   177,   178,   179,   180,   181,
11959:      182,   183,   184,   185,    -1,   187,   188,   189,   190,   191,
11960:      192,   193,   194,   195,   196,   197,   198,   199,    -1,   201,
11961:      202,   203,   204,   205,   206,   207,   208,   209,   210,   211,
11962:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
11963:      222,   223,    -1,   225,    -1,   227,   228,   229,   230,   231,
11964:      232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
11965:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11966:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
11967:      262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,
11968:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
11969:      282,   283,   284,   285,   286,   287,    -1,   289,    -1,   291,
11970:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11971:      302,   303,   304,   305,   306,   307,   308,   309,   310,   311,
11972:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
11973:      322,   323,   324,   325,   326,   327,   328,   329,   330,   331,
11974:      332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
11975:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
11976:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11977:      362,   363,   364,   365,   366,   367,   368,   369,   370,    -1,
11978:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
11979:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
11980:      392,   393,   394,   395,   396,    -1,   398,   399,   400,   401,
11981:      402,   403,   404,   405,   406,   407,   408,   409,   410,   411,
11982:      412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
11983:      422,   423,   424,   425,   426,   427,   428,   429,   430,   431,
11984:      432,   433,   434,   435,   436,   437,   438,   439,    -1,   441,
11985:      442,   443,   444,   445,   446,   447,   448,   449,   450,   451,
11986:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
11987:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
11988:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11989:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
11990:       24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
11991:       34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
11992:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    53,
11993:       54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
11994:       64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
11995:       -1,    75,    76,    77,    78,    79,    80,    -1,    82,    83,
11996:       84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
11997:       94,    95,    96,    97,    98,    99,    -1,   101,   102,   103,
11998:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11999:      114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
12000:      124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
12001:      134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
12002:      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12003:      154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
12004:      164,   165,    -1,   167,    -1,   169,   170,   171,    -1,   173,
12005:      174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
12006:      184,   185,    -1,   187,   188,   189,   190,   191,   192,   193,
12007:      194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
12008:      204,   205,   206,   207,   208,   209,   210,   211,    -1,    -1,
12009:      214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
12010:       -1,   225,    -1,   227,   228,   229,   230,   231,   232,   233,
12011:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12012:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12013:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12014:      264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,
12015:      274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
12016:      284,   285,   286,   287,    -1,   289,    -1,   291,   292,   293,
12017:      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
12018:      304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
12019:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12020:      324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
12021:      334,   335,   336,   337,   338,   339,   340,   341,   342,    -1,
12022:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12023:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
12024:      364,   365,   366,   367,   368,   369,   370,    -1,   372,   373,
12025:      374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
12026:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
12027:      394,   395,   396,    -1,   398,   399,   400,   401,   402,   403,
12028:      404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
12029:      414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
12030:      424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
12031:      434,   435,   436,   437,   438,   439,    -1,   441,   442,   443,
12032:      444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
12033:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12034:      464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
12035:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12036:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12037:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12038:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
12039:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
12040:       56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
12041:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
12042:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
12043:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
12044:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
12045:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12046:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12047:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12048:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12049:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12050:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12051:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
12052:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12053:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12054:      196,   197,    -1,   199,   200,   201,   202,   203,   204,   205,
12055:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
12056:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
12057:      226,    -1,   228,   229,   230,   231,   232,   233,   234,   235,
12058:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12059:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12060:      256,   257,   258,   259,   260,   261,   262,   263,    -1,   265,
12061:      266,   267,   268,    -1,   270,   271,   272,   273,   274,   275,
12062:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12063:      286,   287,   288,   289,   290,   291,   292,   293,   294,   295,
12064:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12065:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12066:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12067:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12068:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
12069:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12070:      356,   357,   358,    -1,   360,   361,   362,   363,   364,   365,
12071:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
12072:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12073:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
12074:      396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
12075:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
12076:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
12077:      426,   427,   428,   429,    -1,   431,   432,   433,   434,   435,
12078:      436,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
12079:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
12080:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12081:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
12082:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12083:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12084:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12085:       38,    39,    -1,    41,    42,    43,    44,    45,    46,    47,
12086:       48,    49,    50,    51,    52,    -1,    54,    55,    56,    57,
12087:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12088:       68,    69,    70,    71,    72,    -1,    74,    -1,    76,    77,
12089:       78,    79,    80,    81,    82,    83,    84,    -1,    86,    87,
12090:       88,    89,    90,    91,    -1,    93,    94,    95,    96,    -1,
12091:       -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,   107,
12092:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12093:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12094:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12095:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12096:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12097:      158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,
12098:      168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,
12099:      178,    -1,   180,   181,   182,   183,   184,   185,   186,   187,
12100:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12101:       -1,   199,   200,   201,   202,   203,   204,   205,   206,   207,
12102:       -1,   209,    -1,   211,   212,   213,   214,   215,   216,   217,
12103:      218,   219,   220,    -1,    -1,   223,   224,   225,   226,    -1,
12104:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12105:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12106:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12107:      258,   259,   260,   261,   262,   263,    -1,   265,   266,   267,
12108:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12109:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
12110:      288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
12111:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12112:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12113:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12114:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12115:      338,   339,    -1,   341,   342,   343,   344,   345,   346,   347,
12116:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12117:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12118:      368,   369,   370,   371,   372,   373,   374,   375,    -1,   377,
12119:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12120:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,   397,
12121:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
12122:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
12123:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
12124:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
12125:       -1,   439,   440,   441,   442,   443,   444,    -1,    -1,   447,
12126:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
12127:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12128:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
12129:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12130:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
12131:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
12132:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12133:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12134:       -1,    -1,    62,    63,    64,    65,    66,    67,    68,    69,
12135:       70,    71,    72,    -1,    -1,    75,    76,    77,    78,    79,
12136:       80,    -1,    82,    83,    84,    85,    86,    87,    88,    89,
12137:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12138:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12139:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12140:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12141:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12142:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12143:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12144:      160,   161,    -1,   163,   164,   165,    -1,    -1,    -1,   169,
12145:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12146:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12147:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12148:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12149:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12150:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12151:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12152:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12153:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12154:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12155:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12156:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12157:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12158:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12159:      310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
12160:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12161:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12162:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12163:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12164:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12165:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12166:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12167:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
12168:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
12169:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
12170:      420,   421,    -1,   423,   424,   425,   426,   427,   428,    -1,
12171:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
12172:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
12173:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12174:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12175:      470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12176:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12177:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12178:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12179:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12180:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12181:       62,    63,    64,    65,    66,    67,    68,    69,    70,    71,
12182:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12183:       82,    83,    84,    85,    86,    87,    88,    89,    90,    91,
12184:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12185:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12186:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12187:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12188:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12189:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12190:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12191:       -1,   163,   164,   165,    -1,    -1,    -1,   169,   170,   171,
12192:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12193:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12194:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12195:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12196:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12197:       -1,   223,    -1,   225,   226,    -1,   228,   229,   230,    -1,
12198:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12199:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12200:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12201:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12202:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12203:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12204:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12205:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12206:      312,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12207:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12208:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12209:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12210:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12211:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12212:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12213:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
12214:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
12215:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
12216:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
12217:       -1,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
12218:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
12219:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
12220:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12221:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
12222:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12223:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12224:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12225:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12226:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12227:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12228:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12229:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12230:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12231:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12232:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12233:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12234:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12235:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12236:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12237:      154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,
12238:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12239:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12240:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12241:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12242:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12243:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12244:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12245:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12246:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12247:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12248:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12249:      274,   275,    -1,   277,   278,   279,    -1,   281,   282,   283,
12250:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12251:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12252:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12253:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12254:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12255:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12256:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12257:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12258:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12259:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12260:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
12261:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
12262:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,   413,
12263:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
12264:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12265:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
12266:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
12267:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12268:      464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
12269:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12270:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12271:       26,    -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,
12272:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12273:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12274:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12275:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12276:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12277:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12278:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12279:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12280:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12281:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12282:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12283:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12284:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12285:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12286:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12287:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12288:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12289:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12290:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12291:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12292:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12293:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12294:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12295:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12296:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12297:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
12298:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12299:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12300:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12301:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12302:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
12303:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12304:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
12305:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
12306:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12307:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
12308:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
12309:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
12310:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
12311:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12312:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
12313:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
12314:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12315:      466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
12316:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12317:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12318:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12319:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12320:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12321:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12322:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12323:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
12324:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
12325:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
12326:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12327:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12328:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12329:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12330:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12331:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
12332:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
12333:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
12334:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12335:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
12336:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
12337:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
12338:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12339:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12340:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12341:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
12342:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12343:      278,    -1,   280,   281,   282,   283,    -1,    -1,   286,   287,
12344:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
12345:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12346:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12347:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12348:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12349:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
12350:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12351:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12352:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
12353:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12354:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
12355:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
12356:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
12357:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
12358:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
12359:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
12360:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
12361:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12362:      468,   469,   470,     3,    -1,     5,    -1,    -1,    -1,    -1,
12363:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12364:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
12365:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
12366:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12367:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12368:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
12369:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
12370:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
12371:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12372:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12373:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12374:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12375:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12376:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12377:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12378:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
12379:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12380:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12381:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12382:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12383:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12384:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12385:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12386:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12387:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12388:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12389:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12390:      280,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12391:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12392:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12393:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
12394:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12395:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12396:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12397:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12398:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12399:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12400:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12401:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
12402:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
12403:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
12404:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
12405:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
12406:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
12407:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12408:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12409:      470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12410:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12411:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
12412:       32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12413:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12414:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12415:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12416:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12417:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
12418:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12419:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12420:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12421:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12422:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12423:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12424:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12425:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
12426:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12427:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12428:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12429:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12430:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12431:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
12432:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12433:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12434:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12435:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12436:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12437:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12438:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12439:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12440:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12441:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12442:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12443:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12444:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12445:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12446:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12447:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
12448:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
12449:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
12450:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
12451:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
12452:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
12453:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
12454:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12455:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
12456:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12457:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12458:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12459:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12460:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12461:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12462:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12463:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12464:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12465:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12466:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12467:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12468:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12469:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12470:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12471:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12472:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12473:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12474:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12475:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12476:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12477:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12478:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12479:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12480:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12481:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12482:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12483:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
12484:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12485:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12486:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12487:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12488:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12489:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12490:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12491:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12492:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12493:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12494:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
12495:      394,   395,   396,    -1,   398,   399,   400,   401,   402,    -1,
12496:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
12497:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
12498:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12499:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
12500:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
12501:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12502:      464,   465,   466,   467,   468,   469,   470,     3,     4,    -1,
12503:       -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
12504:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12505:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12506:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12507:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12508:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12509:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12510:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12511:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12512:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12513:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12514:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12515:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12516:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12517:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12518:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12519:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12520:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12521:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12522:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12523:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12524:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12525:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12526:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12527:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12528:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12529:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12530:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12531:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
12532:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12533:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12534:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12535:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12536:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
12537:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12538:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
12539:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
12540:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12541:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
12542:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
12543:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
12544:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
12545:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12546:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
12547:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
12548:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12549:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
12550:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12551:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,
12552:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12553:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12554:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12555:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12556:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12557:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
12558:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
12559:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
12560:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12561:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12562:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12563:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12564:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12565:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
12566:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
12567:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
12568:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12569:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
12570:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
12571:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
12572:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12573:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12574:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12575:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
12576:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12577:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
12578:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
12579:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12580:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12581:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12582:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12583:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
12584:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12585:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12586:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
12587:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12588:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
12589:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
12590:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
12591:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
12592:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
12593:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
12594:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
12595:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12596:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
12597:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12598:       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
12599:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
12600:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12601:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12602:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
12603:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
12604:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
12605:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12606:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12607:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12608:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12609:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12610:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12611:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12612:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
12613:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12614:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12615:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12616:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12617:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12618:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12619:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12620:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12621:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12622:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12623:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12624:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12625:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12626:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12627:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
12628:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12629:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12630:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12631:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12632:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12633:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12634:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12635:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
12636:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
12637:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
12638:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
12639:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
12640:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
12641:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12642:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12643:      470,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
12644:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12645:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12646:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12647:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12648:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12649:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12650:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12651:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
12652:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12653:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12654:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12655:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12656:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12657:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12658:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12659:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
12660:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12661:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12662:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12663:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12664:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12665:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
12666:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12667:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12668:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12669:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12670:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12671:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12672:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12673:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12674:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12675:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12676:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12677:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12678:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12679:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12680:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12681:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
12682:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
12683:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
12684:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
12685:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
12686:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
12687:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
12688:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12689:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
12690:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12691:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12692:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12693:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12694:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12695:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12696:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12697:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12698:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12699:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12700:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12701:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12702:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12703:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12704:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12705:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12706:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12707:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12708:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12709:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12710:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12711:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12712:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12713:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12714:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12715:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12716:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12717:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
12718:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12719:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12720:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12721:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12722:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12723:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12724:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12725:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12726:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12727:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12728:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
12729:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
12730:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
12731:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
12732:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12733:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
12734:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
12735:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12736:      464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
12737:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12738:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12739:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12740:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12741:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12742:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12743:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12744:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12745:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12746:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12747:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12748:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12749:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12750:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12751:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12752:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12753:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12754:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12755:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12756:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12757:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12758:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12759:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12760:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12761:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12762:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12763:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12764:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12765:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
12766:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
12767:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
12768:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12769:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
12770:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
12771:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
12772:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
12773:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
12774:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
12775:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
12776:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
12777:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
12778:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
12779:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12780:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
12781:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
12782:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12783:      466,   467,   468,   469,   470,     3,    -1,     5,    -1,    -1,
12784:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12785:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12786:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12787:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12788:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12789:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12790:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12791:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
12792:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
12793:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
12794:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
12795:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
12796:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
12797:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
12798:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
12799:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
12800:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
12801:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
12802:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
12803:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
12804:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
12805:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
12806:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
12807:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12808:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12809:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
12810:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
12811:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
12812:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
12813:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
12814:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
12815:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
12816:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
12817:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
12818:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
12819:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
12820:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
12821:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
12822:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
12823:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
12824:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
12825:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
12826:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
12827:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
12828:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
12829:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12830:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
12831:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
12832:       20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
12833:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
12834:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
12835:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
12836:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
12837:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
12838:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
12839:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
12840:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
12841:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
12842:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
12843:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
12844:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
12845:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
12846:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
12847:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
12848:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
12849:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
12850:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
12851:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
12852:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
12853:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
12854:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
12855:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
12856:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
12857:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
12858:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
12859:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
12860:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
12861:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
12862:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
12863:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
12864:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
12865:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
12866:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
12867:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
12868:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
12869:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
12870:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
12871:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
12872:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
12873:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
12874:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
12875:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
12876:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
12877:      470,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
12878:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
12879:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
12880:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
12881:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
12882:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
12883:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
12884:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
12885:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
12886:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
12887:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
12888:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
12889:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
12890:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
12891:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
12892:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
12893:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
12894:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
12895:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
12896:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
12897:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
12898:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
12899:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
12900:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
12901:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
12902:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
12903:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
12904:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
12905:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
12906:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
12907:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
12908:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
12909:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
12910:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
12911:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
12912:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
12913:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
12914:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
12915:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
12916:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
12917:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
12918:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
12919:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
12920:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
12921:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
12922:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
12923:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
12924:       -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12925:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
12926:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
12927:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
12928:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
12929:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
12930:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
12931:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
12932:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
12933:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12934:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
12935:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
12936:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
12937:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
12938:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
12939:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
12940:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
12941:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
12942:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
12943:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
12944:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
12945:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
12946:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
12947:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
12948:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
12949:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
12950:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
12951:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
12952:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
12953:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
12954:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
12955:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
12956:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
12957:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
12958:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
12959:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
12960:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
12961:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
12962:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
12963:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
12964:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
12965:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
12966:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
12967:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
12968:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
12969:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
12970:      464,   465,   466,   467,   468,   469,   470,     3,    -1,     5,
12971:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12972:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12973:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12974:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12975:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12976:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12977:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12978:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
12979:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
12980:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
12981:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
12982:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
12983:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
12984:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
12985:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
12986:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
12987:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
12988:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
12989:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
12990:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
12991:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
12992:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
12993:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
12994:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12995:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12996:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
12997:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
12998:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
12999:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
13000:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
13001:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
13002:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13003:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13004:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
13005:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
13006:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13007:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
13008:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13009:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
13010:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
13011:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
13012:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
13013:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13014:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
13015:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
13016:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13017:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
13018:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13019:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13020:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,
13021:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
13022:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
13023:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13024:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
13025:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
13026:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
13027:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
13028:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13029:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13030:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13031:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13032:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
13033:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
13034:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
13035:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
13036:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13037:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
13038:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
13039:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
13040:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13041:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13042:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13043:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
13044:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
13045:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
13046:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
13047:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
13048:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13049:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13050:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13051:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
13052:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13053:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
13054:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
13055:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13056:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
13057:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
13058:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
13059:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
13060:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
13061:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
13062:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
13063:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
13064:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
13065:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
13066:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
13067:       30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,
13068:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
13069:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
13070:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
13071:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
13072:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
13073:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
13074:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
13075:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
13076:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
13077:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
13078:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
13079:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
13080:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
13081:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
13082:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
13083:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
13084:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
13085:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
13086:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
13087:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
13088:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
13089:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
13090:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
13091:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
13092:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
13093:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
13094:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
13095:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
13096:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
13097:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
13098:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
13099:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
13100:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
13101:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
13102:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
13103:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
13104:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
13105:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
13106:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
13107:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
13108:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
13109:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
13110:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
13111:      470,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
13112:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13113:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13114:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13115:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13116:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13117:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13118:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
13119:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
13120:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
13121:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
13122:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
13123:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
13124:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
13125:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
13126:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
13127:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
13128:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
13129:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
13130:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
13131:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
13132:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
13133:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
13134:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
13135:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13136:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
13137:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
13138:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
13139:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
13140:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
13141:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
13142:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
13143:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
13144:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
13145:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
13146:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
13147:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
13148:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
13149:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
13150:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
13151:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
13152:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
13153:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
13154:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
13155:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
13156:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
13157:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
13158:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13159:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
13160:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
13161:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
13162:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
13163:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
13164:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
13165:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
13166:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
13167:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13168:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
13169:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
13170:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
13171:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
13172:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
13173:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
13174:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
13175:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
13176:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
13177:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
13178:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
13179:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
13180:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
13181:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
13182:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
13183:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
13184:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
13185:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
13186:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
13187:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
13188:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
13189:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
13190:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
13191:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
13192:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
13193:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
13194:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
13195:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
13196:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
13197:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
13198:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
13199:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
13200:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
13201:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
13202:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
13203:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
13204:      464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
13205:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13206:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13207:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13208:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13209:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13210:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13211:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13212:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
13213:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
13214:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
13215:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13216:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13217:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13218:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13219:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
13220:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13221:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
13222:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
13223:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13224:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
13225:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
13226:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
13227:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13228:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
13229:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13230:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
13231:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
13232:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13233:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
13234:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
13235:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
13236:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13237:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13238:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
13239:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
13240:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13241:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
13242:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13243:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
13244:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
13245:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
13246:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
13247:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13248:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
13249:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
13250:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13251:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
13252:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13253:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13254:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13255:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
13256:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
13257:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13258:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
13259:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
13260:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
13261:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
13262:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13263:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13264:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13265:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13266:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
13267:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
13268:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
13269:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
13270:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13271:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
13272:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
13273:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
13274:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13275:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13276:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13277:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
13278:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
13279:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
13280:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
13281:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
13282:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13283:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13284:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13285:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
13286:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13287:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
13288:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
13289:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13290:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
13291:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
13292:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
13293:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
13294:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
13295:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
13296:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
13297:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
13298:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
13299:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
13300:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
13301:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
13302:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
13303:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
13304:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
13305:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
13306:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
13307:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
13308:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
13309:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
13310:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
13311:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
13312:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
13313:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
13314:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
13315:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
13316:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
13317:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
13318:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
13319:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
13320:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
13321:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
13322:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
13323:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
13324:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
13325:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
13326:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
13327:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
13328:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
13329:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
13330:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
13331:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
13332:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
13333:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
13334:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
13335:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
13336:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
13337:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
13338:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
13339:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
13340:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
13341:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
13342:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
13343:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
13344:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
13345:      470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13346:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13347:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13348:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13349:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13350:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13351:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13352:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
13353:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
13354:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
13355:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
13356:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
13357:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
13358:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
13359:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
13360:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
13361:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
13362:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
13363:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
13364:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
13365:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
13366:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
13367:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
13368:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
13369:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13370:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
13371:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
13372:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
13373:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
13374:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
13375:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
13376:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
13377:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
13378:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
13379:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
13380:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
13381:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
13382:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
13383:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
13384:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
13385:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
13386:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
13387:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
13388:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
13389:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
13390:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
13391:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
13392:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13393:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
13394:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
13395:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
13396:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
13397:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
13398:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
13399:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
13400:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
13401:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13402:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
13403:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
13404:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
13405:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
13406:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
13407:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
13408:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
13409:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
13410:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
13411:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
13412:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
13413:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
13414:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
13415:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
13416:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
13417:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
13418:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
13419:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
13420:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
13421:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
13422:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
13423:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
13424:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
13425:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
13426:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
13427:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
13428:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
13429:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
13430:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
13431:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
13432:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
13433:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
13434:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
13435:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
13436:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
13437:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
13438:      464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
13439:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13440:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13441:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13442:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13443:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13444:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13445:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13446:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
13447:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
13448:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
13449:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13450:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13451:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13452:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13453:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
13454:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13455:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
13456:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
13457:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13458:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
13459:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
13460:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
13461:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13462:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
13463:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13464:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
13465:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
13466:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13467:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
13468:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
13469:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
13470:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13471:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13472:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
13473:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
13474:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13475:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
13476:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13477:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
13478:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
13479:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
13480:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
13481:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13482:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
13483:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
13484:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13485:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
13486:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13487:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13488:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13489:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
13490:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
13491:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13492:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
13493:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
13494:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
13495:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
13496:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13497:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13498:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13499:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13500:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
13501:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
13502:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
13503:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
13504:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13505:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
13506:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
13507:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
13508:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13509:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13510:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13511:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
13512:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
13513:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
13514:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
13515:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
13516:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13517:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13518:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13519:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
13520:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13521:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
13522:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
13523:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13524:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
13525:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
13526:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
13527:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
13528:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
13529:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
13530:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
13531:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
13532:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
13533:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
13534:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
13535:       30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,
13536:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
13537:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
13538:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
13539:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
13540:       80,    -1,    82,    83,    84,    -1,    86,    87,    88,    89,
13541:       90,    91,    -1,    -1,    94,    95,    96,    -1,    -1,    -1,
13542:       -1,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
13543:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
13544:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
13545:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
13546:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,   149,
13547:      150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,
13548:      160,   161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,
13549:      170,   171,    -1,   173,    -1,   175,    -1,   177,   178,    -1,
13550:      180,   181,   182,   183,   184,   185,    -1,   187,   188,   189,
13551:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
13552:       -1,   201,   202,   203,   204,   205,   206,   207,    -1,   209,
13553:       -1,   211,    -1,    -1,   214,    -1,   216,   217,   218,   219,
13554:      220,    -1,    -1,   223,    -1,   225,    -1,    -1,   228,   229,
13555:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
13556:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
13557:      250,   251,   252,   253,   254,   255,   256,   257,    -1,   259,
13558:      260,   261,   262,   263,    -1,   265,   266,    -1,   268,    -1,
13559:      270,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
13560:       -1,   281,   282,   283,    -1,    -1,   286,   287,    -1,   289,
13561:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
13562:      300,   301,    -1,   303,   304,   305,   306,   307,   308,   309,
13563:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
13564:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
13565:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
13566:       -1,   341,   342,    -1,   344,   345,   346,   347,   348,   349,
13567:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
13568:      360,   361,   362,   363,   364,    -1,    -1,   367,   368,   369,
13569:      370,    -1,   372,   373,   374,   375,    -1,   377,   378,   379,
13570:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
13571:      390,   391,    -1,   393,   394,    -1,   396,    -1,   398,   399,
13572:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
13573:      410,   411,   412,    -1,   414,   415,   416,   417,   418,   419,
13574:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
13575:       -1,   431,   432,   433,   434,   435,   436,   437,    -1,   439,
13576:       -1,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
13577:      450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
13578:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
13579:      470,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13580:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,
13581:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
13582:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
13583:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
13584:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
13585:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
13586:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    -1,
13587:       82,    83,    84,    -1,    86,    87,    88,    89,    90,    91,
13588:       -1,    -1,    94,    95,    96,    -1,    -1,    -1,    -1,    -1,
13589:       -1,    -1,   104,   105,   106,   107,   108,   109,   110,   111,
13590:      112,   113,    -1,   115,    -1,   117,   118,   119,   120,   121,
13591:      122,    -1,   124,   125,   126,   127,   128,    -1,    -1,   131,
13592:      132,   133,   134,   135,    -1,   137,   138,   139,    -1,   141,
13593:      142,   143,    -1,   145,   146,   147,   148,   149,   150,   151,
13594:      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,
13595:       -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,
13596:       -1,   173,    -1,   175,    -1,   177,   178,    -1,   180,   181,
13597:      182,   183,   184,   185,    -1,   187,   188,   189,   190,    -1,
13598:      192,   193,   194,   195,   196,   197,    -1,   199,    -1,   201,
13599:      202,   203,   204,   205,   206,   207,    -1,   209,    -1,   211,
13600:       -1,    -1,   214,    -1,   216,   217,   218,   219,   220,    -1,
13601:       -1,   223,    -1,   225,    -1,    -1,   228,   229,   230,    -1,
13602:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
13603:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
13604:      252,   253,   254,   255,   256,   257,    -1,   259,   260,   261,
13605:      262,   263,    -1,   265,   266,    -1,   268,    -1,   270,   271,
13606:      272,   273,   274,   275,    -1,   277,   278,    -1,    -1,   281,
13607:      282,   283,    -1,    -1,   286,   287,    -1,   289,    -1,   291,
13608:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
13609:       -1,   303,   304,   305,   306,   307,   308,   309,   310,   311,
13610:       -1,   313,   314,   315,   316,   317,   318,   319,   320,   321,
13611:      322,   323,   324,   325,   326,    -1,   328,   329,   330,   331,
13612:      332,   333,   334,   335,   336,   337,   338,   339,    -1,   341,
13613:      342,    -1,   344,   345,   346,   347,   348,   349,   350,   351,
13614:      352,   353,   354,   355,   356,   357,   358,    -1,   360,   361,
13615:      362,   363,   364,    -1,   366,   367,   368,   369,   370,    -1,
13616:      372,   373,   374,   375,    -1,   377,   378,   379,   380,   381,
13617:      382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
13618:       -1,   393,   394,    -1,   396,    -1,   398,   399,   400,   401,
13619:      402,    -1,   404,   405,    -1,    -1,   408,   409,   410,   411,
13620:      412,    -1,   414,   415,   416,   417,   418,   419,   420,   421,
13621:       -1,    -1,   424,   425,   426,   427,   428,    -1,    -1,   431,
13622:      432,   433,   434,   435,   436,   437,    -1,   439,    -1,   441,
13623:      442,   443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,
13624:      452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
13625:      462,   463,   464,   465,   466,   467,   468,   469,   470,     3,
13626:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13627:       -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,    23,
13628:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
13629:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
13630:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
13631:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
13632:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
13633:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
13634:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
13635:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13636:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
13637:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
13638:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
13639:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
13640:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
13641:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
13642:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
13643:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
13644:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
13645:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
13646:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
13647:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
13648:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
13649:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
13650:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
13651:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
13652:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
13653:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
13654:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
13655:      294,   295,   296,   297,   298,   299,   300,   301,    -1,   303,
13656:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
13657:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
13658:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
13659:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
13660:      344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
13661:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
13662:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
13663:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
13664:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
13665:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
13666:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
13667:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
13668:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
13669:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
13670:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
13671:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
13672:      464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
13673:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13674:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13675:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13676:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13677:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13678:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13679:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13680:       76,    77,    78,    79,    80,    -1,    82,    83,    84,    -1,
13681:       86,    87,    88,    89,    90,    91,    -1,    -1,    94,    95,
13682:       96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   104,   105,
13683:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13684:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13685:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13686:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13687:      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,
13688:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13689:       -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,   175,
13690:       -1,   177,   178,    -1,   180,   181,   182,   183,   184,   185,
13691:       -1,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13692:      196,   197,    -1,   199,    -1,   201,   202,   203,   204,   205,
13693:      206,   207,    -1,   209,    -1,   211,    -1,    -1,   214,    -1,
13694:      216,   217,   218,   219,   220,    -1,    -1,   223,    -1,   225,
13695:       -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13696:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
13697:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13698:      256,   257,    -1,   259,   260,   261,   262,   263,    -1,   265,
13699:      266,    -1,   268,    -1,   270,   271,   272,   273,   274,   275,
13700:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13701:      286,   287,    -1,   289,    -1,   291,   292,   293,   294,   295,
13702:      296,   297,   298,   299,   300,   301,    -1,   303,   304,   305,
13703:      306,   307,   308,   309,   310,   311,    -1,   313,   314,   315,
13704:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13705:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13706:      336,   337,   338,   339,    -1,   341,   342,    -1,   344,   345,
13707:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
13708:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13709:      366,   367,   368,   369,   370,    -1,   372,   373,   374,   375,
13710:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13711:      386,   387,   388,   389,   390,   391,    -1,   393,   394,    -1,
13712:      396,    -1,   398,   399,   400,   401,   402,    -1,   404,   405,
13713:       -1,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,
13714:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
13715:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13716:      436,   437,    -1,   439,    -1,   441,   442,   443,   444,    -1,
13717:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
13718:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13719:      466,   467,   468,   469,   470,     3,    -1,    -1,    -1,    -1,
13720:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13721:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
13722:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13723:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
13724:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
13725:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
13726:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
13727:       78,    79,    80,    -1,    82,    83,    84,    -1,    86,    87,
13728:       88,    89,    90,    91,    -1,    -1,    94,    95,    96,    -1,
13729:       -1,    -1,    -1,    -1,    -1,    -1,   104,   105,   106,   107,
13730:      108,   109,   110,   111,   112,   113,    -1,   115,    -1,   117,
13731:      118,   119,   120,   121,   122,    -1,   124,   125,   126,   127,
13732:      128,    -1,    -1,   131,   132,   133,   134,   135,    -1,   137,
13733:      138,   139,    -1,   141,   142,   143,    -1,   145,   146,   147,
13734:      148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,
13735:      158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,
13736:       -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,
13737:      178,    -1,   180,   181,   182,   183,   184,   185,    -1,   187,
13738:      188,   189,   190,    -1,   192,   193,   194,   195,   196,   197,
13739:       -1,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
13740:       -1,   209,    -1,   211,    -1,    -1,   214,    -1,   216,   217,
13741:      218,   219,   220,    -1,    -1,   223,    -1,   225,    -1,    -1,
13742:      228,   229,   230,    -1,    -1,   233,   234,   235,   236,   237,
13743:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
13744:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
13745:       -1,   259,   260,   261,   262,   263,    -1,   265,   266,    -1,
13746:      268,    -1,   270,   271,   272,   273,   274,   275,    -1,   277,
13747:      278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,   287,
13748:       -1,   289,    -1,   291,   292,   293,   294,   295,   296,   297,
13749:      298,   299,   300,   301,    -1,   303,   304,   305,   306,   307,
13750:      308,   309,   310,   311,    -1,   313,   314,   315,   316,   317,
13751:      318,   319,   320,   321,   322,   323,   324,   325,   326,    -1,
13752:      328,   329,   330,   331,   332,   333,   334,   335,   336,   337,
13753:      338,   339,    -1,   341,   342,    -1,   344,   345,   346,   347,
13754:      348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
13755:      358,    -1,   360,   361,   362,   363,   364,    -1,   366,   367,
13756:      368,   369,   370,    -1,   372,   373,   374,   375,    -1,   377,
13757:      378,   379,   380,   381,   382,   383,   384,   385,   386,   387,
13758:      388,   389,   390,   391,    -1,   393,   394,    -1,   396,    -1,
13759:      398,   399,   400,   401,   402,    -1,   404,   405,    -1,    -1,
13760:      408,   409,   410,   411,   412,    -1,   414,   415,   416,   417,
13761:      418,   419,   420,   421,    -1,    -1,   424,   425,   426,   427,
13762:      428,    -1,    -1,   431,   432,   433,   434,   435,   436,   437,
13763:       -1,   439,    -1,   441,   442,   443,   444,    -1,    -1,   447,
13764:       -1,    -1,   450,   451,   452,   453,   454,   455,   456,   457,
13765:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
13766:      468,   469,   470,     3,    -1,    -1,    -1,    -1,    -1,    -1,
13767:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,
13768:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
13769:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
13770:       -1,    41,    42,    43,    44,    45,    46,    47,    -1,    49,
13771:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
13772:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
13773:       70,    71,    -1,    -1,    74,    -1,    76,    77,    78,    79,
13774:       80,    81,    82,    83,    84,    -1,    86,    87,    88,    89,
13775:       90,    91,    -1,    93,    94,    95,    96,    -1,    -1,    -1,
13776:      100,    -1,    -1,    -1,   104,   105,   106,   107,   108,   109,
13777:      110,   111,   112,   113,    -1,   115,    -1,   117,   118,   119,
13778:      120,   121,   122,    -1,   124,   125,   126,   127,   128,    -1,
13779:       -1,   131,   132,   133,   134,   135,    -1,   137,   138,   139,
13780:       -1,   141,   142,   143,    -1,   145,   146,   147,   148,    -1,
13781:      150,   151,   152,   153,    -1,    -1,   156,    -1,   158,   159,
13782:      160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,
13783:      170,   171,   172,   173,    -1,   175,    -1,    -1,   178,    -1,
13784:      180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
13785:      190,    -1,   192,   193,   194,   195,   196,   197,    -1,   199,
13786:      200,    -1,   202,   203,   204,   205,   206,   207,    -1,   209,
13787:       -1,   211,   212,   213,   214,   215,   216,   217,   218,   219,
13788:      220,    -1,    -1,   223,   224,   225,   226,    -1,   228,   229,
13789:      230,    -1,    -1,   233,   234,   235,   236,   237,   238,   239,
13790:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
13791:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
13792:      260,   261,   262,    -1,    -1,   265,   266,   267,   268,    -1,
13793:       -1,   271,   272,   273,   274,   275,    -1,   277,   278,    -1,
13794:       -1,   281,   282,   283,    -1,    -1,   286,    -1,   288,   289,
13795:      290,    -1,   292,   293,   294,   295,   296,   297,   298,   299,
13796:      300,   301,    -1,   303,   304,    -1,   306,   307,    -1,   309,
13797:      310,   311,    -1,   313,   314,   315,   316,   317,   318,   319,
13798:      320,   321,   322,   323,   324,   325,   326,    -1,   328,   329,
13799:      330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
13800:       -1,   341,   342,   343,   344,   345,   346,   347,   348,   349,
13801:      350,   351,   352,   353,   354,   355,   356,   357,   358,    -1,
13802:      360,   361,   362,   363,   364,    -1,   366,   367,   368,   369,
13803:      370,   371,   372,   373,   374,   375,    -1,   377,   378,   379,
13804:      380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
13805:       -1,   391,    -1,   393,   394,    -1,   396,   397,   398,   399,
13806:      400,   401,   402,    -1,   404,   405,    -1,    -1,   408,   409,
13807:       -1,   411,    -1,    -1,   414,   415,   416,   417,   418,   419,
13808:      420,   421,    -1,    -1,   424,   425,   426,   427,   428,    -1,
13809:       -1,   431,   432,   433,   434,   435,    -1,   437,    -1,   439,
13810:      440,   441,   442,   443,   444,    -1,    -1,   447,    -1,    -1,
13811:      450,   451,   452,   453,   454,   455,     3,    -1,    -1,    -1,
13812:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   467,   468,   469,
13813:      470,    -1,    19,    20,    21,    22,    23,    24,    25,    26,
13814:       -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,
13815:       -1,    38,    39,    -1,    41,    42,    43,    44,    45,    46,
13816:       47,    -1,    49,    50,    51,    52,    -1,    54,    55,    56,
13817:       57,    58,    59,    -1,    -1,    62,    63,    64,    65,    66,
13818:       -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,    76,
13819:       77,    78,    79,    80,    81,    82,    83,    84,    -1,    86,
13820:       87,    88,    89,    90,    91,    -1,    93,    94,    95,    96,
13821:       -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,   106,
13822:      107,   108,   109,   110,   111,   112,   113,    -1,   115,    -1,
13823:      117,   118,   119,   120,   121,   122,    -1,   124,   125,   126,
13824:      127,   128,    -1,    -1,   131,   132,   133,   134,   135,    -1,
13825:      137,   138,   139,    -1,   141,   142,   143,    -1,   145,   146,
13826:      147,   148,    -1,   150,   151,   152,   153,    -1,    -1,   156,
13827:       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,
13828:       -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,
13829:       -1,   178,    -1,   180,   181,   182,   183,   184,   185,   186,
13830:      187,   188,   189,   190,    -1,   192,   193,   194,   195,   196,
13831:      197,    -1,   199,   200,    -1,   202,   203,   204,   205,   206,
13832:      207,    -1,   209,    -1,   211,   212,   213,   214,   215,   216,
13833:      217,   218,   219,   220,    -1,    -1,   223,   224,   225,   226,
13834:       -1,   228,   229,   230,    -1,    -1,   233,   234,   235,   236,
13835:      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
13836:      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
13837:      257,   258,   259,   260,   261,   262,    -1,    -1,   265,   266,
13838:      267,   268,    -1,    -1,   271,   272,   273,   274,   275,    -1,
13839:      277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,   286,
13840:       -1,   288,   289,   290,    -1,   292,   293,   294,   295,   296,
13841:      297,   298,   299,   300,   301,    -1,   303,   304,    -1,   306,
13842:      307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,
13843:      317,   318,   319,   320,   321,   322,   323,   324,   325,   326,
13844:       -1,   328,   329,   330,   331,   332,   333,   334,   335,   336,
13845:      337,   338,   339,    -1,   341,   342,   343,   344,   345,   346,
13846:      347,   348,   349,   350,   351,   352,   353,   354,   355,   356,
13847:      357,   358,    -1,   360,   361,   362,   363,   364,    -1,   366,
13848:      367,   368,   369,   370,   371,   372,   373,   374,   375,    -1,
13849:      377,   378,   379,   380,   381,   382,   383,   384,   385,   386,
13850:      387,   388,   389,    -1,   391,    -1,   393,   394,    -1,   396,
13851:      397,   398,   399,   400,   401,   402,    -1,   404,   405,    -1,
13852:       -1,   408,   409,    -1,   411,    -1,    -1,   414,   415,   416,
13853:      417,   418,   419,   420,   421,    -1,    -1,   424,   425,   426,
13854:      427,   428,    -1,    -1,   431,   432,   433,   434,   435,    -1,
13855:      437,    -1,   439,   440,   441,   442,   443,   444,    -1,    -1,
13856:      447,    -1,    -1,   450,   451,   452,   453,   454,   455,     3,
13857:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13858:      467,   468,   469,   470,    -1,    19,    20,    21,    22,    23,
13859:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
13860:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
13861:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
13862:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
13863:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
13864:       -1,    -1,    76,    77,    78,    79,    80,    -1,    82,    83,
13865:       84,    -1,    86,    87,    88,    89,    90,    91,    -1,    -1,
13866:       94,    95,    96,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13867:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
13868:       -1,   115,    -1,   117,   118,   119,   120,   121,   122,    -1,
13869:      124,   125,   126,   127,   128,    -1,    -1,   131,   132,   133,
13870:      134,   135,    -1,   137,   138,   139,    -1,   141,   142,   143,
13871:       -1,   145,   146,   147,   148,   149,   150,   151,   152,   153,
13872:      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,
13873:       -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,
13874:       -1,   175,    -1,   177,   178,    -1,   180,   181,   182,   183,
13875:      184,   185,    -1,   187,   188,   189,   190,    -1,   192,   193,
13876:      194,   195,   196,   197,    -1,   199,    -1,   201,   202,   203,
13877:      204,   205,   206,   207,    -1,   209,    -1,   211,    -1,    -1,
13878:      214,    -1,   216,   217,   218,   219,   220,    -1,    -1,   223,
13879:       -1,   225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,
13880:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
13881:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
13882:      254,   255,   256,   257,    -1,   259,   260,   261,   262,   263,
13883:       -1,   265,   266,    -1,   268,    -1,   270,   271,   272,   273,
13884:      274,   275,    -1,   277,   278,    -1,    -1,   281,   282,   283,
13885:       -1,    -1,   286,   287,    -1,   289,    -1,   291,   292,   293,
13886:      294,   295,   296,   297,    -1,   299,   300,   301,    -1,   303,
13887:      304,   305,   306,   307,   308,   309,   310,   311,    -1,   313,
13888:      314,   315,   316,   317,   318,   319,    -1,   321,   322,   323,
13889:      324,   325,   326,    -1,   328,   329,   330,   331,   332,   333,
13890:      334,   335,   336,   337,   338,   339,    -1,   341,   342,    -1,
13891:      344,   345,   346,   347,    -1,   349,   350,   351,   352,   353,
13892:      354,   355,   356,   357,   358,    -1,   360,   361,   362,   363,
13893:      364,    -1,   366,   367,   368,   369,   370,    -1,   372,   373,
13894:      374,   375,    -1,   377,   378,   379,   380,   381,   382,   383,
13895:      384,   385,   386,   387,   388,   389,   390,   391,    -1,   393,
13896:      394,    -1,   396,    -1,   398,   399,   400,   401,   402,    -1,
13897:      404,   405,    -1,    -1,   408,   409,   410,   411,   412,    -1,
13898:      414,   415,   416,   417,   418,   419,   420,   421,    -1,    -1,
13899:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
13900:      434,   435,   436,   437,    -1,   439,    -1,   441,   442,   443,
13901:      444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,   453,
13902:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
13903:      464,   465,   466,   467,   468,   469,   470,     3,    -1,    -1,
13904:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13905:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13906:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13907:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
13908:       46,    47,    -1,    49,    50,    51,    52,    -1,    54,    55,
13909:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13910:       66,    -1,    68,    69,    70,    71,    -1,    -1,    74,    -1,
13911:       76,    77,    78,    79,    80,    81,    82,    83,    84,    -1,
13912:       86,    87,    88,    89,    90,    91,    -1,    93,    94,    95,
13913:       96,    -1,    -1,    -1,   100,    -1,    -1,    -1,   104,   105,
13914:      106,   107,   108,   109,   110,   111,   112,   113,    -1,   115,
13915:       -1,   117,   118,   119,   120,   121,   122,    -1,   124,   125,
13916:      126,   127,   128,    -1,    -1,   131,   132,   133,   134,   135,
13917:       -1,   137,   138,   139,    -1,   141,   142,   143,    -1,   145,
13918:      146,   147,   148,    -1,   150,   151,   152,   153,    -1,    -1,
13919:      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,
13920:      166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,
13921:       -1,    -1,   178,    -1,   180,   181,   182,   183,   184,   185,
13922:      186,   187,   188,   189,   190,    -1,   192,   193,   194,   195,
13923:      196,   197,    -1,   199,   200,    -1,   202,   203,   204,   205,
13924:      206,   207,    -1,   209,    -1,   211,   212,   213,   214,   215,
13925:      216,   217,   218,   219,   220,    -1,    -1,   223,   224,   225,
13926:      226,    -1,   228,   229,   230,    -1,    -1,   233,   234,   235,
13927:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
13928:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13929:      256,   257,   258,   259,   260,   261,   262,    -1,    -1,   265,
13930:      266,   267,   268,    -1,    -1,   271,   272,   273,   274,   275,
13931:       -1,   277,   278,    -1,    -1,   281,   282,   283,    -1,    -1,
13932:      286,    -1,   288,   289,   290,    -1,   292,   293,   294,   295,
13933:      296,   297,   298,   299,   300,   301,    -1,   303,   304,    -1,
13934:      306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,
13935:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
13936:      326,    -1,   328,   329,   330,   331,   332,   333,   334,   335,
13937:      336,   337,   338,   339,    -1,   341,   342,   343,   344,   345,
13938:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
13939:      356,   357,   358,    -1,   360,   361,   362,   363,   364,    -1,
13940:      366,    -1,   368,   369,   370,   371,   372,   373,   374,   375,
13941:       -1,   377,   378,   379,   380,   381,   382,   383,   384,   385,
13942:      386,   387,   388,   389,    -1,   391,    -1,   393,   394,    -1,
13943:      396,   397,   398,   399,   400,   401,   402,    -1,   404,   405,
13944:       -1,    -1,   408,   409,    -1,   411,    -1,    -1,   414,   415,
13945:      416,   417,   418,   419,   420,   421,    -1,    -1,   424,   425,
13946:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13947:       -1,   437,    -1,   439,   440,   441,   442,   443,   444,    -1,
13948:       -1,   447,    -1,    -1,   450,   451,   452,   453,   454,   455,
13949:        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13950:       -1,   467,   468,   469,   470,    -1,    19,    20,    21,    22,
13951:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
13952:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
13953:       43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
13954:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
13955:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    -1,
13956:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
13957:       83,    84,    -1,    86,    87,    88,    89,    90,    91,    -1,
13958:       93,    94,    95,    96,    -1,    -1,    -1,   100,    -1,    -1,
13959:       -1,   104,   105,   106,   107,   108,   109,   110,   111,   112,
13960:      113,    -1,   115,    -1,   117,   118,   119,   120,   121,   122,
13961:       -1,   124,   125,   126,   127,   128,    -1,    -1,   131,   132,
13962:      133,   134,   135,    -1,   137,   138,   139,    -1,   141,   142,
13963:      143,    -1,   145,   146,   147,   148,    -1,   150,   151,   152,
13964:      153,    -1,    -1,   156,    -1,   158,   159,   160,   161,    -1,
13965:      163,    -1,   165,   166,    -1,   168,   169,   170,   171,   172,
13966:      173,    -1,   175,    -1,    -1,   178,    -1,   180,   181,   182,
13967:      183,   184,   185,   186,   187,   188,   189,   190,    -1,   192,
13968:      193,   194,   195,   196,   197,    -1,   199,   200,    -1,   202,
13969:      203,   204,   205,   206,   207,    -1,   209,    -1,   211,   212,
13970:      213,   214,   215,   216,   217,   218,   219,   220,    -1,    -1,
13971:      223,   224,   225,   226,    -1,   228,   229,   230,    -1,    -1,
13972:      233,   234,   235,   236,   237,    -1,   239,   240,   241,   242,
13973:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
13974:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
13975:       -1,    -1,   265,   266,   267,   268,    -1,    -1,   271,   272,
13976:      273,   274,   275,    -1,   277,   278,    -1,    -1,   281,   282,
13977:      283,    -1,    -1,   286,    -1,   288,   289,   290,    -1,   292,
13978:      293,   294,   295,   296,   297,   298,   299,   300,   301,    -1,
13979:      303,   304,    -1,   306,   307,    -1,   309,   310,   311,    -1,
13980:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
13981:      323,   324,   325,   326,    -1,   328,   329,   330,   331,   332,
13982:      333,   334,   335,   336,   337,   338,   339,    -1,   341,   342,
13983:      343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
13984:      353,   354,   355,   356,   357,   358,    -1,   360,   361,   362,
13985:      363,   364,    -1,   366,    -1,   368,   369,   370,   371,   372,
13986:      373,   374,   375,    -1,   377,   378,   379,   380,   381,   382,
13987:      383,   384,   385,   386,   387,    -1,   389,    -1,   391,    -1,
13988:      393,   394,    -1,   396,   397,   398,   399,   400,   401,   402,
13989:       -1,   404,   405,    -1,    -1,   408,   409,    -1,   411,    -1,
13990:       -1,   414,   415,   416,   417,   418,   419,   420,   421,    -1,
13991:       -1,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
13992:      433,   434,   435,    -1,   437,    -1,   439,   440,   441,   442,
13993:      443,   444,    -1,    -1,   447,    -1,    -1,   450,   451,   452,
13994:      453,   454,   455,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13995:       -1,    -1,    -1,    -1,   467,   468,   469,   470
13996: };
13997: 
13998: /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
13999:    symbol of state STATE-NUM.  */
14000: static const yytype_uint16 yystos[] =
14001: {
14002:        0,    19,    29,    31,    32,    47,    56,    68,    79,    90,
14003:       92,   110,   124,   134,   140,   148,   150,   151,   163,   190,
14004:      229,   306,   309,   337,   345,   359,   366,   370,   380,   391,
14005:      395,   431,   436,   449,   473,   487,   498,   499,   500,   501,
14006:      512,   513,   516,   518,   522,   536,   537,   539,   541,   548,
14007:      550,   596,   603,   606,   607,   624,   625,   626,   627,   628,
14008:      629,   673,   810,   813,   816,   823,   824,   825,   826,   827,
14009:      834,   838,   844,   846,   851,   855,   856,   859,   860,   862,
14010:      863,   865,   408,   452,   549,   194,   352,   360,   395,   442,
14011:      549,     3,    19,    20,    21,    22,    23,    24,    25,    26,
14012:       28,    29,    30,    38,    39,    41,    42,    43,    44,    45,
14013:       46,    47,    48,    49,    50,    51,    52,    54,    55,    56,
14014:       57,    58,    59,    62,    63,    64,    65,    66,    68,    69,
14015:       70,    71,    72,    74,    76,    77,    78,    79,    80,    81,
14016:       82,    83,    84,    86,    87,    88,    89,    90,    91,    93,
14017:       94,    95,    96,   100,   104,   105,   106,   107,   108,   109,
14018:      110,   111,   112,   113,   115,   117,   118,   119,   120,   121,
14019:      122,   124,   125,   126,   127,   128,   131,   132,   133,   134,
14020:      135,   137,   138,   139,   141,   142,   143,   145,   146,   147,
14021:      148,   149,   150,   151,   152,   153,   154,   156,   158,   159,
14022:      160,   161,   163,   165,   166,   168,   169,   170,   171,   172,
14023:      173,   175,   177,   178,   180,   181,   182,   183,   184,   185,
14024:      186,   187,   188,   189,   190,   192,   193,   194,   195,   196,
14025:      197,   199,   200,   201,   202,   203,   204,   205,   206,   207,
14026:      209,   211,   212,   213,   214,   215,   216,   217,   218,   219,
14027:      220,   223,   224,   225,   226,   228,   229,   230,   233,   234,
14028:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
14029:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
14030:      255,   256,   257,   258,   259,   260,   261,   262,   263,   265,
14031:      266,   267,   268,   270,   271,   272,   273,   274,   275,   277,
14032:      278,   281,   282,   283,   286,   287,   288,   289,   290,   291,
14033:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
14034:      303,   304,   305,   306,   307,   308,   309,   310,   311,   313,
14035:      314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
14036:      324,   325,   326,   328,   329,   330,   331,   332,   333,   334,
14037:      335,   336,   337,   338,   339,   341,   342,   343,   344,   345,
14038:      346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
14039:      356,   357,   358,   360,   361,   362,   363,   364,   366,   367,
14040:      368,   369,   370,   371,   372,   373,   374,   375,   377,   378,
14041:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
14042:      389,   390,   391,   393,   394,   396,   397,   398,   399,   400,
14043:      401,   402,   404,   405,   408,   409,   410,   411,   412,   414,
14044:      415,   416,   417,   418,   419,   420,   421,   424,   425,   426,
14045:      427,   428,   431,   432,   433,   434,   435,   436,   437,   439,
14046:      440,   441,   442,   443,   444,   447,   450,   451,   452,   453,
14047:      454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
14048:      464,   465,   466,   467,   468,   469,   470,   729,   795,   799,
14049:      802,   868,   869,   870,   549,    50,   487,   619,   169,   173,
14050:      230,   237,   284,   352,   399,   401,   417,   423,   426,   594,
14051:      604,   822,     3,    27,   238,   309,   388,   793,   799,   868,
14052:       21,    74,    89,   143,   152,   164,   169,   194,   237,   241,
14053:      304,   318,   349,   352,   360,   363,   382,   395,   402,   411,
14054:      417,   442,   597,   598,   601,   549,   793,    92,   440,   487,
14055:      518,   606,   624,   830,   834,   851,   865,   107,    68,   107,
14056:        5,   798,   845,   799,   793,    27,   404,   408,   799,   857,
14057:      858,   861,   549,    27,   129,   636,   637,   173,   230,   352,
14058:      364,   404,   839,   840,   861,   549,   436,   624,   629,   861,
14059:        5,   280,   684,   791,   799,   800,   168,   487,   848,   487,
14060:      325,   630,   631,   793,   630,   625,   626,     0,   490,   119,
14061:      204,   428,   144,   208,   285,   422,   638,   639,   625,   627,
14062:      628,   491,   440,   828,    27,   404,   408,   624,   861,   185,
14063:      791,   793,   185,   791,   185,   684,   185,   791,   487,   485,
14064:      489,   777,   779,   518,   606,   624,   812,   851,   791,   399,
14065:      401,   399,   401,   335,   185,   799,   799,   804,   325,   360,
14066:      395,   442,   791,   194,    27,   793,   243,   411,   106,   395,
14067:      442,   355,     3,    44,    49,    50,    51,    52,    64,    65,
14068:       74,    81,    93,   100,   111,   112,   133,   160,   166,   168,
14069:      172,   185,   186,   200,   206,   207,   209,   212,   213,   215,
14070:      224,   226,   238,   257,   258,   259,   267,   272,   288,   290,
14071:      322,   343,   347,   367,   371,   374,   388,   397,   404,   405,
14072:      416,   437,   440,   602,   695,   696,   698,   700,   702,   704,
14073:      706,   707,   708,   710,   711,   712,   714,   715,   803,   868,
14074:      871,   185,   599,   804,   185,   792,   793,   185,   793,   487,
14075:      540,   594,   830,     3,    48,    49,    51,    52,    64,    65,
14076:       72,   111,   112,   149,   154,   160,   177,   201,   206,   207,
14077:      209,   238,   257,   259,   263,   270,   272,   287,   291,   305,
14078:      308,   322,   347,   367,   374,   388,   390,   404,   405,   410,
14079:      412,   416,   436,   437,   456,   457,   458,   459,   460,   461,
14080:      462,   463,   464,   465,   466,   831,   833,   834,   836,   837,
14081:      868,   872,   828,   798,   798,   476,   487,   487,   811,   470,
14082:      214,   489,   279,     4,     6,     7,     8,     9,    10,    35,
14083:       49,    51,    52,    60,    61,    64,    65,    72,    74,    97,
14084:       98,    99,   100,   101,   102,   103,   111,   112,   114,   149,
14085:      154,   155,   160,   206,   207,   209,   231,   232,   257,   259,
14086:      264,   269,   270,   272,   281,   291,   305,   322,   347,   365,
14087:      374,   390,   404,   405,   410,   412,   413,   416,   429,   437,
14088:      471,   478,   479,   480,   485,   487,   492,   494,   495,   625,
14089:      699,   702,   705,   706,   707,   709,   710,   711,   714,   715,
14090:      726,   728,   729,   730,   732,   745,   746,   752,   771,   776,
14091:      783,   784,   795,   796,   797,   798,   799,   782,   783,   839,
14092:      839,   798,   839,   470,   167,   406,   476,   487,   791,   480,
14093:      779,     3,   166,   168,   440,   834,   847,   849,   166,   850,
14094:      726,   756,   799,   630,   491,   487,   806,   488,   488,   500,
14095:      167,   210,   684,   852,    27,   129,   635,   635,    54,   635,
14096:      157,   162,   227,   276,   644,   646,   647,   666,   668,   669,
14097:      670,   638,   639,   487,   791,   470,   214,   149,    23,    29,
14098:      134,   283,   333,   337,   366,   433,   506,   509,   510,   333,
14099:      149,    36,    55,   105,   193,   242,   250,   262,   293,   333,
14100:      338,   360,   366,   380,   509,   542,   545,   149,   333,   366,
14101:      509,   149,   333,   366,   509,     3,    27,    44,    50,    74,
14102:       81,    93,   100,   129,   166,   168,   172,   186,   200,   212,
14103:      213,   215,   224,   226,   238,   258,   267,   288,   290,   343,
14104:      371,   388,   397,   416,   438,   440,   480,   488,   726,   758,
14105:      759,   801,   807,   868,   873,   726,   778,     3,    27,    31,
14106:       32,    33,    34,    35,    36,    37,    40,    53,    60,    61,
14107:       67,    73,    75,    85,    92,    97,    98,    99,   101,   102,
14108:      103,   114,   116,   123,   129,   130,   136,   140,   144,   155,
14109:      157,   162,   164,   167,   174,   176,   179,   191,   198,   208,
14110:      210,   221,   222,   227,   231,   232,   264,   269,   276,   279,
14111:      280,   284,   285,   302,   312,   327,   340,   359,   365,   376,
14112:      392,   395,   403,   406,   407,   413,   422,   423,   429,   430,
14113:      436,   438,   445,   446,   448,   449,   794,   808,   868,   872,
14114:      874,   777,   488,   487,   584,   594,   264,   814,   489,   805,
14115:       36,   442,   185,   791,   185,   791,   867,   791,   487,   605,
14116:       81,   819,   453,    82,   126,   296,   400,   439,   713,   713,
14117:      713,   487,   701,   701,   308,   487,   703,   149,   487,    64,
14118:       65,   713,   701,   698,   451,   473,   487,   716,   487,   716,
14119:       58,   339,   491,   600,   487,    35,   697,   487,   108,   109,
14120:      182,   183,   244,   245,   246,   247,   248,   249,   252,   253,
14121:      356,   357,   467,   468,   487,   717,   718,   719,   720,   721,
14122:      722,   723,   724,   725,   701,   149,   491,   600,   149,   491,
14123:      600,   149,   279,   756,   395,   488,   491,     4,   155,   279,
14124:      413,   478,   479,   544,   547,   797,   798,   829,   831,   832,
14125:      835,   830,   487,   614,   618,   544,   835,   841,   843,   758,
14126:      696,   760,    36,   225,   799,   487,   780,   485,   726,   775,
14127:      487,   487,   162,   487,   487,   625,   487,   487,   487,   726,
14128:      487,   487,   487,   487,   487,   487,   487,   487,   487,   726,
14129:      726,   726,   145,   785,   786,   756,   757,   625,   726,   756,
14130:      747,   748,   799,   800,     9,   780,   779,   798,   487,   797,
14131:      798,     3,     8,    11,    16,    17,    18,    33,    36,    41,
14132:       48,    73,   172,   186,   191,   212,   213,   226,   264,   267,
14133:      281,   284,   371,   471,   474,   475,   476,   478,   479,   480,
14134:      481,   482,   483,   750,   751,   752,   754,   450,   733,   780,
14135:       15,   290,   726,    15,   210,   491,   632,   487,   798,   780,
14136:      489,   779,   632,     3,   114,   230,   544,   715,   798,   842,
14137:       96,   114,   843,   114,   843,   791,   488,   491,   828,   488,
14138:      491,   631,   792,    36,   852,   520,   791,    36,   799,   366,
14139:      627,   627,   640,   641,   726,   627,   159,   261,   660,   216,
14140:      262,   321,   369,   428,    27,   655,   726,   478,   479,   656,
14141:      657,   726,   728,   666,   667,   647,   646,   644,   645,   162,
14142:      669,   274,   671,   644,   666,   756,   806,   225,   791,    67,
14143:       75,    85,   164,   185,   312,   423,   565,   575,   590,   799,
14144:       75,    85,   517,    85,   517,   487,   406,   487,   563,   236,
14145:      426,   563,    85,   491,   406,   791,   698,   544,    54,   546,
14146:      544,   544,   105,   242,   250,    54,   406,   449,   473,   543,
14147:      255,   352,   543,   545,   684,    85,   406,   517,   352,   791,
14148:      406,   352,   758,   758,   759,   488,   491,   638,   639,    13,
14149:       14,   486,   496,   406,   583,   588,   799,   449,   617,   325,
14150:      442,   149,    92,   537,   550,   815,   816,   863,   794,   489,
14151:      141,   791,   264,   538,   542,   264,   487,   584,    36,   584,
14152:      488,   758,    36,   185,   578,   799,   820,   487,   756,   797,
14153:      602,   760,   713,   713,    35,   697,   404,   404,   797,   797,
14154:      696,   694,   799,   485,   485,   797,   797,   406,   406,   406,
14155:      406,   599,   804,   792,   793,   793,   804,   488,   185,   791,
14156:      867,   830,   836,     4,   797,     4,   797,   616,   623,   808,
14157:       50,    94,   120,   138,   142,   163,   166,   180,   269,   277,
14158:      319,   620,   491,   488,   491,   488,   491,   812,   756,   777,
14159:      757,   445,   772,   773,   726,   756,   487,   797,   797,     3,
14160:      717,   718,   719,   720,   721,   722,   723,   724,   761,   762,
14161:      798,   797,   797,   726,     8,    16,    17,    18,   474,   475,
14162:      476,   478,   479,   480,   481,   482,   483,   750,   755,   799,
14163:      726,   763,   478,   479,   487,   727,   728,   752,   765,   776,
14164:      488,   756,   726,   756,   766,   726,    53,   167,   222,   407,
14165:      726,   756,   769,   726,   487,   799,   335,   789,   486,   488,
14166:      491,   491,   493,   496,   726,   725,   725,   696,   726,   726,
14167:      726,   726,     5,   808,   809,   404,    40,   392,   781,   804,
14168:      726,   726,   487,   625,   770,   129,   155,   264,   269,   274,
14169:      413,   424,   726,   269,   487,   726,   406,    48,   172,   186,
14170:      191,   226,   371,   726,   726,   726,   726,   726,   726,   726,
14171:      726,   726,   726,    27,    34,   376,   749,   176,   158,   734,
14172:      726,   347,   487,   746,   726,   173,   230,   395,   399,   401,
14173:      426,   633,   791,   784,   167,   674,   758,   480,   674,   487,
14174:      798,   488,   791,   847,   791,   855,   726,   488,   487,   430,
14175:      854,   114,   292,   487,   519,   624,    36,   799,   487,   524,
14176:      533,   535,   799,   491,    37,   123,   430,   642,   347,   348,
14177:      478,   479,   657,   659,   728,   369,   216,   280,   491,     4,
14178:      658,   797,   658,   347,   348,   659,   790,   791,   268,   373,
14179:      672,   667,   645,   488,   333,   509,   487,   185,   575,   793,
14180:      216,   264,   216,   430,   487,   568,   696,   793,   799,   185,
14181:      793,   185,   799,    23,   134,   366,   505,   508,   558,   573,
14182:      808,   793,   567,   587,   808,   793,   506,   793,   333,   366,
14183:      509,   542,   544,   804,   793,   544,   804,   793,   544,   333,
14184:      366,   509,   793,   793,   793,   793,   333,   366,   509,   793,
14185:      793,   638,   638,   638,   438,   759,   488,   726,   726,   726,
14186:      778,   317,   613,   488,   491,   277,   167,   406,   608,   442,
14187:      791,   799,   594,   794,   487,   487,   149,   149,   226,   565,
14188:      575,   579,   582,   591,   593,   799,   449,   451,   570,   148,
14189:      624,   449,   821,   488,   726,   264,   279,   756,   488,   488,
14190:      600,   488,   485,   470,   470,   488,   488,   488,   491,   696,
14191:      797,   486,   797,   488,   488,   718,   720,   721,   722,   721,
14192:      722,   722,   600,   600,   279,   600,   264,    36,   488,   491,
14193:      480,   487,   544,   615,   835,    36,   612,   798,   612,   264,
14194:      269,   319,   612,   612,   841,   696,   488,   486,   726,   136,
14195:      773,   774,    36,   488,   726,   488,   488,   488,   167,   488,
14196:      488,   491,   488,   489,   302,   764,   488,   727,   727,   726,
14197:       11,    16,    17,    18,   191,   212,   281,   474,   475,   476,
14198:      478,   479,   480,   481,   482,   483,   752,   727,   488,   488,
14199:      162,   167,   767,   768,   488,    36,   769,   756,   769,   769,
14200:      167,   488,    36,   792,   487,   726,   787,   780,   726,   747,
14201:      726,   488,   470,   727,   727,   142,   756,   167,   129,   155,
14202:      269,   274,   413,   424,   487,   142,   755,   726,   392,   781,
14203:      726,   770,   726,   406,   487,   625,   487,   487,   289,   738,
14204:      399,   401,   399,   401,   791,   395,   634,   634,   634,   221,
14205:      348,   487,   625,   675,   676,   677,   684,   685,   729,   731,
14206:      732,   799,   446,   690,   638,   786,   690,   797,   725,   806,
14207:      812,   675,   446,   853,   436,   394,   429,   528,   523,   532,
14208:      799,   279,   525,   799,   529,   535,   491,   674,   476,   780,
14209:      641,   281,   750,   753,   472,   643,     4,   797,   659,   280,
14210:      428,   656,   491,   235,   406,   726,   264,   590,   487,   149,
14211:      487,   568,   194,   588,   551,   283,   561,   551,    23,   134,
14212:      337,   338,   366,   502,   503,   504,   510,   511,   149,   600,
14213:      149,   600,   558,   573,   558,   488,   491,   554,   798,   488,
14214:      491,   476,   489,   406,   352,    85,   406,   517,   352,   406,
14215:      406,   406,   352,   488,   488,   488,   759,   486,   383,   384,
14216:      622,   798,   583,   613,   791,   584,   814,   395,   514,   515,
14217:      798,   588,   791,   791,   867,   791,   488,   491,   277,   563,
14218:      277,   279,   562,   793,   449,   866,   563,    36,   149,   791,
14219:      488,   697,   797,   716,   716,   697,   799,   486,   486,   804,
14220:      149,   616,   610,   621,   835,   798,   798,   269,   588,   480,
14221:      588,   798,   798,   403,   726,   140,   696,   488,   726,   726,
14222:      755,   726,   767,   696,   727,   727,   727,   727,   129,   264,
14223:      274,   727,   727,   727,   727,   727,   727,   727,   727,   727,
14224:      727,   726,   726,   768,   767,   696,   488,   488,   488,   756,
14225:      696,   488,   726,   787,   788,    36,   488,   725,   726,    33,
14226:       33,   726,   488,   726,   167,   487,   760,   726,   488,   142,
14227:      727,   727,   142,   142,   726,   726,   639,   446,   487,   739,
14228:      799,   634,   634,   634,   634,   791,   791,   791,   625,   685,
14229:      167,   625,   676,   677,    36,   678,   679,   799,   491,    93,
14230:      168,   200,   215,   224,   258,   343,   681,   679,    36,   678,
14231:      680,   799,   473,   689,   779,   726,   176,   661,   488,   789,
14232:      661,   488,   488,   726,   340,   527,   435,   488,   491,   780,
14233:       83,   527,   488,   491,   524,   853,   726,   487,   643,   159,
14234:      220,   280,   791,   793,   488,   149,   588,   575,   588,   551,
14235:      578,   488,   116,   198,   262,   264,   574,   487,   585,   171,
14236:      114,   184,   264,   563,   543,   106,   114,   171,   264,   382,
14237:      385,   545,   563,   366,   504,   417,   793,   799,   508,   587,
14238:        3,    44,    50,    74,    81,    93,   100,   166,   168,   172,
14239:      186,   200,   212,   213,   215,   224,   226,   238,   258,   263,
14240:      267,   281,   288,   290,   343,   367,   371,   388,   397,   416,
14241:      440,   478,   479,   544,   552,   589,   696,   753,   798,   801,
14242:      868,   874,   808,   793,   793,   793,   793,   793,   793,   793,
14243:      793,   793,   793,   638,   543,   622,   487,   821,   185,   791,
14244:      488,   491,   488,   538,   487,    36,   572,   570,   579,    79,
14245:      540,   106,   262,   624,   578,   430,   818,   486,   696,   600,
14246:      867,   488,   491,   588,   726,   488,   488,   768,   167,   129,
14247:      274,   487,   488,   488,   488,   491,   799,   726,   726,   726,
14248:      760,   488,   726,    33,    33,   726,   726,   142,   488,   488,
14249:      726,   740,   799,   791,   791,   791,   791,   679,   680,   487,
14250:      488,   799,   800,   397,   652,   653,   487,   676,   215,   288,
14251:      682,   676,   682,   215,   681,   682,   215,   653,   487,   799,
14252:      653,   487,   286,    54,   179,   665,   798,   665,   798,   783,
14253:      624,   292,   624,   523,   279,   487,   521,   476,   535,   527,
14254:      755,   551,   575,   488,   488,   449,   581,   117,   187,   196,
14255:      116,   432,   558,   576,    67,    73,    85,   114,   116,   171,
14256:      198,   264,   269,   312,   327,   423,   556,   557,   569,    30,
14257:       54,   595,   185,   269,   544,   726,   595,   269,   478,   479,
14258:      547,   799,   696,   600,   600,   238,   388,   801,   805,   476,
14259:      406,   406,   488,   614,   430,   609,   611,   588,    36,   264,
14260:      487,   798,   821,   582,   148,   624,   146,   192,   562,   119,
14261:      134,   311,   866,   106,   449,   864,   279,   799,   817,   487,
14262:       36,   621,   727,   167,   487,   760,   787,   488,   726,   726,
14263:      726,   488,   298,   741,   686,   687,   731,   678,   487,     4,
14264:        9,   648,   650,   651,   799,   792,   676,   279,   430,   683,
14265:      676,   215,   676,   691,   692,   799,   487,   691,   799,   487,
14266:      662,   663,   664,   726,   726,   448,   735,   735,   528,    85,
14267:      487,   526,   534,   731,   799,   130,   726,   488,   327,   581,
14268:      487,   571,   551,   488,   491,   487,   804,   793,   727,   595,
14269:      117,   187,   116,   269,   216,   791,   581,   114,    36,   149,
14270:       73,   693,   805,   482,   552,   793,   793,   543,   121,   488,
14271:      624,   149,    36,   488,   793,   866,    27,    78,    86,   115,
14272:      184,   195,   382,   385,   566,   566,   348,   348,    59,    67,
14273:      230,   791,   534,   727,   760,   488,    54,   638,   488,   491,
14274:       36,   688,   792,   301,   482,   301,   348,   482,   487,   487,
14275:      488,   726,   487,   676,   683,   488,   491,   696,   691,   488,
14276:      488,   491,   736,   737,   799,   430,   649,   649,   435,   793,
14277:      726,   488,   491,    73,   530,   530,   265,   428,   791,   551,
14278:      577,   580,   808,   558,   726,   264,   557,    36,   581,   584,
14279:      184,   804,   430,   507,   482,   417,   614,   798,   821,   864,
14280:      791,   624,   570,   540,    67,   282,    67,   818,   488,   488,
14281:      756,   320,   348,   742,   689,   686,   487,   488,   799,   648,
14282:      792,   692,   693,   488,   663,   491,    36,   350,   624,   488,
14283:      690,   526,   804,   531,   804,   531,   366,   584,   488,   491,
14284:      476,   488,   184,   240,   592,   487,   553,   726,   417,    36,
14285:      487,   864,   562,   866,   282,   282,   487,   821,    48,    96,
14286:      419,   726,   743,   744,   743,   488,   691,   488,   491,   488,
14287:      488,   737,   739,   651,   530,   642,   642,   533,   592,   580,
14288:      552,   262,   564,   553,   168,   297,   372,   279,   559,   560,
14289:      586,   542,   624,   534,   690,   744,   347,   161,   307,   161,
14290:      307,   488,     9,   334,   654,   531,   643,   643,   690,   560,
14291:      196,   119,   428,   279,   586,   279,   559,   488,   864,   488,
14292:       33,   488,   487,   642,   551,    58,   262,   339,   366,   555,
14293:      555,   821,   744,     9,   643,    22,   114,   269,   690,   488
14294: };
14295: 
14296: #define yyerrok		(yyerrstatus = 0)
14297: #define yyclearin	(yychar = YYEMPTY)
14298: #define YYEMPTY		(-2)
14299: #define YYEOF		0
14300: 
14301: #define YYACCEPT	goto yyacceptlab
14302: #define YYABORT		goto yyabortlab
14303: #define YYERROR		goto yyerrorlab
14304: 
14305: 
14306: /* Like YYERROR except do call yyerror.  This remains here temporarily
14307:    to ease the transition to the new meaning of YYERROR, for GCC.
14308:    Once GCC version 2 has supplanted version 1, this can go.  */
14309: 
14310: #define YYFAIL		goto yyerrlab
14311: 
14312: #define YYRECOVERING()  (!!yyerrstatus)
14313: 
14314: #define YYBACKUP(Token, Value)					\
14315: do								\
14316:   if (yychar == YYEMPTY && yylen == 1)				\
14317:     {								\
14318:       yychar = (Token);						\
14319:       yylval = (Value);						\
14320:       yytoken = YYTRANSLATE (yychar);				\
14321:       YYPOPSTACK (1);						\
14322:       goto yybackup;						\
14323:     }								\
14324:   else								\
14325:     {								\
14326:       yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
14327:       YYERROR;							\
14328:     }								\
14329: while (YYID (0))
14330: 
14331: 
14332: #define YYTERROR	1
14333: #define YYERRCODE	256
14334: 
14335: 
14336: /* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
14337:    If N is 0, then set CURRENT to the empty location which ends
14338:    the previous symbol: RHS[0] (always defined).  */
14339: 
14340: #define YYRHSLOC(Rhs, K) ((Rhs)[K])
14341: #ifndef YYLLOC_DEFAULT
14342: # define YYLLOC_DEFAULT(Current, Rhs, N)				\
14343:     do									\
14344:       if (YYID (N))                                                    \
14345: 	{								\
14346: 	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
14347: 	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
14348: 	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
14349: 	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
14350: 	}								\
14351:       else								\
14352: 	{								\
14353: 	  (Current).first_line   = (Current).last_line   =		\
14354: 	    YYRHSLOC (Rhs, 0).last_line;				\
14355: 	  (Current).first_column = (Current).last_column =		\
14356: 	    YYRHSLOC (Rhs, 0).last_column;				\
14357: 	}								\
14358:     while (YYID (0))
14359: #endif
14360: 
14361: 
14362: /* YY_LOCATION_PRINT -- Print the location on the stream.
14363:    This macro was not mandated originally: define only if we know
14364:    we won't break user code: when these are the locations we know.  */
14365: 
14366: #ifndef YY_LOCATION_PRINT
14367: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
14368: #  define YY_LOCATION_PRINT(File, Loc)			\
14369:      fprintf (File, "%d.%d-%d.%d",			\
14370: 	      (Loc).first_line, (Loc).first_column,	\
14371: 	      (Loc).last_line,  (Loc).last_column)
14372: # else
14373: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
14374: # endif
14375: #endif
14376: 
14377: 
14378: /* YYLEX -- calling `yylex' with the right arguments.  */
14379: 
14380: #ifdef YYLEX_PARAM
14381: # define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
14382: #else
14383: # define YYLEX yylex (&yylval, &yylloc, yyscanner)
14384: #endif
14385: 
14386: /* Enable debugging if requested.  */
14387: #if YYDEBUG
14388: 
14389: # ifndef YYFPRINTF
14390: #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
14391: #  define YYFPRINTF fprintf
14392: # endif
14393: 
14394: # define YYDPRINTF(Args)			\
14395: do {						\
14396:   if (yydebug)					\
14397:     YYFPRINTF Args;				\
14398: } while (YYID (0))
14399: 
14400: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
14401: do {									  \
14402:   if (yydebug)								  \
14403:     {									  \
14404:       YYFPRINTF (stderr, "%s ", Title);					  \
14405:       yy_symbol_print (stderr,						  \
14406: 		  Type, Value, Location, yyscanner); \
14407:       YYFPRINTF (stderr, "\n");						  \
14408:     }									  \
14409: } while (YYID (0))
14410: 
14411: 
14412: /*--------------------------------.
14413: | Print this symbol on YYOUTPUT.  |
14414: `--------------------------------*/
14415: 
14416: /*ARGSUSED*/
14417: #if (defined __STDC__ || defined __C99__FUNC__ \
14418:      || defined __cplusplus || defined _MSC_VER)
14419: static void
14420: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
14421: #else
14422: static void
14423: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
14424:     FILE *yyoutput;
14425:     int yytype;
14426:     YYSTYPE const * const yyvaluep;
14427:     YYLTYPE const * const yylocationp;
14428:     core_yyscan_t yyscanner;
14429: #endif
14430: {
14431:   if (!yyvaluep)
14432:     return;
14433:   YYUSE (yylocationp);
14434:   YYUSE (yyscanner);
14435: # ifdef YYPRINT
14436:   if (yytype < YYNTOKENS)
14437:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
14438: # else
14439:   YYUSE (yyoutput);
14440: # endif
14441:   switch (yytype)
14442:     {
14443:       default:
14444: 	break;
14445:     }
14446: }
14447: 
14448: 
14449: /*--------------------------------.
14450: | Print this symbol on YYOUTPUT.  |
14451: `--------------------------------*/
14452: 
14453: #if (defined __STDC__ || defined __C99__FUNC__ \
14454:      || defined __cplusplus || defined _MSC_VER)
14455: static void
14456: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
14457: #else
14458: static void
14459: yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
14460:     FILE *yyoutput;
14461:     int yytype;
14462:     YYSTYPE const * const yyvaluep;
14463:     YYLTYPE const * const yylocationp;
14464:     core_yyscan_t yyscanner;
14465: #endif
14466: {
14467:   if (yytype < YYNTOKENS)
14468:     YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
14469:   else
14470:     YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
14471: 
14472:   YY_LOCATION_PRINT (yyoutput, *yylocationp);
14473:   YYFPRINTF (yyoutput, ": ");
14474:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
14475:   YYFPRINTF (yyoutput, ")");
14476: }
14477: 
14478: /*------------------------------------------------------------------.
14479: | yy_stack_print -- Print the state stack from its BOTTOM up to its |
14480: | TOP (included).                                                   |
14481: `------------------------------------------------------------------*/
14482: 
14483: #if (defined __STDC__ || defined __C99__FUNC__ \
14484:      || defined __cplusplus || defined _MSC_VER)
14485: static void
14486: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
14487: #else
14488: static void
14489: yy_stack_print (bottom, top)
14490:     yytype_int16 *bottom;
14491:     yytype_int16 *top;
14492: #endif
14493: {
14494:   YYFPRINTF (stderr, "Stack now");
14495:   for (; bottom <= top; ++bottom)
14496:     YYFPRINTF (stderr, " %d", *bottom);
14497:   YYFPRINTF (stderr, "\n");
14498: }
14499: 
14500: # define YY_STACK_PRINT(Bottom, Top)				\
14501: do {								\
14502:   if (yydebug)							\
14503:     yy_stack_print ((Bottom), (Top));				\
14504: } while (YYID (0))
14505: 
14506: 
14507: /*------------------------------------------------.
14508: | Report that the YYRULE is going to be reduced.  |
14509: `------------------------------------------------*/
14510: 
14511: #if (defined __STDC__ || defined __C99__FUNC__ \
14512:      || defined __cplusplus || defined _MSC_VER)
14513: static void
14514: yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
14515: #else
14516: static void
14517: yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
14518:     YYSTYPE *yyvsp;
14519:     YYLTYPE *yylsp;
14520:     int yyrule;
14521:     core_yyscan_t yyscanner;
14522: #endif
14523: {
14524:   int yynrhs = yyr2[yyrule];
14525:   int yyi;
14526:   unsigned long int yylno = yyrline[yyrule];
14527:   YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
14528: 	     yyrule - 1, yylno);
14529:   /* The symbols being reduced.  */
14530:   for (yyi = 0; yyi < yynrhs; yyi++)
14531:     {
14532:       fprintf (stderr, "   $%d = ", yyi + 1);
14533:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
14534: 		       &(yyvsp[(yyi + 1) - (yynrhs)])
14535: 		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
14536:       fprintf (stderr, "\n");
14537:     }
14538: }
14539: 
14540: # define YY_REDUCE_PRINT(Rule)		\
14541: do {					\
14542:   if (yydebug)				\
14543:     yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
14544: } while (YYID (0))
14545: 
14546: /* Nonzero means print parse trace.  It is left uninitialized so that
14547:    multiple parsers can coexist.  */
14548: int yydebug;
14549: #else /* !YYDEBUG */
14550: # define YYDPRINTF(Args)
14551: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)
14552: # define YY_STACK_PRINT(Bottom, Top)
14553: # define YY_REDUCE_PRINT(Rule)
14554: #endif /* !YYDEBUG */
14555: 
14556: 
14557: /* YYINITDEPTH -- initial size of the parser's stacks.  */
14558: #ifndef	YYINITDEPTH
14559: # define YYINITDEPTH 200
14560: #endif
14561: 
14562: /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
14563:    if the built-in stack extension method is used).
14564: 
14565:    Do not make this value too large; the results are undefined if
14566:    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
14567:    evaluated with infinite-precision integer arithmetic.  */
14568: 
14569: #ifndef YYMAXDEPTH
14570: # define YYMAXDEPTH 10000
14571: #endif
14572: 
14573: 
14574: 
14575: #if YYERROR_VERBOSE
14576: 
14577: # ifndef yystrlen
14578: #  if defined __GLIBC__ && defined _STRING_H
14579: #   define yystrlen strlen
14580: #  else
14581: /* Return the length of YYSTR.  */
14582: #if (defined __STDC__ || defined __C99__FUNC__ \
14583:      || defined __cplusplus || defined _MSC_VER)
14584: static YYSIZE_T
14585: yystrlen (const char *yystr)
14586: #else
14587: static YYSIZE_T
14588: yystrlen (yystr)
14589:     const char *yystr;
14590: #endif
14591: {
14592:   YYSIZE_T yylen;
14593:   for (yylen = 0; yystr[yylen]; yylen++)
14594:     continue;
14595:   return yylen;
14596: }
14597: #  endif
14598: # endif
14599: 
14600: # ifndef yystpcpy
14601: #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
14602: #   define yystpcpy stpcpy
14603: #  else
14604: /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
14605:    YYDEST.  */
14606: #if (defined __STDC__ || defined __C99__FUNC__ \
14607:      || defined __cplusplus || defined _MSC_VER)
14608: static char *
14609: yystpcpy (char *yydest, const char *yysrc)
14610: #else
14611: static char *
14612: yystpcpy (yydest, yysrc)
14613:     char *yydest;
14614:     const char *yysrc;
14615: #endif
14616: {
14617:   char *yyd = yydest;
14618:   const char *yys = yysrc;
14619: 
14620:   while ((*yyd++ = *yys++) != '\0')
14621:     continue;
14622: 
14623:   return yyd - 1;
14624: }
14625: #  endif
14626: # endif
14627: 
14628: # ifndef yytnamerr
14629: /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
14630:    quotes and backslashes, so that it's suitable for yyerror.  The
14631:    heuristic is that double-quoting is unnecessary unless the string
14632:    contains an apostrophe, a comma, or backslash (other than
14633:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
14634:    null, do not copy; instead, return the length of what the result
14635:    would have been.  */
14636: static YYSIZE_T
14637: yytnamerr (char *yyres, const char *yystr)
14638: {
14639:   if (*yystr == '"')
14640:     {
14641:       YYSIZE_T yyn = 0;
14642:       char const *yyp = yystr;
14643: 
14644:       for (;;)
14645: 	switch (*++yyp)
14646: 	  {
14647: 	  case '\'':
14648: 	  case ',':
14649: 	    goto do_not_strip_quotes;
14650: 
14651: 	  case '\\':
14652: 	    if (*++yyp != '\\')
14653: 	      goto do_not_strip_quotes;
14654: 	    /* Fall through.  */
14655: 	  default:
14656: 	    if (yyres)
14657: 	      yyres[yyn] = *yyp;
14658: 	    yyn++;
14659: 	    break;
14660: 
14661: 	  case '"':
14662: 	    if (yyres)
14663: 	      yyres[yyn] = '\0';
14664: 	    return yyn;
14665: 	  }
14666:     do_not_strip_quotes: ;
14667:     }
14668: 
14669:   if (! yyres)
14670:     return yystrlen (yystr);
14671: 
14672:   return yystpcpy (yyres, yystr) - yyres;
14673: }
14674: # endif
14675: 
14676: /* Copy into YYRESULT an error message about the unexpected token
14677:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,
14678:    including the terminating null byte.  If YYRESULT is null, do not
14679:    copy anything; just return the number of bytes that would be
14680:    copied.  As a special case, return 0 if an ordinary "syntax error"
14681:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
14682:    size calculation.  */
14683: static YYSIZE_T
14684: yysyntax_error (char *yyresult, int yystate, int yychar)
14685: {
14686:   int yyn = yypact[yystate];
14687: 
14688:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
14689:     return 0;
14690:   else
14691:     {
14692:       int yytype = YYTRANSLATE (yychar);
14693:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
14694:       YYSIZE_T yysize = yysize0;
14695:       YYSIZE_T yysize1;
14696:       int yysize_overflow = 0;
14697:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
14698:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
14699:       int yyx;
14700: 
14701: # if 0
14702:       /* This is so xgettext sees the translatable formats that are
14703: 	 constructed on the fly.  */
14704:       YY_("syntax error, unexpected %s");
14705:       YY_("syntax error, unexpected %s, expecting %s");
14706:       YY_("syntax error, unexpected %s, expecting %s or %s");
14707:       YY_("syntax error, unexpected %s, expecting %s or %s or %s");
14708:       YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
14709: # endif
14710:       char *yyfmt;
14711:       char const *yyf;
14712:       static char const yyunexpected[] = "syntax error, unexpected %s";
14713:       static char const yyexpecting[] = ", expecting %s";
14714:       static char const yyor[] = " or %s";
14715:       char yyformat[sizeof yyunexpected
14716: 		    + sizeof yyexpecting - 1
14717: 		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
14718: 		       * (sizeof yyor - 1))];
14719:       char const *yyprefix = yyexpecting;
14720: 
14721:       /* Start YYX at -YYN if negative to avoid negative indexes in
14722: 	 YYCHECK.  */
14723:       int yyxbegin = yyn < 0 ? -yyn : 0;
14724: 
14725:       /* Stay within bounds of both yycheck and yytname.  */
14726:       int yychecklim = YYLAST - yyn + 1;
14727:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
14728:       int yycount = 1;
14729: 
14730:       yyarg[0] = yytname[yytype];
14731:       yyfmt = yystpcpy (yyformat, yyunexpected);
14732: 
14733:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)
14734: 	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
14735: 	  {
14736: 	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
14737: 	      {
14738: 		yycount = 1;
14739: 		yysize = yysize0;
14740: 		yyformat[sizeof yyunexpected - 1] = '\0';
14741: 		break;
14742: 	      }
14743: 	    yyarg[yycount++] = yytname[yyx];
14744: 	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
14745: 	    yysize_overflow |= (yysize1 < yysize);
14746: 	    yysize = yysize1;
14747: 	    yyfmt = yystpcpy (yyfmt, yyprefix);
14748: 	    yyprefix = yyor;
14749: 	  }
14750: 
14751:       yyf = YY_(yyformat);
14752:       yysize1 = yysize + yystrlen (yyf);
14753:       yysize_overflow |= (yysize1 < yysize);
14754:       yysize = yysize1;
14755: 
14756:       if (yysize_overflow)
14757: 	return YYSIZE_MAXIMUM;
14758: 
14759:       if (yyresult)
14760: 	{
14761: 	  /* Avoid sprintf, as that infringes on the user's name space.
14762: 	     Don't have undefined behavior even if the translation
14763: 	     produced a string with the wrong number of "%s"s.  */
14764: 	  char *yyp = yyresult;
14765: 	  int yyi = 0;
14766: 	  while ((*yyp = *yyf) != '\0')
14767: 	    {
14768: 	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
14769: 		{
14770: 		  yyp += yytnamerr (yyp, yyarg[yyi++]);
14771: 		  yyf += 2;
14772: 		}
14773: 	      else
14774: 		{
14775: 		  yyp++;
14776: 		  yyf++;
14777: 		}
14778: 	    }
14779: 	}
14780:       return yysize;
14781:     }
14782: }
14783: #endif /* YYERROR_VERBOSE */
14784: 
14785: 
14786: /*-----------------------------------------------.
14787: | Release the memory associated to this symbol.  |
14788: `-----------------------------------------------*/
14789: 
14790: /*ARGSUSED*/
14791: #if (defined __STDC__ || defined __C99__FUNC__ \
14792:      || defined __cplusplus || defined _MSC_VER)
14793: static void
14794: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
14795: #else
14796: static void
14797: yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
14798:     const char *yymsg;
14799:     int yytype;
14800:     YYSTYPE *yyvaluep;
14801:     YYLTYPE *yylocationp;
14802:     core_yyscan_t yyscanner;
14803: #endif
14804: {
14805:   YYUSE (yyvaluep);
14806:   YYUSE (yylocationp);
14807:   YYUSE (yyscanner);
14808: 
14809:   if (!yymsg)
14810:     yymsg = "Deleting";
14811:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
14812: 
14813:   switch (yytype)
14814:     {
14815: 
14816:       default:
14817: 	break;
14818:     }
14819: }
14820: 
14821: 
14822: /* Prevent warnings from -Wmissing-prototypes.  */
14823: 
14824: #ifdef YYPARSE_PARAM
14825: #if defined __STDC__ || defined __cplusplus
14826: int yyparse (void *YYPARSE_PARAM);
14827: #else
14828: int yyparse ();
14829: #endif
14830: #else /* ! YYPARSE_PARAM */
14831: #if defined __STDC__ || defined __cplusplus
14832: int yyparse (core_yyscan_t yyscanner);
14833: #else
14834: int yyparse ();
14835: #endif
14836: #endif /* ! YYPARSE_PARAM */
14837: 
14838: 
14839: 
14840: 
14841: 
14842: 
14843: /*----------.
14844: | yyparse.  |
14845: `----------*/
14846: 
14847: #ifdef YYPARSE_PARAM
14848: #if (defined __STDC__ || defined __C99__FUNC__ \
14849:      || defined __cplusplus || defined _MSC_VER)
14850: int
14851: yyparse (void *YYPARSE_PARAM)
14852: #else
14853: int
14854: yyparse (YYPARSE_PARAM)
14855:     void *YYPARSE_PARAM;
14856: #endif
14857: #else /* ! YYPARSE_PARAM */
14858: #if (defined __STDC__ || defined __C99__FUNC__ \
14859:      || defined __cplusplus || defined _MSC_VER)
14860: int
14861: yyparse (core_yyscan_t yyscanner)
14862: #else
14863: int
14864: yyparse (yyscanner)
14865:     core_yyscan_t yyscanner;
14866: #endif
14867: #endif
14868: {
14869:   /* The look-ahead symbol.  */
14870: int yychar;
14871: 
14872: /* The semantic value of the look-ahead symbol.  */
14873: YYSTYPE yylval;
14874: 
14875: /* Number of syntax errors so far.  */
14876: int yynerrs;
14877: /* Location data for the look-ahead symbol.  */
14878: YYLTYPE yylloc;
14879: 
14880:   int yystate;
14881:   int yyn;
14882:   int yyresult;
14883:   /* Number of tokens to shift before error messages enabled.  */
14884:   int yyerrstatus;
14885:   /* Look-ahead token as an internal (translated) token number.  */
14886:   int yytoken = 0;
14887: #if YYERROR_VERBOSE
14888:   /* Buffer for error messages, and its allocated size.  */
14889:   char yymsgbuf[128];
14890:   char *yymsg = yymsgbuf;
14891:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
14892: #endif
14893: 
14894:   /* Three stacks and their tools:
14895:      `yyss': related to states,
14896:      `yyvs': related to semantic values,
14897:      `yyls': related to locations.
14898: 
14899:      Refer to the stacks thru separate pointers, to allow yyoverflow
14900:      to reallocate them elsewhere.  */
14901: 
14902:   /* The state stack.  */
14903:   yytype_int16 yyssa[YYINITDEPTH];
14904:   yytype_int16 *yyss = yyssa;
14905:   yytype_int16 *yyssp;
14906: 
14907:   /* The semantic value stack.  */
14908:   YYSTYPE yyvsa[YYINITDEPTH];
14909:   YYSTYPE *yyvs = yyvsa;
14910:   YYSTYPE *yyvsp;
14911: 
14912:   /* The location stack.  */
14913:   YYLTYPE yylsa[YYINITDEPTH];
14914:   YYLTYPE *yyls = yylsa;
14915:   YYLTYPE *yylsp;
14916:   /* The locations where the error started and ended.  */
14917:   YYLTYPE yyerror_range[2];
14918: 
14919: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))
14920: 
14921:   YYSIZE_T yystacksize = YYINITDEPTH;
14922: 
14923:   /* The variables used to return semantic value and location from the
14924:      action routines.  */
14925:   YYSTYPE yyval;
14926:   YYLTYPE yyloc;
14927: 
14928:   /* The number of symbols on the RHS of the reduced rule.
14929:      Keep to zero when no symbol should be popped.  */
14930:   int yylen = 0;
14931: 
14932:   YYDPRINTF ((stderr, "Starting parse\n"));
14933: 
14934:   yystate = 0;
14935:   yyerrstatus = 0;
14936:   yynerrs = 0;
14937:   yychar = YYEMPTY;		/* Cause a token to be read.  */
14938: 
14939:   /* Initialize stack pointers.
14940:      Waste one element of value and location stack
14941:      so that they stay on the same level as the state stack.
14942:      The wasted elements are never initialized.  */
14943: 
14944:   yyssp = yyss;
14945:   yyvsp = yyvs;
14946:   yylsp = yyls;
14947: #if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
14948:   /* Initialize the default location before parsing starts.  */
14949:   yylloc.first_line   = yylloc.last_line   = 1;
14950:   yylloc.first_column = yylloc.last_column = 0;
14951: #endif
14952: 
14953:   goto yysetstate;
14954: 
14955: /*------------------------------------------------------------.
14956: | yynewstate -- Push a new state, which is found in yystate.  |
14957: `------------------------------------------------------------*/
14958:  yynewstate:
14959:   /* In all cases, when you get here, the value and location stacks
14960:      have just been pushed.  So pushing a state here evens the stacks.  */
14961:   yyssp++;
14962: 
14963:  yysetstate:
14964:   *yyssp = yystate;
14965: 
14966:   if (yyss + yystacksize - 1 <= yyssp)
14967:     {
14968:       /* Get the current used size of the three stacks, in elements.  */
14969:       YYSIZE_T yysize = yyssp - yyss + 1;
14970: 
14971: #ifdef yyoverflow
14972:       {
14973: 	/* Give user a chance to reallocate the stack.  Use copies of
14974: 	   these so that the &'s don't force the real ones into
14975: 	   memory.  */
14976: 	YYSTYPE *yyvs1 = yyvs;
14977: 	yytype_int16 *yyss1 = yyss;
14978: 	YYLTYPE *yyls1 = yyls;
14979: 
14980: 	/* Each stack pointer address is followed by the size of the
14981: 	   data in use in that stack, in bytes.  This used to be a
14982: 	   conditional around just the two extra args, but that might
14983: 	   be undefined if yyoverflow is a macro.  */
14984: 	yyoverflow (YY_("memory exhausted"),
14985: 		    &yyss1, yysize * sizeof (*yyssp),
14986: 		    &yyvs1, yysize * sizeof (*yyvsp),
14987: 		    &yyls1, yysize * sizeof (*yylsp),
14988: 		    &yystacksize);
14989: 	yyls = yyls1;
14990: 	yyss = yyss1;
14991: 	yyvs = yyvs1;
14992:       }
14993: #else /* no yyoverflow */
14994: # ifndef YYSTACK_RELOCATE
14995:       goto yyexhaustedlab;
14996: # else
14997:       /* Extend the stack our own way.  */
14998:       if (YYMAXDEPTH <= yystacksize)
14999: 	goto yyexhaustedlab;
15000:       yystacksize *= 2;
15001:       if (YYMAXDEPTH < yystacksize)
15002: 	yystacksize = YYMAXDEPTH;
15003: 
15004:       {
15005: 	yytype_int16 *yyss1 = yyss;
15006: 	union yyalloc *yyptr =
15007: 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
15008: 	if (! yyptr)
15009: 	  goto yyexhaustedlab;
15010: 	YYSTACK_RELOCATE (yyss);
15011: 	YYSTACK_RELOCATE (yyvs);
15012: 	YYSTACK_RELOCATE (yyls);
15013: #  undef YYSTACK_RELOCATE
15014: 	if (yyss1 != yyssa)
15015: 	  YYSTACK_FREE (yyss1);
15016:       }
15017: # endif
15018: #endif /* no yyoverflow */
15019: 
15020:       yyssp = yyss + yysize - 1;
15021:       yyvsp = yyvs + yysize - 1;
15022:       yylsp = yyls + yysize - 1;
15023: 
15024:       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
15025: 		  (unsigned long int) yystacksize));
15026: 
15027:       if (yyss + yystacksize - 1 <= yyssp)
15028: 	YYABORT;
15029:     }
15030: 
15031:   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
15032: 
15033:   goto yybackup;
15034: 
15035: /*-----------.
15036: | yybackup.  |
15037: `-----------*/
15038: yybackup:
15039: 
15040:   /* Do appropriate processing given the current state.  Read a
15041:      look-ahead token if we need one and don't already have one.  */
15042: 
15043:   /* First try to decide what to do without reference to look-ahead token.  */
15044:   yyn = yypact[yystate];
15045:   if (yyn == YYPACT_NINF)
15046:     goto yydefault;
15047: 
15048:   /* Not known => get a look-ahead token if don't already have one.  */
15049: 
15050:   /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
15051:   if (yychar == YYEMPTY)
15052:     {
15053:       YYDPRINTF ((stderr, "Reading a token: "));
15054:       yychar = YYLEX;
15055:     }
15056: 
15057:   if (yychar <= YYEOF)
15058:     {
15059:       yychar = yytoken = YYEOF;
15060:       YYDPRINTF ((stderr, "Now at end of input.\n"));
15061:     }
15062:   else
15063:     {
15064:       yytoken = YYTRANSLATE (yychar);
15065:       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
15066:     }
15067: 
15068:   /* If the proper action on seeing token YYTOKEN is to reduce or to
15069:      detect an error, take that action.  */
15070:   yyn += yytoken;
15071:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
15072:     goto yydefault;
15073:   yyn = yytable[yyn];
15074:   if (yyn <= 0)
15075:     {
15076:       if (yyn == 0 || yyn == YYTABLE_NINF)
15077: 	goto yyerrlab;
15078:       yyn = -yyn;
15079:       goto yyreduce;
15080:     }
15081: 
15082:   if (yyn == YYFINAL)
15083:     YYACCEPT;
15084: 
15085:   /* Count tokens shifted since error; after three, turn off error
15086:      status.  */
15087:   if (yyerrstatus)
15088:     yyerrstatus--;
15089: 
15090:   /* Shift the look-ahead token.  */
15091:   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
15092: 
15093:   /* Discard the shifted token unless it is eof.  */
15094:   if (yychar != YYEOF)
15095:     yychar = YYEMPTY;
15096: 
15097:   yystate = yyn;
15098:   *++yyvsp = yylval;
15099:   *++yylsp = yylloc;
15100:   goto yynewstate;
15101: 
15102: 
15103: /*-----------------------------------------------------------.
15104: | yydefault -- do the default action for the current state.  |
15105: `-----------------------------------------------------------*/
15106: yydefault:
15107:   yyn = yydefact[yystate];
15108:   if (yyn == 0)
15109:     goto yyerrlab;
15110:   goto yyreduce;
15111: 
15112: 
15113: /*-----------------------------.
15114: | yyreduce -- Do a reduction.  |
15115: `-----------------------------*/
15116: yyreduce:
15117:   /* yyn is the number of a rule to reduce with.  */
15118:   yylen = yyr2[yyn];
15119: 
15120:   /* If YYLEN is nonzero, implement the default value of the action:
15121:      `$$ = $1'.
15122: 
15123:      Otherwise, the following line sets YYVAL to garbage.
15124:      This behavior is undocumented and Bison
15125:      users should not rely upon it.  Assigning to YYVAL
15126:      unconditionally makes the parser a bit smaller, and it avoids a
15127:      GCC warning that YYVAL may be used uninitialized.  */
15128:   yyval = yyvsp[1-yylen];
15129: 
15130:   /* Default location.  */
15131:   YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
15132:   YY_REDUCE_PRINT (yyn);
15133:   switch (yyn)
15134:     {
15135:         case 2:
15136: #line 464 "third_party/libpg_query/grammar/grammar.y"
15137:     {
15138: 				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
15139: 			;}
15140:     break;
15141: 
15142:   case 3:
15143: #line 480 "third_party/libpg_query/grammar/grammar.y"
15144:     {
15145: 					if ((yyvsp[(1) - (3)].list) != NIL)
15146: 					{
15147: 						/* update length of previous stmt */
15148: 						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
15149: 					}
15150: 					if ((yyvsp[(3) - (3)].node) != NULL)
15151: 						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
15152: 					else
15153: 						(yyval.list) = (yyvsp[(1) - (3)].list);
15154: 				;}
15155:     break;
15156: 
15157:   case 4:
15158: #line 492 "third_party/libpg_query/grammar/grammar.y"
15159:     {
15160: 					if ((yyvsp[(1) - (1)].node) != NULL)
15161: 						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
15162: 					else
15163: 						(yyval.list) = NIL;
15164: 				;}
15165:     break;
15166: 
15167:   case 39:
15168: #line 535 "third_party/libpg_query/grammar/grammar.y"
15169:     { (yyval.node) = NULL; ;}
15170:     break;
15171: 
15172:   case 40:
15173: #line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
15174:     {
15175: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15176: 					n->relation = (yyvsp[(3) - (4)].range);
15177: 					n->cmds = (yyvsp[(4) - (4)].list);
15178: 					n->relkind = PG_OBJECT_TABLE;
15179: 					n->missing_ok = false;
15180: 					(yyval.node) = (PGNode *)n;
15181: 				;}
15182:     break;
15183: 
15184:   case 41:
15185: #line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
15186:     {
15187: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15188: 					n->relation = (yyvsp[(5) - (6)].range);
15189: 					n->cmds = (yyvsp[(6) - (6)].list);
15190: 					n->relkind = PG_OBJECT_TABLE;
15191: 					n->missing_ok = true;
15192: 					(yyval.node) = (PGNode *)n;
15193: 				;}
15194:     break;
15195: 
15196:   case 42:
15197: #line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
15198:     {
15199: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15200: 					n->relation = (yyvsp[(3) - (4)].range);
15201: 					n->cmds = (yyvsp[(4) - (4)].list);
15202: 					n->relkind = PG_OBJECT_INDEX;
15203: 					n->missing_ok = false;
15204: 					(yyval.node) = (PGNode *)n;
15205: 				;}
15206:     break;
15207: 
15208:   case 43:
15209: #line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
15210:     {
15211: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15212: 					n->relation = (yyvsp[(5) - (6)].range);
15213: 					n->cmds = (yyvsp[(6) - (6)].list);
15214: 					n->relkind = PG_OBJECT_INDEX;
15215: 					n->missing_ok = true;
15216: 					(yyval.node) = (PGNode *)n;
15217: 				;}
15218:     break;
15219: 
15220:   case 44:
15221: #line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
15222:     {
15223: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15224: 					n->relation = (yyvsp[(3) - (4)].range);
15225: 					n->cmds = (yyvsp[(4) - (4)].list);
15226: 					n->relkind = PG_OBJECT_SEQUENCE;
15227: 					n->missing_ok = false;
15228: 					(yyval.node) = (PGNode *)n;
15229: 				;}
15230:     break;
15231: 
15232:   case 45:
15233: #line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
15234:     {
15235: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15236: 					n->relation = (yyvsp[(5) - (6)].range);
15237: 					n->cmds = (yyvsp[(6) - (6)].list);
15238: 					n->relkind = PG_OBJECT_SEQUENCE;
15239: 					n->missing_ok = true;
15240: 					(yyval.node) = (PGNode *)n;
15241: 				;}
15242:     break;
15243: 
15244:   case 46:
15245: #line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
15246:     {
15247: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15248: 					n->relation = (yyvsp[(3) - (4)].range);
15249: 					n->cmds = (yyvsp[(4) - (4)].list);
15250: 					n->relkind = PG_OBJECT_VIEW;
15251: 					n->missing_ok = false;
15252: 					(yyval.node) = (PGNode *)n;
15253: 				;}
15254:     break;
15255: 
15256:   case 47:
15257: #line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
15258:     {
15259: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15260: 					n->relation = (yyvsp[(5) - (6)].range);
15261: 					n->cmds = (yyvsp[(6) - (6)].list);
15262: 					n->relkind = PG_OBJECT_VIEW;
15263: 					n->missing_ok = true;
15264: 					(yyval.node) = (PGNode *)n;
15265: 				;}
15266:     break;
15267: 
15268:   case 48:
15269: #line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
15270:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
15271:     break;
15272: 
15273:   case 49:
15274: #line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
15275:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
15276:     break;
15277: 
15278:   case 50:
15279: #line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
15280:     { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
15281:     break;
15282: 
15283:   case 51:
15284: #line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
15285:     { (yyval.node) = NULL; ;}
15286:     break;
15287: 
15288:   case 52:
15289: #line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
15290:     {
15291: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
15292: 				;}
15293:     break;
15294: 
15295:   case 53:
15296: #line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
15297:     {
15298: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
15299: 				;}
15300:     break;
15301: 
15302:   case 54:
15303: #line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
15304:     {
15305: 					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
15306: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
15307: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
15308: 						ereport(ERROR,
15309: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
15310: 								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
15311: 								 parser_errposition((yylsp[(2) - (2)]))));
15312: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15313: 				;}
15314:     break;
15315: 
15316:   case 55:
15317: #line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
15318:     {
15319: 					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
15320: 				;}
15321:     break;
15322: 
15323:   case 56:
15324: #line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
15325:     {
15326: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
15327: 				;}
15328:     break;
15329: 
15330:   case 57:
15331: #line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
15332:     {
15333: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
15334: 				;}
15335:     break;
15336: 
15337:   case 58:
15338: #line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
15339:     {
15340: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15341: 					n->subtype = PG_AT_AddColumn;
15342: 					n->def = (yyvsp[(2) - (2)].node);
15343: 					n->missing_ok = false;
15344: 					(yyval.node) = (PGNode *)n;
15345: 				;}
15346:     break;
15347: 
15348:   case 59:
15349: #line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
15350:     {
15351: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15352: 					n->subtype = PG_AT_AddColumn;
15353: 					n->def = (yyvsp[(5) - (5)].node);
15354: 					n->missing_ok = true;
15355: 					(yyval.node) = (PGNode *)n;
15356: 				;}
15357:     break;
15358: 
15359:   case 60:
15360: #line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
15361:     {
15362: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15363: 					n->subtype = PG_AT_AddColumn;
15364: 					n->def = (yyvsp[(3) - (3)].node);
15365: 					n->missing_ok = false;
15366: 					(yyval.node) = (PGNode *)n;
15367: 				;}
15368:     break;
15369: 
15370:   case 61:
15371: #line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
15372:     {
15373: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15374: 					n->subtype = PG_AT_AddColumn;
15375: 					n->def = (yyvsp[(6) - (6)].node);
15376: 					n->missing_ok = true;
15377: 					(yyval.node) = (PGNode *)n;
15378: 				;}
15379:     break;
15380: 
15381:   case 62:
15382: #line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
15383:     {
15384: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15385: 					n->subtype = PG_AT_ColumnDefault;
15386: 					n->name = (yyvsp[(3) - (4)].str);
15387: 					n->def = (yyvsp[(4) - (4)].node);
15388: 					(yyval.node) = (PGNode *)n;
15389: 				;}
15390:     break;
15391: 
15392:   case 63:
15393: #line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
15394:     {
15395: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15396: 					n->subtype = PG_AT_DropNotNull;
15397: 					n->name = (yyvsp[(3) - (6)].str);
15398: 					(yyval.node) = (PGNode *)n;
15399: 				;}
15400:     break;
15401: 
15402:   case 64:
15403: #line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
15404:     {
15405: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15406: 					n->subtype = PG_AT_SetNotNull;
15407: 					n->name = (yyvsp[(3) - (6)].str);
15408: 					(yyval.node) = (PGNode *)n;
15409: 				;}
15410:     break;
15411: 
15412:   case 65:
15413: #line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
15414:     {
15415: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15416: 					n->subtype = PG_AT_SetStatistics;
15417: 					n->name = (yyvsp[(3) - (6)].str);
15418: 					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
15419: 					(yyval.node) = (PGNode *)n;
15420: 				;}
15421:     break;
15422: 
15423:   case 66:
15424: #line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
15425:     {
15426: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15427: 					n->subtype = PG_AT_SetOptions;
15428: 					n->name = (yyvsp[(3) - (5)].str);
15429: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
15430: 					(yyval.node) = (PGNode *)n;
15431: 				;}
15432:     break;
15433: 
15434:   case 67:
15435: #line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
15436:     {
15437: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15438: 					n->subtype = PG_AT_ResetOptions;
15439: 					n->name = (yyvsp[(3) - (5)].str);
15440: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
15441: 					(yyval.node) = (PGNode *)n;
15442: 				;}
15443:     break;
15444: 
15445:   case 68:
15446: #line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
15447:     {
15448: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15449: 					n->subtype = PG_AT_SetStorage;
15450: 					n->name = (yyvsp[(3) - (6)].str);
15451: 					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
15452: 					(yyval.node) = (PGNode *)n;
15453: 				;}
15454:     break;
15455: 
15456:   case 69:
15457: #line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
15458:     {
15459: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15460: 					PGConstraint *c = makeNode(PGConstraint);
15461: 
15462: 					c->contype = PG_CONSTR_IDENTITY;
15463: 					c->generated_when = (yyvsp[(6) - (9)].ival);
15464: 					c->options = (yyvsp[(9) - (9)].list);
15465: 					c->location = (yylsp[(5) - (9)]);
15466: 
15467: 					n->subtype = PG_AT_AddIdentity;
15468: 					n->name = (yyvsp[(3) - (9)].str);
15469: 					n->def = (PGNode *) c;
15470: 
15471: 					(yyval.node) = (PGNode *)n;
15472: 				;}
15473:     break;
15474: 
15475:   case 70:
15476: #line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
15477:     {
15478: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15479: 					n->subtype = PG_AT_SetIdentity;
15480: 					n->name = (yyvsp[(3) - (4)].str);
15481: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
15482: 					(yyval.node) = (PGNode *)n;
15483: 				;}
15484:     break;
15485: 
15486:   case 71:
15487: #line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
15488:     {
15489: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15490: 					n->subtype = AT_DropIdentity;
15491: 					n->name = (yyvsp[(3) - (5)].str);
15492: 					n->missing_ok = false;
15493: 					(yyval.node) = (PGNode *)n;
15494: 				;}
15495:     break;
15496: 
15497:   case 72:
15498: #line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
15499:     {
15500: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15501: 					n->subtype = AT_DropIdentity;
15502: 					n->name = (yyvsp[(3) - (7)].str);
15503: 					n->missing_ok = true;
15504: 					(yyval.node) = (PGNode *)n;
15505: 				;}
15506:     break;
15507: 
15508:   case 73:
15509: #line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
15510:     {
15511: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15512: 					n->subtype = PG_AT_DropColumn;
15513: 					n->name = (yyvsp[(5) - (6)].str);
15514: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
15515: 					n->missing_ok = true;
15516: 					(yyval.node) = (PGNode *)n;
15517: 				;}
15518:     break;
15519: 
15520:   case 74:
15521: #line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
15522:     {
15523: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15524: 					n->subtype = PG_AT_DropColumn;
15525: 					n->name = (yyvsp[(3) - (4)].str);
15526: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
15527: 					n->missing_ok = false;
15528: 					(yyval.node) = (PGNode *)n;
15529: 				;}
15530:     break;
15531: 
15532:   case 75:
15533: #line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
15534:     {
15535: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15536: 					PGColumnDef *def = makeNode(PGColumnDef);
15537: 					n->subtype = PG_AT_AlterColumnType;
15538: 					n->name = (yyvsp[(3) - (8)].str);
15539: 					n->def = (PGNode *) def;
15540: 					/* We only use these fields of the PGColumnDef node */
15541: 					def->typeName = (yyvsp[(6) - (8)].typnam);
15542: 					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
15543: 					def->raw_default = (yyvsp[(8) - (8)].node);
15544: 					def->location = (yylsp[(3) - (8)]);
15545: 					(yyval.node) = (PGNode *)n;
15546: 				;}
15547:     break;
15548: 
15549:   case 76:
15550: #line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
15551:     {
15552: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15553: 					n->subtype = PG_AT_AlterColumnGenericOptions;
15554: 					n->name = (yyvsp[(3) - (4)].str);
15555: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
15556: 					(yyval.node) = (PGNode *)n;
15557: 				;}
15558:     break;
15559: 
15560:   case 77:
15561: #line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
15562:     {
15563: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15564: 					n->subtype = PG_AT_AddConstraint;
15565: 					n->def = (yyvsp[(2) - (2)].node);
15566: 					(yyval.node) = (PGNode *)n;
15567: 				;}
15568:     break;
15569: 
15570:   case 78:
15571: #line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
15572:     {
15573: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15574: 					PGConstraint *c = makeNode(PGConstraint);
15575: 					n->subtype = PG_AT_AlterConstraint;
15576: 					n->def = (PGNode *) c;
15577: 					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
15578: 					c->conname = (yyvsp[(3) - (4)].str);
15579: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
15580: 									&c->deferrable,
15581: 									&c->initdeferred,
15582: 									NULL, NULL, yyscanner);
15583: 					(yyval.node) = (PGNode *)n;
15584: 				;}
15585:     break;
15586: 
15587:   case 79:
15588: #line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
15589:     {
15590: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15591: 					n->subtype = PG_AT_ValidateConstraint;
15592: 					n->name = (yyvsp[(3) - (3)].str);
15593: 					(yyval.node) = (PGNode *)n;
15594: 				;}
15595:     break;
15596: 
15597:   case 80:
15598: #line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
15599:     {
15600: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15601: 					n->subtype = PG_AT_DropConstraint;
15602: 					n->name = (yyvsp[(5) - (6)].str);
15603: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
15604: 					n->missing_ok = true;
15605: 					(yyval.node) = (PGNode *)n;
15606: 				;}
15607:     break;
15608: 
15609:   case 81:
15610: #line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
15611:     {
15612: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15613: 					n->subtype = PG_AT_DropConstraint;
15614: 					n->name = (yyvsp[(3) - (4)].str);
15615: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
15616: 					n->missing_ok = false;
15617: 					(yyval.node) = (PGNode *)n;
15618: 				;}
15619:     break;
15620: 
15621:   case 82:
15622: #line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
15623:     {
15624: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15625: 					n->subtype = PG_AT_SetLogged;
15626: 					(yyval.node) = (PGNode *)n;
15627: 				;}
15628:     break;
15629: 
15630:   case 83:
15631: #line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
15632:     {
15633: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15634: 					n->subtype = PG_AT_SetUnLogged;
15635: 					(yyval.node) = (PGNode *)n;
15636: 				;}
15637:     break;
15638: 
15639:   case 84:
15640: #line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
15641:     {
15642: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15643: 					n->subtype = PG_AT_SetRelOptions;
15644: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
15645: 					(yyval.node) = (PGNode *)n;
15646: 				;}
15647:     break;
15648: 
15649:   case 85:
15650: #line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
15651:     {
15652: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15653: 					n->subtype = PG_AT_ResetRelOptions;
15654: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
15655: 					(yyval.node) = (PGNode *)n;
15656: 				;}
15657:     break;
15658: 
15659:   case 86:
15660: #line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
15661:     {
15662: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
15663: 					n->subtype = PG_AT_GenericOptions;
15664: 					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
15665: 					(yyval.node) = (PGNode *) n;
15666: 				;}
15667:     break;
15668: 
15669:   case 87:
15670: #line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
15671:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
15672:     break;
15673: 
15674:   case 88:
15675: #line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
15676:     { (yyval.node) = NULL; ;}
15677:     break;
15678: 
15679:   case 89:
15680: #line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
15681:     {
15682: 					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
15683: 				;}
15684:     break;
15685: 
15686:   case 90:
15687: #line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
15688:     {
15689: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15690: 					(yyval.defelt)->defaction = PG_DEFELEM_SET;
15691: 				;}
15692:     break;
15693: 
15694:   case 91:
15695: #line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
15696:     {
15697: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15698: 					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
15699: 				;}
15700:     break;
15701: 
15702:   case 92:
15703: #line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
15704:     {
15705: 					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
15706: 				;}
15707:     break;
15708: 
15709:   case 93:
15710: #line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
15711:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
15712:     break;
15713: 
15714:   case 94:
15715: #line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
15716:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
15717:     break;
15718: 
15719:   case 95:
15720: #line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
15721:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
15722:     break;
15723: 
15724:   case 96:
15725: #line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
15726:     { (yyval.ival) = 1; ;}
15727:     break;
15728: 
15729:   case 97:
15730: #line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
15731:     { (yyval.ival) = 0; ;}
15732:     break;
15733: 
15734:   case 98:
15735: #line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
15736:     { (yyval.ival) = 0; ;}
15737:     break;
15738: 
15739:   case 99:
15740: #line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
15741:     {
15742: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15743: 						n->name = (yyvsp[(2) - (2)].str);
15744: 						(yyval.node) = (PGNode *) n;
15745: 					;}
15746:     break;
15747: 
15748:   case 100:
15749: #line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
15750:     {
15751: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15752: 						n->name = (yyvsp[(3) - (3)].str);
15753: 						(yyval.node) = (PGNode *) n;
15754: 					;}
15755:     break;
15756: 
15757:   case 101:
15758: #line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
15759:     {
15760: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15761: 						n->name = NULL;
15762: 						(yyval.node) = (PGNode *) n;
15763: 					;}
15764:     break;
15765: 
15766:   case 102:
15767: #line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
15768:     {
15769: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
15770: 						n->name = NULL;
15771: 						(yyval.node) = (PGNode *) n;
15772: 					;}
15773:     break;
15774: 
15775:   case 103:
15776: #line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
15777:     {
15778: 					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
15779: 					n->typeName = (yyvsp[(3) - (8)].list);
15780: 					n->vals = (yyvsp[(7) - (8)].list);
15781: 					(yyval.node) = (PGNode *)n;
15782: 				;}
15783:     break;
15784: 
15785:   case 104:
15786: #line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
15787:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
15788:     break;
15789: 
15790:   case 105:
15791: #line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
15792:     { (yyval.list) = NIL; ;}
15793:     break;
15794: 
15795:   case 106:
15796: #line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
15797:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
15798:     break;
15799: 
15800:   case 107:
15801: #line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
15802:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
15803:     break;
15804: 
15805:   case 108:
15806: #line 7 "third_party/libpg_query/grammar/statements/rename.y"
15807:     {
15808: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15809: 					n->renameType = PG_OBJECT_SCHEMA;
15810: 					n->subname = (yyvsp[(3) - (6)].str);
15811: 					n->newname = (yyvsp[(6) - (6)].str);
15812: 					n->missing_ok = false;
15813: 					(yyval.node) = (PGNode *)n;
15814: 				;}
15815:     break;
15816: 
15817:   case 109:
15818: #line 16 "third_party/libpg_query/grammar/statements/rename.y"
15819:     {
15820: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15821: 					n->renameType = PG_OBJECT_TABLE;
15822: 					n->relation = (yyvsp[(3) - (6)].range);
15823: 					n->subname = NULL;
15824: 					n->newname = (yyvsp[(6) - (6)].str);
15825: 					n->missing_ok = false;
15826: 					(yyval.node) = (PGNode *)n;
15827: 				;}
15828:     break;
15829: 
15830:   case 110:
15831: #line 26 "third_party/libpg_query/grammar/statements/rename.y"
15832:     {
15833: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15834: 					n->renameType = PG_OBJECT_TABLE;
15835: 					n->relation = (yyvsp[(5) - (8)].range);
15836: 					n->subname = NULL;
15837: 					n->newname = (yyvsp[(8) - (8)].str);
15838: 					n->missing_ok = true;
15839: 					(yyval.node) = (PGNode *)n;
15840: 				;}
15841:     break;
15842: 
15843:   case 111:
15844: #line 36 "third_party/libpg_query/grammar/statements/rename.y"
15845:     {
15846: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15847: 					n->renameType = PG_OBJECT_SEQUENCE;
15848: 					n->relation = (yyvsp[(3) - (6)].range);
15849: 					n->subname = NULL;
15850: 					n->newname = (yyvsp[(6) - (6)].str);
15851: 					n->missing_ok = false;
15852: 					(yyval.node) = (PGNode *)n;
15853: 				;}
15854:     break;
15855: 
15856:   case 112:
15857: #line 46 "third_party/libpg_query/grammar/statements/rename.y"
15858:     {
15859: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15860: 					n->renameType = PG_OBJECT_SEQUENCE;
15861: 					n->relation = (yyvsp[(5) - (8)].range);
15862: 					n->subname = NULL;
15863: 					n->newname = (yyvsp[(8) - (8)].str);
15864: 					n->missing_ok = true;
15865: 					(yyval.node) = (PGNode *)n;
15866: 				;}
15867:     break;
15868: 
15869:   case 113:
15870: #line 56 "third_party/libpg_query/grammar/statements/rename.y"
15871:     {
15872: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15873: 					n->renameType = PG_OBJECT_VIEW;
15874: 					n->relation = (yyvsp[(3) - (6)].range);
15875: 					n->subname = NULL;
15876: 					n->newname = (yyvsp[(6) - (6)].str);
15877: 					n->missing_ok = false;
15878: 					(yyval.node) = (PGNode *)n;
15879: 				;}
15880:     break;
15881: 
15882:   case 114:
15883: #line 66 "third_party/libpg_query/grammar/statements/rename.y"
15884:     {
15885: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15886: 					n->renameType = PG_OBJECT_VIEW;
15887: 					n->relation = (yyvsp[(5) - (8)].range);
15888: 					n->subname = NULL;
15889: 					n->newname = (yyvsp[(8) - (8)].str);
15890: 					n->missing_ok = true;
15891: 					(yyval.node) = (PGNode *)n;
15892: 				;}
15893:     break;
15894: 
15895:   case 115:
15896: #line 76 "third_party/libpg_query/grammar/statements/rename.y"
15897:     {
15898: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15899: 					n->renameType = PG_OBJECT_INDEX;
15900: 					n->relation = (yyvsp[(3) - (6)].range);
15901: 					n->subname = NULL;
15902: 					n->newname = (yyvsp[(6) - (6)].str);
15903: 					n->missing_ok = false;
15904: 					(yyval.node) = (PGNode *)n;
15905: 				;}
15906:     break;
15907: 
15908:   case 116:
15909: #line 86 "third_party/libpg_query/grammar/statements/rename.y"
15910:     {
15911: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15912: 					n->renameType = PG_OBJECT_INDEX;
15913: 					n->relation = (yyvsp[(5) - (8)].range);
15914: 					n->subname = NULL;
15915: 					n->newname = (yyvsp[(8) - (8)].str);
15916: 					n->missing_ok = true;
15917: 					(yyval.node) = (PGNode *)n;
15918: 				;}
15919:     break;
15920: 
15921:   case 117:
15922: #line 96 "third_party/libpg_query/grammar/statements/rename.y"
15923:     {
15924: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15925: 					n->renameType = PG_OBJECT_COLUMN;
15926: 					n->relationType = PG_OBJECT_TABLE;
15927: 					n->relation = (yyvsp[(3) - (8)].range);
15928: 					n->subname = (yyvsp[(6) - (8)].str);
15929: 					n->newname = (yyvsp[(8) - (8)].str);
15930: 					n->missing_ok = false;
15931: 					(yyval.node) = (PGNode *)n;
15932: 				;}
15933:     break;
15934: 
15935:   case 118:
15936: #line 107 "third_party/libpg_query/grammar/statements/rename.y"
15937:     {
15938: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15939: 					n->renameType = PG_OBJECT_COLUMN;
15940: 					n->relationType = PG_OBJECT_TABLE;
15941: 					n->relation = (yyvsp[(5) - (10)].range);
15942: 					n->subname = (yyvsp[(8) - (10)].str);
15943: 					n->newname = (yyvsp[(10) - (10)].str);
15944: 					n->missing_ok = true;
15945: 					(yyval.node) = (PGNode *)n;
15946: 				;}
15947:     break;
15948: 
15949:   case 119:
15950: #line 118 "third_party/libpg_query/grammar/statements/rename.y"
15951:     {
15952: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15953: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
15954: 					n->relation = (yyvsp[(3) - (8)].range);
15955: 					n->subname = (yyvsp[(6) - (8)].str);
15956: 					n->newname = (yyvsp[(8) - (8)].str);
15957: 					n->missing_ok = false;
15958: 					(yyval.node) = (PGNode *)n;
15959: 				;}
15960:     break;
15961: 
15962:   case 120:
15963: #line 128 "third_party/libpg_query/grammar/statements/rename.y"
15964:     {
15965: 					PGRenameStmt *n = makeNode(PGRenameStmt);
15966: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
15967: 					n->relation = (yyvsp[(5) - (10)].range);
15968: 					n->subname = (yyvsp[(8) - (10)].str);
15969: 					n->newname = (yyvsp[(10) - (10)].str);
15970: 					n->missing_ok = true;
15971: 					(yyval.node) = (PGNode *)n;
15972: 				;}
15973:     break;
15974: 
15975:   case 121:
15976: #line 140 "third_party/libpg_query/grammar/statements/rename.y"
15977:     { (yyval.ival) = COLUMN; ;}
15978:     break;
15979: 
15980:   case 122:
15981: #line 141 "third_party/libpg_query/grammar/statements/rename.y"
15982:     { (yyval.ival) = 0; ;}
15983:     break;
15984: 
15985:   case 123:
15986: #line 10 "third_party/libpg_query/grammar/statements/insert.y"
15987:     {
15988: 					(yyvsp[(5) - (7)].istmt)->relation = (yyvsp[(4) - (7)].range);
15989: 					(yyvsp[(5) - (7)].istmt)->onConflictClause = (yyvsp[(6) - (7)].onconflict);
15990: 					(yyvsp[(5) - (7)].istmt)->returningList = (yyvsp[(7) - (7)].list);
15991: 					(yyvsp[(5) - (7)].istmt)->withClause = (yyvsp[(1) - (7)].with);
15992: 					(yyval.node) = (PGNode *) (yyvsp[(5) - (7)].istmt);
15993: 				;}
15994:     break;
15995: 
15996:   case 124:
15997: #line 22 "third_party/libpg_query/grammar/statements/insert.y"
15998:     {
15999: 					(yyval.istmt) = makeNode(PGInsertStmt);
16000: 					(yyval.istmt)->cols = NIL;
16001: 					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
16002: 				;}
16003:     break;
16004: 
16005:   case 125:
16006: #line 28 "third_party/libpg_query/grammar/statements/insert.y"
16007:     {
16008: 					(yyval.istmt) = makeNode(PGInsertStmt);
16009: 					(yyval.istmt)->cols = NIL;
16010: 					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
16011: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16012: 				;}
16013:     break;
16014: 
16015:   case 126:
16016: #line 35 "third_party/libpg_query/grammar/statements/insert.y"
16017:     {
16018: 					(yyval.istmt) = makeNode(PGInsertStmt);
16019: 					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
16020: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16021: 				;}
16022:     break;
16023: 
16024:   case 127:
16025: #line 41 "third_party/libpg_query/grammar/statements/insert.y"
16026:     {
16027: 					(yyval.istmt) = makeNode(PGInsertStmt);
16028: 					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
16029: 					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
16030: 					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
16031: 				;}
16032:     break;
16033: 
16034:   case 128:
16035: #line 48 "third_party/libpg_query/grammar/statements/insert.y"
16036:     {
16037: 					(yyval.istmt) = makeNode(PGInsertStmt);
16038: 					(yyval.istmt)->cols = NIL;
16039: 					(yyval.istmt)->selectStmt = NULL;
16040: 				;}
16041:     break;
16042: 
16043:   case 129:
16044: #line 58 "third_party/libpg_query/grammar/statements/insert.y"
16045:     {
16046: 					(yyval.range) = (yyvsp[(1) - (1)].range);
16047: 				;}
16048:     break;
16049: 
16050:   case 130:
16051: #line 62 "third_party/libpg_query/grammar/statements/insert.y"
16052:     {
16053: 					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
16054: 					(yyval.range) = (yyvsp[(1) - (3)].range);
16055: 				;}
16056:     break;
16057: 
16058:   case 131:
16059: #line 71 "third_party/libpg_query/grammar/statements/insert.y"
16060:     {
16061: 					(yyval.infer) = makeNode(PGInferClause);
16062: 					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
16063: 					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
16064: 					(yyval.infer)->conname = NULL;
16065: 					(yyval.infer)->location = (yylsp[(1) - (4)]);
16066: 				;}
16067:     break;
16068: 
16069:   case 132:
16070: #line 80 "third_party/libpg_query/grammar/statements/insert.y"
16071:     {
16072: 					(yyval.infer) = makeNode(PGInferClause);
16073: 					(yyval.infer)->indexElems = NIL;
16074: 					(yyval.infer)->whereClause = NULL;
16075: 					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
16076: 					(yyval.infer)->location = (yylsp[(1) - (3)]);
16077: 				;}
16078:     break;
16079: 
16080:   case 133:
16081: #line 88 "third_party/libpg_query/grammar/statements/insert.y"
16082:     {
16083: 					(yyval.infer) = NULL;
16084: 				;}
16085:     break;
16086: 
16087:   case 134:
16088: #line 95 "third_party/libpg_query/grammar/statements/insert.y"
16089:     { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
16090:     break;
16091: 
16092:   case 135:
16093: #line 96 "third_party/libpg_query/grammar/statements/insert.y"
16094:     { (yyval.with) = NULL; ;}
16095:     break;
16096: 
16097:   case 136:
16098: #line 102 "third_party/libpg_query/grammar/statements/insert.y"
16099:     {
16100: 					(yyval.target) = makeNode(PGResTarget);
16101: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16102: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16103: 					(yyval.target)->val = NULL;
16104: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16105: 				;}
16106:     break;
16107: 
16108:   case 137:
16109: #line 114 "third_party/libpg_query/grammar/statements/insert.y"
16110:     {
16111: 					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
16112: 					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
16113: 				;}
16114:     break;
16115: 
16116:   case 138:
16117: #line 119 "third_party/libpg_query/grammar/statements/insert.y"
16118:     {
16119: 					int ncolumns = list_length((yyvsp[(2) - (5)].list));
16120: 					int i = 1;
16121: 					PGListCell *col_cell;
16122: 
16123: 					/* Create a PGMultiAssignRef source for each target */
16124: 					foreach(col_cell, (yyvsp[(2) - (5)].list))
16125: 					{
16126: 						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
16127: 						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);
16128: 
16129: 						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
16130: 						r->colno = i;
16131: 						r->ncolumns = ncolumns;
16132: 						res_col->val = (PGNode *) r;
16133: 						i++;
16134: 					}
16135: 
16136: 					(yyval.list) = (yyvsp[(2) - (5)].list);
16137: 				;}
16138:     break;
16139: 
16140:   case 139:
16141: #line 144 "third_party/libpg_query/grammar/statements/insert.y"
16142:     {
16143: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16144: 					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
16145: 					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
16146: 					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
16147: 					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
16148: 					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
16149: 				;}
16150:     break;
16151: 
16152:   case 140:
16153: #line 154 "third_party/libpg_query/grammar/statements/insert.y"
16154:     {
16155: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16156: 					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
16157: 					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
16158: 					(yyval.onconflict)->targetList = NIL;
16159: 					(yyval.onconflict)->whereClause = NULL;
16160: 					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
16161: 				;}
16162:     break;
16163: 
16164:   case 141:
16165: #line 163 "third_party/libpg_query/grammar/statements/insert.y"
16166:     {
16167: 					(yyval.onconflict) = NULL;
16168: 				;}
16169:     break;
16170: 
16171:   case 142:
16172: #line 170 "third_party/libpg_query/grammar/statements/insert.y"
16173:     {
16174: 					(yyval.ielem) = makeNode(PGIndexElem);
16175: 					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
16176: 					(yyval.ielem)->expr = NULL;
16177: 					(yyval.ielem)->indexcolname = NULL;
16178: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16179: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16180: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16181: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16182: 				;}
16183:     break;
16184: 
16185:   case 143:
16186: #line 181 "third_party/libpg_query/grammar/statements/insert.y"
16187:     {
16188: 					(yyval.ielem) = makeNode(PGIndexElem);
16189: 					(yyval.ielem)->name = NULL;
16190: 					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
16191: 					(yyval.ielem)->indexcolname = NULL;
16192: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16193: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16194: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16195: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16196: 				;}
16197:     break;
16198: 
16199:   case 144:
16200: #line 192 "third_party/libpg_query/grammar/statements/insert.y"
16201:     {
16202: 					(yyval.ielem) = makeNode(PGIndexElem);
16203: 					(yyval.ielem)->name = NULL;
16204: 					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
16205: 					(yyval.ielem)->indexcolname = NULL;
16206: 					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
16207: 					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
16208: 					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
16209: 					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
16210: 				;}
16211:     break;
16212: 
16213:   case 145:
16214: #line 206 "third_party/libpg_query/grammar/statements/insert.y"
16215:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16216:     break;
16217: 
16218:   case 146:
16219: #line 207 "third_party/libpg_query/grammar/statements/insert.y"
16220:     { (yyval.list) = NIL; ;}
16221:     break;
16222: 
16223:   case 147:
16224: #line 213 "third_party/libpg_query/grammar/statements/insert.y"
16225:     { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
16226:     break;
16227: 
16228:   case 148:
16229: #line 214 "third_party/libpg_query/grammar/statements/insert.y"
16230:     { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
16231:     break;
16232: 
16233:   case 149:
16234: #line 219 "third_party/libpg_query/grammar/statements/insert.y"
16235:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16236:     break;
16237: 
16238:   case 150:
16239: #line 220 "third_party/libpg_query/grammar/statements/insert.y"
16240:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
16241:     break;
16242: 
16243:   case 151:
16244: #line 226 "third_party/libpg_query/grammar/statements/insert.y"
16245:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16246:     break;
16247: 
16248:   case 152:
16249: #line 227 "third_party/libpg_query/grammar/statements/insert.y"
16250:     { (yyval.list) = NIL; ;}
16251:     break;
16252: 
16253:   case 153:
16254: #line 231 "third_party/libpg_query/grammar/statements/insert.y"
16255:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16256:     break;
16257: 
16258:   case 154:
16259: #line 232 "third_party/libpg_query/grammar/statements/insert.y"
16260:     { (yyval.list) = NIL; ;}
16261:     break;
16262: 
16263:   case 155:
16264: #line 238 "third_party/libpg_query/grammar/statements/insert.y"
16265:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16266:     break;
16267: 
16268:   case 156:
16269: #line 240 "third_party/libpg_query/grammar/statements/insert.y"
16270:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
16271:     break;
16272: 
16273:   case 157:
16274: #line 245 "third_party/libpg_query/grammar/statements/insert.y"
16275:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16276:     break;
16277: 
16278:   case 158:
16279: #line 246 "third_party/libpg_query/grammar/statements/insert.y"
16280:     { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
16281:     break;
16282: 
16283:   case 159:
16284: #line 250 "third_party/libpg_query/grammar/statements/insert.y"
16285:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
16286:     break;
16287: 
16288:   case 160:
16289: #line 251 "third_party/libpg_query/grammar/statements/insert.y"
16290:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
16291:     break;
16292: 
16293:   case 161:
16294: #line 257 "third_party/libpg_query/grammar/statements/insert.y"
16295:     {
16296: 					(yyval.target) = makeNode(PGResTarget);
16297: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16298: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16299: 					(yyval.target)->val = NULL;	/* upper production sets this */
16300: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16301: 				;}
16302:     break;
16303: 
16304:   case 162:
16305: #line 8 "third_party/libpg_query/grammar/statements/pragma.y"
16306:     {
16307: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
16308: 					n->kind = PG_PRAGMA_TYPE_NOTHING;
16309: 					n->name = (yyvsp[(2) - (2)].str);
16310: 					(yyval.node) = (PGNode *)n;
16311: 				;}
16312:     break;
16313: 
16314:   case 163:
16315: #line 15 "third_party/libpg_query/grammar/statements/pragma.y"
16316:     {
16317: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
16318: 					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
16319: 					n->name = (yyvsp[(2) - (4)].str);
16320: 					n->args = (yyvsp[(4) - (4)].list);
16321: 					(yyval.node) = (PGNode *)n;
16322: 				;}
16323:     break;
16324: 
16325:   case 164:
16326: #line 23 "third_party/libpg_query/grammar/statements/pragma.y"
16327:     {
16328: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
16329: 					n->kind = PG_PRAGMA_TYPE_CALL;
16330: 					n->name = (yyvsp[(2) - (5)].str);
16331: 					n->args = (yyvsp[(4) - (5)].list);
16332: 					(yyval.node) = (PGNode *)n;
16333: 				;}
16334:     break;
16335: 
16336:   case 165:
16337: #line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
16338:     {
16339: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
16340: 					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
16341: 					n->sequence = (yyvsp[(4) - (5)].range);
16342: 					n->options = (yyvsp[(5) - (5)].list);
16343: 					n->ownerId = InvalidOid;
16344: 					n->if_not_exists = false;
16345: 					(yyval.node) = (PGNode *)n;
16346: 				;}
16347:     break;
16348: 
16349:   case 166:
16350: #line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
16351:     {
16352: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
16353: 					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
16354: 					n->sequence = (yyvsp[(7) - (8)].range);
16355: 					n->options = (yyvsp[(8) - (8)].list);
16356: 					n->ownerId = InvalidOid;
16357: 					n->if_not_exists = true;
16358: 					(yyval.node) = (PGNode *)n;
16359: 				;}
16360:     break;
16361: 
16362:   case 167:
16363: #line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
16364:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16365:     break;
16366: 
16367:   case 168:
16368: #line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
16369:     { (yyval.list) = NIL; ;}
16370:     break;
16371: 
16372:   case 169:
16373: #line 8 "third_party/libpg_query/grammar/statements/execute.y"
16374:     {
16375: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
16376: 					n->name = (yyvsp[(2) - (3)].str);
16377: 					n->params = (yyvsp[(3) - (3)].list);
16378: 					(yyval.node) = (PGNode *) n;
16379: 				;}
16380:     break;
16381: 
16382:   case 170:
16383: #line 16 "third_party/libpg_query/grammar/statements/execute.y"
16384:     {
16385: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
16386: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
16387: 					n->name = (yyvsp[(7) - (9)].str);
16388: 					n->params = (yyvsp[(8) - (9)].list);
16389: 					ctas->query = (PGNode *) n;
16390: 					ctas->into = (yyvsp[(4) - (9)].into);
16391: 					ctas->relkind = PG_OBJECT_TABLE;
16392: 					ctas->is_select_into = false;
16393: 					ctas->if_not_exists = false;
16394: 					/* cram additional flags into the PGIntoClause */
16395: 					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
16396: 					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
16397: 					(yyval.node) = (PGNode *) ctas;
16398: 				;}
16399:     break;
16400: 
16401:   case 171:
16402: #line 33 "third_party/libpg_query/grammar/statements/execute.y"
16403:     {
16404: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
16405: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
16406: 					n->name = (yyvsp[(10) - (12)].str);
16407: 					n->params = (yyvsp[(11) - (12)].list);
16408: 					ctas->query = (PGNode *) n;
16409: 					ctas->into = (yyvsp[(7) - (12)].into);
16410: 					ctas->relkind = PG_OBJECT_TABLE;
16411: 					ctas->is_select_into = false;
16412: 					ctas->if_not_exists = true;
16413: 					/* cram additional flags into the PGIntoClause */
16414: 					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
16415: 					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
16416: 					(yyval.node) = (PGNode *) ctas;
16417: 				;}
16418:     break;
16419: 
16420:   case 172:
16421: #line 51 "third_party/libpg_query/grammar/statements/execute.y"
16422:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16423:     break;
16424: 
16425:   case 173:
16426: #line 52 "third_party/libpg_query/grammar/statements/execute.y"
16427:     { (yyval.list) = NIL; ;}
16428:     break;
16429: 
16430:   case 174:
16431: #line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16432:     {
16433: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
16434: 					n->sequence = (yyvsp[(3) - (4)].range);
16435: 					n->options = (yyvsp[(4) - (4)].list);
16436: 					n->missing_ok = false;
16437: 					(yyval.node) = (PGNode *)n;
16438: 				;}
16439:     break;
16440: 
16441:   case 175:
16442: #line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16443:     {
16444: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
16445: 					n->sequence = (yyvsp[(5) - (6)].range);
16446: 					n->options = (yyvsp[(6) - (6)].list);
16447: 					n->missing_ok = true;
16448: 					(yyval.node) = (PGNode *)n;
16449: 				;}
16450:     break;
16451: 
16452:   case 176:
16453: #line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16454:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
16455:     break;
16456: 
16457:   case 177:
16458: #line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16459:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
16460:     break;
16461: 
16462:   case 178:
16463: #line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16464:     {;}
16465:     break;
16466: 
16467:   case 179:
16468: #line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16469:     {;}
16470:     break;
16471: 
16472:   case 180:
16473: #line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16474:     {;}
16475:     break;
16476: 
16477:   case 181:
16478: #line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16479:     { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
16480:     break;
16481: 
16482:   case 182:
16483: #line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16484:     { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
16485:     break;
16486: 
16487:   case 183:
16488: #line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16489:     {
16490: 					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
16491: 					doNegateFloat((yyval.value));
16492: 				;}
16493:     break;
16494: 
16495:   case 184:
16496: #line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16497:     { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
16498:     break;
16499: 
16500:   case 185:
16501: #line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16502:     {
16503: 					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
16504: 				;}
16505:     break;
16506: 
16507:   case 186:
16508: #line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16509:     {
16510: 					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16511: 				;}
16512:     break;
16513: 
16514:   case 187:
16515: #line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16516:     {
16517: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
16518: 				;}
16519:     break;
16520: 
16521:   case 188:
16522: #line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16523:     {
16524: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
16525: 				;}
16526:     break;
16527: 
16528:   case 189:
16529: #line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16530:     {
16531: 					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16532: 				;}
16533:     break;
16534: 
16535:   case 190:
16536: #line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16537:     {
16538: 					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16539: 				;}
16540:     break;
16541: 
16542:   case 191:
16543: #line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16544:     {
16545: 					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
16546: 				;}
16547:     break;
16548: 
16549:   case 192:
16550: #line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16551:     {
16552: 					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
16553: 				;}
16554:     break;
16555: 
16556:   case 193:
16557: #line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16558:     {
16559: 					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
16560: 				;}
16561:     break;
16562: 
16563:   case 194:
16564: #line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16565:     {
16566: 					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
16567: 				;}
16568:     break;
16569: 
16570:   case 195:
16571: #line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16572:     {
16573: 					/* not documented, only used by pg_dump */
16574: 					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
16575: 				;}
16576:     break;
16577: 
16578:   case 196:
16579: #line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16580:     {
16581: 					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16582: 				;}
16583:     break;
16584: 
16585:   case 197:
16586: #line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16587:     {
16588: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
16589: 				;}
16590:     break;
16591: 
16592:   case 198:
16593: #line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16594:     {
16595: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
16596: 				;}
16597:     break;
16598: 
16599:   case 199:
16600: #line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16601:     {;}
16602:     break;
16603: 
16604:   case 200:
16605: #line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16606:     {;}
16607:     break;
16608: 
16609:   case 201:
16610: #line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16611:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
16612:     break;
16613: 
16614:   case 202:
16615: #line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16616:     { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
16617:     break;
16618: 
16619:   case 203:
16620: #line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
16621:     { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
16622:     break;
16623: 
16624:   case 204:
16625: #line 3 "third_party/libpg_query/grammar/statements/transaction.y"
16626:     {
16627: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16628: 					n->kind = PG_TRANS_STMT_ROLLBACK;
16629: 					n->options = NIL;
16630: 					(yyval.node) = (PGNode *)n;
16631: 				;}
16632:     break;
16633: 
16634:   case 205:
16635: #line 10 "third_party/libpg_query/grammar/statements/transaction.y"
16636:     {
16637: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16638: 					n->kind = PG_TRANS_STMT_BEGIN;
16639: 					(yyval.node) = (PGNode *)n;
16640: 				;}
16641:     break;
16642: 
16643:   case 206:
16644: #line 16 "third_party/libpg_query/grammar/statements/transaction.y"
16645:     {
16646: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16647: 					n->kind = PG_TRANS_STMT_START;
16648: 					(yyval.node) = (PGNode *)n;
16649: 				;}
16650:     break;
16651: 
16652:   case 207:
16653: #line 22 "third_party/libpg_query/grammar/statements/transaction.y"
16654:     {
16655: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16656: 					n->kind = PG_TRANS_STMT_COMMIT;
16657: 					n->options = NIL;
16658: 					(yyval.node) = (PGNode *)n;
16659: 				;}
16660:     break;
16661: 
16662:   case 208:
16663: #line 29 "third_party/libpg_query/grammar/statements/transaction.y"
16664:     {
16665: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16666: 					n->kind = PG_TRANS_STMT_COMMIT;
16667: 					n->options = NIL;
16668: 					(yyval.node) = (PGNode *)n;
16669: 				;}
16670:     break;
16671: 
16672:   case 209:
16673: #line 36 "third_party/libpg_query/grammar/statements/transaction.y"
16674:     {
16675: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
16676: 					n->kind = PG_TRANS_STMT_ROLLBACK;
16677: 					n->options = NIL;
16678: 					(yyval.node) = (PGNode *)n;
16679: 				;}
16680:     break;
16681: 
16682:   case 210:
16683: #line 45 "third_party/libpg_query/grammar/statements/transaction.y"
16684:     {;}
16685:     break;
16686: 
16687:   case 211:
16688: #line 46 "third_party/libpg_query/grammar/statements/transaction.y"
16689:     {;}
16690:     break;
16691: 
16692:   case 212:
16693: #line 47 "third_party/libpg_query/grammar/statements/transaction.y"
16694:     {;}
16695:     break;
16696: 
16697:   case 213:
16698: #line 9 "third_party/libpg_query/grammar/statements/create.y"
16699:     {
16700: 					PGCreateStmt *n = makeNode(PGCreateStmt);
16701: 					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
16702: 					n->relation = (yyvsp[(4) - (9)].range);
16703: 					n->tableElts = (yyvsp[(6) - (9)].list);
16704: 					n->ofTypename = NULL;
16705: 					n->constraints = NIL;
16706: 					n->options = (yyvsp[(8) - (9)].list);
16707: 					n->oncommit = (yyvsp[(9) - (9)].oncommit);
16708: 					n->if_not_exists = false;
16709: 					(yyval.node) = (PGNode *)n;
16710: 				;}
16711:     break;
16712: 
16713:   case 214:
16714: #line 24 "third_party/libpg_query/grammar/statements/create.y"
16715:     {
16716: 					PGCreateStmt *n = makeNode(PGCreateStmt);
16717: 					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
16718: 					n->relation = (yyvsp[(7) - (12)].range);
16719: 					n->tableElts = (yyvsp[(9) - (12)].list);
16720: 					n->ofTypename = NULL;
16721: 					n->constraints = NIL;
16722: 					n->options = (yyvsp[(11) - (12)].list);
16723: 					n->oncommit = (yyvsp[(12) - (12)].oncommit);
16724: 					n->if_not_exists = true;
16725: 					(yyval.node) = (PGNode *)n;
16726: 				;}
16727:     break;
16728: 
16729:   case 215:
16730: #line 41 "third_party/libpg_query/grammar/statements/create.y"
16731:     { (yyval.ival) = 0; ;}
16732:     break;
16733: 
16734:   case 216:
16735: #line 43 "third_party/libpg_query/grammar/statements/create.y"
16736:     {
16737: 					/*
16738: 					 * We must complain about conflicting options.
16739: 					 * We could, but choose not to, complain about redundant
16740: 					 * options (ie, where $2's bit is already set in $1).
16741: 					 */
16742: 					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);
16743: 
16744: 					/* special message for this case */
16745: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
16746: 						ereport(ERROR,
16747: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
16748: 								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
16749: 								 parser_errposition((yylsp[(2) - (2)]))));
16750: 					/* generic message for other conflicts */
16751: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
16752: 						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
16753: 						ereport(ERROR,
16754: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
16755: 								 errmsg("conflicting constraint properties"),
16756: 								 parser_errposition((yylsp[(2) - (2)]))));
16757: 					(yyval.ival) = newspec;
16758: 				;}
16759:     break;
16760: 
16761:   case 217:
16762: #line 69 "third_party/libpg_query/grammar/statements/create.y"
16763:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
16764:     break;
16765: 
16766:   case 218:
16767: #line 70 "third_party/libpg_query/grammar/statements/create.y"
16768:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
16769:     break;
16770: 
16771:   case 219:
16772: #line 71 "third_party/libpg_query/grammar/statements/create.y"
16773:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
16774:     break;
16775: 
16776:   case 220:
16777: #line 72 "third_party/libpg_query/grammar/statements/create.y"
16778:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
16779:     break;
16780: 
16781:   case 221:
16782: #line 73 "third_party/libpg_query/grammar/statements/create.y"
16783:     { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
16784:     break;
16785: 
16786:   case 222:
16787: #line 74 "third_party/libpg_query/grammar/statements/create.y"
16788:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
16789:     break;
16790: 
16791:   case 223:
16792: #line 78 "third_party/libpg_query/grammar/statements/create.y"
16793:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
16794:     break;
16795: 
16796:   case 224:
16797: #line 79 "third_party/libpg_query/grammar/statements/create.y"
16798:     { (yyval.list) = NIL; ;}
16799:     break;
16800: 
16801:   case 225:
16802: #line 84 "third_party/libpg_query/grammar/statements/create.y"
16803:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
16804:     break;
16805: 
16806:   case 226:
16807: #line 89 "third_party/libpg_query/grammar/statements/create.y"
16808:     { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
16809:     break;
16810: 
16811:   case 227:
16812: #line 90 "third_party/libpg_query/grammar/statements/create.y"
16813:     { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
16814:     break;
16815: 
16816:   case 228:
16817: #line 91 "third_party/libpg_query/grammar/statements/create.y"
16818:     { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
16819:     break;
16820: 
16821:   case 229:
16822: #line 92 "third_party/libpg_query/grammar/statements/create.y"
16823:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
16824:     break;
16825: 
16826:   case 230:
16827: #line 93 "third_party/libpg_query/grammar/statements/create.y"
16828:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
16829:     break;
16830: 
16831:   case 231:
16832: #line 99 "third_party/libpg_query/grammar/statements/create.y"
16833:     {
16834: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
16835: 					n->conname = (yyvsp[(2) - (3)].str);
16836: 					n->location = (yylsp[(1) - (3)]);
16837: 					(yyval.node) = (PGNode *) n;
16838: 				;}
16839:     break;
16840: 
16841:   case 232:
16842: #line 105 "third_party/libpg_query/grammar/statements/create.y"
16843:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16844:     break;
16845: 
16846:   case 233:
16847: #line 106 "third_party/libpg_query/grammar/statements/create.y"
16848:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
16849:     break;
16850: 
16851:   case 234:
16852: #line 108 "third_party/libpg_query/grammar/statements/create.y"
16853:     {
16854: 					/*
16855: 					 * Note: the PGCollateClause is momentarily included in
16856: 					 * the list built by ColQualList, but we split it out
16857: 					 * again in SplitColQualList.
16858: 					 */
16859: 					PGCollateClause *n = makeNode(PGCollateClause);
16860: 					n->arg = NULL;
16861: 					n->collname = (yyvsp[(2) - (2)].list);
16862: 					n->location = (yylsp[(1) - (2)]);
16863: 					(yyval.node) = (PGNode *) n;
16864: 				;}
16865:     break;
16866: 
16867:   case 235:
16868: #line 125 "third_party/libpg_query/grammar/statements/create.y"
16869:     {
16870: 					PGConstraint *n = makeNode(PGConstraint);
16871: 					n->contype = PG_CONSTR_NOTNULL;
16872: 					n->location = (yylsp[(1) - (2)]);
16873: 					(yyval.node) = (PGNode *)n;
16874: 				;}
16875:     break;
16876: 
16877:   case 236:
16878: #line 132 "third_party/libpg_query/grammar/statements/create.y"
16879:     {
16880: 					PGConstraint *n = makeNode(PGConstraint);
16881: 					n->contype = PG_CONSTR_NULL;
16882: 					n->location = (yylsp[(1) - (1)]);
16883: 					(yyval.node) = (PGNode *)n;
16884: 				;}
16885:     break;
16886: 
16887:   case 237:
16888: #line 139 "third_party/libpg_query/grammar/statements/create.y"
16889:     {
16890: 					PGConstraint *n = makeNode(PGConstraint);
16891: 					n->contype = PG_CONSTR_UNIQUE;
16892: 					n->location = (yylsp[(1) - (2)]);
16893: 					n->keys = NULL;
16894: 					n->options = (yyvsp[(2) - (2)].list);
16895: 					n->indexname = NULL;
16896: 					(yyval.node) = (PGNode *)n;
16897: 				;}
16898:     break;
16899: 
16900:   case 238:
16901: #line 149 "third_party/libpg_query/grammar/statements/create.y"
16902:     {
16903: 					PGConstraint *n = makeNode(PGConstraint);
16904: 					n->contype = PG_CONSTR_PRIMARY;
16905: 					n->location = (yylsp[(1) - (3)]);
16906: 					n->keys = NULL;
16907: 					n->options = (yyvsp[(3) - (3)].list);
16908: 					n->indexname = NULL;
16909: 					(yyval.node) = (PGNode *)n;
16910: 				;}
16911:     break;
16912: 
16913:   case 239:
16914: #line 159 "third_party/libpg_query/grammar/statements/create.y"
16915:     {
16916: 					PGConstraint *n = makeNode(PGConstraint);
16917: 					n->contype = PG_CONSTR_CHECK;
16918: 					n->location = (yylsp[(1) - (5)]);
16919: 					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
16920: 					n->raw_expr = (yyvsp[(3) - (5)].node);
16921: 					n->cooked_expr = NULL;
16922: 					n->skip_validation = false;
16923: 					n->initially_valid = true;
16924: 					(yyval.node) = (PGNode *)n;
16925: 				;}
16926:     break;
16927: 
16928:   case 240:
16929: #line 171 "third_party/libpg_query/grammar/statements/create.y"
16930:     {
16931: 					PGConstraint *n = makeNode(PGConstraint);
16932: 					n->contype = PG_CONSTR_DEFAULT;
16933: 					n->location = (yylsp[(1) - (2)]);
16934: 					n->raw_expr = (yyvsp[(2) - (2)].node);
16935: 					n->cooked_expr = NULL;
16936: 					(yyval.node) = (PGNode *)n;
16937: 				;}
16938:     break;
16939: 
16940:   case 241:
16941: #line 180 "third_party/libpg_query/grammar/statements/create.y"
16942:     {
16943: 					PGConstraint *n = makeNode(PGConstraint);
16944: 					n->contype = PG_CONSTR_IDENTITY;
16945: 					n->generated_when = (yyvsp[(2) - (5)].ival);
16946: 					n->options = (yyvsp[(5) - (5)].list);
16947: 					n->location = (yylsp[(1) - (5)]);
16948: 					(yyval.node) = (PGNode *)n;
16949: 				;}
16950:     break;
16951: 
16952:   case 242:
16953: #line 189 "third_party/libpg_query/grammar/statements/create.y"
16954:     {
16955: 					PGConstraint *n = makeNode(PGConstraint);
16956: 					n->contype = PG_CONSTR_FOREIGN;
16957: 					n->location = (yylsp[(1) - (5)]);
16958: 					n->pktable			= (yyvsp[(2) - (5)].range);
16959: 					n->fk_attrs			= NIL;
16960: 					n->pk_attrs			= (yyvsp[(3) - (5)].list);
16961: 					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
16962: 					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
16963: 					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
16964: 					n->skip_validation  = false;
16965: 					n->initially_valid  = true;
16966: 					(yyval.node) = (PGNode *)n;
16967: 				;}
16968:     break;
16969: 
16970:   case 243:
16971: #line 208 "third_party/libpg_query/grammar/statements/create.y"
16972:     {
16973: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
16974: 				;}
16975:     break;
16976: 
16977:   case 244:
16978: #line 214 "third_party/libpg_query/grammar/statements/create.y"
16979:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
16980:     break;
16981: 
16982:   case 245:
16983: #line 220 "third_party/libpg_query/grammar/statements/create.y"
16984:     { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
16985:     break;
16986: 
16987:   case 246:
16988: #line 222 "third_party/libpg_query/grammar/statements/create.y"
16989:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
16990:     break;
16991: 
16992:   case 247:
16993: #line 224 "third_party/libpg_query/grammar/statements/create.y"
16994:     { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
16995:     break;
16996: 
16997:   case 248:
16998: #line 226 "third_party/libpg_query/grammar/statements/create.y"
16999:     { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
17000:     break;
17001: 
17002:   case 249:
17003: #line 228 "third_party/libpg_query/grammar/statements/create.y"
17004:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
17005:     break;
17006: 
17007:   case 250:
17008: #line 233 "third_party/libpg_query/grammar/statements/create.y"
17009:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
17010:     break;
17011: 
17012:   case 251:
17013: #line 234 "third_party/libpg_query/grammar/statements/create.y"
17014:     { (yyval.list) = NIL; ;}
17015:     break;
17016: 
17017:   case 252:
17018: #line 238 "third_party/libpg_query/grammar/statements/create.y"
17019:     { (yyval.oncommit) = ONCOMMIT_DROP; ;}
17020:     break;
17021: 
17022:   case 253:
17023: #line 239 "third_party/libpg_query/grammar/statements/create.y"
17024:     { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
17025:     break;
17026: 
17027:   case 254:
17028: #line 240 "third_party/libpg_query/grammar/statements/create.y"
17029:     { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
17030:     break;
17031: 
17032:   case 255:
17033: #line 241 "third_party/libpg_query/grammar/statements/create.y"
17034:     { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
17035:     break;
17036: 
17037:   case 256:
17038: #line 246 "third_party/libpg_query/grammar/statements/create.y"
17039:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17040:     break;
17041: 
17042:   case 257:
17043: #line 250 "third_party/libpg_query/grammar/statements/create.y"
17044:     {  (yyval.boolean) = true; ;}
17045:     break;
17046: 
17047:   case 258:
17048: #line 251 "third_party/libpg_query/grammar/statements/create.y"
17049:     {  (yyval.boolean) = false; ;}
17050:     break;
17051: 
17052:   case 259:
17053: #line 257 "third_party/libpg_query/grammar/statements/create.y"
17054:     {
17055: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
17056: 					n->conname = (yyvsp[(2) - (3)].str);
17057: 					n->location = (yylsp[(1) - (3)]);
17058: 					(yyval.node) = (PGNode *) n;
17059: 				;}
17060:     break;
17061: 
17062:   case 260:
17063: #line 263 "third_party/libpg_query/grammar/statements/create.y"
17064:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17065:     break;
17066: 
17067:   case 261:
17068: #line 268 "third_party/libpg_query/grammar/statements/create.y"
17069:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
17070:     break;
17071: 
17072:   case 262:
17073: #line 269 "third_party/libpg_query/grammar/statements/create.y"
17074:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
17075:     break;
17076: 
17077:   case 263:
17078: #line 270 "third_party/libpg_query/grammar/statements/create.y"
17079:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
17080:     break;
17081: 
17082:   case 264:
17083: #line 271 "third_party/libpg_query/grammar/statements/create.y"
17084:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
17085:     break;
17086: 
17087:   case 265:
17088: #line 272 "third_party/libpg_query/grammar/statements/create.y"
17089:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
17090:     break;
17091: 
17092:   case 266:
17093: #line 273 "third_party/libpg_query/grammar/statements/create.y"
17094:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
17095:     break;
17096: 
17097:   case 267:
17098: #line 274 "third_party/libpg_query/grammar/statements/create.y"
17099:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
17100:     break;
17101: 
17102:   case 268:
17103: #line 275 "third_party/libpg_query/grammar/statements/create.y"
17104:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
17105:     break;
17106: 
17107:   case 269:
17108: #line 281 "third_party/libpg_query/grammar/statements/create.y"
17109:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17110:     break;
17111: 
17112:   case 270:
17113: #line 282 "third_party/libpg_query/grammar/statements/create.y"
17114:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
17115:     break;
17116: 
17117:   case 271:
17118: #line 286 "third_party/libpg_query/grammar/statements/create.y"
17119:     { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
17120:     break;
17121: 
17122:   case 272:
17123: #line 292 "third_party/libpg_query/grammar/statements/create.y"
17124:     {
17125: 					PGConstraint *n = makeNode(PGConstraint);
17126: 					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
17127: 					n->location = (yylsp[(1) - (1)]);
17128: 					(yyval.node) = (PGNode *)n;
17129: 				;}
17130:     break;
17131: 
17132:   case 273:
17133: #line 299 "third_party/libpg_query/grammar/statements/create.y"
17134:     {
17135: 					PGConstraint *n = makeNode(PGConstraint);
17136: 					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
17137: 					n->location = (yylsp[(1) - (2)]);
17138: 					(yyval.node) = (PGNode *)n;
17139: 				;}
17140:     break;
17141: 
17142:   case 274:
17143: #line 306 "third_party/libpg_query/grammar/statements/create.y"
17144:     {
17145: 					PGConstraint *n = makeNode(PGConstraint);
17146: 					n->contype = PG_CONSTR_ATTR_DEFERRED;
17147: 					n->location = (yylsp[(1) - (2)]);
17148: 					(yyval.node) = (PGNode *)n;
17149: 				;}
17150:     break;
17151: 
17152:   case 275:
17153: #line 313 "third_party/libpg_query/grammar/statements/create.y"
17154:     {
17155: 					PGConstraint *n = makeNode(PGConstraint);
17156: 					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
17157: 					n->location = (yylsp[(1) - (2)]);
17158: 					(yyval.node) = (PGNode *)n;
17159: 				;}
17160:     break;
17161: 
17162:   case 276:
17163: #line 324 "third_party/libpg_query/grammar/statements/create.y"
17164:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
17165:     break;
17166: 
17167:   case 277:
17168: #line 325 "third_party/libpg_query/grammar/statements/create.y"
17169:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
17170:     break;
17171: 
17172:   case 278:
17173: #line 326 "third_party/libpg_query/grammar/statements/create.y"
17174:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
17175:     break;
17176: 
17177:   case 279:
17178: #line 327 "third_party/libpg_query/grammar/statements/create.y"
17179:     { (yyval.list) = NIL; ;}
17180:     break;
17181: 
17182:   case 280:
17183: #line 331 "third_party/libpg_query/grammar/statements/create.y"
17184:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17185:     break;
17186: 
17187:   case 281:
17188: #line 336 "third_party/libpg_query/grammar/statements/create.y"
17189:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
17190:     break;
17191: 
17192:   case 282:
17193: #line 337 "third_party/libpg_query/grammar/statements/create.y"
17194:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
17195:     break;
17196: 
17197:   case 283:
17198: #line 338 "third_party/libpg_query/grammar/statements/create.y"
17199:     { (yyval.ival) = 0; ;}
17200:     break;
17201: 
17202:   case 284:
17203: #line 343 "third_party/libpg_query/grammar/statements/create.y"
17204:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17205:     break;
17206: 
17207:   case 285:
17208: #line 348 "third_party/libpg_query/grammar/statements/create.y"
17209:     { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
17210:     break;
17211: 
17212:   case 286:
17213: #line 349 "third_party/libpg_query/grammar/statements/create.y"
17214:     { (yyval.ival) = CAS_DEFERRABLE; ;}
17215:     break;
17216: 
17217:   case 287:
17218: #line 350 "third_party/libpg_query/grammar/statements/create.y"
17219:     { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
17220:     break;
17221: 
17222:   case 288:
17223: #line 351 "third_party/libpg_query/grammar/statements/create.y"
17224:     { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
17225:     break;
17226: 
17227:   case 289:
17228: #line 352 "third_party/libpg_query/grammar/statements/create.y"
17229:     { (yyval.ival) = CAS_NOT_VALID; ;}
17230:     break;
17231: 
17232:   case 290:
17233: #line 353 "third_party/libpg_query/grammar/statements/create.y"
17234:     { (yyval.ival) = CAS_NO_INHERIT; ;}
17235:     break;
17236: 
17237:   case 291:
17238: #line 359 "third_party/libpg_query/grammar/statements/create.y"
17239:     {
17240: 					PGColumnDef *n = makeNode(PGColumnDef);
17241: 					n->colname = (yyvsp[(1) - (4)].str);
17242: 					n->typeName = (yyvsp[(2) - (4)].typnam);
17243: 					n->inhcount = 0;
17244: 					n->is_local = true;
17245: 					n->is_not_null = false;
17246: 					n->is_from_type = false;
17247: 					n->storage = 0;
17248: 					n->raw_default = NULL;
17249: 					n->cooked_default = NULL;
17250: 					n->collOid = InvalidOid;
17251: 					n->fdwoptions = (yyvsp[(3) - (4)].list);
17252: 					SplitColQualList((yyvsp[(4) - (4)].list), &n->constraints, &n->collClause,
17253: 									 yyscanner);
17254: 					n->location = (yylsp[(1) - (4)]);
17255: 					(yyval.node) = (PGNode *)n;
17256: 				;}
17257:     break;
17258: 
17259:   case 292:
17260: #line 382 "third_party/libpg_query/grammar/statements/create.y"
17261:     {
17262: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
17263: 				;}
17264:     break;
17265: 
17266:   case 293:
17267: #line 386 "third_party/libpg_query/grammar/statements/create.y"
17268:     {
17269: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
17270: 				;}
17271:     break;
17272: 
17273:   case 294:
17274: #line 392 "third_party/libpg_query/grammar/statements/create.y"
17275:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17276:     break;
17277: 
17278:   case 295:
17279: #line 393 "third_party/libpg_query/grammar/statements/create.y"
17280:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
17281:     break;
17282: 
17283:   case 296:
17284: #line 397 "third_party/libpg_query/grammar/statements/create.y"
17285:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17286:     break;
17287: 
17288:   case 297:
17289: #line 401 "third_party/libpg_query/grammar/statements/create.y"
17290:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17291:     break;
17292: 
17293:   case 298:
17294: #line 402 "third_party/libpg_query/grammar/statements/create.y"
17295:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17296:     break;
17297: 
17298:   case 299:
17299: #line 403 "third_party/libpg_query/grammar/statements/create.y"
17300:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17301:     break;
17302: 
17303:   case 300:
17304: #line 408 "third_party/libpg_query/grammar/statements/create.y"
17305:     {
17306: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
17307: 				;}
17308:     break;
17309: 
17310:   case 301:
17311: #line 412 "third_party/libpg_query/grammar/statements/create.y"
17312:     {
17313: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
17314: 				;}
17315:     break;
17316: 
17317:   case 302:
17318: #line 419 "third_party/libpg_query/grammar/statements/create.y"
17319:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
17320:     break;
17321: 
17322:   case 303:
17323: #line 420 "third_party/libpg_query/grammar/statements/create.y"
17324:     { (yyval.list) = NIL; ;}
17325:     break;
17326: 
17327:   case 304:
17328: #line 425 "third_party/libpg_query/grammar/statements/create.y"
17329:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
17330:     break;
17331: 
17332:   case 305:
17333: #line 426 "third_party/libpg_query/grammar/statements/create.y"
17334:     { (yyval.list) = NIL; ;}
17335:     break;
17336: 
17337:   case 306:
17338: #line 431 "third_party/libpg_query/grammar/statements/create.y"
17339:     {
17340: 					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
17341: 				;}
17342:     break;
17343: 
17344:   case 307:
17345: #line 438 "third_party/libpg_query/grammar/statements/create.y"
17346:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17347:     break;
17348: 
17349:   case 308:
17350: #line 439 "third_party/libpg_query/grammar/statements/create.y"
17351:     { (yyval.list) = NIL; ;}
17352:     break;
17353: 
17354:   case 309:
17355: #line 444 "third_party/libpg_query/grammar/statements/create.y"
17356:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
17357:     break;
17358: 
17359:   case 310:
17360: #line 445 "third_party/libpg_query/grammar/statements/create.y"
17361:     { (yyval.list) = NIL; ;}
17362:     break;
17363: 
17364:   case 311:
17365: #line 449 "third_party/libpg_query/grammar/statements/create.y"
17366:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
17367:     break;
17368: 
17369:   case 312:
17370: #line 455 "third_party/libpg_query/grammar/statements/create.y"
17371:     {
17372: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
17373: 				;}
17374:     break;
17375: 
17376:   case 313:
17377: #line 459 "third_party/libpg_query/grammar/statements/create.y"
17378:     {
17379: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
17380: 				;}
17381:     break;
17382: 
17383:   case 314:
17384: #line 463 "third_party/libpg_query/grammar/statements/create.y"
17385:     {
17386: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
17387: 											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
17388: 				;}
17389:     break;
17390: 
17391:   case 315:
17392: #line 468 "third_party/libpg_query/grammar/statements/create.y"
17393:     {
17394: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
17395: 				;}
17396:     break;
17397: 
17398:   case 316:
17399: #line 475 "third_party/libpg_query/grammar/statements/create.y"
17400:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
17401:     break;
17402: 
17403:   case 317:
17404: #line 476 "third_party/libpg_query/grammar/statements/create.y"
17405:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
17406:     break;
17407: 
17408:   case 318:
17409: #line 480 "third_party/libpg_query/grammar/statements/create.y"
17410:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
17411:     break;
17412: 
17413:   case 319:
17414: #line 482 "third_party/libpg_query/grammar/statements/create.y"
17415:     {
17416: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
17417: 					(yyval.typnam)->pct_type = true;
17418: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
17419: 				;}
17420:     break;
17421: 
17422:   case 320:
17423: #line 488 "third_party/libpg_query/grammar/statements/create.y"
17424:     {
17425: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
17426: 					(yyval.typnam)->pct_type = true;
17427: 					(yyval.typnam)->setof = true;
17428: 					(yyval.typnam)->location = (yylsp[(2) - (5)]);
17429: 				;}
17430:     break;
17431: 
17432:   case 321:
17433: #line 499 "third_party/libpg_query/grammar/statements/create.y"
17434:     {
17435: 					PGConstraint *n = makeNode(PGConstraint);
17436: 					n->contype = PG_CONSTR_CHECK;
17437: 					n->location = (yylsp[(1) - (5)]);
17438: 					n->raw_expr = (yyvsp[(3) - (5)].node);
17439: 					n->cooked_expr = NULL;
17440: 					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
17441: 								   NULL, NULL, &n->skip_validation,
17442: 								   &n->is_no_inherit, yyscanner);
17443: 					n->initially_valid = !n->skip_validation;
17444: 					(yyval.node) = (PGNode *)n;
17445: 				;}
17446:     break;
17447: 
17448:   case 322:
17449: #line 513 "third_party/libpg_query/grammar/statements/create.y"
17450:     {
17451: 					PGConstraint *n = makeNode(PGConstraint);
17452: 					n->contype = PG_CONSTR_UNIQUE;
17453: 					n->location = (yylsp[(1) - (6)]);
17454: 					n->keys = (yyvsp[(3) - (6)].list);
17455: 					n->options = (yyvsp[(5) - (6)].list);
17456: 					n->indexname = NULL;
17457: 					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
17458: 								   &n->deferrable, &n->initdeferred, NULL,
17459: 								   NULL, yyscanner);
17460: 					(yyval.node) = (PGNode *)n;
17461: 				;}
17462:     break;
17463: 
17464:   case 323:
17465: #line 526 "third_party/libpg_query/grammar/statements/create.y"
17466:     {
17467: 					PGConstraint *n = makeNode(PGConstraint);
17468: 					n->contype = PG_CONSTR_UNIQUE;
17469: 					n->location = (yylsp[(1) - (3)]);
17470: 					n->keys = NIL;
17471: 					n->options = NIL;
17472: 					n->indexname = (yyvsp[(2) - (3)].str);
17473: 					n->indexspace = NULL;
17474: 					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
17475: 								   &n->deferrable, &n->initdeferred, NULL,
17476: 								   NULL, yyscanner);
17477: 					(yyval.node) = (PGNode *)n;
17478: 				;}
17479:     break;
17480: 
17481:   case 324:
17482: #line 541 "third_party/libpg_query/grammar/statements/create.y"
17483:     {
17484: 					PGConstraint *n = makeNode(PGConstraint);
17485: 					n->contype = PG_CONSTR_PRIMARY;
17486: 					n->location = (yylsp[(1) - (7)]);
17487: 					n->keys = (yyvsp[(4) - (7)].list);
17488: 					n->options = (yyvsp[(6) - (7)].list);
17489: 					n->indexname = NULL;
17490: 					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
17491: 								   &n->deferrable, &n->initdeferred, NULL,
17492: 								   NULL, yyscanner);
17493: 					(yyval.node) = (PGNode *)n;
17494: 				;}
17495:     break;
17496: 
17497:   case 325:
17498: #line 554 "third_party/libpg_query/grammar/statements/create.y"
17499:     {
17500: 					PGConstraint *n = makeNode(PGConstraint);
17501: 					n->contype = PG_CONSTR_PRIMARY;
17502: 					n->location = (yylsp[(1) - (4)]);
17503: 					n->keys = NIL;
17504: 					n->options = NIL;
17505: 					n->indexname = (yyvsp[(3) - (4)].str);
17506: 					n->indexspace = NULL;
17507: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
17508: 								   &n->deferrable, &n->initdeferred, NULL,
17509: 								   NULL, yyscanner);
17510: 					(yyval.node) = (PGNode *)n;
17511: 				;}
17512:     break;
17513: 
17514:   case 326:
17515: #line 569 "third_party/libpg_query/grammar/statements/create.y"
17516:     {
17517: 					PGConstraint *n = makeNode(PGConstraint);
17518: 					n->contype = PG_CONSTR_FOREIGN;
17519: 					n->location = (yylsp[(1) - (11)]);
17520: 					n->pktable			= (yyvsp[(7) - (11)].range);
17521: 					n->fk_attrs			= (yyvsp[(4) - (11)].list);
17522: 					n->pk_attrs			= (yyvsp[(8) - (11)].list);
17523: 					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
17524: 					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
17525: 					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
17526: 					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
17527: 								   &n->deferrable, &n->initdeferred,
17528: 								   &n->skip_validation, NULL,
17529: 								   yyscanner);
17530: 					n->initially_valid = !n->skip_validation;
17531: 					(yyval.node) = (PGNode *)n;
17532: 				;}
17533:     break;
17534: 
17535:   case 327:
17536: #line 591 "third_party/libpg_query/grammar/statements/create.y"
17537:     {
17538: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
17539: 				;}
17540:     break;
17541: 
17542:   case 328:
17543: #line 595 "third_party/libpg_query/grammar/statements/create.y"
17544:     {
17545: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
17546: 				;}
17547:     break;
17548: 
17549:   case 329:
17550: #line 602 "third_party/libpg_query/grammar/statements/create.y"
17551:     {
17552: 				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
17553: 			;}
17554:     break;
17555: 
17556:   case 330:
17557: #line 606 "third_party/libpg_query/grammar/statements/create.y"
17558:     {
17559: 				ereport(ERROR,
17560: 						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
17561: 						 errmsg("MATCH PARTIAL not yet implemented"),
17562: 						 parser_errposition((yylsp[(1) - (2)]))));
17563: 				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
17564: 			;}
17565:     break;
17566: 
17567:   case 331:
17568: #line 614 "third_party/libpg_query/grammar/statements/create.y"
17569:     {
17570: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
17571: 			;}
17572:     break;
17573: 
17574:   case 332:
17575: #line 618 "third_party/libpg_query/grammar/statements/create.y"
17576:     {
17577: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
17578: 			;}
17579:     break;
17580: 
17581:   case 333:
17582: #line 626 "third_party/libpg_query/grammar/statements/create.y"
17583:     {
17584: 					PGTableLikeClause *n = makeNode(PGTableLikeClause);
17585: 					n->relation = (yyvsp[(2) - (3)].range);
17586: 					n->options = (yyvsp[(3) - (3)].ival);
17587: 					(yyval.node) = (PGNode *)n;
17588: 				;}
17589:     break;
17590: 
17591:   case 334:
17592: #line 635 "third_party/libpg_query/grammar/statements/create.y"
17593:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17594:     break;
17595: 
17596:   case 335:
17597: #line 636 "third_party/libpg_query/grammar/statements/create.y"
17598:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17599:     break;
17600: 
17601:   case 336:
17602: #line 637 "third_party/libpg_query/grammar/statements/create.y"
17603:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17604:     break;
17605: 
17606:   case 337:
17607: #line 638 "third_party/libpg_query/grammar/statements/create.y"
17608:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
17609:     break;
17610: 
17611:   case 338:
17612: #line 640 "third_party/libpg_query/grammar/statements/create.y"
17613:     {
17614: 					ereport(PGWARNING,
17615: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
17616: 							 parser_errposition((yylsp[(1) - (2)]))));
17617: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
17618: 				;}
17619:     break;
17620: 
17621:   case 339:
17622: #line 647 "third_party/libpg_query/grammar/statements/create.y"
17623:     {
17624: 					ereport(PGWARNING,
17625: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
17626: 							 parser_errposition((yylsp[(1) - (2)]))));
17627: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
17628: 				;}
17629:     break;
17630: 
17631:   case 340:
17632: #line 653 "third_party/libpg_query/grammar/statements/create.y"
17633:     { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
17634:     break;
17635: 
17636:   case 341:
17637: #line 654 "third_party/libpg_query/grammar/statements/create.y"
17638:     { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
17639:     break;
17640: 
17641:   case 342:
17642: #line 659 "third_party/libpg_query/grammar/statements/create.y"
17643:     { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
17644:     break;
17645: 
17646:   case 343:
17647: #line 660 "third_party/libpg_query/grammar/statements/create.y"
17648:     { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
17649:     break;
17650: 
17651:   case 344:
17652: #line 10 "third_party/libpg_query/grammar/statements/drop.y"
17653:     {
17654: 					PGDropStmt *n = makeNode(PGDropStmt);
17655: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17656: 					n->missing_ok = true;
17657: 					n->objects = (yyvsp[(5) - (6)].list);
17658: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17659: 					n->concurrent = false;
17660: 					(yyval.node) = (PGNode *)n;
17661: 				;}
17662:     break;
17663: 
17664:   case 345:
17665: #line 20 "third_party/libpg_query/grammar/statements/drop.y"
17666:     {
17667: 					PGDropStmt *n = makeNode(PGDropStmt);
17668: 					n->removeType = (yyvsp[(2) - (4)].objtype);
17669: 					n->missing_ok = false;
17670: 					n->objects = (yyvsp[(3) - (4)].list);
17671: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
17672: 					n->concurrent = false;
17673: 					(yyval.node) = (PGNode *)n;
17674: 				;}
17675:     break;
17676: 
17677:   case 346:
17678: #line 30 "third_party/libpg_query/grammar/statements/drop.y"
17679:     {
17680: 					PGDropStmt *n = makeNode(PGDropStmt);
17681: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17682: 					n->missing_ok = true;
17683: 					n->objects = (yyvsp[(5) - (6)].list);
17684: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17685: 					n->concurrent = false;
17686: 					(yyval.node) = (PGNode *)n;
17687: 				;}
17688:     break;
17689: 
17690:   case 347:
17691: #line 40 "third_party/libpg_query/grammar/statements/drop.y"
17692:     {
17693: 					PGDropStmt *n = makeNode(PGDropStmt);
17694: 					n->removeType = (yyvsp[(2) - (4)].objtype);
17695: 					n->missing_ok = false;
17696: 					n->objects = (yyvsp[(3) - (4)].list);
17697: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
17698: 					n->concurrent = false;
17699: 					(yyval.node) = (PGNode *)n;
17700: 				;}
17701:     break;
17702: 
17703:   case 348:
17704: #line 50 "third_party/libpg_query/grammar/statements/drop.y"
17705:     {
17706: 					PGDropStmt *n = makeNode(PGDropStmt);
17707: 					n->removeType = (yyvsp[(2) - (6)].objtype);
17708: 					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
17709: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17710: 					n->missing_ok = false;
17711: 					n->concurrent = false;
17712: 					(yyval.node) = (PGNode *) n;
17713: 				;}
17714:     break;
17715: 
17716:   case 349:
17717: #line 60 "third_party/libpg_query/grammar/statements/drop.y"
17718:     {
17719: 					PGDropStmt *n = makeNode(PGDropStmt);
17720: 					n->removeType = (yyvsp[(2) - (8)].objtype);
17721: 					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
17722: 					n->behavior = (yyvsp[(8) - (8)].dbehavior);
17723: 					n->missing_ok = true;
17724: 					n->concurrent = false;
17725: 					(yyval.node) = (PGNode *) n;
17726: 				;}
17727:     break;
17728: 
17729:   case 350:
17730: #line 70 "third_party/libpg_query/grammar/statements/drop.y"
17731:     {
17732: 					PGDropStmt *n = makeNode(PGDropStmt);
17733: 					n->removeType = PG_OBJECT_TYPE;
17734: 					n->missing_ok = false;
17735: 					n->objects = (yyvsp[(3) - (4)].list);
17736: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
17737: 					n->concurrent = false;
17738: 					(yyval.node) = (PGNode *) n;
17739: 				;}
17740:     break;
17741: 
17742:   case 351:
17743: #line 80 "third_party/libpg_query/grammar/statements/drop.y"
17744:     {
17745: 					PGDropStmt *n = makeNode(PGDropStmt);
17746: 					n->removeType = PG_OBJECT_TYPE;
17747: 					n->missing_ok = true;
17748: 					n->objects = (yyvsp[(5) - (6)].list);
17749: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
17750: 					n->concurrent = false;
17751: 					(yyval.node) = (PGNode *) n;
17752: 				;}
17753:     break;
17754: 
17755:   case 352:
17756: #line 93 "third_party/libpg_query/grammar/statements/drop.y"
17757:     { (yyval.objtype) = PG_OBJECT_TABLE; ;}
17758:     break;
17759: 
17760:   case 353:
17761: #line 94 "third_party/libpg_query/grammar/statements/drop.y"
17762:     { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
17763:     break;
17764: 
17765:   case 354:
17766: #line 95 "third_party/libpg_query/grammar/statements/drop.y"
17767:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
17768:     break;
17769: 
17770:   case 355:
17771: #line 96 "third_party/libpg_query/grammar/statements/drop.y"
17772:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
17773:     break;
17774: 
17775:   case 356:
17776: #line 97 "third_party/libpg_query/grammar/statements/drop.y"
17777:     { (yyval.objtype) = PG_OBJECT_VIEW; ;}
17778:     break;
17779: 
17780:   case 357:
17781: #line 98 "third_party/libpg_query/grammar/statements/drop.y"
17782:     { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
17783:     break;
17784: 
17785:   case 358:
17786: #line 99 "third_party/libpg_query/grammar/statements/drop.y"
17787:     { (yyval.objtype) = PG_OBJECT_INDEX; ;}
17788:     break;
17789: 
17790:   case 359:
17791: #line 100 "third_party/libpg_query/grammar/statements/drop.y"
17792:     { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
17793:     break;
17794: 
17795:   case 360:
17796: #line 101 "third_party/libpg_query/grammar/statements/drop.y"
17797:     { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
17798:     break;
17799: 
17800:   case 361:
17801: #line 102 "third_party/libpg_query/grammar/statements/drop.y"
17802:     { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
17803:     break;
17804: 
17805:   case 362:
17806: #line 103 "third_party/libpg_query/grammar/statements/drop.y"
17807:     { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
17808:     break;
17809: 
17810:   case 363:
17811: #line 104 "third_party/libpg_query/grammar/statements/drop.y"
17812:     { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
17813:     break;
17814: 
17815:   case 364:
17816: #line 105 "third_party/libpg_query/grammar/statements/drop.y"
17817:     { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
17818:     break;
17819: 
17820:   case 365:
17821: #line 106 "third_party/libpg_query/grammar/statements/drop.y"
17822:     { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
17823:     break;
17824: 
17825:   case 366:
17826: #line 107 "third_party/libpg_query/grammar/statements/drop.y"
17827:     { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
17828:     break;
17829: 
17830:   case 367:
17831: #line 112 "third_party/libpg_query/grammar/statements/drop.y"
17832:     { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
17833:     break;
17834: 
17835:   case 368:
17836: #line 113 "third_party/libpg_query/grammar/statements/drop.y"
17837:     { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
17838:     break;
17839: 
17840:   case 369:
17841: #line 114 "third_party/libpg_query/grammar/statements/drop.y"
17842:     { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
17843:     break;
17844: 
17845:   case 370:
17846: #line 115 "third_party/libpg_query/grammar/statements/drop.y"
17847:     { (yyval.objtype) = PG_OBJECT_FDW; ;}
17848:     break;
17849: 
17850:   case 371:
17851: #line 116 "third_party/libpg_query/grammar/statements/drop.y"
17852:     { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
17853:     break;
17854: 
17855:   case 372:
17856: #line 117 "third_party/libpg_query/grammar/statements/drop.y"
17857:     { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
17858:     break;
17859: 
17860:   case 373:
17861: #line 118 "third_party/libpg_query/grammar/statements/drop.y"
17862:     { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
17863:     break;
17864: 
17865:   case 374:
17866: #line 123 "third_party/libpg_query/grammar/statements/drop.y"
17867:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
17868:     break;
17869: 
17870:   case 375:
17871: #line 124 "third_party/libpg_query/grammar/statements/drop.y"
17872:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
17873:     break;
17874: 
17875:   case 376:
17876: #line 129 "third_party/libpg_query/grammar/statements/drop.y"
17877:     { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
17878:     break;
17879: 
17880:   case 377:
17881: #line 130 "third_party/libpg_query/grammar/statements/drop.y"
17882:     { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
17883:     break;
17884: 
17885:   case 378:
17886: #line 131 "third_party/libpg_query/grammar/statements/drop.y"
17887:     { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
17888:     break;
17889: 
17890:   case 379:
17891: #line 136 "third_party/libpg_query/grammar/statements/drop.y"
17892:     { (yyval.objtype) = PG_OBJECT_POLICY; ;}
17893:     break;
17894: 
17895:   case 380:
17896: #line 137 "third_party/libpg_query/grammar/statements/drop.y"
17897:     { (yyval.objtype) = PG_OBJECT_RULE; ;}
17898:     break;
17899: 
17900:   case 381:
17901: #line 138 "third_party/libpg_query/grammar/statements/drop.y"
17902:     { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
17903:     break;
17904: 
17905:   case 382:
17906: #line 141 "third_party/libpg_query/grammar/statements/drop.y"
17907:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
17908:     break;
17909: 
17910:   case 383:
17911: #line 142 "third_party/libpg_query/grammar/statements/drop.y"
17912:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
17913:     break;
17914: 
17915:   case 384:
17916: #line 8 "third_party/libpg_query/grammar/statements/create_function.y"
17917:     {
17918: 					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
17919: 					n->name = (yyvsp[(3) - (6)].range);
17920: 					n->params = (yyvsp[(4) - (6)].list);
17921: 					n->function = (yyvsp[(6) - (6)].node);
17922: 					(yyval.node) = (PGNode *)n;
17923: 				;}
17924:     break;
17925: 
17926:   case 387:
17927: #line 24 "third_party/libpg_query/grammar/statements/create_function.y"
17928:     {
17929: 				(yyval.list) = NIL;
17930: 			;}
17931:     break;
17932: 
17933:   case 388:
17934: #line 28 "third_party/libpg_query/grammar/statements/create_function.y"
17935:     {
17936: 				(yyval.list) = (yyvsp[(2) - (3)].list);
17937: 			;}
17938:     break;
17939: 
17940:   case 389:
17941: #line 12 "third_party/libpg_query/grammar/statements/update.y"
17942:     {
17943: 					PGUpdateStmt *n = makeNode(PGUpdateStmt);
17944: 					n->relation = (yyvsp[(3) - (8)].range);
17945: 					n->targetList = (yyvsp[(5) - (8)].list);
17946: 					n->fromClause = (yyvsp[(6) - (8)].list);
17947: 					n->whereClause = (yyvsp[(7) - (8)].node);
17948: 					n->returningList = (yyvsp[(8) - (8)].list);
17949: 					n->withClause = (yyvsp[(1) - (8)].with);
17950: 					(yyval.node) = (PGNode *)n;
17951: 				;}
17952:     break;
17953: 
17954:   case 390:
17955: #line 3 "third_party/libpg_query/grammar/statements/copy.y"
17956:     {
17957: 					PGCopyStmt *n = makeNode(PGCopyStmt);
17958: 					n->relation = (yyvsp[(3) - (11)].range);
17959: 					n->query = NULL;
17960: 					n->attlist = (yyvsp[(4) - (11)].list);
17961: 					n->is_from = (yyvsp[(6) - (11)].boolean);
17962: 					n->is_program = (yyvsp[(7) - (11)].boolean);
17963: 					n->filename = (yyvsp[(8) - (11)].str);
17964: 
17965: 					if (n->is_program && n->filename == NULL)
17966: 						ereport(ERROR,
17967: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17968: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
17969: 								 parser_errposition((yylsp[(8) - (11)]))));
17970: 
17971: 					n->options = NIL;
17972: 					/* Concatenate user-supplied flags */
17973: 					if ((yyvsp[(2) - (11)].defelt))
17974: 						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
17975: 					if ((yyvsp[(5) - (11)].defelt))
17976: 						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
17977: 					if ((yyvsp[(9) - (11)].defelt))
17978: 						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
17979: 					if ((yyvsp[(11) - (11)].list))
17980: 						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
17981: 					(yyval.node) = (PGNode *)n;
17982: 				;}
17983:     break;
17984: 
17985:   case 391:
17986: #line 31 "third_party/libpg_query/grammar/statements/copy.y"
17987:     {
17988: 					PGCopyStmt *n = makeNode(PGCopyStmt);
17989: 					n->relation = NULL;
17990: 					n->query = (yyvsp[(3) - (9)].node);
17991: 					n->attlist = NIL;
17992: 					n->is_from = false;
17993: 					n->is_program = (yyvsp[(6) - (9)].boolean);
17994: 					n->filename = (yyvsp[(7) - (9)].str);
17995: 					n->options = (yyvsp[(9) - (9)].list);
17996: 
17997: 					if (n->is_program && n->filename == NULL)
17998: 						ereport(ERROR,
17999: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
18000: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
18001: 								 parser_errposition((yylsp[(5) - (9)]))));
18002: 
18003: 					(yyval.node) = (PGNode *)n;
18004: 				;}
18005:     break;
18006: 
18007:   case 392:
18008: #line 53 "third_party/libpg_query/grammar/statements/copy.y"
18009:     { (yyval.boolean) = true; ;}
18010:     break;
18011: 
18012:   case 393:
18013: #line 54 "third_party/libpg_query/grammar/statements/copy.y"
18014:     { (yyval.boolean) = false; ;}
18015:     break;
18016: 
18017:   case 394:
18018: #line 60 "third_party/libpg_query/grammar/statements/copy.y"
18019:     {
18020: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
18021: 				;}
18022:     break;
18023: 
18024:   case 395:
18025: #line 63 "third_party/libpg_query/grammar/statements/copy.y"
18026:     { (yyval.defelt) = NULL; ;}
18027:     break;
18028: 
18029:   case 396:
18030: #line 69 "third_party/libpg_query/grammar/statements/copy.y"
18031:     {
18032: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
18033: 				;}
18034:     break;
18035: 
18036:   case 397:
18037: #line 73 "third_party/libpg_query/grammar/statements/copy.y"
18038:     {
18039: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
18040: 				;}
18041:     break;
18042: 
18043:   case 398:
18044: #line 80 "third_party/libpg_query/grammar/statements/copy.y"
18045:     {;}
18046:     break;
18047: 
18048:   case 399:
18049: #line 81 "third_party/libpg_query/grammar/statements/copy.y"
18050:     {;}
18051:     break;
18052: 
18053:   case 400:
18054: #line 85 "third_party/libpg_query/grammar/statements/copy.y"
18055:     {;}
18056:     break;
18057: 
18058:   case 401:
18059: #line 86 "third_party/libpg_query/grammar/statements/copy.y"
18060:     {;}
18061:     break;
18062: 
18063:   case 402:
18064: #line 91 "third_party/libpg_query/grammar/statements/copy.y"
18065:     { (yyval.boolean) = true; ;}
18066:     break;
18067: 
18068:   case 403:
18069: #line 92 "third_party/libpg_query/grammar/statements/copy.y"
18070:     { (yyval.boolean) = false; ;}
18071:     break;
18072: 
18073:   case 404:
18074: #line 96 "third_party/libpg_query/grammar/statements/copy.y"
18075:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18076:     break;
18077: 
18078:   case 405:
18079: #line 97 "third_party/libpg_query/grammar/statements/copy.y"
18080:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
18081:     break;
18082: 
18083:   case 406:
18084: #line 102 "third_party/libpg_query/grammar/statements/copy.y"
18085:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18086:     break;
18087: 
18088:   case 407:
18089: #line 103 "third_party/libpg_query/grammar/statements/copy.y"
18090:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
18091:     break;
18092: 
18093:   case 408:
18094: #line 104 "third_party/libpg_query/grammar/statements/copy.y"
18095:     { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
18096:     break;
18097: 
18098:   case 409:
18099: #line 105 "third_party/libpg_query/grammar/statements/copy.y"
18100:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
18101:     break;
18102: 
18103:   case 410:
18104: #line 106 "third_party/libpg_query/grammar/statements/copy.y"
18105:     { (yyval.node) = NULL; ;}
18106:     break;
18107: 
18108:   case 411:
18109: #line 112 "third_party/libpg_query/grammar/statements/copy.y"
18110:     {
18111: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
18112: 				;}
18113:     break;
18114: 
18115:   case 412:
18116: #line 120 "third_party/libpg_query/grammar/statements/copy.y"
18117:     {
18118: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
18119: 				;}
18120:     break;
18121: 
18122:   case 413:
18123: #line 123 "third_party/libpg_query/grammar/statements/copy.y"
18124:     { (yyval.defelt) = NULL; ;}
18125:     break;
18126: 
18127:   case 414:
18128: #line 128 "third_party/libpg_query/grammar/statements/copy.y"
18129:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
18130:     break;
18131: 
18132:   case 415:
18133: #line 129 "third_party/libpg_query/grammar/statements/copy.y"
18134:     { (yyval.list) = NIL; ;}
18135:     break;
18136: 
18137:   case 416:
18138: #line 135 "third_party/libpg_query/grammar/statements/copy.y"
18139:     {
18140: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18141: 				;}
18142:     break;
18143: 
18144:   case 417:
18145: #line 138 "third_party/libpg_query/grammar/statements/copy.y"
18146:     { (yyval.defelt) = NULL; ;}
18147:     break;
18148: 
18149:   case 418:
18150: #line 144 "third_party/libpg_query/grammar/statements/copy.y"
18151:     {
18152: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18153: 				;}
18154:     break;
18155: 
18156:   case 419:
18157: #line 148 "third_party/libpg_query/grammar/statements/copy.y"
18158:     {
18159: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18160: 				;}
18161:     break;
18162: 
18163:   case 420:
18164: #line 152 "third_party/libpg_query/grammar/statements/copy.y"
18165:     {
18166: 					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18167: 				;}
18168:     break;
18169: 
18170:   case 421:
18171: #line 156 "third_party/libpg_query/grammar/statements/copy.y"
18172:     {
18173: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18174: 				;}
18175:     break;
18176: 
18177:   case 422:
18178: #line 160 "third_party/libpg_query/grammar/statements/copy.y"
18179:     {
18180: 					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18181: 				;}
18182:     break;
18183: 
18184:   case 423:
18185: #line 164 "third_party/libpg_query/grammar/statements/copy.y"
18186:     {
18187: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
18188: 				;}
18189:     break;
18190: 
18191:   case 424:
18192: #line 168 "third_party/libpg_query/grammar/statements/copy.y"
18193:     {
18194: 					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18195: 				;}
18196:     break;
18197: 
18198:   case 425:
18199: #line 172 "third_party/libpg_query/grammar/statements/copy.y"
18200:     {
18201: 					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18202: 				;}
18203:     break;
18204: 
18205:   case 426:
18206: #line 176 "third_party/libpg_query/grammar/statements/copy.y"
18207:     {
18208: 					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18209: 				;}
18210:     break;
18211: 
18212:   case 427:
18213: #line 180 "third_party/libpg_query/grammar/statements/copy.y"
18214:     {
18215: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18216: 				;}
18217:     break;
18218: 
18219:   case 428:
18220: #line 184 "third_party/libpg_query/grammar/statements/copy.y"
18221:     {
18222: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
18223: 				;}
18224:     break;
18225: 
18226:   case 429:
18227: #line 188 "third_party/libpg_query/grammar/statements/copy.y"
18228:     {
18229: 					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
18230: 				;}
18231:     break;
18232: 
18233:   case 430:
18234: #line 192 "third_party/libpg_query/grammar/statements/copy.y"
18235:     {
18236: 					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18237: 				;}
18238:     break;
18239: 
18240:   case 431:
18241: #line 196 "third_party/libpg_query/grammar/statements/copy.y"
18242:     {
18243: 					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
18244: 				;}
18245:     break;
18246: 
18247:   case 432:
18248: #line 203 "third_party/libpg_query/grammar/statements/copy.y"
18249:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18250:     break;
18251: 
18252:   case 433:
18253: #line 209 "third_party/libpg_query/grammar/statements/copy.y"
18254:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18255:     break;
18256: 
18257:   case 434:
18258: #line 210 "third_party/libpg_query/grammar/statements/copy.y"
18259:     { (yyval.str) = NULL; ;}
18260:     break;
18261: 
18262:   case 435:
18263: #line 211 "third_party/libpg_query/grammar/statements/copy.y"
18264:     { (yyval.str) = NULL; ;}
18265:     break;
18266: 
18267:   case 436:
18268: #line 217 "third_party/libpg_query/grammar/statements/copy.y"
18269:     {
18270: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
18271: 				;}
18272:     break;
18273: 
18274:   case 437:
18275: #line 221 "third_party/libpg_query/grammar/statements/copy.y"
18276:     {
18277: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
18278: 				;}
18279:     break;
18280: 
18281:   case 440:
18282: #line 52 "third_party/libpg_query/grammar/statements/select.y"
18283:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
18284:     break;
18285: 
18286:   case 441:
18287: #line 53 "third_party/libpg_query/grammar/statements/select.y"
18288:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
18289:     break;
18290: 
18291:   case 442:
18292: #line 68 "third_party/libpg_query/grammar/statements/select.y"
18293:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18294:     break;
18295: 
18296:   case 443:
18297: #line 70 "third_party/libpg_query/grammar/statements/select.y"
18298:     {
18299: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
18300: 										NULL, NULL, NULL,
18301: 										yyscanner);
18302: 					(yyval.node) = (yyvsp[(1) - (2)].node);
18303: 				;}
18304:     break;
18305: 
18306:   case 444:
18307: #line 77 "third_party/libpg_query/grammar/statements/select.y"
18308:     {
18309: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
18310: 										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
18311: 										NULL,
18312: 										yyscanner);
18313: 					(yyval.node) = (yyvsp[(1) - (4)].node);
18314: 				;}
18315:     break;
18316: 
18317:   case 445:
18318: #line 85 "third_party/libpg_query/grammar/statements/select.y"
18319:     {
18320: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
18321: 										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
18322: 										NULL,
18323: 										yyscanner);
18324: 					(yyval.node) = (yyvsp[(1) - (4)].node);
18325: 				;}
18326:     break;
18327: 
18328:   case 446:
18329: #line 93 "third_party/libpg_query/grammar/statements/select.y"
18330:     {
18331: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
18332: 										NULL, NULL,
18333: 										(yyvsp[(1) - (2)].with),
18334: 										yyscanner);
18335: 					(yyval.node) = (yyvsp[(2) - (2)].node);
18336: 				;}
18337:     break;
18338: 
18339:   case 447:
18340: #line 101 "third_party/libpg_query/grammar/statements/select.y"
18341:     {
18342: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
18343: 										NULL, NULL,
18344: 										(yyvsp[(1) - (3)].with),
18345: 										yyscanner);
18346: 					(yyval.node) = (yyvsp[(2) - (3)].node);
18347: 				;}
18348:     break;
18349: 
18350:   case 448:
18351: #line 109 "third_party/libpg_query/grammar/statements/select.y"
18352:     {
18353: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
18354: 										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
18355: 										(yyvsp[(1) - (5)].with),
18356: 										yyscanner);
18357: 					(yyval.node) = (yyvsp[(2) - (5)].node);
18358: 				;}
18359:     break;
18360: 
18361:   case 449:
18362: #line 117 "third_party/libpg_query/grammar/statements/select.y"
18363:     {
18364: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
18365: 										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
18366: 										(yyvsp[(1) - (5)].with),
18367: 										yyscanner);
18368: 					(yyval.node) = (yyvsp[(2) - (5)].node);
18369: 				;}
18370:     break;
18371: 
18372:   case 450:
18373: #line 127 "third_party/libpg_query/grammar/statements/select.y"
18374:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18375:     break;
18376: 
18377:   case 451:
18378: #line 128 "third_party/libpg_query/grammar/statements/select.y"
18379:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18380:     break;
18381: 
18382:   case 452:
18383: #line 158 "third_party/libpg_query/grammar/statements/select.y"
18384:     {
18385: 					PGSelectStmt *n = makeNode(PGSelectStmt);
18386: 					n->targetList = (yyvsp[(3) - (10)].list);
18387: 					n->intoClause = (yyvsp[(4) - (10)].into);
18388: 					n->fromClause = (yyvsp[(5) - (10)].list);
18389: 					n->whereClause = (yyvsp[(6) - (10)].node);
18390: 					n->groupClause = (yyvsp[(7) - (10)].list);
18391: 					n->havingClause = (yyvsp[(8) - (10)].node);
18392: 					n->windowClause = (yyvsp[(9) - (10)].list);
18393: 					n->sampleOptions = (yyvsp[(10) - (10)].node);
18394: 					(yyval.node) = (PGNode *)n;
18395: 				;}
18396:     break;
18397: 
18398:   case 453:
18399: #line 173 "third_party/libpg_query/grammar/statements/select.y"
18400:     {
18401: 					PGSelectStmt *n = makeNode(PGSelectStmt);
18402: 					n->distinctClause = (yyvsp[(2) - (10)].list);
18403: 					n->targetList = (yyvsp[(3) - (10)].list);
18404: 					n->intoClause = (yyvsp[(4) - (10)].into);
18405: 					n->fromClause = (yyvsp[(5) - (10)].list);
18406: 					n->whereClause = (yyvsp[(6) - (10)].node);
18407: 					n->groupClause = (yyvsp[(7) - (10)].list);
18408: 					n->havingClause = (yyvsp[(8) - (10)].node);
18409: 					n->windowClause = (yyvsp[(9) - (10)].list);
18410: 					n->sampleOptions = (yyvsp[(10) - (10)].node);
18411: 					(yyval.node) = (PGNode *)n;
18412: 				;}
18413:     break;
18414: 
18415:   case 454:
18416: #line 186 "third_party/libpg_query/grammar/statements/select.y"
18417:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18418:     break;
18419: 
18420:   case 455:
18421: #line 188 "third_party/libpg_query/grammar/statements/select.y"
18422:     {
18423: 					/* same as SELECT * FROM relation_expr */
18424: 					PGColumnRef *cr = makeNode(PGColumnRef);
18425: 					PGResTarget *rt = makeNode(PGResTarget);
18426: 					PGSelectStmt *n = makeNode(PGSelectStmt);
18427: 
18428: 					cr->fields = list_make1(makeNode(PGAStar));
18429: 					cr->location = -1;
18430: 
18431: 					rt->name = NULL;
18432: 					rt->indirection = NIL;
18433: 					rt->val = (PGNode *)cr;
18434: 					rt->location = -1;
18435: 
18436: 					n->targetList = list_make1(rt);
18437: 					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
18438: 					(yyval.node) = (PGNode *)n;
18439: 				;}
18440:     break;
18441: 
18442:   case 456:
18443: #line 207 "third_party/libpg_query/grammar/statements/select.y"
18444:     {
18445: 					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18446: 				;}
18447:     break;
18448: 
18449:   case 457:
18450: #line 211 "third_party/libpg_query/grammar/statements/select.y"
18451:     {
18452: 					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18453: 				;}
18454:     break;
18455: 
18456:   case 458:
18457: #line 215 "third_party/libpg_query/grammar/statements/select.y"
18458:     {
18459: 					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
18460: 				;}
18461:     break;
18462: 
18463:   case 459:
18464: #line 232 "third_party/libpg_query/grammar/statements/select.y"
18465:     {
18466: 				(yyval.with) = makeNode(PGWithClause);
18467: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
18468: 				(yyval.with)->recursive = false;
18469: 				(yyval.with)->location = (yylsp[(1) - (2)]);
18470: 			;}
18471:     break;
18472: 
18473:   case 460:
18474: #line 239 "third_party/libpg_query/grammar/statements/select.y"
18475:     {
18476: 				(yyval.with) = makeNode(PGWithClause);
18477: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
18478: 				(yyval.with)->recursive = false;
18479: 				(yyval.with)->location = (yylsp[(1) - (2)]);
18480: 			;}
18481:     break;
18482: 
18483:   case 461:
18484: #line 246 "third_party/libpg_query/grammar/statements/select.y"
18485:     {
18486: 				(yyval.with) = makeNode(PGWithClause);
18487: 				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
18488: 				(yyval.with)->recursive = true;
18489: 				(yyval.with)->location = (yylsp[(1) - (3)]);
18490: 			;}
18491:     break;
18492: 
18493:   case 462:
18494: #line 255 "third_party/libpg_query/grammar/statements/select.y"
18495:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18496:     break;
18497: 
18498:   case 463:
18499: #line 256 "third_party/libpg_query/grammar/statements/select.y"
18500:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
18501:     break;
18502: 
18503:   case 464:
18504: #line 260 "third_party/libpg_query/grammar/statements/select.y"
18505:     {
18506: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
18507: 				n->ctename = (yyvsp[(1) - (6)].str);
18508: 				n->aliascolnames = (yyvsp[(2) - (6)].list);
18509: 				n->ctequery = (yyvsp[(5) - (6)].node);
18510: 				n->location = (yylsp[(1) - (6)]);
18511: 				(yyval.node) = (PGNode *) n;
18512: 			;}
18513:     break;
18514: 
18515:   case 465:
18516: #line 272 "third_party/libpg_query/grammar/statements/select.y"
18517:     {
18518: 					(yyval.into) = makeNode(PGIntoClause);
18519: 					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
18520: 					(yyval.into)->colNames = NIL;
18521: 					(yyval.into)->options = NIL;
18522: 					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
18523: 					(yyval.into)->viewQuery = NULL;
18524: 					(yyval.into)->skipData = false;
18525: 				;}
18526:     break;
18527: 
18528:   case 466:
18529: #line 282 "third_party/libpg_query/grammar/statements/select.y"
18530:     { (yyval.into) = NULL; ;}
18531:     break;
18532: 
18533:   case 467:
18534: #line 291 "third_party/libpg_query/grammar/statements/select.y"
18535:     {
18536: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18537: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18538: 				;}
18539:     break;
18540: 
18541:   case 468:
18542: #line 296 "third_party/libpg_query/grammar/statements/select.y"
18543:     {
18544: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18545: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18546: 				;}
18547:     break;
18548: 
18549:   case 469:
18550: #line 301 "third_party/libpg_query/grammar/statements/select.y"
18551:     {
18552: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18553: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18554: 				;}
18555:     break;
18556: 
18557:   case 470:
18558: #line 306 "third_party/libpg_query/grammar/statements/select.y"
18559:     {
18560: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18561: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18562: 				;}
18563:     break;
18564: 
18565:   case 471:
18566: #line 311 "third_party/libpg_query/grammar/statements/select.y"
18567:     {
18568: 					ereport(PGWARNING,
18569: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18570: 							 parser_errposition((yylsp[(1) - (4)]))));
18571: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18572: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18573: 				;}
18574:     break;
18575: 
18576:   case 472:
18577: #line 319 "third_party/libpg_query/grammar/statements/select.y"
18578:     {
18579: 					ereport(PGWARNING,
18580: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18581: 							 parser_errposition((yylsp[(1) - (4)]))));
18582: 					(yyval.range) = (yyvsp[(4) - (4)].range);
18583: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
18584: 				;}
18585:     break;
18586: 
18587:   case 473:
18588: #line 327 "third_party/libpg_query/grammar/statements/select.y"
18589:     {
18590: 					(yyval.range) = (yyvsp[(3) - (3)].range);
18591: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
18592: 				;}
18593:     break;
18594: 
18595:   case 474:
18596: #line 332 "third_party/libpg_query/grammar/statements/select.y"
18597:     {
18598: 					(yyval.range) = (yyvsp[(2) - (2)].range);
18599: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
18600: 				;}
18601:     break;
18602: 
18603:   case 475:
18604: #line 337 "third_party/libpg_query/grammar/statements/select.y"
18605:     {
18606: 					(yyval.range) = (yyvsp[(1) - (1)].range);
18607: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
18608: 				;}
18609:     break;
18610: 
18611:   case 476:
18612: #line 343 "third_party/libpg_query/grammar/statements/select.y"
18613:     {;}
18614:     break;
18615: 
18616:   case 477:
18617: #line 344 "third_party/libpg_query/grammar/statements/select.y"
18618:     {;}
18619:     break;
18620: 
18621:   case 478:
18622: #line 348 "third_party/libpg_query/grammar/statements/select.y"
18623:     { (yyval.boolean) = true; ;}
18624:     break;
18625: 
18626:   case 479:
18627: #line 349 "third_party/libpg_query/grammar/statements/select.y"
18628:     { (yyval.boolean) = false; ;}
18629:     break;
18630: 
18631:   case 480:
18632: #line 350 "third_party/libpg_query/grammar/statements/select.y"
18633:     { (yyval.boolean) = false; ;}
18634:     break;
18635: 
18636:   case 481:
18637: #line 357 "third_party/libpg_query/grammar/statements/select.y"
18638:     { (yyval.list) = list_make1(NIL); ;}
18639:     break;
18640: 
18641:   case 482:
18642: #line 358 "third_party/libpg_query/grammar/statements/select.y"
18643:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
18644:     break;
18645: 
18646:   case 483:
18647: #line 362 "third_party/libpg_query/grammar/statements/select.y"
18648:     { (yyval.list) = NIL;;}
18649:     break;
18650: 
18651:   case 484:
18652: #line 363 "third_party/libpg_query/grammar/statements/select.y"
18653:     { (yyval.list) = NIL; ;}
18654:     break;
18655: 
18656:   case 485:
18657: #line 367 "third_party/libpg_query/grammar/statements/select.y"
18658:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
18659:     break;
18660: 
18661:   case 486:
18662: #line 368 "third_party/libpg_query/grammar/statements/select.y"
18663:     { (yyval.list) = NIL; ;}
18664:     break;
18665: 
18666:   case 487:
18667: #line 372 "third_party/libpg_query/grammar/statements/select.y"
18668:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
18669:     break;
18670: 
18671:   case 488:
18672: #line 376 "third_party/libpg_query/grammar/statements/select.y"
18673:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
18674:     break;
18675: 
18676:   case 489:
18677: #line 377 "third_party/libpg_query/grammar/statements/select.y"
18678:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
18679:     break;
18680: 
18681:   case 490:
18682: #line 381 "third_party/libpg_query/grammar/statements/select.y"
18683:     {
18684: 					(yyval.sortby) = makeNode(PGSortBy);
18685: 					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
18686: 					(yyval.sortby)->sortby_dir = SORTBY_USING;
18687: 					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
18688: 					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
18689: 					(yyval.sortby)->location = (yylsp[(3) - (4)]);
18690: 				;}
18691:     break;
18692: 
18693:   case 491:
18694: #line 390 "third_party/libpg_query/grammar/statements/select.y"
18695:     {
18696: 					(yyval.sortby) = makeNode(PGSortBy);
18697: 					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
18698: 					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
18699: 					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
18700: 					(yyval.sortby)->useOp = NIL;
18701: 					(yyval.sortby)->location = -1;		/* no operator */
18702: 				;}
18703:     break;
18704: 
18705:   case 492:
18706: #line 400 "third_party/libpg_query/grammar/statements/select.y"
18707:     { (yyval.sortorder) = PG_SORTBY_ASC; ;}
18708:     break;
18709: 
18710:   case 493:
18711: #line 401 "third_party/libpg_query/grammar/statements/select.y"
18712:     { (yyval.sortorder) = PG_SORTBY_DESC; ;}
18713:     break;
18714: 
18715:   case 494:
18716: #line 402 "third_party/libpg_query/grammar/statements/select.y"
18717:     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
18718:     break;
18719: 
18720:   case 495:
18721: #line 405 "third_party/libpg_query/grammar/statements/select.y"
18722:     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
18723:     break;
18724: 
18725:   case 496:
18726: #line 406 "third_party/libpg_query/grammar/statements/select.y"
18727:     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
18728:     break;
18729: 
18730:   case 497:
18731: #line 407 "third_party/libpg_query/grammar/statements/select.y"
18732:     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
18733:     break;
18734: 
18735:   case 498:
18736: #line 411 "third_party/libpg_query/grammar/statements/select.y"
18737:     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
18738:     break;
18739: 
18740:   case 499:
18741: #line 412 "third_party/libpg_query/grammar/statements/select.y"
18742:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
18743:     break;
18744: 
18745:   case 500:
18746: #line 413 "third_party/libpg_query/grammar/statements/select.y"
18747:     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
18748:     break;
18749: 
18750:   case 501:
18751: #line 414 "third_party/libpg_query/grammar/statements/select.y"
18752:     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
18753:     break;
18754: 
18755:   case 502:
18756: #line 418 "third_party/libpg_query/grammar/statements/select.y"
18757:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18758:     break;
18759: 
18760:   case 503:
18761: #line 419 "third_party/libpg_query/grammar/statements/select.y"
18762:     { (yyval.list) = list_make2(NULL,NULL); ;}
18763:     break;
18764: 
18765:   case 504:
18766: #line 424 "third_party/libpg_query/grammar/statements/select.y"
18767:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
18768:     break;
18769: 
18770:   case 505:
18771: #line 426 "third_party/libpg_query/grammar/statements/select.y"
18772:     {
18773: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
18774: 					ereport(ERROR,
18775: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
18776: 							 errmsg("LIMIT #,# syntax is not supported"),
18777: 							 errhint("Use separate LIMIT and OFFSET clauses."),
18778: 							 parser_errposition((yylsp[(1) - (4)]))));
18779: 				;}
18780:     break;
18781: 
18782:   case 506:
18783: #line 442 "third_party/libpg_query/grammar/statements/select.y"
18784:     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
18785:     break;
18786: 
18787:   case 507:
18788: #line 444 "third_party/libpg_query/grammar/statements/select.y"
18789:     { (yyval.node) = makeIntConst(1, -1); ;}
18790:     break;
18791: 
18792:   case 508:
18793: #line 449 "third_party/libpg_query/grammar/statements/select.y"
18794:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
18795:     break;
18796: 
18797:   case 509:
18798: #line 452 "third_party/libpg_query/grammar/statements/select.y"
18799:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
18800:     break;
18801: 
18802:   case 510:
18803: #line 460 "third_party/libpg_query/grammar/statements/select.y"
18804:     {
18805: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
18806: 		;}
18807:     break;
18808: 
18809:   case 511:
18810: #line 464 "third_party/libpg_query/grammar/statements/select.y"
18811:     {
18812: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
18813: 		;}
18814:     break;
18815: 
18816:   case 512:
18817: #line 468 "third_party/libpg_query/grammar/statements/select.y"
18818:     {
18819: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
18820: 		;}
18821:     break;
18822: 
18823:   case 513:
18824: #line 472 "third_party/libpg_query/grammar/statements/select.y"
18825:     {
18826: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
18827: 		;}
18828:     break;
18829: 
18830:   case 514:
18831: #line 476 "third_party/libpg_query/grammar/statements/select.y"
18832:     {
18833: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
18834: 		;}
18835:     break;
18836: 
18837:   case 515:
18838: #line 480 "third_party/libpg_query/grammar/statements/select.y"
18839:     {
18840: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
18841: 		;}
18842:     break;
18843: 
18844:   case 516:
18845: #line 487 "third_party/libpg_query/grammar/statements/select.y"
18846:     {
18847: 					(yyval.node) = (yyvsp[(3) - (3)].node);
18848: 				;}
18849:     break;
18850: 
18851:   case 517:
18852: #line 491 "third_party/libpg_query/grammar/statements/select.y"
18853:     { (yyval.node) = NULL; ;}
18854:     break;
18855: 
18856:   case 518:
18857: #line 498 "third_party/libpg_query/grammar/statements/select.y"
18858:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18859:     break;
18860: 
18861:   case 519:
18862: #line 499 "third_party/libpg_query/grammar/statements/select.y"
18863:     { (yyval.str) = NULL; ;}
18864:     break;
18865: 
18866:   case 520:
18867: #line 504 "third_party/libpg_query/grammar/statements/select.y"
18868:     {
18869: 					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), (yyvsp[(5) - (5)].ival), (yylsp[(1) - (5)]));
18870: 				;}
18871:     break;
18872: 
18873:   case 521:
18874: #line 508 "third_party/libpg_query/grammar/statements/select.y"
18875:     {
18876: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, -1, (yylsp[(1) - (1)]));
18877: 		;}
18878:     break;
18879: 
18880:   case 522:
18881: #line 512 "third_party/libpg_query/grammar/statements/select.y"
18882:     {
18883: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), -1, (yylsp[(1) - (4)]));
18884: 		;}
18885:     break;
18886: 
18887:   case 523:
18888: #line 516 "third_party/libpg_query/grammar/statements/select.y"
18889:     {
18890: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), (yyvsp[(5) - (6)].ival), (yylsp[(1) - (6)]));
18891: 		;}
18892:     break;
18893: 
18894:   case 524:
18895: #line 523 "third_party/libpg_query/grammar/statements/select.y"
18896:     {
18897: 					(yyval.node) = (yyvsp[(2) - (2)].node);
18898: 				;}
18899:     break;
18900: 
18901:   case 525:
18902: #line 529 "third_party/libpg_query/grammar/statements/select.y"
18903:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18904:     break;
18905: 
18906:   case 526:
18907: #line 530 "third_party/libpg_query/grammar/statements/select.y"
18908:     { (yyval.node) = NULL; ;}
18909:     break;
18910: 
18911:   case 527:
18912: #line 535 "third_party/libpg_query/grammar/statements/select.y"
18913:     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
18914:     break;
18915: 
18916:   case 528:
18917: #line 536 "third_party/libpg_query/grammar/statements/select.y"
18918:     { (yyval.ival) = -1; ;}
18919:     break;
18920: 
18921:   case 529:
18922: #line 540 "third_party/libpg_query/grammar/statements/select.y"
18923:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18924:     break;
18925: 
18926:   case 530:
18927: #line 542 "third_party/libpg_query/grammar/statements/select.y"
18928:     {
18929: 					/* LIMIT ALL is represented as a NULL constant */
18930: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
18931: 				;}
18932:     break;
18933: 
18934:   case 531:
18935: #line 549 "third_party/libpg_query/grammar/statements/select.y"
18936:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18937:     break;
18938: 
18939:   case 532:
18940: #line 569 "third_party/libpg_query/grammar/statements/select.y"
18941:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18942:     break;
18943: 
18944:   case 533:
18945: #line 571 "third_party/libpg_query/grammar/statements/select.y"
18946:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
18947:     break;
18948: 
18949:   case 534:
18950: #line 573 "third_party/libpg_query/grammar/statements/select.y"
18951:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
18952:     break;
18953: 
18954:   case 535:
18955: #line 577 "third_party/libpg_query/grammar/statements/select.y"
18956:     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
18957:     break;
18958: 
18959:   case 536:
18960: #line 578 "third_party/libpg_query/grammar/statements/select.y"
18961:     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
18962:     break;
18963: 
18964:   case 537:
18965: #line 582 "third_party/libpg_query/grammar/statements/select.y"
18966:     { (yyval.ival) = 0; ;}
18967:     break;
18968: 
18969:   case 538:
18970: #line 583 "third_party/libpg_query/grammar/statements/select.y"
18971:     { (yyval.ival) = 0; ;}
18972:     break;
18973: 
18974:   case 539:
18975: #line 586 "third_party/libpg_query/grammar/statements/select.y"
18976:     { (yyval.ival) = 0; ;}
18977:     break;
18978: 
18979:   case 540:
18980: #line 587 "third_party/libpg_query/grammar/statements/select.y"
18981:     { (yyval.ival) = 0; ;}
18982:     break;
18983: 
18984:   case 541:
18985: #line 612 "third_party/libpg_query/grammar/statements/select.y"
18986:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
18987:     break;
18988: 
18989:   case 542:
18990: #line 613 "third_party/libpg_query/grammar/statements/select.y"
18991:     { (yyval.list) = NIL; ;}
18992:     break;
18993: 
18994:   case 543:
18995: #line 617 "third_party/libpg_query/grammar/statements/select.y"
18996:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18997:     break;
18998: 
18999:   case 544:
19000: #line 618 "third_party/libpg_query/grammar/statements/select.y"
19001:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
19002:     break;
19003: 
19004:   case 545:
19005: #line 622 "third_party/libpg_query/grammar/statements/select.y"
19006:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19007:     break;
19008: 
19009:   case 546:
19010: #line 623 "third_party/libpg_query/grammar/statements/select.y"
19011:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19012:     break;
19013: 
19014:   case 547:
19015: #line 628 "third_party/libpg_query/grammar/statements/select.y"
19016:     {
19017: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
19018: 				;}
19019:     break;
19020: 
19021:   case 548:
19022: #line 640 "third_party/libpg_query/grammar/statements/select.y"
19023:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19024:     break;
19025: 
19026:   case 549:
19027: #line 641 "third_party/libpg_query/grammar/statements/select.y"
19028:     { (yyval.node) = NULL; ;}
19029:     break;
19030: 
19031:   case 550:
19032: #line 645 "third_party/libpg_query/grammar/statements/select.y"
19033:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19034:     break;
19035: 
19036:   case 551:
19037: #line 646 "third_party/libpg_query/grammar/statements/select.y"
19038:     { (yyval.list) = NIL; ;}
19039:     break;
19040: 
19041:   case 552:
19042: #line 650 "third_party/libpg_query/grammar/statements/select.y"
19043:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19044:     break;
19045: 
19046:   case 553:
19047: #line 651 "third_party/libpg_query/grammar/statements/select.y"
19048:     { (yyval.list) = NIL; ;}
19049:     break;
19050: 
19051:   case 554:
19052: #line 655 "third_party/libpg_query/grammar/statements/select.y"
19053:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19054:     break;
19055: 
19056:   case 555:
19057: #line 656 "third_party/libpg_query/grammar/statements/select.y"
19058:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
19059:     break;
19060: 
19061:   case 556:
19062: #line 661 "third_party/libpg_query/grammar/statements/select.y"
19063:     {
19064: 					PGLockingClause *n = makeNode(PGLockingClause);
19065: 					n->lockedRels = (yyvsp[(2) - (3)].list);
19066: 					n->strength = (yyvsp[(1) - (3)].lockstrength);
19067: 					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
19068: 					(yyval.node) = (PGNode *) n;
19069: 				;}
19070:     break;
19071: 
19072:   case 557:
19073: #line 671 "third_party/libpg_query/grammar/statements/select.y"
19074:     { (yyval.lockstrength) = LCS_FORUPDATE; ;}
19075:     break;
19076: 
19077:   case 558:
19078: #line 672 "third_party/libpg_query/grammar/statements/select.y"
19079:     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
19080:     break;
19081: 
19082:   case 559:
19083: #line 673 "third_party/libpg_query/grammar/statements/select.y"
19084:     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
19085:     break;
19086: 
19087:   case 560:
19088: #line 674 "third_party/libpg_query/grammar/statements/select.y"
19089:     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
19090:     break;
19091: 
19092:   case 561:
19093: #line 678 "third_party/libpg_query/grammar/statements/select.y"
19094:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
19095:     break;
19096: 
19097:   case 562:
19098: #line 679 "third_party/libpg_query/grammar/statements/select.y"
19099:     { (yyval.list) = NIL; ;}
19100:     break;
19101: 
19102:   case 563:
19103: #line 684 "third_party/libpg_query/grammar/statements/select.y"
19104:     { (yyval.lockwaitpolicy) = LockWaitError; ;}
19105:     break;
19106: 
19107:   case 564:
19108: #line 685 "third_party/libpg_query/grammar/statements/select.y"
19109:     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
19110:     break;
19111: 
19112:   case 565:
19113: #line 686 "third_party/libpg_query/grammar/statements/select.y"
19114:     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
19115:     break;
19116: 
19117:   case 566:
19118: #line 696 "third_party/libpg_query/grammar/statements/select.y"
19119:     {
19120: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19121: 					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
19122: 					(yyval.node) = (PGNode *) n;
19123: 				;}
19124:     break;
19125: 
19126:   case 567:
19127: #line 702 "third_party/libpg_query/grammar/statements/select.y"
19128:     {
19129: 					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
19130: 					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
19131: 					(yyval.node) = (PGNode *) n;
19132: 				;}
19133:     break;
19134: 
19135:   case 568:
19136: #line 719 "third_party/libpg_query/grammar/statements/select.y"
19137:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
19138:     break;
19139: 
19140:   case 569:
19141: #line 720 "third_party/libpg_query/grammar/statements/select.y"
19142:     { (yyval.list) = NIL; ;}
19143:     break;
19144: 
19145:   case 570:
19146: #line 724 "third_party/libpg_query/grammar/statements/select.y"
19147:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19148:     break;
19149: 
19150:   case 571:
19151: #line 725 "third_party/libpg_query/grammar/statements/select.y"
19152:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
19153:     break;
19154: 
19155:   case 572:
19156: #line 732 "third_party/libpg_query/grammar/statements/select.y"
19157:     {
19158: 					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
19159: 					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
19160: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
19161: 				;}
19162:     break;
19163: 
19164:   case 573:
19165: #line 738 "third_party/libpg_query/grammar/statements/select.y"
19166:     {
19167: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
19168: 					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
19169: 					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
19170: 					n->sample = (yyvsp[(3) - (3)].node);
19171: 					(yyval.node) = (PGNode *) n;
19172: 				;}
19173:     break;
19174: 
19175:   case 574:
19176: #line 746 "third_party/libpg_query/grammar/statements/select.y"
19177:     {
19178: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
19179: 					n->lateral = true;
19180: 					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
19181: 					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
19182: 					(yyval.node) = (PGNode *) n;
19183: 				;}
19184:     break;
19185: 
19186:   case 575:
19187: #line 754 "third_party/libpg_query/grammar/statements/select.y"
19188:     {
19189: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
19190: 					n->lateral = false;
19191: 					n->subquery = (yyvsp[(1) - (3)].node);
19192: 					n->alias = (yyvsp[(2) - (3)].alias);
19193: 					n->sample = (yyvsp[(3) - (3)].node);
19194: 					(yyval.node) = (PGNode *) n;
19195: 				;}
19196:     break;
19197: 
19198:   case 576:
19199: #line 763 "third_party/libpg_query/grammar/statements/select.y"
19200:     {
19201: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
19202: 					n->lateral = true;
19203: 					n->subquery = (yyvsp[(2) - (3)].node);
19204: 					n->alias = (yyvsp[(3) - (3)].alias);
19205: 					n->sample = NULL;
19206: 					(yyval.node) = (PGNode *) n;
19207: 				;}
19208:     break;
19209: 
19210:   case 577:
19211: #line 772 "third_party/libpg_query/grammar/statements/select.y"
19212:     {
19213: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
19214: 				;}
19215:     break;
19216: 
19217:   case 578:
19218: #line 776 "third_party/libpg_query/grammar/statements/select.y"
19219:     {
19220: 					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
19221: 					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
19222: 				;}
19223:     break;
19224: 
19225:   case 579:
19226: #line 802 "third_party/libpg_query/grammar/statements/select.y"
19227:     {
19228: 					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
19229: 				;}
19230:     break;
19231: 
19232:   case 580:
19233: #line 806 "third_party/libpg_query/grammar/statements/select.y"
19234:     {
19235: 					/* CROSS JOIN is same as unqualified inner join */
19236: 					PGJoinExpr *n = makeNode(PGJoinExpr);
19237: 					n->jointype = PG_JOIN_INNER;
19238: 					n->isNatural = false;
19239: 					n->larg = (yyvsp[(1) - (4)].node);
19240: 					n->rarg = (yyvsp[(4) - (4)].node);
19241: 					n->usingClause = NIL;
19242: 					n->quals = NULL;
19243: 					n->location = (yylsp[(2) - (4)]);
19244: 					(yyval.jexpr) = n;
19245: 				;}
19246:     break;
19247: 
19248:   case 581:
19249: #line 819 "third_party/libpg_query/grammar/statements/select.y"
19250:     {
19251: 					PGJoinExpr *n = makeNode(PGJoinExpr);
19252: 					n->jointype = (yyvsp[(2) - (5)].jtype);
19253: 					n->isNatural = false;
19254: 					n->larg = (yyvsp[(1) - (5)].node);
19255: 					n->rarg = (yyvsp[(4) - (5)].node);
19256: 					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
19257: 						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
19258: 					else
19259: 						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
19260: 					n->location = (yylsp[(2) - (5)]);
19261: 					(yyval.jexpr) = n;
19262: 				;}
19263:     break;
19264: 
19265:   case 582:
19266: #line 833 "third_party/libpg_query/grammar/statements/select.y"
19267:     {
19268: 					/* letting join_type reduce to empty doesn't work */
19269: 					PGJoinExpr *n = makeNode(PGJoinExpr);
19270: 					n->jointype = PG_JOIN_INNER;
19271: 					n->isNatural = false;
19272: 					n->larg = (yyvsp[(1) - (4)].node);
19273: 					n->rarg = (yyvsp[(3) - (4)].node);
19274: 					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
19275: 						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
19276: 					else
19277: 						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
19278: 					n->location = (yylsp[(2) - (4)]);
19279: 					(yyval.jexpr) = n;
19280: 				;}
19281:     break;
19282: 
19283:   case 583:
19284: #line 848 "third_party/libpg_query/grammar/statements/select.y"
19285:     {
19286: 					PGJoinExpr *n = makeNode(PGJoinExpr);
19287: 					n->jointype = (yyvsp[(3) - (5)].jtype);
19288: 					n->isNatural = true;
19289: 					n->larg = (yyvsp[(1) - (5)].node);
19290: 					n->rarg = (yyvsp[(5) - (5)].node);
19291: 					n->usingClause = NIL; /* figure out which columns later... */
19292: 					n->quals = NULL; /* fill later */
19293: 					n->location = (yylsp[(2) - (5)]);
19294: 					(yyval.jexpr) = n;
19295: 				;}
19296:     break;
19297: 
19298:   case 584:
19299: #line 860 "third_party/libpg_query/grammar/statements/select.y"
19300:     {
19301: 					/* letting join_type reduce to empty doesn't work */
19302: 					PGJoinExpr *n = makeNode(PGJoinExpr);
19303: 					n->jointype = PG_JOIN_INNER;
19304: 					n->isNatural = true;
19305: 					n->larg = (yyvsp[(1) - (4)].node);
19306: 					n->rarg = (yyvsp[(4) - (4)].node);
19307: 					n->usingClause = NIL; /* figure out which columns later... */
19308: 					n->quals = NULL; /* fill later */
19309: 					n->location = (yylsp[(2) - (4)]);
19310: 					(yyval.jexpr) = n;
19311: 				;}
19312:     break;
19313: 
19314:   case 585:
19315: #line 876 "third_party/libpg_query/grammar/statements/select.y"
19316:     {
19317: 					(yyval.alias) = makeNode(PGAlias);
19318: 					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
19319: 					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
19320: 				;}
19321:     break;
19322: 
19323:   case 586:
19324: #line 882 "third_party/libpg_query/grammar/statements/select.y"
19325:     {
19326: 					(yyval.alias) = makeNode(PGAlias);
19327: 					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
19328: 				;}
19329:     break;
19330: 
19331:   case 587:
19332: #line 887 "third_party/libpg_query/grammar/statements/select.y"
19333:     {
19334: 					(yyval.alias) = makeNode(PGAlias);
19335: 					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
19336: 					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
19337: 				;}
19338:     break;
19339: 
19340:   case 588:
19341: #line 893 "third_party/libpg_query/grammar/statements/select.y"
19342:     {
19343: 					(yyval.alias) = makeNode(PGAlias);
19344: 					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
19345: 				;}
19346:     break;
19347: 
19348:   case 589:
19349: #line 899 "third_party/libpg_query/grammar/statements/select.y"
19350:     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
19351:     break;
19352: 
19353:   case 590:
19354: #line 900 "third_party/libpg_query/grammar/statements/select.y"
19355:     { (yyval.alias) = NULL; ;}
19356:     break;
19357: 
19358:   case 591:
19359: #line 909 "third_party/libpg_query/grammar/statements/select.y"
19360:     {
19361: 					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
19362: 				;}
19363:     break;
19364: 
19365:   case 592:
19366: #line 913 "third_party/libpg_query/grammar/statements/select.y"
19367:     {
19368: 					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
19369: 				;}
19370:     break;
19371: 
19372:   case 593:
19373: #line 917 "third_party/libpg_query/grammar/statements/select.y"
19374:     {
19375: 					PGAlias *a = makeNode(PGAlias);
19376: 					a->aliasname = (yyvsp[(2) - (5)].str);
19377: 					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
19378: 				;}
19379:     break;
19380: 
19381:   case 594:
19382: #line 923 "third_party/libpg_query/grammar/statements/select.y"
19383:     {
19384: 					PGAlias *a = makeNode(PGAlias);
19385: 					a->aliasname = (yyvsp[(1) - (4)].str);
19386: 					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
19387: 				;}
19388:     break;
19389: 
19390:   case 595:
19391: #line 929 "third_party/libpg_query/grammar/statements/select.y"
19392:     {
19393: 					(yyval.list) = list_make2(NULL, NIL);
19394: 				;}
19395:     break;
19396: 
19397:   case 596:
19398: #line 934 "third_party/libpg_query/grammar/statements/select.y"
19399:     { (yyval.jtype) = PG_JOIN_FULL; ;}
19400:     break;
19401: 
19402:   case 597:
19403: #line 935 "third_party/libpg_query/grammar/statements/select.y"
19404:     { (yyval.jtype) = PG_JOIN_LEFT; ;}
19405:     break;
19406: 
19407:   case 598:
19408: #line 936 "third_party/libpg_query/grammar/statements/select.y"
19409:     { (yyval.jtype) = PG_JOIN_RIGHT; ;}
19410:     break;
19411: 
19412:   case 599:
19413: #line 937 "third_party/libpg_query/grammar/statements/select.y"
19414:     { (yyval.jtype) = PG_JOIN_INNER; ;}
19415:     break;
19416: 
19417:   case 600:
19418: #line 941 "third_party/libpg_query/grammar/statements/select.y"
19419:     { (yyval.node) = NULL; ;}
19420:     break;
19421: 
19422:   case 601:
19423: #line 942 "third_party/libpg_query/grammar/statements/select.y"
19424:     { (yyval.node) = NULL; ;}
19425:     break;
19426: 
19427:   case 602:
19428: #line 954 "third_party/libpg_query/grammar/statements/select.y"
19429:     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
19430:     break;
19431: 
19432:   case 603:
19433: #line 955 "third_party/libpg_query/grammar/statements/select.y"
19434:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19435:     break;
19436: 
19437:   case 604:
19438: #line 961 "third_party/libpg_query/grammar/statements/select.y"
19439:     {
19440: 					/* inheritance query, implicitly */
19441: 					(yyval.range) = (yyvsp[(1) - (1)].range);
19442: 					(yyval.range)->inh = true;
19443: 					(yyval.range)->alias = NULL;
19444: 				;}
19445:     break;
19446: 
19447:   case 605:
19448: #line 968 "third_party/libpg_query/grammar/statements/select.y"
19449:     {
19450: 					/* inheritance query, explicitly */
19451: 					(yyval.range) = (yyvsp[(1) - (2)].range);
19452: 					(yyval.range)->inh = true;
19453: 					(yyval.range)->alias = NULL;
19454: 				;}
19455:     break;
19456: 
19457:   case 606:
19458: #line 975 "third_party/libpg_query/grammar/statements/select.y"
19459:     {
19460: 					/* no inheritance */
19461: 					(yyval.range) = (yyvsp[(2) - (2)].range);
19462: 					(yyval.range)->inh = false;
19463: 					(yyval.range)->alias = NULL;
19464: 				;}
19465:     break;
19466: 
19467:   case 607:
19468: #line 982 "third_party/libpg_query/grammar/statements/select.y"
19469:     {
19470: 					/* no inheritance, SQL99-style syntax */
19471: 					(yyval.range) = (yyvsp[(3) - (4)].range);
19472: 					(yyval.range)->inh = false;
19473: 					(yyval.range)->alias = NULL;
19474: 				;}
19475:     break;
19476: 
19477:   case 608:
19478: #line 1014 "third_party/libpg_query/grammar/statements/select.y"
19479:     {
19480: 					PGRangeFunction *n = makeNode(PGRangeFunction);
19481: 					n->lateral = false;
19482: 					n->ordinality = (yyvsp[(2) - (2)].boolean);
19483: 					n->is_rowsfrom = false;
19484: 					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
19485: 					n->sample = NULL;
19486: 					/* alias and coldeflist are set by table_ref production */
19487: 					(yyval.node) = (PGNode *) n;
19488: 				;}
19489:     break;
19490: 
19491:   case 609:
19492: #line 1025 "third_party/libpg_query/grammar/statements/select.y"
19493:     {
19494: 					PGRangeFunction *n = makeNode(PGRangeFunction);
19495: 					n->lateral = false;
19496: 					n->ordinality = (yyvsp[(6) - (6)].boolean);
19497: 					n->is_rowsfrom = true;
19498: 					n->functions = (yyvsp[(4) - (6)].list);
19499: 					n->sample = NULL;
19500: 					/* alias and coldeflist are set by table_ref production */
19501: 					(yyval.node) = (PGNode *) n;
19502: 				;}
19503:     break;
19504: 
19505:   case 610:
19506: #line 1038 "third_party/libpg_query/grammar/statements/select.y"
19507:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
19508:     break;
19509: 
19510:   case 611:
19511: #line 1042 "third_party/libpg_query/grammar/statements/select.y"
19512:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
19513:     break;
19514: 
19515:   case 612:
19516: #line 1043 "third_party/libpg_query/grammar/statements/select.y"
19517:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
19518:     break;
19519: 
19520:   case 613:
19521: #line 1046 "third_party/libpg_query/grammar/statements/select.y"
19522:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
19523:     break;
19524: 
19525:   case 614:
19526: #line 1047 "third_party/libpg_query/grammar/statements/select.y"
19527:     { (yyval.list) = NIL; ;}
19528:     break;
19529: 
19530:   case 615:
19531: #line 1050 "third_party/libpg_query/grammar/statements/select.y"
19532:     { (yyval.boolean) = true; ;}
19533:     break;
19534: 
19535:   case 616:
19536: #line 1051 "third_party/libpg_query/grammar/statements/select.y"
19537:     { (yyval.boolean) = false; ;}
19538:     break;
19539: 
19540:   case 617:
19541: #line 1056 "third_party/libpg_query/grammar/statements/select.y"
19542:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19543:     break;
19544: 
19545:   case 618:
19546: #line 1057 "third_party/libpg_query/grammar/statements/select.y"
19547:     { (yyval.node) = NULL; ;}
19548:     break;
19549: 
19550:   case 619:
19551: #line 1063 "third_party/libpg_query/grammar/statements/select.y"
19552:     {
19553: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
19554: 				;}
19555:     break;
19556: 
19557:   case 620:
19558: #line 1067 "third_party/libpg_query/grammar/statements/select.y"
19559:     {
19560: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
19561: 				;}
19562:     break;
19563: 
19564:   case 621:
19565: #line 1073 "third_party/libpg_query/grammar/statements/select.y"
19566:     {
19567: 					PGColumnDef *n = makeNode(PGColumnDef);
19568: 					n->colname = (yyvsp[(1) - (3)].str);
19569: 					n->typeName = (yyvsp[(2) - (3)].typnam);
19570: 					n->inhcount = 0;
19571: 					n->is_local = true;
19572: 					n->is_not_null = false;
19573: 					n->is_from_type = false;
19574: 					n->storage = 0;
19575: 					n->raw_default = NULL;
19576: 					n->cooked_default = NULL;
19577: 					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
19578: 					n->collOid = InvalidOid;
19579: 					n->constraints = NIL;
19580: 					n->location = (yylsp[(1) - (3)]);
19581: 					(yyval.node) = (PGNode *)n;
19582: 				;}
19583:     break;
19584: 
19585:   case 622:
19586: #line 1094 "third_party/libpg_query/grammar/statements/select.y"
19587:     {
19588: 					PGCollateClause *n = makeNode(PGCollateClause);
19589: 					n->arg = NULL;
19590: 					n->collname = (yyvsp[(2) - (2)].list);
19591: 					n->location = (yylsp[(1) - (2)]);
19592: 					(yyval.node) = (PGNode *) n;
19593: 				;}
19594:     break;
19595: 
19596:   case 623:
19597: #line 1101 "third_party/libpg_query/grammar/statements/select.y"
19598:     { (yyval.node) = NULL; ;}
19599:     break;
19600: 
19601:   case 624:
19602: #line 1114 "third_party/libpg_query/grammar/statements/select.y"
19603:     {
19604:              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
19605:             ;}
19606:     break;
19607: 
19608:   case 625:
19609: #line 1117 "third_party/libpg_query/grammar/statements/select.y"
19610:     {
19611:              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
19612:             ;}
19613:     break;
19614: 
19615:   case 628:
19616: #line 1124 "third_party/libpg_query/grammar/statements/select.y"
19617:     {
19618: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19619: 					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
19620: 				;}
19621:     break;
19622: 
19623:   case 629:
19624: #line 1129 "third_party/libpg_query/grammar/statements/select.y"
19625:     {
19626: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
19627: 					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
19628: 					(yyval.typnam)->setof = true;
19629: 				;}
19630:     break;
19631: 
19632:   case 630:
19633: #line 1136 "third_party/libpg_query/grammar/statements/select.y"
19634:     {
19635: 					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
19636: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
19637: 				;}
19638:     break;
19639: 
19640:   case 631:
19641: #line 1141 "third_party/libpg_query/grammar/statements/select.y"
19642:     {
19643: 					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
19644: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
19645: 					(yyval.typnam)->setof = true;
19646: 				;}
19647:     break;
19648: 
19649:   case 632:
19650: #line 1147 "third_party/libpg_query/grammar/statements/select.y"
19651:     {
19652: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19653: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
19654: 				;}
19655:     break;
19656: 
19657:   case 633:
19658: #line 1152 "third_party/libpg_query/grammar/statements/select.y"
19659:     {
19660: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
19661: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
19662: 					(yyval.typnam)->setof = true;
19663: 				;}
19664:     break;
19665: 
19666:   case 634:
19667: #line 1157 "third_party/libpg_query/grammar/statements/select.y"
19668:     {
19669:                (yyval.typnam) = SystemTypeName("struct");
19670:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
19671:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
19672:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
19673:                ;}
19674:     break;
19675: 
19676:   case 635:
19677: #line 1163 "third_party/libpg_query/grammar/statements/select.y"
19678:     {
19679:                (yyval.typnam) = SystemTypeName("map");
19680:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
19681:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
19682:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
19683: 			;}
19684:     break;
19685: 
19686:   case 636:
19687: #line 1173 "third_party/libpg_query/grammar/statements/select.y"
19688:     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
19689:     break;
19690: 
19691:   case 637:
19692: #line 1175 "third_party/libpg_query/grammar/statements/select.y"
19693:     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
19694:     break;
19695: 
19696:   case 638:
19697: #line 1177 "third_party/libpg_query/grammar/statements/select.y"
19698:     {  (yyval.list) = NIL; ;}
19699:     break;
19700: 
19701:   case 639:
19702: #line 1181 "third_party/libpg_query/grammar/statements/select.y"
19703:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19704:     break;
19705: 
19706:   case 640:
19707: #line 1182 "third_party/libpg_query/grammar/statements/select.y"
19708:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19709:     break;
19710: 
19711:   case 641:
19712: #line 1183 "third_party/libpg_query/grammar/statements/select.y"
19713:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19714:     break;
19715: 
19716:   case 642:
19717: #line 1184 "third_party/libpg_query/grammar/statements/select.y"
19718:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19719:     break;
19720: 
19721:   case 643:
19722: #line 1185 "third_party/libpg_query/grammar/statements/select.y"
19723:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19724:     break;
19725: 
19726:   case 644:
19727: #line 1187 "third_party/libpg_query/grammar/statements/select.y"
19728:     {
19729: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
19730: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19731: 				;}
19732:     break;
19733: 
19734:   case 645:
19735: #line 1192 "third_party/libpg_query/grammar/statements/select.y"
19736:     {
19737: 					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
19738: 					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
19739: 											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
19740: 				;}
19741:     break;
19742: 
19743:   case 646:
19744: #line 1211 "third_party/libpg_query/grammar/statements/select.y"
19745:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19746:     break;
19747: 
19748:   case 647:
19749: #line 1212 "third_party/libpg_query/grammar/statements/select.y"
19750:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19751:     break;
19752: 
19753:   case 648:
19754: #line 1213 "third_party/libpg_query/grammar/statements/select.y"
19755:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19756:     break;
19757: 
19758:   case 649:
19759: #line 1214 "third_party/libpg_query/grammar/statements/select.y"
19760:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
19761:     break;
19762: 
19763:   case 650:
19764: #line 1226 "third_party/libpg_query/grammar/statements/select.y"
19765:     {
19766: 					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
19767: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19768: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19769: 				;}
19770:     break;
19771: 
19772:   case 651:
19773: #line 1239 "third_party/libpg_query/grammar/statements/select.y"
19774:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
19775:     break;
19776: 
19777:   case 652:
19778: #line 1240 "third_party/libpg_query/grammar/statements/select.y"
19779:     { (yyval.list) = NIL; ;}
19780:     break;
19781: 
19782:   case 653:
19783: #line 1247 "third_party/libpg_query/grammar/statements/select.y"
19784:     {
19785: 					(yyval.typnam) = SystemTypeName("int4");
19786: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19787: 				;}
19788:     break;
19789: 
19790:   case 654:
19791: #line 1252 "third_party/libpg_query/grammar/statements/select.y"
19792:     {
19793: 					(yyval.typnam) = SystemTypeName("int4");
19794: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19795: 				;}
19796:     break;
19797: 
19798:   case 655:
19799: #line 1257 "third_party/libpg_query/grammar/statements/select.y"
19800:     {
19801: 					(yyval.typnam) = SystemTypeName("int2");
19802: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19803: 				;}
19804:     break;
19805: 
19806:   case 656:
19807: #line 1262 "third_party/libpg_query/grammar/statements/select.y"
19808:     {
19809: 					(yyval.typnam) = SystemTypeName("int8");
19810: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19811: 				;}
19812:     break;
19813: 
19814:   case 657:
19815: #line 1267 "third_party/libpg_query/grammar/statements/select.y"
19816:     {
19817: 					(yyval.typnam) = SystemTypeName("float4");
19818: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19819: 				;}
19820:     break;
19821: 
19822:   case 658:
19823: #line 1272 "third_party/libpg_query/grammar/statements/select.y"
19824:     {
19825: 					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
19826: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19827: 				;}
19828:     break;
19829: 
19830:   case 659:
19831: #line 1277 "third_party/libpg_query/grammar/statements/select.y"
19832:     {
19833: 					(yyval.typnam) = SystemTypeName("float8");
19834: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19835: 				;}
19836:     break;
19837: 
19838:   case 660:
19839: #line 1282 "third_party/libpg_query/grammar/statements/select.y"
19840:     {
19841: 					(yyval.typnam) = SystemTypeName("numeric");
19842: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19843: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19844: 				;}
19845:     break;
19846: 
19847:   case 661:
19848: #line 1288 "third_party/libpg_query/grammar/statements/select.y"
19849:     {
19850: 					(yyval.typnam) = SystemTypeName("numeric");
19851: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19852: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19853: 				;}
19854:     break;
19855: 
19856:   case 662:
19857: #line 1294 "third_party/libpg_query/grammar/statements/select.y"
19858:     {
19859: 					(yyval.typnam) = SystemTypeName("numeric");
19860: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
19861: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19862: 				;}
19863:     break;
19864: 
19865:   case 663:
19866: #line 1300 "third_party/libpg_query/grammar/statements/select.y"
19867:     {
19868: 					(yyval.typnam) = SystemTypeName("bool");
19869: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
19870: 				;}
19871:     break;
19872: 
19873:   case 664:
19874: #line 1307 "third_party/libpg_query/grammar/statements/select.y"
19875:     {
19876: 					/*
19877: 					 * Check FLOAT() precision limits assuming IEEE floating
19878: 					 * types - thomas 1997-09-18
19879: 					 */
19880: 					if ((yyvsp[(2) - (3)].ival) < 1)
19881: 						ereport(ERROR,
19882: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
19883: 								 errmsg("precision for type float must be at least 1 bit"),
19884: 								 parser_errposition((yylsp[(2) - (3)]))));
19885: 					else if ((yyvsp[(2) - (3)].ival) <= 24)
19886: 						(yyval.typnam) = SystemTypeName("float4");
19887: 					else if ((yyvsp[(2) - (3)].ival) <= 53)
19888: 						(yyval.typnam) = SystemTypeName("float8");
19889: 					else
19890: 						ereport(ERROR,
19891: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
19892: 								 errmsg("precision for type float must be less than 54 bits"),
19893: 								 parser_errposition((yylsp[(2) - (3)]))));
19894: 				;}
19895:     break;
19896: 
19897:   case 665:
19898: #line 1328 "third_party/libpg_query/grammar/statements/select.y"
19899:     {
19900: 					(yyval.typnam) = SystemTypeName("float4");
19901: 				;}
19902:     break;
19903: 
19904:   case 666:
19905: #line 1338 "third_party/libpg_query/grammar/statements/select.y"
19906:     {
19907: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19908: 				;}
19909:     break;
19910: 
19911:   case 667:
19912: #line 1342 "third_party/libpg_query/grammar/statements/select.y"
19913:     {
19914: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19915: 				;}
19916:     break;
19917: 
19918:   case 668:
19919: #line 1350 "third_party/libpg_query/grammar/statements/select.y"
19920:     {
19921: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19922: 				;}
19923:     break;
19924: 
19925:   case 669:
19926: #line 1354 "third_party/libpg_query/grammar/statements/select.y"
19927:     {
19928: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19929: 					(yyval.typnam)->typmods = NIL;
19930: 				;}
19931:     break;
19932: 
19933:   case 670:
19934: #line 1362 "third_party/libpg_query/grammar/statements/select.y"
19935:     {
19936: 					const char *typname;
19937: 
19938: 					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
19939: 					(yyval.typnam) = SystemTypeName(typname);
19940: 					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
19941: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
19942: 				;}
19943:     break;
19944: 
19945:   case 671:
19946: #line 1374 "third_party/libpg_query/grammar/statements/select.y"
19947:     {
19948: 					/* bit defaults to bit(1), varbit to no limit */
19949: 					if ((yyvsp[(2) - (2)].boolean))
19950: 					{
19951: 						(yyval.typnam) = SystemTypeName("varbit");
19952: 					}
19953: 					else
19954: 					{
19955: 						(yyval.typnam) = SystemTypeName("bit");
19956: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
19957: 					}
19958: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
19959: 				;}
19960:     break;
19961: 
19962:   case 672:
19963: #line 1395 "third_party/libpg_query/grammar/statements/select.y"
19964:     {
19965: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19966: 				;}
19967:     break;
19968: 
19969:   case 673:
19970: #line 1399 "third_party/libpg_query/grammar/statements/select.y"
19971:     {
19972: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19973: 				;}
19974:     break;
19975: 
19976:   case 674:
19977: #line 1405 "third_party/libpg_query/grammar/statements/select.y"
19978:     {
19979: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19980: 				;}
19981:     break;
19982: 
19983:   case 675:
19984: #line 1409 "third_party/libpg_query/grammar/statements/select.y"
19985:     {
19986: 					/* Length was not specified so allow to be unrestricted.
19987: 					 * This handles problems with fixed-length (bpchar) strings
19988: 					 * which in column definitions must default to a length
19989: 					 * of one, but should not be constrained if the length
19990: 					 * was not specified.
19991: 					 */
19992: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
19993: 					(yyval.typnam)->typmods = NIL;
19994: 				;}
19995:     break;
19996: 
19997:   case 676:
19998: #line 1422 "third_party/libpg_query/grammar/statements/select.y"
19999:     {
20000: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
20001: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
20002: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
20003: 				;}
20004:     break;
20005: 
20006:   case 677:
20007: #line 1430 "third_party/libpg_query/grammar/statements/select.y"
20008:     {
20009: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
20010: 					/* char defaults to char(1), varchar to no limit */
20011: 					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
20012: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
20013: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20014: 				;}
20015:     break;
20016: 
20017:   case 678:
20018: #line 1440 "third_party/libpg_query/grammar/statements/select.y"
20019:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20020:     break;
20021: 
20022:   case 679:
20023: #line 1442 "third_party/libpg_query/grammar/statements/select.y"
20024:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20025:     break;
20026: 
20027:   case 680:
20028: #line 1444 "third_party/libpg_query/grammar/statements/select.y"
20029:     { (yyval.conststr) = "varchar"; ;}
20030:     break;
20031: 
20032:   case 681:
20033: #line 1446 "third_party/libpg_query/grammar/statements/select.y"
20034:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20035:     break;
20036: 
20037:   case 682:
20038: #line 1448 "third_party/libpg_query/grammar/statements/select.y"
20039:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20040:     break;
20041: 
20042:   case 683:
20043: #line 1450 "third_party/libpg_query/grammar/statements/select.y"
20044:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20045:     break;
20046: 
20047:   case 684:
20048: #line 1454 "third_party/libpg_query/grammar/statements/select.y"
20049:     { (yyval.boolean) = true; ;}
20050:     break;
20051: 
20052:   case 685:
20053: #line 1455 "third_party/libpg_query/grammar/statements/select.y"
20054:     { (yyval.boolean) = false; ;}
20055:     break;
20056: 
20057:   case 686:
20058: #line 1463 "third_party/libpg_query/grammar/statements/select.y"
20059:     {
20060: 					if ((yyvsp[(5) - (5)].boolean))
20061: 						(yyval.typnam) = SystemTypeName("timestamptz");
20062: 					else
20063: 						(yyval.typnam) = SystemTypeName("timestamp");
20064: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20065: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20066: 				;}
20067:     break;
20068: 
20069:   case 687:
20070: #line 1472 "third_party/libpg_query/grammar/statements/select.y"
20071:     {
20072: 					if ((yyvsp[(2) - (2)].boolean))
20073: 						(yyval.typnam) = SystemTypeName("timestamptz");
20074: 					else
20075: 						(yyval.typnam) = SystemTypeName("timestamp");
20076: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20077: 				;}
20078:     break;
20079: 
20080:   case 688:
20081: #line 1480 "third_party/libpg_query/grammar/statements/select.y"
20082:     {
20083: 					if ((yyvsp[(5) - (5)].boolean))
20084: 						(yyval.typnam) = SystemTypeName("timetz");
20085: 					else
20086: 						(yyval.typnam) = SystemTypeName("time");
20087: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20088: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20089: 				;}
20090:     break;
20091: 
20092:   case 689:
20093: #line 1489 "third_party/libpg_query/grammar/statements/select.y"
20094:     {
20095: 					if ((yyvsp[(2) - (2)].boolean))
20096: 						(yyval.typnam) = SystemTypeName("timetz");
20097: 					else
20098: 						(yyval.typnam) = SystemTypeName("time");
20099: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20100: 				;}
20101:     break;
20102: 
20103:   case 690:
20104: #line 1500 "third_party/libpg_query/grammar/statements/select.y"
20105:     {
20106: 					(yyval.typnam) = SystemTypeName("interval");
20107: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20108: 				;}
20109:     break;
20110: 
20111:   case 691:
20112: #line 1507 "third_party/libpg_query/grammar/statements/select.y"
20113:     { (yyval.boolean) = true; ;}
20114:     break;
20115: 
20116:   case 692:
20117: #line 1508 "third_party/libpg_query/grammar/statements/select.y"
20118:     { (yyval.boolean) = false; ;}
20119:     break;
20120: 
20121:   case 693:
20122: #line 1509 "third_party/libpg_query/grammar/statements/select.y"
20123:     { (yyval.boolean) = false; ;}
20124:     break;
20125: 
20126:   case 710:
20127: #line 1538 "third_party/libpg_query/grammar/statements/select.y"
20128:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
20129:     break;
20130: 
20131:   case 711:
20132: #line 1540 "third_party/libpg_query/grammar/statements/select.y"
20133:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
20134:     break;
20135: 
20136:   case 712:
20137: #line 1542 "third_party/libpg_query/grammar/statements/select.y"
20138:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
20139:     break;
20140: 
20141:   case 713:
20142: #line 1544 "third_party/libpg_query/grammar/statements/select.y"
20143:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
20144:     break;
20145: 
20146:   case 714:
20147: #line 1546 "third_party/libpg_query/grammar/statements/select.y"
20148:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
20149:     break;
20150: 
20151:   case 715:
20152: #line 1548 "third_party/libpg_query/grammar/statements/select.y"
20153:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
20154:     break;
20155: 
20156:   case 716:
20157: #line 1550 "third_party/libpg_query/grammar/statements/select.y"
20158:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
20159:     break;
20160: 
20161:   case 717:
20162: #line 1552 "third_party/libpg_query/grammar/statements/select.y"
20163:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
20164:     break;
20165: 
20166:   case 718:
20167: #line 1554 "third_party/libpg_query/grammar/statements/select.y"
20168:     {
20169: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
20170: 												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
20171: 				;}
20172:     break;
20173: 
20174:   case 719:
20175: #line 1559 "third_party/libpg_query/grammar/statements/select.y"
20176:     {
20177: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
20178: 												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
20179: 				;}
20180:     break;
20181: 
20182:   case 720:
20183: #line 1564 "third_party/libpg_query/grammar/statements/select.y"
20184:     {
20185: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
20186: 												 INTERVAL_MASK(HOUR) |
20187: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
20188: 				;}
20189:     break;
20190: 
20191:   case 721:
20192: #line 1570 "third_party/libpg_query/grammar/statements/select.y"
20193:     {
20194: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
20195: 												 INTERVAL_MASK(HOUR) |
20196: 												 INTERVAL_MASK(MINUTE) |
20197: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
20198: 				;}
20199:     break;
20200: 
20201:   case 722:
20202: #line 1577 "third_party/libpg_query/grammar/statements/select.y"
20203:     {
20204: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
20205: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
20206: 				;}
20207:     break;
20208: 
20209:   case 723:
20210: #line 1582 "third_party/libpg_query/grammar/statements/select.y"
20211:     {
20212: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
20213: 												 INTERVAL_MASK(MINUTE) |
20214: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
20215: 				;}
20216:     break;
20217: 
20218:   case 724:
20219: #line 1588 "third_party/libpg_query/grammar/statements/select.y"
20220:     {
20221: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
20222: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
20223: 				;}
20224:     break;
20225: 
20226:   case 725:
20227: #line 1593 "third_party/libpg_query/grammar/statements/select.y"
20228:     { (yyval.list) = NIL; ;}
20229:     break;
20230: 
20231:   case 726:
20232: #line 1624 "third_party/libpg_query/grammar/statements/select.y"
20233:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20234:     break;
20235: 
20236:   case 727:
20237: #line 1627 "third_party/libpg_query/grammar/statements/select.y"
20238:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
20239:     break;
20240: 
20241:   case 728:
20242: #line 1629 "third_party/libpg_query/grammar/statements/select.y"
20243:     {
20244: 					PGCollateClause *n = makeNode(PGCollateClause);
20245: 					n->arg = (yyvsp[(1) - (3)].node);
20246: 					n->collname = (yyvsp[(3) - (3)].list);
20247: 					n->location = (yylsp[(2) - (3)]);
20248: 					(yyval.node) = (PGNode *) n;
20249: 				;}
20250:     break;
20251: 
20252:   case 729:
20253: #line 1637 "third_party/libpg_query/grammar/statements/select.y"
20254:     {
20255: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
20256: 											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
20257: 											   (yylsp[(2) - (5)]));
20258: 				;}
20259:     break;
20260: 
20261:   case 730:
20262: #line 1652 "third_party/libpg_query/grammar/statements/select.y"
20263:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20264:     break;
20265: 
20266:   case 731:
20267: #line 1654 "third_party/libpg_query/grammar/statements/select.y"
20268:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20269:     break;
20270: 
20271:   case 732:
20272: #line 1656 "third_party/libpg_query/grammar/statements/select.y"
20273:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20274:     break;
20275: 
20276:   case 733:
20277: #line 1658 "third_party/libpg_query/grammar/statements/select.y"
20278:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20279:     break;
20280: 
20281:   case 734:
20282: #line 1660 "third_party/libpg_query/grammar/statements/select.y"
20283:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20284:     break;
20285: 
20286:   case 735:
20287: #line 1662 "third_party/libpg_query/grammar/statements/select.y"
20288:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20289:     break;
20290: 
20291:   case 736:
20292: #line 1664 "third_party/libpg_query/grammar/statements/select.y"
20293:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20294:     break;
20295: 
20296:   case 737:
20297: #line 1666 "third_party/libpg_query/grammar/statements/select.y"
20298:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20299:     break;
20300: 
20301:   case 738:
20302: #line 1668 "third_party/libpg_query/grammar/statements/select.y"
20303:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20304:     break;
20305: 
20306:   case 739:
20307: #line 1670 "third_party/libpg_query/grammar/statements/select.y"
20308:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20309:     break;
20310: 
20311:   case 740:
20312: #line 1672 "third_party/libpg_query/grammar/statements/select.y"
20313:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20314:     break;
20315: 
20316:   case 741:
20317: #line 1674 "third_party/libpg_query/grammar/statements/select.y"
20318:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20319:     break;
20320: 
20321:   case 742:
20322: #line 1676 "third_party/libpg_query/grammar/statements/select.y"
20323:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20324:     break;
20325: 
20326:   case 743:
20327: #line 1678 "third_party/libpg_query/grammar/statements/select.y"
20328:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20329:     break;
20330: 
20331:   case 744:
20332: #line 1681 "third_party/libpg_query/grammar/statements/select.y"
20333:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20334:     break;
20335: 
20336:   case 745:
20337: #line 1683 "third_party/libpg_query/grammar/statements/select.y"
20338:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20339:     break;
20340: 
20341:   case 746:
20342: #line 1685 "third_party/libpg_query/grammar/statements/select.y"
20343:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
20344:     break;
20345: 
20346:   case 747:
20347: #line 1688 "third_party/libpg_query/grammar/statements/select.y"
20348:     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20349:     break;
20350: 
20351:   case 748:
20352: #line 1690 "third_party/libpg_query/grammar/statements/select.y"
20353:     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20354:     break;
20355: 
20356:   case 749:
20357: #line 1692 "third_party/libpg_query/grammar/statements/select.y"
20358:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20359:     break;
20360: 
20361:   case 750:
20362: #line 1694 "third_party/libpg_query/grammar/statements/select.y"
20363:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20364:     break;
20365: 
20366:   case 751:
20367: #line 1697 "third_party/libpg_query/grammar/statements/select.y"
20368:     {
20369: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
20370: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20371: 				;}
20372:     break;
20373: 
20374:   case 752:
20375: #line 1702 "third_party/libpg_query/grammar/statements/select.y"
20376:     {
20377: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
20378: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20379: 				;}
20380:     break;
20381: 
20382:   case 753:
20383: #line 1707 "third_party/libpg_query/grammar/statements/select.y"
20384:     {
20385: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
20386: 											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
20387: 											   (yylsp[(2) - (5)]));
20388: 					(yyval.node) = (PGNode *) n;
20389: 				;}
20390:     break;
20391: 
20392:   case 754:
20393: #line 1714 "third_party/libpg_query/grammar/statements/select.y"
20394:     {
20395: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
20396: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
20397: 				;}
20398:     break;
20399: 
20400:   case 755:
20401: #line 1719 "third_party/libpg_query/grammar/statements/select.y"
20402:     {
20403: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
20404: 											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20405: 											   (yylsp[(2) - (6)]));
20406: 					(yyval.node) = (PGNode *) n;
20407: 				;}
20408:     break;
20409: 
20410:   case 756:
20411: #line 1726 "third_party/libpg_query/grammar/statements/select.y"
20412:     {
20413: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
20414: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20415: 				;}
20416:     break;
20417: 
20418:   case 757:
20419: #line 1731 "third_party/libpg_query/grammar/statements/select.y"
20420:     {
20421: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
20422: 											   list_make2((yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
20423: 											   (yylsp[(2) - (5)]));
20424: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
20425: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
20426: 				;}
20427:     break;
20428: 
20429:   case 758:
20430: #line 1739 "third_party/libpg_query/grammar/statements/select.y"
20431:     {
20432: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
20433: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
20434: 				;}
20435:     break;
20436: 
20437:   case 759:
20438: #line 1744 "third_party/libpg_query/grammar/statements/select.y"
20439:     {
20440: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
20441: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20442: 											   (yylsp[(2) - (6)]));
20443: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
20444: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
20445: 				;}
20446:     break;
20447: 
20448:   case 760:
20449: #line 1753 "third_party/libpg_query/grammar/statements/select.y"
20450:     {
20451: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20452: 											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
20453: 											   (yylsp[(2) - (4)]));
20454: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
20455: 												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
20456: 				;}
20457:     break;
20458: 
20459:   case 761:
20460: #line 1761 "third_party/libpg_query/grammar/statements/select.y"
20461:     {
20462: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20463: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20464: 											   (yylsp[(2) - (6)]));
20465: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
20466: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
20467: 				;}
20468:     break;
20469: 
20470:   case 762:
20471: #line 1769 "third_party/libpg_query/grammar/statements/select.y"
20472:     {
20473: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20474: 											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
20475: 											   (yylsp[(2) - (5)]));
20476: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
20477: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
20478: 				;}
20479:     break;
20480: 
20481:   case 763:
20482: #line 1777 "third_party/libpg_query/grammar/statements/select.y"
20483:     {
20484: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
20485: 											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20486: 											   (yylsp[(2) - (7)]));
20487: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
20488: 												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
20489: 				;}
20490:     break;
20491: 
20492:   case 764:
20493: #line 1795 "third_party/libpg_query/grammar/statements/select.y"
20494:     {
20495: 					PGNullTest *n = makeNode(PGNullTest);
20496: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20497: 					n->nulltesttype = PG_IS_NULL;
20498: 					n->location = (yylsp[(2) - (3)]);
20499: 					(yyval.node) = (PGNode *)n;
20500: 				;}
20501:     break;
20502: 
20503:   case 765:
20504: #line 1803 "third_party/libpg_query/grammar/statements/select.y"
20505:     {
20506: 					PGNullTest *n = makeNode(PGNullTest);
20507: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
20508: 					n->nulltesttype = PG_IS_NULL;
20509: 					n->location = (yylsp[(2) - (2)]);
20510: 					(yyval.node) = (PGNode *)n;
20511: 				;}
20512:     break;
20513: 
20514:   case 766:
20515: #line 1811 "third_party/libpg_query/grammar/statements/select.y"
20516:     {
20517: 					PGNullTest *n = makeNode(PGNullTest);
20518: 					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20519: 					n->nulltesttype = IS_NOT_NULL;
20520: 					n->location = (yylsp[(2) - (4)]);
20521: 					(yyval.node) = (PGNode *)n;
20522: 				;}
20523:     break;
20524: 
20525:   case 767:
20526: #line 1819 "third_party/libpg_query/grammar/statements/select.y"
20527:     {
20528: 					PGNullTest *n = makeNode(PGNullTest);
20529: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20530: 					n->nulltesttype = IS_NOT_NULL;
20531: 					n->location = (yylsp[(2) - (3)]);
20532: 					(yyval.node) = (PGNode *)n;
20533: 				;}
20534:     break;
20535: 
20536:   case 768:
20537: #line 1827 "third_party/libpg_query/grammar/statements/select.y"
20538:     {
20539: 					PGNullTest *n = makeNode(PGNullTest);
20540: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
20541: 					n->nulltesttype = IS_NOT_NULL;
20542: 					n->location = (yylsp[(2) - (2)]);
20543: 					(yyval.node) = (PGNode *)n;
20544: 				;}
20545:     break;
20546: 
20547:   case 769:
20548: #line 1834 "third_party/libpg_query/grammar/statements/select.y"
20549:     {
20550: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
20551: 				(yyval.node) = (PGNode *) n;
20552: 			;}
20553:     break;
20554: 
20555:   case 770:
20556: #line 1838 "third_party/libpg_query/grammar/statements/select.y"
20557:     {
20558: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
20559: 				(yyval.node) = (PGNode *) n;
20560: 			;}
20561:     break;
20562: 
20563:   case 771:
20564: #line 1842 "third_party/libpg_query/grammar/statements/select.y"
20565:     {
20566: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
20567: 				(yyval.node) = (PGNode *) n;
20568: 			;}
20569:     break;
20570: 
20571:   case 772:
20572: #line 1847 "third_party/libpg_query/grammar/statements/select.y"
20573:     {
20574: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
20575: 				n->parameters = (yyvsp[(1) - (3)].list);
20576: 				n->function = (yyvsp[(3) - (3)].node);
20577: 				n->location = (yylsp[(2) - (3)]);
20578: 				(yyval.node) = (PGNode *) n;
20579: 			;}
20580:     break;
20581: 
20582:   case 773:
20583: #line 1855 "third_party/libpg_query/grammar/statements/select.y"
20584:     {
20585: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
20586: 				n->parameters = list_make1((yyvsp[(1) - (3)].node));
20587: 				n->function = (yyvsp[(3) - (3)].node);
20588: 				n->location = (yylsp[(2) - (3)]);
20589: 				(yyval.node) = (PGNode *) n;
20590: 			;}
20591:     break;
20592: 
20593:   case 774:
20594: #line 1863 "third_party/libpg_query/grammar/statements/select.y"
20595:     {
20596: 					if (list_length((yyvsp[(1) - (3)].list)) != 2)
20597: 						ereport(ERROR,
20598: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
20599: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
20600: 								 parser_errposition((yylsp[(1) - (3)]))));
20601: 					if (list_length((yyvsp[(3) - (3)].list)) != 2)
20602: 						ereport(ERROR,
20603: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
20604: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
20605: 								 parser_errposition((yylsp[(3) - (3)]))));
20606: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
20607: 											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
20608: 											   (yylsp[(2) - (3)]));
20609: 				;}
20610:     break;
20611: 
20612:   case 775:
20613: #line 1879 "third_party/libpg_query/grammar/statements/select.y"
20614:     {
20615: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20616: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20617: 					b->booltesttype = PG_IS_TRUE;
20618: 					b->location = (yylsp[(2) - (3)]);
20619: 					(yyval.node) = (PGNode *)b;
20620: 				;}
20621:     break;
20622: 
20623:   case 776:
20624: #line 1887 "third_party/libpg_query/grammar/statements/select.y"
20625:     {
20626: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20627: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20628: 					b->booltesttype = IS_NOT_TRUE;
20629: 					b->location = (yylsp[(2) - (4)]);
20630: 					(yyval.node) = (PGNode *)b;
20631: 				;}
20632:     break;
20633: 
20634:   case 777:
20635: #line 1895 "third_party/libpg_query/grammar/statements/select.y"
20636:     {
20637: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20638: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20639: 					b->booltesttype = IS_FALSE;
20640: 					b->location = (yylsp[(2) - (3)]);
20641: 					(yyval.node) = (PGNode *)b;
20642: 				;}
20643:     break;
20644: 
20645:   case 778:
20646: #line 1903 "third_party/libpg_query/grammar/statements/select.y"
20647:     {
20648: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20649: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20650: 					b->booltesttype = IS_NOT_FALSE;
20651: 					b->location = (yylsp[(2) - (4)]);
20652: 					(yyval.node) = (PGNode *)b;
20653: 				;}
20654:     break;
20655: 
20656:   case 779:
20657: #line 1911 "third_party/libpg_query/grammar/statements/select.y"
20658:     {
20659: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20660: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
20661: 					b->booltesttype = IS_UNKNOWN;
20662: 					b->location = (yylsp[(2) - (3)]);
20663: 					(yyval.node) = (PGNode *)b;
20664: 				;}
20665:     break;
20666: 
20667:   case 780:
20668: #line 1919 "third_party/libpg_query/grammar/statements/select.y"
20669:     {
20670: 					PGBooleanTest *b = makeNode(PGBooleanTest);
20671: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
20672: 					b->booltesttype = IS_NOT_UNKNOWN;
20673: 					b->location = (yylsp[(2) - (4)]);
20674: 					(yyval.node) = (PGNode *)b;
20675: 				;}
20676:     break;
20677: 
20678:   case 781:
20679: #line 1927 "third_party/libpg_query/grammar/statements/select.y"
20680:     {
20681: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
20682: 				;}
20683:     break;
20684: 
20685:   case 782:
20686: #line 1931 "third_party/libpg_query/grammar/statements/select.y"
20687:     {
20688: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
20689: 				;}
20690:     break;
20691: 
20692:   case 783:
20693: #line 1935 "third_party/libpg_query/grammar/statements/select.y"
20694:     {
20695: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
20696: 				;}
20697:     break;
20698: 
20699:   case 784:
20700: #line 1939 "third_party/libpg_query/grammar/statements/select.y"
20701:     {
20702: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
20703: 				;}
20704:     break;
20705: 
20706:   case 785:
20707: #line 1943 "third_party/libpg_query/grammar/statements/select.y"
20708:     {
20709: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
20710: 												   "BETWEEN",
20711: 												   (yyvsp[(1) - (6)].node),
20712: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20713: 												   (yylsp[(2) - (6)]));
20714: 				;}
20715:     break;
20716: 
20717:   case 786:
20718: #line 1951 "third_party/libpg_query/grammar/statements/select.y"
20719:     {
20720: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
20721: 												   "NOT BETWEEN",
20722: 												   (yyvsp[(1) - (7)].node),
20723: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20724: 												   (yylsp[(2) - (7)]));
20725: 				;}
20726:     break;
20727: 
20728:   case 787:
20729: #line 1959 "third_party/libpg_query/grammar/statements/select.y"
20730:     {
20731: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
20732: 												   "BETWEEN SYMMETRIC",
20733: 												   (yyvsp[(1) - (6)].node),
20734: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
20735: 												   (yylsp[(2) - (6)]));
20736: 				;}
20737:     break;
20738: 
20739:   case 788:
20740: #line 1967 "third_party/libpg_query/grammar/statements/select.y"
20741:     {
20742: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
20743: 												   "NOT BETWEEN SYMMETRIC",
20744: 												   (yyvsp[(1) - (7)].node),
20745: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
20746: 												   (yylsp[(2) - (7)]));
20747: 				;}
20748:     break;
20749: 
20750:   case 789:
20751: #line 1975 "third_party/libpg_query/grammar/statements/select.y"
20752:     {
20753: 					/* in_expr returns a PGSubLink or a list of a_exprs */
20754: 					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
20755: 					{
20756: 						/* generate foo = ANY (subquery) */
20757: 						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
20758: 						n->subLinkType = PG_ANY_SUBLINK;
20759: 						n->subLinkId = 0;
20760: 						n->testexpr = (yyvsp[(1) - (3)].node);
20761: 						n->operName = NIL;		/* show it's IN not = ANY */
20762: 						n->location = (yylsp[(2) - (3)]);
20763: 						(yyval.node) = (PGNode *)n;
20764: 					}
20765: 					else
20766: 					{
20767: 						/* generate scalar IN expression */
20768: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
20769: 					}
20770: 				;}
20771:     break;
20772: 
20773:   case 790:
20774: #line 1995 "third_party/libpg_query/grammar/statements/select.y"
20775:     {
20776: 					/* in_expr returns a PGSubLink or a list of a_exprs */
20777: 					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
20778: 					{
20779: 						/* generate NOT (foo = ANY (subquery)) */
20780: 						/* Make an = ANY node */
20781: 						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
20782: 						n->subLinkType = PG_ANY_SUBLINK;
20783: 						n->subLinkId = 0;
20784: 						n->testexpr = (yyvsp[(1) - (4)].node);
20785: 						n->operName = NIL;		/* show it's IN not = ANY */
20786: 						n->location = (yylsp[(2) - (4)]);
20787: 						/* Stick a NOT on top; must have same parse location */
20788: 						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
20789: 					}
20790: 					else
20791: 					{
20792: 						/* generate scalar NOT IN expression */
20793: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
20794: 					}
20795: 				;}
20796:     break;
20797: 
20798:   case 791:
20799: #line 2017 "third_party/libpg_query/grammar/statements/select.y"
20800:     {
20801: 					PGSubLink *n = makeNode(PGSubLink);
20802: 					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
20803: 					n->subLinkId = 0;
20804: 					n->testexpr = (yyvsp[(1) - (4)].node);
20805: 					n->operName = (yyvsp[(2) - (4)].list);
20806: 					n->subselect = (yyvsp[(4) - (4)].node);
20807: 					n->location = (yylsp[(2) - (4)]);
20808: 					(yyval.node) = (PGNode *)n;
20809: 				;}
20810:     break;
20811: 
20812:   case 792:
20813: #line 2028 "third_party/libpg_query/grammar/statements/select.y"
20814:     {
20815: 					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
20816: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
20817: 					else
20818: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
20819: 				;}
20820:     break;
20821: 
20822:   case 793:
20823: #line 2035 "third_party/libpg_query/grammar/statements/select.y"
20824:     {
20825: 					/*
20826: 					 * The SQL spec only allows DEFAULT in "contextually typed
20827: 					 * expressions", but for us, it's easier to allow it in
20828: 					 * any a_expr and then throw error during parse analysis
20829: 					 * if it's in an inappropriate context.  This way also
20830: 					 * lets us say something smarter than "syntax error".
20831: 					 */
20832: 					PGSetToDefault *n = makeNode(PGSetToDefault);
20833: 					/* parse analysis will fill in the rest */
20834: 					n->location = (yylsp[(1) - (1)]);
20835: 					(yyval.node) = (PGNode *)n;
20836: 				;}
20837:     break;
20838: 
20839:   case 794:
20840: #line 2048 "third_party/libpg_query/grammar/statements/select.y"
20841:     {
20842: 				PGList *func_name = list_make1(makeString("construct_array"));
20843: 				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
20844: 				(yyval.node) = (PGNode *) n;
20845: 			;}
20846:     break;
20847: 
20848:   case 795:
20849: #line 2065 "third_party/libpg_query/grammar/statements/select.y"
20850:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20851:     break;
20852: 
20853:   case 796:
20854: #line 2067 "third_party/libpg_query/grammar/statements/select.y"
20855:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
20856:     break;
20857: 
20858:   case 797:
20859: #line 2069 "third_party/libpg_query/grammar/statements/select.y"
20860:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20861:     break;
20862: 
20863:   case 798:
20864: #line 2071 "third_party/libpg_query/grammar/statements/select.y"
20865:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20866:     break;
20867: 
20868:   case 799:
20869: #line 2073 "third_party/libpg_query/grammar/statements/select.y"
20870:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20871:     break;
20872: 
20873:   case 800:
20874: #line 2075 "third_party/libpg_query/grammar/statements/select.y"
20875:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20876:     break;
20877: 
20878:   case 801:
20879: #line 2077 "third_party/libpg_query/grammar/statements/select.y"
20880:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20881:     break;
20882: 
20883:   case 802:
20884: #line 2079 "third_party/libpg_query/grammar/statements/select.y"
20885:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20886:     break;
20887: 
20888:   case 803:
20889: #line 2081 "third_party/libpg_query/grammar/statements/select.y"
20890:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20891:     break;
20892: 
20893:   case 804:
20894: #line 2083 "third_party/libpg_query/grammar/statements/select.y"
20895:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20896:     break;
20897: 
20898:   case 805:
20899: #line 2085 "third_party/libpg_query/grammar/statements/select.y"
20900:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20901:     break;
20902: 
20903:   case 806:
20904: #line 2087 "third_party/libpg_query/grammar/statements/select.y"
20905:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20906:     break;
20907: 
20908:   case 807:
20909: #line 2089 "third_party/libpg_query/grammar/statements/select.y"
20910:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20911:     break;
20912: 
20913:   case 808:
20914: #line 2091 "third_party/libpg_query/grammar/statements/select.y"
20915:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20916:     break;
20917: 
20918:   case 809:
20919: #line 2093 "third_party/libpg_query/grammar/statements/select.y"
20920:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20921:     break;
20922: 
20923:   case 810:
20924: #line 2095 "third_party/libpg_query/grammar/statements/select.y"
20925:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20926:     break;
20927: 
20928:   case 811:
20929: #line 2097 "third_party/libpg_query/grammar/statements/select.y"
20930:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
20931:     break;
20932: 
20933:   case 812:
20934: #line 2099 "third_party/libpg_query/grammar/statements/select.y"
20935:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
20936:     break;
20937: 
20938:   case 813:
20939: #line 2101 "third_party/libpg_query/grammar/statements/select.y"
20940:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
20941:     break;
20942: 
20943:   case 814:
20944: #line 2103 "third_party/libpg_query/grammar/statements/select.y"
20945:     {
20946: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
20947: 				;}
20948:     break;
20949: 
20950:   case 815:
20951: #line 2107 "third_party/libpg_query/grammar/statements/select.y"
20952:     {
20953: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
20954: 				;}
20955:     break;
20956: 
20957:   case 816:
20958: #line 2111 "third_party/libpg_query/grammar/statements/select.y"
20959:     {
20960: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
20961: 				;}
20962:     break;
20963: 
20964:   case 817:
20965: #line 2115 "third_party/libpg_query/grammar/statements/select.y"
20966:     {
20967: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
20968: 				;}
20969:     break;
20970: 
20971:   case 818:
20972: #line 2128 "third_party/libpg_query/grammar/statements/select.y"
20973:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20974:     break;
20975: 
20976:   case 819:
20977: #line 2129 "third_party/libpg_query/grammar/statements/select.y"
20978:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20979:     break;
20980: 
20981:   case 820:
20982: #line 2131 "third_party/libpg_query/grammar/statements/select.y"
20983:     {
20984: 					PGPositionalReference *n = makeNode(PGPositionalReference);
20985: 					n->position = (yyvsp[(2) - (2)].ival);
20986: 					n->location = (yylsp[(1) - (2)]);
20987: 					(yyval.node) = (PGNode *) n;
20988: 				;}
20989:     break;
20990: 
20991:   case 821:
20992: #line 2138 "third_party/libpg_query/grammar/statements/select.y"
20993:     {
20994: 					if ((yyvsp[(2) - (2)].list))
20995: 					{
20996: 						PGAIndirection *n = makeNode(PGAIndirection);
20997: 						n->arg = makeParamRef(0, (yylsp[(1) - (2)]));
20998: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
20999: 						(yyval.node) = (PGNode *) n;
21000: 					}
21001: 					else
21002: 						(yyval.node) = makeParamRef(0, (yylsp[(1) - (2)]));
21003: 				;}
21004:     break;
21005: 
21006:   case 822:
21007: #line 2150 "third_party/libpg_query/grammar/statements/select.y"
21008:     {
21009: 					PGParamRef *p = makeNode(PGParamRef);
21010: 					p->number = (yyvsp[(1) - (2)].ival);
21011: 					p->location = (yylsp[(1) - (2)]);
21012: 					if ((yyvsp[(2) - (2)].list))
21013: 					{
21014: 						PGAIndirection *n = makeNode(PGAIndirection);
21015: 						n->arg = (PGNode *) p;
21016: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21017: 						(yyval.node) = (PGNode *) n;
21018: 					}
21019: 					else
21020: 						(yyval.node) = (PGNode *) p;
21021: 				;}
21022:     break;
21023: 
21024:   case 823:
21025: #line 2165 "third_party/libpg_query/grammar/statements/select.y"
21026:     {
21027: 					if ((yyvsp[(4) - (4)].list))
21028: 					{
21029: 						PGAIndirection *n = makeNode(PGAIndirection);
21030: 						n->arg = (yyvsp[(2) - (4)].node);
21031: 						n->indirection = check_indirection((yyvsp[(4) - (4)].list), yyscanner);
21032: 						(yyval.node) = (PGNode *)n;
21033: 					}
21034: 					else
21035: 						(yyval.node) = (yyvsp[(2) - (4)].node);
21036: 				;}
21037:     break;
21038: 
21039:   case 824:
21040: #line 2177 "third_party/libpg_query/grammar/statements/select.y"
21041:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21042:     break;
21043: 
21044:   case 825:
21045: #line 2179 "third_party/libpg_query/grammar/statements/select.y"
21046:     {
21047: 					if ((yyvsp[(2) - (2)].list)) {
21048: 						PGAIndirection *n = makeNode(PGAIndirection);
21049: 						n->arg = (yyvsp[(1) - (2)].node);
21050: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21051: 						(yyval.node) = (PGNode *)n;
21052: 					}
21053: 					else {
21054: 						(yyval.node) = (yyvsp[(1) - (2)].node);
21055: 					}
21056: 				;}
21057:     break;
21058: 
21059:   case 826:
21060: #line 2191 "third_party/libpg_query/grammar/statements/select.y"
21061:     {
21062: 					PGSubLink *n = makeNode(PGSubLink);
21063: 					n->subLinkType = PG_EXPR_SUBLINK;
21064: 					n->subLinkId = 0;
21065: 					n->testexpr = NULL;
21066: 					n->operName = NIL;
21067: 					n->subselect = (yyvsp[(1) - (1)].node);
21068: 					n->location = (yylsp[(1) - (1)]);
21069: 					(yyval.node) = (PGNode *)n;
21070: 				;}
21071:     break;
21072: 
21073:   case 827:
21074: #line 2202 "third_party/libpg_query/grammar/statements/select.y"
21075:     {
21076: 					/*
21077: 					 * Because the select_with_parens nonterminal is designed
21078: 					 * to "eat" as many levels of parens as possible, the
21079: 					 * '(' a_expr ')' opt_indirection production above will
21080: 					 * fail to match a sub-SELECT with indirection decoration;
21081: 					 * the sub-SELECT won't be regarded as an a_expr as long
21082: 					 * as there are parens around it.  To support applying
21083: 					 * subscripting or field selection to a sub-SELECT result,
21084: 					 * we need this redundant-looking production.
21085: 					 */
21086: 					PGSubLink *n = makeNode(PGSubLink);
21087: 					PGAIndirection *a = makeNode(PGAIndirection);
21088: 					n->subLinkType = PG_EXPR_SUBLINK;
21089: 					n->subLinkId = 0;
21090: 					n->testexpr = NULL;
21091: 					n->operName = NIL;
21092: 					n->subselect = (yyvsp[(1) - (2)].node);
21093: 					n->location = (yylsp[(1) - (2)]);
21094: 					a->arg = (PGNode *)n;
21095: 					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21096: 					(yyval.node) = (PGNode *)a;
21097: 				;}
21098:     break;
21099: 
21100:   case 828:
21101: #line 2226 "third_party/libpg_query/grammar/statements/select.y"
21102:     {
21103: 					PGSubLink *n = makeNode(PGSubLink);
21104: 					n->subLinkType = PG_EXISTS_SUBLINK;
21105: 					n->subLinkId = 0;
21106: 					n->testexpr = NULL;
21107: 					n->operName = NIL;
21108: 					n->subselect = (yyvsp[(2) - (2)].node);
21109: 					n->location = (yylsp[(1) - (2)]);
21110: 					(yyval.node) = (PGNode *)n;
21111: 				;}
21112:     break;
21113: 
21114:   case 829:
21115: #line 2239 "third_party/libpg_query/grammar/statements/select.y"
21116:     {
21117: 					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
21118: 				;}
21119:     break;
21120: 
21121:   case 830:
21122: #line 2243 "third_party/libpg_query/grammar/statements/select.y"
21123:     {
21124: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (5)].list), (yyvsp[(3) - (5)].list), (yylsp[(1) - (5)]));
21125: 					n->agg_order = (yyvsp[(4) - (5)].list);
21126: 					(yyval.node) = (PGNode *)n;
21127: 				;}
21128:     break;
21129: 
21130:   case 831:
21131: #line 2249 "third_party/libpg_query/grammar/statements/select.y"
21132:     {
21133: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), list_make1((yyvsp[(4) - (6)].node)), (yylsp[(1) - (6)]));
21134: 					n->func_variadic = true;
21135: 					n->agg_order = (yyvsp[(5) - (6)].list);
21136: 					(yyval.node) = (PGNode *)n;
21137: 				;}
21138:     break;
21139: 
21140:   case 832:
21141: #line 2256 "third_party/libpg_query/grammar/statements/select.y"
21142:     {
21143: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (8)].list), lappend((yyvsp[(3) - (8)].list), (yyvsp[(6) - (8)].node)), (yylsp[(1) - (8)]));
21144: 					n->func_variadic = true;
21145: 					n->agg_order = (yyvsp[(7) - (8)].list);
21146: 					(yyval.node) = (PGNode *)n;
21147: 				;}
21148:     break;
21149: 
21150:   case 833:
21151: #line 2263 "third_party/libpg_query/grammar/statements/select.y"
21152:     {
21153: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(4) - (6)].list), (yylsp[(1) - (6)]));
21154: 					n->agg_order = (yyvsp[(5) - (6)].list);
21155: 					/* Ideally we'd mark the PGFuncCall node to indicate
21156: 					 * "must be an aggregate", but there's no provision
21157: 					 * for that in PGFuncCall at the moment.
21158: 					 */
21159: 					(yyval.node) = (PGNode *)n;
21160: 				;}
21161:     break;
21162: 
21163:   case 834:
21164: #line 2273 "third_party/libpg_query/grammar/statements/select.y"
21165:     {
21166: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(4) - (6)].list), (yylsp[(1) - (6)]));
21167: 					n->agg_order = (yyvsp[(5) - (6)].list);
21168: 					n->agg_distinct = true;
21169: 					(yyval.node) = (PGNode *)n;
21170: 				;}
21171:     break;
21172: 
21173:   case 835:
21174: #line 2280 "third_party/libpg_query/grammar/statements/select.y"
21175:     {
21176: 					/*
21177: 					 * We consider AGGREGATE(*) to invoke a parameterless
21178: 					 * aggregate.  This does the right thing for COUNT(*),
21179: 					 * and there are no other aggregates in SQL that accept
21180: 					 * '*' as parameter.
21181: 					 *
21182: 					 * The PGFuncCall node is also marked agg_star = true,
21183: 					 * so that later processing can detect what the argument
21184: 					 * really was.
21185: 					 */
21186: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (4)].list), NIL, (yylsp[(1) - (4)]));
21187: 					n->agg_star = true;
21188: 					(yyval.node) = (PGNode *)n;
21189: 				;}
21190:     break;
21191: 
21192:   case 836:
21193: #line 2308 "third_party/libpg_query/grammar/statements/select.y"
21194:     {
21195: 					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (4)].node);
21196: 					/*
21197: 					 * The order clause for WITHIN GROUP and the one for
21198: 					 * plain-aggregate ORDER BY share a field, so we have to
21199: 					 * check here that at most one is present.  We also check
21200: 					 * for DISTINCT and VARIADIC here to give a better error
21201: 					 * location.  Other consistency checks are deferred to
21202: 					 * parse analysis.
21203: 					 */
21204: 					if ((yyvsp[(2) - (4)].list) != NIL)
21205: 					{
21206: 						if (n->agg_order != NIL)
21207: 							ereport(ERROR,
21208: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
21209: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
21210: 									 parser_errposition((yylsp[(2) - (4)]))));
21211: 						if (n->agg_distinct)
21212: 							ereport(ERROR,
21213: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
21214: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
21215: 									 parser_errposition((yylsp[(2) - (4)]))));
21216: 						if (n->func_variadic)
21217: 							ereport(ERROR,
21218: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
21219: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
21220: 									 parser_errposition((yylsp[(2) - (4)]))));
21221: 						n->agg_order = (yyvsp[(2) - (4)].list);
21222: 						n->agg_within_group = true;
21223: 					}
21224: 					n->agg_filter = (yyvsp[(3) - (4)].node);
21225: 					n->over = (yyvsp[(4) - (4)].windef);
21226: 					(yyval.node) = (PGNode *) n;
21227: 				;}
21228:     break;
21229: 
21230:   case 837:
21231: #line 2343 "third_party/libpg_query/grammar/statements/select.y"
21232:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21233:     break;
21234: 
21235:   case 838:
21236: #line 2353 "third_party/libpg_query/grammar/statements/select.y"
21237:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21238:     break;
21239: 
21240:   case 839:
21241: #line 2354 "third_party/libpg_query/grammar/statements/select.y"
21242:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21243:     break;
21244: 
21245:   case 840:
21246: #line 2362 "third_party/libpg_query/grammar/statements/select.y"
21247:     {
21248: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
21249: 											   list_make1((yyvsp[(4) - (5)].node)),
21250: 											   (yylsp[(1) - (5)]));
21251: 				;}
21252:     break;
21253: 
21254:   case 841:
21255: #line 2368 "third_party/libpg_query/grammar/statements/select.y"
21256:     {
21257: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[(1) - (1)]));
21258: 				;}
21259:     break;
21260: 
21261:   case 842:
21262: #line 2372 "third_party/libpg_query/grammar/statements/select.y"
21263:     {
21264: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[(1) - (1)]));
21265: 				;}
21266:     break;
21267: 
21268:   case 843:
21269: #line 2376 "third_party/libpg_query/grammar/statements/select.y"
21270:     {
21271: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
21272: 				;}
21273:     break;
21274: 
21275:   case 844:
21276: #line 2380 "third_party/libpg_query/grammar/statements/select.y"
21277:     {
21278: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[(1) - (1)]));
21279: 				;}
21280:     break;
21281: 
21282:   case 845:
21283: #line 2384 "third_party/libpg_query/grammar/statements/select.y"
21284:     {
21285: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
21286: 				;}
21287:     break;
21288: 
21289:   case 846:
21290: #line 2388 "third_party/libpg_query/grammar/statements/select.y"
21291:     {
21292: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[(1) - (1)]));
21293: 				;}
21294:     break;
21295: 
21296:   case 847:
21297: #line 2392 "third_party/libpg_query/grammar/statements/select.y"
21298:     {
21299: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
21300: 				;}
21301:     break;
21302: 
21303:   case 848:
21304: #line 2396 "third_party/libpg_query/grammar/statements/select.y"
21305:     {
21306: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[(1) - (1)]));
21307: 				;}
21308:     break;
21309: 
21310:   case 849:
21311: #line 2400 "third_party/libpg_query/grammar/statements/select.y"
21312:     {
21313: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
21314: 				;}
21315:     break;
21316: 
21317:   case 850:
21318: #line 2404 "third_party/libpg_query/grammar/statements/select.y"
21319:     {
21320: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[(1) - (1)]));
21321: 				;}
21322:     break;
21323: 
21324:   case 851:
21325: #line 2408 "third_party/libpg_query/grammar/statements/select.y"
21326:     {
21327: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[(1) - (1)]));
21328: 				;}
21329:     break;
21330: 
21331:   case 852:
21332: #line 2412 "third_party/libpg_query/grammar/statements/select.y"
21333:     {
21334: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[(1) - (1)]));
21335: 				;}
21336:     break;
21337: 
21338:   case 853:
21339: #line 2416 "third_party/libpg_query/grammar/statements/select.y"
21340:     {
21341: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[(1) - (1)]));
21342: 				;}
21343:     break;
21344: 
21345:   case 854:
21346: #line 2420 "third_party/libpg_query/grammar/statements/select.y"
21347:     {
21348: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[(1) - (1)]));
21349: 				;}
21350:     break;
21351: 
21352:   case 855:
21353: #line 2424 "third_party/libpg_query/grammar/statements/select.y"
21354:     {
21355: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[(1) - (1)]));
21356: 				;}
21357:     break;
21358: 
21359:   case 856:
21360: #line 2428 "third_party/libpg_query/grammar/statements/select.y"
21361:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
21362:     break;
21363: 
21364:   case 857:
21365: #line 2430 "third_party/libpg_query/grammar/statements/select.y"
21366:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
21367:     break;
21368: 
21369:   case 858:
21370: #line 2432 "third_party/libpg_query/grammar/statements/select.y"
21371:     {
21372: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21373: 				;}
21374:     break;
21375: 
21376:   case 859:
21377: #line 2436 "third_party/libpg_query/grammar/statements/select.y"
21378:     {
21379: 					/* overlay(A PLACING B FROM C FOR D) is converted to
21380: 					 * overlay(A, B, C, D)
21381: 					 * overlay(A PLACING B FROM C) is converted to
21382: 					 * overlay(A, B, C)
21383: 					 */
21384: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21385: 				;}
21386:     break;
21387: 
21388:   case 860:
21389: #line 2445 "third_party/libpg_query/grammar/statements/select.y"
21390:     {
21391: 					/* position(A in B) is converted to position(B, A) */
21392: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21393: 				;}
21394:     break;
21395: 
21396:   case 861:
21397: #line 2450 "third_party/libpg_query/grammar/statements/select.y"
21398:     {
21399: 					/* substring(A from B for C) is converted to
21400: 					 * substring(A, B, C) - thomas 2000-11-28
21401: 					 */
21402: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21403: 				;}
21404:     break;
21405: 
21406:   case 862:
21407: #line 2457 "third_party/libpg_query/grammar/statements/select.y"
21408:     {
21409: 					/* TREAT(expr AS target) converts expr of a particular type to target,
21410: 					 * which is defined to be a subtype of the original expression.
21411: 					 * In SQL99, this is intended for use with structured UDTs,
21412: 					 * but let's make this a generally useful form allowing stronger
21413: 					 * coercions than are handled by implicit casting.
21414: 					 *
21415: 					 * Convert SystemTypeName() to SystemFuncName() even though
21416: 					 * at the moment they result in the same thing.
21417: 					 */
21418: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
21419: 												list_make1((yyvsp[(3) - (6)].node)),
21420: 												(yylsp[(1) - (6)]));
21421: 				;}
21422:     break;
21423: 
21424:   case 863:
21425: #line 2472 "third_party/libpg_query/grammar/statements/select.y"
21426:     {
21427: 					/* various trim expressions are defined in SQL
21428: 					 * - thomas 1997-07-19
21429: 					 */
21430: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21431: 				;}
21432:     break;
21433: 
21434:   case 864:
21435: #line 2479 "third_party/libpg_query/grammar/statements/select.y"
21436:     {
21437: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21438: 				;}
21439:     break;
21440: 
21441:   case 865:
21442: #line 2483 "third_party/libpg_query/grammar/statements/select.y"
21443:     {
21444: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
21445: 				;}
21446:     break;
21447: 
21448:   case 866:
21449: #line 2487 "third_party/libpg_query/grammar/statements/select.y"
21450:     {
21451: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21452: 				;}
21453:     break;
21454: 
21455:   case 867:
21456: #line 2491 "third_party/libpg_query/grammar/statements/select.y"
21457:     {
21458: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
21459: 				;}
21460:     break;
21461: 
21462:   case 868:
21463: #line 2495 "third_party/libpg_query/grammar/statements/select.y"
21464:     {
21465: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
21466: 					c->args = (yyvsp[(3) - (4)].list);
21467: 					c->location = (yylsp[(1) - (4)]);
21468: 					(yyval.node) = (PGNode *)c;
21469: 				;}
21470:     break;
21471: 
21472:   case 869:
21473: #line 2508 "third_party/libpg_query/grammar/statements/select.y"
21474:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
21475:     break;
21476: 
21477:   case 870:
21478: #line 2509 "third_party/libpg_query/grammar/statements/select.y"
21479:     { (yyval.list) = NIL; ;}
21480:     break;
21481: 
21482:   case 871:
21483: #line 2513 "third_party/libpg_query/grammar/statements/select.y"
21484:     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
21485:     break;
21486: 
21487:   case 872:
21488: #line 2514 "third_party/libpg_query/grammar/statements/select.y"
21489:     { (yyval.node) = NULL; ;}
21490:     break;
21491: 
21492:   case 873:
21493: #line 2522 "third_party/libpg_query/grammar/statements/select.y"
21494:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
21495:     break;
21496: 
21497:   case 874:
21498: #line 2523 "third_party/libpg_query/grammar/statements/select.y"
21499:     { (yyval.list) = NIL; ;}
21500:     break;
21501: 
21502:   case 875:
21503: #line 2527 "third_party/libpg_query/grammar/statements/select.y"
21504:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
21505:     break;
21506: 
21507:   case 876:
21508: #line 2529 "third_party/libpg_query/grammar/statements/select.y"
21509:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
21510:     break;
21511: 
21512:   case 877:
21513: #line 2534 "third_party/libpg_query/grammar/statements/select.y"
21514:     {
21515: 					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
21516: 					n->name = (yyvsp[(1) - (3)].str);
21517: 					(yyval.windef) = n;
21518: 				;}
21519:     break;
21520: 
21521:   case 878:
21522: #line 2542 "third_party/libpg_query/grammar/statements/select.y"
21523:     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
21524:     break;
21525: 
21526:   case 879:
21527: #line 2544 "third_party/libpg_query/grammar/statements/select.y"
21528:     {
21529: 					PGWindowDef *n = makeNode(PGWindowDef);
21530: 					n->name = (yyvsp[(2) - (2)].str);
21531: 					n->refname = NULL;
21532: 					n->partitionClause = NIL;
21533: 					n->orderClause = NIL;
21534: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
21535: 					n->startOffset = NULL;
21536: 					n->endOffset = NULL;
21537: 					n->location = (yylsp[(2) - (2)]);
21538: 					(yyval.windef) = n;
21539: 				;}
21540:     break;
21541: 
21542:   case 880:
21543: #line 2557 "third_party/libpg_query/grammar/statements/select.y"
21544:     { (yyval.windef) = NULL; ;}
21545:     break;
21546: 
21547:   case 881:
21548: #line 2562 "third_party/libpg_query/grammar/statements/select.y"
21549:     {
21550: 					PGWindowDef *n = makeNode(PGWindowDef);
21551: 					n->name = NULL;
21552: 					n->refname = (yyvsp[(2) - (6)].str);
21553: 					n->partitionClause = (yyvsp[(3) - (6)].list);
21554: 					n->orderClause = (yyvsp[(4) - (6)].list);
21555: 					/* copy relevant fields of opt_frame_clause */
21556: 					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
21557: 					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
21558: 					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
21559: 					n->location = (yylsp[(1) - (6)]);
21560: 					(yyval.windef) = n;
21561: 				;}
21562:     break;
21563: 
21564:   case 882:
21565: #line 2587 "third_party/libpg_query/grammar/statements/select.y"
21566:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21567:     break;
21568: 
21569:   case 883:
21570: #line 2588 "third_party/libpg_query/grammar/statements/select.y"
21571:     { (yyval.str) = NULL; ;}
21572:     break;
21573: 
21574:   case 884:
21575: #line 2591 "third_party/libpg_query/grammar/statements/select.y"
21576:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
21577:     break;
21578: 
21579:   case 885:
21580: #line 2592 "third_party/libpg_query/grammar/statements/select.y"
21581:     { (yyval.list) = NIL; ;}
21582:     break;
21583: 
21584:   case 886:
21585: #line 2604 "third_party/libpg_query/grammar/statements/select.y"
21586:     {
21587: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
21588: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
21589: 					(yyval.windef) = n;
21590: 				;}
21591:     break;
21592: 
21593:   case 887:
21594: #line 2610 "third_party/libpg_query/grammar/statements/select.y"
21595:     {
21596: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
21597: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
21598: 					(yyval.windef) = n;
21599: 				;}
21600:     break;
21601: 
21602:   case 888:
21603: #line 2616 "third_party/libpg_query/grammar/statements/select.y"
21604:     {
21605: 					PGWindowDef *n = makeNode(PGWindowDef);
21606: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
21607: 					n->startOffset = NULL;
21608: 					n->endOffset = NULL;
21609: 					(yyval.windef) = n;
21610: 				;}
21611:     break;
21612: 
21613:   case 889:
21614: #line 2626 "third_party/libpg_query/grammar/statements/select.y"
21615:     {
21616: 					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
21617: 					/* reject invalid cases */
21618: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
21619: 						ereport(ERROR,
21620: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21621: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
21622: 								 parser_errposition((yylsp[(1) - (1)]))));
21623: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
21624: 						ereport(ERROR,
21625: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21626: 								 errmsg("frame starting from following row cannot end with current row"),
21627: 								 parser_errposition((yylsp[(1) - (1)]))));
21628: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
21629: 					(yyval.windef) = n;
21630: 				;}
21631:     break;
21632: 
21633:   case 890:
21634: #line 2643 "third_party/libpg_query/grammar/statements/select.y"
21635:     {
21636: 					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
21637: 					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
21638: 					/* form merged options */
21639: 					int		frameOptions = n1->frameOptions;
21640: 					/* shift converts START_ options to END_ options */
21641: 					frameOptions |= n2->frameOptions << 1;
21642: 					frameOptions |= FRAMEOPTION_BETWEEN;
21643: 					/* reject invalid cases */
21644: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
21645: 						ereport(ERROR,
21646: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21647: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
21648: 								 parser_errposition((yylsp[(2) - (4)]))));
21649: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
21650: 						ereport(ERROR,
21651: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21652: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
21653: 								 parser_errposition((yylsp[(4) - (4)]))));
21654: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
21655: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
21656: 						ereport(ERROR,
21657: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21658: 								 errmsg("frame starting from current row cannot have preceding rows"),
21659: 								 parser_errposition((yylsp[(4) - (4)]))));
21660: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
21661: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
21662: 										 FRAMEOPTION_END_CURRENT_ROW)))
21663: 						ereport(ERROR,
21664: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
21665: 								 errmsg("frame starting from following row cannot have preceding rows"),
21666: 								 parser_errposition((yylsp[(4) - (4)]))));
21667: 					n1->frameOptions = frameOptions;
21668: 					n1->endOffset = n2->startOffset;
21669: 					(yyval.windef) = n1;
21670: 				;}
21671:     break;
21672: 
21673:   case 891:
21674: #line 2688 "third_party/libpg_query/grammar/statements/select.y"
21675:     {
21676: 					PGWindowDef *n = makeNode(PGWindowDef);
21677: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
21678: 					n->startOffset = NULL;
21679: 					n->endOffset = NULL;
21680: 					(yyval.windef) = n;
21681: 				;}
21682:     break;
21683: 
21684:   case 892:
21685: #line 2696 "third_party/libpg_query/grammar/statements/select.y"
21686:     {
21687: 					PGWindowDef *n = makeNode(PGWindowDef);
21688: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
21689: 					n->startOffset = NULL;
21690: 					n->endOffset = NULL;
21691: 					(yyval.windef) = n;
21692: 				;}
21693:     break;
21694: 
21695:   case 893:
21696: #line 2704 "third_party/libpg_query/grammar/statements/select.y"
21697:     {
21698: 					PGWindowDef *n = makeNode(PGWindowDef);
21699: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
21700: 					n->startOffset = NULL;
21701: 					n->endOffset = NULL;
21702: 					(yyval.windef) = n;
21703: 				;}
21704:     break;
21705: 
21706:   case 894:
21707: #line 2712 "third_party/libpg_query/grammar/statements/select.y"
21708:     {
21709: 					PGWindowDef *n = makeNode(PGWindowDef);
21710: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
21711: 					n->startOffset = (yyvsp[(1) - (2)].node);
21712: 					n->endOffset = NULL;
21713: 					(yyval.windef) = n;
21714: 				;}
21715:     break;
21716: 
21717:   case 895:
21718: #line 2720 "third_party/libpg_query/grammar/statements/select.y"
21719:     {
21720: 					PGWindowDef *n = makeNode(PGWindowDef);
21721: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
21722: 					n->startOffset = (yyvsp[(1) - (2)].node);
21723: 					n->endOffset = NULL;
21724: 					(yyval.windef) = n;
21725: 				;}
21726:     break;
21727: 
21728:   case 896:
21729: #line 2740 "third_party/libpg_query/grammar/statements/select.y"
21730:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21731:     break;
21732: 
21733:   case 897:
21734: #line 2741 "third_party/libpg_query/grammar/statements/select.y"
21735:     { (yyval.list) = NIL; ;}
21736:     break;
21737: 
21738:   case 898:
21739: #line 2744 "third_party/libpg_query/grammar/statements/select.y"
21740:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
21741:     break;
21742: 
21743:   case 899:
21744: #line 2745 "third_party/libpg_query/grammar/statements/select.y"
21745:     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
21746:     break;
21747: 
21748:   case 900:
21749: #line 2749 "third_party/libpg_query/grammar/statements/select.y"
21750:     {
21751: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21752: 		na->name = (yyvsp[(1) - (3)].str);
21753: 		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21754: 		na->argnumber = -1;
21755: 		na->location = (yylsp[(1) - (3)]);
21756: 		(yyval.node) = (PGNode *) na;
21757: 	;}
21758:     break;
21759: 
21760:   case 901:
21761: #line 2759 "third_party/libpg_query/grammar/statements/select.y"
21762:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
21763:     break;
21764: 
21765:   case 902:
21766: #line 2760 "third_party/libpg_query/grammar/statements/select.y"
21767:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
21768:     break;
21769: 
21770:   case 903:
21771: #line 2762 "third_party/libpg_query/grammar/statements/select.y"
21772:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
21773:     break;
21774: 
21775:   case 904:
21776: #line 2763 "third_party/libpg_query/grammar/statements/select.y"
21777:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
21778:     break;
21779: 
21780:   case 905:
21781: #line 2764 "third_party/libpg_query/grammar/statements/select.y"
21782:     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
21783:     break;
21784: 
21785:   case 906:
21786: #line 2767 "third_party/libpg_query/grammar/statements/select.y"
21787:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
21788:     break;
21789: 
21790:   case 907:
21791: #line 2768 "third_party/libpg_query/grammar/statements/select.y"
21792:     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
21793:     break;
21794: 
21795:   case 908:
21796: #line 2771 "third_party/libpg_query/grammar/statements/select.y"
21797:     { (yyval.conststr) = "+"; ;}
21798:     break;
21799: 
21800:   case 909:
21801: #line 2772 "third_party/libpg_query/grammar/statements/select.y"
21802:     { (yyval.conststr) = "-"; ;}
21803:     break;
21804: 
21805:   case 910:
21806: #line 2773 "third_party/libpg_query/grammar/statements/select.y"
21807:     { (yyval.conststr) = "*"; ;}
21808:     break;
21809: 
21810:   case 911:
21811: #line 2774 "third_party/libpg_query/grammar/statements/select.y"
21812:     { (yyval.conststr) = "/"; ;}
21813:     break;
21814: 
21815:   case 912:
21816: #line 2775 "third_party/libpg_query/grammar/statements/select.y"
21817:     { (yyval.conststr) = "%"; ;}
21818:     break;
21819: 
21820:   case 913:
21821: #line 2776 "third_party/libpg_query/grammar/statements/select.y"
21822:     { (yyval.conststr) = "^"; ;}
21823:     break;
21824: 
21825:   case 914:
21826: #line 2777 "third_party/libpg_query/grammar/statements/select.y"
21827:     { (yyval.conststr) = "<"; ;}
21828:     break;
21829: 
21830:   case 915:
21831: #line 2778 "third_party/libpg_query/grammar/statements/select.y"
21832:     { (yyval.conststr) = ">"; ;}
21833:     break;
21834: 
21835:   case 916:
21836: #line 2779 "third_party/libpg_query/grammar/statements/select.y"
21837:     { (yyval.conststr) = "="; ;}
21838:     break;
21839: 
21840:   case 917:
21841: #line 2780 "third_party/libpg_query/grammar/statements/select.y"
21842:     { (yyval.conststr) = "<="; ;}
21843:     break;
21844: 
21845:   case 918:
21846: #line 2781 "third_party/libpg_query/grammar/statements/select.y"
21847:     { (yyval.conststr) = ">="; ;}
21848:     break;
21849: 
21850:   case 919:
21851: #line 2782 "third_party/libpg_query/grammar/statements/select.y"
21852:     { (yyval.conststr) = "<>"; ;}
21853:     break;
21854: 
21855:   case 920:
21856: #line 2786 "third_party/libpg_query/grammar/statements/select.y"
21857:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21858:     break;
21859: 
21860:   case 921:
21861: #line 2788 "third_party/libpg_query/grammar/statements/select.y"
21862:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21863:     break;
21864: 
21865:   case 922:
21866: #line 2793 "third_party/libpg_query/grammar/statements/select.y"
21867:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21868:     break;
21869: 
21870:   case 923:
21871: #line 2795 "third_party/libpg_query/grammar/statements/select.y"
21872:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21873:     break;
21874: 
21875:   case 924:
21876: #line 2800 "third_party/libpg_query/grammar/statements/select.y"
21877:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21878:     break;
21879: 
21880:   case 925:
21881: #line 2802 "third_party/libpg_query/grammar/statements/select.y"
21882:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
21883:     break;
21884: 
21885:   case 926:
21886: #line 2804 "third_party/libpg_query/grammar/statements/select.y"
21887:     { (yyval.list) = list_make1(makeString("~~")); ;}
21888:     break;
21889: 
21890:   case 927:
21891: #line 2806 "third_party/libpg_query/grammar/statements/select.y"
21892:     { (yyval.list) = list_make1(makeString("!~~")); ;}
21893:     break;
21894: 
21895:   case 928:
21896: #line 2808 "third_party/libpg_query/grammar/statements/select.y"
21897:     { (yyval.list) = list_make1(makeString("~~~")); ;}
21898:     break;
21899: 
21900:   case 929:
21901: #line 2810 "third_party/libpg_query/grammar/statements/select.y"
21902:     { (yyval.list) = list_make1(makeString("!~~~")); ;}
21903:     break;
21904: 
21905:   case 930:
21906: #line 2812 "third_party/libpg_query/grammar/statements/select.y"
21907:     { (yyval.list) = list_make1(makeString("~~*")); ;}
21908:     break;
21909: 
21910:   case 931:
21911: #line 2814 "third_party/libpg_query/grammar/statements/select.y"
21912:     { (yyval.list) = list_make1(makeString("!~~*")); ;}
21913:     break;
21914: 
21915:   case 932:
21916: #line 2828 "third_party/libpg_query/grammar/statements/select.y"
21917:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
21918:     break;
21919: 
21920:   case 933:
21921: #line 2830 "third_party/libpg_query/grammar/statements/select.y"
21922:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
21923:     break;
21924: 
21925:   case 934:
21926: #line 2834 "third_party/libpg_query/grammar/statements/select.y"
21927:     {
21928: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
21929: 				;}
21930:     break;
21931: 
21932:   case 935:
21933: #line 2838 "third_party/libpg_query/grammar/statements/select.y"
21934:     {
21935: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
21936: 				;}
21937:     break;
21938: 
21939:   case 936:
21940: #line 2845 "third_party/libpg_query/grammar/statements/select.y"
21941:     {
21942: 					(yyval.list) = (yyvsp[(1) - (1)].list);
21943: 				;}
21944:     break;
21945: 
21946:   case 937:
21947: #line 2849 "third_party/libpg_query/grammar/statements/select.y"
21948:     {
21949: 					(yyval.list) = NULL;
21950: 				;}
21951:     break;
21952: 
21953:   case 938:
21954: #line 2857 "third_party/libpg_query/grammar/statements/select.y"
21955:     {
21956: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
21957: 				;}
21958:     break;
21959: 
21960:   case 939:
21961: #line 2861 "third_party/libpg_query/grammar/statements/select.y"
21962:     {
21963: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
21964: 				;}
21965:     break;
21966: 
21967:   case 940:
21968: #line 2867 "third_party/libpg_query/grammar/statements/select.y"
21969:     {
21970: 					(yyval.node) = (yyvsp[(1) - (1)].node);
21971: 				;}
21972:     break;
21973: 
21974:   case 941:
21975: #line 2871 "third_party/libpg_query/grammar/statements/select.y"
21976:     {
21977: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21978: 					na->name = (yyvsp[(1) - (3)].str);
21979: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21980: 					na->argnumber = -1;		/* until determined */
21981: 					na->location = (yylsp[(1) - (3)]);
21982: 					(yyval.node) = (PGNode *) na;
21983: 				;}
21984:     break;
21985: 
21986:   case 942:
21987: #line 2880 "third_party/libpg_query/grammar/statements/select.y"
21988:     {
21989: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
21990: 					na->name = (yyvsp[(1) - (3)].str);
21991: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
21992: 					na->argnumber = -1;		/* until determined */
21993: 					na->location = (yylsp[(1) - (3)]);
21994: 					(yyval.node) = (PGNode *) na;
21995: 				;}
21996:     break;
21997: 
21998:   case 943:
21999: #line 2890 "third_party/libpg_query/grammar/statements/select.y"
22000:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
22001:     break;
22002: 
22003:   case 944:
22004: #line 2891 "third_party/libpg_query/grammar/statements/select.y"
22005:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
22006:     break;
22007: 
22008:   case 945:
22009: #line 2896 "third_party/libpg_query/grammar/statements/select.y"
22010:     {
22011: 					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
22012: 				;}
22013:     break;
22014: 
22015:   case 946:
22016: #line 2899 "third_party/libpg_query/grammar/statements/select.y"
22017:     { (yyval.list) = NIL; ;}
22018:     break;
22019: 
22020:   case 947:
22021: #line 2906 "third_party/libpg_query/grammar/statements/select.y"
22022:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22023:     break;
22024: 
22025:   case 948:
22026: #line 2907 "third_party/libpg_query/grammar/statements/select.y"
22027:     { (yyval.str) = (char*) "year"; ;}
22028:     break;
22029: 
22030:   case 949:
22031: #line 2908 "third_party/libpg_query/grammar/statements/select.y"
22032:     { (yyval.str) = (char*) "month"; ;}
22033:     break;
22034: 
22035:   case 950:
22036: #line 2909 "third_party/libpg_query/grammar/statements/select.y"
22037:     { (yyval.str) = (char*) "day"; ;}
22038:     break;
22039: 
22040:   case 951:
22041: #line 2910 "third_party/libpg_query/grammar/statements/select.y"
22042:     { (yyval.str) = (char*) "hour"; ;}
22043:     break;
22044: 
22045:   case 952:
22046: #line 2911 "third_party/libpg_query/grammar/statements/select.y"
22047:     { (yyval.str) = (char*) "minute"; ;}
22048:     break;
22049: 
22050:   case 953:
22051: #line 2912 "third_party/libpg_query/grammar/statements/select.y"
22052:     { (yyval.str) = (char*) "second"; ;}
22053:     break;
22054: 
22055:   case 954:
22056: #line 2913 "third_party/libpg_query/grammar/statements/select.y"
22057:     { (yyval.str) = (char*) "millisecond"; ;}
22058:     break;
22059: 
22060:   case 955:
22061: #line 2914 "third_party/libpg_query/grammar/statements/select.y"
22062:     { (yyval.str) = (char*) "microsecond"; ;}
22063:     break;
22064: 
22065:   case 956:
22066: #line 2915 "third_party/libpg_query/grammar/statements/select.y"
22067:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22068:     break;
22069: 
22070:   case 957:
22071: #line 2926 "third_party/libpg_query/grammar/statements/select.y"
22072:     {
22073: 					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
22074: 				;}
22075:     break;
22076: 
22077:   case 958:
22078: #line 2930 "third_party/libpg_query/grammar/statements/select.y"
22079:     {
22080: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
22081: 				;}
22082:     break;
22083: 
22084:   case 959:
22085: #line 2937 "third_party/libpg_query/grammar/statements/select.y"
22086:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
22087:     break;
22088: 
22089:   case 960:
22090: #line 2943 "third_party/libpg_query/grammar/statements/select.y"
22091:     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
22092:     break;
22093: 
22094:   case 961:
22095: #line 2944 "third_party/libpg_query/grammar/statements/select.y"
22096:     { (yyval.list) = NIL; ;}
22097:     break;
22098: 
22099:   case 962:
22100: #line 2961 "third_party/libpg_query/grammar/statements/select.y"
22101:     {
22102: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
22103: 				;}
22104:     break;
22105: 
22106:   case 963:
22107: #line 2965 "third_party/libpg_query/grammar/statements/select.y"
22108:     {
22109: 					/* not legal per SQL99, but might as well allow it */
22110: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
22111: 				;}
22112:     break;
22113: 
22114:   case 964:
22115: #line 2970 "third_party/libpg_query/grammar/statements/select.y"
22116:     {
22117: 					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
22118: 				;}
22119:     break;
22120: 
22121:   case 965:
22122: #line 2974 "third_party/libpg_query/grammar/statements/select.y"
22123:     {
22124: 					/*
22125: 					 * Since there are no cases where this syntax allows
22126: 					 * a textual FOR value, we forcibly cast the argument
22127: 					 * to int4.  The possible matches in pg_proc are
22128: 					 * substring(text,int4) and substring(text,text),
22129: 					 * and we don't want the parser to choose the latter,
22130: 					 * which it is likely to do if the second argument
22131: 					 * is unknown or doesn't have an implicit cast to int4.
22132: 					 */
22133: 					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
22134: 									makeTypeCast((yyvsp[(2) - (2)].node),
22135: 												 SystemTypeName("int4"), 0, -1));
22136: 				;}
22137:     break;
22138: 
22139:   case 966:
22140: #line 2989 "third_party/libpg_query/grammar/statements/select.y"
22141:     {
22142: 					(yyval.list) = (yyvsp[(1) - (1)].list);
22143: 				;}
22144:     break;
22145: 
22146:   case 967:
22147: #line 2993 "third_party/libpg_query/grammar/statements/select.y"
22148:     { (yyval.list) = NIL; ;}
22149:     break;
22150: 
22151:   case 968:
22152: #line 2997 "third_party/libpg_query/grammar/statements/select.y"
22153:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
22154:     break;
22155: 
22156:   case 969:
22157: #line 3000 "third_party/libpg_query/grammar/statements/select.y"
22158:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
22159:     break;
22160: 
22161:   case 970:
22162: #line 3003 "third_party/libpg_query/grammar/statements/select.y"
22163:     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
22164:     break;
22165: 
22166:   case 971:
22167: #line 3004 "third_party/libpg_query/grammar/statements/select.y"
22168:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
22169:     break;
22170: 
22171:   case 972:
22172: #line 3005 "third_party/libpg_query/grammar/statements/select.y"
22173:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
22174:     break;
22175: 
22176:   case 973:
22177: #line 3009 "third_party/libpg_query/grammar/statements/select.y"
22178:     {
22179: 					PGSubLink *n = makeNode(PGSubLink);
22180: 					n->subselect = (yyvsp[(1) - (1)].node);
22181: 					/* other fields will be filled later */
22182: 					(yyval.node) = (PGNode *)n;
22183: 				;}
22184:     break;
22185: 
22186:   case 974:
22187: #line 3015 "third_party/libpg_query/grammar/statements/select.y"
22188:     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
22189:     break;
22190: 
22191:   case 975:
22192: #line 3026 "third_party/libpg_query/grammar/statements/select.y"
22193:     {
22194: 					PGCaseExpr *c = makeNode(PGCaseExpr);
22195: 					c->casetype = InvalidOid; /* not analyzed yet */
22196: 					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
22197: 					c->args = (yyvsp[(3) - (5)].list);
22198: 					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
22199: 					c->location = (yylsp[(1) - (5)]);
22200: 					(yyval.node) = (PGNode *)c;
22201: 				;}
22202:     break;
22203: 
22204:   case 976:
22205: #line 3039 "third_party/libpg_query/grammar/statements/select.y"
22206:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
22207:     break;
22208: 
22209:   case 977:
22210: #line 3040 "third_party/libpg_query/grammar/statements/select.y"
22211:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
22212:     break;
22213: 
22214:   case 978:
22215: #line 3045 "third_party/libpg_query/grammar/statements/select.y"
22216:     {
22217: 					PGCaseWhen *w = makeNode(PGCaseWhen);
22218: 					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
22219: 					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
22220: 					w->location = (yylsp[(1) - (4)]);
22221: 					(yyval.node) = (PGNode *)w;
22222: 				;}
22223:     break;
22224: 
22225:   case 979:
22226: #line 3055 "third_party/libpg_query/grammar/statements/select.y"
22227:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
22228:     break;
22229: 
22230:   case 980:
22231: #line 3056 "third_party/libpg_query/grammar/statements/select.y"
22232:     { (yyval.node) = NULL; ;}
22233:     break;
22234: 
22235:   case 981:
22236: #line 3059 "third_party/libpg_query/grammar/statements/select.y"
22237:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22238:     break;
22239: 
22240:   case 982:
22241: #line 3060 "third_party/libpg_query/grammar/statements/select.y"
22242:     { (yyval.node) = NULL; ;}
22243:     break;
22244: 
22245:   case 983:
22246: #line 3064 "third_party/libpg_query/grammar/statements/select.y"
22247:     {
22248: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
22249: 				;}
22250:     break;
22251: 
22252:   case 984:
22253: #line 3068 "third_party/libpg_query/grammar/statements/select.y"
22254:     {
22255: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
22256: 				;}
22257:     break;
22258: 
22259:   case 985:
22260: #line 3075 "third_party/libpg_query/grammar/statements/select.y"
22261:     {
22262: 					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
22263: 				;}
22264:     break;
22265: 
22266:   case 986:
22267: #line 3079 "third_party/libpg_query/grammar/statements/select.y"
22268:     {
22269: 					PGAIndices *ai = makeNode(PGAIndices);
22270: 					ai->is_slice = false;
22271: 					ai->lidx = NULL;
22272: 					ai->uidx = (yyvsp[(2) - (3)].node);
22273: 					(yyval.node) = (PGNode *) ai;
22274: 				;}
22275:     break;
22276: 
22277:   case 987:
22278: #line 3087 "third_party/libpg_query/grammar/statements/select.y"
22279:     {
22280: 					PGAIndices *ai = makeNode(PGAIndices);
22281: 					ai->is_slice = true;
22282: 					ai->lidx = (yyvsp[(2) - (5)].node);
22283: 					ai->uidx = (yyvsp[(4) - (5)].node);
22284: 					(yyval.node) = (PGNode *) ai;
22285: 				;}
22286:     break;
22287: 
22288:   case 988:
22289: #line 3097 "third_party/libpg_query/grammar/statements/select.y"
22290:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22291:     break;
22292: 
22293:   case 989:
22294: #line 3098 "third_party/libpg_query/grammar/statements/select.y"
22295:     { (yyval.node) = NULL; ;}
22296:     break;
22297: 
22298:   case 990:
22299: #line 3102 "third_party/libpg_query/grammar/statements/select.y"
22300:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
22301:     break;
22302: 
22303:   case 991:
22304: #line 3103 "third_party/libpg_query/grammar/statements/select.y"
22305:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
22306:     break;
22307: 
22308:   case 992:
22309: #line 3107 "third_party/libpg_query/grammar/statements/select.y"
22310:     { (yyval.list) = NIL; ;}
22311:     break;
22312: 
22313:   case 993:
22314: #line 3108 "third_party/libpg_query/grammar/statements/select.y"
22315:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
22316:     break;
22317: 
22318:   case 996:
22319: #line 3122 "third_party/libpg_query/grammar/statements/select.y"
22320:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
22321:     break;
22322: 
22323:   case 997:
22324: #line 3123 "third_party/libpg_query/grammar/statements/select.y"
22325:     { (yyval.list) = NIL; ;}
22326:     break;
22327: 
22328:   case 998:
22329: #line 3127 "third_party/libpg_query/grammar/statements/select.y"
22330:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
22331:     break;
22332: 
22333:   case 999:
22334: #line 3128 "third_party/libpg_query/grammar/statements/select.y"
22335:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
22336:     break;
22337: 
22338:   case 1000:
22339: #line 3132 "third_party/libpg_query/grammar/statements/select.y"
22340:     {
22341: 					(yyval.target) = makeNode(PGResTarget);
22342: 					(yyval.target)->name = (yyvsp[(3) - (3)].str);
22343: 					(yyval.target)->indirection = NIL;
22344: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
22345: 					(yyval.target)->location = (yylsp[(1) - (3)]);
22346: 				;}
22347:     break;
22348: 
22349:   case 1001:
22350: #line 3148 "third_party/libpg_query/grammar/statements/select.y"
22351:     {
22352: 					(yyval.target) = makeNode(PGResTarget);
22353: 					(yyval.target)->name = (yyvsp[(2) - (2)].str);
22354: 					(yyval.target)->indirection = NIL;
22355: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
22356: 					(yyval.target)->location = (yylsp[(1) - (2)]);
22357: 				;}
22358:     break;
22359: 
22360:   case 1002:
22361: #line 3156 "third_party/libpg_query/grammar/statements/select.y"
22362:     {
22363: 					(yyval.target) = makeNode(PGResTarget);
22364: 					(yyval.target)->name = NULL;
22365: 					(yyval.target)->indirection = NIL;
22366: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
22367: 					(yyval.target)->location = (yylsp[(1) - (1)]);
22368: 				;}
22369:     break;
22370: 
22371:   case 1003:
22372: #line 3164 "third_party/libpg_query/grammar/statements/select.y"
22373:     {
22374: 					PGColumnRef *n = makeNode(PGColumnRef);
22375: 					PGAStar *star = makeNode(PGAStar);
22376: 					n->fields = list_make1(star);
22377: 					n->location = (yylsp[(1) - (3)]);
22378: 					star->except_list = (yyvsp[(2) - (3)].list);
22379: 					star->replace_list = (yyvsp[(3) - (3)].list);
22380: 
22381: 					(yyval.target) = makeNode(PGResTarget);
22382: 					(yyval.target)->name = NULL;
22383: 					(yyval.target)->indirection = NIL;
22384: 					(yyval.target)->val = (PGNode *)n;
22385: 					(yyval.target)->location = (yylsp[(1) - (3)]);
22386: 				;}
22387:     break;
22388: 
22389:   case 1004:
22390: #line 3179 "third_party/libpg_query/grammar/statements/select.y"
22391:     {
22392: 					PGColumnRef *n = makeNode(PGColumnRef);
22393: 					PGAStar *star = makeNode(PGAStar);
22394: 					n->fields = list_make1(star);
22395: 					n->location = (yylsp[(1) - (5)]);
22396: 					star->relation = (yyvsp[(1) - (5)].str);
22397: 					star->except_list = (yyvsp[(4) - (5)].list);
22398: 					star->replace_list = (yyvsp[(5) - (5)].list);
22399: 
22400: 					(yyval.target) = makeNode(PGResTarget);
22401: 					(yyval.target)->name = NULL;
22402: 					(yyval.target)->indirection = NIL;
22403: 					(yyval.target)->val = (PGNode *)n;
22404: 					(yyval.target)->location = (yylsp[(1) - (5)]);
22405: 				;}
22406:     break;
22407: 
22408:   case 1005:
22409: #line 3196 "third_party/libpg_query/grammar/statements/select.y"
22410:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22411:     break;
22412: 
22413:   case 1006:
22414: #line 3197 "third_party/libpg_query/grammar/statements/select.y"
22415:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
22416:     break;
22417: 
22418:   case 1007:
22419: #line 3200 "third_party/libpg_query/grammar/statements/select.y"
22420:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
22421:     break;
22422: 
22423:   case 1008:
22424: #line 3201 "third_party/libpg_query/grammar/statements/select.y"
22425:     { (yyval.list) = NULL; ;}
22426:     break;
22427: 
22428:   case 1009:
22429: #line 3204 "third_party/libpg_query/grammar/statements/select.y"
22430:     { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}
22431:     break;
22432: 
22433:   case 1010:
22434: #line 3208 "third_party/libpg_query/grammar/statements/select.y"
22435:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
22436:     break;
22437: 
22438:   case 1011:
22439: #line 3209 "third_party/libpg_query/grammar/statements/select.y"
22440:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
22441:     break;
22442: 
22443:   case 1012:
22444: #line 3212 "third_party/libpg_query/grammar/statements/select.y"
22445:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22446:     break;
22447: 
22448:   case 1013:
22449: #line 3213 "third_party/libpg_query/grammar/statements/select.y"
22450:     { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}
22451:     break;
22452: 
22453:   case 1014:
22454: #line 3214 "third_party/libpg_query/grammar/statements/select.y"
22455:     { (yyval.list) = NULL; ;}
22456:     break;
22457: 
22458:   case 1015:
22459: #line 3224 "third_party/libpg_query/grammar/statements/select.y"
22460:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
22461:     break;
22462: 
22463:   case 1016:
22464: #line 3225 "third_party/libpg_query/grammar/statements/select.y"
22465:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
22466:     break;
22467: 
22468:   case 1017:
22469: #line 3237 "third_party/libpg_query/grammar/statements/select.y"
22470:     {
22471: 					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22472: 				;}
22473:     break;
22474: 
22475:   case 1018:
22476: #line 3241 "third_party/libpg_query/grammar/statements/select.y"
22477:     {
22478: 					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
22479: 					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
22480: 					switch (list_length((yyvsp[(2) - (2)].list)))
22481: 					{
22482: 						case 1:
22483: 							(yyval.range)->catalogname = NULL;
22484: 							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
22485: 							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
22486: 							break;
22487: 						case 2:
22488: 							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
22489: 							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
22490: 							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
22491: 							break;
22492: 						default:
22493: 							ereport(ERROR,
22494: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22495: 									 errmsg("improper qualified name (too many dotted names): %s",
22496: 											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
22497: 									 parser_errposition((yylsp[(1) - (2)]))));
22498: 							break;
22499: 					}
22500: 				;}
22501:     break;
22502: 
22503:   case 1019:
22504: #line 3268 "third_party/libpg_query/grammar/statements/select.y"
22505:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22506:     break;
22507: 
22508:   case 1020:
22509: #line 3270 "third_party/libpg_query/grammar/statements/select.y"
22510:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
22511:     break;
22512: 
22513:   case 1021:
22514: #line 3274 "third_party/libpg_query/grammar/statements/select.y"
22515:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22516:     break;
22517: 
22518:   case 1022:
22519: #line 3276 "third_party/libpg_query/grammar/statements/select.y"
22520:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22521:     break;
22522: 
22523:   case 1023:
22524: #line 3287 "third_party/libpg_query/grammar/statements/select.y"
22525:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22526:     break;
22527: 
22528:   case 1024:
22529: #line 3290 "third_party/libpg_query/grammar/statements/select.y"
22530:     {
22531: 						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
22532: 											 yyscanner);
22533: 					;}
22534:     break;
22535: 
22536:   case 1025:
22537: #line 3301 "third_party/libpg_query/grammar/statements/select.y"
22538:     {
22539: 					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
22540: 				;}
22541:     break;
22542: 
22543:   case 1026:
22544: #line 3305 "third_party/libpg_query/grammar/statements/select.y"
22545:     {
22546: 					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22547: 				;}
22548:     break;
22549: 
22550:   case 1027:
22551: #line 3309 "third_party/libpg_query/grammar/statements/select.y"
22552:     {
22553: 					if ((yyvsp[(2) - (2)].list))
22554: 					{
22555: 						PGAIndirection *n = makeNode(PGAIndirection);
22556: 						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
22557: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
22558: 						(yyval.node) = (PGNode *) n;
22559: 					}
22560: 					else
22561: 						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
22562: 				;}
22563:     break;
22564: 
22565:   case 1028:
22566: #line 3321 "third_party/libpg_query/grammar/statements/select.y"
22567:     {
22568: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22569: 				;}
22570:     break;
22571: 
22572:   case 1029:
22573: #line 3325 "third_party/libpg_query/grammar/statements/select.y"
22574:     {
22575: 					/* This is a bit constant per SQL99:
22576: 					 * Without Feature F511, "BIT data type",
22577: 					 * a <general literal> shall not be a
22578: 					 * <bit string literal> or a <hex string literal>.
22579: 					 */
22580: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
22581: 				;}
22582:     break;
22583: 
22584:   case 1030:
22585: #line 3334 "third_party/libpg_query/grammar/statements/select.y"
22586:     {
22587: 					/* generic type 'literal' syntax */
22588: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
22589: 					t->location = (yylsp[(1) - (2)]);
22590: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
22591: 				;}
22592:     break;
22593: 
22594:   case 1031:
22595: #line 3341 "third_party/libpg_query/grammar/statements/select.y"
22596:     {
22597: 					/* generic syntax with a type modifier */
22598: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (6)].list));
22599: 					PGListCell *lc;
22600: 
22601: 					/*
22602: 					 * We must use func_arg_list and opt_sort_clause in the
22603: 					 * production to avoid reduce/reduce conflicts, but we
22604: 					 * don't actually wish to allow PGNamedArgExpr in this
22605: 					 * context, nor ORDER BY.
22606: 					 */
22607: 					foreach(lc, (yyvsp[(3) - (6)].list))
22608: 					{
22609: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
22610: 
22611: 						if (IsA(arg, PGNamedArgExpr))
22612: 							ereport(ERROR,
22613: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22614: 									 errmsg("type modifier cannot have parameter name"),
22615: 									 parser_errposition(arg->location)));
22616: 					}
22617: 					if ((yyvsp[(4) - (6)].list) != NIL)
22618: 							ereport(ERROR,
22619: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22620: 									 errmsg("type modifier cannot have ORDER BY"),
22621: 									 parser_errposition((yylsp[(4) - (6)]))));
22622: 
22623: 					t->typmods = (yyvsp[(3) - (6)].list);
22624: 					t->location = (yylsp[(1) - (6)]);
22625: 					(yyval.node) = makeStringConstCast((yyvsp[(6) - (6)].str), (yylsp[(6) - (6)]), t);
22626: 				;}
22627:     break;
22628: 
22629:   case 1032:
22630: #line 3373 "third_party/libpg_query/grammar/statements/select.y"
22631:     {
22632: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
22633: 				;}
22634:     break;
22635: 
22636:   case 1033:
22637: #line 3377 "third_party/libpg_query/grammar/statements/select.y"
22638:     {
22639: 					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
22640: 				;}
22641:     break;
22642: 
22643:   case 1034:
22644: #line 3381 "third_party/libpg_query/grammar/statements/select.y"
22645:     {
22646: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
22647: 				;}
22648:     break;
22649: 
22650:   case 1035:
22651: #line 3385 "third_party/libpg_query/grammar/statements/select.y"
22652:     {
22653: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
22654: 				;}
22655:     break;
22656: 
22657:   case 1036:
22658: #line 3389 "third_party/libpg_query/grammar/statements/select.y"
22659:     {
22660: 					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
22661: 				;}
22662:     break;
22663: 
22664:   case 1037:
22665: #line 3393 "third_party/libpg_query/grammar/statements/select.y"
22666:     {
22667: 					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
22668: 				;}
22669:     break;
22670: 
22671:   case 1038:
22672: #line 3397 "third_party/libpg_query/grammar/statements/select.y"
22673:     {
22674: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
22675: 				;}
22676:     break;
22677: 
22678:   case 1039:
22679: #line 3402 "third_party/libpg_query/grammar/statements/select.y"
22680:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
22681:     break;
22682: 
22683:   case 1040:
22684: #line 3403 "third_party/libpg_query/grammar/statements/select.y"
22685:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22686:     break;
22687: 
22688:   case 1041:
22689: #line 3419 "third_party/libpg_query/grammar/statements/select.y"
22690:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22691:     break;
22692: 
22693:   case 1042:
22694: #line 3420 "third_party/libpg_query/grammar/statements/select.y"
22695:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22696:     break;
22697: 
22698:   case 1043:
22699: #line 3421 "third_party/libpg_query/grammar/statements/select.y"
22700:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22701:     break;
22702: 
22703:   case 1044:
22704: #line 3424 "third_party/libpg_query/grammar/statements/select.y"
22705:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22706:     break;
22707: 
22708:   case 1045:
22709: #line 3425 "third_party/libpg_query/grammar/statements/select.y"
22710:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22711:     break;
22712: 
22713:   case 1046:
22714: #line 3431 "third_party/libpg_query/grammar/statements/select.y"
22715:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22716:     break;
22717: 
22718:   case 1047:
22719: #line 3432 "third_party/libpg_query/grammar/statements/select.y"
22720:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22721:     break;
22722: 
22723:   case 1048:
22724: #line 3433 "third_party/libpg_query/grammar/statements/select.y"
22725:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22726:     break;
22727: 
22728:   case 1049:
22729: #line 3436 "third_party/libpg_query/grammar/statements/select.y"
22730:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22731:     break;
22732: 
22733:   case 1050:
22734: #line 3437 "third_party/libpg_query/grammar/statements/select.y"
22735:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22736:     break;
22737: 
22738:   case 1051:
22739: #line 3438 "third_party/libpg_query/grammar/statements/select.y"
22740:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22741:     break;
22742: 
22743:   case 1052:
22744: #line 3441 "third_party/libpg_query/grammar/statements/select.y"
22745:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22746:     break;
22747: 
22748:   case 1053:
22749: #line 3442 "third_party/libpg_query/grammar/statements/select.y"
22750:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22751:     break;
22752: 
22753:   case 1054:
22754: #line 3443 "third_party/libpg_query/grammar/statements/select.y"
22755:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22756:     break;
22757: 
22758:   case 1055:
22759: #line 3446 "third_party/libpg_query/grammar/statements/select.y"
22760:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22761:     break;
22762: 
22763:   case 1056:
22764: #line 3447 "third_party/libpg_query/grammar/statements/select.y"
22765:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
22766:     break;
22767: 
22768:   case 1057:
22769: #line 3451 "third_party/libpg_query/grammar/statements/select.y"
22770:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
22771:     break;
22772: 
22773:   case 1058:
22774: #line 3453 "third_party/libpg_query/grammar/statements/select.y"
22775:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
22776:     break;
22777: 
22778:   case 1059:
22779: #line 3457 "third_party/libpg_query/grammar/statements/select.y"
22780:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
22781:     break;
22782: 
22783:   case 1060:
22784: #line 3458 "third_party/libpg_query/grammar/statements/select.y"
22785:     { (yyval.list) = NIL; ;}
22786:     break;
22787: 
22788:   case 1062:
22789: #line 3469 "third_party/libpg_query/grammar/statements/select.y"
22790:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22791:     break;
22792: 
22793:   case 1063:
22794: #line 3470 "third_party/libpg_query/grammar/statements/select.y"
22795:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22796:     break;
22797: 
22798:   case 1064:
22799: #line 3471 "third_party/libpg_query/grammar/statements/select.y"
22800:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22801:     break;
22802: 
22803:   case 1065:
22804: #line 3472 "third_party/libpg_query/grammar/statements/select.y"
22805:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
22806:     break;
22807: 
22808:   case 1066:
22809: #line 3475 "third_party/libpg_query/grammar/statements/select.y"
22810:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22811:     break;
22812: 
22813:   case 1067:
22814: #line 3476 "third_party/libpg_query/grammar/statements/select.y"
22815:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22816:     break;
22817: 
22818:   case 1068:
22819: #line 8 "third_party/libpg_query/grammar/statements/prepare.y"
22820:     {
22821: 					PGPrepareStmt *n = makeNode(PGPrepareStmt);
22822: 					n->name = (yyvsp[(2) - (5)].str);
22823: 					n->argtypes = (yyvsp[(3) - (5)].list);
22824: 					n->query = (yyvsp[(5) - (5)].node);
22825: 					(yyval.node) = (PGNode *) n;
22826: 				;}
22827:     break;
22828: 
22829:   case 1069:
22830: #line 18 "third_party/libpg_query/grammar/statements/prepare.y"
22831:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
22832:     break;
22833: 
22834:   case 1070:
22835: #line 19 "third_party/libpg_query/grammar/statements/prepare.y"
22836:     { (yyval.list) = NIL; ;}
22837:     break;
22838: 
22839:   case 1075:
22840: #line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
22841:     {
22842: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
22843: 					/* ...but not both */
22844: 					n->schemaname = (yyvsp[(3) - (4)].str);
22845: 					n->schemaElts = (yyvsp[(4) - (4)].list);
22846: 					n->if_not_exists = false;
22847: 					(yyval.node) = (PGNode *)n;
22848: 				;}
22849:     break;
22850: 
22851:   case 1076:
22852: #line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
22853:     {
22854: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
22855: 					/* ...but not here */
22856: 					n->schemaname = (yyvsp[(6) - (7)].str);
22857: 					if ((yyvsp[(7) - (7)].list) != NIL)
22858: 						ereport(ERROR,
22859: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
22860: 								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
22861: 								 parser_errposition((yylsp[(7) - (7)]))));
22862: 					n->schemaElts = (yyvsp[(7) - (7)].list);
22863: 					n->if_not_exists = true;
22864: 					(yyval.node) = (PGNode *)n;
22865: 				;}
22866:     break;
22867: 
22868:   case 1077:
22869: #line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
22870:     {
22871: 					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
22872: 						(yyloc) = (yylsp[(2) - (2)]);
22873: 					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
22874: 				;}
22875:     break;
22876: 
22877:   case 1078:
22878: #line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
22879:     { (yyval.list) = NIL; ;}
22880:     break;
22881: 
22882:   case 1083:
22883: #line 11 "third_party/libpg_query/grammar/statements/index.y"
22884:     {
22885: 					PGIndexStmt *n = makeNode(PGIndexStmt);
22886: 					n->unique = (yyvsp[(2) - (13)].boolean);
22887: 					n->concurrent = (yyvsp[(4) - (13)].boolean);
22888: 					n->idxname = (yyvsp[(5) - (13)].str);
22889: 					n->relation = (yyvsp[(7) - (13)].range);
22890: 					n->accessMethod = (yyvsp[(8) - (13)].str);
22891: 					n->indexParams = (yyvsp[(10) - (13)].list);
22892: 					n->options = (yyvsp[(12) - (13)].list);
22893: 					n->whereClause = (yyvsp[(13) - (13)].node);
22894: 					n->excludeOpNames = NIL;
22895: 					n->idxcomment = NULL;
22896: 					n->indexOid = InvalidOid;
22897: 					n->oldNode = InvalidOid;
22898: 					n->primary = false;
22899: 					n->isconstraint = false;
22900: 					n->deferrable = false;
22901: 					n->initdeferred = false;
22902: 					n->transformed = false;
22903: 					n->if_not_exists = false;
22904: 					(yyval.node) = (PGNode *)n;
22905: 				;}
22906:     break;
22907: 
22908:   case 1084:
22909: #line 36 "third_party/libpg_query/grammar/statements/index.y"
22910:     {
22911: 					PGIndexStmt *n = makeNode(PGIndexStmt);
22912: 					n->unique = (yyvsp[(2) - (16)].boolean);
22913: 					n->concurrent = (yyvsp[(4) - (16)].boolean);
22914: 					n->idxname = (yyvsp[(8) - (16)].str);
22915: 					n->relation = (yyvsp[(10) - (16)].range);
22916: 					n->accessMethod = (yyvsp[(11) - (16)].str);
22917: 					n->indexParams = (yyvsp[(13) - (16)].list);
22918: 					n->options = (yyvsp[(15) - (16)].list);
22919: 					n->whereClause = (yyvsp[(16) - (16)].node);
22920: 					n->excludeOpNames = NIL;
22921: 					n->idxcomment = NULL;
22922: 					n->indexOid = InvalidOid;
22923: 					n->oldNode = InvalidOid;
22924: 					n->primary = false;
22925: 					n->isconstraint = false;
22926: 					n->deferrable = false;
22927: 					n->initdeferred = false;
22928: 					n->transformed = false;
22929: 					n->if_not_exists = true;
22930: 					(yyval.node) = (PGNode *)n;
22931: 				;}
22932:     break;
22933: 
22934:   case 1085:
22935: #line 62 "third_party/libpg_query/grammar/statements/index.y"
22936:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22937:     break;
22938: 
22939:   case 1086:
22940: #line 66 "third_party/libpg_query/grammar/statements/index.y"
22941:     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
22942:     break;
22943: 
22944:   case 1087:
22945: #line 67 "third_party/libpg_query/grammar/statements/index.y"
22946:     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
22947:     break;
22948: 
22949:   case 1088:
22950: #line 72 "third_party/libpg_query/grammar/statements/index.y"
22951:     { (yyval.boolean) = true; ;}
22952:     break;
22953: 
22954:   case 1089:
22955: #line 73 "third_party/libpg_query/grammar/statements/index.y"
22956:     { (yyval.boolean) = false; ;}
22957:     break;
22958: 
22959:   case 1090:
22960: #line 78 "third_party/libpg_query/grammar/statements/index.y"
22961:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22962:     break;
22963: 
22964:   case 1091:
22965: #line 79 "third_party/libpg_query/grammar/statements/index.y"
22966:     { (yyval.str) = NULL; ;}
22967:     break;
22968: 
22969:   case 1092:
22970: #line 83 "third_party/libpg_query/grammar/statements/index.y"
22971:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
22972:     break;
22973: 
22974:   case 1093:
22975: #line 84 "third_party/libpg_query/grammar/statements/index.y"
22976:     { (yyval.list) = NIL; ;}
22977:     break;
22978: 
22979:   case 1094:
22980: #line 89 "third_party/libpg_query/grammar/statements/index.y"
22981:     { (yyval.boolean) = true; ;}
22982:     break;
22983: 
22984:   case 1095:
22985: #line 90 "third_party/libpg_query/grammar/statements/index.y"
22986:     { (yyval.boolean) = false; ;}
22987:     break;
22988: 
22989:   case 1096:
22990: #line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
22991:     {
22992: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
22993: 					n->objectType = PG_OBJECT_TABLE;
22994: 					n->relation = (yyvsp[(3) - (6)].range);
22995: 					n->newschema = (yyvsp[(6) - (6)].str);
22996: 					n->missing_ok = false;
22997: 					(yyval.node) = (PGNode *)n;
22998: 				;}
22999:     break;
23000: 
23001:   case 1097:
23002: #line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
23003:     {
23004: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23005: 					n->objectType = PG_OBJECT_TABLE;
23006: 					n->relation = (yyvsp[(5) - (8)].range);
23007: 					n->newschema = (yyvsp[(8) - (8)].str);
23008: 					n->missing_ok = true;
23009: 					(yyval.node) = (PGNode *)n;
23010: 				;}
23011:     break;
23012: 
23013:   case 1098:
23014: #line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
23015:     {
23016: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23017: 					n->objectType = PG_OBJECT_SEQUENCE;
23018: 					n->relation = (yyvsp[(3) - (6)].range);
23019: 					n->newschema = (yyvsp[(6) - (6)].str);
23020: 					n->missing_ok = false;
23021: 					(yyval.node) = (PGNode *)n;
23022: 				;}
23023:     break;
23024: 
23025:   case 1099:
23026: #line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
23027:     {
23028: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23029: 					n->objectType = PG_OBJECT_SEQUENCE;
23030: 					n->relation = (yyvsp[(5) - (8)].range);
23031: 					n->newschema = (yyvsp[(8) - (8)].str);
23032: 					n->missing_ok = true;
23033: 					(yyval.node) = (PGNode *)n;
23034: 				;}
23035:     break;
23036: 
23037:   case 1100:
23038: #line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
23039:     {
23040: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23041: 					n->objectType = PG_OBJECT_VIEW;
23042: 					n->relation = (yyvsp[(3) - (6)].range);
23043: 					n->newschema = (yyvsp[(6) - (6)].str);
23044: 					n->missing_ok = false;
23045: 					(yyval.node) = (PGNode *)n;
23046: 				;}
23047:     break;
23048: 
23049:   case 1101:
23050: #line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
23051:     {
23052: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23053: 					n->objectType = PG_OBJECT_VIEW;
23054: 					n->relation = (yyvsp[(5) - (8)].range);
23055: 					n->newschema = (yyvsp[(8) - (8)].str);
23056: 					n->missing_ok = true;
23057: 					(yyval.node) = (PGNode *)n;
23058: 				;}
23059:     break;
23060: 
23061:   case 1102:
23062: #line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
23063:     {
23064: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
23065: 					n->force = true;
23066: 					(yyval.node) = (PGNode *)n;
23067: 				;}
23068:     break;
23069: 
23070:   case 1103:
23071: #line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
23072:     {
23073: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
23074: 					n->force = false;
23075: 					(yyval.node) = (PGNode *)n;
23076: 				;}
23077:     break;
23078: 
23079:   case 1104:
23080: #line 8 "third_party/libpg_query/grammar/statements/export.y"
23081:     {
23082: 					PGExportStmt *n = makeNode(PGExportStmt);
23083: 					n->filename = (yyvsp[(3) - (4)].str);
23084: 					n->options = NIL;
23085: 					if ((yyvsp[(4) - (4)].list)) {
23086: 						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
23087: 					}
23088: 					(yyval.node) = (PGNode *)n;
23089: 				;}
23090:     break;
23091: 
23092:   case 1105:
23093: #line 21 "third_party/libpg_query/grammar/statements/export.y"
23094:     {
23095: 					PGImportStmt *n = makeNode(PGImportStmt);
23096: 					n->filename = (yyvsp[(3) - (3)].str);
23097: 					(yyval.node) = (PGNode *)n;
23098: 				;}
23099:     break;
23100: 
23101:   case 1106:
23102: #line 10 "third_party/libpg_query/grammar/statements/explain.y"
23103:     {
23104: 					PGExplainStmt *n = makeNode(PGExplainStmt);
23105: 					n->query = (yyvsp[(2) - (2)].node);
23106: 					n->options = NIL;
23107: 					(yyval.node) = (PGNode *) n;
23108: 				;}
23109:     break;
23110: 
23111:   case 1107:
23112: #line 17 "third_party/libpg_query/grammar/statements/explain.y"
23113:     {
23114: 					PGExplainStmt *n = makeNode(PGExplainStmt);
23115: 					n->query = (yyvsp[(4) - (4)].node);
23116: 					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
23117: 					if ((yyvsp[(3) - (4)].boolean))
23118: 						n->options = lappend(n->options,
23119: 											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
23120: 					(yyval.node) = (PGNode *) n;
23121: 				;}
23122:     break;
23123: 
23124:   case 1108:
23125: #line 27 "third_party/libpg_query/grammar/statements/explain.y"
23126:     {
23127: 					PGExplainStmt *n = makeNode(PGExplainStmt);
23128: 					n->query = (yyvsp[(3) - (3)].node);
23129: 					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
23130: 					(yyval.node) = (PGNode *) n;
23131: 				;}
23132:     break;
23133: 
23134:   case 1109:
23135: #line 34 "third_party/libpg_query/grammar/statements/explain.y"
23136:     {
23137: 					PGExplainStmt *n = makeNode(PGExplainStmt);
23138: 					n->query = (yyvsp[(5) - (5)].node);
23139: 					n->options = (yyvsp[(3) - (5)].list);
23140: 					(yyval.node) = (PGNode *) n;
23141: 				;}
23142:     break;
23143: 
23144:   case 1110:
23145: #line 44 "third_party/libpg_query/grammar/statements/explain.y"
23146:     { (yyval.boolean) = true; ;}
23147:     break;
23148: 
23149:   case 1111:
23150: #line 45 "third_party/libpg_query/grammar/statements/explain.y"
23151:     { (yyval.boolean) = false; ;}
23152:     break;
23153: 
23154:   case 1112:
23155: #line 50 "third_party/libpg_query/grammar/statements/explain.y"
23156:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
23157:     break;
23158: 
23159:   case 1113:
23160: #line 51 "third_party/libpg_query/grammar/statements/explain.y"
23161:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
23162:     break;
23163: 
23164:   case 1114:
23165: #line 52 "third_party/libpg_query/grammar/statements/explain.y"
23166:     { (yyval.node) = NULL; ;}
23167:     break;
23168: 
23169:   case 1120:
23170: #line 65 "third_party/libpg_query/grammar/statements/explain.y"
23171:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23172:     break;
23173: 
23174:   case 1121:
23175: #line 66 "third_party/libpg_query/grammar/statements/explain.y"
23176:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23177:     break;
23178: 
23179:   case 1122:
23180: #line 67 "third_party/libpg_query/grammar/statements/explain.y"
23181:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23182:     break;
23183: 
23184:   case 1123:
23185: #line 72 "third_party/libpg_query/grammar/statements/explain.y"
23186:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23187:     break;
23188: 
23189:   case 1124:
23190: #line 73 "third_party/libpg_query/grammar/statements/explain.y"
23191:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23192:     break;
23193: 
23194:   case 1125:
23195: #line 79 "third_party/libpg_query/grammar/statements/explain.y"
23196:     {
23197: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
23198: 				;}
23199:     break;
23200: 
23201:   case 1126:
23202: #line 83 "third_party/libpg_query/grammar/statements/explain.y"
23203:     {
23204: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
23205: 				;}
23206:     break;
23207: 
23208:   case 1127:
23209: #line 90 "third_party/libpg_query/grammar/statements/explain.y"
23210:     {;}
23211:     break;
23212: 
23213:   case 1128:
23214: #line 91 "third_party/libpg_query/grammar/statements/explain.y"
23215:     {;}
23216:     break;
23217: 
23218:   case 1129:
23219: #line 96 "third_party/libpg_query/grammar/statements/explain.y"
23220:     { (yyval.str) = (char*) "true"; ;}
23221:     break;
23222: 
23223:   case 1130:
23224: #line 97 "third_party/libpg_query/grammar/statements/explain.y"
23225:     { (yyval.str) = (char*) "false"; ;}
23226:     break;
23227: 
23228:   case 1131:
23229: #line 98 "third_party/libpg_query/grammar/statements/explain.y"
23230:     { (yyval.str) = (char*) "on"; ;}
23231:     break;
23232: 
23233:   case 1132:
23234: #line 104 "third_party/libpg_query/grammar/statements/explain.y"
23235:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23236:     break;
23237: 
23238:   case 1133:
23239: #line 110 "third_party/libpg_query/grammar/statements/explain.y"
23240:     {
23241: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
23242: 				;}
23243:     break;
23244: 
23245:   case 1134:
23246: #line 117 "third_party/libpg_query/grammar/statements/explain.y"
23247:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23248:     break;
23249: 
23250:   case 1135:
23251: #line 118 "third_party/libpg_query/grammar/statements/explain.y"
23252:     { (yyval.str) = (char*) "analyze"; ;}
23253:     break;
23254: 
23255:   case 1136:
23256: #line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
23257:     {
23258: 					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
23259: 					n->scope = VAR_SET_SCOPE_DEFAULT;
23260: 					(yyval.node) = (PGNode *) n;
23261: 				;}
23262:     break;
23263: 
23264:   case 1137:
23265: #line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
23266:     {
23267: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
23268: 					n->scope = VAR_SET_SCOPE_LOCAL;
23269: 					(yyval.node) = (PGNode *) n;
23270: 				;}
23271:     break;
23272: 
23273:   case 1138:
23274: #line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
23275:     {
23276: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
23277: 					n->scope = VAR_SET_SCOPE_SESSION;
23278: 					(yyval.node) = (PGNode *) n;
23279: 				;}
23280:     break;
23281: 
23282:   case 1139:
23283: #line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
23284:     {
23285: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
23286: 					n->scope = VAR_SET_SCOPE_GLOBAL;
23287: 					(yyval.node) = (PGNode *) n;
23288: 				;}
23289:     break;
23290: 
23291:   case 1140:
23292: #line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
23293:     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
23294:     break;
23295: 
23296:   case 1141:
23297: #line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
23298:     {
23299: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23300: 					n->kind = VAR_SET_CURRENT;
23301: 					n->name = (yyvsp[(1) - (3)].str);
23302: 					(yyval.vsetstmt) = n;
23303: 				;}
23304:     break;
23305: 
23306:   case 1142:
23307: #line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
23308:     {
23309: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23310: 					n->kind = VAR_SET_VALUE;
23311: 					n->name = (char*) "timezone";
23312: 					if ((yyvsp[(3) - (3)].node) != NULL)
23313: 						n->args = list_make1((yyvsp[(3) - (3)].node));
23314: 					else
23315: 						n->kind = VAR_SET_DEFAULT;
23316: 					(yyval.vsetstmt) = n;
23317: 				;}
23318:     break;
23319: 
23320:   case 1143:
23321: #line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
23322:     {
23323: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23324: 					n->kind = VAR_SET_VALUE;
23325: 					n->name = (char*) "search_path";
23326: 					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
23327: 					(yyval.vsetstmt) = n;
23328: 				;}
23329:     break;
23330: 
23331:   case 1144:
23332: #line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
23333:     {
23334: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23335: 					n->kind = VAR_SET_VALUE;
23336: 					n->name = (yyvsp[(1) - (3)].str);
23337: 					n->args = (yyvsp[(3) - (3)].list);
23338: 					(yyval.vsetstmt) = n;
23339: 				;}
23340:     break;
23341: 
23342:   case 1145:
23343: #line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
23344:     {
23345: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23346: 					n->kind = VAR_SET_VALUE;
23347: 					n->name = (yyvsp[(1) - (3)].str);
23348: 					n->args = (yyvsp[(3) - (3)].list);
23349: 					(yyval.vsetstmt) = n;
23350: 				;}
23351:     break;
23352: 
23353:   case 1146:
23354: #line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
23355:     {
23356: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23357: 					n->kind = VAR_SET_DEFAULT;
23358: 					n->name = (yyvsp[(1) - (3)].str);
23359: 					(yyval.vsetstmt) = n;
23360: 				;}
23361:     break;
23362: 
23363:   case 1147:
23364: #line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
23365:     {
23366: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23367: 					n->kind = VAR_SET_DEFAULT;
23368: 					n->name = (yyvsp[(1) - (3)].str);
23369: 					(yyval.vsetstmt) = n;
23370: 				;}
23371:     break;
23372: 
23373:   case 1148:
23374: #line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
23375:     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
23376:     break;
23377: 
23378:   case 1149:
23379: #line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
23380:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
23381:     break;
23382: 
23383:   case 1150:
23384: #line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
23385:     {
23386: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23387: 				;}
23388:     break;
23389: 
23390:   case 1151:
23391: #line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
23392:     {
23393: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23394: 				;}
23395:     break;
23396: 
23397:   case 1152:
23398: #line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
23399:     {
23400: 					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
23401: 					if ((yyvsp[(3) - (3)].list) != NIL)
23402: 					{
23403: 						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
23404: 						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
23405: 							ereport(ERROR,
23406: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23407: 									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
23408: 									 parser_errposition((yylsp[(3) - (3)]))));
23409: 					}
23410: 					t->typmods = (yyvsp[(3) - (3)].list);
23411: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
23412: 				;}
23413:     break;
23414: 
23415:   case 1153:
23416: #line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
23417:     {
23418: 					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
23419: 					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
23420: 											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
23421: 					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
23422: 				;}
23423:     break;
23424: 
23425:   case 1154:
23426: #line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
23427:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
23428:     break;
23429: 
23430:   case 1155:
23431: #line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
23432:     { (yyval.node) = NULL; ;}
23433:     break;
23434: 
23435:   case 1156:
23436: #line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
23437:     { (yyval.node) = NULL; ;}
23438:     break;
23439: 
23440:   case 1157:
23441: #line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
23442:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
23443:     break;
23444: 
23445:   case 1158:
23446: #line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
23447:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
23448:     break;
23449: 
23450:   case 1159:
23451: #line 8 "third_party/libpg_query/grammar/statements/load.y"
23452:     {
23453: 					PGLoadStmt *n = makeNode(PGLoadStmt);
23454: 					n->filename = (yyvsp[(2) - (2)].str);
23455: 					(yyval.node) = (PGNode *)n;
23456: 				;}
23457:     break;
23458: 
23459:   case 1160:
23460: #line 16 "third_party/libpg_query/grammar/statements/load.y"
23461:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23462:     break;
23463: 
23464:   case 1161:
23465: #line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
23466:     {
23467: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23468: 					n->options = PG_VACOPT_VACUUM;
23469: 					if ((yyvsp[(2) - (4)].boolean))
23470: 						n->options |= PG_VACOPT_FULL;
23471: 					if ((yyvsp[(3) - (4)].boolean))
23472: 						n->options |= PG_VACOPT_FREEZE;
23473: 					if ((yyvsp[(4) - (4)].boolean))
23474: 						n->options |= PG_VACOPT_VERBOSE;
23475: 					n->relation = NULL;
23476: 					n->va_cols = NIL;
23477: 					(yyval.node) = (PGNode *)n;
23478: 				;}
23479:     break;
23480: 
23481:   case 1162:
23482: #line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
23483:     {
23484: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23485: 					n->options = PG_VACOPT_VACUUM;
23486: 					if ((yyvsp[(2) - (5)].boolean))
23487: 						n->options |= PG_VACOPT_FULL;
23488: 					if ((yyvsp[(3) - (5)].boolean))
23489: 						n->options |= PG_VACOPT_FREEZE;
23490: 					if ((yyvsp[(4) - (5)].boolean))
23491: 						n->options |= PG_VACOPT_VERBOSE;
23492: 					n->relation = (yyvsp[(5) - (5)].range);
23493: 					n->va_cols = NIL;
23494: 					(yyval.node) = (PGNode *)n;
23495: 				;}
23496:     break;
23497: 
23498:   case 1163:
23499: #line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
23500:     {
23501: 					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
23502: 					n->options |= PG_VACOPT_VACUUM;
23503: 					if ((yyvsp[(2) - (5)].boolean))
23504: 						n->options |= PG_VACOPT_FULL;
23505: 					if ((yyvsp[(3) - (5)].boolean))
23506: 						n->options |= PG_VACOPT_FREEZE;
23507: 					if ((yyvsp[(4) - (5)].boolean))
23508: 						n->options |= PG_VACOPT_VERBOSE;
23509: 					(yyval.node) = (PGNode *)n;
23510: 				;}
23511:     break;
23512: 
23513:   case 1164:
23514: #line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
23515:     {
23516: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23517: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
23518: 					n->relation = NULL;
23519: 					n->va_cols = NIL;
23520: 					(yyval.node) = (PGNode *) n;
23521: 				;}
23522:     break;
23523: 
23524:   case 1165:
23525: #line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
23526:     {
23527: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23528: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
23529: 					n->relation = (yyvsp[(5) - (6)].range);
23530: 					n->va_cols = (yyvsp[(6) - (6)].list);
23531: 					if (n->va_cols != NIL)	/* implies analyze */
23532: 						n->options |= PG_VACOPT_ANALYZE;
23533: 					(yyval.node) = (PGNode *) n;
23534: 				;}
23535:     break;
23536: 
23537:   case 1166:
23538: #line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
23539:     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
23540:     break;
23541: 
23542:   case 1167:
23543: #line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
23544:     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
23545:     break;
23546: 
23547:   case 1168:
23548: #line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
23549:     { (yyval.ival) = PG_VACOPT_FREEZE; ;}
23550:     break;
23551: 
23552:   case 1169:
23553: #line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
23554:     { (yyval.ival) = PG_VACOPT_FULL; ;}
23555:     break;
23556: 
23557:   case 1170:
23558: #line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
23559:     {
23560: 					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
23561: 						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
23562: 					else
23563: 						ereport(ERROR,
23564: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
23565: 							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
23566: 									 parser_errposition((yylsp[(1) - (1)]))));
23567: 				;}
23568:     break;
23569: 
23570:   case 1171:
23571: #line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
23572:     { (yyval.boolean) = true; ;}
23573:     break;
23574: 
23575:   case 1172:
23576: #line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
23577:     { (yyval.boolean) = false; ;}
23578:     break;
23579: 
23580:   case 1173:
23581: #line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
23582:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
23583:     break;
23584: 
23585:   case 1174:
23586: #line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
23587:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
23588:     break;
23589: 
23590:   case 1175:
23591: #line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
23592:     { (yyval.boolean) = true; ;}
23593:     break;
23594: 
23595:   case 1176:
23596: #line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
23597:     { (yyval.boolean) = false; ;}
23598:     break;
23599: 
23600:   case 1177:
23601: #line 9 "third_party/libpg_query/grammar/statements/delete.y"
23602:     {
23603: 					PGDeleteStmt *n = makeNode(PGDeleteStmt);
23604: 					n->relation = (yyvsp[(4) - (7)].range);
23605: 					n->usingClause = (yyvsp[(5) - (7)].list);
23606: 					n->whereClause = (yyvsp[(6) - (7)].node);
23607: 					n->returningList = (yyvsp[(7) - (7)].list);
23608: 					n->withClause = (yyvsp[(1) - (7)].with);
23609: 					(yyval.node) = (PGNode *)n;
23610: 				;}
23611:     break;
23612: 
23613:   case 1178:
23614: #line 22 "third_party/libpg_query/grammar/statements/delete.y"
23615:     {
23616: 					(yyval.range) = (yyvsp[(1) - (1)].range);
23617: 				;}
23618:     break;
23619: 
23620:   case 1179:
23621: #line 26 "third_party/libpg_query/grammar/statements/delete.y"
23622:     {
23623: 					PGAlias *alias = makeNode(PGAlias);
23624: 					alias->aliasname = (yyvsp[(2) - (2)].str);
23625: 					(yyvsp[(1) - (2)].range)->alias = alias;
23626: 					(yyval.range) = (yyvsp[(1) - (2)].range);
23627: 				;}
23628:     break;
23629: 
23630:   case 1180:
23631: #line 33 "third_party/libpg_query/grammar/statements/delete.y"
23632:     {
23633: 					PGAlias *alias = makeNode(PGAlias);
23634: 					alias->aliasname = (yyvsp[(3) - (3)].str);
23635: 					(yyvsp[(1) - (3)].range)->alias = alias;
23636: 					(yyval.range) = (yyvsp[(1) - (3)].range);
23637: 				;}
23638:     break;
23639: 
23640:   case 1181:
23641: #line 43 "third_party/libpg_query/grammar/statements/delete.y"
23642:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23643:     break;
23644: 
23645:   case 1182:
23646: #line 44 "third_party/libpg_query/grammar/statements/delete.y"
23647:     { (yyval.node) = NULL; ;}
23648:     break;
23649: 
23650:   case 1183:
23651: #line 50 "third_party/libpg_query/grammar/statements/delete.y"
23652:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23653:     break;
23654: 
23655:   case 1184:
23656: #line 51 "third_party/libpg_query/grammar/statements/delete.y"
23657:     { (yyval.list) = NIL; ;}
23658:     break;
23659: 
23660:   case 1185:
23661: #line 10 "third_party/libpg_query/grammar/statements/analyze.y"
23662:     {
23663: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23664: 					n->options = PG_VACOPT_ANALYZE;
23665: 					if ((yyvsp[(2) - (2)].boolean))
23666: 						n->options |= PG_VACOPT_VERBOSE;
23667: 					n->relation = NULL;
23668: 					n->va_cols = NIL;
23669: 					(yyval.node) = (PGNode *)n;
23670: 				;}
23671:     break;
23672: 
23673:   case 1186:
23674: #line 20 "third_party/libpg_query/grammar/statements/analyze.y"
23675:     {
23676: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
23677: 					n->options = PG_VACOPT_ANALYZE;
23678: 					if ((yyvsp[(2) - (4)].boolean))
23679: 						n->options |= PG_VACOPT_VERBOSE;
23680: 					n->relation = (yyvsp[(3) - (4)].range);
23681: 					n->va_cols = (yyvsp[(4) - (4)].list);
23682: 					(yyval.node) = (PGNode *)n;
23683: 				;}
23684:     break;
23685: 
23686:   case 1187:
23687: #line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
23688:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
23689:     break;
23690: 
23691:   case 1188:
23692: #line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
23693:     {
23694: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23695: 					n->kind = VAR_RESET;
23696: 					n->name = (yyvsp[(1) - (1)].str);
23697: 					(yyval.vsetstmt) = n;
23698: 				;}
23699:     break;
23700: 
23701:   case 1189:
23702: #line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
23703:     {
23704: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23705: 					n->kind = VAR_RESET_ALL;
23706: 					(yyval.vsetstmt) = n;
23707: 				;}
23708:     break;
23709: 
23710:   case 1190:
23711: #line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
23712:     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
23713:     break;
23714: 
23715:   case 1191:
23716: #line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
23717:     {
23718: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23719: 					n->kind = VAR_RESET;
23720: 					n->name = (char*) "timezone";
23721: 					(yyval.vsetstmt) = n;
23722: 				;}
23723:     break;
23724: 
23725:   case 1192:
23726: #line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
23727:     {
23728: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
23729: 					n->kind = VAR_RESET;
23730: 					n->name = (char*) "transaction_isolation";
23731: 					(yyval.vsetstmt) = n;
23732: 				;}
23733:     break;
23734: 
23735:   case 1193:
23736: #line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
23737:     {
23738: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
23739: 				n->stmt = (yyvsp[(2) - (2)].node);
23740: 				n->name = (char*) "select";
23741: 				n->is_summary = 0;
23742: 				(yyval.node) = (PGNode *) n;
23743: 			;}
23744:     break;
23745: 
23746:   case 1194:
23747: #line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
23748:     {
23749: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
23750: 				n->stmt = (yyvsp[(2) - (2)].node);
23751: 				n->name = (char*) "select";
23752: 				n->is_summary = 1;
23753: 				(yyval.node) = (PGNode *) n;
23754: 			;}
23755:     break;
23756: 
23757:   case 1195:
23758: #line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
23759:     {
23760: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23761: 				n->name = (yyvsp[(2) - (2)].str);
23762: 				n->is_summary = 1;
23763: 				(yyval.node) = (PGNode *) n;
23764: 			;}
23765:     break;
23766: 
23767:   case 1196:
23768: #line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
23769:     {
23770: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23771: 				n->name = (yyvsp[(2) - (2)].str);
23772: 				n->is_summary = 0;
23773: 				(yyval.node) = (PGNode *) n;
23774: 			;}
23775:     break;
23776: 
23777:   case 1197:
23778: #line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
23779:     {
23780: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23781: 				n->name = (char*) "timezone";
23782: 				n->is_summary = 0;
23783: 				(yyval.node) = (PGNode *) n;
23784: 			;}
23785:     break;
23786: 
23787:   case 1198:
23788: #line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
23789:     {
23790: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23791: 				n->name = (char*) "transaction_isolation";
23792: 				n->is_summary = 0;
23793: 				(yyval.node) = (PGNode *) n;
23794: 			;}
23795:     break;
23796: 
23797:   case 1199:
23798: #line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
23799:     {
23800: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
23801: 				n->name = (char*) "all";
23802: 				n->is_summary = 0;
23803: 				(yyval.node) = (PGNode *) n;
23804: 			;}
23805:     break;
23806: 
23807:   case 1202:
23808: #line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
23809:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23810:     break;
23811: 
23812:   case 1203:
23813: #line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
23814:     { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
23815:     break;
23816: 
23817:   case 1204:
23818: #line 7 "third_party/libpg_query/grammar/statements/call.y"
23819:     {
23820: 					PGCallStmt *n = makeNode(PGCallStmt);
23821: 					n->func = (yyvsp[(2) - (2)].node);
23822: 					(yyval.node) = (PGNode *) n;
23823: 				;}
23824:     break;
23825: 
23826:   case 1205:
23827: #line 10 "third_party/libpg_query/grammar/statements/view.y"
23828:     {
23829: 					PGViewStmt *n = makeNode(PGViewStmt);
23830: 					n->view = (yyvsp[(4) - (9)].range);
23831: 					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
23832: 					n->aliases = (yyvsp[(5) - (9)].list);
23833: 					n->query = (yyvsp[(8) - (9)].node);
23834: 					n->replace = false;
23835: 					n->options = (yyvsp[(6) - (9)].list);
23836: 					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
23837: 					(yyval.node) = (PGNode *) n;
23838: 				;}
23839:     break;
23840: 
23841:   case 1206:
23842: #line 23 "third_party/libpg_query/grammar/statements/view.y"
23843:     {
23844: 					PGViewStmt *n = makeNode(PGViewStmt);
23845: 					n->view = (yyvsp[(6) - (11)].range);
23846: 					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
23847: 					n->aliases = (yyvsp[(7) - (11)].list);
23848: 					n->query = (yyvsp[(10) - (11)].node);
23849: 					n->replace = true;
23850: 					n->options = (yyvsp[(8) - (11)].list);
23851: 					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
23852: 					(yyval.node) = (PGNode *) n;
23853: 				;}
23854:     break;
23855: 
23856:   case 1207:
23857: #line 36 "third_party/libpg_query/grammar/statements/view.y"
23858:     {
23859: 					PGViewStmt *n = makeNode(PGViewStmt);
23860: 					n->view = (yyvsp[(5) - (12)].range);
23861: 					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
23862: 					n->aliases = (yyvsp[(7) - (12)].list);
23863: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
23864: 					n->replace = false;
23865: 					n->options = (yyvsp[(9) - (12)].list);
23866: 					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
23867: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
23868: 						ereport(ERROR,
23869: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23870: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
23871: 								 parser_errposition((yylsp[(12) - (12)]))));
23872: 					(yyval.node) = (PGNode *) n;
23873: 				;}
23874:     break;
23875: 
23876:   case 1208:
23877: #line 54 "third_party/libpg_query/grammar/statements/view.y"
23878:     {
23879: 					PGViewStmt *n = makeNode(PGViewStmt);
23880: 					n->view = (yyvsp[(7) - (14)].range);
23881: 					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
23882: 					n->aliases = (yyvsp[(9) - (14)].list);
23883: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
23884: 					n->replace = true;
23885: 					n->options = (yyvsp[(11) - (14)].list);
23886: 					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
23887: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
23888: 						ereport(ERROR,
23889: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23890: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
23891: 								 parser_errposition((yylsp[(14) - (14)]))));
23892: 					(yyval.node) = (PGNode *) n;
23893: 				;}
23894:     break;
23895: 
23896:   case 1209:
23897: #line 74 "third_party/libpg_query/grammar/statements/view.y"
23898:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
23899:     break;
23900: 
23901:   case 1210:
23902: #line 75 "third_party/libpg_query/grammar/statements/view.y"
23903:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
23904:     break;
23905: 
23906:   case 1211:
23907: #line 76 "third_party/libpg_query/grammar/statements/view.y"
23908:     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
23909:     break;
23910: 
23911:   case 1212:
23912: #line 77 "third_party/libpg_query/grammar/statements/view.y"
23913:     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
23914:     break;
23915: 
23916:   case 1213:
23917: #line 12 "third_party/libpg_query/grammar/statements/create_as.y"
23918:     {
23919: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
23920: 					ctas->query = (yyvsp[(6) - (7)].node);
23921: 					ctas->into = (yyvsp[(4) - (7)].into);
23922: 					ctas->relkind = PG_OBJECT_TABLE;
23923: 					ctas->is_select_into = false;
23924: 					ctas->if_not_exists = false;
23925: 					/* cram additional flags into the PGIntoClause */
23926: 					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
23927: 					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
23928: 					(yyval.node) = (PGNode *) ctas;
23929: 				;}
23930:     break;
23931: 
23932:   case 1214:
23933: #line 25 "third_party/libpg_query/grammar/statements/create_as.y"
23934:     {
23935: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
23936: 					ctas->query = (yyvsp[(9) - (10)].node);
23937: 					ctas->into = (yyvsp[(7) - (10)].into);
23938: 					ctas->relkind = PG_OBJECT_TABLE;
23939: 					ctas->is_select_into = false;
23940: 					ctas->if_not_exists = true;
23941: 					/* cram additional flags into the PGIntoClause */
23942: 					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
23943: 					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
23944: 					(yyval.node) = (PGNode *) ctas;
23945: 				;}
23946:     break;
23947: 
23948:   case 1215:
23949: #line 41 "third_party/libpg_query/grammar/statements/create_as.y"
23950:     { (yyval.boolean) = true; ;}
23951:     break;
23952: 
23953:   case 1216:
23954: #line 42 "third_party/libpg_query/grammar/statements/create_as.y"
23955:     { (yyval.boolean) = false; ;}
23956:     break;
23957: 
23958:   case 1217:
23959: #line 43 "third_party/libpg_query/grammar/statements/create_as.y"
23960:     { (yyval.boolean) = true; ;}
23961:     break;
23962: 
23963:   case 1218:
23964: #line 49 "third_party/libpg_query/grammar/statements/create_as.y"
23965:     {
23966: 					(yyval.into) = makeNode(PGIntoClause);
23967: 					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
23968: 					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
23969: 					(yyval.into)->options = (yyvsp[(3) - (4)].list);
23970: 					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
23971: 					(yyval.into)->viewQuery = NULL;
23972: 					(yyval.into)->skipData = false;		/* might get changed later */
23973: 				;}
23974:     break;
23975: 
23976: 
23977: /* Line 1267 of yacc.c.  */
23978: #line 23979 "third_party/libpg_query/grammar/grammar_out.cpp"
23979:       default: break;
23980:     }
23981:   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
23982: 
23983:   YYPOPSTACK (yylen);
23984:   yylen = 0;
23985:   YY_STACK_PRINT (yyss, yyssp);
23986: 
23987:   *++yyvsp = yyval;
23988:   *++yylsp = yyloc;
23989: 
23990:   /* Now `shift' the result of the reduction.  Determine what state
23991:      that goes to, based on the state we popped back to and the rule
23992:      number reduced by.  */
23993: 
23994:   yyn = yyr1[yyn];
23995: 
23996:   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
23997:   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
23998:     yystate = yytable[yystate];
23999:   else
24000:     yystate = yydefgoto[yyn - YYNTOKENS];
24001: 
24002:   goto yynewstate;
24003: 
24004: 
24005: /*------------------------------------.
24006: | yyerrlab -- here on detecting error |
24007: `------------------------------------*/
24008: yyerrlab:
24009:   /* If not already recovering from an error, report this error.  */
24010:   if (!yyerrstatus)
24011:     {
24012:       ++yynerrs;
24013: #if ! YYERROR_VERBOSE
24014:       yyerror (&yylloc, yyscanner, YY_("syntax error"));
24015: #else
24016:       {
24017: 	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
24018: 	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
24019: 	  {
24020: 	    YYSIZE_T yyalloc = 2 * yysize;
24021: 	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
24022: 	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
24023: 	    if (yymsg != yymsgbuf)
24024: 	      YYSTACK_FREE (yymsg);
24025: 	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
24026: 	    if (yymsg)
24027: 	      yymsg_alloc = yyalloc;
24028: 	    else
24029: 	      {
24030: 		yymsg = yymsgbuf;
24031: 		yymsg_alloc = sizeof yymsgbuf;
24032: 	      }
24033: 	  }
24034: 
24035: 	if (0 < yysize && yysize <= yymsg_alloc)
24036: 	  {
24037: 	    (void) yysyntax_error (yymsg, yystate, yychar);
24038: 	    yyerror (&yylloc, yyscanner, yymsg);
24039: 	  }
24040: 	else
24041: 	  {
24042: 	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
24043: 	    if (yysize != 0)
24044: 	      goto yyexhaustedlab;
24045: 	  }
24046:       }
24047: #endif
24048:     }
24049: 
24050:   yyerror_range[0] = yylloc;
24051: 
24052:   if (yyerrstatus == 3)
24053:     {
24054:       /* If just tried and failed to reuse look-ahead token after an
24055: 	 error, discard it.  */
24056: 
24057:       if (yychar <= YYEOF)
24058: 	{
24059: 	  /* Return failure if at end of input.  */
24060: 	  if (yychar == YYEOF)
24061: 	    YYABORT;
24062: 	}
24063:       else
24064: 	{
24065: 	  yydestruct ("Error: discarding",
24066: 		      yytoken, &yylval, &yylloc, yyscanner);
24067: 	  yychar = YYEMPTY;
24068: 	}
24069:     }
24070: 
24071:   /* Else will try to reuse look-ahead token after shifting the error
24072:      token.  */
24073:   goto yyerrlab1;
24074: 
24075: 
24076: /*---------------------------------------------------.
24077: | yyerrorlab -- error raised explicitly by YYERROR.  |
24078: `---------------------------------------------------*/
24079: yyerrorlab:
24080: 
24081:   /* Pacify compilers like GCC when the user code never invokes
24082:      YYERROR and the label yyerrorlab therefore never appears in user
24083:      code.  */
24084:   if (/*CONSTCOND*/ 0)
24085:      goto yyerrorlab;
24086: 
24087:   yyerror_range[0] = yylsp[1-yylen];
24088:   /* Do not reclaim the symbols of the rule which action triggered
24089:      this YYERROR.  */
24090:   YYPOPSTACK (yylen);
24091:   yylen = 0;
24092:   YY_STACK_PRINT (yyss, yyssp);
24093:   yystate = *yyssp;
24094:   goto yyerrlab1;
24095: 
24096: 
24097: /*-------------------------------------------------------------.
24098: | yyerrlab1 -- common code for both syntax error and YYERROR.  |
24099: `-------------------------------------------------------------*/
24100: yyerrlab1:
24101:   yyerrstatus = 3;	/* Each real token shifted decrements this.  */
24102: 
24103:   for (;;)
24104:     {
24105:       yyn = yypact[yystate];
24106:       if (yyn != YYPACT_NINF)
24107: 	{
24108: 	  yyn += YYTERROR;
24109: 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
24110: 	    {
24111: 	      yyn = yytable[yyn];
24112: 	      if (0 < yyn)
24113: 		break;
24114: 	    }
24115: 	}
24116: 
24117:       /* Pop the current state because it cannot handle the error token.  */
24118:       if (yyssp == yyss)
24119: 	YYABORT;
24120: 
24121:       yyerror_range[0] = *yylsp;
24122:       yydestruct ("Error: popping",
24123: 		  yystos[yystate], yyvsp, yylsp, yyscanner);
24124:       YYPOPSTACK (1);
24125:       yystate = *yyssp;
24126:       YY_STACK_PRINT (yyss, yyssp);
24127:     }
24128: 
24129:   if (yyn == YYFINAL)
24130:     YYACCEPT;
24131: 
24132:   *++yyvsp = yylval;
24133: 
24134:   yyerror_range[1] = yylloc;
24135:   /* Using YYLLOC is tempting, but would change the location of
24136:      the look-ahead.  YYLOC is available though.  */
24137:   YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
24138:   *++yylsp = yyloc;
24139: 
24140:   /* Shift the error token.  */
24141:   YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
24142: 
24143:   yystate = yyn;
24144:   goto yynewstate;
24145: 
24146: 
24147: /*-------------------------------------.
24148: | yyacceptlab -- YYACCEPT comes here.  |
24149: `-------------------------------------*/
24150: yyacceptlab:
24151:   yyresult = 0;
24152:   goto yyreturn;
24153: 
24154: /*-----------------------------------.
24155: | yyabortlab -- YYABORT comes here.  |
24156: `-----------------------------------*/
24157: yyabortlab:
24158:   yyresult = 1;
24159:   goto yyreturn;
24160: 
24161: #ifndef yyoverflow
24162: /*-------------------------------------------------.
24163: | yyexhaustedlab -- memory exhaustion comes here.  |
24164: `-------------------------------------------------*/
24165: yyexhaustedlab:
24166:   yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
24167:   yyresult = 2;
24168:   /* Fall through.  */
24169: #endif
24170: 
24171: yyreturn:
24172:   if (yychar != YYEOF && yychar != YYEMPTY)
24173:      yydestruct ("Cleanup: discarding lookahead",
24174: 		 yytoken, &yylval, &yylloc, yyscanner);
24175:   /* Do not reclaim the symbols of the rule which action triggered
24176:      this YYABORT or YYACCEPT.  */
24177:   YYPOPSTACK (yylen);
24178:   YY_STACK_PRINT (yyss, yyssp);
24179:   while (yyssp != yyss)
24180:     {
24181:       yydestruct ("Cleanup: popping",
24182: 		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
24183:       YYPOPSTACK (1);
24184:     }
24185: #ifndef yyoverflow
24186:   if (yyss != yyssa)
24187:     YYSTACK_FREE (yyss);
24188: #endif
24189: #if YYERROR_VERBOSE
24190:   if (yymsg != yymsgbuf)
24191:     YYSTACK_FREE (yymsg);
24192: #endif
24193:   /* Make sure YYID is used.  */
24194:   return YYID (yyresult);
24195: }
24196: 
24197: 
24198: #line 70 "third_party/libpg_query/grammar/statements/create_as.y"
24199: 
24200: 
24201: #line 1 "third_party/libpg_query/grammar/grammar.cpp"
24202: /*
24203:  * The signature of this function is required by bison.  However, we
24204:  * ignore the passed yylloc and instead use the last token position
24205:  * available from the scanner.
24206:  */
24207: static void
24208: base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
24209: {
24210: 	parser_yyerror(msg);
24211: }
24212: 
24213: static PGRawStmt *
24214: makeRawStmt(PGNode *stmt, int stmt_location)
24215: {
24216: 	PGRawStmt    *rs = makeNode(PGRawStmt);
24217: 
24218: 	rs->stmt = stmt;
24219: 	rs->stmt_location = stmt_location;
24220: 	rs->stmt_len = 0;			/* might get changed later */
24221: 	return rs;
24222: }
24223: 
24224: /* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
24225: static void
24226: updateRawStmtEnd(PGRawStmt *rs, int end_location)
24227: {
24228: 	/*
24229: 	 * If we already set the length, don't change it.  This is for situations
24230: 	 * like "select foo ;; select bar" where the same statement will be last
24231: 	 * in the string for more than one semicolon.
24232: 	 */
24233: 	if (rs->stmt_len > 0)
24234: 		return;
24235: 
24236: 	/* OK, update length of PGRawStmt */
24237: 	rs->stmt_len = end_location - rs->stmt_location;
24238: }
24239: 
24240: static PGNode *
24241: makeColumnRef(char *colname, PGList *indirection,
24242: 			  int location, core_yyscan_t yyscanner)
24243: {
24244: 	/*
24245: 	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
24246: 	 * is any subscripting in the specified indirection list.  However,
24247: 	 * any field selection at the start of the indirection list must be
24248: 	 * transposed into the "fields" part of the PGColumnRef node.
24249: 	 */
24250: 	PGColumnRef  *c = makeNode(PGColumnRef);
24251: 	int		nfields = 0;
24252: 	PGListCell *l;
24253: 
24254: 	c->location = location;
24255: 	foreach(l, indirection)
24256: 	{
24257: 		if (IsA(lfirst(l), PGAIndices))
24258: 		{
24259: 			PGAIndirection *i = makeNode(PGAIndirection);
24260: 
24261: 			if (nfields == 0)
24262: 			{
24263: 				/* easy case - all indirection goes to PGAIndirection */
24264: 				c->fields = list_make1(makeString(colname));
24265: 				i->indirection = check_indirection(indirection, yyscanner);
24266: 			}
24267: 			else
24268: 			{
24269: 				/* got to split the list in two */
24270: 				i->indirection = check_indirection(list_copy_tail(indirection,
24271: 																  nfields),
24272: 												   yyscanner);
24273: 				indirection = list_truncate(indirection, nfields);
24274: 				c->fields = lcons(makeString(colname), indirection);
24275: 			}
24276: 			i->arg = (PGNode *) c;
24277: 			return (PGNode *) i;
24278: 		}
24279: 		else if (IsA(lfirst(l), PGAStar))
24280: 		{
24281: 			/* We only allow '*' at the end of a PGColumnRef */
24282: 			if (lnext(l) != NULL)
24283: 				parser_yyerror("improper use of \"*\"");
24284: 		}
24285: 		nfields++;
24286: 	}
24287: 	/* No subscripting, so all indirection gets added to field list */
24288: 	c->fields = lcons(makeString(colname), indirection);
24289: 	return (PGNode *) c;
24290: }
24291: 
24292: static PGNode *
24293: makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
24294: {
24295: 	PGTypeCast *n = makeNode(PGTypeCast);
24296: 	n->arg = arg;
24297: 	n->typeName = tpname;
24298: 	n->tryCast = trycast;
24299: 	n->location = location;
24300: 	return (PGNode *) n;
24301: }
24302: 
24303: static PGNode *
24304: makeStringConst(char *str, int location)
24305: {
24306: 	PGAConst *n = makeNode(PGAConst);
24307: 
24308: 	n->val.type = T_PGString;
24309: 	n->val.val.str = str;
24310: 	n->location = location;
24311: 
24312: 	return (PGNode *)n;
24313: }
24314: 
24315: static PGNode *
24316: makeStringConstCast(char *str, int location, PGTypeName *tpname)
24317: {
24318: 	PGNode *s = makeStringConst(str, location);
24319: 
24320: 	return makeTypeCast(s, tpname, 0, -1);
24321: }
24322: 
24323: static PGNode *
24324: makeIntervalNode(char *str, int location, PGList *typmods) {
24325: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
24326: 
24327: 	n->val_type = T_PGString;
24328: 	n->sval = str;
24329: 	n->location = location;
24330: 	n->typmods = typmods;
24331: 
24332: 	return (PGNode *)n;
24333: 
24334: }
24335: 
24336: static PGNode *
24337: makeIntervalNode(int val, int location, PGList *typmods) {
24338: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
24339: 
24340: 	n->val_type = T_PGInteger;
24341: 	n->ival = val;
24342: 	n->location = location;
24343: 	n->typmods = typmods;
24344: 
24345: 	return (PGNode *)n;
24346: }
24347: 
24348: static PGNode *
24349: makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
24350: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
24351: 
24352: 	n->val_type = T_PGAExpr;
24353: 	n->eval = arg;
24354: 	n->location = location;
24355: 	n->typmods = typmods;
24356: 
24357: 	return (PGNode *)n;
24358: }
24359: 
24360: static PGNode *
24361: makeSampleSize(PGValue *sample_size, bool is_percentage) {
24362: 	PGSampleSize *n = makeNode(PGSampleSize);
24363: 
24364: 	n->sample_size = *sample_size;
24365: 	n->is_percentage = is_percentage;
24366: 
24367: 	return (PGNode *)n;
24368: }
24369: 
24370: static PGNode *
24371: makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
24372: 	PGSampleOptions *n = makeNode(PGSampleOptions);
24373: 
24374: 	n->sample_size = sample_size;
24375: 	n->method = method;
24376: 	n->seed = seed;
24377: 	n->location = location;
24378: 
24379: 	return (PGNode *)n;
24380: }
24381: 
24382: static PGNode *
24383: makeIntConst(int val, int location)
24384: {
24385: 	PGAConst *n = makeNode(PGAConst);
24386: 
24387: 	n->val.type = T_PGInteger;
24388: 	n->val.val.ival = val;
24389: 	n->location = location;
24390: 
24391: 	return (PGNode *)n;
24392: }
24393: 
24394: static PGNode *
24395: makeFloatConst(char *str, int location)
24396: {
24397: 	PGAConst *n = makeNode(PGAConst);
24398: 
24399: 	n->val.type = T_PGFloat;
24400: 	n->val.val.str = str;
24401: 	n->location = location;
24402: 
24403: 	return (PGNode *)n;
24404: }
24405: 
24406: static PGNode *
24407: makeBitStringConst(char *str, int location)
24408: {
24409: 	PGAConst *n = makeNode(PGAConst);
24410: 
24411: 	n->val.type = T_PGBitString;
24412: 	n->val.val.str = str;
24413: 	n->location = location;
24414: 
24415: 	return (PGNode *)n;
24416: }
24417: 
24418: static PGNode *
24419: makeNullAConst(int location)
24420: {
24421: 	PGAConst *n = makeNode(PGAConst);
24422: 
24423: 	n->val.type = T_PGNull;
24424: 	n->location = location;
24425: 
24426: 	return (PGNode *)n;
24427: }
24428: 
24429: static PGNode *
24430: makeAConst(PGValue *v, int location)
24431: {
24432: 	PGNode *n;
24433: 
24434: 	switch (v->type)
24435: 	{
24436: 		case T_PGFloat:
24437: 			n = makeFloatConst(v->val.str, location);
24438: 			break;
24439: 
24440: 		case T_PGInteger:
24441: 			n = makeIntConst(v->val.ival, location);
24442: 			break;
24443: 
24444: 		case T_PGString:
24445: 		default:
24446: 			n = makeStringConst(v->val.str, location);
24447: 			break;
24448: 	}
24449: 
24450: 	return n;
24451: }
24452: 
24453: /* makeBoolAConst()
24454:  * Create an PGAConst string node and put it inside a boolean cast.
24455:  */
24456: static PGNode *
24457: makeBoolAConst(bool state, int location)
24458: {
24459: 	PGAConst *n = makeNode(PGAConst);
24460: 
24461: 	n->val.type = T_PGString;
24462: 	n->val.val.str = (state ? (char*) "t" : (char*) "f");
24463: 	n->location = location;
24464: 
24465: 	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
24466: }
24467: 
24468: /* check_qualified_name --- check the result of qualified_name production
24469:  *
24470:  * It's easiest to let the grammar production for qualified_name allow
24471:  * subscripts and '*', which we then must reject here.
24472:  */
24473: static void
24474: check_qualified_name(PGList *names, core_yyscan_t yyscanner)
24475: {
24476: 	PGListCell   *i;
24477: 
24478: 	foreach(i, names)
24479: 	{
24480: 		if (!IsA(lfirst(i), PGString))
24481: 			parser_yyerror("syntax error");
24482: 	}
24483: }
24484: 
24485: /* check_func_name --- check the result of func_name production
24486:  *
24487:  * It's easiest to let the grammar production for func_name allow subscripts
24488:  * and '*', which we then must reject here.
24489:  */
24490: static PGList *
24491: check_func_name(PGList *names, core_yyscan_t yyscanner)
24492: {
24493: 	PGListCell   *i;
24494: 
24495: 	foreach(i, names)
24496: 	{
24497: 		if (!IsA(lfirst(i), PGString))
24498: 			parser_yyerror("syntax error");
24499: 	}
24500: 	return names;
24501: }
24502: 
24503: /* check_indirection --- check the result of indirection production
24504:  *
24505:  * We only allow '*' at the end of the list, but it's hard to enforce that
24506:  * in the grammar, so do it here.
24507:  */
24508: static PGList *
24509: check_indirection(PGList *indirection, core_yyscan_t yyscanner)
24510: {
24511: 	PGListCell *l;
24512: 
24513: 	foreach(l, indirection)
24514: 	{
24515: 		if (IsA(lfirst(l), PGAStar))
24516: 		{
24517: 			if (lnext(l) != NULL)
24518: 				parser_yyerror("improper use of \"*\"");
24519: 		}
24520: 	}
24521: 	return indirection;
24522: }
24523: 
24524: /* makeParamRef
24525:  * Creates a new PGParamRef node
24526:  */
24527: static PGNode* makeParamRef(int number, int location)
24528: {
24529: 	PGParamRef *p = makeNode(PGParamRef);
24530: 	p->number = number;
24531: 	p->location = location;
24532: 	return (PGNode *) p;
24533: }
24534: 
24535: 
24536: /* insertSelectOptions()
24537:  * Insert ORDER BY, etc into an already-constructed SelectStmt.
24538:  *
24539:  * This routine is just to avoid duplicating code in PGSelectStmt productions.
24540:  */
24541: static void
24542: insertSelectOptions(PGSelectStmt *stmt,
24543: 					PGList *sortClause, PGList *lockingClause,
24544: 					PGNode *limitOffset, PGNode *limitCount,
24545: 					PGWithClause *withClause,
24546: 					core_yyscan_t yyscanner)
24547: {
24548: 	Assert(IsA(stmt, PGSelectStmt));
24549: 
24550: 	/*
24551: 	 * Tests here are to reject constructs like
24552: 	 *	(SELECT foo ORDER BY bar) ORDER BY baz
24553: 	 */
24554: 	if (sortClause)
24555: 	{
24556: 		if (stmt->sortClause)
24557: 			ereport(ERROR,
24558: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24559: 					 errmsg("multiple ORDER BY clauses not allowed"),
24560: 					 parser_errposition(exprLocation((PGNode *) sortClause))));
24561: 		stmt->sortClause = sortClause;
24562: 	}
24563: 	/* We can handle multiple locking clauses, though */
24564: 	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
24565: 	if (limitOffset)
24566: 	{
24567: 		if (stmt->limitOffset)
24568: 			ereport(ERROR,
24569: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24570: 					 errmsg("multiple OFFSET clauses not allowed"),
24571: 					 parser_errposition(exprLocation(limitOffset))));
24572: 		stmt->limitOffset = limitOffset;
24573: 	}
24574: 	if (limitCount)
24575: 	{
24576: 		if (stmt->limitCount)
24577: 			ereport(ERROR,
24578: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24579: 					 errmsg("multiple LIMIT clauses not allowed"),
24580: 					 parser_errposition(exprLocation(limitCount))));
24581: 		stmt->limitCount = limitCount;
24582: 	}
24583: 	if (withClause)
24584: 	{
24585: 		if (stmt->withClause)
24586: 			ereport(ERROR,
24587: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
24588: 					 errmsg("multiple WITH clauses not allowed"),
24589: 					 parser_errposition(exprLocation((PGNode *) withClause))));
24590: 		stmt->withClause = withClause;
24591: 	}
24592: }
24593: 
24594: static PGNode *
24595: makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
24596: {
24597: 	PGSelectStmt *n = makeNode(PGSelectStmt);
24598: 
24599: 	n->op = op;
24600: 	n->all = all;
24601: 	n->larg = (PGSelectStmt *) larg;
24602: 	n->rarg = (PGSelectStmt *) rarg;
24603: 	return (PGNode *) n;
24604: }
24605: 
24606: /* SystemFuncName()
24607:  * Build a properly-qualified reference to a built-in function.
24608:  */
24609: PGList *
24610: SystemFuncName(const char *name)
24611: {
24612: 	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
24613: }
24614: 
24615: /* SystemTypeName()
24616:  * Build a properly-qualified reference to a built-in type.
24617:  *
24618:  * typmod is defaulted, but may be changed afterwards by caller.
24619:  * Likewise for the location.
24620:  */
24621: PGTypeName *
24622: SystemTypeName(const char *name)
24623: {
24624: 	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
24625: 											   makeString(name)));
24626: }
24627: 
24628: /* doNegate()
24629:  * Handle negation of a numeric constant.
24630:  *
24631:  * Formerly, we did this here because the optimizer couldn't cope with
24632:  * indexquals that looked like "var = -4" --- it wants "var = const"
24633:  * and a unary minus operator applied to a constant didn't qualify.
24634:  * As of Postgres 7.0, that problem doesn't exist anymore because there
24635:  * is a constant-subexpression simplifier in the optimizer.  However,
24636:  * there's still a good reason for doing this here, which is that we can
24637:  * postpone committing to a particular internal representation for simple
24638:  * negative constants.	It's better to leave "-123.456" in string form
24639:  * until we know what the desired type is.
24640:  */
24641: static PGNode *
24642: doNegate(PGNode *n, int location)
24643: {
24644: 	if (IsA(n, PGAConst))
24645: 	{
24646: 		PGAConst *con = (PGAConst *)n;
24647: 
24648: 		/* report the constant's location as that of the '-' sign */
24649: 		con->location = location;
24650: 
24651: 		if (con->val.type == T_PGInteger)
24652: 		{
24653: 			con->val.val.ival = -con->val.val.ival;
24654: 			return n;
24655: 		}
24656: 		if (con->val.type == T_PGFloat)
24657: 		{
24658: 			doNegateFloat(&con->val);
24659: 			return n;
24660: 		}
24661: 	}
24662: 
24663: 	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
24664: }
24665: 
24666: static void
24667: doNegateFloat(PGValue *v)
24668: {
24669: 	char   *oldval = v->val.str;
24670: 
24671: 	Assert(IsA(v, PGFloat));
24672: 	if (*oldval == '+')
24673: 		oldval++;
24674: 	if (*oldval == '-')
24675: 		v->val.str = oldval+1;	/* just strip the '-' */
24676: 	else
24677: 		v->val.str = psprintf("-%s", oldval);
24678: }
24679: 
24680: static PGNode *
24681: makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
24682: {
24683: 	PGNode	   *lexp = lexpr;
24684: 
24685: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
24686: 	while (IsA(lexp, PGAExpr) &&
24687: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
24688: 		lexp = ((PGAExpr *) lexp)->lexpr;
24689: 	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
24690: 	if (IsA(lexp, PGBoolExpr))
24691: 	{
24692: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
24693: 
24694: 		if (blexpr->boolop == PG_AND_EXPR)
24695: 		{
24696: 			blexpr->args = lappend(blexpr->args, rexpr);
24697: 			return (PGNode *) blexpr;
24698: 		}
24699: 	}
24700: 	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
24701: }
24702: 
24703: static PGNode *
24704: makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
24705: {
24706: 	PGNode	   *lexp = lexpr;
24707: 
24708: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
24709: 	while (IsA(lexp, PGAExpr) &&
24710: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
24711: 		lexp = ((PGAExpr *) lexp)->lexpr;
24712: 	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
24713: 	if (IsA(lexp, PGBoolExpr))
24714: 	{
24715: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
24716: 
24717: 		if (blexpr->boolop == PG_OR_EXPR)
24718: 		{
24719: 			blexpr->args = lappend(blexpr->args, rexpr);
24720: 			return (PGNode *) blexpr;
24721: 		}
24722: 	}
24723: 	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
24724: }
24725: 
24726: static PGNode *
24727: makeNotExpr(PGNode *expr, int location)
24728: {
24729: 	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
24730: }
24731: 
24732: static PGNode *
24733: makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
24734: {
24735: 	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);
24736: 
24737: 	svf->op = op;
24738: 	/* svf->type will be filled during parse analysis */
24739: 	svf->typmod = typmod;
24740: 	svf->location = location;
24741: 	return (PGNode *) svf;
24742: }
24743: 
24744: /* Separate PGConstraint nodes from COLLATE clauses in a */
24745: static void
24746: SplitColQualList(PGList *qualList,
24747: 				 PGList **constraintList, PGCollateClause **collClause,
24748: 				 core_yyscan_t yyscanner)
24749: {
24750: 	PGListCell   *cell;
24751: 	PGListCell   *prev;
24752: 	PGListCell   *next;
24753: 
24754: 	*collClause = NULL;
24755: 	prev = NULL;
24756: 	for (cell = list_head(qualList); cell; cell = next)
24757: 	{
24758: 		PGNode   *n = (PGNode *) lfirst(cell);
24759: 
24760: 		next = lnext(cell);
24761: 		if (IsA(n, PGConstraint))
24762: 		{
24763: 			/* keep it in list */
24764: 			prev = cell;
24765: 			continue;
24766: 		}
24767: 		if (IsA(n, PGCollateClause))
24768: 		{
24769: 			PGCollateClause *c = (PGCollateClause *) n;
24770: 
24771: 			if (*collClause)
24772: 				ereport(ERROR,
24773: 						(errcode(PG_ERRCODE_SYNTAX_ERROR),
24774: 						 errmsg("multiple COLLATE clauses not allowed"),
24775: 						 parser_errposition(c->location)));
24776: 			*collClause = c;
24777: 		}
24778: 		else
24779: 			elog(ERROR, "unexpected node type %d", (int) n->type);
24780: 		/* remove non-Constraint nodes from qualList */
24781: 		qualList = list_delete_cell(qualList, cell, prev);
24782: 	}
24783: 	*constraintList = qualList;
24784: }
24785: 
24786: /*
24787:  * Process result of ConstraintAttributeSpec, and set appropriate bool flags
24788:  * in the output command node.  Pass NULL for any flags the particular
24789:  * command doesn't support.
24790:  */
24791: static void
24792: processCASbits(int cas_bits, int location, const char *constrType,
24793: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
24794: 			   bool *no_inherit, core_yyscan_t yyscanner)
24795: {
24796: 	/* defaults */
24797: 	if (deferrable)
24798: 		*deferrable = false;
24799: 	if (initdeferred)
24800: 		*initdeferred = false;
24801: 	if (not_valid)
24802: 		*not_valid = false;
24803: 
24804: 	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
24805: 	{
24806: 		if (deferrable)
24807: 			*deferrable = true;
24808: 		else
24809: 			ereport(ERROR,
24810: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24811: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24812: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
24813: 							constrType),
24814: 					 parser_errposition(location)));
24815: 	}
24816: 
24817: 	if (cas_bits & CAS_INITIALLY_DEFERRED)
24818: 	{
24819: 		if (initdeferred)
24820: 			*initdeferred = true;
24821: 		else
24822: 			ereport(ERROR,
24823: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24824: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24825: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
24826: 							constrType),
24827: 					 parser_errposition(location)));
24828: 	}
24829: 
24830: 	if (cas_bits & CAS_NOT_VALID)
24831: 	{
24832: 		if (not_valid)
24833: 			*not_valid = true;
24834: 		else
24835: 			ereport(ERROR,
24836: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24837: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24838: 					 errmsg("%s constraints cannot be marked NOT VALID",
24839: 							constrType),
24840: 					 parser_errposition(location)));
24841: 	}
24842: 
24843: 	if (cas_bits & CAS_NO_INHERIT)
24844: 	{
24845: 		if (no_inherit)
24846: 			*no_inherit = true;
24847: 		else
24848: 			ereport(ERROR,
24849: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24850: 					 /* translator: %s is CHECK, UNIQUE, or similar */
24851: 					 errmsg("%s constraints cannot be marked NO INHERIT",
24852: 							constrType),
24853: 					 parser_errposition(location)));
24854: 	}
24855: }
24856: 
24857: /*----------
24858:  * Recursive view transformation
24859:  *
24860:  * Convert
24861:  *
24862:  *     CREATE RECURSIVE VIEW relname (aliases) AS query
24863:  *
24864:  * to
24865:  *
24866:  *     CREATE VIEW relname (aliases) AS
24867:  *         WITH RECURSIVE relname (aliases) AS (query)
24868:  *         SELECT aliases FROM relname
24869:  *
24870:  * Actually, just the WITH ... part, which is then inserted into the original
24871:  * view as the query.
24872:  * ----------
24873:  */
24874: static PGNode *
24875: makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
24876: {
24877: 	PGSelectStmt *s = makeNode(PGSelectStmt);
24878: 	PGWithClause *w = makeNode(PGWithClause);
24879: 	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
24880: 	PGList	   *tl = NIL;
24881: 	PGListCell   *lc;
24882: 
24883: 	/* create common table expression */
24884: 	cte->ctename = relname;
24885: 	cte->aliascolnames = aliases;
24886: 	cte->ctequery = query;
24887: 	cte->location = -1;
24888: 
24889: 	/* create WITH clause and attach CTE */
24890: 	w->recursive = true;
24891: 	w->ctes = list_make1(cte);
24892: 	w->location = -1;
24893: 
24894: 	/* create target list for the new SELECT from the alias list of the
24895: 	 * recursive view specification */
24896: 	foreach (lc, aliases)
24897: 	{
24898: 		PGResTarget *rt = makeNode(PGResTarget);
24899: 
24900: 		rt->name = NULL;
24901: 		rt->indirection = NIL;
24902: 		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
24903: 		rt->location = -1;
24904: 
24905: 		tl = lappend(tl, rt);
24906: 	}
24907: 
24908: 	/* create new SELECT combining WITH clause, target list, and fake FROM
24909: 	 * clause */
24910: 	s->withClause = w;
24911: 	s->targetList = tl;
24912: 	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));
24913: 
24914: 	return (PGNode *) s;
24915: }
24916: 
24917: /* parser_init()
24918:  * Initialize to parse one query string
24919:  */
24920: void
24921: parser_init(base_yy_extra_type *yyext)
24922: {
24923: 	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
24924: }
24925: 
24926: #undef yyparse
24927: #undef yylex
24928: #undef yyerror
24929: #undef yylval
24930: #undef yychar
24931: #undef yydebug
24932: #undef yynerrs
24933: #undef yylloc
24934: 
24935: } // namespace duckdb_libpgquery
[end of third_party/libpg_query/src_backend_parser_gram.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: