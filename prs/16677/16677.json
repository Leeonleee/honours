{
  "repo": "duckdb/duckdb",
  "pull_number": 16677,
  "instance_id": "duckdb__duckdb-16677",
  "issue_numbers": [
    "16665",
    "16665"
  ],
  "base_commit": "84c87b12fa9554a8775dc243b4d0afd5b407321a",
  "patch": "diff --git a/extension/parquet/parquet_metadata.cpp b/extension/parquet/parquet_metadata.cpp\nindex e08e2cb35e03..1f997781753d 100644\n--- a/extension/parquet/parquet_metadata.cpp\n+++ b/extension/parquet/parquet_metadata.cpp\n@@ -771,7 +771,7 @@ void ParquetMetaDataImplementation(ClientContext &context, TableFunctionInput &d\n \t\t\t\tbreak;\n \t\t\tcase ParquetMetadataOperatorType::BLOOM_PROBE: {\n \t\t\t\tauto &bloom_probe_bind_data = data_p.bind_data->Cast<ParquetBloomProbeBindData>();\n-\t\t\t\tdata.ExecuteBloomProbe(context, bind_data.return_types, bind_data.file_list->GetFirstFile(),\n+\t\t\t\tdata.ExecuteBloomProbe(context, bind_data.return_types, data.current_file,\n \t\t\t\t                       bloom_probe_bind_data.probe_column_name, bloom_probe_bind_data.probe_constant);\n \t\t\t\tbreak;\n \t\t\t}\ndiff --git a/src/common/multi_file_reader.cpp b/src/common/multi_file_reader.cpp\nindex 3801df183888..e6fd5720b92e 100644\n--- a/src/common/multi_file_reader.cpp\n+++ b/src/common/multi_file_reader.cpp\n@@ -83,8 +83,6 @@ vector<string> MultiFileReader::ParsePaths(const Value &input) {\n \n shared_ptr<MultiFileList> MultiFileReader::CreateFileList(ClientContext &context, const vector<string> &paths,\n                                                           FileGlobOptions options) {\n-\tvector<string> result_files;\n-\n \tauto res = make_uniq<GlobMultiFileList>(context, paths, options);\n \tif (res->GetExpandResult() == FileExpandResult::NO_FILES && options == FileGlobOptions::DISALLOW_EMPTY) {\n \t\tthrow IOException(\"%s needs at least one file to read\", function_name);\n",
  "test_patch": "diff --git a/data/parquet-testing/multi_bloom_a.parquet b/data/parquet-testing/multi_bloom_a.parquet\nnew file mode 100644\nindex 000000000000..7cf25bf54f9e\nBinary files /dev/null and b/data/parquet-testing/multi_bloom_a.parquet differ\ndiff --git a/data/parquet-testing/multi_bloom_b.parquet b/data/parquet-testing/multi_bloom_b.parquet\nnew file mode 100644\nindex 000000000000..8860e3323535\nBinary files /dev/null and b/data/parquet-testing/multi_bloom_b.parquet differ\ndiff --git a/data/parquet-testing/multi_bloom_c.parquet b/data/parquet-testing/multi_bloom_c.parquet\nnew file mode 100644\nindex 000000000000..bd039e0321e1\nBinary files /dev/null and b/data/parquet-testing/multi_bloom_c.parquet differ\ndiff --git a/test/parquet/test_filename_column.test b/test/parquet/test_filename_column.test\nindex 593f46c13454..99dfb93def84 100644\n--- a/test/parquet/test_filename_column.test\n+++ b/test/parquet/test_filename_column.test\n@@ -56,3 +56,10 @@ query I\n SELECT my_cool_filename FROM read_parquet('data/parquet-testing/enum.parquet', filename=my_cool_filename) LIMIT 1\n ----\n data/parquet-testing/enum.parquet\n+\n+query III\n+select file_name[22:], row_group_id, bloom_filter_excludes from parquet_bloom_probe('data/parquet-testing/multi_bloom_*.parquet', 'a', 1)\n+----\n+multi_bloom_a.parquet\t0\tfalse\n+multi_bloom_b.parquet\t0\ttrue\n+multi_bloom_c.parquet\t0\ttrue\n\\ No newline at end of file\n",
  "problem_statement": "parquet_bloom_probe() outputs wrong files in file_name column if used on multiple files\n### What happens?\n\nIf I use `parquet_bloom_probe()` on multiple files (via a wildcard pattern), the resulting table will print the name of the first (matched) file in the `file_name` column for all rows even though the `row_group_id` starts over, indicating later lines are actually for other files.\n\n### To Reproduce\n\n```sql\ncopy (select a: 1) to 'a.parquet';\ncopy (select a: 2) to 'b.parquet';\ncopy (select a: 3) to 'c.parquet';\nfrom parquet_bloom_probe('?.parquet', 'a', 1);\n```\n```text\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 file_name \u2502 row_group_id \u2502 bloom_filter_excludes \u2502\n\u2502  varchar  \u2502    int64     \u2502        boolean        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\nObserve `a.parquet` being printed for all rows even though those entries should be the three files.\n\n### OS:\n\nGentoo Linux/amd64 (DuckDB platform `linux_amd64`)\n\n### DuckDB Version:\n\n1.2.1\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nMarco G\u00f6tze\n\n### Affiliation:\n\n(none)\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have not tested with any build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\nparquet_bloom_probe() outputs wrong files in file_name column if used on multiple files\n### What happens?\n\nIf I use `parquet_bloom_probe()` on multiple files (via a wildcard pattern), the resulting table will print the name of the first (matched) file in the `file_name` column for all rows even though the `row_group_id` starts over, indicating later lines are actually for other files.\n\n### To Reproduce\n\n```sql\ncopy (select a: 1) to 'a.parquet';\ncopy (select a: 2) to 'b.parquet';\ncopy (select a: 3) to 'c.parquet';\nfrom parquet_bloom_probe('?.parquet', 'a', 1);\n```\n```text\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 file_name \u2502 row_group_id \u2502 bloom_filter_excludes \u2502\n\u2502  varchar  \u2502    int64     \u2502        boolean        \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2502 a.parquet \u2502            0 \u2502 false                 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n```\n\nObserve `a.parquet` being printed for all rows even though those entries should be the three files.\n\n### OS:\n\nGentoo Linux/amd64 (DuckDB platform `linux_amd64`)\n\n### DuckDB Version:\n\n1.2.1\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nMarco G\u00f6tze\n\n### Affiliation:\n\n(none)\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have not tested with any build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2025-03-16T09:45:12Z"
}