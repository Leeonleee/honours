You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
datetime values read from pandas dataframe are broken if the the df has a gapped index
### What happens?

```python
import duckdb
import pandas as pd

n = 100
df = pd.DataFrame({'date': pd.Series(pd.date_range("2024-01-01", freq="D", periods=n)),
                   'x': pd.Series(range(n))})

df = df.loc[::23,]  # this causes the issue
print("pandas df:")
print(df)

xf = duckdb.query("select * from df ").df()
print("duckdb got:")
print(xf)
```

The code above prints:
```
pandas df:
         date   x
0  2024-01-01   0
23 2024-01-24  23
46 2024-02-16  46
69 2024-03-10  69
92 2024-04-02  92
duckdb got:
        date   x
0 2024-01-01   0
1 2024-01-02  23
2 2024-01-03  46
3 2024-01-04  69
4 2024-01-05  92
```
The values of the `x` column are correct, but the `date` values aren't. It seems like the `date` column doesn't choose the appropriate indexes as `x` does. Rather, first 5 rows are chosen by `date`. 


### To Reproduce

See the description above.

### OS:

Ubuntu 22.04.2 LTS, aarch64

### DuckDB Version:

1.0.0

### DuckDB Client:

Python

### Full Name:

Mark

### Affiliation:

bq

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have not tested with any build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of tools/pythonpkg/src/numpy/numpy_scan.cpp]
1: #include "duckdb_python/pyrelation.hpp"
2: #include "duckdb_python/pyconnection/pyconnection.hpp"
3: #include "duckdb_python/pyresult.hpp"
4: #include "duckdb_python/python_conversion.hpp"
5: #include "duckdb/common/string_util.hpp"
6: #include "duckdb/common/types/timestamp.hpp"
7: #include "utf8proc_wrapper.hpp"
8: #include "duckdb/common/case_insensitive_map.hpp"
9: #include "duckdb_python/pandas/pandas_bind.hpp"
10: #include "duckdb_python/numpy/numpy_type.hpp"
11: #include "duckdb_python/pandas/pandas_analyzer.hpp"
12: #include "duckdb_python/numpy/numpy_type.hpp"
13: #include "duckdb/function/scalar/nested_functions.hpp"
14: #include "duckdb_python/numpy/numpy_scan.hpp"
15: #include "duckdb_python/pandas/column/pandas_numpy_column.hpp"
16: 
17: namespace duckdb {
18: 
19: template <class T>
20: void ScanNumpyColumn(py::array &numpy_col, idx_t stride, idx_t offset, Vector &out, idx_t count) {
21: 	auto src_ptr = (T *)numpy_col.data();
22: 	if (stride == sizeof(T)) {
23: 		FlatVector::SetData(out, data_ptr_cast(src_ptr + offset));
24: 	} else {
25: 		auto tgt_ptr = (T *)FlatVector::GetData(out);
26: 		for (idx_t i = 0; i < count; i++) {
27: 			tgt_ptr[i] = src_ptr[stride / sizeof(T) * (i + offset)];
28: 		}
29: 	}
30: }
31: 
32: template <class T, class V>
33: void ScanNumpyCategoryTemplated(py::array &column, idx_t offset, Vector &out, idx_t count) {
34: 	auto src_ptr = (T *)column.data();
35: 	auto tgt_ptr = (V *)FlatVector::GetData(out);
36: 	auto &tgt_mask = FlatVector::Validity(out);
37: 	for (idx_t i = 0; i < count; i++) {
38: 		if (src_ptr[i + offset] == -1) {
39: 			// Null value
40: 			tgt_mask.SetInvalid(i);
41: 		} else {
42: 			tgt_ptr[i] = src_ptr[i + offset];
43: 		}
44: 	}
45: }
46: 
47: template <class T>
48: void ScanNumpyCategory(py::array &column, idx_t count, idx_t offset, Vector &out, string &src_type) {
49: 	if (src_type == "int8") {
50: 		ScanNumpyCategoryTemplated<int8_t, T>(column, offset, out, count);
51: 	} else if (src_type == "int16") {
52: 		ScanNumpyCategoryTemplated<int16_t, T>(column, offset, out, count);
53: 	} else if (src_type == "int32") {
54: 		ScanNumpyCategoryTemplated<int32_t, T>(column, offset, out, count);
55: 	} else if (src_type == "int64") {
56: 		ScanNumpyCategoryTemplated<int64_t, T>(column, offset, out, count);
57: 	} else {
58: 		throw NotImplementedException("The Pandas type " + src_type + " for categorical types is not implemented yet");
59: 	}
60: }
61: 
62: template <class T>
63: void ScanNumpyMasked(PandasColumnBindData &bind_data, idx_t count, idx_t offset, Vector &out) {
64: 	D_ASSERT(bind_data.pandas_col->Backend() == PandasColumnBackend::NUMPY);
65: 	auto &numpy_col = reinterpret_cast<PandasNumpyColumn &>(*bind_data.pandas_col);
66: 	ScanNumpyColumn<T>(numpy_col.array, numpy_col.stride, offset, out, count);
67: 	auto &result_mask = FlatVector::Validity(out);
68: 	if (bind_data.mask) {
69: 		auto mask = reinterpret_cast<const bool *>(bind_data.mask->numpy_array.data());
70: 		for (idx_t i = 0; i < count; i++) {
71: 			auto is_null = mask[offset + i];
72: 			if (is_null) {
73: 				result_mask.SetInvalid(i);
74: 			}
75: 		}
76: 	}
77: }
78: 
79: template <class T>
80: void ScanNumpyFpColumn(const T *src_ptr, idx_t stride, idx_t count, idx_t offset, Vector &out) {
81: 	auto &mask = FlatVector::Validity(out);
82: 	if (stride == sizeof(T)) {
83: 		FlatVector::SetData(out, (data_ptr_t)(src_ptr + offset)); // NOLINT
84: 		// Turn NaN values into NULL
85: 		auto tgt_ptr = FlatVector::GetData<T>(out);
86: 		for (idx_t i = 0; i < count; i++) {
87: 			if (Value::IsNan<T>(tgt_ptr[i])) {
88: 				mask.SetInvalid(i);
89: 			}
90: 		}
91: 	} else {
92: 		auto tgt_ptr = FlatVector::GetData<T>(out);
93: 		for (idx_t i = 0; i < count; i++) {
94: 			tgt_ptr[i] = src_ptr[stride / sizeof(T) * (i + offset)];
95: 			if (Value::IsNan<T>(tgt_ptr[i])) {
96: 				mask.SetInvalid(i);
97: 			}
98: 		}
99: 	}
100: }
101: 
102: template <class T>
103: static string_t DecodePythonUnicode(T *codepoints, idx_t codepoint_count, Vector &out) {
104: 	// first figure out how many bytes to allocate
105: 	idx_t utf8_length = 0;
106: 	for (idx_t i = 0; i < codepoint_count; i++) {
107: 		int len = Utf8Proc::CodepointLength(int(codepoints[i]));
108: 		D_ASSERT(len >= 1);
109: 		utf8_length += len;
110: 	}
111: 	int sz;
112: 	auto result = StringVector::EmptyString(out, utf8_length);
113: 	auto target = result.GetDataWriteable();
114: 	for (idx_t i = 0; i < codepoint_count; i++) {
115: 		Utf8Proc::CodepointToUtf8(int(codepoints[i]), sz, target);
116: 		D_ASSERT(sz >= 1);
117: 		target += sz;
118: 	}
119: 	result.Finalize();
120: 	return result;
121: }
122: 
123: static void SetInvalidRecursive(Vector &out, idx_t index) {
124: 	auto &validity = FlatVector::Validity(out);
125: 	validity.SetInvalid(index);
126: 	if (out.GetType().InternalType() == PhysicalType::STRUCT) {
127: 		auto &children = StructVector::GetEntries(out);
128: 		for (idx_t i = 0; i < children.size(); i++) {
129: 			SetInvalidRecursive(*children[i], index);
130: 		}
131: 	}
132: }
133: 
134: //! 'count' is the amount of rows in the 'out' vector
135: //! 'offset' is the current row number within this vector
136: void ScanNumpyObject(PyObject *object, idx_t offset, Vector &out) {
137: 
138: 	// handle None
139: 	if (object == Py_None) {
140: 		SetInvalidRecursive(out, offset);
141: 		return;
142: 	}
143: 
144: 	auto val = TransformPythonValue(object, out.GetType());
145: 	// Check if the Value type is accepted for the LogicalType of Vector
146: 	out.SetValue(offset, val);
147: }
148: 
149: static void VerifyMapConstraints(Vector &vec, idx_t count) {
150: 	auto invalid_reason = MapVector::CheckMapValidity(vec, count);
151: 	switch (invalid_reason) {
152: 	case MapInvalidReason::VALID:
153: 		return;
154: 	case MapInvalidReason::DUPLICATE_KEY:
155: 		throw InvalidInputException("Dict->Map conversion failed because 'key' list contains duplicates");
156: 	case MapInvalidReason::NULL_KEY:
157: 		throw InvalidInputException("Dict->Map conversion failed because 'key' list contains None");
158: 	default:
159: 		throw InvalidInputException("Option not implemented for MapInvalidReason");
160: 	}
161: }
162: 
163: void VerifyTypeConstraints(Vector &vec, idx_t count) {
164: 	switch (vec.GetType().id()) {
165: 	case LogicalTypeId::MAP: {
166: 		VerifyMapConstraints(vec, count);
167: 		break;
168: 	}
169: 	default:
170: 		return;
171: 	}
172: }
173: 
174: void NumpyScan::ScanObjectColumn(PyObject **col, idx_t stride, idx_t count, idx_t offset, Vector &out) {
175: 	// numpy_col is a sequential list of objects, that make up one "column" (Vector)
176: 	out.SetVectorType(VectorType::FLAT_VECTOR);
177: 	auto &mask = FlatVector::Validity(out);
178: 	PythonGILWrapper gil; // We're creating python objects here, so we need the GIL
179: 
180: 	if (stride == sizeof(PyObject *)) {
181: 		auto src_ptr = col + offset;
182: 		for (idx_t i = 0; i < count; i++) {
183: 			ScanNumpyObject(src_ptr[i], i, out);
184: 		}
185: 	} else {
186: 		for (idx_t i = 0; i < count; i++) {
187: 			auto src_ptr = col[stride / sizeof(PyObject *) * (i + offset)];
188: 			ScanNumpyObject(src_ptr, i, out);
189: 		}
190: 	}
191: 	VerifyTypeConstraints(out, count);
192: }
193: 
194: //! 'offset' is the offset within the column
195: //! 'count' is the amount of values we will convert in this batch
196: void NumpyScan::Scan(PandasColumnBindData &bind_data, idx_t count, idx_t offset, Vector &out) {
197: 	D_ASSERT(bind_data.pandas_col->Backend() == PandasColumnBackend::NUMPY);
198: 	auto &numpy_col = reinterpret_cast<PandasNumpyColumn &>(*bind_data.pandas_col);
199: 	auto &array = numpy_col.array;
200: 
201: 	switch (bind_data.numpy_type.type) {
202: 	case NumpyNullableType::BOOL:
203: 		ScanNumpyMasked<bool>(bind_data, count, offset, out);
204: 		break;
205: 	case NumpyNullableType::UINT_8:
206: 		ScanNumpyMasked<uint8_t>(bind_data, count, offset, out);
207: 		break;
208: 	case NumpyNullableType::UINT_16:
209: 		ScanNumpyMasked<uint16_t>(bind_data, count, offset, out);
210: 		break;
211: 	case NumpyNullableType::UINT_32:
212: 		ScanNumpyMasked<uint32_t>(bind_data, count, offset, out);
213: 		break;
214: 	case NumpyNullableType::UINT_64:
215: 		ScanNumpyMasked<uint64_t>(bind_data, count, offset, out);
216: 		break;
217: 	case NumpyNullableType::INT_8:
218: 		ScanNumpyMasked<int8_t>(bind_data, count, offset, out);
219: 		break;
220: 	case NumpyNullableType::INT_16:
221: 		ScanNumpyMasked<int16_t>(bind_data, count, offset, out);
222: 		break;
223: 	case NumpyNullableType::INT_32:
224: 		ScanNumpyMasked<int32_t>(bind_data, count, offset, out);
225: 		break;
226: 	case NumpyNullableType::INT_64:
227: 		ScanNumpyMasked<int64_t>(bind_data, count, offset, out);
228: 		break;
229: 	case NumpyNullableType::FLOAT_32:
230: 		ScanNumpyFpColumn<float>(reinterpret_cast<const float *>(array.data()), numpy_col.stride, count, offset, out);
231: 		break;
232: 	case NumpyNullableType::FLOAT_64:
233: 		ScanNumpyFpColumn<double>(reinterpret_cast<const double *>(array.data()), numpy_col.stride, count, offset, out);
234: 		break;
235: 	case NumpyNullableType::DATETIME_NS:
236: 	case NumpyNullableType::DATETIME_MS:
237: 	case NumpyNullableType::DATETIME_US:
238: 	case NumpyNullableType::DATETIME_S: {
239: 		auto src_ptr = reinterpret_cast<const int64_t *>(array.data());
240: 		auto tgt_ptr = FlatVector::GetData<timestamp_t>(out);
241: 		auto &mask = FlatVector::Validity(out);
242: 
243: 		using timestamp_convert_func = std::function<timestamp_t(int64_t)>;
244: 		timestamp_convert_func convert_func;
245: 
246: 		switch (bind_data.numpy_type.type) {
247: 		case NumpyNullableType::DATETIME_NS:
248: 			if (bind_data.numpy_type.has_timezone) {
249: 				// Our timezone type is US, so we need to convert from NS to US
250: 				convert_func = Timestamp::FromEpochNanoSeconds;
251: 			} else {
252: 				convert_func = Timestamp::FromEpochMicroSeconds;
253: 			}
254: 			break;
255: 		case NumpyNullableType::DATETIME_MS:
256: 			if (bind_data.numpy_type.has_timezone) {
257: 				// Our timezone type is US, so we need to convert from MS to US
258: 				convert_func = Timestamp::FromEpochMs;
259: 			} else {
260: 				convert_func = Timestamp::FromEpochMicroSeconds;
261: 			}
262: 			break;
263: 		case NumpyNullableType::DATETIME_US:
264: 			convert_func = Timestamp::FromEpochMicroSeconds;
265: 			break;
266: 		case NumpyNullableType::DATETIME_S:
267: 			if (bind_data.numpy_type.has_timezone) {
268: 				// Our timezone type is US, so we need to convert from S to US
269: 				convert_func = Timestamp::FromEpochSeconds;
270: 			} else {
271: 				convert_func = Timestamp::FromEpochMicroSeconds;
272: 			}
273: 			break;
274: 		default:
275: 			throw NotImplementedException("Scan for datetime of this type is not supported yet");
276: 		};
277: 
278: 		for (idx_t row = 0; row < count; row++) {
279: 			auto source_idx = offset + row;
280: 			if (src_ptr[source_idx] <= NumericLimits<int64_t>::Minimum()) {
281: 				// pandas Not a Time (NaT)
282: 				mask.SetInvalid(row);
283: 				continue;
284: 			}
285: 			// Direct conversion, we've already matched the numpy type with the equivalent duckdb type
286: 			auto input = timestamp_t(src_ptr[source_idx]);
287: 			if (Timestamp::IsFinite(input)) {
288: 				tgt_ptr[row] = convert_func(src_ptr[source_idx]);
289: 			} else {
290: 				tgt_ptr[row] = input;
291: 			}
292: 		}
293: 		break;
294: 	}
295: 	case NumpyNullableType::TIMEDELTA: {
296: 		auto src_ptr = reinterpret_cast<const int64_t *>(array.data());
297: 		auto tgt_ptr = FlatVector::GetData<interval_t>(out);
298: 		auto &mask = FlatVector::Validity(out);
299: 
300: 		for (idx_t row = 0; row < count; row++) {
301: 			auto source_idx = offset + row;
302: 			if (src_ptr[source_idx] <= NumericLimits<int64_t>::Minimum()) {
303: 				// pandas Not a Time (NaT)
304: 				mask.SetInvalid(row);
305: 				continue;
306: 			}
307: 			int64_t micro = src_ptr[source_idx] / 1000;
308: 			int64_t days = micro / Interval::MICROS_PER_DAY;
309: 			micro = micro % Interval::MICROS_PER_DAY;
310: 			int64_t months = days / Interval::DAYS_PER_MONTH;
311: 			days = days % Interval::DAYS_PER_MONTH;
312: 			interval_t interval;
313: 			interval.months = months;
314: 			interval.days = days;
315: 			interval.micros = micro;
316: 			tgt_ptr[row] = interval;
317: 		}
318: 		break;
319: 	}
320: 	case NumpyNullableType::OBJECT: {
321: 		//! We have determined the underlying logical type of this object column
322: 		// Get the source pointer of the numpy array
323: 		auto src_ptr = (PyObject **)array.data(); // NOLINT
324: 		if (out.GetType().id() != LogicalTypeId::VARCHAR) {
325: 			return NumpyScan::ScanObjectColumn(src_ptr, numpy_col.stride, count, offset, out);
326: 		}
327: 
328: 		// Get the data pointer and the validity mask of the result vector
329: 		auto tgt_ptr = FlatVector::GetData<string_t>(out);
330: 		auto &out_mask = FlatVector::Validity(out);
331: 		unique_ptr<PythonGILWrapper> gil;
332: 		auto &import_cache = *DuckDBPyConnection::ImportCache();
333: 
334: 		// Loop over every row of the arrays contents
335: 		auto stride = numpy_col.stride;
336: 		for (idx_t row = 0; row < count; row++) {
337: 			auto source_idx = stride / sizeof(PyObject *) * (row + offset);
338: 
339: 			// Get the pointer to the object
340: 			PyObject *val = src_ptr[source_idx];
341: 			if (bind_data.numpy_type.type == NumpyNullableType::OBJECT && !py::isinstance<py::str>(val)) {
342: 				if (val == Py_None) {
343: 					out_mask.SetInvalid(row);
344: 					continue;
345: 				}
346: 				if (import_cache.pandas.NaT(false)) {
347: 					// If pandas is imported, check if this is pandas.NaT
348: 					py::handle value(val);
349: 					if (value.is(import_cache.pandas.NaT())) {
350: 						out_mask.SetInvalid(row);
351: 						continue;
352: 					}
353: 				}
354: 				if (import_cache.pandas.NA(false)) {
355: 					// If pandas is imported, check if this is pandas.NA
356: 					py::handle value(val);
357: 					if (value.is(import_cache.pandas.NA())) {
358: 						out_mask.SetInvalid(row);
359: 						continue;
360: 					}
361: 				}
362: 				if (py::isinstance<py::float_>(val) && std::isnan(PyFloat_AsDouble(val))) {
363: 					out_mask.SetInvalid(row);
364: 					continue;
365: 				}
366: 				if (!py::isinstance<py::str>(val)) {
367: 					if (!gil) {
368: 						gil = make_uniq<PythonGILWrapper>();
369: 					}
370: 					bind_data.object_str_val.Push(std::move(py::str(val)));
371: 					val = reinterpret_cast<PyObject *>(bind_data.object_str_val.LastAddedObject().ptr());
372: 				}
373: 			}
374: 			// Python 3 string representation:
375: 			// https://github.com/python/cpython/blob/3a8fdb28794b2f19f6c8464378fb8b46bce1f5f4/Include/cpython/unicodeobject.h#L79
376: 			py::handle val_handle(val);
377: 			if (!py::isinstance<py::str>(val_handle)) {
378: 				out_mask.SetInvalid(row);
379: 				continue;
380: 			}
381: 			if (PyUtil::PyUnicodeIsCompactASCII(val_handle)) {
382: 				// ascii string: we can zero copy
383: 				tgt_ptr[row] = string_t(PyUtil::PyUnicodeData(val_handle), PyUtil::PyUnicodeGetLength(val_handle));
384: 			} else {
385: 				// unicode gunk
386: 				auto ascii_obj = reinterpret_cast<PyASCIIObject *>(val);
387: 				auto unicode_obj = reinterpret_cast<PyCompactUnicodeObject *>(val);
388: 				// compact unicode string: is there utf8 data available?
389: 				if (unicode_obj->utf8) {
390: 					// there is! zero copy
391: 					tgt_ptr[row] = string_t(const_char_ptr_cast(unicode_obj->utf8), unicode_obj->utf8_length);
392: 				} else if (PyUtil::PyUnicodeIsCompact(unicode_obj) &&
393: 				           !PyUtil::PyUnicodeIsASCII(unicode_obj)) { // NOLINT
394: 					auto kind = PyUtil::PyUnicodeKind(val_handle);
395: 					switch (kind) {
396: 					case PyUnicode_1BYTE_KIND:
397: 						tgt_ptr[row] = DecodePythonUnicode<Py_UCS1>(PyUtil::PyUnicode1ByteData(val_handle),
398: 						                                            PyUtil::PyUnicodeGetLength(val_handle), out);
399: 						break;
400: 					case PyUnicode_2BYTE_KIND:
401: 						tgt_ptr[row] = DecodePythonUnicode<Py_UCS2>(PyUtil::PyUnicode2ByteData(val_handle),
402: 						                                            PyUtil::PyUnicodeGetLength(val_handle), out);
403: 						break;
404: 					case PyUnicode_4BYTE_KIND:
405: 						tgt_ptr[row] = DecodePythonUnicode<Py_UCS4>(PyUtil::PyUnicode4ByteData(val_handle),
406: 						                                            PyUtil::PyUnicodeGetLength(val_handle), out);
407: 						break;
408: 					default:
409: 						throw NotImplementedException(
410: 						    "Unsupported typekind constant %d for Python Unicode Compact decode", kind);
411: 					}
412: 				} else {
413: 					throw InvalidInputException("Unsupported string type: no clue what this string is");
414: 				}
415: 			}
416: 		}
417: 		break;
418: 	}
419: 	case NumpyNullableType::CATEGORY: {
420: 		switch (out.GetType().InternalType()) {
421: 		case PhysicalType::UINT8:
422: 			ScanNumpyCategory<uint8_t>(array, count, offset, out, bind_data.internal_categorical_type);
423: 			break;
424: 		case PhysicalType::UINT16:
425: 			ScanNumpyCategory<uint16_t>(array, count, offset, out, bind_data.internal_categorical_type);
426: 			break;
427: 		case PhysicalType::UINT32:
428: 			ScanNumpyCategory<uint32_t>(array, count, offset, out, bind_data.internal_categorical_type);
429: 			break;
430: 		default:
431: 			throw InternalException("Invalid Physical Type for ENUMs");
432: 		}
433: 		break;
434: 	}
435: 
436: 	default:
437: 		throw NotImplementedException("Unsupported pandas type");
438: 	}
439: }
440: 
441: } // namespace duckdb
[end of tools/pythonpkg/src/numpy/numpy_scan.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: