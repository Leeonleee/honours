{
  "repo": "duckdb/duckdb",
  "pull_number": 15987,
  "instance_id": "duckdb__duckdb-15987",
  "issue_numbers": [
    "15443",
    "15443"
  ],
  "base_commit": "cf03ec882f1db588da5b432c1e9e26ace76a7c0f",
  "patch": "diff --git a/src/optimizer/column_lifetime_analyzer.cpp b/src/optimizer/column_lifetime_analyzer.cpp\nindex efb3e684d473..8b6f1152bf8c 100644\n--- a/src/optimizer/column_lifetime_analyzer.cpp\n+++ b/src/optimizer/column_lifetime_analyzer.cpp\n@@ -102,6 +102,12 @@ void ColumnLifetimeAnalyzer::VisitOperator(LogicalOperator &op) {\n \t\tGenerateProjectionMap(op.children[1]->GetColumnBindings(), rhs_unused, comp_join.right_projection_map);\n \t\treturn;\n \t}\n+\tcase LogicalOperatorType::LOGICAL_INSERT:\n+\tcase LogicalOperatorType::LOGICAL_UPDATE:\n+\tcase LogicalOperatorType::LOGICAL_DELETE:\n+\t\t//! When RETURNING is used, a PROJECTION is the top level operator for INSERTS, UPDATES, and DELETES\n+\t\t//! We still need to project all values from these operators so the projection\n+\t\t//! on top of them can select from only the table values being inserted.\n \tcase LogicalOperatorType::LOGICAL_UNION:\n \tcase LogicalOperatorType::LOGICAL_EXCEPT:\n \tcase LogicalOperatorType::LOGICAL_INTERSECT:\n",
  "test_patch": "diff --git a/test/fuzzer/public/insert_returning.test b/test/fuzzer/public/insert_returning.test\nnew file mode 100644\nindex 000000000000..4f4cfb9acea5\n--- /dev/null\n+++ b/test/fuzzer/public/insert_returning.test\n@@ -0,0 +1,17 @@\n+# name: test/fuzzer/public/insert_returning.test\n+# description: Test INSERT OR REPLACE with DEFAULT VALUES\n+# group: [public]\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+CREATE TABLE v00 (c01 INT, c02 STRING);\n+\n+statement ok\n+INSERT INTO v00 (c01, c02) VALUES (0, 'abc');\n+\n+query I\n+INSERT INTO v00 FROM v00 ORDER BY ALL DESC RETURNING 'abc';\n+----\n+abc\n",
  "problem_statement": "DuckDB Trigger Assertion Failure: result.data[storage_idx].GetType() == chunk.data[mapped_index].GetType()\n### What happens?\r\n\r\nThe latest version of the DuckDB (latest main: v1.1.4-dev3741 ab8c909857) triggers Internal Error when running the following SQL statement: \r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n```\r\n\r\nThe code is working fine from the latest release: v1.1.3 19864453f7. Maybe just a faulty assertion? \r\n\r\nHere is the stack from ab8c909857:\r\n\r\n```\r\nAssertion triggered in file \"/home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp\" on line 150: result.data[storage_idx].GetType() == chunk.data[mapped_index].GetType()\r\n\r\n#0  duckdb::InternalException::InternalException (this=0x60d000018ba0, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:\r\nmsg=) at /home/duckdb/duckdb/src/common/exception.cpp:320\r\n#1  0x00000000020c1089 in duckdb::InternalException::InternalException<char const*, int, char const*> (this=0x60d000018ba0, msg=...,\r\n    params=<optimized out>, params=<optimized out>, params=<optimized out>) at ../../src/include/duckdb/common/exception.hpp:313\r\n#2  0x0000000001e672b1 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>,\r\n    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13\r\n#3  0x000000000a69cf33 in duckdb::PhysicalInsert::ResolveDefaults (table=..., chunk=..., column_index_map=..., default_executor=..., result=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:150\r\n#4  0x000000000a6f5aaa in duckdb::PhysicalInsert::Sink (this=0x6150000e4a00, context=..., chunk=..., input=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:623\r\n#5  0x0000000003cf87a8 in duckdb::PipelineExecutor::ExecutePushInternal (this=<optimized out>, input=..., chunk_budget=..., initial_idx=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:332\r\n#6  0x0000000003cdbda6 in duckdb::PipelineExecutor::Execute (this=0x615000083980, max_chunks=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:250\r\n#7  0x0000000003cdd7e0 in duckdb::PipelineExecutor::Execute (this=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:278\r\n#8  0x0000000003cd8c05 in duckdb::PipelineTask::ExecuteTask (this=0x60700008ace0, mode=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline.cpp:51\r\n#9  0x0000000003ca595c in duckdb::ExecutorTask::Execute (this=0x60700008ace0, mode=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/executor_task.cpp:49\r\n#10 0x0000000003d0f68f in duckdb::TaskScheduler::ExecuteForever (this=<optimized out>, marker=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/task_scheduler.cpp:189\r\n#11 0x000079e0d73d5df4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#12 0x000079e0d7195609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#13 0x000079e0d7093353 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\n### To Reproduce\r\n\r\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to the latest main (v1.1.4-dev3741 ab8c909857).\r\n3. Compile the DuckDB binary by using `make relassert` or `make debug`.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 24.04 LTS\r\n\r\n### DuckDB Version:\r\n\r\nv1.1.4-dev3741 ab8c909857\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nYu Liang\r\n\r\n### Affiliation:\r\n\r\nPennsylvania State University\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a source build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\nDuckDB Trigger Assertion Failure: result.data[storage_idx].GetType() == chunk.data[mapped_index].GetType()\n### What happens?\r\n\r\nThe latest version of the DuckDB (latest main: v1.1.4-dev3741 ab8c909857) triggers Internal Error when running the following SQL statement: \r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n```\r\n\r\nThe code is working fine from the latest release: v1.1.3 19864453f7. Maybe just a faulty assertion? \r\n\r\nHere is the stack from ab8c909857:\r\n\r\n```\r\nAssertion triggered in file \"/home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp\" on line 150: result.data[storage_idx].GetType() == chunk.data[mapped_index].GetType()\r\n\r\n#0  duckdb::InternalException::InternalException (this=0x60d000018ba0, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:\r\nmsg=) at /home/duckdb/duckdb/src/common/exception.cpp:320\r\n#1  0x00000000020c1089 in duckdb::InternalException::InternalException<char const*, int, char const*> (this=0x60d000018ba0, msg=...,\r\n    params=<optimized out>, params=<optimized out>, params=<optimized out>) at ../../src/include/duckdb/common/exception.hpp:313\r\n#2  0x0000000001e672b1 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>,\r\n    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13\r\n#3  0x000000000a69cf33 in duckdb::PhysicalInsert::ResolveDefaults (table=..., chunk=..., column_index_map=..., default_executor=..., result=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:150\r\n#4  0x000000000a6f5aaa in duckdb::PhysicalInsert::Sink (this=0x6150000e4a00, context=..., chunk=..., input=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:623\r\n#5  0x0000000003cf87a8 in duckdb::PipelineExecutor::ExecutePushInternal (this=<optimized out>, input=..., chunk_budget=..., initial_idx=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:332\r\n#6  0x0000000003cdbda6 in duckdb::PipelineExecutor::Execute (this=0x615000083980, max_chunks=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:250\r\n#7  0x0000000003cdd7e0 in duckdb::PipelineExecutor::Execute (this=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:278\r\n#8  0x0000000003cd8c05 in duckdb::PipelineTask::ExecuteTask (this=0x60700008ace0, mode=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline.cpp:51\r\n#9  0x0000000003ca595c in duckdb::ExecutorTask::Execute (this=0x60700008ace0, mode=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/executor_task.cpp:49\r\n#10 0x0000000003d0f68f in duckdb::TaskScheduler::ExecuteForever (this=<optimized out>, marker=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/task_scheduler.cpp:189\r\n#11 0x000079e0d73d5df4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#12 0x000079e0d7195609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#13 0x000079e0d7093353 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\r\n\r\n### To Reproduce\r\n\r\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to the latest main (v1.1.4-dev3741 ab8c909857).\r\n3. Compile the DuckDB binary by using `make relassert` or `make debug`.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu 24.04 LTS\r\n\r\n### DuckDB Version:\r\n\r\nv1.1.4-dev3741 ab8c909857\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nYu Liang\r\n\r\n### Affiliation:\r\n\r\nPennsylvania State University\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a source build\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Another very possible the same bug: \r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 (c01, c02) VALUES (0, 'abc');\r\nINSERT INTO v00 FROM v00 ORDER BY ALL DESC RETURNING 'abc';\r\n```\r\n\r\nStack trace from v1.1.4-dev3741 ab8c909857:\r\n\r\n```\r\n#0  duckdb::InternalException::InternalException (this=0x60d000019700, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:\r\nmsg=) at /home/duckdb/duckdb/src/common/exception.cpp:320\r\n#1  0x00000000020c1089 in duckdb::InternalException::InternalException<char const*, int, char const*> (this=0x60d000019700, msg=...,\r\n    params=<optimized out>, params=<optimized out>, params=<optimized out>) at ../../src/include/duckdb/common/exception.hpp:313\r\n#2  0x0000000001e672b1 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>,\r\n    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13\r\n#3  0x000000000a69c425 in duckdb::PhysicalInsert::ResolveDefaults (table=..., chunk=..., column_index_map=..., default_executor=..., result=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:157\r\n#4  0x000000000a6f5aaa in duckdb::PhysicalInsert::Sink (this=0x61500012d700, context=..., chunk=..., input=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:623\r\n#5  0x0000000003cf87a8 in duckdb::PipelineExecutor::ExecutePushInternal (this=<optimized out>, input=..., chunk_budget=..., initial_idx=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:332\r\n#6  0x0000000003cdbda6 in duckdb::PipelineExecutor::Execute (this=0x615000083980, max_chunks=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:250\r\n#7  0x0000000003cdd7e0 in duckdb::PipelineExecutor::Execute (this=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:278\r\n#8  0x0000000003cd8c05 in duckdb::PipelineTask::ExecuteTask (this=0x60700008e400, mode=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline.cpp:51\r\n#9  0x0000000003ca595c in duckdb::ExecutorTask::Execute (this=0x60700008e400, mode=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/executor_task.cpp:49\r\n#10 0x0000000003d0f68f in duckdb::TaskScheduler::ExecuteForever (this=<optimized out>, marker=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/task_scheduler.cpp:189\r\n#11 0x00007defcc3d8df4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#12 0x00007defcc198609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#13 0x00007defcc096353 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\nHi, I'm unable to reproduce this on the latest main. That said, the assertion is likely still there, so we'll definitely take a look!\r\n\r\n```bash\r\n~/git/duckdb/build/relassert/duckdb\r\n```\r\n```console\r\nduckdb(97944,0x205188240) malloc: nano zone abandoned due to inability to reserve vm space.\r\nv1.1.3-dev3906 ab8c909857\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD CREATE TABLE v00 (c01 INT, c02 STRING);\r\nD INSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 'anything' \u2502\r\n\u2502  varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 anything   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n> Hi, I'm unable to reproduce this on the latest main. That said, the assertion is likely still there, so we'll definitely take a look!\r\n> \r\n> ```shell\r\n> ~/git/duckdb/build/relassert/duckdb\r\n> ```\r\n> \r\n>  ```\r\n> duckdb(97944,0x205188240) malloc: nano zone abandoned due to inability to reserve vm space.\r\n> v1.1.3-dev3906 ab8c909857\r\n> Enter \".help\" for usage hints.\r\n> Connected to a transient in-memory database.\r\n> Use \".open FILENAME\" to reopen on a persistent database.\r\n> D CREATE TABLE v00 (c01 INT, c02 STRING);\r\n> D INSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n> \u2502 'anything' \u2502\r\n> \u2502  varchar   \u2502\r\n> \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n> \u2502 anything   \u2502\r\n> \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n> ```\r\n\r\nOh it is possible that I am using `make debug` build. Maybe the assertion is inside the debug code? \r\n\r\nMerry Christmas! \ud83c\udf84\nAnother very possible the same bug: \r\n\r\n```sql\r\nCREATE TABLE v00 (c01 INT, c02 STRING);\r\nINSERT INTO v00 (c01, c02) VALUES (0, 'abc');\r\nINSERT INTO v00 FROM v00 ORDER BY ALL DESC RETURNING 'abc';\r\n```\r\n\r\nStack trace from v1.1.4-dev3741 ab8c909857:\r\n\r\n```\r\n#0  duckdb::InternalException::InternalException (this=0x60d000019700, Python Exception <class 'gdb.error'> There is no member named _M_dataplus.:\r\nmsg=) at /home/duckdb/duckdb/src/common/exception.cpp:320\r\n#1  0x00000000020c1089 in duckdb::InternalException::InternalException<char const*, int, char const*> (this=0x60d000019700, msg=...,\r\n    params=<optimized out>, params=<optimized out>, params=<optimized out>) at ../../src/include/duckdb/common/exception.hpp:313\r\n#2  0x0000000001e672b1 in duckdb::DuckDBAssertInternal (condition=<optimized out>, condition_name=<optimized out>, file=<optimized out>,\r\n    linenr=<optimized out>) at /home/duckdb/duckdb/src/common/assert.cpp:13\r\n#3  0x000000000a69c425 in duckdb::PhysicalInsert::ResolveDefaults (table=..., chunk=..., column_index_map=..., default_executor=..., result=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:157\r\n#4  0x000000000a6f5aaa in duckdb::PhysicalInsert::Sink (this=0x61500012d700, context=..., chunk=..., input=...)\r\n    at /home/duckdb/duckdb/src/execution/operator/persistent/physical_insert.cpp:623\r\n#5  0x0000000003cf87a8 in duckdb::PipelineExecutor::ExecutePushInternal (this=<optimized out>, input=..., chunk_budget=..., initial_idx=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:332\r\n#6  0x0000000003cdbda6 in duckdb::PipelineExecutor::Execute (this=0x615000083980, max_chunks=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:250\r\n#7  0x0000000003cdd7e0 in duckdb::PipelineExecutor::Execute (this=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline_executor.cpp:278\r\n#8  0x0000000003cd8c05 in duckdb::PipelineTask::ExecuteTask (this=0x60700008e400, mode=<optimized out>) at /home/duckdb/duckdb/src/parallel/pipeline.cpp:51\r\n#9  0x0000000003ca595c in duckdb::ExecutorTask::Execute (this=0x60700008e400, mode=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/executor_task.cpp:49\r\n#10 0x0000000003d0f68f in duckdb::TaskScheduler::ExecuteForever (this=<optimized out>, marker=<optimized out>)\r\n    at /home/duckdb/duckdb/src/parallel/task_scheduler.cpp:189\r\n#11 0x00007defcc3d8df4 in ?? () from /lib/x86_64-linux-gnu/libstdc++.so.6\r\n#12 0x00007defcc198609 in start_thread (arg=<optimized out>) at pthread_create.c:477\r\n#13 0x00007defcc096353 in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95\r\n```\nHi, I'm unable to reproduce this on the latest main. That said, the assertion is likely still there, so we'll definitely take a look!\r\n\r\n```bash\r\n~/git/duckdb/build/relassert/duckdb\r\n```\r\n```console\r\nduckdb(97944,0x205188240) malloc: nano zone abandoned due to inability to reserve vm space.\r\nv1.1.3-dev3906 ab8c909857\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD CREATE TABLE v00 (c01 INT, c02 STRING);\r\nD INSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 'anything' \u2502\r\n\u2502  varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 anything   \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n> Hi, I'm unable to reproduce this on the latest main. That said, the assertion is likely still there, so we'll definitely take a look!\r\n> \r\n> ```shell\r\n> ~/git/duckdb/build/relassert/duckdb\r\n> ```\r\n> \r\n>  ```\r\n> duckdb(97944,0x205188240) malloc: nano zone abandoned due to inability to reserve vm space.\r\n> v1.1.3-dev3906 ab8c909857\r\n> Enter \".help\" for usage hints.\r\n> Connected to a transient in-memory database.\r\n> Use \".open FILENAME\" to reopen on a persistent database.\r\n> D CREATE TABLE v00 (c01 INT, c02 STRING);\r\n> D INSERT INTO v00 BY POSITION ( c02 ) OVERRIDING USER VALUE FROM LATERAL ( SELECT 'simple_string' ) AS ta507400 GROUP BY ALL WINDOW EVENT AS ( GROUPS BETWEEN 'abc' IS NOT UNKNOWN IN CASE WHEN 'abc' THEN 0 ELSE 'abc' END FOLLOWING AND UNBOUNDED FOLLOWING ) ORDER BY ALL RETURNING 'anything';\r\n> \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n> \u2502 'anything' \u2502\r\n> \u2502  varchar   \u2502\r\n> \u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n> \u2502 anything   \u2502\r\n> \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n> ```\r\n\r\nOh it is possible that I am using `make debug` build. Maybe the assertion is inside the debug code? \r\n\r\nMerry Christmas! \ud83c\udf84",
  "created_at": "2025-01-29T18:38:19Z"
}