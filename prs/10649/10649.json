{
  "repo": "duckdb/duckdb",
  "pull_number": 10649,
  "instance_id": "duckdb__duckdb-10649",
  "issue_numbers": [
    "10634"
  ],
  "base_commit": "20b1486d1192f9fbd2328d1122b5afe5f1747fce",
  "patch": "diff --git a/CMakeLists.txt b/CMakeLists.txt\nindex ea74d55f861b..c727a9771ddf 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -665,6 +665,7 @@ else()\n   set(LOCAL_EXTENSION_REPO_DIR ${LOCAL_EXTENSION_REPO})\n endif()\n \n+set(LOCAL_EXTENSION_REPO FALSE)\n if (NOT EXTENSION_CONFIG_BUILD AND NOT ${EXTENSION_TESTS_ONLY} AND NOT CLANG_TIDY)\n   if (NOT Python3_FOUND)\n     MESSAGE(STATUS \"Could not find python3, create extension directory step will be skipped\")\n@@ -676,13 +677,14 @@ if (NOT EXTENSION_CONFIG_BUILD AND NOT ${EXTENSION_TESTS_ONLY} AND NOT CLANG_TID\n           WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}\n           COMMENT Create local extension repository)\n     add_dependencies(duckdb_local_extension_repo duckdb_platform)\n+    set(LOCAL_EXTENSION_REPO TRUE)\n     message(STATUS \"Extensions will be deployed to: ${LOCAL_EXTENSION_REPO_DIR}\")\n   endif()\n endif()\n \n function(build_loadable_extension_directory NAME OUTPUT_DIRECTORY PARAMETERS)\n   set(TARGET_NAME ${NAME}_loadable_extension)\n-  if (NOT EXTENSION_CONFIG_BUILD AND NOT ${EXTENSION_TESTS_ONLY} AND NOT CLANG_TIDY)\n+  if (LOCAL_EXTENSION_REPO)\n     add_dependencies(duckdb_local_extension_repo ${NAME}_loadable_extension)\n   endif()\n   # all parameters after output_directory\ndiff --git a/extension/httpfs/httpfs_config.py b/extension/httpfs/httpfs_config.py\nindex 894af2e5c13b..4c63f13d9953 100644\n--- a/extension/httpfs/httpfs_config.py\n+++ b/extension/httpfs/httpfs_config.py\n@@ -8,5 +8,8 @@\n # source files\n source_files = [\n     os.path.sep.join(x.split('/'))\n-    for x in ['extension/httpfs/' + s for s in ['httpfs_extension.cpp', 'httpfs.cpp', 's3fs.cpp', 'crypto.cpp']]\n+    for x in [\n+        'extension/httpfs/' + s\n+        for s in ['create_secret_functions.cpp', 'httpfs_extension.cpp', 'httpfs.cpp', 's3fs.cpp', 'crypto.cpp']\n+    ]\n ]\ndiff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp\nindex b1d292513549..bbca902a284c 100644\n--- a/src/common/local_file_system.cpp\n+++ b/src/common/local_file_system.cpp\n@@ -49,7 +49,7 @@ extern \"C\" WINBASEAPI BOOL WINAPI GetPhysicallyInstalledSystemMemory(PULONGLONG)\n #include <libproc.h>                                        // NOLINT\n #endif                                                      // NOLINT\n #elif defined(_WIN32)\n-#include <RestartManager.h>\n+#include <restartmanager.h>\n #endif\n \n namespace duckdb {\ndiff --git a/src/include/duckdb.h b/src/include/duckdb.h\nindex d0b6160d5a60..12d1e6f0a6d2 100644\n--- a/src/include/duckdb.h\n+++ b/src/include/duckdb.h\n@@ -64,74 +64,75 @@ extern \"C\" {\n //===--------------------------------------------------------------------===//\n // Enums\n //===--------------------------------------------------------------------===//\n-\n+// WARNING: the numbers of these enums should not be changed, as changing the numbers breaks ABI compatibility\n+// Always add enums at the END of the enum\n //! An enum over DuckDB's internal types.\n typedef enum DUCKDB_TYPE {\n \tDUCKDB_TYPE_INVALID = 0,\n \t// bool\n-\tDUCKDB_TYPE_BOOLEAN,\n+\tDUCKDB_TYPE_BOOLEAN = 1,\n \t// int8_t\n-\tDUCKDB_TYPE_TINYINT,\n+\tDUCKDB_TYPE_TINYINT = 2,\n \t// int16_t\n-\tDUCKDB_TYPE_SMALLINT,\n+\tDUCKDB_TYPE_SMALLINT = 3,\n \t// int32_t\n-\tDUCKDB_TYPE_INTEGER,\n+\tDUCKDB_TYPE_INTEGER = 4,\n \t// int64_t\n-\tDUCKDB_TYPE_BIGINT,\n+\tDUCKDB_TYPE_BIGINT = 5,\n \t// uint8_t\n-\tDUCKDB_TYPE_UTINYINT,\n+\tDUCKDB_TYPE_UTINYINT = 6,\n \t// uint16_t\n-\tDUCKDB_TYPE_USMALLINT,\n+\tDUCKDB_TYPE_USMALLINT = 7,\n \t// uint32_t\n-\tDUCKDB_TYPE_UINTEGER,\n+\tDUCKDB_TYPE_UINTEGER = 8,\n \t// uint64_t\n-\tDUCKDB_TYPE_UBIGINT,\n+\tDUCKDB_TYPE_UBIGINT = 9,\n \t// float\n-\tDUCKDB_TYPE_FLOAT,\n+\tDUCKDB_TYPE_FLOAT = 10,\n \t// double\n-\tDUCKDB_TYPE_DOUBLE,\n+\tDUCKDB_TYPE_DOUBLE = 11,\n \t// duckdb_timestamp, in microseconds\n-\tDUCKDB_TYPE_TIMESTAMP,\n+\tDUCKDB_TYPE_TIMESTAMP = 12,\n \t// duckdb_date\n-\tDUCKDB_TYPE_DATE,\n+\tDUCKDB_TYPE_DATE = 13,\n \t// duckdb_time\n-\tDUCKDB_TYPE_TIME,\n+\tDUCKDB_TYPE_TIME = 14,\n \t// duckdb_interval\n-\tDUCKDB_TYPE_INTERVAL,\n+\tDUCKDB_TYPE_INTERVAL = 15,\n \t// duckdb_hugeint\n-\tDUCKDB_TYPE_HUGEINT,\n+\tDUCKDB_TYPE_HUGEINT = 16,\n \t// duckdb_uhugeint\n-\tDUCKDB_TYPE_UHUGEINT,\n+\tDUCKDB_TYPE_UHUGEINT = 32,\n \t// const char*\n-\tDUCKDB_TYPE_VARCHAR,\n+\tDUCKDB_TYPE_VARCHAR = 17,\n \t// duckdb_blob\n-\tDUCKDB_TYPE_BLOB,\n+\tDUCKDB_TYPE_BLOB = 18,\n \t// decimal\n-\tDUCKDB_TYPE_DECIMAL,\n+\tDUCKDB_TYPE_DECIMAL = 19,\n \t// duckdb_timestamp, in seconds\n-\tDUCKDB_TYPE_TIMESTAMP_S,\n+\tDUCKDB_TYPE_TIMESTAMP_S = 20,\n \t// duckdb_timestamp, in milliseconds\n-\tDUCKDB_TYPE_TIMESTAMP_MS,\n+\tDUCKDB_TYPE_TIMESTAMP_MS = 21,\n \t// duckdb_timestamp, in nanoseconds\n-\tDUCKDB_TYPE_TIMESTAMP_NS,\n+\tDUCKDB_TYPE_TIMESTAMP_NS = 22,\n \t// enum type, only useful as logical type\n-\tDUCKDB_TYPE_ENUM,\n+\tDUCKDB_TYPE_ENUM = 23,\n \t// list type, only useful as logical type\n-\tDUCKDB_TYPE_LIST,\n+\tDUCKDB_TYPE_LIST = 24,\n \t// struct type, only useful as logical type\n-\tDUCKDB_TYPE_STRUCT,\n+\tDUCKDB_TYPE_STRUCT = 25,\n \t// map type, only useful as logical type\n-\tDUCKDB_TYPE_MAP,\n+\tDUCKDB_TYPE_MAP = 26,\n \t// duckdb_hugeint\n-\tDUCKDB_TYPE_UUID,\n+\tDUCKDB_TYPE_UUID = 27,\n \t// union type, only useful as logical type\n-\tDUCKDB_TYPE_UNION,\n+\tDUCKDB_TYPE_UNION = 28,\n \t// duckdb_bit\n-\tDUCKDB_TYPE_BIT,\n+\tDUCKDB_TYPE_BIT = 29,\n \t// duckdb_time_tz\n-\tDUCKDB_TYPE_TIME_TZ,\n+\tDUCKDB_TYPE_TIME_TZ = 30,\n \t// duckdb_timestamp\n-\tDUCKDB_TYPE_TIMESTAMP_TZ,\n+\tDUCKDB_TYPE_TIMESTAMP_TZ = 31,\n } duckdb_type;\n //! An enum over the returned state of different functions.\n typedef enum { DuckDBSuccess = 0, DuckDBError = 1 } duckdb_state;\n@@ -144,41 +145,41 @@ typedef enum {\n } duckdb_pending_state;\n //! An enum over DuckDB's different result types.\n typedef enum {\n-\tDUCKDB_RESULT_TYPE_INVALID,\n-\tDUCKDB_RESULT_TYPE_CHANGED_ROWS,\n-\tDUCKDB_RESULT_TYPE_NOTHING,\n-\tDUCKDB_RESULT_TYPE_QUERY_RESULT,\n+\tDUCKDB_RESULT_TYPE_INVALID = 0,\n+\tDUCKDB_RESULT_TYPE_CHANGED_ROWS = 1,\n+\tDUCKDB_RESULT_TYPE_NOTHING = 2,\n+\tDUCKDB_RESULT_TYPE_QUERY_RESULT = 3,\n } duckdb_result_type;\n //! An enum over DuckDB's different statement types.\n typedef enum {\n-\tDUCKDB_STATEMENT_TYPE_INVALID,\n-\tDUCKDB_STATEMENT_TYPE_SELECT,\n-\tDUCKDB_STATEMENT_TYPE_INSERT,\n-\tDUCKDB_STATEMENT_TYPE_UPDATE,\n-\tDUCKDB_STATEMENT_TYPE_EXPLAIN,\n-\tDUCKDB_STATEMENT_TYPE_DELETE,\n-\tDUCKDB_STATEMENT_TYPE_PREPARE,\n-\tDUCKDB_STATEMENT_TYPE_CREATE,\n-\tDUCKDB_STATEMENT_TYPE_EXECUTE,\n-\tDUCKDB_STATEMENT_TYPE_ALTER,\n-\tDUCKDB_STATEMENT_TYPE_TRANSACTION,\n-\tDUCKDB_STATEMENT_TYPE_COPY,\n-\tDUCKDB_STATEMENT_TYPE_ANALYZE,\n-\tDUCKDB_STATEMENT_TYPE_VARIABLE_SET,\n-\tDUCKDB_STATEMENT_TYPE_CREATE_FUNC,\n-\tDUCKDB_STATEMENT_TYPE_DROP,\n-\tDUCKDB_STATEMENT_TYPE_EXPORT,\n-\tDUCKDB_STATEMENT_TYPE_PRAGMA,\n-\tDUCKDB_STATEMENT_TYPE_VACUUM,\n-\tDUCKDB_STATEMENT_TYPE_CALL,\n-\tDUCKDB_STATEMENT_TYPE_SET,\n-\tDUCKDB_STATEMENT_TYPE_LOAD,\n-\tDUCKDB_STATEMENT_TYPE_RELATION,\n-\tDUCKDB_STATEMENT_TYPE_EXTENSION,\n-\tDUCKDB_STATEMENT_TYPE_LOGICAL_PLAN,\n-\tDUCKDB_STATEMENT_TYPE_ATTACH,\n-\tDUCKDB_STATEMENT_TYPE_DETACH,\n-\tDUCKDB_STATEMENT_TYPE_MULTI,\n+\tDUCKDB_STATEMENT_TYPE_INVALID = 0,\n+\tDUCKDB_STATEMENT_TYPE_SELECT = 1,\n+\tDUCKDB_STATEMENT_TYPE_INSERT = 2,\n+\tDUCKDB_STATEMENT_TYPE_UPDATE = 3,\n+\tDUCKDB_STATEMENT_TYPE_EXPLAIN = 4,\n+\tDUCKDB_STATEMENT_TYPE_DELETE = 5,\n+\tDUCKDB_STATEMENT_TYPE_PREPARE = 6,\n+\tDUCKDB_STATEMENT_TYPE_CREATE = 7,\n+\tDUCKDB_STATEMENT_TYPE_EXECUTE = 8,\n+\tDUCKDB_STATEMENT_TYPE_ALTER = 9,\n+\tDUCKDB_STATEMENT_TYPE_TRANSACTION = 10,\n+\tDUCKDB_STATEMENT_TYPE_COPY = 11,\n+\tDUCKDB_STATEMENT_TYPE_ANALYZE = 12,\n+\tDUCKDB_STATEMENT_TYPE_VARIABLE_SET = 13,\n+\tDUCKDB_STATEMENT_TYPE_CREATE_FUNC = 14,\n+\tDUCKDB_STATEMENT_TYPE_DROP = 15,\n+\tDUCKDB_STATEMENT_TYPE_EXPORT = 16,\n+\tDUCKDB_STATEMENT_TYPE_PRAGMA = 17,\n+\tDUCKDB_STATEMENT_TYPE_VACUUM = 18,\n+\tDUCKDB_STATEMENT_TYPE_CALL = 19,\n+\tDUCKDB_STATEMENT_TYPE_SET = 20,\n+\tDUCKDB_STATEMENT_TYPE_LOAD = 21,\n+\tDUCKDB_STATEMENT_TYPE_RELATION = 22,\n+\tDUCKDB_STATEMENT_TYPE_EXTENSION = 23,\n+\tDUCKDB_STATEMENT_TYPE_LOGICAL_PLAN = 24,\n+\tDUCKDB_STATEMENT_TYPE_ATTACH = 25,\n+\tDUCKDB_STATEMENT_TYPE_DETACH = 26,\n+\tDUCKDB_STATEMENT_TYPE_MULTI = 27,\n } duckdb_statement_type;\n \n //===--------------------------------------------------------------------===//\ndiff --git a/tools/juliapkg/src/ctypes.jl b/tools/juliapkg/src/ctypes.jl\nindex cc4b7e4cd66c..6078527be635 100644\n--- a/tools/juliapkg/src/ctypes.jl\n+++ b/tools/juliapkg/src/ctypes.jl\n@@ -28,38 +28,38 @@ const DUCKDB_PENDING_NO_TASKS_AVAILABLE = 3;\n \n @enum DUCKDB_TYPE_::UInt32 begin\n     DUCKDB_TYPE_INVALID = 0\n-    DUCKDB_TYPE_BOOLEAN\n-    DUCKDB_TYPE_TINYINT\n-    DUCKDB_TYPE_SMALLINT\n-    DUCKDB_TYPE_INTEGER\n-    DUCKDB_TYPE_BIGINT\n-    DUCKDB_TYPE_UTINYINT\n-    DUCKDB_TYPE_USMALLINT\n-    DUCKDB_TYPE_UINTEGER\n-    DUCKDB_TYPE_UBIGINT\n-    DUCKDB_TYPE_FLOAT\n-    DUCKDB_TYPE_DOUBLE\n-    DUCKDB_TYPE_TIMESTAMP\n-    DUCKDB_TYPE_DATE\n-    DUCKDB_TYPE_TIME\n-    DUCKDB_TYPE_INTERVAL\n-    DUCKDB_TYPE_HUGEINT\n-    DUCKDB_TYPE_UHUGEINT\n-    DUCKDB_TYPE_VARCHAR\n-    DUCKDB_TYPE_BLOB\n-    DUCKDB_TYPE_DECIMAL\n-    DUCKDB_TYPE_TIMESTAMP_S\n-    DUCKDB_TYPE_TIMESTAMP_MS\n-    DUCKDB_TYPE_TIMESTAMP_NS\n-    DUCKDB_TYPE_ENUM\n-    DUCKDB_TYPE_LIST\n-    DUCKDB_TYPE_STRUCT\n-    DUCKDB_TYPE_MAP\n-    DUCKDB_TYPE_UUID\n-    DUCKDB_TYPE_UNION\n-    DUCKDB_TYPE_BIT\n-    DUCKDB_TYPE_TIME_TZ\n-    DUCKDB_TYPE_TIMESTAMP_TZ\n+    DUCKDB_TYPE_BOOLEAN = 1\n+    DUCKDB_TYPE_TINYINT = 2\n+    DUCKDB_TYPE_SMALLINT = 3\n+    DUCKDB_TYPE_INTEGER = 4\n+    DUCKDB_TYPE_BIGINT = 5\n+    DUCKDB_TYPE_UTINYINT = 6\n+    DUCKDB_TYPE_USMALLINT = 7\n+    DUCKDB_TYPE_UINTEGER = 8\n+    DUCKDB_TYPE_UBIGINT = 9\n+    DUCKDB_TYPE_FLOAT = 10\n+    DUCKDB_TYPE_DOUBLE = 11\n+    DUCKDB_TYPE_TIMESTAMP = 12\n+    DUCKDB_TYPE_DATE = 13\n+    DUCKDB_TYPE_TIME = 14\n+    DUCKDB_TYPE_INTERVAL = 15\n+    DUCKDB_TYPE_HUGEINT = 16\n+    DUCKDB_TYPE_UHUGEINT = 32\n+    DUCKDB_TYPE_VARCHAR = 17\n+    DUCKDB_TYPE_BLOB = 18\n+    DUCKDB_TYPE_DECIMAL = 19\n+    DUCKDB_TYPE_TIMESTAMP_S = 20\n+    DUCKDB_TYPE_TIMESTAMP_MS = 21\n+    DUCKDB_TYPE_TIMESTAMP_NS = 22\n+    DUCKDB_TYPE_ENUM = 23\n+    DUCKDB_TYPE_LIST = 24\n+    DUCKDB_TYPE_STRUCT = 25\n+    DUCKDB_TYPE_MAP = 26\n+    DUCKDB_TYPE_UUID = 27\n+    DUCKDB_TYPE_UNION = 28\n+    DUCKDB_TYPE_BIT = 29\n+    DUCKDB_TYPE_TIME_TZ = 30\n+    DUCKDB_TYPE_TIMESTAMP_TZ = 31\n end\n \n const DUCKDB_TYPE = DUCKDB_TYPE_\n",
  "test_patch": "diff --git a/test/sql/secrets/create_secret_non_writable_persistent_dir.test b/test/sql/secrets/create_secret_non_writable_persistent_dir.test\nindex 0a73cdbdada5..1091eb6337bc 100644\n--- a/test/sql/secrets/create_secret_non_writable_persistent_dir.test\n+++ b/test/sql/secrets/create_secret_non_writable_persistent_dir.test\n@@ -42,4 +42,5 @@ statement maybe\n CREATE PERSISTENT SECRET my_tmp_secret (\n \tTYPE S3,\n     SCOPE 's3://bucket2'\n-)\n\\ No newline at end of file\n+)\n+----\n",
  "problem_statement": "DUCKDB_TYPE_UHUGEINT breaks compatibility with C api clients\n### What happens?\n\nIn the `DUCKDB_TYPE` enum a new member, `DUCKDB_TYPE_UHUGEINT` was inserted in the middle causing all other member values to increment. This breaks compatibility with every library that uses C Api.\n\n### To Reproduce\n\nTry using an existing library with DuckDB 0.10.0\n\n### OS:\n\nDoesn't matter\n\n### DuckDB Version:\n\n0.10.0\n\n### DuckDB Client:\n\nAny client via C API\n\n### Full Name:\n\nGiorgi Dalakishvili\n\n### Affiliation:\n\nSpace International\n\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\n\nI have tested with a nightly build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-02-14T07:48:14Z"
}