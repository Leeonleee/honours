{
  "repo": "duckdb/duckdb",
  "pull_number": 9270,
  "instance_id": "duckdb__duckdb-9270",
  "issue_numbers": [
    "9241",
    "9241"
  ],
  "base_commit": "c9efe88f1421b376adb9beff07da6b3902b4d817",
  "patch": "diff --git a/src/include/duckdb/optimizer/filter_pushdown.hpp b/src/include/duckdb/optimizer/filter_pushdown.hpp\nindex 1b9a4482d091..ab6f04b06273 100644\n--- a/src/include/duckdb/optimizer/filter_pushdown.hpp\n+++ b/src/include/duckdb/optimizer/filter_pushdown.hpp\n@@ -43,6 +43,8 @@ class FilterPushdown {\n \n \t//! Push down a LogicalAggregate op\n \tunique_ptr<LogicalOperator> PushdownAggregate(unique_ptr<LogicalOperator> op);\n+\t//! Push down a distinct operator\n+\tunique_ptr<LogicalOperator> PushdownDistinct(unique_ptr<LogicalOperator> op);\n \t//! Push down a LogicalFilter op\n \tunique_ptr<LogicalOperator> PushdownFilter(unique_ptr<LogicalOperator> op);\n \t//! Push down a LogicalCrossProduct op\ndiff --git a/src/optimizer/filter_pushdown.cpp b/src/optimizer/filter_pushdown.cpp\nindex a8ca617c0be7..1a38ad2aee6c 100644\n--- a/src/optimizer/filter_pushdown.cpp\n+++ b/src/optimizer/filter_pushdown.cpp\n@@ -33,6 +33,7 @@ unique_ptr<LogicalOperator> FilterPushdown::Rewrite(unique_ptr<LogicalOperator>\n \tcase LogicalOperatorType::LOGICAL_UNION:\n \t\treturn PushdownSetOperation(std::move(op));\n \tcase LogicalOperatorType::LOGICAL_DISTINCT:\n+\t\treturn PushdownDistinct(std::move(op));\n \tcase LogicalOperatorType::LOGICAL_ORDER_BY: {\n \t\t// we can just push directly through these operations without any rewriting\n \t\top->children[0] = Rewrite(std::move(op->children[0]));\ndiff --git a/src/optimizer/pushdown/CMakeLists.txt b/src/optimizer/pushdown/CMakeLists.txt\nindex 1c2ff2e4f141..741137217413 100644\n--- a/src/optimizer/pushdown/CMakeLists.txt\n+++ b/src/optimizer/pushdown/CMakeLists.txt\n@@ -3,6 +3,7 @@ add_library_unity(\n   OBJECT\n   pushdown_aggregate.cpp\n   pushdown_cross_product.cpp\n+  pushdown_distinct.cpp\n   pushdown_filter.cpp\n   pushdown_get.cpp\n   pushdown_inner_join.cpp\ndiff --git a/src/optimizer/pushdown/pushdown_distinct.cpp b/src/optimizer/pushdown/pushdown_distinct.cpp\nnew file mode 100644\nindex 000000000000..030d18190114\n--- /dev/null\n+++ b/src/optimizer/pushdown/pushdown_distinct.cpp\n@@ -0,0 +1,19 @@\n+#include \"duckdb/optimizer/filter_pushdown.hpp\"\n+#include \"duckdb/planner/expression_iterator.hpp\"\n+#include \"duckdb/planner/operator/logical_distinct.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<LogicalOperator> FilterPushdown::PushdownDistinct(unique_ptr<LogicalOperator> op) {\n+\tD_ASSERT(op->type == LogicalOperatorType::LOGICAL_DISTINCT);\n+\tauto &distinct = op->Cast<LogicalDistinct>();\n+\tif (!distinct.order_by) {\n+\t\t// regular DISTINCT - can just push down\n+\t\top->children[0] = Rewrite(std::move(op->children[0]));\n+\t\treturn op;\n+\t}\n+\t// no pushdown through DISTINCT ON (yet?)\n+\treturn FinishPushdown(std::move(op));\n+}\n+\n+} // namespace duckdb\n",
  "test_patch": "diff --git a/test/sql/aggregate/distinct/issue9241.test b/test/sql/aggregate/distinct/issue9241.test\nnew file mode 100644\nindex 000000000000..bc100ffa5b06\n--- /dev/null\n+++ b/test/sql/aggregate/distinct/issue9241.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/aggregate/distinct/issue9241.test\n+# description: Test DISTINCT ON\n+# group: [distinct]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table foo (a int, b int);\n+\n+statement ok\n+insert into foo values (1, 1), (2, 1), (2, 2);\n+\n+query II\n+select * from (select distinct on (a) a, b from foo order by a, b desc) sub;\n+----\n+1\t1\n+2\t2\n+\n+query II\n+select * from (select distinct on (a) a, b from foo order by a, b desc) sub where b <> 2;\n+----\n+1\t1\n",
  "problem_statement": "DISTINCT ON in a subquery + filter produces wrong results\n### What happens?\n\n`DISTINCT ON` relies on the `ORDER BY` clause to figure out which rows to return from a select statement. If you write a filter outside of a subquery with `DISTINCT ON`, it should apply the filter on the result, not push it into a subquery. However, DuckDB appears to push the filter into the subquery, producing wrong results.\n\n### To Reproduce\n\n```\r\nD create table foo (a int, b int);\r\nD\r\nD insert into foo values (1, 1), (2, 1), (2, 2);\r\nD select * from (select distinct on (a) a, b from foo order by a, b desc) sub;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\nD select * from (select distinct on (a) a, b from foo order by a, b desc) sub where b <> 2;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\n```\r\n\r\nI've verified that Postgres produces a single row (`(1, 1)`) in this case.\n\n### OS:\n\nmac os x\n\n### DuckDB Version:\n\nv0.9.0 0d84ccf478\n\n### DuckDB Client:\n\ncli\n\n### Full Name:\n\nAnkur Goyal\n\n### Affiliation:\n\nBraintrust Data\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a release build (and could not test with a main build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nDISTINCT ON in a subquery + filter produces wrong results\n### What happens?\n\n`DISTINCT ON` relies on the `ORDER BY` clause to figure out which rows to return from a select statement. If you write a filter outside of a subquery with `DISTINCT ON`, it should apply the filter on the result, not push it into a subquery. However, DuckDB appears to push the filter into the subquery, producing wrong results.\n\n### To Reproduce\n\n```\r\nD create table foo (a int, b int);\r\nD\r\nD insert into foo values (1, 1), (2, 1), (2, 2);\r\nD select * from (select distinct on (a) a, b from foo order by a, b desc) sub;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\nD select * from (select distinct on (a) a, b from foo order by a, b desc) sub where b <> 2;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD\r\n```\r\n\r\nI've verified that Postgres produces a single row (`(1, 1)`) in this case.\n\n### OS:\n\nmac os x\n\n### DuckDB Version:\n\nv0.9.0 0d84ccf478\n\n### DuckDB Client:\n\ncli\n\n### Full Name:\n\nAnkur Goyal\n\n### Affiliation:\n\nBraintrust Data\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a release build (and could not test with a main build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "I would need to test on release, but from just reading it this sounds like a problem.\n\nThanks for the clear and concise reproduction, we appreciate it a lot!\n```\r\nD select * from (select distinct on (a) a, b from tbl order by a, b desc);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select * from (select distinct on (a) a, b from tbl order by a, b desc) where b != 2;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD pragma version;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 library_version \u2502 source_id  \u2502\r\n\u2502     varchar     \u2502  varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 v0.9.1-dev165   \u2502 c3aa7594ab \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI can reproduce your results, we'll have a look \ud83d\udc4d\r\nCan't guarantee a timeframe however\nThank you! We are working around it for now by just using a window function.\nI would need to test on release, but from just reading it this sounds like a problem.\n\nThanks for the clear and concise reproduction, we appreciate it a lot!\n```\r\nD select * from (select distinct on (a) a, b from tbl order by a, b desc);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     2 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select * from (select distinct on (a) a, b from tbl order by a, b desc) where b != 2;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   a   \u2502   b   \u2502\r\n\u2502 int32 \u2502 int32 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502     1 \u2502\r\n\u2502     2 \u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD pragma version;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 library_version \u2502 source_id  \u2502\r\n\u2502     varchar     \u2502  varchar   \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 v0.9.1-dev165   \u2502 c3aa7594ab \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI can reproduce your results, we'll have a look \ud83d\udc4d\r\nCan't guarantee a timeframe however\nThank you! We are working around it for now by just using a window function.",
  "created_at": "2023-10-09T08:59:28Z"
}