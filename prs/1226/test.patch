diff --git a/tools/pythonpkg/tests/test_dbapi12.py b/tools/pythonpkg/tests/test_dbapi12.py
index 7c37f6c27b25..911926c894c1 100644
--- a/tools/pythonpkg/tests/test_dbapi12.py
+++ b/tools/pythonpkg/tests/test_dbapi12.py
@@ -2,52 +2,55 @@
 import tempfile
 import os
 import pandas as pd
+import sys
 
 class TestRelationApi(object):
-	def test_readonly(self, duckdb_cursor):
+    def test_readonly(self, duckdb_cursor):
+        if sys.version_info.major < 3:
+            return
 
-		test_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "j":["one", "two", "three"]})
+        test_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "j":["one", "two", "three"]})
 
-		def test_rel(rel, duckdb_cursor):
-			res = rel.filter('i < 3').order('j').project('i').union(rel.filter('i > 2').project('i')).join(rel.set_alias('a1'), 'i').project('CAST(i as BIGINT) i, j').order('i')
-			pd.testing.assert_frame_equal(res.to_df(), test_df)
-			res3 = duckdb_cursor.from_df(res.to_df()).to_df()
-			pd.testing.assert_frame_equal(res3, test_df)
+        def test_rel(rel, duckdb_cursor):
+            res = rel.filter('i < 3').order('j').project('i').union(rel.filter('i > 2').project('i')).join(rel.set_alias('a1'), 'i').project('CAST(i as BIGINT) i, j').order('i')
+            pd.testing.assert_frame_equal(res.to_df(), test_df)
+            res3 = duckdb_cursor.from_df(res.to_df()).to_df()
+            pd.testing.assert_frame_equal(res3, test_df)
 
-			df_sql = res.query('x', 'select CAST(i as BIGINT) i, j from x')
-			pd.testing.assert_frame_equal(df_sql.fetchdf(), test_df)
+            df_sql = res.query('x', 'select CAST(i as BIGINT) i, j from x')
+            pd.testing.assert_frame_equal(df_sql.fetchdf(), test_df)
 
-			res2 = res.aggregate('i, count(j) as cj', 'i').order('i')
-			cmp_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "cj":[1, 1, 1]})
-			pd.testing.assert_frame_equal(res2.to_df(), cmp_df)
+            res2 = res.aggregate('i, count(j) as cj', 'i').order('i')
+            cmp_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "cj":[1, 1, 1]})
+            pd.testing.assert_frame_equal(res2.to_df(), cmp_df)
 
-			rel.create('a2')
-			rel_a2 = duckdb_cursor.table('a2').project('CAST(i as BIGINT) i, j').to_df()
-			pd.testing.assert_frame_equal(rel_a2, test_df)
+            rel.create('a2')
+            rel_a2 = duckdb_cursor.table('a2').project('CAST(i as BIGINT) i, j').to_df()
+            pd.testing.assert_frame_equal(rel_a2, test_df)
 
-			duckdb_cursor.execute('DROP TABLE IF EXISTS a3')
-			duckdb_cursor.execute('CREATE TABLE a3 (i INTEGER, j STRING)')
-			rel.insert_into('a3')
-			rel_a3 = duckdb_cursor.table('a3').project('CAST(i as BIGINT) i, j').to_df()
-			pd.testing.assert_frame_equal(rel_a3, test_df)
+            duckdb_cursor.execute('DROP TABLE IF EXISTS a3')
+            duckdb_cursor.execute('CREATE TABLE a3 (i INTEGER, j STRING)')
+            rel.insert_into('a3')
+            rel_a3 = duckdb_cursor.table('a3').project('CAST(i as BIGINT) i, j').to_df()
+            pd.testing.assert_frame_equal(rel_a3, test_df)
 
-		duckdb_cursor.execute('CREATE TABLE a (i INTEGER, j STRING)')
-		duckdb_cursor.execute("INSERT INTO a VALUES (1, 'one'), (2, 'two'), (3, 'three')")
-		duckdb_cursor.execute('CREATE VIEW v AS SELECT * FROM a')
+        duckdb_cursor.execute('CREATE TABLE a (i INTEGER, j STRING)')
+        duckdb_cursor.execute("INSERT INTO a VALUES (1, 'one'), (2, 'two'), (3, 'three')")
+        duckdb_cursor.execute('CREATE VIEW v AS SELECT * FROM a')
 
-		duckdb_cursor.execute('CREATE TEMPORARY TABLE at (i INTEGER)')
-		duckdb_cursor.execute('CREATE TEMPORARY VIEW vt AS SELECT * FROM at')
+        duckdb_cursor.execute('CREATE TEMPORARY TABLE at (i INTEGER)')
+        duckdb_cursor.execute('CREATE TEMPORARY VIEW vt AS SELECT * FROM at')
 
-		rel_a = duckdb_cursor.table('a')
-		rel_v = duckdb_cursor.view('v')
-		#rel_at = duckdb_cursor.table('at')
-		#rel_vt = duckdb_cursor.view('vt')
+        rel_a = duckdb_cursor.table('a')
+        rel_v = duckdb_cursor.view('v')
+        #rel_at = duckdb_cursor.table('at')
+        #rel_vt = duckdb_cursor.view('vt')
 
-		rel_df = duckdb_cursor.from_df(test_df)
+        rel_df = duckdb_cursor.from_df(test_df)
 
-		test_rel(rel_a, duckdb_cursor)
-		test_rel(rel_v, duckdb_cursor)
-		test_rel(rel_df, duckdb_cursor)
+        test_rel(rel_a, duckdb_cursor)
+        test_rel(rel_v, duckdb_cursor)
+        test_rel(rel_df, duckdb_cursor)
 
 # cursor = duckdb.connect().cursor()
 # TestRelationApi().test_readonly(cursor)
\ No newline at end of file
diff --git a/tools/pythonpkg/tests/test_parallel_pandas_scan.py b/tools/pythonpkg/tests/test_parallel_pandas_scan.py
new file mode 100644
index 000000000000..41427487a655
--- /dev/null
+++ b/tools/pythonpkg/tests/test_parallel_pandas_scan.py
@@ -0,0 +1,76 @@
+#!/usr/bin/env python
+# -*- coding: utf-8 -*-
+import duckdb
+import pandas as pd
+import numpy
+import datetime
+import sys
+
+def run_parallel_queries(main_table, left_join_table, expected_df, iteration_count = 5):
+    for i in range(0, iteration_count):
+        output_df = None
+        sql = """
+        select
+            main_table.*
+            ,t1.*
+            ,t2.*
+        from main_table
+        left join left_join_table t1
+            on main_table.join_column = t1.join_column
+        left join left_join_table t2
+            on main_table.join_column = t2.join_column
+        """
+        try:
+            duckdb_conn = duckdb.connect()
+            duckdb_conn.execute("PRAGMA threads=4")
+            duckdb_conn.register('main_table', main_table)
+            duckdb_conn.register('left_join_table', left_join_table)
+            output_df = duckdb_conn.execute(sql).fetchdf()
+            pd.testing.assert_frame_equal(expected_df, output_df)
+            print(output_df)
+        except Exception as err:
+            print(err)
+        finally:
+            duckdb_conn.close()
+
+class TestParallelPandasScan(object):
+    def test_parallel_numeric_scan(self, duckdb_cursor):
+        main_table = pd.DataFrame([{"join_column": 3}])
+        left_join_table = pd.DataFrame([{"join_column": 3,"other_column": 4}])
+        run_parallel_queries(main_table, left_join_table, left_join_table)
+
+    def test_parallel_ascii_text(self, duckdb_cursor):
+        main_table = pd.DataFrame([{"join_column":"text"}])
+        left_join_table = pd.DataFrame([{"join_column":"text","other_column":"more text"}])
+        run_parallel_queries(main_table, left_join_table, left_join_table)
+
+    def test_parallel_unicode_text(self, duckdb_cursor):
+        main_table = pd.DataFrame([{"join_column":u"m√ºhleisen"}])
+        left_join_table = pd.DataFrame([{"join_column": u"m√ºhleisen","other_column":u"h√∂h√∂h√∂"}])
+        run_parallel_queries(main_table, left_join_table, left_join_table)
+
+    def test_parallel_complex_unicode_text(self, duckdb_cursor):
+        if sys.version_info.major < 3:
+            return
+        main_table = pd.DataFrame([{"join_column":u"È¥®"}])
+        left_join_table = pd.DataFrame([{"join_column": u"È¥®","other_column":u"Êï∏ÊìöÂ∫´"}])
+        run_parallel_queries(main_table, left_join_table, left_join_table)
+
+    def test_parallel_emojis(self, duckdb_cursor):
+        if sys.version_info.major < 3:
+            return
+        main_table = pd.DataFrame([{"join_column":u"ü§¶üèº‚Äç‚ôÇÔ∏è Lü§¶üèº‚Äç‚ôÇÔ∏èR ü§¶üèº‚Äç‚ôÇÔ∏è"}])
+        left_join_table = pd.DataFrame([{"join_column": u"ü§¶üèº‚Äç‚ôÇÔ∏è Lü§¶üèº‚Äç‚ôÇÔ∏èR ü§¶üèº‚Äç‚ôÇÔ∏è","other_column":u"ü¶Üüçûü¶Ü"}])
+        run_parallel_queries(main_table, left_join_table, left_join_table)
+
+    def test_parallel_numeric_object(self, duckdb_cursor):
+        main_table = pd.DataFrame({ 'join_column': pd.Series([3], dtype="Int8") })
+        left_join_table = pd.DataFrame({ 'join_column': pd.Series([3], dtype="Int8"), 'other_column': pd.Series([4], dtype="Int8") })
+        expected_df = pd.DataFrame({ "join_column": numpy.array([3], dtype=numpy.int8), "other_column": numpy.array([4], dtype=numpy.int8)})
+        run_parallel_queries(main_table, left_join_table, expected_df)
+
+    def test_parallel_timestamp(self, duckdb_cursor):
+        main_table = pd.DataFrame({ 'join_column': [pd.Timestamp('20180310T11:17:54Z')] })
+        left_join_table = pd.DataFrame({ 'join_column': [pd.Timestamp('20180310T11:17:54Z')], 'other_column': [pd.Timestamp('20190310T11:17:54Z')] })
+        expected_df = pd.DataFrame({ "join_column": numpy.array([datetime.datetime(2018, 3, 10, 11, 17, 54)], dtype='datetime64[ns]'), "other_column": numpy.array([datetime.datetime(2019, 3, 10, 11, 17, 54)], dtype='datetime64[ns]')})
+        run_parallel_queries(main_table, left_join_table, expected_df)
diff --git a/tools/pythonpkg/tests/test_unicode.py b/tools/pythonpkg/tests/test_unicode.py
index f88e4a092bec..e807b575611a 100644
--- a/tools/pythonpkg/tests/test_unicode.py
+++ b/tools/pythonpkg/tests/test_unicode.py
@@ -3,10 +3,12 @@
 
 import duckdb
 import pandas as pd
-
+import sys
 
 class TestUnicode(object):
     def test_unicode_pandas_scan(self, duckdb_cursor):
+        if sys.version_info.major < 3:
+            return
         con = duckdb.connect(database=':memory:', read_only=False)
         test_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "j":["a", "c", u"√´"]})
         con.register('test_df_view', test_df)
