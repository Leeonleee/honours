{
  "repo": "duckdb/duckdb",
  "pull_number": 16537,
  "instance_id": "duckdb__duckdb-16537",
  "issue_numbers": [
    "16524",
    "16524"
  ],
  "base_commit": "352088979a6d89ab15366bf98294c4488e563b19",
  "patch": "diff --git a/src/planner/binder/query_node/plan_subquery.cpp b/src/planner/binder/query_node/plan_subquery.cpp\nindex b938f1f65417..f4c98bcfcebe 100644\n--- a/src/planner/binder/query_node/plan_subquery.cpp\n+++ b/src/planner/binder/query_node/plan_subquery.cpp\n@@ -393,17 +393,20 @@ void RecursiveDependentJoinPlanner::VisitOperator(LogicalOperator &op) {\n \t\t\tauto &rec_cte = op.Cast<LogicalRecursiveCTE>();\n \t\t\tbinder.recursive_ctes[rec_cte.table_index] = &op;\n \t\t}\n-\t\troot = std::move(op.children[0]);\n-\t\tD_ASSERT(root);\n-\t\tif (root->type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n-\t\t\t// Found a dependent join, flatten it\n-\t\t\tauto &new_root = root->Cast<LogicalDependentJoin>();\n-\t\t\troot = binder.PlanLateralJoin(std::move(new_root.children[0]), std::move(new_root.children[1]),\n-\t\t\t                              new_root.correlated_columns, new_root.join_type,\n-\t\t\t                              std::move(new_root.join_condition));\n+\t\tfor (idx_t i = 0; i < op.children.size(); i++) {\n+\t\t\troot = std::move(op.children[i]);\n+\t\t\tD_ASSERT(root);\n+\t\t\tif (root->type == LogicalOperatorType::LOGICAL_DEPENDENT_JOIN) {\n+\t\t\t\t// Found a dependent join, flatten it\n+\t\t\t\tauto &new_root = root->Cast<LogicalDependentJoin>();\n+\t\t\t\troot = binder.PlanLateralJoin(std::move(new_root.children[0]), std::move(new_root.children[1]),\n+\t\t\t\t                              new_root.correlated_columns, new_root.join_type,\n+\t\t\t\t                              std::move(new_root.join_condition));\n+\t\t\t}\n+\t\t\tVisitOperatorExpressions(op);\n+\t\t\top.children[i] = std::move(root);\n \t\t}\n-\t\tVisitOperatorExpressions(op);\n-\t\top.children[0] = std::move(root);\n+\n \t\tfor (idx_t i = 0; i < op.children.size(); i++) {\n \t\t\tD_ASSERT(op.children[i]);\n \t\t\tVisitOperator(*op.children[i]);\n",
  "test_patch": "diff --git a/test/issues/general/test_16524.test b/test/issues/general/test_16524.test\nnew file mode 100644\nindex 000000000000..019f09e49995\n--- /dev/null\n+++ b/test/issues/general/test_16524.test\n@@ -0,0 +1,24 @@\n+# name: test/issues/general/test_16524.test\n+# description: Issue 16524 - DuckDB internal error with a relatively complex JOIN involving lateral subqueries\n+# group: [general]\n+\n+statement ok\n+CREATE TABLE INT8_TBL(q1 int8, q2 int8);\n+\n+statement ok\n+INSERT INTO INT8_TBL VALUES\n+  ('  123   ','  456'),\n+  ('123   ','4567890123456789'),\n+  ('4567890123456789','123'),\n+  (+4567890123456789,'4567890123456789'),\n+  ('+4567890123456789','-4567890123456789');\n+\n+statement ok\n+select * from\n+  int8_tbl c left join (\n+    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1\n+      on a.q2 = ss1.q1\n+    cross join\n+    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2\n+  ) on c.q2 = ss2.q1,\n+  lateral (select ss2.y offset 0) ss3\n",
  "problem_statement": "DuckDB internal error with a relatively complex JOIN involving lateral subqueries\n### What happens?\n\nDuckDB throws `INTERNAL Error` with a relatively complex JOIN involving lateral subqueries\n\n### To Reproduce\n\n```sql\n\nCREATE TABLE INT8_TBL(q1 int8, q2 int8);\n\nINSERT INTO INT8_TBL VALUES\n  ('  123   ','  456'),\n  ('123   ','4567890123456789'),\n  ('4567890123456789','123'),\n  (+4567890123456789,'4567890123456789'),\n  ('+4567890123456789','-4567890123456789');\n\n\nselect * from\n  int8_tbl c left join (\n    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1\n      on a.q2 = ss1.q1\n    cross join\n    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2\n  ) on c.q2 = ss2.q1,\n  lateral (select ss2.y offset 0) ss3;\n```\n```console\nERROR:  Unknown Error\n\nINTERNAL Error: Failed to bind column reference \"x\" [3.1] (bindings: {#[9.0], #[9.1]})\nThis error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.\nFor more information, see https://duckdb.org/docs/dev/internal_errors\n```\n\nRemoving the last `lateral` subquery avoids the crash:\n```sql\n\nselect * from\n  int8_tbl c left join (\n    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1\n      on a.q2 = ss1.q1\n    cross join\n    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2\n  ) on c.q2 = ss2.q1\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n1.1.3 and 1.2.0\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nOnder KALACI\n\n### Affiliation:\n\nCrunchy Data\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have not tested with any build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\nDuckDB internal error with a relatively complex JOIN involving lateral subqueries\n### What happens?\n\nDuckDB throws `INTERNAL Error` with a relatively complex JOIN involving lateral subqueries\n\n### To Reproduce\n\n```sql\n\nCREATE TABLE INT8_TBL(q1 int8, q2 int8);\n\nINSERT INTO INT8_TBL VALUES\n  ('  123   ','  456'),\n  ('123   ','4567890123456789'),\n  ('4567890123456789','123'),\n  (+4567890123456789,'4567890123456789'),\n  ('+4567890123456789','-4567890123456789');\n\n\nselect * from\n  int8_tbl c left join (\n    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1\n      on a.q2 = ss1.q1\n    cross join\n    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2\n  ) on c.q2 = ss2.q1,\n  lateral (select ss2.y offset 0) ss3;\n```\n```console\nERROR:  Unknown Error\n\nINTERNAL Error: Failed to bind column reference \"x\" [3.1] (bindings: {#[9.0], #[9.1]})\nThis error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.\nFor more information, see https://duckdb.org/docs/dev/internal_errors\n```\n\nRemoving the last `lateral` subquery avoids the crash:\n```sql\n\nselect * from\n  int8_tbl c left join (\n    int8_tbl a left join (select q1, coalesce(q2,42) as x from int8_tbl b) ss1\n      on a.q2 = ss1.q1\n    cross join\n    lateral (select q1, coalesce(ss1.x,q2) as y from int8_tbl d) ss2\n  ) on c.q2 = ss2.q1\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n1.1.3 and 1.2.0\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nOnder KALACI\n\n### Affiliation:\n\nCrunchy Data\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have not tested with any build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [x] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [x] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2025-03-06T12:36:06Z"
}