diff --git a/test/sql/catalog/function/test_simple_macro.test b/test/sql/catalog/function/test_simple_macro.test
index c21ccf04d9b2..0b4be7011361 100644
--- a/test/sql/catalog/function/test_simple_macro.test
+++ b/test/sql/catalog/function/test_simple_macro.test
@@ -28,6 +28,58 @@ SELECT one(NULL)
 statement ok
 DROP MACRO one;
 
+# HAVING in a macro
+statement ok
+CREATE MACRO having_macro(x) AS (SELECT * FROM integers GROUP BY a HAVING a = x)
+
+query T
+SELECT having_macro(1)
+----
+1
+
+query T
+SELECT having_macro(6)
+----
+NULL
+
+# UNION in a macro
+statement ok
+CREATE MACRO union_macro(x, y, z) AS (SELECT x IN (SELECT y UNION ALL SELECT z))
+
+query T
+SELECT union_macro(1, 2, 3)
+----
+false
+
+query T
+SELECT union_macro(1, 2, 1)
+----
+true
+
+query T
+SELECT union_macro(1, 1, 2)
+----
+true
+
+# expression list
+statement ok
+CREATE MACRO in_expression_list(x, y, z) AS (SELECT x IN (VALUES (y), (z)))
+
+query T
+SELECT in_expression_list(1, 2, 3)
+----
+false
+
+query T
+SELECT in_expression_list(1, 2, 1)
+----
+true
+
+query T
+SELECT in_expression_list(1, 1, 2)
+----
+true
+
 # FUNCTION alias
 statement ok
 CREATE FUNCTION two() AS (SELECT 2);
diff --git a/test/sql/order/test_order_nested.test b/test/sql/order/test_order_nested.test
index 28ffea1b04c0..d5aae6947d65 100644
--- a/test/sql/order/test_order_nested.test
+++ b/test/sql/order/test_order_nested.test
@@ -5,18 +5,45 @@
 statement ok
 PRAGMA enable_verification
 
-# first iteration runs externally, second runs normally
+# test all integral types and varchar, internal and external
 statement ok
 PRAGMA force_external
 
 loop i 0 2
 
+foreach type <integral> varchar
+
 # list tests
 statement ok
-CREATE TABLE test0 (i INT[])
+CREATE TABLE test0 (i ${type}[])
+
+statement ok
+INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3])
+
+query T
+SELECT * FROM test0 ORDER BY i
+----
+[]
+[1]
+[1, 2]
+[2]
+[2, 2]
+[2, 3]
+[NULL]
+
+query T
+SELECT * FROM test0 ORDER BY i DESC
+----
+[NULL]
+[2, 3]
+[2, 2]
+[2]
+[1, 2]
+[1]
+[]
 
 statement ok
-INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), (NULL), ([2, 3])
+INSERT INTO test0 VALUES (NULL)
 
 query T
 SELECT * FROM test0 ORDER BY i
@@ -67,37 +94,7 @@ SELECT * FROM test0 ORDER BY i DESC NULLS LAST
 NULL
 
 statement ok
-CREATE TABLE test1 (i VARCHAR[])
-
-statement ok
-INSERT INTO test1 VALUES (['2']), (['1']), (['1', '2']), ([]), (['2', '2']), ([NULL]), (NULL), (['2', '3'])
-
-query T
-SELECT * FROM test1 ORDER BY i
-----
-NULL
-[]
-[1]
-[1, 2]
-[2]
-[2, 2]
-[2, 3]
-[NULL]
-
-query T
-SELECT * FROM test1 ORDER BY i DESC
-----
-NULL
-[NULL]
-[2, 3]
-[2, 2]
-[2]
-[1, 2]
-[1]
-[]
-
-statement ok
-CREATE TABLE test2 (i INT[][])
+CREATE TABLE test2 (i ${type}[][])
 
 statement ok
 INSERT INTO test2 VALUES ([[2]]), ([[1]]), ([NULL, []]), ([[1], [2]]), ([]), ([[]]), ([[2], [2]]), ([NULL]), (NULL), ([[2], [3]])
@@ -131,7 +128,7 @@ NULL
 []
 
 statement ok
-CREATE TABLE test3 (i INT[][])
+CREATE TABLE test3 (i ${type}[][])
 
 statement ok
 INSERT INTO test3 VALUES ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], []]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 1]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [5, 5, 5, 5, 2]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], [NULL]]), ([[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], NULL])
@@ -159,10 +156,10 @@ SELECT * FROM test3 ORDER BY i DESC
 [[3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]]
 
 statement ok
-CREATE TABLE test4 (i VARCHAR[][])
+CREATE TABLE test4 (i ${type}[][])
 
 statement ok
-INSERT INTO test4 VALUES ([[NULL, NULL, '0'], ['1', NULL, '1']]), ([[NULL, NULL, '1']]), ([[NULL, NULL, '0'], ['1', NULL, '0']]), ([[0, NULL, NULL, 1]]), ([[0, NULL, NULL, 0]])
+INSERT INTO test4 VALUES ([[NULL, NULL, 0], [1, NULL, 1]]), ([[NULL, NULL, 1]]), ([[NULL, NULL, 0], [1, NULL, 0]]), ([[0, NULL, NULL, 1]]), ([[0, NULL, NULL, 0]])
 
 query T
 SELECT * FROM test4 ORDER BY i
@@ -184,10 +181,18 @@ SELECT * FROM test4 ORDER BY i DESC
 
 # struct tests
 statement ok
-CREATE TABLE test10 (s STRUCT(i INT, j INT));
+CREATE TABLE test10 (s STRUCT(i ${type}, j ${type}));
 
 statement ok
-INSERT INTO test10 values ({'i': 2, 'j': NULL}), ({'i': 1, 'j': NULL}), ({'i': 2, 'j': 3}), ({'i': 1, 'j': 2}), ({'i': 2, 'j': 2}), ({'i': NULL, 'j': NULL}), (NULL), ({'i': 2, 'j': 3})
+INSERT INTO test10 values
+({'i': 2, 'j': NULL}),
+({'i': 1, 'j': NULL}),
+({'i': 2, 'j': 3}),
+({'i': 1, 'j': 2}),
+({'i': 2, 'j': 2}),
+({'i': NULL, 'j': NULL}),
+(NULL),
+({'i': 2, 'j': 3})
 
 query T
 SELECT * FROM test10 ORDER BY s
@@ -214,7 +219,7 @@ NULL
 {'i': 1, 'j': 2}
 
 statement ok
-CREATE TABLE test11 (s STRUCT(s1 STRUCT(i INT, j INT)))
+CREATE TABLE test11 (s STRUCT(s1 STRUCT(i ${type}, j ${type})))
 
 statement ok
 INSERT INTO test11 VALUES ({'s1': NULL}), (NULL), ({'s1': {'i': NULL, 'j': 1}}), ({'s1': {'i': 0, 'j': NULL}}), ({'s1': {'i': NULL, 'j': NULL}}), ({'s1': {'i': 0, 'j': 1}})
@@ -240,98 +245,40 @@ NULL
 {'s1': {'i': 0, 'j': 1}}
 
 statement ok
-CREATE TABLE test12 (s STRUCT(s1 STRUCT(i VARCHAR, j VARCHAR)))
-
-statement ok
-INSERT INTO test12 VALUES ({'s1': NULL}), (NULL), ({'s1': {'i': NULL, 'j': '1'}}), ({'s1': {'i': '0', 'j': NULL}}), ({'s1': {'i': NULL, 'j': NULL}}), ({'s1': {'i': '0', 'j': '1'}})
-
-query T
-SELECT * FROM test12 ORDER BY s
-----
-NULL
-{'s1': {'i': 0, 'j': 1}}
-{'s1': {'i': 0, 'j': NULL}}
-{'s1': {'i': NULL, 'j': 1}}
-{'s1': {'i': NULL, 'j': NULL}}
-{'s1': NULL}
-
-query T
-SELECT * FROM test12 ORDER BY s DESC
-----
-NULL
-{'s1': NULL}
-{'s1': {'i': NULL, 'j': NULL}}
-{'s1': {'i': NULL, 'j': 1}}
-{'s1': {'i': 0, 'j': NULL}}
-{'s1': {'i': 0, 'j': 1}}
-
-statement ok
-CREATE TABLE test13 (s STRUCT(a INT, b INT, c INT, d INT, e INT, f INT, g INT, h INT, i INT, j INT))
+CREATE TABLE test13 (s STRUCT(a ${type}, b ${type}, c ${type}, d ${type}, e ${type}, f ${type}, g ${type}, h ${type}, i ${type}, j ${type}))
 
 statement ok
 INSERT INTO test13 VALUES
+({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 8}),
 ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}),
-({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 10}),
+({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 8}),
 ({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}),
-({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 10}),
-({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9}),
-({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 10})
+({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 8}),
+({'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9})
 
 query T
 SELECT * FROM test13 ORDER BY s
 ----
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 8}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 10}
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 8}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 10}
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 8}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 10}
 
 query T
 SELECT * FROM test13 ORDER BY s DESC
 ----
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 10}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 10}
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 8}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 10}
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 8}
 {'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}
-
-statement ok
-CREATE TABLE test14 (s STRUCT(a VARCHAR, b VARCHAR, c VARCHAR, d VARCHAR, e VARCHAR, f VARCHAR, g VARCHAR, h VARCHAR, i VARCHAR, j VARCHAR))
-
-statement ok
-INSERT INTO test14 VALUES
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': '4', 'f': '5', 'g': '6', 'h': '7', 'i': '8', 'j': '9'}),
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': '4', 'f': '5', 'g': '6', 'h': '7', 'i': '8', 'j': '10'}),
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': '8', 'j': '9'}),
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': '8', 'j': '10'}),
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': '4', 'f': '5', 'g': '6', 'h': NULL, 'i': NULL, 'j': '9'}),
-({'a': '0', 'b': '1', 'c': '2', 'd': '3', 'e': '4', 'f': '5', 'g': '6', 'h': NULL, 'i': NULL, 'j': '10'})
-
-query T
-SELECT * FROM test14 ORDER BY s
-----
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 10}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 10}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 10}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}
-
-query T
-SELECT * FROM test14 ORDER BY s DESC
-----
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': NULL, 'f': NULL, 'g': NULL, 'h': NULL, 'i': 8, 'j': 10}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': NULL, 'i': NULL, 'j': 10}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 9}
-{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 10}
+{'a': 0, 'b': 1, 'c': 2, 'd': 3, 'e': 4, 'f': 5, 'g': 6, 'h': 7, 'i': 8, 'j': 8}
 
 # combination of lists and structs
 statement ok
-CREATE TABLE test20 (l STRUCT(i INT)[])
+CREATE TABLE test20 (l STRUCT(i ${type})[])
 
 statement ok
 INSERT INTO test20 VALUES
@@ -369,45 +316,7 @@ SELECT * FROM test20 ORDER BY l DESC
 [{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 0}]
 
 statement ok
-CREATE TABLE test21 (l STRUCT(i VARCHAR)[])
-
-statement ok
-INSERT INTO test21 VALUES
-([{'i': NULL}, {'i': NULL}, {'i': '0'}, {'i': NULL}, {'i': NULL}, {'i': '0'}]),
-([{'i': NULL}, {'i': NULL}, {'i': '0'}, {'i': NULL}, {'i': NULL}, {'i': '1'}]),
-([{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': '1'}]),
-([{'i': NULL}, {'i': NULL}, {'i': '0'}, {'i': NULL}, {'i': NULL}, {'i': NULL}]),
-([{'i': NULL}, {'i': NULL}, {'i': '1'}, {'i': NULL}, {'i': NULL}, {'i': '0'}]),
-([{'i': NULL}, {'i': NULL}, {'i': '1'}, {'i': NULL}, {'i': NULL}, {'i': '1'}]),
-([{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': '0'}]),
-([{'i': NULL}, {'i': NULL}, {'i': '1'}, {'i': NULL}, {'i': NULL}, {'i': NULL}])
-
-query T
-SELECT * FROM test21 ORDER BY l
-----
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': NULL}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': NULL}]
-[{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-[{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-
-query T
-SELECT * FROM test21 ORDER BY l DESC
-----
-[{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-[{'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': NULL}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-[{'i': NULL}, {'i': NULL}, {'i': 1}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': NULL}]
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 1}]
-[{'i': NULL}, {'i': NULL}, {'i': 0}, {'i': NULL}, {'i': NULL}, {'i': 0}]
-
-statement ok
-CREATE TABLE test22 (s STRUCT(i INT[], j INT[]))
+CREATE TABLE test22 (s STRUCT(i ${type}[], j ${type}[]))
 
 statement ok
 INSERT INTO test22 VALUES
@@ -445,45 +354,7 @@ SELECT * FROM test22 ORDER BY s DESC
 {'i': [0, 2], 'j': [2, NULL]}
 
 statement ok
-CREATE TABLE test23 (s STRUCT(i VARCHAR[], j VARCHAR[]))
-
-statement ok
-INSERT INTO test23 VALUES
-({'i': ['0', NULL], 'j': [NULL, '0']}),
-({'i': ['0', NULL], 'j': [NULL, '1']}),
-({'i': ['0', NULL], 'j': ['1', '2']}),
-({'i': ['1', NULL], 'j': ['2', NULL]}),
-({'i': ['0', '2'], 'j': ['2', NULL]}),
-({'i': NULL, 'j': ['2', NULL]}),
-({'i': ['0', '2'], 'j': NULL}),
-({'i': NULL, 'j': ['2', '3']})
-
-query T
-SELECT * FROM test23 ORDER BY s
-----
-{'i': [0, 2], 'j': [2, NULL]}
-{'i': [0, 2], 'j': NULL}
-{'i': [0, NULL], 'j': [1, 2]}
-{'i': [0, NULL], 'j': [NULL, 0]}
-{'i': [0, NULL], 'j': [NULL, 1]}
-{'i': [1, NULL], 'j': [2, NULL]}
-{'i': NULL, 'j': [2, 3]}
-{'i': NULL, 'j': [2, NULL]}
-
-query T
-SELECT * FROM test23 ORDER BY s DESC
-----
-{'i': NULL, 'j': [2, NULL]}
-{'i': NULL, 'j': [2, 3]}
-{'i': [1, NULL], 'j': [2, NULL]}
-{'i': [0, NULL], 'j': [NULL, 1]}
-{'i': [0, NULL], 'j': [NULL, 0]}
-{'i': [0, NULL], 'j': [1, 2]}
-{'i': [0, 2], 'j': NULL}
-{'i': [0, 2], 'j': [2, NULL]}
-
-statement ok
-CREATE TABLE test24 (l STRUCT(l1 STRUCT(i INT)[])[])
+CREATE TABLE test24 (l STRUCT(l1 STRUCT(i ${type})[])[])
 
 statement ok
 INSERT INTO test24 VALUES
@@ -536,107 +407,337 @@ SELECT * FROM test24 ORDER BY l DESC
 [{'l1': [{'i': 0}]}, {'l1': [{'i': 0}]}]
 
 statement ok
-CREATE TABLE test25 (l STRUCT(l1 STRUCT(i VARCHAR)[])[])
+DROP TABLE test0
+
+statement ok
+DROP TABLE test2
 
 statement ok
-INSERT INTO test25 VALUES
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': '0'}]}]),
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': '1'}]}]),
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': '1'}, {'i': '2'}]}]),
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': '1'}, {'i': '1'}]}]),
-([{'l1': [{'i': '1'}]}, {'l1': [{'i': '0'}]}]),
-([{'l1': [{'i': '1'}]}, {'l1': [{'i': '1'}]}]),
-([{'l1': [{'i': NULL}]}, {'l1': [{'i': '0'}]}]),
-([{'l1': [{'i': NULL}]}, {'l1': [{'i': '1'}]}]),
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]),
-([{'l1': [{'i': '1'}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': '1'}]}]),
-([{'l1': [{'i': '0'}]}, {'l1': [{'i': NULL}]}]),
-([{'l1': [{'i': '1'}]}, {'l1': [{'i': NULL}]}]),
-([{'l1': [{'i': '1'}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}])
+DROP TABLE test3
+
+statement ok
+DROP TABLE test4
+
+statement ok
+DROP TABLE test10
+
+statement ok
+DROP TABLE test11
+
+statement ok
+DROP TABLE test13
+
+statement ok
+DROP TABLE test20
+
+statement ok
+DROP TABLE test22
+
+statement ok
+DROP TABLE test24
+
+statement ok
+PRAGMA disable_force_external
+
+endloop
+
+# test floating point types, internal and external
+statement ok
+PRAGMA force_external
+
+loop i 0 2
+
+foreach type float double
+
+statement ok
+CREATE TABLE test2 (i ${type}[][])
+
+statement ok
+INSERT INTO test2 VALUES ([[1.2]]), ([[1.1]]), ([NULL, []]), ([[1.1], [1.2]]), ([]), ([[]]), ([[1.2], [1.2]]), ([NULL]), (NULL), ([[1.2], [1.3]])
 
 query T
-SELECT * FROM test25 ORDER BY l
+SELECT * FROM test2 ORDER BY i
 ----
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 0}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 1}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 2}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': 0}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': NULL}]}, {'l1': [{'i': 0}]}]
-[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]
+NULL
+[]
+[[]]
+[[1.100000]]
+[[1.100000], [1.200000]]
+[[1.200000]]
+[[1.200000], [1.200000]]
+[[1.200000], [1.300000]]
+[NULL]
+[NULL, []]
 
 query T
-SELECT * FROM test25 ORDER BY l DESC
+SELECT * FROM test2 ORDER BY i DESC
 ----
-[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': NULL}]}, {'l1': [{'i': 0}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 1}]}, {'l1': [{'i': 0}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': NULL}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 2}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}, {'i': 1}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 1}]}]
-[{'l1': [{'i': 0}]}, {'l1': [{'i': 0}]}]
+NULL
+[NULL, []]
+[NULL]
+[[1.200000], [1.300000]]
+[[1.200000], [1.200000]]
+[[1.200000]]
+[[1.100000], [1.200000]]
+[[1.100000]]
+[[]]
+[]
 
 statement ok
-DROP TABLE test0
+CREATE TABLE test10 (s STRUCT(i ${type}, j ${type}));
 
 statement ok
-DROP TABLE test1
+INSERT INTO test10 values
+({'i': 1.2, 'j': NULL}),
+({'i': 1.1, 'j': NULL}),
+({'i': 1.2, 'j': 1.3}),
+({'i': 1.1, 'j': 1.2}),
+({'i': 1.2, 'j': 1.2}),
+({'i': NULL, 'j': NULL}),
+(NULL),
+({'i': 1.2, 'j': 1.3})
+
+query T
+SELECT * FROM test10 ORDER BY s
+----
+NULL
+{'i': 1.100000, 'j': 1.200000}
+{'i': 1.100000, 'j': NULL}
+{'i': 1.200000, 'j': 1.200000}
+{'i': 1.200000, 'j': 1.300000}
+{'i': 1.200000, 'j': 1.300000}
+{'i': 1.200000, 'j': NULL}
+{'i': NULL, 'j': NULL}
+
+query T
+SELECT * FROM test10 ORDER BY s DESC
+----
+NULL
+{'i': NULL, 'j': NULL}
+{'i': 1.200000, 'j': NULL}
+{'i': 1.200000, 'j': 1.300000}
+{'i': 1.200000, 'j': 1.300000}
+{'i': 1.200000, 'j': 1.200000}
+{'i': 1.100000, 'j': NULL}
+{'i': 1.100000, 'j': 1.200000}
 
 statement ok
-DROP TABLE test2
+CREATE TABLE test24 (l STRUCT(l1 STRUCT(i ${type})[])[])
 
 statement ok
-DROP TABLE test3
+INSERT INTO test24 VALUES
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.1}]}]),
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}]}]),
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}, {'i': 1.3}]}]),
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': 1.2}, {'i': 1.2}]}]),
+([{'l1': [{'i': 1.2}]}, {'l1': [{'i': 1.1}]}]),
+([{'l1': [{'i': 1.2}]}, {'l1': [{'i': 1.2}]}]),
+([{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.1}]}]),
+([{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.2}]}]),
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]),
+([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1.2}]}]),
+([{'l1': [{'i': 1.1}]}, {'l1': [{'i': NULL}]}]),
+([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}]),
+([{'l1': [{'i': 1.2}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}])
+
+query T
+SELECT * FROM test24 ORDER BY l
+----
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.100000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}, {'i': 1.200000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}, {'i': 1.300000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': 1.100000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.100000}]}]
+[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.200000}]}]
+
+query T
+SELECT * FROM test24 ORDER BY l DESC
+----
+[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': NULL}]}, {'l1': [{'i': 1.100000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.200000}]}, {'l1': [{'i': 1.100000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': NULL}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': NULL}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}, {'i': 1.300000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}, {'i': 1.200000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.200000}]}]
+[{'l1': [{'i': 1.100000}]}, {'l1': [{'i': 1.100000}]}]
 
 statement ok
-DROP TABLE test4
+DROP TABLE test2
 
 statement ok
 DROP TABLE test10
 
 statement ok
-DROP TABLE test11
+DROP TABLE test24
 
 statement ok
-DROP TABLE test12
+PRAGMA disable_force_external
+
+endloop
 
+# test bool
 statement ok
-DROP TABLE test13
+CREATE TABLE test0 (i BOOL[])
 
 statement ok
-DROP TABLE test14
+INSERT INTO test0 VALUES ([True]), ([False]), ([False, True]), ([]), ([True, True]), ([NULL]), (NULL), ([False, False])
+
+query T
+SELECT * FROM test0 ORDER BY i
+----
+NULL
+[]
+[False]
+[False, False]
+[False, True]
+[True]
+[True, True]
+[NULL]
+
+query T
+SELECT * FROM test0 ORDER BY i DESC
+----
+NULL
+[NULL]
+[True, True]
+[True]
+[False, True]
+[False, False]
+[False]
+[]
 
 statement ok
-DROP TABLE test20
+CREATE TABLE test10 (s STRUCT(i BOOL, j BOOL));
+
+statement ok
+INSERT INTO test10 values
+({'i': True, 'j': NULL}),
+({'i': False, 'j': NULL}),
+({'i': True, 'j': True}),
+({'i': False, 'j': True}),
+({'i': NULL, 'j': False}),
+({'i': NULL, 'j': True}),
+({'i': NULL, 'j': NULL}),
+(NULL),
+({'i': False, 'j': False})
+
+query T
+SELECT * FROM test10 ORDER BY s
+----
+NULL
+{'i': False, 'j': False}
+{'i': False, 'j': True}
+{'i': False, 'j': NULL}
+{'i': True, 'j': True}
+{'i': True, 'j': NULL}
+{'i': NULL, 'j': False}
+{'i': NULL, 'j': True}
+{'i': NULL, 'j': NULL}
+
+query T
+SELECT * FROM test10 ORDER BY s DESC
+----
+NULL
+{'i': NULL, 'j': NULL}
+{'i': NULL, 'j': True}
+{'i': NULL, 'j': False}
+{'i': True, 'j': NULL}
+{'i': True, 'j': True}
+{'i': False, 'j': NULL}
+{'i': False, 'j': True}
+{'i': False, 'j': False}
 
 statement ok
-DROP TABLE test21
+DROP TABLE test0
 
 statement ok
-DROP TABLE test22
+DROP TABLE test10
 
+# test interval
 statement ok
-DROP TABLE test23
+CREATE TABLE test0 (i INTERVAL[])
 
 statement ok
-DROP TABLE test24
+INSERT INTO test0 VALUES (['2 years']), (['1 year']), (['1 year', '2 years']), ([]), (['2 years', '2 years']), ([NULL]), (NULL), (['1 year', '1 year'])
+
+query T
+SELECT * FROM test0 ORDER BY i
+----
+NULL
+[]
+[1 year]
+[1 year, 1 year]
+[1 year, 2 years]
+[2 years]
+[2 years, 2 years]
+[NULL]
+
+query T
+SELECT * FROM test0 ORDER BY i DESC
+----
+NULL
+[NULL]
+[2 years, 2 years]
+[2 years]
+[1 year, 2 years]
+[1 year, 1 year]
+[1 year]
+[]
 
 statement ok
-DROP TABLE test25
+CREATE TABLE test10 (s STRUCT(i INTERVAL, j INTERVAL));
 
 statement ok
-PRAGMA disable_force_external
+INSERT INTO test10 values
+({'i': '2 years', 'j': NULL}),
+({'i': '1 year', 'j': NULL}),
+({'i': '2 years', 'j': '2 years'}),
+({'i': '1 year', 'j': '2 years'}),
+({'i': '2 years', 'j': '1 year'}),
+({'i': NULL, 'j': '1 year'}),
+({'i': NULL, 'j': '2 years'}),
+({'i': NULL, 'j': NULL}),
+(NULL),
+({'i': '1 year', 'j': '1 year'})
 
-endloop
+query T
+SELECT * FROM test10 ORDER BY s
+----
+NULL
+{'i': 1 year, 'j': 1 year}
+{'i': 1 year, 'j': 2 years}
+{'i': 1 year, 'j': NULL}
+{'i': 2 years, 'j': 1 year}
+{'i': 2 years, 'j': 2 years}
+{'i': 2 years, 'j': NULL}
+{'i': NULL, 'j': 1 year}
+{'i': NULL, 'j': 2 years}
+{'i': NULL, 'j': NULL}
+
+
+query T
+SELECT * FROM test10 ORDER BY s DESC
+----
+NULL
+{'i': NULL, 'j': NULL}
+{'i': NULL, 'j': 2 years}
+{'i': NULL, 'j': 1 year}
+{'i': 2 years, 'j': NULL}
+{'i': 2 years, 'j': 2 years}
+{'i': 2 years, 'j': 1 year}
+{'i': 1 year, 'j': NULL}
+{'i': 1 year, 'j': 2 years}
+{'i': 1 year, 'j': 1 year}
diff --git a/test/sql/order/test_order_parallel.test_coverage b/test/sql/order/test_order_parallel.test_coverage
index a98c02e6b5fb..e4cd2f6da4aa 100644
--- a/test/sql/order/test_order_parallel.test_coverage
+++ b/test/sql/order/test_order_parallel.test_coverage
@@ -5,14 +5,33 @@
 statement ok
 PRAGMA force_parallelism
 
+# we run this with an uneven amount of threads to force the merge sort to have an odd amount of blocks to merge
 statement ok
-PRAGMA threads=4
+PRAGMA threads=3
 
-# first iteration runs externally, second runs normally
+# do one asc test to hit some coverage, the rest is desc
 statement ok
-PRAGMA force_external
+create table test as (select range i from range(100000) order by i desc);
 
-loop i 0 2
+# all fixed-size
+query T
+select * from test order by i asc;
+----
+100000 values hashing to 1933b84f18ddb7545c63962be5d10bb5
+
+statement ok
+drop table test
+
+# internal/external, different memory limits
+foreach pragma force_external disable_force_external
+
+foreach mem 50 500
+
+statement ok
+PRAGMA ${pragma}
+
+statement ok
+PRAGMA memory_limit='${mem}MB'
 
 statement ok
 create table test as (select range i from range(100000));
@@ -144,7 +163,4 @@ select * from test order by cast(i % 1000 + 1000000000000 as varchar), i % 100,
 statement ok
 drop table test
 
-statement ok
-PRAGMA disable_force_external
-
 endloop
diff --git a/test/sql/order/test_order_variable_size_payload.test b/test/sql/order/test_order_variable_size_payload.test_coverage
similarity index 97%
rename from test/sql/order/test_order_variable_size_payload.test
rename to test/sql/order/test_order_variable_size_payload.test_coverage
index 88e7cb0698ec..6bd2a526d21d 100644
--- a/test/sql/order/test_order_variable_size_payload.test
+++ b/test/sql/order/test_order_variable_size_payload.test_coverage
@@ -1,4 +1,4 @@
-# name: test/sql/order/test_order_variable_size_payload.test
+# name: test/sql/order/test_order_variable_size_payload.test_coverage
 # description: Test ORDER BY keyword (variable size sorting/payload columns)
 # group: [order]
 
@@ -13,7 +13,7 @@ loop i 0 2
 
 # string that is longer than Storage::BLOCK_SIZE - this tests whether RowDataCollection dynamically increases block capacity
 statement ok
-select range % 2 i, string_agg('thisstringis200characterslong..........................................................................................................................................................................') s from range(100000) group by i order by i
+select range % 2 i, string_agg('thisstringis200characterslong..........................................................................................................................................................................') s from range(5000) group by i order by i
 
 # weird one from SQLancer
 statement ok
@@ -50,6 +50,16 @@ Shipping and Receiving Clerk	Berndt
 Shipping and Receiving Clerk	Kuppa
 Shipping and Receiving Supervisor	Ackerman
 
+query TT
+SELECT * FROM test0 ORDER BY job DESC, name DESC
+----
+Shipping and Receiving Supervisor	Ackerman
+Shipping and Receiving Clerk	Kuppa
+Shipping and Receiving Clerk	Berndt
+Production Supervisor - WC60	Campbell
+Production Supervisor - WC60	Brown
+Production Supervisor - WC40	Dsa
+
 statement ok
 CREATE TABLE test1 (s VARCHAR)
 
diff --git a/test/sql/storage/test_buffer_manager.cpp b/test/sql/storage/test_buffer_manager.cpp
index 6f8a1be9919c..314e6a93366c 100644
--- a/test/sql/storage/test_buffer_manager.cpp
+++ b/test/sql/storage/test_buffer_manager.cpp
@@ -1,7 +1,8 @@
 #include "catch.hpp"
 #include "duckdb/common/file_system.hpp"
-#include "test_helpers.hpp"
+#include "duckdb/storage/buffer_manager.hpp"
 #include "duckdb/storage/storage_info.hpp"
+#include "test_helpers.hpp"
 
 using namespace duckdb;
 using namespace std;
@@ -226,3 +227,52 @@ TEST_CASE("Modifying the buffer manager limit at runtime for an in-memory databa
 	REQUIRE_NO_FAIL(con.Query("DROP TABLE test"));
 	REQUIRE_NO_FAIL(con.Query("PRAGMA memory_limit='1MB'"));
 }
+
+TEST_CASE("Test buffer reallocation", "[storage][.]") {
+	auto storage_database = TestCreatePath("storage_test");
+	auto config = GetTestConfig();
+	// make sure the database does not exist
+	DeleteDatabase(storage_database);
+	DuckDB db(storage_database, config.get());
+
+	// 1GB limit
+	Connection con(db);
+	const idx_t limit = 1000000000;
+	REQUIRE_NO_FAIL(con.Query(StringUtil::Format("PRAGMA memory_limit='%lldB'", limit)));
+
+	auto &buffer_manager = BufferManager::GetBufferManager(*con.context);
+	D_ASSERT(buffer_manager.GetUsedMemory() == 0);
+
+	idx_t requested_size = Storage::BLOCK_SIZE;
+	auto block = buffer_manager.RegisterMemory(requested_size, false);
+	auto handle = buffer_manager.Pin(block);
+	D_ASSERT(buffer_manager.GetUsedMemory() == requested_size + Storage::BLOCK_HEADER_SIZE);
+
+	for (; requested_size < limit; requested_size *= 2) {
+		// increase size
+		buffer_manager.ReAllocate(block, requested_size);
+		D_ASSERT(buffer_manager.GetUsedMemory() == requested_size + Storage::BLOCK_HEADER_SIZE);
+		// unpin and make sure it's evicted
+		handle.reset();
+		REQUIRE_NO_FAIL(con.Query(StringUtil::Format("PRAGMA memory_limit='%lldB'", requested_size)));
+		D_ASSERT(buffer_manager.GetUsedMemory() == 0);
+		// re-pin
+		REQUIRE_NO_FAIL(con.Query(StringUtil::Format("PRAGMA memory_limit='%lldB'", limit)));
+		handle = buffer_manager.Pin(block);
+		D_ASSERT(buffer_manager.GetUsedMemory() == requested_size + Storage::BLOCK_HEADER_SIZE);
+	}
+	requested_size /= 2;
+	for (; requested_size > Storage::BLOCK_SIZE; requested_size /= 2) {
+		// decrease size
+		buffer_manager.ReAllocate(block, requested_size);
+		D_ASSERT(buffer_manager.GetUsedMemory() == requested_size + Storage::BLOCK_HEADER_SIZE);
+		// unpin and make sure it's evicted
+		handle.reset();
+		REQUIRE_NO_FAIL(con.Query(StringUtil::Format("PRAGMA memory_limit='%lldB'", requested_size)));
+		D_ASSERT(buffer_manager.GetUsedMemory() == 0);
+		// re-pin
+		REQUIRE_NO_FAIL(con.Query(StringUtil::Format("PRAGMA memory_limit='%lldB'", limit)));
+		handle = buffer_manager.Pin(block);
+		D_ASSERT(buffer_manager.GetUsedMemory() == requested_size + Storage::BLOCK_HEADER_SIZE);
+	}
+}
