{
  "repo": "duckdb/duckdb",
  "pull_number": 5876,
  "instance_id": "duckdb__duckdb-5876",
  "issue_numbers": [
    "5808"
  ],
  "base_commit": "29229a04fc5e96b676ed588352cf98382c7ae9bd",
  "patch": "diff --git a/src/function/macro_function.cpp b/src/function/macro_function.cpp\nindex 438b6148ad46..bd8986a52cb7 100644\n--- a/src/function/macro_function.cpp\n+++ b/src/function/macro_function.cpp\n@@ -22,12 +22,11 @@ string MacroFunction::ValidateArguments(MacroFunction &macro_def, const string &\n \n \t// separate positional and default arguments\n \tfor (auto &arg : function_expr.children) {\n-\t\tif ((arg->type == ExpressionType::VALUE_CONSTANT || arg->type == ExpressionType::VALUE_PARAMETER) &&\n-\t\t    !arg->alias.empty()) {\n+\t\tif (!arg->alias.empty()) {\n \t\t\t// default argument\n-\t\t\tif (macro_def.default_parameters.find(arg->alias) == macro_def.default_parameters.end()) {\n+\t\t\tif (!macro_def.default_parameters.count(arg->alias)) {\n \t\t\t\treturn StringUtil::Format(\"Macro %s does not have default parameter %s!\", name, arg->alias);\n-\t\t\t} else if (defaults.find(arg->alias) != defaults.end()) {\n+\t\t\t} else if (defaults.count(arg->alias)) {\n \t\t\t\treturn StringUtil::Format(\"Duplicate default parameters %s!\", arg->alias);\n \t\t\t}\n \t\t\tdefaults[arg->alias] = std::move(arg);\n@@ -57,10 +56,13 @@ string MacroFunction::ValidateArguments(MacroFunction &macro_def, const string &\n \t\treturn error;\n \t}\n \n-\t// fill in default value where this was not supplied\n+\t// Add the default values for parameters that have defaults, that were not explicitly assigned to\n \tfor (auto it = macro_def.default_parameters.begin(); it != macro_def.default_parameters.end(); it++) {\n-\t\tif (defaults.find(it->first) == defaults.end()) {\n-\t\t\tdefaults[it->first] = it->second->Copy();\n+\t\tauto &parameter_name = it->first;\n+\t\tauto &parameter_default = it->second;\n+\t\tif (!defaults.count(parameter_name)) {\n+\t\t\t// This parameter was not set yet, set it with the default value\n+\t\t\tdefaults[parameter_name] = parameter_default->Copy();\n \t\t}\n \t}\n \n",
  "test_patch": "diff --git a/test/sql/catalog/function/test_macro_default_arg.test b/test/sql/catalog/function/test_macro_default_arg.test\nnew file mode 100644\nindex 000000000000..db8c105056bb\n--- /dev/null\n+++ b/test/sql/catalog/function/test_macro_default_arg.test\n@@ -0,0 +1,71 @@\n+# name: test/sql/catalog/function/test_macro_default_arg.test\n+# group: [function]\n+\n+statement ok\n+pragma enable_verification;\n+\n+statement ok\n+CREATE MACRO f(x := NULL) AS x+1;\n+\n+query I\n+SELECT f();\n+----\n+NULL\n+\n+query I\n+SELECT f(x := 41)\n+----\n+42\n+\n+query I\n+SELECT f(x := (SELECT 41));\n+----\n+42\n+\n+query I\n+select f(x:=(select 1 a));\n+----\n+2\n+\n+query I\n+select f(x:=a) from(select 41)t(a);\n+----\n+42\n+\n+statement ok\n+create table t as select 41 a;\n+\n+query I\n+select f(x:=a) from t;\n+----\n+42\n+\n+statement error\n+create macro my_macro1(a, b := a) as a + b;\n+----\n+Binder Error: table \"0_macro_parametersmy_macro1\" has duplicate column name \"a\"\n+\n+statement ok\n+create table integers (a integer);\n+\n+statement ok\n+create macro my_macro2(a := i) as (\n+\tselect min(a) from integers\n+);\n+\n+statement ok\n+insert into integers values (5), (10), (13)\n+\n+query I\n+select my_macro2(can_not_be_empty)\n+----\n+5\n+\n+statement ok\n+drop table integers;\n+\n+# The macro still exists, but points to a non existant table\n+statement error\n+select my_macro2(5);\n+----\n+Catalog Error: Table with name integers does not exist!\ndiff --git a/test/sql/catalog/function/test_macro_default_arg.test_coverage b/test/sql/catalog/function/test_macro_default_arg.test_coverage\nnew file mode 100644\nindex 000000000000..f909b7903cff\n--- /dev/null\n+++ b/test/sql/catalog/function/test_macro_default_arg.test_coverage\n@@ -0,0 +1,59 @@\n+# name: test/sql/catalog/function/test_macro_default_arg.test_coverage\n+# group: [function]\n+\n+statement ok\n+pragma enable_verification;\n+\n+# The following tests do not test any behavior related to default arguments,\n+# other than what expressions can be passed to a parameter with a default argument\n+\n+statement ok\n+CREATE MACRO f(x := NULL) AS (\n+\tx\n+)\n+\n+# Empty\n+statement ok\n+select f(\n+)\n+\n+# constant\n+statement ok\n+select f(\n+\tx := 42\n+)\n+\n+# column reference\n+\n+statement ok\n+create table tbl as select 42 i;\n+\n+# existing column reference\n+statement ok\n+select f(\n+\tx := i\n+) from tbl;\n+\n+# non-existing column reference\n+statement error\n+select f(\n+\tx := j\n+) from tbl;\n+\n+# cast\n+statement ok\n+select f(\n+\tx := cast('42' as INT)\n+);\n+\n+# is null\n+statement ok\n+select f(\n+\tx := 42 IS NULL\n+)\n+\n+# is not null\n+statement ok\n+select f(\n+\tx := 42 IS NOT NULL\n+)\n",
  "problem_statement": "Subquery passed as named argument to a macro results in binder error\n### What happens?\r\n\r\nA subquery passed as named argument to a macro results in a binder error.\r\n\r\n### To Reproduce\r\n\r\n```\r\n-- Create macro f that takes an argument x and adds one to it\r\n-- If no argument is provided, default value NULL is used for argument x\r\nCREATE MACRO f(x := NULL) AS x+1;\r\n\r\n-- \u2713\r\nSELECT f();\r\n\r\n-- \u2713\r\nSELECT f(x := 41);\r\n\r\n-- \u26a0 This statement fails with:\r\n-- Binder Error: Macro function 'f()' requires 0 positional arguments, but a single positional argument was provided.\r\nSELECT f(x := (SELECT 41));\r\n```\r\n\r\n### OS:\r\n\r\nArchLinux\r\n\r\n### DuckDB Version:\r\n\r\nv0.6.1 and v0.6.2-dev910 e74e2471a5\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nChris\r\n\r\n### Affiliation:\r\n\r\nN/A\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-01-10T13:12:20Z"
}