{
  "repo": "duckdb/duckdb",
  "pull_number": 9904,
  "instance_id": "duckdb__duckdb-9904",
  "issue_numbers": [
    "9867",
    "9867"
  ],
  "base_commit": "3cadd21153e30cf1464bce5b6cfa0fc70c5dda31",
  "patch": "diff --git a/src/parser/transform/expression/transform_columnref.cpp b/src/parser/transform/expression/transform_columnref.cpp\nindex 628c2130863d..7cfb0d7ea764 100644\n--- a/src/parser/transform/expression/transform_columnref.cpp\n+++ b/src/parser/transform/expression/transform_columnref.cpp\n@@ -45,6 +45,7 @@ unique_ptr<ParsedExpression> Transformer::TransformStarExpression(duckdb_libpgqu\n \t\tresult->expr = TransformExpression(star.expr);\n \t\tif (result->expr->type == ExpressionType::STAR) {\n \t\t\tauto &child_star = result->expr->Cast<StarExpression>();\n+\t\t\tresult->relation_name = child_star.relation_name;\n \t\t\tresult->exclude_list = std::move(child_star.exclude_list);\n \t\t\tresult->replace_list = std::move(child_star.replace_list);\n \t\t\tresult->expr.reset();\n",
  "test_patch": "diff --git a/test/sql/parser/columns_issue9867.test b/test/sql/parser/columns_issue9867.test\nnew file mode 100644\nindex 000000000000..ee48839fc3b7\n--- /dev/null\n+++ b/test/sql/parser/columns_issue9867.test\n@@ -0,0 +1,31 @@\n+# name: test/sql/parser/columns_issue9867.test\n+# description: Issue #9867 - COLUMNS(table_name.*) is broken when there are joins\n+# group: [parser]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE df1 AS\n+  SELECT\n+    UNNEST(['K0', 'K1', 'K2', 'K3', 'K4', 'K5']) AS key,\n+    UNNEST([11, 12, 13, 14, 15, 16]) AS A,\n+    UNNEST([21, 22, 23, 24, 25, 26]) AS B\n+\n+statement ok\n+CREATE TABLE df2 AS\n+  SELECT\n+    UNNEST(['K0', 'K2', 'K5']) AS key,\n+    UNNEST([2, 3, 5]) AS C\n+\n+query II\n+select sin(columns(df1.* exclude (key))) from df1 join df2 using(key)\n+----\n+-0.9999902065507035\t0.836655638536056\n+0.4201670368266409\t-0.8462204041751706\n+-0.2879033166650653\t0.7625584504796027\n+\n+statement error\n+select sin(columns(dfxx.* exclude (key))) from df1 join df2 using(key)\n+----\n+Referenced table \"dfxx\" not found\n",
  "problem_statement": "COLUMNS(table_name.*) is broken when there are joins\n### What happens?\n\nIf our SQL query has `JOIN`s, `COLUMNS(table_name.*)` selects all columns from the joined set of columns instead of only the columns from `table_name`.\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\nimport pandas as pd\r\n\r\ndf1 = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\r\n                    'A': [11, 12, 13, 14, 15, 16],\r\n                    'B': [21, 22, 23, 24, 25, 26]})\r\n\r\ndf2 = pd.DataFrame({'key': ['K0', 'K2', 'K5'],\r\n                    'C': [2, 3, 5]})\r\n\r\ndf = duckdb.query(\"\"\"\r\n    select sin(columns(df1.* exclude (key))) from df1 join df2 using(key)\r\n\"\"\").df()\r\nprint(df)\r\n```\r\nIt produces:\r\n```bash\r\n   sin(df1.A)  sin(df1.B)  sin(df2.C)\r\n0   -0.999990    0.836656    0.909297\r\n1    0.420167   -0.846220    0.141120\r\n2   -0.287903    0.762558   -0.958924\r\n```\r\n\r\nHowever, the results shouldn't have any columns from `df2`.\n\n### OS:\n\nUbuntu 22.04.2 LTS, aarch64\n\n### DuckDB Version:\n\n0.9.2\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark\n\n### Affiliation:\n\nbq\n\n### Have you tried this on the latest `main` branch?\n\nI have not tested with any build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nCOLUMNS(table_name.*) is broken when there are joins\n### What happens?\n\nIf our SQL query has `JOIN`s, `COLUMNS(table_name.*)` selects all columns from the joined set of columns instead of only the columns from `table_name`.\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\nimport pandas as pd\r\n\r\ndf1 = pd.DataFrame({'key': ['K0', 'K1', 'K2', 'K3', 'K4', 'K5'],\r\n                    'A': [11, 12, 13, 14, 15, 16],\r\n                    'B': [21, 22, 23, 24, 25, 26]})\r\n\r\ndf2 = pd.DataFrame({'key': ['K0', 'K2', 'K5'],\r\n                    'C': [2, 3, 5]})\r\n\r\ndf = duckdb.query(\"\"\"\r\n    select sin(columns(df1.* exclude (key))) from df1 join df2 using(key)\r\n\"\"\").df()\r\nprint(df)\r\n```\r\nIt produces:\r\n```bash\r\n   sin(df1.A)  sin(df1.B)  sin(df2.C)\r\n0   -0.999990    0.836656    0.909297\r\n1    0.420167   -0.846220    0.141120\r\n2   -0.287903    0.762558   -0.958924\r\n```\r\n\r\nHowever, the results shouldn't have any columns from `df2`.\n\n### OS:\n\nUbuntu 22.04.2 LTS, aarch64\n\n### DuckDB Version:\n\n0.9.2\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nMark\n\n### Affiliation:\n\nbq\n\n### Have you tried this on the latest `main` branch?\n\nI have not tested with any build\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-12-06T10:15:27Z"
}