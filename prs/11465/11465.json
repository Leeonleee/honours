{
  "repo": "duckdb/duckdb",
  "pull_number": 11465,
  "instance_id": "duckdb__duckdb-11465",
  "issue_numbers": [
    "11348"
  ],
  "base_commit": "ec84e37ae1b81f67b52f9289c48e5d9fd9a1b3d1",
  "patch": "diff --git a/src/catalog/catalog_entry/sequence_catalog_entry.cpp b/src/catalog/catalog_entry/sequence_catalog_entry.cpp\nindex 936fae03854f..5606ddc8ba8c 100644\n--- a/src/catalog/catalog_entry/sequence_catalog_entry.cpp\n+++ b/src/catalog/catalog_entry/sequence_catalog_entry.cpp\n@@ -14,7 +14,7 @@\n namespace duckdb {\n \n SequenceData::SequenceData(CreateSequenceInfo &info)\n-    : usage_count(info.usage_count), counter(info.start_value), increment(info.increment),\n+    : usage_count(info.usage_count), counter(info.start_value), last_value(info.start_value), increment(info.increment),\n       start_value(info.start_value), min_value(info.min_value), max_value(info.max_value), cycle(info.cycle) {\n }\n \ndiff --git a/src/function/table/system/duckdb_sequences.cpp b/src/function/table/system/duckdb_sequences.cpp\nindex 7a38e1c65e96..484129befbb5 100644\n--- a/src/function/table/system/duckdb_sequences.cpp\n+++ b/src/function/table/system/duckdb_sequences.cpp\n@@ -122,8 +122,7 @@ void DuckDBSequencesFunction(ClientContext &context, TableFunctionInput &data_p,\n \t\t// cycle, BOOLEAN\n \t\toutput.SetValue(col++, count, Value::BOOLEAN(seq_data.cycle));\n \t\t// last_value, BIGINT\n-\t\toutput.SetValue(col++, count,\n-\t\t                seq_data.usage_count == 0 ? Value() : Value::BOOLEAN(NumericCast<int8_t>(seq_data.last_value)));\n+\t\toutput.SetValue(col++, count, seq_data.usage_count == 0 ? Value() : Value::BIGINT(seq_data.last_value));\n \t\t// sql, LogicalType::VARCHAR\n \t\toutput.SetValue(col++, count, Value(seq.ToSQL()));\n \n",
  "test_patch": "diff --git a/test/sql/catalog/sequence/test_duckdb_sequences.test b/test/sql/catalog/sequence/test_duckdb_sequences.test\nnew file mode 100644\nindex 000000000000..6bcf21fc14d9\n--- /dev/null\n+++ b/test/sql/catalog/sequence/test_duckdb_sequences.test\n@@ -0,0 +1,17 @@\n+# name: test/sql/catalog/sequence/test_duckdb_sequences.test\n+# group: [sequence]\n+\n+require noforcestorage\n+\n+statement ok\n+create sequence my_seq;\n+\n+query I\n+select nextval('my_seq');\n+----\n+1\n+\n+query I\n+select last_value from duckdb_sequences();\n+----\n+1\n",
  "problem_statement": "duckdb_sequences() fails after inserting into a table with a sequence column\n### What happens?\r\n\r\nSince 0.10.1 I got a serious bug with inserting into a table with an identity column defined via sequence.\r\nNow it's impossible to select from the pg_description table. I found an exact query to reproduce. \r\n\r\n### To Reproduce\r\n\r\n```python\r\nimport duckdb\r\ncon = duckdb.connect()\r\n\r\ncon.query(\"\"\"\r\n    CREATE SEQUENCE id_person START 20316564;\r\n    CREATE TABLE persons(id INTEGER DEFAULT(nextval('id_person')), \"name\" VARCHAR);\r\n    INSERT into persons(name) VALUES ('a'), ('b'), ('c');\r\n    SELECT * FROM duckdb_sequences();\r\n\"\"\")\r\n```\r\n\r\n> INTERNAL Error: Information loss on integer cast: value 20316566 outside of target range [-128, 127]\r\n\r\n### OS:\r\n\r\nUbuntu 22.04.3 LTS (GNU/Linux 5.15.0-89-generic x86_64)\r\n\r\n### DuckDB Version:\r\n\r\n0.10.1\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nRoman Zykov\r\n\r\n### Affiliation:\r\n\r\nRetenly\r\n\r\n### Have you tried this on the latest [nightly build](https://duckdb.org/docs/installation/?version=main)?\r\n\r\nI have tested with a release build (and could not test with a nightly build)\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Just tried a nightly build, got the same error\r\n\nWe are aware and have an internal issue tracking this, thanks for the report \ud83d\udc4d",
  "created_at": "2024-04-02T11:21:31Z"
}