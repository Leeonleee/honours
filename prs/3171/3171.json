{
  "repo": "duckdb/duckdb",
  "pull_number": 3171,
  "instance_id": "duckdb__duckdb-3171",
  "issue_numbers": [
    "3169",
    "3169"
  ],
  "base_commit": "9243d7b58cc2451199846daff176a2195b1952f1",
  "patch": "diff --git a/src/function/table/system/pragma_database_size.cpp b/src/function/table/system/pragma_database_size.cpp\nindex c16bfa2ec1c4..2b314ca0490d 100644\n--- a/src/function/table/system/pragma_database_size.cpp\n+++ b/src/function/table/system/pragma_database_size.cpp\n@@ -70,7 +70,8 @@ void PragmaDatabaseSizeFunction(ClientContext &context, const FunctionData *bind\n \t\tauto free_blocks = block_manager.FreeBlocks();\n \t\tauto used_blocks = total_blocks - free_blocks;\n \t\tauto bytes = (total_blocks * block_size);\n-\t\tauto wal_size = storage.GetWriteAheadLog()->GetWALSize();\n+\t\tauto wal = storage.GetWriteAheadLog();\n+\t\tauto wal_size = wal ? wal->GetWALSize() : 0;\n \t\toutput.data[0].SetValue(0, Value(StringUtil::BytesToHumanReadableString(bytes)));\n \t\toutput.data[1].SetValue(0, Value::BIGINT(block_size));\n \t\toutput.data[2].SetValue(0, Value::BIGINT(total_blocks));\ndiff --git a/third_party/sqlsmith/duckdb.cc b/third_party/sqlsmith/duckdb.cc\nindex e1e93a2cda21..86c33309f17f 100644\n--- a/third_party/sqlsmith/duckdb.cc\n+++ b/third_party/sqlsmith/duckdb.cc\n@@ -15,20 +15,20 @@ using namespace std;\n \n static regex e_syntax(\"syntax error at or near .*\");\n \n-duckdb_connection::duckdb_connection(string &conninfo) {\n+sqlsmith_duckdb_connection::sqlsmith_duckdb_connection(string &conninfo) {\n \t// in-memory database\n \tdatabase = make_unique<DuckDB>(nullptr);\n \tconnection = make_unique<Connection>(*database);\n }\n \n-void duckdb_connection::q(const char *query) {\n+void sqlsmith_duckdb_connection::q(const char *query) {\n \tauto result = connection->Query(query);\n \tif (!result->success) {\n \t\tthrow runtime_error(result->error);\n \t}\n }\n \n-schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_connection(conninfo) {\n+schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : sqlsmith_duckdb_connection(conninfo) {\n \t// generate empty TPC-H schema\n \tconnection->Query(\"CALL dbgen(sf=0)\");\n \n@@ -202,7 +202,7 @@ schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_co\n \tgenerate_indexes();\n }\n \n-dut_duckdb::dut_duckdb(std::string &conninfo) : duckdb_connection(conninfo) {\n+dut_duckdb::dut_duckdb(std::string &conninfo) : sqlsmith_duckdb_connection(conninfo) {\n \tcerr << \"Generating TPC-H...\";\n \tconnection->Query(\"CALL dbgen(sf=0.01)\");\n \tcerr << \"done.\" << endl;\ndiff --git a/third_party/sqlsmith/include/duckdb.hh b/third_party/sqlsmith/include/duckdb.hh\nindex 42be70892207..e535c63bb249 100644\n--- a/third_party/sqlsmith/include/duckdb.hh\n+++ b/third_party/sqlsmith/include/duckdb.hh\n@@ -10,23 +10,23 @@\n #include \"relmodel.hh\"\n #include \"schema.hh\"\n \n-struct duckdb_connection {\n+struct sqlsmith_duckdb_connection {\n \tstd::unique_ptr<duckdb::DuckDB> database;\n \tstd::unique_ptr<duckdb::Connection> connection;\n \tchar *zErrMsg = 0;\n \tint rc;\n \tvoid q(const char *query);\n-\tduckdb_connection(std::string &conninfo);\n+\tsqlsmith_duckdb_connection(std::string &conninfo);\n };\n \n-struct schema_duckdb : schema, duckdb_connection {\n+struct schema_duckdb : schema, sqlsmith_duckdb_connection {\n \tschema_duckdb(std::string &conninfo, bool no_catalog);\n \tvirtual std::string quote_name(const std::string &id) {\n \t\treturn id;\n \t}\n };\n \n-struct dut_duckdb : dut_base, duckdb_connection {\n+struct dut_duckdb : dut_base, sqlsmith_duckdb_connection {\n \tvirtual void test(const std::string &stmt);\n \tdut_duckdb(std::string &conninfo);\n };\n",
  "test_patch": "diff --git a/test/sql/pragma/pragma_database_size_readonly.test b/test/sql/pragma/pragma_database_size_readonly.test\nnew file mode 100644\nindex 000000000000..c8093e7702da\n--- /dev/null\n+++ b/test/sql/pragma/pragma_database_size_readonly.test\n@@ -0,0 +1,15 @@\n+# name: test/sql/pragma/pragma_database_size_readonly.test\n+# description: PRAGMA database_size read only\n+# group: [pragma]\n+\n+# load the DB from disk\n+load __TEST_DIR__/database_size_read_only.db\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER);\n+\n+# load the DB from disk\n+load __TEST_DIR__/database_size_read_only.db readonly\n+\n+statement ok\n+PRAGMA database_size\n",
  "problem_statement": "PRAGMA database_size on read_only connection crash python\n#### What happens?\r\nIf trying to query pragma database_size  to know memory consumption on a connection to a db opened with read_only=True, \r\nIt **crashes python**.\r\n\r\n#### To Reproduce\r\n```python\r\nimport duckdb\r\n\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=False)\r\nprint(\"With read/write:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=True)\r\nprint(\"With read only:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\n```\r\nresults in:\r\n```\r\nWith read/write:\r\n  database_size  block_size  total_blocks  used_blocks  free_blocks wal_size memory_usage memory_limit\r\n0       0 bytes      262144             0            0            0  0 bytes      0 bytes       13.7GB\r\nWith read only:\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: Windows 10\r\n - DuckDB Version: 0.3.2\r\n - DuckDB Client: Python 3.8.10\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nPRAGMA database_size on read_only connection crash python\n#### What happens?\r\nIf trying to query pragma database_size  to know memory consumption on a connection to a db opened with read_only=True, \r\nIt **crashes python**.\r\n\r\n#### To Reproduce\r\n```python\r\nimport duckdb\r\n\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=False)\r\nprint(\"With read/write:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=True)\r\nprint(\"With read only:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\n```\r\nresults in:\r\n```\r\nWith read/write:\r\n  database_size  block_size  total_blocks  used_blocks  free_blocks wal_size memory_usage memory_limit\r\n0       0 bytes      262144             0            0            0  0 bytes      0 bytes       13.7GB\r\nWith read only:\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: Windows 10\r\n - DuckDB Version: 0.3.2\r\n - DuckDB Client: Python 3.8.10\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "Good catch, also crashes on OSX\nGood catch, also crashes on OSX",
  "created_at": "2022-03-02T12:38:41Z"
}