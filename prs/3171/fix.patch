diff --git a/src/function/table/system/pragma_database_size.cpp b/src/function/table/system/pragma_database_size.cpp
index c16bfa2ec1c4..2b314ca0490d 100644
--- a/src/function/table/system/pragma_database_size.cpp
+++ b/src/function/table/system/pragma_database_size.cpp
@@ -70,7 +70,8 @@ void PragmaDatabaseSizeFunction(ClientContext &context, const FunctionData *bind
 		auto free_blocks = block_manager.FreeBlocks();
 		auto used_blocks = total_blocks - free_blocks;
 		auto bytes = (total_blocks * block_size);
-		auto wal_size = storage.GetWriteAheadLog()->GetWALSize();
+		auto wal = storage.GetWriteAheadLog();
+		auto wal_size = wal ? wal->GetWALSize() : 0;
 		output.data[0].SetValue(0, Value(StringUtil::BytesToHumanReadableString(bytes)));
 		output.data[1].SetValue(0, Value::BIGINT(block_size));
 		output.data[2].SetValue(0, Value::BIGINT(total_blocks));
diff --git a/third_party/sqlsmith/duckdb.cc b/third_party/sqlsmith/duckdb.cc
index e1e93a2cda21..86c33309f17f 100644
--- a/third_party/sqlsmith/duckdb.cc
+++ b/third_party/sqlsmith/duckdb.cc
@@ -15,20 +15,20 @@ using namespace std;
 
 static regex e_syntax("syntax error at or near .*");
 
-duckdb_connection::duckdb_connection(string &conninfo) {
+sqlsmith_duckdb_connection::sqlsmith_duckdb_connection(string &conninfo) {
 	// in-memory database
 	database = make_unique<DuckDB>(nullptr);
 	connection = make_unique<Connection>(*database);
 }
 
-void duckdb_connection::q(const char *query) {
+void sqlsmith_duckdb_connection::q(const char *query) {
 	auto result = connection->Query(query);
 	if (!result->success) {
 		throw runtime_error(result->error);
 	}
 }
 
-schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_connection(conninfo) {
+schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : sqlsmith_duckdb_connection(conninfo) {
 	// generate empty TPC-H schema
 	connection->Query("CALL dbgen(sf=0)");
 
@@ -202,7 +202,7 @@ schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_co
 	generate_indexes();
 }
 
-dut_duckdb::dut_duckdb(std::string &conninfo) : duckdb_connection(conninfo) {
+dut_duckdb::dut_duckdb(std::string &conninfo) : sqlsmith_duckdb_connection(conninfo) {
 	cerr << "Generating TPC-H...";
 	connection->Query("CALL dbgen(sf=0.01)");
 	cerr << "done." << endl;
diff --git a/third_party/sqlsmith/include/duckdb.hh b/third_party/sqlsmith/include/duckdb.hh
index 42be70892207..e535c63bb249 100644
--- a/third_party/sqlsmith/include/duckdb.hh
+++ b/third_party/sqlsmith/include/duckdb.hh
@@ -10,23 +10,23 @@
 #include "relmodel.hh"
 #include "schema.hh"
 
-struct duckdb_connection {
+struct sqlsmith_duckdb_connection {
 	std::unique_ptr<duckdb::DuckDB> database;
 	std::unique_ptr<duckdb::Connection> connection;
 	char *zErrMsg = 0;
 	int rc;
 	void q(const char *query);
-	duckdb_connection(std::string &conninfo);
+	sqlsmith_duckdb_connection(std::string &conninfo);
 };
 
-struct schema_duckdb : schema, duckdb_connection {
+struct schema_duckdb : schema, sqlsmith_duckdb_connection {
 	schema_duckdb(std::string &conninfo, bool no_catalog);
 	virtual std::string quote_name(const std::string &id) {
 		return id;
 	}
 };
 
-struct dut_duckdb : dut_base, duckdb_connection {
+struct dut_duckdb : dut_base, sqlsmith_duckdb_connection {
 	virtual void test(const std::string &stmt);
 	dut_duckdb(std::string &conninfo);
 };
