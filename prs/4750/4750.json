{
  "repo": "duckdb/duckdb",
  "pull_number": 4750,
  "instance_id": "duckdb__duckdb-4750",
  "issue_numbers": [
    "4704"
  ],
  "base_commit": "13101593fb8032547a98de6e2e3f550696200f18",
  "patch": "diff --git a/src/function/table/system/pragma_storage_info.cpp b/src/function/table/system/pragma_storage_info.cpp\nindex 7470dc21ed1b..51d3507f2a8a 100644\n--- a/src/function/table/system/pragma_storage_info.cpp\n+++ b/src/function/table/system/pragma_storage_info.cpp\n@@ -97,6 +97,13 @@ static void PragmaStorageInfoFunction(ClientContext &context, TableFunctionInput\n \tauto &bind_data = (PragmaStorageFunctionData &)*data_p.bind_data;\n \tauto &data = (PragmaStorageOperatorData &)*data_p.global_state;\n \tidx_t count = 0;\n+\tmap<storage_t, column_t> soid_to_idx;\n+\tfor (idx_t cidx = 0; cidx < bind_data.table_entry->columns.size(); cidx++) {\n+\t\tauto &entry = bind_data.table_entry->columns[cidx];\n+\t\tif (!entry.Generated()) {\n+\t\t\tsoid_to_idx[entry.StorageOid()] = entry.Oid();\n+\t\t}\n+\t}\n \twhile (data.offset < bind_data.storage_info.size() && count < STANDARD_VECTOR_SIZE) {\n \t\tauto &entry = bind_data.storage_info[data.offset++];\n \t\tD_ASSERT(entry.size() + 1 == output.ColumnCount());\n@@ -104,8 +111,9 @@ static void PragmaStorageInfoFunction(ClientContext &context, TableFunctionInput\n \t\tfor (idx_t col_idx = 0; col_idx < entry.size(); col_idx++, result_idx++) {\n \t\t\tif (col_idx == 1) {\n \t\t\t\t// write the column name\n-\t\t\t\tauto column_index = entry[col_idx].GetValue<int64_t>();\n-\t\t\t\toutput.SetValue(result_idx, count, Value(bind_data.table_entry->columns[column_index].Name()));\n+\t\t\t\tauto storage_column_index = entry[col_idx].GetValue<int64_t>();\n+\t\t\t\toutput.SetValue(result_idx, count,\n+\t\t\t\t                Value(bind_data.table_entry->columns[soid_to_idx[storage_column_index]].Name()));\n \t\t\t\tresult_idx++;\n \t\t\t}\n \t\t\toutput.SetValue(result_idx, count, entry[col_idx]);\ndiff --git a/src/storage/data_table.cpp b/src/storage/data_table.cpp\nindex fde43f7cde71..98beec88797c 100644\n--- a/src/storage/data_table.cpp\n+++ b/src/storage/data_table.cpp\n@@ -694,8 +694,9 @@ void DataTable::VerifyAppendConstraints(TableCatalogEntry &table, ClientContext\n \t\tauto &constraint = table.bound_constraints[i];\n \t\tswitch (base_constraint->type) {\n \t\tcase ConstraintType::NOT_NULL: {\n-\t\t\tauto &not_null = *reinterpret_cast<BoundNotNullConstraint *>(constraint.get());\n-\t\t\tVerifyNotNullConstraint(table, chunk.data[not_null.index], chunk.size(),\n+\t\t\tauto &bound_not_null = *reinterpret_cast<BoundNotNullConstraint *>(constraint.get());\n+\t\t\tauto &not_null = *reinterpret_cast<NotNullConstraint *>(base_constraint.get());\n+\t\t\tVerifyNotNullConstraint(table, chunk.data[bound_not_null.index], chunk.size(),\n \t\t\t                        table.columns[not_null.index].Name());\n \t\t\tbreak;\n \t\t}\n@@ -1166,13 +1167,16 @@ static bool CreateMockChunk(TableCatalogEntry &table, const vector<column_t> &co\n \n void DataTable::VerifyUpdateConstraints(TableCatalogEntry &table, DataChunk &chunk,\n                                         const vector<column_t> &column_ids) {\n-\tfor (auto &constraint : table.bound_constraints) {\n+\tfor (idx_t i = 0; i < table.bound_constraints.size(); i++) {\n+\t\tauto &base_constraint = table.constraints[i];\n+\t\tauto &constraint = table.bound_constraints[i];\n \t\tswitch (constraint->type) {\n \t\tcase ConstraintType::NOT_NULL: {\n-\t\t\tauto &not_null = *reinterpret_cast<BoundNotNullConstraint *>(constraint.get());\n+\t\t\tauto &bound_not_null = *reinterpret_cast<BoundNotNullConstraint *>(constraint.get());\n+\t\t\tauto &not_null = *reinterpret_cast<NotNullConstraint *>(base_constraint.get());\n \t\t\t// check if the constraint is in the list of column_ids\n \t\t\tfor (idx_t i = 0; i < column_ids.size(); i++) {\n-\t\t\t\tif (column_ids[i] == not_null.index) {\n+\t\t\t\tif (column_ids[i] == bound_not_null.index) {\n \t\t\t\t\t// found the column id: check the data in\n \t\t\t\t\tVerifyNotNullConstraint(table, chunk.data[i], chunk.size(), table.columns[not_null.index].Name());\n \t\t\t\t\tbreak;\n",
  "test_patch": "diff --git a/test/issues/general/test_4704.test b/test/issues/general/test_4704.test\nnew file mode 100644\nindex 000000000000..a1274d3fd2e8\n--- /dev/null\n+++ b/test/issues/general/test_4704.test\n@@ -0,0 +1,47 @@\n+# name: test/issues/general/test_4704.test\n+# description: Issue 4704: Wrong column name was reported with generated column presented\n+# group: [general]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t0(c0 AS (1), c1 INT NOT NULL)\n+\n+statement ok\n+INSERT INTO t0 SELECT 1 FROM RANGE(1024)\n+\n+# How to verify the error message?\n+statement error\n+INSERT INTO t0 VALUES(NULL)\n+\n+# How to verify the error message?\n+statement error\n+UPDATE t0 SET c1 = NULL\n+\n+query T\n+SELECT column_name FROM PRAGMA_STORAGE_INFO('t0') LIMIT 2\n+----\n+c1\n+c1\n+\n+statement ok\n+CREATE TABLE t1(c0 INT NOT NULL, c1 AS (1))\n+\n+statement ok\n+INSERT INTO t1 SELECT 1 FROM RANGE(1024)\n+\n+# How to verify the error message?\n+statement error\n+INSERT INTO t1 VALUES(NULL)\n+\n+# How to verify the error message?\n+statement error\n+UPDATE t1 SET c0 = NULL\n+\n+query T\n+SELECT column_name FROM PRAGMA_STORAGE_INFO('t1') LIMIT 2\n+----\n+c0\n+c0\n+\n",
  "problem_statement": "Wrong column name was reported with generated column presented\n### What happens?\r\n\r\nWrong column name was reported when insert null to not null column with generated column presented\r\n```sql \r\nCREATE TABLE t0(c0 AS (1), c1 INT not null);\r\ninsert into t0 values(null);  --- c0 is generated\r\nError: Constraint Error: NOT NULL constraint failed: t0.c0  --- <== should be t0.c1.\r\n```\r\nSimiliar issue with pragma_storage_info, the column_name should be c1.\r\n```sql\r\nselect * from pragma_storage_info('t0');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 row_group_id \u2502 column_name \u2502 column_id \u2502 column_path \u2502 segment_id \u2502 segment_type \u2502 start \u2502 count \u2502 compression  \u2502                        stats                         \u2502 has_updates \u2502 persistent \u2502 block_id \u2502 block_offset \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0            \u2502 c0          \u2502 0         \u2502 [0]         \u2502 0          \u2502 INTEGER      \u2502 0     \u2502 1024  \u2502 Uncompressed \u2502 [Min: 1, Max: 1][Has Null: false, Has No Null: true] \u2502 false       \u2502 false      \u2502          \u2502              \u2502\r\n\u2502 0            \u2502 c0          \u2502 0         \u2502 [0, 0]      \u2502 0          \u2502 VALIDITY     \u2502 0     \u2502 1024  \u2502 Uncompressed \u2502 [Has Null: false, Has No Null: true]                 \u2502 false       \u2502 false      \u2502          \u2502              \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\n\r\n### To Reproduce\r\n\r\n```sql \r\nCREATE TABLE t0(c0 AS (1), c1 INT not null);\r\ninsert into t0 values(null);  --- c0 is generated\r\ninsert into t0 select 1 from range(1024);\r\nselect * from pragma_storage_info('t0');\r\n```\r\n\r\n### OS:\r\n\r\nlinuxamd64\r\n\r\n### DuckDB Version:\r\n\r\nv0.5.1-dev126 3591cd172\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nDong Zhi-peng\r\n\r\n### Affiliation:\r\n\r\nXJTU\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-09-19T09:53:18Z"
}