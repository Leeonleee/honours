{
  "repo": "duckdb/duckdb",
  "pull_number": 8389,
  "instance_id": "duckdb__duckdb-8389",
  "issue_numbers": [
    "7707"
  ],
  "base_commit": "0921f74833bf736d5df60e458bdff3271447fea0",
  "patch": "diff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex fe3f278b8957..f2eaf2e5ccbb 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -260,6 +260,7 @@ void Binder::BindLogicalType(ClientContext &context, LogicalType &type, optional\n \t\t} else {\n \t\t\ttype = Catalog::GetType(context, INVALID_CATALOG, schema, user_type_name);\n \t\t}\n+\t\tBindLogicalType(context, type, catalog, schema);\n \t}\n }\n \n",
  "test_patch": "diff --git a/test/sql/types/alias/test_alias_struct_nested_alias.test b/test/sql/types/alias/test_alias_struct_nested_alias.test\nnew file mode 100644\nindex 000000000000..4ef55a8e3353\n--- /dev/null\n+++ b/test/sql/types/alias/test_alias_struct_nested_alias.test\n@@ -0,0 +1,37 @@\n+# name: test/sql/types/alias/test_alias_struct_nested_alias.test\n+# description: Test creates alias for struct type\n+# group: [alias]\n+\n+require skip_reload\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# Create a USER type\n+statement ok\n+CREATE TYPE foobar AS ENUM(\n+\t'Foo',\n+\t'Bar'\n+);\n+\n+# Create a USER type which is a STRUCT that contains another USER type\n+statement ok\n+CREATE TYPE top_nest AS STRUCT(\n+    foobar FOOBAR\n+);\n+\n+# Create a table out of this type\n+statement ok\n+CREATE TABLE failing (\n+    top_nest TOP_NEST\n+);\n+\n+statement ok\n+insert into failing VALUES (\n+\t{'foobar': 'Foo'}\n+)\n+\n+query I\n+SELECT top_nest FROM failing;\n+----\n+{'foobar': Foo}\n",
  "problem_statement": "Type aliasing leads to internal error in structs with custom inner types\n### What happens?\r\n\r\nIf you create a new struct type with `CREATE TYPE t AS STRUCT (...);` and the struct includes another custom or nested type inside of it, the DB will fatally crash when you try to access it with the error `Unsupported type for ColumnDataCollection::GetCopyFunction`.\r\n\r\nHowever, if you declare the struct inline in the CREATE TABLE statement, everything works as expected. Creating an aliased struct with only atomic types inside of it also works fine.\r\n\r\n\r\n### To Reproduce\r\n```\r\nCREATE TYPE foobar AS ENUM('Foo', 'Bar');\r\n\r\nCREATE TYPE top_nest AS STRUCT (\r\n    foobar FOOBAR\r\n);\r\n\r\nCREATE TYPE primitive AS STRUCT (\r\n    i INT\r\n);\r\n\r\nCREATE TABLE passing (\r\n    a VARCHAR,\r\n    primitive PRIMITIVE,\r\n    top_nest STRUCT (\r\n        foobar FOOBAR\r\n    )\r\n);\r\n\r\nSELECT * FROM passing;\r\n\r\nCREATE TABLE failing (\r\n    a VARCHAR,\r\n    top_nest TOP_NEST\r\n);\r\n\r\nSELECT a FROM failing; -- This works\r\nSELECT top_nest FROM failing; -- Error: INTERNAL Error: Unsupported type for ColumnDataCollection::GetCopyFunction\r\n```\r\n\r\n### OS:\r\n\r\nMacOS Ventura 13.4 (aarch64)\r\n\r\n### DuckDB Version:\r\n\r\nv0.8.1-dev111\r\n\r\n### DuckDB Client:\r\n\r\nCLI, Python\r\n\r\n### Full Name:\r\n\r\nDavid Roher\r\n\r\n### Affiliation:\r\n\r\nSelf\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2023-07-27T11:09:38Z"
}