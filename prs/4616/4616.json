{
  "repo": "duckdb/duckdb",
  "pull_number": 4616,
  "instance_id": "duckdb__duckdb-4616",
  "issue_numbers": [
    "4615"
  ],
  "base_commit": "109f932c41fba9d61189e01ab0e5496cb9749506",
  "patch": "diff --git a/src/planner/binder/statement/bind_update.cpp b/src/planner/binder/statement/bind_update.cpp\nindex e80b04172332..8281909d87ae 100644\n--- a/src/planner/binder/statement/bind_update.cpp\n+++ b/src/planner/binder/statement/bind_update.cpp\n@@ -1,5 +1,8 @@\n+#include \"duckdb/parser/expression/columnref_expression.hpp\"\n #include \"duckdb/parser/statement/update_statement.hpp\"\n #include \"duckdb/planner/binder.hpp\"\n+#include \"duckdb/planner/bound_tableref.hpp\"\n+#include \"duckdb/planner/constraints/bound_check_constraint.hpp\"\n #include \"duckdb/planner/expression/bound_columnref_expression.hpp\"\n #include \"duckdb/planner/expression/bound_default_expression.hpp\"\n #include \"duckdb/planner/expression_binder/update_binder.hpp\"\n@@ -8,12 +11,10 @@\n #include \"duckdb/planner/operator/logical_get.hpp\"\n #include \"duckdb/planner/operator/logical_projection.hpp\"\n #include \"duckdb/planner/operator/logical_update.hpp\"\n-#include \"duckdb/planner/constraints/bound_check_constraint.hpp\"\n-#include \"duckdb/parser/expression/columnref_expression.hpp\"\n-#include \"duckdb/storage/data_table.hpp\"\n-#include \"duckdb/planner/bound_tableref.hpp\"\n #include \"duckdb/planner/tableref/bound_basetableref.hpp\"\n #include \"duckdb/planner/tableref/bound_crossproductref.hpp\"\n+#include \"duckdb/storage/data_table.hpp\"\n+\n #include <algorithm>\n \n namespace duckdb {\n@@ -184,10 +185,10 @@ BoundStatement Binder::Bind(UpdateStatement &stmt) {\n \t\tif (column.Generated()) {\n \t\t\tthrow BinderException(\"Cant update column \\\"%s\\\" because it is a generated column!\", column.Name());\n \t\t}\n-\t\tif (std::find(update->columns.begin(), update->columns.end(), column.Oid()) != update->columns.end()) {\n+\t\tif (std::find(update->columns.begin(), update->columns.end(), column.StorageOid()) != update->columns.end()) {\n \t\t\tthrow BinderException(\"Multiple assignments to same column \\\"%s\\\"\", colname);\n \t\t}\n-\t\tupdate->columns.push_back(column.Oid());\n+\t\tupdate->columns.push_back(column.StorageOid());\n \n \t\tif (expr->type == ExpressionType::VALUE_DEFAULT) {\n \t\t\tupdate->expressions.push_back(make_unique<BoundDefaultExpression>(column.Type()));\n",
  "test_patch": "diff --git a/test/issues/general/test_4615.test b/test/issues/general/test_4615.test\nnew file mode 100644\nindex 000000000000..b8ed8bdf2336\n--- /dev/null\n+++ b/test/issues/general/test_4615.test\n@@ -0,0 +1,19 @@\n+# name: test/issues/general/test_4615.test\n+# group: [general]\n+\n+statement ok\n+pragma enable_verification\n+\n+statement ok\n+CREATE TABLE t1 (int AS (x + 100), x INT);\n+\n+statement ok\n+INSERT INTO t1 VALUES (1);\n+\n+statement ok\n+UPDATE t1 SET x=0 WHERE x = 1;\n+\n+query II\n+SELECT * FROM t1;\n+----\n+100\t0\n\\ No newline at end of file\n",
  "problem_statement": "AddressSanitizer error on update statement\n### What happens?\n\n`StorageOid` should be used instead of `Oid`\n\n### To Reproduce\n\n```SQL\r\nCREATE TABLE t1 (int AS (x + 100), x INT);\r\nINSERT INTO t1 VALUES (1);\r\nUPDATE t1 SET x=0 WHERE x = 1;\r\n```\n\n### OS:\n\nLinux\n\n### DuckDB Version:\n\n0.5.0\n\n### DuckDB Client:\n\nshell\n\n### Full Name:\n\nlokax\n\n### Affiliation:\n\n*\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "",
  "created_at": "2022-09-05T16:16:26Z"
}