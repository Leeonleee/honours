{
  "repo": "duckdb/duckdb",
  "pull_number": 5888,
  "instance_id": "duckdb__duckdb-5888",
  "issue_numbers": [
    "5887"
  ],
  "base_commit": "b3f6a8f16dd37efd2218a4dc09797aed1eca5c3f",
  "patch": "diff --git a/extension/icu/icu-dateadd.cpp b/extension/icu/icu-dateadd.cpp\nindex 21d5aaf2bee0..7d3d41f3a7fe 100644\n--- a/extension/icu/icu-dateadd.cpp\n+++ b/extension/icu/icu-dateadd.cpp\n@@ -58,7 +58,20 @@ timestamp_t ICUCalendarAdd::Operation(timestamp_t timestamp, interval_t interval\n \tcalendar->setTime(udate, status);\n \n \t// Add interval fields from lowest to highest\n-\tcalendar->add(UCAL_MILLISECOND, interval.micros / Interval::MICROS_PER_MSEC, status);\n+\n+\t// Break units apart to avoid overflow\n+\tauto remaining = interval.micros / Interval::MICROS_PER_MSEC;\n+\tcalendar->add(UCAL_MILLISECOND, remaining % Interval::MSECS_PER_SEC, status);\n+\n+\tremaining /= Interval::MSECS_PER_SEC;\n+\tcalendar->add(UCAL_SECOND, remaining % Interval::SECS_PER_MINUTE, status);\n+\n+\tremaining /= Interval::SECS_PER_MINUTE;\n+\tcalendar->add(UCAL_MINUTE, remaining % Interval::MINS_PER_HOUR, status);\n+\n+\tremaining /= Interval::MINS_PER_HOUR;\n+\tcalendar->add(UCAL_HOUR, remaining, status);\n+\n \tcalendar->add(UCAL_DATE, interval.days, status);\n \tcalendar->add(UCAL_MONTH, interval.months, status);\n \n",
  "test_patch": "diff --git a/test/sql/function/timestamp/test_icu_dateadd.test b/test/sql/function/timestamp/test_icu_dateadd.test\nindex b0ad72e85a47..05a8a83f2a04 100644\n--- a/test/sql/function/timestamp/test_icu_dateadd.test\n+++ b/test/sql/function/timestamp/test_icu_dateadd.test\n@@ -87,6 +87,12 @@ SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ + iv FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.124068-08\n -00:00:00.000485\t2021-12-01 05:54:48.122971-08\n \n+# ms overflow\n+query I\n+select '1999-12-31 16:00:00-08'::timestamptz + interval 2400 hours\n+----\n+2000-04-09 17:00:00-07\n+\n #  interval + timestamp\n query II\n SELECT iv, iv + '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ FROM intervals;\n@@ -122,6 +128,12 @@ SELECT iv, iv + '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.124068-08\n -00:00:00.000485\t2021-12-01 05:54:48.122971-08\n \n+# ms overflow\n+query I\n+select interval 2400 hours + '1999-12-31 16:00:00-08'::timestamptz\n+----\n+2000-04-09 17:00:00-07\n+\n # timestamp - interval\n query II\n SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ - iv FROM intervals;\n@@ -157,6 +169,12 @@ SELECT iv, '2021-12-01 13:54:48.123456Z'::TIMESTAMPTZ - iv FROM intervals;\n 00:00:00.000612\t2021-12-01 05:54:48.122844-08\n -00:00:00.000485\t2021-12-01 05:54:48.123941-08\n \n+# ms overflow\n+query I\n+select '2000-04-09 17:00:00-07'::timestamptz - interval 2400 hours\n+----\n+1999-12-31 16:00:00-08\n+\n # Before the epoch\n query II\n SELECT iv, '1962-07-31 12:20:48.123456Z'::TIMESTAMPTZ + iv FROM intervals;\n",
  "problem_statement": "ICU TSTZ + INTERVAL From Mars\n        I am having a problem with `interval_t` to `int64_t` conversion and vice versa.\r\n\r\n`int64_t ts_micros = Interval::GetMicro(Sub(calendar, ts, origin))` does not compute the correct value because `Interval::GetMicro` always treats a day (even DST boundary day) as 24 hours.\r\n`Interval::FromMicro(result_micros)` in the return statement also calculates incorrectly by the same reason.\r\nIt looks like the two calculation errors cancel each other out and it almost works!\r\n\r\nSo rewiting this function needs corrections in two lines.\r\n```C++\r\nstatic inline timestamp_t WidthConvertibleToMicrosCommon(int64_t bucket_width_micros, const timestamp_t ts,\r\n                                                         const timestamp_t origin, icu::Calendar *calendar) {\r\n\tint64_t ts_micros = SubtractOperatorOverflowCheck::Operation<int64_t, int64_t, int64_t>(ts.value, origin.value);\r\n\tint64_t result_micros = (ts_micros / bucket_width_micros) * bucket_width_micros;\r\n\tif (ts_micros < 0 && ts_micros % bucket_width_micros != 0) {\r\n\t\tresult_micros =\r\n\t\t    SubtractOperatorOverflowCheck::Operation<int64_t, int64_t, int64_t>(result_micros, bucket_width_micros);\r\n\t}\r\n\r\n\treturn Add(calendar, origin, interval_t {0, 0, result_micros});\r\n}\r\n```\r\nlooks reasoneble, but it failed because `ICUCalendarAdd::Operation` in `Add` seems not to calculate the correct result when interval's microsecond is large.\r\n\r\nFor example\r\n```sql\r\nD select '2000-01-01 00:00:00+00'::timestamptz + '2400 hours'::interval;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 (CAST('2000-01-01 00:00:00+00' AS TIMESTAMP WITH TIME ZONE) + CAST('2400 hours' AS INTERVAL)) \u2502\r\n\u2502                                   timestamp with time zone                                    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2000-01-01 13:54:25.408+00                                                                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n_Originally posted by @papparapa in https://github.com/duckdb/duckdb/pull/5665#discussion_r1067144769_\r\n      \n",
  "hints_text": "The code in `ICUCalendarAdd::Operation` is simply bizarre.\nActually it is mostly fine - it doesn't use `SetTime` because it has to do some place-value arithmetic prep. But it does need to break down the ms value so it doesn't overflow the 32 bit integer used internally by ICU.",
  "created_at": "2023-01-11T21:51:59Z"
}