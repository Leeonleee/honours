diff --git a/test/api/adbc/test_adbc.cpp b/test/api/adbc/test_adbc.cpp
index eb45ccd4d623..7eef329a9dd4 100644
--- a/test/api/adbc/test_adbc.cpp
+++ b/test/api/adbc/test_adbc.cpp
@@ -1433,12 +1433,13 @@ TEST_CASE("Test AdbcConnectionGetObjects", "[adbc]") {
 		AdbcConnectionGetObjects(&db.adbc_connection, ADBC_OBJECT_DEPTH_COLUMNS, nullptr, nullptr, "bla", nullptr,
 		                         nullptr, &arrow_stream, &adbc_error);
 		db.CreateTable("result", arrow_stream);
-		res = db.Query("Select * from result order by catalog_name asc");
+		res = db.Query("Select catalog_name, list_sort(catalog_db_schemas) as catalog_db_schemas from result order by "
+		               "catalog_name asc");
 		REQUIRE((res->ColumnCount() == 2));
 		REQUIRE((res->RowCount() == 3));
 		REQUIRE((res->GetValue(1, 0).ToString() ==
-		         "[{'db_schema_name': pg_catalog, 'db_schema_tables': NULL}, {'db_schema_name': information_schema, "
-		         "'db_schema_tables': NULL}, {'db_schema_name': main, 'db_schema_tables': NULL}]"));
+		         "[{'db_schema_name': information_schema, 'db_schema_tables': NULL}, {'db_schema_name': main, "
+		         "'db_schema_tables': NULL}, {'db_schema_name': pg_catalog, 'db_schema_tables': NULL}]"));
 		db.Query("Drop table result;");
 
 		AdbcConnectionGetObjects(&db.adbc_connection, ADBC_OBJECT_DEPTH_COLUMNS, nullptr, nullptr, nullptr, nullptr,
diff --git a/test/issues/general/test_16213.test_slow b/test/issues/general/test_16213.test_slow
new file mode 100644
index 000000000000..447123fbb332
--- /dev/null
+++ b/test/issues/general/test_16213.test_slow
@@ -0,0 +1,56 @@
+# name: test/issues/general/test_16213.test_slow
+# description: Issue 16213 - Specific query not finishing since v1.1.0 and filling up all temp disk space
+# group: [general]
+
+require icu
+
+# replicate date generation in issue, but in SQL
+statement ok
+create table records as
+	select
+		range id,
+		to_timestamp(1514764800 + range / 1_000_000 * (1704067200 - 1514764800)) as creation_dt,
+		creation_dt::date as creation_day,
+		printf('%02X', range % 200) category,
+	from range(1_000_000);
+
+statement ok
+create table labels as
+	select
+		id,
+		creation_dt + (1 * 60 * 60 + random() * (125 * 24 * 60 * 60 - 1 * 60 * 60) || ' seconds')::interval as label_dt,
+		1::bigint as label,
+	from (
+		from records
+		using sample 50_000
+	);
+
+# this should not time out
+statement ok
+with
+day_cat_rows as
+  (select category,
+          creation_day
+   from records
+   group by category,
+            creation_day),
+recs as
+  (select category,
+          records.creation_dt,
+          labels.label_dt,
+          labels.label
+   from records
+   left join labels on labels.id = records.id),
+counts as
+  (select day_cat_rows.creation_day,
+          category,
+     (select count(1)
+      from recs
+      where recs.creation_dt > day_cat_rows.creation_day - '30 days'::interval
+        and recs.creation_dt <= day_cat_rows.creation_day
+        and recs.category = day_cat_rows.category
+        and recs.label_dt <= day_cat_rows.creation_day
+        and recs.label = 1) as num_labeled_30d,
+   from day_cat_rows)
+select *
+from counts;
\ No newline at end of file
