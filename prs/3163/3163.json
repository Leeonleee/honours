{
  "repo": "duckdb/duckdb",
  "pull_number": 3163,
  "instance_id": "duckdb__duckdb-3163",
  "issue_numbers": [
    "3169"
  ],
  "base_commit": "be11d8420e86c3533743d1774dcbd4146c5839b3",
  "patch": "diff --git a/.github/workflows/Main.yml b/.github/workflows/Main.yml\nindex c76ce0c08f23..f0f060e35ac8 100644\n--- a/.github/workflows/Main.yml\n+++ b/.github/workflows/Main.yml\n@@ -441,7 +441,7 @@ jobs:\n     - name: Install psqlodbc\n       run: |\n         git clone https://github.com/Mytherin/psqlodbc.git\n-        (cd psqlodbc && git checkout f11663bb9d1e6c0bbad8d4df919da1edc3c5338c && make debug)\n+        (cd psqlodbc && git checkout 9863221be0aa6e921c25818509b0402ebda1e561 && make debug)\n \n     - name: Build\n       run: DISABLE_SANITIZER=1 make debug\ndiff --git a/.github/workflows/Windows.yml b/.github/workflows/Windows.yml\nindex 8bc7cd540b7b..614972d1ec6b 100644\n--- a/.github/workflows/Windows.yml\n+++ b/.github/workflows/Windows.yml\n@@ -177,7 +177,7 @@ jobs:\n     - name: Install psqlodbc\n       run: |\n         git clone https://github.com/Mytherin/psqlodbc.git\n-        (cd psqlodbc && git checkout f11663bb9d1e6c0bbad8d4df919da1edc3c5338c && make release)\n+        (cd psqlodbc && git checkout 9863221be0aa6e921c25818509b0402ebda1e561 && make release)\n \n     - name: Test psqlodbc\n       run: |\ndiff --git a/extension/tpch/tpch-extension.cpp b/extension/tpch/tpch-extension.cpp\nindex 732f2e870a4a..adc482992aa9 100644\n--- a/extension/tpch/tpch-extension.cpp\n+++ b/extension/tpch/tpch-extension.cpp\n@@ -9,6 +9,7 @@\n #include \"duckdb/parser/parser.hpp\"\n #include \"duckdb/parser/statement/select_statement.hpp\"\n #include \"duckdb/parser/parsed_data/create_pragma_function_info.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n #endif\n \n #include \"dbgen/dbgen.hpp\"\ndiff --git a/src/catalog/default/default_functions.cpp b/src/catalog/default/default_functions.cpp\nindex d52edfce8018..a1a2777b420b 100644\n--- a/src/catalog/default/default_functions.cpp\n+++ b/src/catalog/default/default_functions.cpp\n@@ -90,6 +90,10 @@ static DefaultMacro internal_macros[] = {\n \t{DEFAULT_SCHEMA, \"array_append\", {\"arr\", \"el\", nullptr}, \"list_append(arr, el)\"},\n \t{DEFAULT_SCHEMA, \"list_prepend\", {\"e\", \"l\", nullptr}, \"list_concat(list_value(e), l)\"},\n \t{DEFAULT_SCHEMA, \"array_prepend\", {\"el\", \"arr\", nullptr}, \"list_prepend(el, arr)\"},\n+\t{DEFAULT_SCHEMA, \"array_pop_back\", {\"arr\", nullptr}, \"arr[:LEN(arr)-1]\"},\n+\t{DEFAULT_SCHEMA, \"array_pop_front\", {\"arr\", nullptr}, \"arr[1:]\"},\n+\t{DEFAULT_SCHEMA, \"array_push_back\", {\"arr\", \"e\", nullptr}, \"list_concat(arr, list_value(e))\"},\n+\t{DEFAULT_SCHEMA, \"array_push_front\", {\"arr\", \"e\", nullptr}, \"list_concat(list_value(e), arr)\"},\n \t{DEFAULT_SCHEMA, \"generate_subscripts\", {\"arr\", \"dim\", nullptr}, \"unnest(generate_series(1, array_length(arr, dim)))\"},\n \t{DEFAULT_SCHEMA, \"fdiv\", {\"x\", \"y\", nullptr}, \"floor(x/y)\"},\n \t{DEFAULT_SCHEMA, \"fmod\", {\"x\", \"y\", nullptr}, \"(x-y*floor(x/y))\"},\ndiff --git a/src/execution/operator/projection/physical_unnest.cpp b/src/execution/operator/projection/physical_unnest.cpp\nindex a3ad774095a2..19bd9cf6bb77 100644\n--- a/src/execution/operator/projection/physical_unnest.cpp\n+++ b/src/execution/operator/projection/physical_unnest.cpp\n@@ -179,9 +179,15 @@ OperatorResultType PhysicalUnnest::Execute(ExecutionContext &context, DataChunk\n \t\t\t\tauto &list_vector = state.list_data.data[col_idx];\n \t\t\t\tlist_vector.Orrify(state.list_data.size(), state.list_vector_data[col_idx]);\n \n-\t\t\t\tauto &child_vector = ListVector::GetEntry(list_vector);\n-\t\t\t\tauto list_size = ListVector::GetListSize(list_vector);\n-\t\t\t\tchild_vector.Orrify(list_size, state.list_child_data[col_idx]);\n+\t\t\t\tif (list_vector.GetType() == LogicalType::SQLNULL) {\n+\t\t\t\t\t// UNNEST(NULL)\n+\t\t\t\t\tauto &child_vector = list_vector;\n+\t\t\t\t\tchild_vector.Orrify(0, state.list_child_data[col_idx]);\n+\t\t\t\t} else {\n+\t\t\t\t\tauto list_size = ListVector::GetListSize(list_vector);\n+\t\t\t\t\tauto &child_vector = ListVector::GetEntry(list_vector);\n+\t\t\t\t\tchild_vector.Orrify(list_size, state.list_child_data[col_idx]);\n+\t\t\t\t}\n \t\t\t}\n \t\t\tstate.first_fetch = false;\n \t\t}\n@@ -230,34 +236,40 @@ OperatorResultType PhysicalUnnest::Execute(ExecutionContext &context, DataChunk\n \t\tfor (idx_t col_idx = 0; col_idx < state.list_data.ColumnCount(); col_idx++) {\n \t\t\tauto &result_vector = chunk.data[col_idx + input.ColumnCount()];\n \n-\t\t\tauto &vdata = state.list_vector_data[col_idx];\n-\t\t\tauto &child_data = state.list_child_data[col_idx];\n-\t\t\tauto current_idx = vdata.sel->get_index(state.parent_position);\n-\n-\t\t\tauto list_data = (list_entry_t *)vdata.data;\n-\t\t\tauto list_entry = list_data[current_idx];\n-\n-\t\t\tidx_t list_count;\n-\t\t\tif (state.list_position >= list_entry.length) {\n-\t\t\t\tlist_count = 0;\n+\t\t\tif (state.list_data.data[col_idx].GetType() == LogicalType::SQLNULL) {\n+\t\t\t\t// UNNEST(NULL)\n+\t\t\t\tchunk.SetCardinality(0);\n \t\t\t} else {\n-\t\t\t\tlist_count = MinValue<idx_t>(this_chunk_len, list_entry.length - state.list_position);\n-\t\t\t}\n+\t\t\t\tauto &vdata = state.list_vector_data[col_idx];\n+\t\t\t\tauto &child_data = state.list_child_data[col_idx];\n+\t\t\t\tauto current_idx = vdata.sel->get_index(state.parent_position);\n \n-\t\t\tif (list_entry.length > state.list_position) {\n-\t\t\t\tif (!vdata.validity.RowIsValid(current_idx)) {\n-\t\t\t\t\tUnnestNull(0, list_count, result_vector);\n+\t\t\t\tauto list_data = (list_entry_t *)vdata.data;\n+\t\t\t\tauto list_entry = list_data[current_idx];\n+\n+\t\t\t\tidx_t list_count;\n+\t\t\t\tif (state.list_position >= list_entry.length) {\n+\t\t\t\t\tlist_count = 0;\n \t\t\t\t} else {\n-\t\t\t\t\tauto &list_vector = state.list_data.data[col_idx];\n-\t\t\t\t\tauto &child_vector = ListVector::GetEntry(list_vector);\n-\t\t\t\t\tauto list_size = ListVector::GetListSize(list_vector);\n+\t\t\t\t\tlist_count = MinValue<idx_t>(this_chunk_len, list_entry.length - state.list_position);\n+\t\t\t\t}\n \n-\t\t\t\t\tauto base_offset = list_entry.offset + state.list_position;\n-\t\t\t\t\tUnnestVector(child_data, child_vector, list_size, base_offset, base_offset + list_count,\n-\t\t\t\t\t             result_vector);\n+\t\t\t\tif (list_entry.length > state.list_position) {\n+\t\t\t\t\tif (!vdata.validity.RowIsValid(current_idx)) {\n+\t\t\t\t\t\tUnnestNull(0, list_count, result_vector);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tauto &list_vector = state.list_data.data[col_idx];\n+\t\t\t\t\t\tauto &child_vector = ListVector::GetEntry(list_vector);\n+\t\t\t\t\t\tauto list_size = ListVector::GetListSize(list_vector);\n+\n+\t\t\t\t\t\tauto base_offset = list_entry.offset + state.list_position;\n+\t\t\t\t\t\tUnnestVector(child_data, child_vector, list_size, base_offset, base_offset + list_count,\n+\t\t\t\t\t\t             result_vector);\n+\t\t\t\t\t}\n \t\t\t\t}\n+\n+\t\t\t\tUnnestNull(list_count, this_chunk_len, result_vector);\n \t\t\t}\n-\t\t\tUnnestNull(list_count, this_chunk_len, result_vector);\n \t\t}\n \n \t\tstate.list_position += this_chunk_len;\ndiff --git a/src/function/pragma/pragma_queries.cpp b/src/function/pragma/pragma_queries.cpp\nindex 26b693d53702..193bc2f9ca32 100644\n--- a/src/function/pragma/pragma_queries.cpp\n+++ b/src/function/pragma/pragma_queries.cpp\n@@ -13,6 +13,21 @@ string PragmaShowTables(ClientContext &context, const FunctionParameters &parame\n \treturn \"SELECT name FROM sqlite_master ORDER BY name\";\n }\n \n+string PragmaShowTablesExpanded(ClientContext &context, const FunctionParameters &parameters) {\n+\treturn R\"(\n+\t\t\tSELECT\n+\t\t\t\tt.table_name,\n+\t\t\t\tLIST(c.column_name order by c.column_name) AS column_names,\n+\t\t\t\tLIST(c.data_type order by c.column_name) AS column_types,\n+\t\t\t\tFIRST(t.temporary) AS temporary\n+\t\t\tFROM duckdb_tables t\n+\t\t\tJOIN duckdb_columns c\n+\t\t\tUSING (table_oid)\n+\t\t\tGROUP BY t.table_name\n+\t\t\tORDER BY t.table_name;\n+\t)\";\n+}\n+\n string PragmaAllProfiling(ClientContext &context, const FunctionParameters &parameters) {\n \treturn \"SELECT * FROM pragma_last_profiling_output() JOIN pragma_detailed_profiling_output() ON \"\n \t       \"(pragma_last_profiling_output.operator_id);\";\n@@ -78,6 +93,7 @@ void PragmaQueries::RegisterFunction(BuiltinFunctions &set) {\n \tset.AddFunction(PragmaFunction::PragmaCall(\"table_info\", PragmaTableInfo, {LogicalType::VARCHAR}));\n \tset.AddFunction(PragmaFunction::PragmaCall(\"storage_info\", PragmaStorageInfo, {LogicalType::VARCHAR}));\n \tset.AddFunction(PragmaFunction::PragmaStatement(\"show_tables\", PragmaShowTables));\n+\tset.AddFunction(PragmaFunction::PragmaStatement(\"show_tables_expanded\", PragmaShowTablesExpanded));\n \tset.AddFunction(PragmaFunction::PragmaStatement(\"database_list\", PragmaDatabaseList));\n \tset.AddFunction(PragmaFunction::PragmaStatement(\"collations\", PragmaCollations));\n \tset.AddFunction(PragmaFunction::PragmaCall(\"show\", PragmaShow, {LogicalType::VARCHAR}));\ndiff --git a/src/function/scalar/list/CMakeLists.txt b/src/function/scalar/list/CMakeLists.txt\nindex 0d7d3306788f..f241d91ba852 100644\n--- a/src/function/scalar/list/CMakeLists.txt\n+++ b/src/function/scalar/list/CMakeLists.txt\n@@ -2,11 +2,12 @@ add_library_unity(\n   duckdb_func_list\n   OBJECT\n   list_concat.cpp\n-  list_contains.cpp\n+  contains_or_position.cpp\n   array_slice.cpp\n   list_extract.cpp\n   list_value.cpp\n-  range.cpp)\n+  range.cpp\n+  flatten.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_list>\n     PARENT_SCOPE)\ndiff --git a/src/function/scalar/list/list_contains.cpp b/src/function/scalar/list/contains_or_position.cpp\nsimilarity index 50%\nrename from src/function/scalar/list/list_contains.cpp\nrename to src/function/scalar/list/contains_or_position.cpp\nindex 6c0c5fddbed5..48045ec57602 100644\n--- a/src/function/scalar/list/list_contains.cpp\n+++ b/src/function/scalar/list/contains_or_position.cpp\n@@ -5,86 +5,44 @@\n namespace duckdb {\n \n template <class T>\n-static inline bool ValueCompare(const T &left, const T &right) {\n+static inline bool ValueEqualsOrNot(const T &left, const T &right) {\n \treturn left == right;\n }\n \n template <>\n-inline bool ValueCompare(const string_t &left, const string_t &right) {\n+inline bool ValueEqualsOrNot(const string_t &left, const string_t &right) {\n \treturn StringComparisonOperators::EqualsOrNot<false>(left, right);\n }\n \n-template <>\n-inline bool ValueCompare(const Value &left, const Value &right) {\n-\treturn left == right;\n-}\n-\n-template <class T>\n-static void TemplatedListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\tD_ASSERT(args.ColumnCount() == 2);\n-\tauto count = args.size();\n-\tVector &list = args.data[0];\n-\tVector &value_vector = args.data[1];\n-\n-\tresult.SetVectorType(VectorType::FLAT_VECTOR);\n-\tauto result_entries = FlatVector::GetData<bool>(result); // Create a vector of bool\n-\tauto &result_validity = FlatVector::Validity(result);\n-\n-\tif (list.GetType().id() == LogicalTypeId::SQLNULL) {\n-\t\tresult_validity.SetInvalid(0);\n-\t\treturn;\n+struct ContainsFunctor {\n+\tstatic inline bool Initialize() {\n+\t\treturn false;\n \t}\n+\tstatic inline bool UpdateResultEntries(idx_t child_idx) {\n+\t\treturn true;\n+\t}\n+};\n \n-\tauto list_size = ListVector::GetListSize(list);\n-\tauto &child_vector = ListVector::GetEntry(list);\n-\n-\tVectorData child_data;\n-\tchild_vector.Orrify(list_size, child_data);\n-\n-\tVectorData list_data;\n-\tlist.Orrify(count, list_data);\n-\tauto list_entries = (list_entry_t *)list_data.data;\n-\n-\tVectorData value_data;\n-\tvalue_vector.Orrify(count, value_data);\n-\n-\tfor (idx_t i = 0; i < count; i++) {\n-\t\tauto list_index = list_data.sel->get_index(i);\n-\t\tauto value_index = value_data.sel->get_index(i);\n-\n-\t\tif (!list_data.validity.RowIsValid(list_index) || !value_data.validity.RowIsValid(value_index)) {\n-\t\t\tresult_validity.SetInvalid(i);\n-\t\t\tcontinue;\n-\t\t}\n-\n-\t\tconst auto &list_entry = list_entries[list_index];\n-\t\tauto source_idx = child_data.sel->get_index(list_entry.offset);\n-\t\tauto child_value = FlatVector::GetData<T>(child_vector);\n-\n-\t\tauto values = FlatVector::GetData<T>(value_vector);\n-\t\tresult_entries[list_index] = false;\n-\t\tfor (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {\n-\t\t\tauto child_value_idx = source_idx + child_idx;\n-\n-\t\t\tif (!child_data.validity.RowIsValid(child_value_idx)) {\n-\t\t\t\tcontinue;\n-\t\t\t}\n-\t\t\tif (ValueCompare<T>(child_value[child_value_idx], values[value_index])) {\n-\t\t\t\tresult_entries[list_index] = true;\n-\t\t\t\tbreak; // Found value in list, no need to look further\n-\t\t\t}\n-\t\t}\n+struct PositionFunctor {\n+\tstatic inline int32_t Initialize() {\n+\t\treturn 0;\n \t}\n-}\n+\tstatic inline int32_t UpdateResultEntries(idx_t child_idx) {\n+\t\treturn child_idx + 1;\n+\t}\n+};\n \n-static void NestedListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+template <class CHILD_TYPE, class RETURN_TYPE, class OP>\n+static void TemplatedContainsOrPosition(DataChunk &args, ExpressionState &state, Vector &result,\n+                                        bool is_nested = false) {\n \tD_ASSERT(args.ColumnCount() == 2);\n \tauto count = args.size();\n \tVector &list = args.data[0];\n \tVector &value_vector = args.data[1];\n \n+\t// Create a result vector of type RETURN_TYPE\n \tresult.SetVectorType(VectorType::FLAT_VECTOR);\n-\tauto result_entries = FlatVector::GetData<bool>(result); // Create a vector of bool\n+\tauto result_entries = FlatVector::GetData<RETURN_TYPE>(result);\n \tauto &result_validity = FlatVector::Validity(result);\n \n \tif (list.GetType().id() == LogicalTypeId::SQLNULL) {\n@@ -117,71 +75,97 @@ static void NestedListContainsFunction(DataChunk &args, ExpressionState &state,\n \t\tconst auto &list_entry = list_entries[list_index];\n \t\tauto source_idx = child_data.sel->get_index(list_entry.offset);\n \n-\t\tresult_entries[list_index] = false;\n+\t\t// not required for a comparison of nested types\n+\t\tauto child_value = FlatVector::GetData<CHILD_TYPE>(child_vector);\n+\t\tauto values = FlatVector::GetData<CHILD_TYPE>(value_vector);\n+\n+\t\tresult_entries[list_index] = OP::Initialize();\n \t\tfor (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {\n \t\t\tauto child_value_idx = source_idx + child_idx;\n+\n \t\t\tif (!child_data.validity.RowIsValid(child_value_idx)) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tif (ValueCompare<Value>(child_vector.GetValue(child_value_idx), value_vector.GetValue(value_index))) {\n-\t\t\t\tresult_entries[list_index] = true;\n-\t\t\t\tbreak; // Found value in list, no need to look further\n+\n+\t\t\tif (!is_nested) {\n+\t\t\t\tif (ValueEqualsOrNot<CHILD_TYPE>(child_value[child_value_idx], values[value_index])) {\n+\t\t\t\t\tresult_entries[list_index] = OP::UpdateResultEntries(child_idx);\n+\t\t\t\t\tbreak; // Found value in list, no need to look further\n+\t\t\t\t}\n+\t\t\t} else {\n+\t\t\t\t// FIXME: using Value is less efficient than modifying the vector comparison code\n+\t\t\t\t// to more efficiently compare nested types\n+\t\t\t\tif (ValueEqualsOrNot<Value>(child_vector.GetValue(child_value_idx),\n+\t\t\t\t                            value_vector.GetValue(value_index))) {\n+\t\t\t\t\tresult_entries[list_index] = OP::UpdateResultEntries(child_idx);\n+\t\t\t\t\tbreak; // Found value in list, no need to look further\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n }\n \n-static void ListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+template <class T, class OP>\n+static void ListContainsOrPosition(DataChunk &args, ExpressionState &state, Vector &result) {\n \tswitch (args.data[1].GetType().InternalType()) {\n \tcase PhysicalType::BOOL:\n \tcase PhysicalType::INT8:\n-\t\tTemplatedListContainsFunction<int8_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<int8_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::INT16:\n-\t\tTemplatedListContainsFunction<int16_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<int16_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::INT32:\n-\t\tTemplatedListContainsFunction<int32_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<int32_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::INT64:\n-\t\tTemplatedListContainsFunction<int64_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<int64_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::INT128:\n-\t\tTemplatedListContainsFunction<hugeint_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<hugeint_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::UINT8:\n-\t\tTemplatedListContainsFunction<uint8_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<uint8_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::UINT16:\n-\t\tTemplatedListContainsFunction<uint16_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<uint16_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::UINT32:\n-\t\tTemplatedListContainsFunction<uint32_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<uint32_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::UINT64:\n-\t\tTemplatedListContainsFunction<uint64_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<uint64_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::FLOAT:\n-\t\tTemplatedListContainsFunction<float>(args, state, result);\n+\t\tTemplatedContainsOrPosition<float, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::DOUBLE:\n-\t\tTemplatedListContainsFunction<double>(args, state, result);\n+\t\tTemplatedContainsOrPosition<double, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::VARCHAR:\n-\t\tTemplatedListContainsFunction<string_t>(args, state, result);\n+\t\tTemplatedContainsOrPosition<string_t, T, OP>(args, state, result);\n \t\tbreak;\n \tcase PhysicalType::MAP:\n \tcase PhysicalType::STRUCT:\n \tcase PhysicalType::LIST:\n-\t\tNestedListContainsFunction(args, state, result);\n+\t\tTemplatedContainsOrPosition<int8_t, T, OP>(args, state, result, true);\n \t\tbreak;\n \tdefault:\n \t\tthrow NotImplementedException(\"This function has not been implemented for this type\");\n \t}\n }\n \n-static unique_ptr<FunctionData> ListContainsBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                 vector<unique_ptr<Expression>> &arguments) {\n+static void ListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\treturn ListContainsOrPosition<bool, ContainsFunctor>(args, state, result);\n+}\n+\n+static void ListPositionFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\treturn ListContainsOrPosition<int32_t, PositionFunctor>(args, state, result);\n+}\n+\n+template <LogicalTypeId RETURN_TYPE>\n+static unique_ptr<FunctionData> ListContainsOrPositionBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                           vector<unique_ptr<Expression>> &arguments) {\n \tD_ASSERT(bound_function.arguments.size() == 2);\n \n \tconst auto &list = arguments[0]->return_type; // change to list\n@@ -204,18 +188,40 @@ static unique_ptr<FunctionData> ListContainsBind(ClientContext &context, ScalarF\n \n \t\tbound_function.arguments[0] = list_type;\n \t\tbound_function.arguments[1] = value == max_child_type ? value : max_child_type;\n-\t\tbound_function.return_type = LogicalType::BOOLEAN;\n+\n+\t\t// list_contains and list_position only differ in their return type\n+\t\tbound_function.return_type = RETURN_TYPE;\n \t}\n \treturn make_unique<VariableReturnBindData>(bound_function.return_type);\n }\n \n+static unique_ptr<FunctionData> ListContainsBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                 vector<unique_ptr<Expression>> &arguments) {\n+\treturn ListContainsOrPositionBind<LogicalType::BOOLEAN>(context, bound_function, arguments);\n+}\n+\n+static unique_ptr<FunctionData> ListPositionBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                 vector<unique_ptr<Expression>> &arguments) {\n+\treturn ListContainsOrPositionBind<LogicalType::INTEGER>(context, bound_function, arguments);\n+}\n+\n ScalarFunction ListContainsFun::GetFunction() {\n \treturn ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::ANY}, // argument list\n \t                      LogicalType::BOOLEAN,                                    // return type\n \t                      ListContainsFunction, false, ListContainsBind, nullptr);\n }\n \n+ScalarFunction ListPositionFun::GetFunction() {\n+\treturn ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::ANY}, // argument list\n+\t                      LogicalType::INTEGER,                                    // return type\n+\t                      ListPositionFunction, false, ListPositionBind, nullptr);\n+}\n+\n void ListContainsFun::RegisterFunction(BuiltinFunctions &set) {\n \tset.AddFunction({\"list_contains\", \"array_contains\", \"list_has\", \"array_has\"}, GetFunction());\n }\n+\n+void ListPositionFun::RegisterFunction(BuiltinFunctions &set) {\n+\tset.AddFunction({\"list_position\", \"list_indexof\", \"array_position\", \"array_indexof\"}, GetFunction());\n+}\n } // namespace duckdb\n\\ No newline at end of file\ndiff --git a/src/function/scalar/list/flatten.cpp b/src/function/scalar/list/flatten.cpp\nnew file mode 100644\nindex 000000000000..9c93fcad1c4d\n--- /dev/null\n+++ b/src/function/scalar/list/flatten.cpp\n@@ -0,0 +1,135 @@\n+#include \"duckdb/common/types/data_chunk.hpp\"\n+#include \"duckdb/function/scalar/nested_functions.hpp\"\n+#include \"duckdb/planner/expression/bound_function_expression.hpp\"\n+#include \"duckdb/storage/statistics/list_statistics.hpp\"\n+\n+namespace duckdb {\n+\n+void ListFlattenFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tD_ASSERT(args.ColumnCount() == 1);\n+\n+\tVector &input = args.data[0];\n+\tif (input.GetType().id() == LogicalTypeId::SQLNULL) {\n+\t\tresult.Reference(input);\n+\t\treturn;\n+\t}\n+\n+\tidx_t count = args.size();\n+\n+\tVectorData list_data;\n+\tinput.Orrify(count, list_data);\n+\tauto list_entries = (list_entry_t *)list_data.data;\n+\n+\tauto &child_vector = ListVector::GetEntry(input);\n+\n+\tresult.SetVectorType(VectorType::FLAT_VECTOR);\n+\tauto result_entries = FlatVector::GetData<list_entry_t>(result);\n+\tauto &result_validity = FlatVector::Validity(result);\n+\n+\tif (child_vector.GetType().id() == LogicalTypeId::SQLNULL) {\n+\t\tauto result_entries = FlatVector::GetData<list_entry_t>(result);\n+\t\tfor (idx_t i = 0; i < count; i++) {\n+\t\t\tauto list_index = list_data.sel->get_index(i);\n+\t\t\tif (!list_data.validity.RowIsValid(list_index)) {\n+\t\t\t\tresult_validity.SetInvalid(i);\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tresult_entries[i].offset = 0;\n+\t\t\tresult_entries[i].length = 0;\n+\t\t}\n+\t\treturn;\n+\t}\n+\n+\tauto child_size = ListVector::GetListSize(input);\n+\tVectorData child_data;\n+\tchild_vector.Orrify(child_size, child_data);\n+\tauto child_entries = (list_entry_t *)child_data.data;\n+\tauto &data_vector = ListVector::GetEntry(child_vector);\n+\n+\tidx_t offset = 0;\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tauto list_index = list_data.sel->get_index(i);\n+\t\tif (!list_data.validity.RowIsValid(list_index)) {\n+\t\t\tresult_validity.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\t\tauto list_entry = list_entries[list_index];\n+\n+\t\tidx_t source_offset = 0;\n+\t\t// Find first valid child list entry to get offset\n+\t\tfor (idx_t j = 0; j < list_entry.length; j++) {\n+\t\t\tauto child_list_index = child_data.sel->get_index(list_entry.offset + j);\n+\t\t\tif (child_data.validity.RowIsValid(child_list_index)) {\n+\t\t\t\tsource_offset = child_entries[child_list_index].offset;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\n+\t\tidx_t length = 0;\n+\t\t// Find last valid child list entry to get length\n+\t\tfor (idx_t j = list_entry.length - 1; j != (idx_t)-1; j--) {\n+\t\t\tauto child_list_index = child_data.sel->get_index(list_entry.offset + j);\n+\t\t\tif (child_data.validity.RowIsValid(child_list_index)) {\n+\t\t\t\tauto child_entry = child_entries[child_list_index];\n+\t\t\t\tlength = child_entry.offset + child_entry.length - source_offset;\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tListVector::Append(result, data_vector, source_offset + length, source_offset);\n+\n+\t\tresult_entries[i].offset = offset;\n+\t\tresult_entries[i].length = length;\n+\t\toffset += length;\n+\t}\n+\n+\tif (input.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\t}\n+}\n+\n+static unique_ptr<FunctionData> ListFlattenBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                vector<unique_ptr<Expression>> &arguments) {\n+\tD_ASSERT(bound_function.arguments.size() == 1);\n+\n+\tauto &input_type = arguments[0]->return_type;\n+\tbound_function.arguments[0] = input_type;\n+\tif (input_type.id() == LogicalTypeId::SQLNULL) {\n+\t\tbound_function.return_type = LogicalType(LogicalTypeId::SQLNULL);\n+\t\treturn make_unique<VariableReturnBindData>(bound_function.return_type);\n+\t}\n+\tD_ASSERT(input_type.id() == LogicalTypeId::LIST);\n+\n+\tauto child_type = ListType::GetChildType(input_type);\n+\tif (child_type.id() == LogicalType::SQLNULL) {\n+\t\tbound_function.return_type = input_type;\n+\t\treturn make_unique<VariableReturnBindData>(bound_function.return_type);\n+\t}\n+\tD_ASSERT(child_type.id() == LogicalTypeId::LIST);\n+\n+\tbound_function.return_type = child_type;\n+\treturn make_unique<VariableReturnBindData>(bound_function.return_type);\n+}\n+\n+static unique_ptr<BaseStatistics> ListFlattenStats(ClientContext &context, BoundFunctionExpression &expr,\n+                                                   FunctionData *bind_data,\n+                                                   vector<unique_ptr<BaseStatistics>> &child_stats) {\n+\tif (!child_stats[0]) {\n+\t\treturn nullptr;\n+\t}\n+\tauto &list_stats = (ListStatistics &)*child_stats[0];\n+\tif (!list_stats.child_stats || list_stats.child_stats->type == LogicalTypeId::SQLNULL) {\n+\t\treturn nullptr;\n+\t}\n+\n+\tauto child_copy = list_stats.child_stats->Copy();\n+\tchild_copy->validity_stats = make_unique<ValidityStatistics>(true);\n+\treturn child_copy;\n+}\n+\n+void ListFlattenFun::RegisterFunction(BuiltinFunctions &set) {\n+\tScalarFunction fun({LogicalType::LIST(LogicalType::LIST(LogicalType::ANY))}, LogicalType::LIST(LogicalType::ANY),\n+\t                   ListFlattenFunction, false, ListFlattenBind, nullptr, ListFlattenStats);\n+\tset.AddFunction({\"flatten\"}, fun);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/function/scalar/nested_functions.cpp b/src/function/scalar/nested_functions.cpp\nindex e98415508e22..39d1bf3411a1 100644\n--- a/src/function/scalar/nested_functions.cpp\n+++ b/src/function/scalar/nested_functions.cpp\n@@ -8,9 +8,11 @@ void BuiltinFunctions::RegisterNestedFunctions() {\n \tRegister<StructExtractFun>();\n \tRegister<ListConcatFun>();\n \tRegister<ListContainsFun>();\n+\tRegister<ListPositionFun>();\n \tRegister<ListValueFun>();\n \tRegister<ListExtractFun>();\n \tRegister<ListRangeFun>();\n+\tRegister<ListFlattenFun>();\n \tRegister<MapFun>();\n \tRegister<MapExtractFun>();\n \tRegister<CardinalityFun>();\ndiff --git a/src/function/table/system/pragma_database_size.cpp b/src/function/table/system/pragma_database_size.cpp\nindex c16bfa2ec1c4..2b314ca0490d 100644\n--- a/src/function/table/system/pragma_database_size.cpp\n+++ b/src/function/table/system/pragma_database_size.cpp\n@@ -70,7 +70,8 @@ void PragmaDatabaseSizeFunction(ClientContext &context, const FunctionData *bind\n \t\tauto free_blocks = block_manager.FreeBlocks();\n \t\tauto used_blocks = total_blocks - free_blocks;\n \t\tauto bytes = (total_blocks * block_size);\n-\t\tauto wal_size = storage.GetWriteAheadLog()->GetWALSize();\n+\t\tauto wal = storage.GetWriteAheadLog();\n+\t\tauto wal_size = wal ? wal->GetWALSize() : 0;\n \t\toutput.data[0].SetValue(0, Value(StringUtil::BytesToHumanReadableString(bytes)));\n \t\toutput.data[1].SetValue(0, Value::BIGINT(block_size));\n \t\toutput.data[2].SetValue(0, Value::BIGINT(total_blocks));\ndiff --git a/src/include/duckdb/function/scalar/nested_functions.hpp b/src/include/duckdb/function/scalar/nested_functions.hpp\nindex 3ba716020b74..46251d60cbfe 100644\n--- a/src/include/duckdb/function/scalar/nested_functions.hpp\n+++ b/src/include/duckdb/function/scalar/nested_functions.hpp\n@@ -62,6 +62,16 @@ struct ListContainsFun {\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\n \n+struct ListFlattenFun {\n+\tstatic ScalarFunction GetFunction();\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n+struct ListPositionFun {\n+\tstatic ScalarFunction GetFunction();\n+\tstatic void RegisterFunction(BuiltinFunctions &set);\n+};\n+\n struct CardinalityFun {\n \tstatic void RegisterFunction(BuiltinFunctions &set);\n };\ndiff --git a/src/include/duckdb/main/client_context.hpp b/src/include/duckdb/main/client_context.hpp\nindex 09bf8bca26dc..c473c5effb44 100644\n--- a/src/include/duckdb/main/client_context.hpp\n+++ b/src/include/duckdb/main/client_context.hpp\n@@ -261,4 +261,22 @@ class ClientContextLock {\n \tlock_guard<mutex> client_guard;\n };\n \n+class ClientContextWrapper {\n+public:\n+\tDUCKDB_API explicit ClientContextWrapper(const shared_ptr<ClientContext> &context)\n+\t    : client_context(context) {\n+\n+\t      };\n+\tshared_ptr<ClientContext> GetContext() {\n+\t\tauto actual_context = client_context.lock();\n+\t\tif (!actual_context) {\n+\t\t\tthrow std::runtime_error(\"This connection is closed\");\n+\t\t}\n+\t\treturn actual_context;\n+\t}\n+\n+private:\n+\tstd::weak_ptr<ClientContext> client_context;\n+};\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/main/connection.hpp b/src/include/duckdb/main/connection.hpp\nindex e6e31aec2dd7..84a307f29ab9 100644\n--- a/src/include/duckdb/main/connection.hpp\n+++ b/src/include/duckdb/main/connection.hpp\n@@ -25,6 +25,7 @@ namespace duckdb {\n \n class ChunkCollection;\n class ClientContext;\n+\n class DatabaseInstance;\n class DuckDB;\n class LogicalOperator;\n@@ -128,10 +129,10 @@ class Connection {\n \tDUCKDB_API shared_ptr<Relation> ReadCSV(const string &csv_file);\n \tDUCKDB_API shared_ptr<Relation> ReadCSV(const string &csv_file, const vector<string> &columns);\n \t//! Returns a relation from a query\n-\tDUCKDB_API shared_ptr<Relation> RelationFromQuery(const string &query, string alias = \"queryrelation\",\n+\tDUCKDB_API shared_ptr<Relation> RelationFromQuery(const string &query, const string &alias = \"queryrelation\",\n \t                                                  const string &error = \"Expected a single SELECT statement\");\n \tDUCKDB_API shared_ptr<Relation> RelationFromQuery(unique_ptr<SelectStatement> select_stmt,\n-\t                                                  string alias = \"queryrelation\");\n+\t                                                  const string &alias = \"queryrelation\");\n \n \tDUCKDB_API void BeginTransaction();\n \tDUCKDB_API void Commit();\ndiff --git a/src/include/duckdb/main/relation.hpp b/src/include/duckdb/main/relation.hpp\nindex cc0582e59c97..5dfc481239ce 100644\n--- a/src/include/duckdb/main/relation.hpp\n+++ b/src/include/duckdb/main/relation.hpp\n@@ -15,13 +15,14 @@\n #include \"duckdb/main/query_result.hpp\"\n #include \"duckdb/parser/column_definition.hpp\"\n #include \"duckdb/common/named_parameter_map.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n \n #include <memory>\n \n namespace duckdb {\n struct BoundStatement;\n \n-class ClientContext;\n+class ClientContextWrapper;\n class Binder;\n class LogicalOperator;\n class QueryNode;\n@@ -29,12 +30,16 @@ class TableRef;\n \n class Relation : public std::enable_shared_from_this<Relation> {\n public:\n-\tDUCKDB_API Relation(ClientContext &context, RelationType type) : context(context), type(type) {\n+\tDUCKDB_API Relation(const std::shared_ptr<ClientContext> &context, RelationType type)\n+\t    : context(context), type(type) {\n+\t}\n+\tDUCKDB_API Relation(ClientContextWrapper &context, RelationType type) : context(context.GetContext()), type(type) {\n \t}\n \tDUCKDB_API virtual ~Relation() {\n \t}\n \n-\tClientContext &context;\n+\tClientContextWrapper context;\n+\n \tRelationType type;\n \n public:\ndiff --git a/src/include/duckdb/main/relation/delete_relation.hpp b/src/include/duckdb/main/relation/delete_relation.hpp\nindex 908b7135f551..2e0c6564c1a7 100644\n--- a/src/include/duckdb/main/relation/delete_relation.hpp\n+++ b/src/include/duckdb/main/relation/delete_relation.hpp\n@@ -15,7 +15,7 @@ namespace duckdb {\n \n class DeleteRelation : public Relation {\n public:\n-\tDeleteRelation(ClientContext &context, unique_ptr<ParsedExpression> condition, string schema_name,\n+\tDeleteRelation(ClientContextWrapper &context, unique_ptr<ParsedExpression> condition, string schema_name,\n \t               string table_name);\n \n \tvector<ColumnDefinition> columns;\ndiff --git a/src/include/duckdb/main/relation/query_relation.hpp b/src/include/duckdb/main/relation/query_relation.hpp\nindex 3f2038ab2fdb..3a2728bf938f 100644\n--- a/src/include/duckdb/main/relation/query_relation.hpp\n+++ b/src/include/duckdb/main/relation/query_relation.hpp\n@@ -16,7 +16,7 @@ class SelectStatement;\n \n class QueryRelation : public Relation {\n public:\n-\tQueryRelation(ClientContext &context, unique_ptr<SelectStatement> select_stmt, string alias);\n+\tQueryRelation(const std::shared_ptr<ClientContext> &context, unique_ptr<SelectStatement> select_stmt, string alias);\n \t~QueryRelation();\n \n \tunique_ptr<SelectStatement> select_stmt;\ndiff --git a/src/include/duckdb/main/relation/read_csv_relation.hpp b/src/include/duckdb/main/relation/read_csv_relation.hpp\nindex 2a036f0265e4..e3cf15fc5e3e 100644\n--- a/src/include/duckdb/main/relation/read_csv_relation.hpp\n+++ b/src/include/duckdb/main/relation/read_csv_relation.hpp\n@@ -14,8 +14,8 @@ namespace duckdb {\n \n class ReadCSVRelation : public Relation {\n public:\n-\tReadCSVRelation(ClientContext &context, string csv_file, vector<ColumnDefinition> columns, bool auto_detect = false,\n-\t                string alias = string());\n+\tReadCSVRelation(const std::shared_ptr<ClientContext> &context, string csv_file, vector<ColumnDefinition> columns,\n+\t                bool auto_detect = false, string alias = string());\n \n \tstring csv_file;\n \tbool auto_detect;\ndiff --git a/src/include/duckdb/main/relation/table_function_relation.hpp b/src/include/duckdb/main/relation/table_function_relation.hpp\nindex 08b75de12cc3..e780639b3eee 100644\n--- a/src/include/duckdb/main/relation/table_function_relation.hpp\n+++ b/src/include/duckdb/main/relation/table_function_relation.hpp\n@@ -14,10 +14,10 @@ namespace duckdb {\n \n class TableFunctionRelation : public Relation {\n public:\n-\tTableFunctionRelation(ClientContext &context, string name, vector<Value> parameters,\n+\tTableFunctionRelation(const std::shared_ptr<ClientContext> &context, string name, vector<Value> parameters,\n \t                      named_parameter_map_t named_parameters, shared_ptr<Relation> input_relation_p = nullptr);\n \n-\tTableFunctionRelation(ClientContext &context, string name, vector<Value> parameters,\n+\tTableFunctionRelation(const std::shared_ptr<ClientContext> &context, string name, vector<Value> parameters,\n \t                      shared_ptr<Relation> input_relation_p = nullptr);\n \n \tstring name;\ndiff --git a/src/include/duckdb/main/relation/table_relation.hpp b/src/include/duckdb/main/relation/table_relation.hpp\nindex 45ed9bce02d4..77a950cebe89 100644\n--- a/src/include/duckdb/main/relation/table_relation.hpp\n+++ b/src/include/duckdb/main/relation/table_relation.hpp\n@@ -15,7 +15,7 @@ namespace duckdb {\n \n class TableRelation : public Relation {\n public:\n-\tTableRelation(ClientContext &context, unique_ptr<TableDescription> description);\n+\tTableRelation(const std::shared_ptr<ClientContext> &context, unique_ptr<TableDescription> description);\n \n \tunique_ptr<TableDescription> description;\n \ndiff --git a/src/include/duckdb/main/relation/update_relation.hpp b/src/include/duckdb/main/relation/update_relation.hpp\nindex b2d264b69df5..1cb14222218b 100644\n--- a/src/include/duckdb/main/relation/update_relation.hpp\n+++ b/src/include/duckdb/main/relation/update_relation.hpp\n@@ -15,7 +15,7 @@ namespace duckdb {\n \n class UpdateRelation : public Relation {\n public:\n-\tUpdateRelation(ClientContext &context, unique_ptr<ParsedExpression> condition, string schema_name,\n+\tUpdateRelation(ClientContextWrapper &context, unique_ptr<ParsedExpression> condition, string schema_name,\n \t               string table_name, vector<string> update_columns, vector<unique_ptr<ParsedExpression>> expressions);\n \n \tvector<ColumnDefinition> columns;\ndiff --git a/src/include/duckdb/main/relation/value_relation.hpp b/src/include/duckdb/main/relation/value_relation.hpp\nindex f0f9d18a9da4..b8aa47c01a48 100644\n--- a/src/include/duckdb/main/relation/value_relation.hpp\n+++ b/src/include/duckdb/main/relation/value_relation.hpp\n@@ -15,9 +15,10 @@ namespace duckdb {\n \n class ValueRelation : public Relation {\n public:\n-\tValueRelation(ClientContext &context, const vector<vector<Value>> &values, vector<string> names,\n+\tValueRelation(const std::shared_ptr<ClientContext> &context, const vector<vector<Value>> &values,\n+\t              vector<string> names, string alias = \"values\");\n+\tValueRelation(const std::shared_ptr<ClientContext> &context, const string &values, vector<string> names,\n \t              string alias = \"values\");\n-\tValueRelation(ClientContext &context, const string &values, vector<string> names, string alias = \"values\");\n \n \tvector<vector<unique_ptr<ParsedExpression>>> expressions;\n \tvector<string> names;\ndiff --git a/src/include/duckdb/main/relation/view_relation.hpp b/src/include/duckdb/main/relation/view_relation.hpp\nindex b48faa913f39..8a8afa26071e 100644\n--- a/src/include/duckdb/main/relation/view_relation.hpp\n+++ b/src/include/duckdb/main/relation/view_relation.hpp\n@@ -14,7 +14,7 @@ namespace duckdb {\n \n class ViewRelation : public Relation {\n public:\n-\tViewRelation(ClientContext &context, string schema_name, string view_name);\n+\tViewRelation(const std::shared_ptr<ClientContext> &context, string schema_name, string view_name);\n \n \tstring schema_name;\n \tstring view_name;\ndiff --git a/src/main/connection.cpp b/src/main/connection.cpp\nindex b2b1d8248c7b..6aabc2df020e 100644\n--- a/src/main/connection.cpp\n+++ b/src/main/connection.cpp\n@@ -134,7 +134,7 @@ shared_ptr<Relation> Connection::Table(const string &schema_name, const string &\n \tif (!table_info) {\n \t\tthrow Exception(\"Table does not exist!\");\n \t}\n-\treturn make_shared<TableRelation>(*context, move(table_info));\n+\treturn make_shared<TableRelation>(context, move(table_info));\n }\n \n shared_ptr<Relation> Connection::View(const string &tname) {\n@@ -142,7 +142,7 @@ shared_ptr<Relation> Connection::View(const string &tname) {\n }\n \n shared_ptr<Relation> Connection::View(const string &schema_name, const string &table_name) {\n-\treturn make_shared<ViewRelation>(*context, schema_name, table_name);\n+\treturn make_shared<ViewRelation>(context, schema_name, table_name);\n }\n \n shared_ptr<Relation> Connection::TableFunction(const string &fname) {\n@@ -153,11 +153,11 @@ shared_ptr<Relation> Connection::TableFunction(const string &fname) {\n \n shared_ptr<Relation> Connection::TableFunction(const string &fname, const vector<Value> &values,\n                                                const named_parameter_map_t &named_parameters) {\n-\treturn make_shared<TableFunctionRelation>(*context, fname, values, named_parameters);\n+\treturn make_shared<TableFunctionRelation>(context, fname, values, named_parameters);\n }\n \n shared_ptr<Relation> Connection::TableFunction(const string &fname, const vector<Value> &values) {\n-\treturn make_shared<TableFunctionRelation>(*context, fname, values);\n+\treturn make_shared<TableFunctionRelation>(context, fname, values);\n }\n \n shared_ptr<Relation> Connection::Values(const vector<vector<Value>> &values) {\n@@ -167,7 +167,7 @@ shared_ptr<Relation> Connection::Values(const vector<vector<Value>> &values) {\n \n shared_ptr<Relation> Connection::Values(const vector<vector<Value>> &values, const vector<string> &column_names,\n                                         const string &alias) {\n-\treturn make_shared<ValueRelation>(*context, values, column_names, alias);\n+\treturn make_shared<ValueRelation>(context, values, column_names, alias);\n }\n \n shared_ptr<Relation> Connection::Values(const string &values) {\n@@ -176,7 +176,7 @@ shared_ptr<Relation> Connection::Values(const string &values) {\n }\n \n shared_ptr<Relation> Connection::Values(const string &values, const vector<string> &column_names, const string &alias) {\n-\treturn make_shared<ValueRelation>(*context, values, column_names, alias);\n+\treturn make_shared<ValueRelation>(context, values, column_names, alias);\n }\n \n shared_ptr<Relation> Connection::ReadCSV(const string &csv_file) {\n@@ -188,7 +188,7 @@ shared_ptr<Relation> Connection::ReadCSV(const string &csv_file) {\n \tfor (idx_t i = 0; i < reader.sql_types.size(); i++) {\n \t\tcolumn_list.emplace_back(reader.col_names[i], reader.sql_types[i]);\n \t}\n-\treturn make_shared<ReadCSVRelation>(*context, csv_file, move(column_list), true);\n+\treturn make_shared<ReadCSVRelation>(context, csv_file, move(column_list), true);\n }\n \n shared_ptr<Relation> Connection::ReadCSV(const string &csv_file, const vector<string> &columns) {\n@@ -201,19 +201,19 @@ shared_ptr<Relation> Connection::ReadCSV(const string &csv_file, const vector<st\n \t\t}\n \t\tcolumn_list.push_back(move(col_list[0]));\n \t}\n-\treturn make_shared<ReadCSVRelation>(*context, csv_file, move(column_list));\n+\treturn make_shared<ReadCSVRelation>(context, csv_file, move(column_list));\n }\n \n unordered_set<string> Connection::GetTableNames(const string &query) {\n \treturn context->GetTableNames(query);\n }\n \n-shared_ptr<Relation> Connection::RelationFromQuery(const string &query, string alias, const string &error) {\n-\treturn RelationFromQuery(QueryRelation::ParseStatement(*context, query, error), move(alias));\n+shared_ptr<Relation> Connection::RelationFromQuery(const string &query, const string &alias, const string &error) {\n+\treturn RelationFromQuery(QueryRelation::ParseStatement(*context, query, error), alias);\n }\n \n-shared_ptr<Relation> Connection::RelationFromQuery(unique_ptr<SelectStatement> select_stmt, string alias) {\n-\treturn make_shared<QueryRelation>(*context, move(select_stmt), move(alias));\n+shared_ptr<Relation> Connection::RelationFromQuery(unique_ptr<SelectStatement> select_stmt, const string &alias) {\n+\treturn make_shared<QueryRelation>(context, move(select_stmt), alias);\n }\n \n void Connection::BeginTransaction() {\ndiff --git a/src/main/relation.cpp b/src/main/relation.cpp\nindex b87263a9337d..0e217cf12ae0 100644\n--- a/src/main/relation.cpp\n+++ b/src/main/relation.cpp\n@@ -36,7 +36,7 @@ shared_ptr<Relation> Relation::Project(const string &expression, const string &a\n }\n \n shared_ptr<Relation> Relation::Project(const string &select_list, const vector<string> &aliases) {\n-\tauto expressions = Parser::ParseExpressionList(select_list, context.GetParserOptions());\n+\tauto expressions = Parser::ParseExpressionList(select_list, context.GetContext()->GetParserOptions());\n \treturn make_shared<ProjectionRelation>(shared_from_this(), move(expressions), aliases);\n }\n \n@@ -62,12 +62,12 @@ static vector<unique_ptr<ParsedExpression>> StringListToExpressionList(ClientCon\n }\n \n shared_ptr<Relation> Relation::Project(const vector<string> &expressions, const vector<string> &aliases) {\n-\tauto result_list = StringListToExpressionList(context, expressions);\n+\tauto result_list = StringListToExpressionList(*context.GetContext(), expressions);\n \treturn make_shared<ProjectionRelation>(shared_from_this(), move(result_list), aliases);\n }\n \n shared_ptr<Relation> Relation::Filter(const string &expression) {\n-\tauto expression_list = Parser::ParseExpressionList(expression, context.GetParserOptions());\n+\tauto expression_list = Parser::ParseExpressionList(expression, context.GetContext()->GetParserOptions());\n \tif (expression_list.size() != 1) {\n \t\tthrow ParserException(\"Expected a single expression as filter condition\");\n \t}\n@@ -76,7 +76,7 @@ shared_ptr<Relation> Relation::Filter(const string &expression) {\n \n shared_ptr<Relation> Relation::Filter(const vector<string> &expressions) {\n \t// if there are multiple expressions, we AND them together\n-\tauto expression_list = StringListToExpressionList(context, expressions);\n+\tauto expression_list = StringListToExpressionList(*context.GetContext(), expressions);\n \tD_ASSERT(!expression_list.empty());\n \n \tauto expr = move(expression_list[0]);\n@@ -92,7 +92,7 @@ shared_ptr<Relation> Relation::Limit(int64_t limit, int64_t offset) {\n }\n \n shared_ptr<Relation> Relation::Order(const string &expression) {\n-\tauto order_list = Parser::ParseOrderList(expression, context.GetParserOptions());\n+\tauto order_list = Parser::ParseOrderList(expression, context.GetContext()->GetParserOptions());\n \treturn make_shared<OrderRelation>(shared_from_this(), move(order_list));\n }\n \n@@ -102,7 +102,7 @@ shared_ptr<Relation> Relation::Order(const vector<string> &expressions) {\n \t}\n \tvector<OrderByNode> order_list;\n \tfor (auto &expression : expressions) {\n-\t\tauto inner_list = Parser::ParseOrderList(expression, context.GetParserOptions());\n+\t\tauto inner_list = Parser::ParseOrderList(expression, context.GetContext()->GetParserOptions());\n \t\tif (inner_list.size() != 1) {\n \t\t\tthrow ParserException(\"Expected a single ORDER BY expression in the expression list\");\n \t\t}\n@@ -112,7 +112,7 @@ shared_ptr<Relation> Relation::Order(const vector<string> &expressions) {\n }\n \n shared_ptr<Relation> Relation::Join(const shared_ptr<Relation> &other, const string &condition, JoinType type) {\n-\tauto expression_list = Parser::ParseExpressionList(condition, context.GetParserOptions());\n+\tauto expression_list = Parser::ParseExpressionList(condition, context.GetContext()->GetParserOptions());\n \tD_ASSERT(!expression_list.empty());\n \n \tif (expression_list.size() > 1 || expression_list[0]->type == ExpressionType::COLUMN_REF) {\n@@ -160,24 +160,24 @@ shared_ptr<Relation> Relation::Alias(const string &alias) {\n }\n \n shared_ptr<Relation> Relation::Aggregate(const string &aggregate_list) {\n-\tauto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetParserOptions());\n+\tauto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetContext()->GetParserOptions());\n \treturn make_shared<AggregateRelation>(shared_from_this(), move(expression_list));\n }\n \n shared_ptr<Relation> Relation::Aggregate(const string &aggregate_list, const string &group_list) {\n-\tauto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetParserOptions());\n-\tauto groups = Parser::ParseExpressionList(group_list, context.GetParserOptions());\n+\tauto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetContext()->GetParserOptions());\n+\tauto groups = Parser::ParseExpressionList(group_list, context.GetContext()->GetParserOptions());\n \treturn make_shared<AggregateRelation>(shared_from_this(), move(expression_list), move(groups));\n }\n \n shared_ptr<Relation> Relation::Aggregate(const vector<string> &aggregates) {\n-\tauto aggregate_list = StringListToExpressionList(context, aggregates);\n+\tauto aggregate_list = StringListToExpressionList(*context.GetContext(), aggregates);\n \treturn make_shared<AggregateRelation>(shared_from_this(), move(aggregate_list));\n }\n \n shared_ptr<Relation> Relation::Aggregate(const vector<string> &aggregates, const vector<string> &groups) {\n-\tauto aggregate_list = StringListToExpressionList(context, aggregates);\n-\tauto group_list = StringListToExpressionList(context, groups);\n+\tauto aggregate_list = StringListToExpressionList(*context.GetContext(), aggregates);\n+\tauto group_list = StringListToExpressionList(*context.GetContext(), groups);\n \treturn make_shared<AggregateRelation>(shared_from_this(), move(aggregate_list), move(group_list));\n }\n \n@@ -192,7 +192,7 @@ unique_ptr<TableRef> Relation::GetTableRef() {\n }\n \n unique_ptr<QueryResult> Relation::Execute() {\n-\treturn context.Execute(shared_from_this());\n+\treturn context.GetContext()->Execute(shared_from_this());\n }\n \n BoundStatement Relation::Bind(Binder &binder) {\n@@ -215,7 +215,7 @@ void Relation::Insert(const string &schema_name, const string &table_name) {\n \n void Relation::Insert(const vector<vector<Value>> &values) {\n \tvector<string> column_names;\n-\tauto rel = make_shared<ValueRelation>(context, values, move(column_names), \"values\");\n+\tauto rel = make_shared<ValueRelation>(context.GetContext(), values, move(column_names), \"values\");\n \trel->Insert(GetAlias());\n }\n \n@@ -249,7 +249,7 @@ shared_ptr<Relation> Relation::CreateView(const string &name, bool replace, bool\n }\n \n unique_ptr<QueryResult> Relation::Query(const string &sql) {\n-\treturn context.Query(sql, false);\n+\treturn context.GetContext()->Query(sql, false);\n }\n \n unique_ptr<QueryResult> Relation::Query(const string &name, const string &sql) {\n@@ -272,11 +272,12 @@ void Relation::Delete(const string &condition) {\n \n shared_ptr<Relation> Relation::TableFunction(const std::string &fname, const vector<Value> &values,\n                                              const named_parameter_map_t &named_parameters) {\n-\treturn make_shared<TableFunctionRelation>(context, fname, values, named_parameters, shared_from_this());\n+\treturn make_shared<TableFunctionRelation>(context.GetContext(), fname, values, named_parameters,\n+\t                                          shared_from_this());\n }\n \n shared_ptr<Relation> Relation::TableFunction(const std::string &fname, const vector<Value> &values) {\n-\treturn make_shared<TableFunctionRelation>(context, fname, values, shared_from_this());\n+\treturn make_shared<TableFunctionRelation>(context.GetContext(), fname, values, shared_from_this());\n }\n \n string Relation::ToString() {\ndiff --git a/src/main/relation/aggregate_relation.cpp b/src/main/relation/aggregate_relation.cpp\nindex e48f9caa3b47..67f989cda5cb 100644\n--- a/src/main/relation/aggregate_relation.cpp\n+++ b/src/main/relation/aggregate_relation.cpp\n@@ -10,7 +10,7 @@ AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,\n     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),\n       child(move(child_p)) {\n \t// bind the expressions\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,\n@@ -19,7 +19,7 @@ AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,\n     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),\n       groups(move(groups_p)), child(move(child_p)) {\n \t// bind the expressions\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> AggregateRelation::GetQueryNode() {\ndiff --git a/src/main/relation/create_table_relation.cpp b/src/main/relation/create_table_relation.cpp\nindex 9c4a776264f9..6287ff34501b 100644\n--- a/src/main/relation/create_table_relation.cpp\n+++ b/src/main/relation/create_table_relation.cpp\n@@ -10,7 +10,7 @@ namespace duckdb {\n CreateTableRelation::CreateTableRelation(shared_ptr<Relation> child_p, string schema_name, string table_name)\n     : Relation(child_p->context, RelationType::CREATE_TABLE_RELATION), child(move(child_p)),\n       schema_name(move(schema_name)), table_name(move(table_name)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement CreateTableRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/create_view_relation.cpp b/src/main/relation/create_view_relation.cpp\nindex 37fcb7e90d73..8afd8279c96d 100644\n--- a/src/main/relation/create_view_relation.cpp\n+++ b/src/main/relation/create_view_relation.cpp\n@@ -10,7 +10,7 @@ CreateViewRelation::CreateViewRelation(shared_ptr<Relation> child_p, string view\n                                        bool temporary_p)\n     : Relation(child_p->context, RelationType::CREATE_VIEW_RELATION), child(move(child_p)),\n       view_name(move(view_name_p)), replace(replace_p), temporary(temporary_p) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement CreateViewRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/cross_product_relation.cpp b/src/main/relation/cross_product_relation.cpp\nindex 9262f07a13a6..9eb048db1cce 100644\n--- a/src/main/relation/cross_product_relation.cpp\n+++ b/src/main/relation/cross_product_relation.cpp\n@@ -8,10 +8,10 @@ namespace duckdb {\n \n CrossProductRelation::CrossProductRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p)\n     : Relation(left_p->context, RelationType::CROSS_PRODUCT_RELATION), left(move(left_p)), right(move(right_p)) {\n-\tif (&left->context != &right->context) {\n+\tif (left->context.GetContext() != right->context.GetContext()) {\n \t\tthrow Exception(\"Cannot combine LEFT and RIGHT relations of different connections!\");\n \t}\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> CrossProductRelation::GetQueryNode() {\ndiff --git a/src/main/relation/delete_relation.cpp b/src/main/relation/delete_relation.cpp\nindex 55616a1e6ee0..98ab1bfb3411 100644\n--- a/src/main/relation/delete_relation.cpp\n+++ b/src/main/relation/delete_relation.cpp\n@@ -6,11 +6,11 @@\n \n namespace duckdb {\n \n-DeleteRelation::DeleteRelation(ClientContext &context, unique_ptr<ParsedExpression> condition_p, string schema_name_p,\n-                               string table_name_p)\n+DeleteRelation::DeleteRelation(ClientContextWrapper &context, unique_ptr<ParsedExpression> condition_p,\n+                               string schema_name_p, string table_name_p)\n     : Relation(context, RelationType::DELETE_RELATION), condition(move(condition_p)), schema_name(move(schema_name_p)),\n       table_name(move(table_name_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement DeleteRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/distinct_relation.cpp b/src/main/relation/distinct_relation.cpp\nindex ce5655365b94..24970e4786f7 100644\n--- a/src/main/relation/distinct_relation.cpp\n+++ b/src/main/relation/distinct_relation.cpp\n@@ -7,7 +7,7 @@ namespace duckdb {\n DistinctRelation::DistinctRelation(shared_ptr<Relation> child_p)\n     : Relation(child_p->context, RelationType::DISTINCT_RELATION), child(move(child_p)) {\n \tvector<ColumnDefinition> dummy_columns;\n-\tcontext.TryBindRelation(*this, dummy_columns);\n+\tcontext.GetContext()->TryBindRelation(*this, dummy_columns);\n }\n \n unique_ptr<QueryNode> DistinctRelation::GetQueryNode() {\ndiff --git a/src/main/relation/explain_relation.cpp b/src/main/relation/explain_relation.cpp\nindex 137dbeaf73ac..90365d7da314 100644\n--- a/src/main/relation/explain_relation.cpp\n+++ b/src/main/relation/explain_relation.cpp\n@@ -9,7 +9,7 @@ namespace duckdb {\n \n ExplainRelation::ExplainRelation(shared_ptr<Relation> child_p)\n     : Relation(child_p->context, RelationType::EXPLAIN_RELATION), child(move(child_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement ExplainRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/filter_relation.cpp b/src/main/relation/filter_relation.cpp\nindex 5beb296709c0..f1c757b5edda 100644\n--- a/src/main/relation/filter_relation.cpp\n+++ b/src/main/relation/filter_relation.cpp\n@@ -10,7 +10,7 @@ namespace duckdb {\n FilterRelation::FilterRelation(shared_ptr<Relation> child_p, unique_ptr<ParsedExpression> condition_p)\n     : Relation(child_p->context, RelationType::FILTER_RELATION), condition(move(condition_p)), child(move(child_p)) {\n \tvector<ColumnDefinition> dummy_columns;\n-\tcontext.TryBindRelation(*this, dummy_columns);\n+\tcontext.GetContext()->TryBindRelation(*this, dummy_columns);\n }\n \n unique_ptr<QueryNode> FilterRelation::GetQueryNode() {\ndiff --git a/src/main/relation/insert_relation.cpp b/src/main/relation/insert_relation.cpp\nindex a96efef3c036..78d876ea50e1 100644\n--- a/src/main/relation/insert_relation.cpp\n+++ b/src/main/relation/insert_relation.cpp\n@@ -10,7 +10,7 @@ namespace duckdb {\n InsertRelation::InsertRelation(shared_ptr<Relation> child_p, string schema_name, string table_name)\n     : Relation(child_p->context, RelationType::INSERT_RELATION), child(move(child_p)), schema_name(move(schema_name)),\n       table_name(move(table_name)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement InsertRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/join_relation.cpp b/src/main/relation/join_relation.cpp\nindex 4d50fa72559a..abc59e8e3f95 100644\n--- a/src/main/relation/join_relation.cpp\n+++ b/src/main/relation/join_relation.cpp\n@@ -10,20 +10,20 @@ JoinRelation::JoinRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> rig\n                            unique_ptr<ParsedExpression> condition_p, JoinType type)\n     : Relation(left_p->context, RelationType::JOIN_RELATION), left(move(left_p)), right(move(right_p)),\n       condition(move(condition_p)), join_type(type) {\n-\tif (&left->context != &right->context) {\n+\tif (left->context.GetContext() != right->context.GetContext()) {\n \t\tthrow Exception(\"Cannot combine LEFT and RIGHT relations of different connections!\");\n \t}\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n JoinRelation::JoinRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p, vector<string> using_columns_p,\n                            JoinType type)\n     : Relation(left_p->context, RelationType::JOIN_RELATION), left(move(left_p)), right(move(right_p)),\n       using_columns(move(using_columns_p)), join_type(type) {\n-\tif (&left->context != &right->context) {\n+\tif (left->context.GetContext() != right->context.GetContext()) {\n \t\tthrow Exception(\"Cannot combine LEFT and RIGHT relations of different connections!\");\n \t}\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> JoinRelation::GetQueryNode() {\ndiff --git a/src/main/relation/order_relation.cpp b/src/main/relation/order_relation.cpp\nindex 884b4ed98e87..19c8697cb84b 100644\n--- a/src/main/relation/order_relation.cpp\n+++ b/src/main/relation/order_relation.cpp\n@@ -8,7 +8,7 @@ OrderRelation::OrderRelation(shared_ptr<Relation> child_p, vector<OrderByNode> o\n     : Relation(child_p->context, RelationType::ORDER_RELATION), orders(move(orders)), child(move(child_p)) {\n \t// bind the expressions\n \tvector<ColumnDefinition> dummy_columns;\n-\tcontext.TryBindRelation(*this, dummy_columns);\n+\tcontext.GetContext()->TryBindRelation(*this, dummy_columns);\n }\n \n unique_ptr<QueryNode> OrderRelation::GetQueryNode() {\ndiff --git a/src/main/relation/projection_relation.cpp b/src/main/relation/projection_relation.cpp\nindex ce4a8bbc3b64..eca2fc308f1e 100644\n--- a/src/main/relation/projection_relation.cpp\n+++ b/src/main/relation/projection_relation.cpp\n@@ -18,7 +18,7 @@ ProjectionRelation::ProjectionRelation(shared_ptr<Relation> child_p,\n \t\t}\n \t}\n \t// bind the expressions\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> ProjectionRelation::GetQueryNode() {\ndiff --git a/src/main/relation/query_relation.cpp b/src/main/relation/query_relation.cpp\nindex b7065cac3d98..b3b94257c830 100644\n--- a/src/main/relation/query_relation.cpp\n+++ b/src/main/relation/query_relation.cpp\n@@ -6,9 +6,10 @@\n \n namespace duckdb {\n \n-QueryRelation::QueryRelation(ClientContext &context, unique_ptr<SelectStatement> select_stmt_p, string alias_p)\n+QueryRelation::QueryRelation(const std::shared_ptr<ClientContext> &context, unique_ptr<SelectStatement> select_stmt_p,\n+                             string alias_p)\n     : Relation(context, RelationType::QUERY_RELATION), select_stmt(move(select_stmt_p)), alias(move(alias_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n \n QueryRelation::~QueryRelation() {\ndiff --git a/src/main/relation/read_csv_relation.cpp b/src/main/relation/read_csv_relation.cpp\nindex 6cbd9a85a0ae..7c2fc2b0c585 100644\n--- a/src/main/relation/read_csv_relation.cpp\n+++ b/src/main/relation/read_csv_relation.cpp\n@@ -11,8 +11,8 @@\n \n namespace duckdb {\n \n-ReadCSVRelation::ReadCSVRelation(ClientContext &context, string csv_file_p, vector<ColumnDefinition> columns_p,\n-                                 bool auto_detect, string alias_p)\n+ReadCSVRelation::ReadCSVRelation(const std::shared_ptr<ClientContext> &context, string csv_file_p,\n+                                 vector<ColumnDefinition> columns_p, bool auto_detect, string alias_p)\n     : Relation(context, RelationType::READ_CSV_RELATION), csv_file(move(csv_file_p)), auto_detect(auto_detect),\n       alias(move(alias_p)), columns(move(columns_p)) {\n \tif (alias.empty()) {\ndiff --git a/src/main/relation/setop_relation.cpp b/src/main/relation/setop_relation.cpp\nindex a49ebf77c605..1cc228fc2820 100644\n--- a/src/main/relation/setop_relation.cpp\n+++ b/src/main/relation/setop_relation.cpp\n@@ -7,11 +7,11 @@ namespace duckdb {\n SetOpRelation::SetOpRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p, SetOperationType setop_type_p)\n     : Relation(left_p->context, RelationType::SET_OPERATION_RELATION), left(move(left_p)), right(move(right_p)),\n       setop_type(setop_type_p) {\n-\tif (&left->context != &right->context) {\n+\tif (left->context.GetContext() != right->context.GetContext()) {\n \t\tthrow Exception(\"Cannot combine LEFT and RIGHT relations of different connections!\");\n \t}\n \tvector<ColumnDefinition> dummy_columns;\n-\tcontext.TryBindRelation(*this, dummy_columns);\n+\tcontext.GetContext()->TryBindRelation(*this, dummy_columns);\n }\n \n unique_ptr<QueryNode> SetOpRelation::GetQueryNode() {\ndiff --git a/src/main/relation/subquery_relation.cpp b/src/main/relation/subquery_relation.cpp\nindex f5087149883a..7fc0576b199b 100644\n--- a/src/main/relation/subquery_relation.cpp\n+++ b/src/main/relation/subquery_relation.cpp\n@@ -7,7 +7,7 @@ namespace duckdb {\n SubqueryRelation::SubqueryRelation(shared_ptr<Relation> child_p, string alias_p)\n     : Relation(child_p->context, RelationType::SUBQUERY_RELATION), child(move(child_p)), alias(move(alias_p)) {\n \tvector<ColumnDefinition> dummy_columns;\n-\tcontext.TryBindRelation(*this, dummy_columns);\n+\tcontext.GetContext()->TryBindRelation(*this, dummy_columns);\n }\n \n unique_ptr<QueryNode> SubqueryRelation::GetQueryNode() {\ndiff --git a/src/main/relation/table_function_relation.cpp b/src/main/relation/table_function_relation.cpp\nindex 288ef1b74ac4..17b57a8cfd85 100644\n--- a/src/main/relation/table_function_relation.cpp\n+++ b/src/main/relation/table_function_relation.cpp\n@@ -12,19 +12,20 @@\n \n namespace duckdb {\n \n-TableFunctionRelation::TableFunctionRelation(ClientContext &context, string name_p, vector<Value> parameters_p,\n-                                             named_parameter_map_t named_parameters,\n+TableFunctionRelation::TableFunctionRelation(const std::shared_ptr<ClientContext> &context, string name_p,\n+                                             vector<Value> parameters_p, named_parameter_map_t named_parameters,\n                                              shared_ptr<Relation> input_relation_p)\n     : Relation(context, RelationType::TABLE_FUNCTION_RELATION), name(move(name_p)), parameters(move(parameters_p)),\n       named_parameters(move(named_parameters)), input_relation(move(input_relation_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n-TableFunctionRelation::TableFunctionRelation(ClientContext &context, string name_p, vector<Value> parameters_p,\n+TableFunctionRelation::TableFunctionRelation(const std::shared_ptr<ClientContext> &context, string name_p,\n+                                             vector<Value> parameters_p,\n \n                                              shared_ptr<Relation> input_relation_p)\n     : Relation(context, RelationType::TABLE_FUNCTION_RELATION), name(move(name_p)), parameters(move(parameters_p)),\n       input_relation(move(input_relation_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> TableFunctionRelation::GetQueryNode() {\ndiff --git a/src/main/relation/table_relation.cpp b/src/main/relation/table_relation.cpp\nindex 8a4df5743297..d17e319c1ee8 100644\n--- a/src/main/relation/table_relation.cpp\n+++ b/src/main/relation/table_relation.cpp\n@@ -9,7 +9,7 @@\n \n namespace duckdb {\n \n-TableRelation::TableRelation(ClientContext &context, unique_ptr<TableDescription> description)\n+TableRelation::TableRelation(const std::shared_ptr<ClientContext> &context, unique_ptr<TableDescription> description)\n     : Relation(context, RelationType::TABLE_RELATION), description(move(description)) {\n }\n \n@@ -54,15 +54,15 @@ static unique_ptr<ParsedExpression> ParseCondition(ClientContext &context, const\n void TableRelation::Update(const string &update_list, const string &condition) {\n \tvector<string> update_columns;\n \tvector<unique_ptr<ParsedExpression>> expressions;\n-\tauto cond = ParseCondition(context, condition);\n-\tParser::ParseUpdateList(update_list, update_columns, expressions, context.GetParserOptions());\n+\tauto cond = ParseCondition(*context.GetContext(), condition);\n+\tParser::ParseUpdateList(update_list, update_columns, expressions, context.GetContext()->GetParserOptions());\n \tauto update = make_shared<UpdateRelation>(context, move(cond), description->schema, description->table,\n \t                                          move(update_columns), move(expressions));\n \tupdate->Execute();\n }\n \n void TableRelation::Delete(const string &condition) {\n-\tauto cond = ParseCondition(context, condition);\n+\tauto cond = ParseCondition(*context.GetContext(), condition);\n \tauto del = make_shared<DeleteRelation>(context, move(cond), description->schema, description->table);\n \tdel->Execute();\n }\ndiff --git a/src/main/relation/update_relation.cpp b/src/main/relation/update_relation.cpp\nindex cf4abf29caf8..c1ab90154801 100644\n--- a/src/main/relation/update_relation.cpp\n+++ b/src/main/relation/update_relation.cpp\n@@ -6,13 +6,13 @@\n \n namespace duckdb {\n \n-UpdateRelation::UpdateRelation(ClientContext &context, unique_ptr<ParsedExpression> condition_p, string schema_name_p,\n-                               string table_name_p, vector<string> update_columns_p,\n+UpdateRelation::UpdateRelation(ClientContextWrapper &context, unique_ptr<ParsedExpression> condition_p,\n+                               string schema_name_p, string table_name_p, vector<string> update_columns_p,\n                                vector<unique_ptr<ParsedExpression>> expressions_p)\n     : Relation(context, RelationType::UPDATE_RELATION), condition(move(condition_p)), schema_name(move(schema_name_p)),\n       table_name(move(table_name_p)), update_columns(move(update_columns_p)), expressions(move(expressions_p)) {\n \tD_ASSERT(update_columns.size() == expressions.size());\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement UpdateRelation::Bind(Binder &binder) {\ndiff --git a/src/main/relation/value_relation.cpp b/src/main/relation/value_relation.cpp\nindex 138f9bf4438c..71f82055211e 100644\n--- a/src/main/relation/value_relation.cpp\n+++ b/src/main/relation/value_relation.cpp\n@@ -8,8 +8,8 @@\n \n namespace duckdb {\n \n-ValueRelation::ValueRelation(ClientContext &context, const vector<vector<Value>> &values, vector<string> names_p,\n-                             string alias_p)\n+ValueRelation::ValueRelation(const std::shared_ptr<ClientContext> &context, const vector<vector<Value>> &values,\n+                             vector<string> names_p, string alias_p)\n     : Relation(context, RelationType::VALUE_LIST_RELATION), names(move(names_p)), alias(move(alias_p)) {\n \t// create constant expressions for the values\n \tfor (idx_t row_idx = 0; row_idx < values.size(); row_idx++) {\n@@ -20,13 +20,14 @@ ValueRelation::ValueRelation(ClientContext &context, const vector<vector<Value>>\n \t\t}\n \t\tthis->expressions.push_back(move(expressions));\n \t}\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n \n-ValueRelation::ValueRelation(ClientContext &context, const string &values_list, vector<string> names_p, string alias_p)\n+ValueRelation::ValueRelation(const std::shared_ptr<ClientContext> &context, const string &values_list,\n+                             vector<string> names_p, string alias_p)\n     : Relation(context, RelationType::VALUE_LIST_RELATION), names(move(names_p)), alias(move(alias_p)) {\n-\tthis->expressions = Parser::ParseValuesList(values_list, context.GetParserOptions());\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tthis->expressions = Parser::ParseValuesList(values_list, context->GetParserOptions());\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> ValueRelation::GetQueryNode() {\ndiff --git a/src/main/relation/view_relation.cpp b/src/main/relation/view_relation.cpp\nindex d25d5e855023..ad4b3d3aa0f5 100644\n--- a/src/main/relation/view_relation.cpp\n+++ b/src/main/relation/view_relation.cpp\n@@ -7,9 +7,9 @@\n \n namespace duckdb {\n \n-ViewRelation::ViewRelation(ClientContext &context, string schema_name_p, string view_name_p)\n+ViewRelation::ViewRelation(const std::shared_ptr<ClientContext> &context, string schema_name_p, string view_name_p)\n     : Relation(context, RelationType::VIEW_RELATION), schema_name(move(schema_name_p)), view_name(move(view_name_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext->TryBindRelation(*this, this->columns);\n }\n \n unique_ptr<QueryNode> ViewRelation::GetQueryNode() {\ndiff --git a/src/main/relation/write_csv_relation.cpp b/src/main/relation/write_csv_relation.cpp\nindex c7e56186b956..897c3be4dc0e 100644\n--- a/src/main/relation/write_csv_relation.cpp\n+++ b/src/main/relation/write_csv_relation.cpp\n@@ -8,7 +8,7 @@ namespace duckdb {\n \n WriteCSVRelation::WriteCSVRelation(shared_ptr<Relation> child_p, string csv_file_p)\n     : Relation(child_p->context, RelationType::WRITE_CSV_RELATION), child(move(child_p)), csv_file(move(csv_file_p)) {\n-\tcontext.TryBindRelation(*this, this->columns);\n+\tcontext.GetContext()->TryBindRelation(*this, this->columns);\n }\n \n BoundStatement WriteCSVRelation::Bind(Binder &binder) {\ndiff --git a/src/parser/transform/statement/transform_show.cpp b/src/parser/transform/statement/transform_show.cpp\nindex bb171d96e229..868dd3499d96 100644\n--- a/src/parser/transform/statement/transform_show.cpp\n+++ b/src/parser/transform/statement/transform_show.cpp\n@@ -29,9 +29,12 @@ unique_ptr<SQLStatement> Transformer::TransformShow(duckdb_libpgquery::PGNode *n\n \tauto result = make_unique<PragmaStatement>();\n \tauto &info = *result->info;\n \n-\tif (string(stmt->name) == \"tables\") {\n+\tstring name = stmt->name;\n+\tif (name == \"tables\") {\n \t\t// show all tables\n \t\tinfo.name = \"show_tables\";\n+\t} else if (name == \"__show_tables_expanded\") {\n+\t\tinfo.name = \"show_tables_expanded\";\n \t} else {\n \t\t// show one specific table\n \t\tinfo.name = \"show\";\ndiff --git a/src/planner/binder/expression/bind_unnest_expression.cpp b/src/planner/binder/expression/bind_unnest_expression.cpp\nindex bb7a24fd6313..c88f94094add 100644\n--- a/src/planner/binder/expression/bind_unnest_expression.cpp\n+++ b/src/planner/binder/expression/bind_unnest_expression.cpp\n@@ -29,13 +29,19 @@ BindResult SelectBinder::BindUnnest(FunctionExpression &function, idx_t depth) {\n \t}\n \tauto &child = (BoundExpression &)*function.children[0];\n \tauto &child_type = child.expr->return_type;\n-\tif (child_type.id() != LogicalTypeId::LIST) {\n-\t\treturn BindResult(binder.FormatError(function, \"Unnest() can only be applied to lists\"));\n+\n+\tif (child_type.id() != LogicalTypeId::LIST && child_type.id() != LogicalTypeId::SQLNULL) {\n+\t\treturn BindResult(binder.FormatError(function, \"Unnest() can only be applied to lists and NULL\"));\n \t}\n+\n \tif (depth > 0) {\n \t\tthrow BinderException(binder.FormatError(function, \"Unnest() for correlated expressions is not supported yet\"));\n \t}\n-\tauto &return_type = ListType::GetChildType(child_type);\n+\n+\tauto return_type = LogicalType(LogicalTypeId::SQLNULL);\n+\tif (child_type.id() == LogicalTypeId::LIST) {\n+\t\treturn_type = ListType::GetChildType(child_type);\n+\t}\n \n \tauto result = make_unique<BoundUnnestExpression>(return_type);\n \tresult->child = move(child.expr);\n@@ -49,6 +55,7 @@ BindResult SelectBinder::BindUnnest(FunctionExpression &function, idx_t depth) {\n \tauto colref = make_unique<BoundColumnRefExpression>(\n \t    function.alias.empty() ? node.unnests[unnest_index]->ToString() : function.alias, return_type,\n \t    ColumnBinding(node.unnest_index, unnest_index), depth);\n+\n \treturn BindResult(move(colref));\n }\n \ndiff --git a/third_party/libpg_query/grammar/statements/variable_show.y b/third_party/libpg_query/grammar/statements/variable_show.y\nindex 783a4ce5a894..a9899bcb69db 100644\n--- a/third_party/libpg_query/grammar/statements/variable_show.y\n+++ b/third_party/libpg_query/grammar/statements/variable_show.y\n@@ -45,11 +45,17 @@ VariableShowStmt:\n \t\t| show_or_describe ALL\n \t\t\t{\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n-\t\t\t\tn->name = (char*) \"all\";\n+\t\t\t\tn->name = (char*) \"__show_tables_expanded\";\n+\t\t\t\tn->is_summary = 0;\n+\t\t\t\t$$ = (PGNode *) n;\n+\t\t\t}\n+\t\t| show_or_describe\n+\t\t\t{\n+\t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n+\t\t\t\tn->name = (char*) \"__show_tables_expanded\";\n \t\t\t\tn->is_summary = 0;\n \t\t\t\t$$ = (PGNode *) n;\n \t\t\t}\n-\n \t\t;\n \n show_or_describe: SHOW | DESCRIBE\ndiff --git a/third_party/libpg_query/include/pg_functions.hpp b/third_party/libpg_query/include/pg_functions.hpp\nindex 71b6cb5d7ac0..32b97359a046 100644\n--- a/third_party/libpg_query/include/pg_functions.hpp\n+++ b/third_party/libpg_query/include/pg_functions.hpp\n@@ -1,6 +1,7 @@\n #pragma once\n \n #include <stdlib.h>\n+#include <string>\n \n #include \"pg_definitions.hpp\"\n \n@@ -13,7 +14,7 @@ typedef struct parse_result_str parse_result;\n struct parse_result_str {\n \tbool success;\n \tPGList *parse_tree;\n-\tchar *error_message;\n+\tstd::string error_message;\n \tint error_location;\n };\n \ndiff --git a/third_party/libpg_query/pg_functions.cpp b/third_party/libpg_query/pg_functions.cpp\nindex 7d5392da86fb..15d263acc2ac 100644\n--- a/third_party/libpg_query/pg_functions.cpp\n+++ b/third_party/libpg_query/pg_functions.cpp\n@@ -36,6 +36,7 @@ static void allocate_new(parser_state *state, size_t n) {\n \tif (state->malloc_ptr_idx >= state->malloc_ptr_size) {\n \t\tsize_t new_size = state->malloc_ptr_size * 2;\n \t\tauto new_malloc_ptrs = (char **) malloc(sizeof(char *) * new_size);\n+\t\tmemset(new_malloc_ptrs, 0, sizeof(char*) * new_size);\n \t\tmemcpy(new_malloc_ptrs, state->malloc_ptrs, state->malloc_ptr_size * sizeof(char*));\n \t\tfree(state->malloc_ptrs);\n \t\tstate->malloc_ptr_size = new_size;\n@@ -77,6 +78,7 @@ void pg_parser_init() {\n \n \tpg_parser_state.malloc_ptr_size = 4;\n \tpg_parser_state.malloc_ptrs = (char **) malloc(sizeof(char *) * pg_parser_state.malloc_ptr_size);\n+\tmemset(pg_parser_state.malloc_ptrs, 0, sizeof(char*) * pg_parser_state.malloc_ptr_size);\n \tpg_parser_state.malloc_ptr_idx = 0;\n \tallocate_new(&pg_parser_state, 1);\n }\n@@ -88,14 +90,7 @@ void pg_parser_parse(const char *query, parse_result *res) {\n \t\tres->success = pg_parser_state.pg_err_code == PGUNDEFINED;\n \t} catch (std::exception &ex) {\n \t\tres->success = false;\n-\t\t// copy the error message of the exception\n-\t\tauto error_message = ex.what();\n-\t\tuint32_t pos = 0;\n-\t\twhile(pos < 1023 && error_message[pos]) {\n-\t\t\tpg_parser_state.pg_err_msg[pos] = error_message[pos];\n-\t\t\tpos++;\n-\t\t}\n-\t\tpg_parser_state.pg_err_msg[pos] = '\\0';\n+\t\tres->error_message = ex.what();\n \t}\n \tres->error_message = pg_parser_state.pg_err_msg;\n \tres->error_location = pg_parser_state.pg_err_pos;\ndiff --git a/third_party/libpg_query/src_backend_parser_gram.cpp b/third_party/libpg_query/src_backend_parser_gram.cpp\nindex 53b21d59dde2..9a420592d165 100644\n--- a/third_party/libpg_query/src_backend_parser_gram.cpp\n+++ b/third_party/libpg_query/src_backend_parser_gram.cpp\n@@ -1523,7 +1523,7 @@ union yyalloc\n /* YYNNTS -- Number of nonterminals.  */\n #define YYNNTS  395\n /* YYNRULES -- Number of rules.  */\n-#define YYNRULES  1833\n+#define YYNRULES  1834\n /* YYNRULES -- Number of states.  */\n #define YYNSTATES  3022\n \n@@ -1743,8 +1743,8 @@ static const yytype_uint16 yyprhs[] =\n     4076,  4078,  4079,  4081,  4085,  4087,  4088,  4096,  4098,  4101,\n     4105,  4108,  4109,  4112,  4113,  4116,  4121,  4124,  4126,  4128,\n     4130,  4133,  4137,  4140,  4143,  4146,  4149,  4153,  4158,  4161,\n-    4163,  4165,  4167,  4171,  4174,  4184,  4196,  4209,  4224,  4228,\n-    4233,  4238,  4239,  4247,  4258,  4268,  4271,  4275,  4276,  4281,\n+    4163,  4165,  4167,  4169,  4173,  4176,  4186,  4198,  4211,  4226,\n+    4230,  4235,  4240,  4241,  4249,  4260,  4270,  4273,  4277,  4278,\n     4283,  4285,  4287,  4289,  4291,  4293,  4295,  4297,  4299,  4301,\n     4303,  4305,  4307,  4309,  4311,  4313,  4315,  4317,  4319,  4321,\n     4323,  4325,  4327,  4329,  4331,  4333,  4335,  4337,  4339,  4341,\n@@ -1801,7 +1801,7 @@ static const yytype_uint16 yyprhs[] =\n     5343,  5345,  5347,  5349,  5351,  5353,  5355,  5357,  5359,  5361,\n     5363,  5365,  5367,  5369,  5371,  5373,  5375,  5377,  5379,  5381,\n     5383,  5385,  5387,  5389,  5391,  5393,  5395,  5397,  5399,  5401,\n-    5403,  5405,  5407,  5409\n+    5403,  5405,  5407,  5409,  5411\n };\n \n /* YYRHS -- A `-1'-separated list of the rules' RHS.  */\n@@ -2223,132 +2223,132 @@ static const yytype_int16 yyrhs[] =\n      411,   477,    -1,   415,   219,   230,    -1,   884,   633,    -1,\n      398,   633,    -1,   398,   885,    -1,   884,   885,    -1,   884,\n      411,   477,    -1,   884,   415,   219,   230,    -1,   884,    27,\n-      -1,   377,    -1,   125,    -1,   823,    -1,   885,   496,   823,\n-      -1,    56,   747,    -1,    93,   603,   449,   814,   592,   845,\n-      36,   633,   888,    -1,    93,   289,   341,   603,   449,   814,\n-     592,   845,    36,   633,   888,    -1,    93,   603,   331,   449,\n-     814,   494,   596,   495,   845,    36,   633,   888,    -1,    93,\n-     289,   341,   603,   331,   449,   814,   494,   596,   495,   845,\n-      36,   633,   888,    -1,   456,    67,   287,    -1,   456,    59,\n-      67,   287,    -1,   456,   235,    67,   287,    -1,    -1,    93,\n-     603,   402,   891,    36,   633,   890,    -1,    93,   603,   402,\n-     188,   269,   150,   891,    36,   633,   890,    -1,    93,   289,\n-     341,   603,   402,   891,    36,   633,   890,    -1,   456,   107,\n-      -1,   456,   267,   107,    -1,    -1,   814,   592,   578,   570,\n-      -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,    23,\n-      -1,    24,    -1,    25,    -1,    26,    -1,    28,    -1,    29,\n-      -1,    30,    -1,    38,    -1,    39,    -1,    41,    -1,    42,\n-      -1,    43,    -1,    45,    -1,    46,    -1,    47,    -1,    54,\n-      -1,    55,    -1,    56,    -1,    57,    -1,    58,    -1,    59,\n-      -1,    62,    -1,    63,    -1,    66,    -1,    68,    -1,    69,\n-      -1,    70,    -1,    71,    -1,    76,    -1,    77,    -1,    78,\n-      -1,    79,    -1,    80,    -1,    81,    -1,    83,    -1,    84,\n-      -1,    85,    -1,    87,    -1,    88,    -1,    89,    -1,    90,\n-      -1,    91,    -1,    92,    -1,    95,    -1,    96,    -1,    97,\n-      -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,   109,\n-      -1,   110,    -1,   111,    -1,   114,    -1,   116,    -1,   118,\n-      -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,   123,\n-      -1,   125,    -1,   126,    -1,   127,    -1,   128,    -1,   129,\n-      -1,   132,    -1,   133,    -1,   134,    -1,   135,    -1,   136,\n-      -1,   138,    -1,   139,    -1,   140,    -1,   142,    -1,   143,\n-      -1,   144,    -1,   146,    -1,   147,    -1,   148,    -1,   149,\n-      -1,   151,    -1,   152,    -1,   153,    -1,   154,    -1,   155,\n-      -1,   158,    -1,   160,    -1,   161,    -1,   163,    -1,   165,\n-      -1,   167,    -1,   171,    -1,   172,    -1,   173,    -1,   175,\n-      -1,   177,    -1,   181,    -1,   183,    -1,   184,    -1,   185,\n-      -1,   186,    -1,   187,    -1,   188,    -1,   189,    -1,   191,\n-      -1,   192,    -1,   193,    -1,   194,    -1,   196,    -1,   197,\n-      -1,   198,    -1,   199,    -1,   200,    -1,   201,    -1,   203,\n-      -1,   206,    -1,   207,    -1,   208,    -1,   209,    -1,   210,\n-      -1,   216,    -1,   219,    -1,   221,    -1,   222,    -1,   223,\n-      -1,   224,    -1,   225,    -1,   228,    -1,   230,    -1,   233,\n-      -1,   234,    -1,   235,    -1,   238,    -1,   239,    -1,   240,\n-      -1,   241,    -1,   242,    -1,   244,    -1,   245,    -1,   246,\n-      -1,   247,    -1,   248,    -1,   249,    -1,   250,    -1,   251,\n-      -1,   252,    -1,   253,    -1,   254,    -1,   255,    -1,   256,\n-      -1,   257,    -1,   258,    -1,   259,    -1,   260,    -1,   261,\n-      -1,   265,    -1,   266,    -1,   267,    -1,   270,    -1,   271,\n-      -1,   273,    -1,   276,    -1,   278,    -1,   279,    -1,   280,\n-      -1,   282,    -1,   283,    -1,   286,    -1,   287,    -1,   288,\n-      -1,   291,    -1,   294,    -1,   297,    -1,   298,    -1,   299,\n-      -1,   300,    -1,   301,    -1,   302,    -1,   303,    -1,   304,\n-      -1,   305,    -1,   306,    -1,   308,    -1,   309,    -1,   311,\n-      -1,   312,    -1,   314,    -1,   315,    -1,   316,    -1,   318,\n-      -1,   319,    -1,   320,    -1,   321,    -1,   322,    -1,   323,\n-      -1,   325,    -1,   326,    -1,   327,    -1,   329,    -1,   330,\n-      -1,   331,    -1,   332,    -1,   334,    -1,   335,    -1,   336,\n-      -1,   337,    -1,   338,    -1,   339,    -1,   340,    -1,   341,\n-      -1,   342,    -1,   343,    -1,   344,    -1,   345,    -1,   346,\n-      -1,   348,    -1,   349,    -1,   351,    -1,   352,    -1,   353,\n-      -1,   355,    -1,   356,    -1,   357,    -1,   358,    -1,   359,\n-      -1,   360,    -1,   361,    -1,   362,    -1,   363,    -1,   364,\n-      -1,   365,    -1,   367,    -1,   368,    -1,   369,    -1,   370,\n-      -1,   371,    -1,   373,    -1,   375,    -1,   376,    -1,   377,\n-      -1,   379,    -1,   380,    -1,   382,    -1,   384,    -1,   385,\n-      -1,   386,    -1,   387,    -1,   388,    -1,   389,    -1,   390,\n-      -1,   391,    -1,   392,    -1,   393,    -1,   394,    -1,   396,\n-      -1,   398,    -1,   400,    -1,   401,    -1,   403,    -1,   405,\n-      -1,   406,    -1,   407,    -1,   408,    -1,   409,    -1,   415,\n-      -1,   416,    -1,   418,    -1,   421,    -1,   422,    -1,   424,\n-      -1,   425,    -1,   426,    -1,   427,    -1,   428,    -1,   431,\n-      -1,   432,    -1,   433,    -1,   434,    -1,   435,    -1,   438,\n-      -1,   439,    -1,   440,    -1,   441,    -1,   442,    -1,   446,\n-      -1,   448,    -1,   449,    -1,   450,    -1,   451,    -1,   454,\n-      -1,   457,    -1,   458,    -1,   459,    -1,   460,    -1,   461,\n-      -1,   462,    -1,   474,    -1,   475,    -1,   476,    -1,   477,\n-      -1,    48,    -1,    49,    -1,    51,    -1,    52,    -1,    64,\n-      -1,    65,    -1,    72,    -1,   112,    -1,   113,    -1,   150,\n-      -1,   156,    -1,   162,    -1,   179,    -1,   180,    -1,   205,\n-      -1,   211,    -1,   212,    -1,   214,    -1,   243,    -1,   262,\n-      -1,   264,    -1,   268,    -1,   275,    -1,   277,    -1,   292,\n-      -1,   296,    -1,   310,    -1,   313,    -1,   328,    -1,   354,\n-      -1,   374,    -1,   381,    -1,   395,    -1,   397,    -1,   411,\n-      -1,   412,    -1,   417,    -1,   419,    -1,   423,    -1,   443,\n-      -1,   444,    -1,   463,    -1,   464,    -1,   465,    -1,   466,\n-      -1,   467,    -1,   468,    -1,   469,    -1,   470,    -1,   471,\n-      -1,   472,    -1,   473,    -1,    44,    -1,    50,    -1,    74,\n-      -1,    82,    -1,    94,    -1,   101,    -1,   168,    -1,   170,\n-      -1,   174,    -1,   190,    -1,   204,    -1,   217,    -1,   218,\n-      -1,   220,    -1,   229,    -1,   231,    -1,   243,    -1,   263,\n-      -1,   272,    -1,   293,    -1,   295,    -1,   350,    -1,   378,\n-      -1,   395,    -1,   404,    -1,   447,    -1,    44,    -1,    50,\n+      -1,   884,    -1,   377,    -1,   125,    -1,   823,    -1,   885,\n+     496,   823,    -1,    56,   747,    -1,    93,   603,   449,   814,\n+     592,   845,    36,   633,   888,    -1,    93,   289,   341,   603,\n+     449,   814,   592,   845,    36,   633,   888,    -1,    93,   603,\n+     331,   449,   814,   494,   596,   495,   845,    36,   633,   888,\n+      -1,    93,   289,   341,   603,   331,   449,   814,   494,   596,\n+     495,   845,    36,   633,   888,    -1,   456,    67,   287,    -1,\n+     456,    59,    67,   287,    -1,   456,   235,    67,   287,    -1,\n+      -1,    93,   603,   402,   891,    36,   633,   890,    -1,    93,\n+     603,   402,   188,   269,   150,   891,    36,   633,   890,    -1,\n+      93,   289,   341,   603,   402,   891,    36,   633,   890,    -1,\n+     456,   107,    -1,   456,   267,   107,    -1,    -1,   814,   592,\n+     578,   570,    -1,    19,    -1,    20,    -1,    21,    -1,    22,\n+      -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,    28,\n+      -1,    29,    -1,    30,    -1,    38,    -1,    39,    -1,    41,\n+      -1,    42,    -1,    43,    -1,    45,    -1,    46,    -1,    47,\n+      -1,    54,    -1,    55,    -1,    56,    -1,    57,    -1,    58,\n+      -1,    59,    -1,    62,    -1,    63,    -1,    66,    -1,    68,\n+      -1,    69,    -1,    70,    -1,    71,    -1,    76,    -1,    77,\n+      -1,    78,    -1,    79,    -1,    80,    -1,    81,    -1,    83,\n+      -1,    84,    -1,    85,    -1,    87,    -1,    88,    -1,    89,\n+      -1,    90,    -1,    91,    -1,    92,    -1,    95,    -1,    96,\n+      -1,    97,    -1,   105,    -1,   106,    -1,   107,    -1,   108,\n+      -1,   109,    -1,   110,    -1,   111,    -1,   114,    -1,   116,\n+      -1,   118,    -1,   119,    -1,   120,    -1,   121,    -1,   122,\n+      -1,   123,    -1,   125,    -1,   126,    -1,   127,    -1,   128,\n+      -1,   129,    -1,   132,    -1,   133,    -1,   134,    -1,   135,\n+      -1,   136,    -1,   138,    -1,   139,    -1,   140,    -1,   142,\n+      -1,   143,    -1,   144,    -1,   146,    -1,   147,    -1,   148,\n+      -1,   149,    -1,   151,    -1,   152,    -1,   153,    -1,   154,\n+      -1,   155,    -1,   158,    -1,   160,    -1,   161,    -1,   163,\n+      -1,   165,    -1,   167,    -1,   171,    -1,   172,    -1,   173,\n+      -1,   175,    -1,   177,    -1,   181,    -1,   183,    -1,   184,\n+      -1,   185,    -1,   186,    -1,   187,    -1,   188,    -1,   189,\n+      -1,   191,    -1,   192,    -1,   193,    -1,   194,    -1,   196,\n+      -1,   197,    -1,   198,    -1,   199,    -1,   200,    -1,   201,\n+      -1,   203,    -1,   206,    -1,   207,    -1,   208,    -1,   209,\n+      -1,   210,    -1,   216,    -1,   219,    -1,   221,    -1,   222,\n+      -1,   223,    -1,   224,    -1,   225,    -1,   228,    -1,   230,\n+      -1,   233,    -1,   234,    -1,   235,    -1,   238,    -1,   239,\n+      -1,   240,    -1,   241,    -1,   242,    -1,   244,    -1,   245,\n+      -1,   246,    -1,   247,    -1,   248,    -1,   249,    -1,   250,\n+      -1,   251,    -1,   252,    -1,   253,    -1,   254,    -1,   255,\n+      -1,   256,    -1,   257,    -1,   258,    -1,   259,    -1,   260,\n+      -1,   261,    -1,   265,    -1,   266,    -1,   267,    -1,   270,\n+      -1,   271,    -1,   273,    -1,   276,    -1,   278,    -1,   279,\n+      -1,   280,    -1,   282,    -1,   283,    -1,   286,    -1,   287,\n+      -1,   288,    -1,   291,    -1,   294,    -1,   297,    -1,   298,\n+      -1,   299,    -1,   300,    -1,   301,    -1,   302,    -1,   303,\n+      -1,   304,    -1,   305,    -1,   306,    -1,   308,    -1,   309,\n+      -1,   311,    -1,   312,    -1,   314,    -1,   315,    -1,   316,\n+      -1,   318,    -1,   319,    -1,   320,    -1,   321,    -1,   322,\n+      -1,   323,    -1,   325,    -1,   326,    -1,   327,    -1,   329,\n+      -1,   330,    -1,   331,    -1,   332,    -1,   334,    -1,   335,\n+      -1,   336,    -1,   337,    -1,   338,    -1,   339,    -1,   340,\n+      -1,   341,    -1,   342,    -1,   343,    -1,   344,    -1,   345,\n+      -1,   346,    -1,   348,    -1,   349,    -1,   351,    -1,   352,\n+      -1,   353,    -1,   355,    -1,   356,    -1,   357,    -1,   358,\n+      -1,   359,    -1,   360,    -1,   361,    -1,   362,    -1,   363,\n+      -1,   364,    -1,   365,    -1,   367,    -1,   368,    -1,   369,\n+      -1,   370,    -1,   371,    -1,   373,    -1,   375,    -1,   376,\n+      -1,   377,    -1,   379,    -1,   380,    -1,   382,    -1,   384,\n+      -1,   385,    -1,   386,    -1,   387,    -1,   388,    -1,   389,\n+      -1,   390,    -1,   391,    -1,   392,    -1,   393,    -1,   394,\n+      -1,   396,    -1,   398,    -1,   400,    -1,   401,    -1,   403,\n+      -1,   405,    -1,   406,    -1,   407,    -1,   408,    -1,   409,\n+      -1,   415,    -1,   416,    -1,   418,    -1,   421,    -1,   422,\n+      -1,   424,    -1,   425,    -1,   426,    -1,   427,    -1,   428,\n+      -1,   431,    -1,   432,    -1,   433,    -1,   434,    -1,   435,\n+      -1,   438,    -1,   439,    -1,   440,    -1,   441,    -1,   442,\n+      -1,   446,    -1,   448,    -1,   449,    -1,   450,    -1,   451,\n+      -1,   454,    -1,   457,    -1,   458,    -1,   459,    -1,   460,\n+      -1,   461,    -1,   462,    -1,   474,    -1,   475,    -1,   476,\n+      -1,   477,    -1,    48,    -1,    49,    -1,    51,    -1,    52,\n+      -1,    64,    -1,    65,    -1,    72,    -1,   112,    -1,   113,\n+      -1,   150,    -1,   156,    -1,   162,    -1,   179,    -1,   180,\n+      -1,   205,    -1,   211,    -1,   212,    -1,   214,    -1,   243,\n+      -1,   262,    -1,   264,    -1,   268,    -1,   275,    -1,   277,\n+      -1,   292,    -1,   296,    -1,   310,    -1,   313,    -1,   328,\n+      -1,   354,    -1,   374,    -1,   381,    -1,   395,    -1,   397,\n+      -1,   411,    -1,   412,    -1,   417,    -1,   419,    -1,   423,\n+      -1,   443,    -1,   444,    -1,   463,    -1,   464,    -1,   465,\n+      -1,   466,    -1,   467,    -1,   468,    -1,   469,    -1,   470,\n+      -1,   471,    -1,   472,    -1,   473,    -1,    44,    -1,    50,\n       -1,    74,    -1,    82,    -1,    94,    -1,   101,    -1,   168,\n       -1,   170,    -1,   174,    -1,   190,    -1,   204,    -1,   217,\n-      -1,   218,    -1,   220,    -1,   229,    -1,   231,    -1,   263,\n-      -1,   272,    -1,   293,    -1,   295,    -1,   350,    -1,   378,\n-      -1,   404,    -1,   423,    -1,   447,    -1,    48,    -1,    49,\n-      -1,    51,    -1,    52,    -1,    65,    -1,    64,    -1,    72,\n-      -1,   112,    -1,   113,    -1,   150,    -1,   156,    -1,   162,\n-      -1,   179,    -1,   180,    -1,   205,    -1,   212,    -1,   214,\n-      -1,   211,    -1,   243,    -1,   262,    -1,   264,    -1,   268,\n-      -1,   275,    -1,   277,    -1,   292,    -1,   296,    -1,   310,\n-      -1,   313,    -1,   328,    -1,   354,    -1,   374,    -1,   381,\n-      -1,   395,    -1,   397,    -1,   411,    -1,   412,    -1,   417,\n-      -1,   419,    -1,   423,    -1,   443,    -1,   444,    -1,   463,\n-      -1,   464,    -1,   465,    -1,   466,    -1,   467,    -1,   468,\n-      -1,   469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,\n-      -1,    44,    -1,    50,    -1,    74,    -1,    82,    -1,    94,\n-      -1,   101,    -1,   168,    -1,   170,    -1,   174,    -1,   190,\n-      -1,   204,    -1,   217,    -1,   218,    -1,   220,    -1,   229,\n-      -1,   231,    -1,   243,    -1,   263,    -1,   272,    -1,   293,\n-      -1,   295,    -1,   350,    -1,   378,    -1,   395,    -1,   404,\n-      -1,   423,    -1,   447,    -1,    27,    -1,    31,    -1,    32,\n-      -1,    33,    -1,    34,    -1,    35,    -1,    36,    -1,    37,\n-      -1,    40,    -1,    53,    -1,    60,    -1,    61,    -1,    67,\n-      -1,    73,    -1,    75,    -1,    86,    -1,    93,    -1,    98,\n-      -1,    99,    -1,   100,    -1,   102,    -1,   103,    -1,   104,\n-      -1,   115,    -1,   117,    -1,   124,    -1,   130,    -1,   131,\n-      -1,   137,    -1,   141,    -1,   145,    -1,   157,    -1,   159,\n-      -1,   164,    -1,   166,    -1,   169,    -1,   176,    -1,   178,\n-      -1,   182,    -1,   195,    -1,   202,    -1,   213,    -1,   215,\n-      -1,   226,    -1,   227,    -1,   232,    -1,   236,    -1,   237,\n-      -1,   269,    -1,   274,    -1,   281,    -1,   284,    -1,   285,\n-      -1,   289,    -1,   290,    -1,   307,    -1,   317,    -1,   324,\n-      -1,   333,    -1,   347,    -1,   366,    -1,   372,    -1,   383,\n-      -1,   399,    -1,   402,    -1,   410,    -1,   413,    -1,   414,\n-      -1,   420,    -1,   429,    -1,   430,    -1,   436,    -1,   437,\n-      -1,   445,    -1,   452,    -1,   453,    -1,   455,    -1,   456,\n-      -1\n+      -1,   218,    -1,   220,    -1,   229,    -1,   231,    -1,   243,\n+      -1,   263,    -1,   272,    -1,   293,    -1,   295,    -1,   350,\n+      -1,   378,    -1,   395,    -1,   404,    -1,   447,    -1,    44,\n+      -1,    50,    -1,    74,    -1,    82,    -1,    94,    -1,   101,\n+      -1,   168,    -1,   170,    -1,   174,    -1,   190,    -1,   204,\n+      -1,   217,    -1,   218,    -1,   220,    -1,   229,    -1,   231,\n+      -1,   263,    -1,   272,    -1,   293,    -1,   295,    -1,   350,\n+      -1,   378,    -1,   404,    -1,   423,    -1,   447,    -1,    48,\n+      -1,    49,    -1,    51,    -1,    52,    -1,    65,    -1,    64,\n+      -1,    72,    -1,   112,    -1,   113,    -1,   150,    -1,   156,\n+      -1,   162,    -1,   179,    -1,   180,    -1,   205,    -1,   212,\n+      -1,   214,    -1,   211,    -1,   243,    -1,   262,    -1,   264,\n+      -1,   268,    -1,   275,    -1,   277,    -1,   292,    -1,   296,\n+      -1,   310,    -1,   313,    -1,   328,    -1,   354,    -1,   374,\n+      -1,   381,    -1,   395,    -1,   397,    -1,   411,    -1,   412,\n+      -1,   417,    -1,   419,    -1,   423,    -1,   443,    -1,   444,\n+      -1,   463,    -1,   464,    -1,   465,    -1,   466,    -1,   467,\n+      -1,   468,    -1,   469,    -1,   470,    -1,   471,    -1,   472,\n+      -1,   473,    -1,    44,    -1,    50,    -1,    74,    -1,    82,\n+      -1,    94,    -1,   101,    -1,   168,    -1,   170,    -1,   174,\n+      -1,   190,    -1,   204,    -1,   217,    -1,   218,    -1,   220,\n+      -1,   229,    -1,   231,    -1,   243,    -1,   263,    -1,   272,\n+      -1,   293,    -1,   295,    -1,   350,    -1,   378,    -1,   395,\n+      -1,   404,    -1,   423,    -1,   447,    -1,    27,    -1,    31,\n+      -1,    32,    -1,    33,    -1,    34,    -1,    35,    -1,    36,\n+      -1,    37,    -1,    40,    -1,    53,    -1,    60,    -1,    61,\n+      -1,    67,    -1,    73,    -1,    75,    -1,    86,    -1,    93,\n+      -1,    98,    -1,    99,    -1,   100,    -1,   102,    -1,   103,\n+      -1,   104,    -1,   115,    -1,   117,    -1,   124,    -1,   130,\n+      -1,   131,    -1,   137,    -1,   141,    -1,   145,    -1,   157,\n+      -1,   159,    -1,   164,    -1,   166,    -1,   169,    -1,   176,\n+      -1,   178,    -1,   182,    -1,   195,    -1,   202,    -1,   213,\n+      -1,   215,    -1,   226,    -1,   227,    -1,   232,    -1,   236,\n+      -1,   237,    -1,   269,    -1,   274,    -1,   281,    -1,   284,\n+      -1,   285,    -1,   289,    -1,   290,    -1,   307,    -1,   317,\n+      -1,   324,    -1,   333,    -1,   347,    -1,   366,    -1,   372,\n+      -1,   383,    -1,   399,    -1,   402,    -1,   410,    -1,   413,\n+      -1,   414,    -1,   420,    -1,   429,    -1,   430,    -1,   436,\n+      -1,   437,    -1,   445,    -1,   452,    -1,   453,    -1,   455,\n+      -1,   456,    -1\n };\n \n /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */\n@@ -2478,9 +2478,9 @@ static const yytype_uint16 yyrline[] =\n        8,    22,    36,    48,    56,    70,    71,    72,    73,    74,\n       87,    88,    93,    94,    98,    99,     7,    21,    25,    32,\n       43,    44,    50,    51,     9,    19,     2,     7,    14,    24,\n-      25,    32,     3,    10,    17,    24,    31,    38,    45,    55,\n-      55,    57,    58,     6,     8,    21,    34,    52,    74,    75,\n-      76,    77,    11,    24,    37,    54,    55,    56,    61,    74,\n+      25,    32,     3,    10,    17,    24,    31,    38,    45,    52,\n+      61,    61,    63,    64,     6,     8,    21,    34,    52,    74,\n+      75,    76,    77,    11,    24,    37,    54,    55,    56,    61,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n@@ -2511,25 +2511,25 @@ static const yytype_uint16 yyrline[] =\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n-      74,    74,    74,    74,    75,    75,    75,    75,    75,    75,\n+      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n-      75,    75,    75,    75,    75,    75,    76,    76,    76,    76,\n+      75,    75,    75,    75,    75,    75,    75,    76,    76,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n-      76,    76,    77,    77,    77,    77,    77,    77,    77,    77,\n+      76,    76,    76,    77,    77,    77,    77,    77,    77,    77,\n       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,\n-      77,    77,    77,    77,    77,    77,    77,    78,    78,    78,\n+      77,    77,    77,    77,    77,    77,    77,    77,    78,    78,\n+      78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n-      78,    78,    78,    78,    78,    78,    78,    78,    78,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n-      79,    79,    79,    79,    79,    79,    80,    80,    80,    80,\n+      79,    79,    79,    79,    79,    79,    79,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n@@ -2537,7 +2537,7 @@ static const yytype_uint16 yyrline[] =\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n-      80,    80,    80,    80\n+      80,    80,    80,    80,    80\n };\n #endif\n \n@@ -2923,9 +2923,9 @@ static const yytype_uint16 yyr1[] =\n      870,   870,   870,   870,   870,   871,   871,   871,   871,   871,\n      872,   872,   873,   873,   874,   874,   875,   876,   876,   876,\n      877,   877,   878,   878,   879,   879,   880,   881,   881,   882,\n-     882,   882,   883,   883,   883,   883,   883,   883,   883,   884,\n-     884,   885,   885,   886,   887,   887,   887,   887,   888,   888,\n-     888,   888,   889,   889,   889,   890,   890,   890,   891,   892,\n+     882,   882,   883,   883,   883,   883,   883,   883,   883,   883,\n+     884,   884,   885,   885,   886,   887,   887,   887,   887,   888,\n+     888,   888,   888,   889,   889,   889,   890,   890,   890,   891,\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n@@ -2956,25 +2956,25 @@ static const yytype_uint16 yyr1[] =\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,\n-     892,   892,   892,   892,   893,   893,   893,   893,   893,   893,\n+     892,   892,   892,   892,   892,   893,   893,   893,   893,   893,\n      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,\n      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,\n      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,\n      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,\n-     893,   893,   893,   893,   893,   893,   894,   894,   894,   894,\n+     893,   893,   893,   893,   893,   893,   893,   894,   894,   894,\n      894,   894,   894,   894,   894,   894,   894,   894,   894,   894,\n      894,   894,   894,   894,   894,   894,   894,   894,   894,   894,\n-     894,   894,   895,   895,   895,   895,   895,   895,   895,   895,\n+     894,   894,   894,   895,   895,   895,   895,   895,   895,   895,\n      895,   895,   895,   895,   895,   895,   895,   895,   895,   895,\n-     895,   895,   895,   895,   895,   895,   895,   896,   896,   896,\n+     895,   895,   895,   895,   895,   895,   895,   895,   896,   896,\n+     896,   896,   896,   896,   896,   896,   896,   896,   896,   896,\n      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,\n      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,\n      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,\n      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,\n-     896,   896,   896,   896,   896,   896,   896,   896,   896,   897,\n      897,   897,   897,   897,   897,   897,   897,   897,   897,   897,\n      897,   897,   897,   897,   897,   897,   897,   897,   897,   897,\n-     897,   897,   897,   897,   897,   897,   898,   898,   898,   898,\n+     897,   897,   897,   897,   897,   897,   897,   898,   898,   898,\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n@@ -2982,7 +2982,7 @@ static const yytype_uint16 yyr1[] =\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,\n-     898,   898,   898,   898\n+     898,   898,   898,   898,   898\n };\n \n /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */\n@@ -3113,8 +3113,8 @@ static const yytype_uint8 yyr2[] =\n        1,     0,     1,     3,     1,     0,     7,     1,     2,     3,\n        2,     0,     2,     0,     2,     4,     2,     1,     1,     1,\n        2,     3,     2,     2,     2,     2,     3,     4,     2,     1,\n-       1,     1,     3,     2,     9,    11,    12,    14,     3,     4,\n-       4,     0,     7,    10,     9,     2,     3,     0,     4,     1,\n+       1,     1,     1,     3,     2,     9,    11,    12,    14,     3,\n+       4,     4,     0,     7,    10,     9,     2,     3,     0,     4,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n@@ -3171,7 +3171,7 @@ static const yytype_uint8 yyr2[] =\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1\n+       1,     1,     1,     1,     1\n };\n \n /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state\n@@ -3180,93 +3180,93 @@ static const yytype_uint8 yyr2[] =\n static const yytype_uint16 yydefact[] =\n {\n      135,   214,     0,  1174,  1173,   214,     0,  1149,   214,   424,\n-     348,     0,  1250,     0,   214,     0,   135,     0,     0,     0,\n-       0,     0,     0,     0,     0,   214,   491,     0,  1249,   214,\n+     348,     0,  1251,     0,   214,     0,   135,     0,     0,     0,\n+       0,     0,     0,     0,     0,   214,   491,     0,  1250,   214,\n        0,     0,  1221,     0,     0,     0,     0,     0,     2,     4,\n        7,    18,    13,    30,    26,     0,    28,    16,    21,     6,\n       32,    17,    20,    14,    33,    11,    31,   458,   445,   496,\n      457,   134,   597,   461,    29,    15,    25,     5,    10,    23,\n       24,    22,  1157,    36,    27,    34,    19,     8,    35,    37,\n-       0,     9,    38,    12,   213,   212,   206,     0,     0,     0,\n-       0,     0,   207,  1087,  1269,  1270,  1271,  1272,  1273,  1274,\n-    1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,\n-    1626,  1285,  1286,  1287,  1574,  1575,  1627,  1576,  1577,  1288,\n-    1289,  1290,  1291,  1292,  1293,  1294,  1295,  1578,  1579,  1296,\n-    1297,  1298,  1299,  1300,  1580,  1628,  1301,  1302,  1303,  1304,\n-    1305,  1306,  1629,  1307,  1308,  1309,  1310,  1311,  1312,  1313,\n-    1314,  1315,  1630,  1316,  1317,  1318,  1631,  1319,  1320,  1321,\n-    1322,  1323,  1324,  1325,  1581,  1582,  1326,  1327,  1328,  1329,\n-    1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,\n-    1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,\n-    1350,  1351,  1352,  1353,  1583,  1354,  1355,  1356,  1357,  1358,\n-    1584,  1359,  1360,  1361,  1585,  1362,  1363,  1364,  1632,  1633,\n-    1365,  1366,  1367,  1634,  1368,  1369,  1586,  1587,  1370,  1371,\n-    1372,  1373,  1374,  1375,  1376,  1377,  1635,  1378,  1379,  1380,\n-    1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,  1636,  1588,\n-    1389,  1390,  1391,  1392,  1393,  1589,  1590,  1591,  1394,  1637,\n-    1638,  1395,  1639,  1396,  1397,  1398,  1399,  1400,  1401,  1640,\n-    1402,  1641,  1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,\n-    1592,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,\n-    1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1593,\n-    1643,  1594,  1429,  1430,  1431,  1595,  1432,  1433,  1644,  1434,\n-    1596,  1435,  1597,  1436,  1437,  1438,  1439,  1440,  1441,  1442,\n-    1443,  1444,  1598,  1645,  1445,  1646,  1599,  1446,  1447,  1448,\n-    1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1600,\n-    1458,  1459,  1601,  1460,  1461,  1462,  1463,  1464,  1465,  1466,\n-    1467,  1468,  1469,  1470,  1471,  1602,  1472,  1473,  1474,  1475,\n-    1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,\n-    1486,  1487,  1488,  1489,  1490,  1647,  1491,  1492,  1493,  1603,\n-    1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,\n-    1504,  1505,  1506,  1507,  1508,  1509,  1510,  1604,  1511,  1512,\n-    1513,  1648,  1514,  1515,  1605,  1516,  1517,  1518,  1519,  1520,\n-    1521,  1522,  1523,  1524,  1525,  1526,  1527,  1606,  1528,  1607,\n-    1529,  1530,  1531,  1532,  1650,  1533,  1534,  1535,  1536,  1537,\n-    1608,  1609,  1538,  1539,  1610,  1540,  1611,  1541,  1542,  1612,\n-    1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,\n-    1553,  1554,  1555,  1556,  1557,  1613,  1614,  1558,  1651,  1559,\n-    1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,\n-    1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,\n-    1625,  1570,  1571,  1572,  1573,  1253,     0,     0,  1069,  1088,\n+    1249,     9,    38,    12,   213,   212,   206,     0,     0,     0,\n+       0,     0,   207,  1087,  1270,  1271,  1272,  1273,  1274,  1275,\n+    1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,  1285,\n+    1627,  1286,  1287,  1288,  1575,  1576,  1628,  1577,  1578,  1289,\n+    1290,  1291,  1292,  1293,  1294,  1295,  1296,  1579,  1580,  1297,\n+    1298,  1299,  1300,  1301,  1581,  1629,  1302,  1303,  1304,  1305,\n+    1306,  1307,  1630,  1308,  1309,  1310,  1311,  1312,  1313,  1314,\n+    1315,  1316,  1631,  1317,  1318,  1319,  1632,  1320,  1321,  1322,\n+    1323,  1324,  1325,  1326,  1582,  1583,  1327,  1328,  1329,  1330,\n+    1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,  1340,\n+    1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,  1350,\n+    1351,  1352,  1353,  1354,  1584,  1355,  1356,  1357,  1358,  1359,\n+    1585,  1360,  1361,  1362,  1586,  1363,  1364,  1365,  1633,  1634,\n+    1366,  1367,  1368,  1635,  1369,  1370,  1587,  1588,  1371,  1372,\n+    1373,  1374,  1375,  1376,  1377,  1378,  1636,  1379,  1380,  1381,\n+    1382,  1383,  1384,  1385,  1386,  1387,  1388,  1389,  1637,  1589,\n+    1390,  1391,  1392,  1393,  1394,  1590,  1591,  1592,  1395,  1638,\n+    1639,  1396,  1640,  1397,  1398,  1399,  1400,  1401,  1402,  1641,\n+    1403,  1642,  1404,  1405,  1406,  1407,  1408,  1409,  1410,  1411,\n+    1593,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,\n+    1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1429,  1594,\n+    1644,  1595,  1430,  1431,  1432,  1596,  1433,  1434,  1645,  1435,\n+    1597,  1436,  1598,  1437,  1438,  1439,  1440,  1441,  1442,  1443,\n+    1444,  1445,  1599,  1646,  1446,  1647,  1600,  1447,  1448,  1449,\n+    1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1458,  1601,\n+    1459,  1460,  1602,  1461,  1462,  1463,  1464,  1465,  1466,  1467,\n+    1468,  1469,  1470,  1471,  1472,  1603,  1473,  1474,  1475,  1476,\n+    1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,  1486,\n+    1487,  1488,  1489,  1490,  1491,  1648,  1492,  1493,  1494,  1604,\n+    1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,  1504,\n+    1505,  1506,  1507,  1508,  1509,  1510,  1511,  1605,  1512,  1513,\n+    1514,  1649,  1515,  1516,  1606,  1517,  1518,  1519,  1520,  1521,\n+    1522,  1523,  1524,  1525,  1526,  1527,  1528,  1607,  1529,  1608,\n+    1530,  1531,  1532,  1533,  1651,  1534,  1535,  1536,  1537,  1538,\n+    1609,  1610,  1539,  1540,  1611,  1541,  1612,  1542,  1543,  1613,\n+    1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,\n+    1554,  1555,  1556,  1557,  1558,  1614,  1615,  1559,  1652,  1560,\n+    1561,  1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,  1570,\n+    1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,  1625,\n+    1626,  1571,  1572,  1573,  1574,  1254,     0,     0,  1069,  1088,\n     1089,  1097,   209,   423,   135,     0,   392,     0,     0,   393,\n        0,     0,   342,   341,     0,  1140,   347,     0,     0,     0,\n-    1087,   101,  1592,  1460,  1606,    99,  1067,  1088,     0,   367,\n+    1087,   101,  1593,  1461,  1607,    99,  1067,  1088,     0,   367,\n      368,     0,   376,     0,   361,   365,   362,     0,   386,   378,\n      387,   379,   360,   380,   369,   359,     0,   388,     0,   363,\n        0,     0,     0,   210,   175,   348,   135,     0,  1162,  1163,\n     1161,  1152,  1157,  1164,  1165,     0,  1148,     0,     0,  1086,\n-    1208,  1209,  1206,  1205,   164,  1116,  1238,  1608,  1538,  1251,\n-    1239,  1236,  1237,   211,   490,   488,     0,  1037,  1368,  1405,\n-    1498,  1509,  1608,  1182,  1186,     0,   208,  1613,  1243,     0,\n+    1208,  1209,  1206,  1205,   164,  1116,  1238,  1609,  1539,  1252,\n+    1239,  1236,  1237,   211,   490,   488,     0,  1037,  1369,  1406,\n+    1499,  1510,  1609,  1182,  1186,     0,   208,  1614,  1243,     0,\n     1244,  1091,     0,   462,   637,  1090,  1061,  1220,     0,  1225,\n-       0,  1474,   466,   469,  1106,   467,   458,     0,     1,   135,\n+       0,  1475,   466,   469,  1106,   467,   458,     0,     1,   135,\n        0,     0,     0,   487,   487,     0,   487,     0,   450,   458,\n-     453,   457,   598,  1156,  1234,  1248,  1608,  1538,  1242,  1245,\n-    1376,     0,     0,  1376,     0,  1376,     0,  1376,     0,     0,\n+     453,   457,   598,  1156,  1234,  1248,  1609,  1539,  1242,  1245,\n+    1377,     0,     0,  1377,     0,  1377,     0,  1377,     0,     0,\n     1029,     0,  1030,  1070,  1118,  1119,  1117,     0,  1120,   313,\n-     346,   345,   344,   343,   348,  1376,  1124,  1101,     0,     0,\n+     346,   345,   344,   343,   348,  1377,  1124,  1101,     0,     0,\n        0,     0,     0,     0,  1135,   102,   100,   374,   375,     0,\n-     366,   364,     0,  1098,  1652,   689,  1653,   718,   696,   718,\n-     718,  1654,  1655,  1656,  1657,   685,   685,  1341,   698,  1658,\n-    1659,  1660,  1376,  1661,  1662,   686,   687,   723,  1663,  1664,\n-    1665,  1666,  1667,     0,     0,  1668,   718,  1669,   685,  1670,\n-    1671,   690,  1672,   659,     0,  1673,   688,   660,  1674,   726,\n-     726,  1675,   713,  1676,   385,     0,   389,   671,   672,   673,\n+     366,   364,     0,  1098,  1653,   689,  1654,   718,   696,   718,\n+     718,  1655,  1656,  1657,  1658,   685,   685,  1342,   698,  1659,\n+    1660,  1661,  1377,  1662,  1663,   686,   687,   723,  1664,  1665,\n+    1666,  1667,  1668,     0,     0,  1669,   718,  1670,   685,  1671,\n+    1672,   690,  1673,   659,     0,  1674,   688,   660,  1675,   726,\n+     726,  1676,   713,  1677,   385,     0,   389,   671,   672,   673,\n      674,   699,   700,   675,   705,   706,   710,   676,   758,   685,\n-    1099,  1100,  1376,   385,   381,  1376,   385,  1063,  1376,     0,\n-       0,   171,     0,     0,  1154,  1166,  1677,  1678,  1679,  1680,\n-    1682,  1681,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,\n-    1691,  1694,  1692,  1693,  1695,  1696,  1697,  1698,  1699,  1700,\n-    1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,\n-    1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,\n-    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1180,     0,\n+    1099,  1100,  1377,   385,   381,  1377,   385,  1063,  1377,     0,\n+       0,   171,     0,     0,  1154,  1166,  1678,  1679,  1680,  1681,\n+    1683,  1682,  1684,  1685,  1686,  1687,  1688,  1689,  1690,  1691,\n+    1692,  1695,  1693,  1694,  1696,  1697,  1698,  1699,  1700,  1701,\n+    1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,  1711,\n+    1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,\n+    1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1180,     0,\n     1181,  1171,  1160,  1167,  1168,   135,   422,  1207,  1151,     0,\n        0,     0,     0,  1240,     0,     0,     0,  1072,  1074,  1075,\n-     958,  1085,  1032,     0,  1575,  1576,  1577,  1022,     0,  1578,\n-    1579,  1580,  1628,   888,   875,   884,   889,   876,   878,   885,\n-    1581,  1582,   826,  1583,  1584,  1083,  1585,  1586,  1587,  1589,\n-    1590,  1591,   880,   882,  1593,  1594,     0,  1084,  1596,  1597,\n-    1441,  1599,  1600,  1602,  1603,   886,  1605,  1607,  1608,  1609,\n-    1610,  1611,  1082,  1612,   887,  1614,     0,     0,     0,  1050,\n+     958,  1085,  1032,     0,  1576,  1577,  1578,  1022,     0,  1579,\n+    1580,  1581,  1629,   888,   875,   884,   889,   876,   878,   885,\n+    1582,  1583,   826,  1584,  1585,  1083,  1586,  1587,  1588,  1590,\n+    1591,  1592,   880,   882,  1594,  1595,     0,  1084,  1597,  1598,\n+    1442,  1600,  1601,  1603,  1604,   886,  1606,  1608,  1609,  1610,\n+    1611,  1612,  1082,  1613,   887,  1615,     0,     0,     0,  1050,\n      977,     0,     0,     0,  1032,   859,     0,     0,   679,   680,\n      701,   702,   681,   707,   708,   682,     0,  1044,   759,   904,\n     1032,   871,   934,   802,     0,   857,   851,  1040,   473,  1038,\n@@ -3280,21 +3280,21 @@ static const yytype_uint16 yydefact[] =\n        0,     0,     0,     0,     0,    93,    42,    86,     0,     0,\n        0,     0,   189,   202,     0,     0,     0,     0,     0,   199,\n        0,     0,   182,    44,   176,   178,     0,   122,     0,    40,\n-       0,     0,     0,    46,  1087,     0,  1626,  1627,  1628,  1629,\n-    1630,   889,     0,  1632,  1633,  1634,  1635,  1636,  1637,  1638,\n-    1639,  1640,  1641,  1592,  1643,  1644,  1645,  1646,  1647,  1648,\n-    1606,  1650,  1612,     0,  1651,     0,   863,   980,   496,   978,\n-    1107,     0,  1088,  1094,  1028,     0,  1108,  1756,  1757,  1758,\n-    1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,\n-    1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,\n-    1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,\n-    1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,\n-    1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,\n-    1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,\n-    1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,\n-    1716,  1829,  1830,  1831,  1832,  1833,  1025,  1068,  1110,  1109,\n+       0,     0,     0,    46,  1087,     0,  1627,  1628,  1629,  1630,\n+    1631,   889,     0,  1633,  1634,  1635,  1636,  1637,  1638,  1639,\n+    1640,  1641,  1642,  1593,  1644,  1645,  1646,  1647,  1648,  1649,\n+    1607,  1651,  1613,     0,  1652,     0,   863,   980,   496,   978,\n+    1107,     0,  1088,  1094,  1028,     0,  1108,  1757,  1758,  1759,\n+    1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,\n+    1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,  1779,\n+    1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,  1789,\n+    1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,  1799,\n+    1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,  1809,\n+    1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,  1819,\n+    1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,  1829,\n+    1717,  1830,  1831,  1832,  1833,  1834,  1025,  1068,  1110,  1109,\n     1111,  1031,     0,     0,   420,     0,     0,  1121,     0,  1102,\n-       0,     0,  1376,   170,  1376,   313,     0,   313,     0,     0,\n+       0,     0,  1377,   170,  1377,   313,     0,   313,     0,     0,\n     1134,  1137,   377,   373,   371,   370,   372,   717,   704,   712,\n      711,     0,   694,   693,   692,     0,   691,     0,     0,   718,\n      718,   716,   695,   671,     0,     0,     0,   722,     0,   720,\n@@ -3305,7 +3305,7 @@ static const yytype_uint16 yydefact[] =\n      354,     0,     0,     0,   348,     0,   135,     0,   183,  1176,\n     1177,  1175,     0,     0,  1159,   186,   203,  1170,  1179,  1169,\n     1178,  1158,  1153,     0,  1150,   411,  1195,  1194,  1203,   165,\n-       0,   983,     0,   135,  1241,  1252,     0,   855,   977,  1021,\n+       0,   983,     0,   135,  1241,  1253,     0,   855,   977,  1021,\n        0,     0,     0,     0,     0,     0,   861,   986,     0,     0,\n      782,     0,     0,     0,  1001,     0,  1007,     0,     0,     0,\n      783,   763,   764,     0,  1049,  1058,   976,     0,   859,   972,\n@@ -3323,7 +3323,7 @@ static const yytype_uint16 yydefact[] =\n     1085,   542,   516,   541,     0,     0,   520,     0,   546,   759,\n      581,   452,   510,   511,   514,   451,     0,   584,     0,   594,\n      582,   515,     0,  1235,  1247,     0,     0,     0,     0,     0,\n-    1376,     0,     0,    77,    58,   264,     0,   121,     0,     0,\n+    1377,     0,     0,    77,    58,   264,     0,   121,     0,     0,\n        0,     0,     0,     0,     0,    85,    82,    83,    84,     0,\n        0,     0,     0,   187,   188,   201,     0,   192,   193,   190,\n      194,   195,     0,     0,   180,   181,     0,     0,     0,     0,\n@@ -3332,10 +3332,10 @@ static const yytype_uint16 yydefact[] =\n      410,   321,     0,   311,     0,     0,     0,     0,     0,     0,\n      348,  1127,  1125,  1123,  1126,  1128,  1103,     0,     0,     0,\n        0,   167,   169,     0,   310,   283,     0,  1139,   394,     0,\n-       0,  1376,  1136,   300,     0,     0,     0,     0,   385,     0,\n+       0,  1377,  1136,   300,     0,     0,     0,     0,   385,     0,\n      715,   714,   666,   662,     0,     0,     0,     0,   390,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   385,\n-     382,   385,  1064,     0,   385,   174,     0,  1376,   313,     0,\n+     382,   385,  1064,     0,   385,   174,     0,  1377,   313,     0,\n     1155,  1172,   184,   204,   185,   205,   443,     0,   417,   425,\n      430,   408,     0,   408,     0,   427,   431,   408,   426,   408,\n      421,     0,   166,     0,  1115,     0,  1114,     0,  1033,     0,\n@@ -3352,17 +3352,17 @@ static const yytype_uint16 yydefact[] =\n      808,   812,   785,   800,     0,   781,     0,  1035,   967,   969,\n        0,   965,     0,   771,   772,   773,   765,   766,   767,   768,\n      769,   770,   777,   943,   941,   942,     0,     0,     0,   908,\n-     805,     0,     0,   807,   806,  1039,  1368,  1405,     0,   484,\n+     805,     0,     0,   807,   806,  1039,  1369,  1406,     0,   484,\n      484,   484,   472,   482,     0,   651,   496,  1050,   651,     0,\n      758,   640,  1106,  1223,  1211,  1212,   973,  1105,   135,     0,\n     1231,     0,     0,     0,   141,   124,     0,  1229,     0,   157,\n      159,   600,     0,  1032,   504,   505,   509,   509,     0,     0,\n-     509,  1603,  1494,     0,     0,     0,     0,   547,   589,     0,\n+     509,  1604,  1495,     0,     0,     0,     0,   547,   589,     0,\n      580,   544,   545,     0,   543,  1072,   548,  1071,   549,   552,\n      553,   521,   590,  1059,   592,     0,   585,   456,   455,   596,\n-       0,    43,     0,  1376,    60,     0,     0,     0,     0,     0,\n-       0,   218,   255,   218,    98,  1376,   385,  1376,   385,  1273,\n-    1342,  1510,     0,    56,    89,     0,   288,   115,     0,   273,\n+       0,    43,     0,  1377,    60,     0,     0,     0,     0,     0,\n+       0,   218,   255,   218,    98,  1377,   385,  1377,   385,  1274,\n+    1343,  1511,     0,    56,    89,     0,   288,   115,     0,   273,\n      318,    79,    94,   108,     0,     0,    45,   177,   191,   196,\n      111,   200,   197,  1144,   198,   122,     0,    41,     0,   109,\n        0,  1142,     0,     0,    47,   113,  1146,   494,   494,   494,\n@@ -3370,7 +3370,7 @@ static const yytype_uint16 yydefact[] =\n        0,   312,     0,   419,   399,   400,   410,     0,   313,     0,\n      313,  1124,     0,     0,  1104,   105,     0,     0,     0,     0,\n      303,   301,   334,     0,   308,   302,   311,     0,     0,   259,\n-       0,  1267,     0,     0,   395,   391,     0,     0,     0,   684,\n+       0,  1268,     0,     0,   395,   391,     0,     0,     0,   684,\n      697,   358,   671,     0,   725,   724,   726,   726,   671,     0,\n      657,     0,   669,     0,   709,   678,   751,   752,   753,   754,\n      755,   756,   757,   351,   353,     0,   355,     0,     0,     0,\n@@ -3386,7 +3386,7 @@ static const yytype_uint16 yydefact[] =\n        0,     0,     0,     0,   811,   799,     0,   809,   813,     0,\n        0,     0,   793,     0,     0,   791,   823,   787,     0,     0,\n      824,     0,     0,   907,   916,   484,   484,   484,   484,   481,\n-     483,     0,     0,     0,     0,  1494,     0,   623,   603,   599,\n+     483,     0,     0,     0,     0,  1495,     0,   623,   603,   599,\n      601,   610,   623,   628,   872,   649,   873,  1090,     0,   559,\n      494,  1058,   559,     0,  1198,  1214,     0,  1232,     0,   146,\n      128,   148,   147,     0,   155,     0,  1032,     0,   146,   130,\n@@ -3400,8 +3400,8 @@ static const yytype_uint16 yydefact[] =\n        0,     0,     0,     0,     0,   496,   492,   493,   864,  1027,\n      441,   442,   182,   440,   322,     0,     0,   310,     0,  1139,\n     1122,   348,     0,     0,   104,   106,     0,   170,   313,     0,\n-     287,   283,   309,   281,   280,   282,     0,  1268,   175,     0,\n-    1262,  1138,     0,     0,  1133,   703,   668,     0,   721,   719,\n+     287,   283,   309,   281,   280,   282,     0,  1269,   175,     0,\n+    1263,  1138,     0,     0,  1133,   703,   668,     0,   721,   719,\n      667,     0,   663,   670,   385,     0,   444,     0,   403,   439,\n      428,   433,     0,   437,   435,   434,   429,   432,     0,  1019,\n     1015,     0,   874,   985,     0,   971,   999,   998,   829,   841,\n@@ -3420,15 +3420,15 @@ static const yytype_uint16 yydefact[] =\n      218,     0,     0,    59,     0,   332,   275,   324,   307,   290,\n        0,     0,     0,   219,     0,   295,     0,    51,    71,     0,\n       67,     0,    96,     0,     0,     0,     0,     0,    54,    66,\n-       0,    49,     0,   385,   385,    57,   274,  1098,  1652,  1653,\n-    1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,\n-    1664,  1665,  1666,  1667,  1745,  1668,   225,  1669,  1441,  1670,\n-    1671,  1672,     0,  1673,   660,  1674,  1675,  1676,   946,   947,\n+       0,    49,     0,   385,   385,    57,   274,  1098,  1653,  1654,\n+    1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,\n+    1665,  1666,  1667,  1668,  1746,  1669,   225,  1670,  1442,  1671,\n+    1672,  1673,     0,  1674,   660,  1675,  1676,  1677,   946,   947,\n      223,   317,   220,   325,   222,   224,     0,  1099,   221,   320,\n      112,  1145,     0,   110,     0,  1143,   119,   117,   114,  1147,\n-     867,   868,   865,   494,   422,   402,     0,     0,  1267,     0,\n-       0,  1376,     0,   103,     0,  1139,   168,   310,     0,   340,\n-     259,   335,     0,  1267,  1265,     0,  1261,     0,     0,     0,\n+     867,   868,   865,   494,   422,   402,     0,     0,  1268,     0,\n+       0,  1377,     0,   103,     0,  1139,   168,   310,     0,   340,\n+     259,   335,     0,  1268,  1266,     0,  1262,     0,     0,     0,\n      664,   658,   356,     0,   416,     0,   436,  1018,   890,   901,\n      997,     0,     0,     0,     0,   896,   891,  1055,  1056,  1051,\n      820,   818,   815,     0,   816,   794,     0,     0,   792,   788,\n@@ -3442,21 +3442,21 @@ static const yytype_uint16 yydefact[] =\n        0,     0,   276,     0,     0,     0,   239,     0,     0,   307,\n        0,   314,   235,   236,   349,     0,     0,     0,    63,    53,\n       50,    55,    64,     0,     0,    65,    68,   656,    80,    73,\n-    1745,  1752,     0,     0,     0,     0,     0,     0,   398,   405,\n-     182,     0,     0,   283,  1264,     0,     0,     0,   310,   107,\n-       0,     0,     0,  1267,     0,     0,   215,     0,   256,     0,\n-     172,  1266,     0,  1254,     0,  1131,  1132,     0,     0,   404,\n+    1746,  1753,     0,     0,     0,     0,     0,     0,   398,   405,\n+     182,     0,     0,   283,  1265,     0,     0,     0,   310,   107,\n+       0,     0,     0,  1268,     0,     0,   215,     0,   256,     0,\n+     172,  1267,     0,  1255,     0,  1131,  1132,     0,     0,   404,\n      847,     0,     0,     0,  1053,   817,   821,   819,   796,   905,\n      921,   918,   644,     0,   647,   611,     0,     0,   526,   533,\n        0,   536,   530,     0,   613,     0,     0,   615,   617,     0,\n-       0,     0,   652,     0,     0,     0,  1067,   557,  1317,  1586,\n-    1493,   558,     0,   562,   556,   560,   565,   567,   566,   568,\n+       0,     0,   652,     0,     0,     0,  1067,   557,  1318,  1587,\n+    1494,   558,     0,   562,   556,   560,   565,   567,   566,   568,\n      564,   575,     0,   578,  1077,   578,     0,     0,     0,     0,\n      161,     0,   152,   152,     0,   138,   961,     0,   218,     0,\n      306,   329,   254,     0,     0,   237,     0,   244,     0,   278,\n      279,   277,   238,   307,   313,   240,     0,   350,     0,    72,\n        0,    88,     0,     0,   319,   120,   118,   866,   422,     0,\n-    1139,   259,  1261,     0,     0,     0,   283,   175,  1263,   272,\n+    1139,   259,  1262,     0,     0,     0,   283,   175,  1264,   272,\n      265,   266,   267,   268,   269,   270,   271,   286,   285,   257,\n      258,     0,     0,     0,  1133,     0,   848,     0,   849,     0,\n      496,   649,     0,     0,   643,     0,   524,   522,   525,   527,\n@@ -3465,20 +3465,20 @@ static const yytype_uint16 yydefact[] =\n        0,     0,   529,   529,     0,   132,     0,   651,     0,     0,\n      154,   154,   140,     0,   313,   331,     0,   298,   305,   297,\n        0,     0,   234,     0,   241,   339,   243,   227,   655,     0,\n-      75,     0,   326,   397,   401,     0,   217,  1255,   310,     0,\n-    1261,   259,  1267,     0,  1258,     0,     0,  1139,   850,     0,\n+      75,     0,   326,   397,   401,     0,   217,  1256,   310,     0,\n+    1262,   259,  1268,     0,  1259,     0,     0,  1139,   850,     0,\n      924,   642,   645,     0,   618,     0,     0,     0,   653,   654,\n      626,     0,     0,     0,   561,     0,     0,   577,     0,   460,\n      459,   127,   152,   131,   162,   151,   506,   153,   506,     0,\n      339,   284,     0,     0,   262,   227,     0,   253,     0,    69,\n-      87,   327,     0,   310,  1256,   216,   173,  1259,  1260,     0,\n+      87,   327,     0,   310,  1257,   216,   173,  1260,  1261,     0,\n      651,   920,     0,     0,     0,     0,   534,     0,   540,   635,\n      571,     0,   570,   912,   913,   531,   154,   509,   509,   651,\n      253,   299,   304,     0,   242,   245,   336,   337,   338,     0,\n-     249,   246,   250,     0,  1261,     0,  1129,  1574,  1318,  1545,\n+     249,   246,   250,     0,  1262,     0,  1129,  1575,  1319,  1546,\n        0,   922,   925,   923,   917,   646,     0,     0,   532,   572,\n      528,   506,   143,   142,   139,   218,   261,     0,     0,     0,\n-     251,     0,   252,   226,  1257,  1139,     0,   929,   928,   927,\n+     251,     0,   252,   226,  1258,  1139,     0,   929,   928,   927,\n      931,   930,   535,     0,   509,   333,   231,     0,   230,     0,\n      316,   248,   651,     0,     0,   144,   229,   233,   232,  1130,\n      926,   539\n@@ -3888,7 +3888,7 @@ static const yytype_int16 yypgoto[] =\n    positive, shift that token.  If negative, reduce the rule which\n    number is the opposite.  If zero, do what YYDEFACT says.\n    If YYTABLE_NINF, syntax error.  */\n-#define YYTABLE_NINF -1756\n+#define YYTABLE_NINF -1757\n static const yytype_int16 yytable[] =\n {\n      479,   475,   940,  1004,   804,   728,  1144,    61,   970,  1183,\n@@ -3903,10 +3903,10 @@ static const yytype_int16 yytable[] =\n      618,  1596,  -726,   610,  2182,  2183,  2184,   821,   611,  1798,\n     2086,  -726,  -723,  -446,  2345,  -718,  -723,  1190,  2289,  1190,\n      626,   805,  1181,   549, -1070,  2086,   549,   821, -1095, -1095,\n-     483,  2839,  -449,  1145,  1686, -1642, -1092, -1092,  1801, -1631,\n-    1190, -1642, -1649,  1227, -1754, -1754,  1230, -1734, -1734, -1745,\n-   -1745, -1649,  2594, -1096, -1631,   929,  2206,  1516,   922, -1752,\n-   -1752, -1096,  1233,  2684,  -685,  -698,  -713,   821,  1419, -1093,\n+     483,  2839,  -449,  1145,  1686, -1643, -1092, -1092,  1801, -1632,\n+    1190, -1643, -1650,  1227, -1755, -1755,  1230, -1735, -1735, -1746,\n+   -1746, -1650,  2594, -1096, -1632,   929,  2206,  1516,   922, -1753,\n+   -1753, -1096,  1233,  2684,  -685,  -698,  -713,   821,  1419, -1093,\n    -1093,   549,   549,  1748,   963,  1369,  1238,  2779,  2147,    57,\n     1316,   821,  1614,     3,     4,   966,   587,  1992,  1366,  1238,\n      549,   728,  2656,  -182,   821,    57,  1190,  1447,  -182,  2732,\n@@ -3921,7 +3921,7 @@ static const yytype_int16 yytable[] =\n     2792,  1181,  2841,   546,   590,  1173,   804,  2732,  2658,  2755,\n     2148,  2824,   604,   601,  1456,  2494,  1489,  1774,   728,  2397,\n     1367,   959,  1296,  1490,   959,  1463,   960,  1182,  1401,  1164,\n-    2908,   564,  2591, -1731, -1731,  1819,  1819,  2654,   719,  2749,\n+    2908,   564,  2591, -1732, -1732,  1819,  1819,  2654,   719,  2749,\n      930,    84,   931,  1141,  1316,  1961,  1184,  2354,  2386,   487,\n     1962,  1439,   953,  1184,  2996,  2257,  1474,  2783,  1224,  1308,\n     2551,  2632,  2373,  2763,  2555,   721,  2821,  2932,  1185,  2784,\n@@ -3952,13 +3952,13 @@ static const yytype_int16 yytable[] =\n     -963,  1186,  1712,  1536,   479,  1442,  2096,  2926,  2194,   932,\n     1188,  -723,   612,   933,  -718,  1540,  1541,  2674,  -446,  1787,\n     -446,   630,  1311, -1070,  1569,   631,    61, -1095, -1095,    56,\n-    2585,   610,    44,   807, -1642,  1289,   611,  -449, -1631,  -449,\n-   -1642, -1649,   951,  1052,   479,  1138,    54,    76,  2596,  2865,\n-   -1649,  1746, -1096, -1631,  1871,  1474,   942,  2872,  1179,  1180,\n+    2585,   610,    44,   807, -1643,  1289,   611,  -449, -1632,  -449,\n+   -1643, -1650,   951,  1052,   479,  1138,    54,    76,  2596,  2865,\n+   -1650,  1746, -1096, -1632,  1871,  1474,   942,  2872,  1179,  1180,\n    -1096,  1932,  2871,  1171,  1175,  -713,  1578,  1242,  1243,  1345,\n     1360,  1749,  1598,    57,   728,   728,  2007,  2512,   613,  1475,\n     1242,  1243,  2998,  1761,  -182,  -182,  1469,  2582,   809,   728,\n-   -1729, -1729,  1456,    83,   719,   719,  2101,   629,  1597,   810,\n+   -1730, -1730,  1456,    83,   719,   719,  2101,   629,  1597,   810,\n     1296,  1938,  1940,  2170,  1604,  2004,  2005,  2006,  2007,   719,\n     2086,   654,  1598,  1141,  2086,  2816,  2171,  1650,   730,   657,\n     2637,   721,   721,  1316,   804,    57,   596,  2263,   630,   658,\n@@ -3978,38 +3978,38 @@ static const yytype_int16 yytable[] =\n      721,  1847,  1645,   536,  1450,  1762,  2264,  1840,  1574,  1456,\n      479,   814,    34,   821,  3012,  1480,  2265,  1406,   815,  1695,\n     -495,   597,  1689,  1508,  1457,  -495,    31,  1677,  1300,   630,\n-     479,   479,   479,  1363,   479,   479,    35,   722,  1811, -1730,\n-   -1730,  1506,   487,  1645,  1645,  1404,  1696,  1867,  1868,  1869,\n-     537,   961,   820, -1732, -1732,  1992,  2389,  2303,   479,  2086,\n-   -1756, -1756, -1756,  1206,  1207,  1846,  1407,    33,  2086,   977,\n+     479,   479,   479,  1363,   479,   479,    35,   722,  1811, -1731,\n+   -1731,  1506,   487,  1645,  1645,  1404,  1696,  1867,  1868,  1869,\n+     537,   961,   820, -1733, -1733,  1992,  2389,  2303,   479,  2086,\n+   -1757, -1757, -1757,  1206,  1207,  1846,  1407,    33,  2086,   977,\n     1137,  2185,   816,  2086,    26,   978,  2086,   803,   803,   642,\n       34,   643,  2115,   728,  1857,  1454,  2121,  2173,    88,  1864,\n     2176,  1405,  2177,  -495,  2124,  2086,    89,   921,  1921,   821,\n      962,  2687,   488,   719,    35,  1236,  2688,  1918,  1237,   936,\n-      31,   479,  2646, -1733, -1733,   479,   479,   724,    36,  1943,\n+      31,   479,  2646, -1734, -1734,   479,   479,   724,    36,  1943,\n     1379,  1944,   927,  1380,  1946,  1408,   479,  2181,  2845,   951,\n      721,    90,  1247,   656,    57,  2214,  1907,  2849,  1908,  1247,\n     2221,  2390,  -495,  2382,   730,  2384,    26,  1393,  1394,  1893,\n     1400,    33,   611,   611,   943,   611,   742,  1822,  1697,  1508,\n      649,  1457,   739,  1698,    34,   944,  1457,   722,  1699,  1052,\n-    1849,   946,  1276,  1210,  1211,  1852,  1052,   649,    91, -1735,\n-   -1735,   979,    31,  2086, -1736, -1736,  1481,   728,    35,  2002,\n+    1849,   946,  1276,  1210,  1211,  1852,  1052,   649,    91, -1736,\n+   -1736,   979,    31,  2086, -1737, -1737,  1481,   728,    35,  2002,\n     2003,  2004,  2005,  2006,  2007,  1592,   650,  1052,  1593,   949,\n     1407,  1457,  1763,   977,   947,   804,  2391,   719,  2392,   978,\n     1298,   917,   918,   650,   920,  2086,   950,  1310,   804,    26,\n      972,   594,  1454,    33,  2805,   974,  1313,  1454,  2020,   957,\n-    2652,   651,   728,  2336,   721,  1960,    34, -1737, -1737,  1964,\n+    2652,   651,   728,  2336,   721,  1960,    34, -1738, -1738,  1964,\n     1361,  1965,  2805,  2317,  2318,  2319,  2320,  1511,  2202,   988,\n     1512,  1371,   719,  1247,  1247,    31,  1514,  2120,  1515,  1408,\n       35,  1930,  1454,  2065,  2041,  2066,   630,  2337, -1070,  2561,\n-     631,   722,  2564,   492,    36,   493, -1738, -1738,   652,   721,\n+     631,   722,  2564,   492,    36,   493, -1739, -1739,   652,   721,\n     2903,   975,   977,  2557,   609,   609,  1594,   609,   978,  1595,\n      976,  1636,  2339,   724,  1757,   652,    33,  1229,  1881,   989,\n      496,  1882,  1138,  1006,  2090,  2019,  1967,  2021,  2022,  1700,\n     2523,  1914,  1052,  1010,  1593,   979,   722,   977,  2086,  2408,\n-    1701, -1739, -1739,   978,  1300,   479,  2239,  2401, -1740, -1740,\n+    1701, -1740, -1740,   978,  1300,   479,  2239,  2401, -1741, -1741,\n     1998,   730,   730,  1922,   980,  1142,  1595,  1340,  1341,  1342,\n-    1343,  1344,  1345, -1741, -1741,  1928,   730,    36,  1929,  1645,\n+    1343,  1344,  1345, -1742, -1742,  1928,   730,    36,  1929,  1645,\n     1645,  1645,  1645,  2887,  2086,  1645,  1645,  1645,  1645,  1645,\n     1645,  1645,  1645,  1645,  1645,  1143,  2982,  2983,  2383,  2474,\n      977,  2043,  1146,  2966,   990,  3005,   978,  2400,  1148,  2409,\n@@ -4018,31 +4018,31 @@ static const yytype_int16 yytable[] =\n      724,   563,   800,    61,   956,   576,   958,  1138,  1158,  1645,\n     1645,  2228,  2229,  2341,  2556,  2365,  2559,  2199,  2168,   983,\n      479,  2169,   479,  3015,  1160,   479,   479,  2209,   977,   979,\n-      61, -1742, -1742,   636,   978,   479,   634,   479,   479,   479,\n+      61, -1743, -1743,   636,   978,   479,   634,   479,   479,   479,\n      479,   479,   479,   479,   992,  2086,  1162,    26,  1167,  2670,\n      635,   638,  1627,  1628,  1629,  3019,  1630,  1631,  1632,  1633,\n     1634,  1635,  1171,   479,  2363,   479,  1175,  2364,   980,  1174,\n-     730,   479,   479,   479,   479,  1138, -1743, -1743,  2368,   479,\n+     730,   479,   479,   479,   479,  1138, -1744, -1744,  2368,   479,\n      479,  2369,   979,    31,   479,  1177,   984,  2485,   479,  1178,\n     1882,   479,   479,   479,   479,   479,   479,   479,   479,   479,\n     2504,  1194,   479,  2505,  1578,  2524,  2675,   479,  1595,  1595,\n      479,   479,  1195,  2742,  1052,  2045,  2743,  1138,  2770,  1007,\n-    2046,  1882,  2673,   982,    33, -1756, -1756, -1756,  2335,  2002,\n+    2046,  1882,  2673,   982,    33, -1757, -1757, -1757,  2335,  2002,\n     2003,  2004,  2005,  2006,  2007,   993,   479,    34,  2798,  2747,\n      979,  1595,  2335,   728,  1197,   933,  2801,   980,  2818,  2802,\n     2121,  2819,  2822,  1008,  1225,  2819,  1228,   479,  1765,  1735,\n     1231,    35,  1232,   719,  2837,    57,  1234,  2838,   479,   479,\n-   -1744, -1744,  1235,   594,  2450,    36,  1598,  1253,  2408,   724,\n+   -1745, -1745,  1235,   594,  2450,    36,  1598,  1253,  2408,   724,\n      804,  2877,   980,  1263,  2838,   994,  2598,  1264,  2878,  1266,\n      721,  1595,    57,   995,  2890,  2284,  2911,  2819,  1011,  2912,\n      730,  1268,   982,  -689,  2336,   996,  1138,  1619,  1138,  2796,\n-    2936,   728,  2586,  2937, -1746, -1746,  2975,  1822,  2336,  2819,\n-     984,  2995, -1747, -1747,  2838, -1748, -1748,   722,  -696,   728,\n-    2546,   719,  1012,  1810,  2601,   980,   997,   982,  2337, -1749,\n-   -1749, -1750, -1750,  2234,  2546, -1751, -1751,  1052,  1271,   719,\n+    2936,   728,  2586,  2937, -1747, -1747,  2975,  1822,  2336,  2819,\n+     984,  2995, -1748, -1748,  2838, -1749, -1749,   722,  -696,   728,\n+    2546,   719,  1012,  1810,  2601,   980,   997,   982,  2337, -1750,\n+   -1750, -1751, -1751,  2234,  2546, -1752, -1752,  1052,  1271,   719,\n      479,   479,  2337,   479,  2338,   728,  1693,  1273,   721,   977,\n-    1598,  2047,   728,  2339,  -686,   978,  1272,   983,  2338, -1753,\n-   -1753,  1138,  2048, -1755, -1755,   719,   721,  2339,  1496,  1497,\n+    1598,  2047,   728,  2339,  -686,   978,  1272,   983,  2338, -1754,\n+   -1754,  1138,  2048, -1756, -1756,   719,   721,  2339,  1496,  1497,\n     2797,  1274,   719,   999,   479,  2251,   728,  1799,  1800,   479,\n      982,  2350,  2603,   980,  1275,   722,  1911,  2340,    36,   984,\n     1750,  1277,   721,  2258,   730,  1000,   719,  -547,  -547,   721,\n@@ -4108,12 +4108,12 @@ static const yytype_int16 yytable[] =\n     2544,  2550,  2560,  2566,   820,  2565,   492,  1992,   493,   728,\n     2567,  2568,  1993,  1994,  1995,  2570,  2581,  2450,   721,  1138,\n     2587,  2588,  2589,  1138,  2457,  1138,  2593,  2404,  2617,   719,\n-     495,  2618,  2622,   496,  2635,  2634, -1092, -1729,  2645, -1730,\n-     728, -1731,   926,   728, -1732,  2453, -1733,  2636,   993, -1734,\n-   -1735,   993, -1736,  1587, -1737,   722,   721,  1298,  2880,  2643,\n-     719,  1588,  2647,   719, -1738, -1739, -1740, -1741,  2478,  2648,\n-   -1742,  2910, -1743, -1744,   973, -1746, -1747, -1748,  2661, -1749,\n-   -1750,  2664, -1751, -1752, -1753,   730, -1754,   721,  1298, -1755,\n+     495,  2618,  2622,   496,  2635,  2634, -1092, -1730,  2645, -1731,\n+     728, -1732,   926,   728, -1733,  2453, -1734,  2636,   993, -1735,\n+   -1736,   993, -1737,  1587, -1738,   722,   721,  1298,  2880,  2643,\n+     719,  1588,  2647,   719, -1739, -1740, -1741, -1742,  2478,  2648,\n+   -1743,  2910, -1744, -1745,   973, -1747, -1748, -1749,  2661, -1750,\n+   -1751,  2664, -1752, -1753, -1754,   730, -1755,   721,  1298, -1756,\n      721,  2662,  2496,   722, -1093,  2891,  2667,  2893,   994,  2668,\n     2671,   994,   479,  2324,  1589,  2327,   995,  2672,  2686,   995,\n     1153,  1155,  1157,  2699,  2820,  2726,  2704,  2820,   996,  2722,\n@@ -4121,12 +4121,12 @@ static const yytype_int16 yytable[] =\n     2739,  2744,  2757,  1999,  2000,  2001,  2756,  2002,  2003,  2004,\n     2005,  2006,  2007,  2758,  2759,  2760,  2767,  2769,  2774,   997,\n      479,   479,   997,  2775,  2776,   479,   730,  2963,  2858,  1322,\n-     479,   585,  2803,   479,   479,  2848, -1756,   646,   479,  2789,\n+     479,   585,  2803,   479,   479,  2848, -1757,   646,   479,  2789,\n      647,  2790,  2799,  2811,   585,  2812,  2827,  2813,  2815,   506,\n     2823,  2825,  2831,  2834,  2839,  2853,  2857,  2859,   479,  2084,\n     2868,  1324,   479,  2084,  2862,   724,   999,  2873,  2874,   999,\n     2455,  2875,  2879,  1198,  1199,  2883,   647,   506,   506,  2884,\n-    2892,  2895,  2896, -1756,   479,  2898,  2909,  2913,  1000,  2752,\n+    2892,  2895,  2896, -1757,   479,  2898,  2909,  2913,  1000,  2752,\n     2915,  1000,  2916,   551,  2918,  2193,  2921,    57,  2922,  2923,\n      476,  2927,  2574,  2576,   476,  2928,  2945,  2905,  1002,  2929,\n     2218,  1002,   914,   914,   559,   559,  2938,   559,  1138,  2534,\n@@ -4134,12 +4134,12 @@ static const yytype_int16 yytable[] =\n     2974,  2040,  2977,   724,   725,  2986,   730,   506,  2979,  2997,\n      719,  2989,  2991,  2987,  2988,  3013,  3002,  3003,   585,  1200,\n     1201,   724,  1998,  3014,  3016,  3021,  2415,   948,  2411,  1842,\n-     585,  2155, -1756,  2370,  2904,  2727,  2457,   721,  2949,  2486,\n-    2577,  2625,  2955,  3011,  2852,  2992,  2985,   724, -1756,  2788,\n-    1443,  2139,  2162, -1756,   724,  2491,  2951,  2416,  2990,  2135,\n+     585,  2155, -1757,  2370,  2904,  2727,  2457,   721,  2949,  2486,\n+    2577,  2625,  2955,  3011,  2852,  2992,  2985,   724, -1757,  2788,\n+    1443,  2139,  2162, -1757,   724,  2491,  2951,  2416,  2990,  2135,\n     2950,  1538,  1559,  2236,  2453,  2195,   585,   585,   585,  2669,\n     1384,  1422,  2475,  1808,   722,  1423,  1365,  2119,   724,  2886,\n-    2900,  2980,  2129,  1202,  1203,  1204,  1205,  1206,  1207, -1756,\n+    2900,  2980,  2129,  1202,  1203,  1204,  1205,  1206,  1207, -1757,\n     1785,  1208,  1209,  2356,  2941,  2894,  -458,  2571,  2653,   803,\n     2833,  1807,  2097,  2077,  1427,   479,  2329,  2077,   730,  2817,\n     -458,   479,  2325,  2542,  2882,  -458,  2558,  2881,  2888,  2725,\n@@ -4154,7 +4154,7 @@ static const yytype_int16 yytable[] =\n        0,     0,  2379,     0,     0,     0,     0,     0,     0,     0,\n     1486,     0,     0,     0,     0,   476,     0,  1999,  2000,  2001,\n        0,  2002,  2003,  2004,  2005,  2006,  2007,  2413,  2457,     0,\n-       0,  1265,  -458,     0,  1198,  1199, -1756,     0,     0,     0,\n+       0,  1265,  -458,     0,  1198,  1199, -1757,     0,     0,     0,\n        0,  -458,  2460,  2461,  2462,  2463,  2464,  2465,  2466,  2467,\n     2468,  2469,     0,     0,  2649,  2772,     0,    57,     0,     0,\n      724,   479,  2084,     0,     0,   479,   730,     0,     0,  1648,\n@@ -4163,8 +4163,8 @@ static const yytype_int16 yytable[] =\n        0,     0,   597,   479,  2084,     0,     0,   730,  1304,     0,\n      730,     0,     0,   476,     0,     0,   479,     0,  1212,  1213,\n     1200,  1201,     0,     0,     0,     0,     0,     0,  1322,   727,\n-     479,  2077,     0,   479,     0, -1756,  2077,     0,  1214,  2077,\n-       0,   724,     0,  1138,     0,   476, -1756,  1138,   479,     0,\n+     479,  2077,     0,   479,     0, -1757,  2077,     0,  1214,  2077,\n+       0,   724,     0,  1138,     0,   476, -1757,  1138,   479,     0,\n     2724,   585,  1246,  1340,  1341,  1342,  1343,  1344,  1345,  1246,\n     1324,  1519,     0,     0,     0,     0,  1562,     0,     0,   506,\n      506,   820,     0,     0,  1992,   585,   585,  1391,     0,  1993,\n@@ -4176,12 +4176,12 @@ static const yytype_int16 yytable[] =\n     2050,   479,   585,     0,     0,   479,   585,     0,     0,     0,\n        0,     0,   479,  2084,     0,  1568,  1312,    57,   476,     0,\n        0,   724,     0,   630,  2901,     0,   946,   631,     0,     0,\n-       0, -1756,     0,   479,     0,     0,     0,     0,  1996,     0,\n-       0,  1246,     0,  1246,  1246,     0,   725, -1756,  2077,     0,\n-       0,   724, -1756,   479,   476,     0,     0,     0,     0,     0,\n+       0, -1757,     0,   479,     0,     0,     0,     0,  1996,     0,\n+       0,  1246,     0,  1246,  1246,     0,   725, -1757,  2077,     0,\n+       0,   724, -1757,   479,   476,     0,     0,     0,     0,     0,\n     1997,  1298,     0,     0,     0,     0,   479,     0,  1210,  1211,\n        0,     0,     0,     0,     0,   727,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1138,  2457, -1756,     0,\n+       0,     0,     0,     0,     0,     0,  1138,  2457, -1757,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   479,  2084,     0,   479,   479,     0,     0,\n        0,  1246,  2964,     0,  1246,  1246,     0,     0,     0,  2864,\n@@ -4196,7 +4196,7 @@ static const yytype_int16 yytable[] =\n        0,  1200,  1201,     0,     0,     0,  1648,  1648,  1803,     0,\n        0,  1648,     0,     0,     0,     0,     0,     0,     0,  1998,\n        0,   647,   647,     0,   506,   506,     0,   506,   647,     0,\n-       0,   585,     0,   725,   725, -1756,     0,     0,     0,     0,\n+       0,   585,     0,   725,   725, -1757,     0,     0,     0,     0,\n        0,     0,     0,   724,     0,     0,     0,     0,   725,     0,\n     2746,     0,  1648,  1648,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,  2455,     0,  1202,  1203,  1204,  1205,  1206,\n@@ -4206,10 +4206,10 @@ static const yytype_int16 yytable[] =\n        0,     0,  2777,     0,     0,     0,  1546,     0,  1547,     0,\n        0,     0,   724,     0,     0,   724,     0,  1553,     0,     0,\n      647,     0,     0,     0,  1999,  2000,  2001,     0,  2002,  2003,\n-    2004,  2005,  2006,  2007,  1554, -1756,     0,     0,     0,     0,\n+    2004,  2005,  2006,  2007,  1554, -1757,     0,     0,     0,     0,\n        0,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,\n        0,     0,     0,   914,   585,     0,     0,     0,     0,     0,\n-       0,   727,  1573,  1575,     0,     0,     0,     0, -1534,     0,\n+       0,   727,  1573,  1575,     0,     0,     0,     0, -1535,     0,\n        0,     0,   725,  1997,     0,   585,     0,   585,  2835,  1210,\n     1211,     0,     0,     0,     0,     0,  1767,     0,  1773,     0,\n        0,     0,     0,     0,  1606,  1607,     0,     0,  1620,  1621,\n@@ -4218,58 +4218,58 @@ static const yytype_int16 yytable[] =\n     2004,  2005,  2006,  2007,   585,     0,     0,     0,     0,     0,\n        0,     0,     0,  1446,   506,     0,     0,     0,     0,     0,\n        0,     0,  1998,     0,   506,  1824,   506,  1828,     0,   506,\n-       0,     0, -1536,     0,     0,   506,     0,   506,     0,     0,\n-       0, -1534,     0,     0,     0,     0,     0,     0,   647,   506,\n+       0,     0, -1537,     0,     0,   506,     0,   506,     0,     0,\n+       0, -1535,     0,     0,     0,     0,     0,     0,   647,   506,\n        0,     0,     0,   647,   506,     0,     0,     0,   506,   506,\n      506,   506,     0,   506,   506,     0,     0,     0,     0,     0,\n     1212,  1213,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   725,   585,   585,  1891,     0,     0,     0,     0,\n-       0,     0,     0, -1534,     0,     0,     0,     0,  2069,     0,\n-    1906,     0,   724,     0,     0,     0,     0, -1534,     0,     0,\n-       0,     0, -1534,     0,  1797,  1797,     0, -1534,     0,     0,\n-       0,     0,     0,     0,  1315, -1536, -1534,  1316,   727,   727,\n-   -1534,     0,  1317,  1318,  1319,     0,     0,     0,  1648,  1648,\n+       0,     0,     0, -1535,     0,     0,     0,     0,  2069,     0,\n+    1906,     0,   724,     0,     0,     0,     0, -1535,     0,     0,\n+       0,     0, -1535,     0,  1797,  1797,     0, -1535,     0,     0,\n+       0,     0,     0,     0,  1315, -1537, -1535,  1316,   727,   727,\n+   -1535,     0,  1317,  1318,  1319,     0,     0,     0,  1648,  1648,\n     1648,  1648,     0,   727,  1648,  1648,  1648,  1648,  1648,  1648,\n     1648,  1648,  1648,  1648,     0,     0,     0,  1322,     0,   820,\n-       0, -1534,  1992,     0,  1323,     0,  1246,  1993,  1994,  1995,\n-       0,     0,     0,     0,     0,     0,  1246, -1536,     0,  1246,\n-   -1534,     0,     0,     0,  2526,     0,   725,     0,     0,  1324,\n-       0, -1536,     0,     0,     0,     0, -1536,     0,  1648,  1648,\n-       0, -1536,     0,     0,     0,     0,     0,     0,     0,     0,\n-   -1536,     0,     0,     0, -1536,     0,     0,  1999,  2000,  2001,\n-       0,  2002,  2003,  2004,  2005,  2006,  2007,     0,     0, -1534,\n-       0,   725, -1534,     0,     0,     0,     0,     0, -1534,   506,\n-       0,     0,     0,     0,     0, -1536,  1304,  2196,     0,     0,\n+       0, -1535,  1992,     0,  1323,     0,  1246,  1993,  1994,  1995,\n+       0,     0,     0,     0,     0,     0,  1246, -1537,     0,  1246,\n+   -1535,     0,     0,     0,  2526,     0,   725,     0,     0,  1324,\n+       0, -1537,     0,     0,     0,     0, -1537,     0,  1648,  1648,\n+       0, -1537,     0,     0,     0,     0,     0,     0,     0,     0,\n+   -1537,     0,     0,     0, -1537,     0,     0,  1999,  2000,  2001,\n+       0,  2002,  2003,  2004,  2005,  2006,  2007,     0,     0, -1535,\n+       0,   725, -1535,     0,     0,     0,     0,     0, -1535,   506,\n+       0,     0,     0,     0,     0, -1537,  1304,  2196,     0,     0,\n        0,  1931,  1933,     0,     0,     0,     0,  2207,  2208,  2210,\n-       0,     0,     0,     0, -1536,     0,     0,   727,     0,     0,\n-       0,     0, -1534,     0,     0,     0,     0,  2224,  1246,     0,\n+       0,     0,     0,     0, -1537,     0,     0,   727,     0,     0,\n+       0,     0, -1535,     0,     0,     0,     0,  2224,  1246,     0,\n     1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1325,  1246,     0,     0,     0, -1534,     0,     0,     0,     0,\n+    1325,  1246,     0,     0,     0, -1535,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,  1326,  1568,     0,     0,\n-       0,  1327,     0, -1536,   585,     0, -1536,     0,     0,     0,\n-    2087,     0, -1536,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0, -1756, -1756,  2087,     0,     0,     0,  2106,\n+       0,  1327,     0, -1537,   585,     0, -1537,     0,     0,     0,\n+    2087,     0, -1537,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1757, -1757,  2087,     0,     0,     0,  2106,\n        0,     0,  2109,     0,  1773,     0,     0,  1330,     0,  1315,\n-    2070,     0,  1316,     0,     0,     0, -1536, -1756, -1756, -1756,\n+    2070,     0,  1316,     0,     0,     0, -1537, -1757, -1757, -1757,\n        0,     0,     0,     0,     0,     0,   820,     0,  1997,  1992,\n-       0,     0,     0,     0,  1993,  1994,  1995, -1534,     0, -1536,\n-       0,     0,  1322,     0,     0, -1534,     0,     0, -1756,  1323,\n+       0,     0,     0,     0,  1993,  1994,  1995, -1535,     0, -1537,\n+       0,     0,  1322,     0,     0, -1535,     0,     0, -1757,  1323,\n        0,  2527,     0,     0,     0,     0,  1503,   727,     0,     0,\n-       0, -1534,  1333, -1534, -1534,     0,     0,     0,     0,     0,\n+       0, -1535,  1333, -1535, -1535,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,  2321,  2322,  2323,  2070,     0,     0,  1998,     0,     0,\n-   -1534,     0,     0, -1534, -1534, -1534,     0,     0,     0,  2093,\n+   -1535,     0,     0, -1535, -1535, -1535,     0,     0,     0,  2093,\n        0,     0,     0,     0,     0,     0,     0,     0,  1503,     0,\n-       0, -1536,     0,   585,     0,     0,     0,     0,     0, -1536,\n+       0, -1537,     0,   585,     0,     0,     0,     0,     0, -1537,\n        0,     0,  1503,   585,   585,   585,     0,     0,     0,     0,\n-       0,     0,     0,  2125,  2125, -1536,   506, -1536, -1536,     0,\n+       0,     0,     0,  2125,  2125, -1537,   506, -1537, -1537,     0,\n     2378,     0,     0,   585,  1335,     0,     0,     0,     0,     0,\n        0,   727,     0,     0,     0,  2231,     0,     0,  1315,     0,\n        0,  1316,     0,     0,     0,  1325,     0,     0,     0,     0,\n-       0,   647,     0,   585, -1536,     0,     0, -1536, -1536, -1536,\n+       0,   647,     0,   585, -1537,     0,     0, -1537, -1537, -1537,\n        0,  1326,     0,     0,     0,     0,  1327,     0,  1503,  1503,\n-       0,  1322,   725,     0,     0,     0,   727,     0, -1756,     0,\n+       0,  1322,   725,     0,     0,     0,   727,     0, -1757,     0,\n        0,     0,     0,     0,     0,     0,  1315,     0,     0,  1316,\n        0,  1638,  2482,     0,  1317,  1318,  1319,     0,     0,     0,\n        0,     0,  1330,  1324,     0,  1997,     0,     0,     0,     0,\n@@ -4282,13 +4282,13 @@ static const yytype_int16 yytable[] =\n     2006,  2007,     0,  2306,  1998,     0,     0,   585,   585,   585,\n      477,     0,  2087,  2333,   725,     0,  1648,     0,  2333,  2347,\n        0,   725,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0, -1756,     0,     0,  2537,  2538,  2539,\n+       0,     0,     0,     0, -1757,     0,     0,  2537,  2538,  2539,\n     2540,     0,     0,     0,     0,   725,     0,     0,  1773,     0,\n-   -1756,     0,     0,     0,     0, -1756,     0,     0,     0,     0,\n+   -1757,     0,     0,     0,     0, -1757,     0,     0,     0,     0,\n        0,     0,     0,     0,   897,   897,   585,     0,   506,     0,\n        0,     0,  1503,  1446,  1503,     0,  1533,     0,     0,  1335,\n        0,     0,  1325,     0,     0,     0,     0,     0,     0,     0,\n-       0, -1756,     0,   506,     0,  2414,     0,     0,  1326,     0,\n+       0, -1757,     0,   506,     0,  2414,     0,     0,  1326,     0,\n        0,     0,     0,  1327,     0,     0,  1648,     0,   506,   506,\n      506,   506,   506,   506,   506,   506,   506,   506,     0,     0,\n        0,     0,     0,     0,     0,  1328,  1329,  1047,  1054,     0,\n@@ -4297,12 +4297,12 @@ static const yytype_int16 yytable[] =\n        0,     0,     0,     0,     0,     0,     0,     0,     0,  1533,\n        0,     0,     0,     0,     0,     0,   725,     0,     0,     0,\n        0,   585,     0,     0,     0,     0,  1648,  1331,  1503,  1336,\n-    1332,     0, -1756, -1756, -1756,     0,  1340,  1341,  1342,  1343,\n+    1332,     0, -1757, -1757, -1757,     0,  1340,  1341,  1342,  1343,\n     1344,  1345,     0,     0,  1333,     0,     0,  1334,     0,  1999,\n     2000,  2001,     0,  2002,  2003,  2004,  2005,  2006,  2007,     0,\n        0,     0,     0,     0,     0,     0,     0,   727,     0,     0,\n        0,     0,   506,     0,     0,     0,     0,   725,  2519,     0,\n-    1246,     0,     0,     0,     0,     0,     0,     0, -1756,  1315,\n+    1246,     0,     0,     0,     0,     0,     0,     0, -1757,  1315,\n        0,     0,  1316,     0,     0,     0,     0,  1317,  1318,  1319,\n        0,  2536,     0,   585,   585,   585,   585,     0,     0,     0,\n     2333,  2347,     0,  2333,  1320,     0,  2545,     0,     0,     0,\n@@ -4312,7 +4312,7 @@ static const yytype_int16 yytable[] =\n     2106,   487,     0,   727,  1324,  1773,     0,     0,  1047,     0,\n        0,  1638,     0,     0,     0,     0,     0,  1446,     0,     0,\n        0,     0,     0,  1503, -1141,  1269,     0,     0,  2754,   727,\n-       0,     0,     0,     0,     0,     0,   727,     0, -1756,     0,\n+       0,     0,     0,     0,     0,     0,   727,     0, -1757,     0,\n        0,     0,     0,  2626,     0,  1340,  1341,  1342,  1343,  1344,\n     1345,     0,     0,     0,  1280,     0,     0,     0,     0,     0,\n      727,   488,     0,     0,     0,     0,  2773,     0,   489,     0,\n@@ -4323,59 +4323,59 @@ static const yytype_int16 yytable[] =\n        0,     0,  1503,     0,     0,   490,     0,     0,     0,     0,\n        0,  1326,     0,  1906,     0,     0,  1327,     0,     0,     0,\n        0,     0,     0,     0,  2665,     0,     0,     0,   725,     0,\n-       0,     0,     0,     0,     0,     0,     0, -1550,  1328,  1329,\n+       0,     0,     0,     0,     0,     0,     0, -1551,  1328,  1329,\n        0,  1315,     0,     0,  1316,  1399,     0,  2844,     0,  1413,\n     1418,  1246,  1330,     0,     0,     0,  1246,     0,     0,     0,\n     2681,     0,     0,     0,     0,     0,     0,     0,     0,   477,\n     2333,   727,     0,  2692,  1322,   491,   506,     0,  2087,     0,\n-       0, -1756,     0,  2087,  2869,     0,  2087,     0,  2703,     0,\n+       0, -1757,     0,  2087,  2869,     0,  2087,     0,  2703,     0,\n     1331,  2706,     0,  1332,     0,     0,     0,     0,  1573,  1575,\n      725,     0,     0,  1047,     0,  2733,  1324,  1333,     0,     0,\n     1047,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   492,     0,   493,   647,   506,     0,     0,     0,\n-   -1550,  1047,   727,     0,   585,     0,     0,     0,     0,     0,\n+   -1551,  1047,   727,     0,   585,     0,     0,     0,     0,     0,\n      494,     0,     0,     0,  1348,     0,   495,     0,     0,   496,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   506,   506,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   585,     0,  1446,     0,  2309,     0,   506,     0,\n-       0,     0, -1550,     0,     0,  1348,     0,     0,     0,     0,\n-     585,     0,     0,  2733,     0,     0, -1550,     0,     0,  1335,\n-       0, -1550,     0,   727,     0,     0, -1550, -1756,     0,     0,\n-       0,     0,   506,     0,     0, -1550,     0,     0,     0, -1550,\n-     725,     0,     0, -1756,     0,  2087,     0,     0, -1756,     0,\n+       0,     0, -1551,     0,     0,  1348,     0,     0,     0,     0,\n+     585,     0,     0,  2733,     0,     0, -1551,     0,     0,  1335,\n+       0, -1551,     0,   727,     0,     0, -1551, -1757,     0,     0,\n+       0,     0,   506,     0,     0, -1551,     0,     0,     0, -1551,\n+     725,     0,     0, -1757,     0,  2087,     0,     0, -1757,     0,\n     2706,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,  1047,     0,  2830,     0,\n-   -1550,     0,   914,     0,   506,     0,     0,     0,   725,     0,\n-       0,     0,     0,   585, -1756,     0,     0,     0,     0, -1550,\n+   -1551,     0,   914,     0,   506,     0,     0,     0,   725,     0,\n+       0,     0,     0,   585, -1757,     0,     0,     0,     0, -1551,\n        0,     0,     0,  1573,  1575,     0,     0,     0,     0,     0,\n        0,     0,   506,     0,  1246,     0,   647,     0,     0,   725,\n        0,     0,   725,     0,  1348,     0,     0,     0,     0,  1336,\n      585,  1348,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,\n-    1344,  1345,     0,   727,     0,     0,     0,     0, -1550,  1333,\n-       0, -1550,     0,     0,     0,     0,     0, -1550,   477,     0,\n+    1344,  1345,     0,   727,     0,     0,     0,     0, -1551,  1333,\n+       0, -1551,     0,     0,     0,     0,     0, -1551,   477,     0,\n     1315,     0,     0,  1316,     0,     0,     0,  2885,     0,     0,\n        0,   506,     0,   727,     0,  2703,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,  1603,\n-       0, -1550,     0,  1322,  2733,   647,   647,   647,     0,  1622,\n-   -1756,  1639,     0,     0,  1651,  1654,  1659,  1662,     0,     0,\n-       0,     0,     0,     0, -1550,     0,     0,     0,     0,     0,\n+       0, -1551,     0,  1322,  2733,   647,   647,   647,     0,  1622,\n+   -1757,  1639,     0,     0,  1651,  1654,  1659,  1662,     0,     0,\n+       0,     0,     0,     0, -1551,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,  1446,  1324,     0,     0,     0,  1674,\n        0,     0,     0,     0,     0,  1678,  1679,  1680,  1681,  2703,\n-       0, -1756,     0,  1690,  1691,   727,     0,     0,  1702,     0,\n+       0, -1757,     0,  1690,  1691,   727,     0,     0,  1702,     0,\n        0,  2830,  1705,     0,     0,  1713,  1714,  1715,  1716,  1717,\n     1718,  1719,  1720,  1721,     0,  1773,  1722,     0,     0,  2070,\n        0,  1730,     0,     0,  1734,   897,     0,     0,  1047,  1446,\n        0,     0,     0,     0,     0,  2733,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2310, -1550,     0,     0,     0,\n-    1756,  2692,   647,     0, -1550,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  2310, -1551,     0,     0,     0,\n+    1756,  2692,   647,     0, -1551,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   990,     0,     0,     0,\n-   -1550,     0, -1550, -1550,     0,     0, -1756,     0,     0,   725,\n+   -1551,     0, -1551, -1551,     0,     0, -1757,     0,     0,   725,\n        0,     0,  1291,  1292,     0,   991,     0,     0,     0,     0,\n-       0, -1756, -1756,     0,     0,     0,  1348, -1756,  1340,  1341,\n-    1342,  1343,  1344,  1345,     0,     0,     0,  1348,     0, -1550,\n-       0,  1646, -1550, -1550, -1550,   727,     0,  1348,  1348,  1348,\n+       0, -1757, -1757,     0,     0,     0,  1348, -1757,  1340,  1341,\n+    1342,  1343,  1344,  1345,     0,     0,     0,  1348,     0, -1551,\n+       0,  1646, -1551, -1551, -1551,   727,     0,  1348,  1348,  1348,\n        0,     0,     0,     0,     0,     0,  1348,     0,     0,     0,\n-       0,     0,     0, -1756,     0,     0,   992,  2402,     0,     0,\n+       0,     0,     0, -1757,     0,     0,   992,  2402,     0,     0,\n        0,     0,     0,  1246,     0,  2403,     0,     0,     0,     0,\n        0,     0,     0,   727,     0,     0,     0,     0,     0,     0,\n        0,  1047,     0,     0,  1875,  1876,     0,  1877,     0,     0,\n@@ -4390,17 +4390,17 @@ static const yytype_int16 yytable[] =\n        3,     4,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,  1047,     0,     0,     0,     0,     5,     0,  1970,     0,\n        0,     0,     0,  1976,     0,     6,     0,   994,     0,     0,\n-   -1756,     0,     0,     0,     0,   995,     0,     7,     0,     0,\n+   -1757,     0,     0,     0,     0,   995,     0,     7,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   996,     8,  2405,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        9,  1991,    10,  1315,     0,     0,  1316,     0,     0,     0,\n        0,     0,     0,  1659,     0,  1659,  1659,     0,   997,     0,\n       11,     0,     0,  2029,     0,     0,     0,  2032,     0,     0,\n     2034,     0,     0,     0,    12,     0,  1322,     0,     0,     0,\n-       0,     0,     0, -1756,    13,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1757,    13,     0,     0,     0,     0,     0,\n       14,     0,     0,     0,     0,     0,     0,     0,    15,     0,\n       16,    17,     0,     0,  2052,   999,     0,  2055,  1324,  2057,\n-   -1756,     0,     0,     0,    18,     0,     0,  1340,  1341,  1342,\n+   -1757,     0,     0,     0,    18,     0,     0,  1340,  1341,  1342,\n     1343,  1344,  1345,     0,   727,     0,     0,  1000,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,    19,     0,     0,     0,  1002,     0,  2406,\n@@ -4409,13 +4409,13 @@ static const yytype_int16 yytable[] =\n        0,     0,     0,     0,     0,     0,  1399,     0,  2530,  1348,\n        0,     0,     0,    21,  1315,     0,     0,  1316,     0,     0,\n        0,  1418,  1720,     0,     0,     0,  1348,     0,  1646,  1646,\n-       0,  2008,     0,  1646,     0,     0,     0,     0,  1348, -1756,\n+       0,  2008,     0,  1646,     0,     0,     0,     0,  1348, -1757,\n     2133,  1348,     0,     0,     0,     0,  1348,  1322,     0,  1348,\n-       0,     0,     0,     0, -1756, -1756,     0,     0,     0,     0,\n-   -1756,  1348,     0,     0,     0,  1348,  1348,  1348,  1348,     0,\n+       0,     0,     0,     0, -1757, -1757,     0,     0,     0,     0,\n+   -1757,  1348,     0,     0,     0,  1348,  1348,  1348,  1348,     0,\n        0,     0,     0,     0,  1646,  1646,     0,  1348,  1348,  1324,\n        0,     0,     0,     0,  1454,     0,     0,     0,     0,  1348,\n-      22,     0,  1348,    23,     0,     0, -1756,     0,  1047,     0,\n+      22,     0,  1348,    23,     0,     0, -1757,     0,  1047,     0,\n     1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,\n        0,     0,     0,     0,     0,     0,     0,  1348,     0,     0,\n        0,  1348,    24,     0,     0,     0,     0,     0,     0,     0,\n@@ -4424,13 +4424,13 @@ static const yytype_int16 yytable[] =\n        0,  1333,    27,     0,     0,     0,    28,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,    29,   991,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,    30,     0,     0,\n-   -1756,    31,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0, -1756,     0,     0,  2249,\n-       0, -1756,     0,     0,     0,     0,     0,     0,  2253,     0,\n+   -1757,    31,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0, -1757,     0,     0,  2249,\n+       0, -1757,     0,     0,     0,     0,     0,     0,  2253,     0,\n        0,  2254,     0,     0,  2256,     0,     0,    32,   992,     0,\n        0,     0,    33,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,    34,     0, -1756,     0,     0,\n-    2276,  2277,     0, -1756,  1756,     0,     0,   979,     0,     0,\n+       0,     0,     0,     0,     0,    34,     0, -1757,     0,     0,\n+    2276,  2277,     0, -1757,  1756,     0,     0,   979,     0,     0,\n        0,     0,     0,     0,     0,     0,  2288,     0,     0,    35,\n        0,     0,  1348,  1348,  1348,  2295,     0,     0,  2298,     0,\n     2300,     0,     0,    36,     0,     0,   -39,     0,  2304,     0,\n@@ -4440,11 +4440,11 @@ static const yytype_int16 yytable[] =\n        0,     0,     0,     0,     0,     0,  2351,     0,     0,     0,\n     1320,     0,     0,  1321,     0,     0,  2359,     0,  1322,     0,\n        0,     0,     0,     0,     0,  1323,     0,     0,     0,     0,\n-       0,     0,  2372, -1756,     0,     0,     0,     0,     0,     0,\n+       0,     0,  2372, -1757,     0,     0,     0,     0,     0,     0,\n     1340,  1341,  1342,  1343,  1344,  1345,     0,  1348,     0,   994,\n     1324,     0,     0,  1348,     0,     0,     0,   995,     0,     0,\n        0,     0,     0,     0,     0,     0,  2008,  2008,  1348,   996,\n-    1646,  1646,  1646,  1646, -1756,     0,  1646,  1646,  1646,  1646,\n+    1646,  1646,  1646,  1646, -1757,     0,  1646,  1646,  1646,  1646,\n     1646,  1646,  1646,  1646,  1646,  1646,  2008,     0,     0,     0,\n      980,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      997,     0,     0,     0,     0,     0,  1348,     0,     0,  1348,\n@@ -4454,7 +4454,7 @@ static const yytype_int16 yytable[] =\n        0,   998,     0,     0,     0,   982,     0,   999,     0,     0,\n        0,  1325,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,  2507,  1326,     0,  1000,\n-       0,     0,  1327,     0, -1756,  1001,     0,     0,     0,     0,\n+       0,     0,  1327,     0, -1757,  1001,     0,     0,     0,     0,\n        0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,  1002,\n        0,     0,     0,     0,  1328,  1329,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,\n@@ -5587,7 +5587,7 @@ static const yytype_int16 yytable[] =\n      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,\n       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,\n      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,\n-     106,     0,   107,   108,   109,   110,   111,   112,   113, -1756,\n+     106,     0,   107,   108,   109,   110,   111,   112,   113, -1757,\n      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,\n      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,\n      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,\n@@ -5600,13 +5600,13 @@ static const yytype_int16 yytable[] =\n      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,\n      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,\n        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,\n-       0,   209,   210,   211,   212, -1756,   214,     0,   215,     0,\n+       0,   209,   210,   211,   212, -1757,   214,     0,   215,     0,\n      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,\n-     225, -1756,   227,   228,   229,   230,     0,   231,   232,   233,\n+     225, -1757,   227,   228,   229,   230,     0,   231,   232,   233,\n      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,\n      243,   244,   849,   850,     0,   851,     0,   248,     0,     0,\n      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,\n-     259,   260, -1756,     0,   262,   263,   264,   852,   853,   265,\n+     259,   260, -1757,     0,   262,   263,   264,   852,   853,   265,\n      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,\n      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,\n@@ -5620,7 +5620,7 @@ static const yytype_int16 yytable[] =\n      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,\n      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,\n-     383,   384,   385,   865,   386,   387,   388,   389,   390, -1756,\n+     383,   384,   385,   865,   386,   387,   388,   389,   390, -1757,\n      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,\n      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,\n        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,\n@@ -5630,7 +5630,7 @@ static const yytype_int16 yytable[] =\n      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,\n      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,\n      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474, -1756,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474, -1757,\n        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,\n        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,\n      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,\n@@ -24791,23 +24791,33 @@ YYLTYPE yylloc;\n #line 46 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n-\t\t\t\tn->name = (char*) \"all\";\n+\t\t\t\tn->name = (char*) \"__show_tables_expanded\";\n \t\t\t\tn->is_summary = 0;\n \t\t\t\t(yyval.node) = (PGNode *) n;\n \t\t\t;}\n     break;\n \n-  case 1251:\n-#line 57 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n-    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n+  case 1249:\n+#line 53 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+    {\n+\t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n+\t\t\t\tn->name = (char*) \"__show_tables_expanded\";\n+\t\t\t\tn->is_summary = 0;\n+\t\t\t\t(yyval.node) = (PGNode *) n;\n+\t\t\t;}\n     break;\n \n   case 1252:\n-#line 59 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n-    { (yyval.str) = psprintf(\"%s.%s\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n+#line 63 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+    { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n   case 1253:\n+#line 65 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+    { (yyval.str) = psprintf(\"%s.%s\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n+    break;\n+\n+  case 1254:\n #line 7 \"third_party/libpg_query/grammar/statements/call.y\"\n     {\n \t\t\t\t\tPGCallStmt *n = makeNode(PGCallStmt);\n@@ -24816,7 +24826,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1254:\n+  case 1255:\n #line 10 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -24831,7 +24841,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1255:\n+  case 1256:\n #line 23 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -24846,7 +24856,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1256:\n+  case 1257:\n #line 36 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -24866,7 +24876,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1257:\n+  case 1258:\n #line 54 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -24886,27 +24896,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1258:\n+  case 1259:\n #line 74 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1259:\n+  case 1260:\n #line 75 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1260:\n+  case 1261:\n #line 76 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}\n     break;\n \n-  case 1261:\n+  case 1262:\n #line 77 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}\n     break;\n \n-  case 1262:\n+  case 1263:\n #line 12 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -24922,7 +24932,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1263:\n+  case 1264:\n #line 25 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -24938,7 +24948,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1264:\n+  case 1265:\n #line 38 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -24954,22 +24964,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1265:\n+  case 1266:\n #line 54 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1266:\n+  case 1267:\n #line 55 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1267:\n+  case 1268:\n #line 56 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1268:\n+  case 1269:\n #line 62 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\t(yyval.into) = makeNode(PGIntoClause);\n@@ -24984,7 +24994,7 @@ YYLTYPE yylloc;\n \n \n /* Line 1267 of yacc.c.  */\n-#line 24988 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 24998 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n       default: break;\n     }\n   YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\ndiff --git a/third_party/sqlsmith/duckdb.cc b/third_party/sqlsmith/duckdb.cc\nindex e1e93a2cda21..86c33309f17f 100644\n--- a/third_party/sqlsmith/duckdb.cc\n+++ b/third_party/sqlsmith/duckdb.cc\n@@ -15,20 +15,20 @@ using namespace std;\n \n static regex e_syntax(\"syntax error at or near .*\");\n \n-duckdb_connection::duckdb_connection(string &conninfo) {\n+sqlsmith_duckdb_connection::sqlsmith_duckdb_connection(string &conninfo) {\n \t// in-memory database\n \tdatabase = make_unique<DuckDB>(nullptr);\n \tconnection = make_unique<Connection>(*database);\n }\n \n-void duckdb_connection::q(const char *query) {\n+void sqlsmith_duckdb_connection::q(const char *query) {\n \tauto result = connection->Query(query);\n \tif (!result->success) {\n \t\tthrow runtime_error(result->error);\n \t}\n }\n \n-schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_connection(conninfo) {\n+schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : sqlsmith_duckdb_connection(conninfo) {\n \t// generate empty TPC-H schema\n \tconnection->Query(\"CALL dbgen(sf=0)\");\n \n@@ -202,7 +202,7 @@ schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_co\n \tgenerate_indexes();\n }\n \n-dut_duckdb::dut_duckdb(std::string &conninfo) : duckdb_connection(conninfo) {\n+dut_duckdb::dut_duckdb(std::string &conninfo) : sqlsmith_duckdb_connection(conninfo) {\n \tcerr << \"Generating TPC-H...\";\n \tconnection->Query(\"CALL dbgen(sf=0.01)\");\n \tcerr << \"done.\" << endl;\ndiff --git a/third_party/sqlsmith/include/duckdb.hh b/third_party/sqlsmith/include/duckdb.hh\nindex 42be70892207..e535c63bb249 100644\n--- a/third_party/sqlsmith/include/duckdb.hh\n+++ b/third_party/sqlsmith/include/duckdb.hh\n@@ -10,23 +10,23 @@\n #include \"relmodel.hh\"\n #include \"schema.hh\"\n \n-struct duckdb_connection {\n+struct sqlsmith_duckdb_connection {\n \tstd::unique_ptr<duckdb::DuckDB> database;\n \tstd::unique_ptr<duckdb::Connection> connection;\n \tchar *zErrMsg = 0;\n \tint rc;\n \tvoid q(const char *query);\n-\tduckdb_connection(std::string &conninfo);\n+\tsqlsmith_duckdb_connection(std::string &conninfo);\n };\n \n-struct schema_duckdb : schema, duckdb_connection {\n+struct schema_duckdb : schema, sqlsmith_duckdb_connection {\n \tschema_duckdb(std::string &conninfo, bool no_catalog);\n \tvirtual std::string quote_name(const std::string &id) {\n \t\treturn id;\n \t}\n };\n \n-struct dut_duckdb : dut_base, duckdb_connection {\n+struct dut_duckdb : dut_base, sqlsmith_duckdb_connection {\n \tvirtual void test(const std::string &stmt);\n \tdut_duckdb(std::string &conninfo);\n };\ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex 436bfbfaab55..7b04a884f6a8 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -408,6 +408,7 @@ JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(double));\n \t\t\tbreak;\n \t\tcase LogicalTypeId::TIMESTAMP:\n+\t\tcase LogicalTypeId::TIMESTAMP_TZ:\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(timestamp_t));\n \t\t\tbreak;\n \t\tcase LogicalTypeId::TIME:\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java\nindex 6a48a980688b..b6ed23c00d36 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java\n@@ -2,5 +2,5 @@\n \n public enum DuckDBColumnType {\n \tBOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, UTINYINT, USMALLINT, UINTEGER, UBIGINT, HUGEINT, FLOAT, DOUBLE,\n-\tDECIMAL, VARCHAR, BLOB, TIME, DATE, TIMESTAMP, TIMESTAMP_WITH_TIMEZONE, INTERVAL, LIST, STRUCT\n+\tDECIMAL, VARCHAR, BLOB, TIME, DATE, TIMESTAMP, TIMESTAMP_WITH_TIME_ZONE, INTERVAL, LIST, STRUCT\n }\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex 17d6e0c5e87e..b353bcd986e1 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -27,6 +27,7 @@\n import java.sql.Types;\n import java.util.Calendar;\n import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n \n public class DuckDBPreparedStatement implements PreparedStatement {\n \tprivate DuckDBConnection conn;\n@@ -170,6 +171,8 @@ public void setObject(int parameterIndex, Object x) throws SQLException {\n \t\t\tx = new DuckDBTimestamp((Timestamp)x);\n \t\t} else if (x instanceof LocalDateTime) {\n \t\t\tx = new DuckDBTimestamp((LocalDateTime) x);\n+\t\t} else if (x instanceof OffsetDateTime) {\n+\t\t\tx = new DuckDBTimestamp((OffsetDateTime) x);\n \t\t}\n \t\tparams[parameterIndex - 1] = x;\n \t}\n@@ -614,10 +617,13 @@ public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQ\n \t\t\t}\n \t\t\tbreak;\n \t\tcase Types.TIMESTAMP:\n+\t\tcase Types.TIMESTAMP_WITH_TIMEZONE:\n \t\t\tif (x instanceof Timestamp) {\n \t\t\t\tsetObject(parameterIndex, x);\n \t\t\t} else if (x instanceof LocalDateTime) {\n \t\t\t\tsetObject(parameterIndex, x);\n+\t\t\t} else if (x instanceof OffsetDateTime) {\n+\t\t\t\tsetObject(parameterIndex, x);\n \t\t\t} else {\n \t\t\t\tthrow new SQLException(\"Can't convert value to timestamp \" + x.getClass().toString());\n \t\t\t}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\nindex 5852a8c0ad00..317cce7d44f5 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n@@ -155,6 +155,8 @@ public Object getObject(int columnIndex) throws SQLException {\n \t\t\treturn getDate(columnIndex);\n \t\tcase TIMESTAMP:\n \t\t\treturn getTimestamp(columnIndex);\n+\t\tcase TIMESTAMP_WITH_TIME_ZONE:\n+\t\t\treturn getOffsetDateTime(columnIndex);\n \t\tcase INTERVAL:\n \t\t\treturn getLazyString(columnIndex);\n \t\tdefault:\n@@ -483,6 +485,17 @@ private LocalDateTime getLocalDateTime(int columnIndex) throws SQLException {\n \t\t}\n \t\treturn null;\n \t}\n+\n+\tprivate OffsetDateTime getOffsetDateTime(int columnIndex) throws SQLException {\n+\t\tif (check_and_null(columnIndex)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n+\t\t\treturn DuckDBTimestamp.toOffsetDateTime(getbuf(columnIndex, 8).getLong());\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n \tstatic class DuckDBBlobResult implements Blob {\n \n \t\tstatic class ByteBufferBackedInputStream extends InputStream {\n@@ -1338,9 +1351,8 @@ public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {\n \t\t\t\tthrow new SQLException(\"Can't convert value to BigInteger \" + type.toString());\n \t\t\t}\n \t\t} else if (type == OffsetDateTime.class) {\n-\t\t\tif (sqlType == DuckDBColumnType.TIMESTAMP_WITH_TIMEZONE) {\n-\t\t\t\tthrow new SQLException(\"Can't convert value to OffsetDateTime \" + type.toString());\n-\t\t\t// return type.cast(getLocalDateTime(columnIndex));\n+\t\t\tif (sqlType == DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE) {\n+\t\t\t\treturn type.cast(getOffsetDateTime(columnIndex));\n \t\t\t} else {\n \t\t\t\tthrow new SQLException(\"Can't convert value to OffsetDateTime \" + type.toString());\n \t\t\t}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\nindex e61e4fc2a2e9..855c2e34fe54 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n@@ -43,6 +43,8 @@ public DuckDBResultSetMetaData(int param_count, int column_count, String[] colum\n \tpublic static DuckDBColumnType TypeNameToType(String type_name) {\n \t\tif (type_name.startsWith(\"DECIMAL\")) {\n \t\t\treturn DuckDBColumnType.DECIMAL;\n+\t\t} else if (type_name.equals(\"TIMESTAMP WITH TIME ZONE\")) {\n+\t\t\treturn DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE;\n \t\t} else {\n \t\t\treturn DuckDBColumnType.valueOf(type_name);\n \t\t}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\nindex 36e4b41f904a..1a031443d9dd 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\n@@ -3,6 +3,7 @@\n import java.sql.Timestamp;\n import java.time.ZoneOffset;\n import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n import java.time.temporal.ChronoUnit;\n \n public class DuckDBTimestamp {\n@@ -22,6 +23,11 @@ public DuckDBTimestamp(LocalDateTime localDateTime) {\n \t\t\tlocalDateTime, ChronoUnit.MICROS);\n \t}\n \n+\tpublic DuckDBTimestamp(OffsetDateTime offsetDateTime) {\n+\t\tthis.timeMicros = DuckDBTimestamp.RefLocalDateTime.until(\n+\t\t\toffsetDateTime.withOffsetSameInstant(ZoneOffset.UTC), ChronoUnit.MICROS);\n+\t}\n+\n \tpublic DuckDBTimestamp(Timestamp sqlTimestamp) {\n \t\tthis.timeMicros = DuckDBTimestamp.RefLocalDateTime.until(\n \t\t\tsqlTimestamp.toLocalDateTime(), ChronoUnit.MICROS);\n@@ -41,6 +47,10 @@ public static LocalDateTime toLocalDateTime(long timeMicros) {\n \t\t\t\t, nanosPartMicros(timeMicros), ZoneOffset.UTC);\n \t}\n \n+\tpublic static OffsetDateTime toOffsetDateTime(long timeMicros) {\n+\t\treturn OffsetDateTime.of(toLocalDateTime(timeMicros), ZoneOffset.UTC);\n+\t}\n+\n \tpublic Timestamp toSqlTimestamp() {\n \t\treturn Timestamp.valueOf(this.toLocalDateTime());\n \t}\n@@ -50,6 +60,11 @@ public LocalDateTime toLocalDateTime() {\n \t\t\t\t, nanosPartMicros(timeMicros), ZoneOffset.UTC);\n \t}\n \n+\tpublic OffsetDateTime toOffsetDateTime() {\n+\t\treturn OffsetDateTime.of(toLocalDateTime(this.timeMicros)\n+\t\t\t\t, ZoneOffset.UTC);\n+\t}\n+\n \tpublic static long getMicroseconds(Timestamp sqlTimestamp) {\n \t\treturn DuckDBTimestamp.RefLocalDateTime.until(\n \t\t\t\tsqlTimestamp.toLocalDateTime(), ChronoUnit.MICROS);\n@@ -64,10 +79,19 @@ public String toString() {\n \t}\n \n \tprivate static long micros2seconds(long micros) {\n-\t\treturn micros / 1000_000L;\n+\t\tif ((micros % 1000_000L) >= 0) {\n+\t\t\treturn micros / 1000_000L;\n+\t\t} else {\n+\t\t\treturn (micros / 1000_000L) -1;\n+\t\t}\n \t}\n \n \tprivate static int nanosPartMicros(long micros) {\n-\t\treturn (int) ((micros % 1000_000L) * 1000);\n+\t\tif ((micros % 1000_000L) >= 0) {\n+\t\t\treturn (int) ((micros % 1000_000L) * 1000);\n+\t\t}\n+\t\telse {\n+\t\t\treturn (int) ((1000_000L + (micros % 1000_000L)) * 1000);\n+\t\t}\n \t}\n }\ndiff --git a/tools/odbc/CMakeLists.txt b/tools/odbc/CMakeLists.txt\nindex 9b429af886df..1db13939f07b 100644\n--- a/tools/odbc/CMakeLists.txt\n+++ b/tools/odbc/CMakeLists.txt\n@@ -43,6 +43,8 @@ add_library(\n   parameter_descriptor.cpp\n   row_descriptor.cpp\n   cursor.cpp\n+  odbc_diagnostic.cpp\n+  odbc_exception.cpp\n   duckdb_odbc.def)\n \n set_target_properties(duckdb_odbc PROPERTIES DEFINE_SYMBOL \"DUCKDB_ODBC_API\")\ndiff --git a/tools/odbc/connection.cpp b/tools/odbc/connection.cpp\nindex 565b7ee85724..bb46f6f00b7f 100644\n--- a/tools/odbc/connection.cpp\n+++ b/tools/odbc/connection.cpp\n@@ -1,11 +1,14 @@\n #include \"driver.hpp\"\n #include \"duckdb_odbc.hpp\"\n #include \"api_info.hpp\"\n+#include \"odbc_diagnostic.hpp\"\n+#include \"odbc_exception.hpp\"\n #include \"odbc_utils.hpp\"\n \n #include \"duckdb/common/helper.hpp\"\n \n using duckdb::OdbcUtils;\n+using duckdb::SQLStateType;\n using std::ptrdiff_t;\n \n SQLRETURN SQL_API SQLGetConnectAttr(SQLHDBC connection_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,\n@@ -418,7 +421,8 @@ SQLRETURN SQL_API SQLGetInfo(SQLHDBC connection_handle, SQLUSMALLINT info_type,\n \t}\n \tcase SQL_DATA_SOURCE_NAME: {\n \t\treturn duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) -> SQLRETURN {\n-\t\t\tduckdb::OdbcUtils::WriteString(dbc->dsn, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);\n+\t\t\tduckdb::OdbcUtils::WriteString(dbc->GetDataSourceName(), (SQLCHAR *)info_value_ptr, buffer_length,\n+\t\t\t                               string_length_ptr);\n \t\t\treturn SQL_SUCCESS;\n \t\t});\n \t}\n@@ -952,8 +956,14 @@ SQLRETURN SQL_API SQLEndTran(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALL\n \t\t\tdbc->conn->Commit();\n \t\t\treturn SQL_SUCCESS;\n \t\tcase SQL_ROLLBACK:\n-\t\t\tdbc->conn->Rollback();\n-\t\t\treturn SQL_SUCCESS;\n+\t\t\ttry {\n+\t\t\t\tdbc->conn->Rollback();\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t} catch (duckdb::Exception &ex) {\n+\t\t\t\tduckdb::DiagRecord diag_rec(std::string(ex.what()), SQLStateType::SQLENDTRAN_ASYNC_FUNCT_EXECUTION,\n+\t\t\t\t                            dbc->GetDataSourceName());\n+\t\t\t\tthrow duckdb::OdbcException(\"SQLEndTran\", SQL_ERROR, diag_rec);\n+\t\t\t}\n \t\tdefault:\n \t\t\treturn SQL_ERROR;\n \t\t}\ndiff --git a/tools/odbc/driver.cpp b/tools/odbc/driver.cpp\nindex fe47ec5eeb80..693f46fe2daa 100644\n--- a/tools/odbc/driver.cpp\n+++ b/tools/odbc/driver.cpp\n@@ -1,5 +1,6 @@\n #include \"duckdb_odbc.hpp\"\n #include \"driver.hpp\"\n+#include \"odbc_diagnostic.hpp\"\n #include \"odbc_fetch.hpp\"\n #include \"odbc_utils.hpp\"\n \n@@ -8,6 +9,7 @@\n #include <odbcinst.h>\n #include <locale>\n \n+using duckdb::OdbcDiagnostic;\n using duckdb::OdbcUtils;\n using std::string;\n \n@@ -81,49 +83,44 @@ SQLRETURN SQL_API SQLAllocHandle(SQLSMALLINT handle_type, SQLHANDLE input_handle\n \n SQLRETURN SQL_API SQLSetEnvAttr(SQLHENV environment_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,\n                                 SQLINTEGER string_length) {\n-\tif (!environment_handle) {\n-\t\treturn SQL_ERROR;\n-\t}\n-\tauto *env = (duckdb::OdbcHandleEnv *)environment_handle;\n-\tif (env->type != duckdb::OdbcHandleType::ENV) {\n-\t\treturn SQL_ERROR;\n-\t}\n-\tswitch (attribute) {\n-\tcase SQL_ATTR_ODBC_VERSION: {\n-\t\tswitch ((SQLUINTEGER)(intptr_t)value_ptr) {\n-\t\tcase SQL_OV_ODBC3:\n-\t\t\t// TODO actually do something with this?\n-\t\t\t// auto version = (SQLINTEGER)(uintptr_t)value_ptr;\n-\t\t\treturn SQL_SUCCESS;\n-\t\tdefault:\n-\t\t\tenv->error_messages.emplace_back(\"ODBC version not supported.\");\n-\t\t\treturn SQL_ERROR;\n+\treturn duckdb::WithEnvironment(environment_handle, [&](duckdb::OdbcHandleEnv *env) {\n+\t\tswitch (attribute) {\n+\t\tcase SQL_ATTR_ODBC_VERSION: {\n+\t\t\tswitch ((SQLUINTEGER)(intptr_t)value_ptr) {\n+\t\t\tcase SQL_OV_ODBC3:\n+\t\t\t\t// TODO actually do something with this?\n+\t\t\t\t// auto version = (SQLINTEGER)(uintptr_t)value_ptr;\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\tdefault:\n+\t\t\t\tenv->error_messages.emplace_back(\"ODBC version not supported.\");\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n \t\t}\n-\t}\n-\tcase SQL_ATTR_CONNECTION_POOLING:\n-\t\tswitch ((SQLINTEGER)(intptr_t)value_ptr) {\n-\t\tcase SQL_CP_OFF:\n-\t\tcase SQL_CP_ONE_PER_DRIVER:\n-\t\tcase SQL_CP_ONE_PER_HENV:\n-\t\t\treturn SQL_SUCCESS;\n-\t\tdefault:\n-\t\t\tenv->error_messages.emplace_back(\"Connection pool option not supported.\");\n+\t\tcase SQL_ATTR_CONNECTION_POOLING:\n+\t\t\tswitch ((SQLINTEGER)(intptr_t)value_ptr) {\n+\t\t\tcase SQL_CP_OFF:\n+\t\t\tcase SQL_CP_ONE_PER_DRIVER:\n+\t\t\tcase SQL_CP_ONE_PER_HENV:\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\tdefault:\n+\t\t\t\tenv->error_messages.emplace_back(\"Connection pool option not supported.\");\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n+\t\tcase SQL_ATTR_CP_MATCH:\n+\t\t\tenv->error_messages.emplace_back(\"Optional feature not supported.\");\n \t\t\treturn SQL_ERROR;\n-\t\t}\n-\tcase SQL_ATTR_CP_MATCH:\n-\t\tenv->error_messages.emplace_back(\"Optional feature not supported.\");\n-\t\treturn SQL_ERROR;\n-\tcase SQL_ATTR_OUTPUT_NTS: /* SQLINTEGER */\n-\t\tswitch (*(SQLINTEGER *)value_ptr) {\n-\t\tcase SQL_TRUE:\n-\t\t\treturn SQL_SUCCESS;\n+\t\tcase SQL_ATTR_OUTPUT_NTS: /* SQLINTEGER */\n+\t\t\tswitch (*(SQLINTEGER *)value_ptr) {\n+\t\t\tcase SQL_TRUE:\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\tdefault:\n+\t\t\t\tenv->error_messages.emplace_back(\"Optional feature not supported.\");\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n \t\tdefault:\n-\t\t\tenv->error_messages.emplace_back(\"Optional feature not supported.\");\n \t\t\treturn SQL_ERROR;\n \t\t}\n-\tdefault:\n-\t\treturn SQL_ERROR;\n-\t}\n+\t});\n }\n \n SQLRETURN SQL_API SQLGetEnvAttr(SQLHENV environment_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,\n@@ -237,71 +234,223 @@ SQLRETURN SQL_API SQLConnect(SQLHDBC connection_handle, SQLCHAR *server_name, SQ\n SQLRETURN SQL_API SQLGetDiagRec(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALLINT rec_number, SQLCHAR *sql_state,\n                                 SQLINTEGER *native_error_ptr, SQLCHAR *message_text, SQLSMALLINT buffer_length,\n                                 SQLSMALLINT *text_length_ptr) {\n-\tif (!handle) {\n-\t\tstd::string msg_str(\"Handle is NULL.\");\n-\t\tOdbcUtils::WriteString(msg_str, message_text, buffer_length, text_length_ptr);\n-\t\treturn SQL_INVALID_HANDLE;\n-\t}\n-\tif (rec_number <= 0 || buffer_length < 0) {\n-\t\treturn SQL_ERROR;\n-\t}\n-\tif (message_text) {\n-\t\t*message_text = '\\0';\n-\t}\n-\tif (text_length_ptr) {\n-\t\t*text_length_ptr = 0;\n-\t}\n-\tif (sql_state) {\n-\t\t*sql_state = '\\0';\n-\t}\n-\tif (native_error_ptr) {\n-\t\t*native_error_ptr = 0; // we don't have error codes\n-\t}\n-\n-\tauto *hdl = (duckdb::OdbcHandle *)handle;\n \n \t// lambda function that writes the diagnostic messages\n-\tstd::function<SQLRETURN(duckdb::OdbcHandle *, duckdb::OdbcHandleType)> func_write_diag =\n+\tstd::function<bool(duckdb::OdbcHandle *, duckdb::OdbcHandleType)> is_valid_type_func =\n \t    [&](duckdb::OdbcHandle *hdl, duckdb::OdbcHandleType target_type) {\n \t\t    if (hdl->type != target_type) {\n \t\t\t    std::string msg_str(\"Handle type \" + duckdb::OdbcHandleTypeToString(hdl->type) + \" mismatch with \" +\n \t\t\t                        duckdb::OdbcHandleTypeToString(target_type));\n \t\t\t    OdbcUtils::WriteString(msg_str, message_text, buffer_length, text_length_ptr);\n-\t\t\t    return SQL_SUCCESS;\n-\t\t    }\n-\n-\t\t    // Errors should be placed at the error_messages\n-\t\t    if ((size_t)rec_number <= hdl->error_messages.size()) {\n-\t\t\t    OdbcUtils::WriteString(hdl->error_messages[rec_number - 1], message_text, buffer_length,\n-\t\t\t                           text_length_ptr);\n-\t\t\t    return SQL_SUCCESS;\n-\t\t    } else {\n-\t\t\t    return SQL_NO_DATA;\n+\t\t\t    return false;\n \t\t    }\n+\t\t    return true;\n \t    };\n \n-\tswitch (handle_type) {\n-\tcase SQL_HANDLE_ENV: {\n-\t\treturn func_write_diag(hdl, duckdb::OdbcHandleType::ENV);\n-\t}\n-\tcase SQL_HANDLE_DBC: {\n-\t\treturn func_write_diag(hdl, duckdb::OdbcHandleType::DBC);\n-\t}\n-\tcase SQL_HANDLE_STMT: {\n-\t\treturn func_write_diag(hdl, duckdb::OdbcHandleType::STMT);\n-\t}\n-\tcase SQL_HANDLE_DESC: {\n-\t\treturn func_write_diag(hdl, duckdb::OdbcHandleType::DESC);\n-\t}\n-\tdefault:\n-\t\treturn SQL_INVALID_HANDLE;\n-\t}\n+\treturn duckdb::WithHandle(handle, [&](duckdb::OdbcHandle *odbc_handle) {\n+\t\tbool is_valid_type;\n+\t\tswitch (handle_type) {\n+\t\tcase SQL_HANDLE_ENV: {\n+\t\t\tis_valid_type = is_valid_type_func(odbc_handle, duckdb::OdbcHandleType::ENV);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase SQL_HANDLE_DBC: {\n+\t\t\tis_valid_type = is_valid_type_func(odbc_handle, duckdb::OdbcHandleType::DBC);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase SQL_HANDLE_STMT: {\n+\t\t\tis_valid_type = is_valid_type_func(odbc_handle, duckdb::OdbcHandleType::STMT);\n+\t\t\tbreak;\n+\t\t}\n+\t\tcase SQL_HANDLE_DESC: {\n+\t\t\tis_valid_type = is_valid_type_func(odbc_handle, duckdb::OdbcHandleType::DESC);\n+\t\t\tbreak;\n+\t\t}\n+\t\tdefault:\n+\t\t\treturn SQL_INVALID_HANDLE;\n+\t\t}\n+\t\tif (!is_valid_type) {\n+\t\t\t// return SQL_SUCCESS because the error message was written to the message_text\n+\t\t\treturn SQL_SUCCESS;\n+\t\t}\n+\n+\t\tif (rec_number <= 0) {\n+\t\t\tOdbcUtils::WriteString(\"Record number is less than 1\", message_text, buffer_length, text_length_ptr);\n+\t\t\treturn SQL_SUCCESS;\n+\t\t}\n+\t\tif (buffer_length < 0) {\n+\t\t\tOdbcUtils::WriteString(\"Buffer length is negative\", message_text, buffer_length, text_length_ptr);\n+\t\t\treturn SQL_SUCCESS;\n+\t\t}\n+\t\tif ((size_t)rec_number > odbc_handle->odbc_diagnostic->GetTotalRecords()) {\n+\t\t\treturn SQL_NO_DATA;\n+\t\t}\n+\n+\t\tauto rec_idx = rec_number - 1;\n+\t\tauto &diag_record = odbc_handle->odbc_diagnostic->GetDiagRecord(rec_idx);\n+\n+\t\tif (sql_state && strlen((char *)sql_state) >= 5) {\n+\t\t\tOdbcUtils::WriteString(diag_record.sql_diag_sqlstate, sql_state, 6);\n+\t\t}\n+\t\tif (native_error_ptr) {\n+\t\t\tduckdb::Store<SQLINTEGER>(diag_record.sql_diag_native, (duckdb::data_ptr_t)native_error_ptr);\n+\t\t}\n+\n+\t\tstd::string msg = diag_record.GetMessage(buffer_length);\n+\t\tOdbcUtils::WriteString(msg, message_text, buffer_length, text_length_ptr);\n+\n+\t\tif (text_length_ptr) {\n+\t\t\tSQLSMALLINT remaining_chars = msg.size() - buffer_length;\n+\t\t\tif (remaining_chars > 0) {\n+\t\t\t\t// TODO needs to split the diagnostic message\n+\t\t\t\todbc_handle->odbc_diagnostic->AddNewRecIdx(rec_idx);\n+\t\t\t\treturn SQL_SUCCESS_WITH_INFO;\n+\t\t\t}\n+\t\t}\n+\n+\t\tif (message_text == nullptr) {\n+\t\t\treturn SQL_SUCCESS_WITH_INFO;\n+\t\t}\n+\n+\t\treturn SQL_SUCCESS;\n+\t});\n }\n \n SQLRETURN SQL_API SQLGetDiagField(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALLINT rec_number,\n                                   SQLSMALLINT diag_identifier, SQLPOINTER diag_info_ptr, SQLSMALLINT buffer_length,\n                                   SQLSMALLINT *string_length_ptr) {\n-\treturn SQL_ERROR;\n+\tswitch (handle_type) {\n+\tcase SQL_HANDLE_ENV:\n+\tcase SQL_HANDLE_DBC:\n+\tcase SQL_HANDLE_STMT:\n+\tcase SQL_HANDLE_DESC: {\n+\t\treturn duckdb::WithHandle(handle, [&](duckdb::OdbcHandle *hdl) {\n+\t\t\t// diag header fields\n+\t\t\tswitch (diag_identifier) {\n+\t\t\tcase SQL_DIAG_CURSOR_ROW_COUNT: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::Store<SQLLEN>(hdl->odbc_diagnostic->header.sql_diag_cursor_row_count,\n+\t\t\t\t                      (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_DYNAMIC_FUNCTION: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::OdbcUtils::WriteString(hdl->odbc_diagnostic->GetDiagDynamicFunction(), (SQLCHAR *)diag_info_ptr,\n+\t\t\t\t                               buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_DYNAMIC_FUNCTION_CODE: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::Store<SQLINTEGER>(hdl->odbc_diagnostic->header.sql_diag_dynamic_function_code,\n+\t\t\t\t                          (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_NUMBER: {\n+\t\t\t\tduckdb::Store<SQLINTEGER>(hdl->odbc_diagnostic->header.sql_diag_number,\n+\t\t\t\t                          (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_RETURNCODE: {\n+\t\t\t\tduckdb::Store<SQLRETURN>(hdl->odbc_diagnostic->header.sql_diag_return_code,\n+\t\t\t\t                         (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_ROW_COUNT: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::Store<SQLLEN>(hdl->odbc_diagnostic->header.sql_diag_return_code,\n+\t\t\t\t                      (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\t// verify identifier and record index\n+\t\t\tif (!OdbcDiagnostic::IsDiagRecordField(diag_identifier)) {\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n+\t\t\tif (rec_number <= 0) {\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n+\t\t\tauto rec_idx = rec_number - 1;\n+\t\t\tif (!hdl->odbc_diagnostic->VerifyRecordIndex(rec_idx)) {\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n+\n+\t\t\tauto diag_record = hdl->odbc_diagnostic->GetDiagRecord(rec_idx);\n+\n+\t\t\t// diag record fields\n+\t\t\tswitch (diag_identifier) {\n+\t\t\tcase SQL_DIAG_CLASS_ORIGIN: {\n+\t\t\t\tduckdb::OdbcUtils::WriteString(hdl->odbc_diagnostic->GetDiagClassOrigin(rec_idx),\n+\t\t\t\t                               (SQLCHAR *)diag_info_ptr, buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_COLUMN_NUMBER: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::Store<SQLINTEGER>(diag_record.sql_diag_column_number, (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_CONNECTION_NAME: {\n+\t\t\t\t// we do not support connection names\n+\t\t\t\tduckdb::OdbcUtils::WriteString(\"\", (SQLCHAR *)diag_info_ptr, buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_MESSAGE_TEXT: {\n+\t\t\t\tauto msg = diag_record.GetMessage(buffer_length);\n+\t\t\t\tduckdb::OdbcUtils::WriteString(msg, (SQLCHAR *)diag_info_ptr, buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_NATIVE: {\n+\t\t\t\tduckdb::Store<SQLINTEGER>(diag_record.sql_diag_native, (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_ROW_NUMBER: {\n+\t\t\t\t// this field is available only for statement handles\n+\t\t\t\tif (hdl->type != duckdb::OdbcHandleType::STMT) {\n+\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t}\n+\t\t\t\tduckdb::Store<SQLLEN>(diag_record.sql_diag_row_number, (duckdb::data_ptr_t)diag_info_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_SERVER_NAME: {\n+\t\t\t\tduckdb::OdbcUtils::WriteString(diag_record.sql_diag_server_name, (SQLCHAR *)diag_info_ptr,\n+\t\t\t\t                               buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_SQLSTATE: {\n+\t\t\t\tduckdb::OdbcUtils::WriteString(diag_record.sql_diag_sqlstate, (SQLCHAR *)diag_info_ptr, buffer_length,\n+\t\t\t\t                               string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tcase SQL_DIAG_SUBCLASS_ORIGIN: {\n+\t\t\t\tduckdb::OdbcUtils::WriteString(hdl->odbc_diagnostic->GetDiagSubclassOrigin(rec_idx),\n+\t\t\t\t                               (SQLCHAR *)diag_info_ptr, buffer_length, string_length_ptr);\n+\t\t\t\treturn SQL_SUCCESS;\n+\t\t\t}\n+\t\t\tdefault:\n+\t\t\t\treturn SQL_ERROR;\n+\t\t\t}\n+\t\t});\n+\t}\n+\tdefault:\n+\t\treturn SQL_ERROR;\n+\t}\n }\n \n SQLRETURN SQL_API SQLDataSources(SQLHENV environment_handle, SQLUSMALLINT direction, SQLCHAR *server_name,\ndiff --git a/tools/odbc/duckdb_odbc.cpp b/tools/odbc/duckdb_odbc.cpp\nindex 8ea70b36a613..34b8dbbf6a4b 100644\n--- a/tools/odbc/duckdb_odbc.cpp\n+++ b/tools/odbc/duckdb_odbc.cpp\n@@ -5,6 +5,7 @@\n #include \"parameter_descriptor.hpp\"\n #include \"row_descriptor.hpp\"\n \n+using duckdb::OdbcDiagnostic;\n using duckdb::OdbcHandle;\n using duckdb::OdbcHandleDbc;\n using duckdb::OdbcHandleDesc;\n@@ -26,6 +27,10 @@ std::string duckdb::OdbcHandleTypeToString(OdbcHandleType type) {\n }\n \n //! OdbcHandle functions ***************************************************\n+OdbcHandle::OdbcHandle(OdbcHandleType type_p) : type(type_p) {\n+\todbc_diagnostic = make_unique<OdbcDiagnostic>();\n+}\n+\n OdbcHandle::OdbcHandle(const OdbcHandle &other) {\n \t// calling copy assigment opetator;\n \t*this = other;\n@@ -84,6 +89,10 @@ std::string OdbcHandleDbc::GetDatabaseName() {\n \treturn sql_attr_current_catalog;\n }\n \n+std::string OdbcHandleDbc::GetDataSourceName() {\n+\treturn dsn;\n+}\n+\n //! OdbcHandleStmt functions **************************************************\n OdbcHandleStmt::OdbcHandleStmt(OdbcHandleDbc *dbc_p)\n     : OdbcHandle(OdbcHandleType::STMT), dbc(dbc_p), rows_fetched_ptr(nullptr) {\ndiff --git a/tools/odbc/include/duckdb_odbc.hpp b/tools/odbc/include/duckdb_odbc.hpp\nindex 86c2147061a9..4594a228171a 100644\n--- a/tools/odbc/include/duckdb_odbc.hpp\n+++ b/tools/odbc/include/duckdb_odbc.hpp\n@@ -6,6 +6,8 @@\n \n #include \"duckdb/common/windows.hpp\"\n #include \"descriptor.hpp\"\n+#include \"odbc_diagnostic.hpp\"\n+#include \"odbc_exception.hpp\"\n #include \"odbc_utils.hpp\"\n \n #include <sqltypes.h>\n@@ -21,18 +23,21 @@ namespace duckdb {\n class OdbcFetch;\n class ParameterDescriptor;\n class RowDescriptor;\n+class OdbcDiagnostic;\n \n enum OdbcHandleType { ENV, DBC, STMT, DESC };\n std::string OdbcHandleTypeToString(OdbcHandleType type);\n \n struct OdbcHandle {\n-\texplicit OdbcHandle(OdbcHandleType type_p) : type(type_p) {};\n+\texplicit OdbcHandle(OdbcHandleType type_p);\n \tOdbcHandle(const OdbcHandle &other);\n \tOdbcHandle &operator=(const OdbcHandle &other);\n \n \tOdbcHandleType type;\n \t// appending all error messages into it\n \tstd::vector<std::string> error_messages;\n+\n+\tunique_ptr<OdbcDiagnostic> odbc_diagnostic;\n };\n \n struct OdbcHandleEnv : public OdbcHandle {\n@@ -57,6 +62,7 @@ struct OdbcHandleDbc : public OdbcHandle {\n \n \tvoid SetDatabaseName(const string &db_name);\n \tstd::string GetDatabaseName();\n+\tstd::string GetDataSourceName();\n \n public:\n \tOdbcHandleEnv *env;\n@@ -163,6 +169,35 @@ struct OdbcHandleDesc : public OdbcHandle {\n \tOdbcHandleStmt *stmt;\n };\n \n+template <class T>\n+SQLRETURN WithHandle(SQLHANDLE &handle, T &&lambda) {\n+\tif (!handle) {\n+\t\treturn SQL_INVALID_HANDLE;\n+\t}\n+\tauto *hdl = (OdbcHandle *)handle;\n+\tif (!hdl->odbc_diagnostic) {\n+\t\treturn SQL_ERROR;\n+\t}\n+\n+\treturn lambda(hdl);\n+}\n+\n+template <class T>\n+SQLRETURN WithEnvironment(SQLHANDLE &enviroment_handle, T &&lambda) {\n+\tif (!enviroment_handle) {\n+\t\treturn SQL_ERROR;\n+\t}\n+\tauto *env = (OdbcHandleEnv *)enviroment_handle;\n+\tif (env->type != OdbcHandleType::ENV) {\n+\t\treturn SQL_ERROR;\n+\t}\n+\tif (!env->db) {\n+\t\treturn SQL_ERROR;\n+\t}\n+\n+\treturn lambda(env);\n+}\n+\n template <class T>\n SQLRETURN WithConnection(SQLHANDLE &connection_handle, T &&lambda) {\n \tif (!connection_handle) {\n@@ -176,7 +211,19 @@ SQLRETURN WithConnection(SQLHANDLE &connection_handle, T &&lambda) {\n \t\treturn SQL_ERROR;\n \t}\n \n-\treturn lambda(hdl);\n+\t// ODBC requires to clean up the diagnostic for every ODBC function call\n+\thdl->odbc_diagnostic->Clean();\n+\n+\ttry {\n+\t\treturn lambda(hdl);\n+\t} catch (OdbcException &ex) {\n+\t\tauto diag_record = ex.GetDiagRecord();\n+\t\tauto component = ex.GetComponent();\n+\t\tauto data_source = hdl->GetDataSourceName();\n+\t\thdl->odbc_diagnostic->FormatDiagnosticMessage(diag_record, data_source, component);\n+\t\thdl->odbc_diagnostic->AddDiagRecord(diag_record);\n+\t\treturn ex.GetSqlReturn();\n+\t}\n }\n \n template <class T>\n@@ -184,14 +231,27 @@ SQLRETURN WithStatement(SQLHANDLE &statement_handle, T &&lambda) {\n \tif (!statement_handle) {\n \t\treturn SQL_ERROR;\n \t}\n-\tauto *hdl = (OdbcHandleStmt *)statement_handle;\n-\tif (hdl->type != OdbcHandleType::STMT) {\n+\tauto *hdl_stmt = (OdbcHandleStmt *)statement_handle;\n+\tif (hdl_stmt->type != OdbcHandleType::STMT) {\n \t\treturn SQL_ERROR;\n \t}\n-\tif (!hdl->dbc || !hdl->dbc->conn) {\n+\tif (!hdl_stmt->dbc || !hdl_stmt->dbc->conn) {\n \t\treturn SQL_ERROR;\n \t}\n-\treturn lambda(hdl);\n+\n+\t// ODBC requires to clean up the diagnostic for every ODBC function call\n+\thdl_stmt->odbc_diagnostic->Clean();\n+\n+\ttry {\n+\t\treturn lambda(hdl_stmt);\n+\t} catch (OdbcException &ex) {\n+\t\tauto diag_record = ex.GetDiagRecord();\n+\t\tauto component = ex.GetComponent();\n+\t\tauto data_source = hdl_stmt->dbc->GetDataSourceName();\n+\t\thdl_stmt->odbc_diagnostic->FormatDiagnosticMessage(diag_record, data_source, component);\n+\t\thdl_stmt->odbc_diagnostic->AddDiagRecord(diag_record);\n+\t\treturn ex.GetSqlReturn();\n+\t}\n }\n \n template <class T>\n@@ -203,7 +263,11 @@ SQLRETURN WithStatementPrepared(SQLHANDLE &statement_handle, T &&lambda) {\n \t\tif (!stmt->stmt->success) {\n \t\t\treturn SQL_ERROR;\n \t\t}\n-\t\treturn lambda(stmt);\n+\t\ttry {\n+\t\t\treturn lambda(stmt);\n+\t\t} catch (OdbcException &ex) {\n+\t\t\tthrow ex;\n+\t\t}\n \t});\n }\n \n@@ -216,7 +280,11 @@ SQLRETURN WithStatementResult(SQLHANDLE &statement_handle, T &&lambda) {\n \t\tif (!stmt->res->success) {\n \t\t\treturn SQL_ERROR;\n \t\t}\n-\t\treturn lambda(stmt);\n+\t\ttry {\n+\t\t\treturn lambda(stmt);\n+\t\t} catch (OdbcException &ex) {\n+\t\t\tthrow ex;\n+\t\t}\n \t});\n }\n \ndiff --git a/tools/odbc/include/odbc_diagnostic.hpp b/tools/odbc/include/odbc_diagnostic.hpp\nnew file mode 100644\nindex 000000000000..5b92d2580d1a\n--- /dev/null\n+++ b/tools/odbc/include/odbc_diagnostic.hpp\n@@ -0,0 +1,230 @@\n+#ifndef ODBC_DIAGNOSTIC_HPP\n+#define ODBC_DIAGNOSTIC_HPP\n+\n+#include \"duckdb.hpp\"\n+#include \"duckdb/common/windows.hpp\"\n+\n+#include \"sqlext.h\"\n+#include \"sqltypes.h\"\n+\n+#include <set>\n+#include <stack>\n+#include <string>\n+#include <vector>\n+#include <unordered_map>\n+\n+namespace duckdb {\n+enum class SQLStateType : uint8_t {\n+\tGENERAL_WARNING = 0,             //    {\"01000\", \"General warning\"},\n+\tCURSOR_CONFLICT = 1,             //    {\"01001\", \"Cursor operation conflict\"},\n+\tDISCONNECT_ERROR = 2,            //    {\"01002\", \"Disconnect error\"},\n+\tNULL_VALUE_ELIM = 3,             //    {\"01003\", \"NULL value eliminated in set function\"},\n+\tSTR_RIGHT_TRUNCATE = 4,          //    {\"01004\", \"String data, right truncated\"},\n+\tPRIVILEGE_NOT_REVOKED = 5,       //    {\"01006\", \"Privilege not revoked\"},\n+\tPRIVILEGE_NOT_GRANTED = 6,       //    {\"01007\", \"Privilege not granted\"},\n+\tINVALID_CONNECTION_STR_ATTR = 7, //    {\"01S00\", \"Invalid connection string attribute\"},\n+\tERROR_ROW = 8,                   //     {\"01S01\", \"Error in row\"},\n+\tOPTION_VALUE_CHANGED = 9,        //    {\"01S02\", \"Option value changed\"},\n+\tFETCH_BEFORE_FIRST_RESULT_SET =\n+\t    10,                       //    {\"01S06\", \"Attempt to fetch before the result set returned the first rowset\"},\n+\tFRACTIONAL_TRUNCATE = 12,     //    {\"01S07\", \"Fractional truncation\"},\n+\tERROR_SAVE_DSN_FILE = 13,     //    {\"01S08\", \"Error saving file DSN\"},\n+\tINVALID_KEYWORD = 14,         //    {\"01S09\", \"Invalid keyword\"},\n+\tCOUNT_FIELD_INCORRECT = 15,   //    {\"07002\", \"COUNT field incorrect\"},\n+\tPREPARE_STMT_NO_CURSOR = 16,  //    {\"07005\", \"Prepared statement not a cursor-specification\"},\n+\tRESTRICTED_DATA_TYPE = 17,    //    {\"07006\", \"Restricted data type attribute violation\"},\n+\tRETRICT_PARAMETER_VALUE = 18, //    {\"07007\", \"Restricted parameter value violation\"},\n+\tINVALID_DESC_INDEX = 19,      //    {\"07009\", \"Invalid descriptor index\"},\n+\tINVALID_USE_DEFAULT_PARAMETER = 20,     //\t{\"07S01\", \"Invalid use of default parameter\"},\n+\tCLIENT_UNABLE_TO_CONNECT = 21,          //\t{\"08001\", \"Client unable to establish connection\"},\n+\tCONNECTION_NAME_IN_USE = 22,            //    {\"08002\", \"Connection name in use\"},\n+\tCONNECTION_NOT_OPEN = 23,               //    {\"08003\", \"Connection not open\"},\n+\tSERVER_REJECT_CONNECTION = 24,          //\t{\"08004\", \"Server rejected the connection\"},\n+\tCONNECTION_FAIL_TRANSACTION = 25,       //    {\"08007\", \"Connection failure during transaction\"},\n+\tLINK_FAILURE = 26,                      //    {\"08S01\", \"Communication link failure\"},\n+\tFEATURE_NOT_SUPPORTED = 27,             //    {\"0A000\", \"Feature not supported\"},\n+\tLIST_INSERT_MATCH_ERROR = 28,           //    {\"21S01\", \"Insert value list does not match column list\"},\n+\tDERIVED_TABLE_MATCH_ERROR = 29,         //\t{\"21S02\", \"Degree of derived table does not match column list\"},\n+\tSTR_RIGHT_TRUNCATE2 = 30,               // {\"22001\", \"String data, right truncated\"},\n+\tINDICATOR_VARIABLE_NOT_SUPPLIED = 31,   //    {\"22002\", \"Indicator variable required but not supplied\"},\n+\tNUMERIC_OUT_RANGE = 32,                 //\t{\"22003\", \"Numeric value out of range\"},\n+\tINVALID_DATATIME_FORMAT = 33,           //\t{\"22007\", \"Invalid datetime format\"},\n+\tDATATIME_OVERVLOW = 34,                 //    {\"22008\", \"Datetime field overflow\"},\n+\tDIVISION_BY_ZERO = 35,                  //    {\"22012\", \"Division by zero\"},\n+\tINTERVAL_OVERFLOW = 36,                 //\t{\"22015\", \"Interval field overflow\"},\n+\tINVALID_CAST_CHAR = 37,                 //\t{\"22018\", \"Invalid character value for cast specification\"},\n+\tINVALID_ESCAPE_CHAR = 38,               //\t{\"22019\", \"Invalid escape character\"},\n+\tINVALID_ESCAPE_SEQ = 39,                //\t{\"22025\", \"Invalid escape sequence\"},\n+\tSTR_LEN_MISMATCH = 40,                  //\t{\"22026\", \"String data, length mismatch\"},\n+\tCONSTRAINT_VIOLATION = 41,              //    {\"23000\", \"Integrity constraint violation\"},\n+\tINVALID_CURSOR_STATE = 42,              //\t{\"24000\", \"Invalid cursor state\"},\n+\tINVALID_TRANSACTION_STATE = 43,         //\t{\"25000\", \"Invalid transaction state\"},\n+\tTRANSACTION_STATE_UNKNOWN = 44,         //\t{\"25S01\", \"Transaction state unknown\"},\n+\tTRANSACTION_STILL_ACTIVE = 45,          //\t{\"25S02\", \"Transaction is still active\"},\n+\tTRANSACTION_ROLLED_BACK = 46,           //\t{\"25S03\", \"Transaction is rolled back\"},\n+\tINVALID_AUTH = 47,                      //\t{\"28000\", \"Invalid authorization specification\"},\n+\tINVALID_CURSOR_NAME = 48,               //\t{\"34000\", \"Invalid cursor name\"},\n+\tDUPLICATE_CURSOR_NAME = 49,             //\t{\"3C000\", \"Duplicate cursor name\"},\n+\tINVALID_CATALOG_NAME = 50,              //\t{\"3D000\", \"Invalid catalog name\"},\n+\tINVALID_SCHEMA_NAME = 51,               //\t{\"3F000\", \"Invalid schema name\"},\n+\tSERIALIZATION_FAILURE = 52,             //\t{\"40001\", \"Serialization failure\"},\n+\tCONSTRAINT_VIOLATION2 = 53,             // {\"40002\", \"Integrity constraint violation\"},\n+\tSTMT_COMPLETION_UNKNOWN = 54,           //\t{\"40003\", \"Statement completion unknown\"},\n+\tSYNTAX_ERROR_OR_ACCESS_VIOLATION = 55,  //\t{\"42000\", \"Syntax error or access violation\"},\n+\tTABLE_OR_VIEW_ALREADY_EXIST = 56,       // {\"42S01\", \"Base table or view already exists\"},\n+\tTABLE_OR_VIEW_NOT_FOUND = 57,           // {\"42S02\", \"Base table or view not found\"},\n+\tINDEX_ALREADY_EXIST = 58,               // {\"42S11\", \"Index already exists\"},\n+\tINDEX_NOT_FOUND = 59,                   // {\"42S12\", \"Index not found\"},\n+\tCOLUMN_ALREADY_EXIST = 60,              // {\"42S21\", \"Column already exists\"},\n+\tCOLUMN_NOT_FOUND = 61,                  // {\"42S22\", \"Column not found\"},\n+\tWITH_CHECK_POINT_VIOLARION = 62,        // {\"44000\", \"WITH CHECK OPTION violation\"},\n+\tGENERAL_ERROR = 63,                     // {\"HY000\", \"General error\"},\n+\tMEMORY_ALLOCATION_ERROR = 64,           // {\"HY001\", \"Memory allocation error\"},\n+\tINVALID_APP_BUFFER_TYPE = 65,           // {\"HY003\", \"Invalid application buffer type\"},\n+\tINVALD_SQL_TYPE = 66,                   // {\"HY004\", \"Invalid SQL data type\"},\n+\tSTMT_NOT_PREPARED = 67,                 // {\"HY007\", \"Associated statement is not prepared\"},\n+\tOPERATION_CANCELLED = 68,               // {\"HY008\", \"Operation canceled\"},\n+\tINVALIDE_ARGUMENT = 69,                 // {\"HY009\", \"Invalid argument value\"},\n+\tFUNCTION_SEQ_ERROR = 70,                // {\"HY010\", \"Function sequence error\"},\n+\tATTR_CANNOT_BE_SET_NOW = 71,            // {\"HY011\", \"Attribute cannot be set now\"},\n+\tINVALID_TRANSACTION_OP_CODE = 72,       // {\"HY012\", \"Invalid transaction operation code\"},\n+\tMEMORY_MANAGEMENT_ERROR = 73,           // {\"HY013\", \"Memory management error\"},\n+\tNUMBER_HANDLES_EXCEEDED = 74,           // {\"HY014\", \"Limit on the number of handles exceeded\"},\n+\tNO_CURSOR_NAME_AVAILABLE = 75,          // {\"HY015\", \"No cursor name available\"},\n+\tCANNOT_MODIFY_IRD = 76,                 // {\"HY016\", \"Cannot modify an implementation row descriptor\"},\n+\tINVALID_USE_AUTO_ALLOC_DESCRIPTOR = 77, // {\"HY017\", \"Invalid use of an automatically allocated descriptor handle\"},\n+\tSERVER_DECLINED_CANCEL_REQUEST = 78,    // {\"HY018\", \"Server declined cancel request\"},\n+\tNON_CHAR_BIN_SENT_IN_PIECES = 79,       // {\"HY019\", \"Non-character and non-binary data sent in pieces\"},\n+\tATTEMPT_CONCAT_NULL_VALUE = 80,         // {\"HY020\", \"Attempt to concatenate a null value\"},\n+\tINCONSISTENT_DESC_INFO = 81,            // {\"HY021\", \"Inconsistent descriptor information\"},\n+\tINVALID_ATTR_VALUE = 82,                // {\"HY024\", \"Invalid attribute value\"},\n+\tINVALID_STR_BUFF_LENGTH = 83,           // {\"HY090\", \"Invalid string or buffer length\"},\n+\tINVALD_DESC_FIELD_ID = 84,              // {\"HY091\", \"Invalid descriptor field identifier\"},\n+\tINVALID_ATTR_OPTION_ID = 85,            // {\"HY092\", \"Invalid attribute/option identifier\"},\n+\tFUNCTION_TYPE_OUT_RANGE = 86,           // {\"HY095\", \"Function type out of range\"},\n+\tINFO_TYPE_OUT_RANGE = 87,               // {\"HY096\", \"Information type out of range\"},\n+\tCOLUMN_TYPE_OUT_RANGE = 88,             // {\"HY097\", \"Column type out of range\"},\n+\tSCOPE_TYPE_OUT_RANGE = 89,              // {\"HY098\", \"Scope type out of range\"},\n+\tNULL_TYPE_OUT_RANGE = 90,               // {\"HY099\", \"Nullable type out of range\"},\n+\tUNIQ_OPTION_TYPE_OUT_RANGE = 91,        // {\"HY100\", \"Uniqueness option type out of range\"},\n+\tACCURARY_OPTION_TYPE_OUT_RANGE = 92,    // {\"HY101\", \"Accuracy option type out of range\"},\n+\tINVALID_RETRIEVAL_CODE = 93,            // {\"HY103\", \"Invalid retrieval code\"},\n+\tINVALID_PREC_SCALE_TYPE = 94,           // {\"HY104\", \"Invalid precision or scale value\"},\n+\tINVALID_PARAMETER_TYPE = 95,            // {\"HY105\", \"Invalid parameter type\"},\n+\tFETCH_TYPE_OUT_RANGE = 96,              // {\"HY106\", \"Fetch type out of range\"},\n+\tROW_VALUE_OUT_RANGE = 97,               // {\"HY107\", \"Row value out of range\"},\n+\tINVALID_CURSOR_POS = 98,                // {\"HY109\", \"Invalid cursor position\"},\n+\tINVALID_DRIVER_COMPLETION = 99,         // {\"HY110\", \"Invalid driver completion\"},\n+\tINVALID_BOOKMARK_VALUE = 100,           // {\"HY111\", \"Invalid bookmark value\"},\n+\tNOT_SUPPORT_ASYNC_FUNCT_EXECUTION =\n+\t    101, // {\"HY114\", \"Driver does not support connection-level asynchronous function execution\"},\n+\tSQLENDTRAN_ASYNC_FUNCT_EXECUTION = 102, // {\"HY115\", \"SQLEndTran is not allowed for an environment that contains a\n+\t                                        // connection with asynchronous function execution enabled\"},\n+\tCONNECTION_UNKNOW_TRANSACTION_STATE = 103, // {\"HY117\", \"Connection is suspended due to unknown transaction state.\n+\t                                           // Only disconnect and read-only functions are allowed.\"},\n+\tCURSOR_DRIVER_POOLING_SAME_TIME =\n+\t    104, // {\"HYHY121\", \"Cursor Library and Driver-Aware Pooling cannot be enabled at the same time\"},\n+\tOPT_FEATURE_NOT_IMPLEMENTED = 105,       // {\"HYC00\", \"Optional feature not implemented\"},\n+\tTIMEOUT_EXPIRED = 106,                   // {\"HYT00\", \"Timeout expired\"},\n+\tCONNECTION_TIMEOUT_EXPIRED = 107,        // {\"HYT01\", \"Connection timeout expired\"},\n+\tDRIVER_NOT_SUPPORT_FUNCTION = 108,       // {\"IM001\", \"Driver does not support this function\"},\n+\tDSN_NOT_FOUND_NO_DEFAULT = 109,          // {\"IM002\", \"Data source not found and no default driver specified\"},\n+\tDRIVER_COULD_NOT_BE_CONNECTED = 110,     // {\"IM003\", \"Specified driver could not be connected to\"},\n+\tALLOC_HANDLE_ENV_FAIL = 111,             // {\"IM004\", \"Driver's SQLAllocHandle on SQL_HANDLE_ENV failed\"},\n+\tALLOC_HANDLE_DBC_FAIL = 112,             // {\"IM005\", \"Driver's SQLAllocHandle on SQL_HANDLE_DBC failed\"},\n+\tSET_CONNECTION_ATTR_FAIL = 113,          // {\"IM006\", \"Driver's SQLSetConnectAttr failed\"},\n+\tNO_DSN_OR_DRIVER = 114,                  // {\"IM007\", \"No data source or driver specified; dialog prohibited\"},\n+\tDIALOG_FAIL = 115,                       // {\"IM008\", \"Dialog failed\"},\n+\tUNABLE_CONNECT_TO_TRANSLATION_DLL = 116, // {\"IM009\", \"Unable to connect to translation DLL\"},\n+\tDSN_TOO_LONG = 117,                      // {\"IM010\", \"Data source name too long\"},\n+\tDRIVER_NAME_TOO_LONG = 118,              // {\"IM011\", \"Driver name too long\"},\n+\tKEYWORD_SYNTAX_ERROR = 119,              // {\"IM012\", \"DRIVER keyword syntax error\"},\n+\tDNS_ARCHITECTURE_MISMATCH =\n+\t    120, // {\"IM014\", \"The specified DSN contains an architecture mismatch between the Driver and Application\"},\n+\tCONNECT_HANDLE_DBC_INFO_FAIL = 121, // {\"IM015\", \"Driver's SQLConnect on SQL_HANDLE_DBC_INFO_HANDLE failed\"},\n+\tPOLLING_DISABLED_ACYNC_NOTIGICATION_MODE =\n+\t    122,                             // {\"IM017\", \"Polling is disabled in asynchronous notification mode\"},\n+\tSHOULD_CALL_COMPLETE_ASYNC = 123,    // {\"IM018\", \"SQLCompleteAsync has not been called to complete the previous\n+\t                                     // asynchronous operation on this handle.\"},\n+\tNOT_SUPPORT_ASYNC_NOTIFICATION = 124 // {\"S1118\", \"Driver does not support asynchronous notification\"};\n+};\n+\n+struct SQLState {\n+\tstd::string code;\n+\tstd::string erro_msg;\n+};\n+\n+struct EnumClassHash {\n+\ttemplate <typename T>\n+\tstd::size_t operator()(T t) const {\n+\t\treturn static_cast<std::size_t>(t);\n+\t}\n+};\n+\n+struct DiagRecord {\n+public:\n+\texplicit DiagRecord(const std::string &msg, const SQLStateType &sqlstate_type, const std::string &server_name = \"\",\n+\t                    SQLINTEGER col_number = SQL_NO_COLUMN_NUMBER, SQLINTEGER sql_native = 0,\n+\t                    SQLLEN row_number = SQL_NO_ROW_NUMBER);\n+\tDiagRecord(const DiagRecord &other);\n+\tDiagRecord &operator=(const DiagRecord &other);\n+\n+\tstd::string GetOriginalMessage();\n+\tstd::string GetMessage(SQLSMALLINT buff_length);\n+\tvoid SetMessage(const std::string &new_msg);\n+\tvoid ClearStackMsgOffset();\n+\n+public:\n+\t// Some fields were commented out because they can be extract from other fields or internal data structures\n+\t// std::string sql_diag_class_origin;\n+\tSQLINTEGER sql_diag_column_number = SQL_NO_COLUMN_NUMBER;\n+\t// std::string sql_diag_connection_name;\n+\tSQLINTEGER sql_diag_native = 0;\n+\tSQLLEN sql_diag_row_number = SQL_NO_ROW_NUMBER;\n+\tstd::string sql_diag_server_name;\n+\tstd::string sql_diag_sqlstate;\n+\t// std::string sql_diag_subclass_origin;\n+\t// default id_diag\n+\tstd::string sql_diag_message_text;\n+\tstd::stack<duckdb::idx_t> stack_msg_offset;\n+};\n+\n+struct DiagHeader {\n+public:\n+\tSQLLEN sql_diag_cursor_row_count;\n+\t// std::string sql_diag_dynamic_function; // this field is extract from map_dynamic_function\n+\tSQLINTEGER sql_diag_dynamic_function_code = SQL_DIAG_UNKNOWN_STATEMENT;\n+\tSQLINTEGER sql_diag_number;\n+\tSQLRETURN sql_diag_return_code;\n+\tSQLLEN sql_diag_row_count;\n+};\n+\n+class OdbcDiagnostic {\n+public:\n+\tDiagHeader header;\n+\tstd::vector<DiagRecord> diag_records;\n+\t// vector that mantains the indexes of DiagRecord\n+\tstd::vector<SQLSMALLINT> vec_record_idx;\n+\tstatic const std::unordered_map<SQLINTEGER, std::string> MAP_DYNAMIC_FUNCTION;\n+\tstatic const std::set<std::string> SET_ODBC3_SUBCLASS_ORIGIN;\n+\tstatic const std::unordered_map<SQLStateType, SQLState, EnumClassHash> MAP_ODBC_SQL_STATES;\n+\n+public:\n+\tstatic bool IsDiagRecordField(SQLSMALLINT diag_identifier);\n+\n+\tvoid FormatDiagnosticMessage(DiagRecord &diag_record, const std::string &data_source, const std::string &component);\n+\tvoid AddDiagRecord(DiagRecord &diag_record);\n+\tvoid AddNewRecIdx(SQLSMALLINT rec_idx);\n+\tduckdb::idx_t GetTotalRecords();\n+\n+\tvoid Clean();\n+\n+\tstd::string GetDiagDynamicFunction();\n+\tbool VerifyRecordIndex(SQLINTEGER rec_idx);\n+\tDiagRecord &GetDiagRecord(SQLINTEGER rec_idx);\n+\tstd::string GetDiagClassOrigin(SQLINTEGER rec_idx);\n+\tstd::string GetDiagSubclassOrigin(SQLINTEGER rec_idx);\n+};\n+\n+} // namespace duckdb\n+#endif\n\\ No newline at end of file\ndiff --git a/tools/odbc/include/odbc_exception.hpp b/tools/odbc/include/odbc_exception.hpp\nnew file mode 100644\nindex 000000000000..11fb74d015eb\n--- /dev/null\n+++ b/tools/odbc/include/odbc_exception.hpp\n@@ -0,0 +1,27 @@\n+#ifndef ODBC_EXCEPTION_HPP\n+#define ODBC_EXCEPTION_HPP\n+\n+#include \"odbc_diagnostic.hpp\"\n+#include \"sqlext.h\"\n+#include \"sqltypes.h\"\n+\n+#include <stdexcept>\n+#include <string>\n+\n+namespace duckdb {\n+struct OdbcException : public std::exception {\n+public:\n+\texplicit OdbcException(const std::string &comp, SQLRETURN ret, const DiagRecord &diag_rec)\n+\t    : component(comp), sql_ret(ret), diag_record(diag_rec) {};\n+\n+\tconst std::string GetComponent();\n+\tconst SQLRETURN GetSqlReturn();\n+\tconst DiagRecord &GetDiagRecord();\n+\n+private:\n+\tstd::string component;\n+\tSQLRETURN sql_ret = SQL_ERROR;\n+\tduckdb::DiagRecord diag_record;\n+};\n+} // namespace duckdb\n+#endif\n\\ No newline at end of file\ndiff --git a/tools/odbc/include/odbc_utils.hpp b/tools/odbc/include/odbc_utils.hpp\nindex 81fba29779dc..b73e008c6ae0 100644\n--- a/tools/odbc/include/odbc_utils.hpp\n+++ b/tools/odbc/include/odbc_utils.hpp\n@@ -19,14 +19,19 @@ struct OdbcUtils {\n \tstatic std::string ReadString(const SQLPOINTER ptr, const SQLSMALLINT len);\n \t// static void WriteString(const std::string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len, SQLSMALLINT *out_len);\n \ttemplate <typename INT_TYPE>\n-\tstatic void WriteString(const string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len, INT_TYPE *out_len) {\n+\tstatic void WriteString(const string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len, INT_TYPE *out_len = nullptr) {\n+\t\tINT_TYPE written_chars = 0;\n \t\tif (out_buf) {\n-\t\t\tsnprintf((char *)out_buf, buf_len, \"%s\", s.c_str());\n+\t\t\twritten_chars = (INT_TYPE)snprintf((char *)out_buf, buf_len, \"%s\", s.c_str());\n \t\t}\n \t\tif (out_len) {\n-\t\t\t*out_len = s.size();\n+\t\t\t*out_len = written_chars;\n \t\t}\n \t}\n+\t// template specialization for int to pass a null pointer\n+\tstatic void WriteString(const string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len) {\n+\t\tWriteString<int>(s, out_buf, buf_len, nullptr);\n+\t}\n \n \ttemplate <typename FIELD_TYPE>\n \tSQLRETURN IsValidPtrForSpecificedField(SQLPOINTER value_ptr, FIELD_TYPE target_field,\ndiff --git a/tools/odbc/odbc_diagnostic.cpp b/tools/odbc/odbc_diagnostic.cpp\nnew file mode 100644\nindex 000000000000..1a998a1a1ee3\n--- /dev/null\n+++ b/tools/odbc/odbc_diagnostic.cpp\n@@ -0,0 +1,355 @@\n+#include \"odbc_diagnostic.hpp\"\n+\n+using duckdb::DiagHeader;\n+using duckdb::DiagRecord;\n+using duckdb::OdbcDiagnostic;\n+using duckdb::SQLState;\n+using duckdb::SQLStateType;\n+using std::string;\n+\n+// OdbcDiagnostic static initializations and functions ******************************\n+const std::unordered_map<SQLINTEGER, std::string> OdbcDiagnostic::MAP_DYNAMIC_FUNCTION = {\n+    {SQL_DIAG_ALTER_DOMAIN, \"ALTER DOMAIN\"},\n+    {SQL_DIAG_ALTER_TABLE, \"ALTER TABLE\"},\n+    {SQL_DIAG_CREATE_ASSERTION, \"CREATE ASSERTION\"},\n+    {SQL_DIAG_CREATE_CHARACTER_SET, \"CREATE CHARACTER SET\"},\n+    {SQL_DIAG_CREATE_COLLATION, \"CREATE COLLATION\"},\n+    {SQL_DIAG_CREATE_DOMAIN, \"CREATE DOMAIN\"},\n+    {SQL_DIAG_CREATE_INDEX, \"CREATE INDEX\"},\n+    {SQL_DIAG_CREATE_TABLE, \"CREATE TABLE\"},\n+    {SQL_DIAG_CREATE_VIEW, \"CREATE VIEW\"},\n+    {SQL_DIAG_SELECT_CURSOR, \"SELECT CURSOR\"},\n+    {SQL_DIAG_DYNAMIC_DELETE_CURSOR, \"DYNAMIC DELETE CURSOR\"},\n+    {SQL_DIAG_DELETE_WHERE, \"DELETE WHERE\"},\n+    {SQL_DIAG_DROP_ASSERTION, \"DROP ASSERTION\"},\n+    {SQL_DIAG_DROP_CHARACTER_SET, \"DROP CHARACTER SET\"},\n+    {SQL_DIAG_DROP_COLLATION, \"DROP COLLATION\"},\n+    {SQL_DIAG_DROP_DOMAIN, \"DROP DOMAIN\"},\n+    {SQL_DIAG_DROP_INDEX, \"DROP INDEX\"},\n+    {SQL_DIAG_DROP_SCHEMA, \"DROP SCHEMA\"},\n+    {SQL_DIAG_DROP_TABLE, \"DROP TABLE\"},\n+    {SQL_DIAG_DROP_TRANSLATION, \"DROP TRANSLATION\"},\n+    {SQL_DIAG_DROP_VIEW, \"DROP VIEW\"},\n+    {SQL_DIAG_GRANT, \"GRANT\"},\n+    {SQL_DIAG_INSERT, \"INSERT\"},\n+    {SQL_DIAG_CALL, \"CALL\"},\n+    {SQL_DIAG_REVOKE, \"REVOKE\"},\n+    {SQL_DIAG_CREATE_SCHEMA, \"CREATE SCHEMA\"},\n+    {SQL_DIAG_CREATE_TRANSLATION, \"CREATE TRANSLATION\"},\n+    {SQL_DIAG_DYNAMIC_UPDATE_CURSOR, \"DYNAMIC UPDATE CURSOR\"},\n+    {SQL_DIAG_UPDATE_WHERE, \"UPDATE WHERE\"},\n+    {SQL_DIAG_UNKNOWN_STATEMENT, \"\"}};\n+\n+const std::set<std::string> OdbcDiagnostic::SET_ODBC3_SUBCLASS_ORIGIN = {\n+    {\"01S00\"}, {\"01S01\"}, {\"01S02\"}, {\"01S06\"}, {\"01S07\"}, {\"07S01\"}, {\"08S01\"}, {\"21S01\"}, {\"21S02\"},\n+    {\"25S01\"}, {\"25S02\"}, {\"25S03\"}, {\"42S01\"}, {\"42S02\"}, {\"42S11\"}, {\"42S12\"}, {\"42S21\"}, {\"42S22\"},\n+    {\"HY095\"}, {\"HY097\"}, {\"HY098\"}, {\"HY099\"}, {\"HY100\"}, {\"HY101\"}, {\"HY105\"}, {\"HY107\"}, {\"HY109\"},\n+    {\"HY110\"}, {\"HY111\"}, {\"HYT00\"}, {\"HYT01\"}, {\"IM001\"}, {\"IM002\"}, {\"IM003\"}, {\"IM004\"}, {\"IM005\"},\n+    {\"IM006\"}, {\"IM007\"}, {\"IM008\"}, {\"IM010\"}, {\"IM011\"}, {\"IM012\"}};\n+\n+const std::unordered_map<SQLStateType, SQLState, duckdb::EnumClassHash> OdbcDiagnostic::MAP_ODBC_SQL_STATES = {\n+    {SQLStateType::GENERAL_WARNING, {\"01000\", \"General warning\"}},\n+    {SQLStateType::CURSOR_CONFLICT, {\"01001\", \"Cursor operation conflict\"}},\n+    {SQLStateType::DISCONNECT_ERROR, {\"01002\", \"Disconnect error\"}},\n+    {SQLStateType::NULL_VALUE_ELIM, {\"01003\", \"NULL value eliminated in set function\"}},\n+    {SQLStateType::STR_RIGHT_TRUNCATE, {\"01004\", \"String data, right truncated\"}},\n+    {SQLStateType::PRIVILEGE_NOT_REVOKED, {\"01006\", \"Privilege not revoked\"}},\n+    {SQLStateType::PRIVILEGE_NOT_GRANTED, {\"01007\", \"Privilege not granted\"}},\n+    {SQLStateType::INVALID_CONNECTION_STR_ATTR, {\"01S00\", \"Invalid connection string attribute\"}},\n+    {SQLStateType::ERROR_ROW, {\"01S01\", \"Error in row\"}},\n+    {SQLStateType::OPTION_VALUE_CHANGED, {\"01S02\", \"Option value changed\"}},\n+    {SQLStateType::FETCH_BEFORE_FIRST_RESULT_SET,\n+     {\"01S06\", \"Attempt to fetch before the result set returned the first rowset\"}},\n+    {SQLStateType::FRACTIONAL_TRUNCATE, {\"01S07\", \"Fractional truncation\"}},\n+    {SQLStateType::ERROR_SAVE_DSN_FILE, {\"01S08\", \"Error saving file DSN\"}},\n+    {SQLStateType::INVALID_KEYWORD, {\"01S09\", \"Invalid keyword\"}},\n+    {SQLStateType::COUNT_FIELD_INCORRECT, {\"07002\", \"COUNT field incorrect\"}},\n+    {SQLStateType::PREPARE_STMT_NO_CURSOR, {\"07005\", \"Prepared statement not a cursor-specification\"}},\n+    {SQLStateType::RESTRICTED_DATA_TYPE, {\"07006\", \"Restricted data type attribute violation\"}},\n+    {SQLStateType::RETRICT_PARAMETER_VALUE, {\"07007\", \"Restricted parameter value violation\"}},\n+    {SQLStateType::INVALID_DESC_INDEX, {\"07009\", \"Invalid descriptor index\"}},\n+    {SQLStateType::INVALID_USE_DEFAULT_PARAMETER, {\"07S01\", \"Invalid use of default parameter\"}},\n+    {SQLStateType::CLIENT_UNABLE_TO_CONNECT, {\"08001\", \"Client unable to establish connection\"}},\n+    {SQLStateType::CONNECTION_NAME_IN_USE, {\"08002\", \"Connection name in use\"}},\n+    {SQLStateType::CONNECTION_NOT_OPEN, {\"08003\", \"Connection not open\"}},\n+    {SQLStateType::SERVER_REJECT_CONNECTION, {\"08004\", \"Server rejected the connection\"}},\n+    {SQLStateType::CONNECTION_FAIL_TRANSACTION, {\"08007\", \"Connection failure during transaction\"}},\n+    {SQLStateType::LINK_FAILURE, {\"08S01\", \"Communication link failure\"}},\n+    {SQLStateType::FEATURE_NOT_SUPPORTED, {\"0A000\", \"Feature not supported\"}},\n+    {SQLStateType::LIST_INSERT_MATCH_ERROR, {\"21S01\", \"Insert value list does not match column list\"}},\n+    {SQLStateType::DERIVED_TABLE_MATCH_ERROR, {\"21S02\", \"Degree of derived table does not match column list\"}},\n+    {SQLStateType::STR_RIGHT_TRUNCATE2, {\"22001\", \"String data, right truncated\"}},\n+    {SQLStateType::INDICATOR_VARIABLE_NOT_SUPPLIED, {\"22002\", \"Indicator variable required but not supplied\"}},\n+    {SQLStateType::NUMERIC_OUT_RANGE, {\"22003\", \"Numeric value out of range\"}},\n+    {SQLStateType::INVALID_DATATIME_FORMAT, {\"22007\", \"Invalid datetime format\"}},\n+    {SQLStateType::DATATIME_OVERVLOW, {\"22008\", \"Datetime field overflow\"}},\n+    {SQLStateType::DIVISION_BY_ZERO, {\"22012\", \"Division by zero\"}},\n+    {SQLStateType::INTERVAL_OVERFLOW, {\"22015\", \"Interval field overflow\"}},\n+    {SQLStateType::INVALID_CAST_CHAR, {\"22018\", \"Invalid character value for cast specification\"}},\n+    {SQLStateType::INVALID_ESCAPE_CHAR, {\"22019\", \"Invalid escape character\"}},\n+    {SQLStateType::INVALID_ESCAPE_SEQ, {\"22025\", \"Invalid escape sequence\"}},\n+    {SQLStateType::STR_LEN_MISMATCH, {\"22026\", \"String data, length mismatch\"}},\n+    {SQLStateType::CONSTRAINT_VIOLATION, {\"23000\", \"Integrity constraint violation\"}},\n+    {SQLStateType::INVALID_CURSOR_STATE, {\"24000\", \"Invalid cursor state\"}},\n+    {SQLStateType::INVALID_TRANSACTION_STATE, {\"25000\", \"Invalid transaction state\"}},\n+    {SQLStateType::TRANSACTION_STATE_UNKNOWN, {\"25S01\", \"Transaction state unknown\"}},\n+    {SQLStateType::TRANSACTION_STILL_ACTIVE, {\"25S02\", \"Transaction is still active\"}},\n+    {SQLStateType::TRANSACTION_ROLLED_BACK, {\"25S03\", \"Transaction is rolled back\"}},\n+    {SQLStateType::INVALID_AUTH, {\"28000\", \"Invalid authorization specification\"}},\n+    {SQLStateType::INVALID_CURSOR_NAME, {\"34000\", \"Invalid cursor name\"}},\n+    {SQLStateType::DUPLICATE_CURSOR_NAME, {\"3C000\", \"Duplicate cursor name\"}},\n+    {SQLStateType::INVALID_CATALOG_NAME, {\"3D000\", \"Invalid catalog name\"}},\n+    {SQLStateType::INVALID_SCHEMA_NAME, {\"3F000\", \"Invalid schema name\"}},\n+    {SQLStateType::SERIALIZATION_FAILURE, {\"40001\", \"Serialization failure\"}},\n+    {SQLStateType::CONSTRAINT_VIOLATION2, {\"40002\", \"Integrity constraint violation\"}},\n+    {SQLStateType::STMT_COMPLETION_UNKNOWN, {\"40003\", \"Statement completion unknown\"}},\n+    {SQLStateType::SYNTAX_ERROR_OR_ACCESS_VIOLATION, {\"42000\", \"Syntax error or access violation\"}},\n+    {SQLStateType::TABLE_OR_VIEW_ALREADY_EXIST, {\"42S01\", \"Base table or view already exists\"}},\n+    {SQLStateType::TABLE_OR_VIEW_NOT_FOUND, {\"42S02\", \"Base table or view not found\"}},\n+    {SQLStateType::INDEX_ALREADY_EXIST, {\"42S11\", \"Index already exists\"}},\n+    {SQLStateType::INDEX_NOT_FOUND, {\"42S12\", \"Index not found\"}},\n+    {SQLStateType::COLUMN_ALREADY_EXIST, {\"42S21\", \"Column already exists\"}},\n+    {SQLStateType::COLUMN_NOT_FOUND, {\"42S22\", \"Column not found\"}},\n+    {SQLStateType::WITH_CHECK_POINT_VIOLARION, {\"44000\", \"WITH CHECK OPTION violation\"}},\n+    {SQLStateType::GENERAL_ERROR, {\"HY000\", \"General error\"}},\n+    {SQLStateType::MEMORY_ALLOCATION_ERROR, {\"HY001\", \"Memory allocation error\"}},\n+    {SQLStateType::INVALID_APP_BUFFER_TYPE, {\"HY003\", \"Invalid application buffer type\"}},\n+    {SQLStateType::INVALD_SQL_TYPE, {\"HY004\", \"Invalid SQL data type\"}},\n+    {SQLStateType::STMT_NOT_PREPARED, {\"HY007\", \"Associated statement is not prepared\"}},\n+    {SQLStateType::OPERATION_CANCELLED, {\"HY008\", \"Operation canceled\"}},\n+    {SQLStateType::INVALIDE_ARGUMENT, {\"HY009\", \"Invalid argument value\"}},\n+    {SQLStateType::FUNCTION_SEQ_ERROR, {\"HY010\", \"Function sequence error\"}},\n+    {SQLStateType::ATTR_CANNOT_BE_SET_NOW, {\"HY011\", \"Attribute cannot be set now\"}},\n+    {SQLStateType::INVALID_TRANSACTION_OP_CODE, {\"HY012\", \"Invalid transaction operation code\"}},\n+    {SQLStateType::MEMORY_MANAGEMENT_ERROR, {\"HY013\", \"Memory management error\"}},\n+    {SQLStateType::NUMBER_HANDLES_EXCEEDED, {\"HY014\", \"Limit on the number of handles exceeded\"}},\n+    {SQLStateType::NO_CURSOR_NAME_AVAILABLE, {\"HY015\", \"No cursor name available\"}},\n+    {SQLStateType::CANNOT_MODIFY_IRD, {\"HY016\", \"Cannot modify an implementation row descriptor\"}},\n+    {SQLStateType::INVALID_USE_AUTO_ALLOC_DESCRIPTOR,\n+     {\"HY017\", \"Invalid use of an automatically allocated descriptor handle\"}},\n+    {SQLStateType::SERVER_DECLINED_CANCEL_REQUEST, {\"HY018\", \"Server declined cancel request\"}},\n+    {SQLStateType::NON_CHAR_BIN_SENT_IN_PIECES, {\"HY019\", \"Non-character and non-binary data sent in pieces\"}},\n+    {SQLStateType::ATTEMPT_CONCAT_NULL_VALUE, {\"HY020\", \"Attempt to concatenate a null value\"}},\n+    {SQLStateType::INCONSISTENT_DESC_INFO, {\"HY021\", \"Inconsistent descriptor information\"}},\n+    {SQLStateType::INVALID_ATTR_VALUE, {\"HY024\", \"Invalid attribute value\"}},\n+    {SQLStateType::INVALID_STR_BUFF_LENGTH, {\"HY090\", \"Invalid string or buffer length\"}},\n+    {SQLStateType::INVALD_DESC_FIELD_ID, {\"HY091\", \"Invalid descriptor field identifier\"}},\n+    {SQLStateType::INVALID_ATTR_OPTION_ID, {\"HY092\", \"Invalid attribute/option identifier\"}},\n+    {SQLStateType::FUNCTION_TYPE_OUT_RANGE, {\"HY095\", \"Function type out of range\"}},\n+    {SQLStateType::INFO_TYPE_OUT_RANGE, {\"HY096\", \"Information type out of range\"}},\n+    {SQLStateType::COLUMN_TYPE_OUT_RANGE, {\"HY097\", \"Column type out of range\"}},\n+    {SQLStateType::SCOPE_TYPE_OUT_RANGE, {\"HY098\", \"Scope type out of range\"}},\n+    {SQLStateType::NULL_TYPE_OUT_RANGE, {\"HY099\", \"Nullable type out of range\"}},\n+    {SQLStateType::UNIQ_OPTION_TYPE_OUT_RANGE, {\"HY100\", \"Uniqueness option type out of range\"}},\n+    {SQLStateType::ACCURARY_OPTION_TYPE_OUT_RANGE, {\"HY101\", \"Accuracy option type out of range\"}},\n+    {SQLStateType::INVALID_RETRIEVAL_CODE, {\"HY103\", \"Invalid retrieval code\"}},\n+    {SQLStateType::INVALID_PREC_SCALE_TYPE, {\"HY104\", \"Invalid precision or scale value\"}},\n+    {SQLStateType::INVALID_PARAMETER_TYPE, {\"HY105\", \"Invalid parameter type\"}},\n+    {SQLStateType::FETCH_TYPE_OUT_RANGE, {\"HY106\", \"Fetch type out of range\"}},\n+    {SQLStateType::ROW_VALUE_OUT_RANGE, {\"HY107\", \"Row value out of range\"}},\n+    {SQLStateType::INVALID_CURSOR_POS, {\"HY109\", \"Invalid cursor position\"}},\n+    {SQLStateType::INVALID_DRIVER_COMPLETION, {\"HY110\", \"Invalid driver completion\"}},\n+    {SQLStateType::INVALID_BOOKMARK_VALUE, {\"HY111\", \"Invalid bookmark value\"}},\n+    {SQLStateType::NOT_SUPPORT_ASYNC_FUNCT_EXECUTION,\n+     {\"HY114\", \"Driver does not support connection-level asynchronous function execution\"}},\n+    {SQLStateType::SQLENDTRAN_ASYNC_FUNCT_EXECUTION,\n+     {\"HY115\", \"SQLEndTran is not allowed for an environment that contains a connection with asynchronous function \"\n+               \"execution enabled\"}},\n+    {SQLStateType::CONNECTION_UNKNOW_TRANSACTION_STATE,\n+     {\"HY117\", \"Connection is suspended due to unknown transaction state. Only disconnect and read-only functions are \"\n+               \"allowed.\"}},\n+    {SQLStateType::CURSOR_DRIVER_POOLING_SAME_TIME,\n+     {\"HY121\", \"Cursor Library and Driver-Aware Pooling cannot be enabled at the same time\"}},\n+    {SQLStateType::OPT_FEATURE_NOT_IMPLEMENTED, {\"HYC00\", \"Optional feature not implemented\"}},\n+    {SQLStateType::TIMEOUT_EXPIRED, {\"HYT00\", \"Timeout expired\"}},\n+    {SQLStateType::CONNECTION_TIMEOUT_EXPIRED, {\"HYT01\", \"Connection timeout expired\"}},\n+    {SQLStateType::DRIVER_NOT_SUPPORT_FUNCTION, {\"IM001\", \"Driver does not support this function\"}},\n+    {SQLStateType::DSN_NOT_FOUND_NO_DEFAULT, {\"IM002\", \"Data source not found and no default driver specified\"}},\n+    {SQLStateType::DRIVER_COULD_NOT_BE_CONNECTED, {\"IM003\", \"Specified driver could not be connected to\"}},\n+    {SQLStateType::ALLOC_HANDLE_ENV_FAIL, {\"IM004\", \"Driver's SQLAllocHandle on SQL_HANDLE_ENV failed\"}},\n+    {SQLStateType::ALLOC_HANDLE_DBC_FAIL, {\"IM005\", \"Driver's SQLAllocHandle on SQL_HANDLE_DBC failed\"}},\n+    {SQLStateType::SET_CONNECTION_ATTR_FAIL, {\"IM006\", \"Driver's SQLSetConnectAttr failed\"}},\n+    {SQLStateType::NO_DSN_OR_DRIVER, {\"IM007\", \"No data source or driver specified; dialog prohibited\"}},\n+    {SQLStateType::DIALOG_FAIL, {\"IM008\", \"Dialog failed\"}},\n+    {SQLStateType::UNABLE_CONNECT_TO_TRANSLATION_DLL, {\"IM009\", \"Unable to connect to translation DLL\"}},\n+    {SQLStateType::DSN_TOO_LONG, {\"IM010\", \"Data source name too long\"}},\n+    {SQLStateType::DRIVER_NAME_TOO_LONG, {\"IM011\", \"Driver name too long\"}},\n+    {SQLStateType::KEYWORD_SYNTAX_ERROR, {\"IM012\", \"DRIVER keyword syntax error\"}},\n+    {SQLStateType::DNS_ARCHITECTURE_MISMATCH,\n+     {\"IM014\", \"The specified DSN contains an architecture mismatch between the Driver and Application\"}},\n+    {SQLStateType::CONNECT_HANDLE_DBC_INFO_FAIL, {\"IM015\", \"Driver's SQLConnect on SQL_HANDLE_DBC_INFO_HANDLE failed\"}},\n+    {SQLStateType::POLLING_DISABLED_ACYNC_NOTIGICATION_MODE,\n+     {\"IM017\", \"Polling is disabled in asynchronous notification mode\"}},\n+    {SQLStateType::SHOULD_CALL_COMPLETE_ASYNC,\n+     {\"IM018\", \"SQLCompleteAsync has not been called to complete the previous asynchronous operation on this handle.\"}},\n+    {SQLStateType::NOT_SUPPORT_ASYNC_NOTIFICATION, {\"S1118\", \"Driver does not support asynchronous notification\"}}};\n+\n+bool OdbcDiagnostic::IsDiagRecordField(SQLSMALLINT rec_field) {\n+\tswitch (rec_field) {\n+\tcase SQL_DIAG_CLASS_ORIGIN:\n+\tcase SQL_DIAG_COLUMN_NUMBER:\n+\tcase SQL_DIAG_CONNECTION_NAME:\n+\tcase SQL_DIAG_MESSAGE_TEXT:\n+\tcase SQL_DIAG_NATIVE:\n+\tcase SQL_DIAG_ROW_NUMBER:\n+\tcase SQL_DIAG_SERVER_NAME:\n+\tcase SQL_DIAG_SQLSTATE:\n+\tcase SQL_DIAG_SUBCLASS_ORIGIN:\n+\t\treturn true;\n+\tdefault:\n+\t\treturn false;\n+\t}\n+}\n+\n+void OdbcDiagnostic::FormatDiagnosticMessage(DiagRecord &diag_record, const std::string &data_source,\n+                                             const std::string &component) {\n+\t// https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/diagnostic-messages?view=sql-server-ver15\n+\t// [ vendor-identifier ][ ODBC-component-identifier ][ data-source-identifier ] data-source-supplied-text\n+\tauto error_msg = diag_record.GetOriginalMessage();\n+\n+\tstring msg = \"ODBC_DuckDB\";\n+\tif (!data_source.empty()) {\n+\t\tmsg += \"->\" + data_source;\n+\t}\n+\tif (!component.empty()) {\n+\t\tmsg += \"->\" + component;\n+\t}\n+\tmsg += \"\\n\" + error_msg;\n+\n+\tdiag_record.SetMessage(msg);\n+}\n+\n+void OdbcDiagnostic::AddDiagRecord(DiagRecord &diag_record) {\n+\tauto rec_idx = (SQLSMALLINT)diag_records.size();\n+\tdiag_records.emplace_back(diag_record);\n+\tvec_record_idx.emplace_back(rec_idx);\n+}\n+\n+void OdbcDiagnostic::AddNewRecIdx(SQLSMALLINT rec_idx) {\n+\tauto origin_idx = vec_record_idx[rec_idx];\n+\tauto begin = vec_record_idx.begin();\n+\tvec_record_idx.emplace(std::next(begin, rec_idx + 1), origin_idx);\n+}\n+\n+duckdb::idx_t OdbcDiagnostic::GetTotalRecords() {\n+\treturn vec_record_idx.size();\n+}\n+\n+void OdbcDiagnostic::Clean() {\n+\theader = DiagHeader();\n+\tdiag_records.clear();\n+\tvec_record_idx.clear();\n+}\n+\n+string OdbcDiagnostic::GetDiagDynamicFunction() {\n+\tauto entry = MAP_DYNAMIC_FUNCTION.find(header.sql_diag_dynamic_function_code);\n+\tif (entry == MAP_DYNAMIC_FUNCTION.end()) {\n+\t\treturn \"\";\n+\t}\n+\treturn entry->second;\n+}\n+\n+bool OdbcDiagnostic::VerifyRecordIndex(SQLINTEGER rec_idx) {\n+\treturn (rec_idx < (SQLINTEGER)diag_records.size() && rec_idx >= 0);\n+}\n+\n+DiagRecord &OdbcDiagnostic::GetDiagRecord(SQLINTEGER rec_idx) {\n+\tD_ASSERT(rec_idx < (SQLINTEGER)vec_record_idx.size() && rec_idx >= 0);\n+\tauto origin_idx = vec_record_idx[rec_idx];\n+\tauto diag_record = &diag_records[origin_idx];\n+\t// getting first record, clear up vec_record_idx\n+\tif (rec_idx == 0) {\n+\t\tvec_record_idx.clear();\n+\t\tfor (duckdb::idx_t i = 0; i < diag_records.size(); ++i) {\n+\t\t\tvec_record_idx.emplace_back(i);\n+\t\t\tdiag_records[i].ClearStackMsgOffset();\n+\t\t}\n+\t}\n+\treturn *diag_record;\n+}\n+\n+std::string OdbcDiagnostic::GetDiagClassOrigin(SQLINTEGER rec_idx) {\n+\tD_ASSERT(rec_idx < (SQLINTEGER)diag_records.size() && rec_idx >= 0);\n+\tauto sqlstate_str = diag_records[rec_idx].sql_diag_sqlstate;\n+\tif (sqlstate_str.find(\"IM\") != std::string::npos) {\n+\t\treturn \"ODBC 3.0\";\n+\t} else {\n+\t\treturn \"ISO 9075\";\n+\t}\n+}\n+\n+std::string OdbcDiagnostic::GetDiagSubclassOrigin(SQLINTEGER rec_idx) {\n+\tD_ASSERT(rec_idx < (SQLINTEGER)diag_records.size() && rec_idx >= 0);\n+\tauto sqlstate_str = diag_records[rec_idx].sql_diag_sqlstate;\n+\t;\n+\tif (SET_ODBC3_SUBCLASS_ORIGIN.find(sqlstate_str) != SET_ODBC3_SUBCLASS_ORIGIN.end()) {\n+\t\treturn \"ODBC 3.0\";\n+\t} else {\n+\t\treturn \"ISO 9075\";\n+\t}\n+}\n+\n+// DiagRecord functions ****************************************************************\n+DiagRecord::DiagRecord(const std::string &msg, const SQLStateType &sqlstate_type, const std::string &server_name,\n+                       SQLINTEGER col_number, SQLINTEGER sql_native, SQLLEN row_number) {\n+\tD_ASSERT(!msg.empty());\n+\n+\tsql_diag_message_text = msg;\n+\n+\tauto entry = OdbcDiagnostic::MAP_ODBC_SQL_STATES.find(sqlstate_type);\n+\tif (entry != OdbcDiagnostic::MAP_ODBC_SQL_STATES.end()) {\n+\t\tsql_diag_sqlstate = entry->second.code;\n+\t}\n+\n+\tsql_diag_server_name = server_name;\n+\tsql_diag_column_number = col_number;\n+\tsql_diag_native = sql_native;\n+\tsql_diag_row_number = row_number;\n+\n+\tstack_msg_offset.push(0);\n+}\n+\n+DiagRecord::DiagRecord(const DiagRecord &other) {\n+\t// calling copy assigment operator\n+\t*this = other;\n+}\n+\n+DiagRecord &DiagRecord::operator=(const DiagRecord &other) {\n+\tif (&other != this) {\n+\t\tsql_diag_message_text = other.sql_diag_message_text;\n+\t\tsql_diag_sqlstate = other.sql_diag_sqlstate;\n+\t\tsql_diag_server_name = other.sql_diag_server_name;\n+\t\tsql_diag_column_number = other.sql_diag_column_number;\n+\t\tsql_diag_native = other.sql_diag_native;\n+\t\tsql_diag_row_number = other.sql_diag_row_number;\n+\t\tstack_msg_offset = other.stack_msg_offset;\n+\t}\n+\treturn *this;\n+}\n+\n+std::string DiagRecord::GetOriginalMessage() {\n+\treturn sql_diag_message_text;\n+}\n+\n+std::string DiagRecord::GetMessage(SQLSMALLINT buff_length) {\n+\tduckdb::idx_t last_offset = stack_msg_offset.top();\n+\tauto new_offset = last_offset + buff_length;\n+\tif (new_offset >= sql_diag_message_text.size()) {\n+\t\tClearStackMsgOffset();\n+\t} else {\n+\t\tstack_msg_offset.push(new_offset);\n+\t}\n+\treturn sql_diag_message_text.substr(last_offset);\n+}\n+\n+void DiagRecord::SetMessage(const std::string &new_msg) {\n+\tD_ASSERT(!new_msg.empty());\n+\tsql_diag_message_text = new_msg;\n+\tClearStackMsgOffset();\n+}\n+\n+void DiagRecord::ClearStackMsgOffset() {\n+\twhile (!stack_msg_offset.empty() && stack_msg_offset.top() != 0) {\n+\t\tstack_msg_offset.pop();\n+\t}\n+}\n\\ No newline at end of file\ndiff --git a/tools/odbc/odbc_exception.cpp b/tools/odbc/odbc_exception.cpp\nnew file mode 100644\nindex 000000000000..d78d6b88d60c\n--- /dev/null\n+++ b/tools/odbc/odbc_exception.cpp\n@@ -0,0 +1,16 @@\n+#include \"odbc_exception.hpp\"\n+\n+using duckdb::DiagRecord;\n+using duckdb::OdbcException;\n+\n+const std::string OdbcException::GetComponent() {\n+\treturn component;\n+}\n+\n+const SQLRETURN OdbcException::GetSqlReturn() {\n+\treturn sql_ret;\n+}\n+\n+const DiagRecord &OdbcException::GetDiagRecord() {\n+\treturn diag_record;\n+}\n\\ No newline at end of file\ndiff --git a/tools/odbc/odbc_interval.cpp b/tools/odbc/odbc_interval.cpp\nindex 7a8073326966..6c1ab59915a3 100644\n--- a/tools/odbc/odbc_interval.cpp\n+++ b/tools/odbc/odbc_interval.cpp\n@@ -1,10 +1,13 @@\n #include \"odbc_interval.hpp\"\n #include \"duckdb/common/operator/cast_operators.hpp\"\n+#include \"odbc_diagnostic.hpp\"\n+#include \"odbc_exception.hpp\"\n #include <sqltypes.h>\n #include <sqlext.h>\n \n using duckdb::interval_t;\n using duckdb::OdbcInterval;\n+using duckdb::SQLStateType;\n using duckdb::Value;\n \n bool OdbcInterval::GetInterval(Value &value, interval_t &interval, duckdb::OdbcHandleStmt *stmt) {\n@@ -16,10 +19,11 @@ bool OdbcInterval::GetInterval(Value &value, interval_t &interval, duckdb::OdbcH\n \t\tstring error_message;\n \t\tauto &val_str = StringValue::Get(value);\n \t\tif (!TryCastErrorMessage::Operation<string_t, interval_t>(string_t(val_str), interval, &error_message)) {\n-\t\t\tif (error_message.empty()) {\n-\t\t\t\terror_message = CastExceptionText<string_t, interval_t>(string_t(val_str));\n-\t\t\t}\n-\t\t\tstmt->error_messages.emplace_back(error_message);\n+\t\t\terror_message = CastExceptionText<string_t, interval_t>(string_t(val_str));\n+\t\t\tauto data_source = stmt->dbc->GetDataSourceName();\n+\t\t\tduckdb::DiagRecord diag_rec(error_message, SQLStateType::INVALID_DATATIME_FORMAT, data_source);\n+\t\t\tstmt->odbc_diagnostic->FormatDiagnosticMessage(diag_rec, data_source, \"OdbcInterval::GetInterval\");\n+\t\t\tstmt->odbc_diagnostic->AddDiagRecord(diag_rec);\n \t\t\treturn false;\n \t\t}\n \t\treturn true;\ndiff --git a/tools/odbc/statement_functions.cpp b/tools/odbc/statement_functions.cpp\nindex d84a781bc106..c16671088197 100644\n--- a/tools/odbc/statement_functions.cpp\n+++ b/tools/odbc/statement_functions.cpp\n@@ -28,8 +28,10 @@ using duckdb::hugeint_t;\n using duckdb::interval_t;\n using duckdb::LogicalType;\n using duckdb::LogicalTypeId;\n+using duckdb::OdbcDiagnostic;\n using duckdb::OdbcInterval;\n using duckdb::OdbcUtils;\n+using duckdb::SQLStateType;\n using duckdb::Store;\n using duckdb::string_t;\n using duckdb::timestamp_t;\n@@ -51,8 +53,9 @@ SQLRETURN duckdb::PrepareStmt(SQLHSTMT statement_handle, SQLCHAR *statement_text\n \t\tauto query = duckdb::OdbcUtils::ReadString(statement_text, text_length);\n \t\tstmt->stmt = stmt->dbc->conn->Prepare(query);\n \t\tif (!stmt->stmt->success) {\n-\t\t\tstmt->error_messages.emplace_back(stmt->stmt->error);\n-\t\t\treturn SQL_ERROR;\n+\t\t\tDiagRecord diag_rec(stmt->stmt->error, SQLStateType::SYNTAX_ERROR_OR_ACCESS_VIOLATION,\n+\t\t\t                    stmt->dbc->GetDataSourceName());\n+\t\t\tthrow OdbcException(\"PrepareStmt\", SQL_ERROR, diag_rec);\n \t\t}\n \t\tstmt->param_desc->ResetParams(stmt->stmt->n_param);\n \n@@ -130,19 +133,22 @@ SQLRETURN duckdb::FetchStmtResult(SQLHSTMT statement_handle, SQLSMALLINT fetch_o\n \n //! Static fuctions used by GetDataStmtResult //\n \n-static bool ValidateType(LogicalTypeId input, LogicalTypeId expected, duckdb::OdbcHandleStmt *stmt) {\n+static void ValidateType(LogicalTypeId input, LogicalTypeId expected, duckdb::OdbcHandleStmt *stmt) {\n \tif (input != expected) {\n-\t\tstmt->error_messages.emplace_back(\"Type mismatch error: received \" + LogicalTypeIdToString(input) +\n-\t\t                                  \", but expected \" + LogicalTypeIdToString(expected));\n-\t\treturn false;\n+\t\tstring msg = \"Type mismatch error: received \" + LogicalTypeIdToString(input) + \", but expected \" +\n+\t\t             LogicalTypeIdToString(expected);\n+\t\tduckdb::DiagRecord diag_rec(msg, SQLStateType::RESTRICTED_DATA_TYPE, stmt->dbc->GetDataSourceName());\n+\t\tthrow duckdb::OdbcException(\"ValidateType\", SQL_ERROR, diag_rec);\n \t}\n-\treturn true;\n }\n \n-static void LogInvalidCast(const LogicalType &from_type, const LogicalType &to_type, duckdb::OdbcHandleStmt *stmt) {\n+static void ThrowInvalidCast(const string &component, const LogicalType &from_type, const LogicalType &to_type,\n+                             duckdb::OdbcHandleStmt *stmt) {\n \tstring msg = \"Not implemented Error: Unimplemented type for cast (\" + from_type.ToString() + \" -> \" +\n \t             to_type.ToString() + \")\";\n-\tstmt->error_messages.emplace_back(msg);\n+\n+\tduckdb::DiagRecord diag_rec(msg, SQLStateType::INVALID_DATATIME_FORMAT, stmt->dbc->GetDataSourceName());\n+\tthrow duckdb::OdbcException(component, SQL_ERROR, diag_rec);\n }\n \n template <class SRC, class DEST = SRC>\n@@ -158,9 +164,10 @@ static SQLRETURN GetInternalValue(duckdb::OdbcHandleStmt *stmt, const duckdb::Va\n \t\t\t*str_len_or_ind_ptr = sizeof(casted_value);\n \t\t}\n \t\treturn SQL_SUCCESS;\n-\t} catch (std::exception &ex) {\n-\t\tstmt->error_messages.emplace_back(ex.what());\n-\t\treturn SQL_ERROR;\n+\t} catch (duckdb::Exception &ex) {\n+\t\tduckdb::DiagRecord diag_rec(std::string(ex.what()), SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t                            stmt->dbc->GetDataSourceName());\n+\t\tthrow duckdb::OdbcException(\"GetInternalValue\", SQL_ERROR, diag_rec);\n \t}\n }\n \n@@ -172,8 +179,9 @@ static bool CastTimestampValue(duckdb::OdbcHandleStmt *stmt, const duckdb::Value\n \t\ttarget = CAST_OP::template Operation<timestamp_t, TARGET_TYPE>(timestamp);\n \t\treturn true;\n \t} catch (duckdb::Exception &ex) {\n-\t\tstmt->error_messages.emplace_back(ex.what());\n-\t\treturn false;\n+\t\tduckdb::DiagRecord diag_rec(std::string(ex.what()), SQLStateType::INVALID_DATATIME_FORMAT,\n+\t\t                            stmt->dbc->GetDataSourceName());\n+\t\tthrow duckdb::OdbcException(\"CastTimestampValue\", SQL_ERROR, diag_rec);\n \t}\n }\n \n@@ -316,9 +324,8 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t\t                        str_len_or_ind_ptr);\n \t\t}\n \t\tcase SQL_C_NUMERIC: {\n-\t\t\tif (!ValidateType(val.type().id(), LogicalTypeId::DECIMAL, stmt)) {\n-\t\t\t\treturn SQL_ERROR;\n-\t\t\t}\n+\t\t\tValidateType(val.type().id(), LogicalTypeId::DECIMAL, stmt);\n+\n \t\t\tSQL_NUMERIC_STRUCT *numeric = (SQL_NUMERIC_STRUCT *)target_value_ptr;\n \t\t\tauto dataptr = (duckdb::data_ptr_t)numeric->val;\n \t\t\t// reset numeric val to remove some garbage\n@@ -410,14 +417,15 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t\t\tstring val_str = val.GetValue<string>();\n \t\t\t\tauto str_input = string_t(val_str);\n \t\t\t\tif (!TryCast::Operation<string_t, date_t>(str_input, date)) {\n-\t\t\t\t\tstmt->error_messages.emplace_back(CastExceptionText<string_t, date_t>(str_input));\n-\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t\tauto msg = CastExceptionText<string_t, date_t>(str_input);\n+\t\t\t\t\tduckdb::DiagRecord diag_rec(msg, SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t\t\t\t                            stmt->dbc->GetDataSourceName());\n+\t\t\t\t\tthrow duckdb::OdbcException(\"GetDataStmtResult\", SQL_ERROR, diag_rec);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tdefault:\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::DATE, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::DATE, stmt);\n \t\t\t} // end switch \"val.type().id()\": SQL_C_TYPE_DATE\n \n \t\t\tSQL_DATE_STRUCT *date_struct = (SQL_DATE_STRUCT *)target_value_ptr;\n@@ -467,14 +475,15 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t\t\tstring val_str = val.GetValue<string>();\n \t\t\t\tauto str_input = string_t(val_str);\n \t\t\t\tif (!TryCast::Operation<string_t, dtime_t>(str_input, time)) {\n-\t\t\t\t\tstmt->error_messages.emplace_back(CastExceptionText<string_t, dtime_t>(str_input));\n-\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t\tauto msg = CastExceptionText<string_t, dtime_t>(str_input);\n+\t\t\t\t\tduckdb::DiagRecord diag_rec(msg, SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t\t\t\t                            stmt->dbc->GetDataSourceName());\n+\t\t\t\t\tthrow duckdb::OdbcException(\"GetDataStmtResult\", SQL_ERROR, diag_rec);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tdefault:\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::TIME, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::TIME, stmt);\n \t\t\t} // end switch \"val.type().id()\": SQL_C_TYPE_TIME\n \n \t\t\tSQL_TIME_STRUCT *time_struct = (SQL_TIME_STRUCT *)target_value_ptr;\n@@ -507,8 +516,10 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t\tcase LogicalTypeId::DATE: {\n \t\t\t\tauto date_input = val.GetValue<date_t>();\n \t\t\t\tif (!TryCast::Operation<date_t, timestamp_t>(date_input, timestamp)) {\n-\t\t\t\t\tstmt->error_messages.emplace_back(CastExceptionText<date_t, timestamp_t>(date_input));\n-\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t\tauto msg = CastExceptionText<date_t, timestamp_t>(date_input);\n+\t\t\t\t\tduckdb::DiagRecord diag_rec(msg, SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t\t\t\t                            stmt->dbc->GetDataSourceName());\n+\t\t\t\t\tthrow duckdb::OdbcException(\"GetDataStmtResult\", SQL_ERROR, diag_rec);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\t}\n@@ -516,14 +527,15 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t\t\tstring val_str = val.GetValue<string>();\n \t\t\t\tauto str_input = string_t(val_str);\n \t\t\t\tif (!TryCast::Operation<string_t, timestamp_t>(str_input, timestamp)) {\n-\t\t\t\t\tstmt->error_messages.emplace_back(CastExceptionText<string_t, timestamp_t>(str_input));\n-\t\t\t\t\treturn SQL_ERROR;\n+\t\t\t\t\tauto msg = CastExceptionText<string_t, timestamp_t>(str_input);\n+\t\t\t\t\tduckdb::DiagRecord diag_rec(msg, SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t\t\t\t                            stmt->dbc->GetDataSourceName());\n+\t\t\t\t\tthrow duckdb::OdbcException(\"GetDataStmtResult\", SQL_ERROR, diag_rec);\n \t\t\t\t}\n \t\t\t\tbreak;\n \t\t\t}\n \t\t\tdefault:\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::TIMESTAMP, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::TIMESTAMP, stmt);\n \t\t\t} // end switch \"val.type().id()\"\n \n \t\t\tSQL_TIMESTAMP_STRUCT *timestamp_struct = (SQL_TIMESTAMP_STRUCT *)target_value_ptr;\n@@ -551,8 +563,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_YEAR: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -568,8 +579,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_MONTH: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -585,8 +595,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_DAY: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -602,8 +611,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_HOUR: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -619,8 +627,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_MINUTE: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -636,8 +643,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_SECOND: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -653,8 +659,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_YEAR_TO_MONTH: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -673,8 +678,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_DAY_TO_HOUR: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -690,8 +694,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_DAY_TO_MINUTE: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -707,8 +710,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_DAY_TO_SECOND: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -724,8 +726,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_HOUR_TO_MINUTE: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -741,8 +742,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_HOUR_TO_SECOND: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -758,8 +758,7 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\tcase SQL_C_INTERVAL_MINUTE_TO_SECOND: {\n \t\t\tinterval_t interval;\n \t\t\tif (!OdbcInterval::GetInterval(val, interval, stmt)) {\n-\t\t\t\tLogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);\n-\t\t\t\treturn SQL_ERROR;\n+\t\t\t\tThrowInvalidCast(\"GetDataStmtResult\", val.type(), LogicalType::INTERVAL, stmt);\n \t\t\t}\n \n \t\t\tSQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;\n@@ -774,9 +773,9 @@ SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_\n \t\t}\n \t\t// TODO other types\n \t\tdefault:\n-\t\t\tstmt->error_messages.emplace_back(\"Unsupported type.\");\n-\t\t\treturn SQL_ERROR;\n-\n+\t\t\tduckdb::DiagRecord diag_rec(\"Unsupported type\", SQLStateType::RESTRICTED_DATA_TYPE,\n+\t\t\t                            stmt->dbc->GetDataSourceName());\n+\t\t\tthrow duckdb::OdbcException(\"GetDataStmtResult\", SQL_ERROR, diag_rec);\n \t\t} // end switch \"(target_type)\": SQL_C_TYPE_TIMESTAMP\n \t});\n }\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex c86b351f33b2..274ad051bb96 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -10,6 +10,7 @@\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/parser/parsed_data/create_table_function_info.hpp\"\n #include \"duckdb/common/types/vector.hpp\"\n+#include \"duckdb/common/types.hpp\"\n #include \"duckdb/common/printer.hpp\"\n #include \"duckdb/main/config.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n@@ -540,9 +541,7 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const string &databas\n \treturn res;\n }\n \n-vector<Value> DuckDBPyConnection::TransformPythonParamList(py::handle params) {\n-\tvector<Value> args;\n-\n+Value TransformPythonValue(py::handle ele) {\n \tauto datetime_mod = py::module::import(\"datetime\");\n \tauto datetime_date = datetime_mod.attr(\"date\");\n \tauto datetime_datetime = datetime_mod.attr(\"datetime\");\n@@ -550,50 +549,75 @@ vector<Value> DuckDBPyConnection::TransformPythonParamList(py::handle params) {\n \tauto decimal_mod = py::module::import(\"decimal\");\n \tauto decimal_decimal = decimal_mod.attr(\"Decimal\");\n \n-\tfor (pybind11::handle ele : params) {\n-\t\tif (ele.is_none()) {\n-\t\t\targs.emplace_back();\n-\t\t} else if (py::isinstance<py::bool_>(ele)) {\n-\t\t\targs.push_back(Value::BOOLEAN(ele.cast<bool>()));\n-\t\t} else if (py::isinstance<py::int_>(ele)) {\n-\t\t\targs.push_back(Value::BIGINT(ele.cast<int64_t>()));\n-\t\t} else if (py::isinstance<py::float_>(ele)) {\n-\t\t\targs.push_back(Value::DOUBLE(ele.cast<double>()));\n-\t\t} else if (py::isinstance(ele, decimal_decimal)) {\n-\t\t\targs.emplace_back(py::str(ele).cast<string>());\n-\t\t} else if (py::isinstance(ele, datetime_datetime)) {\n-\t\t\tauto year = PyDateTime_GET_YEAR(ele.ptr());\n-\t\t\tauto month = PyDateTime_GET_MONTH(ele.ptr());\n-\t\t\tauto day = PyDateTime_GET_DAY(ele.ptr());\n-\t\t\tauto hour = PyDateTime_DATE_GET_HOUR(ele.ptr());\n-\t\t\tauto minute = PyDateTime_DATE_GET_MINUTE(ele.ptr());\n-\t\t\tauto second = PyDateTime_DATE_GET_SECOND(ele.ptr());\n-\t\t\tauto micros = PyDateTime_DATE_GET_MICROSECOND(ele.ptr());\n-\t\t\targs.push_back(Value::TIMESTAMP(year, month, day, hour, minute, second, micros));\n-\t\t} else if (py::isinstance(ele, datetime_time)) {\n-\t\t\tauto hour = PyDateTime_TIME_GET_HOUR(ele.ptr());\n-\t\t\tauto minute = PyDateTime_TIME_GET_MINUTE(ele.ptr());\n-\t\t\tauto second = PyDateTime_TIME_GET_SECOND(ele.ptr());\n-\t\t\tauto micros = PyDateTime_TIME_GET_MICROSECOND(ele.ptr());\n-\t\t\targs.push_back(Value::TIME(hour, minute, second, micros));\n-\t\t} else if (py::isinstance(ele, datetime_date)) {\n-\t\t\tauto year = PyDateTime_GET_YEAR(ele.ptr());\n-\t\t\tauto month = PyDateTime_GET_MONTH(ele.ptr());\n-\t\t\tauto day = PyDateTime_GET_DAY(ele.ptr());\n-\t\t\targs.push_back(Value::DATE(year, month, day));\n-\t\t} else if (py::isinstance<py::str>(ele)) {\n-\t\t\targs.emplace_back(ele.cast<string>());\n-\t\t} else if (py::isinstance<py::memoryview>(ele)) {\n-\t\t\tpy::memoryview py_view = ele.cast<py::memoryview>();\n-\t\t\tPyObject *py_view_ptr = py_view.ptr();\n-\t\t\tPy_buffer *py_buf = PyMemoryView_GET_BUFFER(py_view_ptr);\n-\t\t\targs.emplace_back(Value::BLOB(const_data_ptr_t(py_buf->buf), idx_t(py_buf->len)));\n-\t\t} else if (py::isinstance<py::bytes>(ele)) {\n-\t\t\tconst string &ele_string = ele.cast<string>();\n-\t\t\targs.emplace_back(Value::BLOB(const_data_ptr_t(ele_string.data()), ele_string.size()));\n-\t\t} else {\n-\t\t\tthrow std::runtime_error(\"unknown param type \" + py::str(ele.get_type()).cast<string>());\n+\tif (ele.is_none()) {\n+\t\treturn Value();\n+\t} else if (py::isinstance<py::bool_>(ele)) {\n+\t\treturn Value::BOOLEAN(ele.cast<bool>());\n+\t} else if (py::isinstance<py::int_>(ele)) {\n+\t\treturn Value::BIGINT(ele.cast<int64_t>());\n+\t} else if (py::isinstance<py::float_>(ele)) {\n+\t\treturn Value::DOUBLE(ele.cast<double>());\n+\t} else if (py::isinstance(ele, decimal_decimal)) {\n+\t\treturn py::str(ele).cast<string>();\n+\t} else if (py::isinstance(ele, datetime_datetime)) {\n+\t\tauto ptr = ele.ptr();\n+\t\tauto year = PyDateTime_GET_YEAR(ptr);\n+\t\tauto month = PyDateTime_GET_MONTH(ptr);\n+\t\tauto day = PyDateTime_GET_DAY(ptr);\n+\t\tauto hour = PyDateTime_DATE_GET_HOUR(ptr);\n+\t\tauto minute = PyDateTime_DATE_GET_MINUTE(ptr);\n+\t\tauto second = PyDateTime_DATE_GET_SECOND(ptr);\n+\t\tauto micros = PyDateTime_DATE_GET_MICROSECOND(ptr);\n+\t\treturn Value::TIMESTAMP(year, month, day, hour, minute, second, micros);\n+\t} else if (py::isinstance(ele, datetime_time)) {\n+\t\tauto ptr = ele.ptr();\n+\t\tauto hour = PyDateTime_TIME_GET_HOUR(ptr);\n+\t\tauto minute = PyDateTime_TIME_GET_MINUTE(ptr);\n+\t\tauto second = PyDateTime_TIME_GET_SECOND(ptr);\n+\t\tauto micros = PyDateTime_TIME_GET_MICROSECOND(ptr);\n+\t\treturn Value::TIME(hour, minute, second, micros);\n+\t} else if (py::isinstance(ele, datetime_date)) {\n+\t\tauto ptr = ele.ptr();\n+\t\tauto year = PyDateTime_GET_YEAR(ptr);\n+\t\tauto month = PyDateTime_GET_MONTH(ptr);\n+\t\tauto day = PyDateTime_GET_DAY(ptr);\n+\t\treturn Value::DATE(year, month, day);\n+\t} else if (py::isinstance<py::str>(ele)) {\n+\t\treturn ele.cast<string>();\n+\t} else if (py::isinstance<py::memoryview>(ele)) {\n+\t\tpy::memoryview py_view = ele.cast<py::memoryview>();\n+\t\tPyObject *py_view_ptr = py_view.ptr();\n+\t\tPy_buffer *py_buf = PyMemoryView_GET_BUFFER(py_view_ptr);\n+\t\treturn Value::BLOB(const_data_ptr_t(py_buf->buf), idx_t(py_buf->len));\n+\t} else if (py::isinstance<py::bytes>(ele)) {\n+\t\tconst string &ele_string = ele.cast<string>();\n+\t\treturn Value::BLOB(const_data_ptr_t(ele_string.data()), ele_string.size());\n+\t} else if (py::isinstance<py::list>(ele)) {\n+\t\tauto size = py::len(ele);\n+\n+\t\tif (size == 0) {\n+\t\t\treturn Value::EMPTYLIST(LogicalType::SQLNULL);\n \t\t}\n+\n+\t\tvector<Value> values;\n+\t\tvalues.reserve(size);\n+\n+\t\tfor (auto py_val : ele) {\n+\t\t\tvalues.emplace_back(TransformPythonValue(py_val));\n+\t\t}\n+\n+\t\treturn Value::LIST(values);\n+\t} else {\n+\t\tthrow std::runtime_error(\"unknown param type \" + py::str(ele.get_type()).cast<string>());\n+\t}\n+}\n+\n+vector<Value> DuckDBPyConnection::TransformPythonParamList(py::handle params) {\n+\tvector<Value> args;\n+\targs.reserve(py::len(params));\n+\n+\tfor (auto param : params) {\n+\t\targs.emplace_back(TransformPythonValue(param));\n \t}\n \treturn args;\n }\ndiff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp\nindex f6ebecd65101..2afe4de63e7d 100644\n--- a/tools/pythonpkg/src/pyrelation.cpp\n+++ b/tools/pythonpkg/src/pyrelation.cpp\n@@ -81,6 +81,8 @@ void DuckDBPyRelation::Initialize(py::handle &m) {\n \t    .def(\"sem\", &DuckDBPyRelation::SEM, \"Returns the standard error of the mean of the aggregate column.\",\n \t         py::arg(\"aggregation_columns\"), py::arg(\"group_columns\") = \"\")\n \t    .def(\"unique\", &DuckDBPyRelation::Unique, \"Number of distinct values in a column.\", py::arg(\"unique_aggr\"))\n+\t    .def(\"union\", &DuckDBPyRelation::Union, py::arg(\"union_rel\"),\n+\t         \"Create the set union of this relation object with another relation object in other_rel\")\n \t    .def(\"cumsum\", &DuckDBPyRelation::CumSum, \"Returns the cumulative sum of the aggregate column.\",\n \t         py::arg(\"aggregation_columns\"))\n \t    .def(\"cumprod\", &DuckDBPyRelation::CumProd, \"Returns the cumulative product of the aggregate column.\",\n",
  "test_patch": "diff --git a/test/helpers/test_helper_extension.cpp b/test/helpers/test_helper_extension.cpp\nindex b6ca758f8492..9234af8f0984 100644\n--- a/test/helpers/test_helper_extension.cpp\n+++ b/test/helpers/test_helper_extension.cpp\n@@ -4,6 +4,7 @@\n #include \"duckdb/function/scalar_function.hpp\"\n #include \"duckdb/main/connection.hpp\"\n #include \"duckdb/parser/parsed_data/create_scalar_function_info.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n \n namespace duckdb {\n \n@@ -29,9 +30,10 @@ void TestHelperExtension::Load(DuckDB &db) {\n \n \tConnection conn(db);\n \tconn.BeginTransaction();\n-\tauto &catalog = Catalog::GetCatalog(*conn.context);\n-\tcatalog.CreateFunction(*conn.context, &hello_info);\n-\tcatalog.CreateFunction(*conn.context, &last_error_info);\n+\tauto &client_context = *conn.context;\n+\tauto &catalog = Catalog::GetCatalog(client_context);\n+\tcatalog.CreateFunction(client_context, &hello_info);\n+\tcatalog.CreateFunction(client_context, &last_error_info);\n \tconn.Commit();\n }\n \ndiff --git a/test/helpers/test_helpers.cpp b/test/helpers/test_helpers.cpp\nindex 752ad5e2ab97..014c86ad9ced 100644\n--- a/test/helpers/test_helpers.cpp\n+++ b/test/helpers/test_helpers.cpp\n@@ -8,6 +8,7 @@\n #include \"duckdb/main/query_result.hpp\"\n #include \"test_helpers.hpp\"\n #include \"duckdb/parser/parsed_data/copy_info.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n \n #include <cmath>\n #include <fstream>\ndiff --git a/test/sql/aggregate/group/test_group_by_parallel.test_coverage b/test/sql/aggregate/group/test_group_by_parallel.test_slow\nsimilarity index 94%\nrename from test/sql/aggregate/group/test_group_by_parallel.test_coverage\nrename to test/sql/aggregate/group/test_group_by_parallel.test_slow\nindex aa82c55e4d0a..cfef16b5c63b 100644\n--- a/test/sql/aggregate/group/test_group_by_parallel.test_coverage\n+++ b/test/sql/aggregate/group/test_group_by_parallel.test_slow\n@@ -1,4 +1,4 @@\n-# name: test/sql/aggregate/group/test_group_by_parallel.test_coverage\n+# name: test/sql/aggregate/group/test_group_by_parallel.test_slow\n # description: Test parallel group by\n # group: [group]\n \ndiff --git a/test/sql/function/list/flatten.test b/test/sql/function/list/flatten.test\nnew file mode 100644\nindex 000000000000..cf1f2e8e240d\n--- /dev/null\n+++ b/test/sql/function/list/flatten.test\n@@ -0,0 +1,126 @@\n+# name: test/sql/function/list/flatten.test\n+# description: Test flatten function\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# basic functionality\n+query T\n+SELECT flatten([[1, 2, 3, 4]])\n+----\n+[1, 2, 3, 4]\n+\n+query T\n+SELECT flatten([[1, 2], [3, 4]])\n+----\n+[1, 2, 3, 4]\n+\n+statement error\n+SELECT flatten(1)\n+\n+# empty nested list\n+query T\n+SELECT flatten([[], []])\n+----\n+[]\n+\n+# empty child list\n+query T\n+SELECT flatten([[1, 2], [], [3, 4]])\n+----\n+[1, 2, 3, 4]\n+\n+query T\n+SELECT flatten([[1, 2], []])\n+----\n+[1, 2]\n+\n+query T\n+SELECT flatten([[], [1, 2]])\n+----\n+[1, 2]\n+\n+# NULL\n+query T\n+SELECT flatten(NULL)\n+----\n+NULL\n+\n+query T\n+SELECT flatten([NULL])\n+----\n+[]\n+\n+query T\n+SELECT flatten([[NULL]])\n+----\n+[NULL]\n+\n+query T\n+SELECT flatten([NULL, [1], [2, 3], NULL, [4, NULL], [NULL, NULL]])\n+----\n+[1, 2, 3, 4, NULL, NULL, NULL]\n+\n+# multiple-layered nested list\n+query T\n+SELECT flatten([[[1, 2], [3, 4]], [[5,6], [7, 8]]])\n+----\n+[[1, 2], [3, 4], [5, 6], [7, 8]]\n+\n+query T\n+SELECT flatten(flatten(flatten([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]])))\n+----\n+[1, 2, 3, 4, 5, 6, 7, 8]\n+\n+query T\n+SELECT flatten([[[1, 2], [3, 4]], [], [[5, 6], [7, 8]]]);\n+----\n+[[1, 2], [3, 4], [5, 6], [7, 8]]\n+\n+query T\n+SELECT flatten([[[1, 2], [3, 4]], [[]], [[5, 6], [7, 8]]]);\n+----\n+[[1, 2], [3, 4], [], [5, 6], [7, 8]]\n+\n+query T\n+SELECT flatten([[[]], [[]]])\n+----\n+[[], []]\n+\n+query T\n+SELECT flatten(flatten([[[]], [[]]]))\n+----\n+[]\n+\n+# flat vector\n+statement ok\n+CREATE TABLE nums AS SELECT range % 8 i, range j FROM range(16)\n+\n+statement ok\n+CREATE TABLE lists AS SELECT i % 4 i, list(j) j FROM nums GROUP BY i\n+\n+statement ok\n+CREATE TABLE nested_lists AS SELECT i, list(j) j FROM lists GROUP BY i\n+\n+query II\n+SELECT i, flatten(j) FROM nested_lists\n+----\n+0\t[0, 8, 4, 12]\n+1\t[1, 9, 5, 13]\n+2\t[2, 10, 6, 14]\n+3\t[3, 11, 7, 15]\n+\n+query II\n+SELECT i, flatten(j) FROM nested_lists WHERE i % 2 != 0\n+----\n+1\t[1, 9, 5, 13]\n+3\t[3, 11, 7, 15]\n+\n+query II\n+SELECT i, flatten([[1, 2], [3, 4]]) FROM nested_lists\n+----\n+0\t[1, 2, 3, 4]\n+1\t[1, 2, 3, 4]\n+2\t[1, 2, 3, 4]\n+3\t[1, 2, 3, 4]\ndiff --git a/test/sql/function/list/list_concat.test b/test/sql/function/list/list_concat.test\nindex 2262de48ed5a..f202a8c92b2c 100644\n--- a/test/sql/function/list/list_concat.test\n+++ b/test/sql/function/list/list_concat.test\n@@ -162,3 +162,25 @@ query T\n SELECT array_prepend(1, [2, 3])\n ----\n [1, 2, 3]\n+\n+# push back\n+query T\n+SELECT array_push_back([1, 2], 3);\n+----\n+[1, 2, 3]\n+\n+query T\n+SELECT array_push_back(NULL, 3);\n+----\n+[3]\n+\n+# push front\n+query T\n+SELECT array_push_front([2, 3], 1);\n+----\n+[1, 2, 3]\n+\n+query T\n+SELECT array_push_front(NULL, 1);\n+----\n+[1]\ndiff --git a/test/sql/function/list/list_contains.test b/test/sql/function/list/list_contains.test\nindex 3a7ad9621811..9101e587170c 100644\n--- a/test/sql/function/list/list_contains.test\n+++ b/test/sql/function/list/list_contains.test\n@@ -1,5 +1,5 @@\n # name: test/sql/function/list/list_contains.test\n-# description: Test list_ccontains function\n+# description: Test list_contains function\n # group: [list]\n \n statement ok\n@@ -323,6 +323,16 @@ SELECT list_contains([{a: 1}, {a: 2}], {a: 3})\n ----\n 0\n \n+query T\n+SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2})\n+----\n+1\n+\n+query T\n+SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2})\n+----\n+0\n+\n query T\n SELECT list_contains([MAP([1], [2])], MAP([1], [2]))\n ----\ndiff --git a/test/sql/function/list/list_position.test b/test/sql/function/list/list_position.test\nnew file mode 100644\nindex 000000000000..177fe100b6ff\n--- /dev/null\n+++ b/test/sql/function/list/list_position.test\n@@ -0,0 +1,379 @@\n+# name: test/sql/function/list/list_position.test\n+# description: Test list_position function\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table TEST2 (i int[], j int);\n+\n+statement ok\n+insert into TEST2 values ([2,1,3], 2), ([2,3,4], 5), ([1], NULL);\n+\n+query T\n+select list_position(i, j) from TEST2\n+----\n+1\n+0\n+NULL\n+\n+statement ok\n+create table TEST (i int[]);\n+\n+statement ok\n+insert into TEST values ([2,1,3]), ([2,3,4]), ([1]);\n+\n+query TT\n+SELECT i, list_position(i,1) from TEST;\n+----\n+[2, 1, 3]\t2\n+[2, 3, 4]\t0\n+[1]\t1\n+\n+query TT\n+SELECT i, list_position(i,4.0) from TEST;\n+----\n+[2, 1, 3]\t0\n+[2, 3, 4]\t3\n+[1]\t0\n+\n+statement ok\n+DROP table TEST;\n+\n+statement ok\n+create table STR_TEST (i string[]);\n+\n+statement ok\n+insert into STR_TEST values (['a','b','c']), (['d','a','e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);\n+\n+query TT\n+SELECT i, list_position(i,'a') from STR_TEST;\n+----\n+[a, b, c]\t1\n+[d, a, e]\t2\n+[b]\t0\n+[aaaaaaaaaaaaaaaaaaaaaaaa]\t0\n+\n+query TT\n+SELECT i, list_position(i,'aaaaaaaaaaaaaaaaaaaaaaaa') from STR_TEST;\n+----\n+[a, b, c]\t0\n+[d, a, e]\t0\n+[b]\t0\n+[aaaaaaaaaaaaaaaaaaaaaaaa]\t1\n+\n+query TT\n+SELECT i, list_position(i,0) from STR_TEST;\n+----\n+[a, b, c]\t0\n+[d, a, e]\t0\n+[b]\t0\n+[aaaaaaaaaaaaaaaaaaaaaaaa]\t0\n+\n+\n+query TT\n+SELECT i, list_position(i,NULL) from STR_TEST;\n+----\n+[a, b, c]\tNULL\n+[d, a, e]\tNULL\n+[b]\tNULL\n+[aaaaaaaaaaaaaaaaaaaaaaaa]\tNULL\n+\n+statement ok\n+DROP table STR_TEST;\n+\n+\n+# basic functionality\n+query T\n+SELECT list_position([7,2,5], 7)\n+----\n+1\n+\n+# Empty list\n+query T\n+SELECT list_position([], 7)\n+----\n+0\n+\n+# Mixed data types\n+query T\n+SELECT list_position([1,2,3],1.0)\n+----\n+1\n+\n+query T\n+SELECT list_position([1.0,2.0,3.0,4.0],1)\n+----\n+1\n+\n+query T\n+SELECT list_position([1,2,3],4.0)\n+----\n+0\n+\n+query T\n+SELECT list_position([1.0,2.0,3.0],4)\n+----\n+0\n+\n+\n+query T\n+SELECT list_position([1.0,2.0,3.0], 'a')\n+----\n+0\n+\n+# Not a list as input\n+statement error\n+SELECT list_position('a', 'a')\n+\n+query T\n+SELECT list_position(NULL,NULL)\n+----\n+NULL\n+\n+\n+query T\n+SELECT list_position([7], 5)\n+----\n+0\n+\n+query T\n+SELECT list_position([1,2,3,4],4)\n+----\n+4\n+\n+query T\n+SELECT list_position([1,2,3,4],5)\n+----\n+0\n+\n+query T\n+SELECT list_position([1.0,2.0,3.0,4.0],5.0)\n+----\n+0\n+\n+query T\n+SELECT list_position([1.0,2.0,3.0,4.0],4.0)\n+----\n+4\n+\n+query T\n+SELECT list_position([true, false],true)\n+----\n+1\n+\n+query T\n+SELECT list_position([true, true],false)\n+----\n+0\n+\n+query T\n+SELECT list_position(['test', 'notest'],'notest')\n+----\n+2\n+\n+query T\n+SELECT list_position(['test', 'notest'],'a')\n+----\n+0\n+\n+# Null types\n+query T\n+SELECT list_position(NULL,1)\n+----\n+NULL\n+\n+# Null types\n+query T\n+SELECT list_position([1],NULL)\n+----\n+NULL\n+\n+query T\n+SELECT list_position([NULL],NULL)\n+----\n+NULL\n+\n+query T\n+SELECT list_position([NULL, 1],NULL)\n+----\n+NULL\n+\n+query T\n+SELECT list_position([NULL, 1],1)\n+----\n+2\n+\n+query T\n+SELECT list_position([NULL, 0],1)\n+----\n+0\n+\n+query T\n+SELECT list_position([],NULL)\n+----\n+NULL\n+\n+query T\n+SELECT list_position([NULL,7], 7)\n+----\n+2\n+\n+statement error\n+SELECT list_position([[1,2,3],[1],[1,2,3])\n+\n+statement error\n+SELECT list_position([[1,2,3],[1],[1,2,3]])\n+\n+statement error\n+SELECT list_position(1)\n+\n+statement error\n+SELECT list_position(1,1)\n+\n+statement ok\n+PRAGMA debug_force_external=true\n+\n+loop i 0 2\n+\n+foreach type <integral> varchar\n+\n+# list tests\n+statement ok\n+CREATE TABLE test0 (i ${type}[])\n+\n+statement ok\n+INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3])\n+\n+query T\n+SELECT list_position(i,1) from test0\n+----\n+0\n+1\n+1\n+0\n+0\n+0\n+0\n+\n+statement ok\n+DROP TABLE test0\n+\n+statement ok\n+PRAGMA debug_force_external=false\n+\n+endloop\n+\n+endloop\n+\n+query T\n+SELECT list_position([[1,2,3],[1]],[1])\n+----\n+2\n+\n+query T\n+SELECT list_position([[1,2,3],[1]],[2])\n+----\n+0\n+\n+query T\n+SELECT list_position([[1,2,3],[1]],[1,2,3])\n+----\n+1\n+\n+query T\n+SELECT list_position([[1,3],[1]],[1,2,3])\n+----\n+0\n+\n+query T\n+SELECT list_position([[1,3],[1], [1,2,3]],[1,2,3])\n+----\n+3\n+\n+query T\n+SELECT list_position([[NULL],[1], [1,2,3]],NULL)\n+----\n+NULL\n+\n+query T\n+SELECT list_position([[NULL],[1], [1,2,3]],[NULL])\n+----\n+1\n+\n+query T\n+SELECT list_position([[1,NULL],[1], [1,2,3]],[1,NULL])\n+----\n+1\n+\n+query T\n+SELECT list_position([[1,NULL],[1], [1,2,3]],[0,NULL])\n+----\n+0\n+\n+# nested types\n+query T\n+SELECT list_position([{a: 1}, {a: 2}], {a: 2})\n+----\n+2\n+\n+query T\n+SELECT list_position([{a: 1}, {a: 2}], {a: 3})\n+----\n+0\n+\n+query T\n+SELECT list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2})\n+----\n+2\n+\n+query T\n+SELECT list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2})\n+----\n+0\n+\n+query T\n+SELECT list_position([MAP([1], [2])], MAP([1], [2]))\n+----\n+1\n+\n+query T\n+SELECT list_position([MAP([1], [2])], MAP([1], [3]))\n+----\n+0\n+\n+statement ok\n+PRAGMA debug_force_external=true\n+\n+loop i 0 2\n+\n+foreach type float double\n+\n+# list tests\n+statement ok\n+CREATE TABLE test0 (i ${type}[])\n+\n+statement ok\n+INSERT INTO test0 VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0])\n+\n+query T\n+SELECT list_position(i,1.0) from test0\n+----\n+0\n+1\n+1\n+0\n+0\n+0\n+0\n+\n+statement ok\n+DROP TABLE test0\n+\n+statement ok\n+PRAGMA debug_force_external=false\n+\n+endloop\n+\n+endloop\n\\ No newline at end of file\ndiff --git a/test/sql/parser/test_long_error.test b/test/sql/parser/test_long_error.test\nnew file mode 100644\nindex 000000000000..01691b8c017c\n--- /dev/null\n+++ b/test/sql/parser/test_long_error.test\n@@ -0,0 +1,9 @@\n+# name: test/sql/parser/test_long_error.test\n+# description: Test long errors\n+# group: [parser]\n+\n+statement error\\n+\n+statement error\n+SELECT \ndiff --git a/test/sql/pragma/pragma_database_size_readonly.test b/test/sql/pragma/pragma_database_size_readonly.test\nnew file mode 100644\nindex 000000000000..c8093e7702da\n--- /dev/null\n+++ b/test/sql/pragma/pragma_database_size_readonly.test\n@@ -0,0 +1,15 @@\n+# name: test/sql/pragma/pragma_database_size_readonly.test\n+# description: PRAGMA database_size read only\n+# group: [pragma]\n+\n+# load the DB from disk\n+load __TEST_DIR__/database_size_read_only.db\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER);\n+\n+# load the DB from disk\n+load __TEST_DIR__/database_size_read_only.db readonly\n+\n+statement ok\n+PRAGMA database_size\ndiff --git a/test/sql/show_select/test_describe_all.test b/test/sql/show_select/test_describe_all.test\nnew file mode 100644\nindex 000000000000..442b170c7dc7\n--- /dev/null\n+++ b/test/sql/show_select/test_describe_all.test\n@@ -0,0 +1,17 @@\n+# name: test/sql/show_select/test_describe_all.test\n+# description: Test describe all\n+# group: [show_select]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER, j INTEGER, a INTEGER);\n+\n+statement ok\n+DESCRIBE;\n+\n+query IIII\n+DESCRIBE\n+----\n+integers\t[a, i, j]\t[INTEGER, INTEGER, INTEGER]\tFalse\ndiff --git a/test/sql/storage/test_buffer_manager.cpp b/test/sql/storage/test_buffer_manager.cpp\nindex 114a0bed2acf..f62105ef9a63 100644\n--- a/test/sql/storage/test_buffer_manager.cpp\n+++ b/test/sql/storage/test_buffer_manager.cpp\n@@ -3,6 +3,7 @@\n #include \"duckdb/storage/buffer_manager.hpp\"\n #include \"duckdb/storage/storage_info.hpp\"\n #include \"test_helpers.hpp\"\n+#include \"duckdb/main/client_context.hpp\"\n \n using namespace duckdb;\n using namespace std;\ndiff --git a/test/sql/types/list/unnest_null_empty.test b/test/sql/types/list/unnest_null_empty.test\nindex 477a1e16bf4a..891331f47fe5 100644\n--- a/test/sql/types/list/unnest_null_empty.test\n+++ b/test/sql/types/list/unnest_null_empty.test\n@@ -23,6 +23,14 @@ insert into people values (4, 'Elvis', ARRAY[NULL, NULL, NULL]);\n statement ok\n insert into people values (5, 'Mark', ARRAY[]::VARCHAR[]);\n \n+query I\n+SELECT UNNEST(NULL);\n+----\n+\n+query I\n+SELECT UNNEST(NULL::BOOLEAN[]);\n+----\n+\n query II\n SELECT name, UNNEST(address) FROM people;\n ----\ndiff --git a/test/sql/types/nested/list/any_list.test b/test/sql/types/nested/list/any_list.test\nindex 9b1d72e789b5..8e252b1bf2cb 100644\n--- a/test/sql/types/nested/list/any_list.test\n+++ b/test/sql/types/nested/list/any_list.test\n@@ -41,6 +41,11 @@ SELECT 4>ALL([1, 2, 3, NULL]);\n ----\n NULL\n \n+query I\n+SELECT 1=ANY(NULL);\n+----\n+false\n+\n # non-scalar list\n statement ok\n CREATE VIEW v1 AS SELECT LIST(i) l FROM RANGE(5) tbl(i)\ndiff --git a/test/sql/types/nested/list/test_list_slice.test b/test/sql/types/nested/list/test_list_slice.test\nindex 7ccab5985e94..c21ed71044d9 100644\n--- a/test/sql/types/nested/list/test_list_slice.test\n+++ b/test/sql/types/nested/list/test_list_slice.test\n@@ -255,3 +255,21 @@ NULL\n NULL\n NULL\n NULL\n+\n+# pop back\n+query T\n+SELECT ARRAY_POP_BACK(s) FROM lists;\n+----\n+[h, e, l, l]\n+[w, o, r, l]\n+[]\n+NULL\n+\n+# pop front\n+query T\n+SELECT ARRAY_POP_FRONT(s) FROM lists;\n+----\n+[e, l, l, o]\n+[o, r, l, d]\n+[]\n+NULL\n\\ No newline at end of file\ndiff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 4e9718aa39a9..7b1e0fbfcbbc 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -24,6 +24,8 @@\n import java.util.Properties;\n import java.util.TimeZone;\n import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n \n import org.duckdb.DuckDBAppender;\n import org.duckdb.DuckDBConnection;\n@@ -142,6 +144,56 @@ public static void test_connection() throws Exception {\n \n \t}\n \n+\tpublic static void test_timestamp_tz() throws Exception {\n+\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\tStatement stmt = conn.createStatement();\n+\n+\t\tResultSet rs;\n+\t\t\n+\t\tstmt.execute(\"CREATE TABLE t (id INT, t1 TIMESTAMPTZ)\");\n+\t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (1, '2022-01-01T12:11:10+02')\");\n+\t\tstmt.execute(\"INSERT INTO t (id, t1) VALUES (2, '2022-01-01T12:11:10')\");\n+\n+\t\tPreparedStatement ps = conn.prepareStatement(\n+\t\t\t\t\"INSERT INTO T (id, t1) VALUES (?, ?)\");\n+\n+\t\tOffsetDateTime odt1 = OffsetDateTime.of(2020, 10, 7, 13, 15, 7, 12345, ZoneOffset.ofHours(7));\n+\t\tOffsetDateTime odt1Rounded = OffsetDateTime.of(2020, 10, 7, 13, 15, 7, 12000, ZoneOffset.ofHours(7));\n+\t\tOffsetDateTime odt2 = OffsetDateTime.of(1878, 10, 2, 1, 15, 7, 12345, ZoneOffset.ofHours(-5));\n+\t\tOffsetDateTime odt2Rounded = OffsetDateTime.of(1878, 10, 2, 1, 15, 7, 13000, ZoneOffset.ofHours(-5));\n+\t\tOffsetDateTime odt3 = OffsetDateTime.of(2022, 1, 1, 12, 11, 10, 0, ZoneOffset.ofHours(2));\n+\t\tOffsetDateTime odt4 = OffsetDateTime.of(2022, 1, 1, 12, 11, 10, 0, ZoneOffset.ofHours(0));\n+\t\tOffsetDateTime odt5 = OffsetDateTime.of(1900, 11, 27, 23, 59, 59, 0, ZoneOffset.ofHours(1));\n+\n+\t\tps.setObject(1, 3);\n+\t\tps.setObject(2, odt1);\n+\t\tps.execute();\n+\t\tps.setObject(1, 4);\n+\t\tps.setObject(2, odt5, Types.TIMESTAMP_WITH_TIMEZONE);\n+\t\tps.execute();\n+\t\tps.setObject(1, 5);\n+\t\tps.setObject(2, odt2);\n+\t\tps.execute();\n+\n+\t\trs = stmt.executeQuery(\"SELECT * FROM t ORDER BY id\");\n+\t\tResultSetMetaData meta = rs.getMetaData();\n+\t\trs.next();\n+\t\tassertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt3));\n+\t\trs.next();\n+\t\tassertEquals(rs.getObject(2, OffsetDateTime.class), odt4);\n+\t\trs.next();\n+\t\tassertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt1Rounded));\n+\t\trs.next();\n+\t\tassertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt5));\n+\t\trs.next();\n+\t\tassertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt2Rounded));\n+\t\tassertTrue(((OffsetDateTime)rs.getObject(2)).isEqual(odt2Rounded));\n+\n+\t\trs.close();\n+\t\tstmt.close();\n+\t\tconn.close();\n+\t}\n+\n \tpublic static void test_result() throws Exception {\n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tStatement stmt = conn.createStatement();\n@@ -353,10 +405,14 @@ public static void duckdb_timestamp_test() throws Exception {\n \t\tTimestamp ts0 = Timestamp.valueOf(\"1970-01-01 00:00:00\");\n \t\tTimestamp ts1 = Timestamp.valueOf(\"2021-07-29 21:13:11\");\n \t\tTimestamp ts2 = Timestamp.valueOf(\"2021-07-29 21:13:11.123456\");\n+\t\tTimestamp ts3 = Timestamp.valueOf(\"1921-07-29 21:13:11\");\n+\t\tTimestamp ts4 = Timestamp.valueOf(\"1921-07-29 21:13:11.123456\");\n \n \t\tTimestamp cts0 = new DuckDBTimestamp(ts0).toSqlTimestamp();\n \t\tTimestamp cts1 = new DuckDBTimestamp(ts1).toSqlTimestamp();\n \t\tTimestamp cts2 = new DuckDBTimestamp(ts2).toSqlTimestamp();\n+\t\tTimestamp cts3 = new DuckDBTimestamp(ts3).toSqlTimestamp();\n+\t\tTimestamp cts4 = new DuckDBTimestamp(ts4).toSqlTimestamp();\n \t\t\n \t\tassertTrue(ts0.getTime() == cts0.getTime());\n \t\tassertTrue(ts0.compareTo(cts0) == 0);\n@@ -364,6 +420,10 @@ public static void duckdb_timestamp_test() throws Exception {\n \t\tassertTrue(ts1.compareTo(cts1) == 0);\n \t\tassertTrue(ts2.getTime() == cts2.getTime());\n \t\tassertTrue(ts2.compareTo(cts2) == 0);\n+\t\tassertTrue(ts3.getTime() == cts3.getTime());\n+\t\tassertTrue(ts3.compareTo(cts3) == 0);\n+\t\tassertTrue(ts4.getTime() == cts4.getTime());\n+\t\tassertTrue(ts4.compareTo(cts4) == 0);\n \n \t\tassertTrue(DuckDBTimestamp.getMicroseconds(DuckDBTimestamp.toSqlTimestamp(5678912345L)) == 5678912345L);\n \n@@ -410,6 +470,26 @@ public static void duckdb_timestamp_test() throws Exception {\n \t\trs4.close();\n \t\tps.close();\n \n+\t\tStatement stmt2 = conn.createStatement();\n+\t\tstmt2.execute(\"INSERT INTO a (ts) VALUES ('1905-11-02 07:59:58.12345')\");\n+\t\tps = conn.prepareStatement(\n+\t\t\t\t\"SELECT COUNT(ts) FROM a WHERE ts = ?\");\n+\t\tps.setTimestamp(1, Timestamp.valueOf(\"1905-11-02 07:59:58.12345\"));\n+\t\tResultSet rs5 = ps.executeQuery();\n+\t\tassertTrue(rs5.next());\n+\t\tassertEquals(rs5.getInt(1), 1);\n+\t\trs5.close();\n+\t\tps.close();\n+\n+\t\tps = conn.prepareStatement(\n+\t\t\t\t\"SELECT ts FROM a WHERE ts = ?\");\n+\t\tps.setTimestamp(1, Timestamp.valueOf(\"1905-11-02 07:59:58.12345\"));\n+\t\tResultSet rs6 = ps.executeQuery();\n+\t\tassertTrue(rs6.next());\n+\t\tassertEquals(rs6.getTimestamp(1), Timestamp.valueOf(\"1905-11-02 07:59:58.12345\"));\n+\t\trs6.close();\n+\t\tps.close();\n+\n \t\tconn.close();\n \t}\n \ndiff --git a/tools/odbc/test/psql_supported_tests b/tools/odbc/test/psql_supported_tests\nindex 374a9c78b35d..ed44bfacd1cd 100644\n--- a/tools/odbc/test/psql_supported_tests\n+++ b/tools/odbc/test/psql_supported_tests\n@@ -8,6 +8,7 @@ cte-test\n cursor-commit-test\n declare-fetch-block-test\n dataatexecution-test\n+diagnostic-test\n numeric-test\n quotes-test\n result-conversions-test\ndiff --git a/tools/odbc/test/run_psqlodbc_tests.sh b/tools/odbc/test/run_psqlodbc_tests.sh\nindex cbc23ec7beed..2c9bc4fe40c8 100755\n--- a/tools/odbc/test/run_psqlodbc_tests.sh\n+++ b/tools/odbc/test/run_psqlodbc_tests.sh\n@@ -5,6 +5,7 @@ echo -e \"[DuckDB]\\nDriver = DuckDB Driver\\nDatabase=:memory:\\n\" > ~/.odbc.ini\n \n export PSQLODBC_TEST_DSN=\"DuckDB\"\n \n+TRACE_FILE=/tmp/odbctrace\n BASE_DUCKDB_DIR=$(pwd)\n cd psqlodbc\n export PSQLODBC_DIR=$(pwd)\n@@ -14,13 +15,19 @@ rm -f contrib_regression\n rm -f contrib_regression.wal\n ./build/debug/reset-db < sampletables.sql\n if [[ $? != 0 ]]; then\n-    cat /tmp/odbctrace\n+    cat $TRACE_FILE\n     exit 1\n fi\n \n # running supported tests\n-./build/debug/psql_odbc_test -f ${BASE_DUCKDB_DIR}/tools/odbc/test/psql_supported_tests\n-if [[ $? != 0 ]]; then\n-    cat /tmp/odbctrace\n-    exit 1\n-fi\n+while read test_file\n+do\n+    ./build/debug/psql_odbc_test $test_file\n+    if [[ $? != 0 ]]; then\n+        cat $TRACE_FILE\n+        exit 1\n+    fi\n+    # clean odbc trace file\n+    rm $TRACE_FILE\n+done < ${BASE_DUCKDB_DIR}/tools/odbc/test/psql_supported_tests\n+\ndiff --git a/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py b/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py\nnew file mode 100644\nindex 000000000000..b3cc8cb48656\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py\n@@ -0,0 +1,134 @@\n+import duckdb\n+import pytest\n+\n+# A closed connection should invalidate all relation's methods\n+class TestRAPICloseConnRel(object):\n+\tdef test_close_conn_rel(self, duckdb_cursor):\n+\t\tcon = duckdb.connect()\n+\t\tcon.execute(\"CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)\")\n+\t\tcon.execute(\"INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)\")\n+\t\trel = con.table(\"items\")\n+\t\tcon.close()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tprint(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tlen(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.filter(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.project(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.order(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.aggregate(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.sum(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.count(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.median(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.quantile(\"\",\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.apply(\"\",\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.min(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.max(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.mean(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.var(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.std(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.value_counts(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.unique(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.union(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.except_(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.intersect(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.join(rel, \"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.distinct()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tprint(rel.limit(1))\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.query(\"\",\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.execute()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.write_csv(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.insert_into(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.insert(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.create(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.create_view(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.to_arrow_table()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.arrow()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.to_df()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.df()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.fetchone()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.fetchall()\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.map(lambda df : df['col0'].add(42).to_frame())\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.mad(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.mode(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.abs(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.prod(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.skew(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.kurt(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.sem(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.cumsum(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.cumprod(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.cummax(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.cummin(\"\")\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\trel.describe()\n+\t\tcon = duckdb.connect()\n+\t\tcon.execute(\"CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)\")\n+\t\tcon.execute(\"INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)\")\n+\t\tvalid_rel = con.table(\"items\")\n+\n+\t\t# Test these bad boys when left relation is valid\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tvalid_rel.union(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tvalid_rel.except_(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tvalid_rel.intersect(rel)\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tvalid_rel.join(rel, \"rel.items = valid_rel.items\")\n+\n+\tdef test_del_conn(self, duckdb_cursor):\n+\t\tcon = duckdb.connect()\n+\t\tcon.execute(\"CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)\")\n+\t\tcon.execute(\"INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)\")\n+\t\trel = con.table(\"items\")\n+\t\tdel con\n+\t\twith pytest.raises(Exception, match='This connection is closed'):\n+\t\t\tprint(rel)\n\\ No newline at end of file\ndiff --git a/tools/pythonpkg/tests/fast/sqlite/test_types.py b/tools/pythonpkg/tests/fast/sqlite/test_types.py\nindex 7e066cb4899c..759e0ea5b12c 100644\n--- a/tools/pythonpkg/tests/fast/sqlite/test_types.py\n+++ b/tools/pythonpkg/tests/fast/sqlite/test_types.py\n@@ -210,3 +210,56 @@ def test_CheckDateTimeSubSecondsFloatingPoint(self):\n         ts2 = self.cur.fetchone()[0]\n         self.assertEqual(ts.year, ts2.year)\n         self.assertEqual(ts2.microsecond, 510241)\n+\n+\n+class ListTests(unittest.TestCase):\n+    def setUp(self):\n+        self.con = duckdb.connect(\":memory:\")\n+        self.cur = self.con.cursor()\n+        self.cur.execute(\n+            \"create table test(single INTEGER[], nested INTEGER[][])\"\n+        )\n+\n+    def tearDown(self):\n+        self.cur.close()\n+        self.con.close()\n+\n+    def test_CheckEmptyList(self):\n+        val = []\n+        self.cur.execute(\"insert into test values (?, ?)\", (val, val))\n+        self.assertEqual(\n+            self.cur.execute(\"select * from test\").fetchall(),\n+            [(val, val)],\n+        )\n+\n+    def test_CheckSingleList(self):\n+        val = [1, 2, 3]\n+        self.cur.execute(\"insert into test(single) values (?)\", (val,))\n+        self.assertEqual(\n+            self.cur.execute(\"select * from test\").fetchall(),\n+            [(val, None)],\n+        )\n+\n+    def test_CheckNestedList(self):\n+        val = [[1], [2], [3, 4]]\n+        self.cur.execute(\"insert into test(nested) values (?)\", (val,))\n+        self.assertEqual(\n+            self.cur.execute(\"select * from test\").fetchall(),\n+            [(None, val,)],\n+        )\n+\n+    def test_CheckNone(self):\n+        val = None\n+        self.cur.execute(\"insert into test values (?, ?)\", (val, val))\n+        self.assertEqual(\n+            self.cur.execute(\"select * from test\").fetchall(),\n+            [(val, val)],\n+        )\n+\n+    def test_CheckEmbeddedNone(self):\n+        val = [None]\n+        self.cur.execute(\"insert into test values (?, ?)\", (val, val))\n+        self.assertEqual(\n+            self.cur.execute(\"select * from test\").fetchall(),\n+            [(val, val)],\n+        )\n",
  "problem_statement": "PRAGMA database_size on read_only connection crash python\n#### What happens?\r\nIf trying to query pragma database_size  to know memory consumption on a connection to a db opened with read_only=True, \r\nIt **crashes python**.\r\n\r\n#### To Reproduce\r\n```python\r\nimport duckdb\r\n\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=False)\r\nprint(\"With read/write:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\nconn = duckdb.connect(\"db2.duckdb\", read_only=True)\r\nprint(\"With read only:\")\r\ndf = conn.execute(\"PRAGMA database_size\").fetchdf()\r\nprint(df)\r\nconn.close()\r\n```\r\nresults in:\r\n```\r\nWith read/write:\r\n  database_size  block_size  total_blocks  used_blocks  free_blocks wal_size memory_usage memory_limit\r\n0       0 bytes      262144             0            0            0  0 bytes      0 bytes       13.7GB\r\nWith read only:\r\n```\r\n#### Environment (please complete the following information):\r\n - OS: Windows 10\r\n - DuckDB Version: 0.3.2\r\n - DuckDB Client: Python 3.8.10\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "",
  "created_at": "2022-02-28T21:12:33Z"
}