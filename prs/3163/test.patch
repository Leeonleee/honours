diff --git a/test/helpers/test_helper_extension.cpp b/test/helpers/test_helper_extension.cpp
index b6ca758f8492..9234af8f0984 100644
--- a/test/helpers/test_helper_extension.cpp
+++ b/test/helpers/test_helper_extension.cpp
@@ -4,6 +4,7 @@
 #include "duckdb/function/scalar_function.hpp"
 #include "duckdb/main/connection.hpp"
 #include "duckdb/parser/parsed_data/create_scalar_function_info.hpp"
+#include "duckdb/main/client_context.hpp"
 
 namespace duckdb {
 
@@ -29,9 +30,10 @@ void TestHelperExtension::Load(DuckDB &db) {
 
 	Connection conn(db);
 	conn.BeginTransaction();
-	auto &catalog = Catalog::GetCatalog(*conn.context);
-	catalog.CreateFunction(*conn.context, &hello_info);
-	catalog.CreateFunction(*conn.context, &last_error_info);
+	auto &client_context = *conn.context;
+	auto &catalog = Catalog::GetCatalog(client_context);
+	catalog.CreateFunction(client_context, &hello_info);
+	catalog.CreateFunction(client_context, &last_error_info);
 	conn.Commit();
 }
 
diff --git a/test/helpers/test_helpers.cpp b/test/helpers/test_helpers.cpp
index 752ad5e2ab97..014c86ad9ced 100644
--- a/test/helpers/test_helpers.cpp
+++ b/test/helpers/test_helpers.cpp
@@ -8,6 +8,7 @@
 #include "duckdb/main/query_result.hpp"
 #include "test_helpers.hpp"
 #include "duckdb/parser/parsed_data/copy_info.hpp"
+#include "duckdb/main/client_context.hpp"
 
 #include <cmath>
 #include <fstream>
diff --git a/test/sql/aggregate/group/test_group_by_parallel.test_coverage b/test/sql/aggregate/group/test_group_by_parallel.test_slow
similarity index 94%
rename from test/sql/aggregate/group/test_group_by_parallel.test_coverage
rename to test/sql/aggregate/group/test_group_by_parallel.test_slow
index aa82c55e4d0a..cfef16b5c63b 100644
--- a/test/sql/aggregate/group/test_group_by_parallel.test_coverage
+++ b/test/sql/aggregate/group/test_group_by_parallel.test_slow
@@ -1,4 +1,4 @@
-# name: test/sql/aggregate/group/test_group_by_parallel.test_coverage
+# name: test/sql/aggregate/group/test_group_by_parallel.test_slow
 # description: Test parallel group by
 # group: [group]
 
diff --git a/test/sql/function/list/flatten.test b/test/sql/function/list/flatten.test
new file mode 100644
index 000000000000..cf1f2e8e240d
--- /dev/null
+++ b/test/sql/function/list/flatten.test
@@ -0,0 +1,126 @@
+# name: test/sql/function/list/flatten.test
+# description: Test flatten function
+# group: [list]
+
+statement ok
+PRAGMA enable_verification
+
+# basic functionality
+query T
+SELECT flatten([[1, 2, 3, 4]])
+----
+[1, 2, 3, 4]
+
+query T
+SELECT flatten([[1, 2], [3, 4]])
+----
+[1, 2, 3, 4]
+
+statement error
+SELECT flatten(1)
+
+# empty nested list
+query T
+SELECT flatten([[], []])
+----
+[]
+
+# empty child list
+query T
+SELECT flatten([[1, 2], [], [3, 4]])
+----
+[1, 2, 3, 4]
+
+query T
+SELECT flatten([[1, 2], []])
+----
+[1, 2]
+
+query T
+SELECT flatten([[], [1, 2]])
+----
+[1, 2]
+
+# NULL
+query T
+SELECT flatten(NULL)
+----
+NULL
+
+query T
+SELECT flatten([NULL])
+----
+[]
+
+query T
+SELECT flatten([[NULL]])
+----
+[NULL]
+
+query T
+SELECT flatten([NULL, [1], [2, 3], NULL, [4, NULL], [NULL, NULL]])
+----
+[1, 2, 3, 4, NULL, NULL, NULL]
+
+# multiple-layered nested list
+query T
+SELECT flatten([[[1, 2], [3, 4]], [[5,6], [7, 8]]])
+----
+[[1, 2], [3, 4], [5, 6], [7, 8]]
+
+query T
+SELECT flatten(flatten(flatten([[[[1], [2]], [[3], [4]]], [[[5], [6]], [[7], [8]]]])))
+----
+[1, 2, 3, 4, 5, 6, 7, 8]
+
+query T
+SELECT flatten([[[1, 2], [3, 4]], [], [[5, 6], [7, 8]]]);
+----
+[[1, 2], [3, 4], [5, 6], [7, 8]]
+
+query T
+SELECT flatten([[[1, 2], [3, 4]], [[]], [[5, 6], [7, 8]]]);
+----
+[[1, 2], [3, 4], [], [5, 6], [7, 8]]
+
+query T
+SELECT flatten([[[]], [[]]])
+----
+[[], []]
+
+query T
+SELECT flatten(flatten([[[]], [[]]]))
+----
+[]
+
+# flat vector
+statement ok
+CREATE TABLE nums AS SELECT range % 8 i, range j FROM range(16)
+
+statement ok
+CREATE TABLE lists AS SELECT i % 4 i, list(j) j FROM nums GROUP BY i
+
+statement ok
+CREATE TABLE nested_lists AS SELECT i, list(j) j FROM lists GROUP BY i
+
+query II
+SELECT i, flatten(j) FROM nested_lists
+----
+0	[0, 8, 4, 12]
+1	[1, 9, 5, 13]
+2	[2, 10, 6, 14]
+3	[3, 11, 7, 15]
+
+query II
+SELECT i, flatten(j) FROM nested_lists WHERE i % 2 != 0
+----
+1	[1, 9, 5, 13]
+3	[3, 11, 7, 15]
+
+query II
+SELECT i, flatten([[1, 2], [3, 4]]) FROM nested_lists
+----
+0	[1, 2, 3, 4]
+1	[1, 2, 3, 4]
+2	[1, 2, 3, 4]
+3	[1, 2, 3, 4]
diff --git a/test/sql/function/list/list_concat.test b/test/sql/function/list/list_concat.test
index 2262de48ed5a..f202a8c92b2c 100644
--- a/test/sql/function/list/list_concat.test
+++ b/test/sql/function/list/list_concat.test
@@ -162,3 +162,25 @@ query T
 SELECT array_prepend(1, [2, 3])
 ----
 [1, 2, 3]
+
+# push back
+query T
+SELECT array_push_back([1, 2], 3);
+----
+[1, 2, 3]
+
+query T
+SELECT array_push_back(NULL, 3);
+----
+[3]
+
+# push front
+query T
+SELECT array_push_front([2, 3], 1);
+----
+[1, 2, 3]
+
+query T
+SELECT array_push_front(NULL, 1);
+----
+[1]
diff --git a/test/sql/function/list/list_contains.test b/test/sql/function/list/list_contains.test
index 3a7ad9621811..9101e587170c 100644
--- a/test/sql/function/list/list_contains.test
+++ b/test/sql/function/list/list_contains.test
@@ -1,5 +1,5 @@
 # name: test/sql/function/list/list_contains.test
-# description: Test list_ccontains function
+# description: Test list_contains function
 # group: [list]
 
 statement ok
@@ -323,6 +323,16 @@ SELECT list_contains([{a: 1}, {a: 2}], {a: 3})
 ----
 0
 
+query T
+SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2})
+----
+1
+
+query T
+SELECT list_contains([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2})
+----
+0
+
 query T
 SELECT list_contains([MAP([1], [2])], MAP([1], [2]))
 ----
diff --git a/test/sql/function/list/list_position.test b/test/sql/function/list/list_position.test
new file mode 100644
index 000000000000..177fe100b6ff
--- /dev/null
+++ b/test/sql/function/list/list_position.test
@@ -0,0 +1,379 @@
+# name: test/sql/function/list/list_position.test
+# description: Test list_position function
+# group: [list]
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+create table TEST2 (i int[], j int);
+
+statement ok
+insert into TEST2 values ([2,1,3], 2), ([2,3,4], 5), ([1], NULL);
+
+query T
+select list_position(i, j) from TEST2
+----
+1
+0
+NULL
+
+statement ok
+create table TEST (i int[]);
+
+statement ok
+insert into TEST values ([2,1,3]), ([2,3,4]), ([1]);
+
+query TT
+SELECT i, list_position(i,1) from TEST;
+----
+[2, 1, 3]	2
+[2, 3, 4]	0
+[1]	1
+
+query TT
+SELECT i, list_position(i,4.0) from TEST;
+----
+[2, 1, 3]	0
+[2, 3, 4]	3
+[1]	0
+
+statement ok
+DROP table TEST;
+
+statement ok
+create table STR_TEST (i string[]);
+
+statement ok
+insert into STR_TEST values (['a','b','c']), (['d','a','e']), (['b']), (['aaaaaaaaaaaaaaaaaaaaaaaa']);
+
+query TT
+SELECT i, list_position(i,'a') from STR_TEST;
+----
+[a, b, c]	1
+[d, a, e]	2
+[b]	0
+[aaaaaaaaaaaaaaaaaaaaaaaa]	0
+
+query TT
+SELECT i, list_position(i,'aaaaaaaaaaaaaaaaaaaaaaaa') from STR_TEST;
+----
+[a, b, c]	0
+[d, a, e]	0
+[b]	0
+[aaaaaaaaaaaaaaaaaaaaaaaa]	1
+
+query TT
+SELECT i, list_position(i,0) from STR_TEST;
+----
+[a, b, c]	0
+[d, a, e]	0
+[b]	0
+[aaaaaaaaaaaaaaaaaaaaaaaa]	0
+
+
+query TT
+SELECT i, list_position(i,NULL) from STR_TEST;
+----
+[a, b, c]	NULL
+[d, a, e]	NULL
+[b]	NULL
+[aaaaaaaaaaaaaaaaaaaaaaaa]	NULL
+
+statement ok
+DROP table STR_TEST;
+
+
+# basic functionality
+query T
+SELECT list_position([7,2,5], 7)
+----
+1
+
+# Empty list
+query T
+SELECT list_position([], 7)
+----
+0
+
+# Mixed data types
+query T
+SELECT list_position([1,2,3],1.0)
+----
+1
+
+query T
+SELECT list_position([1.0,2.0,3.0,4.0],1)
+----
+1
+
+query T
+SELECT list_position([1,2,3],4.0)
+----
+0
+
+query T
+SELECT list_position([1.0,2.0,3.0],4)
+----
+0
+
+
+query T
+SELECT list_position([1.0,2.0,3.0], 'a')
+----
+0
+
+# Not a list as input
+statement error
+SELECT list_position('a', 'a')
+
+query T
+SELECT list_position(NULL,NULL)
+----
+NULL
+
+
+query T
+SELECT list_position([7], 5)
+----
+0
+
+query T
+SELECT list_position([1,2,3,4],4)
+----
+4
+
+query T
+SELECT list_position([1,2,3,4],5)
+----
+0
+
+query T
+SELECT list_position([1.0,2.0,3.0,4.0],5.0)
+----
+0
+
+query T
+SELECT list_position([1.0,2.0,3.0,4.0],4.0)
+----
+4
+
+query T
+SELECT list_position([true, false],true)
+----
+1
+
+query T
+SELECT list_position([true, true],false)
+----
+0
+
+query T
+SELECT list_position(['test', 'notest'],'notest')
+----
+2
+
+query T
+SELECT list_position(['test', 'notest'],'a')
+----
+0
+
+# Null types
+query T
+SELECT list_position(NULL,1)
+----
+NULL
+
+# Null types
+query T
+SELECT list_position([1],NULL)
+----
+NULL
+
+query T
+SELECT list_position([NULL],NULL)
+----
+NULL
+
+query T
+SELECT list_position([NULL, 1],NULL)
+----
+NULL
+
+query T
+SELECT list_position([NULL, 1],1)
+----
+2
+
+query T
+SELECT list_position([NULL, 0],1)
+----
+0
+
+query T
+SELECT list_position([],NULL)
+----
+NULL
+
+query T
+SELECT list_position([NULL,7], 7)
+----
+2
+
+statement error
+SELECT list_position([[1,2,3],[1],[1,2,3])
+
+statement error
+SELECT list_position([[1,2,3],[1],[1,2,3]])
+
+statement error
+SELECT list_position(1)
+
+statement error
+SELECT list_position(1,1)
+
+statement ok
+PRAGMA debug_force_external=true
+
+loop i 0 2
+
+foreach type <integral> varchar
+
+# list tests
+statement ok
+CREATE TABLE test0 (i ${type}[])
+
+statement ok
+INSERT INTO test0 VALUES ([2]), ([1]), ([1, 2]), ([]), ([2, 2]), ([NULL]), ([2, 3])
+
+query T
+SELECT list_position(i,1) from test0
+----
+0
+1
+1
+0
+0
+0
+0
+
+statement ok
+DROP TABLE test0
+
+statement ok
+PRAGMA debug_force_external=false
+
+endloop
+
+endloop
+
+query T
+SELECT list_position([[1,2,3],[1]],[1])
+----
+2
+
+query T
+SELECT list_position([[1,2,3],[1]],[2])
+----
+0
+
+query T
+SELECT list_position([[1,2,3],[1]],[1,2,3])
+----
+1
+
+query T
+SELECT list_position([[1,3],[1]],[1,2,3])
+----
+0
+
+query T
+SELECT list_position([[1,3],[1], [1,2,3]],[1,2,3])
+----
+3
+
+query T
+SELECT list_position([[NULL],[1], [1,2,3]],NULL)
+----
+NULL
+
+query T
+SELECT list_position([[NULL],[1], [1,2,3]],[NULL])
+----
+1
+
+query T
+SELECT list_position([[1,NULL],[1], [1,2,3]],[1,NULL])
+----
+1
+
+query T
+SELECT list_position([[1,NULL],[1], [1,2,3]],[0,NULL])
+----
+0
+
+# nested types
+query T
+SELECT list_position([{a: 1}, {a: 2}], {a: 2})
+----
+2
+
+query T
+SELECT list_position([{a: 1}, {a: 2}], {a: 3})
+----
+0
+
+query T
+SELECT list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 2, b: 2})
+----
+2
+
+query T
+SELECT list_position([{a: 1, b: 3}, {a: 2, b: 2}], {a: 1, b: 2})
+----
+0
+
+query T
+SELECT list_position([MAP([1], [2])], MAP([1], [2]))
+----
+1
+
+query T
+SELECT list_position([MAP([1], [2])], MAP([1], [3]))
+----
+0
+
+statement ok
+PRAGMA debug_force_external=true
+
+loop i 0 2
+
+foreach type float double
+
+# list tests
+statement ok
+CREATE TABLE test0 (i ${type}[])
+
+statement ok
+INSERT INTO test0 VALUES ([2.0]), ([1.0]), ([1.0, 2.0]), ([]), ([2.0, 2.0]), ([NULL]), ([2.0, 3.0])
+
+query T
+SELECT list_position(i,1.0) from test0
+----
+0
+1
+1
+0
+0
+0
+0
+
+statement ok
+DROP TABLE test0
+
+statement ok
+PRAGMA debug_force_external=false
+
+endloop
+
+endloop
\ No newline at end of file
diff --git a/test/sql/parser/test_long_error.test b/test/sql/parser/test_long_error.test
new file mode 100644
index 000000000000..01691b8c017c
--- /dev/null
+++ b/test/sql/parser/test_long_error.test
@@ -0,0 +1,9 @@
+# name: test/sql/parser/test_long_error.test
+# description: Test long errors
+# group: [parser]
+
+statement error

+
+statement error
+SELECT 
diff --git a/test/sql/pragma/pragma_database_size_readonly.test b/test/sql/pragma/pragma_database_size_readonly.test
new file mode 100644
index 000000000000..c8093e7702da
--- /dev/null
+++ b/test/sql/pragma/pragma_database_size_readonly.test
@@ -0,0 +1,15 @@
+# name: test/sql/pragma/pragma_database_size_readonly.test
+# description: PRAGMA database_size read only
+# group: [pragma]
+
+# load the DB from disk
+load __TEST_DIR__/database_size_read_only.db
+
+statement ok
+CREATE TABLE integers(i INTEGER);
+
+# load the DB from disk
+load __TEST_DIR__/database_size_read_only.db readonly
+
+statement ok
+PRAGMA database_size
diff --git a/test/sql/show_select/test_describe_all.test b/test/sql/show_select/test_describe_all.test
new file mode 100644
index 000000000000..442b170c7dc7
--- /dev/null
+++ b/test/sql/show_select/test_describe_all.test
@@ -0,0 +1,17 @@
+# name: test/sql/show_select/test_describe_all.test
+# description: Test describe all
+# group: [show_select]
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+CREATE TABLE integers(i INTEGER, j INTEGER, a INTEGER);
+
+statement ok
+DESCRIBE;
+
+query IIII
+DESCRIBE
+----
+integers	[a, i, j]	[INTEGER, INTEGER, INTEGER]	False
diff --git a/test/sql/storage/test_buffer_manager.cpp b/test/sql/storage/test_buffer_manager.cpp
index 114a0bed2acf..f62105ef9a63 100644
--- a/test/sql/storage/test_buffer_manager.cpp
+++ b/test/sql/storage/test_buffer_manager.cpp
@@ -3,6 +3,7 @@
 #include "duckdb/storage/buffer_manager.hpp"
 #include "duckdb/storage/storage_info.hpp"
 #include "test_helpers.hpp"
+#include "duckdb/main/client_context.hpp"
 
 using namespace duckdb;
 using namespace std;
diff --git a/test/sql/types/list/unnest_null_empty.test b/test/sql/types/list/unnest_null_empty.test
index 477a1e16bf4a..891331f47fe5 100644
--- a/test/sql/types/list/unnest_null_empty.test
+++ b/test/sql/types/list/unnest_null_empty.test
@@ -23,6 +23,14 @@ insert into people values (4, 'Elvis', ARRAY[NULL, NULL, NULL]);
 statement ok
 insert into people values (5, 'Mark', ARRAY[]::VARCHAR[]);
 
+query I
+SELECT UNNEST(NULL);
+----
+
+query I
+SELECT UNNEST(NULL::BOOLEAN[]);
+----
+
 query II
 SELECT name, UNNEST(address) FROM people;
 ----
diff --git a/test/sql/types/nested/list/any_list.test b/test/sql/types/nested/list/any_list.test
index 9b1d72e789b5..8e252b1bf2cb 100644
--- a/test/sql/types/nested/list/any_list.test
+++ b/test/sql/types/nested/list/any_list.test
@@ -41,6 +41,11 @@ SELECT 4>ALL([1, 2, 3, NULL]);
 ----
 NULL
 
+query I
+SELECT 1=ANY(NULL);
+----
+false
+
 # non-scalar list
 statement ok
 CREATE VIEW v1 AS SELECT LIST(i) l FROM RANGE(5) tbl(i)
diff --git a/test/sql/types/nested/list/test_list_slice.test b/test/sql/types/nested/list/test_list_slice.test
index 7ccab5985e94..c21ed71044d9 100644
--- a/test/sql/types/nested/list/test_list_slice.test
+++ b/test/sql/types/nested/list/test_list_slice.test
@@ -255,3 +255,21 @@ NULL
 NULL
 NULL
 NULL
+
+# pop back
+query T
+SELECT ARRAY_POP_BACK(s) FROM lists;
+----
+[h, e, l, l]
+[w, o, r, l]
+[]
+NULL
+
+# pop front
+query T
+SELECT ARRAY_POP_FRONT(s) FROM lists;
+----
+[e, l, l, o]
+[o, r, l, d]
+[]
+NULL
\ No newline at end of file
diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java
index 4e9718aa39a9..7b1e0fbfcbbc 100644
--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java
+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java
@@ -24,6 +24,8 @@
 import java.util.Properties;
 import java.util.TimeZone;
 import java.time.LocalDateTime;
+import java.time.OffsetDateTime;
+import java.time.ZoneOffset;
 
 import org.duckdb.DuckDBAppender;
 import org.duckdb.DuckDBConnection;
@@ -142,6 +144,56 @@ public static void test_connection() throws Exception {
 
 	}
 
+	public static void test_timestamp_tz() throws Exception {
+		Connection conn = DriverManager.getConnection("jdbc:duckdb:");
+		Statement stmt = conn.createStatement();
+
+		ResultSet rs;
+		
+		stmt.execute("CREATE TABLE t (id INT, t1 TIMESTAMPTZ)");
+		stmt.execute("INSERT INTO t (id, t1) VALUES (1, '2022-01-01T12:11:10+02')");
+		stmt.execute("INSERT INTO t (id, t1) VALUES (2, '2022-01-01T12:11:10')");
+
+		PreparedStatement ps = conn.prepareStatement(
+				"INSERT INTO T (id, t1) VALUES (?, ?)");
+
+		OffsetDateTime odt1 = OffsetDateTime.of(2020, 10, 7, 13, 15, 7, 12345, ZoneOffset.ofHours(7));
+		OffsetDateTime odt1Rounded = OffsetDateTime.of(2020, 10, 7, 13, 15, 7, 12000, ZoneOffset.ofHours(7));
+		OffsetDateTime odt2 = OffsetDateTime.of(1878, 10, 2, 1, 15, 7, 12345, ZoneOffset.ofHours(-5));
+		OffsetDateTime odt2Rounded = OffsetDateTime.of(1878, 10, 2, 1, 15, 7, 13000, ZoneOffset.ofHours(-5));
+		OffsetDateTime odt3 = OffsetDateTime.of(2022, 1, 1, 12, 11, 10, 0, ZoneOffset.ofHours(2));
+		OffsetDateTime odt4 = OffsetDateTime.of(2022, 1, 1, 12, 11, 10, 0, ZoneOffset.ofHours(0));
+		OffsetDateTime odt5 = OffsetDateTime.of(1900, 11, 27, 23, 59, 59, 0, ZoneOffset.ofHours(1));
+
+		ps.setObject(1, 3);
+		ps.setObject(2, odt1);
+		ps.execute();
+		ps.setObject(1, 4);
+		ps.setObject(2, odt5, Types.TIMESTAMP_WITH_TIMEZONE);
+		ps.execute();
+		ps.setObject(1, 5);
+		ps.setObject(2, odt2);
+		ps.execute();
+
+		rs = stmt.executeQuery("SELECT * FROM t ORDER BY id");
+		ResultSetMetaData meta = rs.getMetaData();
+		rs.next();
+		assertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt3));
+		rs.next();
+		assertEquals(rs.getObject(2, OffsetDateTime.class), odt4);
+		rs.next();
+		assertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt1Rounded));
+		rs.next();
+		assertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt5));
+		rs.next();
+		assertTrue(rs.getObject(2, OffsetDateTime.class).isEqual(odt2Rounded));
+		assertTrue(((OffsetDateTime)rs.getObject(2)).isEqual(odt2Rounded));
+
+		rs.close();
+		stmt.close();
+		conn.close();
+	}
+
 	public static void test_result() throws Exception {
 		Connection conn = DriverManager.getConnection("jdbc:duckdb:");
 		Statement stmt = conn.createStatement();
@@ -353,10 +405,14 @@ public static void duckdb_timestamp_test() throws Exception {
 		Timestamp ts0 = Timestamp.valueOf("1970-01-01 00:00:00");
 		Timestamp ts1 = Timestamp.valueOf("2021-07-29 21:13:11");
 		Timestamp ts2 = Timestamp.valueOf("2021-07-29 21:13:11.123456");
+		Timestamp ts3 = Timestamp.valueOf("1921-07-29 21:13:11");
+		Timestamp ts4 = Timestamp.valueOf("1921-07-29 21:13:11.123456");
 
 		Timestamp cts0 = new DuckDBTimestamp(ts0).toSqlTimestamp();
 		Timestamp cts1 = new DuckDBTimestamp(ts1).toSqlTimestamp();
 		Timestamp cts2 = new DuckDBTimestamp(ts2).toSqlTimestamp();
+		Timestamp cts3 = new DuckDBTimestamp(ts3).toSqlTimestamp();
+		Timestamp cts4 = new DuckDBTimestamp(ts4).toSqlTimestamp();
 		
 		assertTrue(ts0.getTime() == cts0.getTime());
 		assertTrue(ts0.compareTo(cts0) == 0);
@@ -364,6 +420,10 @@ public static void duckdb_timestamp_test() throws Exception {
 		assertTrue(ts1.compareTo(cts1) == 0);
 		assertTrue(ts2.getTime() == cts2.getTime());
 		assertTrue(ts2.compareTo(cts2) == 0);
+		assertTrue(ts3.getTime() == cts3.getTime());
+		assertTrue(ts3.compareTo(cts3) == 0);
+		assertTrue(ts4.getTime() == cts4.getTime());
+		assertTrue(ts4.compareTo(cts4) == 0);
 
 		assertTrue(DuckDBTimestamp.getMicroseconds(DuckDBTimestamp.toSqlTimestamp(5678912345L)) == 5678912345L);
 
@@ -410,6 +470,26 @@ public static void duckdb_timestamp_test() throws Exception {
 		rs4.close();
 		ps.close();
 
+		Statement stmt2 = conn.createStatement();
+		stmt2.execute("INSERT INTO a (ts) VALUES ('1905-11-02 07:59:58.12345')");
+		ps = conn.prepareStatement(
+				"SELECT COUNT(ts) FROM a WHERE ts = ?");
+		ps.setTimestamp(1, Timestamp.valueOf("1905-11-02 07:59:58.12345"));
+		ResultSet rs5 = ps.executeQuery();
+		assertTrue(rs5.next());
+		assertEquals(rs5.getInt(1), 1);
+		rs5.close();
+		ps.close();
+
+		ps = conn.prepareStatement(
+				"SELECT ts FROM a WHERE ts = ?");
+		ps.setTimestamp(1, Timestamp.valueOf("1905-11-02 07:59:58.12345"));
+		ResultSet rs6 = ps.executeQuery();
+		assertTrue(rs6.next());
+		assertEquals(rs6.getTimestamp(1), Timestamp.valueOf("1905-11-02 07:59:58.12345"));
+		rs6.close();
+		ps.close();
+
 		conn.close();
 	}
 
diff --git a/tools/odbc/test/psql_supported_tests b/tools/odbc/test/psql_supported_tests
index 374a9c78b35d..ed44bfacd1cd 100644
--- a/tools/odbc/test/psql_supported_tests
+++ b/tools/odbc/test/psql_supported_tests
@@ -8,6 +8,7 @@ cte-test
 cursor-commit-test
 declare-fetch-block-test
 dataatexecution-test
+diagnostic-test
 numeric-test
 quotes-test
 result-conversions-test
diff --git a/tools/odbc/test/run_psqlodbc_tests.sh b/tools/odbc/test/run_psqlodbc_tests.sh
index cbc23ec7beed..2c9bc4fe40c8 100755
--- a/tools/odbc/test/run_psqlodbc_tests.sh
+++ b/tools/odbc/test/run_psqlodbc_tests.sh
@@ -5,6 +5,7 @@ echo -e "[DuckDB]
Driver = DuckDB Driver
Database=:memory:
" > ~/.odbc.ini
 
 export PSQLODBC_TEST_DSN="DuckDB"
 
+TRACE_FILE=/tmp/odbctrace
 BASE_DUCKDB_DIR=$(pwd)
 cd psqlodbc
 export PSQLODBC_DIR=$(pwd)
@@ -14,13 +15,19 @@ rm -f contrib_regression
 rm -f contrib_regression.wal
 ./build/debug/reset-db < sampletables.sql
 if [[ $? != 0 ]]; then
-    cat /tmp/odbctrace
+    cat $TRACE_FILE
     exit 1
 fi
 
 # running supported tests
-./build/debug/psql_odbc_test -f ${BASE_DUCKDB_DIR}/tools/odbc/test/psql_supported_tests
-if [[ $? != 0 ]]; then
-    cat /tmp/odbctrace
-    exit 1
-fi
+while read test_file
+do
+    ./build/debug/psql_odbc_test $test_file
+    if [[ $? != 0 ]]; then
+        cat $TRACE_FILE
+        exit 1
+    fi
+    # clean odbc trace file
+    rm $TRACE_FILE
+done < ${BASE_DUCKDB_DIR}/tools/odbc/test/psql_supported_tests
+
diff --git a/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py b/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py
new file mode 100644
index 000000000000..b3cc8cb48656
--- /dev/null
+++ b/tools/pythonpkg/tests/fast/relational_api/test_rapi_close.py
@@ -0,0 +1,134 @@
+import duckdb
+import pytest
+
+# A closed connection should invalidate all relation's methods
+class TestRAPICloseConnRel(object):
+	def test_close_conn_rel(self, duckdb_cursor):
+		con = duckdb.connect()
+		con.execute("CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)")
+		con.execute("INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)")
+		rel = con.table("items")
+		con.close()
+		with pytest.raises(Exception, match='This connection is closed'):
+			print(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			len(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.filter("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.project("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.order("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.aggregate("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.sum("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.count("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.median("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.quantile("","")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.apply("","")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.min("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.max("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.mean("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.var("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.std("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.value_counts("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.unique("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.union(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.except_(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.intersect(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.join(rel, "")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.distinct()
+		with pytest.raises(Exception, match='This connection is closed'):
+			print(rel.limit(1))
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.query("","")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.execute()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.write_csv("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.insert_into("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.insert("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.create("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.create_view("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.to_arrow_table()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.arrow()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.to_df()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.df()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.fetchone()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.fetchall()
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.map(lambda df : df['col0'].add(42).to_frame())
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.mad("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.mode("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.abs("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.prod("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.skew("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.kurt("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.sem("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.cumsum("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.cumprod("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.cummax("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.cummin("")
+		with pytest.raises(Exception, match='This connection is closed'):
+			rel.describe()
+		con = duckdb.connect()
+		con.execute("CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)")
+		con.execute("INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)")
+		valid_rel = con.table("items")
+
+		# Test these bad boys when left relation is valid
+		with pytest.raises(Exception, match='This connection is closed'):
+			valid_rel.union(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			valid_rel.except_(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			valid_rel.intersect(rel)
+		with pytest.raises(Exception, match='This connection is closed'):
+			valid_rel.join(rel, "rel.items = valid_rel.items")
+
+	def test_del_conn(self, duckdb_cursor):
+		con = duckdb.connect()
+		con.execute("CREATE TABLE items(item VARCHAR, value DECIMAL(10,2), count INTEGER)")
+		con.execute("INSERT INTO items VALUES ('jeans', 20.0, 1), ('hammer', 42.2, 2)")
+		rel = con.table("items")
+		del con
+		with pytest.raises(Exception, match='This connection is closed'):
+			print(rel)
\ No newline at end of file
diff --git a/tools/pythonpkg/tests/fast/sqlite/test_types.py b/tools/pythonpkg/tests/fast/sqlite/test_types.py
index 7e066cb4899c..759e0ea5b12c 100644
--- a/tools/pythonpkg/tests/fast/sqlite/test_types.py
+++ b/tools/pythonpkg/tests/fast/sqlite/test_types.py
@@ -210,3 +210,56 @@ def test_CheckDateTimeSubSecondsFloatingPoint(self):
         ts2 = self.cur.fetchone()[0]
         self.assertEqual(ts.year, ts2.year)
         self.assertEqual(ts2.microsecond, 510241)
+
+
+class ListTests(unittest.TestCase):
+    def setUp(self):
+        self.con = duckdb.connect(":memory:")
+        self.cur = self.con.cursor()
+        self.cur.execute(
+            "create table test(single INTEGER[], nested INTEGER[][])"
+        )
+
+    def tearDown(self):
+        self.cur.close()
+        self.con.close()
+
+    def test_CheckEmptyList(self):
+        val = []
+        self.cur.execute("insert into test values (?, ?)", (val, val))
+        self.assertEqual(
+            self.cur.execute("select * from test").fetchall(),
+            [(val, val)],
+        )
+
+    def test_CheckSingleList(self):
+        val = [1, 2, 3]
+        self.cur.execute("insert into test(single) values (?)", (val,))
+        self.assertEqual(
+            self.cur.execute("select * from test").fetchall(),
+            [(val, None)],
+        )
+
+    def test_CheckNestedList(self):
+        val = [[1], [2], [3, 4]]
+        self.cur.execute("insert into test(nested) values (?)", (val,))
+        self.assertEqual(
+            self.cur.execute("select * from test").fetchall(),
+            [(None, val,)],
+        )
+
+    def test_CheckNone(self):
+        val = None
+        self.cur.execute("insert into test values (?, ?)", (val, val))
+        self.assertEqual(
+            self.cur.execute("select * from test").fetchall(),
+            [(val, val)],
+        )
+
+    def test_CheckEmbeddedNone(self):
+        val = [None]
+        self.cur.execute("insert into test values (?, ?)", (val, val))
+        self.assertEqual(
+            self.cur.execute("select * from test").fetchall(),
+            [(val, val)],
+        )
