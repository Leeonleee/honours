You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
PRAGMA database_size on read_only connection crash python
#### What happens?
If trying to query pragma database_size  to know memory consumption on a connection to a db opened with read_only=True, 
It **crashes python**.

#### To Reproduce
```python
import duckdb

conn = duckdb.connect("db2.duckdb", read_only=False)
print("With read/write:")
df = conn.execute("PRAGMA database_size").fetchdf()
print(df)
conn.close()
conn = duckdb.connect("db2.duckdb", read_only=True)
print("With read only:")
df = conn.execute("PRAGMA database_size").fetchdf()
print(df)
conn.close()
```
results in:
```
With read/write:
  database_size  block_size  total_blocks  used_blocks  free_blocks wal_size memory_usage memory_limit
0       0 bytes      262144             0            0            0  0 bytes      0 bytes       13.7GB
With read only:
```
#### Environment (please complete the following information):
 - OS: Windows 10
 - DuckDB Version: 0.3.2
 - DuckDB Client: Python 3.8.10

#### Before Submitting

- [x] **Have you tried this on the latest `master` branch?**
* **Python**: `pip install duckdb --upgrade --pre`
* **R**: `install.packages("https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz", repos = NULL)`
* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.

- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of .github/workflows/Main.yml]
1: name: Main
2: on: [push, pull_request]
3: 
4: concurrency:
5:   group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}
6:   cancel-in-progress: true
7: 
8: defaults:
9:   run:
10:     shell: bash
11: 
12: env:
13:   GH_TOKEN: ${{ secrets.GH_TOKEN }}
14:   TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
15:   AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
16:   AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
17:   NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}
18: 
19: jobs:
20:  linux-debug:
21:     name: Linux Debug
22:     runs-on: ubuntu-20.04
23: 
24:     env:
25:       CC: ccache gcc-10
26:       CXX: ccache g++-10
27:       TREAT_WARNINGS_AS_ERRORS: 1
28:       BUILD_SUBSTRAIT_EXTENSION: 1
29:       BUILD_TPCH: 1
30:       GEN: ninja
31: 
32:     steps:
33:     - uses: actions/checkout@v2
34:       with:
35:         fetch-depth: 0
36: 
37:     - name: Install
38:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build ccache
39: 
40:     - name: Build
41:       run:  make debug
42: 
43:     - name: Test
44:       run: make unittestci
45: 
46:  format-check:
47:     name: Format Check
48:     runs-on: ubuntu-20.04
49: 
50:     env:
51:       CC: gcc-10
52:       CXX: g++-10
53:       GEN: ninja
54: 
55:     steps:
56:     - uses: actions/checkout@v2
57:       with:
58:         fetch-depth: 0
59: 
60:     - name: Install
61:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-format && sudo pip3 install cmake-format
62: 
63:     - name: Format Check
64:       run: |
65:         clang-format --version
66:         clang-format --dump-config
67:         make format-check-silent
68: 
69: 
70:  tidy-check:
71:     name: Tidy Check
72:     runs-on: ubuntu-20.04
73: 
74:     env:
75:       CC: gcc-10
76:       CXX: g++-10
77:       GEN: ninja
78:       TIDY_THREADS: 4
79: 
80:     steps:
81:     - uses: actions/checkout@v2
82:       with:
83:         fetch-depth: 0
84: 
85:     - name: Install
86:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build clang-tidy && sudo pip3 install pybind11[global]
87: 
88:     - name: Tidy Check
89:       run: make tidy-check
90: 
91:  force-storage:
92:     name: Force Storage
93:     runs-on: ubuntu-20.04
94:     needs: linux-debug
95:     env:
96:       CC: gcc-10
97:       CXX: g++-10
98:       GEN: ninja
99:       BUILD_ICU: 1
100:       BUILD_PARQUET: 1
101:       BUILD_TPCH: 1
102:       BUILD_TPCDS: 1
103:       BUILD_FTS: 1
104:       BUILD_VISUALIZER: 1
105:       BUILD_EXCEL: 1
106: 
107:     steps:
108:     - uses: actions/checkout@v2
109:       with:
110:         fetch-depth: 0
111: 
112:     - name: Install
113:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
114: 
115:     - name: Build
116:       run: make reldebug
117: 
118:     - name: Test
119:       run: build/reldebug/test/unittest "*" --force-storage
120: 
121: 
122:  linux-arrow:
123:       name: Linux Debug (Arrow Tests)
124:       runs-on: ubuntu-20.04
125:       needs: linux-debug
126:       env:
127:         CC: gcc-10
128:         CXX: g++-10
129:         TREAT_WARNINGS_AS_ERRORS: 1
130:         GEN: ninja
131: 
132:       steps:
133:       - uses: actions/checkout@v2
134:         with:
135:           fetch-depth: 0
136: 
137:       - name: Install
138:         run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
139: 
140:       - name: Build
141:         run: BUILD_ARROW_ABI_TEST=1 make debug
142: 
143:       - name: Test
144:         run: make unittestarrow
145: 
146:  threadsan:
147:     name: Thread Sanitizer
148:     runs-on: ubuntu-20.04
149:     needs: linux-debug
150:     env:
151:       CC: gcc-10
152:       CXX: g++-10
153:       GEN: ninja
154:       BUILD_ICU: 1
155:       BUILD_TPCH: 1
156:       BUILD_TPCDS: 1
157:       BUILD_FTS: 1
158:       BUILD_VISUALIZER: 1
159:       BUILD_EXCEL: 1
160:       TSAN_OPTIONS: suppressions=.sanitizer-thread-suppressions.txt
161: 
162:     steps:
163:     - uses: actions/checkout@v2
164:       with:
165:         fetch-depth: 0
166: 
167:     - name: Install
168:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
169: 
170:     - name: Build
171:       run: THREADSAN=1 make reldebug
172: 
173:     - name: Test
174:       run: |
175:           python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest
176:           python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[intraquery]"
177:           python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[interquery]"
178:           python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest "[detailed_profiler]"
179:           python3 scripts/run_tests_one_by_one.py build/reldebug/test/unittest test/sql/tpch/tpch_sf01.test_slow
180: 
181: 
182:  valgrind:
183:     name: Valgrind
184:     runs-on: ubuntu-20.04
185:     needs: linux-debug
186:     env:
187:       CC: gcc-10
188:       CXX: g++-10
189:       DISABLE_SANITIZER: 1
190:       GEN: ninja
191: 
192:     steps:
193:     - uses: actions/checkout@v2
194:       with:
195:         fetch-depth: 0
196: 
197:     - name: Install
198:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build valgrind
199: 
200:     - name: Build
201:       run: make debug
202: 
203:     - name: Test
204:       run: valgrind ./build/debug/test/unittest test/sql/tpch/tpch_sf001.test_slow
205: 
206: 
207:  codecov:
208:     name: CodeCov
209:     runs-on: ubuntu-20.04
210:     needs: linux-debug
211:     env:
212:       GEN: ninja
213:     steps:
214:       - uses: actions/checkout@v2
215:         with:
216:           fetch-depth: 0
217: 
218:       - name: Install
219:         run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build lcov
220: 
221:       - name: Set up Python 3.9
222:         uses: actions/setup-python@v2
223:         with:
224:           python-version: '3.9'
225: 
226:       - name: Before Install
227:         run: |
228:           pip install --prefer-binary "pandas>=1.2.4" "requests>=2.26" "pyarrow==6.0" pytest
229:           sudo apt-get install g++
230: 
231:       - name: Coverage Reset
232:         run: |
233:           lcov --config-file .github/workflows/lcovrc --zerocounters --directory .
234:           lcov --config-file .github/workflows/lcovrc --capture --initial --directory . --base-directory . --no-external --output-file coverage.info
235: 
236:       - name: Run Tests
237:         run: |
238:           mkdir -p build/coverage
239:           (cd build/coverage && cmake -E env CXXFLAGS="--coverage" cmake -DBUILD_SUBSTRAIT_EXTENSION=1 -DBUILD_PYTHON=1 -DBUILD_PARQUET_EXTENSION=1 -DENABLE_SANITIZER=0 -DCMAKE_BUILD_TYPE=Debug ../.. && make)
240:           (cd tools/pythonpkg/tests/fast && python3 -m pytest)
241:           (cd tools/pythonpkg/tests/coverage && python3 -m pytest)
242:           build/coverage/test/unittest
243:           build/coverage/test/unittest "[intraquery]"
244:           build/coverage/test/unittest "[interquery]"
245:           python3 scripts/try_timeout.py --timeout=1200 --retry=3 build/coverage/test/unittest "[coverage]"
246:           build/coverage/test/unittest "[detailed_profiler]"
247:           build/coverage/test/unittest test/sql/tpch/tpch_sf01.test_slow
248:           build/coverage/tools/sqlite3_api_wrapper/test_sqlite3_api_wrapper
249:           python tools/shell/shell-test.py build/coverage/duckdb
250: 
251: 
252:       - name: Generate Coverage
253:         run: |
254:           lcov --config-file .github/workflows/lcovrc --directory . --base-directory . --no-external --capture --output-file coverage.info
255:           lcov --config-file .github/workflows/lcovrc --remove coverage.info $(< .github/workflows/lcov_exclude) -o lcov.info
256: 
257:       - name: CodeCov Upload
258:         uses: codecov/codecov-action@v2
259:         with:
260:           files: lcov.info
261:           fail_ci_if_error: true
262: 
263:  docs:
264:     name: Website Docs
265:     runs-on: ubuntu-20.04
266:     needs: linux-debug
267:     steps:
268:     - uses: actions/checkout@v2
269:       with:
270:         fetch-depth: 0
271: 
272:     - name: Clone Website
273:       run: git clone https://github.com/duckdb/duckdb-web
274: 
275:     - name: Set up Python 3.9
276:       uses: actions/setup-python@v2
277:       with:
278:         python-version: '3.9'
279: 
280:     - name: Package
281:       run: |
282:         cd duckdb-web
283:         python3 scripts/generate_docs.py ..
284: 
285: 
286:  sqllogic:
287:     name: Sqllogic tests
288:     runs-on: ubuntu-20.04
289:     needs: linux-debug
290:     env:
291:       CC: gcc-10
292:       CXX: g++-10
293: 
294:     steps:
295:     - uses: actions/checkout@v2
296:       with:
297:         fetch-depth: 0
298: 
299:     - name: Test
300:       run: make sqlite
301: 
302:  expanded:
303:     name: Expanded
304:     runs-on: ubuntu-20.04
305:     needs: linux-debug
306:     env:
307:       CC: gcc-10
308:       CXX: g++-10
309:       TREAT_WARNINGS_AS_ERRORS: 1
310:       DISABLE_UNITY: 1
311:       GEN: ninja
312: 
313:     steps:
314:     - uses: actions/checkout@v2
315:       with:
316:         fetch-depth: 0
317: 
318:     - name: Install
319:       run: sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
320: 
321:     - name: Build
322:       run: make debug
323: 
324:  sqlancer:
325:     name: SQLancer
326:     runs-on: ubuntu-20.04
327:     needs: linux-debug
328:     env:
329:       BUILD_JDBC: 1
330:       FORCE_QUERY_LOG: sqlancer_log.tmp
331:       GEN: ninja
332: 
333:     steps:
334:     - uses: actions/checkout@v2
335:       with:
336:         fetch-depth: 0
337: 
338:     - name: Install
339:       run: |
340:         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
341:         git clone https://github.com/hannesmuehleisen/sqlancer
342:         cd sqlancer
343:         git checkout persistent
344:         mvn package -q -DskipTests
345: 
346:     - name: Build
347:       run: make reldebug
348: 
349:     - name: Test
350:       run: |
351:         cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
352:         python3 scripts/run_sqlancer.py
353: 
354: 
355: 
356:  sqlancer_persistent:
357:     name: SQLancer (Persistent)
358:     runs-on: ubuntu-20.04
359:     needs: linux-debug
360:     env:
361:       BUILD_JDBC: 1
362:       FORCE_QUERY_LOG: sqlancer_log.tmp
363:       GEN: ninja
364: 
365:     steps:
366:     - uses: actions/checkout@v2
367:       with:
368:         fetch-depth: 0
369: 
370:     - name: Install
371:       run: |
372:         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
373:         git clone https://github.com/hannesmuehleisen/sqlancer
374:         cd sqlancer
375:         git checkout persistent
376:         mvn package -q -DskipTests
377: 
378:     - name: Build
379:       run: make reldebug
380: 
381:     - name: Test
382:       run: |
383:         cp build/reldebug/tools/jdbc/duckdb_jdbc.jar sqlancer/target/lib/duckdb_jdbc-*.jar
384:         python3 scripts/run_sqlancer.py --persistent
385: 
386: 
387: 
388:  jdbc:
389:     name: JDBC Compliance
390:     runs-on: ubuntu-18.04
391:     needs: linux-debug
392:     env:
393:       CC: gcc-10
394:       CXX: g++-10
395:       BUILD_JDBC: 1
396:       GEN: ninja
397: 
398:     steps:
399:     - uses: actions/checkout@v2
400:       with:
401:         fetch-depth: 0
402: 
403:     - name: Install
404:       run: |
405:         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build
406:         git clone https://github.com/cwida/jdbccts.git
407: 
408:     - name: Build
409:       run: make release
410: 
411:     - name: Test
412:       run: (cd jdbccts && make DUCKDB_JAR=../build/release/tools/jdbc/duckdb_jdbc.jar test)
413: 
414:  odbc:
415:     name: ODBC
416:     runs-on: ubuntu-20.04
417:     needs: linux-debug
418:     env:
419:       BUILD_ODBC: 1
420:       GEN: ninja
421: 
422:     steps:
423:     - uses: actions/checkout@v2
424:       with:
425:         fetch-depth: 0
426: 
427:     - uses: actions/setup-python@v2
428:       with:
429:         python-version: '3.7'
430: 
431:     - name: Dependencies
432:       run: |
433:         sudo apt-get update -y -qq && sudo apt-get install -y -qq ninja-build unixodbc-dev python3 python3-pyodbc python3-pip julia
434:         pip3 install pyodbc
435: 
436:     - name: Install nanodbc
437:       run: |
438:         wget https://github.com/nanodbc/nanodbc/archive/refs/tags/v2.13.0.tar.gz -O nanodbc.tgz
439:         (mkdir nanodbc && tar xvf nanodbc.tgz -C nanodbc --strip-components=1 && cd nanodbc && sed -i -e "s/set(test_list/set(test_list odbc/" test/CMakeLists.txt && mkdir build && cd build && cmake -DNANODBC_DISABLE_TESTS=OFF .. && cmake --build .)
440: 
441:     - name: Install psqlodbc
442:       run: |
443:         git clone https://github.com/Mytherin/psqlodbc.git
444:         (cd psqlodbc && git checkout f11663bb9d1e6c0bbad8d4df919da1edc3c5338c && make debug)
445: 
446:     - name: Build
447:       run: DISABLE_SANITIZER=1 make debug
448: 
449:     - name: Test nanodbc
450:       run: ./tools/odbc/test/run_nanodbc_tests.sh
451: 
452:     - name: Test psqlodbc
453:       run: ./tools/odbc/test/run_psqlodbc_tests.sh
454: 
455:     - name: Test isql
456:       run: ./tools/odbc/test/run_isql_tests.sh
457: 
458:     - name: Test R ODBC
459:       run: R -f tools/odbc/test/rodbc.R
460: 
461:     - name: Test Python ODBC
462:       run: ./tools/odbc/test/run_pyodbc_tests.sh
463: 
464:     - name: Test Julia ODBC
465:       run: |
466:         export ASAN_OPTIONS=verify_asan_link_order=0
467:         julia tools/odbc/test/julia-test.jl
[end of .github/workflows/Main.yml]
[start of .github/workflows/Windows.yml]
1: name: Windows
2: on: [push, pull_request]
3: 
4: concurrency:
5:   group: ${{ github.workflow }}-${{ github.ref }}-${{ github.head_ref || '' }}-${{ github.base_ref || '' }}
6:   cancel-in-progress: true
7: 
8: defaults:
9:   run:
10:     shell: bash
11: 
12: env:
13:   GH_TOKEN: ${{ secrets.GH_TOKEN }}
14:   TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
15:   AWS_ACCESS_KEY_ID: AKIAVBLKPL2ZW2T7TYFQ
16:   AWS_SECRET_ACCESS_KEY: ${{ secrets.NODE_PRE_GYP_SECRETACCESSKEY }}
17:   NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}
18: 
19: jobs:
20:  win-release-64:
21:     name: Windows (64 Bit)
22:     runs-on: windows-latest
23:     steps:
24:     - uses: actions/checkout@v2
25:       with:
26:         fetch-depth: 0
27: 
28:     - uses: actions/setup-python@v2
29:       with:
30:         python-version: '3.7'
31: 
32:     - name: Build
33:       run: |
34:         python scripts/windows_ci.py
35:         cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1
36:         cmake --build . --config Release
37: 
38:     - name: Test
39:       run: test/Release/unittest.exe
40: 
41:     - name: Tools Test
42:       run: |
43:         python tools/shell/shell-test.py Release/duckdb.exe
44:         java -cp tools/jdbc/duckdb_jdbc.jar org.duckdb.test.TestDuckDBJDBC
45: 
46:     - name: Deploy
47:       run: |
48:         python scripts/amalgamation.py
49:         choco install zip -y --force
50:         zip -j duckdb_cli-windows-amd64.zip Release/duckdb.exe
51:         zip -j libduckdb-windows-amd64.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
52:         zip -j duckdb_odbc-windows-amd64.zip tools/odbc/bin/Release/*
53:         python scripts/asset-upload-gha.py libduckdb-windows-amd64.zip duckdb_cli-windows-amd64.zip duckdb_jdbc-windows-amd64.jar=tools/jdbc/duckdb_jdbc.jar duckdb_odbc-windows-amd64.zip
54: 
55:     - uses: actions/upload-artifact@v2
56:       with:
57:         name: duckdb-binaries-windows
58:         path: |
59:           libduckdb-windows-amd64.zip
60:           duckdb_cli-windows-amd64.zip
61:           tools/jdbc/duckdb_jdbc.jar
62: 
63:     - uses: ilammy/msvc-dev-cmd@v1
64:     - name: Duckdb.dll export symbols with C++ on Windows
65:       run: cl -I src/include examples/embedded-c++-windows/cppintegration.cpp -link src/Release/duckdb.lib
66: 
67:  win-release-32:
68:     name: Windows (32 Bit)
69:     runs-on: windows-latest
70:     needs: win-release-64
71: 
72:     steps:
73:     - uses: actions/checkout@v2
74:       with:
75:         fetch-depth: 0
76: 
77:     - uses: actions/setup-python@v2
78:       with:
79:         python-version: '3.7'
80: 
81:     - name: Build
82:       run: |
83:         cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=Win32 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1
84:         cmake --build . --config Release
85: 
86:     - name: Test
87:       run: test/Release/unittest.exe
88: 
89:     - name: Tools Test
90:       run: |
91:         python tools/shell/shell-test.py Release/duckdb.exe
92: 
93:     - name: Deploy
94:       run: |
95:         python scripts/amalgamation.py
96:         choco install zip -y --force
97:         zip -j duckdb_cli-windows-i386.zip Release/duckdb.exe
98:         zip -j libduckdb-windows-i386.zip src/Release/duckdb.dll src/amalgamation/duckdb.hpp src/include/duckdb.h
99:         python scripts/asset-upload-gha.py libduckdb-windows-i386.zip duckdb_cli-windows-i386.zip duckdb_jdbc-windows-i386.jar=tools/jdbc/duckdb_jdbc.jar
100: 
101:     - uses: actions/upload-artifact@v2
102:       with:
103:         name: duckdb-binaries-windows
104:         path: |
105:           libduckdb-windows-i386.zip
106:           duckdb_cli-windows-i386.zip
107:           tools/jdbc/duckdb_jdbc.jar
108: 
109: 
110:  mingw:
111:      name: MingW (64 Bit)
112:      runs-on: windows-latest
113:      needs: win-release-64
114:      defaults:
115:        run:
116:          shell: msys2 {0}
117:      steps:
118:        - uses: actions/checkout@v2
119:        - uses: msys2/setup-msys2@v2
120:          with:
121:            msystem: MINGW64
122:            update: true
123:            install: git mingw-w64-x86_64-toolchain mingw-w64-x86_64-cmake mingw-w64-x86_64-ninja git
124:        # see here: https://gist.github.com/scivision/1de4fd6abea9ba6b2d87dc1e86b5d2ce
125:        - name: Put MSYS2_MinGW64 on PATH
126:          # there is not yet an environment variable for this path from msys2/setup-msys2
127:          run: export PATH=D:/a/_temp/msys/msys64/mingw64/bin:$PATH
128: 
129:        - name: Build
130:          run: |
131:            cmake -G "Ninja" -DCMAKE_BUILD_TYPE=Release -DBUILD_PARQUET_EXTENSION=1
132:            cmake --build . --config Release
133: 
134:        - name: Test
135:          run: |
136:            cp src/libduckdb.dll .
137:            test/unittest.exe
138: 
139:  odbc-win-64:
140:     name: ODBC Windows
141:     runs-on: windows-latest
142:     needs: win-release-64
143:     steps:
144:     - uses: actions/checkout@v2
145:       with:
146:         fetch-depth: 0
147: 
148:     - uses: actions/setup-python@v2
149:       with:
150:         python-version: '3.7'
151: 
152:     - name: Install Git
153:       run: |
154:         choco install git -y --force
155: 
156:     - name: Build
157:       run: |
158:         cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_GENERATOR_PLATFORM=x64 -DBUILD_ICU_EXTENSION=1 -DBUILD_PARQUET_EXTENSION=1 -DBUILD_TPCH_EXTENSION=1 -DBUILD_TPCDS_EXTENSION=1 -DBUILD_FTS_EXTENSION=1 -DBUILD_EXCEL_EXTENSION=1 -DBUILD_REST=1 -DJDBC_DRIVER=1 -DBUILD_VISUALIZER_EXTENSION=1 -DBUILD_ODBC_DRIVER=1 -DDISABLE_UNITY=1
159:         cmake --build . --config Release
160: 
161:     - name: Install ODBC Driver
162:       run:  |
163:         tools/odbc/bin/Release/odbc_install.exe //CI //Install
164:         Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\ODBC Data Sources"
165:         Reg Query "HKLM\SOFTWARE\ODBC\ODBC.INI\DuckDB"
166:         Reg Query "HKLM\SOFTWARE\ODBC\ODBCINST.INI\DuckDB Driver"
167: 
168:     - name: Enable ODBC Trace HKCU
169:       run: |
170:         REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //f
171:         REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v Trace //t REG_SZ //d 1
172:         REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceDll //t REG_SZ //d "C:\Windows\system32\odbctrac.dll"
173:         REG ADD "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC" //v TraceFile //t REG_SZ //d "D:\a\duckdb\duckdb\ODBC_TRACE.log"
174:         echo "----------------------------------------------------------------"
175:         Reg Query "HKCU\SOFTWARE\ODBC\ODBC.INI\ODBC"
176: 
177:     - name: Install psqlodbc
178:       run: |
179:         git clone https://github.com/Mytherin/psqlodbc.git
180:         (cd psqlodbc && git checkout f11663bb9d1e6c0bbad8d4df919da1edc3c5338c && make release)
181: 
182:     - name: Test psqlodbc
183:       run: |
184:         cd psqlodbc
185:         export PSQLODBC_TEST_DSN=DuckDB
186:         build/release/Release/psql_odbc_test.exe -f ../tools/odbc/test/psql_supported_tests
187: 
188:     - name: Print ODBC trace on failure
189:       if: ${{ failure() }}
190:       run: cat ODBC_TRACE.log
191: 
192:  win-extensions-64:
193:    name: Windows Extensions (64-bit)
194:    runs-on: windows-latest
195:    needs: win-release-64
196:    env:
197:      BUILD_VISUALIZER: 1
198:      BUILD_ICU: 1
199:      BUILD_TPCH: 1
200:      BUILD_TPCDS: 1
201:      BUILD_FTS: 1
202:      BUILD_HTTPFS: 1
203:      BUILD_EXCEL: 1
204:      STATIC_OPENSSL: 1
205:      BUILD_SUBSTRAIT_EXTENSION: 1
206:      AWS_ACCESS_KEY_ID: ${{secrets.S3_ID}}
207:      AWS_SECRET_ACCESS_KEY: ${{secrets.S3_KEY}}
208:      AWS_DEFAULT_REGION: us-east-1
209:    steps:
210:      - uses: actions/checkout@v2
211:        with:
212:          fetch-depth: 0
213: 
214:      - uses: actions/setup-python@v2
215:        with:
216:          python-version: '3.7'
217: 
218:      - name: Install OpenSSL
219:        run: |
220:          choco install openssl -y --force
221: 
222:      - name: Build
223:        run: |
224:          make
225: 
226:      - name: Uninstall OpenSSL
227:        run: |
228:          choco uninstall openssl -y --force
229: 
230:      - name: Deploy
231:        run: |
232:          if [[ "$GITHUB_REF" =~ ^(refs/heads/master|refs/tags/v.+)$ && "$GITHUB_REPOSITORY" = "duckdb/duckdb" ]] ; then
233:            pip install awscli
234:            ./scripts/extension-upload.sh windows_amd64
235:            ./scripts/extension-upload-test.sh
236:          else
237:            ./scripts/extension-upload-test.sh local
238:          fi
[end of .github/workflows/Windows.yml]
[start of extension/tpch/tpch-extension.cpp]
1: #define DUCKDB_EXTENSION_MAIN
2: 
3: #include "tpch-extension.hpp"
4: 
5: #ifndef DUCKDB_AMALGAMATION
6: #include "duckdb/function/table_function.hpp"
7: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
8: #include "duckdb/parser/parsed_data/create_view_info.hpp"
9: #include "duckdb/parser/parser.hpp"
10: #include "duckdb/parser/statement/select_statement.hpp"
11: #include "duckdb/parser/parsed_data/create_pragma_function_info.hpp"
12: #endif
13: 
14: #include "dbgen/dbgen.hpp"
15: 
16: namespace duckdb {
17: 
18: struct DBGenFunctionData : public TableFunctionData {
19: 	DBGenFunctionData() {
20: 	}
21: 
22: 	bool finished = false;
23: 	double sf = 0;
24: 	string schema = DEFAULT_SCHEMA;
25: 	string suffix;
26: 	bool overwrite = false;
27: };
28: 
29: static unique_ptr<FunctionData> DbgenBind(ClientContext &context, vector<Value> &inputs,
30:                                           named_parameter_map_t &named_parameters,
31:                                           vector<LogicalType> &input_table_types, vector<string> &input_table_names,
32:                                           vector<LogicalType> &return_types, vector<string> &names) {
33: 	auto result = make_unique<DBGenFunctionData>();
34: 	for (auto &kv : named_parameters) {
35: 		if (kv.first == "sf") {
36: 			result->sf = DoubleValue::Get(kv.second);
37: 		} else if (kv.first == "schema") {
38: 			result->schema = StringValue::Get(kv.second);
39: 		} else if (kv.first == "suffix") {
40: 			result->suffix = StringValue::Get(kv.second);
41: 		} else if (kv.first == "overwrite") {
42: 			result->overwrite = BooleanValue::Get(kv.second);
43: 		}
44: 	}
45: 	return_types.emplace_back(LogicalType::BOOLEAN);
46: 	names.emplace_back("Success");
47: 	return move(result);
48: }
49: 
50: static void DbgenFunction(ClientContext &context, const FunctionData *bind_data, FunctionOperatorData *operator_state,
51:                           DataChunk *input, DataChunk &output) {
52: 	auto &data = (DBGenFunctionData &)*bind_data;
53: 	if (data.finished) {
54: 		return;
55: 	}
56: 	tpch::DBGenWrapper::CreateTPCHSchema(context, data.schema, data.suffix);
57: 	tpch::DBGenWrapper::LoadTPCHData(context, data.sf, data.schema, data.suffix);
58: 
59: 	data.finished = true;
60: }
61: 
62: struct TPCHData : public FunctionOperatorData {
63: 	TPCHData() : offset(0) {
64: 	}
65: 	idx_t offset;
66: };
67: 
68: unique_ptr<FunctionOperatorData> TPCHInit(ClientContext &context, const FunctionData *bind_data,
69:                                           const vector<column_t> &column_ids, TableFilterCollection *filters) {
70: 	auto result = make_unique<TPCHData>();
71: 	return move(result);
72: }
73: 
74: static unique_ptr<FunctionData> TPCHQueryBind(ClientContext &context, vector<Value> &inputs,
75:                                               named_parameter_map_t &named_parameters,
76:                                               vector<LogicalType> &input_table_types, vector<string> &input_table_names,
77:                                               vector<LogicalType> &return_types, vector<string> &names) {
78: 	names.emplace_back("query_nr");
79: 	return_types.emplace_back(LogicalType::INTEGER);
80: 
81: 	names.emplace_back("query");
82: 	return_types.emplace_back(LogicalType::VARCHAR);
83: 
84: 	return nullptr;
85: }
86: 
87: static void TPCHQueryFunction(ClientContext &context, const FunctionData *bind_data,
88:                               FunctionOperatorData *operator_state, DataChunk *input, DataChunk &output) {
89: 	auto &data = (TPCHData &)*operator_state;
90: 	idx_t tpch_queries = 22;
91: 	if (data.offset >= tpch_queries) {
92: 		// finished returning values
93: 		return;
94: 	}
95: 	idx_t chunk_count = 0;
96: 	while (data.offset < tpch_queries && chunk_count < STANDARD_VECTOR_SIZE) {
97: 		auto query = tpch::DBGenWrapper::GetQuery(data.offset + 1);
98: 		// "query_nr", PhysicalType::INT32
99: 		output.SetValue(0, chunk_count, Value::INTEGER((int32_t)data.offset + 1));
100: 		// "query", PhysicalType::VARCHAR
101: 		output.SetValue(1, chunk_count, Value(query));
102: 		data.offset++;
103: 		chunk_count++;
104: 	}
105: 	output.SetCardinality(chunk_count);
106: }
107: 
108: static unique_ptr<FunctionData> TPCHQueryAnswerBind(ClientContext &context, vector<Value> &inputs,
109:                                                     named_parameter_map_t &named_parameters,
110:                                                     vector<LogicalType> &input_table_types,
111:                                                     vector<string> &input_table_names,
112:                                                     vector<LogicalType> &return_types, vector<string> &names) {
113: 	names.emplace_back("query_nr");
114: 	return_types.emplace_back(LogicalType::INTEGER);
115: 
116: 	names.emplace_back("scale_factor");
117: 	return_types.emplace_back(LogicalType::DOUBLE);
118: 
119: 	names.emplace_back("answer");
120: 	return_types.emplace_back(LogicalType::VARCHAR);
121: 
122: 	return nullptr;
123: }
124: 
125: static void TPCHQueryAnswerFunction(ClientContext &context, const FunctionData *bind_data,
126:                                     FunctionOperatorData *operator_state, DataChunk *input, DataChunk &output) {
127: 	auto &data = (TPCHData &)*operator_state;
128: 	idx_t tpch_queries = 22;
129: 	vector<double> scale_factors {0.01, 0.1, 1};
130: 	idx_t total_answers = tpch_queries * scale_factors.size();
131: 	if (data.offset >= total_answers) {
132: 		// finished returning values
133: 		return;
134: 	}
135: 	idx_t chunk_count = 0;
136: 	while (data.offset < total_answers && chunk_count < STANDARD_VECTOR_SIZE) {
137: 		idx_t cur_query = data.offset % tpch_queries;
138: 		idx_t cur_sf = data.offset / tpch_queries;
139: 		auto answer = tpch::DBGenWrapper::GetAnswer(scale_factors[cur_sf], cur_query + 1);
140: 		// "query_nr", PhysicalType::INT32
141: 		output.SetValue(0, chunk_count, Value::INTEGER((int32_t)cur_query + 1));
142: 		// "scale_factor", PhysicalType::INT32
143: 		output.SetValue(1, chunk_count, Value::DOUBLE(scale_factors[cur_sf]));
144: 		// "query", PhysicalType::VARCHAR
145: 		output.SetValue(2, chunk_count, Value(answer));
146: 		data.offset++;
147: 		chunk_count++;
148: 	}
149: 	output.SetCardinality(chunk_count);
150: }
151: 
152: static string PragmaTpchQuery(ClientContext &context, const FunctionParameters &parameters) {
153: 	auto index = parameters.values[0].GetValue<int32_t>();
154: 	return tpch::DBGenWrapper::GetQuery(index);
155: }
156: 
157: void TPCHExtension::Load(DuckDB &db) {
158: 	Connection con(db);
159: 	con.BeginTransaction();
160: 	auto &catalog = Catalog::GetCatalog(*con.context);
161: 
162: 	TableFunction dbgen_func("dbgen", {}, DbgenFunction, DbgenBind);
163: 	dbgen_func.named_parameters["sf"] = LogicalType::DOUBLE;
164: 	dbgen_func.named_parameters["overwrite"] = LogicalType::BOOLEAN;
165: 	dbgen_func.named_parameters["schema"] = LogicalType::VARCHAR;
166: 	dbgen_func.named_parameters["suffix"] = LogicalType::VARCHAR;
167: 	CreateTableFunctionInfo dbgen_info(dbgen_func);
168: 
169: 	// create the dbgen function
170: 	catalog.CreateTableFunction(*con.context, &dbgen_info);
171: 
172: 	// create the TPCH pragma that allows us to run the query
173: 	auto tpch_func = PragmaFunction::PragmaCall("tpch", PragmaTpchQuery, {LogicalType::BIGINT});
174: 	CreatePragmaFunctionInfo info(tpch_func);
175: 	catalog.CreatePragmaFunction(*con.context, &info);
176: 
177: 	// create the TPCH_QUERIES function that returns the query
178: 	TableFunction tpch_query_func("tpch_queries", {}, TPCHQueryFunction, TPCHQueryBind, TPCHInit);
179: 	CreateTableFunctionInfo tpch_query_info(tpch_query_func);
180: 	catalog.CreateTableFunction(*con.context, &tpch_query_info);
181: 
182: 	// create the TPCH_ANSWERS that returns the query result
183: 	TableFunction tpch_query_answer_func("tpch_answers", {}, TPCHQueryAnswerFunction, TPCHQueryAnswerBind, TPCHInit);
184: 	CreateTableFunctionInfo tpch_query_asnwer_info(tpch_query_answer_func);
185: 	catalog.CreateTableFunction(*con.context, &tpch_query_asnwer_info);
186: 
187: 	con.Commit();
188: }
189: 
190: std::string TPCHExtension::GetQuery(int query) {
191: 	return tpch::DBGenWrapper::GetQuery(query);
192: }
193: 
194: std::string TPCHExtension::GetAnswer(double sf, int query) {
195: 	return tpch::DBGenWrapper::GetAnswer(sf, query);
196: }
197: 
198: std::string TPCHExtension::Name() {
199: 	return "tpch";
200: }
201: 
202: } // namespace duckdb
203: 
204: extern "C" {
205: 
206: DUCKDB_EXTENSION_API void tpch_init(duckdb::DatabaseInstance &db) {
207: 	duckdb::DuckDB db_wrapper(db);
208: 	db_wrapper.LoadExtension<duckdb::TPCHExtension>();
209: }
210: 
211: DUCKDB_EXTENSION_API const char *tpch_version() {
212: 	return duckdb::DuckDB::LibraryVersion();
213: }
214: }
[end of extension/tpch/tpch-extension.cpp]
[start of src/catalog/default/default_functions.cpp]
1: #include "duckdb/catalog/default/default_functions.hpp"
2: #include "duckdb/parser/parser.hpp"
3: #include "duckdb/parser/parsed_data/create_macro_info.hpp"
4: #include "duckdb/parser/expression/columnref_expression.hpp"
5: #include "duckdb/catalog/catalog_entry/macro_catalog_entry.hpp"
6: 
7: namespace duckdb {
8: 
9: struct DefaultMacro {
10: 	const char *schema;
11: 	const char *name;
12: 	const char *parameters[8];
13: 	const char *macro;
14: };
15: 
16: static DefaultMacro internal_macros[] = {
17: 	{DEFAULT_SCHEMA, "current_user", {nullptr}, "'duckdb'"},                       // user name of current execution context
18: 	{DEFAULT_SCHEMA, "current_catalog", {nullptr}, "'duckdb'"},                    // name of current database (called "catalog" in the SQL standard)
19: 	{DEFAULT_SCHEMA, "current_database", {nullptr}, "'duckdb'"},                   // name of current database
20: 	{DEFAULT_SCHEMA, "user", {nullptr}, "current_user"},                           // equivalent to current_user
21: 	{DEFAULT_SCHEMA, "session_user", {nullptr}, "'duckdb'"},                       // session user name
22: 	{"pg_catalog", "inet_client_addr", {nullptr}, "NULL"},                       // address of the remote connection
23: 	{"pg_catalog", "inet_client_port", {nullptr}, "NULL"},                       // port of the remote connection
24: 	{"pg_catalog", "inet_server_addr", {nullptr}, "NULL"},                       // address of the local connection
25: 	{"pg_catalog", "inet_server_port", {nullptr}, "NULL"},                       // port of the local connection
26: 	{"pg_catalog", "pg_my_temp_schema", {nullptr}, "0"},                         // OID of session's temporary schema, or 0 if none
27: 	{"pg_catalog", "pg_is_other_temp_schema", {"schema_id", nullptr}, "false"},  // is schema another session's temporary schema?
28: 
29: 	{"pg_catalog", "pg_conf_load_time", {nullptr}, "current_timestamp"},         // configuration load time
30: 	{"pg_catalog", "pg_postmaster_start_time", {nullptr}, "current_timestamp"},  // server start time
31: 
32: 	{"pg_catalog", "pg_typeof", {"expression", nullptr}, "lower(typeof(expression))"},  // get the data type of any value
33: 
34: 	// privilege functions
35: 	// {"has_any_column_privilege", {"user", "table", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for any column of table
36: 	{"pg_catalog", "has_any_column_privilege", {"table", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for any column of table
37: 	// {"has_column_privilege", {"user", "table", "column", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for column
38: 	{"pg_catalog", "has_column_privilege", {"table", "column", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for column
39: 	// {"has_database_privilege", {"user", "database", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for database
40: 	{"pg_catalog", "has_database_privilege", {"database", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for database
41: 	// {"has_foreign_data_wrapper_privilege", {"user", "fdw", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for foreign-data wrapper
42: 	{"pg_catalog", "has_foreign_data_wrapper_privilege", {"fdw", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for foreign-data wrapper
43: 	// {"has_function_privilege", {"user", "function", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for function
44: 	{"pg_catalog", "has_function_privilege", {"function", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for function
45: 	// {"has_language_privilege", {"user", "language", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for language
46: 	{"pg_catalog", "has_language_privilege", {"language", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for language
47: 	// {"has_schema_privilege", {"user", "schema, privilege", nullptr}, "true"},  //boolean  //does user have privilege for schema
48: 	{"pg_catalog", "has_schema_privilege", {"schema", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for schema
49: 	// {"has_sequence_privilege", {"user", "sequence", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for sequence
50: 	{"pg_catalog", "has_sequence_privilege", {"sequence", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for sequence
51: 	// {"has_server_privilege", {"user", "server", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for foreign server
52: 	{"pg_catalog", "has_server_privilege", {"server", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for foreign server
53: 	// {"has_table_privilege", {"user", "table", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for table
54: 	{"pg_catalog", "has_table_privilege", {"table", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for table
55: 	// {"has_tablespace_privilege", {"user", "tablespace", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for tablespace
56: 	{"pg_catalog", "has_tablespace_privilege", {"tablespace", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for tablespace
57: 
58: 	// various postgres system functions
59: 	{"pg_catalog", "pg_get_viewdef", {"oid", nullptr}, "(select sql from duckdb_views() v where v.view_oid=oid)"},
60: 	{"pg_catalog", "pg_get_constraintdef", {"constraint_oid", "pretty_bool", nullptr}, "(select constraint_text from duckdb_constraints() d_constraint where d_constraint.table_oid=constraint_oid/1000000 and d_constraint.constraint_index=constraint_oid%1000000)"},
61: 	{"pg_catalog", "pg_get_expr", {"pg_node_tree", "relation_oid", nullptr}, "pg_node_tree"},
62: 	{"pg_catalog", "format_pg_type", {"type_name", nullptr}, "case when type_name='FLOAT' then 'real' when type_name='DOUBLE' then 'double precision' when type_name='DECIMAL' then 'numeric' when type_name='VARCHAR' then 'character varying' when type_name='BLOB' then 'bytea' when type_name='TIMESTAMP' then 'timestamp without time zone' when type_name='TIME' then 'time without time zone' else lower(type_name) end"},
63: 	{"pg_catalog", "format_type", {"type_oid", "typemod", nullptr}, "(select format_pg_type(type_name) from duckdb_types() t where t.type_oid=type_oid) || case when typemod>0 then concat('(', typemod/1000, ',', typemod%1000, ')') else '' end"},
64: 
65: 	{"pg_catalog", "pg_has_role", {"user", "role", "privilege", nullptr}, "true"},  //boolean  //does user have privilege for role
66: 	{"pg_catalog", "pg_has_role", {"role", "privilege", nullptr}, "true"},  //boolean  //does current user have privilege for role
67: 
68: 	{"pg_catalog", "col_description", {"table_oid", "column_number", nullptr}, "NULL"},   // get comment for a table column
69: 	{"pg_catalog", "obj_description", {"object_oid", "catalog_name", nullptr}, "NULL"},   // get comment for a database object
70: 	{"pg_catalog", "shobj_description", {"object_oid", "catalog_name", nullptr}, "NULL"}, // get comment for a shared database object
71: 
72: 	// visibility functions
73: 	{"pg_catalog", "pg_collation_is_visible", {"collation_oid", nullptr}, "true"},
74: 	{"pg_catalog", "pg_conversion_is_visible", {"conversion_oid", nullptr}, "true"},
75: 	{"pg_catalog", "pg_function_is_visible", {"function_oid", nullptr}, "true"},
76: 	{"pg_catalog", "pg_opclass_is_visible", {"opclass_oid", nullptr}, "true"},
77: 	{"pg_catalog", "pg_operator_is_visible", {"operator_oid", nullptr}, "true"},
78: 	{"pg_catalog", "pg_opfamily_is_visible", {"opclass_oid", nullptr}, "true"},
79: 	{"pg_catalog", "pg_table_is_visible", {"table_oid", nullptr}, "true"},
80: 	{"pg_catalog", "pg_ts_config_is_visible", {"config_oid", nullptr}, "true"},
81: 	{"pg_catalog", "pg_ts_dict_is_visible", {"dict_oid", nullptr}, "true"},
82: 	{"pg_catalog", "pg_ts_parser_is_visible", {"parser_oid", nullptr}, "true"},
83: 	{"pg_catalog", "pg_ts_template_is_visible", {"template_oid", nullptr}, "true"},
84: 	{"pg_catalog", "pg_type_is_visible", {"type_oid", nullptr}, "true"},
85: 
86: 	{DEFAULT_SCHEMA, "round_even", {"x", "n", nullptr}, "CASE ((abs(x) * power(10, n+1)) % 10) WHEN 5 THEN round(x/2, n) * 2 ELSE round(x, n) END"},
87: 	{DEFAULT_SCHEMA, "roundbankers", {"x", "n", nullptr}, "round_even(x, n)"},
88: 	{DEFAULT_SCHEMA, "nullif", {"a", "b", nullptr}, "CASE WHEN a=b THEN NULL ELSE a END"},
89: 	{DEFAULT_SCHEMA, "list_append", {"l", "e", nullptr}, "list_concat(l, list_value(e))"},
90: 	{DEFAULT_SCHEMA, "array_append", {"arr", "el", nullptr}, "list_append(arr, el)"},
91: 	{DEFAULT_SCHEMA, "list_prepend", {"e", "l", nullptr}, "list_concat(list_value(e), l)"},
92: 	{DEFAULT_SCHEMA, "array_prepend", {"el", "arr", nullptr}, "list_prepend(el, arr)"},
93: 	{DEFAULT_SCHEMA, "generate_subscripts", {"arr", "dim", nullptr}, "unnest(generate_series(1, array_length(arr, dim)))"},
94: 	{DEFAULT_SCHEMA, "fdiv", {"x", "y", nullptr}, "floor(x/y)"},
95: 	{DEFAULT_SCHEMA, "fmod", {"x", "y", nullptr}, "(x-y*floor(x/y))"},
96: 	{nullptr, nullptr, {nullptr}, nullptr}};
97: 
98: static unique_ptr<CreateFunctionInfo> GetDefaultFunction(const string &input_schema, const string &input_name) {
99: 	auto schema = StringUtil::Lower(input_schema);
100: 	auto name = StringUtil::Lower(input_name);
101: 	for (idx_t index = 0; internal_macros[index].name != nullptr; index++) {
102: 		if (internal_macros[index].schema == schema && internal_macros[index].name == name) {
103: 			// parse the expression
104: 			auto expressions = Parser::ParseExpressionList(internal_macros[index].macro);
105: 			D_ASSERT(expressions.size() == 1);
106: 
107: 			auto result = make_unique<MacroFunction>(move(expressions[0]));
108: 			for (idx_t param_idx = 0; internal_macros[index].parameters[param_idx] != nullptr; param_idx++) {
109: 				result->parameters.push_back(
110: 				    make_unique<ColumnRefExpression>(internal_macros[index].parameters[param_idx]));
111: 			}
112: 
113: 			auto bind_info = make_unique<CreateMacroInfo>();
114: 			bind_info->schema = schema;
115: 			bind_info->name = internal_macros[index].name;
116: 			bind_info->temporary = true;
117: 			bind_info->internal = true;
118: 			bind_info->function = move(result);
119: 			return move(bind_info);
120: 		}
121: 	}
122: 	return nullptr;
123: }
124: 
125: DefaultFunctionGenerator::DefaultFunctionGenerator(Catalog &catalog, SchemaCatalogEntry *schema)
126:     : DefaultGenerator(catalog), schema(schema) {
127: }
128: 
129: unique_ptr<CatalogEntry> DefaultFunctionGenerator::CreateDefaultEntry(ClientContext &context,
130:                                                                       const string &entry_name) {
131: 	auto info = GetDefaultFunction(schema->name, entry_name);
132: 	if (info) {
133: 		return make_unique_base<CatalogEntry, MacroCatalogEntry>(&catalog, schema, (CreateMacroInfo *)info.get());
134: 	}
135: 	return nullptr;
136: }
137: 
138: vector<string> DefaultFunctionGenerator::GetDefaultEntries() {
139: 	vector<string> result;
140: 	for (idx_t index = 0; internal_macros[index].name != nullptr; index++) {
141: 		if (internal_macros[index].schema == schema->name) {
142: 			result.emplace_back(internal_macros[index].name);
143: 		}
144: 	}
145: 	return result;
146: }
147: 
148: } // namespace duckdb
[end of src/catalog/default/default_functions.cpp]
[start of src/execution/operator/projection/physical_unnest.cpp]
1: #include "duckdb/execution/operator/projection/physical_unnest.hpp"
2: 
3: #include "duckdb/common/vector_operations/vector_operations.hpp"
4: #include "duckdb/common/algorithm.hpp"
5: #include "duckdb/execution/expression_executor.hpp"
6: #include "duckdb/planner/expression/bound_reference_expression.hpp"
7: #include "duckdb/planner/expression/bound_unnest_expression.hpp"
8: 
9: namespace duckdb {
10: 
11: //! The operator state of the window
12: class UnnestOperatorState : public OperatorState {
13: public:
14: 	UnnestOperatorState() : parent_position(0), list_position(0), list_length(-1), first_fetch(true) {
15: 	}
16: 
17: 	idx_t parent_position;
18: 	idx_t list_position;
19: 	int64_t list_length;
20: 	bool first_fetch;
21: 
22: 	DataChunk list_data;
23: 	vector<VectorData> list_vector_data;
24: 	vector<VectorData> list_child_data;
25: };
26: 
27: // this implements a sorted window functions variant
28: PhysicalUnnest::PhysicalUnnest(vector<LogicalType> types, vector<unique_ptr<Expression>> select_list,
29:                                idx_t estimated_cardinality, PhysicalOperatorType type)
30:     : PhysicalOperator(type, move(types), estimated_cardinality), select_list(std::move(select_list)) {
31: 	D_ASSERT(!this->select_list.empty());
32: }
33: 
34: static void UnnestNull(idx_t start, idx_t end, Vector &result) {
35: 	if (result.GetType().InternalType() == PhysicalType::STRUCT) {
36: 		auto &children = StructVector::GetEntries(result);
37: 		for (auto &child : children) {
38: 			UnnestNull(start, end, *child);
39: 		}
40: 	}
41: 	auto &validity = FlatVector::Validity(result);
42: 	for (idx_t i = start; i < end; i++) {
43: 		validity.SetInvalid(i);
44: 	}
45: 	if (result.GetType().InternalType() == PhysicalType::STRUCT) {
46: 		auto &struct_children = StructVector::GetEntries(result);
47: 		for (auto &child : struct_children) {
48: 			UnnestNull(start, end, *child);
49: 		}
50: 	}
51: }
52: 
53: template <class T>
54: static void TemplatedUnnest(VectorData &vdata, idx_t start, idx_t end, Vector &result) {
55: 	auto source_data = (T *)vdata.data;
56: 	auto &source_mask = vdata.validity;
57: 	auto result_data = FlatVector::GetData<T>(result);
58: 	auto &result_mask = FlatVector::Validity(result);
59: 
60: 	for (idx_t i = start; i < end; i++) {
61: 		auto source_idx = vdata.sel->get_index(i);
62: 		auto target_idx = i - start;
63: 		if (source_mask.RowIsValid(source_idx)) {
64: 			result_data[target_idx] = source_data[source_idx];
65: 			result_mask.SetValid(target_idx);
66: 		} else {
67: 			result_mask.SetInvalid(target_idx);
68: 		}
69: 	}
70: }
71: 
72: static void UnnestValidity(VectorData &vdata, idx_t start, idx_t end, Vector &result) {
73: 	auto &source_mask = vdata.validity;
74: 	auto &result_mask = FlatVector::Validity(result);
75: 
76: 	for (idx_t i = start; i < end; i++) {
77: 		auto source_idx = vdata.sel->get_index(i);
78: 		auto target_idx = i - start;
79: 		result_mask.Set(target_idx, source_mask.RowIsValid(source_idx));
80: 	}
81: }
82: 
83: static void UnnestVector(VectorData &vdata, Vector &source, idx_t list_size, idx_t start, idx_t end, Vector &result) {
84: 	switch (result.GetType().InternalType()) {
85: 	case PhysicalType::BOOL:
86: 	case PhysicalType::INT8:
87: 		TemplatedUnnest<int8_t>(vdata, start, end, result);
88: 		break;
89: 	case PhysicalType::INT16:
90: 		TemplatedUnnest<int16_t>(vdata, start, end, result);
91: 		break;
92: 	case PhysicalType::INT32:
93: 		TemplatedUnnest<int32_t>(vdata, start, end, result);
94: 		break;
95: 	case PhysicalType::INT64:
96: 		TemplatedUnnest<int64_t>(vdata, start, end, result);
97: 		break;
98: 	case PhysicalType::INT128:
99: 		TemplatedUnnest<hugeint_t>(vdata, start, end, result);
100: 		break;
101: 	case PhysicalType::UINT8:
102: 		TemplatedUnnest<uint8_t>(vdata, start, end, result);
103: 		break;
104: 	case PhysicalType::UINT16:
105: 		TemplatedUnnest<uint16_t>(vdata, start, end, result);
106: 		break;
107: 	case PhysicalType::UINT32:
108: 		TemplatedUnnest<uint32_t>(vdata, start, end, result);
109: 		break;
110: 	case PhysicalType::UINT64:
111: 		TemplatedUnnest<uint64_t>(vdata, start, end, result);
112: 		break;
113: 	case PhysicalType::FLOAT:
114: 		TemplatedUnnest<float>(vdata, start, end, result);
115: 		break;
116: 	case PhysicalType::DOUBLE:
117: 		TemplatedUnnest<double>(vdata, start, end, result);
118: 		break;
119: 	case PhysicalType::INTERVAL:
120: 		TemplatedUnnest<interval_t>(vdata, start, end, result);
121: 		break;
122: 	case PhysicalType::VARCHAR:
123: 		TemplatedUnnest<string_t>(vdata, start, end, result);
124: 		break;
125: 	case PhysicalType::LIST: {
126: 		auto &target = ListVector::GetEntry(result);
127: 		target.Reference(ListVector::GetEntry(source));
128: 		ListVector::SetListSize(result, ListVector::GetListSize(source));
129: 		TemplatedUnnest<list_entry_t>(vdata, start, end, result);
130: 		break;
131: 	}
132: 	case PhysicalType::STRUCT: {
133: 		auto &source_entries = StructVector::GetEntries(source);
134: 		auto &target_entries = StructVector::GetEntries(result);
135: 		UnnestValidity(vdata, start, end, result);
136: 		for (idx_t i = 0; i < source_entries.size(); i++) {
137: 			VectorData sdata;
138: 			source_entries[i]->Orrify(list_size, sdata);
139: 			UnnestVector(sdata, *source_entries[i], list_size, start, end, *target_entries[i]);
140: 		}
141: 		break;
142: 	}
143: 	default:
144: 		throw InternalException("Unimplemented type for UNNEST");
145: 	}
146: }
147: 
148: unique_ptr<OperatorState> PhysicalUnnest::GetOperatorState(ClientContext &context) const {
149: 	return make_unique<UnnestOperatorState>();
150: }
151: 
152: OperatorResultType PhysicalUnnest::Execute(ExecutionContext &context, DataChunk &input, DataChunk &chunk,
153:                                            OperatorState &state_p) const {
154: 	auto &state = (UnnestOperatorState &)state_p;
155: 	do {
156: 		if (state.first_fetch) {
157: 			// get the list data to unnest
158: 			ExpressionExecutor executor;
159: 			vector<LogicalType> list_data_types;
160: 			for (auto &exp : select_list) {
161: 				D_ASSERT(exp->type == ExpressionType::BOUND_UNNEST);
162: 				auto bue = (BoundUnnestExpression *)exp.get();
163: 				list_data_types.push_back(bue->child->return_type);
164: 				executor.AddExpression(*bue->child.get());
165: 			}
166: 			state.list_data.Destroy();
167: 			state.list_data.Initialize(list_data_types);
168: 			executor.Execute(input, state.list_data);
169: 
170: 			// paranoia aplenty
171: 			state.list_data.Verify();
172: 			D_ASSERT(input.size() == state.list_data.size());
173: 			D_ASSERT(state.list_data.ColumnCount() == select_list.size());
174: 
175: 			// initialize VectorData object so the nullmask can accessed
176: 			state.list_vector_data.resize(state.list_data.ColumnCount());
177: 			state.list_child_data.resize(state.list_data.ColumnCount());
178: 			for (idx_t col_idx = 0; col_idx < state.list_data.ColumnCount(); col_idx++) {
179: 				auto &list_vector = state.list_data.data[col_idx];
180: 				list_vector.Orrify(state.list_data.size(), state.list_vector_data[col_idx]);
181: 
182: 				auto &child_vector = ListVector::GetEntry(list_vector);
183: 				auto list_size = ListVector::GetListSize(list_vector);
184: 				child_vector.Orrify(list_size, state.list_child_data[col_idx]);
185: 			}
186: 			state.first_fetch = false;
187: 		}
188: 		if (state.parent_position >= input.size()) {
189: 			// finished with this input chunk
190: 			state.parent_position = 0;
191: 			state.list_position = 0;
192: 			state.list_length = -1;
193: 			state.first_fetch = true;
194: 			return OperatorResultType::NEED_MORE_INPUT;
195: 		}
196: 
197: 		// need to figure out how many times we need to repeat for current row
198: 		if (state.list_length < 0) {
199: 			for (idx_t col_idx = 0; col_idx < state.list_data.ColumnCount(); col_idx++) {
200: 				auto &vdata = state.list_vector_data[col_idx];
201: 				auto current_idx = vdata.sel->get_index(state.parent_position);
202: 
203: 				int64_t list_length;
204: 				// deal with NULL values
205: 				if (!vdata.validity.RowIsValid(current_idx)) {
206: 					list_length = 0;
207: 				} else {
208: 					auto list_data = (list_entry_t *)vdata.data;
209: 					auto list_entry = list_data[current_idx];
210: 					list_length = (int64_t)list_entry.length;
211: 				}
212: 
213: 				if (list_length > state.list_length) {
214: 					state.list_length = list_length;
215: 				}
216: 			}
217: 		}
218: 
219: 		D_ASSERT(state.list_length >= 0);
220: 
221: 		auto this_chunk_len = MinValue<idx_t>(STANDARD_VECTOR_SIZE, state.list_length - state.list_position);
222: 
223: 		// first cols are from child, last n cols from unnest
224: 		chunk.SetCardinality(this_chunk_len);
225: 
226: 		for (idx_t col_idx = 0; col_idx < input.ColumnCount(); col_idx++) {
227: 			ConstantVector::Reference(chunk.data[col_idx], input.data[col_idx], state.parent_position, input.size());
228: 		}
229: 
230: 		for (idx_t col_idx = 0; col_idx < state.list_data.ColumnCount(); col_idx++) {
231: 			auto &result_vector = chunk.data[col_idx + input.ColumnCount()];
232: 
233: 			auto &vdata = state.list_vector_data[col_idx];
234: 			auto &child_data = state.list_child_data[col_idx];
235: 			auto current_idx = vdata.sel->get_index(state.parent_position);
236: 
237: 			auto list_data = (list_entry_t *)vdata.data;
238: 			auto list_entry = list_data[current_idx];
239: 
240: 			idx_t list_count;
241: 			if (state.list_position >= list_entry.length) {
242: 				list_count = 0;
243: 			} else {
244: 				list_count = MinValue<idx_t>(this_chunk_len, list_entry.length - state.list_position);
245: 			}
246: 
247: 			if (list_entry.length > state.list_position) {
248: 				if (!vdata.validity.RowIsValid(current_idx)) {
249: 					UnnestNull(0, list_count, result_vector);
250: 				} else {
251: 					auto &list_vector = state.list_data.data[col_idx];
252: 					auto &child_vector = ListVector::GetEntry(list_vector);
253: 					auto list_size = ListVector::GetListSize(list_vector);
254: 
255: 					auto base_offset = list_entry.offset + state.list_position;
256: 					UnnestVector(child_data, child_vector, list_size, base_offset, base_offset + list_count,
257: 					             result_vector);
258: 				}
259: 			}
260: 			UnnestNull(list_count, this_chunk_len, result_vector);
261: 		}
262: 
263: 		state.list_position += this_chunk_len;
264: 		if ((int64_t)state.list_position == state.list_length) {
265: 			state.parent_position++;
266: 			state.list_length = -1;
267: 			state.list_position = 0;
268: 		}
269: 
270: 		chunk.Verify();
271: 	} while (chunk.size() == 0);
272: 	return OperatorResultType::HAVE_MORE_OUTPUT;
273: }
274: 
275: } // namespace duckdb
[end of src/execution/operator/projection/physical_unnest.cpp]
[start of src/function/pragma/pragma_queries.cpp]
1: #include "duckdb/function/pragma/pragma_functions.hpp"
2: #include "duckdb/common/string_util.hpp"
3: #include "duckdb/common/file_system.hpp"
4: #include "duckdb/main/config.hpp"
5: 
6: namespace duckdb {
7: 
8: string PragmaTableInfo(ClientContext &context, const FunctionParameters &parameters) {
9: 	return StringUtil::Format("SELECT * FROM pragma_table_info('%s')", parameters.values[0].ToString());
10: }
11: 
12: string PragmaShowTables(ClientContext &context, const FunctionParameters &parameters) {
13: 	return "SELECT name FROM sqlite_master ORDER BY name";
14: }
15: 
16: string PragmaAllProfiling(ClientContext &context, const FunctionParameters &parameters) {
17: 	return "SELECT * FROM pragma_last_profiling_output() JOIN pragma_detailed_profiling_output() ON "
18: 	       "(pragma_last_profiling_output.operator_id);";
19: }
20: 
21: string PragmaDatabaseList(ClientContext &context, const FunctionParameters &parameters) {
22: 	return "SELECT * FROM pragma_database_list() ORDER BY 1";
23: }
24: 
25: string PragmaCollations(ClientContext &context, const FunctionParameters &parameters) {
26: 	return "SELECT * FROM pragma_collations() ORDER BY 1";
27: }
28: 
29: string PragmaFunctionsQuery(ClientContext &context, const FunctionParameters &parameters) {
30: 	return "SELECT * FROM pragma_functions() ORDER BY 1";
31: }
32: 
33: string PragmaShow(ClientContext &context, const FunctionParameters &parameters) {
34: 	// PRAGMA table_info but with some aliases
35: 	return StringUtil::Format(
36: 	    "SELECT name AS \"column_name\", type as \"column_type\", CASE WHEN \"notnull\" THEN 'NO' ELSE 'YES' "
37: 	    "END AS \"null\", NULL AS \"key\", dflt_value AS \"default\", NULL AS \"extra\" FROM pragma_table_info('%s')",
38: 	    parameters.values[0].ToString());
39: }
40: 
41: string PragmaVersion(ClientContext &context, const FunctionParameters &parameters) {
42: 	return "SELECT * FROM pragma_version()";
43: }
44: 
45: string PragmaImportDatabase(ClientContext &context, const FunctionParameters &parameters) {
46: 	auto &config = DBConfig::GetConfig(context);
47: 	if (!config.enable_external_access) {
48: 		throw PermissionException("Import is disabled through configuration");
49: 	}
50: 	auto &fs = FileSystem::GetFileSystem(context);
51: 	auto *opener = FileSystem::GetFileOpener(context);
52: 
53: 	string query;
54: 	// read the "shema.sql" and "load.sql" files
55: 	vector<string> files = {"schema.sql", "load.sql"};
56: 	for (auto &file : files) {
57: 		auto file_path = fs.JoinPath(parameters.values[0].ToString(), file);
58: 		auto handle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,
59: 		                          FileSystem::DEFAULT_COMPRESSION, opener);
60: 		auto fsize = fs.GetFileSize(*handle);
61: 		auto buffer = unique_ptr<char[]>(new char[fsize]);
62: 		fs.Read(*handle, buffer.get(), fsize);
63: 
64: 		query += string(buffer.get(), fsize);
65: 	}
66: 	return query;
67: }
68: 
69: string PragmaDatabaseSize(ClientContext &context, const FunctionParameters &parameters) {
70: 	return "SELECT * FROM pragma_database_size()";
71: }
72: 
73: string PragmaStorageInfo(ClientContext &context, const FunctionParameters &parameters) {
74: 	return StringUtil::Format("SELECT * FROM pragma_storage_info('%s')", parameters.values[0].ToString());
75: }
76: 
77: void PragmaQueries::RegisterFunction(BuiltinFunctions &set) {
78: 	set.AddFunction(PragmaFunction::PragmaCall("table_info", PragmaTableInfo, {LogicalType::VARCHAR}));
79: 	set.AddFunction(PragmaFunction::PragmaCall("storage_info", PragmaStorageInfo, {LogicalType::VARCHAR}));
80: 	set.AddFunction(PragmaFunction::PragmaStatement("show_tables", PragmaShowTables));
81: 	set.AddFunction(PragmaFunction::PragmaStatement("database_list", PragmaDatabaseList));
82: 	set.AddFunction(PragmaFunction::PragmaStatement("collations", PragmaCollations));
83: 	set.AddFunction(PragmaFunction::PragmaCall("show", PragmaShow, {LogicalType::VARCHAR}));
84: 	set.AddFunction(PragmaFunction::PragmaStatement("version", PragmaVersion));
85: 	set.AddFunction(PragmaFunction::PragmaStatement("database_size", PragmaDatabaseSize));
86: 	set.AddFunction(PragmaFunction::PragmaStatement("functions", PragmaFunctionsQuery));
87: 	set.AddFunction(PragmaFunction::PragmaCall("import_database", PragmaImportDatabase, {LogicalType::VARCHAR}));
88: 	set.AddFunction(PragmaFunction::PragmaStatement("all_profiling_output", PragmaAllProfiling));
89: }
90: 
91: } // namespace duckdb
[end of src/function/pragma/pragma_queries.cpp]
[start of src/function/scalar/list/CMakeLists.txt]
1: add_library_unity(
2:   duckdb_func_list
3:   OBJECT
4:   list_concat.cpp
5:   list_contains.cpp
6:   array_slice.cpp
7:   list_extract.cpp
8:   list_value.cpp
9:   range.cpp)
10: set(ALL_OBJECT_FILES
11:     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_func_list>
12:     PARENT_SCOPE)
[end of src/function/scalar/list/CMakeLists.txt]
[start of src/function/scalar/list/list_contains.cpp]
1: #include "duckdb/planner/expression/bound_function_expression.hpp"
2: #include "duckdb/function/scalar/nested_functions.hpp"
3: #include "duckdb/planner/expression_binder.hpp"
4: 
5: namespace duckdb {
6: 
7: template <class T>
8: static inline bool ValueCompare(const T &left, const T &right) {
9: 	return left == right;
10: }
11: 
12: template <>
13: inline bool ValueCompare(const string_t &left, const string_t &right) {
14: 	return StringComparisonOperators::EqualsOrNot<false>(left, right);
15: }
16: 
17: template <>
18: inline bool ValueCompare(const Value &left, const Value &right) {
19: 	return left == right;
20: }
21: 
22: template <class T>
23: static void TemplatedListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {
24: 	D_ASSERT(args.ColumnCount() == 2);
25: 	auto count = args.size();
26: 	Vector &list = args.data[0];
27: 	Vector &value_vector = args.data[1];
28: 
29: 	result.SetVectorType(VectorType::FLAT_VECTOR);
30: 	auto result_entries = FlatVector::GetData<bool>(result); // Create a vector of bool
31: 	auto &result_validity = FlatVector::Validity(result);
32: 
33: 	if (list.GetType().id() == LogicalTypeId::SQLNULL) {
34: 		result_validity.SetInvalid(0);
35: 		return;
36: 	}
37: 
38: 	auto list_size = ListVector::GetListSize(list);
39: 	auto &child_vector = ListVector::GetEntry(list);
40: 
41: 	VectorData child_data;
42: 	child_vector.Orrify(list_size, child_data);
43: 
44: 	VectorData list_data;
45: 	list.Orrify(count, list_data);
46: 	auto list_entries = (list_entry_t *)list_data.data;
47: 
48: 	VectorData value_data;
49: 	value_vector.Orrify(count, value_data);
50: 
51: 	for (idx_t i = 0; i < count; i++) {
52: 		auto list_index = list_data.sel->get_index(i);
53: 		auto value_index = value_data.sel->get_index(i);
54: 
55: 		if (!list_data.validity.RowIsValid(list_index) || !value_data.validity.RowIsValid(value_index)) {
56: 			result_validity.SetInvalid(i);
57: 			continue;
58: 		}
59: 
60: 		const auto &list_entry = list_entries[list_index];
61: 		auto source_idx = child_data.sel->get_index(list_entry.offset);
62: 		auto child_value = FlatVector::GetData<T>(child_vector);
63: 
64: 		auto values = FlatVector::GetData<T>(value_vector);
65: 		result_entries[list_index] = false;
66: 		for (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {
67: 			auto child_value_idx = source_idx + child_idx;
68: 
69: 			if (!child_data.validity.RowIsValid(child_value_idx)) {
70: 				continue;
71: 			}
72: 			if (ValueCompare<T>(child_value[child_value_idx], values[value_index])) {
73: 				result_entries[list_index] = true;
74: 				break; // Found value in list, no need to look further
75: 			}
76: 		}
77: 	}
78: }
79: 
80: static void NestedListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {
81: 	D_ASSERT(args.ColumnCount() == 2);
82: 	auto count = args.size();
83: 	Vector &list = args.data[0];
84: 	Vector &value_vector = args.data[1];
85: 
86: 	result.SetVectorType(VectorType::FLAT_VECTOR);
87: 	auto result_entries = FlatVector::GetData<bool>(result); // Create a vector of bool
88: 	auto &result_validity = FlatVector::Validity(result);
89: 
90: 	if (list.GetType().id() == LogicalTypeId::SQLNULL) {
91: 		result_validity.SetInvalid(0);
92: 		return;
93: 	}
94: 
95: 	auto list_size = ListVector::GetListSize(list);
96: 	auto &child_vector = ListVector::GetEntry(list);
97: 
98: 	VectorData child_data;
99: 	child_vector.Orrify(list_size, child_data);
100: 
101: 	VectorData list_data;
102: 	list.Orrify(count, list_data);
103: 	auto list_entries = (list_entry_t *)list_data.data;
104: 
105: 	VectorData value_data;
106: 	value_vector.Orrify(count, value_data);
107: 
108: 	for (idx_t i = 0; i < count; i++) {
109: 		auto list_index = list_data.sel->get_index(i);
110: 		auto value_index = value_data.sel->get_index(i);
111: 
112: 		if (!list_data.validity.RowIsValid(list_index) || !value_data.validity.RowIsValid(value_index)) {
113: 			result_validity.SetInvalid(i);
114: 			continue;
115: 		}
116: 
117: 		const auto &list_entry = list_entries[list_index];
118: 		auto source_idx = child_data.sel->get_index(list_entry.offset);
119: 
120: 		result_entries[list_index] = false;
121: 		for (idx_t child_idx = 0; child_idx < list_entry.length; child_idx++) {
122: 			auto child_value_idx = source_idx + child_idx;
123: 			if (!child_data.validity.RowIsValid(child_value_idx)) {
124: 				continue;
125: 			}
126: 			if (ValueCompare<Value>(child_vector.GetValue(child_value_idx), value_vector.GetValue(value_index))) {
127: 				result_entries[list_index] = true;
128: 				break; // Found value in list, no need to look further
129: 			}
130: 		}
131: 	}
132: }
133: 
134: static void ListContainsFunction(DataChunk &args, ExpressionState &state, Vector &result) {
135: 	switch (args.data[1].GetType().InternalType()) {
136: 	case PhysicalType::BOOL:
137: 	case PhysicalType::INT8:
138: 		TemplatedListContainsFunction<int8_t>(args, state, result);
139: 		break;
140: 	case PhysicalType::INT16:
141: 		TemplatedListContainsFunction<int16_t>(args, state, result);
142: 		break;
143: 	case PhysicalType::INT32:
144: 		TemplatedListContainsFunction<int32_t>(args, state, result);
145: 		break;
146: 	case PhysicalType::INT64:
147: 		TemplatedListContainsFunction<int64_t>(args, state, result);
148: 		break;
149: 	case PhysicalType::INT128:
150: 		TemplatedListContainsFunction<hugeint_t>(args, state, result);
151: 		break;
152: 	case PhysicalType::UINT8:
153: 		TemplatedListContainsFunction<uint8_t>(args, state, result);
154: 		break;
155: 	case PhysicalType::UINT16:
156: 		TemplatedListContainsFunction<uint16_t>(args, state, result);
157: 		break;
158: 	case PhysicalType::UINT32:
159: 		TemplatedListContainsFunction<uint32_t>(args, state, result);
160: 		break;
161: 	case PhysicalType::UINT64:
162: 		TemplatedListContainsFunction<uint64_t>(args, state, result);
163: 		break;
164: 	case PhysicalType::FLOAT:
165: 		TemplatedListContainsFunction<float>(args, state, result);
166: 		break;
167: 	case PhysicalType::DOUBLE:
168: 		TemplatedListContainsFunction<double>(args, state, result);
169: 		break;
170: 	case PhysicalType::VARCHAR:
171: 		TemplatedListContainsFunction<string_t>(args, state, result);
172: 		break;
173: 	case PhysicalType::MAP:
174: 	case PhysicalType::STRUCT:
175: 	case PhysicalType::LIST:
176: 		NestedListContainsFunction(args, state, result);
177: 		break;
178: 	default:
179: 		throw NotImplementedException("This function has not been implemented for this type");
180: 	}
181: }
182: 
183: static unique_ptr<FunctionData> ListContainsBind(ClientContext &context, ScalarFunction &bound_function,
184:                                                  vector<unique_ptr<Expression>> &arguments) {
185: 	D_ASSERT(bound_function.arguments.size() == 2);
186: 
187: 	const auto &list = arguments[0]->return_type; // change to list
188: 	const auto &value = arguments[1]->return_type;
189: 	if (list.id() == LogicalTypeId::SQLNULL && value.id() == LogicalTypeId::SQLNULL) {
190: 		bound_function.arguments[0] = LogicalType::SQLNULL;
191: 		bound_function.arguments[1] = LogicalType::SQLNULL;
192: 		bound_function.return_type = LogicalType::SQLNULL;
193: 	} else if (list.id() == LogicalTypeId::SQLNULL || value.id() == LogicalTypeId::SQLNULL) {
194: 		// In case either the list or the value is NULL, return NULL
195: 		// Similar to behaviour of prestoDB
196: 		bound_function.arguments[0] = list;
197: 		bound_function.arguments[1] = value;
198: 		bound_function.return_type = LogicalTypeId::SQLNULL;
199: 	} else {
200: 		auto const &child_type = ListType::GetChildType(arguments[0]->return_type);
201: 		auto max_child_type = LogicalType::MaxLogicalType(child_type, value);
202: 		ExpressionBinder::ResolveParameterType(max_child_type);
203: 		auto list_type = LogicalType::LIST(max_child_type);
204: 
205: 		bound_function.arguments[0] = list_type;
206: 		bound_function.arguments[1] = value == max_child_type ? value : max_child_type;
207: 		bound_function.return_type = LogicalType::BOOLEAN;
208: 	}
209: 	return make_unique<VariableReturnBindData>(bound_function.return_type);
210: }
211: 
212: ScalarFunction ListContainsFun::GetFunction() {
213: 	return ScalarFunction({LogicalType::LIST(LogicalType::ANY), LogicalType::ANY}, // argument list
214: 	                      LogicalType::BOOLEAN,                                    // return type
215: 	                      ListContainsFunction, false, ListContainsBind, nullptr);
216: }
217: 
218: void ListContainsFun::RegisterFunction(BuiltinFunctions &set) {
219: 	set.AddFunction({"list_contains", "array_contains", "list_has", "array_has"}, GetFunction());
220: }
221: } // namespace duckdb
[end of src/function/scalar/list/list_contains.cpp]
[start of src/function/scalar/nested_functions.cpp]
1: #include "duckdb/function/scalar/nested_functions.hpp"
2: 
3: namespace duckdb {
4: 
5: void BuiltinFunctions::RegisterNestedFunctions() {
6: 	Register<ArraySliceFun>();
7: 	Register<StructPackFun>();
8: 	Register<StructExtractFun>();
9: 	Register<ListConcatFun>();
10: 	Register<ListContainsFun>();
11: 	Register<ListValueFun>();
12: 	Register<ListExtractFun>();
13: 	Register<ListRangeFun>();
14: 	Register<MapFun>();
15: 	Register<MapExtractFun>();
16: 	Register<CardinalityFun>();
17: }
18: 
19: } // namespace duckdb
[end of src/function/scalar/nested_functions.cpp]
[start of src/function/table/system/pragma_database_size.cpp]
1: #include "duckdb/function/table/system_functions.hpp"
2: 
3: #include "duckdb/storage/storage_manager.hpp"
4: #include "duckdb/storage/block_manager.hpp"
5: #include "duckdb/storage/storage_info.hpp"
6: #include "duckdb/common/to_string.hpp"
7: #include "duckdb/common/string_util.hpp"
8: 
9: namespace duckdb {
10: 
11: struct PragmaDatabaseSizeData : public FunctionOperatorData {
12: 	PragmaDatabaseSizeData() : finished(false) {
13: 	}
14: 
15: 	bool finished;
16: };
17: 
18: static unique_ptr<FunctionData> PragmaDatabaseSizeBind(ClientContext &context, vector<Value> &inputs,
19:                                                        named_parameter_map_t &named_parameters,
20:                                                        vector<LogicalType> &input_table_types,
21:                                                        vector<string> &input_table_names,
22:                                                        vector<LogicalType> &return_types, vector<string> &names) {
23: 	names.emplace_back("database_size");
24: 	return_types.emplace_back(LogicalType::VARCHAR);
25: 
26: 	names.emplace_back("block_size");
27: 	return_types.emplace_back(LogicalType::BIGINT);
28: 
29: 	names.emplace_back("total_blocks");
30: 	return_types.emplace_back(LogicalType::BIGINT);
31: 
32: 	names.emplace_back("used_blocks");
33: 	return_types.emplace_back(LogicalType::BIGINT);
34: 
35: 	names.emplace_back("free_blocks");
36: 	return_types.emplace_back(LogicalType::BIGINT);
37: 
38: 	names.emplace_back("wal_size");
39: 	return_types.emplace_back(LogicalType::VARCHAR);
40: 
41: 	names.emplace_back("memory_usage");
42: 	return_types.emplace_back(LogicalType::VARCHAR);
43: 
44: 	names.emplace_back("memory_limit");
45: 	return_types.emplace_back(LogicalType::VARCHAR);
46: 
47: 	return nullptr;
48: }
49: 
50: unique_ptr<FunctionOperatorData> PragmaDatabaseSizeInit(ClientContext &context, const FunctionData *bind_data,
51:                                                         const vector<column_t> &column_ids,
52:                                                         TableFilterCollection *filters) {
53: 	return make_unique<PragmaDatabaseSizeData>();
54: }
55: 
56: void PragmaDatabaseSizeFunction(ClientContext &context, const FunctionData *bind_data,
57:                                 FunctionOperatorData *operator_state, DataChunk *input, DataChunk &output) {
58: 	auto &data = (PragmaDatabaseSizeData &)*operator_state;
59: 	if (data.finished) {
60: 		return;
61: 	}
62: 	auto &storage = StorageManager::GetStorageManager(context);
63: 	auto &block_manager = BlockManager::GetBlockManager(context);
64: 	auto &buffer_manager = BufferManager::GetBufferManager(context);
65: 
66: 	output.SetCardinality(1);
67: 	if (!storage.InMemory()) {
68: 		auto total_blocks = block_manager.TotalBlocks();
69: 		auto block_size = Storage::BLOCK_ALLOC_SIZE;
70: 		auto free_blocks = block_manager.FreeBlocks();
71: 		auto used_blocks = total_blocks - free_blocks;
72: 		auto bytes = (total_blocks * block_size);
73: 		auto wal_size = storage.GetWriteAheadLog()->GetWALSize();
74: 		output.data[0].SetValue(0, Value(StringUtil::BytesToHumanReadableString(bytes)));
75: 		output.data[1].SetValue(0, Value::BIGINT(block_size));
76: 		output.data[2].SetValue(0, Value::BIGINT(total_blocks));
77: 		output.data[3].SetValue(0, Value::BIGINT(used_blocks));
78: 		output.data[4].SetValue(0, Value::BIGINT(free_blocks));
79: 		output.data[5].SetValue(0, Value(StringUtil::BytesToHumanReadableString(wal_size)));
80: 	} else {
81: 		output.data[0].SetValue(0, Value());
82: 		output.data[1].SetValue(0, Value());
83: 		output.data[2].SetValue(0, Value());
84: 		output.data[3].SetValue(0, Value());
85: 		output.data[4].SetValue(0, Value());
86: 		output.data[5].SetValue(0, Value());
87: 	}
88: 	output.data[6].SetValue(0, Value(StringUtil::BytesToHumanReadableString(buffer_manager.GetUsedMemory())));
89: 	auto max_memory = buffer_manager.GetMaxMemory();
90: 	output.data[7].SetValue(0, max_memory == (idx_t)-1 ? Value("Unlimited")
91: 	                                                   : Value(StringUtil::BytesToHumanReadableString(max_memory)));
92: 
93: 	data.finished = true;
94: }
95: 
96: void PragmaDatabaseSize::RegisterFunction(BuiltinFunctions &set) {
97: 	set.AddFunction(TableFunction("pragma_database_size", {}, PragmaDatabaseSizeFunction, PragmaDatabaseSizeBind,
98: 	                              PragmaDatabaseSizeInit));
99: }
100: 
101: } // namespace duckdb
[end of src/function/table/system/pragma_database_size.cpp]
[start of src/include/duckdb/function/scalar/nested_functions.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/function/scalar/nested_functions.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/function/function_set.hpp"
12: #include "duckdb/function/scalar_function.hpp"
13: 
14: namespace duckdb {
15: 
16: struct VariableReturnBindData : public FunctionData {
17: 	LogicalType stype;
18: 
19: 	explicit VariableReturnBindData(const LogicalType &stype_p) : stype(stype_p) {
20: 	}
21: 
22: 	unique_ptr<FunctionData> Copy() override {
23: 		return make_unique<VariableReturnBindData>(stype);
24: 	}
25: };
26: 
27: struct ArraySliceFun {
28: 	static void RegisterFunction(BuiltinFunctions &set);
29: };
30: 
31: struct StructPackFun {
32: 	static void RegisterFunction(BuiltinFunctions &set);
33: };
34: 
35: struct ListValueFun {
36: 	static void RegisterFunction(BuiltinFunctions &set);
37: };
38: 
39: struct ListRangeFun {
40: 	static void RegisterFunction(BuiltinFunctions &set);
41: };
42: 
43: struct MapFun {
44: 	static void RegisterFunction(BuiltinFunctions &set);
45: };
46: 
47: struct MapExtractFun {
48: 	static void RegisterFunction(BuiltinFunctions &set);
49: };
50: 
51: struct ListExtractFun {
52: 	static void RegisterFunction(BuiltinFunctions &set);
53: };
54: 
55: struct ListConcatFun {
56: 	static ScalarFunction GetFunction();
57: 	static void RegisterFunction(BuiltinFunctions &set);
58: };
59: 
60: struct ListContainsFun {
61: 	static ScalarFunction GetFunction();
62: 	static void RegisterFunction(BuiltinFunctions &set);
63: };
64: 
65: struct CardinalityFun {
66: 	static void RegisterFunction(BuiltinFunctions &set);
67: };
68: 
69: struct StructExtractFun {
70: 	static ScalarFunction GetFunction();
71: 	static void RegisterFunction(BuiltinFunctions &set);
72: };
73: 
74: } // namespace duckdb
[end of src/include/duckdb/function/scalar/nested_functions.hpp]
[start of src/include/duckdb/main/client_context.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/client_context.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/catalog/catalog_entry/schema_catalog_entry.hpp"
12: #include "duckdb/catalog/catalog_set.hpp"
13: #include "duckdb/common/enums/pending_execution_result.hpp"
14: #include "duckdb/common/deque.hpp"
15: #include "duckdb/common/pair.hpp"
16: #include "duckdb/common/progress_bar.hpp"
17: #include "duckdb/common/unordered_set.hpp"
18: #include "duckdb/common/winapi.hpp"
19: #include "duckdb/main/prepared_statement.hpp"
20: #include "duckdb/main/stream_query_result.hpp"
21: #include "duckdb/main/table_description.hpp"
22: #include "duckdb/transaction/transaction_context.hpp"
23: #include "duckdb/main/pending_query_result.hpp"
24: #include <random>
25: #include "duckdb/common/atomic.hpp"
26: #include "duckdb/main/client_config.hpp"
27: 
28: namespace duckdb {
29: class Appender;
30: class Catalog;
31: class CatalogSearchPath;
32: class ChunkCollection;
33: class DatabaseInstance;
34: class FileOpener;
35: class LogicalOperator;
36: class PreparedStatementData;
37: class Relation;
38: class BufferedFileWriter;
39: class QueryProfiler;
40: class QueryProfilerHistory;
41: class ClientContextLock;
42: struct CreateScalarFunctionInfo;
43: class ScalarFunctionCatalogEntry;
44: struct ActiveQueryContext;
45: struct ParserOptions;
46: 
47: //! The ClientContext holds information relevant to the current client session
48: //! during execution
49: class ClientContext : public std::enable_shared_from_this<ClientContext> {
50: 	friend class PendingQueryResult;
51: 	friend class StreamQueryResult;
52: 	friend class TransactionManager;
53: 
54: public:
55: 	DUCKDB_API explicit ClientContext(shared_ptr<DatabaseInstance> db);
56: 	DUCKDB_API ~ClientContext();
57: 
58: 	//! Query profiler
59: 	shared_ptr<QueryProfiler> profiler;
60: 	//! QueryProfiler History
61: 	unique_ptr<QueryProfilerHistory> query_profiler_history;
62: 	//! The database that this client is connected to
63: 	shared_ptr<DatabaseInstance> db;
64: 	//! Data for the currently running transaction
65: 	TransactionContext transaction;
66: 	//! Whether or not the query is interrupted
67: 	atomic<bool> interrupted;
68: 
69: 	unique_ptr<SchemaCatalogEntry> temporary_objects;
70: 	unordered_map<string, shared_ptr<PreparedStatementData>> prepared_statements;
71: 
72: 	//! The writer used to log queries (if logging is enabled)
73: 	unique_ptr<BufferedFileWriter> log_query_writer;
74: 	//! The random generator used by random(). Its seed value can be set by setseed().
75: 	std::mt19937 random_engine;
76: 
77: 	const unique_ptr<CatalogSearchPath> catalog_search_path;
78: 
79: 	unique_ptr<FileOpener> file_opener;
80: 
81: 	//! The client configuration
82: 	ClientConfig config;
83: 
84: public:
85: 	DUCKDB_API Transaction &ActiveTransaction() {
86: 		return transaction.ActiveTransaction();
87: 	}
88: 
89: 	//! Interrupt execution of a query
90: 	DUCKDB_API void Interrupt();
91: 	//! Enable query profiling
92: 	DUCKDB_API void EnableProfiling();
93: 	//! Disable query profiling
94: 	DUCKDB_API void DisableProfiling();
95: 
96: 	//! Issue a query, returning a QueryResult. The QueryResult can be either a StreamQueryResult or a
97: 	//! MaterializedQueryResult. The StreamQueryResult will only be returned in the case of a successful SELECT
98: 	//! statement.
99: 	DUCKDB_API unique_ptr<QueryResult> Query(const string &query, bool allow_stream_result);
100: 	DUCKDB_API unique_ptr<QueryResult> Query(unique_ptr<SQLStatement> statement, bool allow_stream_result);
101: 
102: 	//! Issues a query to the database and returns a Pending Query Result. Note that "query" may only contain
103: 	//! a single statement.
104: 	DUCKDB_API unique_ptr<PendingQueryResult> PendingQuery(const string &query);
105: 	//! Issues a query to the database and returns a Pending Query Result
106: 	DUCKDB_API unique_ptr<PendingQueryResult> PendingQuery(unique_ptr<SQLStatement> statement);
107: 
108: 	//! Destroy the client context
109: 	DUCKDB_API void Destroy();
110: 
111: 	//! Get the table info of a specific table, or nullptr if it cannot be found
112: 	DUCKDB_API unique_ptr<TableDescription> TableInfo(const string &schema_name, const string &table_name);
113: 	//! Appends a DataChunk to the specified table. Returns whether or not the append was successful.
114: 	DUCKDB_API void Append(TableDescription &description, ChunkCollection &collection);
115: 	//! Try to bind a relation in the current client context; either throws an exception or fills the result_columns
116: 	//! list with the set of returned columns
117: 	DUCKDB_API void TryBindRelation(Relation &relation, vector<ColumnDefinition> &result_columns);
118: 
119: 	//! Execute a relation
120: 	DUCKDB_API unique_ptr<QueryResult> Execute(const shared_ptr<Relation> &relation);
121: 
122: 	//! Prepare a query
123: 	DUCKDB_API unique_ptr<PreparedStatement> Prepare(const string &query);
124: 	//! Directly prepare a SQL statement
125: 	DUCKDB_API unique_ptr<PreparedStatement> Prepare(unique_ptr<SQLStatement> statement);
126: 
127: 	//! Create a pending query result from a prepared statement with the given name and set of parameters
128: 	//! It is possible that the prepared statement will be re-bound. This will generally happen if the catalog is
129: 	//! modified in between the prepared statement being bound and the prepared statement being run.
130: 	DUCKDB_API unique_ptr<PendingQueryResult>
131: 	PendingQuery(const string &query, shared_ptr<PreparedStatementData> &prepared, vector<Value> &values);
132: 
133: 	//! Execute a prepared statement with the given name and set of parameters
134: 	//! It is possible that the prepared statement will be re-bound. This will generally happen if the catalog is
135: 	//! modified in between the prepared statement being bound and the prepared statement being run.
136: 	DUCKDB_API unique_ptr<QueryResult> Execute(const string &query, shared_ptr<PreparedStatementData> &prepared,
137: 	                                           vector<Value> &values, bool allow_stream_result = true);
138: 
139: 	//! Gets current percentage of the query's progress, returns 0 in case the progress bar is disabled.
140: 	DUCKDB_API double GetProgress();
141: 
142: 	//! Register function in the temporary schema
143: 	DUCKDB_API void RegisterFunction(CreateFunctionInfo *info);
144: 
145: 	//! Parse statements from a query
146: 	DUCKDB_API vector<unique_ptr<SQLStatement>> ParseStatements(const string &query);
147: 
148: 	//! Extract the logical plan of a query
149: 	DUCKDB_API unique_ptr<LogicalOperator> ExtractPlan(const string &query);
150: 	DUCKDB_API void HandlePragmaStatements(vector<unique_ptr<SQLStatement>> &statements);
151: 
152: 	//! Runs a function with a valid transaction context, potentially starting a transaction if the context is in auto
153: 	//! commit mode.
154: 	DUCKDB_API void RunFunctionInTransaction(const std::function<void(void)> &fun,
155: 	                                         bool requires_valid_transaction = true);
156: 	//! Same as RunFunctionInTransaction, but does not obtain a lock on the client context or check for validation
157: 	DUCKDB_API void RunFunctionInTransactionInternal(ClientContextLock &lock, const std::function<void(void)> &fun,
158: 	                                                 bool requires_valid_transaction = true);
159: 
160: 	//! Equivalent to CURRENT_SETTING(key) SQL function.
161: 	DUCKDB_API bool TryGetCurrentSetting(const std::string &key, Value &result);
162: 
163: 	//! Returns the parser options for this client context
164: 	DUCKDB_API ParserOptions GetParserOptions();
165: 
166: 	DUCKDB_API unique_ptr<DataChunk> Fetch(ClientContextLock &lock, StreamQueryResult &result);
167: 
168: 	//! Whether or not the given result object (streaming query result or pending query result) is active
169: 	DUCKDB_API bool IsActiveResult(ClientContextLock &lock, BaseQueryResult *result);
170: 
171: 	//! Returns the current executor
172: 	Executor &GetExecutor();
173: 
174: 	//! Returns the current query string (if any)
175: 	const string &GetCurrentQuery();
176: 
177: 	//! Fetch a list of table names that are required for a given query
178: 	DUCKDB_API unordered_set<string> GetTableNames(const string &query);
179: 
180: private:
181: 	//! Parse statements and resolve pragmas from a query
182: 	bool ParseStatements(ClientContextLock &lock, const string &query, vector<unique_ptr<SQLStatement>> &result,
183: 	                     string &error);
184: 	//! Issues a query to the database and returns a Pending Query Result
185: 	unique_ptr<PendingQueryResult> PendingQueryInternal(ClientContextLock &lock, unique_ptr<SQLStatement> statement,
186: 	                                                    bool verify = true);
187: 	unique_ptr<QueryResult> ExecutePendingQueryInternal(ClientContextLock &lock, PendingQueryResult &query,
188: 	                                                    bool allow_stream_result);
189: 
190: 	//! Parse statements from a query
191: 	vector<unique_ptr<SQLStatement>> ParseStatementsInternal(ClientContextLock &lock, const string &query);
192: 	//! Perform aggressive query verification of a SELECT statement. Only called when query_verification_enabled is
193: 	//! true.
194: 	string VerifyQuery(ClientContextLock &lock, const string &query, unique_ptr<SQLStatement> statement);
195: 
196: 	void InitialCleanup(ClientContextLock &lock);
197: 	//! Internal clean up, does not lock. Caller must hold the context_lock.
198: 	void CleanupInternal(ClientContextLock &lock, BaseQueryResult *result = nullptr,
199: 	                     bool invalidate_transaction = false);
200: 	string FinalizeQuery(ClientContextLock &lock, bool success);
201: 	unique_ptr<PendingQueryResult> PendingStatementOrPreparedStatement(ClientContextLock &lock, const string &query,
202: 	                                                                   unique_ptr<SQLStatement> statement,
203: 	                                                                   shared_ptr<PreparedStatementData> &prepared,
204: 	                                                                   vector<Value> *values);
205: 	unique_ptr<PendingQueryResult> PendingPreparedStatement(ClientContextLock &lock,
206: 	                                                        shared_ptr<PreparedStatementData> statement_p,
207: 	                                                        vector<Value> bound_values);
208: 
209: 	//! Internally prepare a SQL statement. Caller must hold the context_lock.
210: 	shared_ptr<PreparedStatementData> CreatePreparedStatement(ClientContextLock &lock, const string &query,
211: 	                                                          unique_ptr<SQLStatement> statement);
212: 	unique_ptr<PendingQueryResult> PendingStatementInternal(ClientContextLock &lock, const string &query,
213: 	                                                        unique_ptr<SQLStatement> statement);
214: 	unique_ptr<QueryResult> RunStatementInternal(ClientContextLock &lock, const string &query,
215: 	                                             unique_ptr<SQLStatement> statement, bool allow_stream_result,
216: 	                                             bool verify = true);
217: 	unique_ptr<PreparedStatement> PrepareInternal(ClientContextLock &lock, unique_ptr<SQLStatement> statement);
218: 	void LogQueryInternal(ClientContextLock &lock, const string &query);
219: 
220: 	unique_ptr<QueryResult> FetchResultInternal(ClientContextLock &lock, PendingQueryResult &pending,
221: 	                                            bool allow_stream_result);
222: 	unique_ptr<DataChunk> FetchInternal(ClientContextLock &lock, Executor &executor, BaseQueryResult &result);
223: 
224: 	unique_ptr<ClientContextLock> LockContext();
225: 
226: 	bool UpdateFunctionInfoFromEntry(ScalarFunctionCatalogEntry *existing_function, CreateScalarFunctionInfo *new_info);
227: 
228: 	void BeginTransactionInternal(ClientContextLock &lock, bool requires_valid_transaction);
229: 	void BeginQueryInternal(ClientContextLock &lock, const string &query);
230: 	string EndQueryInternal(ClientContextLock &lock, bool success, bool invalidate_transaction);
231: 
232: 	PendingExecutionResult ExecuteTaskInternal(ClientContextLock &lock, PendingQueryResult &result);
233: 
234: 	unique_ptr<PendingQueryResult>
235: 	PendingStatementOrPreparedStatementInternal(ClientContextLock &lock, const string &query,
236: 	                                            unique_ptr<SQLStatement> statement,
237: 	                                            shared_ptr<PreparedStatementData> &prepared, vector<Value> *values);
238: 
239: 	unique_ptr<PendingQueryResult> PendingQueryPreparedInternal(ClientContextLock &lock, const string &query,
240: 	                                                            shared_ptr<PreparedStatementData> &prepared,
241: 	                                                            vector<Value> &values);
242: 
243: private:
244: 	//! Lock on using the ClientContext in parallel
245: 	mutex context_lock;
246: 	//! The currently active query context
247: 	unique_ptr<ActiveQueryContext> active_query;
248: 	//! The current query progress
249: 	atomic<double> query_progress;
250: };
251: 
252: class ClientContextLock {
253: public:
254: 	explicit ClientContextLock(mutex &context_lock) : client_guard(context_lock) {
255: 	}
256: 
257: 	~ClientContextLock() {
258: 	}
259: 
260: private:
261: 	lock_guard<mutex> client_guard;
262: };
263: 
264: } // namespace duckdb
[end of src/include/duckdb/main/client_context.hpp]
[start of src/include/duckdb/main/connection.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/connection.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/enums/profiler_format.hpp"
12: #include "duckdb/common/serializer/buffered_file_writer.hpp"
13: #include "duckdb/common/winapi.hpp"
14: #include "duckdb/function/udf_function.hpp"
15: #include "duckdb/main/materialized_query_result.hpp"
16: #include "duckdb/main/pending_query_result.hpp"
17: #include "duckdb/main/prepared_statement.hpp"
18: #include "duckdb/main/query_result.hpp"
19: #include "duckdb/main/relation.hpp"
20: #include "duckdb/main/stream_query_result.hpp"
21: #include "duckdb/main/table_description.hpp"
22: #include "duckdb/parser/sql_statement.hpp"
23: 
24: namespace duckdb {
25: 
26: class ChunkCollection;
27: class ClientContext;
28: class DatabaseInstance;
29: class DuckDB;
30: class LogicalOperator;
31: class SelectStatement;
32: 
33: typedef void (*warning_callback)(std::string);
34: 
35: //! A connection to a database. This represents a (client) connection that can
36: //! be used to query the database.
37: class Connection {
38: public:
39: 	DUCKDB_API explicit Connection(DuckDB &database);
40: 	DUCKDB_API explicit Connection(DatabaseInstance &database);
41: 
42: 	shared_ptr<ClientContext> context;
43: 	warning_callback warning_cb;
44: 
45: public:
46: 	//! Returns query profiling information for the current query
47: 	DUCKDB_API string GetProfilingInformation(ProfilerPrintFormat format = ProfilerPrintFormat::QUERY_TREE);
48: 
49: 	//! Interrupt execution of the current query
50: 	DUCKDB_API void Interrupt();
51: 
52: 	//! Enable query profiling
53: 	DUCKDB_API void EnableProfiling();
54: 	//! Disable query profiling
55: 	DUCKDB_API void DisableProfiling();
56: 
57: 	DUCKDB_API void SetWarningCallback(warning_callback);
58: 
59: 	//! Enable aggressive verification/testing of queries, should only be used in testing
60: 	DUCKDB_API void EnableQueryVerification();
61: 	DUCKDB_API void DisableQueryVerification();
62: 	//! Force parallel execution, even for smaller tables. Should only be used in testing.
63: 	DUCKDB_API void ForceParallelism();
64: 
65: 	//! Issues a query to the database and returns a QueryResult. This result can be either a StreamQueryResult or a
66: 	//! MaterializedQueryResult. The result can be stepped through with calls to Fetch(). Note that there can only be
67: 	//! one active StreamQueryResult per Connection object. Calling SendQuery() will invalidate any previously existing
68: 	//! StreamQueryResult.
69: 	DUCKDB_API unique_ptr<QueryResult> SendQuery(const string &query);
70: 	//! Issues a query to the database and materializes the result (if necessary). Always returns a
71: 	//! MaterializedQueryResult.
72: 	DUCKDB_API unique_ptr<MaterializedQueryResult> Query(const string &query);
73: 	//! Issues a query to the database and materializes the result (if necessary). Always returns a
74: 	//! MaterializedQueryResult.
75: 	DUCKDB_API unique_ptr<MaterializedQueryResult> Query(unique_ptr<SQLStatement> statement);
76: 	// prepared statements
77: 	template <typename... Args>
78: 	unique_ptr<QueryResult> Query(const string &query, Args... args) {
79: 		vector<Value> values;
80: 		return QueryParamsRecursive(query, values, args...);
81: 	}
82: 
83: 	//! Issues a query to the database and returns a Pending Query Result. Note that "query" may only contain
84: 	//! a single statement.
85: 	DUCKDB_API unique_ptr<PendingQueryResult> PendingQuery(const string &query);
86: 	//! Issues a query to the database and returns a Pending Query Result
87: 	DUCKDB_API unique_ptr<PendingQueryResult> PendingQuery(unique_ptr<SQLStatement> statement);
88: 
89: 	//! Prepare the specified query, returning a prepared statement object
90: 	DUCKDB_API unique_ptr<PreparedStatement> Prepare(const string &query);
91: 	//! Prepare the specified statement, returning a prepared statement object
92: 	DUCKDB_API unique_ptr<PreparedStatement> Prepare(unique_ptr<SQLStatement> statement);
93: 
94: 	//! Get the table info of a specific table (in the default schema), or nullptr if it cannot be found
95: 	DUCKDB_API unique_ptr<TableDescription> TableInfo(const string &table_name);
96: 	//! Get the table info of a specific table, or nullptr if it cannot be found
97: 	DUCKDB_API unique_ptr<TableDescription> TableInfo(const string &schema_name, const string &table_name);
98: 
99: 	//! Extract a set of SQL statements from a specific query
100: 	DUCKDB_API vector<unique_ptr<SQLStatement>> ExtractStatements(const string &query);
101: 	//! Extract the logical plan that corresponds to a query
102: 	DUCKDB_API unique_ptr<LogicalOperator> ExtractPlan(const string &query);
103: 
104: 	//! Appends a DataChunk to the specified table
105: 	DUCKDB_API void Append(TableDescription &description, DataChunk &chunk);
106: 	//! Appends a ChunkCollection to the specified table
107: 	DUCKDB_API void Append(TableDescription &description, ChunkCollection &collection);
108: 
109: 	//! Returns a relation that produces a table from this connection
110: 	DUCKDB_API shared_ptr<Relation> Table(const string &tname);
111: 	DUCKDB_API shared_ptr<Relation> Table(const string &schema_name, const string &table_name);
112: 	//! Returns a relation that produces a view from this connection
113: 	DUCKDB_API shared_ptr<Relation> View(const string &tname);
114: 	DUCKDB_API shared_ptr<Relation> View(const string &schema_name, const string &table_name);
115: 	//! Returns a relation that calls a specified table function
116: 	DUCKDB_API shared_ptr<Relation> TableFunction(const string &tname);
117: 	DUCKDB_API shared_ptr<Relation> TableFunction(const string &tname, const vector<Value> &values,
118: 	                                              const named_parameter_map_t &named_parameters);
119: 	DUCKDB_API shared_ptr<Relation> TableFunction(const string &tname, const vector<Value> &values);
120: 	//! Returns a relation that produces values
121: 	DUCKDB_API shared_ptr<Relation> Values(const vector<vector<Value>> &values);
122: 	DUCKDB_API shared_ptr<Relation> Values(const vector<vector<Value>> &values, const vector<string> &column_names,
123: 	                                       const string &alias = "values");
124: 	DUCKDB_API shared_ptr<Relation> Values(const string &values);
125: 	DUCKDB_API shared_ptr<Relation> Values(const string &values, const vector<string> &column_names,
126: 	                                       const string &alias = "values");
127: 	//! Reads CSV file
128: 	DUCKDB_API shared_ptr<Relation> ReadCSV(const string &csv_file);
129: 	DUCKDB_API shared_ptr<Relation> ReadCSV(const string &csv_file, const vector<string> &columns);
130: 	//! Returns a relation from a query
131: 	DUCKDB_API shared_ptr<Relation> RelationFromQuery(const string &query, string alias = "queryrelation",
132: 	                                                  const string &error = "Expected a single SELECT statement");
133: 	DUCKDB_API shared_ptr<Relation> RelationFromQuery(unique_ptr<SelectStatement> select_stmt,
134: 	                                                  string alias = "queryrelation");
135: 
136: 	DUCKDB_API void BeginTransaction();
137: 	DUCKDB_API void Commit();
138: 	DUCKDB_API void Rollback();
139: 	DUCKDB_API void SetAutoCommit(bool auto_commit);
140: 	DUCKDB_API bool IsAutoCommit();
141: 
142: 	//! Fetch a list of table names that are required for a given query
143: 	DUCKDB_API unordered_set<string> GetTableNames(const string &query);
144: 
145: 	template <typename TR, typename... Args>
146: 	void CreateScalarFunction(const string &name, TR (*udf_func)(Args...)) {
147: 		scalar_function_t function = UDFWrapper::CreateScalarFunction<TR, Args...>(name, udf_func);
148: 		UDFWrapper::RegisterFunction<TR, Args...>(name, function, *context);
149: 	}
150: 
151: 	template <typename TR, typename... Args>
152: 	void CreateScalarFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,
153: 	                          TR (*udf_func)(Args...)) {
154: 		scalar_function_t function =
155: 		    UDFWrapper::CreateScalarFunction<TR, Args...>(name, args, move(ret_type), udf_func);
156: 		UDFWrapper::RegisterFunction(name, args, ret_type, function, *context);
157: 	}
158: 
159: 	template <typename TR, typename... Args>
160: 	void CreateVectorizedFunction(const string &name, scalar_function_t udf_func,
161: 	                              LogicalType varargs = LogicalType::INVALID) {
162: 		UDFWrapper::RegisterFunction<TR, Args...>(name, udf_func, *context, move(varargs));
163: 	}
164: 
165: 	DUCKDB_API void CreateVectorizedFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,
166: 	                                         scalar_function_t udf_func, LogicalType varargs = LogicalType::INVALID) {
167: 		UDFWrapper::RegisterFunction(name, move(args), move(ret_type), udf_func, *context, move(varargs));
168: 	}
169: 
170: 	//------------------------------------- Aggreate Functions ----------------------------------------//
171: 	template <typename UDF_OP, typename STATE, typename TR, typename TA>
172: 	void CreateAggregateFunction(const string &name) {
173: 		AggregateFunction function = UDFWrapper::CreateAggregateFunction<UDF_OP, STATE, TR, TA>(name);
174: 		UDFWrapper::RegisterAggrFunction(function, *context);
175: 	}
176: 
177: 	template <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>
178: 	void CreateAggregateFunction(const string &name) {
179: 		AggregateFunction function = UDFWrapper::CreateAggregateFunction<UDF_OP, STATE, TR, TA, TB>(name);
180: 		UDFWrapper::RegisterAggrFunction(function, *context);
181: 	}
182: 
183: 	template <typename UDF_OP, typename STATE, typename TR, typename TA>
184: 	void CreateAggregateFunction(const string &name, LogicalType ret_type, LogicalType input_typeA) {
185: 		AggregateFunction function =
186: 		    UDFWrapper::CreateAggregateFunction<UDF_OP, STATE, TR, TA>(name, ret_type, input_typeA);
187: 		UDFWrapper::RegisterAggrFunction(function, *context);
188: 	}
189: 
190: 	template <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>
191: 	void CreateAggregateFunction(const string &name, LogicalType ret_type, LogicalType input_typeA,
192: 	                             LogicalType input_typeB) {
193: 		AggregateFunction function =
194: 		    UDFWrapper::CreateAggregateFunction<UDF_OP, STATE, TR, TA, TB>(name, ret_type, input_typeA, input_typeB);
195: 		UDFWrapper::RegisterAggrFunction(function, *context);
196: 	}
197: 
198: 	DUCKDB_API void CreateAggregateFunction(const string &name, vector<LogicalType> arguments, LogicalType return_type,
199: 	                                        aggregate_size_t state_size, aggregate_initialize_t initialize,
200: 	                                        aggregate_update_t update, aggregate_combine_t combine,
201: 	                                        aggregate_finalize_t finalize,
202: 	                                        aggregate_simple_update_t simple_update = nullptr,
203: 	                                        bind_aggregate_function_t bind = nullptr,
204: 	                                        aggregate_destructor_t destructor = nullptr) {
205: 		AggregateFunction function =
206: 		    UDFWrapper::CreateAggregateFunction(name, arguments, return_type, state_size, initialize, update, combine,
207: 		                                        finalize, simple_update, bind, destructor);
208: 		UDFWrapper::RegisterAggrFunction(function, *context);
209: 	}
210: 
211: private:
212: 	unique_ptr<QueryResult> QueryParamsRecursive(const string &query, vector<Value> &values);
213: 
214: 	template <typename T, typename... Args>
215: 	unique_ptr<QueryResult> QueryParamsRecursive(const string &query, vector<Value> &values, T value, Args... args) {
216: 		values.push_back(Value::CreateValue<T>(value));
217: 		return QueryParamsRecursive(query, values, args...);
218: 	}
219: };
220: 
221: } // namespace duckdb
[end of src/include/duckdb/main/connection.hpp]
[start of src/include/duckdb/main/relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/common/common.hpp"
12: #include "duckdb/common/enums/join_type.hpp"
13: #include "duckdb/common/enums/relation_type.hpp"
14: #include "duckdb/common/winapi.hpp"
15: #include "duckdb/main/query_result.hpp"
16: #include "duckdb/parser/column_definition.hpp"
17: #include "duckdb/common/named_parameter_map.hpp"
18: 
19: #include <memory>
20: 
21: namespace duckdb {
22: struct BoundStatement;
23: 
24: class ClientContext;
25: class Binder;
26: class LogicalOperator;
27: class QueryNode;
28: class TableRef;
29: 
30: class Relation : public std::enable_shared_from_this<Relation> {
31: public:
32: 	DUCKDB_API Relation(ClientContext &context, RelationType type) : context(context), type(type) {
33: 	}
34: 	DUCKDB_API virtual ~Relation() {
35: 	}
36: 
37: 	ClientContext &context;
38: 	RelationType type;
39: 
40: public:
41: 	DUCKDB_API virtual const vector<ColumnDefinition> &Columns() = 0;
42: 	DUCKDB_API virtual unique_ptr<QueryNode> GetQueryNode();
43: 	DUCKDB_API virtual BoundStatement Bind(Binder &binder);
44: 	DUCKDB_API virtual string GetAlias();
45: 
46: 	DUCKDB_API unique_ptr<QueryResult> Execute();
47: 	DUCKDB_API string ToString();
48: 	DUCKDB_API virtual string ToString(idx_t depth) = 0;
49: 
50: 	DUCKDB_API void Print();
51: 	DUCKDB_API void Head(idx_t limit = 10);
52: 
53: 	DUCKDB_API shared_ptr<Relation> CreateView(const string &name, bool replace = true, bool temporary = false);
54: 	DUCKDB_API unique_ptr<QueryResult> Query(const string &sql);
55: 	DUCKDB_API unique_ptr<QueryResult> Query(const string &name, const string &sql);
56: 
57: 	//! Explain the query plan of this relation
58: 	DUCKDB_API unique_ptr<QueryResult> Explain();
59: 
60: 	DUCKDB_API virtual unique_ptr<TableRef> GetTableRef();
61: 	DUCKDB_API virtual bool IsReadOnly() {
62: 		return true;
63: 	}
64: 
65: public:
66: 	// PROJECT
67: 	DUCKDB_API shared_ptr<Relation> Project(const string &select_list);
68: 	DUCKDB_API shared_ptr<Relation> Project(const string &expression, const string &alias);
69: 	DUCKDB_API shared_ptr<Relation> Project(const string &select_list, const vector<string> &aliases);
70: 	DUCKDB_API shared_ptr<Relation> Project(const vector<string> &expressions);
71: 	DUCKDB_API shared_ptr<Relation> Project(const vector<string> &expressions, const vector<string> &aliases);
72: 
73: 	// FILTER
74: 	DUCKDB_API shared_ptr<Relation> Filter(const string &expression);
75: 	DUCKDB_API shared_ptr<Relation> Filter(const vector<string> &expressions);
76: 
77: 	// LIMIT
78: 	DUCKDB_API shared_ptr<Relation> Limit(int64_t n, int64_t offset = 0);
79: 
80: 	// ORDER
81: 	DUCKDB_API shared_ptr<Relation> Order(const string &expression);
82: 	DUCKDB_API shared_ptr<Relation> Order(const vector<string> &expressions);
83: 
84: 	// JOIN operation
85: 	DUCKDB_API shared_ptr<Relation> Join(const shared_ptr<Relation> &other, const string &condition,
86: 	                                     JoinType type = JoinType::INNER);
87: 
88: 	// CROSS PRODUCT operation
89: 	DUCKDB_API shared_ptr<Relation> CrossProduct(const shared_ptr<Relation> &other);
90: 
91: 	// SET operations
92: 	DUCKDB_API shared_ptr<Relation> Union(const shared_ptr<Relation> &other);
93: 	DUCKDB_API shared_ptr<Relation> Except(const shared_ptr<Relation> &other);
94: 	DUCKDB_API shared_ptr<Relation> Intersect(const shared_ptr<Relation> &other);
95: 
96: 	// DISTINCT operation
97: 	DUCKDB_API shared_ptr<Relation> Distinct();
98: 
99: 	// AGGREGATES
100: 	DUCKDB_API shared_ptr<Relation> Aggregate(const string &aggregate_list);
101: 	DUCKDB_API shared_ptr<Relation> Aggregate(const vector<string> &aggregates);
102: 	DUCKDB_API shared_ptr<Relation> Aggregate(const string &aggregate_list, const string &group_list);
103: 	DUCKDB_API shared_ptr<Relation> Aggregate(const vector<string> &aggregates, const vector<string> &groups);
104: 
105: 	// ALIAS
106: 	DUCKDB_API shared_ptr<Relation> Alias(const string &alias);
107: 
108: 	//! Insert the data from this relation into a table
109: 	DUCKDB_API void Insert(const string &table_name);
110: 	DUCKDB_API void Insert(const string &schema_name, const string &table_name);
111: 	//! Insert a row (i.e.,list of values) into a table
112: 	DUCKDB_API void Insert(const vector<vector<Value>> &values);
113: 	//! Create a table and insert the data from this relation into that table
114: 	DUCKDB_API void Create(const string &table_name);
115: 	DUCKDB_API void Create(const string &schema_name, const string &table_name);
116: 
117: 	//! Write a relation to a CSV file
118: 	DUCKDB_API void WriteCSV(const string &csv_file);
119: 
120: 	//! Update a table, can only be used on a TableRelation
121: 	DUCKDB_API virtual void Update(const string &update, const string &condition = string());
122: 	//! Delete from a table, can only be used on a TableRelation
123: 	DUCKDB_API virtual void Delete(const string &condition = string());
124: 	//! Create a relation from calling a table in/out function on the input relation
125: 	//! Create a relation from calling a table in/out function on the input relation
126: 	DUCKDB_API shared_ptr<Relation> TableFunction(const std::string &fname, const vector<Value> &values);
127: 	DUCKDB_API shared_ptr<Relation> TableFunction(const std::string &fname, const vector<Value> &values,
128: 	                                              const named_parameter_map_t &named_parameters);
129: 
130: public:
131: 	//! Whether or not the relation inherits column bindings from its child or not, only relevant for binding
132: 	DUCKDB_API virtual bool InheritsColumnBindings() {
133: 		return false;
134: 	}
135: 	DUCKDB_API virtual Relation *ChildRelation() {
136: 		return nullptr;
137: 	}
138: 
139: protected:
140: 	DUCKDB_API string RenderWhitespace(idx_t depth);
141: };
142: 
143: } // namespace duckdb
[end of src/include/duckdb/main/relation.hpp]
[start of src/include/duckdb/main/relation/delete_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/delete_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: #include "duckdb/parser/parsed_expression.hpp"
13: 
14: namespace duckdb {
15: 
16: class DeleteRelation : public Relation {
17: public:
18: 	DeleteRelation(ClientContext &context, unique_ptr<ParsedExpression> condition, string schema_name,
19: 	               string table_name);
20: 
21: 	vector<ColumnDefinition> columns;
22: 	unique_ptr<ParsedExpression> condition;
23: 	string schema_name;
24: 	string table_name;
25: 
26: public:
27: 	BoundStatement Bind(Binder &binder) override;
28: 	const vector<ColumnDefinition> &Columns() override;
29: 	string ToString(idx_t depth) override;
30: 	bool IsReadOnly() override {
31: 		return false;
32: 	}
33: };
34: 
35: } // namespace duckdb
[end of src/include/duckdb/main/relation/delete_relation.hpp]
[start of src/include/duckdb/main/relation/query_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/query_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: #include "duckdb/parser/query_node.hpp"
13: 
14: namespace duckdb {
15: class SelectStatement;
16: 
17: class QueryRelation : public Relation {
18: public:
19: 	QueryRelation(ClientContext &context, unique_ptr<SelectStatement> select_stmt, string alias);
20: 	~QueryRelation();
21: 
22: 	unique_ptr<SelectStatement> select_stmt;
23: 	string alias;
24: 	vector<ColumnDefinition> columns;
25: 
26: public:
27: 	static unique_ptr<SelectStatement> ParseStatement(ClientContext &context, const string &query, const string &error);
28: 	unique_ptr<QueryNode> GetQueryNode() override;
29: 	unique_ptr<TableRef> GetTableRef() override;
30: 
31: 	const vector<ColumnDefinition> &Columns() override;
32: 	string ToString(idx_t depth) override;
33: 	string GetAlias() override;
34: 
35: private:
36: 	unique_ptr<SelectStatement> GetSelectStatement();
37: };
38: 
39: } // namespace duckdb
[end of src/include/duckdb/main/relation/query_relation.hpp]
[start of src/include/duckdb/main/relation/read_csv_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/read_csv_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: 
13: namespace duckdb {
14: 
15: class ReadCSVRelation : public Relation {
16: public:
17: 	ReadCSVRelation(ClientContext &context, string csv_file, vector<ColumnDefinition> columns, bool auto_detect = false,
18: 	                string alias = string());
19: 
20: 	string csv_file;
21: 	bool auto_detect;
22: 	string alias;
23: 	vector<ColumnDefinition> columns;
24: 
25: public:
26: 	unique_ptr<QueryNode> GetQueryNode() override;
27: 	const vector<ColumnDefinition> &Columns() override;
28: 	string ToString(idx_t depth) override;
29: 	string GetAlias() override;
30: 	unique_ptr<TableRef> GetTableRef() override;
31: };
32: 
33: } // namespace duckdb
[end of src/include/duckdb/main/relation/read_csv_relation.hpp]
[start of src/include/duckdb/main/relation/table_function_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/table_function_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: 
13: namespace duckdb {
14: 
15: class TableFunctionRelation : public Relation {
16: public:
17: 	TableFunctionRelation(ClientContext &context, string name, vector<Value> parameters,
18: 	                      named_parameter_map_t named_parameters, shared_ptr<Relation> input_relation_p = nullptr);
19: 
20: 	TableFunctionRelation(ClientContext &context, string name, vector<Value> parameters,
21: 	                      shared_ptr<Relation> input_relation_p = nullptr);
22: 
23: 	string name;
24: 	vector<Value> parameters;
25: 	named_parameter_map_t named_parameters;
26: 	vector<ColumnDefinition> columns;
27: 	shared_ptr<Relation> input_relation;
28: 
29: public:
30: 	unique_ptr<QueryNode> GetQueryNode() override;
31: 	unique_ptr<TableRef> GetTableRef() override;
32: 
33: 	const vector<ColumnDefinition> &Columns() override;
34: 	string ToString(idx_t depth) override;
35: 	string GetAlias() override;
36: };
37: 
38: } // namespace duckdb
[end of src/include/duckdb/main/relation/table_function_relation.hpp]
[start of src/include/duckdb/main/relation/table_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/table_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: #include "duckdb/main/table_description.hpp"
13: 
14: namespace duckdb {
15: 
16: class TableRelation : public Relation {
17: public:
18: 	TableRelation(ClientContext &context, unique_ptr<TableDescription> description);
19: 
20: 	unique_ptr<TableDescription> description;
21: 
22: public:
23: 	unique_ptr<QueryNode> GetQueryNode() override;
24: 
25: 	const vector<ColumnDefinition> &Columns() override;
26: 	string ToString(idx_t depth) override;
27: 	string GetAlias() override;
28: 
29: 	unique_ptr<TableRef> GetTableRef() override;
30: 
31: 	void Update(const string &update, const string &condition = string()) override;
32: 	void Delete(const string &condition = string()) override;
33: };
34: 
35: } // namespace duckdb
[end of src/include/duckdb/main/relation/table_relation.hpp]
[start of src/include/duckdb/main/relation/update_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/update_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: #include "duckdb/parser/parsed_expression.hpp"
13: 
14: namespace duckdb {
15: 
16: class UpdateRelation : public Relation {
17: public:
18: 	UpdateRelation(ClientContext &context, unique_ptr<ParsedExpression> condition, string schema_name,
19: 	               string table_name, vector<string> update_columns, vector<unique_ptr<ParsedExpression>> expressions);
20: 
21: 	vector<ColumnDefinition> columns;
22: 	unique_ptr<ParsedExpression> condition;
23: 	string schema_name;
24: 	string table_name;
25: 	vector<string> update_columns;
26: 	vector<unique_ptr<ParsedExpression>> expressions;
27: 
28: public:
29: 	BoundStatement Bind(Binder &binder) override;
30: 	const vector<ColumnDefinition> &Columns() override;
31: 	string ToString(idx_t depth) override;
32: 	bool IsReadOnly() override {
33: 		return false;
34: 	}
35: };
36: 
37: } // namespace duckdb
[end of src/include/duckdb/main/relation/update_relation.hpp]
[start of src/include/duckdb/main/relation/value_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/value_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: #include "duckdb/parser/parsed_expression.hpp"
13: 
14: namespace duckdb {
15: 
16: class ValueRelation : public Relation {
17: public:
18: 	ValueRelation(ClientContext &context, const vector<vector<Value>> &values, vector<string> names,
19: 	              string alias = "values");
20: 	ValueRelation(ClientContext &context, const string &values, vector<string> names, string alias = "values");
21: 
22: 	vector<vector<unique_ptr<ParsedExpression>>> expressions;
23: 	vector<string> names;
24: 	vector<ColumnDefinition> columns;
25: 	string alias;
26: 
27: public:
28: 	unique_ptr<QueryNode> GetQueryNode() override;
29: 
30: 	const vector<ColumnDefinition> &Columns() override;
31: 	string ToString(idx_t depth) override;
32: 	string GetAlias() override;
33: 
34: 	unique_ptr<TableRef> GetTableRef() override;
35: };
36: 
37: } // namespace duckdb
[end of src/include/duckdb/main/relation/value_relation.hpp]
[start of src/include/duckdb/main/relation/view_relation.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/main/relation/view_relation.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/main/relation.hpp"
12: 
13: namespace duckdb {
14: 
15: class ViewRelation : public Relation {
16: public:
17: 	ViewRelation(ClientContext &context, string schema_name, string view_name);
18: 
19: 	string schema_name;
20: 	string view_name;
21: 	vector<ColumnDefinition> columns;
22: 
23: public:
24: 	unique_ptr<QueryNode> GetQueryNode() override;
25: 	unique_ptr<TableRef> GetTableRef() override;
26: 
27: 	const vector<ColumnDefinition> &Columns() override;
28: 	string ToString(idx_t depth) override;
29: 	string GetAlias() override;
30: };
31: 
32: } // namespace duckdb
[end of src/include/duckdb/main/relation/view_relation.hpp]
[start of src/main/connection.cpp]
1: #include "duckdb/main/connection.hpp"
2: #include "duckdb/main/query_profiler.hpp"
3: #include "duckdb/main/client_context.hpp"
4: #include "duckdb/main/database.hpp"
5: #include "duckdb/main/appender.hpp"
6: #include "duckdb/main/relation/query_relation.hpp"
7: #include "duckdb/main/relation/read_csv_relation.hpp"
8: #include "duckdb/main/relation/table_relation.hpp"
9: #include "duckdb/main/relation/table_function_relation.hpp"
10: #include "duckdb/main/relation/value_relation.hpp"
11: #include "duckdb/main/relation/view_relation.hpp"
12: #include "duckdb/execution/operator/persistent/buffered_csv_reader.hpp"
13: #include "duckdb/parser/parser.hpp"
14: #include "duckdb/main/connection_manager.hpp"
15: #include "duckdb/planner/logical_operator.hpp"
16: 
17: namespace duckdb {
18: 
19: Connection::Connection(DatabaseInstance &database) : context(make_shared<ClientContext>(database.shared_from_this())) {
20: 	ConnectionManager::Get(database).AddConnection(*context);
21: #ifdef DEBUG
22: 	EnableProfiling();
23: #endif
24: }
25: 
26: Connection::Connection(DuckDB &database) : Connection(*database.instance) {
27: }
28: 
29: string Connection::GetProfilingInformation(ProfilerPrintFormat format) {
30: 	auto &profiler = QueryProfiler::Get(*context);
31: 	if (format == ProfilerPrintFormat::JSON) {
32: 		return profiler.ToJSON();
33: 	} else {
34: 		return profiler.ToString();
35: 	}
36: }
37: 
38: void Connection::Interrupt() {
39: 	context->Interrupt();
40: }
41: 
42: void Connection::EnableProfiling() {
43: 	context->EnableProfiling();
44: }
45: 
46: void Connection::DisableProfiling() {
47: 	context->DisableProfiling();
48: }
49: 
50: void Connection::EnableQueryVerification() {
51: 	ClientConfig::GetConfig(*context).query_verification_enabled = true;
52: }
53: 
54: void Connection::DisableQueryVerification() {
55: 	ClientConfig::GetConfig(*context).query_verification_enabled = false;
56: }
57: 
58: void Connection::ForceParallelism() {
59: 	ClientConfig::GetConfig(*context).verify_parallelism = true;
60: }
61: 
62: unique_ptr<QueryResult> Connection::SendQuery(const string &query) {
63: 	return context->Query(query, true);
64: }
65: 
66: unique_ptr<MaterializedQueryResult> Connection::Query(const string &query) {
67: 	auto result = context->Query(query, false);
68: 	D_ASSERT(result->type == QueryResultType::MATERIALIZED_RESULT);
69: 	return unique_ptr_cast<QueryResult, MaterializedQueryResult>(move(result));
70: }
71: 
72: unique_ptr<MaterializedQueryResult> Connection::Query(unique_ptr<SQLStatement> statement) {
73: 	auto result = context->Query(move(statement), false);
74: 	D_ASSERT(result->type == QueryResultType::MATERIALIZED_RESULT);
75: 	return unique_ptr_cast<QueryResult, MaterializedQueryResult>(move(result));
76: }
77: 
78: unique_ptr<PendingQueryResult> Connection::PendingQuery(const string &query) {
79: 	return context->PendingQuery(query);
80: }
81: 
82: unique_ptr<PendingQueryResult> Connection::PendingQuery(unique_ptr<SQLStatement> statement) {
83: 	return context->PendingQuery(move(statement));
84: }
85: 
86: unique_ptr<PreparedStatement> Connection::Prepare(const string &query) {
87: 	return context->Prepare(query);
88: }
89: 
90: unique_ptr<PreparedStatement> Connection::Prepare(unique_ptr<SQLStatement> statement) {
91: 	return context->Prepare(move(statement));
92: }
93: 
94: unique_ptr<QueryResult> Connection::QueryParamsRecursive(const string &query, vector<Value> &values) {
95: 	auto statement = Prepare(query);
96: 	if (!statement->success) {
97: 		return make_unique<MaterializedQueryResult>(statement->error);
98: 	}
99: 	return statement->Execute(values, false);
100: }
101: 
102: unique_ptr<TableDescription> Connection::TableInfo(const string &table_name) {
103: 	return TableInfo(DEFAULT_SCHEMA, table_name);
104: }
105: 
106: unique_ptr<TableDescription> Connection::TableInfo(const string &schema_name, const string &table_name) {
107: 	return context->TableInfo(schema_name, table_name);
108: }
109: 
110: vector<unique_ptr<SQLStatement>> Connection::ExtractStatements(const string &query) {
111: 	return context->ParseStatements(query);
112: }
113: 
114: unique_ptr<LogicalOperator> Connection::ExtractPlan(const string &query) {
115: 	return context->ExtractPlan(query);
116: }
117: 
118: void Connection::Append(TableDescription &description, DataChunk &chunk) {
119: 	ChunkCollection collection;
120: 	collection.Append(chunk);
121: 	Append(description, collection);
122: }
123: 
124: void Connection::Append(TableDescription &description, ChunkCollection &collection) {
125: 	context->Append(description, collection);
126: }
127: 
128: shared_ptr<Relation> Connection::Table(const string &table_name) {
129: 	return Table(DEFAULT_SCHEMA, table_name);
130: }
131: 
132: shared_ptr<Relation> Connection::Table(const string &schema_name, const string &table_name) {
133: 	auto table_info = TableInfo(schema_name, table_name);
134: 	if (!table_info) {
135: 		throw Exception("Table does not exist!");
136: 	}
137: 	return make_shared<TableRelation>(*context, move(table_info));
138: }
139: 
140: shared_ptr<Relation> Connection::View(const string &tname) {
141: 	return View(DEFAULT_SCHEMA, tname);
142: }
143: 
144: shared_ptr<Relation> Connection::View(const string &schema_name, const string &table_name) {
145: 	return make_shared<ViewRelation>(*context, schema_name, table_name);
146: }
147: 
148: shared_ptr<Relation> Connection::TableFunction(const string &fname) {
149: 	vector<Value> values;
150: 	named_parameter_map_t named_parameters;
151: 	return TableFunction(fname, values, named_parameters);
152: }
153: 
154: shared_ptr<Relation> Connection::TableFunction(const string &fname, const vector<Value> &values,
155:                                                const named_parameter_map_t &named_parameters) {
156: 	return make_shared<TableFunctionRelation>(*context, fname, values, named_parameters);
157: }
158: 
159: shared_ptr<Relation> Connection::TableFunction(const string &fname, const vector<Value> &values) {
160: 	return make_shared<TableFunctionRelation>(*context, fname, values);
161: }
162: 
163: shared_ptr<Relation> Connection::Values(const vector<vector<Value>> &values) {
164: 	vector<string> column_names;
165: 	return Values(values, column_names);
166: }
167: 
168: shared_ptr<Relation> Connection::Values(const vector<vector<Value>> &values, const vector<string> &column_names,
169:                                         const string &alias) {
170: 	return make_shared<ValueRelation>(*context, values, column_names, alias);
171: }
172: 
173: shared_ptr<Relation> Connection::Values(const string &values) {
174: 	vector<string> column_names;
175: 	return Values(values, column_names);
176: }
177: 
178: shared_ptr<Relation> Connection::Values(const string &values, const vector<string> &column_names, const string &alias) {
179: 	return make_shared<ValueRelation>(*context, values, column_names, alias);
180: }
181: 
182: shared_ptr<Relation> Connection::ReadCSV(const string &csv_file) {
183: 	BufferedCSVReaderOptions options;
184: 	options.file_path = csv_file;
185: 	options.auto_detect = true;
186: 	BufferedCSVReader reader(*context, options);
187: 	vector<ColumnDefinition> column_list;
188: 	for (idx_t i = 0; i < reader.sql_types.size(); i++) {
189: 		column_list.emplace_back(reader.col_names[i], reader.sql_types[i]);
190: 	}
191: 	return make_shared<ReadCSVRelation>(*context, csv_file, move(column_list), true);
192: }
193: 
194: shared_ptr<Relation> Connection::ReadCSV(const string &csv_file, const vector<string> &columns) {
195: 	// parse columns
196: 	vector<ColumnDefinition> column_list;
197: 	for (auto &column : columns) {
198: 		auto col_list = Parser::ParseColumnList(column, context->GetParserOptions());
199: 		if (col_list.size() != 1) {
200: 			throw ParserException("Expected a single column definition");
201: 		}
202: 		column_list.push_back(move(col_list[0]));
203: 	}
204: 	return make_shared<ReadCSVRelation>(*context, csv_file, move(column_list));
205: }
206: 
207: unordered_set<string> Connection::GetTableNames(const string &query) {
208: 	return context->GetTableNames(query);
209: }
210: 
211: shared_ptr<Relation> Connection::RelationFromQuery(const string &query, string alias, const string &error) {
212: 	return RelationFromQuery(QueryRelation::ParseStatement(*context, query, error), move(alias));
213: }
214: 
215: shared_ptr<Relation> Connection::RelationFromQuery(unique_ptr<SelectStatement> select_stmt, string alias) {
216: 	return make_shared<QueryRelation>(*context, move(select_stmt), move(alias));
217: }
218: 
219: void Connection::BeginTransaction() {
220: 	auto result = Query("BEGIN TRANSACTION");
221: 	if (!result->success) {
222: 		throw Exception(result->error);
223: 	}
224: }
225: 
226: void Connection::Commit() {
227: 	auto result = Query("COMMIT");
228: 	if (!result->success) {
229: 		throw Exception(result->error);
230: 	}
231: }
232: 
233: void Connection::Rollback() {
234: 	auto result = Query("ROLLBACK");
235: 	if (!result->success) {
236: 		throw Exception(result->error);
237: 	}
238: }
239: 
240: void Connection::SetAutoCommit(bool auto_commit) {
241: 	context->transaction.SetAutoCommit(auto_commit);
242: }
243: 
244: bool Connection::IsAutoCommit() {
245: 	return context->transaction.IsAutoCommit();
246: }
247: 
248: } // namespace duckdb
[end of src/main/connection.cpp]
[start of src/main/relation.cpp]
1: #include "duckdb/main/relation.hpp"
2: #include "duckdb/common/printer.hpp"
3: #include "duckdb/parser/parser.hpp"
4: #include "duckdb/main/relation/aggregate_relation.hpp"
5: #include "duckdb/main/relation/cross_product_relation.hpp"
6: #include "duckdb/main/relation/distinct_relation.hpp"
7: #include "duckdb/main/relation/explain_relation.hpp"
8: #include "duckdb/main/relation/filter_relation.hpp"
9: #include "duckdb/main/relation/insert_relation.hpp"
10: #include "duckdb/main/relation/limit_relation.hpp"
11: #include "duckdb/main/relation/order_relation.hpp"
12: #include "duckdb/main/relation/projection_relation.hpp"
13: #include "duckdb/main/relation/setop_relation.hpp"
14: #include "duckdb/main/relation/subquery_relation.hpp"
15: #include "duckdb/main/relation/table_function_relation.hpp"
16: #include "duckdb/main/relation/create_table_relation.hpp"
17: #include "duckdb/main/relation/create_view_relation.hpp"
18: #include "duckdb/main/relation/write_csv_relation.hpp"
19: #include "duckdb/main/client_context.hpp"
20: #include "duckdb/planner/binder.hpp"
21: #include "duckdb/parser/tableref/subqueryref.hpp"
22: #include "duckdb/parser/statement/select_statement.hpp"
23: #include "duckdb/parser/expression/conjunction_expression.hpp"
24: #include "duckdb/parser/expression/columnref_expression.hpp"
25: #include "duckdb/main/relation/join_relation.hpp"
26: #include "duckdb/main/relation/value_relation.hpp"
27: 
28: namespace duckdb {
29: 
30: shared_ptr<Relation> Relation::Project(const string &select_list) {
31: 	return Project(select_list, vector<string>());
32: }
33: 
34: shared_ptr<Relation> Relation::Project(const string &expression, const string &alias) {
35: 	return Project(expression, vector<string>({alias}));
36: }
37: 
38: shared_ptr<Relation> Relation::Project(const string &select_list, const vector<string> &aliases) {
39: 	auto expressions = Parser::ParseExpressionList(select_list, context.GetParserOptions());
40: 	return make_shared<ProjectionRelation>(shared_from_this(), move(expressions), aliases);
41: }
42: 
43: shared_ptr<Relation> Relation::Project(const vector<string> &expressions) {
44: 	vector<string> aliases;
45: 	return Project(expressions, aliases);
46: }
47: 
48: static vector<unique_ptr<ParsedExpression>> StringListToExpressionList(ClientContext &context,
49:                                                                        const vector<string> &expressions) {
50: 	if (expressions.empty()) {
51: 		throw ParserException("Zero expressions provided");
52: 	}
53: 	vector<unique_ptr<ParsedExpression>> result_list;
54: 	for (auto &expr : expressions) {
55: 		auto expression_list = Parser::ParseExpressionList(expr, context.GetParserOptions());
56: 		if (expression_list.size() != 1) {
57: 			throw ParserException("Expected a single expression in the expression list");
58: 		}
59: 		result_list.push_back(move(expression_list[0]));
60: 	}
61: 	return result_list;
62: }
63: 
64: shared_ptr<Relation> Relation::Project(const vector<string> &expressions, const vector<string> &aliases) {
65: 	auto result_list = StringListToExpressionList(context, expressions);
66: 	return make_shared<ProjectionRelation>(shared_from_this(), move(result_list), aliases);
67: }
68: 
69: shared_ptr<Relation> Relation::Filter(const string &expression) {
70: 	auto expression_list = Parser::ParseExpressionList(expression, context.GetParserOptions());
71: 	if (expression_list.size() != 1) {
72: 		throw ParserException("Expected a single expression as filter condition");
73: 	}
74: 	return make_shared<FilterRelation>(shared_from_this(), move(expression_list[0]));
75: }
76: 
77: shared_ptr<Relation> Relation::Filter(const vector<string> &expressions) {
78: 	// if there are multiple expressions, we AND them together
79: 	auto expression_list = StringListToExpressionList(context, expressions);
80: 	D_ASSERT(!expression_list.empty());
81: 
82: 	auto expr = move(expression_list[0]);
83: 	for (idx_t i = 1; i < expression_list.size(); i++) {
84: 		expr =
85: 		    make_unique<ConjunctionExpression>(ExpressionType::CONJUNCTION_AND, move(expr), move(expression_list[i]));
86: 	}
87: 	return make_shared<FilterRelation>(shared_from_this(), move(expr));
88: }
89: 
90: shared_ptr<Relation> Relation::Limit(int64_t limit, int64_t offset) {
91: 	return make_shared<LimitRelation>(shared_from_this(), limit, offset);
92: }
93: 
94: shared_ptr<Relation> Relation::Order(const string &expression) {
95: 	auto order_list = Parser::ParseOrderList(expression, context.GetParserOptions());
96: 	return make_shared<OrderRelation>(shared_from_this(), move(order_list));
97: }
98: 
99: shared_ptr<Relation> Relation::Order(const vector<string> &expressions) {
100: 	if (expressions.empty()) {
101: 		throw ParserException("Zero ORDER BY expressions provided");
102: 	}
103: 	vector<OrderByNode> order_list;
104: 	for (auto &expression : expressions) {
105: 		auto inner_list = Parser::ParseOrderList(expression, context.GetParserOptions());
106: 		if (inner_list.size() != 1) {
107: 			throw ParserException("Expected a single ORDER BY expression in the expression list");
108: 		}
109: 		order_list.push_back(move(inner_list[0]));
110: 	}
111: 	return make_shared<OrderRelation>(shared_from_this(), move(order_list));
112: }
113: 
114: shared_ptr<Relation> Relation::Join(const shared_ptr<Relation> &other, const string &condition, JoinType type) {
115: 	auto expression_list = Parser::ParseExpressionList(condition, context.GetParserOptions());
116: 	D_ASSERT(!expression_list.empty());
117: 
118: 	if (expression_list.size() > 1 || expression_list[0]->type == ExpressionType::COLUMN_REF) {
119: 		// multiple columns or single column ref: the condition is a USING list
120: 		vector<string> using_columns;
121: 		for (auto &expr : expression_list) {
122: 			if (expr->type != ExpressionType::COLUMN_REF) {
123: 				throw ParserException("Expected a single expression as join condition");
124: 			}
125: 			auto &colref = (ColumnRefExpression &)*expr;
126: 			if (colref.IsQualified()) {
127: 				throw ParserException("Expected unqualified column for column in USING clause");
128: 			}
129: 			using_columns.push_back(colref.column_names[0]);
130: 		}
131: 		return make_shared<JoinRelation>(shared_from_this(), other, move(using_columns), type);
132: 	} else {
133: 		// single expression that is not a column reference: use the expression as a join condition
134: 		return make_shared<JoinRelation>(shared_from_this(), other, move(expression_list[0]), type);
135: 	}
136: }
137: 
138: shared_ptr<Relation> Relation::CrossProduct(const shared_ptr<Relation> &other) {
139: 	return make_shared<CrossProductRelation>(shared_from_this(), other);
140: }
141: 
142: shared_ptr<Relation> Relation::Union(const shared_ptr<Relation> &other) {
143: 	return make_shared<SetOpRelation>(shared_from_this(), other, SetOperationType::UNION);
144: }
145: 
146: shared_ptr<Relation> Relation::Except(const shared_ptr<Relation> &other) {
147: 	return make_shared<SetOpRelation>(shared_from_this(), other, SetOperationType::EXCEPT);
148: }
149: 
150: shared_ptr<Relation> Relation::Intersect(const shared_ptr<Relation> &other) {
151: 	return make_shared<SetOpRelation>(shared_from_this(), other, SetOperationType::INTERSECT);
152: }
153: 
154: shared_ptr<Relation> Relation::Distinct() {
155: 	return make_shared<DistinctRelation>(shared_from_this());
156: }
157: 
158: shared_ptr<Relation> Relation::Alias(const string &alias) {
159: 	return make_shared<SubqueryRelation>(shared_from_this(), alias);
160: }
161: 
162: shared_ptr<Relation> Relation::Aggregate(const string &aggregate_list) {
163: 	auto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetParserOptions());
164: 	return make_shared<AggregateRelation>(shared_from_this(), move(expression_list));
165: }
166: 
167: shared_ptr<Relation> Relation::Aggregate(const string &aggregate_list, const string &group_list) {
168: 	auto expression_list = Parser::ParseExpressionList(aggregate_list, context.GetParserOptions());
169: 	auto groups = Parser::ParseExpressionList(group_list, context.GetParserOptions());
170: 	return make_shared<AggregateRelation>(shared_from_this(), move(expression_list), move(groups));
171: }
172: 
173: shared_ptr<Relation> Relation::Aggregate(const vector<string> &aggregates) {
174: 	auto aggregate_list = StringListToExpressionList(context, aggregates);
175: 	return make_shared<AggregateRelation>(shared_from_this(), move(aggregate_list));
176: }
177: 
178: shared_ptr<Relation> Relation::Aggregate(const vector<string> &aggregates, const vector<string> &groups) {
179: 	auto aggregate_list = StringListToExpressionList(context, aggregates);
180: 	auto group_list = StringListToExpressionList(context, groups);
181: 	return make_shared<AggregateRelation>(shared_from_this(), move(aggregate_list), move(group_list));
182: }
183: 
184: string Relation::GetAlias() {
185: 	return "relation";
186: }
187: 
188: unique_ptr<TableRef> Relation::GetTableRef() {
189: 	auto select = make_unique<SelectStatement>();
190: 	select->node = GetQueryNode();
191: 	return make_unique<SubqueryRef>(move(select), GetAlias());
192: }
193: 
194: unique_ptr<QueryResult> Relation::Execute() {
195: 	return context.Execute(shared_from_this());
196: }
197: 
198: BoundStatement Relation::Bind(Binder &binder) {
199: 	SelectStatement stmt;
200: 	stmt.node = GetQueryNode();
201: 	return binder.Bind((SQLStatement &)stmt);
202: }
203: 
204: void Relation::Insert(const string &table_name) {
205: 	Insert(DEFAULT_SCHEMA, table_name);
206: }
207: 
208: void Relation::Insert(const string &schema_name, const string &table_name) {
209: 	auto insert = make_shared<InsertRelation>(shared_from_this(), schema_name, table_name);
210: 	auto res = insert->Execute();
211: 	if (!res->success) {
212: 		throw Exception("Failed to insert into table '" + table_name + "': " + res->error);
213: 	}
214: }
215: 
216: void Relation::Insert(const vector<vector<Value>> &values) {
217: 	vector<string> column_names;
218: 	auto rel = make_shared<ValueRelation>(context, values, move(column_names), "values");
219: 	rel->Insert(GetAlias());
220: }
221: 
222: void Relation::Create(const string &table_name) {
223: 	Create(DEFAULT_SCHEMA, table_name);
224: }
225: 
226: void Relation::Create(const string &schema_name, const string &table_name) {
227: 	auto create = make_shared<CreateTableRelation>(shared_from_this(), schema_name, table_name);
228: 	auto res = create->Execute();
229: 	if (!res->success) {
230: 		throw Exception("Failed to create table '" + table_name + "': " + res->error);
231: 	}
232: }
233: 
234: void Relation::WriteCSV(const string &csv_file) {
235: 	auto write_csv = make_shared<WriteCSVRelation>(shared_from_this(), csv_file);
236: 	auto res = write_csv->Execute();
237: 	if (!res->success) {
238: 		throw Exception("Failed to write '" + csv_file + "': " + res->error);
239: 	}
240: }
241: 
242: shared_ptr<Relation> Relation::CreateView(const string &name, bool replace, bool temporary) {
243: 	auto view = make_shared<CreateViewRelation>(shared_from_this(), name, replace, temporary);
244: 	auto res = view->Execute();
245: 	if (!res->success) {
246: 		throw Exception("Failed to create view '" + name + "': " + res->error);
247: 	}
248: 	return shared_from_this();
249: }
250: 
251: unique_ptr<QueryResult> Relation::Query(const string &sql) {
252: 	return context.Query(sql, false);
253: }
254: 
255: unique_ptr<QueryResult> Relation::Query(const string &name, const string &sql) {
256: 	CreateView(name);
257: 	return Query(sql);
258: }
259: 
260: unique_ptr<QueryResult> Relation::Explain() {
261: 	auto explain = make_shared<ExplainRelation>(shared_from_this());
262: 	return explain->Execute();
263: }
264: 
265: void Relation::Update(const string &update, const string &condition) {
266: 	throw Exception("UPDATE can only be used on base tables!");
267: }
268: 
269: void Relation::Delete(const string &condition) {
270: 	throw Exception("DELETE can only be used on base tables!");
271: }
272: 
273: shared_ptr<Relation> Relation::TableFunction(const std::string &fname, const vector<Value> &values,
274:                                              const named_parameter_map_t &named_parameters) {
275: 	return make_shared<TableFunctionRelation>(context, fname, values, named_parameters, shared_from_this());
276: }
277: 
278: shared_ptr<Relation> Relation::TableFunction(const std::string &fname, const vector<Value> &values) {
279: 	return make_shared<TableFunctionRelation>(context, fname, values, shared_from_this());
280: }
281: 
282: string Relation::ToString() {
283: 	string str;
284: 	str += "---------------------\n";
285: 	str += "-- Expression Tree --\n";
286: 	str += "---------------------\n";
287: 	str += ToString(0);
288: 	str += "\n\n";
289: 	str += "---------------------\n";
290: 	str += "-- Result Columns  --\n";
291: 	str += "---------------------\n";
292: 	auto &cols = Columns();
293: 	for (idx_t i = 0; i < cols.size(); i++) {
294: 		str += "- " + cols[i].name + " (" + cols[i].type.ToString() + ")\n";
295: 	}
296: 	return str;
297: }
298: 
299: // LCOV_EXCL_START
300: unique_ptr<QueryNode> Relation::GetQueryNode() {
301: 	throw InternalException("Cannot create a query node from this node type");
302: }
303: 
304: void Relation::Head(idx_t limit) {
305: 	auto limit_node = Limit(limit);
306: 	limit_node->Execute()->Print();
307: }
308: // LCOV_EXCL_STOP
309: 
310: void Relation::Print() {
311: 	Printer::Print(ToString());
312: }
313: 
314: string Relation::RenderWhitespace(idx_t depth) {
315: 	return string(depth * 2, ' ');
316: }
317: 
318: } // namespace duckdb
[end of src/main/relation.cpp]
[start of src/main/relation/aggregate_relation.cpp]
1: #include "duckdb/main/relation/aggregate_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: 
6: namespace duckdb {
7: 
8: AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,
9:                                      vector<unique_ptr<ParsedExpression>> parsed_expressions)
10:     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),
11:       child(move(child_p)) {
12: 	// bind the expressions
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: AggregateRelation::AggregateRelation(shared_ptr<Relation> child_p,
17:                                      vector<unique_ptr<ParsedExpression>> parsed_expressions,
18:                                      vector<unique_ptr<ParsedExpression>> groups_p)
19:     : Relation(child_p->context, RelationType::AGGREGATE_RELATION), expressions(move(parsed_expressions)),
20:       groups(move(groups_p)), child(move(child_p)) {
21: 	// bind the expressions
22: 	context.TryBindRelation(*this, this->columns);
23: }
24: 
25: unique_ptr<QueryNode> AggregateRelation::GetQueryNode() {
26: 	auto child_ptr = child.get();
27: 	while (child_ptr->InheritsColumnBindings()) {
28: 		child_ptr = child_ptr->ChildRelation();
29: 	}
30: 	unique_ptr<QueryNode> result;
31: 	if (child_ptr->type == RelationType::JOIN_RELATION) {
32: 		// child node is a join: push projection into the child query node
33: 		result = child->GetQueryNode();
34: 	} else {
35: 		// child node is not a join: create a new select node and push the child as a table reference
36: 		auto select = make_unique<SelectNode>();
37: 		select->from_table = child->GetTableRef();
38: 		result = move(select);
39: 	}
40: 	D_ASSERT(result->type == QueryNodeType::SELECT_NODE);
41: 	auto &select_node = (SelectNode &)*result;
42: 	if (!groups.empty()) {
43: 		// explicit groups provided: use standard handling
44: 		select_node.aggregate_handling = AggregateHandling::STANDARD_HANDLING;
45: 		select_node.groups.group_expressions.clear();
46: 		GroupingSet grouping_set;
47: 		for (idx_t i = 0; i < groups.size(); i++) {
48: 			select_node.groups.group_expressions.push_back(groups[i]->Copy());
49: 			grouping_set.insert(i);
50: 		}
51: 		select_node.groups.grouping_sets.push_back(move(grouping_set));
52: 	} else {
53: 		// no groups provided: automatically figure out groups (if any)
54: 		select_node.aggregate_handling = AggregateHandling::FORCE_AGGREGATES;
55: 	}
56: 	select_node.select_list.clear();
57: 	for (auto &expr : expressions) {
58: 		select_node.select_list.push_back(expr->Copy());
59: 	}
60: 	return result;
61: }
62: 
63: string AggregateRelation::GetAlias() {
64: 	return child->GetAlias();
65: }
66: 
67: const vector<ColumnDefinition> &AggregateRelation::Columns() {
68: 	return columns;
69: }
70: 
71: string AggregateRelation::ToString(idx_t depth) {
72: 	string str = RenderWhitespace(depth) + "Aggregate [";
73: 	for (idx_t i = 0; i < expressions.size(); i++) {
74: 		if (i != 0) {
75: 			str += ", ";
76: 		}
77: 		str += expressions[i]->ToString();
78: 	}
79: 	str += "]\n";
80: 	return str + child->ToString(depth + 1);
81: }
82: 
83: } // namespace duckdb
[end of src/main/relation/aggregate_relation.cpp]
[start of src/main/relation/create_table_relation.cpp]
1: #include "duckdb/main/relation/create_table_relation.hpp"
2: #include "duckdb/parser/statement/create_statement.hpp"
3: #include "duckdb/parser/statement/select_statement.hpp"
4: #include "duckdb/parser/parsed_data/create_table_info.hpp"
5: #include "duckdb/planner/binder.hpp"
6: #include "duckdb/main/client_context.hpp"
7: 
8: namespace duckdb {
9: 
10: CreateTableRelation::CreateTableRelation(shared_ptr<Relation> child_p, string schema_name, string table_name)
11:     : Relation(child_p->context, RelationType::CREATE_TABLE_RELATION), child(move(child_p)),
12:       schema_name(move(schema_name)), table_name(move(table_name)) {
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: BoundStatement CreateTableRelation::Bind(Binder &binder) {
17: 	auto select = make_unique<SelectStatement>();
18: 	select->node = child->GetQueryNode();
19: 
20: 	CreateStatement stmt;
21: 	auto info = make_unique<CreateTableInfo>();
22: 	info->schema = schema_name;
23: 	info->table = table_name;
24: 	info->query = move(select);
25: 	info->on_conflict = OnCreateConflict::ERROR_ON_CONFLICT;
26: 	stmt.info = move(info);
27: 	return binder.Bind((SQLStatement &)stmt);
28: }
29: 
30: const vector<ColumnDefinition> &CreateTableRelation::Columns() {
31: 	return columns;
32: }
33: 
34: string CreateTableRelation::ToString(idx_t depth) {
35: 	string str = RenderWhitespace(depth) + "Create Table\n";
36: 	return str + child->ToString(depth + 1);
37: }
38: 
39: } // namespace duckdb
[end of src/main/relation/create_table_relation.cpp]
[start of src/main/relation/create_view_relation.cpp]
1: #include "duckdb/main/relation/create_view_relation.hpp"
2: #include "duckdb/parser/statement/create_statement.hpp"
3: #include "duckdb/parser/parsed_data/create_view_info.hpp"
4: #include "duckdb/planner/binder.hpp"
5: #include "duckdb/main/client_context.hpp"
6: 
7: namespace duckdb {
8: 
9: CreateViewRelation::CreateViewRelation(shared_ptr<Relation> child_p, string view_name_p, bool replace_p,
10:                                        bool temporary_p)
11:     : Relation(child_p->context, RelationType::CREATE_VIEW_RELATION), child(move(child_p)),
12:       view_name(move(view_name_p)), replace(replace_p), temporary(temporary_p) {
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: BoundStatement CreateViewRelation::Bind(Binder &binder) {
17: 	auto select = make_unique<SelectStatement>();
18: 	select->node = child->GetQueryNode();
19: 
20: 	CreateStatement stmt;
21: 	auto info = make_unique<CreateViewInfo>();
22: 	info->query = move(select);
23: 	info->view_name = view_name;
24: 	info->temporary = temporary;
25: 	info->schema = "";
26: 	info->on_conflict = replace ? OnCreateConflict::REPLACE_ON_CONFLICT : OnCreateConflict::ERROR_ON_CONFLICT;
27: 	stmt.info = move(info);
28: 	return binder.Bind((SQLStatement &)stmt);
29: }
30: 
31: const vector<ColumnDefinition> &CreateViewRelation::Columns() {
32: 	return columns;
33: }
34: 
35: string CreateViewRelation::ToString(idx_t depth) {
36: 	string str = RenderWhitespace(depth) + "Create View\n";
37: 	return str + child->ToString(depth + 1);
38: }
39: 
40: } // namespace duckdb
[end of src/main/relation/create_view_relation.cpp]
[start of src/main/relation/cross_product_relation.cpp]
1: #include "duckdb/main/relation/cross_product_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/expression/star_expression.hpp"
5: #include "duckdb/parser/tableref/crossproductref.hpp"
6: 
7: namespace duckdb {
8: 
9: CrossProductRelation::CrossProductRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p)
10:     : Relation(left_p->context, RelationType::CROSS_PRODUCT_RELATION), left(move(left_p)), right(move(right_p)) {
11: 	if (&left->context != &right->context) {
12: 		throw Exception("Cannot combine LEFT and RIGHT relations of different connections!");
13: 	}
14: 	context.TryBindRelation(*this, this->columns);
15: }
16: 
17: unique_ptr<QueryNode> CrossProductRelation::GetQueryNode() {
18: 	auto result = make_unique<SelectNode>();
19: 	result->select_list.push_back(make_unique<StarExpression>());
20: 	result->from_table = GetTableRef();
21: 	return move(result);
22: }
23: 
24: unique_ptr<TableRef> CrossProductRelation::GetTableRef() {
25: 	auto cross_product_ref = make_unique<CrossProductRef>();
26: 	cross_product_ref->left = left->GetTableRef();
27: 	cross_product_ref->right = right->GetTableRef();
28: 	return move(cross_product_ref);
29: }
30: 
31: const vector<ColumnDefinition> &CrossProductRelation::Columns() {
32: 	return this->columns;
33: }
34: 
35: string CrossProductRelation::ToString(idx_t depth) {
36: 	string str = RenderWhitespace(depth);
37: 	str = "Cross Product";
38: 	return str + "\n" + left->ToString(depth + 1) + right->ToString(depth + 1);
39: }
40: 
41: } // namespace duckdb
[end of src/main/relation/cross_product_relation.cpp]
[start of src/main/relation/delete_relation.cpp]
1: #include "duckdb/main/relation/delete_relation.hpp"
2: #include "duckdb/parser/statement/delete_statement.hpp"
3: #include "duckdb/planner/binder.hpp"
4: #include "duckdb/main/client_context.hpp"
5: #include "duckdb/parser/tableref/basetableref.hpp"
6: 
7: namespace duckdb {
8: 
9: DeleteRelation::DeleteRelation(ClientContext &context, unique_ptr<ParsedExpression> condition_p, string schema_name_p,
10:                                string table_name_p)
11:     : Relation(context, RelationType::DELETE_RELATION), condition(move(condition_p)), schema_name(move(schema_name_p)),
12:       table_name(move(table_name_p)) {
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: BoundStatement DeleteRelation::Bind(Binder &binder) {
17: 	auto basetable = make_unique<BaseTableRef>();
18: 	basetable->schema_name = schema_name;
19: 	basetable->table_name = table_name;
20: 
21: 	DeleteStatement stmt;
22: 	stmt.condition = condition ? condition->Copy() : nullptr;
23: 	stmt.table = move(basetable);
24: 	return binder.Bind((SQLStatement &)stmt);
25: }
26: 
27: const vector<ColumnDefinition> &DeleteRelation::Columns() {
28: 	return columns;
29: }
30: 
31: string DeleteRelation::ToString(idx_t depth) {
32: 	string str = RenderWhitespace(depth) + "DELETE FROM " + table_name;
33: 	if (condition) {
34: 		str += " WHERE " + condition->ToString();
35: 	}
36: 	return str;
37: }
38: 
39: } // namespace duckdb
[end of src/main/relation/delete_relation.cpp]
[start of src/main/relation/distinct_relation.cpp]
1: #include "duckdb/main/relation/distinct_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node.hpp"
4: 
5: namespace duckdb {
6: 
7: DistinctRelation::DistinctRelation(shared_ptr<Relation> child_p)
8:     : Relation(child_p->context, RelationType::DISTINCT_RELATION), child(move(child_p)) {
9: 	vector<ColumnDefinition> dummy_columns;
10: 	context.TryBindRelation(*this, dummy_columns);
11: }
12: 
13: unique_ptr<QueryNode> DistinctRelation::GetQueryNode() {
14: 	auto child_node = child->GetQueryNode();
15: 	child_node->modifiers.push_back(make_unique<DistinctModifier>());
16: 	return child_node;
17: }
18: 
19: string DistinctRelation::GetAlias() {
20: 	return child->GetAlias();
21: }
22: 
23: const vector<ColumnDefinition> &DistinctRelation::Columns() {
24: 	return child->Columns();
25: }
26: 
27: string DistinctRelation::ToString(idx_t depth) {
28: 	string str = RenderWhitespace(depth) + "Distinct\n";
29: 	return str + child->ToString(depth + 1);
30: 	;
31: }
32: 
33: } // namespace duckdb
[end of src/main/relation/distinct_relation.cpp]
[start of src/main/relation/explain_relation.cpp]
1: #include "duckdb/main/relation/explain_relation.hpp"
2: #include "duckdb/parser/statement/explain_statement.hpp"
3: #include "duckdb/parser/statement/select_statement.hpp"
4: #include "duckdb/parser/parsed_data/create_view_info.hpp"
5: #include "duckdb/planner/binder.hpp"
6: #include "duckdb/main/client_context.hpp"
7: 
8: namespace duckdb {
9: 
10: ExplainRelation::ExplainRelation(shared_ptr<Relation> child_p)
11:     : Relation(child_p->context, RelationType::EXPLAIN_RELATION), child(move(child_p)) {
12: 	context.TryBindRelation(*this, this->columns);
13: }
14: 
15: BoundStatement ExplainRelation::Bind(Binder &binder) {
16: 	auto select = make_unique<SelectStatement>();
17: 	select->node = child->GetQueryNode();
18: 	ExplainStatement explain(move(select));
19: 	return binder.Bind((SQLStatement &)explain);
20: }
21: 
22: const vector<ColumnDefinition> &ExplainRelation::Columns() {
23: 	return columns;
24: }
25: 
26: string ExplainRelation::ToString(idx_t depth) {
27: 	string str = RenderWhitespace(depth) + "Explain\n";
28: 	return str + child->ToString(depth + 1);
29: }
30: 
31: } // namespace duckdb
[end of src/main/relation/explain_relation.cpp]
[start of src/main/relation/filter_relation.cpp]
1: #include "duckdb/main/relation/filter_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/query_node/set_operation_node.hpp"
5: #include "duckdb/parser/expression/conjunction_expression.hpp"
6: #include "duckdb/parser/expression/star_expression.hpp"
7: 
8: namespace duckdb {
9: 
10: FilterRelation::FilterRelation(shared_ptr<Relation> child_p, unique_ptr<ParsedExpression> condition_p)
11:     : Relation(child_p->context, RelationType::FILTER_RELATION), condition(move(condition_p)), child(move(child_p)) {
12: 	vector<ColumnDefinition> dummy_columns;
13: 	context.TryBindRelation(*this, dummy_columns);
14: }
15: 
16: unique_ptr<QueryNode> FilterRelation::GetQueryNode() {
17: 	auto child_ptr = child.get();
18: 	while (child_ptr->InheritsColumnBindings()) {
19: 		child_ptr = child_ptr->ChildRelation();
20: 	}
21: 	if (child_ptr->type == RelationType::JOIN_RELATION) {
22: 		// child node is a join: push filter into WHERE clause of select node
23: 		auto child_node = child->GetQueryNode();
24: 		D_ASSERT(child_node->type == QueryNodeType::SELECT_NODE);
25: 		auto &select_node = (SelectNode &)*child_node;
26: 		if (!select_node.where_clause) {
27: 			select_node.where_clause = condition->Copy();
28: 		} else {
29: 			select_node.where_clause = make_unique<ConjunctionExpression>(
30: 			    ExpressionType::CONJUNCTION_AND, move(select_node.where_clause), condition->Copy());
31: 		}
32: 		return child_node;
33: 	} else {
34: 		auto result = make_unique<SelectNode>();
35: 		result->select_list.push_back(make_unique<StarExpression>());
36: 		result->from_table = child->GetTableRef();
37: 		result->where_clause = condition->Copy();
38: 		return move(result);
39: 	}
40: }
41: 
42: string FilterRelation::GetAlias() {
43: 	return child->GetAlias();
44: }
45: 
46: const vector<ColumnDefinition> &FilterRelation::Columns() {
47: 	return child->Columns();
48: }
49: 
50: string FilterRelation::ToString(idx_t depth) {
51: 	string str = RenderWhitespace(depth) + "Filter [" + condition->ToString() + "]\n";
52: 	return str + child->ToString(depth + 1);
53: }
54: 
55: } // namespace duckdb
[end of src/main/relation/filter_relation.cpp]
[start of src/main/relation/insert_relation.cpp]
1: #include "duckdb/main/relation/insert_relation.hpp"
2: #include "duckdb/parser/statement/insert_statement.hpp"
3: #include "duckdb/parser/statement/select_statement.hpp"
4: #include "duckdb/parser/parsed_data/create_table_info.hpp"
5: #include "duckdb/planner/binder.hpp"
6: #include "duckdb/main/client_context.hpp"
7: 
8: namespace duckdb {
9: 
10: InsertRelation::InsertRelation(shared_ptr<Relation> child_p, string schema_name, string table_name)
11:     : Relation(child_p->context, RelationType::INSERT_RELATION), child(move(child_p)), schema_name(move(schema_name)),
12:       table_name(move(table_name)) {
13: 	context.TryBindRelation(*this, this->columns);
14: }
15: 
16: BoundStatement InsertRelation::Bind(Binder &binder) {
17: 	InsertStatement stmt;
18: 	auto select = make_unique<SelectStatement>();
19: 	select->node = child->GetQueryNode();
20: 
21: 	stmt.schema = schema_name;
22: 	stmt.table = table_name;
23: 	stmt.select_statement = move(select);
24: 	return binder.Bind((SQLStatement &)stmt);
25: }
26: 
27: const vector<ColumnDefinition> &InsertRelation::Columns() {
28: 	return columns;
29: }
30: 
31: string InsertRelation::ToString(idx_t depth) {
32: 	string str = RenderWhitespace(depth) + "Insert\n";
33: 	return str + child->ToString(depth + 1);
34: }
35: 
36: } // namespace duckdb
[end of src/main/relation/insert_relation.cpp]
[start of src/main/relation/join_relation.cpp]
1: #include "duckdb/main/relation/join_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/expression/star_expression.hpp"
5: #include "duckdb/parser/tableref/joinref.hpp"
6: 
7: namespace duckdb {
8: 
9: JoinRelation::JoinRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p,
10:                            unique_ptr<ParsedExpression> condition_p, JoinType type)
11:     : Relation(left_p->context, RelationType::JOIN_RELATION), left(move(left_p)), right(move(right_p)),
12:       condition(move(condition_p)), join_type(type) {
13: 	if (&left->context != &right->context) {
14: 		throw Exception("Cannot combine LEFT and RIGHT relations of different connections!");
15: 	}
16: 	context.TryBindRelation(*this, this->columns);
17: }
18: 
19: JoinRelation::JoinRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p, vector<string> using_columns_p,
20:                            JoinType type)
21:     : Relation(left_p->context, RelationType::JOIN_RELATION), left(move(left_p)), right(move(right_p)),
22:       using_columns(move(using_columns_p)), join_type(type) {
23: 	if (&left->context != &right->context) {
24: 		throw Exception("Cannot combine LEFT and RIGHT relations of different connections!");
25: 	}
26: 	context.TryBindRelation(*this, this->columns);
27: }
28: 
29: unique_ptr<QueryNode> JoinRelation::GetQueryNode() {
30: 	auto result = make_unique<SelectNode>();
31: 	result->select_list.push_back(make_unique<StarExpression>());
32: 	result->from_table = GetTableRef();
33: 	return move(result);
34: }
35: 
36: unique_ptr<TableRef> JoinRelation::GetTableRef() {
37: 	auto join_ref = make_unique<JoinRef>();
38: 	join_ref->left = left->GetTableRef();
39: 	join_ref->right = right->GetTableRef();
40: 	if (condition) {
41: 		join_ref->condition = condition->Copy();
42: 	}
43: 	join_ref->using_columns = using_columns;
44: 	join_ref->type = join_type;
45: 	return move(join_ref);
46: }
47: 
48: const vector<ColumnDefinition> &JoinRelation::Columns() {
49: 	return this->columns;
50: }
51: 
52: string JoinRelation::ToString(idx_t depth) {
53: 	string str = RenderWhitespace(depth);
54: 	str = "Join " + JoinTypeToString(join_type);
55: 	return str + "\n" + left->ToString(depth + 1) + "\n" + right->ToString(depth + 1);
56: }
57: 
58: } // namespace duckdb
[end of src/main/relation/join_relation.cpp]
[start of src/main/relation/order_relation.cpp]
1: #include "duckdb/main/relation/order_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node.hpp"
4: 
5: namespace duckdb {
6: 
7: OrderRelation::OrderRelation(shared_ptr<Relation> child_p, vector<OrderByNode> orders)
8:     : Relation(child_p->context, RelationType::ORDER_RELATION), orders(move(orders)), child(move(child_p)) {
9: 	// bind the expressions
10: 	vector<ColumnDefinition> dummy_columns;
11: 	context.TryBindRelation(*this, dummy_columns);
12: }
13: 
14: unique_ptr<QueryNode> OrderRelation::GetQueryNode() {
15: 	auto child_node = child->GetQueryNode();
16: 	auto order_node = make_unique<OrderModifier>();
17: 	for (idx_t i = 0; i < orders.size(); i++) {
18: 		order_node->orders.emplace_back(orders[i].type, orders[i].null_order, orders[i].expression->Copy());
19: 	}
20: 	child_node->modifiers.push_back(move(order_node));
21: 	return child_node;
22: }
23: 
24: string OrderRelation::GetAlias() {
25: 	return child->GetAlias();
26: }
27: 
28: const vector<ColumnDefinition> &OrderRelation::Columns() {
29: 	return child->Columns();
30: }
31: 
32: string OrderRelation::ToString(idx_t depth) {
33: 	string str = RenderWhitespace(depth) + "Order [";
34: 	for (idx_t i = 0; i < orders.size(); i++) {
35: 		if (i != 0) {
36: 			str += ", ";
37: 		}
38: 		str += orders[i].expression->ToString() + (orders[i].type == OrderType::ASCENDING ? " ASC" : " DESC");
39: 	}
40: 	str += "]\n";
41: 	return str + child->ToString(depth + 1);
42: }
43: 
44: } // namespace duckdb
[end of src/main/relation/order_relation.cpp]
[start of src/main/relation/projection_relation.cpp]
1: #include "duckdb/main/relation/projection_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: 
6: namespace duckdb {
7: 
8: ProjectionRelation::ProjectionRelation(shared_ptr<Relation> child_p,
9:                                        vector<unique_ptr<ParsedExpression>> parsed_expressions, vector<string> aliases)
10:     : Relation(child_p->context, RelationType::PROJECTION_RELATION), expressions(move(parsed_expressions)),
11:       child(move(child_p)) {
12: 	if (!aliases.empty()) {
13: 		if (aliases.size() != expressions.size()) {
14: 			throw ParserException("Aliases list length must match expression list length!");
15: 		}
16: 		for (idx_t i = 0; i < aliases.size(); i++) {
17: 			expressions[i]->alias = aliases[i];
18: 		}
19: 	}
20: 	// bind the expressions
21: 	context.TryBindRelation(*this, this->columns);
22: }
23: 
24: unique_ptr<QueryNode> ProjectionRelation::GetQueryNode() {
25: 	auto child_ptr = child.get();
26: 	while (child_ptr->InheritsColumnBindings()) {
27: 		child_ptr = child_ptr->ChildRelation();
28: 	}
29: 	unique_ptr<QueryNode> result;
30: 	if (child_ptr->type == RelationType::JOIN_RELATION) {
31: 		// child node is a join: push projection into the child query node
32: 		result = child->GetQueryNode();
33: 	} else {
34: 		// child node is not a join: create a new select node and push the child as a table reference
35: 		auto select = make_unique<SelectNode>();
36: 		select->from_table = child->GetTableRef();
37: 		result = move(select);
38: 	}
39: 	D_ASSERT(result->type == QueryNodeType::SELECT_NODE);
40: 	auto &select_node = (SelectNode &)*result;
41: 	select_node.aggregate_handling = AggregateHandling::NO_AGGREGATES_ALLOWED;
42: 	select_node.select_list.clear();
43: 	for (auto &expr : expressions) {
44: 		select_node.select_list.push_back(expr->Copy());
45: 	}
46: 	return result;
47: }
48: 
49: string ProjectionRelation::GetAlias() {
50: 	return child->GetAlias();
51: }
52: 
53: const vector<ColumnDefinition> &ProjectionRelation::Columns() {
54: 	return columns;
55: }
56: 
57: string ProjectionRelation::ToString(idx_t depth) {
58: 	string str = RenderWhitespace(depth) + "Projection [";
59: 	for (idx_t i = 0; i < expressions.size(); i++) {
60: 		if (i != 0) {
61: 			str += ", ";
62: 		}
63: 		str += expressions[i]->ToString() + " as " + expressions[i]->alias;
64: 	}
65: 	str += "]\n";
66: 	return str + child->ToString(depth + 1);
67: }
68: 
69: } // namespace duckdb
[end of src/main/relation/projection_relation.cpp]
[start of src/main/relation/query_relation.cpp]
1: #include "duckdb/main/relation/query_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/statement/select_statement.hpp"
4: #include "duckdb/parser/tableref/subqueryref.hpp"
5: #include "duckdb/parser/parser.hpp"
6: 
7: namespace duckdb {
8: 
9: QueryRelation::QueryRelation(ClientContext &context, unique_ptr<SelectStatement> select_stmt_p, string alias_p)
10:     : Relation(context, RelationType::QUERY_RELATION), select_stmt(move(select_stmt_p)), alias(move(alias_p)) {
11: 	context.TryBindRelation(*this, this->columns);
12: }
13: 
14: QueryRelation::~QueryRelation() {
15: }
16: 
17: unique_ptr<SelectStatement> QueryRelation::ParseStatement(ClientContext &context, const string &query,
18:                                                           const string &error) {
19: 	Parser parser(context.GetParserOptions());
20: 	parser.ParseQuery(query);
21: 	if (parser.statements.size() != 1) {
22: 		throw ParserException(error);
23: 	}
24: 	if (parser.statements[0]->type != StatementType::SELECT_STATEMENT) {
25: 		throw ParserException(error);
26: 	}
27: 	return unique_ptr_cast<SQLStatement, SelectStatement>(move(parser.statements[0]));
28: }
29: 
30: unique_ptr<SelectStatement> QueryRelation::GetSelectStatement() {
31: 	return unique_ptr_cast<SQLStatement, SelectStatement>(select_stmt->Copy());
32: }
33: 
34: unique_ptr<QueryNode> QueryRelation::GetQueryNode() {
35: 	auto select = GetSelectStatement();
36: 	return move(select->node);
37: }
38: 
39: unique_ptr<TableRef> QueryRelation::GetTableRef() {
40: 	auto subquery_ref = make_unique<SubqueryRef>(GetSelectStatement(), GetAlias());
41: 	return move(subquery_ref);
42: }
43: 
44: string QueryRelation::GetAlias() {
45: 	return alias;
46: }
47: 
48: const vector<ColumnDefinition> &QueryRelation::Columns() {
49: 	return columns;
50: }
51: 
52: string QueryRelation::ToString(idx_t depth) {
53: 	return RenderWhitespace(depth) + "Subquery";
54: }
55: 
56: } // namespace duckdb
[end of src/main/relation/query_relation.cpp]
[start of src/main/relation/read_csv_relation.cpp]
1: #include "duckdb/main/relation/read_csv_relation.hpp"
2: #include "duckdb/parser/tableref/table_function_ref.hpp"
3: #include "duckdb/parser/tableref/basetableref.hpp"
4: #include "duckdb/parser/query_node/select_node.hpp"
5: #include "duckdb/parser/expression/star_expression.hpp"
6: #include "duckdb/parser/expression/columnref_expression.hpp"
7: #include "duckdb/parser/expression/comparison_expression.hpp"
8: #include "duckdb/parser/expression/constant_expression.hpp"
9: #include "duckdb/parser/expression/function_expression.hpp"
10: #include "duckdb/common/string_util.hpp"
11: 
12: namespace duckdb {
13: 
14: ReadCSVRelation::ReadCSVRelation(ClientContext &context, string csv_file_p, vector<ColumnDefinition> columns_p,
15:                                  bool auto_detect, string alias_p)
16:     : Relation(context, RelationType::READ_CSV_RELATION), csv_file(move(csv_file_p)), auto_detect(auto_detect),
17:       alias(move(alias_p)), columns(move(columns_p)) {
18: 	if (alias.empty()) {
19: 		alias = StringUtil::Split(csv_file, ".")[0];
20: 	}
21: }
22: 
23: unique_ptr<QueryNode> ReadCSVRelation::GetQueryNode() {
24: 	auto result = make_unique<SelectNode>();
25: 	result->select_list.push_back(make_unique<StarExpression>());
26: 	result->from_table = GetTableRef();
27: 	return move(result);
28: }
29: 
30: unique_ptr<TableRef> ReadCSVRelation::GetTableRef() {
31: 	auto table_ref = make_unique<TableFunctionRef>();
32: 	table_ref->alias = alias;
33: 	vector<unique_ptr<ParsedExpression>> children;
34: 	// CSV file
35: 	children.push_back(make_unique<ConstantExpression>(Value(csv_file)));
36: 	if (!auto_detect) {
37: 		// parameters
38: 		child_list_t<Value> column_names;
39: 		for (idx_t i = 0; i < columns.size(); i++) {
40: 			column_names.push_back(make_pair(columns[i].name, Value(columns[i].type.ToString())));
41: 		}
42: 		auto colnames = make_unique<ConstantExpression>(Value::STRUCT(move(column_names)));
43: 		children.push_back(make_unique<ComparisonExpression>(
44: 		    ExpressionType::COMPARE_EQUAL, make_unique<ColumnRefExpression>("columns"), move(colnames)));
45: 	} else {
46: 		children.push_back(make_unique<ComparisonExpression>(ExpressionType::COMPARE_EQUAL,
47: 		                                                     make_unique<ColumnRefExpression>("auto_detect"),
48: 		                                                     make_unique<ConstantExpression>(Value::BOOLEAN(true))));
49: 	}
50: 	table_ref->function = make_unique<FunctionExpression>("read_csv", move(children));
51: 	return move(table_ref);
52: }
53: 
54: string ReadCSVRelation::GetAlias() {
55: 	return alias;
56: }
57: 
58: const vector<ColumnDefinition> &ReadCSVRelation::Columns() {
59: 	return columns;
60: }
61: 
62: string ReadCSVRelation::ToString(idx_t depth) {
63: 	return RenderWhitespace(depth) + "Read CSV [" + csv_file + "]";
64: }
65: 
66: } // namespace duckdb
[end of src/main/relation/read_csv_relation.cpp]
[start of src/main/relation/setop_relation.cpp]
1: #include "duckdb/main/relation/setop_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node/set_operation_node.hpp"
4: 
5: namespace duckdb {
6: 
7: SetOpRelation::SetOpRelation(shared_ptr<Relation> left_p, shared_ptr<Relation> right_p, SetOperationType setop_type_p)
8:     : Relation(left_p->context, RelationType::SET_OPERATION_RELATION), left(move(left_p)), right(move(right_p)),
9:       setop_type(setop_type_p) {
10: 	if (&left->context != &right->context) {
11: 		throw Exception("Cannot combine LEFT and RIGHT relations of different connections!");
12: 	}
13: 	vector<ColumnDefinition> dummy_columns;
14: 	context.TryBindRelation(*this, dummy_columns);
15: }
16: 
17: unique_ptr<QueryNode> SetOpRelation::GetQueryNode() {
18: 	auto result = make_unique<SetOperationNode>();
19: 	result->left = left->GetQueryNode();
20: 	result->right = right->GetQueryNode();
21: 	result->setop_type = setop_type;
22: 	return move(result);
23: }
24: 
25: string SetOpRelation::GetAlias() {
26: 	return left->GetAlias();
27: }
28: 
29: const vector<ColumnDefinition> &SetOpRelation::Columns() {
30: 	return left->Columns();
31: }
32: 
33: string SetOpRelation::ToString(idx_t depth) {
34: 	string str = RenderWhitespace(depth);
35: 	switch (setop_type) {
36: 	case SetOperationType::UNION:
37: 		str += "Union";
38: 		break;
39: 	case SetOperationType::EXCEPT:
40: 		str += "Except";
41: 		break;
42: 	case SetOperationType::INTERSECT:
43: 		str += "Intersect";
44: 		break;
45: 	default:
46: 		throw InternalException("Unknown setop type");
47: 	}
48: 	return str + "\n" + left->ToString(depth + 1) + right->ToString(depth + 1);
49: }
50: 
51: } // namespace duckdb
[end of src/main/relation/setop_relation.cpp]
[start of src/main/relation/subquery_relation.cpp]
1: #include "duckdb/main/relation/subquery_relation.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/query_node.hpp"
4: 
5: namespace duckdb {
6: 
7: SubqueryRelation::SubqueryRelation(shared_ptr<Relation> child_p, string alias_p)
8:     : Relation(child_p->context, RelationType::SUBQUERY_RELATION), child(move(child_p)), alias(move(alias_p)) {
9: 	vector<ColumnDefinition> dummy_columns;
10: 	context.TryBindRelation(*this, dummy_columns);
11: }
12: 
13: unique_ptr<QueryNode> SubqueryRelation::GetQueryNode() {
14: 	return child->GetQueryNode();
15: }
16: 
17: string SubqueryRelation::GetAlias() {
18: 	return alias;
19: }
20: 
21: const vector<ColumnDefinition> &SubqueryRelation::Columns() {
22: 	return child->Columns();
23: }
24: 
25: string SubqueryRelation::ToString(idx_t depth) {
26: 	return child->ToString(depth);
27: }
28: 
29: } // namespace duckdb
[end of src/main/relation/subquery_relation.cpp]
[start of src/main/relation/table_function_relation.cpp]
1: #include "duckdb/main/relation/table_function_relation.hpp"
2: #include "duckdb/parser/tableref/basetableref.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/expression/star_expression.hpp"
5: #include "duckdb/parser/tableref/table_function_ref.hpp"
6: #include "duckdb/parser/expression/constant_expression.hpp"
7: #include "duckdb/parser/expression/function_expression.hpp"
8: #include "duckdb/parser/expression/subquery_expression.hpp"
9: #include "duckdb/main/client_context.hpp"
10: #include "duckdb/parser/expression/comparison_expression.hpp"
11: #include "duckdb/parser/expression/columnref_expression.hpp"
12: 
13: namespace duckdb {
14: 
15: TableFunctionRelation::TableFunctionRelation(ClientContext &context, string name_p, vector<Value> parameters_p,
16:                                              named_parameter_map_t named_parameters,
17:                                              shared_ptr<Relation> input_relation_p)
18:     : Relation(context, RelationType::TABLE_FUNCTION_RELATION), name(move(name_p)), parameters(move(parameters_p)),
19:       named_parameters(move(named_parameters)), input_relation(move(input_relation_p)) {
20: 	context.TryBindRelation(*this, this->columns);
21: }
22: TableFunctionRelation::TableFunctionRelation(ClientContext &context, string name_p, vector<Value> parameters_p,
23: 
24:                                              shared_ptr<Relation> input_relation_p)
25:     : Relation(context, RelationType::TABLE_FUNCTION_RELATION), name(move(name_p)), parameters(move(parameters_p)),
26:       input_relation(move(input_relation_p)) {
27: 	context.TryBindRelation(*this, this->columns);
28: }
29: 
30: unique_ptr<QueryNode> TableFunctionRelation::GetQueryNode() {
31: 	auto result = make_unique<SelectNode>();
32: 	result->select_list.push_back(make_unique<StarExpression>());
33: 	result->from_table = GetTableRef();
34: 	return move(result);
35: }
36: 
37: unique_ptr<TableRef> TableFunctionRelation::GetTableRef() {
38: 	vector<unique_ptr<ParsedExpression>> children;
39: 	if (input_relation) { // input relation becomes first parameter if present, always
40: 		auto subquery = make_unique<SubqueryExpression>();
41: 		subquery->subquery = make_unique<SelectStatement>();
42: 		subquery->subquery->node = input_relation->GetQueryNode();
43: 		subquery->subquery_type = SubqueryType::SCALAR;
44: 		children.push_back(move(subquery));
45: 	}
46: 	for (auto &parameter : parameters) {
47: 		children.push_back(make_unique<ConstantExpression>(parameter));
48: 	}
49: 
50: 	for (auto &parameter : named_parameters) {
51: 		// Hackity-hack some comparisons with column refs
52: 		// This is all but pretty, basically the named parameter is the column, the table is empty because that's what
53: 		// the function binder likes
54: 		auto column_ref = make_unique<ColumnRefExpression>(parameter.first);
55: 		auto constant_value = make_unique<ConstantExpression>(parameter.second);
56: 		auto comparison =
57: 		    make_unique<ComparisonExpression>(ExpressionType::COMPARE_EQUAL, move(column_ref), move(constant_value));
58: 		children.push_back(move(comparison));
59: 	}
60: 
61: 	auto table_function = make_unique<TableFunctionRef>();
62: 	auto function = make_unique<FunctionExpression>(name, move(children));
63: 	table_function->function = move(function);
64: 	return move(table_function);
65: }
66: 
67: string TableFunctionRelation::GetAlias() {
68: 	return name;
69: }
70: 
71: const vector<ColumnDefinition> &TableFunctionRelation::Columns() {
72: 	return columns;
73: }
74: 
75: string TableFunctionRelation::ToString(idx_t depth) {
76: 	string function_call = name + "(";
77: 	for (idx_t i = 0; i < parameters.size(); i++) {
78: 		if (i > 0) {
79: 			function_call += ", ";
80: 		}
81: 		function_call += parameters[i].ToString();
82: 	}
83: 	function_call += ")";
84: 	return RenderWhitespace(depth) + function_call;
85: }
86: 
87: } // namespace duckdb
[end of src/main/relation/table_function_relation.cpp]
[start of src/main/relation/table_relation.cpp]
1: #include "duckdb/main/relation/table_relation.hpp"
2: #include "duckdb/parser/tableref/basetableref.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/expression/star_expression.hpp"
5: #include "duckdb/main/relation/delete_relation.hpp"
6: #include "duckdb/main/relation/update_relation.hpp"
7: #include "duckdb/parser/parser.hpp"
8: #include "duckdb/main/client_context.hpp"
9: 
10: namespace duckdb {
11: 
12: TableRelation::TableRelation(ClientContext &context, unique_ptr<TableDescription> description)
13:     : Relation(context, RelationType::TABLE_RELATION), description(move(description)) {
14: }
15: 
16: unique_ptr<QueryNode> TableRelation::GetQueryNode() {
17: 	auto result = make_unique<SelectNode>();
18: 	result->select_list.push_back(make_unique<StarExpression>());
19: 	result->from_table = GetTableRef();
20: 	return move(result);
21: }
22: 
23: unique_ptr<TableRef> TableRelation::GetTableRef() {
24: 	auto table_ref = make_unique<BaseTableRef>();
25: 	table_ref->schema_name = description->schema;
26: 	table_ref->table_name = description->table;
27: 	return move(table_ref);
28: }
29: 
30: string TableRelation::GetAlias() {
31: 	return description->table;
32: }
33: 
34: const vector<ColumnDefinition> &TableRelation::Columns() {
35: 	return description->columns;
36: }
37: 
38: string TableRelation::ToString(idx_t depth) {
39: 	return RenderWhitespace(depth) + "Scan Table [" + description->table + "]";
40: }
41: 
42: static unique_ptr<ParsedExpression> ParseCondition(ClientContext &context, const string &condition) {
43: 	if (!condition.empty()) {
44: 		auto expression_list = Parser::ParseExpressionList(condition, context.GetParserOptions());
45: 		if (expression_list.size() != 1) {
46: 			throw ParserException("Expected a single expression as filter condition");
47: 		}
48: 		return move(expression_list[0]);
49: 	} else {
50: 		return nullptr;
51: 	}
52: }
53: 
54: void TableRelation::Update(const string &update_list, const string &condition) {
55: 	vector<string> update_columns;
56: 	vector<unique_ptr<ParsedExpression>> expressions;
57: 	auto cond = ParseCondition(context, condition);
58: 	Parser::ParseUpdateList(update_list, update_columns, expressions, context.GetParserOptions());
59: 	auto update = make_shared<UpdateRelation>(context, move(cond), description->schema, description->table,
60: 	                                          move(update_columns), move(expressions));
61: 	update->Execute();
62: }
63: 
64: void TableRelation::Delete(const string &condition) {
65: 	auto cond = ParseCondition(context, condition);
66: 	auto del = make_shared<DeleteRelation>(context, move(cond), description->schema, description->table);
67: 	del->Execute();
68: }
69: 
70: } // namespace duckdb
[end of src/main/relation/table_relation.cpp]
[start of src/main/relation/update_relation.cpp]
1: #include "duckdb/main/relation/update_relation.hpp"
2: #include "duckdb/parser/statement/update_statement.hpp"
3: #include "duckdb/planner/binder.hpp"
4: #include "duckdb/main/client_context.hpp"
5: #include "duckdb/parser/tableref/basetableref.hpp"
6: 
7: namespace duckdb {
8: 
9: UpdateRelation::UpdateRelation(ClientContext &context, unique_ptr<ParsedExpression> condition_p, string schema_name_p,
10:                                string table_name_p, vector<string> update_columns_p,
11:                                vector<unique_ptr<ParsedExpression>> expressions_p)
12:     : Relation(context, RelationType::UPDATE_RELATION), condition(move(condition_p)), schema_name(move(schema_name_p)),
13:       table_name(move(table_name_p)), update_columns(move(update_columns_p)), expressions(move(expressions_p)) {
14: 	D_ASSERT(update_columns.size() == expressions.size());
15: 	context.TryBindRelation(*this, this->columns);
16: }
17: 
18: BoundStatement UpdateRelation::Bind(Binder &binder) {
19: 	auto basetable = make_unique<BaseTableRef>();
20: 	basetable->schema_name = schema_name;
21: 	basetable->table_name = table_name;
22: 
23: 	UpdateStatement stmt;
24: 	stmt.condition = condition ? condition->Copy() : nullptr;
25: 	stmt.table = move(basetable);
26: 	stmt.columns = update_columns;
27: 	for (auto &expr : expressions) {
28: 		stmt.expressions.push_back(expr->Copy());
29: 	}
30: 	return binder.Bind((SQLStatement &)stmt);
31: }
32: 
33: const vector<ColumnDefinition> &UpdateRelation::Columns() {
34: 	return columns;
35: }
36: 
37: string UpdateRelation::ToString(idx_t depth) {
38: 	string str = RenderWhitespace(depth) + "UPDATE " + table_name + " SET\n";
39: 	for (idx_t i = 0; i < expressions.size(); i++) {
40: 		str += update_columns[i] + " = " + expressions[i]->ToString() + "\n";
41: 	}
42: 	if (condition) {
43: 		str += "WHERE " + condition->ToString() + "\n";
44: 	}
45: 	return str;
46: }
47: 
48: } // namespace duckdb
[end of src/main/relation/update_relation.cpp]
[start of src/main/relation/value_relation.cpp]
1: #include "duckdb/main/relation/value_relation.hpp"
2: #include "duckdb/parser/query_node/select_node.hpp"
3: #include "duckdb/parser/expression/star_expression.hpp"
4: #include "duckdb/parser/tableref/expressionlistref.hpp"
5: #include "duckdb/parser/expression/constant_expression.hpp"
6: #include "duckdb/main/client_context.hpp"
7: #include "duckdb/parser/parser.hpp"
8: 
9: namespace duckdb {
10: 
11: ValueRelation::ValueRelation(ClientContext &context, const vector<vector<Value>> &values, vector<string> names_p,
12:                              string alias_p)
13:     : Relation(context, RelationType::VALUE_LIST_RELATION), names(move(names_p)), alias(move(alias_p)) {
14: 	// create constant expressions for the values
15: 	for (idx_t row_idx = 0; row_idx < values.size(); row_idx++) {
16: 		auto &list = values[row_idx];
17: 		vector<unique_ptr<ParsedExpression>> expressions;
18: 		for (idx_t col_idx = 0; col_idx < list.size(); col_idx++) {
19: 			expressions.push_back(make_unique<ConstantExpression>(list[col_idx]));
20: 		}
21: 		this->expressions.push_back(move(expressions));
22: 	}
23: 	context.TryBindRelation(*this, this->columns);
24: }
25: 
26: ValueRelation::ValueRelation(ClientContext &context, const string &values_list, vector<string> names_p, string alias_p)
27:     : Relation(context, RelationType::VALUE_LIST_RELATION), names(move(names_p)), alias(move(alias_p)) {
28: 	this->expressions = Parser::ParseValuesList(values_list, context.GetParserOptions());
29: 	context.TryBindRelation(*this, this->columns);
30: }
31: 
32: unique_ptr<QueryNode> ValueRelation::GetQueryNode() {
33: 	auto result = make_unique<SelectNode>();
34: 	result->select_list.push_back(make_unique<StarExpression>());
35: 	result->from_table = GetTableRef();
36: 	return move(result);
37: }
38: 
39: unique_ptr<TableRef> ValueRelation::GetTableRef() {
40: 	auto table_ref = make_unique<ExpressionListRef>();
41: 	// set the expected types/names
42: 	if (columns.empty()) {
43: 		// no columns yet: only set up names
44: 		for (idx_t i = 0; i < names.size(); i++) {
45: 			table_ref->expected_names.push_back(names[i]);
46: 		}
47: 	} else {
48: 		for (idx_t i = 0; i < columns.size(); i++) {
49: 			table_ref->expected_names.push_back(columns[i].name);
50: 			table_ref->expected_types.push_back(columns[i].type);
51: 			D_ASSERT(names.size() == 0 || columns[i].name == names[i]);
52: 		}
53: 	}
54: 	// copy the expressions
55: 	for (auto &expr_list : expressions) {
56: 		vector<unique_ptr<ParsedExpression>> copied_list;
57: 		copied_list.reserve(expr_list.size());
58: 		for (auto &expr : expr_list) {
59: 			copied_list.push_back(expr->Copy());
60: 		}
61: 		table_ref->values.push_back(move(copied_list));
62: 	}
63: 	table_ref->alias = GetAlias();
64: 	return move(table_ref);
65: }
66: 
67: string ValueRelation::GetAlias() {
68: 	return alias;
69: }
70: 
71: const vector<ColumnDefinition> &ValueRelation::Columns() {
72: 	return columns;
73: }
74: 
75: string ValueRelation::ToString(idx_t depth) {
76: 	string str = RenderWhitespace(depth) + "Values ";
77: 	for (idx_t row_idx = 0; row_idx < expressions.size(); row_idx++) {
78: 		auto &list = expressions[row_idx];
79: 		str += row_idx > 0 ? ", (" : "(";
80: 		for (idx_t col_idx = 0; col_idx < list.size(); col_idx++) {
81: 			str += col_idx > 0 ? ", " : "";
82: 			str += list[col_idx]->ToString();
83: 		}
84: 		str += ")";
85: 	}
86: 	str += "\n";
87: 	return str;
88: }
89: 
90: } // namespace duckdb
[end of src/main/relation/value_relation.cpp]
[start of src/main/relation/view_relation.cpp]
1: #include "duckdb/main/relation/view_relation.hpp"
2: #include "duckdb/parser/tableref/basetableref.hpp"
3: #include "duckdb/parser/query_node/select_node.hpp"
4: #include "duckdb/parser/expression/star_expression.hpp"
5: #include "duckdb/main/client_context.hpp"
6: #include "duckdb/parser/parser.hpp"
7: 
8: namespace duckdb {
9: 
10: ViewRelation::ViewRelation(ClientContext &context, string schema_name_p, string view_name_p)
11:     : Relation(context, RelationType::VIEW_RELATION), schema_name(move(schema_name_p)), view_name(move(view_name_p)) {
12: 	context.TryBindRelation(*this, this->columns);
13: }
14: 
15: unique_ptr<QueryNode> ViewRelation::GetQueryNode() {
16: 	auto result = make_unique<SelectNode>();
17: 	result->select_list.push_back(make_unique<StarExpression>());
18: 	result->from_table = GetTableRef();
19: 	return move(result);
20: }
21: 
22: unique_ptr<TableRef> ViewRelation::GetTableRef() {
23: 	auto table_ref = make_unique<BaseTableRef>();
24: 	table_ref->schema_name = schema_name;
25: 	table_ref->table_name = view_name;
26: 	return move(table_ref);
27: }
28: 
29: string ViewRelation::GetAlias() {
30: 	return view_name;
31: }
32: 
33: const vector<ColumnDefinition> &ViewRelation::Columns() {
34: 	return columns;
35: }
36: 
37: string ViewRelation::ToString(idx_t depth) {
38: 	return RenderWhitespace(depth) + "View [" + view_name + "]";
39: }
40: 
41: } // namespace duckdb
[end of src/main/relation/view_relation.cpp]
[start of src/main/relation/write_csv_relation.cpp]
1: #include "duckdb/main/relation/write_csv_relation.hpp"
2: #include "duckdb/parser/statement/copy_statement.hpp"
3: #include "duckdb/parser/parsed_data/create_table_info.hpp"
4: #include "duckdb/planner/binder.hpp"
5: #include "duckdb/main/client_context.hpp"
6: 
7: namespace duckdb {
8: 
9: WriteCSVRelation::WriteCSVRelation(shared_ptr<Relation> child_p, string csv_file_p)
10:     : Relation(child_p->context, RelationType::WRITE_CSV_RELATION), child(move(child_p)), csv_file(move(csv_file_p)) {
11: 	context.TryBindRelation(*this, this->columns);
12: }
13: 
14: BoundStatement WriteCSVRelation::Bind(Binder &binder) {
15: 	CopyStatement copy;
16: 	copy.select_statement = child->GetQueryNode();
17: 	auto info = make_unique<CopyInfo>();
18: 	info->is_from = false;
19: 	info->file_path = csv_file;
20: 	info->format = "csv";
21: 	copy.info = move(info);
22: 	return binder.Bind((SQLStatement &)copy);
23: }
24: 
25: const vector<ColumnDefinition> &WriteCSVRelation::Columns() {
26: 	return columns;
27: }
28: 
29: string WriteCSVRelation::ToString(idx_t depth) {
30: 	string str = RenderWhitespace(depth) + "Write To CSV [" + csv_file + "]\n";
31: 	return str + child->ToString(depth + 1);
32: }
33: 
34: } // namespace duckdb
[end of src/main/relation/write_csv_relation.cpp]
[start of src/parser/transform/statement/transform_show.cpp]
1: #include "duckdb/parser/statement/pragma_statement.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/parser/statement/show_statement.hpp"
4: #include "duckdb/parser/query_node/select_node.hpp"
5: #include "duckdb/parser/expression/star_expression.hpp"
6: #include "duckdb/parser/tableref/basetableref.hpp"
7: 
8: namespace duckdb {
9: 
10: unique_ptr<SQLStatement> Transformer::TransformShow(duckdb_libpgquery::PGNode *node) {
11: 	// we transform SHOW x into PRAGMA SHOW('x')
12: 
13: 	auto stmt = reinterpret_cast<duckdb_libpgquery::PGVariableShowStmt *>(node);
14: 	if (stmt->is_summary) {
15: 		auto result = make_unique<ShowStatement>();
16: 		auto &info = *result->info;
17: 		info.is_summary = stmt->is_summary;
18: 
19: 		auto select = make_unique<SelectNode>();
20: 		select->select_list.push_back(make_unique<StarExpression>());
21: 		auto basetable = make_unique<BaseTableRef>();
22: 		basetable->table_name = stmt->name;
23: 		select->from_table = move(basetable);
24: 
25: 		info.query = move(select);
26: 		return move(result);
27: 	}
28: 
29: 	auto result = make_unique<PragmaStatement>();
30: 	auto &info = *result->info;
31: 
32: 	if (string(stmt->name) == "tables") {
33: 		// show all tables
34: 		info.name = "show_tables";
35: 	} else {
36: 		// show one specific table
37: 		info.name = "show";
38: 		info.parameters.emplace_back(stmt->name);
39: 	}
40: 
41: 	return move(result);
42: }
43: 
44: } // namespace duckdb
[end of src/parser/transform/statement/transform_show.cpp]
[start of src/planner/binder/expression/bind_unnest_expression.cpp]
1: #include "duckdb/catalog/catalog_entry/aggregate_function_catalog_entry.hpp"
2: #include "duckdb/main/client_context.hpp"
3: #include "duckdb/parser/expression/function_expression.hpp"
4: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
5: #include "duckdb/planner/expression/bound_columnref_expression.hpp"
6: #include "duckdb/planner/expression_binder/aggregate_binder.hpp"
7: #include "duckdb/planner/expression_binder/select_binder.hpp"
8: #include "duckdb/planner/query_node/bound_select_node.hpp"
9: #include "duckdb/planner/expression/bound_unnest_expression.hpp"
10: #include "duckdb/planner/binder.hpp"
11: 
12: namespace duckdb {
13: 
14: BindResult SelectBinder::BindUnnest(FunctionExpression &function, idx_t depth) {
15: 	// bind the children of the function expression
16: 	string error;
17: 	if (function.children.size() != 1) {
18: 		return BindResult(binder.FormatError(function, "Unnest() needs exactly one child expressions"));
19: 	}
20: 	BindChild(function.children[0], depth, error);
21: 	if (!error.empty()) {
22: 		// failed to bind
23: 		// try to bind correlated columns manually
24: 		if (!BindCorrelatedColumns(function.children[0])) {
25: 			return BindResult(error);
26: 		}
27: 		auto bound_expr = (BoundExpression *)function.children[0].get();
28: 		ExtractCorrelatedExpressions(binder, *bound_expr->expr);
29: 	}
30: 	auto &child = (BoundExpression &)*function.children[0];
31: 	auto &child_type = child.expr->return_type;
32: 	if (child_type.id() != LogicalTypeId::LIST) {
33: 		return BindResult(binder.FormatError(function, "Unnest() can only be applied to lists"));
34: 	}
35: 	if (depth > 0) {
36: 		throw BinderException(binder.FormatError(function, "Unnest() for correlated expressions is not supported yet"));
37: 	}
38: 	auto &return_type = ListType::GetChildType(child_type);
39: 
40: 	auto result = make_unique<BoundUnnestExpression>(return_type);
41: 	result->child = move(child.expr);
42: 
43: 	auto unnest_index = node.unnests.size();
44: 	node.unnests.push_back(move(result));
45: 
46: 	// TODO what if we have multiple unnests in the same projection list? ignore for now
47: 
48: 	// now create a column reference referring to the unnest
49: 	auto colref = make_unique<BoundColumnRefExpression>(
50: 	    function.alias.empty() ? node.unnests[unnest_index]->ToString() : function.alias, return_type,
51: 	    ColumnBinding(node.unnest_index, unnest_index), depth);
52: 	return BindResult(move(colref));
53: }
54: 
55: } // namespace duckdb
[end of src/planner/binder/expression/bind_unnest_expression.cpp]
[start of third_party/libpg_query/grammar/statements/variable_show.y]
1: /* allows SET or RESET without LOCAL */
2: VariableShowStmt:
3: 			show_or_describe SelectStmt {
4: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
5: 				n->stmt = $2;
6: 				n->name = (char*) "select";
7: 				n->is_summary = 0;
8: 				$$ = (PGNode *) n;
9: 			}
10: 		 | SUMMARIZE SelectStmt {
11: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
12: 				n->stmt = $2;
13: 				n->name = (char*) "select";
14: 				n->is_summary = 1;
15: 				$$ = (PGNode *) n;
16: 			}
17: 		 | SUMMARIZE var_name
18: 			{
19: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
20: 				n->name = $2;
21: 				n->is_summary = 1;
22: 				$$ = (PGNode *) n;
23: 			}
24: 		 | show_or_describe var_name
25: 			{
26: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
27: 				n->name = $2;
28: 				n->is_summary = 0;
29: 				$$ = (PGNode *) n;
30: 			}
31: 		| show_or_describe TIME ZONE
32: 			{
33: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
34: 				n->name = (char*) "timezone";
35: 				n->is_summary = 0;
36: 				$$ = (PGNode *) n;
37: 			}
38: 		| show_or_describe TRANSACTION ISOLATION LEVEL
39: 			{
40: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
41: 				n->name = (char*) "transaction_isolation";
42: 				n->is_summary = 0;
43: 				$$ = (PGNode *) n;
44: 			}
45: 		| show_or_describe ALL
46: 			{
47: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
48: 				n->name = (char*) "all";
49: 				n->is_summary = 0;
50: 				$$ = (PGNode *) n;
51: 			}
52: 
53: 		;
54: 
55: show_or_describe: SHOW | DESCRIBE
56: 
57: var_name:	ColId								{ $$ = $1; }
58: 			| var_name '.' ColId
59: 				{ $$ = psprintf("%s.%s", $1, $3); }
60: 		;
[end of third_party/libpg_query/grammar/statements/variable_show.y]
[start of third_party/libpg_query/include/pg_functions.hpp]
1: #pragma once
2: 
3: #include <stdlib.h>
4: 
5: #include "pg_definitions.hpp"
6: 
7: #include "nodes/pg_list.hpp"
8: #include "nodes/parsenodes.hpp"
9: 
10: namespace duckdb_libpgquery {
11: 
12: typedef struct parse_result_str parse_result;
13: struct parse_result_str {
14: 	bool success;
15: 	PGList *parse_tree;
16: 	char *error_message;
17: 	int error_location;
18: };
19: 
20: void pg_parser_init();
21: void pg_parser_parse(const char *query, parse_result *res);
22: void pg_parser_cleanup();
23: 
24: // error handling
25: int ereport(int code, ...);
26: 
27: void elog(int code, const char *fmt, ...);
28: int errcode(int sqlerrcode);
29: int errmsg(const char *fmt, ...);
30: int errhint(const char *msg);
31: int errmsg_internal(const char *fmt, ...);
32: int errdetail(const char *fmt, ...);
33: int errposition(int cursorpos);
34: char *psprintf(const char *fmt, ...);
35: 
36: // memory mgmt
37: char *pstrdup(const char *in);
38: void *palloc(size_t n);
39: void pfree(void *ptr);
40: void *palloc0fast(size_t n);
41: void *repalloc(void *ptr, size_t n);
42: 
43: char *NameListToString(PGList *names);
44: void *copyObject(const void *from);
45: bool equal(const void *a, const void *b);
46: int exprLocation(const PGNode *expr);
47: 
48: // string gunk
49: int pg_database_encoding_max_length(void);
50: bool pg_verifymbstr(const char *mbstr, int len, bool noError);
51: int pg_mbstrlen_with_len(const char *mbstr, int len);
52: int pg_mbcliplen(const char *mbstr, int len, int limit);
53: int pg_mblen(const char *mbstr);
54: 
55: PGDefElem *defWithOids(bool value);
56: 
57: typedef unsigned int pg_wchar;
58: unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string);
59: 
60: }
[end of third_party/libpg_query/include/pg_functions.hpp]
[start of third_party/libpg_query/pg_functions.cpp]
1: #include <stdexcept>
2: #include <string>
3: #include <thread>
4: #include <mutex>
5: #include "pg_functions.hpp"
6: #include "parser/parser.hpp"
7: #include <stdarg.h>
8: #include <mutex>
9: #include <cstring>
10: 
11: 
12: // max parse tree size approx 100 MB, should be enough
13: #define PG_MALLOC_SIZE 10240
14: 
15: namespace duckdb_libpgquery {
16: 
17: typedef struct pg_parser_state_str parser_state;
18: struct pg_parser_state_str {
19: 	int pg_err_code;
20: 	int pg_err_pos;
21: 	char pg_err_msg[BUFSIZ];
22: 
23: 	size_t malloc_pos;
24: 	size_t malloc_ptr_idx;
25: 	char **malloc_ptrs;
26: 	size_t malloc_ptr_size;
27: };
28: 
29: static __thread parser_state pg_parser_state;
30: 
31: #ifndef __GNUC__
32: __thread PGNode *duckdb_newNodeMacroHolder;
33: #endif
34: 
35: static void allocate_new(parser_state *state, size_t n) {
36: 	if (state->malloc_ptr_idx >= state->malloc_ptr_size) {
37: 		size_t new_size = state->malloc_ptr_size * 2;
38: 		auto new_malloc_ptrs = (char **) malloc(sizeof(char *) * new_size);
39: 		memcpy(new_malloc_ptrs, state->malloc_ptrs, state->malloc_ptr_size * sizeof(char*));
40: 		free(state->malloc_ptrs);
41: 		state->malloc_ptr_size = new_size;
42: 		state->malloc_ptrs = new_malloc_ptrs;
43: 	}
44: 	if (n < PG_MALLOC_SIZE) {
45: 		n = PG_MALLOC_SIZE;
46: 	}
47: 	char *base_ptr = (char *)malloc(n);
48: 	if (!base_ptr) {
49: 		throw std::runtime_error("Memory allocation failure");
50: 	}
51: 	state->malloc_ptrs[state->malloc_ptr_idx] = base_ptr;
52: 	state->malloc_ptr_idx++;
53: 	state->malloc_pos = 0;
54: }
55: 
56: void *palloc(size_t n) {
57: 	// we need to align our pointers for the sanitizer
58: 	auto allocate_n = n + sizeof(size_t);
59: 	auto aligned_n = ((allocate_n + 7) / 8) * 8;
60: 	if (pg_parser_state.malloc_pos + aligned_n > PG_MALLOC_SIZE) {
61: 		allocate_new(&pg_parser_state, aligned_n);
62: 	}
63: 
64: 	// store the length of the allocation
65: 	char *base_ptr = pg_parser_state.malloc_ptrs[pg_parser_state.malloc_ptr_idx - 1] + pg_parser_state.malloc_pos;
66: 	memcpy(base_ptr, &n, sizeof(size_t));
67: 	// store the actual pointer
68: 	char *ptr = (char*) base_ptr + sizeof(size_t);
69: 	memset(ptr, 0, n);
70: 	pg_parser_state.malloc_pos += aligned_n;
71: 	return ptr;
72: }
73: 
74: void pg_parser_init() {
75: 	pg_parser_state.pg_err_code = PGUNDEFINED;
76: 	pg_parser_state.pg_err_msg[0] = '\0';
77: 
78: 	pg_parser_state.malloc_ptr_size = 4;
79: 	pg_parser_state.malloc_ptrs = (char **) malloc(sizeof(char *) * pg_parser_state.malloc_ptr_size);
80: 	pg_parser_state.malloc_ptr_idx = 0;
81: 	allocate_new(&pg_parser_state, 1);
82: }
83: 
84: void pg_parser_parse(const char *query, parse_result *res) {
85: 	res->parse_tree = nullptr;
86: 	try {
87: 		res->parse_tree = duckdb_libpgquery::raw_parser(query);
88: 		res->success = pg_parser_state.pg_err_code == PGUNDEFINED;
89: 	} catch (std::exception &ex) {
90: 		res->success = false;
91: 		// copy the error message of the exception
92: 		auto error_message = ex.what();
93: 		uint32_t pos = 0;
94: 		while(pos < 1023 && error_message[pos]) {
95: 			pg_parser_state.pg_err_msg[pos] = error_message[pos];
96: 			pos++;
97: 		}
98: 		pg_parser_state.pg_err_msg[pos] = '\0';
99: 	}
100: 	res->error_message = pg_parser_state.pg_err_msg;
101: 	res->error_location = pg_parser_state.pg_err_pos;
102: }
103: 
104: void pg_parser_cleanup() {
105: 	for (size_t ptr_idx = 0; ptr_idx < pg_parser_state.malloc_ptr_idx; ptr_idx++) {
106: 		char *ptr = pg_parser_state.malloc_ptrs[ptr_idx];
107: 		if (ptr) {
108: 			free(ptr);
109: 			pg_parser_state.malloc_ptrs[ptr_idx] = nullptr;
110: 		}
111: 	}
112: 	free(pg_parser_state.malloc_ptrs);
113: }
114: 
115: int ereport(int code, ...) {
116: 	std::string err = "parser error : " + std::string(pg_parser_state.pg_err_msg);
117: 	throw std::runtime_error(err);
118: }
119: void elog(int code, const char *fmt, ...) {
120: 	throw std::runtime_error("elog NOT IMPLEMENTED");
121: }
122: int errcode(int sqlerrcode) {
123: 	pg_parser_state.pg_err_code = sqlerrcode;
124: 	return 1;
125: }
126: int errmsg(const char *fmt, ...) {
127: 	va_list argptr;
128: 	va_start(argptr, fmt);
129: 	vsnprintf(pg_parser_state.pg_err_msg, BUFSIZ, fmt, argptr);
130: 	va_end(argptr);
131: 	return 1;
132: }
133: int errhint(const char *msg) {
134: 	throw std::runtime_error("errhint NOT IMPLEMENTED");
135: }
136: int errmsg_internal(const char *fmt, ...) {
137: 	throw std::runtime_error("errmsg_internal NOT IMPLEMENTED");
138: }
139: int errdetail(const char *fmt, ...) {
140: 	throw std::runtime_error("errdetail NOT IMPLEMENTED");
141: }
142: int errposition(int cursorpos) {
143: 	pg_parser_state.pg_err_pos = cursorpos;
144: 	return 1;
145: }
146: 
147: char *psprintf(const char *fmt, ...) {
148: 	char buf[BUFSIZ];
149: 	va_list args;
150: 	size_t newlen;
151: 
152: 	// attempt one: use stack buffer and determine length
153: 	va_start(args, fmt);
154: 	newlen = vsnprintf(buf, BUFSIZ, fmt, args);
155: 	va_end(args);
156: 	if (newlen < BUFSIZ) {
157: 		return pstrdup(buf);
158: 	}
159: 
160: 	// attempt two, malloc
161: 	char *mbuf = (char *)palloc(newlen);
162: 	va_start(args, fmt);
163: 	vsnprintf(mbuf, newlen, fmt, args);
164: 	va_end(args);
165: 	return mbuf;
166: }
167: 
168: char *pstrdup(const char *in) {
169: 	char *new_str = (char *)palloc(strlen(in) + 1);
170: 	memcpy(new_str, in, strlen(in));
171: 	return new_str;
172: }
173: 
174: void pfree(void *ptr) {
175: 	// nop, we free up entire context on parser cleanup
176: }
177: void *palloc0fast(size_t n) { // very fast
178: 	return palloc(n);
179: }
180: void *repalloc(void *ptr, size_t n) {
181: 	// get the length of the allocation
182: 	size_t old_len;
183: 	char *old_len_ptr = (char *) ptr - sizeof(size_t);
184: 	memcpy((void *) &old_len, old_len_ptr, sizeof(size_t));
185: 	// re-allocate and copy the data
186: 	void *new_buf = palloc(n);
187: 	memcpy(new_buf, ptr, old_len);
188: 	return new_buf;
189: }
190: char *NameListToString(PGList *names) {
191: 	throw std::runtime_error("NameListToString NOT IMPLEMENTED");
192: }
193: void *copyObject(const void *from) {
194: 	throw std::runtime_error("copyObject NOT IMPLEMENTED");
195: }
196: bool equal(const void *a, const void *b) {
197: 	throw std::runtime_error("equal NOT IMPLEMENTED");
198: }
199: int exprLocation(const PGNode *expr) {
200: 	throw std::runtime_error("exprLocation NOT IMPLEMENTED");
201: }
202: bool pg_verifymbstr(const char *mbstr, int len, bool noError) {
203: 	throw std::runtime_error("pg_verifymbstr NOT IMPLEMENTED");
204: }
205: 
206: int pg_database_encoding_max_length(void) {
207: 	return 4; // UTF8
208: }
209: 
210: static int pg_utf_mblen(const unsigned char *s) {
211: 	int len;
212: 
213: 	if ((*s & 0x80) == 0)
214: 		len = 1;
215: 	else if ((*s & 0xe0) == 0xc0)
216: 		len = 2;
217: 	else if ((*s & 0xf0) == 0xe0)
218: 		len = 3;
219: 	else if ((*s & 0xf8) == 0xf0)
220: 		len = 4;
221: #ifdef NOT_USED
222: 	else if ((*s & 0xfc) == 0xf8)
223: 		len = 5;
224: 	else if ((*s & 0xfe) == 0xfc)
225: 		len = 6;
226: #endif
227: 	else
228: 		len = 1;
229: 	return len;
230: }
231: 
232: int pg_mbstrlen_with_len(const char *mbstr, int limit) {
233: 	int len = 0;
234: 	while (limit > 0 && *mbstr) {
235: 		int l = pg_utf_mblen((const unsigned char *)mbstr);
236: 		limit -= l;
237: 		mbstr += l;
238: 		len++;
239: 	}
240: 	return len;
241: }
242: 
243: int pg_mbcliplen(const char *mbstr, int len, int limit) {
244: 	throw std::runtime_error("pg_mbcliplen NOT IMPLEMENTED");
245: }
246: int pg_mblen(const char *mbstr) {
247: 	throw std::runtime_error("pg_mblen NOT IMPLEMENTED");
248: }
249: PGDefElem *defWithOids(bool value) {
250: 	throw std::runtime_error("defWithOids NOT IMPLEMENTED");
251: }
252: unsigned char *unicode_to_utf8(pg_wchar c, unsigned char *utf8string) {
253: 	throw std::runtime_error("unicode_to_utf8 NOT IMPLEMENTED");
254: }
255: 
256: // this replaces a brain damaged macro in nodes.hpp
257: PGNode *newNode(size_t size, PGNodeTag type) {
258: 	auto result = (PGNode *)palloc0fast(size);
259: 	result->type = type;
260: 	return result;
261: }
262: }
[end of third_party/libpg_query/pg_functions.cpp]
[start of third_party/libpg_query/src_backend_parser_gram.cpp]
1: /* A Bison parser, made by GNU Bison 2.3.  */
2: 
3: /* Skeleton implementation for Bison's Yacc-like parsers in C
4: 
5:    Copyright (C) 1984, 1989, 1990, 2000, 2001, 2002, 2003, 2004, 2005, 2006
6:    Free Software Foundation, Inc.
7: 
8:    This program is free software; you can redistribute it and/or modify
9:    it under the terms of the GNU General Public License as published by
10:    the Free Software Foundation; either version 2, or (at your option)
11:    any later version.
12: 
13:    This program is distributed in the hope that it will be useful,
14:    but WITHOUT ANY WARRANTY; without even the implied warranty of
15:    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
16:    GNU General Public License for more details.
17: 
18:    You should have received a copy of the GNU General Public License
19:    along with this program; if not, write to the Free Software
20:    Foundation, Inc., 51 Franklin Street, Fifth Floor,
21:    Boston, MA 02110-1301, USA.  */
22: 
23: /* As a special exception, you may create a larger work that contains
24:    part or all of the Bison parser skeleton and distribute that work
25:    under terms of your choice, so long as that work isn't itself a
26:    parser generator using the skeleton or a modified version thereof
27:    as a parser skeleton.  Alternatively, if you modify or redistribute
28:    the parser skeleton itself, you may (at your option) remove this
29:    special exception, which will cause the skeleton and the resulting
30:    Bison output files to be licensed under the GNU General Public
31:    License without this special exception.
32: 
33:    This special exception was added by the Free Software Foundation in
34:    version 2.2 of Bison.  */
35: 
36: /* C LALR(1) parser skeleton written by Richard Stallman, by
37:    simplifying the original so-called "semantic" parser.  */
38: 
39: /* All symbols defined below should begin with yy or YY, to avoid
40:    infringing on user name space.  This should be done even for local
41:    variables, as they might otherwise be expanded by user macros.
42:    There are some unavoidable exceptions within include files to
43:    define necessary library symbols; they are noted "INFRINGES ON
44:    USER NAME SPACE" below.  */
45: 
46: /* Identify Bison output.  */
47: #define YYBISON 1
48: 
49: /* Bison version.  */
50: #define YYBISON_VERSION "2.3"
51: 
52: /* Skeleton name.  */
53: #define YYSKELETON_NAME "yacc.c"
54: 
55: /* Pure parsers.  */
56: #define YYPURE 1
57: 
58: /* Using locations.  */
59: #define YYLSP_NEEDED 1
60: 
61: /* Substitute the variable and function names.  */
62: #define yyparse base_yyparse
63: #define yylex   base_yylex
64: #define yyerror base_yyerror
65: #define yylval  base_yylval
66: #define yychar  base_yychar
67: #define yydebug base_yydebug
68: #define yynerrs base_yynerrs
69: #define yylloc base_yylloc
70: 
71: /* Tokens.  */
72: #ifndef YYTOKENTYPE
73: # define YYTOKENTYPE
74:    /* Put the tokens into the symbol table, so that GDB and other debuggers
75:       know about them.  */
76:    enum yytokentype {
77:      IDENT = 258,
78:      FCONST = 259,
79:      SCONST = 260,
80:      BCONST = 261,
81:      XCONST = 262,
82:      Op = 263,
83:      ICONST = 264,
84:      PARAM = 265,
85:      TYPECAST = 266,
86:      DOT_DOT = 267,
87:      COLON_EQUALS = 268,
88:      EQUALS_GREATER = 269,
89:      LAMBDA_ARROW = 270,
90:      LESS_EQUALS = 271,
91:      GREATER_EQUALS = 272,
92:      NOT_EQUALS = 273,
93:      ABORT_P = 274,
94:      ABSOLUTE_P = 275,
95:      ACCESS = 276,
96:      ACTION = 277,
97:      ADD_P = 278,
98:      ADMIN = 279,
99:      AFTER = 280,
100:      AGGREGATE = 281,
101:      ALL = 282,
102:      ALSO = 283,
103:      ALTER = 284,
104:      ALWAYS = 285,
105:      ANALYSE = 286,
106:      ANALYZE = 287,
107:      AND = 288,
108:      ANY = 289,
109:      ARRAY = 290,
110:      AS = 291,
111:      ASC_P = 292,
112:      ASSERTION = 293,
113:      ASSIGNMENT = 294,
114:      ASYMMETRIC = 295,
115:      AT = 296,
116:      ATTACH = 297,
117:      ATTRIBUTE = 298,
118:      AUTHORIZATION = 299,
119:      BACKWARD = 300,
120:      BEFORE = 301,
121:      BEGIN_P = 302,
122:      BETWEEN = 303,
123:      BIGINT = 304,
124:      BINARY = 305,
125:      BIT = 306,
126:      BOOLEAN_P = 307,
127:      BOTH = 308,
128:      BY = 309,
129:      CACHE = 310,
130:      CALL_P = 311,
131:      CALLED = 312,
132:      CASCADE = 313,
133:      CASCADED = 314,
134:      CASE = 315,
135:      CAST = 316,
136:      CATALOG_P = 317,
137:      CHAIN = 318,
138:      CHAR_P = 319,
139:      CHARACTER = 320,
140:      CHARACTERISTICS = 321,
141:      CHECK_P = 322,
142:      CHECKPOINT = 323,
143:      CLASS = 324,
144:      CLOSE = 325,
145:      CLUSTER = 326,
146:      COALESCE = 327,
147:      COLLATE = 328,
148:      COLLATION = 329,
149:      COLUMN = 330,
150:      COLUMNS = 331,
151:      COMMENT = 332,
152:      COMMENTS = 333,
153:      COMMIT = 334,
154:      COMMITTED = 335,
155:      COMPRESSION = 336,
156:      CONCURRENTLY = 337,
157:      CONFIGURATION = 338,
158:      CONFLICT = 339,
159:      CONNECTION = 340,
160:      CONSTRAINT = 341,
161:      CONSTRAINTS = 342,
162:      CONTENT_P = 343,
163:      CONTINUE_P = 344,
164:      CONVERSION_P = 345,
165:      COPY = 346,
166:      COST = 347,
167:      CREATE_P = 348,
168:      CROSS = 349,
169:      CSV = 350,
170:      CUBE = 351,
171:      CURRENT_P = 352,
172:      CURRENT_CATALOG = 353,
173:      CURRENT_DATE = 354,
174:      CURRENT_ROLE = 355,
175:      CURRENT_SCHEMA = 356,
176:      CURRENT_TIME = 357,
177:      CURRENT_TIMESTAMP = 358,
178:      CURRENT_USER = 359,
179:      CURSOR = 360,
180:      CYCLE = 361,
181:      DATA_P = 362,
182:      DATABASE = 363,
183:      DAY_P = 364,
184:      DAYS_P = 365,
185:      DEALLOCATE = 366,
186:      DEC = 367,
187:      DECIMAL_P = 368,
188:      DECLARE = 369,
189:      DEFAULT = 370,
190:      DEFAULTS = 371,
191:      DEFERRABLE = 372,
192:      DEFERRED = 373,
193:      DEFINER = 374,
194:      DELETE_P = 375,
195:      DELIMITER = 376,
196:      DELIMITERS = 377,
197:      DEPENDS = 378,
198:      DESC_P = 379,
199:      DESCRIBE = 380,
200:      DETACH = 381,
201:      DICTIONARY = 382,
202:      DISABLE_P = 383,
203:      DISCARD = 384,
204:      DISTINCT = 385,
205:      DO = 386,
206:      DOCUMENT_P = 387,
207:      DOMAIN_P = 388,
208:      DOUBLE_P = 389,
209:      DROP = 390,
210:      EACH = 391,
211:      ELSE = 392,
212:      ENABLE_P = 393,
213:      ENCODING = 394,
214:      ENCRYPTED = 395,
215:      END_P = 396,
216:      ENUM_P = 397,
217:      ESCAPE = 398,
218:      EVENT = 399,
219:      EXCEPT = 400,
220:      EXCLUDE = 401,
221:      EXCLUDING = 402,
222:      EXCLUSIVE = 403,
223:      EXECUTE = 404,
224:      EXISTS = 405,
225:      EXPLAIN = 406,
226:      EXPORT_P = 407,
227:      EXPORT_STATE = 408,
228:      EXTENSION = 409,
229:      EXTERNAL = 410,
230:      EXTRACT = 411,
231:      FALSE_P = 412,
232:      FAMILY = 413,
233:      FETCH = 414,
234:      FILTER = 415,
235:      FIRST_P = 416,
236:      FLOAT_P = 417,
237:      FOLLOWING = 418,
238:      FOR = 419,
239:      FORCE = 420,
240:      FOREIGN = 421,
241:      FORWARD = 422,
242:      FREEZE = 423,
243:      FROM = 424,
244:      FULL = 425,
245:      FUNCTION = 426,
246:      FUNCTIONS = 427,
247:      GENERATED = 428,
248:      GLOB = 429,
249:      GLOBAL = 430,
250:      GRANT = 431,
251:      GRANTED = 432,
252:      GROUP_P = 433,
253:      GROUPING = 434,
254:      GROUPING_ID = 435,
255:      HANDLER = 436,
256:      HAVING = 437,
257:      HEADER_P = 438,
258:      HOLD = 439,
259:      HOUR_P = 440,
260:      HOURS_P = 441,
261:      IDENTITY_P = 442,
262:      IF_P = 443,
263:      IGNORE_P = 444,
264:      ILIKE = 445,
265:      IMMEDIATE = 446,
266:      IMMUTABLE = 447,
267:      IMPLICIT_P = 448,
268:      IMPORT_P = 449,
269:      IN_P = 450,
270:      INCLUDING = 451,
271:      INCREMENT = 452,
272:      INDEX = 453,
273:      INDEXES = 454,
274:      INHERIT = 455,
275:      INHERITS = 456,
276:      INITIALLY = 457,
277:      INLINE_P = 458,
278:      INNER_P = 459,
279:      INOUT = 460,
280:      INPUT_P = 461,
281:      INSENSITIVE = 462,
282:      INSERT = 463,
283:      INSTALL = 464,
284:      INSTEAD = 465,
285:      INT_P = 466,
286:      INTEGER = 467,
287:      INTERSECT = 468,
288:      INTERVAL = 469,
289:      INTO = 470,
290:      INVOKER = 471,
291:      IS = 472,
292:      ISNULL = 473,
293:      ISOLATION = 474,
294:      JOIN = 475,
295:      KEY = 476,
296:      LABEL = 477,
297:      LANGUAGE = 478,
298:      LARGE_P = 479,
299:      LAST_P = 480,
300:      LATERAL_P = 481,
301:      LEADING = 482,
302:      LEAKPROOF = 483,
303:      LEFT = 484,
304:      LEVEL = 485,
305:      LIKE = 486,
306:      LIMIT = 487,
307:      LISTEN = 488,
308:      LOAD = 489,
309:      LOCAL = 490,
310:      LOCALTIME = 491,
311:      LOCALTIMESTAMP = 492,
312:      LOCATION = 493,
313:      LOCK_P = 494,
314:      LOCKED = 495,
315:      LOGGED = 496,
316:      MACRO = 497,
317:      MAP = 498,
318:      MAPPING = 499,
319:      MATCH = 500,
320:      MATERIALIZED = 501,
321:      MAXVALUE = 502,
322:      METHOD = 503,
323:      MICROSECOND_P = 504,
324:      MICROSECONDS_P = 505,
325:      MILLISECOND_P = 506,
326:      MILLISECONDS_P = 507,
327:      MINUTE_P = 508,
328:      MINUTES_P = 509,
329:      MINVALUE = 510,
330:      MODE = 511,
331:      MONTH_P = 512,
332:      MONTHS_P = 513,
333:      MOVE = 514,
334:      NAME_P = 515,
335:      NAMES = 516,
336:      NATIONAL = 517,
337:      NATURAL = 518,
338:      NCHAR = 519,
339:      NEW = 520,
340:      NEXT = 521,
341:      NO = 522,
342:      NONE = 523,
343:      NOT = 524,
344:      NOTHING = 525,
345:      NOTIFY = 526,
346:      NOTNULL = 527,
347:      NOWAIT = 528,
348:      NULL_P = 529,
349:      NULLIF = 530,
350:      NULLS_P = 531,
351:      NUMERIC = 532,
352:      OBJECT_P = 533,
353:      OF = 534,
354:      OFF = 535,
355:      OFFSET = 536,
356:      OIDS = 537,
357:      OLD = 538,
358:      ON = 539,
359:      ONLY = 540,
360:      OPERATOR = 541,
361:      OPTION = 542,
362:      OPTIONS = 543,
363:      OR = 544,
364:      ORDER = 545,
365:      ORDINALITY = 546,
366:      OUT_P = 547,
367:      OUTER_P = 548,
368:      OVER = 549,
369:      OVERLAPS = 550,
370:      OVERLAY = 551,
371:      OVERRIDING = 552,
372:      OWNED = 553,
373:      OWNER = 554,
374:      PARALLEL = 555,
375:      PARSER = 556,
376:      PARTIAL = 557,
377:      PARTITION = 558,
378:      PASSING = 559,
379:      PASSWORD = 560,
380:      PERCENT = 561,
381:      PLACING = 562,
382:      PLANS = 563,
383:      POLICY = 564,
384:      POSITION = 565,
385:      PRAGMA_P = 566,
386:      PRECEDING = 567,
387:      PRECISION = 568,
388:      PREPARE = 569,
389:      PREPARED = 570,
390:      PRESERVE = 571,
391:      PRIMARY = 572,
392:      PRIOR = 573,
393:      PRIVILEGES = 574,
394:      PROCEDURAL = 575,
395:      PROCEDURE = 576,
396:      PROGRAM = 577,
397:      PUBLICATION = 578,
398:      QUALIFY = 579,
399:      QUOTE = 580,
400:      RANGE = 581,
401:      READ_P = 582,
402:      REAL = 583,
403:      REASSIGN = 584,
404:      RECHECK = 585,
405:      RECURSIVE = 586,
406:      REF = 587,
407:      REFERENCES = 588,
408:      REFERENCING = 589,
409:      REFRESH = 590,
410:      REINDEX = 591,
411:      RELATIVE_P = 592,
412:      RELEASE = 593,
413:      RENAME = 594,
414:      REPEATABLE = 595,
415:      REPLACE = 596,
416:      REPLICA = 597,
417:      RESET = 598,
418:      RESPECT_P = 599,
419:      RESTART = 600,
420:      RESTRICT = 601,
421:      RETURNING = 602,
422:      RETURNS = 603,
423:      REVOKE = 604,
424:      RIGHT = 605,
425:      ROLE = 606,
426:      ROLLBACK = 607,
427:      ROLLUP = 608,
428:      ROW = 609,
429:      ROWS = 610,
430:      RULE = 611,
431:      SAMPLE = 612,
432:      SAVEPOINT = 613,
433:      SCHEMA = 614,
434:      SCHEMAS = 615,
435:      SCROLL = 616,
436:      SEARCH = 617,
437:      SECOND_P = 618,
438:      SECONDS_P = 619,
439:      SECURITY = 620,
440:      SELECT = 621,
441:      SEQUENCE = 622,
442:      SEQUENCES = 623,
443:      SERIALIZABLE = 624,
444:      SERVER = 625,
445:      SESSION = 626,
446:      SESSION_USER = 627,
447:      SET = 628,
448:      SETOF = 629,
449:      SETS = 630,
450:      SHARE = 631,
451:      SHOW = 632,
452:      SIMILAR = 633,
453:      SIMPLE = 634,
454:      SKIP = 635,
455:      SMALLINT = 636,
456:      SNAPSHOT = 637,
457:      SOME = 638,
458:      SQL_P = 639,
459:      STABLE = 640,
460:      STANDALONE_P = 641,
461:      START = 642,
462:      STATEMENT = 643,
463:      STATISTICS = 644,
464:      STDIN = 645,
465:      STDOUT = 646,
466:      STORAGE = 647,
467:      STRICT_P = 648,
468:      STRIP_P = 649,
469:      STRUCT = 650,
470:      SUBSCRIPTION = 651,
471:      SUBSTRING = 652,
472:      SUMMARIZE = 653,
473:      SYMMETRIC = 654,
474:      SYSID = 655,
475:      SYSTEM_P = 656,
476:      TABLE = 657,
477:      TABLES = 658,
478:      TABLESAMPLE = 659,
479:      TABLESPACE = 660,
480:      TEMP = 661,
481:      TEMPLATE = 662,
482:      TEMPORARY = 663,
483:      TEXT_P = 664,
484:      THEN = 665,
485:      TIME = 666,
486:      TIMESTAMP = 667,
487:      TO = 668,
488:      TRAILING = 669,
489:      TRANSACTION = 670,
490:      TRANSFORM = 671,
491:      TREAT = 672,
492:      TRIGGER = 673,
493:      TRIM = 674,
494:      TRUE_P = 675,
495:      TRUNCATE = 676,
496:      TRUSTED = 677,
497:      TRY_CAST = 678,
498:      TYPE_P = 679,
499:      TYPES_P = 680,
500:      UNBOUNDED = 681,
501:      UNCOMMITTED = 682,
502:      UNENCRYPTED = 683,
503:      UNION = 684,
504:      UNIQUE = 685,
505:      UNKNOWN = 686,
506:      UNLISTEN = 687,
507:      UNLOGGED = 688,
508:      UNTIL = 689,
509:      UPDATE = 690,
510:      USER = 691,
511:      USING = 692,
512:      VACUUM = 693,
513:      VALID = 694,
514:      VALIDATE = 695,
515:      VALIDATOR = 696,
516:      VALUE_P = 697,
517:      VALUES = 698,
518:      VARCHAR = 699,
519:      VARIADIC = 700,
520:      VARYING = 701,
521:      VERBOSE = 702,
522:      VERSION_P = 703,
523:      VIEW = 704,
524:      VIEWS = 705,
525:      VOLATILE = 706,
526:      WHEN = 707,
527:      WHERE = 708,
528:      WHITESPACE_P = 709,
529:      WINDOW = 710,
530:      WITH = 711,
531:      WITHIN = 712,
532:      WITHOUT = 713,
533:      WORK = 714,
534:      WRAPPER = 715,
535:      WRITE_P = 716,
536:      XML_P = 717,
537:      XMLATTRIBUTES = 718,
538:      XMLCONCAT = 719,
539:      XMLELEMENT = 720,
540:      XMLEXISTS = 721,
541:      XMLFOREST = 722,
542:      XMLNAMESPACES = 723,
543:      XMLPARSE = 724,
544:      XMLPI = 725,
545:      XMLROOT = 726,
546:      XMLSERIALIZE = 727,
547:      XMLTABLE = 728,
548:      YEAR_P = 729,
549:      YEARS_P = 730,
550:      YES_P = 731,
551:      ZONE = 732,
552:      NOT_LA = 733,
553:      NULLS_LA = 734,
554:      WITH_LA = 735,
555:      POSTFIXOP = 736,
556:      UMINUS = 737
557:    };
558: #endif
559: /* Tokens.  */
560: #define IDENT 258
561: #define FCONST 259
562: #define SCONST 260
563: #define BCONST 261
564: #define XCONST 262
565: #define Op 263
566: #define ICONST 264
567: #define PARAM 265
568: #define TYPECAST 266
569: #define DOT_DOT 267
570: #define COLON_EQUALS 268
571: #define EQUALS_GREATER 269
572: #define LAMBDA_ARROW 270
573: #define LESS_EQUALS 271
574: #define GREATER_EQUALS 272
575: #define NOT_EQUALS 273
576: #define ABORT_P 274
577: #define ABSOLUTE_P 275
578: #define ACCESS 276
579: #define ACTION 277
580: #define ADD_P 278
581: #define ADMIN 279
582: #define AFTER 280
583: #define AGGREGATE 281
584: #define ALL 282
585: #define ALSO 283
586: #define ALTER 284
587: #define ALWAYS 285
588: #define ANALYSE 286
589: #define ANALYZE 287
590: #define AND 288
591: #define ANY 289
592: #define ARRAY 290
593: #define AS 291
594: #define ASC_P 292
595: #define ASSERTION 293
596: #define ASSIGNMENT 294
597: #define ASYMMETRIC 295
598: #define AT 296
599: #define ATTACH 297
600: #define ATTRIBUTE 298
601: #define AUTHORIZATION 299
602: #define BACKWARD 300
603: #define BEFORE 301
604: #define BEGIN_P 302
605: #define BETWEEN 303
606: #define BIGINT 304
607: #define BINARY 305
608: #define BIT 306
609: #define BOOLEAN_P 307
610: #define BOTH 308
611: #define BY 309
612: #define CACHE 310
613: #define CALL_P 311
614: #define CALLED 312
615: #define CASCADE 313
616: #define CASCADED 314
617: #define CASE 315
618: #define CAST 316
619: #define CATALOG_P 317
620: #define CHAIN 318
621: #define CHAR_P 319
622: #define CHARACTER 320
623: #define CHARACTERISTICS 321
624: #define CHECK_P 322
625: #define CHECKPOINT 323
626: #define CLASS 324
627: #define CLOSE 325
628: #define CLUSTER 326
629: #define COALESCE 327
630: #define COLLATE 328
631: #define COLLATION 329
632: #define COLUMN 330
633: #define COLUMNS 331
634: #define COMMENT 332
635: #define COMMENTS 333
636: #define COMMIT 334
637: #define COMMITTED 335
638: #define COMPRESSION 336
639: #define CONCURRENTLY 337
640: #define CONFIGURATION 338
641: #define CONFLICT 339
642: #define CONNECTION 340
643: #define CONSTRAINT 341
644: #define CONSTRAINTS 342
645: #define CONTENT_P 343
646: #define CONTINUE_P 344
647: #define CONVERSION_P 345
648: #define COPY 346
649: #define COST 347
650: #define CREATE_P 348
651: #define CROSS 349
652: #define CSV 350
653: #define CUBE 351
654: #define CURRENT_P 352
655: #define CURRENT_CATALOG 353
656: #define CURRENT_DATE 354
657: #define CURRENT_ROLE 355
658: #define CURRENT_SCHEMA 356
659: #define CURRENT_TIME 357
660: #define CURRENT_TIMESTAMP 358
661: #define CURRENT_USER 359
662: #define CURSOR 360
663: #define CYCLE 361
664: #define DATA_P 362
665: #define DATABASE 363
666: #define DAY_P 364
667: #define DAYS_P 365
668: #define DEALLOCATE 366
669: #define DEC 367
670: #define DECIMAL_P 368
671: #define DECLARE 369
672: #define DEFAULT 370
673: #define DEFAULTS 371
674: #define DEFERRABLE 372
675: #define DEFERRED 373
676: #define DEFINER 374
677: #define DELETE_P 375
678: #define DELIMITER 376
679: #define DELIMITERS 377
680: #define DEPENDS 378
681: #define DESC_P 379
682: #define DESCRIBE 380
683: #define DETACH 381
684: #define DICTIONARY 382
685: #define DISABLE_P 383
686: #define DISCARD 384
687: #define DISTINCT 385
688: #define DO 386
689: #define DOCUMENT_P 387
690: #define DOMAIN_P 388
691: #define DOUBLE_P 389
692: #define DROP 390
693: #define EACH 391
694: #define ELSE 392
695: #define ENABLE_P 393
696: #define ENCODING 394
697: #define ENCRYPTED 395
698: #define END_P 396
699: #define ENUM_P 397
700: #define ESCAPE 398
701: #define EVENT 399
702: #define EXCEPT 400
703: #define EXCLUDE 401
704: #define EXCLUDING 402
705: #define EXCLUSIVE 403
706: #define EXECUTE 404
707: #define EXISTS 405
708: #define EXPLAIN 406
709: #define EXPORT_P 407
710: #define EXPORT_STATE 408
711: #define EXTENSION 409
712: #define EXTERNAL 410
713: #define EXTRACT 411
714: #define FALSE_P 412
715: #define FAMILY 413
716: #define FETCH 414
717: #define FILTER 415
718: #define FIRST_P 416
719: #define FLOAT_P 417
720: #define FOLLOWING 418
721: #define FOR 419
722: #define FORCE 420
723: #define FOREIGN 421
724: #define FORWARD 422
725: #define FREEZE 423
726: #define FROM 424
727: #define FULL 425
728: #define FUNCTION 426
729: #define FUNCTIONS 427
730: #define GENERATED 428
731: #define GLOB 429
732: #define GLOBAL 430
733: #define GRANT 431
734: #define GRANTED 432
735: #define GROUP_P 433
736: #define GROUPING 434
737: #define GROUPING_ID 435
738: #define HANDLER 436
739: #define HAVING 437
740: #define HEADER_P 438
741: #define HOLD 439
742: #define HOUR_P 440
743: #define HOURS_P 441
744: #define IDENTITY_P 442
745: #define IF_P 443
746: #define IGNORE_P 444
747: #define ILIKE 445
748: #define IMMEDIATE 446
749: #define IMMUTABLE 447
750: #define IMPLICIT_P 448
751: #define IMPORT_P 449
752: #define IN_P 450
753: #define INCLUDING 451
754: #define INCREMENT 452
755: #define INDEX 453
756: #define INDEXES 454
757: #define INHERIT 455
758: #define INHERITS 456
759: #define INITIALLY 457
760: #define INLINE_P 458
761: #define INNER_P 459
762: #define INOUT 460
763: #define INPUT_P 461
764: #define INSENSITIVE 462
765: #define INSERT 463
766: #define INSTALL 464
767: #define INSTEAD 465
768: #define INT_P 466
769: #define INTEGER 467
770: #define INTERSECT 468
771: #define INTERVAL 469
772: #define INTO 470
773: #define INVOKER 471
774: #define IS 472
775: #define ISNULL 473
776: #define ISOLATION 474
777: #define JOIN 475
778: #define KEY 476
779: #define LABEL 477
780: #define LANGUAGE 478
781: #define LARGE_P 479
782: #define LAST_P 480
783: #define LATERAL_P 481
784: #define LEADING 482
785: #define LEAKPROOF 483
786: #define LEFT 484
787: #define LEVEL 485
788: #define LIKE 486
789: #define LIMIT 487
790: #define LISTEN 488
791: #define LOAD 489
792: #define LOCAL 490
793: #define LOCALTIME 491
794: #define LOCALTIMESTAMP 492
795: #define LOCATION 493
796: #define LOCK_P 494
797: #define LOCKED 495
798: #define LOGGED 496
799: #define MACRO 497
800: #define MAP 498
801: #define MAPPING 499
802: #define MATCH 500
803: #define MATERIALIZED 501
804: #define MAXVALUE 502
805: #define METHOD 503
806: #define MICROSECOND_P 504
807: #define MICROSECONDS_P 505
808: #define MILLISECOND_P 506
809: #define MILLISECONDS_P 507
810: #define MINUTE_P 508
811: #define MINUTES_P 509
812: #define MINVALUE 510
813: #define MODE 511
814: #define MONTH_P 512
815: #define MONTHS_P 513
816: #define MOVE 514
817: #define NAME_P 515
818: #define NAMES 516
819: #define NATIONAL 517
820: #define NATURAL 518
821: #define NCHAR 519
822: #define NEW 520
823: #define NEXT 521
824: #define NO 522
825: #define NONE 523
826: #define NOT 524
827: #define NOTHING 525
828: #define NOTIFY 526
829: #define NOTNULL 527
830: #define NOWAIT 528
831: #define NULL_P 529
832: #define NULLIF 530
833: #define NULLS_P 531
834: #define NUMERIC 532
835: #define OBJECT_P 533
836: #define OF 534
837: #define OFF 535
838: #define OFFSET 536
839: #define OIDS 537
840: #define OLD 538
841: #define ON 539
842: #define ONLY 540
843: #define OPERATOR 541
844: #define OPTION 542
845: #define OPTIONS 543
846: #define OR 544
847: #define ORDER 545
848: #define ORDINALITY 546
849: #define OUT_P 547
850: #define OUTER_P 548
851: #define OVER 549
852: #define OVERLAPS 550
853: #define OVERLAY 551
854: #define OVERRIDING 552
855: #define OWNED 553
856: #define OWNER 554
857: #define PARALLEL 555
858: #define PARSER 556
859: #define PARTIAL 557
860: #define PARTITION 558
861: #define PASSING 559
862: #define PASSWORD 560
863: #define PERCENT 561
864: #define PLACING 562
865: #define PLANS 563
866: #define POLICY 564
867: #define POSITION 565
868: #define PRAGMA_P 566
869: #define PRECEDING 567
870: #define PRECISION 568
871: #define PREPARE 569
872: #define PREPARED 570
873: #define PRESERVE 571
874: #define PRIMARY 572
875: #define PRIOR 573
876: #define PRIVILEGES 574
877: #define PROCEDURAL 575
878: #define PROCEDURE 576
879: #define PROGRAM 577
880: #define PUBLICATION 578
881: #define QUALIFY 579
882: #define QUOTE 580
883: #define RANGE 581
884: #define READ_P 582
885: #define REAL 583
886: #define REASSIGN 584
887: #define RECHECK 585
888: #define RECURSIVE 586
889: #define REF 587
890: #define REFERENCES 588
891: #define REFERENCING 589
892: #define REFRESH 590
893: #define REINDEX 591
894: #define RELATIVE_P 592
895: #define RELEASE 593
896: #define RENAME 594
897: #define REPEATABLE 595
898: #define REPLACE 596
899: #define REPLICA 597
900: #define RESET 598
901: #define RESPECT_P 599
902: #define RESTART 600
903: #define RESTRICT 601
904: #define RETURNING 602
905: #define RETURNS 603
906: #define REVOKE 604
907: #define RIGHT 605
908: #define ROLE 606
909: #define ROLLBACK 607
910: #define ROLLUP 608
911: #define ROW 609
912: #define ROWS 610
913: #define RULE 611
914: #define SAMPLE 612
915: #define SAVEPOINT 613
916: #define SCHEMA 614
917: #define SCHEMAS 615
918: #define SCROLL 616
919: #define SEARCH 617
920: #define SECOND_P 618
921: #define SECONDS_P 619
922: #define SECURITY 620
923: #define SELECT 621
924: #define SEQUENCE 622
925: #define SEQUENCES 623
926: #define SERIALIZABLE 624
927: #define SERVER 625
928: #define SESSION 626
929: #define SESSION_USER 627
930: #define SET 628
931: #define SETOF 629
932: #define SETS 630
933: #define SHARE 631
934: #define SHOW 632
935: #define SIMILAR 633
936: #define SIMPLE 634
937: #define SKIP 635
938: #define SMALLINT 636
939: #define SNAPSHOT 637
940: #define SOME 638
941: #define SQL_P 639
942: #define STABLE 640
943: #define STANDALONE_P 641
944: #define START 642
945: #define STATEMENT 643
946: #define STATISTICS 644
947: #define STDIN 645
948: #define STDOUT 646
949: #define STORAGE 647
950: #define STRICT_P 648
951: #define STRIP_P 649
952: #define STRUCT 650
953: #define SUBSCRIPTION 651
954: #define SUBSTRING 652
955: #define SUMMARIZE 653
956: #define SYMMETRIC 654
957: #define SYSID 655
958: #define SYSTEM_P 656
959: #define TABLE 657
960: #define TABLES 658
961: #define TABLESAMPLE 659
962: #define TABLESPACE 660
963: #define TEMP 661
964: #define TEMPLATE 662
965: #define TEMPORARY 663
966: #define TEXT_P 664
967: #define THEN 665
968: #define TIME 666
969: #define TIMESTAMP 667
970: #define TO 668
971: #define TRAILING 669
972: #define TRANSACTION 670
973: #define TRANSFORM 671
974: #define TREAT 672
975: #define TRIGGER 673
976: #define TRIM 674
977: #define TRUE_P 675
978: #define TRUNCATE 676
979: #define TRUSTED 677
980: #define TRY_CAST 678
981: #define TYPE_P 679
982: #define TYPES_P 680
983: #define UNBOUNDED 681
984: #define UNCOMMITTED 682
985: #define UNENCRYPTED 683
986: #define UNION 684
987: #define UNIQUE 685
988: #define UNKNOWN 686
989: #define UNLISTEN 687
990: #define UNLOGGED 688
991: #define UNTIL 689
992: #define UPDATE 690
993: #define USER 691
994: #define USING 692
995: #define VACUUM 693
996: #define VALID 694
997: #define VALIDATE 695
998: #define VALIDATOR 696
999: #define VALUE_P 697
1000: #define VALUES 698
1001: #define VARCHAR 699
1002: #define VARIADIC 700
1003: #define VARYING 701
1004: #define VERBOSE 702
1005: #define VERSION_P 703
1006: #define VIEW 704
1007: #define VIEWS 705
1008: #define VOLATILE 706
1009: #define WHEN 707
1010: #define WHERE 708
1011: #define WHITESPACE_P 709
1012: #define WINDOW 710
1013: #define WITH 711
1014: #define WITHIN 712
1015: #define WITHOUT 713
1016: #define WORK 714
1017: #define WRAPPER 715
1018: #define WRITE_P 716
1019: #define XML_P 717
1020: #define XMLATTRIBUTES 718
1021: #define XMLCONCAT 719
1022: #define XMLELEMENT 720
1023: #define XMLEXISTS 721
1024: #define XMLFOREST 722
1025: #define XMLNAMESPACES 723
1026: #define XMLPARSE 724
1027: #define XMLPI 725
1028: #define XMLROOT 726
1029: #define XMLSERIALIZE 727
1030: #define XMLTABLE 728
1031: #define YEAR_P 729
1032: #define YEARS_P 730
1033: #define YES_P 731
1034: #define ZONE 732
1035: #define NOT_LA 733
1036: #define NULLS_LA 734
1037: #define WITH_LA 735
1038: #define POSTFIXOP 736
1039: #define UMINUS 737
1040: 
1041: 
1042: 
1043: 
1044: /* Copy the first part of user declarations.  */
1045: #line 1 "third_party/libpg_query/grammar/grammar.y.tmp"
1046: 
1047: #line 1 "third_party/libpg_query/grammar/grammar.hpp"
1048: /*#define YYDEBUG 1*/
1049: /*-------------------------------------------------------------------------
1050:  *
1051:  * gram.y
1052:  *	  POSTGRESQL BISON rules/actions
1053:  *
1054:  * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
1055:  * Portions Copyright (c) 1994, Regents of the University of California
1056:  *
1057:  *
1058:  * IDENTIFICATION
1059:  *	  src/backend/parser/gram.y
1060:  *
1061:  * HISTORY
1062:  *	  AUTHOR			DATE			MAJOR EVENT
1063:  *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
1064:  *	  Andrew Yu			Oct, 1994		lispy code conversion
1065:  *
1066:  * NOTES
1067:  *	  CAPITALS are used to represent terminal symbols.
1068:  *	  non-capitals are used to represent non-terminals.
1069:  *
1070:  *	  In general, nothing in this file should initiate database accesses
1071:  *	  nor depend on changeable state (such as SET variables).  If you do
1072:  *	  database accesses, your code will fail when we have aborted the
1073:  *	  current transaction and are just parsing commands to find the next
1074:  *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
1075:  *	  will do the wrong thing in multi-query strings like this:
1076:  *			SET constraint_exclusion TO off; SELECT * FROM foo;
1077:  *	  because the entire string is parsed by gram.y before the SET gets
1078:  *	  executed.  Anything that depends on the database or changeable state
1079:  *	  should be handled during parse analysis so that it happens at the
1080:  *	  right time not the wrong time.
1081:  *
1082:  * WARNINGS
1083:  *	  If you use a list, make sure the datum is a node so that the printing
1084:  *	  routines work.
1085:  *
1086:  *	  Sometimes we assign constants to makeStrings. Make sure we don't free
1087:  *	  those.
1088:  *
1089:  *-------------------------------------------------------------------------
1090:  */
1091: #include "pg_functions.hpp"
1092: #include <string.h>
1093: 
1094: #include <ctype.h>
1095: #include <limits.h>
1096: 
1097: #include "nodes/makefuncs.hpp"
1098: #include "nodes/nodeFuncs.hpp"
1099: #include "parser/gramparse.hpp"
1100: #include "parser/parser.hpp"
1101: #include "utils/datetime.hpp"
1102: 
1103: namespace duckdb_libpgquery {
1104: #define DEFAULT_SCHEMA "main"
1105: 
1106: /*
1107:  * Location tracking support --- simpler than bison's default, since we only
1108:  * want to track the start position not the end position of each nonterminal.
1109:  */
1110: #define YYLLOC_DEFAULT(Current, Rhs, N) \
1111: 	do { \
1112: 		if ((N) > 0) \
1113: 			(Current) = (Rhs)[1]; \
1114: 		else \
1115: 			(Current) = (-1); \
1116: 	} while (0)
1117: 
1118: /*
1119:  * The above macro assigns -1 (unknown) as the parse location of any
1120:  * nonterminal that was reduced from an empty rule, or whose leftmost
1121:  * component was reduced from an empty rule.  This is problematic
1122:  * for nonterminals defined like
1123:  *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
1124:  * because we'll set -1 as the location during the first reduction and then
1125:  * copy it during each subsequent reduction, leaving us with -1 for the
1126:  * location even when the list is not empty.  To fix that, do this in the
1127:  * action for the nonempty rule(s):
1128:  *		if (@$ < 0) @$ = @2;
1129:  * (Although we have many nonterminals that follow this pattern, we only
1130:  * bother with fixing @$ like this when the nonterminal's parse location
1131:  * is actually referenced in some rule.)
1132:  *
1133:  * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
1134:  * locations until it's found one that's not -1.  Then we'd get a correct
1135:  * location for any nonterminal that isn't entirely empty.  But this way
1136:  * would add overhead to every rule reduction, and so far there's not been
1137:  * a compelling reason to pay that overhead.
1138:  */
1139: 
1140: /*
1141:  * Bison doesn't allocate anything that needs to live across parser calls,
1142:  * so we can easily have it use palloc instead of malloc.  This prevents
1143:  * memory leaks if we error out during parsing.  Note this only works with
1144:  * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
1145:  * if possible, so there's not really much problem anyhow, at least if
1146:  * you're building with gcc.
1147:  */
1148: #define YYMALLOC palloc
1149: #define YYFREE   pfree
1150: #define YYINITDEPTH 1000
1151: 
1152: /* yields an integer bitmask of these flags: */
1153: #define CAS_NOT_DEFERRABLE			0x01
1154: #define CAS_DEFERRABLE				0x02
1155: #define CAS_INITIALLY_IMMEDIATE		0x04
1156: #define CAS_INITIALLY_DEFERRED		0x08
1157: #define CAS_NOT_VALID				0x10
1158: #define CAS_NO_INHERIT				0x20
1159: 
1160: 
1161: #define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
1162: #define parser_errposition(pos)  scanner_errposition(pos, yyscanner)
1163: 
1164: static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
1165: 						 const char *msg);
1166: static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
1167: static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
1168: static PGNode *makeColumnRef(char *colname, PGList *indirection,
1169: 						   int location, core_yyscan_t yyscanner);
1170: static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
1171: static PGNode *makeStringConst(char *str, int location);
1172: static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
1173: static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
1174: static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
1175: static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
1176: static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
1177: static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
1178: static PGNode *makeIntConst(int val, int location);
1179: static PGNode *makeFloatConst(char *str, int location);
1180: static PGNode *makeBitStringConst(char *str, int location);
1181: static PGNode *makeNullAConst(int location);
1182: static PGNode *makeAConst(PGValue *v, int location);
1183: static PGNode *makeBoolAConst(bool state, int location);
1184: static PGNode *makeParamRef(int number, int location);
1185: static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
1186: static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
1187: static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
1188: static void insertSelectOptions(PGSelectStmt *stmt,
1189: 								PGList *sortClause, PGList *lockingClause,
1190: 								PGNode *limitOffset, PGNode *limitCount,
1191: 								PGWithClause *withClause,
1192: 								core_yyscan_t yyscanner);
1193: static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
1194: static PGNode *doNegate(PGNode *n, int location);
1195: static void doNegateFloat(PGValue *v);
1196: static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
1197: static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
1198: static PGNode *makeNotExpr(PGNode *expr, int location);
1199: static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
1200: 								  int location);
1201: static void SplitColQualList(PGList *qualList,
1202: 							 PGList **constraintList, PGCollateClause **collClause,
1203: 							 core_yyscan_t yyscanner);
1204: static void processCASbits(int cas_bits, int location, const char *constrType,
1205: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
1206: 			   bool *no_inherit, core_yyscan_t yyscanner);
1207: static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);
1208: static PGNode *makeLimitPercent(PGNode *limit_percent);
1209: 
1210: 
1211: 
1212: /* Enabling traces.  */
1213: #ifndef YYDEBUG
1214: # define YYDEBUG 0
1215: #endif
1216: 
1217: /* Enabling verbose error messages.  */
1218: #ifdef YYERROR_VERBOSE
1219: # undef YYERROR_VERBOSE
1220: # define YYERROR_VERBOSE 1
1221: #else
1222: # define YYERROR_VERBOSE 0
1223: #endif
1224: 
1225: /* Enabling the token table.  */
1226: #ifndef YYTOKEN_TABLE
1227: # define YYTOKEN_TABLE 0
1228: #endif
1229: 
1230: #if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
1231: typedef union YYSTYPE
1232: #line 14 "third_party/libpg_query/grammar/grammar.y"
1233: {
1234: 	core_YYSTYPE		core_yystype;
1235: 	/* these fields must match core_YYSTYPE: */
1236: 	int					ival;
1237: 	char				*str;
1238: 	const char			*keyword;
1239: 	const char          *conststr;
1240: 
1241: 	char				chr;
1242: 	bool				boolean;
1243: 	PGJoinType			jtype;
1244: 	PGDropBehavior		dbehavior;
1245: 	PGOnCommitAction		oncommit;
1246: 	PGOnCreateConflict		oncreateconflict;
1247: 	PGList				*list;
1248: 	PGNode				*node;
1249: 	PGValue				*value;
1250: 	PGObjectType			objtype;
1251: 	PGTypeName			*typnam;
1252: 	PGObjectWithArgs		*objwithargs;
1253: 	PGDefElem				*defelt;
1254: 	PGSortBy				*sortby;
1255: 	PGWindowDef			*windef;
1256: 	PGJoinExpr			*jexpr;
1257: 	PGIndexElem			*ielem;
1258: 	PGAlias				*alias;
1259: 	PGRangeVar			*range;
1260: 	PGIntoClause			*into;
1261: 	PGWithClause			*with;
1262: 	PGInferClause			*infer;
1263: 	PGOnConflictClause	*onconflict;
1264: 	PGAIndices			*aind;
1265: 	PGResTarget			*target;
1266: 	PGInsertStmt			*istmt;
1267: 	PGVariableSetStmt		*vsetstmt;
1268: 	PGOverridingKind       override;
1269: 	PGSortByDir            sortorder;
1270: 	PGSortByNulls          nullorder;
1271: 	PGLockClauseStrength lockstrength;
1272: 	PGLockWaitPolicy lockwaitpolicy;
1273: 	PGSubLinkType subquerytype;
1274: 	PGViewCheckOption viewcheckoption;
1275: }
1276: /* Line 193 of yacc.c.  */
1277: #line 1278 "third_party/libpg_query/grammar/grammar_out.cpp"
1278: 	YYSTYPE;
1279: # define yystype YYSTYPE /* obsolescent; will be withdrawn */
1280: # define YYSTYPE_IS_DECLARED 1
1281: # define YYSTYPE_IS_TRIVIAL 1
1282: #endif
1283: 
1284: #if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
1285: typedef struct YYLTYPE
1286: {
1287:   int first_line;
1288:   int first_column;
1289:   int last_line;
1290:   int last_column;
1291: } YYLTYPE;
1292: # define yyltype YYLTYPE /* obsolescent; will be withdrawn */
1293: # define YYLTYPE_IS_DECLARED 1
1294: # define YYLTYPE_IS_TRIVIAL 1
1295: #endif
1296: 
1297: 
1298: /* Copy the second part of user declarations.  */
1299: 
1300: 
1301: /* Line 216 of yacc.c.  */
1302: #line 1303 "third_party/libpg_query/grammar/grammar_out.cpp"
1303: 
1304: #ifdef short
1305: # undef short
1306: #endif
1307: 
1308: #ifdef YYTYPE_UINT8
1309: typedef YYTYPE_UINT8 yytype_uint8;
1310: #else
1311: typedef unsigned char yytype_uint8;
1312: #endif
1313: 
1314: #ifdef YYTYPE_INT8
1315: typedef YYTYPE_INT8 yytype_int8;
1316: #elif (defined __STDC__ || defined __C99__FUNC__ \
1317:      || defined __cplusplus || defined _MSC_VER)
1318: typedef signed char yytype_int8;
1319: #else
1320: typedef short int yytype_int8;
1321: #endif
1322: 
1323: #ifdef YYTYPE_UINT16
1324: typedef YYTYPE_UINT16 yytype_uint16;
1325: #else
1326: typedef unsigned short int yytype_uint16;
1327: #endif
1328: 
1329: #ifdef YYTYPE_INT16
1330: typedef YYTYPE_INT16 yytype_int16;
1331: #else
1332: typedef short int yytype_int16;
1333: #endif
1334: 
1335: #ifndef YYSIZE_T
1336: # ifdef __SIZE_TYPE__
1337: #  define YYSIZE_T __SIZE_TYPE__
1338: # elif defined size_t
1339: #  define YYSIZE_T size_t
1340: # elif ! defined YYSIZE_T && (defined __STDC__ || defined __C99__FUNC__ \
1341:      || defined __cplusplus || defined _MSC_VER)
1342: #  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
1343: #  define YYSIZE_T size_t
1344: # else
1345: #  define YYSIZE_T unsigned int
1346: # endif
1347: #endif
1348: 
1349: #define YYSIZE_MAXIMUM ((YYSIZE_T) -1)
1350: 
1351: #ifndef YY_
1352: # if defined YYENABLE_NLS && YYENABLE_NLS
1353: #  if ENABLE_NLS
1354: #   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
1355: #   define YY_(msgid) dgettext ("bison-runtime", msgid)
1356: #  endif
1357: # endif
1358: # ifndef YY_
1359: #  define YY_(msgid) msgid
1360: # endif
1361: #endif
1362: 
1363: /* Suppress unused-variable warnings by "using" E.  */
1364: #if ! defined lint || defined __GNUC__
1365: # define YYUSE(e) ((void) (e))
1366: #else
1367: # define YYUSE(e) /* empty */
1368: #endif
1369: 
1370: /* Identity function, used to suppress warnings about constant conditions.  */
1371: #ifndef lint
1372: # define YYID(n) (n)
1373: #else
1374: #if (defined __STDC__ || defined __C99__FUNC__ \
1375:      || defined __cplusplus || defined _MSC_VER)
1376: static int
1377: YYID (int i)
1378: #else
1379: static int
1380: YYID (i)
1381:     int i;
1382: #endif
1383: {
1384:   return i;
1385: }
1386: #endif
1387: 
1388: #if ! defined yyoverflow || YYERROR_VERBOSE
1389: 
1390: /* The parser invokes alloca or malloc; define the necessary symbols.  */
1391: 
1392: # ifdef YYSTACK_USE_ALLOCA
1393: #  if YYSTACK_USE_ALLOCA
1394: #   ifdef __GNUC__
1395: #    define YYSTACK_ALLOC __builtin_alloca
1396: #   elif defined __BUILTIN_VA_ARG_INCR
1397: #    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
1398: #   elif defined _AIX
1399: #    define YYSTACK_ALLOC __alloca
1400: #   elif defined _MSC_VER
1401: #    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
1402: #    define alloca _alloca
1403: #   else
1404: #    define YYSTACK_ALLOC alloca
1405: #    if ! defined _ALLOCA_H && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1406:      || defined __cplusplus || defined _MSC_VER)
1407: #     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1408: #     ifndef _STDLIB_H
1409: #      define _STDLIB_H 1
1410: #     endif
1411: #    endif
1412: #   endif
1413: #  endif
1414: # endif
1415: 
1416: # ifdef YYSTACK_ALLOC
1417:    /* Pacify GCC's `empty if-body' warning.  */
1418: #  define YYSTACK_FREE(Ptr) do { /* empty */; } while (YYID (0))
1419: #  ifndef YYSTACK_ALLOC_MAXIMUM
1420:     /* The OS might guarantee only one guard page at the bottom of the stack,
1421:        and a page size can be as small as 4096 bytes.  So we cannot safely
1422:        invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
1423:        to allow for a few compiler-allocated temporary stack slots.  */
1424: #   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
1425: #  endif
1426: # else
1427: #  define YYSTACK_ALLOC YYMALLOC
1428: #  define YYSTACK_FREE YYFREE
1429: #  ifndef YYSTACK_ALLOC_MAXIMUM
1430: #   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
1431: #  endif
1432: #  if (defined __cplusplus && ! defined _STDLIB_H \
1433:        && ! ((defined YYMALLOC || defined malloc) \
1434: 	     && (defined YYFREE || defined free)))
1435: #   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
1436: #   ifndef _STDLIB_H
1437: #    define _STDLIB_H 1
1438: #   endif
1439: #  endif
1440: #  ifndef YYMALLOC
1441: #   define YYMALLOC malloc
1442: #   if ! defined malloc && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1443:      || defined __cplusplus || defined _MSC_VER)
1444: void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
1445: #   endif
1446: #  endif
1447: #  ifndef YYFREE
1448: #   define YYFREE free
1449: #   if ! defined free && ! defined _STDLIB_H && (defined __STDC__ || defined __C99__FUNC__ \
1450:      || defined __cplusplus || defined _MSC_VER)
1451: void free (void *); /* INFRINGES ON USER NAME SPACE */
1452: #   endif
1453: #  endif
1454: # endif
1455: #endif /* ! defined yyoverflow || YYERROR_VERBOSE */
1456: 
1457: 
1458: #if (! defined yyoverflow \
1459:      && (! defined __cplusplus \
1460: 	 || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
1461: 	     && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))
1462: 
1463: /* A type that is properly aligned for any stack member.  */
1464: union yyalloc
1465: {
1466:   yytype_int16 yyss;
1467:   YYSTYPE yyvs;
1468:     YYLTYPE yyls;
1469: };
1470: 
1471: /* The size of the maximum gap between one aligned stack and the next.  */
1472: # define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)
1473: 
1474: /* The size of an array large to enough to hold all stacks, each with
1475:    N elements.  */
1476: # define YYSTACK_BYTES(N) \
1477:      ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
1478:       + 2 * YYSTACK_GAP_MAXIMUM)
1479: 
1480: /* Copy COUNT objects from FROM to TO.  The source and destination do
1481:    not overlap.  */
1482: # ifndef YYCOPY
1483: #  if defined __GNUC__ && 1 < __GNUC__
1484: #   define YYCOPY(To, From, Count) \
1485:       __builtin_memcpy (To, From, (Count) * sizeof (*(From)))
1486: #  else
1487: #   define YYCOPY(To, From, Count)		\
1488:       do					\
1489: 	{					\
1490: 	  YYSIZE_T yyi;				\
1491: 	  for (yyi = 0; yyi < (Count); yyi++)	\
1492: 	    (To)[yyi] = (From)[yyi];		\
1493: 	}					\
1494:       while (YYID (0))
1495: #  endif
1496: # endif
1497: 
1498: /* Relocate STACK from its old location to the new one.  The
1499:    local variables YYSIZE and YYSTACKSIZE give the old and new number of
1500:    elements in the stack, and YYPTR gives the new location of the
1501:    stack.  Advance YYPTR to a properly aligned location for the next
1502:    stack.  */
1503: # define YYSTACK_RELOCATE(Stack)					\
1504:     do									\
1505:       {									\
1506: 	YYSIZE_T yynewbytes;						\
1507: 	YYCOPY (&yyptr->Stack, Stack, yysize);				\
1508: 	Stack = &yyptr->Stack;						\
1509: 	yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
1510: 	yyptr += yynewbytes / sizeof (*yyptr);				\
1511:       }									\
1512:     while (YYID (0))
1513: 
1514: #endif
1515: 
1516: /* YYFINAL -- State number of the termination state.  */
1517: #define YYFINAL  598
1518: /* YYLAST -- Last index in YYTABLE.  */
1519: #define YYLAST   53786
1520: 
1521: /* YYNTOKENS -- Number of terminals.  */
1522: #define YYNTOKENS  504
1523: /* YYNNTS -- Number of nonterminals.  */
1524: #define YYNNTS  395
1525: /* YYNRULES -- Number of rules.  */
1526: #define YYNRULES  1833
1527: /* YYNRULES -- Number of states.  */
1528: #define YYNSTATES  3022
1529: 
1530: /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */
1531: #define YYUNDEFTOK  2
1532: #define YYMAXUTOK   737
1533: 
1534: #define YYTRANSLATE(YYX)						\
1535:   ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)
1536: 
1537: /* YYTRANSLATE[YYLEX] -- Bison symbol number corresponding to YYLEX.  */
1538: static const yytype_uint16 yytranslate[] =
1539: {
1540:        0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1541:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1542:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1543:        2,     2,     2,     2,     2,   501,     2,   489,     2,     2,
1544:      494,   495,   487,   485,   498,   486,   496,   488,     2,     2,
1545:        2,     2,     2,     2,     2,     2,     2,     2,   503,   497,
1546:      481,   483,   482,   502,     2,     2,     2,     2,     2,     2,
1547:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1548:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1549:        2,   492,     2,   493,   490,     2,     2,     2,     2,     2,
1550:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1551:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1552:        2,     2,     2,   499,     2,   500,     2,     2,     2,     2,
1553:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1554:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1555:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1556:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1557:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1558:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1559:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1560:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1561:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1562:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1563:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1564:        2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
1565:        2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
1566:        5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
1567:       15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
1568:       25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
1569:       35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
1570:       45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
1571:       55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
1572:       65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
1573:       75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
1574:       85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
1575:       95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
1576:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
1577:      115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
1578:      125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
1579:      135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
1580:      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
1581:      155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
1582:      165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
1583:      175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
1584:      185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
1585:      195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
1586:      205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
1587:      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
1588:      225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
1589:      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
1590:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
1591:      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
1592:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
1593:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
1594:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
1595:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
1596:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
1597:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
1598:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
1599:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
1600:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
1601:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
1602:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
1603:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
1604:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
1605:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
1606:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
1607:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
1608:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
1609:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
1610:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
1611:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
1612:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
1613:      475,   476,   477,   478,   479,   480,   484,   491
1614: };
1615: 
1616: #if YYDEBUG
1617: /* YYPRHS[YYN] -- Index of the first RHS symbol of rule number YYN in
1618:    YYRHS.  */
1619: static const yytype_uint16 yyprhs[] =
1620: {
1621:        0,     0,     3,     5,     9,    11,    13,    15,    17,    19,
1622:       21,    23,    25,    27,    29,    31,    33,    35,    37,    39,
1623:       41,    43,    45,    47,    49,    51,    53,    55,    57,    59,
1624:       61,    63,    65,    67,    69,    71,    73,    75,    77,    79,
1625:       80,    85,    92,    97,   104,   109,   116,   121,   128,   130,
1626:      133,   137,   140,   142,   146,   149,   153,   155,   159,   162,
1627:      168,   172,   179,   184,   191,   198,   205,   211,   217,   224,
1628:      234,   239,   245,   253,   260,   265,   274,   279,   282,   287,
1629:      291,   298,   303,   306,   309,   312,   315,   317,   320,   321,
1630:      323,   326,   329,   332,   334,   338,   343,   346,   348,   349,
1631:      352,   356,   359,   363,   372,   374,   375,   377,   381,   388,
1632:      395,   404,   411,   420,   427,   436,   443,   452,   461,   472,
1633:      481,   492,   494,   495,   503,   505,   510,   515,   523,   526,
1634:      528,   532,   537,   541,   542,   544,   545,   548,   552,   558,
1635:      567,   573,   574,   580,   586,   594,   597,   598,   600,   602,
1636:      604,   608,   611,   612,   614,   615,   617,   621,   623,   627,
1637:      629,   632,   634,   638,   641,   644,   649,   655,   661,   670,
1638:      672,   673,   677,   687,   700,   704,   705,   710,   717,   719,
1639:      722,   724,   726,   727,   729,   732,   735,   737,   740,   743,
1640:      745,   748,   752,   755,   758,   761,   764,   768,   772,   776,
1641:      778,   782,   784,   785,   787,   790,   793,   796,   799,   802,
1642:      805,   808,   811,   813,   815,   816,   826,   839,   851,   852,
1643:      855,   857,   859,   861,   863,   865,   867,   871,   872,   874,
1644:      877,   879,   881,   884,   887,   891,   893,   895,   898,   901,
1645:      903,   906,   910,   916,   920,   923,   929,   935,   938,   942,
1646:      944,   946,   949,   952,   953,   958,   959,   963,   968,   973,
1647:      974,   978,   981,   982,   986,   988,   990,   992,   994,   996,
1648:      998,  1000,  1002,  1004,  1006,  1010,  1014,  1016,  1019,  1022,
1649:     1025,  1028,  1031,  1034,  1035,  1039,  1043,  1047,  1048,  1050,
1650:     1053,  1055,  1058,  1061,  1064,  1067,  1072,  1074,  1078,  1080,
1651:     1084,  1086,  1088,  1090,  1092,  1096,  1098,  1101,  1102,  1104,
1652:     1107,  1108,  1110,  1114,  1115,  1118,  1119,  1123,  1127,  1129,
1653:     1135,  1139,  1141,  1145,  1147,  1150,  1152,  1157,  1163,  1169,
1654:     1176,  1180,  1188,  1193,  1205,  1207,  1211,  1214,  1217,  1220,
1655:     1221,  1225,  1227,  1229,  1232,  1235,  1238,  1241,  1243,  1244,
1656:     1246,  1249,  1256,  1261,  1268,  1273,  1280,  1289,  1294,  1301,
1657:     1303,  1305,  1307,  1309,  1311,  1314,  1316,  1319,  1321,  1323,
1658:     1325,  1329,  1333,  1337,  1341,  1344,  1347,  1349,  1353,  1355,
1659:     1357,  1359,  1361,  1365,  1367,  1369,  1370,  1372,  1374,  1376,
1660:     1378,  1382,  1389,  1391,  1393,  1396,  1400,  1409,  1421,  1431,
1661:     1433,  1435,  1439,  1440,  1442,  1446,  1448,  1449,  1451,  1452,
1662:     1454,  1455,  1457,  1461,  1463,  1465,  1467,  1471,  1472,  1475,
1663:     1478,  1479,  1482,  1483,  1485,  1486,  1488,  1490,  1492,  1496,
1664:     1500,  1502,  1504,  1508,  1512,  1516,  1520,  1525,  1529,  1532,
1665:     1534,  1536,  1538,  1540,  1542,  1546,  1548,  1550,  1554,  1558,
1666:     1560,  1563,  1568,  1573,  1576,  1580,  1586,  1592,  1594,  1596,
1667:     1608,  1620,  1622,  1625,  1630,  1635,  1640,  1643,  1646,  1650,
1668:     1652,  1656,  1663,  1666,  1667,  1671,  1675,  1680,  1685,  1690,
1669:     1695,  1699,  1702,  1704,  1706,  1707,  1709,  1711,  1712,  1714,
1670:     1720,  1722,  1723,  1726,  1729,  1730,  1732,  1733,  1737,  1743,
1671:     1749,  1751,  1755,  1760,  1764,  1766,  1768,  1769,  1772,  1775,
1672:     1776,  1779,  1782,  1784,  1786,  1788,  1789,  1792,  1797,  1803,
1673:     1808,  1811,  1815,  1818,  1821,  1824,  1827,  1829,  1832,  1836,
1674:     1837,  1839,  1840,  1846,  1848,  1853,  1860,  1863,  1865,  1866,
1675:     1871,  1872,  1874,  1876,  1879,  1882,  1885,  1887,  1889,  1892,
1676:     1895,  1897,  1899,  1901,  1903,  1905,  1907,  1911,  1915,  1919,
1677:     1920,  1922,  1926,  1928,  1931,  1933,  1935,  1937,  1939,  1941,
1678:     1944,  1949,  1954,  1960,  1962,  1964,  1967,  1968,  1971,  1972,
1679:     1974,  1978,  1980,  1981,  1983,  1986,  1990,  1993,  1998,  2001,
1680:     2005,  2008,  2009,  2011,  2014,  2015,  2020,  2026,  2028,  2031,
1681:     2034,  2035,  2037,  2041,  2043,  2046,  2050,  2054,  2058,  2062,
1682:     2066,  2068,  2073,  2077,  2082,  2088,  2093,  2099,  2104,  2110,
1683:     2113,  2118,  2120,  2122,  2123,  2125,  2130,  2136,  2141,  2142,
1684:     2145,  2148,  2151,  2153,  2155,  2156,  2161,  2164,  2166,  2169,
1685:     2172,  2177,  2180,  2187,  2190,  2192,  2196,  2201,  2202,  2205,
1686:     2206,  2209,  2210,  2212,  2216,  2220,  2223,  2224,  2227,  2232,
1687:     2234,  2236,  2239,  2243,  2249,  2256,  2259,  2263,  2269,  2275,
1688:     2279,  2284,  2285,  2287,  2289,  2291,  2293,  2295,  2298,  2303,
1689:     2305,  2307,  2309,  2311,  2314,  2318,  2319,  2321,  2323,  2325,
1690:     2327,  2329,  2332,  2335,  2338,  2341,  2344,  2346,  2350,  2351,
1691:     2353,  2355,  2357,  2359,  2365,  2368,  2370,  2372,  2374,  2376,
1692:     2381,  2383,  2386,  2389,  2391,  2395,  2399,  2402,  2404,  2405,
1693:     2411,  2414,  2420,  2423,  2425,  2429,  2433,  2434,  2436,  2438,
1694:     2440,  2442,  2444,  2446,  2448,  2450,  2452,  2454,  2456,  2458,
1695:     2460,  2462,  2464,  2466,  2468,  2470,  2472,  2474,  2476,  2478,
1696:     2480,  2482,  2486,  2490,  2494,  2498,  2502,  2506,  2510,  2511,
1697:     2513,  2517,  2521,  2527,  2530,  2533,  2537,  2541,  2545,  2549,
1698:     2553,  2557,  2561,  2565,  2569,  2573,  2577,  2581,  2585,  2588,
1699:     2591,  2595,  2599,  2602,  2605,  2609,  2613,  2619,  2624,  2631,
1700:     2635,  2641,  2646,  2653,  2658,  2665,  2671,  2679,  2683,  2686,
1701:     2691,  2695,  2698,  2700,  2704,  2708,  2712,  2716,  2720,  2724,
1702:     2729,  2733,  2738,  2742,  2747,  2753,  2760,  2767,  2775,  2782,
1703:     2790,  2797,  2805,  2809,  2814,  2819,  2826,  2828,  2833,  2835,
1704:     2839,  2842,  2845,  2849,  2853,  2857,  2861,  2865,  2869,  2873,
1705:     2877,  2881,  2885,  2889,  2893,  2897,  2900,  2903,  2909,  2916,
1706:     2923,  2931,  2933,  2935,  2938,  2941,  2944,  2949,  2951,  2954,
1707:     2956,  2959,  2962,  2967,  2971,  2978,  2986,  2996,  3004,  3012,
1708:     3017,  3023,  3025,  3027,  3029,  3035,  3037,  3039,  3044,  3046,
1709:     3051,  3053,  3058,  3060,  3065,  3067,  3069,  3071,  3073,  3075,
1710:     3077,  3084,  3091,  3096,  3101,  3106,  3111,  3118,  3124,  3130,
1711:     3136,  3141,  3148,  3153,  3159,  3160,  3166,  3167,  3169,  3170,
1712:     3173,  3174,  3176,  3180,  3184,  3187,  3190,  3191,  3198,  3200,
1713:     3201,  3205,  3206,  3209,  3212,  3213,  3215,  3220,  3223,  3226,
1714:     3229,  3232,  3235,  3240,  3244,  3246,  3252,  3256,  3258,  3262,
1715:     3264,  3267,  3269,  3271,  3273,  3275,  3277,  3279,  3281,  3283,
1716:     3285,  3287,  3289,  3291,  3293,  3295,  3297,  3299,  3301,  3303,
1717:     3308,  3310,  3315,  3317,  3322,  3324,  3327,  3329,  3332,  3334,
1718:     3337,  3339,  3343,  3345,  3349,  3351,  3354,  3356,  3357,  3359,
1719:     3363,  3365,  3369,  3373,  3375,  3379,  3383,  3384,  3386,  3388,
1720:     3390,  3392,  3394,  3396,  3398,  3400,  3402,  3404,  3409,  3413,
1721:     3416,  3420,  3421,  3425,  3429,  3432,  3435,  3437,  3438,  3441,
1722:     3444,  3448,  3451,  3453,  3455,  3459,  3465,  3467,  3470,  3475,
1723:     3478,  3479,  3481,  3482,  3484,  3487,  3490,  3494,  3500,  3502,
1724:     3503,  3505,  3508,  3509,  3512,  3514,  3515,  3517,  3518,  3520,
1725:     3524,  3526,  3529,  3533,  3536,  3538,  3542,  3548,  3553,  3556,
1726:     3558,  3559,  3563,  3565,  3569,  3571,  3574,  3579,  3582,  3583,
1727:     3585,  3589,  3591,  3594,  3596,  3600,  3602,  3605,  3607,  3609,
1728:     3611,  3614,  3616,  3618,  3621,  3623,  3625,  3628,  3636,  3639,
1729:     3645,  3649,  3653,  3655,  3657,  3659,  3661,  3663,  3665,  3667,
1730:     3669,  3671,  3673,  3675,  3677,  3679,  3681,  3683,  3685,  3687,
1731:     3689,  3691,  3693,  3696,  3699,  3703,  3707,  3708,  3710,  3712,
1732:     3714,  3716,  3718,  3720,  3722,  3728,  3732,  3733,  3735,  3737,
1733:     3739,  3741,  3746,  3754,  3757,  3758,  3760,  3762,  3764,  3766,
1734:     3780,  3797,  3799,  3802,  3803,  3805,  3806,  3808,  3809,  3812,
1735:     3813,  3815,  3816,  3823,  3832,  3839,  3848,  3855,  3864,  3867,
1736:     3869,  3874,  3878,  3881,  3886,  3890,  3896,  3898,  3899,  3901,
1737:     3903,  3904,  3906,  3908,  3910,  3912,  3914,  3916,  3918,  3920,
1738:     3922,  3924,  3926,  3930,  3932,  3934,  3936,  3938,  3940,  3942,
1739:     3945,  3947,  3949,  3952,  3956,  3960,  3964,  3966,  3970,  3974,
1740:     3977,  3981,  3985,  3989,  3993,  3995,  3997,  3999,  4001,  4005,
1741:     4011,  4013,  4015,  4017,  4019,  4023,  4026,  4029,  4033,  4035,
1742:     4037,  4042,  4048,  4054,  4059,  4066,  4068,  4070,  4072,  4074,
1743:     4076,  4078,  4079,  4081,  4085,  4087,  4088,  4096,  4098,  4101,
1744:     4105,  4108,  4109,  4112,  4113,  4116,  4121,  4124,  4126,  4128,
1745:     4130,  4133,  4137,  4140,  4143,  4146,  4149,  4153,  4158,  4161,
1746:     4163,  4165,  4167,  4171,  4174,  4184,  4196,  4209,  4224,  4228,
1747:     4233,  4238,  4239,  4247,  4258,  4268,  4271,  4275,  4276,  4281,
1748:     4283,  4285,  4287,  4289,  4291,  4293,  4295,  4297,  4299,  4301,
1749:     4303,  4305,  4307,  4309,  4311,  4313,  4315,  4317,  4319,  4321,
1750:     4323,  4325,  4327,  4329,  4331,  4333,  4335,  4337,  4339,  4341,
1751:     4343,  4345,  4347,  4349,  4351,  4353,  4355,  4357,  4359,  4361,
1752:     4363,  4365,  4367,  4369,  4371,  4373,  4375,  4377,  4379,  4381,
1753:     4383,  4385,  4387,  4389,  4391,  4393,  4395,  4397,  4399,  4401,
1754:     4403,  4405,  4407,  4409,  4411,  4413,  4415,  4417,  4419,  4421,
1755:     4423,  4425,  4427,  4429,  4431,  4433,  4435,  4437,  4439,  4441,
1756:     4443,  4445,  4447,  4449,  4451,  4453,  4455,  4457,  4459,  4461,
1757:     4463,  4465,  4467,  4469,  4471,  4473,  4475,  4477,  4479,  4481,
1758:     4483,  4485,  4487,  4489,  4491,  4493,  4495,  4497,  4499,  4501,
1759:     4503,  4505,  4507,  4509,  4511,  4513,  4515,  4517,  4519,  4521,
1760:     4523,  4525,  4527,  4529,  4531,  4533,  4535,  4537,  4539,  4541,
1761:     4543,  4545,  4547,  4549,  4551,  4553,  4555,  4557,  4559,  4561,
1762:     4563,  4565,  4567,  4569,  4571,  4573,  4575,  4577,  4579,  4581,
1763:     4583,  4585,  4587,  4589,  4591,  4593,  4595,  4597,  4599,  4601,
1764:     4603,  4605,  4607,  4609,  4611,  4613,  4615,  4617,  4619,  4621,
1765:     4623,  4625,  4627,  4629,  4631,  4633,  4635,  4637,  4639,  4641,
1766:     4643,  4645,  4647,  4649,  4651,  4653,  4655,  4657,  4659,  4661,
1767:     4663,  4665,  4667,  4669,  4671,  4673,  4675,  4677,  4679,  4681,
1768:     4683,  4685,  4687,  4689,  4691,  4693,  4695,  4697,  4699,  4701,
1769:     4703,  4705,  4707,  4709,  4711,  4713,  4715,  4717,  4719,  4721,
1770:     4723,  4725,  4727,  4729,  4731,  4733,  4735,  4737,  4739,  4741,
1771:     4743,  4745,  4747,  4749,  4751,  4753,  4755,  4757,  4759,  4761,
1772:     4763,  4765,  4767,  4769,  4771,  4773,  4775,  4777,  4779,  4781,
1773:     4783,  4785,  4787,  4789,  4791,  4793,  4795,  4797,  4799,  4801,
1774:     4803,  4805,  4807,  4809,  4811,  4813,  4815,  4817,  4819,  4821,
1775:     4823,  4825,  4827,  4829,  4831,  4833,  4835,  4837,  4839,  4841,
1776:     4843,  4845,  4847,  4849,  4851,  4853,  4855,  4857,  4859,  4861,
1777:     4863,  4865,  4867,  4869,  4871,  4873,  4875,  4877,  4879,  4881,
1778:     4883,  4885,  4887,  4889,  4891,  4893,  4895,  4897,  4899,  4901,
1779:     4903,  4905,  4907,  4909,  4911,  4913,  4915,  4917,  4919,  4921,
1780:     4923,  4925,  4927,  4929,  4931,  4933,  4935,  4937,  4939,  4941,
1781:     4943,  4945,  4947,  4949,  4951,  4953,  4955,  4957,  4959,  4961,
1782:     4963,  4965,  4967,  4969,  4971,  4973,  4975,  4977,  4979,  4981,
1783:     4983,  4985,  4987,  4989,  4991,  4993,  4995,  4997,  4999,  5001,
1784:     5003,  5005,  5007,  5009,  5011,  5013,  5015,  5017,  5019,  5021,
1785:     5023,  5025,  5027,  5029,  5031,  5033,  5035,  5037,  5039,  5041,
1786:     5043,  5045,  5047,  5049,  5051,  5053,  5055,  5057,  5059,  5061,
1787:     5063,  5065,  5067,  5069,  5071,  5073,  5075,  5077,  5079,  5081,
1788:     5083,  5085,  5087,  5089,  5091,  5093,  5095,  5097,  5099,  5101,
1789:     5103,  5105,  5107,  5109,  5111,  5113,  5115,  5117,  5119,  5121,
1790:     5123,  5125,  5127,  5129,  5131,  5133,  5135,  5137,  5139,  5141,
1791:     5143,  5145,  5147,  5149,  5151,  5153,  5155,  5157,  5159,  5161,
1792:     5163,  5165,  5167,  5169,  5171,  5173,  5175,  5177,  5179,  5181,
1793:     5183,  5185,  5187,  5189,  5191,  5193,  5195,  5197,  5199,  5201,
1794:     5203,  5205,  5207,  5209,  5211,  5213,  5215,  5217,  5219,  5221,
1795:     5223,  5225,  5227,  5229,  5231,  5233,  5235,  5237,  5239,  5241,
1796:     5243,  5245,  5247,  5249,  5251,  5253,  5255,  5257,  5259,  5261,
1797:     5263,  5265,  5267,  5269,  5271,  5273,  5275,  5277,  5279,  5281,
1798:     5283,  5285,  5287,  5289,  5291,  5293,  5295,  5297,  5299,  5301,
1799:     5303,  5305,  5307,  5309,  5311,  5313,  5315,  5317,  5319,  5321,
1800:     5323,  5325,  5327,  5329,  5331,  5333,  5335,  5337,  5339,  5341,
1801:     5343,  5345,  5347,  5349,  5351,  5353,  5355,  5357,  5359,  5361,
1802:     5363,  5365,  5367,  5369,  5371,  5373,  5375,  5377,  5379,  5381,
1803:     5383,  5385,  5387,  5389,  5391,  5393,  5395,  5397,  5399,  5401,
1804:     5403,  5405,  5407,  5409
1805: };
1806: 
1807: /* YYRHS -- A `-1'-separated list of the rules' RHS.  */
1808: static const yytype_int16 yyrhs[] =
1809: {
1810:      505,     0,    -1,   506,    -1,   506,   497,   507,    -1,   507,
1811:       -1,   847,    -1,   549,    -1,   508,    -1,   879,    -1,   886,
1812:       -1,   848,    -1,   616,    -1,   889,    -1,   520,    -1,   612,
1813:       -1,   837,    -1,   545,    -1,   558,    -1,   519,    -1,   875,
1814:       -1,   605,    -1,   547,    -1,   851,    -1,   849,    -1,   850,
1815:       -1,   840,    -1,   525,    -1,   868,    -1,   544,    -1,   834,
1816:       -1,   523,    -1,   633,    -1,   556,    -1,   615,    -1,   870,
1817:       -1,   880,    -1,   862,    -1,   883,    -1,   887,    -1,    -1,
1818:       29,   402,   702,   516,    -1,    29,   402,   188,   150,   702,
1819:      516,    -1,    29,   198,   814,   516,    -1,    29,   198,   188,
1820:      150,   814,   516,    -1,    29,   367,   814,   516,    -1,    29,
1821:      367,   188,   150,   814,   516,    -1,    29,   449,   814,   516,
1822:       -1,    29,   449,   188,   150,   814,   516,    -1,   511,    -1,
1823:      509,   511,    -1,   373,   115,   744,    -1,   135,   115,    -1,
1824:      345,    -1,   345,   551,   552,    -1,   373,   553,    -1,   373,
1825:      173,   604,    -1,   515,    -1,   512,   498,   515,    -1,    23,
1826:      583,    -1,    23,   188,   269,   150,   583,    -1,    23,    75,
1827:      583,    -1,    23,    75,   188,   269,   150,   583,    -1,    29,
1828:      524,   823,   510,    -1,    29,   524,   823,   135,   269,   274,
1829:       -1,    29,   524,   823,   373,   269,   274,    -1,    29,   524,
1830:      823,   373,   389,   555,    -1,    29,   524,   823,   373,   571,
1831:       -1,    29,   524,   823,   343,   571,    -1,    29,   524,   823,
1832:      373,   392,   823,    -1,    29,   524,   823,    23,   173,   604,
1833:       36,   187,   561,    -1,    29,   524,   823,   509,    -1,    29,
1834:      524,   823,   135,   187,    -1,    29,   524,   823,   135,   187,
1835:      188,   150,    -1,   135,   524,   188,   150,   823,   609,    -1,
1836:      135,   524,   823,   609,    -1,    29,   524,   823,   518,   424,
1837:      714,   711,   514,    -1,    29,   524,   823,   517,    -1,    23,
1838:      573,    -1,    29,    86,   817,   559,    -1,   440,    86,   817,
1839:       -1,   135,    86,   188,   150,   817,   609,    -1,   135,    86,
1840:      817,   609,    -1,   373,   241,    -1,   373,   433,    -1,   373,
1841:      571,    -1,   343,   571,    -1,   517,    -1,   437,   744,    -1,
1842:       -1,   566,    -1,   373,   566,    -1,    23,   566,    -1,   135,
1843:      581,    -1,   513,    -1,   516,   498,   513,    -1,   288,   494,
1844:      512,   495,    -1,   373,   107,    -1,   373,    -1,    -1,   111,
1845:      817,    -1,   111,   314,   817,    -1,   111,    27,    -1,   111,
1846:      314,    27,    -1,    93,   424,   828,    36,   142,   494,   521,
1847:      495,    -1,   522,    -1,    -1,   822,    -1,   522,   498,   822,
1848:       -1,    29,   359,   817,   339,   413,   817,    -1,    29,   402,
1849:      702,   339,   413,   817,    -1,    29,   402,   188,   150,   702,
1850:      339,   413,   817,    -1,    29,   367,   814,   339,   413,   817,
1851:       -1,    29,   367,   188,   150,   814,   339,   413,   817,    -1,
1852:       29,   449,   814,   339,   413,   817,    -1,    29,   449,   188,
1853:      150,   814,   339,   413,   817,    -1,    29,   198,   814,   339,
1854:      413,   817,    -1,    29,   198,   188,   150,   814,   339,   413,
1855:      817,    -1,    29,   402,   702,   339,   524,   817,   413,   817,
1856:       -1,    29,   402,   188,   150,   702,   339,   524,   817,   413,
1857:      817,    -1,    29,   402,   702,   339,    86,   817,   413,   817,
1858:       -1,    29,   402,   188,   150,   702,   339,    86,   817,   413,
1859:      817,    -1,    75,    -1,    -1,   529,   208,   215,   527,   526,
1860:      532,   534,    -1,   633,    -1,   297,   535,   442,   633,    -1,
1861:      494,   539,   495,   633,    -1,   494,   539,   495,   297,   535,
1862:      442,   633,    -1,   115,   443,    -1,   814,    -1,   814,    36,
1863:      823,    -1,   494,   542,   495,   708,    -1,   284,    86,   817,
1864:       -1,    -1,   638,    -1,    -1,   823,   801,    -1,   543,   483,
1865:      744,    -1,   494,   536,   495,   483,   744,    -1,   284,    84,
1866:      528,   131,   435,   373,   541,   708,    -1,   284,    84,   528,
1867:      131,   270,    -1,    -1,   823,   537,   538,   652,   653,    -1,
1868:      749,   537,   538,   652,   653,    -1,   494,   744,   495,   537,
1869:      538,   652,   653,    -1,   347,   804,    -1,    -1,   436,    -1,
1870:      401,    -1,   543,    -1,   536,   498,   543,    -1,    73,   828,
1871:       -1,    -1,   828,    -1,    -1,   530,    -1,   539,   498,   530,
1872:       -1,   531,    -1,   540,   498,   531,    -1,   540,    -1,   540,
1873:      498,    -1,   533,    -1,   542,   498,   533,    -1,   823,   801,
1874:       -1,   311,   823,    -1,   311,   823,   483,   867,    -1,   311,
1875:      823,   494,   779,   495,    -1,    93,   603,   367,   814,   546,
1876:       -1,    93,   603,   367,   188,   269,   150,   814,   546,    -1,
1877:      550,    -1,    -1,   149,   817,   548,    -1,    93,   603,   402,
1878:      891,    36,   149,   817,   548,   890,    -1,    93,   603,   402,
1879:      188,   269,   150,   891,    36,   149,   817,   548,   890,    -1,
1880:      494,   777,   495,    -1,    -1,    29,   367,   814,   550,    -1,
1881:       29,   367,   188,   150,   814,   550,    -1,   553,    -1,   550,
1882:      553,    -1,   456,    -1,   480,    -1,    -1,     4,    -1,   485,
1883:        4,    -1,   486,     4,    -1,   555,    -1,    36,   716,    -1,
1884:       55,   552,    -1,   106,    -1,   267,   106,    -1,   197,   554,
1885:      552,    -1,   247,   552,    -1,   255,   552,    -1,   267,   247,
1886:       -1,   267,   255,    -1,   298,    54,   828,    -1,   367,   260,
1887:      828,    -1,   387,   551,   552,    -1,   345,    -1,   345,   551,
1888:      552,    -1,    54,    -1,    -1,   821,    -1,   485,   821,    -1,
1889:      486,   821,    -1,    19,   557,    -1,    47,   557,    -1,   387,
1890:      557,    -1,    79,   557,    -1,   141,   557,    -1,   352,   557,
1891:       -1,   459,    -1,   415,    -1,    -1,    93,   603,   402,   814,
1892:      494,   590,   495,   578,   570,    -1,    93,   603,   402,   188,
1893:      269,   150,   814,   494,   590,   495,   578,   570,    -1,    93,
1894:      289,   341,   603,   402,   814,   494,   590,   495,   578,   570,
1895:       -1,    -1,   559,   582,    -1,   598,    -1,   898,    -1,   773,
1896:       -1,   552,    -1,   822,    -1,   268,    -1,   494,   550,   495,
1897:       -1,    -1,   822,    -1,   267,    22,    -1,   346,    -1,    58,
1898:       -1,   373,   274,    -1,   373,   115,    -1,    86,   817,   565,
1899:       -1,   565,    -1,   577,    -1,    73,   828,    -1,   269,   274,
1900:       -1,   274,    -1,   430,   589,    -1,   317,   221,   589,    -1,
1901:       67,   494,   744,   495,   572,    -1,   437,    81,   817,    -1,
1902:      115,   745,    -1,   173,   604,    36,   187,   561,    -1,   333,
1903:      814,   592,   601,   568,    -1,   581,   562,    -1,   284,   435,
1904:      563,    -1,   567,    -1,   594,    -1,   567,   594,    -1,   594,
1905:      567,    -1,    -1,   288,   494,   584,   495,    -1,    -1,   284,
1906:       79,   135,    -1,   284,    79,   120,   355,    -1,   284,    79,
1907:      316,   355,    -1,    -1,   494,   575,   495,    -1,   267,   200,
1908:       -1,    -1,    86,   817,   599,    -1,   599,    -1,    78,    -1,
1909:       87,    -1,   116,    -1,   187,    -1,   199,    -1,   389,    -1,
1910:      392,    -1,    27,    -1,   595,    -1,   575,   498,   595,    -1,
1911:      437,   198,   586,    -1,   117,    -1,   269,   117,    -1,   202,
1912:      118,    -1,   202,   191,    -1,   456,   571,    -1,   456,   282,
1913:       -1,   458,   282,    -1,    -1,   494,   585,   495,    -1,   580,
1914:      196,   574,    -1,   580,   147,   574,    -1,    -1,   832,    -1,
1915:      269,   117,    -1,   117,    -1,   202,   191,    -1,   202,   118,
1916:       -1,   269,   439,    -1,   267,   200,    -1,   823,   714,   569,
1917:      593,    -1,   566,    -1,   584,   498,   566,    -1,   588,    -1,
1918:      585,   498,   588,    -1,   823,    -1,   583,    -1,   602,    -1,
1919:      573,    -1,   832,   483,   560,    -1,   832,    -1,   456,   579,
1920:       -1,    -1,   600,    -1,   600,   498,    -1,    -1,   823,    -1,
1921:      494,   596,   495,    -1,    -1,   593,   564,    -1,    -1,   284,
1922:      120,   563,    -1,   832,   483,   560,    -1,   832,    -1,   832,
1923:      496,   832,   483,   560,    -1,   832,   496,   832,    -1,   591,
1924:       -1,   596,   498,   591,    -1,   596,    -1,   596,   498,    -1,
1925:      714,    -1,   825,   829,   489,   424,    -1,   374,   825,   829,
1926:      489,   424,    -1,    67,   494,   744,   495,   559,    -1,   430,
1927:      494,   597,   495,   589,   559,    -1,   430,   576,   559,    -1,
1928:      317,   221,   494,   597,   495,   589,   559,    -1,   317,   221,
1929:      576,   559,    -1,   166,   221,   494,   597,   495,   333,   814,
1930:      592,   601,   568,   559,    -1,   587,    -1,   600,   498,   587,
1931:       -1,   245,   170,    -1,   245,   302,    -1,   245,   379,    -1,
1932:       -1,   231,   814,   580,    -1,   408,    -1,   406,    -1,   235,
1933:      408,    -1,   235,   406,    -1,   175,   408,    -1,   175,   406,
1934:       -1,   433,    -1,    -1,    30,    -1,    54,   115,    -1,   135,
1935:      606,   188,   150,   608,   609,    -1,   135,   606,   608,   609,
1936:       -1,   135,   607,   188,   150,   815,   609,    -1,   135,   607,
1937:      815,   609,    -1,   135,   610,   817,   284,   828,   609,    -1,
1938:      135,   610,   188,   150,   817,   284,   828,   609,    -1,   135,
1939:      424,   611,   609,    -1,   135,   424,   188,   150,   611,   609,
1940:       -1,   402,    -1,   367,    -1,   171,    -1,   242,    -1,   449,
1941:       -1,   246,   449,    -1,   198,    -1,   166,   402,    -1,    74,
1942:       -1,    90,    -1,   389,    -1,   409,   362,   301,    -1,   409,
1943:      362,   127,    -1,   409,   362,   407,    -1,   409,   362,    83,
1944:       -1,    21,   248,    -1,   144,   418,    -1,   154,    -1,   166,
1945:      107,   460,    -1,   323,    -1,   359,    -1,   370,    -1,   828,
1946:       -1,   608,   498,   828,    -1,    58,    -1,   346,    -1,    -1,
1947:      309,    -1,   356,    -1,   418,    -1,   714,    -1,   611,   498,
1948:      714,    -1,    93,   613,   814,   614,    36,   744,    -1,   171,
1949:       -1,   242,    -1,   494,   495,    -1,   494,   779,   495,    -1,
1950:      529,   435,   876,   373,   541,   691,   877,   534,    -1,    91,
1951:      628,   814,   592,   626,   617,   622,   631,   618,   551,   623,
1952:       -1,    91,   494,   836,   495,   413,   622,   631,   551,   623,
1953:       -1,   169,    -1,   413,    -1,   620,   122,   822,    -1,    -1,
1954:      630,    -1,   619,   498,   630,    -1,   437,    -1,    -1,    36,
1955:       -1,    -1,   322,    -1,    -1,   627,    -1,   494,   632,   495,
1956:       -1,   859,    -1,   552,    -1,   487,    -1,   494,   619,   495,
1957:       -1,    -1,   832,   624,    -1,   456,   282,    -1,    -1,   627,
1958:      629,    -1,    -1,    50,    -1,    -1,    50,    -1,   282,    -1,
1959:      168,    -1,   121,   621,   822,    -1,   274,   621,   822,    -1,
1960:       95,    -1,   183,    -1,   325,   621,   822,    -1,   143,   621,
1961:      822,    -1,   165,   325,   596,    -1,   165,   325,   487,    -1,
1962:      165,   269,   274,   596,    -1,   165,   274,   596,    -1,   139,
1963:      822,    -1,   859,    -1,   822,    -1,   390,    -1,   391,    -1,
1964:      625,    -1,   632,   498,   625,    -1,   635,    -1,   634,    -1,
1965:      494,   635,   495,    -1,   494,   634,   495,    -1,   637,    -1,
1966:      636,   649,    -1,   636,   648,   682,   655,    -1,   636,   648,
1967:      654,   683,    -1,   638,   636,    -1,   638,   636,   649,    -1,
1968:      638,   636,   648,   682,   655,    -1,   638,   636,   648,   654,
1969:      683,    -1,   637,    -1,   634,    -1,   366,   646,   803,   641,
1970:      691,   708,   671,   680,   754,   681,   659,    -1,   366,   645,
1971:      805,   641,   691,   708,   671,   680,   754,   681,   659,    -1,
1972:      690,    -1,   402,   702,    -1,   636,   429,   644,   636,    -1,
1973:      636,   213,   644,   636,    -1,   636,   145,   644,   636,    -1,
1974:      456,   639,    -1,   480,   639,    -1,   456,   331,   639,    -1,
1975:      640,    -1,   639,   498,   640,    -1,   817,   830,    36,   494,
1976:      836,   495,    -1,   215,   642,    -1,    -1,   408,   643,   814,
1977:       -1,   406,   643,   814,    -1,   235,   408,   643,   814,    -1,
1978:      235,   406,   643,   814,    -1,   175,   408,   643,   814,    -1,
1979:      175,   406,   643,   814,    -1,   433,   643,   814,    -1,   402,
1980:      814,    -1,   814,    -1,   402,    -1,    -1,    27,    -1,   130,
1981:       -1,    -1,   130,    -1,   130,   284,   494,   777,   495,    -1,
1982:       27,    -1,    -1,   189,   276,    -1,   344,   276,    -1,    -1,
1983:      649,    -1,    -1,   290,    54,   650,    -1,   290,    54,    27,
1984:      652,   653,    -1,   290,    54,   487,   652,   653,    -1,   651,
1985:       -1,   650,   498,   651,    -1,   744,   437,   773,   653,    -1,
1986:      744,   652,   653,    -1,    37,    -1,   124,    -1,    -1,   479,
1987:      161,    -1,   479,   225,    -1,    -1,   656,   657,    -1,   657,
1988:      656,    -1,   656,    -1,   657,    -1,   654,    -1,    -1,   232,
1989:      665,    -1,   232,   665,   498,   666,    -1,   159,   670,   667,
1990:      669,   285,    -1,   159,   670,   669,   285,    -1,   281,   666,
1991:       -1,   281,   667,   669,    -1,     4,   489,    -1,     9,   489,
1992:       -1,     4,   306,    -1,     9,   306,    -1,     9,    -1,     9,
1993:      355,    -1,   437,   357,   661,    -1,    -1,   823,    -1,    -1,
1994:      660,   494,   658,   495,   664,    -1,   658,    -1,   658,   494,
1995:      823,   495,    -1,   658,   494,   823,   498,     9,   495,    -1,
1996:      404,   661,    -1,   662,    -1,    -1,   340,   494,     9,   495,
1997:       -1,    -1,   744,    -1,    27,    -1,   744,   489,    -1,     4,
1998:      306,    -1,     9,   306,    -1,   744,    -1,   746,    -1,   485,
1999:      668,    -1,   486,   668,    -1,   821,    -1,     4,    -1,   354,
2000:       -1,   355,    -1,   161,    -1,   266,    -1,   178,    54,   673,
2001:       -1,   178,    54,    27,    -1,   178,    54,   487,    -1,    -1,
2002:      674,    -1,   672,   498,   674,    -1,   672,    -1,   672,   498,
2003:       -1,   744,    -1,   675,    -1,   677,    -1,   676,    -1,   678,
2004:       -1,   494,   495,    -1,   353,   494,   777,   495,    -1,    96,
2005:      494,   777,   495,    -1,   179,   375,   494,   673,   495,    -1,
2006:      179,    -1,   180,    -1,   182,   744,    -1,    -1,   324,   744,
2007:       -1,    -1,   684,    -1,   164,   327,   285,    -1,   682,    -1,
2008:       -1,   685,    -1,   684,   685,    -1,   686,   687,   688,    -1,
2009:      164,   435,    -1,   164,   267,   221,   435,    -1,   164,   376,
2010:       -1,   164,   221,   376,    -1,   279,   813,    -1,    -1,   273,
2011:       -1,   380,   240,    -1,    -1,   443,   494,   777,   495,    -1,
2012:      689,   498,   494,   777,   495,    -1,   689,    -1,   689,   498,
2013:       -1,   169,   693,    -1,    -1,   694,    -1,   692,   498,   694,
2014:       -1,   692,    -1,   692,   498,    -1,   702,   697,   663,    -1,
2015:      703,   698,   663,    -1,   226,   703,   698,    -1,   634,   697,
2016:      663,    -1,   226,   634,   697,    -1,   695,    -1,   494,   695,
2017:      495,   696,    -1,   494,   695,   495,    -1,   694,    94,   220,
2018:      694,    -1,   694,   699,   220,   694,   701,    -1,   694,   220,
2019:      694,   701,    -1,   694,   263,   699,   220,   694,    -1,   694,
2020:      263,   220,   694,    -1,    36,   823,   494,   816,   495,    -1,
2021:       36,   824,    -1,   823,   494,   816,   495,    -1,   823,    -1,
2022:      696,    -1,    -1,   696,    -1,    36,   494,   709,   495,    -1,
2023:       36,   823,   494,   709,   495,    -1,   823,   494,   709,   495,
2024:       -1,    -1,   170,   700,    -1,   229,   700,    -1,   350,   700,
2025:       -1,   204,    -1,   293,    -1,    -1,   437,   494,   816,   495,
2026:       -1,   284,   744,    -1,   814,    -1,   814,   487,    -1,   285,
2027:      814,    -1,   285,   494,   814,   495,    -1,   749,   707,    -1,
2028:      355,   169,   494,   705,   495,   707,    -1,   749,   706,    -1,
2029:      704,    -1,   705,   498,   704,    -1,    36,   494,   709,   495,
2030:       -1,    -1,   480,   291,    -1,    -1,   453,   744,    -1,    -1,
2031:      710,    -1,   709,   498,   710,    -1,   823,   714,   711,    -1,
2032:       73,   828,    -1,    -1,   823,   714,    -1,   712,   498,   823,
2033:      714,    -1,   354,    -1,   395,    -1,   716,   715,    -1,   374,
2034:      716,   715,    -1,   716,    35,   492,   821,   493,    -1,   374,
2035:      716,    35,   492,   821,   493,    -1,   716,    35,    -1,   374,
2036:      716,    35,    -1,   713,   494,   712,   495,   715,    -1,   243,
2037:      494,   781,   495,   715,    -1,   715,   492,   493,    -1,   715,
2038:      492,   821,   493,    -1,    -1,   718,    -1,   720,    -1,   722,
2039:       -1,   726,    -1,   732,    -1,   733,   743,    -1,   733,   494,
2040:      821,   495,    -1,   720,    -1,   723,    -1,   727,    -1,   732,
2041:       -1,   827,   719,    -1,   494,   777,   495,    -1,    -1,   211,
2042:       -1,   212,    -1,   381,    -1,    49,    -1,   328,    -1,   162,
2043:      721,    -1,   134,   313,    -1,   113,   719,    -1,   112,   719,
2044:       -1,   277,   719,    -1,    52,    -1,   494,   821,   495,    -1,
2045:       -1,   724,    -1,   725,    -1,   724,    -1,   725,    -1,    51,
2046:      731,   494,   777,   495,    -1,    51,   731,    -1,   728,    -1,
2047:      729,    -1,   728,    -1,   729,    -1,   730,   494,   821,   495,
2048:       -1,   730,    -1,    65,   731,    -1,    64,   731,    -1,   444,
2049:       -1,   262,    65,   731,    -1,   262,    64,   731,    -1,   264,
2050:      731,    -1,   446,    -1,    -1,   412,   494,   821,   495,   734,
2051:       -1,   412,   734,    -1,   411,   494,   821,   495,   734,    -1,
2052:      411,   734,    -1,   214,    -1,   480,   411,   477,    -1,   458,
2053:      411,   477,    -1,    -1,   474,    -1,   475,    -1,   257,    -1,
2054:      258,    -1,   109,    -1,   110,    -1,   185,    -1,   186,    -1,
2055:      253,    -1,   254,    -1,   363,    -1,   364,    -1,   251,    -1,
2056:      252,    -1,   249,    -1,   250,    -1,   735,    -1,   736,    -1,
2057:      737,    -1,   738,    -1,   739,    -1,   740,    -1,   741,    -1,
2058:      742,    -1,   735,   413,   736,    -1,   737,   413,   738,    -1,
2059:      737,   413,   739,    -1,   737,   413,   740,    -1,   738,   413,
2060:      739,    -1,   738,   413,   740,    -1,   739,   413,   740,    -1,
2061:       -1,   746,    -1,   744,    11,   714,    -1,   744,    73,   828,
2062:       -1,   744,    41,   411,   477,   744,    -1,   485,   744,    -1,
2063:      486,   744,    -1,   744,   485,   744,    -1,   744,   486,   744,
2064:       -1,   744,   487,   744,    -1,   744,   488,   744,    -1,   744,
2065:      489,   744,    -1,   744,   490,   744,    -1,   744,   481,   744,
2066:       -1,   744,   482,   744,    -1,   744,   483,   744,    -1,   744,
2067:       16,   744,    -1,   744,    17,   744,    -1,   744,    18,   744,
2068:       -1,   744,   772,   744,    -1,   772,   744,    -1,   744,   772,
2069:       -1,   744,    33,   744,    -1,   744,   289,   744,    -1,   269,
2070:      744,    -1,   478,   744,    -1,   744,   174,   744,    -1,   744,
2071:      231,   744,    -1,   744,   231,   744,   143,   744,    -1,   744,
2072:      478,   231,   744,    -1,   744,   478,   231,   744,   143,   744,
2073:       -1,   744,   190,   744,    -1,   744,   190,   744,   143,   744,
2074:       -1,   744,   478,   190,   744,    -1,   744,   478,   190,   744,
2075:      143,   744,    -1,   744,   378,   413,   744,    -1,   744,   378,
2076:      413,   744,   143,   744,    -1,   744,   478,   378,   413,   744,
2077:       -1,   744,   478,   378,   413,   744,   143,   744,    -1,   744,
2078:      217,   274,    -1,   744,   218,    -1,   744,   217,   269,   274,
2079:       -1,   744,   269,   274,    -1,   744,   272,    -1,   765,    -1,
2080:      499,   768,   500,    -1,   492,   778,   493,    -1,   765,    15,
2081:      744,    -1,   797,    15,   744,    -1,   765,   295,   765,    -1,
2082:      744,   217,   420,    -1,   744,   217,   269,   420,    -1,   744,
2083:      217,   157,    -1,   744,   217,   269,   157,    -1,   744,   217,
2084:      431,    -1,   744,   217,   269,   431,    -1,   744,   217,   130,
2085:      169,   744,    -1,   744,   217,   269,   130,   169,   744,    -1,
2086:      744,   217,   279,   494,   781,   495,    -1,   744,   217,   269,
2087:      279,   494,   781,   495,    -1,   744,    48,   802,   745,    33,
2088:      744,    -1,   744,   478,    48,   802,   745,    33,   744,    -1,
2089:      744,    48,   399,   745,    33,   744,    -1,   744,   478,    48,
2090:      399,   745,    33,   744,    -1,   744,   195,   791,    -1,   744,
2091:      478,   195,   791,    -1,   744,   774,   769,   634,    -1,   744,
2092:      774,   769,   494,   744,   495,    -1,   115,    -1,    35,   492,
2093:      778,   493,    -1,   746,    -1,   745,    11,   714,    -1,   485,
2094:      745,    -1,   486,   745,    -1,   745,   485,   745,    -1,   745,
2095:      486,   745,    -1,   745,   487,   745,    -1,   745,   488,   745,
2096:       -1,   745,   489,   745,    -1,   745,   490,   745,    -1,   745,
2097:      481,   745,    -1,   745,   482,   745,    -1,   745,   483,   745,
2098:       -1,   745,    16,   745,    -1,   745,    17,   745,    -1,   745,
2099:       18,   745,    -1,   745,   772,   745,    -1,   772,   745,    -1,
2100:      745,   772,    -1,   745,   217,   130,   169,   745,    -1,   745,
2101:      217,   269,   130,   169,   745,    -1,   745,   217,   279,   494,
2102:      781,   495,    -1,   745,   217,   269,   279,   494,   781,   495,
2103:       -1,   797,    -1,   820,    -1,   501,     9,    -1,   502,   801,
2104:       -1,    10,   801,    -1,   494,   744,   495,   801,    -1,   792,
2105:       -1,   748,   801,    -1,   634,    -1,   634,   800,    -1,   150,
2106:      634,    -1,   679,   494,   777,   495,    -1,   819,   494,   495,
2107:       -1,   819,   494,   779,   648,   647,   495,    -1,   819,   494,
2108:      445,   780,   648,   647,   495,    -1,   819,   494,   779,   498,
2109:      445,   780,   648,   647,   495,    -1,   819,   494,    27,   779,
2110:      648,   647,   495,    -1,   819,   494,   130,   779,   648,   647,
2111:      495,    -1,   819,   494,   487,   495,    -1,   747,   751,   752,
2112:      753,   757,    -1,   750,    -1,   747,    -1,   750,    -1,    74,
2113:      164,   494,   744,   495,    -1,    99,    -1,   102,    -1,   102,
2114:      494,   821,   495,    -1,   103,    -1,   103,   494,   821,   495,
2115:       -1,   236,    -1,   236,   494,   821,   495,    -1,   237,    -1,
2116:      237,   494,   821,   495,    -1,   100,    -1,   104,    -1,   372,
2117:       -1,   436,    -1,    98,    -1,   101,    -1,    61,   494,   744,
2118:       36,   714,   495,    -1,   423,   494,   744,    36,   714,   495,
2119:       -1,   156,   494,   782,   495,    -1,   296,   494,   784,   495,
2120:       -1,   310,   494,   786,   495,    -1,   397,   494,   787,   495,
2121:       -1,   417,   494,   744,    36,   714,   495,    -1,   419,   494,
2122:       53,   790,   495,    -1,   419,   494,   227,   790,   495,    -1,
2123:      419,   494,   414,   790,   495,    -1,   419,   494,   790,   495,
2124:       -1,   275,   494,   744,   498,   744,   495,    -1,    72,   494,
2125:      777,   495,    -1,   457,   178,   494,   649,   495,    -1,    -1,
2126:      160,   494,   453,   744,   495,    -1,    -1,   153,    -1,    -1,
2127:      455,   755,    -1,    -1,   756,    -1,   755,   498,   756,    -1,
2128:      823,    36,   758,    -1,   294,   758,    -1,   294,   823,    -1,
2129:       -1,   494,   759,   760,   648,   761,   495,    -1,   823,    -1,
2130:       -1,   303,    54,   776,    -1,    -1,   326,   762,    -1,   355,
2131:      762,    -1,    -1,   763,    -1,    48,   763,    33,   763,    -1,
2132:      426,   312,    -1,   426,   163,    -1,    97,   354,    -1,   744,
2133:      312,    -1,   744,   163,    -1,   354,   494,   777,   495,    -1,
2134:      354,   494,   495,    -1,   764,    -1,   494,   776,   498,   744,
2135:      495,    -1,   824,   503,   744,    -1,   766,    -1,   767,   498,
2136:      766,    -1,   767,    -1,   767,   498,    -1,    34,    -1,   383,
2137:       -1,    27,    -1,     8,    -1,   771,    -1,   485,    -1,   486,
2138:       -1,   487,    -1,   488,    -1,   489,    -1,   490,    -1,   481,
2139:       -1,   482,    -1,   483,    -1,    16,    -1,    17,    -1,    18,
2140:       -1,     8,    -1,   286,   494,   775,   495,    -1,   770,    -1,
2141:      286,   494,   775,   495,    -1,   770,    -1,   286,   494,   775,
2142:      495,    -1,   231,    -1,   478,   231,    -1,   174,    -1,   478,
2143:      174,    -1,   190,    -1,   478,   190,    -1,   770,    -1,   823,
2144:      496,   775,    -1,   744,    -1,   776,   498,   744,    -1,   776,
2145:       -1,   776,   498,    -1,   777,    -1,    -1,   780,    -1,   779,
2146:      498,   780,    -1,   744,    -1,   831,    13,   744,    -1,   831,
2147:       14,   744,    -1,   714,    -1,   781,   498,   714,    -1,   783,
2148:      169,   744,    -1,    -1,     3,    -1,   735,    -1,   736,    -1,
2149:      737,    -1,   738,    -1,   739,    -1,   740,    -1,   741,    -1,
2150:      742,    -1,   822,    -1,   744,   785,   788,   789,    -1,   744,
2151:      785,   788,    -1,   307,   744,    -1,   745,   195,   745,    -1,
2152:       -1,   744,   788,   789,    -1,   744,   789,   788,    -1,   744,
2153:      788,    -1,   744,   789,    -1,   776,    -1,    -1,   169,   744,
2154:       -1,   164,   744,    -1,   744,   169,   777,    -1,   169,   777,
2155:       -1,   777,    -1,   634,    -1,   494,   777,   495,    -1,    60,
2156:      796,   793,   795,   141,    -1,   794,    -1,   793,   794,    -1,
2157:      452,   744,   410,   744,    -1,   137,   744,    -1,    -1,   744,
2158:       -1,    -1,   823,    -1,   823,   800,    -1,   496,   818,    -1,
2159:      492,   744,   493,    -1,   492,   799,   503,   799,   493,    -1,
2160:      744,    -1,    -1,   798,    -1,   800,   798,    -1,    -1,   801,
2161:      798,    -1,    40,    -1,    -1,   805,    -1,    -1,   806,    -1,
2162:      804,   498,   806,    -1,   804,    -1,   804,   498,    -1,   744,
2163:       36,   833,    -1,   744,     3,    -1,   744,    -1,   487,   808,
2164:      812,    -1,   823,   496,   487,   808,   812,    -1,   146,   494,
2165:      816,   495,    -1,   146,   823,    -1,   807,    -1,    -1,   744,
2166:       36,   823,    -1,   809,    -1,   810,   498,   809,    -1,   810,
2167:       -1,   810,   498,    -1,   341,   494,   811,   495,    -1,   341,
2168:      809,    -1,    -1,   814,    -1,   813,   498,   814,    -1,   824,
2169:       -1,   823,   800,    -1,   817,    -1,   815,   498,   817,    -1,
2170:      815,    -1,   815,   498,    -1,   823,    -1,   832,    -1,   826,
2171:       -1,   823,   800,    -1,   821,    -1,     4,    -1,   822,   801,
2172:       -1,     6,    -1,     7,    -1,   819,   822,    -1,   819,   494,
2173:      779,   648,   647,   495,   822,    -1,   717,   822,    -1,   733,
2174:      494,   744,   495,   743,    -1,   733,   821,   743,    -1,   733,
2175:      822,   743,    -1,   420,    -1,   157,    -1,   274,    -1,     9,
2176:       -1,     5,    -1,     3,    -1,   892,    -1,   893,    -1,   823,
2177:       -1,     5,    -1,     3,    -1,   892,    -1,   897,    -1,     3,
2178:       -1,   892,    -1,   894,    -1,     3,    -1,   892,    -1,   895,
2179:       -1,   823,    -1,   823,   829,    -1,   496,   818,    -1,   829,
2180:      496,   818,    -1,   494,   815,   495,    -1,    -1,   825,    -1,
2181:        3,    -1,   896,    -1,   892,    -1,   898,    -1,   832,    -1,
2182:        5,    -1,   314,   817,   835,    36,   836,    -1,   494,   781,
2183:      495,    -1,    -1,   633,    -1,   525,    -1,   615,    -1,   875,
2184:       -1,    93,   359,   823,   838,    -1,    93,   359,   188,   269,
2185:      150,   823,   838,    -1,   838,   839,    -1,    -1,   558,    -1,
2186:      840,    -1,   545,    -1,   887,    -1,    93,   846,   198,   843,
2187:      844,   284,   814,   842,   494,   542,   495,   845,   708,    -1,
2188:       93,   846,   198,   843,   188,   269,   150,   586,   284,   814,
2189:      842,   494,   542,   495,   845,   708,    -1,   823,    -1,   437,
2190:      841,    -1,    -1,    82,    -1,    -1,   586,    -1,    -1,   456,
2191:      571,    -1,    -1,   430,    -1,    -1,    29,   402,   702,   373,
2192:      359,   817,    -1,    29,   402,   188,   150,   702,   373,   359,
2193:      817,    -1,    29,   367,   814,   373,   359,   817,    -1,    29,
2194:      367,   188,   150,   814,   373,   359,   817,    -1,    29,   449,
2195:      814,   373,   359,   817,    -1,    29,   449,   188,   150,   814,
2196:      373,   359,   817,    -1,   165,    68,    -1,    68,    -1,   152,
2197:      108,   822,   623,    -1,   194,   108,   822,    -1,   151,   854,
2198:       -1,   151,   858,   852,   854,    -1,   151,   447,   854,    -1,
2199:      151,   494,   857,   495,   854,    -1,   447,    -1,    -1,   859,
2200:       -1,   552,    -1,    -1,   633,    -1,   525,    -1,   615,    -1,
2201:      875,    -1,   889,    -1,     3,    -1,   892,    -1,   896,    -1,
2202:      855,    -1,   822,    -1,   860,    -1,   857,   498,   860,    -1,
2203:       32,    -1,    31,    -1,   420,    -1,   157,    -1,   284,    -1,
2204:      856,    -1,   861,   853,    -1,   855,    -1,   858,    -1,   373,
2205:      863,    -1,   373,   235,   863,    -1,   373,   371,   863,    -1,
2206:      373,   175,   863,    -1,   864,    -1,   885,   169,    97,    -1,
2207:      411,   477,   866,    -1,   359,   822,    -1,   885,   413,   867,
2208:       -1,   885,   483,   867,    -1,   885,   413,   115,    -1,   885,
2209:      483,   115,    -1,   859,    -1,   552,    -1,   822,    -1,     3,
2210:       -1,   733,   822,   743,    -1,   733,   494,   821,   495,   822,
2211:       -1,   552,    -1,   115,    -1,   235,    -1,   865,    -1,   867,
2212:      498,   865,    -1,   234,   869,    -1,   209,   869,    -1,   165,
2213:      209,   869,    -1,   822,    -1,   823,    -1,   438,   872,   874,
2214:      852,    -1,   438,   872,   874,   852,   814,    -1,   438,   872,
2215:      874,   852,   879,    -1,   438,   494,   873,   495,    -1,   438,
2216:      494,   873,   495,   814,   830,    -1,   858,    -1,   447,    -1,
2217:      168,    -1,   170,    -1,     3,    -1,   170,    -1,    -1,   871,
2218:       -1,   873,   498,   871,    -1,   168,    -1,    -1,   529,   120,
2219:      169,   876,   878,   877,   534,    -1,   702,    -1,   702,   823,
2220:       -1,   702,    36,   823,    -1,   453,   744,    -1,    -1,   437,
2221:      693,    -1,    -1,   858,   852,    -1,   858,   852,   814,   830,
2222:       -1,   343,   882,    -1,   885,    -1,    27,    -1,   881,    -1,
2223:      411,   477,    -1,   415,   219,   230,    -1,   884,   633,    -1,
2224:      398,   633,    -1,   398,   885,    -1,   884,   885,    -1,   884,
2225:      411,   477,    -1,   884,   415,   219,   230,    -1,   884,    27,
2226:       -1,   377,    -1,   125,    -1,   823,    -1,   885,   496,   823,
2227:       -1,    56,   747,    -1,    93,   603,   449,   814,   592,   845,
2228:       36,   633,   888,    -1,    93,   289,   341,   603,   449,   814,
2229:      592,   845,    36,   633,   888,    -1,    93,   603,   331,   449,
2230:      814,   494,   596,   495,   845,    36,   633,   888,    -1,    93,
2231:      289,   341,   603,   331,   449,   814,   494,   596,   495,   845,
2232:       36,   633,   888,    -1,   456,    67,   287,    -1,   456,    59,
2233:       67,   287,    -1,   456,   235,    67,   287,    -1,    -1,    93,
2234:      603,   402,   891,    36,   633,   890,    -1,    93,   603,   402,
2235:      188,   269,   150,   891,    36,   633,   890,    -1,    93,   289,
2236:      341,   603,   402,   891,    36,   633,   890,    -1,   456,   107,
2237:       -1,   456,   267,   107,    -1,    -1,   814,   592,   578,   570,
2238:       -1,    19,    -1,    20,    -1,    21,    -1,    22,    -1,    23,
2239:       -1,    24,    -1,    25,    -1,    26,    -1,    28,    -1,    29,
2240:       -1,    30,    -1,    38,    -1,    39,    -1,    41,    -1,    42,
2241:       -1,    43,    -1,    45,    -1,    46,    -1,    47,    -1,    54,
2242:       -1,    55,    -1,    56,    -1,    57,    -1,    58,    -1,    59,
2243:       -1,    62,    -1,    63,    -1,    66,    -1,    68,    -1,    69,
2244:       -1,    70,    -1,    71,    -1,    76,    -1,    77,    -1,    78,
2245:       -1,    79,    -1,    80,    -1,    81,    -1,    83,    -1,    84,
2246:       -1,    85,    -1,    87,    -1,    88,    -1,    89,    -1,    90,
2247:       -1,    91,    -1,    92,    -1,    95,    -1,    96,    -1,    97,
2248:       -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,   109,
2249:       -1,   110,    -1,   111,    -1,   114,    -1,   116,    -1,   118,
2250:       -1,   119,    -1,   120,    -1,   121,    -1,   122,    -1,   123,
2251:       -1,   125,    -1,   126,    -1,   127,    -1,   128,    -1,   129,
2252:       -1,   132,    -1,   133,    -1,   134,    -1,   135,    -1,   136,
2253:       -1,   138,    -1,   139,    -1,   140,    -1,   142,    -1,   143,
2254:       -1,   144,    -1,   146,    -1,   147,    -1,   148,    -1,   149,
2255:       -1,   151,    -1,   152,    -1,   153,    -1,   154,    -1,   155,
2256:       -1,   158,    -1,   160,    -1,   161,    -1,   163,    -1,   165,
2257:       -1,   167,    -1,   171,    -1,   172,    -1,   173,    -1,   175,
2258:       -1,   177,    -1,   181,    -1,   183,    -1,   184,    -1,   185,
2259:       -1,   186,    -1,   187,    -1,   188,    -1,   189,    -1,   191,
2260:       -1,   192,    -1,   193,    -1,   194,    -1,   196,    -1,   197,
2261:       -1,   198,    -1,   199,    -1,   200,    -1,   201,    -1,   203,
2262:       -1,   206,    -1,   207,    -1,   208,    -1,   209,    -1,   210,
2263:       -1,   216,    -1,   219,    -1,   221,    -1,   222,    -1,   223,
2264:       -1,   224,    -1,   225,    -1,   228,    -1,   230,    -1,   233,
2265:       -1,   234,    -1,   235,    -1,   238,    -1,   239,    -1,   240,
2266:       -1,   241,    -1,   242,    -1,   244,    -1,   245,    -1,   246,
2267:       -1,   247,    -1,   248,    -1,   249,    -1,   250,    -1,   251,
2268:       -1,   252,    -1,   253,    -1,   254,    -1,   255,    -1,   256,
2269:       -1,   257,    -1,   258,    -1,   259,    -1,   260,    -1,   261,
2270:       -1,   265,    -1,   266,    -1,   267,    -1,   270,    -1,   271,
2271:       -1,   273,    -1,   276,    -1,   278,    -1,   279,    -1,   280,
2272:       -1,   282,    -1,   283,    -1,   286,    -1,   287,    -1,   288,
2273:       -1,   291,    -1,   294,    -1,   297,    -1,   298,    -1,   299,
2274:       -1,   300,    -1,   301,    -1,   302,    -1,   303,    -1,   304,
2275:       -1,   305,    -1,   306,    -1,   308,    -1,   309,    -1,   311,
2276:       -1,   312,    -1,   314,    -1,   315,    -1,   316,    -1,   318,
2277:       -1,   319,    -1,   320,    -1,   321,    -1,   322,    -1,   323,
2278:       -1,   325,    -1,   326,    -1,   327,    -1,   329,    -1,   330,
2279:       -1,   331,    -1,   332,    -1,   334,    -1,   335,    -1,   336,
2280:       -1,   337,    -1,   338,    -1,   339,    -1,   340,    -1,   341,
2281:       -1,   342,    -1,   343,    -1,   344,    -1,   345,    -1,   346,
2282:       -1,   348,    -1,   349,    -1,   351,    -1,   352,    -1,   353,
2283:       -1,   355,    -1,   356,    -1,   357,    -1,   358,    -1,   359,
2284:       -1,   360,    -1,   361,    -1,   362,    -1,   363,    -1,   364,
2285:       -1,   365,    -1,   367,    -1,   368,    -1,   369,    -1,   370,
2286:       -1,   371,    -1,   373,    -1,   375,    -1,   376,    -1,   377,
2287:       -1,   379,    -1,   380,    -1,   382,    -1,   384,    -1,   385,
2288:       -1,   386,    -1,   387,    -1,   388,    -1,   389,    -1,   390,
2289:       -1,   391,    -1,   392,    -1,   393,    -1,   394,    -1,   396,
2290:       -1,   398,    -1,   400,    -1,   401,    -1,   403,    -1,   405,
2291:       -1,   406,    -1,   407,    -1,   408,    -1,   409,    -1,   415,
2292:       -1,   416,    -1,   418,    -1,   421,    -1,   422,    -1,   424,
2293:       -1,   425,    -1,   426,    -1,   427,    -1,   428,    -1,   431,
2294:       -1,   432,    -1,   433,    -1,   434,    -1,   435,    -1,   438,
2295:       -1,   439,    -1,   440,    -1,   441,    -1,   442,    -1,   446,
2296:       -1,   448,    -1,   449,    -1,   450,    -1,   451,    -1,   454,
2297:       -1,   457,    -1,   458,    -1,   459,    -1,   460,    -1,   461,
2298:       -1,   462,    -1,   474,    -1,   475,    -1,   476,    -1,   477,
2299:       -1,    48,    -1,    49,    -1,    51,    -1,    52,    -1,    64,
2300:       -1,    65,    -1,    72,    -1,   112,    -1,   113,    -1,   150,
2301:       -1,   156,    -1,   162,    -1,   179,    -1,   180,    -1,   205,
2302:       -1,   211,    -1,   212,    -1,   214,    -1,   243,    -1,   262,
2303:       -1,   264,    -1,   268,    -1,   275,    -1,   277,    -1,   292,
2304:       -1,   296,    -1,   310,    -1,   313,    -1,   328,    -1,   354,
2305:       -1,   374,    -1,   381,    -1,   395,    -1,   397,    -1,   411,
2306:       -1,   412,    -1,   417,    -1,   419,    -1,   423,    -1,   443,
2307:       -1,   444,    -1,   463,    -1,   464,    -1,   465,    -1,   466,
2308:       -1,   467,    -1,   468,    -1,   469,    -1,   470,    -1,   471,
2309:       -1,   472,    -1,   473,    -1,    44,    -1,    50,    -1,    74,
2310:       -1,    82,    -1,    94,    -1,   101,    -1,   168,    -1,   170,
2311:       -1,   174,    -1,   190,    -1,   204,    -1,   217,    -1,   218,
2312:       -1,   220,    -1,   229,    -1,   231,    -1,   243,    -1,   263,
2313:       -1,   272,    -1,   293,    -1,   295,    -1,   350,    -1,   378,
2314:       -1,   395,    -1,   404,    -1,   447,    -1,    44,    -1,    50,
2315:       -1,    74,    -1,    82,    -1,    94,    -1,   101,    -1,   168,
2316:       -1,   170,    -1,   174,    -1,   190,    -1,   204,    -1,   217,
2317:       -1,   218,    -1,   220,    -1,   229,    -1,   231,    -1,   263,
2318:       -1,   272,    -1,   293,    -1,   295,    -1,   350,    -1,   378,
2319:       -1,   404,    -1,   423,    -1,   447,    -1,    48,    -1,    49,
2320:       -1,    51,    -1,    52,    -1,    65,    -1,    64,    -1,    72,
2321:       -1,   112,    -1,   113,    -1,   150,    -1,   156,    -1,   162,
2322:       -1,   179,    -1,   180,    -1,   205,    -1,   212,    -1,   214,
2323:       -1,   211,    -1,   243,    -1,   262,    -1,   264,    -1,   268,
2324:       -1,   275,    -1,   277,    -1,   292,    -1,   296,    -1,   310,
2325:       -1,   313,    -1,   328,    -1,   354,    -1,   374,    -1,   381,
2326:       -1,   395,    -1,   397,    -1,   411,    -1,   412,    -1,   417,
2327:       -1,   419,    -1,   423,    -1,   443,    -1,   444,    -1,   463,
2328:       -1,   464,    -1,   465,    -1,   466,    -1,   467,    -1,   468,
2329:       -1,   469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,
2330:       -1,    44,    -1,    50,    -1,    74,    -1,    82,    -1,    94,
2331:       -1,   101,    -1,   168,    -1,   170,    -1,   174,    -1,   190,
2332:       -1,   204,    -1,   217,    -1,   218,    -1,   220,    -1,   229,
2333:       -1,   231,    -1,   243,    -1,   263,    -1,   272,    -1,   293,
2334:       -1,   295,    -1,   350,    -1,   378,    -1,   395,    -1,   404,
2335:       -1,   423,    -1,   447,    -1,    27,    -1,    31,    -1,    32,
2336:       -1,    33,    -1,    34,    -1,    35,    -1,    36,    -1,    37,
2337:       -1,    40,    -1,    53,    -1,    60,    -1,    61,    -1,    67,
2338:       -1,    73,    -1,    75,    -1,    86,    -1,    93,    -1,    98,
2339:       -1,    99,    -1,   100,    -1,   102,    -1,   103,    -1,   104,
2340:       -1,   115,    -1,   117,    -1,   124,    -1,   130,    -1,   131,
2341:       -1,   137,    -1,   141,    -1,   145,    -1,   157,    -1,   159,
2342:       -1,   164,    -1,   166,    -1,   169,    -1,   176,    -1,   178,
2343:       -1,   182,    -1,   195,    -1,   202,    -1,   213,    -1,   215,
2344:       -1,   226,    -1,   227,    -1,   232,    -1,   236,    -1,   237,
2345:       -1,   269,    -1,   274,    -1,   281,    -1,   284,    -1,   285,
2346:       -1,   289,    -1,   290,    -1,   307,    -1,   317,    -1,   324,
2347:       -1,   333,    -1,   347,    -1,   366,    -1,   372,    -1,   383,
2348:       -1,   399,    -1,   402,    -1,   410,    -1,   413,    -1,   414,
2349:       -1,   420,    -1,   429,    -1,   430,    -1,   436,    -1,   437,
2350:       -1,   445,    -1,   452,    -1,   453,    -1,   455,    -1,   456,
2351:       -1
2352: };
2353: 
2354: /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */
2355: static const yytype_uint16 yyrline[] =
2356: {
2357:        0,   467,   467,   483,   495,   504,   505,   506,   507,   508,
2358:      509,   510,   511,   512,   513,   514,   515,   516,   517,   518,
2359:      519,   520,   521,   522,   523,   524,   525,   526,   527,   528,
2360:      529,   530,   531,   532,   533,   534,   535,   536,   537,   539,
2361:        9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
2362:       93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
2363:      157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
2364:      253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
2365:      358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
2366:      428,   433,   438,   446,   447,   452,   456,   457,   458,     7,
2367:       13,    19,    25,     7,    17,    18,    21,    23,     6,    15,
2368:       25,    35,    45,    55,    65,    75,    85,    95,   106,   117,
2369:      127,   140,   141,     8,    21,    27,    34,    40,    47,    57,
2370:       61,    70,    79,    88,    95,    96,   101,   113,   118,   143,
2371:      153,   163,   169,   180,   191,   206,   207,   213,   214,   219,
2372:      220,   226,   227,   231,   232,   237,   239,   245,   246,   250,
2373:      251,   254,   255,   260,     7,    14,    22,     9,    19,    32,
2374:       33,     7,    14,    31,    51,    52,     9,    17,    29,    30,
2375:       34,    35,    36,    41,    42,    43,    48,    52,    56,    60,
2376:       64,    68,    72,    76,    80,    84,    88,    92,    97,   101,
2377:      105,   112,   113,   117,   118,   119,     2,     9,    15,    21,
2378:       28,    35,    45,    46,    47,     7,    21,    36,    56,    57,
2379:       84,    85,    86,    87,    88,    89,    93,    94,    99,   104,
2380:      105,   106,   107,   108,   113,   120,   121,   122,   139,   146,
2381:      153,   163,   173,   185,   193,   202,   211,   230,   237,   242,
2382:      244,   246,   248,   251,   256,   257,   261,   262,   263,   264,
2383:      269,   273,   274,   279,   286,   291,   292,   293,   294,   295,
2384:      296,   297,   298,   304,   305,   309,   314,   321,   328,   335,
2385:      347,   348,   349,   350,   354,   359,   360,   361,   366,   371,
2386:      372,   373,   374,   375,   376,   381,   404,   408,   415,   416,
2387:      420,   424,   425,   426,   430,   434,   442,   443,   448,   449,
2388:      450,   454,   462,   463,   468,   469,   473,   478,   482,   486,
2389:      491,   499,   500,   504,   505,   509,   510,   516,   527,   540,
2390:      554,   568,   582,   596,   619,   623,   630,   634,   642,   647,
2391:      654,   664,   665,   666,   667,   668,   675,   682,   683,   688,
2392:      689,     9,    19,    29,    39,    49,    59,    69,    79,    93,
2393:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
2394:      104,   105,   106,   107,   112,   113,   114,   115,   116,   117,
2395:      118,   123,   124,   129,   130,   131,   136,   137,   138,   141,
2396:      142,     7,    18,    19,    23,    27,     7,     1,    30,    53,
2397:       54,    59,    63,    68,    72,    80,    81,    85,    86,    91,
2398:       92,    96,    97,   102,   103,   104,   105,   106,   111,   119,
2399:      123,   128,   129,   134,   138,   143,   147,   151,   155,   159,
2400:      163,   167,   171,   175,   179,   183,   187,   191,   195,   203,
2401:      209,   210,   211,   216,   220,    47,    48,    52,    53,    68,
2402:       69,    76,    84,    92,   100,   108,   116,   127,   128,   155,
2403:      171,   188,   189,   208,   212,   216,   233,   240,   247,   257,
2404:      258,   261,   273,   284,   292,   297,   302,   307,   312,   320,
2405:      328,   333,   338,   345,   346,   350,   351,   352,   359,   360,
2406:      364,   365,   369,   370,   371,   375,   376,   380,   381,   391,
2407:      404,   405,   408,   417,   428,   429,   430,   433,   434,   435,
2408:      439,   440,   441,   442,   446,   447,   451,   453,   469,   471,
2409:      476,   479,   487,   491,   495,   499,   503,   507,   514,   519,
2410:      526,   527,   531,   535,   539,   543,   550,   557,   558,   563,
2411:      564,   568,   569,   574,   576,   578,   583,   603,   604,   606,
2412:      611,   612,   616,   617,   620,   621,   646,   647,   652,   657,
2413:      661,   662,   666,   667,   671,   672,   673,   674,   675,   679,
2414:      692,   699,   706,   713,   714,   718,   719,   723,   724,   728,
2415:      729,   733,   734,   738,   739,   743,   754,   755,   756,   757,
2416:      761,   762,   767,   768,   769,   778,   784,   793,   794,   807,
2417:      808,   812,   813,   817,   818,   824,   830,   838,   846,   855,
2418:      864,   868,   894,   898,   911,   925,   940,   952,   968,   974,
2419:      979,   985,   992,   993,  1001,  1005,  1009,  1015,  1022,  1027,
2420:     1028,  1029,  1030,  1034,  1035,  1047,  1048,  1053,  1060,  1067,
2421:     1074,  1106,  1117,  1130,  1135,  1136,  1139,  1140,  1143,  1144,
2422:     1149,  1150,  1155,  1159,  1165,  1186,  1194,  1207,  1210,  1214,
2423:     1214,  1216,  1221,  1228,  1233,  1239,  1244,  1250,  1256,  1265,
2424:     1267,  1270,  1274,  1275,  1276,  1277,  1278,  1279,  1284,  1304,
2425:     1305,  1306,  1307,  1318,  1332,  1333,  1339,  1344,  1349,  1354,
2426:     1359,  1364,  1369,  1374,  1380,  1386,  1392,  1399,  1421,  1430,
2427:     1434,  1442,  1446,  1454,  1466,  1487,  1491,  1497,  1501,  1514,
2428:     1522,  1532,  1534,  1536,  1538,  1540,  1542,  1547,  1548,  1555,
2429:     1564,  1572,  1581,  1592,  1600,  1601,  1602,  1606,  1606,  1609,
2430:     1609,  1612,  1612,  1615,  1615,  1618,  1618,  1621,  1621,  1624,
2431:     1624,  1627,  1627,  1630,  1632,  1634,  1636,  1638,  1640,  1642,
2432:     1644,  1646,  1651,  1656,  1662,  1669,  1674,  1680,  1686,  1717,
2433:     1719,  1721,  1729,  1744,  1746,  1748,  1750,  1752,  1754,  1756,
2434:     1758,  1760,  1762,  1764,  1766,  1768,  1770,  1773,  1775,  1777,
2435:     1780,  1782,  1784,  1786,  1789,  1794,  1799,  1806,  1811,  1818,
2436:     1823,  1830,  1835,  1843,  1851,  1859,  1867,  1885,  1893,  1901,
2437:     1909,  1917,  1925,  1929,  1933,  1937,  1945,  1953,  1969,  1977,
2438:     1985,  1993,  2001,  2009,  2017,  2021,  2025,  2029,  2033,  2041,
2439:     2049,  2057,  2065,  2085,  2107,  2118,  2125,  2139,  2155,  2157,
2440:     2159,  2161,  2163,  2165,  2167,  2169,  2171,  2173,  2175,  2177,
2441:     2179,  2181,  2183,  2185,  2187,  2189,  2191,  2193,  2197,  2201,
2442:     2205,  2219,  2220,  2221,  2228,  2240,  2255,  2267,  2269,  2281,
2443:     2292,  2316,  2327,  2336,  2340,  2347,  2355,  2363,  2374,  2382,
2444:     2410,  2446,  2457,  2458,  2465,  2471,  2475,  2479,  2483,  2487,
2445:     2491,  2495,  2499,  2503,  2507,  2511,  2515,  2519,  2523,  2527,
2446:     2531,  2533,  2535,  2539,  2548,  2553,  2560,  2575,  2582,  2586,
2447:     2590,  2594,  2598,  2612,  2613,  2617,  2618,  2622,  2623,  2630,
2448:     2631,  2635,  2636,  2641,  2649,  2651,  2665,  2668,  2695,  2696,
2449:     2699,  2700,  2711,  2717,  2724,  2733,  2750,  2795,  2803,  2811,
2450:     2819,  2827,  2848,  2849,  2852,  2853,  2857,  2867,  2868,  2872,
2451:     2873,  2877,  2878,  2879,  2882,  2883,  2886,  2887,  2888,  2889,
2452:     2890,  2891,  2892,  2893,  2894,  2895,  2896,  2897,  2900,  2902,
2453:     2907,  2909,  2914,  2916,  2918,  2920,  2922,  2924,  2926,  2928,
2454:     2942,  2944,  2948,  2952,  2959,  2964,  2982,  2987,  2995,  2999,
2455:     3005,  3009,  3018,  3029,  3030,  3034,  3038,  3045,  3046,  3047,
2456:     3048,  3049,  3050,  3051,  3052,  3053,  3054,  3064,  3068,  3075,
2457:     3082,  3083,  3099,  3103,  3108,  3112,  3127,  3132,  3136,  3139,
2458:     3142,  3143,  3144,  3147,  3154,  3164,  3178,  3179,  3183,  3194,
2459:     3195,  3198,  3199,  3202,  3206,  3213,  3217,  3225,  3236,  3237,
2460:     3241,  3242,  3246,  3247,  3250,  3251,  3261,  3262,  3266,  3267,
2461:     3271,  3272,  3275,  3291,  3299,  3307,  3322,  3340,  3341,  3344,
2462:     3345,  3348,  3352,  3353,  3357,  3358,  3361,  3362,  3363,  3373,
2463:     3374,  3385,  3389,  3416,  3418,  3424,  3425,  3428,  3430,  3440,
2464:     3443,  3454,  3458,  3462,  3474,  3478,  3487,  3494,  3532,  3536,
2465:     3540,  3544,  3548,  3552,  3556,  3562,  3563,  3579,  3580,  3581,
2466:     3584,  3585,  3591,  3592,  3593,  3596,  3597,  3598,  3601,  3602,
2467:     3603,  3606,  3607,  3610,  3612,  3617,  3618,  3621,  3629,  3630,
2468:     3631,  3632,  3635,  3636,     7,    18,    19,    23,    24,    25,
2469:       26,     7,    16,    34,    41,    46,    47,    48,    49,     8,
2470:       33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
2471:       89,    90,     7,    16,    25,    34,    43,    52,     5,    11,
2472:        7,    20,     9,    16,    26,    33,    44,    45,    50,    51,
2473:       52,    57,    58,    59,    60,    61,    65,    66,    67,    72,
2474:       73,    78,    82,    90,    91,    96,    97,    98,   104,   109,
2475:      117,   118,    10,    16,    22,    28,    38,    39,    47,    58,
2476:       70,    78,    86,    93,   103,   105,   111,   115,   119,   134,
2477:      141,   142,   143,   147,   148,     7,    14,    20,    28,    29,
2478:        8,    22,    36,    48,    56,    70,    71,    72,    73,    74,
2479:       87,    88,    93,    94,    98,    99,     7,    21,    25,    32,
2480:       43,    44,    50,    51,     9,    19,     2,     7,    14,    24,
2481:       25,    32,     3,    10,    17,    24,    31,    38,    45,    55,
2482:       55,    57,    58,     6,     8,    21,    34,    52,    74,    75,
2483:       76,    77,    11,    24,    37,    54,    55,    56,    61,    74,
2484:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2485:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2486:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2487:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2488:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2489:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2490:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2491:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2492:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2493:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2494:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2495:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2496:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2497:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2498:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2499:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2500:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2501:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2502:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2503:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2504:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2505:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2506:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2507:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2508:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2509:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2510:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2511:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2512:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2513:       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
2514:       74,    74,    74,    74,    75,    75,    75,    75,    75,    75,
2515:       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
2516:       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
2517:       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
2518:       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
2519:       75,    75,    75,    75,    75,    75,    76,    76,    76,    76,
2520:       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
2521:       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,
2522:       76,    76,    77,    77,    77,    77,    77,    77,    77,    77,
2523:       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,
2524:       77,    77,    77,    77,    77,    77,    77,    78,    78,    78,
2525:       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
2526:       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
2527:       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
2528:       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
2529:       78,    78,    78,    78,    78,    78,    78,    78,    78,    79,
2530:       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
2531:       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,
2532:       79,    79,    79,    79,    79,    79,    80,    80,    80,    80,
2533:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2534:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2535:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2536:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2537:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2538:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2539:       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,
2540:       80,    80,    80,    80
2541: };
2542: #endif
2543: 
2544: #if YYDEBUG || YYERROR_VERBOSE || YYTOKEN_TABLE
2545: /* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
2546:    First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
2547: static const char *const yytname[] =
2548: {
2549:   "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
2550:   "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
2551:   "EQUALS_GREATER", "LAMBDA_ARROW", "LESS_EQUALS", "GREATER_EQUALS",
2552:   "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS", "ACTION", "ADD_P",
2553:   "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER", "ALWAYS",
2554:   "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P", "ASSERTION",
2555:   "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE", "AUTHORIZATION",
2556:   "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT", "BINARY", "BIT",
2557:   "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED", "CASCADE",
2558:   "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P", "CHARACTER",
2559:   "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS", "CLOSE", "CLUSTER",
2560:   "COALESCE", "COLLATE", "COLLATION", "COLUMN", "COLUMNS", "COMMENT",
2561:   "COMMENTS", "COMMIT", "COMMITTED", "COMPRESSION", "CONCURRENTLY",
2562:   "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
2563:   "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
2564:   "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
2565:   "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
2566:   "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
2567:   "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
2568:   "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
2569:   "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
2570:   "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
2571:   "DOUBLE_P", "DROP", "EACH", "ELSE", "ENABLE_P", "ENCODING", "ENCRYPTED",
2572:   "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE", "EXCLUDING",
2573:   "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P", "EXPORT_STATE",
2574:   "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
2575:   "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
2576:   "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
2577:   "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
2578:   "GROUPING_ID", "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P",
2579:   "HOURS_P", "IDENTITY_P", "IF_P", "IGNORE_P", "ILIKE", "IMMEDIATE",
2580:   "IMMUTABLE", "IMPLICIT_P", "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT",
2581:   "INDEX", "INDEXES", "INHERIT", "INHERITS", "INITIALLY", "INLINE_P",
2582:   "INNER_P", "INOUT", "INPUT_P", "INSENSITIVE", "INSERT", "INSTALL",
2583:   "INSTEAD", "INT_P", "INTEGER", "INTERSECT", "INTERVAL", "INTO",
2584:   "INVOKER", "IS", "ISNULL", "ISOLATION", "JOIN", "KEY", "LABEL",
2585:   "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P", "LEADING", "LEAKPROOF",
2586:   "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN", "LOAD", "LOCAL", "LOCALTIME",
2587:   "LOCALTIMESTAMP", "LOCATION", "LOCK_P", "LOCKED", "LOGGED", "MACRO",
2588:   "MAP", "MAPPING", "MATCH", "MATERIALIZED", "MAXVALUE", "METHOD",
2589:   "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P", "MILLISECONDS_P",
2590:   "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P", "MONTHS_P",
2591:   "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR", "NEW", "NEXT",
2592:   "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL", "NOWAIT", "NULL_P",
2593:   "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF", "OFF", "OFFSET",
2594:   "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION", "OPTIONS", "OR",
2595:   "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER", "OVERLAPS", "OVERLAY",
2596:   "OVERRIDING", "OWNED", "OWNER", "PARALLEL", "PARSER", "PARTIAL",
2597:   "PARTITION", "PASSING", "PASSWORD", "PERCENT", "PLACING", "PLANS",
2598:   "POLICY", "POSITION", "PRAGMA_P", "PRECEDING", "PRECISION", "PREPARE",
2599:   "PREPARED", "PRESERVE", "PRIMARY", "PRIOR", "PRIVILEGES", "PROCEDURAL",
2600:   "PROCEDURE", "PROGRAM", "PUBLICATION", "QUALIFY", "QUOTE", "RANGE",
2601:   "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE", "REF",
2602:   "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
2603:   "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
2604:   "RESPECT_P", "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE",
2605:   "RIGHT", "ROLE", "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE",
2606:   "SAVEPOINT", "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P",
2607:   "SECONDS_P", "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES",
2608:   "SERIALIZABLE", "SERVER", "SESSION", "SESSION_USER", "SET", "SETOF",
2609:   "SETS", "SHARE", "SHOW", "SIMILAR", "SIMPLE", "SKIP", "SMALLINT",
2610:   "SNAPSHOT", "SOME", "SQL_P", "STABLE", "STANDALONE_P", "START",
2611:   "STATEMENT", "STATISTICS", "STDIN", "STDOUT", "STORAGE", "STRICT_P",
2612:   "STRIP_P", "STRUCT", "SUBSCRIPTION", "SUBSTRING", "SUMMARIZE",
2613:   "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES", "TABLESAMPLE",
2614:   "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P", "THEN", "TIME",
2615:   "TIMESTAMP", "TO", "TRAILING", "TRANSACTION", "TRANSFORM", "TREAT",
2616:   "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED", "TRY_CAST", "TYPE_P",
2617:   "TYPES_P", "UNBOUNDED", "UNCOMMITTED", "UNENCRYPTED", "UNION", "UNIQUE",
2618:   "UNKNOWN", "UNLISTEN", "UNLOGGED", "UNTIL", "UPDATE", "USER", "USING",
2619:   "VACUUM", "VALID", "VALIDATE", "VALIDATOR", "VALUE_P", "VALUES",
2620:   "VARCHAR", "VARIADIC", "VARYING", "VERBOSE", "VERSION_P", "VIEW",
2621:   "VIEWS", "VOLATILE", "WHEN", "WHERE", "WHITESPACE_P", "WINDOW", "WITH",
2622:   "WITHIN", "WITHOUT", "WORK", "WRAPPER", "WRITE_P", "XML_P",
2623:   "XMLATTRIBUTES", "XMLCONCAT", "XMLELEMENT", "XMLEXISTS", "XMLFOREST",
2624:   "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLROOT", "XMLSERIALIZE",
2625:   "XMLTABLE", "YEAR_P", "YEARS_P", "YES_P", "ZONE", "NOT_LA", "NULLS_LA",
2626:   "WITH_LA", "'<'", "'>'", "'='", "POSTFIXOP", "'+'", "'-'", "'*'", "'/'",
2627:   "'%'", "'^'", "UMINUS", "'['", "']'", "'('", "')'", "'.'", "';'", "','",
2628:   "'{'", "'}'", "'#'", "'?'", "':'", "$accept", "stmtblock", "stmtmulti",
2629:   "stmt", "AlterTableStmt", "alter_identity_column_option_list",
2630:   "alter_column_default", "alter_identity_column_option",
2631:   "alter_generic_option_list", "alter_table_cmd", "alter_using",
2632:   "alter_generic_option_elem", "alter_table_cmds", "alter_generic_options",
2633:   "opt_set_data", "DeallocateStmt", "CreateEnumStmt", "opt_enum_val_list",
2634:   "enum_val_list", "RenameStmt", "opt_column", "InsertStmt", "insert_rest",
2635:   "insert_target", "opt_conf_expr", "opt_with_clause",
2636:   "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
2637:   "returning_clause", "override_kind", "set_target_list", "opt_collate",
2638:   "opt_class", "insert_column_list", "set_clause_list",
2639:   "set_clause_list_opt_comma", "index_params", "set_target", "PragmaStmt",
2640:   "CreateSeqStmt", "OptSeqOptList", "ExecuteStmt", "execute_param_clause",
2641:   "AlterSeqStmt", "SeqOptList", "opt_with", "NumericOnly", "SeqOptElem",
2642:   "opt_by", "SignedIconst", "TransactionStmt", "opt_transaction",
2643:   "CreateStmt", "ConstraintAttributeSpec", "def_arg",
2644:   "OptParenthesizedSeqOptList", "generic_option_arg", "key_action",
2645:   "ColConstraint", "ColConstraintElem", "generic_option_elem",
2646:   "key_update", "key_actions", "create_generic_options", "OnCommitOption",
2647:   "reloptions", "opt_no_inherit", "TableConstraint", "TableLikeOption",
2648:   "reloption_list", "ExistingIndex", "ConstraintAttr", "OptWith",
2649:   "definition", "TableLikeOptionList", "generic_option_name",
2650:   "ConstraintAttributeElem", "columnDef", "generic_option_list",
2651:   "def_list", "index_name", "TableElement", "def_elem", "opt_definition",
2652:   "OptTableElementList", "columnElem", "opt_column_list", "ColQualList",
2653:   "key_delete", "reloption_elem", "columnList", "columnList_opt_comma",
2654:   "func_type", "ConstraintElem", "TableElementList", "key_match",
2655:   "TableLikeClause", "OptTemp", "generated_when", "DropStmt",
2656:   "drop_type_any_name", "drop_type_name", "any_name_list",
2657:   "opt_drop_behavior", "drop_type_name_on_any_name", "type_name_list",
2658:   "CreateFunctionStmt", "macro_alias", "param_list", "UpdateStmt",
2659:   "CopyStmt", "copy_from", "copy_delimiter", "copy_generic_opt_arg_list",
2660:   "opt_using", "opt_as", "opt_program", "copy_options",
2661:   "copy_generic_opt_arg", "copy_generic_opt_elem", "opt_oids",
2662:   "copy_opt_list", "opt_binary", "copy_opt_item",
2663:   "copy_generic_opt_arg_list_item", "copy_file_name",
2664:   "copy_generic_opt_list", "SelectStmt", "select_with_parens",
2665:   "select_no_parens", "select_clause", "simple_select", "with_clause",
2666:   "cte_list", "common_table_expr", "into_clause", "OptTempTableName",
2667:   "opt_table", "all_or_distinct", "distinct_clause", "opt_all_clause",
2668:   "opt_ignore_nulls", "opt_sort_clause", "sort_clause", "sortby_list",
2669:   "sortby", "opt_asc_desc", "opt_nulls_order", "select_limit",
2670:   "opt_select_limit", "limit_clause", "offset_clause", "sample_count",
2671:   "sample_clause", "opt_sample_func", "tablesample_entry",
2672:   "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
2673:   "select_limit_value", "select_offset_value", "select_fetch_first_value",
2674:   "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
2675:   "group_by_list", "group_by_list_opt_comma", "group_by_item",
2676:   "empty_grouping_set", "rollup_clause", "cube_clause",
2677:   "grouping_sets_clause", "grouping_or_grouping_id", "having_clause",
2678:   "qualify_clause", "for_locking_clause", "opt_for_locking_clause",
2679:   "for_locking_items", "for_locking_item", "for_locking_strength",
2680:   "locked_rels_list", "opt_nowait_or_skip", "values_clause",
2681:   "values_clause_opt_comma", "from_clause", "from_list",
2682:   "from_list_opt_comma", "table_ref", "joined_table", "alias_clause",
2683:   "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
2684:   "join_qual", "relation_expr", "func_table", "rowsfrom_item",
2685:   "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
2686:   "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
2687:   "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
2688:   "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
2689:   "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
2690:   "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
2691:   "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
2692:   "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
2693:   "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
2694:   "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
2695:   "b_expr", "c_expr", "func_application", "func_expr",
2696:   "func_expr_windowless", "func_expr_common_subexpr",
2697:   "within_group_clause", "filter_clause", "export_clause", "window_clause",
2698:   "window_definition_list", "window_definition", "over_clause",
2699:   "window_specification", "opt_existing_window_name",
2700:   "opt_partition_clause", "opt_frame_clause", "frame_extent",
2701:   "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
2702:   "dict_arguments_opt_comma", "sub_type", "all_Op", "MathOp", "qual_Op",
2703:   "qual_all_Op", "subquery_Op", "any_operator", "expr_list",
2704:   "expr_list_opt_comma", "opt_expr_list_opt_comma", "func_arg_list",
2705:   "func_arg_expr", "type_list", "extract_list", "extract_arg",
2706:   "overlay_list", "overlay_placing", "position_list", "substr_list",
2707:   "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
2708:   "when_clause_list", "when_clause", "case_default", "case_arg",
2709:   "columnref", "indirection_el", "opt_slice_bound", "indirection",
2710:   "opt_indirection", "opt_asymmetric", "opt_target_list_opt_comma",
2711:   "target_list", "target_list_opt_comma", "target_el", "except_list",
2712:   "opt_except_list", "replace_list_el", "replace_list",
2713:   "replace_list_opt_comma", "opt_replace_list", "qualified_name_list",
2714:   "qualified_name", "name_list", "name_list_opt_comma", "name",
2715:   "attr_name", "func_name", "AexprConst", "Iconst", "Sconst", "ColId",
2716:   "ColIdOrString", "type_function_name", "function_name_token",
2717:   "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
2718:   "ColLabel", "ColLabelOrString", "PrepareStmt", "prep_type_clause",
2719:   "PreparableStmt", "CreateSchemaStmt", "OptSchemaEltList", "schema_stmt",
2720:   "IndexStmt", "access_method", "access_method_clause", "opt_concurrently",
2721:   "opt_index_name", "opt_reloptions", "opt_unique",
2722:   "AlterObjectSchemaStmt", "CheckPointStmt", "ExportStmt", "ImportStmt",
2723:   "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
2724:   "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
2725:   "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
2726:   "explain_option_name", "VariableSetStmt", "set_rest", "generic_set",
2727:   "var_value", "zone_value", "var_list", "LoadStmt", "file_name",
2728:   "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
2729:   "opt_freeze", "DeleteStmt", "relation_expr_opt_alias",
2730:   "where_or_current_clause", "using_clause", "AnalyzeStmt",
2731:   "VariableResetStmt", "generic_reset", "reset_rest", "VariableShowStmt",
2732:   "show_or_describe", "var_name", "CallStmt", "ViewStmt",
2733:   "opt_check_option", "CreateAsStmt", "opt_with_data", "create_as_target",
2734:   "unreserved_keyword", "col_name_keyword", "func_name_keyword",
2735:   "type_name_keyword", "other_keyword", "type_func_name_keyword",
2736:   "reserved_keyword", 0
2737: };
2738: #endif
2739: 
2740: # ifdef YYPRINT
2741: /* YYTOKNUM[YYLEX-NUM] -- Internal token number corresponding to
2742:    token YYLEX-NUM.  */
2743: static const yytype_uint16 yytoknum[] =
2744: {
2745:        0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
2746:      265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
2747:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
2748:      285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
2749:      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
2750:      305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
2751:      315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
2752:      325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
2753:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
2754:      345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
2755:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
2756:      365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
2757:      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
2758:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
2759:      395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
2760:      405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
2761:      415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
2762:      425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
2763:      435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
2764:      445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
2765:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
2766:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
2767:      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
2768:      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
2769:      495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
2770:      505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
2771:      515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
2772:      525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
2773:      535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
2774:      545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
2775:      555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
2776:      565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
2777:      575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
2778:      585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
2779:      595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
2780:      605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
2781:      615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
2782:      625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
2783:      635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
2784:      645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
2785:      655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
2786:      665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
2787:      675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
2788:      685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
2789:      695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
2790:      705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
2791:      715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
2792:      725,   726,   727,   728,   729,   730,   731,   732,   733,   734,
2793:      735,    60,    62,    61,   736,    43,    45,    42,    47,    37,
2794:       94,   737,    91,    93,    40,    41,    46,    59,    44,   123,
2795:      125,    35,    63,    58
2796: };
2797: # endif
2798: 
2799: /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
2800: static const yytype_uint16 yyr1[] =
2801: {
2802:        0,   504,   505,   506,   506,   507,   507,   507,   507,   507,
2803:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2804:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2805:      507,   507,   507,   507,   507,   507,   507,   507,   507,   507,
2806:      508,   508,   508,   508,   508,   508,   508,   508,   509,   509,
2807:      510,   510,   511,   511,   511,   511,   512,   512,   513,   513,
2808:      513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
2809:      513,   513,   513,   513,   513,   513,   513,   513,   513,   513,
2810:      513,   513,   513,   513,   513,   513,   513,   514,   514,   515,
2811:      515,   515,   515,   516,   516,   517,   518,   518,   518,   519,
2812:      519,   519,   519,   520,   521,   521,   522,   522,   523,   523,
2813:      523,   523,   523,   523,   523,   523,   523,   523,   523,   523,
2814:      523,   524,   524,   525,   526,   526,   526,   526,   526,   527,
2815:      527,   528,   528,   528,   529,   529,   530,   531,   531,   532,
2816:      532,   532,   533,   533,   533,   534,   534,   535,   535,   536,
2817:      536,   537,   537,   538,   538,   539,   539,   540,   540,   541,
2818:      541,   542,   542,   543,   544,   544,   544,   545,   545,   546,
2819:      546,   547,   547,   547,   548,   548,   549,   549,   550,   550,
2820:      551,   551,   551,   552,   552,   552,   552,   553,   553,   553,
2821:      553,   553,   553,   553,   553,   553,   553,   553,   553,   553,
2822:      553,   554,   554,   555,   555,   555,   556,   556,   556,   556,
2823:      556,   556,   557,   557,   557,   558,   558,   558,   559,   559,
2824:      560,   560,   560,   560,   560,   560,   561,   561,   562,   563,
2825:      563,   563,   563,   563,   564,   564,   564,   564,   565,   565,
2826:      565,   565,   565,   565,   565,   565,   565,   566,   567,   568,
2827:      568,   568,   568,   568,   569,   569,   570,   570,   570,   570,
2828:      571,   572,   572,   573,   573,   574,   574,   574,   574,   574,
2829:      574,   574,   574,   575,   575,   576,   577,   577,   577,   577,
2830:      578,   578,   578,   578,   579,   580,   580,   580,   581,   582,
2831:      582,   582,   582,   582,   582,   583,   584,   584,   585,   585,
2832:      586,   587,   587,   587,   588,   588,   589,   589,   590,   590,
2833:      590,   591,   592,   592,   593,   593,   594,   595,   595,   595,
2834:      595,   596,   596,   597,   597,   598,   598,   598,   599,   599,
2835:      599,   599,   599,   599,   600,   600,   601,   601,   601,   601,
2836:      602,   603,   603,   603,   603,   603,   603,   603,   603,   604,
2837:      604,   605,   605,   605,   605,   605,   605,   605,   605,   606,
2838:      606,   606,   606,   606,   606,   606,   606,   606,   606,   606,
2839:      606,   606,   606,   606,   607,   607,   607,   607,   607,   607,
2840:      607,   608,   608,   609,   609,   609,   610,   610,   610,   611,
2841:      611,   612,   613,   613,   614,   614,   615,   616,   616,   617,
2842:      617,   618,   618,   619,   619,   620,   620,   621,   621,   622,
2843:      622,   623,   623,   624,   624,   624,   624,   624,   625,   626,
2844:      626,   627,   627,   628,   628,   629,   629,   629,   629,   629,
2845:      629,   629,   629,   629,   629,   629,   629,   629,   629,   630,
2846:      631,   631,   631,   632,   632,   633,   633,   634,   634,   635,
2847:      635,   635,   635,   635,   635,   635,   635,   636,   636,   637,
2848:      637,   637,   637,   637,   637,   637,   638,   638,   638,   639,
2849:      639,   640,   641,   641,   642,   642,   642,   642,   642,   642,
2850:      642,   642,   642,   643,   643,   644,   644,   644,   645,   645,
2851:      646,   646,   647,   647,   647,   648,   648,   649,   649,   649,
2852:      650,   650,   651,   651,   652,   652,   652,   653,   653,   653,
2853:      654,   654,   654,   654,   655,   655,   656,   656,   656,   656,
2854:      657,   657,   658,   658,   658,   658,   658,   658,   659,   659,
2855:      660,   660,   661,   661,   661,   661,   662,   663,   663,   664,
2856:      664,   665,   665,   665,   665,   665,   666,   667,   667,   667,
2857:      668,   668,   669,   669,   670,   670,   671,   671,   671,   671,
2858:      672,   672,   673,   673,   674,   674,   674,   674,   674,   675,
2859:      676,   677,   678,   679,   679,   680,   680,   681,   681,   682,
2860:      682,   683,   683,   684,   684,   685,   686,   686,   686,   686,
2861:      687,   687,   688,   688,   688,   689,   689,   690,   690,   691,
2862:      691,   692,   692,   693,   693,   694,   694,   694,   694,   694,
2863:      694,   694,   695,   695,   695,   695,   695,   695,   696,   696,
2864:      696,   696,   697,   697,   698,   698,   698,   698,   698,   699,
2865:      699,   699,   699,   700,   700,   701,   701,   702,   702,   702,
2866:      702,   703,   703,   704,   705,   705,   706,   706,   707,   707,
2867:      708,   708,   709,   709,   710,   711,   711,   712,   712,   713,
2868:      713,   714,   714,   714,   714,   714,   714,   714,   714,   715,
2869:      715,   715,   716,   716,   716,   716,   716,   716,   716,   717,
2870:      717,   717,   717,   718,   719,   719,   720,   720,   720,   720,
2871:      720,   720,   720,   720,   720,   720,   720,   721,   721,   722,
2872:      722,   723,   723,   724,   725,   726,   726,   727,   727,   728,
2873:      729,   730,   730,   730,   730,   730,   730,   731,   731,   732,
2874:      732,   732,   732,   733,   734,   734,   734,   735,   735,   736,
2875:      736,   737,   737,   738,   738,   739,   739,   740,   740,   741,
2876:      741,   742,   742,   743,   743,   743,   743,   743,   743,   743,
2877:      743,   743,   743,   743,   743,   743,   743,   743,   743,   744,
2878:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2879:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2880:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2881:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2882:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2883:      744,   744,   744,   744,   744,   744,   744,   744,   744,   744,
2884:      744,   744,   744,   744,   744,   744,   744,   744,   745,   745,
2885:      745,   745,   745,   745,   745,   745,   745,   745,   745,   745,
2886:      745,   745,   745,   745,   745,   745,   745,   745,   745,   745,
2887:      745,   746,   746,   746,   746,   746,   746,   746,   746,   746,
2888:      746,   746,   746,   747,   747,   747,   747,   747,   747,   747,
2889:      748,   748,   749,   749,   750,   750,   750,   750,   750,   750,
2890:      750,   750,   750,   750,   750,   750,   750,   750,   750,   750,
2891:      750,   750,   750,   750,   750,   750,   750,   750,   750,   750,
2892:      750,   750,   750,   751,   751,   752,   752,   753,   753,   754,
2893:      754,   755,   755,   756,   757,   757,   757,   758,   759,   759,
2894:      760,   760,   761,   761,   761,   762,   762,   763,   763,   763,
2895:      763,   763,   764,   764,   765,   765,   766,   767,   767,   768,
2896:      768,   769,   769,   769,   770,   770,   771,   771,   771,   771,
2897:      771,   771,   771,   771,   771,   771,   771,   771,   772,   772,
2898:      773,   773,   774,   774,   774,   774,   774,   774,   774,   774,
2899:      775,   775,   776,   776,   777,   777,   778,   778,   779,   779,
2900:      780,   780,   780,   781,   781,   782,   782,   783,   783,   783,
2901:      783,   783,   783,   783,   783,   783,   783,   784,   784,   785,
2902:      786,   786,   787,   787,   787,   787,   787,   787,   788,   789,
2903:      790,   790,   790,   791,   791,   792,   793,   793,   794,   795,
2904:      795,   796,   796,   797,   797,   798,   798,   798,   799,   799,
2905:      800,   800,   801,   801,   802,   802,   803,   803,   804,   804,
2906:      805,   805,   806,   806,   806,   806,   806,   807,   807,   808,
2907:      808,   809,   810,   810,   811,   811,   812,   812,   812,   813,
2908:      813,   814,   814,   815,   815,   816,   816,   817,   818,   819,
2909:      819,   820,   820,   820,   820,   820,   820,   820,   820,   820,
2910:      820,   820,   820,   820,   820,   821,   822,   823,   823,   823,
2911:      824,   824,   825,   825,   825,   826,   826,   826,   827,   827,
2912:      827,   828,   828,   829,   829,   830,   830,   831,   832,   832,
2913:      832,   832,   833,   833,   834,   835,   835,   836,   836,   836,
2914:      836,   837,   837,   838,   838,   839,   839,   839,   839,   840,
2915:      840,   841,   842,   842,   843,   843,   844,   844,   845,   845,
2916:      846,   846,   847,   847,   847,   847,   847,   847,   848,   848,
2917:      849,   850,   851,   851,   851,   851,   852,   852,   853,   853,
2918:      853,   854,   854,   854,   854,   854,   855,   855,   855,   856,
2919:      856,   857,   857,   858,   858,   859,   859,   859,   859,   860,
2920:      861,   861,   862,   862,   862,   862,   863,   863,   863,   863,
2921:      864,   864,   864,   864,   865,   865,   866,   866,   866,   866,
2922:      866,   866,   866,   867,   867,   868,   868,   868,   869,   869,
2923:      870,   870,   870,   870,   870,   871,   871,   871,   871,   871,
2924:      872,   872,   873,   873,   874,   874,   875,   876,   876,   876,
2925:      877,   877,   878,   878,   879,   879,   880,   881,   881,   882,
2926:      882,   882,   883,   883,   883,   883,   883,   883,   883,   884,
2927:      884,   885,   885,   886,   887,   887,   887,   887,   888,   888,
2928:      888,   888,   889,   889,   889,   890,   890,   890,   891,   892,
2929:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2930:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2931:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2932:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2933:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2934:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2935:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2936:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2937:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2938:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2939:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2940:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2941:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2942:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2943:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2944:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2945:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2946:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2947:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2948:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2949:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2950:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2951:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2952:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2953:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2954:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2955:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2956:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2957:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2958:      892,   892,   892,   892,   892,   892,   892,   892,   892,   892,
2959:      892,   892,   892,   892,   893,   893,   893,   893,   893,   893,
2960:      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
2961:      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
2962:      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
2963:      893,   893,   893,   893,   893,   893,   893,   893,   893,   893,
2964:      893,   893,   893,   893,   893,   893,   894,   894,   894,   894,
2965:      894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
2966:      894,   894,   894,   894,   894,   894,   894,   894,   894,   894,
2967:      894,   894,   895,   895,   895,   895,   895,   895,   895,   895,
2968:      895,   895,   895,   895,   895,   895,   895,   895,   895,   895,
2969:      895,   895,   895,   895,   895,   895,   895,   896,   896,   896,
2970:      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
2971:      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
2972:      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
2973:      896,   896,   896,   896,   896,   896,   896,   896,   896,   896,
2974:      896,   896,   896,   896,   896,   896,   896,   896,   896,   897,
2975:      897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
2976:      897,   897,   897,   897,   897,   897,   897,   897,   897,   897,
2977:      897,   897,   897,   897,   897,   897,   898,   898,   898,   898,
2978:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2979:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2980:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2981:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2982:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2983:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2984:      898,   898,   898,   898,   898,   898,   898,   898,   898,   898,
2985:      898,   898,   898,   898
2986: };
2987: 
2988: /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */
2989: static const yytype_uint8 yyr2[] =
2990: {
2991:        0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
2992:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2993:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
2994:        1,     1,     1,     1,     1,     1,     1,     1,     1,     0,
2995:        4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
2996:        3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
2997:        3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
2998:        4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
2999:        6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
3000:        2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
3001:        3,     2,     3,     8,     1,     0,     1,     3,     6,     6,
3002:        8,     6,     8,     6,     8,     6,     8,     8,    10,     8,
3003:       10,     1,     0,     7,     1,     4,     4,     7,     2,     1,
3004:        3,     4,     3,     0,     1,     0,     2,     3,     5,     8,
3005:        5,     0,     5,     5,     7,     2,     0,     1,     1,     1,
3006:        3,     2,     0,     1,     0,     1,     3,     1,     3,     1,
3007:        2,     1,     3,     2,     2,     4,     5,     5,     8,     1,
3008:        0,     3,     9,    12,     3,     0,     4,     6,     1,     2,
3009:        1,     1,     0,     1,     2,     2,     1,     2,     2,     1,
3010:        2,     3,     2,     2,     2,     2,     3,     3,     3,     1,
3011:        3,     1,     0,     1,     2,     2,     2,     2,     2,     2,
3012:        2,     2,     1,     1,     0,     9,    12,    11,     0,     2,
3013:        1,     1,     1,     1,     1,     1,     3,     0,     1,     2,
3014:        1,     1,     2,     2,     3,     1,     1,     2,     2,     1,
3015:        2,     3,     5,     3,     2,     5,     5,     2,     3,     1,
3016:        1,     2,     2,     0,     4,     0,     3,     4,     4,     0,
3017:        3,     2,     0,     3,     1,     1,     1,     1,     1,     1,
3018:        1,     1,     1,     1,     3,     3,     1,     2,     2,     2,
3019:        2,     2,     2,     0,     3,     3,     3,     0,     1,     2,
3020:        1,     2,     2,     2,     2,     4,     1,     3,     1,     3,
3021:        1,     1,     1,     1,     3,     1,     2,     0,     1,     2,
3022:        0,     1,     3,     0,     2,     0,     3,     3,     1,     5,
3023:        3,     1,     3,     1,     2,     1,     4,     5,     5,     6,
3024:        3,     7,     4,    11,     1,     3,     2,     2,     2,     0,
3025:        3,     1,     1,     2,     2,     2,     2,     1,     0,     1,
3026:        2,     6,     4,     6,     4,     6,     8,     4,     6,     1,
3027:        1,     1,     1,     1,     2,     1,     2,     1,     1,     1,
3028:        3,     3,     3,     3,     2,     2,     1,     3,     1,     1,
3029:        1,     1,     3,     1,     1,     0,     1,     1,     1,     1,
3030:        3,     6,     1,     1,     2,     3,     8,    11,     9,     1,
3031:        1,     3,     0,     1,     3,     1,     0,     1,     0,     1,
3032:        0,     1,     3,     1,     1,     1,     3,     0,     2,     2,
3033:        0,     2,     0,     1,     0,     1,     1,     1,     3,     3,
3034:        1,     1,     3,     3,     3,     3,     4,     3,     2,     1,
3035:        1,     1,     1,     1,     3,     1,     1,     3,     3,     1,
3036:        2,     4,     4,     2,     3,     5,     5,     1,     1,    11,
3037:       11,     1,     2,     4,     4,     4,     2,     2,     3,     1,
3038:        3,     6,     2,     0,     3,     3,     4,     4,     4,     4,
3039:        3,     2,     1,     1,     0,     1,     1,     0,     1,     5,
3040:        1,     0,     2,     2,     0,     1,     0,     3,     5,     5,
3041:        1,     3,     4,     3,     1,     1,     0,     2,     2,     0,
3042:        2,     2,     1,     1,     1,     0,     2,     4,     5,     4,
3043:        2,     3,     2,     2,     2,     2,     1,     2,     3,     0,
3044:        1,     0,     5,     1,     4,     6,     2,     1,     0,     4,
3045:        0,     1,     1,     2,     2,     2,     1,     1,     2,     2,
3046:        1,     1,     1,     1,     1,     1,     3,     3,     3,     0,
3047:        1,     3,     1,     2,     1,     1,     1,     1,     1,     2,
3048:        4,     4,     5,     1,     1,     2,     0,     2,     0,     1,
3049:        3,     1,     0,     1,     2,     3,     2,     4,     2,     3,
3050:        2,     0,     1,     2,     0,     4,     5,     1,     2,     2,
3051:        0,     1,     3,     1,     2,     3,     3,     3,     3,     3,
3052:        1,     4,     3,     4,     5,     4,     5,     4,     5,     2,
3053:        4,     1,     1,     0,     1,     4,     5,     4,     0,     2,
3054:        2,     2,     1,     1,     0,     4,     2,     1,     2,     2,
3055:        4,     2,     6,     2,     1,     3,     4,     0,     2,     0,
3056:        2,     0,     1,     3,     3,     2,     0,     2,     4,     1,
3057:        1,     2,     3,     5,     6,     2,     3,     5,     5,     3,
3058:        4,     0,     1,     1,     1,     1,     1,     2,     4,     1,
3059:        1,     1,     1,     2,     3,     0,     1,     1,     1,     1,
3060:        1,     2,     2,     2,     2,     2,     1,     3,     0,     1,
3061:        1,     1,     1,     5,     2,     1,     1,     1,     1,     4,
3062:        1,     2,     2,     1,     3,     3,     2,     1,     0,     5,
3063:        2,     5,     2,     1,     3,     3,     0,     1,     1,     1,
3064:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3065:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3066:        1,     3,     3,     3,     3,     3,     3,     3,     0,     1,
3067:        3,     3,     5,     2,     2,     3,     3,     3,     3,     3,
3068:        3,     3,     3,     3,     3,     3,     3,     3,     2,     2,
3069:        3,     3,     2,     2,     3,     3,     5,     4,     6,     3,
3070:        5,     4,     6,     4,     6,     5,     7,     3,     2,     4,
3071:        3,     2,     1,     3,     3,     3,     3,     3,     3,     4,
3072:        3,     4,     3,     4,     5,     6,     6,     7,     6,     7,
3073:        6,     7,     3,     4,     4,     6,     1,     4,     1,     3,
3074:        2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
3075:        3,     3,     3,     3,     3,     2,     2,     5,     6,     6,
3076:        7,     1,     1,     2,     2,     2,     4,     1,     2,     1,
3077:        2,     2,     4,     3,     6,     7,     9,     7,     7,     4,
3078:        5,     1,     1,     1,     5,     1,     1,     4,     1,     4,
3079:        1,     4,     1,     4,     1,     1,     1,     1,     1,     1,
3080:        6,     6,     4,     4,     4,     4,     6,     5,     5,     5,
3081:        4,     6,     4,     5,     0,     5,     0,     1,     0,     2,
3082:        0,     1,     3,     3,     2,     2,     0,     6,     1,     0,
3083:        3,     0,     2,     2,     0,     1,     4,     2,     2,     2,
3084:        2,     2,     4,     3,     1,     5,     3,     1,     3,     1,
3085:        2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3086:        1,     1,     1,     1,     1,     1,     1,     1,     1,     4,
3087:        1,     4,     1,     4,     1,     2,     1,     2,     1,     2,
3088:        1,     3,     1,     3,     1,     2,     1,     0,     1,     3,
3089:        1,     3,     3,     1,     3,     3,     0,     1,     1,     1,
3090:        1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
3091:        3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
3092:        3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
3093:        0,     1,     0,     1,     2,     2,     3,     5,     1,     0,
3094:        1,     2,     0,     2,     1,     0,     1,     0,     1,     3,
3095:        1,     2,     3,     2,     1,     3,     5,     4,     2,     1,
3096:        0,     3,     1,     3,     1,     2,     4,     2,     0,     1,
3097:        3,     1,     2,     1,     3,     1,     2,     1,     1,     1,
3098:        2,     1,     1,     2,     1,     1,     2,     7,     2,     5,
3099:        3,     3,     1,     1,     1,     1,     1,     1,     1,     1,
3100:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3101:        1,     1,     2,     2,     3,     3,     0,     1,     1,     1,
3102:        1,     1,     1,     1,     5,     3,     0,     1,     1,     1,
3103:        1,     4,     7,     2,     0,     1,     1,     1,     1,    13,
3104:       16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
3105:        1,     0,     6,     8,     6,     8,     6,     8,     2,     1,
3106:        4,     3,     2,     4,     3,     5,     1,     0,     1,     1,
3107:        0,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3108:        1,     1,     3,     1,     1,     1,     1,     1,     1,     2,
3109:        1,     1,     2,     3,     3,     3,     1,     3,     3,     2,
3110:        3,     3,     3,     3,     1,     1,     1,     1,     3,     5,
3111:        1,     1,     1,     1,     3,     2,     2,     3,     1,     1,
3112:        4,     5,     5,     4,     6,     1,     1,     1,     1,     1,
3113:        1,     0,     1,     3,     1,     0,     7,     1,     2,     3,
3114:        2,     0,     2,     0,     2,     4,     2,     1,     1,     1,
3115:        2,     3,     2,     2,     2,     2,     3,     4,     2,     1,
3116:        1,     1,     3,     2,     9,    11,    12,    14,     3,     4,
3117:        4,     0,     7,    10,     9,     2,     3,     0,     4,     1,
3118:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3119:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3120:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3121:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3122:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3123:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3124:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3125:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3126:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3127:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3128:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3129:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3130:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3131:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3132:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3133:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3134:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3135:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3136:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3137:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3138:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3139:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3140:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3141:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3142:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3143:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3144:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3145:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3146:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3147:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3148:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3149:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3150:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3151:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3152:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3153:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3154:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3155:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3156:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3157:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3158:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3159:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3160:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3161:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3162:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3163:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3164:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3165:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3166:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3167:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3168:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3169:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3170:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3171:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3172:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3173:        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
3174:        1,     1,     1,     1
3175: };
3176: 
3177: /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state
3178:    STATE-NUM when YYTABLE doesn't specify something else to do.  Zero
3179:    means the default is an error.  */
3180: static const yytype_uint16 yydefact[] =
3181: {
3182:      135,   214,     0,  1174,  1173,   214,     0,  1149,   214,   424,
3183:      348,     0,  1250,     0,   214,     0,   135,     0,     0,     0,
3184:        0,     0,     0,     0,     0,   214,   491,     0,  1249,   214,
3185:        0,     0,  1221,     0,     0,     0,     0,     0,     2,     4,
3186:        7,    18,    13,    30,    26,     0,    28,    16,    21,     6,
3187:       32,    17,    20,    14,    33,    11,    31,   458,   445,   496,
3188:      457,   134,   597,   461,    29,    15,    25,     5,    10,    23,
3189:       24,    22,  1157,    36,    27,    34,    19,     8,    35,    37,
3190:        0,     9,    38,    12,   213,   212,   206,     0,     0,     0,
3191:        0,     0,   207,  1087,  1269,  1270,  1271,  1272,  1273,  1274,
3192:     1275,  1276,  1277,  1278,  1279,  1280,  1281,  1282,  1283,  1284,
3193:     1626,  1285,  1286,  1287,  1574,  1575,  1627,  1576,  1577,  1288,
3194:     1289,  1290,  1291,  1292,  1293,  1294,  1295,  1578,  1579,  1296,
3195:     1297,  1298,  1299,  1300,  1580,  1628,  1301,  1302,  1303,  1304,
3196:     1305,  1306,  1629,  1307,  1308,  1309,  1310,  1311,  1312,  1313,
3197:     1314,  1315,  1630,  1316,  1317,  1318,  1631,  1319,  1320,  1321,
3198:     1322,  1323,  1324,  1325,  1581,  1582,  1326,  1327,  1328,  1329,
3199:     1330,  1331,  1332,  1333,  1334,  1335,  1336,  1337,  1338,  1339,
3200:     1340,  1341,  1342,  1343,  1344,  1345,  1346,  1347,  1348,  1349,
3201:     1350,  1351,  1352,  1353,  1583,  1354,  1355,  1356,  1357,  1358,
3202:     1584,  1359,  1360,  1361,  1585,  1362,  1363,  1364,  1632,  1633,
3203:     1365,  1366,  1367,  1634,  1368,  1369,  1586,  1587,  1370,  1371,
3204:     1372,  1373,  1374,  1375,  1376,  1377,  1635,  1378,  1379,  1380,
3205:     1381,  1382,  1383,  1384,  1385,  1386,  1387,  1388,  1636,  1588,
3206:     1389,  1390,  1391,  1392,  1393,  1589,  1590,  1591,  1394,  1637,
3207:     1638,  1395,  1639,  1396,  1397,  1398,  1399,  1400,  1401,  1640,
3208:     1402,  1641,  1403,  1404,  1405,  1406,  1407,  1408,  1409,  1410,
3209:     1592,  1411,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,
3210:     1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,  1428,  1593,
3211:     1643,  1594,  1429,  1430,  1431,  1595,  1432,  1433,  1644,  1434,
3212:     1596,  1435,  1597,  1436,  1437,  1438,  1439,  1440,  1441,  1442,
3213:     1443,  1444,  1598,  1645,  1445,  1646,  1599,  1446,  1447,  1448,
3214:     1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,  1600,
3215:     1458,  1459,  1601,  1460,  1461,  1462,  1463,  1464,  1465,  1466,
3216:     1467,  1468,  1469,  1470,  1471,  1602,  1472,  1473,  1474,  1475,
3217:     1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,  1485,
3218:     1486,  1487,  1488,  1489,  1490,  1647,  1491,  1492,  1493,  1603,
3219:     1494,  1495,  1496,  1497,  1498,  1499,  1500,  1501,  1502,  1503,
3220:     1504,  1505,  1506,  1507,  1508,  1509,  1510,  1604,  1511,  1512,
3221:     1513,  1648,  1514,  1515,  1605,  1516,  1517,  1518,  1519,  1520,
3222:     1521,  1522,  1523,  1524,  1525,  1526,  1527,  1606,  1528,  1607,
3223:     1529,  1530,  1531,  1532,  1650,  1533,  1534,  1535,  1536,  1537,
3224:     1608,  1609,  1538,  1539,  1610,  1540,  1611,  1541,  1542,  1612,
3225:     1543,  1544,  1545,  1546,  1547,  1548,  1549,  1550,  1551,  1552,
3226:     1553,  1554,  1555,  1556,  1557,  1613,  1614,  1558,  1651,  1559,
3227:     1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,  1568,  1569,
3228:     1615,  1616,  1617,  1618,  1619,  1620,  1621,  1622,  1623,  1624,
3229:     1625,  1570,  1571,  1572,  1573,  1253,     0,     0,  1069,  1088,
3230:     1089,  1097,   209,   423,   135,     0,   392,     0,     0,   393,
3231:        0,     0,   342,   341,     0,  1140,   347,     0,     0,     0,
3232:     1087,   101,  1592,  1460,  1606,    99,  1067,  1088,     0,   367,
3233:      368,     0,   376,     0,   361,   365,   362,     0,   386,   378,
3234:      387,   379,   360,   380,   369,   359,     0,   388,     0,   363,
3235:        0,     0,     0,   210,   175,   348,   135,     0,  1162,  1163,
3236:     1161,  1152,  1157,  1164,  1165,     0,  1148,     0,     0,  1086,
3237:     1208,  1209,  1206,  1205,   164,  1116,  1238,  1608,  1538,  1251,
3238:     1239,  1236,  1237,   211,   490,   488,     0,  1037,  1368,  1405,
3239:     1498,  1509,  1608,  1182,  1186,     0,   208,  1613,  1243,     0,
3240:     1244,  1091,     0,   462,   637,  1090,  1061,  1220,     0,  1225,
3241:        0,  1474,   466,   469,  1106,   467,   458,     0,     1,   135,
3242:        0,     0,     0,   487,   487,     0,   487,     0,   450,   458,
3243:      453,   457,   598,  1156,  1234,  1248,  1608,  1538,  1242,  1245,
3244:     1376,     0,     0,  1376,     0,  1376,     0,  1376,     0,     0,
3245:     1029,     0,  1030,  1070,  1118,  1119,  1117,     0,  1120,   313,
3246:      346,   345,   344,   343,   348,  1376,  1124,  1101,     0,     0,
3247:        0,     0,     0,     0,  1135,   102,   100,   374,   375,     0,
3248:      366,   364,     0,  1098,  1652,   689,  1653,   718,   696,   718,
3249:      718,  1654,  1655,  1656,  1657,   685,   685,  1341,   698,  1658,
3250:     1659,  1660,  1376,  1661,  1662,   686,   687,   723,  1663,  1664,
3251:     1665,  1666,  1667,     0,     0,  1668,   718,  1669,   685,  1670,
3252:     1671,   690,  1672,   659,     0,  1673,   688,   660,  1674,   726,
3253:      726,  1675,   713,  1676,   385,     0,   389,   671,   672,   673,
3254:      674,   699,   700,   675,   705,   706,   710,   676,   758,   685,
3255:     1099,  1100,  1376,   385,   381,  1376,   385,  1063,  1376,     0,
3256:        0,   171,     0,     0,  1154,  1166,  1677,  1678,  1679,  1680,
3257:     1682,  1681,  1683,  1684,  1685,  1686,  1687,  1688,  1689,  1690,
3258:     1691,  1694,  1692,  1693,  1695,  1696,  1697,  1698,  1699,  1700,
3259:     1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,
3260:     1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
3261:     1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1180,     0,
3262:     1181,  1171,  1160,  1167,  1168,   135,   422,  1207,  1151,     0,
3263:        0,     0,     0,  1240,     0,     0,     0,  1072,  1074,  1075,
3264:      958,  1085,  1032,     0,  1575,  1576,  1577,  1022,     0,  1578,
3265:     1579,  1580,  1628,   888,   875,   884,   889,   876,   878,   885,
3266:     1581,  1582,   826,  1583,  1584,  1083,  1585,  1586,  1587,  1589,
3267:     1590,  1591,   880,   882,  1593,  1594,     0,  1084,  1596,  1597,
3268:     1441,  1599,  1600,  1602,  1603,   886,  1605,  1607,  1608,  1609,
3269:     1610,  1611,  1082,  1612,   887,  1614,     0,     0,     0,  1050,
3270:      977,     0,     0,     0,  1032,   859,     0,     0,   679,   680,
3271:      701,   702,   681,   707,   708,   682,     0,  1044,   759,   904,
3272:     1032,   871,   934,   802,     0,   857,   851,  1040,   473,  1038,
3273:        0,   852,  1071,  1032,  1023,   473,  1036,  1185,  1183,  1189,
3274:     1184,     0,     0,     0,     0,     0,   639,   638,  1062,  1219,
3275:     1217,  1218,  1216,  1215,  1222,     0,  1224,  1157,   972,   974,
3276:        0,  1023,   468,     0,     0,     0,   448,   447,     3,     0,
3277:        0,  1227,     0,   485,   486,     0,     0,     0,     0,     0,
3278:        0,     0,     0,   582,   512,   513,   515,   579,   583,   591,
3279:        0,   454,     0,  1106,  1246,     0,     0,     0,   122,   122,
3280:        0,     0,     0,     0,     0,    93,    42,    86,     0,     0,
3281:        0,     0,   189,   202,     0,     0,     0,     0,     0,   199,
3282:        0,     0,   182,    44,   176,   178,     0,   122,     0,    40,
3283:        0,     0,     0,    46,  1087,     0,  1626,  1627,  1628,  1629,
3284:     1630,   889,     0,  1632,  1633,  1634,  1635,  1636,  1637,  1638,
3285:     1639,  1640,  1641,  1592,  1643,  1644,  1645,  1646,  1647,  1648,
3286:     1606,  1650,  1612,     0,  1651,     0,   863,   980,   496,   978,
3287:     1107,     0,  1088,  1094,  1028,     0,  1108,  1756,  1757,  1758,
3288:     1759,  1760,  1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,
3289:     1769,  1770,  1771,  1772,  1773,  1774,  1775,  1776,  1777,  1778,
3290:     1779,  1780,  1781,  1782,  1783,  1784,  1785,  1786,  1787,  1788,
3291:     1789,  1790,  1791,  1792,  1793,  1794,  1795,  1796,  1797,  1798,
3292:     1799,  1800,  1801,  1802,  1803,  1804,  1805,  1806,  1807,  1808,
3293:     1809,  1810,  1811,  1812,  1813,  1814,  1815,  1816,  1817,  1818,
3294:     1819,  1820,  1821,  1822,  1823,  1824,  1825,  1826,  1827,  1828,
3295:     1716,  1829,  1830,  1831,  1832,  1833,  1025,  1068,  1110,  1109,
3296:     1111,  1031,     0,     0,   420,     0,     0,  1121,     0,  1102,
3297:        0,     0,  1376,   170,  1376,   313,     0,   313,     0,     0,
3298:     1134,  1137,   377,   373,   371,   370,   372,   717,   704,   712,
3299:      711,     0,   694,   693,   692,     0,   691,     0,     0,   718,
3300:      718,   716,   695,   671,     0,     0,     0,   722,     0,   720,
3301:      383,   384,     0,   357,     0,   665,   661,     0,   731,   732,
3302:      733,   734,   741,   742,   739,   740,   735,   736,   729,   730,
3303:      737,   738,   727,   728,     0,   743,   744,   745,   746,   747,
3304:      748,   749,   750,   677,   683,     0,     0,   352,     0,     0,
3305:      354,     0,     0,     0,   348,     0,   135,     0,   183,  1176,
3306:     1177,  1175,     0,     0,  1159,   186,   203,  1170,  1179,  1169,
3307:     1178,  1158,  1153,     0,  1150,   411,  1195,  1194,  1203,   165,
3308:        0,   983,     0,   135,  1241,  1252,     0,   855,   977,  1021,
3309:        0,     0,     0,     0,     0,     0,   861,   986,     0,     0,
3310:      782,     0,     0,     0,  1001,     0,  1007,     0,     0,     0,
3311:      783,   763,   764,     0,  1049,  1058,   976,     0,   859,   972,
3312:        0,   937,   939,     0,  1090,     0,   853,   854,   860,     0,
3313:     1078,     0,   758,   758,  1043,   958,     0,   955,   956,   957,
3314:        0,     0,     0,  1035,     0,   966,   968,     0,     0,   798,
3315:      964,     0,   801,     0,     0,     0,     0,   952,   953,   954,
3316:      946,   947,   948,   949,   950,   951,   962,   945,   779,     0,
3317:        0,   906,   858,     0,     0,   778,     0,  1041,     0,   600,
3318:        0,  1076,  1073,     0,  1024,   600,  1197,  1201,  1202,  1200,
3319:        0,  1196,  1188,  1187,  1192,  1190,  1193,  1191,     0,  1213,
3320:        0,  1210,   975,   595,   470,     0,     0,  1233,     0,   129,
3321:        0,  1228,     0,   465,   464,   506,   506,   497,   500,   506,
3322:      463,   554,   555,     0,     0,     0,     0,   588,   586,  1072,
3323:     1085,   542,   516,   541,     0,     0,   520,     0,   546,   759,
3324:      581,   452,   510,   511,   514,   451,     0,   584,     0,   594,
3325:      582,   515,     0,  1235,  1247,     0,     0,     0,     0,     0,
3326:     1376,     0,     0,    77,    58,   264,     0,   121,     0,     0,
3327:        0,     0,     0,     0,     0,    85,    82,    83,    84,     0,
3328:        0,     0,     0,   187,   188,   201,     0,   192,   193,   190,
3329:      194,   195,     0,     0,   180,   181,     0,     0,     0,     0,
3330:      179,     0,     0,     0,     0,     0,     0,     0,     0,   496,
3331:      496,   496,   869,     0,   494,   495,     0,     0,  1026,  1029,
3332:      410,   321,     0,   311,     0,     0,     0,     0,     0,     0,
3333:      348,  1127,  1125,  1123,  1126,  1128,  1103,     0,     0,     0,
3334:        0,   167,   169,     0,   310,   283,     0,  1139,   394,     0,
3335:        0,  1376,  1136,   300,     0,     0,     0,     0,   385,     0,
3336:      715,   714,   666,   662,     0,     0,     0,     0,   390,     0,
3337:        0,     0,     0,     0,     0,     0,     0,     0,     0,   385,
3338:      382,   385,  1064,     0,   385,   174,     0,  1376,   313,     0,
3339:     1155,  1172,   184,   204,   185,   205,   443,     0,   417,   425,
3340:      430,   408,     0,   408,     0,   427,   431,   408,   426,   408,
3341:      421,     0,   166,     0,  1115,     0,  1114,     0,  1033,     0,
3342:        0,  1020,  1016,     0,     0,     0,     0,     0,   987,   988,
3343:      989,   990,   991,   992,   993,   994,   995,     0,     0,   996,
3344:        0,     0,     0,   944,   955,   956,   957,   952,   953,   954,
3345:      946,   947,   948,   949,   950,   951,   970,     0,     0,     0,
3346:        0,     0,     0,     0,     0,   828,     0,     0,   851,   933,
3347:        0,   972,  1006,     0,     0,     0,     0,     0,     0,   972,
3348:     1012,     0,     0,     0,  1048,     0,  1045,   804,  1032,     0,
3349:      940,   803,     0,     0,     0,  1080,  1081,   760,   774,   775,
3350:      776,   780,  1113,  1112,  1042,     0,  1034,     0,     0,   761,
3351:      784,   789,     0,  1013,   822,     0,   810,     0,   797,     0,
3352:      808,   812,   785,   800,     0,   781,     0,  1035,   967,   969,
3353:        0,   965,     0,   771,   772,   773,   765,   766,   767,   768,
3354:      769,   770,   777,   943,   941,   942,     0,     0,     0,   908,
3355:      805,     0,     0,   807,   806,  1039,  1368,  1405,     0,   484,
3356:      484,   484,   472,   482,     0,   651,   496,  1050,   651,     0,
3357:      758,   640,  1106,  1223,  1211,  1212,   973,  1105,   135,     0,
3358:     1231,     0,     0,     0,   141,   124,     0,  1229,     0,   157,
3359:      159,   600,     0,  1032,   504,   505,   509,   509,     0,     0,
3360:      509,  1603,  1494,     0,     0,     0,     0,   547,   589,     0,
3361:      580,   544,   545,     0,   543,  1072,   548,  1071,   549,   552,
3362:      553,   521,   590,  1059,   592,     0,   585,   456,   455,   596,
3363:        0,    43,     0,  1376,    60,     0,     0,     0,     0,     0,
3364:        0,   218,   255,   218,    98,  1376,   385,  1376,   385,  1273,
3365:     1342,  1510,     0,    56,    89,     0,   288,   115,     0,   273,
3366:      318,    79,    94,   108,     0,     0,    45,   177,   191,   196,
3367:      111,   200,   197,  1144,   198,   122,     0,    41,     0,   109,
3368:        0,  1142,     0,     0,    47,   113,  1146,   494,   494,   494,
3369:        0,   979,     0,     0,     0,   981,   982,  1028,     0,   409,
3370:        0,   312,     0,   419,   399,   400,   410,     0,   313,     0,
3371:      313,  1124,     0,     0,  1104,   105,     0,     0,     0,     0,
3372:      303,   301,   334,     0,   308,   302,   311,     0,     0,   259,
3373:        0,  1267,     0,     0,   395,   391,     0,     0,     0,   684,
3374:      697,   358,   671,     0,   725,   724,   726,   726,   671,     0,
3375:      657,     0,   669,     0,   709,   678,   751,   752,   753,   754,
3376:      755,   756,   757,   351,   353,     0,   355,     0,     0,     0,
3377:      412,     0,   415,     0,   414,   418,   413,   407,     0,   438,
3378:        0,     0,     0,     0,     0,     0,  1204,   984,   489,   827,
3379:        0,     0,  1017,     0,     0,   902,     0,   877,   879,   892,
3380:        0,   881,   883,     0,   959,     0,     0,     0,   893,   830,
3381:      831,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3382:        0,     0,     0,     0,     0,     0,     0,     0,   846,   845,
3383:      894,   932,     0,     0,  1004,  1005,     0,   895,     0,     0,
3384:     1011,     0,     0,     0,   900,     0,  1065,     0,     0,     0,
3385:     1057,   856,   973,   938,   936,   862,   758,     0,     0,     0,
3386:        0,     0,     0,     0,   811,   799,     0,   809,   813,     0,
3387:        0,     0,   793,     0,     0,   791,   823,   787,     0,     0,
3388:      824,     0,     0,   907,   916,   484,   484,   484,   484,   481,
3389:      483,     0,     0,     0,     0,  1494,     0,   623,   603,   599,
3390:      601,   610,   623,   628,   872,   649,   873,  1090,     0,   559,
3391:      494,  1058,   559,     0,  1198,  1214,     0,  1232,     0,   146,
3392:      128,   148,   147,     0,   155,     0,  1032,     0,   146,   130,
3393:        0,   149,   160,  1231,     0,   163,     0,   498,   499,   501,
3394:        0,   960,   509,   503,   551,   550,     0,   519,   587,   517,
3395:        0,   593,     0,     0,     0,   263,     0,     0,     0,   218,
3396:        0,   323,     0,   330,     0,   315,    78,     0,     0,     0,
3397:       52,    97,    70,    62,    48,    76,     0,     0,    81,     0,
3398:       74,    91,    92,    90,    95,     0,   247,   228,   260,     0,
3399:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
3400:        0,     0,     0,     0,     0,   496,   492,   493,   864,  1027,
3401:      441,   442,   182,   440,   322,     0,     0,   310,     0,  1139,
3402:     1122,   348,     0,     0,   104,   106,     0,   170,   313,     0,
3403:      287,   283,   309,   281,   280,   282,     0,  1268,   175,     0,
3404:     1262,  1138,     0,     0,  1133,   703,   668,     0,   721,   719,
3405:      667,     0,   663,   670,   385,     0,   444,     0,   403,   439,
3406:      428,   433,     0,   437,   435,   434,   429,   432,     0,  1019,
3407:     1015,     0,   874,   985,     0,   971,   999,   998,   829,   841,
3408:      842,   843,  1000,     0,     0,     0,   838,   839,   840,   832,
3409:      833,   834,   835,   836,   837,   844,  1009,  1008,  1002,  1003,
3410:        0,   897,   898,   899,  1010,     0,  1066,  1047,   972,  1052,
3411:     1054,     0,     0,   935,  1079,   762,     0,     0,   790,  1014,
3412:      814,     0,     0,     0,   786,   959,     0,     0,     0,     0,
3413:        0,   795,     0,     0,     0,     0,   870,     0,     0,     0,
3414:        0,   475,   474,   480,   623,   628,     0,   458,     0,   610,
3415:        0,   622,   538,   621,   604,     0,   634,   632,     0,   634,
3416:        0,   634,     0,   538,     0,   624,   538,   621,     0,   641,
3417:     1062,   650,     0,   576,     0,  1046,   576,     0,   471,  1230,
3418:        0,  1226,     0,     0,     0,   136,   133,   123,     0,     0,
3419:      158,   146,   137,   507,   508,     0,   502,   518,  1060,   116,
3420:      218,     0,     0,    59,     0,   332,   275,   324,   307,   290,
3421:        0,     0,     0,   219,     0,   295,     0,    51,    71,     0,
3422:       67,     0,    96,     0,     0,     0,     0,     0,    54,    66,
3423:        0,    49,     0,   385,   385,    57,   274,  1098,  1652,  1653,
3424:     1654,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
3425:     1664,  1665,  1666,  1667,  1745,  1668,   225,  1669,  1441,  1670,
3426:     1671,  1672,     0,  1673,   660,  1674,  1675,  1676,   946,   947,
3427:      223,   317,   220,   325,   222,   224,     0,  1099,   221,   320,
3428:      112,  1145,     0,   110,     0,  1143,   119,   117,   114,  1147,
3429:      867,   868,   865,   494,   422,   402,     0,     0,  1267,     0,
3430:        0,  1376,     0,   103,     0,  1139,   168,   310,     0,   340,
3431:      259,   335,     0,  1267,  1265,     0,  1261,     0,     0,     0,
3432:      664,   658,   356,     0,   416,     0,   436,  1018,   890,   901,
3433:      997,     0,     0,     0,     0,   896,   891,  1055,  1056,  1051,
3434:      820,   818,   815,     0,   816,   794,     0,     0,   792,   788,
3435:        0,   825,   903,     0,   919,   914,   915,   479,   478,   477,
3436:      476,   609,   607,     0,   612,  1090,   619,   531,   537,   608,
3437:        0,   602,     0,   633,   629,     0,   630,     0,     0,   631,
3438:        0,   605,     0,  1090,   606,     0,   648,     0,     0,   910,
3439:      864,   910,  1199,   145,   125,     0,   126,   156,     0,     0,
3440:        0,     0,   150,   396,     0,   328,    61,     0,   307,     0,
3441:      218,   292,   291,   294,   289,   293,   296,     0,     0,     0,
3442:        0,     0,   276,     0,     0,     0,   239,     0,     0,   307,
3443:        0,   314,   235,   236,   349,     0,     0,     0,    63,    53,
3444:       50,    55,    64,     0,     0,    65,    68,   656,    80,    73,
3445:     1745,  1752,     0,     0,     0,     0,     0,     0,   398,   405,
3446:      182,     0,     0,   283,  1264,     0,     0,     0,   310,   107,
3447:        0,     0,     0,  1267,     0,     0,   215,     0,   256,     0,
3448:      172,  1266,     0,  1254,     0,  1131,  1132,     0,     0,   404,
3449:      847,     0,     0,     0,  1053,   817,   821,   819,   796,   905,
3450:      921,   918,   644,     0,   647,   611,     0,     0,   526,   533,
3451:        0,   536,   530,     0,   613,     0,     0,   615,   617,     0,
3452:        0,     0,   652,     0,     0,     0,  1067,   557,  1317,  1586,
3453:     1493,   558,     0,   562,   556,   560,   565,   567,   566,   568,
3454:      564,   575,     0,   578,  1077,   578,     0,     0,     0,     0,
3455:      161,     0,   152,   152,     0,   138,   961,     0,   218,     0,
3456:      306,   329,   254,     0,     0,   237,     0,   244,     0,   278,
3457:      279,   277,   238,   307,   313,   240,     0,   350,     0,    72,
3458:        0,    88,     0,     0,   319,   120,   118,   866,   422,     0,
3459:     1139,   259,  1261,     0,     0,     0,   283,   175,  1263,   272,
3460:      265,   266,   267,   268,   269,   270,   271,   286,   285,   257,
3461:      258,     0,     0,     0,  1133,     0,   848,     0,   849,     0,
3462:      496,   649,     0,     0,   643,     0,   524,   522,   525,   527,
3463:      523,     0,     0,   620,   636,     0,   616,   614,   625,     0,
3464:      656,     0,   627,     0,     0,     0,   569,   563,   909,   911,
3465:        0,     0,   529,   529,     0,   132,     0,   651,     0,     0,
3466:      154,   154,   140,     0,   313,   331,     0,   298,   305,   297,
3467:        0,     0,   234,     0,   241,   339,   243,   227,   655,     0,
3468:       75,     0,   326,   397,   401,     0,   217,  1255,   310,     0,
3469:     1261,   259,  1267,     0,  1258,     0,     0,  1139,   850,     0,
3470:      924,   642,   645,     0,   618,     0,     0,     0,   653,   654,
3471:      626,     0,     0,     0,   561,     0,     0,   577,     0,   460,
3472:      459,   127,   152,   131,   162,   151,   506,   153,   506,     0,
3473:      339,   284,     0,     0,   262,   227,     0,   253,     0,    69,
3474:       87,   327,     0,   310,  1256,   216,   173,  1259,  1260,     0,
3475:      651,   920,     0,     0,     0,     0,   534,     0,   540,   635,
3476:      571,     0,   570,   912,   913,   531,   154,   509,   509,   651,
3477:      253,   299,   304,     0,   242,   245,   336,   337,   338,     0,
3478:      249,   246,   250,     0,  1261,     0,  1129,  1574,  1318,  1545,
3479:        0,   922,   925,   923,   917,   646,     0,     0,   532,   572,
3480:      528,   506,   143,   142,   139,   218,   261,     0,     0,     0,
3481:      251,     0,   252,   226,  1257,  1139,     0,   929,   928,   927,
3482:      931,   930,   535,     0,   509,   333,   231,     0,   230,     0,
3483:      316,   248,   651,     0,     0,   144,   229,   233,   232,  1130,
3484:      926,   539
3485: };
3486: 
3487: /* YYDEFGOTO[NTERM-NUM].  */
3488: static const yytype_int16 yydefgoto[] =
3489: {
3490:       -1,    37,    38,    39,    40,  2152,  2153,  2154,  1832,   985,
3491:     2860,  1833,   986,   987,  2156,    41,    42,  2203,  2204,    43,
3492:     1449,   538,  1764,  1388,  2580,    45,  2104,  1769,  2108,  2730,
3493:     2361,  2103,  2110,  2840,  2906,  2105,  1770,  1771,  2731,  1772,
3494:       46,    47,  1521,    48,   741,    49,  1522,  1476,  1256,  1005,
3495:     1466,  1245,    50,    86,    51,  2143,  2451,  2919,  2166,  3010,
3496:     2611,  2612,  1834,  2960,  2961,  2145,  2217,  1458,  2954,  1900,
3497:     2787,  1838,  1821,  2613,  1909,  2740,  2489,  1835,  2393,  1901,
3498:     2597,  2846,  1532,  1902,  2847,  2590,  1903,  1501,  1525,  2395,
3499:     2962,  1839,  1502,  2142,  2452,  1445,  1904,  2917,  1905,   497,
3500:     2616,    52,   530,   531,   733,  1193,   532,   714,    53,   498,
3501:     1159,   539,    55,  1886,  2640,  2237,  2641,  1958,  1880,  1254,
3502:     1955,  1576,  1505,  1255,   485,  1590,  2238,  2192,  1577,   540,
3503:      885,    58,    59,    60,   579,   592,   593,  1359,  1742,  2071,
3504:      955,   566,   567,  1874,   607,  1495,  1397,  1398,  1776,  2117,
3505:     1424,  1425,   964,   965,  2689,  2899,  2690,  2691,  2548,  2549,
3506:     2978,  1412,  1416,  1417,  1796,  1786,  1403,  2353,  2713,  2714,
3507:     2715,  2716,  2717,  2718,  2719,   886,  2569,  2832,  1420,  1421,
3508:      967,   968,   969,  1429,  1806,    62,    63,  1745,  2078,  2079,
3509:     2080,  2081,  2331,  2332,  2346,  2342,  2554,  2697,  2082,  2083,
3510:     2682,  2683,  2804,  2349,  2089,  2701,  2702,  2761,  1549,   715,
3511:     1261,  1196,   717,   887,   718,  1172,   888,  1176,   720,   889,
3512:      890,   891,   723,   892,   893,   894,   726,  1168,   895,   896,
3513:     1187,  1215,  1216,  1217,  1218,  1219,  1220,  1221,  1222,  1223,
3514:      938,  1644,   898,   899,   900,  2085,   901,  1351,  1729,  2064,
3515:     2723,  2828,  2829,  2316,  2535,  2680,  2800,  2934,  2971,  2972,
3516:      902,   903,  1301,  1302,  1303,  1726,  1346,  1347,   904,  2454,
3517:     1349,  1637,   939,  1660,  1297,  1048,  1049,  1262,  1617,  1618,
3518:     1640,  1987,  1647,  1653,  2014,  2015,  1661,  1694,   905,  1601,
3519:     1602,  1973,  1270,   906,   632,  1055,   633,  1267,  1688,   915,
3520:      907,   908,   909,  1294,  1295,  2030,  2290,  2291,  1666,  1802,
3521:      584,  2026,  2693,   737,  1136,   910,   911,   912,   913,   941,
3522:      586,  1050,   478,   729,  2907,  1149,   945,  1051,  1836,  1684,
3523:       64,   812,   637,    65,  1147,  1513,    66,  2666,  2499,  1161,
3524:     1534,  1913,   499,    67,    68,    69,    70,    71,   614,  1248,
3525:      541,  1249,  1250,   799,    72,  1257,   801,   802,    73,   573,
3526:      574,  1258,  1372,  1259,    74,   552,    75,   934,   589,   935,
3527:      937,   543,   952,  2099,  1760,    77,    78,   560,   561,    79,
3528:       80,   575,    81,    82,  2663,   544,  2220,  1889,   507,   480,
3529:      481,   731,  1139,  1053,  1140
3530: };
3531: 
3532: /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
3533:    STATE-NUM.  */
3534: #define YYPACT_NINF -2644
3535: static const int yypact[] =
3536: {
3537:     4929,  -104,   569, -2644, -2644,  -104, 33879, -2644,  -104,    70,
3538:     4006, 38629, -2644,  5957,  -104, 45279,   396,   299,   205,   331,
3539:    39104, 39104, 45279, 45279, 39579,  -104,   274, 45754, -2644,  -104,
3540:    23200, 36254,     6,  -220, 46229, 45279,  1276,   461,   -27, -2644,
3541:    -2644, -2644, -2644, -2644, -2644,    75, -2644, -2644, -2644, -2644,
3542:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,   103, -2644,    69,
3543:      122,   693,    94, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3544:    -2644, -2644,   211, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3545:    22724, -2644, -2644, -2644, -2644, -2644, -2644, 40054, 45279, 40529,
3546:    36729, 41004, -2644,   114, -2644, -2644, -2644, -2644, -2644, -2644,
3547:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3548:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3549:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3550:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3551:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3552:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3553:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3554:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3555:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3556:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3557:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3558:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3559:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3560:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3561:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3562:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3563:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3564:      120, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3565:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3566:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3567:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3568:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3569:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3570:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3571:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3572:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3573:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3574:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3575:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3576:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3577:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,   127, -2644, -2644,
3578:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3579:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3580:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3581:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3582:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3583:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3584:    -2644, -2644, -2644, -2644, -2644, -2644,   183,   216, -2644,   138,
3585:    -2644, -2644, -2644, -2644,  1276, 41479, -2644,   386,   513, -2644,
3586:      227, 46704, -2644, -2644, 45279, -2644, -2644,   669, 41479,   493,
3587:    -2644, -2644, -2644, 41954, -2644, -2644, -2644, -2644,   451, -2644,
3588:    -2644,   291, -2644,   134, -2644, -2644, -2644,   273, -2644, -2644,
3589:    -2644, -2644, -2644, -2644, -2644, -2644,   369, -2644, 51929, -2644,
3590:    47179, 47654, 48129, -2644,   252,   707,   464, 22248, -2644, -2644,
3591:    -2644, -2644,   211, -2644, -2644,   749, -2644, 39104,   749, -2644,
3592:    -2644, -2644, -2644, -2644,   185,   282, -2644,   359,   632, -2644,
3593:    -2644, -2644,   362, -2644, -2644,   628,  9921,  9921, 48604, 48604,
3594:      749, 48604,   460, -2644, -2644,   -21, -2644,  -220, -2644,   693,
3595:      362, -2644, 23676, -2644,   475,   216, -2644, -2644,   142,   781,
3596:    12921, 45279,   496, -2644,   511,   496,   516,   549, -2644,  4929,
3597:      870,   841, 36254,   295,   295,  1015,   295,   132,   701, -2644,
3598:     1433, -2644,   566, -2644, 41479, -2644,   588,   902, -2644,   362,
3599:      980,   886,   750,   989,  5262,   993,  1020,  1003,  1099,  6421,
3600:    12921, 32454, -2644,   216, -2644, -2644, -2644,   680, -2644,   711,
3601:    -2644, -2644, -2644, -2644,   144,   943, -2644,   722,  1186,   778,
3602:    42429, 42904, 41479,   754,  1182, -2644, -2644, -2644, -2644,   826,
3603:    -2644, -2644,   172, -2644, -2644, -2644, -2644,   842, -2644,   842,
3604:      842, -2644, -2644, -2644, -2644,   808,   808,   996,   812, -2644,
3605:    -2644, -2644,  1175, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3606:    -2644, -2644, -2644,   835,   574, -2644,   842, -2644,   808, -2644,
3607:    -2644, -2644, -2644, -2644, 53309, -2644, -2644, -2644, -2644,  -142,
3608:      272, -2644, -2644, -2644,    49,   847, -2644,  1317, -2644, -2644,
3609:    -2644, -2644, -2644, -2644, -2644, -2644,   890, -2644,  2234,   808,
3610:    -2644, -2644,  1244,    51, -2644,  1246,    72, -2644,  1250,  1118,
3611:    12921, -2644,  1065,  1010, -2644, -2644, -2644, -2644, -2644, -2644,
3612:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3613:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3614:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3615:    -2644, -2644, -2644, -2644, -2644,  -220, -2644, -2644, -2644, -2644,
3616:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,   450,
3617:    -2644, -2644, 30087, -2644, -2644,   464,   923, -2644, -2644, 30087,
3618:    13421, 52389,  1387, -2644,  1197, 45279,   935, -2644, -2644, -2644,
3619:    -2644, -2644, -2644,   949,  1438,   100,  1463, 12921,   994,   100,
3620:      100,  1012,  1333, -2644, -2644, -2644,   139,  1027,  1040, -2644,
3621:      149,   149, -2644,  1044,  1047, -2644,   150,  1056,  1058,  1499,
3622:     1550,    97,  1067,  1069,   574,   100, 12921, -2644,  1074,   149,
3623:     1083,  1088,  1104,  1554,  1106, -2644,  1570,  1107,    87,    96,
3624:     1108,  1109, -2644,  1111, -2644,   151, 12921, 12921, 12921,  1447,
3625:    12921,  7421, 41479,  1599, -2644,   216,  1115,   749, -2644, -2644,
3626:    -2644, -2644, -2644, -2644, -2644, -2644,   108,  5437, -2644,  1156,
3627:    -2644, -2644, -2644,   187, 12921, -2644,  1597,  1116,  1402, -2644,
3628:      156, -2644, -2644, -2644,   377,  1402, -2644, -2644, -2644, -2644,
3629:    -2644,   175,  1522, 29137, 29612, 41479, -2644, -2644,   216, -2644,
3630:    -2644, -2644, -2644, -2644, -2644,   465, -2644,   211, 31348,  1122,
3631:     1127,   216,   496, 45279, 45279,  1589, -2644, -2644, -2644, 36254,
3632:    41479, 49079,  1253, -2644, -2644,   693,   693,  8921,   693,   137,
3633:      530, 10421, 13921,  1467,  1349,   135,   659,  1475, -2644,  1353,
3634:      132,   701, 12921,   511, -2644,  1411, 41479, 34354,   649,   758,
3635:     1149,  1231,  1154,    43,  1567, -2644,  1157, -2644,  1241, 41479,
3636:    53309,   162, -2644,  1602,   162,   162,   560,  1606,  1248,   179,
3637:     1404,   -16,  -130,  1157,  1991, -2644, 36254,   112,     1,  1157,
3638:    41479,  1249,   431,  1157,   113, 13421,   657,   866,   290,   880,
3639:      940,   124, 13421,  1006,  1011,  1064,  1103,  1148,  1155,  1170,
3640:     1258,  1303,  1397,   126,  1441,  1449,  1452,  1466,  1468,  1472,
3641:      136,  1496,   121, 13421,  1500,  1176, -2644, 31348,   -54, -2644,
3642:    -2644,  1505,   146, -2644, 27711,  1165, -2644, -2644, -2644, -2644,
3643:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3644:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3645:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3646:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3647:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3648:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3649:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3650:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3651:    -2644, -2644,  1257, 45279,  1218,   414,  1525,  1584, 32454,  1183,
3652:     1546, 41479,  1421,  1991,  1424,  1202,  1661,   711, 10921,  1662,
3653:    -2644, 49554, -2644, -2644, -2644, -2644, -2644, -2644,  1208, -2644,
3654:    -2644, 12921, -2644, -2644, -2644,  1695, -2644, 52389, 52389,   842,
3655:      842, -2644, -2644,  1671,  1298,  1301,  1695, -2644,  1695, -2644,
3656:    -2644, -2644, 52389, -2644, 45279,  1221,  1223,  1695, -2644, -2644,
3657:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3658:    -2644, -2644, -2644, -2644,  1695,  1304, -2644,  1307,  1311,  1312,
3659:    -2644, -2644, -2644, -2644, -2644, 45279, 45279, -2644, 45279, 45279,
3660:    -2644, 45279, 45279,  1227,   144, 43379,   464, 37204, -2644, -2644,
3661:    -2644, -2644,   746,   844, -2644, -2644, -2644, -2644, -2644, -2644,
3662:    -2644, -2644, -2644, 32454, -2644,  1919, -2644, -2644, -2644,  1232,
3663:      540, -2644,   631,  1276, -2644, -2644, 12921,   216, 12921, 31348,
3664:     1281, 12921, 12921,  1240,  1695,  1695, -2644,  2525,  1695,  1695,
3665:    31414, 12921, 26535, 12921, 17421, 11421, 12921, 12921,  7921, 12921,
3666:    31414,  1725,  1725, 24628, -2644,  1396, -2644,  1247,  2351,  5810,
3667:     1243, -2644,  1251,  1242, -2644,  1254, -2644,   216,   216, 12921,
3668:    -2644, 12921,  2836,  2836, -2644,   189, 52389, 12921, 12921, 12921,
3669:    12921, 31979,  1335,    84, 45279, 12921, 12921,  1265,   729, -2644,
3670:    12921,  1470, -2644,  1268, 12921,  1338,   204, 12921, 12921, 12921,
3671:    12921, 12921, 12921, 12921, 12921, 12921, -2644, -2644, 18907,   192,
3672:     1588,  1607,   216, 12921,   -86,   692, 12921,  9921, 37679,  1604,
3673:     6421, -2644,   216, 28187,   109,  1604, -2644, -2644, -2644, -2644,
3674:      157, -2644, -2644, -2644, -2644,  1232, -2644,  1232,  1279, 41479,
3675:      142, 35779, 12921, -2644, -2644,   639,  1275,  1339,   548,  1739,
3676:    45279, -2644, 25104,  1564, -2644,   250,   250,  1280, -2644, 30558,
3677:     1564, -2644, -2644, 17907,  1405,  1562,  1506, -2644, -2644,  1478,
3678:     1484, -2644,  1300, 31507, 14421, 14421, -2644,  1173, 31348,  1193,
3679:    -2644, -2644, -2644, -2644, -2644, -2644,   664, -2644, 41479,    -7,
3680:     1467,   659,  1306, -2644, -2644,  1134,  1308, 50029, 45279,  1586,
3681:     1536,  1590,  -132, -2644, -2644, -2644, 52389, -2644, 45279, 45279,
3682:    50504, 50979, 32929, 45279, 32454, -2644, -2644, -2644, -2644, 45279,
3683:     1187, 45279,  5934, -2644, -2644, -2644,   162, -2644, -2644, -2644,
3684:    -2644, -2644, 45279, 45279, -2644, -2644,   162, 45279, 45279,   162,
3685:    -2644,  1245, 45279, 45279, 45279, 45279,  1476, 45279, 45279,   -43,
3686:      -43,  1528, -2644, 11921,    71, -2644, 12921, 12921, -2644, 12921,
3687:     1498, -2644,   643, -2644,  1539,    34,  1379, 41479, 41479, 45279,
3688:     1740, -2644, -2644, -2644, -2644, -2644, -2644, 32454,  1336,  1340,
3689:     1679, -2644,  1991,  1682, 34829,   520,   620,  1377, -2644,   656,
3690:    12921,  1566, -2644, -2644,  1558, 12921,  1357,  1358,    49,   678,
3691:    -2644, -2644,  1352,  1223,  1380,  1381,  1364,  1365, -2644,   690,
3692:    52389,  1695,   148,  1370,  1371,  1309,  1430,   650,  1207,    51,
3693:    -2644,    72, -2644,  1572,   128, -2644,  1469,  1585,   711,  1832,
3694:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,   725, 21772, -2644,
3695:    -2644,  1833,   749,  1833,    46, -2644, -2644,  1833, -2644,  1833,
3696:    -2644, 30087, -2644, 13421, -2644, 52389, -2644,  1375, -2644,  1383,
3697:    12921,    55, -2644, 30624,  1378, 12921,  1382,  1386, -2644, -2644,
3698:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,  1388,  1703, -2644,
3699:     1389,  1390,  3788, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3700:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,  1391,  1384, 30690,
3701:     1392, 17421, 17421,  7421,  2663, -2644, 17421,  1393, -2644, -2644,
3702:     1395, 30576,  1376,  1398, 30927, 12421, 12921, 12421, 12421, 31108,
3703:    -2644,  1399, 31189, 45279, -2644, 14921, -2644, -2644, -2644, 12921,
3704:    41479, -2644, 12921,  1403, 27018, -2644, -2644, -2644,  3581,  3581,
3705:     3581, 31414, -2644, -2644, -2644,  1414, -2644, 17421, 17421, -2644,
3706:     5156,  2258,  7421, -2644, -2644,  1713, -2644,  1081, -2644,  1407,
3707:    -2644, -2644,  2677, -2644, 26535,  4111, 12921,   167, -2644, 12921,
3708:     1265, 12921,  1479,  3581,  3581,  3581,   336,   336,   159,   159,
3709:      159,   716,   692, -2644, -2644, -2644,  1408,  1416,  1417,  1744,
3710:    31348,  1106, 12921, -2644, 31348, -2644,   697,   829, 41479,  3188,
3711:     3272,  4327, -2644, -2644, 20344,  1446,   -54,  1447,  1446,  1695,
3712:     2836, -2644,   511, -2644, -2644, -2644, 31348, -2644,  1276, 20344,
3713:     1461,  1481,   275, 23200,  1637, -2644, 45279, -2644, 45279, -2644,
3714:     1427,  1604,  1439, -2644, -2644, -2644,  1451,  1451, 12921,   811,
3715:     1451,  1641,  1648,   930,   930,  1173,  1649, -2644, -2644,  1502,
3716:    -2644, -2644, -2644, 12921,  8421,  1226, -2644,  1236, -2644, -2644,
3717:    -2644, -2644,  1437, -2644, -2644,  1700, -2644, -2644, -2644, -2644,
3718:     1529,  1157, 12921,  1672, -2644,   155,  1450,  1796,  -131,  1751,
3719:    45279, -2644,  1663, -2644,   145,  1800,   128,  1806,   128, 32454,
3720:    32454, 32454,   741, -2644, -2644,   749, -2644, -2644,   763, -2644,
3721:      200, -2644, -2644, -2644,  1548,   568,  1157,  1991, -2644, -2644,
3722:    -2644, -2644, -2644, -2644, -2644,   158,   573,  1157,  1549, -2644,
3723:     1551, -2644,  1557,   608,  1157, -2644, -2644,    71,    71,    71,
3724:    13421, -2644,  1691,  1702,  1486, 31348, 31348, 31348,  1489, -2644,
3725:      111, -2644, 45279, -2644, -2644, -2644,  1498, 41479,  1490,  1947,
3726:      711, -2644,  1644,   686, -2644,   749, 45279, 41479, 41479, 41479,
3727:    -2644, -2644, -2644,  1497,  1518, -2644, 52389,   -45,  1722,  1734,
3728:    45279,  1565,  1154,  1984, -2644, 31348,  1873, 41479,  1530, -2644,
3729:    -2644, -2644, -2644,  1695, -2644, -2644,  -135,  -135, -2644, 45279,
3730:    -2644,  1533, -2644,  1535, -2644, -2644, -2644, -2644, -2644, -2644,
3731:    -2644, -2644, -2644, -2644, -2644, 45279, -2644, 41479,  1882,  1276,
3732:    -2644, 32454, -2644, 35304, -2644, -2644, -2644, -2644,   749, -2644,
3733:      749,  1759, 45279, 28662,   749,   749, -2644, -2644, -2644, -2644,
3734:    31228, 12921, -2644,  1894, 52389, -2644, 27036, -2644, -2644, -2644,
3735:    12921, -2644, -2644, 12921, -2644, 26535, 12921,  1868, -2644,  2030,
3736:     2030,  5810, 52389, 17421, 17421, 17421, 17421,   577,  1083, 17421,
3737:    17421, 17421, 17421, 17421, 17421, 17421, 17421, 17421, 18407,   544,
3738:    -2644, -2644, 12921, 12921,  1878,  1868, 12921, -2644, 52389,  1556,
3739:    -2644,  1559,  1560, 12921, -2644, 52389,  1547,  1568,  7421, 31273,
3740:    -2644,   216, 27065, -2644, 31348, -2644,  2836, 12921,  2753,  2976,
3741:    12921,  1569, 12921,  1888, -2644, -2644,  1573, -2644, -2644, 52389,
3742:    12921,  1571,  3740, 17421, 17421,  4323, -2644,  4612, 12921,  7421,
3743:    -2644,  1528,  1608, -2644,  1765,  1658,  1658,  1658,  1658, -2644,
3744:    -2644, 41479, 41479, 41479, 20820,  1903, 19868, 43854,  1576, -2644,
3745:     1288, -2644, 43854, 44329, -2644,  1596, -2644,   216, 12921,  1899,
3746:       71,  1396,  1899,  1591, -2644, -2644,  1593, -2644, 12921,  1732,
3747:    -2644, -2644, -2644,  1639, -2644,   809, -2644,  1999,  1732, -2644,
3748:      823, -2644, 25104,  1461, 12921,   216,   171, -2644, -2644, -2644,
3749:     1595, -2644,  1451, -2644, -2644, -2644,  1805, -2644, -2644, -2644,
3750:    41479, -2644, 45279, 27084,  1941, -2644, 45279, 45279, 45279, -2644,
3751:    45279,  1598,  1609,   779,  1601, -2644,   779,  1920,   174,  1154,
3752:      179,  4740,    38, -2644, -2644, -2644,  1670, 45279, -2644, 45279,
3753:    -2644, -2644, -2644, -2644, -2644, 32929, -2644, -2644, -2644, 32454,
3754:    26059, 32454, 45279, 45279, 45279, 45279, 45279, 45279, 45279, 45279,
3755:    45279, 45279,  1610,  1611,  1612,  1528, -2644, -2644, -2644, -2644,
3756:    -2644, -2644,  -130, -2644, -2644,   111,  1605, 34829,  1276,  1377,
3757:     1584,   144, 44804,  1614,  1603, -2644,   832,  1991,  1619,  2067,
3758:    -2644,   520, 34829, -2644, -2644, -2644,  2035, -2644,   252,   178,
3759:    -2644, -2644,  1276, 45279,  1678, -2644,  1223,  1623, -2644, -2644,
3760:     1223, 52389, -2644, -2644,   128, 41479, -2644,   845, -2644, -2644,
3761:    -2644, -2644, 45279,  1621, -2644,  1621, -2644, -2644, 12921, 31348,
3762:    -2644,  1622, -2644, 31348, 27150, -2644, 31348,  1878, -2644,   884,
3763:      884,   884,  1792,  1951,   527,  1628,   884,   884,   884,   198,
3764:      198,   166,   166,   166,  2030,   544, 31348, 31348, -2644, -2644,
3765:     1629, -2644, -2644, -2644, -2644,  1630, 45279, -2644,  5683, -2644,
3766:     1631,  1632, 45279, -2644, -2644,   303, 12921, 12921,  5156, -2644,
3767:     3356, 12921, 52389,   850,  5156,   197, 12921,  3391,  3598, 12921,
3768:    12921,  5015, 27387,  1638, 12921, 25580, -2644, 41479, 41479, 41479,
3769:    41479, -2644, -2644, -2644, 43854, 44329,  1642, 19391,  1288,  1645,
3770:    41479, -2644,  1735,  1647, 20344,  1906,  1845, -2644, 20344,  1845,
3771:      903,  1845,  1922,  1735, 24152, -2644,  1735,  1651,  1852, -2644,
3772:      614, 31348,  2096,  1969,  1660, -2644,  1969,   749, -2644, 31348,
3773:     9921, -2644,  1276,  1361, 45279,   216,   -63, -2644,  1673, 45279,
3774:    -2644,  1732, 31348, -2644, -2644, 26535, -2644, -2644, -2644, -2644,
3775:    -2644, 45279,  1665, -2644,  1666,   779, -2644, 45279,  1706, -2644,
3776:      184,  1966,    25, -2644, 32454,  1643,   311, -2644,  1980,  1897,
3777:    -2644,   162, -2644, 12921,   311,  1898,    88, 45279, -2644, -2644,
3778:     1994, -2644, 52389,   128,   128, -2644, -2644,  1680,  1681,  1683,
3779:     1685,  1688,  1690,  1693,  1694,  1696,  1698,  1708,  1709,  1710,
3780:     1711,  1714,  1716,  1717,   835,  1719, -2644,  1720,  1595,  1721,
3781:     1723,  1724, 52849,  1726,  1727,  1728,  1730,  1733,   746,   844,
3782:    -2644, -2644, -2644, -2644, -2644, -2644,   722,  1738, -2644,  1692,
3783:    -2644, -2644,  1761, -2644,  1774, -2644, -2644, -2644, -2644, -2644,
3784:    -2644, -2644, -2644,    71,   923,    82, 45279,  1704,  1565,  2142,
3785:      550,  1933,  1715, -2644,   749,  1377, -2644, 34829,   921,   160,
3786:     1734, -2644,   143,  1565, -2644,  2111,  1775,  1937, 45279,  1742,
3787:    -2644, -2644, -2644,  2203, -2644, 35304,  1621, 31348, -2644, -2644,
3788:    -2644, 17421,  2071,  1753, 52389, -2644, -2644, 12921, -2644, -2644,
3789:     5156,  5156,  3356,   851, -2644,  5156, 12921, 12921,  5156,  5156,
3790:    12921, -2644, -2644, 27573, 51454, -2644, -2644, -2644, -2644, -2644,
3791:    -2644, -2644, -2644, 33404, 43854,  1754, -2644, 38154, -2644, -2644,
3792:    45279,  1288, 20344, -2644, -2644,  1274, -2644, 20344,  2033, -2644,
3793:    20344, -2644, 45279,  1762, -2644, 45279, -2644,  9421, 12921,  1804,
3794:      749,  1804, -2644,  1757, -2644,   275, -2644, -2644,  2174, 21296,
3795:     2131, 12921, -2644, -2644,  1768,   779, -2644,  1932,  1706,  1776,
3796:    -2644, -2644, -2644, -2644, -2644, -2644, -2644,   858,  1777, 45279,
3797:    45279, 17421, -2644,   311,   191,   147, -2644,  2047, 41479,  1706,
3798:     2195, -2644, -2644, -2644, -2644,  2157,  2247,  2134, -2644, -2644,
3799:    31348, -2644, -2644,  1695,  1695, -2644, -2644,  2212, -2644, -2644,
3800:    -2644, -2644,   722,  -156, 26059, 45279, 45279,  1791, -2644, -2644,
3801:     -130,  2165,   863,   520, -2644,  1276, 41479,  2138, 34829, -2644,
3802:     2257,  1799, 45279,  1565,   140,   140, -2644,  1954, -2644,  1956,
3803:    -2644, -2644,   203, -2644, 41479, -2644, -2644, 21296,  1276, -2644,
3804:     2136, 17421, 52389,   883, -2644, -2644,  5156,  5156,  5156, -2644,
3805:     2009, -2644, -2644,   891,  2266, -2644, 45279,   -53,   -96,  1819,
3806:     1821, -2644, -2644,  1822, -2644, 12921,  1824, -2644, -2644, 20344,
3807:     1274,   893, -2644, 52389, 45279,   897, 52389, -2644,  1826,   -94,
3808:     1827, -2644,  6921,  1818, -2644, -2644, -2644, -2644, -2644, -2644,
3809:    31348, 31348, 45279,  1998, -2644,  1998,  9921,  1881, 45279, 12921,
3810:    -2644,   909,  2251,    48,   -19, 31348, -2644, 41479, -2644, 32454,
3811:    -2644,   779, -2644, 32454, 12921, -2644,  1359,  1792,  2289, -2644,
3812:    -2644, -2644, -2644,  1706,   711, -2644, 45279, -2644,  2139, -2644,
3813:    45279,  1890,  -147,  1910, -2644, -2644, -2644, -2644,   923,   749,
3814:     1377,  1734,  1775,  1836, 41479,  1276,   520,   252, -2644, -2644,
3815:    -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644, -2644,
3816:    -2644,  2270,  2051,  2274,  1678,   926,  2136,   933, -2644,  2288,
3817:     1528,  1596, 33404,  1851, -2644,  1854, -2644, -2644, -2644, -2644,
3818:    -2644, 45279,   937, -2644, 31348, 45279, -2644, -2644, -2644, 45279,
3819:     2212,   939, -2644, 12921,  1856, 12921, -2644, 15421,  1853, -2644,
3820:     2316, 12921,  1918,  1918,  1276, -2644, 27633,  1446, 21296, 45279,
3821:    45279, 45279, -2644,  1983,   711,   779,   941, -2644,  1874, -2644,
3822:    27693,  2085, -2644,  2173, -2644,  2117, -2644,  1870, -2644, 12921,
3823:    -2644,  1942, -2644, -2644, -2644,  2332, -2644, -2644, 34829,  1875,
3824:     1775,  1734,  1565,  2084, -2644,  2088,  1885,  1377, -2644, 12921,
3825:       11, -2644, -2644, 45279, -2644,   955,  1891,  1900, -2644, -2644,
3826:    -2644,  1901, 15421,  1904, -2644, 45279,  1895, 31348,  2019, -2644,
3827:    -2644, -2644,  2251, -2644, -2644, -2644,   250, -2644,   250, 25104,
3828:     2117, -2644, 32454, 26059,  2125,  1870,    78,  2109,  1991, -2644,
3829:    31348, -2644,  1276, 34829, -2644, -2644, -2644, -2644, -2644, 21296,
3830:     1446,  1376, 15921, 15921,  1905,   961, -2644,  2385,  2062, -2644,
3831:    -2644,  1913, -2644, -2644, -2644, 38154, 45279,  1451,  1451,  1446,
3832:     2109, -2644, -2644,  2205, -2644, -2644, -2644, -2644, -2644,    91,
3833:     2127, -2644,  2128,  1178,  1775,   966, -2644, 16921,  2055,   499,
3834:    30605, -2644, -2644, -2644, -2644, -2644,  1921,  1923, -2644, -2644,
3835:    -2644,   250, -2644, -2644, -2644, -2644, -2644,   462,   462,  2293,
3836:    -2644,  1979, -2644, -2644, -2644,  1377,  2382, -2644, -2644, -2644,
3837:    -2644, -2644, -2644,  2414,  1451,   779, -2644,  2402, -2644,   152,
3838:    -2644, -2644,  1446, 16421,  1930, -2644, -2644, -2644, -2644, -2644,
3839:    -2644, -2644
3840: };
3841: 
3842: /* YYPGOTO[NTERM-NUM].  */
3843: static const yytype_int16 yypgoto[] =
3844: {
3845:    -2644, -2644, -2644,  1828, -2644, -2644, -2644,   276, -2644,   969,
3846:    -2644,   261,  -557,   607, -2644, -2644, -2644, -2644, -2644, -2644,
3847:     -925,    13, -2644, -2644, -2644, -2644,    76,   321, -2644,  -404,
3848:    -1868,  -140, -2644, -2461, -2541, -2644, -2644,  -471, -2450, -1702,
3849:    -2644, -1113,   232, -2644, -2140, -2644,  -621,  -983,  -756,  -992,
3850:    -2644,    35, -2644,  1216, -1110, -1770, -2414,  -473, -2644,  -545,
3851:    -2644,  -302, -1766,  -517,  -504, -2644, -2308,  -932, -2644,  1473,
3852:     -206, -2644,   633, -2644, -2134, -2644, -2644,   622, -2644,  -929,
3853:    -2644, -2644, -1822,   243,  -456, -2330, -2136, -1799,  -633, -2644,
3854:     -502,   288, -1750, -1153, -2644,   644, -2644,  -450, -2644,  -521,
3855:    -2147, -2644, -2644, -2644,  1237,  -600, -2644,  1284, -2644, -2644,
3856:    -2644,    27, -2644, -2644, -2644, -2644, -2644,  -508,   579, -2240,
3857:    -2644,   512, -2644, -2644, -2644, -2644,   -36,   277, -2644,    10,
3858:      169,   -20,    32,    37,     7,    45,  1527,  1561, -2644,  -982,
3859:      640, -2644, -2644, -1773,  -602,   -48, -2644,   699, -1352, -1741,
3860:     -443,  1042,  1510,  1507,  -333,  -353, -2644,  -464, -2644, -1234,
3861:    -2644, -2644,   689,  1087, -1316, -1289, -2644,   401, -2644,  -398,
3862:     -332, -2644, -2644, -2644, -2644, -2644,   141,  -225,  -432,  1071,
3863:    -2644,  1537, -2644, -2644, -2644, -2644, -2644, -1202, -2644,   743,
3864:    -2004,   430, -1979, -1853,   188,   176, -1085,  -191,    20,   438,
3865:     -288, -2644, -2644,  -284, -1717, -2368,  -301,  -298, -2644, -2644,
3866:     -449, -1127,  -695, -2644, -2644,  -401,  -503, -2644, -2644, -2644,
3867:     -476,  -439, -2644, -2644,   429,  1876, -2644,  -584,  2191,  -523,
3868:     -675,  1252, -1071,  1256, -1023,  -875, -1105,  1259,  1262, -1237,
3869:     3378, -1222,  -804,    -5, -2644, -2390, -1644, -2644, -2644, -2644,
3870:      -52, -2644,  -372, -2644,  -370, -2644, -2644, -2644,  -399, -2643,
3871:    -2644,  1181,   871, -2644, -2644, -2644, -1244, -2644,  3537,   761,
3872:    -2644, -1631,  -864,  -588,  1277,  -729,  -959, -1152, -2644, -2644,
3873:    -2644, -2644, -2644, -2644, -1662, -1771,  -510,   833, -2644, -2644,
3874:      947, -2644, -2644,  1385,  -615,  1043,  -556,  -851,   846, -2644,
3875:      196,  1982, -1327, -2644,   810, -1920, -2644, -2644,   467, -2644,
3876:     1600,  -467, -1622,   470, -1001,    36, -2644,  1940,   170,  1816,
3877:     -860, -2111, -2644, -2644,  -462, -2195,  -918, -2644,  -607, -2644,
3878:    -2644, -2644, -1172, -2644,   668, -2644, -1104, -2644,  -234, -2644,
3879:    -2644, -2141, -2644, -2644, -2644, -2644, -2644, -2644,  -431, -2644,
3880:     -448,  -477, -2644, -2644,     5,  -787,  1326, -2644, -2644,   483,
3881:    -2644,   974, -2644,   672, -2644,    66, -2644,  1188, -2644, -2644,
3882:    -2644,    28,  1617,   454, -2644,  1189, -2644, -2644, -2644, -2644,
3883:    -2644,   695, -2644, -1102, -2522,    74, -2285,  -631,    -6, -2644,
3884:    -2644, -2644,  -533, -2644, -2113
3885: };
3886: 
3887: /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If
3888:    positive, shift that token.  If negative, reduce the rule which
3889:    number is the opposite.  If zero, do what YYDEFACT says.
3890:    If YYTABLE_NINF, syntax error.  */
3891: #define YYTABLE_NINF -1756
3892: static const yytype_int16 yytable[] =
3893: {
3894:      479,   475,   940,  1004,   804,   728,  1144,    61,   970,  1183,
3895:       56,   608,  1480,    44,   743,  1251,   597,  1300,  1141,  1479,
3896:     1156,   542,  1305,    61,  1137,   719,  1539,    54,    76,   928,
3897:     1735,  2092,   648,  1307,  1511,  1189,  2118,  1512,  1636,  2123,
3898:      578,  2027,   476,  1514,  1777,  1515,  1244,  1780,  1444,  1352,
3899:     1455,   583,   721,  2146,  1451,  1433,  1543,  2458,  2479,  2456,
3900:      798,  2477,  1362,  2161,   736,  2163,  2111,  1003,   734,  1009,
3901:     2141,  1013,  2328,  2051,    83,  1675,  1676,  2490,  2493,   716,
3902:      595,  1260,  1484,  2194,  1491,  1169,  1170,   553,   744,   722,
3903:      618,  1596,  -726,   610,  2182,  2183,  2184,   821,   611,  1798,
3904:     2086,  -726,  -723,  -446,  2345,  -718,  -723,  1190,  2289,  1190,
3905:      626,   805,  1181,   549, -1070,  2086,   549,   821, -1095, -1095,
3906:      483,  2839,  -449,  1145,  1686, -1642, -1092, -1092,  1801, -1631,
3907:     1190, -1642, -1649,  1227, -1754, -1754,  1230, -1734, -1734, -1745,
3908:    -1745, -1649,  2594, -1096, -1631,   929,  2206,  1516,   922, -1752,
3909:    -1752, -1096,  1233,  2684,  -685,  -698,  -713,   821,  1419, -1093,
3910:    -1093,   549,   549,  1748,   963,  1369,  1238,  2779,  2147,    57,
3911:     1316,   821,  1614,     3,     4,   966,   587,  1992,  1366,  1238,
3912:      549,   728,  2656,  -182,   821,    57,  1190,  1447,  -182,  2732,
3913:      550,   550,  1971,  2644,  1189,   600,  -446,  2705,  1482,    57,
3914:     1322,   719,  1353,  1884,  -406,   596,  1610,  1686,  2660,  1992,
3915:     2808,  2987,  2243,  2245,   603,  -449,  -944,  2795,  2780,  1723,
3916:     2764,  2578,  1436,  -944,  -963,  1456,  1724,  2781,   721,  2343,
3917:      609,  -963,  1324,  1447,  2638,  1464,   605,  2213,  1467,  1468,
3918:     2367,   659,  1456,  2278,  2174,  1169,  1170,   605,  2956,    57,
3919:     2867,  2842,  1707,  2806,  1612,  1163,  2782,  2621,  2738,  2809,
3920:     1872,  2633,  2791,  2657,  2751,   722,  1804,  3017,  1731,   804,
3921:     2792,  1181,  2841,   546,   590,  1173,   804,  2732,  2658,  2755,
3922:     2148,  2824,   604,   601,  1456,  2494,  1489,  1774,   728,  2397,
3923:     1367,   959,  1296,  1490,   959,  1463,   960,  1182,  1401,  1164,
3924:     2908,   564,  2591, -1731, -1731,  1819,  1819,  2654,   719,  2749,
3925:      930,    84,   931,  1141,  1316,  1961,  1184,  2354,  2386,   487,
3926:     1962,  1439,   953,  1184,  2996,  2257,  1474,  2783,  1224,  1308,
3927:     2551,  2632,  2373,  2763,  2555,   721,  2821,  2932,  1185,  2784,
3928:     1517,  2614,  2861,  1478,  2650,  1185,  2345,  1316,  2924,  1517,
3929:     1475,  2651,  1186,  2279,  2255,    85,  2655,  1252,  1364,   605,
3930:     1485,  2398,  1820,  2138,   961,  2615,  2933,   961,  2778,  2385,
3931:     3020,  1963,   722,  1805,  1775,  2592,  1324,  1322,  1708,   488,
3932:     2957,  2376,  2750,  2150,  1432,  1364,  2141,  -446,  2141,   687,
3933:      804,   804,   923,  2810,  1709,  1191,  2374,  1191,  1370,  1710,
3934:     -573,  2497,  1613,  1402,   565,  2981,  -449,   545,  1732,  1324,
3935:     1368,  2410,  2684,   962,   547,  1873,  2843,  1457,  1191,  1989,
3936:     1990,  2752,  1652,  2854,  2009,   954,  3018,     3,     4,  1529,
3937:     2086,  2579,  2086,   980,  1457,  1711,  2807,  2762,  2793,   548,
3938:     1173,  2946,  2994,  2399,  1493,  2495,  1494,  1885,  2732,  1454,
3939:     -446,  1939,  1941,  1942,  1273,  1593,  2748,  2958,  1182,  2659,
3940:     1636,   598,   924,  2866,  2595,  2038,  2039,   728,  1798,  -449,
3941:      599,  2541,  1441,  1165,  1191,   815,  1457,  1385,  1454,  2965,
3942:     1645,   505,  1354,  1687,  1936,   534,  2510,   719,  2149,   535,
3943:     2150,    61,  2506,   555,   636,  1454,  2126,   634,   606,  2952,
3944:      588,  2190,  2191,  2583,   594,   594,  1381,  1600,  1814,  2771,
3945:      602,   635,   638,  2094,   721,  2935,  1894,   597,  2151,  2639,
3946:     3006,  2458,   730,  2456,  1527,  1483,  2988,  1430,  2863,  2785,
3947:     1480,   803,  2786,  1937,  1871,  2121,   660,  1454,  1431,  2732,
3948:      630,  1137,   800,    61,   631,  1184,  1167,  1192,  2694,  1226,
3949:      492,   722,   493,  2698,  1184,  1992,  2700,   535,   622,  -446,
3950:      479,   479,   971,  2925,   484,  2685,  2053,  1185,   644,  2113,
3951:     1229,  2175,  -944,  2623,  2624,  1725,  1185,   496,  -449,  1166,
3952:     -963,  1186,  1712,  1536,   479,  1442,  2096,  2926,  2194,   932,
3953:     1188,  -723,   612,   933,  -718,  1540,  1541,  2674,  -446,  1787,
3954:     -446,   630,  1311, -1070,  1569,   631,    61, -1095, -1095,    56,
3955:     2585,   610,    44,   807, -1642,  1289,   611,  -449, -1631,  -449,
3956:    -1642, -1649,   951,  1052,   479,  1138,    54,    76,  2596,  2865,
3957:    -1649,  1746, -1096, -1631,  1871,  1474,   942,  2872,  1179,  1180,
3958:    -1096,  1932,  2871,  1171,  1175,  -713,  1578,  1242,  1243,  1345,
3959:     1360,  1749,  1598,    57,   728,   728,  2007,  2512,   613,  1475,
3960:     1242,  1243,  2998,  1761,  -182,  -182,  1469,  2582,   809,   728,
3961:    -1729, -1729,  1456,    83,   719,   719,  2101,   629,  1597,   810,
3962:     1296,  1938,  1940,  2170,  1604,  2004,  2005,  2006,  2007,   719,
3963:     2086,   654,  1598,  1141,  2086,  2816,  2171,  1650,   730,   657,
3964:     2637,   721,   721,  1316,   804,    57,   596,  2263,   630,   658,
3965:     1848,  2102,   631,  1566,  1683,   806,   721,   550,   808,   562,
3966:     1851,  1673,   661,  1854,  1447,   580,  2642,  1316,   716,  3007,
3967:     1184,   662,  2477,  1322,   479,  1448,  2930,  1598,   722,   722,
3968:      919,  1636,  1308,  1548,  2584,  1506,   740,  1598,   609,  1141,
3969:     1572,  1404,  1185,   722,   549,   821,  1137,  1322,  2072,  2073,
3970:      798,  1561,    26,   734,  1560,  1324,  1188,    87,    57,  1910,
3971:     1564,  2259,  2260,  2261,  2262,   619,   811,  2266,  2267,  2268,
3972:     2269,  2270,  2271,  2272,  2273,  2274,  2275,  2651,  1570,  1324,
3973:     1488,  1956,   640,   728,   641,  2226,   803,  1405,    31,  2294,
3974:     2458,  2230,  2456,   803,  1052,   730,  2513,  1470,  3008,  1456,
3975:     1305,  2999,    61,   719,  1456,  1471,  1507,  2031,   959,  1623,
3976:     2741,   479,  1954,  1342,  1343,  1344,  1345,  1624,  1625,  1626,
3977:       26,  2307,  2308,  1447,  2095,  3009,   813,  1645,  1645,    33,
3978:      721,  1847,  1645,   536,  1450,  1762,  2264,  1840,  1574,  1456,
3979:      479,   814,    34,   821,  3012,  1480,  2265,  1406,   815,  1695,
3980:     -495,   597,  1689,  1508,  1457,  -495,    31,  1677,  1300,   630,
3981:      479,   479,   479,  1363,   479,   479,    35,   722,  1811, -1730,
3982:    -1730,  1506,   487,  1645,  1645,  1404,  1696,  1867,  1868,  1869,
3983:      537,   961,   820, -1732, -1732,  1992,  2389,  2303,   479,  2086,
3984:    -1756, -1756, -1756,  1206,  1207,  1846,  1407,    33,  2086,   977,
3985:     1137,  2185,   816,  2086,    26,   978,  2086,   803,   803,   642,
3986:       34,   643,  2115,   728,  1857,  1454,  2121,  2173,    88,  1864,
3987:     2176,  1405,  2177,  -495,  2124,  2086,    89,   921,  1921,   821,
3988:      962,  2687,   488,   719,    35,  1236,  2688,  1918,  1237,   936,
3989:       31,   479,  2646, -1733, -1733,   479,   479,   724,    36,  1943,
3990:     1379,  1944,   927,  1380,  1946,  1408,   479,  2181,  2845,   951,
3991:      721,    90,  1247,   656,    57,  2214,  1907,  2849,  1908,  1247,
3992:     2221,  2390,  -495,  2382,   730,  2384,    26,  1393,  1394,  1893,
3993:     1400,    33,   611,   611,   943,   611,   742,  1822,  1697,  1508,
3994:      649,  1457,   739,  1698,    34,   944,  1457,   722,  1699,  1052,
3995:     1849,   946,  1276,  1210,  1211,  1852,  1052,   649,    91, -1735,
3996:    -1735,   979,    31,  2086, -1736, -1736,  1481,   728,    35,  2002,
3997:     2003,  2004,  2005,  2006,  2007,  1592,   650,  1052,  1593,   949,
3998:     1407,  1457,  1763,   977,   947,   804,  2391,   719,  2392,   978,
3999:     1298,   917,   918,   650,   920,  2086,   950,  1310,   804,    26,
4000:      972,   594,  1454,    33,  2805,   974,  1313,  1454,  2020,   957,
4001:     2652,   651,   728,  2336,   721,  1960,    34, -1737, -1737,  1964,
4002:     1361,  1965,  2805,  2317,  2318,  2319,  2320,  1511,  2202,   988,
4003:     1512,  1371,   719,  1247,  1247,    31,  1514,  2120,  1515,  1408,
4004:       35,  1930,  1454,  2065,  2041,  2066,   630,  2337, -1070,  2561,
4005:      631,   722,  2564,   492,    36,   493, -1738, -1738,   652,   721,
4006:     2903,   975,   977,  2557,   609,   609,  1594,   609,   978,  1595,
4007:      976,  1636,  2339,   724,  1757,   652,    33,  1229,  1881,   989,
4008:      496,  1882,  1138,  1006,  2090,  2019,  1967,  2021,  2022,  1700,
4009:     2523,  1914,  1052,  1010,  1593,   979,   722,   977,  2086,  2408,
4010:     1701, -1739, -1739,   978,  1300,   479,  2239,  2401, -1740, -1740,
4011:     1998,   730,   730,  1922,   980,  1142,  1595,  1340,  1341,  1342,
4012:     1343,  1344,  1345, -1741, -1741,  1928,   730,    36,  1929,  1645,
4013:     1645,  1645,  1645,  2887,  2086,  1645,  1645,  1645,  1645,  1645,
4014:     1645,  1645,  1645,  1645,  1645,  1143,  2982,  2983,  2383,  2474,
4015:      977,  2043,  1146,  2966,   990,  3005,   978,  2400,  1148,  2409,
4016:     1950,    92,  1150,  1951,   482,   981,  2158,  1151,  2160,   982,
4017:      533,   803,  2984,   991,   979,  2067,  2164,  2068,  2044,  2165,
4018:      724,   563,   800,    61,   956,   576,   958,  1138,  1158,  1645,
4019:     1645,  2228,  2229,  2341,  2556,  2365,  2559,  2199,  2168,   983,
4020:      479,  2169,   479,  3015,  1160,   479,   479,  2209,   977,   979,
4021:       61, -1742, -1742,   636,   978,   479,   634,   479,   479,   479,
4022:      479,   479,   479,   479,   992,  2086,  1162,    26,  1167,  2670,
4023:      635,   638,  1627,  1628,  1629,  3019,  1630,  1631,  1632,  1633,
4024:     1634,  1635,  1171,   479,  2363,   479,  1175,  2364,   980,  1174,
4025:      730,   479,   479,   479,   479,  1138, -1743, -1743,  2368,   479,
4026:      479,  2369,   979,    31,   479,  1177,   984,  2485,   479,  1178,
4027:     1882,   479,   479,   479,   479,   479,   479,   479,   479,   479,
4028:     2504,  1194,   479,  2505,  1578,  2524,  2675,   479,  1595,  1595,
4029:      479,   479,  1195,  2742,  1052,  2045,  2743,  1138,  2770,  1007,
4030:     2046,  1882,  2673,   982,    33, -1756, -1756, -1756,  2335,  2002,
4031:     2003,  2004,  2005,  2006,  2007,   993,   479,    34,  2798,  2747,
4032:      979,  1595,  2335,   728,  1197,   933,  2801,   980,  2818,  2802,
4033:     2121,  2819,  2822,  1008,  1225,  2819,  1228,   479,  1765,  1735,
4034:     1231,    35,  1232,   719,  2837,    57,  1234,  2838,   479,   479,
4035:    -1744, -1744,  1235,   594,  2450,    36,  1598,  1253,  2408,   724,
4036:      804,  2877,   980,  1263,  2838,   994,  2598,  1264,  2878,  1266,
4037:      721,  1595,    57,   995,  2890,  2284,  2911,  2819,  1011,  2912,
4038:      730,  1268,   982,  -689,  2336,   996,  1138,  1619,  1138,  2796,
4039:     2936,   728,  2586,  2937, -1746, -1746,  2975,  1822,  2336,  2819,
4040:      984,  2995, -1747, -1747,  2838, -1748, -1748,   722,  -696,   728,
4041:     2546,   719,  1012,  1810,  2601,   980,   997,   982,  2337, -1749,
4042:    -1749, -1750, -1750,  2234,  2546, -1751, -1751,  1052,  1271,   719,
4043:      479,   479,  2337,   479,  2338,   728,  1693,  1273,   721,   977,
4044:     1598,  2047,   728,  2339,  -686,   978,  1272,   983,  2338, -1753,
4045:    -1753,  1138,  2048, -1755, -1755,   719,   721,  2339,  1496,  1497,
4046:     2797,  1274,   719,   999,   479,  2251,   728,  1799,  1800,   479,
4047:      982,  2350,  2603,   980,  1275,   722,  1911,  2340,    36,   984,
4048:     1750,  1277,   721,  2258,   730,  1000,   719,  -547,  -547,   721,
4049:     -573,  2340,  -574,   722,  2947,  -687,  2948,    57,  2695,  -690,
4050:      983,  1278,  1840,  1279,  2459,  1002,  1208,  1209,  1281,  2280,
4051:     1210,  1211,   803,   721,   984,  -688,  2285,  1282,   603,   722,
4052:     -551,  -551,  1283,  2473,  1855,   803,   722,  1052,   982,   730,
4053:     -550,  -550,  -496,  1293,   479,  1375,  1377,  -496,  1284,   479,
4054:     1285,  1286,  1287,  1288,  2503,  1289,   724,   724,  1306,  1309,
4055:      722,   979,  1356,  1350,  1357,  1200,  1201,  1358,  1856,  1373,
4056:     1382,   724,  1383,   597,  2341,  1386,  1392,   984,  2851,  3004,
4057:      962,   960,  1428,  2606,  2502,   479,   479,   479,  2341,  1426,
4058:      479,  1434,    26,  1452,  1453,  2619,   604,   728,  1454,   479,
4059:      479,   479,   479,  1459,  1461,  1460,  1465,  2768,  2575,   479,
4060:     1472,  1473,  1487,   479,  1477,  -496,   479,   719,  1499,  2121,
4061:     1500,  1492,   597,  2993,  1504,  1509,  2607,  1510,    31,  1517,
4062:     2480,   479,   479,  1206,  1207,   984,   479,   621,  1518,   624,
4063:     1520,   628,  2608,  1523,   721,    57,  1524,  1526,  1530,  1562,
4064:      479,  1563,  1535,   479,   821,   479,  1542,  1645,   728,  1544,
4065:     2598,  2696,  1545,  1551,  -496,  1552,  2599,  1555,  2239,    33,
4066:     1556,  2453,  1565,   605,  1557,  1558,   479,    26,   719,  2600,
4067:     1591,   722,    34,  1600,  1605,  1141,  1316,  1665,   479,  2084,
4068:     1667,  1669,  1671,   597,  1703,   724,  1685,  1183,  1247,  1670,
4069:     1598,  1706,  1959,   479,  2084,   721,    35,  1672,  2601,  1692,
4070:     2602,  1247,  1704,    31,   980,    61,  1727,  1728,   636,  1758,
4071:       36,   634,   479,  1744,  1751,  1766,  1759,   604,  1778,   728,
4072:      476,  1788,  2501,  1789,  1791,   635,   638,   479,   479,  2609,
4073:     1792,  1790,   722,  1210,  1211,   476,  2610,  1645,  1793,   719,
4074:      820,  1809,  1812,  1992,    33,  1817,   479,  1816,  1993,  1994,
4075:     1995,  1818,  1298,  2628,  2629,  1862,  2603,    34,   605,   982,
4076:     1879,  1883,   477,  1138,  1138,  1138,   721,   506,  1887,  1897,
4077:     1895,   506,  1898,  1912,  1896,  1916,   551,   551,   554,   506,
4078:      559,    35,  1917,   559,  1923,  2604,   559,   585,  1300,  1863,
4079:      506,   506,  1919,  1920,  1948,    36,  1945,  1924,  1925,  1926,
4080:     1927,  1298,   606,   722,  1052,  1934,  1935,  1645,  1949,  1957,
4081:     1968,  1947,  1980,  1975,  2016,   724,  1969,  1977,  2450,  1693,
4082:     1985,  1978,  2042,  1979,  1981,  1982,  1984,  1988,  2010,   728,
4083:     2011,  2037,  2058,  2017,  2024,  2060,   559,  2063,  2035,  2088,
4084:      730,  2049,  2059,   585,   506,   585,   585,   585,  1815,   719,
4085:     2061,  2062,  2605,  2077,  2098,   487,   984,  2606,  1823,   728,
4086:     1826,  2107,  2114,  1837,  2100,  2112,  -552,    57,  2077,  1841,
4087:     2116,  1843,   596,  -553,  2127,  2130,   721,  2128, -1141,   719,
4088:     2131,  2134,  2132,  1850,  2136,  1138,  2137,   803,  1853,  2140,
4089:     2157,  2144,  1858,  1859,  1860,  1861,  2159,  1865,  1866,  1911,
4090:     2607,  2172,  2178,  2627,  2179,   479,   721,  2186,   730,  1579,
4091:     2180,  1480,   804,   722,   479,   488,  2608,   479,  2187,   724,
4092:      479,  2188,  2189,  2198,  2197,  2201,   730,   479,   479,   479,
4093:      479,   728,  2211,   479,   479,   479,   479,   479,   479,   479,
4094:      479,   479,   479,   722,  2215,  2167,   479,   479,   597,  1997,
4095:      479,   719,   730,  2313,  1580,  2931,  2212,   479,  2216,   730,
4096:     2222,  2219,   479,  2223,   724,  2225,  2232,   990,  2233,  1892,
4097:      990,   479,  2235,  2242,   479,  2250,   479,  2013,   721,   597,
4098:     1581,  1992,  2012,   730,   479,  2286,   991,   479,   479,   991,
4099:     2193,  2281,   479,   479,  2282,  2283,   597,  2301,  1582,  2315,
4100:     2070,  2314,  1583,  2287,  2299,  2205,  2305,  2302,   479,  2084,
4101:      479,  2084,  2326,  2609,  2334,   722,  2348,  2352,  1998,  2360,
4102:     2610,  2362,   479,  2366,  1584,   639,  2357,  1585,  2358,  2375,
4103:     2377,  2381,   479,  2396,  2412,  2394,  2387,   992,   653,  2476,
4104:      992,  2484,  1586,  2488,  2388,  2470,  2471,  2472,   479,  2483,
4105:      476,   728,   476,  2487,  2492,  2498,  2500,  2508,    57,  1882,
4106:     2511,  2855,  2514,  1247,  2515,  2516,  2552,  2518,  2240,  2517,
4107:     2241,   719,  2848,  2532,  2246,  2247,  2543,  2745,  2553,  2547,
4108:     2544,  2550,  2560,  2566,   820,  2565,   492,  1992,   493,   728,
4109:     2567,  2568,  1993,  1994,  1995,  2570,  2581,  2450,   721,  1138,
4110:     2587,  2588,  2589,  1138,  2457,  1138,  2593,  2404,  2617,   719,
4111:      495,  2618,  2622,   496,  2635,  2634, -1092, -1729,  2645, -1730,
4112:      728, -1731,   926,   728, -1732,  2453, -1733,  2636,   993, -1734,
4113:    -1735,   993, -1736,  1587, -1737,   722,   721,  1298,  2880,  2643,
4114:      719,  1588,  2647,   719, -1738, -1739, -1740, -1741,  2478,  2648,
4115:    -1742,  2910, -1743, -1744,   973, -1746, -1747, -1748,  2661, -1749,
4116:    -1750,  2664, -1751, -1752, -1753,   730, -1754,   721,  1298, -1755,
4117:      721,  2662,  2496,   722, -1093,  2891,  2667,  2893,   994,  2668,
4118:     2671,   994,   479,  2324,  1589,  2327,   995,  2672,  2686,   995,
4119:     1153,  1155,  1157,  2699,  2820,  2726,  2704,  2820,   996,  2722,
4120:     2728,   996,  2734,  2736,   722,  2737,  1315,   722,  2753,  1316,
4121:     2739,  2744,  2757,  1999,  2000,  2001,  2756,  2002,  2003,  2004,
4122:     2005,  2006,  2007,  2758,  2759,  2760,  2767,  2769,  2774,   997,
4123:      479,   479,   997,  2775,  2776,   479,   730,  2963,  2858,  1322,
4124:      479,   585,  2803,   479,   479,  2848, -1756,   646,   479,  2789,
4125:      647,  2790,  2799,  2811,   585,  2812,  2827,  2813,  2815,   506,
4126:     2823,  2825,  2831,  2834,  2839,  2853,  2857,  2859,   479,  2084,
4127:     2868,  1324,   479,  2084,  2862,   724,   999,  2873,  2874,   999,
4128:     2455,  2875,  2879,  1198,  1199,  2883,   647,   506,   506,  2884,
4129:     2892,  2895,  2896, -1756,   479,  2898,  2909,  2913,  1000,  2752,
4130:     2915,  1000,  2916,   551,  2918,  2193,  2921,    57,  2922,  2923,
4131:      476,  2927,  2574,  2576,   476,  2928,  2945,  2905,  1002,  2929,
4132:     2218,  1002,   914,   914,   559,   559,  2938,   559,  1138,  2534,
4133:      728,    57,  2953,  2959,  2976,  2939,  2940,   479,   585,  2942,
4134:     2974,  2040,  2977,   724,   725,  2986,   730,   506,  2979,  2997,
4135:      719,  2989,  2991,  2987,  2988,  3013,  3002,  3003,   585,  1200,
4136:     1201,   724,  1998,  3014,  3016,  3021,  2415,   948,  2411,  1842,
4137:      585,  2155, -1756,  2370,  2904,  2727,  2457,   721,  2949,  2486,
4138:     2577,  2625,  2955,  3011,  2852,  2992,  2985,   724, -1756,  2788,
4139:     1443,  2139,  2162, -1756,   724,  2491,  2951,  2416,  2990,  2135,
4140:     2950,  1538,  1559,  2236,  2453,  2195,   585,   585,   585,  2669,
4141:     1384,  1422,  2475,  1808,   722,  1423,  1365,  2119,   724,  2886,
4142:     2900,  2980,  2129,  1202,  1203,  1204,  1205,  1206,  1207, -1756,
4143:     1785,  1208,  1209,  2356,  2941,  2894,  -458,  2571,  2653,   803,
4144:     2833,  1807,  2097,  2077,  1427,   479,  2329,  2077,   730,  2817,
4145:     -458,   479,  2325,  2542,  2882,  -458,  2558,  2881,  2888,  2725,
4146:      479,   479,  2889,  2943,   479,  1378,  2944,  2572,  1608,  1609,
4147:      549,    57,    57,  1611,  2973,  1733,  1615,   479,  2084,  1616,
4148:     2122,  2033,  1878,  2056,  1333,  1599,   479,  2084,  1972,   916,
4149:     1389,   479,  2084,  2054,   479,  2084,  2573,  2091,  2355,  2200,
4150:     2876,   479,   479,  1571,  -458,  1966,  1387,  2371,  1753,     0,
4151:     1755,     0,     0,   479,  2084,   479,  1435,     0,     0,   476,
4152:      725,     0,     0,  -458,     0,     0,     0,     0,   476,  1462,
4153:        0,     0,     0,   476,     0,   479,   476,  1210,  1211,   724,
4154:        0,     0,  2379,     0,     0,     0,     0,     0,     0,     0,
4155:     1486,     0,     0,     0,     0,   476,     0,  1999,  2000,  2001,
4156:        0,  2002,  2003,  2004,  2005,  2006,  2007,  2413,  2457,     0,
4157:        0,  1265,  -458,     0,  1198,  1199, -1756,     0,     0,     0,
4158:        0,  -458,  2460,  2461,  2462,  2463,  2464,  2465,  2466,  2467,
4159:     2468,  2469,     0,     0,  2649,  2772,     0,    57,     0,     0,
4160:      724,   479,  2084,     0,     0,   479,   730,     0,     0,  1648,
4161:        0,   820,     0,     0,  1992,  1247,     0,     0,  2653,  1993,
4162:     1994,  1995,     0,     0,     0,  1315,     0,   725,  1316,   479,
4163:        0,     0,   597,   479,  2084,     0,     0,   730,  1304,     0,
4164:      730,     0,     0,   476,     0,     0,   479,     0,  1212,  1213,
4165:     1200,  1201,     0,     0,     0,     0,     0,     0,  1322,   727,
4166:      479,  2077,     0,   479,     0, -1756,  2077,     0,  1214,  2077,
4167:        0,   724,     0,  1138,     0,   476, -1756,  1138,   479,     0,
4168:     2724,   585,  1246,  1340,  1341,  1342,  1343,  1344,  1345,  1246,
4169:     1324,  1519,     0,     0,     0,     0,  1562,     0,     0,   506,
4170:      506,   820,     0,     0,  1992,   585,   585,  1391,     0,  1993,
4171:     1994,  1995,     0,     0,  1202,  1203,  1204,  1205,  1206,  1207,
4172:     -458,     0,  1208,  1209,     0,  2870,  2296,     0,  1648,     0,
4173:        0,     0,   585,  1446,     0,     0,   479,  2084,     0,     0,
4174:        0,     0,     0,     0,  2455,   585,     0,     0,     0,     0,
4175:        0,     0,     0,     0,    57,     0,     0,   479,     0,   479,
4176:     2050,   479,   585,     0,     0,   479,   585,     0,     0,     0,
4177:        0,     0,   479,  2084,     0,  1568,  1312,    57,   476,     0,
4178:        0,   724,     0,   630,  2901,     0,   946,   631,     0,     0,
4179:        0, -1756,     0,   479,     0,     0,     0,     0,  1996,     0,
4180:        0,  1246,     0,  1246,  1246,     0,   725, -1756,  2077,     0,
4181:        0,   724, -1756,   479,   476,     0,     0,     0,     0,     0,
4182:     1997,  1298,     0,     0,     0,     0,   479,     0,  1210,  1211,
4183:        0,     0,     0,     0,     0,   727,     0,     0,     0,     0,
4184:        0,     0,     0,     0,     0,     0,  1138,  2457, -1756,     0,
4185:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4186:        0,     0,     0,   479,  2084,     0,   479,   479,     0,     0,
4187:        0,  1246,  2964,     0,  1246,  1246,     0,     0,     0,  2864,
4188:        0,     0,     0,   724,    57,  1198,  1199,     0,     0,  1998,
4189:        0,     0,     0,     0,     0,     0,     0,     0,  1743,  1503,
4190:        0,   479,     0,  1333,     0,   476,     0,   585,     0,     0,
4191:     1997,     0,     0,     0,     0,     0,     0,  1533,     0,  1752,
4192:        0,  1754,     0,     0,   820,     0,     0,  1992,     0,     0,
4193:        0,     0,  1993,  1994,  1995,     0,     0,     0,     0,  1212,
4194:     1213,     0,   727,    57,     0,     0,     0,   479,     0,  2297,
4195:     1550,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4196:        0,  1200,  1201,     0,     0,     0,  1648,  1648,  1803,     0,
4197:        0,  1648,     0,     0,     0,     0,     0,     0,     0,  1998,
4198:        0,   647,   647,     0,   506,   506,     0,   506,   647,     0,
4199:        0,   585,     0,   725,   725, -1756,     0,     0,     0,     0,
4200:        0,     0,     0,   724,     0,     0,     0,     0,   725,     0,
4201:     2746,     0,  1648,  1648,     0,     0,     0,     0,     0,     0,
4202:        0,     0,     0,  2455,     0,  1202,  1203,  1204,  1205,  1206,
4203:     1207,    57,     0,  1208,  1209,     0,     0,     0,  1638,     0,
4204:        0,   724,     0,     0,     0,  2765,  2766,  1888,  1890,  1664,
4205:        0,     0,     0,     0,     0,  1537,     0,     0,     0,     0,
4206:        0,     0,  2777,     0,     0,     0,  1546,     0,  1547,     0,
4207:        0,     0,   724,     0,     0,   724,     0,  1553,     0,     0,
4208:      647,     0,     0,     0,  1999,  2000,  2001,     0,  2002,  2003,
4209:     2004,  2005,  2006,  2007,  1554, -1756,     0,     0,     0,     0,
4210:        0,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,
4211:        0,     0,     0,   914,   585,     0,     0,     0,     0,     0,
4212:        0,   727,  1573,  1575,     0,     0,     0,     0, -1534,     0,
4213:        0,     0,   725,  1997,     0,   585,     0,   585,  2835,  1210,
4214:     1211,     0,     0,     0,     0,     0,  1767,     0,  1773,     0,
4215:        0,     0,     0,     0,  1606,  1607,     0,     0,  1620,  1621,
4216:        0,     0,     0,     0,     0,     0,  2856,     0,     0,     0,
4217:        0,     0,     0,     0,  1999,  2000,  2001,     0,  2002,  2003,
4218:     2004,  2005,  2006,  2007,   585,     0,     0,     0,     0,     0,
4219:        0,     0,     0,  1446,   506,     0,     0,     0,     0,     0,
4220:        0,     0,  1998,     0,   506,  1824,   506,  1828,     0,   506,
4221:        0,     0, -1536,     0,     0,   506,     0,   506,     0,     0,
4222:        0, -1534,     0,     0,     0,     0,     0,     0,   647,   506,
4223:        0,     0,     0,   647,   506,     0,     0,     0,   506,   506,
4224:      506,   506,     0,   506,   506,     0,     0,     0,     0,     0,
4225:     1212,  1213,     0,     0,     0,     0,     0,     0,     0,     0,
4226:        0,     0,   725,   585,   585,  1891,     0,     0,     0,     0,
4227:        0,     0,     0, -1534,     0,     0,     0,     0,  2069,     0,
4228:     1906,     0,   724,     0,     0,     0,     0, -1534,     0,     0,
4229:        0,     0, -1534,     0,  1797,  1797,     0, -1534,     0,     0,
4230:        0,     0,     0,     0,  1315, -1536, -1534,  1316,   727,   727,
4231:    -1534,     0,  1317,  1318,  1319,     0,     0,     0,  1648,  1648,
4232:     1648,  1648,     0,   727,  1648,  1648,  1648,  1648,  1648,  1648,
4233:     1648,  1648,  1648,  1648,     0,     0,     0,  1322,     0,   820,
4234:        0, -1534,  1992,     0,  1323,     0,  1246,  1993,  1994,  1995,
4235:        0,     0,     0,     0,     0,     0,  1246, -1536,     0,  1246,
4236:    -1534,     0,     0,     0,  2526,     0,   725,     0,     0,  1324,
4237:        0, -1536,     0,     0,     0,     0, -1536,     0,  1648,  1648,
4238:        0, -1536,     0,     0,     0,     0,     0,     0,     0,     0,
4239:    -1536,     0,     0,     0, -1536,     0,     0,  1999,  2000,  2001,
4240:        0,  2002,  2003,  2004,  2005,  2006,  2007,     0,     0, -1534,
4241:        0,   725, -1534,     0,     0,     0,     0,     0, -1534,   506,
4242:        0,     0,     0,     0,     0, -1536,  1304,  2196,     0,     0,
4243:        0,  1931,  1933,     0,     0,     0,     0,  2207,  2208,  2210,
4244:        0,     0,     0,     0, -1536,     0,     0,   727,     0,     0,
4245:        0,     0, -1534,     0,     0,     0,     0,  2224,  1246,     0,
4246:     1638,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4247:     1325,  1246,     0,     0,     0, -1534,     0,     0,     0,     0,
4248:        0,     0,     0,     0,     0,     0,  1326,  1568,     0,     0,
4249:        0,  1327,     0, -1536,   585,     0, -1536,     0,     0,     0,
4250:     2087,     0, -1536,     0,     0,     0,     0,     0,     0,     0,
4251:        0,     0,     0, -1756, -1756,  2087,     0,     0,     0,  2106,
4252:        0,     0,  2109,     0,  1773,     0,     0,  1330,     0,  1315,
4253:     2070,     0,  1316,     0,     0,     0, -1536, -1756, -1756, -1756,
4254:        0,     0,     0,     0,     0,     0,   820,     0,  1997,  1992,
4255:        0,     0,     0,     0,  1993,  1994,  1995, -1534,     0, -1536,
4256:        0,     0,  1322,     0,     0, -1534,     0,     0, -1756,  1323,
4257:        0,  2527,     0,     0,     0,     0,  1503,   727,     0,     0,
4258:        0, -1534,  1333, -1534, -1534,     0,     0,     0,     0,     0,
4259:        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
4260:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4261:        0,  2321,  2322,  2323,  2070,     0,     0,  1998,     0,     0,
4262:    -1534,     0,     0, -1534, -1534, -1534,     0,     0,     0,  2093,
4263:        0,     0,     0,     0,     0,     0,     0,     0,  1503,     0,
4264:        0, -1536,     0,   585,     0,     0,     0,     0,     0, -1536,
4265:        0,     0,  1503,   585,   585,   585,     0,     0,     0,     0,
4266:        0,     0,     0,  2125,  2125, -1536,   506, -1536, -1536,     0,
4267:     2378,     0,     0,   585,  1335,     0,     0,     0,     0,     0,
4268:        0,   727,     0,     0,     0,  2231,     0,     0,  1315,     0,
4269:        0,  1316,     0,     0,     0,  1325,     0,     0,     0,     0,
4270:        0,   647,     0,   585, -1536,     0,     0, -1536, -1536, -1536,
4271:        0,  1326,     0,     0,     0,     0,  1327,     0,  1503,  1503,
4272:        0,  1322,   725,     0,     0,     0,   727,     0, -1756,     0,
4273:        0,     0,     0,     0,     0,     0,  1315,     0,     0,  1316,
4274:        0,  1638,  2482,     0,  1317,  1318,  1319,     0,     0,     0,
4275:        0,     0,  1330,  1324,     0,  1997,     0,     0,     0,     0,
4276:        0,  1320,     0,     0,     0,     0,     0,     0,     0,  1322,
4277:        0,     0,     0,     0,  1336,  1568,  1323,  1337,  1338,  1339,
4278:        0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,     0,
4279:      725,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4280:        0,  1324,     0,  2227,     0,     0,     0,  1333,   725,     0,
4281:        0,     0,  1999,  2000,  2001,     0,  2002,  2003,  2004,  2005,
4282:     2006,  2007,     0,  2306,  1998,     0,     0,   585,   585,   585,
4283:      477,     0,  2087,  2333,   725,     0,  1648,     0,  2333,  2347,
4284:        0,   725,     0,     0,     0,     0,     0,     0,     0,     0,
4285:        0,     0,     0,     0, -1756,     0,     0,  2537,  2538,  2539,
4286:     2540,     0,     0,     0,     0,   725,     0,     0,  1773,     0,
4287:    -1756,     0,     0,     0,     0, -1756,     0,     0,     0,     0,
4288:        0,     0,     0,     0,   897,   897,   585,     0,   506,     0,
4289:        0,     0,  1503,  1446,  1503,     0,  1533,     0,     0,  1335,
4290:        0,     0,  1325,     0,     0,     0,     0,     0,     0,     0,
4291:        0, -1756,     0,   506,     0,  2414,     0,     0,  1326,     0,
4292:        0,     0,     0,  1327,     0,     0,  1648,     0,   506,   506,
4293:      506,   506,   506,   506,   506,   506,   506,   506,     0,     0,
4294:        0,     0,     0,     0,     0,  1328,  1329,  1047,  1054,     0,
4295:        0,     0,     0,  1906,     0,     0,     0,     0,   585,  1330,
4296:        0,     0,     0,     0,     0,     0,  1333,     0,  1446,     0,
4297:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1533,
4298:        0,     0,     0,     0,     0,     0,   725,     0,     0,     0,
4299:        0,   585,     0,     0,     0,     0,  1648,  1331,  1503,  1336,
4300:     1332,     0, -1756, -1756, -1756,     0,  1340,  1341,  1342,  1343,
4301:     1344,  1345,     0,     0,  1333,     0,     0,  1334,     0,  1999,
4302:     2000,  2001,     0,  2002,  2003,  2004,  2005,  2006,  2007,     0,
4303:        0,     0,     0,     0,     0,     0,     0,   727,     0,     0,
4304:        0,     0,   506,     0,     0,     0,     0,   725,  2519,     0,
4305:     1246,     0,     0,     0,     0,     0,     0,     0, -1756,  1315,
4306:        0,     0,  1316,     0,     0,     0,     0,  1317,  1318,  1319,
4307:        0,  2536,     0,   585,   585,   585,   585,     0,     0,     0,
4308:     2333,  2347,     0,  2333,  1320,     0,  2545,     0,     0,     0,
4309:     2087,     0,  1322,     0,  2087,     0,     0,     0,     0,  1323,
4310:     2563,     0,     0,     0,     0,   727,  1335,     0,     0,     0,
4311:        0,     0,     0,     0,     0,     0,   914,   486,   725,     0,
4312:     2106,   487,     0,   727,  1324,  1773,     0,     0,  1047,     0,
4313:        0,  1638,     0,     0,     0,     0,     0,  1446,     0,     0,
4314:        0,     0,     0,  1503, -1141,  1269,     0,     0,  2754,   727,
4315:        0,     0,     0,     0,     0,     0,   727,     0, -1756,     0,
4316:        0,     0,     0,  2626,     0,  1340,  1341,  1342,  1343,  1344,
4317:     1345,     0,     0,     0,  1280,     0,     0,     0,     0,     0,
4318:      727,   488,     0,     0,     0,     0,  2773,     0,   489,     0,
4319:        0,     0,     0,     0,  1290,  1291,  1292,     0,     0,  1299,
4320:        0,     0,     0,     0,  2794,     0,  1336,     0,     0,  1337,
4321:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
4322:        0,     0,  1355,     0,     0,  1325,  1983,     0,   725,     0,
4323:        0,     0,  1503,     0,     0,   490,     0,     0,     0,     0,
4324:        0,  1326,     0,  1906,     0,     0,  1327,     0,     0,     0,
4325:        0,     0,     0,     0,  2665,     0,     0,     0,   725,     0,
4326:        0,     0,     0,     0,     0,     0,     0, -1550,  1328,  1329,
4327:        0,  1315,     0,     0,  1316,  1399,     0,  2844,     0,  1413,
4328:     1418,  1246,  1330,     0,     0,     0,  1246,     0,     0,     0,
4329:     2681,     0,     0,     0,     0,     0,     0,     0,     0,   477,
4330:     2333,   727,     0,  2692,  1322,   491,   506,     0,  2087,     0,
4331:        0, -1756,     0,  2087,  2869,     0,  2087,     0,  2703,     0,
4332:     1331,  2706,     0,  1332,     0,     0,     0,     0,  1573,  1575,
4333:      725,     0,     0,  1047,     0,  2733,  1324,  1333,     0,     0,
4334:     1047,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4335:        0,     0,   492,     0,   493,   647,   506,     0,     0,     0,
4336:    -1550,  1047,   727,     0,   585,     0,     0,     0,     0,     0,
4337:      494,     0,     0,     0,  1348,     0,   495,     0,     0,   496,
4338:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4339:        0,   506,   506,     0,     0,     0,     0,     0,     0,     0,
4340:        0,     0,   585,     0,  1446,     0,  2309,     0,   506,     0,
4341:        0,     0, -1550,     0,     0,  1348,     0,     0,     0,     0,
4342:      585,     0,     0,  2733,     0,     0, -1550,     0,     0,  1335,
4343:        0, -1550,     0,   727,     0,     0, -1550, -1756,     0,     0,
4344:        0,     0,   506,     0,     0, -1550,     0,     0,     0, -1550,
4345:      725,     0,     0, -1756,     0,  2087,     0,     0, -1756,     0,
4346:     2706,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4347:        0,     0,     0,     0,     0,     0,  1047,     0,  2830,     0,
4348:    -1550,     0,   914,     0,   506,     0,     0,     0,   725,     0,
4349:        0,     0,     0,   585, -1756,     0,     0,     0,     0, -1550,
4350:        0,     0,     0,  1573,  1575,     0,     0,     0,     0,     0,
4351:        0,     0,   506,     0,  1246,     0,   647,     0,     0,   725,
4352:        0,     0,   725,     0,  1348,     0,     0,     0,     0,  1336,
4353:      585,  1348,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,
4354:     1344,  1345,     0,   727,     0,     0,     0,     0, -1550,  1333,
4355:        0, -1550,     0,     0,     0,     0,     0, -1550,   477,     0,
4356:     1315,     0,     0,  1316,     0,     0,     0,  2885,     0,     0,
4357:        0,   506,     0,   727,     0,  2703,     0,     0,     0,     0,
4358:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1603,
4359:        0, -1550,     0,  1322,  2733,   647,   647,   647,     0,  1622,
4360:    -1756,  1639,     0,     0,  1651,  1654,  1659,  1662,     0,     0,
4361:        0,     0,     0,     0, -1550,     0,     0,     0,     0,     0,
4362:        0,     0,     0,     0,  1446,  1324,     0,     0,     0,  1674,
4363:        0,     0,     0,     0,     0,  1678,  1679,  1680,  1681,  2703,
4364:        0, -1756,     0,  1690,  1691,   727,     0,     0,  1702,     0,
4365:        0,  2830,  1705,     0,     0,  1713,  1714,  1715,  1716,  1717,
4366:     1718,  1719,  1720,  1721,     0,  1773,  1722,     0,     0,  2070,
4367:        0,  1730,     0,     0,  1734,   897,     0,     0,  1047,  1446,
4368:        0,     0,     0,     0,     0,  2733,     0,     0,     0,     0,
4369:        0,     0,     0,     0,     0,  2310, -1550,     0,     0,     0,
4370:     1756,  2692,   647,     0, -1550,     0,     0,     0,     0,     0,
4371:        0,     0,     0,     0,     0,     0,   990,     0,     0,     0,
4372:    -1550,     0, -1550, -1550,     0,     0, -1756,     0,     0,   725,
4373:        0,     0,  1291,  1292,     0,   991,     0,     0,     0,     0,
4374:        0, -1756, -1756,     0,     0,     0,  1348, -1756,  1340,  1341,
4375:     1342,  1343,  1344,  1345,     0,     0,     0,  1348,     0, -1550,
4376:        0,  1646, -1550, -1550, -1550,   727,     0,  1348,  1348,  1348,
4377:        0,     0,     0,     0,     0,     0,  1348,     0,     0,     0,
4378:        0,     0,     0, -1756,     0,     0,   992,  2402,     0,     0,
4379:        0,     0,     0,  1246,     0,  2403,     0,     0,     0,     0,
4380:        0,     0,     0,   727,     0,     0,     0,     0,     0,     0,
4381:        0,  1047,     0,     0,  1875,  1876,     0,  1877,     0,     0,
4382:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4383:        0,     0,  1348,     0,   727,     0,     0,   727,  1333,     0,
4384:        0,     0,     0,     0,     0,     0,     0,     0,  1915,     0,
4385:        0,     0,     0,  2404,     0,     0,     0,     0,     0,     0,
4386:        0,     0,     0,     0,     0,     0,     0,     0,     0,   -39,
4387:        0,     0,     0,     0,     0,     0,  1348,   993,     0,     0,
4388:        0,     0,     0,     0,     0,     0,     0,     0,     1,     0,
4389:     1348,     0,     0,     0,     0,  1348,     0,     0,     2,     0,
4390:        3,     4,     0,     0,     0,     0,     0,     0,     0,     0,
4391:        0,  1047,     0,     0,     0,     0,     5,     0,  1970,     0,
4392:        0,     0,     0,  1976,     0,     6,     0,   994,     0,     0,
4393:    -1756,     0,     0,     0,     0,   995,     0,     7,     0,     0,
4394:        0,     0,     0,     0,     0,     0,     0,   996,     8,  2405,
4395:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4396:        9,  1991,    10,  1315,     0,     0,  1316,     0,     0,     0,
4397:        0,     0,     0,  1659,     0,  1659,  1659,     0,   997,     0,
4398:       11,     0,     0,  2029,     0,     0,     0,  2032,     0,     0,
4399:     2034,     0,     0,     0,    12,     0,  1322,     0,     0,     0,
4400:        0,     0,     0, -1756,    13,     0,     0,     0,     0,     0,
4401:       14,     0,     0,     0,     0,     0,     0,     0,    15,     0,
4402:       16,    17,     0,     0,  2052,   999,     0,  2055,  1324,  2057,
4403:    -1756,     0,     0,     0,    18,     0,     0,  1340,  1341,  1342,
4404:     1343,  1344,  1345,     0,   727,     0,     0,  1000,     0,     0,
4405:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4406:        0,     0,     0,    19,     0,     0,     0,  1002,     0,  2406,
4407:        0,     0,  2407,     0,     0,     0,     0,     0,    20,     0,
4408:     1348,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4409:        0,     0,     0,     0,     0,     0,  1399,     0,  2530,  1348,
4410:        0,     0,     0,    21,  1315,     0,     0,  1316,     0,     0,
4411:        0,  1418,  1720,     0,     0,     0,  1348,     0,  1646,  1646,
4412:        0,  2008,     0,  1646,     0,     0,     0,     0,  1348, -1756,
4413:     2133,  1348,     0,     0,     0,     0,  1348,  1322,     0,  1348,
4414:        0,     0,     0,     0, -1756, -1756,     0,     0,     0,     0,
4415:    -1756,  1348,     0,     0,     0,  1348,  1348,  1348,  1348,     0,
4416:        0,     0,     0,     0,  1646,  1646,     0,  1348,  1348,  1324,
4417:        0,     0,     0,     0,  1454,     0,     0,     0,     0,  1348,
4418:       22,     0,  1348,    23,     0,     0, -1756,     0,  1047,     0,
4419:     1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,  1348,
4420:        0,     0,     0,     0,     0,     0,     0,  1348,     0,     0,
4421:        0,  1348,    24,     0,     0,     0,     0,     0,     0,     0,
4422:        0,    25,     0,     0,     0,   977,     0,     0,     0,     0,
4423:        0,   978,     0,  1348,     0,    26,     0,     0,   990,     0,
4424:        0,  1333,    27,     0,     0,     0,    28,     0,     0,     0,
4425:        0,     0,     0,     0,     0,     0,    29,   991,     0,     0,
4426:        0,     0,     0,     0,     0,     0,     0,    30,     0,     0,
4427:    -1756,    31,     0,     0,     0,     0,     0,     0,     0,     0,
4428:        0,     0,     0,     0,     0,     0, -1756,     0,     0,  2249,
4429:        0, -1756,     0,     0,     0,     0,     0,     0,  2253,     0,
4430:        0,  2254,     0,     0,  2256,     0,     0,    32,   992,     0,
4431:        0,     0,    33,     0,     0,     0,     0,     0,     0,     0,
4432:        0,     0,     0,     0,     0,    34,     0, -1756,     0,     0,
4433:     2276,  2277,     0, -1756,  1756,     0,     0,   979,     0,     0,
4434:        0,     0,     0,     0,     0,     0,  2288,     0,     0,    35,
4435:        0,     0,  1348,  1348,  1348,  2295,     0,     0,  2298,     0,
4436:     2300,     0,     0,    36,     0,     0,   -39,     0,  2304,     0,
4437:        0,     0,     0,     0,     0,     0,  2311,  2312,     0,     0,
4438:     1314,     0,  1333,     0,     0,  1315,     0,     0,  1316,     0,
4439:        0,     0,  1348,  1317,  1318,  1319,     0,     0,     0,   993,
4440:        0,     0,     0,     0,     0,     0,  2351,     0,     0,     0,
4441:     1320,     0,     0,  1321,     0,     0,  2359,     0,  1322,     0,
4442:        0,     0,     0,     0,     0,  1323,     0,     0,     0,     0,
4443:        0,     0,  2372, -1756,     0,     0,     0,     0,     0,     0,
4444:     1340,  1341,  1342,  1343,  1344,  1345,     0,  1348,     0,   994,
4445:     1324,     0,     0,  1348,     0,     0,     0,   995,     0,     0,
4446:        0,     0,     0,     0,     0,     0,  2008,  2008,  1348,   996,
4447:     1646,  1646,  1646,  1646, -1756,     0,  1646,  1646,  1646,  1646,
4448:     1646,  1646,  1646,  1646,  1646,  1646,  2008,     0,     0,     0,
4449:      980,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4450:      997,     0,     0,     0,     0,     0,  1348,     0,     0,  1348,
4451:        0,  1348,     0,     0,     0,  2008,  2008,     0,     0,     0,
4452:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1348,
4453:     1646,  1646,  1348,     0,  1348,     0,     0,     0,     0,     0,
4454:        0,   998,     0,     0,     0,   982,     0,   999,     0,     0,
4455:        0,  1325,     0,     0,     0,     0,     0,     0,     0,     0,
4456:        0,     0,     0,     0,     0,     0,  2507,  1326,     0,  1000,
4457:        0,     0,  1327,     0, -1756,  1001,     0,     0,     0,     0,
4458:        0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,  1002,
4459:        0,     0,     0,     0,  1328,  1329,     0,     0,     0,     0,
4460:        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
4461:     1348,     0,     0,     0,  2520,  2521,     0,     0,     0,  2522,
4462:        0,     0,     0,     0,  2525,     0,     0,  2528,  2529,     0,
4463:        0,  1315,  2533,     0,  1316,     0,     0,     0,     0,  1317,
4464:     1318,  1319,   984,     0,     0,     0,  1331,     0,     0,  1332,
4465:        0,     0,     0,     0,     0,     0,  1320,     0,     0,  2292,
4466:        0,     0,     0,  1333,  1322,     0,  1334,     0,     0,     0,
4467:        0,  1323,     0,     0,     0,     0,     0,     0,   897,     0,
4468:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4469:        0,     0,     0,     0,     0,     0,  1324,     0,     0,     0,
4470:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4471:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4472:        0,  2620,     0,     0,     0,     0,  1348,     0,     0,     0,
4473:     1348,  1348,     0,  1348,     0,     0,  2008,  2008,  2008,  2008,
4474:        0,     0,     0,  2008,  2008,  2008,  2008,  2008,  2008,  2008,
4475:     2008,  2008,  2008,  1348,  1348,  1335,     0,     0,  1315,     0,
4476:        0,  1316,     0,     0,     0,  1348,  1317,  1318,  1319,     0,
4477:        0,     0,  1348,     0,     0,  1348,     0,  1348,     0,     0,
4478:        0,  1348,     0,  1320,  2008,  2008,     0,     0,  1348,  1348,
4479:        0,  1322,     0,     0,     0,     0,     0,  1325,  1323,     0,
4480:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4481:        0,     0,     0,  1326,     0,     0,     0,     0,  1327,     0,
4482:        0,     0,     0,  1324,     0,     0,     0,     0,  1348,     0,
4483:        0,     0,     0,     0,     0,  2029,  1348,     0,     0,     0,
4484:     1328,  1329,     0,     0,  2676,  2677,     0,     0,  2678,  1348,
4485:        0,     0,     0,     0,  1330,  1336,     0,     0,  1337,  1338,
4486:     1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,
4487:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4488:        0,     0,     0,     0,     0,  2720,  2721,     0,     0,     0,
4489:        0,     0,  1331,     0,     0,  1332,     0,   977,     0,  2735,
4490:        0,     0,     0,   978,     0,     0,     0,     0,     0,  1333,
4491:      990,     0,  1334,     0,     0,     0,     0,     0,   508,     0,
4492:        0,     0,     0,     0,  1325,     0,     0,     0,     0,   991,
4493:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4494:     1326,     0,     0,     0,     0,  1327,     0,     0,     0,     0,
4495:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4496:        0,     0,     0,     0,     0,     0,     0,  1328,  1329,     0,
4497:        0,   509,     0,     0,     0,     0,     0,     0,     0,     0,
4498:      992,  1330,     0,     0,  1348,     0,     0,   510,  1646,     0,
4499:        0,     0,     0,     0,     0,     0,     0,  1348,  1348,  1348,
4500:        0,  1335,  1348,     0,     0,  1348,  1348,     0,     0,   979,
4501:     1348,     0,     0,  2814,     0,     0,     0,     0,     0,  1331,
4502:        0,     0,  1332,     0,     0,     0,     0,     0,     0,     0,
4503:     1299,     0,     0,     0,     0,     0,  1333,     0,     0,  1334,
4504:        0,   511,     0,     0,   897,     0,     0,  2836,     0,     0,
4505:        0,   512,     0,     0,     0,     0,     0,     0,     0,     0,
4506:        0,     0,  2850,   513,     0,     0,     0,     0,   514,     0,
4507:        0,   993,     0,     0,     0,     0,     0,     0,  1646,     0,
4508:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4509:        0,     0,     0,     0,     0,   515,     0,  1348,     0,     0,
4510:        0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,  1341,
4511:     1342,  1343,  1344,  1345,     0,     0,     0,     0,  1668,     0,
4512:        0,   994,     0,     0,     0,     0,     0,     0,  1335,   995,
4513:        0,     0,     0,     0,     0,     0,     0,     0,     0,   516,
4514:        0,   996,     0,   517,     0,  2720,     0,  2008,  1646,  2897,
4515:        0,     0,     0,  1348,  1348,  1348,     0,     0,     0,     0,
4516:        0,     0,   980,     0,     0,     0,     0,     0,     0,     0,
4517:        0,     0,   997,     0,     0,     0,     0,  2920,     0,     0,
4518:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4519:        0,     0,     0,     0,     0,     0,     0,  1348,  1348,     0,
4520:        0,     0,     0,     0,     0,     0,   518,     0,     0,     0,
4521:     2720,     0,  1348,  1844,     0,     0,     0,   982,     0,   999,
4522:      519,     0,     0,     0,  2008,     0,     0,     0,  1336,     0,
4523:        0,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,
4524:     1345,  1000,     0,     0,     0,  1668,     0,  1845,     0,     0,
4525:     2970,  2970,     0,   520,     0,     0,   521,     0,     0,     0,
4526:        0,  1002,     0,     0,   522,     0,     0,   523,     0,     0,
4527:        0,     0,     0,  2008,     0,     0,     0,     0,     0,     0,
4528:        0,     0,     0,     0,     0,  2970,   524,     0,     0,     0,
4529:        0,  1348,     0,     0,     0,     0,     0,     0,     0,   525,
4530:        0,     0,     0,     0,     0,     0,   526,     0,     0,     0,
4531:        0,     0,     0,  1348,   984,   527,     0,     0,     0,     0,
4532:        0,   528,     0,     0,     0,     0,     0,  1348,     0,     0,
4533:        0,  2970,     0,     0,     0,     0,     0,     0,     0,     0,
4534:        0,     0,     0,     0,     0,     0,   529,     0,     0,     0,
4535:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
4536:        0,     0,     0,     0,  1014,   817,   549,   818,   819,   820,
4537:      821,   822,     0,     0,  1348,     0,     0,     0,     0,     0,
4538:       94,    95,    96,    97,    98,    99,   100,   101,  1015,   102,
4539:      103,   104,     0,     0,     0,     0,   823,  1348,     0,   105,
4540:      106,     0,   107,   108,   109,  1016,   111,   112,   113,   114,
4541:      824,  1017,   825,   826,     0,   119,   120,   121,   122,   123,
4542:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4543:      131,   132,   133,   831,     0,  1018,     0,   136,   137,   138,
4544:      139,   140,   141,  1019,   143,   144,   145,  1348,   146,   147,
4545:      148,   149,   150,   151,     0,  1020,   153,   154,   155,   833,
4546:      834,   835,  1021,   837,   838,   839,   157,   158,   159,   160,
4547:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4548:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4549:      178,  1022,     0,   179,   180,   677,   182,   183,     0,   184,
4550:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4551:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4552:        0,   202,   203,   846,   205,     0,   206,     0,   207,  1023,
4553:        0,  1024,   210,   211,   212,  1025,   214,     0,   215,     0,
4554:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4555:      225,  1026,   227,   228,   229,   230,     0,   231,   232,   233,
4556:      234,   235,   236,     0,   237,  1027,   239,   240,   241,   242,
4557:      243,   244,   849,   850,     0,   851,     0,   248,  1028,  1029,
4558:      251,  1030,   253,   254,   255,   256,   257,     0,     0,   258,
4559:     1031,   260,  1032,     0,   262,   263,   264,   852,   853,   265,
4560:      266,   267,   268,   269,  1033,   271,   272,   273,   274,   275,
4561:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4562:      286,   287,   288,   854,  1034,   855,   292,   293,   294,   295,
4563:      856,   296,   297,  1035,   299,   857,   858,   301,   859,   303,
4564:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4565:        0,     0,   311,   312,  1036,   314,  1037,   861,   317,   318,
4566:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4567:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4568:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4569:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4570:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4571:      364,  1038,   366,   367,   368,   864,   370,   371,   372,   373,
4572:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4573:      383,   384,   385,   865,   386,   387,   388,   389,   390,  1039,
4574:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4575:      401,   402,   403,   404,   405,   406,  1040,   408,   867,   410,
4576:        0,   411,   412,     0,   413,  1041,   415,   416,   417,   418,
4577:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4578:      871,   872,   427,   428,  1042,   430,   431,   432,   433,   434,
4579:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4580:      441,   442,   443,   444,   445,   875,  1043,   447,  1044,   449,
4581:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4582:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4583:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4584:        0,     0,     0,     0,     0,     0,   877,   878,  1045,     0,
4585:        0,     0,     0,   880,     0,   881,  1046,     0,     0,     0,
4586:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4587:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4588:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
4589:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4590:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4591:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4592:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4593:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4594:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4595:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4596:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4597:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4598:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4599:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4600:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4601:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4602:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4603:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4604:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4605:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4606:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4607:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4608:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4609:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4610:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4611:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4612:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4613:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4614:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4615:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4616:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4617:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4618:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4619:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4620:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4621:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4622:      374,   375,   376,   377,   378,   379,   380,    26,   381,   382,
4623:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4624:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4625:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4626:        0,   411,   412,    31,   413,   414,   415,   416,   417,   418,
4627:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4628:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4629:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4630:      441,   442,   443,   444,   577,   875,     0,   447,   448,   449,
4631:      450,   451,   452,     0,     0,   453,     0,    34,   454,   455,
4632:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4633:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4634:        0,    35,     0,     0,     0,     0,   877,   878,     0,     0,
4635:        0,     0,     0,   880,     0,   881,  2826,     0,     0,     0,
4636:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4637:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4638:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
4639:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4640:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4641:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4642:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4643:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4644:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4645:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4646:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4647:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4648:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4649:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4650:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4651:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4652:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4653:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4654:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4655:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4656:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4657:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4658:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4659:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4660:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4661:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4662:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4663:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4664:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4665:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4666:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4667:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4668:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4669:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4670:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4671:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4672:      374,   375,   376,   377,   378,   379,   380,    26,   381,   382,
4673:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4674:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4675:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4676:        0,   411,   412,    31,   413,   414,   415,   416,   417,   418,
4677:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4678:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4679:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4680:      441,   442,   443,   444,   577,   875,     0,   447,   448,   449,
4681:      450,   451,   452,     0,     0,   453,     0,    34,   454,   455,
4682:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4683:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4684:        0,    35,     0,     0,     0,     0,   877,   878,     0,     0,
4685:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4686:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4687:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4688:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
4689:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4690:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4691:      824,   116,   825,   826,  1655,   119,   120,   121,   122,   123,
4692:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4693:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4694:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4695:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4696:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4697:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4698:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4699:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4700:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4701:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4702:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4703:     1656,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4704:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4705:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4706:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4707:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4708:      251,   252,   253,   254,   255,   256,   257,     0,  1657,   258,
4709:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4710:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4711:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4712:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4713:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4714:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4715:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4716:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4717:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4718:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4719:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4720:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4721:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4722:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4723:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4724:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4725:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4726:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4727:      419,     0,   868,   869,     0,  1658,   422,   423,   870,   425,
4728:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4729:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4730:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4731:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4732:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4733:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4734:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
4735:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4736:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4737:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4738:       94,    95,    96,    97,    98,    99,   100,   101,  -950,   102,
4739:      103,   104,     0,     0,     0,  -950,   823,     0,     0,   105,
4740:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4741:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4742:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4743:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4744:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4745:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4746:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4747:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4748:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4749:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4750:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4751:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4752:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4753:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4754:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4755:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4756:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4757:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4758:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4759:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4760:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4761:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4762:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4763:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4764:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4765:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4766:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4767:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4768:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4769:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4770:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4771:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4772:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4773:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4774:      392,   393,   866,   395,  -950,   396,   397,   398,   399,   400,
4775:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4776:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4777:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4778:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4779:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4780:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4781:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4782:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4783:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4784:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
4785:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4786:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4787:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4788:       94,    95,    96,    97,    98,    99,   100,   101,  1395,   102,
4789:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4790:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4791:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4792:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4793:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4794:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4795:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4796:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4797:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4798:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4799:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4800:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4801:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4802:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4803:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4804:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4805:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4806:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4807:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4808:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4809:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4810:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4811:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4812:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4813:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4814:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4815:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4816:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4817:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4818:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4819:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4820:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4821:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4822:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4823:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4824:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4825:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4826:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4827:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4828:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4829:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4830:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4831:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4832:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4833:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4834:        0,     0,     0,     0,     0,     0,   877,   878,  1396,     0,
4835:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4836:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4837:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4838:       94,    95,    96,    97,    98,    99,   100,   101,  2707,   102,
4839:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4840:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4841:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4842:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4843:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4844:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4845:      148,   149,   150,   151,     0,   152,   153,  2708,   155,   833,
4846:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4847:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4848:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4849:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4850:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4851:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4852:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4853:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4854:     2709,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4855:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4856:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4857:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4858:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4859:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4860:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4861:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4862:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4863:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4864:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4865:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4866:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4867:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4868:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4869:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4870:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4871:      364,   365,   366,   367,  2710,   864,   370,   371,   372,   373,
4872:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4873:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4874:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4875:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4876:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4877:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4878:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4879:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4880:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4881:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4882:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4883:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4884:        0,     0,     0,     0,     0,     0,   877,   878,  2711,     0,
4885:        0,     0,     0,   880,     0,  2712,     0,     0,     0,     0,
4886:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
4887:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4888:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
4889:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4890:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4891:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4892:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4893:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4894:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4895:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4896:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4897:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4898:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4899:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4900:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4901:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4902:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4903:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4904:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4905:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4906:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4907:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4908:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4909:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4910:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4911:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4912:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4913:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4914:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4915:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4916:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4917:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4918:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4919:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4920:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4921:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4922:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4923:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4924:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4925:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4926:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4927:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4928:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4929:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4930:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4931:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4932:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4933:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4934:        0,     0,     0,     0,     0,     0,   877,   878,   879,     0,
4935:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4936:      882,     0,   883,   884,    93,  1409,   549,   818,   819,   820,
4937:     1410,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4938:       94,    95,    96,    97,    98,    99,   100,   101,  1411,   102,
4939:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4940:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
4941:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
4942:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4943:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
4944:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
4945:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
4946:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
4947:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4948:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4949:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
4950:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
4951:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
4952:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
4953:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
4954:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
4955:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
4956:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
4957:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
4958:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
4959:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
4960:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
4961:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
4962:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
4963:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
4964:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
4965:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
4966:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
4967:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
4968:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
4969:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
4970:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
4971:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
4972:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
4973:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
4974:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
4975:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
4976:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
4977:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
4978:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
4979:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
4980:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
4981:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
4982:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
4983:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
4984:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
4985:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
4986:      882,     0,   883,   884,  1014,   817,   549,   818,   819,   820,
4987:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
4988:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
4989:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
4990:      106,     0,   107,   108,   109,  1016,   111,   112,   113,   114,
4991:      824,  1017,   825,   826,     0,   119,   120,   121,   122,   123,
4992:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
4993:      131,   132,   133,   831,     0,  1018,     0,   136,   137,   138,
4994:      139,   140,   141,  1019,   143,   144,   145,     0,   146,   147,
4995:      148,   149,   150,   151,     0,  1020,   153,   154,   155,   833,
4996:      834,   835,  1021,   837,   838,   839,   157,   158,   159,   160,
4997:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
4998:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
4999:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5000:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5001:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5002:        0,   202,   203,   846,   205,     0,   206,     0,   207,  1023,
5003:        0,  1024,   210,   211,   212,  1025,   214,     0,   215,     0,
5004:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5005:      225,  1026,   227,   228,   229,   230,     0,   231,   232,   233,
5006:      234,   235,   236,     0,   237,  1027,   239,   240,   241,   242,
5007:      243,   244,   849,   850,     0,   851,     0,   248,  1028,  1029,
5008:      251,  1030,   253,   254,   255,   256,   257,     0,     0,   258,
5009:     1031,   260,  1032,     0,   262,   263,   264,   852,   853,   265,
5010:      266,   267,   268,   269,  1033,   271,   272,   273,   274,   275,
5011:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5012:      286,   287,   288,   854,  1034,   855,   292,   293,   294,   295,
5013:      856,   296,   297,  1035,   299,   857,   858,   301,   859,   303,
5014:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5015:        0,     0,   311,   312,  1036,   314,  1037,   861,   317,   318,
5016:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5017:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5018:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5019:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5020:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5021:      364,  1038,   366,   367,   368,   864,   370,   371,   372,   373,
5022:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5023:      383,   384,   385,   865,   386,   387,   388,   389,   390,  1039,
5024:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5025:      401,   402,   403,   404,   405,   406,  1040,   408,   867,   410,
5026:        0,   411,   412,     0,   413,  1041,   415,   416,   417,   418,
5027:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5028:      871,   872,   427,   428,  1042,   430,   431,   432,   433,   434,
5029:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5030:      441,   442,   443,   444,   445,   875,     0,   447,  1044,   449,
5031:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5032:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5033:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5034:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5035:        0,     0,     0,   880,     0,   881,  1528,     0,     0,     0,
5036:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5037:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5038:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5039:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5040:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5041:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5042:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5043:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5044:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5045:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5046:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5047:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5048:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5049:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5050:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5051:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5052:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5053:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5054:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5055:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5056:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5057:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5058:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5059:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5060:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5061:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5062:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5063:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5064:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5065:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5066:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5067:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5068:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5069:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5070:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5071:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5072:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5073:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5074:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5075:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5076:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5077:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5078:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5079:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5080:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5081:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5082:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5083:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5084:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5085:        0,     0,     0,   880,     0,   881,  1649,     0,     0,     0,
5086:      882,     0,   883,   884,  1014,   817,   549,   818,   819,   820,
5087:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5088:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5089:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5090:      106,     0,   107,   108,   109,  1016,   111,   112,   113,   114,
5091:      824,  1017,   825,   826,     0,   119,   120,   121,   122,   123,
5092:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5093:      131,   132,   133,   831,     0,  1018,     0,   136,   137,   138,
5094:      139,   140,   141,  1019,   143,   144,   145,     0,   146,   147,
5095:      148,   149,   150,   151,     0,  1020,   153,   154,   155,   833,
5096:      834,   835,  1021,   837,   838,   839,   157,   158,   159,   160,
5097:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5098:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5099:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5100:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5101:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5102:        0,   202,   203,   846,   205,     0,   206,     0,   207,  1023,
5103:        0,  1024,   210,   211,   212,  1025,   214,     0,   215,     0,
5104:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5105:      225,  1026,   227,   228,   229,   230,     0,   231,   232,   233,
5106:      234,   235,   236,     0,   237,  1027,   239,   240,   241,   242,
5107:      243,   244,   849,   850,     0,   851,     0,   248,  1028,  1029,
5108:      251,  1030,   253,   254,   255,   256,   257,     0,     0,   258,
5109:     1031,   260,  1032,     0,   262,   263,   264,   852,   853,   265,
5110:      266,   267,   268,   269,  1033,   271,   272,   273,   274,   275,
5111:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5112:      286,   287,   288,   854,  1034,   855,   292,   293,   294,   295,
5113:      856,   296,   297,  1035,   299,   857,   858,   301,   859,   303,
5114:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5115:        0,     0,   311,   312,  1036,   314,  1037,   861,   317,   318,
5116:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5117:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5118:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5119:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5120:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5121:      364,  1038,   366,   367,   368,   864,   370,   371,   372,   373,
5122:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5123:      383,   384,   385,   865,   386,   387,   388,   389,   390,  1039,
5124:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5125:      401,   402,   403,   404,   405,   406,  1040,   408,   867,   410,
5126:        0,   411,   412,     0,   413,  1041,   415,   416,   417,   418,
5127:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5128:      871,   872,   427,   428,  1042,   430,   431,   432,   433,   434,
5129:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5130:      441,   442,   443,   444,   445,   875,  1870,   447,  1044,   449,
5131:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5132:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5133:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5134:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5135:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5136:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5137:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5138:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5139:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5140:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5141:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5142:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5143:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5144:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5145:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5146:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5147:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5148:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5149:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5150:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5151:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5152:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5153:     1656,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5154:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5155:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5156:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5157:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5158:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5159:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5160:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5161:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5162:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5163:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5164:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5165:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5166:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5167:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5168:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5169:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5170:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5171:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5172:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5173:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5174:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5175:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5176:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5177:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5178:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5179:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5180:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5181:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5182:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5183:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5184:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5185:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5186:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5187:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5188:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5189:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5190:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5191:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5192:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5193:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5194:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5195:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5196:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5197:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5198:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5199:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5200:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5201:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5202:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5203:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5204:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5205:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5206:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5207:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5208:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5209:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5210:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5211:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5212:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5213:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5214:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5215:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5216:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5217:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5218:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5219:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5220:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5221:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5222:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5223:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5224:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5225:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5226:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5227:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5228:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5229:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5230:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5231:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5232:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5233:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5234:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5235:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5236:      882,     0,   883,   884,  1014,   817,   549,   818,   819,   820,
5237:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5238:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5239:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5240:      106,     0,   107,   108,   109,  1016,   111,   112,   113,   114,
5241:      824,  1017,   825,   826,     0,   119,   120,   121,   122,   123,
5242:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5243:      131,   132,   133,   831,     0,  1018,     0,   136,   137,   138,
5244:      139,   140,   141,  1019,   143,   144,   145,     0,   146,   147,
5245:      148,   149,   150,   151,     0,  1020,   153,   154,   155,   833,
5246:      834,   835,  1021,   837,   838,   839,   157,   158,   159,   160,
5247:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5248:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5249:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5250:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5251:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5252:        0,   202,   203,   846,   205,     0,   206,     0,   207,  1023,
5253:        0,  1024,   210,   211,   212,  1025,   214,     0,   215,     0,
5254:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5255:      225,  1026,   227,   228,   229,   230,     0,   231,   232,   233,
5256:      234,   235,   236,     0,   237,  1027,   239,   240,   241,   242,
5257:      243,   244,   849,   850,     0,   851,     0,   248,  1028,  1029,
5258:      251,  1030,   253,   254,   255,   256,   257,     0,     0,   258,
5259:     1031,   260,  1032,     0,   262,   263,   264,   852,   853,   265,
5260:      266,   267,   268,   269,  1033,   271,   272,   273,   274,   275,
5261:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5262:      286,   287,   288,   854,  1034,   855,   292,   293,   294,   295,
5263:      856,   296,   297,  1035,   299,   857,   858,   301,   859,   303,
5264:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5265:        0,     0,   311,   312,  1036,   314,  1037,   861,   317,   318,
5266:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5267:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5268:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5269:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5270:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5271:      364,  1038,   366,   367,   368,   864,   370,   371,   372,   373,
5272:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5273:      383,   384,   385,   865,   386,   387,   388,   389,   390,  1039,
5274:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5275:      401,   402,   403,   404,   405,   406,  1040,   408,   867,   410,
5276:        0,   411,   412,     0,   413,  1041,   415,   416,   417,   418,
5277:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5278:      871,   872,   427,   428,  1042,   430,   431,   432,   433,   434,
5279:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5280:      441,   442,   443,   444,   445,   875,     0,   447,  1044,   449,
5281:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5282:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5283:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5284:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5285:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5286:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5287:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5288:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5289:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5290:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5291:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5292:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5293:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5294:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5295:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5296:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5297:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5298:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5299:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5300:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5301:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5302:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5303:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5304:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5305:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5306:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5307:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5308:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5309:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5310:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5311:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5312:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5313:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5314:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5315:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5316:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5317:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5318:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5319:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5320:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5321:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5322:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5323:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5324:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5325:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5326:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5327:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5328:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5329:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5330:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5331:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5332:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5333:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5334:        0,     0,     0,     0,     0,     0,  1414,  1415,     0,     0,
5335:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5336:      882,     0,   883,   884,    93,  1795,   549,   818,   819,   820,
5337:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5338:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5339:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5340:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5341:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5342:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5343:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5344:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5345:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5346:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5347:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5348:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5349:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5350:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5351:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5352:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5353:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5354:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5355:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5356:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5357:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5358:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5359:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5360:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5361:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5362:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5363:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5364:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5365:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5366:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5367:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5368:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5369:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5370:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5371:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5372:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5373:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5374:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5375:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5376:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5377:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5378:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5379:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5380:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5381:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5382:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5383:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5384:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5385:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5386:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5387:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5388:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5389:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5390:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5391:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5392:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5393:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5394:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5395:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5396:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5397:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5398:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5399:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5400:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5401:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5402:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5403:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5404:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5405:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5406:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5407:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5408:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5409:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5410:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5411:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5412:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5413:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5414:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5415:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5416:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5417:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5418:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5419:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5420:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5421:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5422:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5423:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5424:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5425:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5426:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5427:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5428:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5429:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5430:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5431:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5432:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5433:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5434:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5435:        0,     0,     0,   880,     0,  2028,     0,     0,     0,     0,
5436:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5437:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5438:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5439:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5440:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5441:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5442:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5443:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5444:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5445:      148,   149,   150,   151,     0,   152,   153,  2708,   155,   833,
5446:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5447:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5448:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5449:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5450:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5451:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5452:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5453:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5454:     2709,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5455:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5456:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5457:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5458:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5459:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5460:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5461:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5462:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5463:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5464:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5465:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5466:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5467:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5468:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5469:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5470:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5471:      364,   365,   366,   367,  2710,   864,   370,   371,   372,   373,
5472:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5473:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5474:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5475:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5476:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5477:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5478:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5479:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5480:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5481:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5482:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5483:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5484:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5485:        0,     0,     0,   880,     0,  2712,     0,     0,     0,     0,
5486:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5487:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5488:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5489:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5490:      106,     0,   107,   108,   109,   110,   111,   112,   113,  2967,
5491:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5492:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5493:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5494:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5495:      148,   149,   150,   151,     0,   152,   153,   154,  2968,   833,
5496:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5497:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5498:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5499:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5500:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5501:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5502:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5503:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5504:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5505:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5506:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5507:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5508:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5509:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5510:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5511:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5512:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5513:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5514:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5515:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5516:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5517:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5518:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5519:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5520:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5521:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5522:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5523:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5524:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5525:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5526:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5527:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5528:      871,   872,   427,   428,   873,   430,   431,  2969,   433,   434,
5529:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5530:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5531:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5532:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5533:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5534:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5535:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5536:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5537:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5538:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5539:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5540:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5541:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5542:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5543:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5544:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5545:      148,   149,   150,   151,     0,   152,   153,   154,  2968,   833,
5546:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5547:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5548:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5549:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5550:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5551:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5552:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5553:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5554:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5555:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5556:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5557:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5558:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5559:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5560:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5561:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5562:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5563:      856,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5564:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5565:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5566:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5567:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5568:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5569:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5570:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5571:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5572:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5573:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5574:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5575:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5576:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5577:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5578:      871,   872,   427,   428,   873,   430,   431,  2969,   433,   434,
5579:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5580:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5581:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5582:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5583:      466,   467,   468,   469,   470,   471,   472,   473,   474,   876,
5584:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5585:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5586:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5587:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5588:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5589:      103,   104,     0,     0,     0,     0,   823,     0,     0,   105,
5590:      106,     0,   107,   108,   109,   110,   111,   112,   113, -1756,
5591:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5592:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5593:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5594:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5595:      148,   149,   150,   151,     0,   152,   153,   154,  2968,   833,
5596:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5597:      161,   162,   163,   840,   841,   166,   842,   167,     0,   168,
5598:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5599:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5600:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5601:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5602:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5603:        0,   209,   210,   211,   212, -1756,   214,     0,   215,     0,
5604:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5605:      225, -1756,   227,   228,   229,   230,     0,   231,   232,   233,
5606:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5607:      243,   244,   849,   850,     0,   851,     0,   248,     0,     0,
5608:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5609:      259,   260, -1756,     0,   262,   263,   264,   852,   853,   265,
5610:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5611:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5612:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5613:        0,   296,   297,     0,   299,   857,   858,   301,   859,   303,
5614:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5615:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5616:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5617:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5618:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5619:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5620:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5621:      364,   365,   366,   367,   368,   864,   370,   371,   372,   373,
5622:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5623:      383,   384,   385,   865,   386,   387,   388,   389,   390, -1756,
5624:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5625:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5626:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5627:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5628:      871,   872,   427,   428,   873,   430,   431,  2969,   433,   434,
5629:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5630:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5631:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5632:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5633:      466,   467,   468,   469,   470,   471,   472,   473,   474, -1756,
5634:        0,     0,     0,     0,     0,     0,   877,   878,     0,     0,
5635:        0,     0,     0,   880,     0,   881,     0,     0,     0,     0,
5636:      882,     0,   883,   884,    93,   817,   549,   818,   819,   820,
5637:      821,   822,     0,     0,     0,     0,     0,     0,     0,     0,
5638:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5639:      103,   104,     0,     0,     0,     0,     0,     0,     0,   105,
5640:      106,     0,   107,   108,   109,   110,   111,   112,   113,   114,
5641:      824,   116,   825,   826,     0,   119,   120,   121,   122,   123,
5642:      124,   827,   828,   125,   126,   829,   830,   129,     0,   130,
5643:      131,   132,   133,   831,     0,   832,     0,   136,   137,   138,
5644:      139,   140,   141,   142,   143,   144,   145,     0,   146,   147,
5645:      148,   149,   150,   151,     0,   152,   153,   154,   155,   833,
5646:      834,   835,   836,   837,   838,   839,   157,   158,   159,   160,
5647:      161,   162,   163,   840,   841,   166,     0,   167,     0,   168,
5648:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5649:      178,     0,     0,   179,   180,   677,   182,   183,     0,   184,
5650:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5651:      193,   843,   195,   196,   197,   198,   199,   844,   845,   201,
5652:        0,   202,   203,   846,   205,     0,   206,     0,   207,   208,
5653:        0,   209,   210,   211,   212,   213,   214,     0,   215,     0,
5654:      847,   848,   218,     0,   219,   220,   221,   222,   223,   224,
5655:      225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
5656:      234,   235,   236,     0,   237,   238,   239,   240,   241,   242,
5657:      243,   244,   849,   850,     0,   851,     0,   248,   249,   250,
5658:      251,   252,   253,   254,   255,   256,   257,     0,     0,   258,
5659:      259,   260,   261,     0,   262,   263,   264,   852,   853,   265,
5660:      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
5661:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5662:      286,   287,   288,   854,   290,   855,   292,   293,   294,   295,
5663:        0,   296,   297,   298,   299,   857,   858,   301,   859,   303,
5664:      304,   305,     0,   306,   307,     0,     0,   860,   309,   310,
5665:        0,     0,   311,   312,   313,   314,   315,   861,   317,   318,
5666:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5667:      328,   862,   330,   331,   332,   333,   334,   335,     0,   336,
5668:      337,   338,   339,   340,   341,     0,   342,   343,   344,   863,
5669:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5670:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5671:      364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
5672:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5673:      383,   384,   385,   865,   386,   387,   388,   389,   390,   391,
5674:      392,   393,   866,   395,     0,   396,   397,   398,   399,   400,
5675:      401,   402,   403,   404,   405,   406,   407,   408,   867,   410,
5676:        0,   411,   412,     0,   413,   414,   415,   416,   417,   418,
5677:      419,     0,   868,   869,     0,     0,   422,   423,   870,   425,
5678:      871,   872,   427,   428,   873,   430,   431,   432,   433,   434,
5679:        0,     0,   435,   436,   437,   438,   439,   874,     0,   440,
5680:      441,   442,   443,   444,   445,   875,     0,   447,   448,   449,
5681:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5682:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5683:      466,   467,   468,   469,   470,   471,   472,   473,   474,     0,
5684:        0,     0,     0,     0,     0,     0,  1641,  1642,     0,     0,
5685:       93,   817,   549,   818,   819,  1643,   821,   822,     0,     0,
5686:        0,     0,   883,   884,     0,     0,    94,    95,    96,    97,
5687:       98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
5688:        0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
5689:      109,   110,   111,   112,   113,   114,   824,   116,   825,   826,
5690:        0,   119,   120,   121,   122,   123,   124,   827,   828,   125,
5691:      126,   829,   830,   129,     0,   130,   131,   132,   133,   831,
5692:        0,   832,     0,   136,   137,   138,   139,   140,   141,   142,
5693:      143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
5694:        0,   152,   153,   154,   155,   833,   834,   835,   836,   837,
5695:      838,   839,   157,   158,   159,   160,   161,   162,   163,   840,
5696:      841,   166,     0,   167,     0,   168,   169,   170,   171,   172,
5697:      173,     0,   174,   175,   176,   177,   178,     0,     0,   179,
5698:      180,   677,   182,   183,     0,   184,   185,   186,     0,   187,
5699:      188,   189,     0,   190,   191,   192,   193,   843,   195,   196,
5700:      197,   198,   199,   844,   845,   201,     0,   202,   203,   846,
5701:      205,     0,   206,     0,   207,   208,     0,   209,   210,   211,
5702:      212,   213,   214,     0,   215,     0,   847,   848,   218,     0,
5703:      219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
5704:      229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
5705:      237,   238,   239,   240,   241,   242,   243,   244,   849,   850,
5706:        0,   851,     0,   248,   249,   250,   251,   252,   253,   254,
5707:      255,   256,   257,     0,     0,   258,   259,   260,   261,     0,
5708:      262,   263,   264,   852,   853,   265,   266,   267,   268,   269,
5709:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5710:      280,   281,   282,   283,   284,   285,   286,   287,   288,   854,
5711:      290,   855,   292,   293,   294,   295,     0,   296,   297,   298,
5712:      299,   857,   858,   301,   859,   303,   304,   305,     0,   306,
5713:      307,     0,     0,   308,   309,   310,     0,     0,   311,   312,
5714:      313,   314,   315,   861,   317,   318,   319,   320,   321,   322,
5715:      323,   324,   325,   326,     0,   327,   328,   862,   330,   331,
5716:      332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
5717:      341,     0,   342,   343,   344,   863,   346,   347,   348,   349,
5718:        0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
5719:      359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
5720:      368,  1781,  1782,   371,   372,   373,   374,   375,   376,   377,
5721:      378,   379,   380,     0,   381,   382,   383,   384,   385,   865,
5722:      386,   387,   388,   389,   390,   391,   392,   393,   866,   395,
5723:        0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
5724:      405,   406,   407,   408,   867,   410,     0,   411,   412,     0,
5725:      413,   414,   415,   416,   417,   418,   419,     0,   868,   869,
5726:        0,     0,   422,   423,   870,   425,   871,   872,   427,   428,
5727:      873,   430,   431,   432,   433,   434,     0,     0,   435,   436,
5728:      437,   438,   439,   874,     0,   440,   441,   442,   443,   444,
5729:      445,   875,     0,   447,   448,   449,   450,   451,   452,     0,
5730:        0,   453,     0,     0,   454,   455,   456,   457,   458,   459,
5731:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
5732:      470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
5733:        0,     0,  1783,  1784,     0,     0,     0,     0,     0,     0,
5734:        0,  1643,     0,     0,     0,     0,     0,     0,   883,   884,
5735:       93,   817,   549,   818,   819,   820,   821,   822,     0,     0,
5736:        0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
5737:       98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
5738:        0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
5739:      109,   110,   111,   112,   113,   114,   824,   116,   825,   826,
5740:        0,   119,   120,   121,   122,   123,   124,   827,   828,   125,
5741:      126,   829,   830,   129,     0,   130,   131,   132,   133,   831,
5742:        0,   832,     0,   136,   137,   138,   139,   140,   141,   142,
5743:      143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
5744:        0,   152,   153,   154,   155,   833,   834,   835,   836,   837,
5745:      838,   839,   157,   158,   159,   160,   161,   162,   163,   840,
5746:      841,   166,     0,   167,     0,   168,   169,   170,   171,   172,
5747:      173,     0,   174,   175,   176,   177,   178,     0,     0,   179,
5748:      180,   677,   182,   183,     0,   184,   185,   186,     0,   187,
5749:      188,   189,     0,   190,   191,   192,   193,   843,   195,   196,
5750:      197,   198,   199,   844,   845,   201,     0,   202,   203,   846,
5751:      205,     0,   206,     0,   207,   208,     0,   209,   210,   211,
5752:      212,   213,   214,     0,   215,     0,   847,   848,   218,     0,
5753:      219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
5754:      229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
5755:      237,   238,   239,   240,   241,   242,   243,   244,   849,   850,
5756:        0,   851,     0,   248,     0,   250,   251,   252,   253,   254,
5757:      255,   256,   257,     0,     0,   258,   259,   260,   261,     0,
5758:      262,   263,   264,   852,   853,   265,   266,   267,   268,   269,
5759:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5760:      280,   281,   282,   283,   284,   285,   286,   287,   288,   854,
5761:      290,   855,   292,   293,   294,   295,     0,   296,   297,   298,
5762:      299,   857,   858,   301,   859,   303,   304,   305,     0,   306,
5763:      307,     0,     0,   860,   309,   310,     0,     0,   311,   312,
5764:      313,   314,   315,   861,   317,   318,   319,   320,   321,   322,
5765:      323,   324,   325,   326,     0,   327,   328,   862,   330,   331,
5766:      332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
5767:      341,     0,   342,   343,   344,   863,   346,   347,   348,   349,
5768:        0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
5769:      359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
5770:      368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
5771:      378,   379,   380,     0,   381,   382,   383,   384,   385,   865,
5772:      386,   387,   388,   389,   390,   391,   392,   393,   866,   395,
5773:        0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
5774:      405,   406,   407,   408,   867,   410,     0,   411,   412,     0,
5775:      413,   414,   415,   416,   417,   418,   419,     0,   868,   869,
5776:        0,     0,   422,   423,   870,   425,   871,   872,   427,   428,
5777:      873,   430,   431,   432,   433,   434,     0,     0,   435,   436,
5778:      437,   438,   439,   874,     0,   440,   441,   442,   443,   444,
5779:      445,   875,     0,   447,   448,   449,   450,   451,   452,     0,
5780:        0,   453,     0,     0,   454,   455,   456,   457,   458,   459,
5781:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
5782:      470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
5783:        0,     0,  1641,  1642,     0,     0,     0,     0,     0,     0,
5784:        0,  1643,     0,     0,     0,     0,     0,     0,   883,   884,
5785:       93,   817,   549,   818,   819,   820,   821,   822,     0,     0,
5786:        0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
5787:       98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
5788:        0,     0,   823,     0,     0,   105,   106,     0,   107,   108,
5789:      109,   110,   111,   112,   113,     0,   824,   116,   825,   826,
5790:        0,   119,   120,   121,   122,   123,   124,   827,   828,   125,
5791:      126,   829,   830,   129,     0,   130,   131,   132,   133,   831,
5792:        0,   832,     0,   136,   137,   138,   139,   140,   141,   142,
5793:      143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
5794:        0,   152,   153,   154,   155,   833,   834,   835,   836,   837,
5795:      838,   839,   157,   158,   159,   160,   161,   162,   163,   840,
5796:      841,   166,   842,   167,     0,   168,   169,   170,   171,   172,
5797:      173,     0,   174,   175,   176,   177,   178,     0,     0,   179,
5798:      180,   677,   182,   183,     0,   184,   185,   186,     0,   187,
5799:        0,   189,     0,   190,   191,   192,   193,   843,   195,   196,
5800:      197,   198,   199,   844,   845,   201,     0,   202,   203,   846,
5801:      205,     0,   206,     0,   207,   208,     0,   209,   210,   211,
5802:      212,     0,   214,     0,   215,     0,   847,   848,   218,     0,
5803:      219,   220,   221,   222,   223,   224,   225,     0,   227,   228,
5804:      229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
5805:      237,   238,   239,   240,   241,   242,   243,   244,   849,   850,
5806:        0,   851,     0,   248,     0,     0,   251,   252,   253,   254,
5807:      255,   256,   257,     0,     0,   258,   259,   260,     0,     0,
5808:      262,   263,   264,   852,   853,   265,   266,   267,   268,   269,
5809:      270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
5810:      280,   281,   282,   283,   284,   285,   286,   287,   288,   854,
5811:      290,   855,   292,   293,   294,   295,     0,   296,   297,     0,
5812:      299,   857,   858,   301,   859,   303,   304,   305,     0,   306,
5813:      307,     0,     0,   860,   309,   310,     0,     0,   311,   312,
5814:      313,   314,   315,   861,   317,   318,   319,   320,   321,   322,
5815:      323,   324,   325,   326,     0,   327,   328,   862,   330,   331,
5816:      332,   333,   334,   335,     0,   336,   337,   338,   339,   340,
5817:      341,     0,   342,   343,   344,   863,   346,   347,   348,   349,
5818:        0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
5819:      359,   360,   361,   362,     0,   363,   364,   365,   366,   367,
5820:      368,   864,   370,   371,   372,   373,   374,   375,   376,   377,
5821:      378,   379,   380,     0,   381,   382,   383,   384,   385,   865,
5822:      386,   387,   388,   389,   390,     0,   392,   393,   866,   395,
5823:        0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
5824:      405,   406,   407,   408,   867,   410,     0,   411,   412,     0,
5825:      413,   414,   415,   416,   417,   418,   419,     0,   868,   869,
5826:        0,     0,   422,   423,   870,   425,   871,   872,   427,   428,
5827:      873,   430,   431,   432,   433,   434,     0,     0,   435,   436,
5828:      437,   438,   439,   874,     0,   440,   441,   442,   443,   444,
5829:      445,   875,     0,   447,   448,   449,   450,   451,   452,     0,
5830:        0,   453,     0,     0,   454,   455,   456,   457,   458,   459,
5831:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
5832:      470,   471,   472,   473,   474,     0,     0,     0,     0,     0,
5833:        0,     0,   877,   878,   500,     0,     0,     0,     0,   880,
5834:        0,   881,     0,     0,     0,     0,   882,     0,   883,   884,
5835:       94,    95,    96,    97,    98,    99,   100,   101,     0,   102,
5836:      103,   104,     0,     0,     0,     0,     0,  2330,     0,   105,
5837:      106,     0,   107,   108,   109,     0,   111,   112,   113,   114,
5838:      115,     0,   117,   118,     0,   119,   120,   121,   122,   123,
5839:      124,     0,     0,   125,   126,   127,   128,   129,     0,   130,
5840:      131,   132,   133,   134,     0,     0,     0,   136,   137,   138,
5841:      139,   140,   141,     0,   143,   144,   145,     0,   146,   147,
5842:      148,   149,   150,   151,     0,  -623,   153,   154,   155,     0,
5843:        0,     0,     0,     0,     0,     0,   157,   158,   159,   160,
5844:      161,   162,   163,   164,   165,   166,     0,   167,     0,   168,
5845:      169,   170,   171,   172,   173,     0,   174,   175,   176,   177,
5846:      178,     0,     0,   179,   180,   181,   182,   183,     0,   184,
5847:      185,   186,     0,   187,   188,   189,     0,   190,   191,   192,
5848:      193,   194,   195,   196,   197,   198,   199,   200,     0,   201,
5849:        0,   202,   203,   204,   205,     0,   206,     0,   207,     0,
5850:        0,  -623,   210,   211,   212,     0,   214,     0,   215,     0,
5851:      216,   217,   218,     0,   219,   220,   221,   222,   223,   224,
5852:      225,     0,   227,   228,   229,   230,     0,   231,   232,   233,
5853:      234,   235,   236,     0,   237,  -623,   239,   240,   241,   242,
5854:      243,   244,   245,   246,     0,   247,     0,   248,     0,     0,
5855:      251,  -623,   253,   254,   255,   256,   257,     0,     0,   258,
5856:     -623,   260,     0,     0,   262,   263,   264,     0,     0,   265,
5857:      266,   267,   268,   269,   502,   271,   272,   273,   274,   275,
5858:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
5859:      286,   287,   288,   289,  -623,   291,   292,   293,   294,   295,
5860:        0,   296,   297,     0,   299,     0,   300,   301,   302,   303,
5861:      304,   305,     0,   306,   307,     0,     0,   308,   309,   310,
5862:        0,     0,   311,   312,     0,   314,     0,   316,   317,   318,
5863:      319,   320,   321,   322,   323,   324,   325,   326,     0,   327,
5864:      328,   329,   330,   331,   332,   333,   334,   335,     0,   336,
5865:      337,   338,   339,   340,   341,     0,   342,   343,   344,   345,
5866:      346,   347,   348,   349,     0,   350,   351,   352,   353,   354,
5867:      355,   356,   357,   358,   359,   360,   361,   362,     0,   363,
5868:      364,  -623,   366,   367,   368,   369,   370,   371,   372,   373,
5869:      374,   375,   376,   377,   378,   379,   380,     0,   381,   382,
5870:      383,   384,   385,     0,   386,   387,   388,   389,   390,     0,
5871:      392,   393,   394,   395,     0,   396,   397,   398,   399,   400,
5872:      401,   402,   403,   404,   405,   406,   504,   408,   409,   410,
5873:        0,   411,   412,     0,   413,  -623,   415,   416,   417,   418,
5874:      419,     0,   420,   421,     0,     0,   422,   423,   424,   425,
5875:      426,     0,   427,   428,   429,   430,   431,   432,   433,   434,
5876:        0,     0,   435,   436,   437,   438,   439,     0,     0,   440,
5877:      441,   442,   443,   444,   445,   446,     0,   447,     0,   449,
5878:      450,   451,   452,     0,     0,   453,     0,     0,   454,   455,
5879:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
5880:      466,   467,   468,   469,   470,   471,   472,   473,   474,     0,
5881:        0,    93,     0,   581,     0,     0,     0,     0,     0,     0,
5882:        0,     0,     0,     0,     0,     0,   946,    94,    95,    96,
5883:       97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
5884:        0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
5885:      108,   109,   110,   111,   112,   113,   114,   115,   116,   117,
5886:      118,     0,   119,   120,   121,   122,   123,   124,     0,   828,
5887:      125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
5888:      831,     0,   832,     0,   136,   137,   138,   139,   140,   141,
5889:      142,   143,   144,   145,     0,   146,   147,   148,   149,   150,
5890:      151,     0,   152,   153,   154,   155,   833,   834,   835,   836,
5891:      837,   838,   839,   157,   158,   159,   160,   161,   162,   163,
5892:      164,   165,   166,     0,   167,     0,   168,   169,   170,   171,
5893:      172,   173,     0,   174,   175,   176,   177,   178,     0,     0,
5894:      179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
5895:      187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
5896:      196,   197,   198,   199,   844,     0,   201,     0,   202,   203,
5897:      204,   205,     0,   206,     0,   207,   208,     0,   209,   210,
5898:      211,   212,   213,   214,     0,   215,     0,   216,   217,   218,
5899:        0,   219,   220,   221,   222,   223,   224,   225,   226,   227,
5900:      228,   229,   230,     0,   231,   232,   233,   234,   235,   236,
5901:        0,   237,   238,   239,   240,   241,   242,   243,   244,   245,
5902:      246,     0,   247,     0,   248,   249,   250,   251,   252,   253,
5903:      254,   255,   256,   257,  2074,     0,   258,   259,   260,   261,
5904:        0,   262,   263,   264,   852,   853,   265,   266,   267,   268,
5905:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
5906:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
5907:      289,   290,   291,   292,   293,   294,   295,     0,   296,   297,
5908:      298,   299,     0,   858,   301,   302,   303,   304,   305,     0,
5909:      306,   307,     0,   582,   308,   309,   310,     0,     0,   311,
5910:      312,   313,   314,   315,   861,   317,   318,   319,   320,   321,
5911:      322,   323,   324,   325,   326,     0,   327,   328,   862,   330,
5912:      331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
5913:      340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
5914:      349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
5915:      358,   359,   360,   361,   362,     0,   363,   364,   365,   366,
5916:      367,   368,   369,  2075,   371,   372,   373,   374,   375,   376,
5917:      377,   378,   379,   380,    26,   381,   382,   383,   384,   385,
5918:      865,   386,   387,   388,   389,   390,   391,   392,   393,   394,
5919:      395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
5920:      404,   405,   406,   407,   408,   867,   410,     0,   411,   412,
5921:       31,   413,   414,   415,   416,   417,   418,   419,     0,   420,
5922:      421,     0,     0,   422,   423,   870,   425,   871,     0,   427,
5923:      428,   873,   430,   431,   432,   433,   434,     0,     0,   435,
5924:      436,   437,   438,   439,   874,     0,   440,   441,   442,   443,
5925:      444,   577,   446,     0,   447,   448,   449,   450,   451,   452,
5926:        0,     0,   453,     0,    34,   454,   455,   456,   457,   458,
5927:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
5928:      469,   470,   471,   472,   473,   474,     0,    93,    35,   581,
5929:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
5930:        0,     0,  2076,    94,    95,    96,    97,    98,    99,   100,
5931:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
5932:        0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
5933:      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
5934:      121,   122,   123,   124,     0,   828,   125,   126,   127,   128,
5935:      129,     0,   130,   131,   132,   133,   831,     0,   832,     0,
5936:      136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
5937:        0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
5938:      154,   155,   833,   834,   835,   836,   837,   838,   839,   157,
5939:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
5940:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
5941:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
5942:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
5943:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
5944:      844,     0,   201,     0,   202,   203,   204,   205,     0,   206,
5945:        0,   207,   208,     0,   209,   210,   211,   212,   213,   214,
5946:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
5947:      222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
5948:      231,   232,   233,   234,   235,   236,     0,   237,   238,   239,
5949:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
5950:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
5951:     2074,     0,   258,   259,   260,   261,     0,   262,   263,   264,
5952:      852,   853,   265,   266,   267,   268,   269,   270,   271,   272,
5953:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
5954:      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
5955:      293,   294,   295,     0,   296,   297,   298,   299,     0,   858,
5956:      301,   302,   303,   304,   305,     0,   306,   307,     0,   582,
5957:      308,   309,   310,     0,     0,   311,   312,   313,   314,   315,
5958:      861,   317,   318,   319,   320,   321,   322,   323,   324,   325,
5959:      326,     0,   327,   328,   862,   330,   331,   332,   333,   334,
5960:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
5961:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
5962:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
5963:      362,     0,   363,   364,   365,   366,   367,   368,   369,  2075,
5964:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
5965:        0,   381,   382,   383,   384,   385,   865,   386,   387,   388,
5966:      389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
5967:      398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
5968:      408,   867,   410,     0,   411,   412,     0,   413,   414,   415,
5969:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
5970:      423,   870,   425,   871,     0,   427,   428,   873,   430,   431,
5971:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
5972:      874,     0,   440,   441,   442,   443,   444,   445,   446,     0,
5973:      447,   448,   449,   450,   451,   452,     0,     0,   453,     0,
5974:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
5975:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
5976:      473,   474,     0,    93,     0,     0,     0,     0,     0,     0,
5977:        0,     0,     0,     0,     0,     0,     0,     0,  2076,    94,
5978:       95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
5979:      104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
5980:        0,   107,   108,   109,   110,   111,   112,   113,   114,   115,
5981:      116,   117,   118,     0,   119,   120,   121,   122,   123,   124,
5982:        0,   828,   125,   126,   127,   128,   129,     0,   130,   131,
5983:      132,   133,   831,     0,   832,     0,   136,   137,   138,   139,
5984:      140,   141,   142,   143,   144,   145,     0,   146,   147,   148,
5985:      149,   150,   151,     0,   152,   153,   154,   155,   833,   834,
5986:      835,   836,   837,   838,   839,   157,   158,   159,   160,   161,
5987:      162,   163,   164,   165,   166,     0,   167,     0,   168,   169,
5988:      170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
5989:        0,     0,   179,   180,   181,   182,   183,     0,   184,   185,
5990:      186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
5991:      194,   195,   196,   197,   198,   199,   844,     0,   201,     0,
5992:      202,   203,   204,   205,     0,   206,     0,   207,   208,     0,
5993:      209,   210,   211,   212,   213,   214,     0,   215,     0,   216,
5994:      217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
5995:      226,   227,   228,   229,   230,     0,   231,   232,   233,   234,
5996:      235,   236,     0,   237,   238,   239,   240,   241,   242,   243,
5997:      244,   245,   246,     0,   247,     0,   248,   249,   250,   251,
5998:      252,   253,   254,   255,   256,   257,     0,     0,   258,   259,
5999:      260,   261,     0,   262,   263,   264,   852,   853,   265,   266,
6000:      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
6001:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
6002:      287,   288,   289,   290,   291,   292,   293,   294,   295,     0,
6003:      296,   297,   298,   299,     0,   858,   301,   302,   303,   304,
6004:      305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
6005:        0,   311,   312,   313,   314,   315,   861,   317,   318,   319,
6006:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
6007:      862,   330,   331,   332,   333,   334,   335,     0,   336,   337,
6008:      338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
6009:      347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
6010:      356,   357,   358,   359,   360,   361,   362,     0,   363,   364,
6011:      365,   366,   367,   368,   369,  2075,   371,   372,   373,   374,
6012:      375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
6013:      384,   385,   865,   386,   387,   388,   389,   390,   391,   392,
6014:      393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
6015:      402,   403,   404,   405,   406,   407,   408,   867,   410,     0,
6016:      411,   412,     0,   413,   414,   415,   416,   417,   418,   419,
6017:        0,   420,   421,     0,     0,   422,   423,   870,   425,   871,
6018:        0,   427,   428,   873,   430,   431,   432,   433,   434,     0,
6019:        0,   435,   436,   437,   438,   439,   874,     0,   440,   441,
6020:      442,   443,   444,   445,   446,     0,   447,   448,   449,   450,
6021:      451,   452,     0,     0,   453,     0,     0,   454,   455,   456,
6022:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
6023:      467,   468,   469,   470,   471,   472,   473,   474,     0,    93,
6024:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6025:        0,     0,     0,     0,    36,    94,    95,    96,    97,    98,
6026:       99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
6027:        0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
6028:      110,   111,   112,   113,   114,   115,   116,   117,   118,     0,
6029:      119,   120,   121,   122,   123,   124,     0,   828,   125,   126,
6030:      127,   128,   129,     0,   130,   131,   132,   133,   831,     0,
6031:      832,     0,   136,   137,   138,   139,   140,   141,   142,   143,
6032:      144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
6033:      152,   153,   154,   155,   833,   834,   835,   836,   837,   838,
6034:      839,   157,   158,   159,   160,   161,   162,   163,   164,   165,
6035:      166,     0,   167,     0,   168,   169,   170,   171,   172,   173,
6036:        0,   174,   175,   176,   177,   178,     0,     0,   179,   180,
6037:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
6038:      189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
6039:      198,   199,   844,     0,   201,     0,   202,   203,   204,   205,
6040:        0,   206,     0,   207,   208,     0,   209,   210,   211,   212,
6041:      213,   214,     0,   215,     0,   216,   217,   218,     0,   219,
6042:      220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
6043:      230,     0,   231,   232,   233,   234,   235,   236,     0,   237,
6044:      238,   239,   240,   241,   242,   243,   244,   245,   246,     0,
6045:      247,     0,   248,   249,   250,   251,   252,   253,   254,   255,
6046:      256,   257,     0,     0,   258,   259,   260,   261,     0,   262,
6047:      263,   264,   852,   853,   265,   266,   267,   268,   269,   270,
6048:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
6049:      281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
6050:      291,   292,   293,   294,   295,     0,   296,   297,   298,   299,
6051:        0,   858,   301,   302,   303,   304,   305,     0,   306,   307,
6052:        0,     0,   308,   309,   310,     0,     0,   311,   312,   313,
6053:      314,   315,   861,   317,   318,   319,   320,   321,   322,   323,
6054:      324,   325,   326,     0,   327,   328,   862,   330,   331,   332,
6055:      333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
6056:        0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
6057:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
6058:      360,   361,   362,     0,   363,   364,   365,   366,   367,   368,
6059:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
6060:      379,   380,     0,   381,   382,   383,   384,   385,   865,   386,
6061:      387,   388,   389,   390,   391,   392,   393,   394,   395,     0,
6062:      396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
6063:      406,   407,   408,   867,   410,     0,   411,   412,     0,   413,
6064:      414,   415,   416,   417,   418,   419,     0,   420,   421,     0,
6065:        0,   422,   423,   870,   425,   871,     0,   427,   428,   873,
6066:      430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
6067:      438,   439,   874,     0,   440,   441,   442,   443,   444,   445,
6068:      446,     0,   447,   448,   449,   450,   451,   452,     0,     0,
6069:      453,     0,     0,   454,   455,   456,   457,   458,   459,   460,
6070:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
6071:      471,   472,   473,   474,     0,   745,  1238,   549,     0,     0,
6072:        0,   821,     0,     0,     0,     0,     0,     0,     0,     0,
6073:     2729,    94,    95,    96,    97,    98,    99,   100,   101,     0,
6074:      102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
6075:      105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
6076:      746,   747,     0,   748,   749,     0,   119,   120,   121,   122,
6077:      123,   124,     0,     0,   125,   126,   750,   751,   129,     0,
6078:      130,   131,   132,   133,   752,     0,     0,     0,   136,   137,
6079:      138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
6080:      147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
6081:        0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
6082:      160,   161,   162,   163,   753,   754,   166,     0,   167,     0,
6083:      168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
6084:      177,   178,     0,     0,   179,   180,   181,   182,   183,     0,
6085:      184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
6086:      192,   193,   755,   195,   196,   197,   198,   199,   756,  1239,
6087:      201,     0,   202,   203,   757,   205,     0,   206,     0,   207,
6088:        0,     0,     0,   210,   211,   212,     0,   214,     0,   215,
6089:        0,   758,   759,   218,     0,   219,   220,   221,   222,   223,
6090:      224,   225,     0,   227,   228,   229,   230,     0,   231,   232,
6091:      233,   234,   235,   236,     0,   237,     0,   760,   240,   241,
6092:      242,   243,   244,   761,   762,     0,   763,     0,   248,     0,
6093:        0,   251,     0,   253,   254,   255,   256,   257,     0,     0,
6094:      258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
6095:      265,   266,   267,   268,   269,   764,   271,   272,   273,   274,
6096:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6097:      285,   286,   287,   288,   765,     0,   766,   292,   293,   294,
6098:      767,     0,   296,   297,     0,   299,     0,   768,   301,   769,
6099:      303,   304,   305,     0,   306,   307,  1240,     0,   308,   309,
6100:      310,     0,     0,   311,   770,     0,   314,     0,   771,   317,
6101:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
6102:      327,   328,   772,   330,   331,   773,   333,   334,   335,     0,
6103:      336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
6104:      774,   346,   347,   348,   349,     0,   350,   351,   352,   353,
6105:      354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
6106:      363,   364,     0,   366,   367,   368,   775,   370,   371,   372,
6107:      373,   374,   375,   376,   377,   378,   379,   380,     0,   381,
6108:      382,   383,   384,   385,     0,   386,   776,   388,   389,   390,
6109:        0,   392,   393,   777,   395,     0,   396,   397,   398,   399,
6110:      400,   401,   402,   403,   404,   405,   406,   778,   408,   779,
6111:      410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
6112:      418,   419,     0,   780,   781,     0,     0,   422,   423,   782,
6113:      425,   783,  1241,   427,   428,   784,   430,   431,   432,   433,
6114:      434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
6115:      440,   441,   442,   443,   444,  1130,   786,     0,   447,     0,
6116:      449,   450,   451,   452,     0,     0,   453,     0,     0,   454,
6117:      455,   456,   457,   458,   459,   787,   788,   789,   790,   791,
6118:      792,   793,   794,   795,   796,   797,   471,   472,   473,   474,
6119:        0,   745,     0,     0,     0,     0,     0,  1242,  1243,  1952,
6120:        0,     0,     0,     0,     0,     0,  1953,    94,    95,    96,
6121:       97,    98,    99,   100,   101,     0,   102,   103,   104,     3,
6122:        4,     0,     0,     0,     0,     0,   105,   106,     0,   107,
6123:      108,   109,     0,   111,   112,   113,   746,   747,     0,   748,
6124:      749,     0,   119,   120,   121,   122,   123,   124,     0,     0,
6125:      125,   126,   750,   751,   129,     0,   130,   131,   132,   133,
6126:      752,     0,     0,     0,   136,   137,   138,   139,   140,   141,
6127:        0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
6128:      151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
6129:        0,     0,     0,   157,   158,   159,   160,   161,   162,   163,
6130:      753,   754,   166,     0,   167,     0,   168,   169,   170,   171,
6131:      172,   173,     0,   174,   175,   176,   177,   178,     0,     0,
6132:      179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
6133:      187,   188,   189,     0,   190,   191,   192,   193,   755,   195,
6134:      196,   197,   198,   199,   756,     0,   201,     0,   202,   203,
6135:      757,   205,     0,   206,     0,   207,     0,     0,     0,   210,
6136:      211,   212,     0,   214,     0,   215,     0,   758,   759,   218,
6137:        0,   219,   220,   221,   222,   223,   224,   225,     0,   227,
6138:      228,   229,   230,     0,   231,   232,   233,   234,   235,   236,
6139:        0,   237,     0,   760,   240,   241,   242,   243,   244,   761,
6140:      762,     0,   763,     0,   248,     0,     0,   251,     0,   253,
6141:      254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
6142:        0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
6143:      269,   764,   271,   272,   273,   274,   275,   276,   277,   278,
6144:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
6145:      765,     0,   766,   292,   293,   294,   767,     0,   296,   297,
6146:        0,   299,     0,   768,   301,   769,   303,   304,   305,     0,
6147:      306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
6148:      770,     0,   314,     0,   771,   317,   318,   319,   320,   321,
6149:      322,   323,   324,   325,   326,     0,   327,   328,   772,   330,
6150:      331,   773,   333,   334,   335,     0,   336,   337,   338,   339,
6151:      340,   341,     0,   342,   343,   344,   774,   346,   347,   348,
6152:      349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
6153:      358,   359,   360,   361,   362,     0,   363,   364,     0,   366,
6154:      367,   368,   775,   370,   371,   372,   373,   374,   375,   376,
6155:      377,   378,   379,   380,    26,   381,   382,   383,   384,   385,
6156:        0,   386,   776,   388,   389,   390,     0,   392,   393,   777,
6157:      395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
6158:      404,   405,   406,   778,   408,   779,   410,     0,   411,   412,
6159:       31,   413,     0,   415,   416,   417,   418,   419,     0,   780,
6160:      781,     0,     0,   422,   423,   782,   425,   783,     0,   427,
6161:      428,   784,   430,   431,   432,   433,   434,     0,     0,   435,
6162:      436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
6163:      444,   785,   786,     0,   447,     0,   449,   450,   451,   452,
6164:        0,     0,   453,     0,    34,   454,   455,   456,   457,   458,
6165:      459,   787,   788,   789,   790,   791,   792,   793,   794,   795,
6166:      796,   797,   471,   472,   473,   474,     0,   500,    35,     0,
6167:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6168:        0,     0,    36,    94,    95,    96,    97,    98,    99,   100,
6169:      101,   615,   102,   103,   104,     0,     0,     0,     0,     0,
6170:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
6171:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
6172:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
6173:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
6174:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
6175:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
6176:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
6177:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
6178:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
6179:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
6180:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
6181:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
6182:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
6183:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
6184:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
6185:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
6186:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
6187:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
6188:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
6189:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
6190:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
6191:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
6192:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
6193:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
6194:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
6195:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
6196:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
6197:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
6198:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
6199:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
6200:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
6201:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
6202:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
6203:       26,   381,   382,   383,   384,   385,     0,   386,   387,   388,
6204:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
6205:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
6206:      408,   409,   410,     0,   411,   412,    31,   413,     0,   415,
6207:      416,   417,   418,   419,     0,   616,   421,     0,     0,   617,
6208:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
6209:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
6210:        0,     0,   440,   441,   442,   443,   444,   577,   446,     0,
6211:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
6212:       34,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6213:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
6214:      473,   474,     0,   500,    35,     0,     0,     0,     0,     0,
6215:        0,     0,     0,     0,     0,     0,     0,     0,    36,    94,
6216:       95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
6217:      104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
6218:        0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
6219:        0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
6220:        0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
6221:      132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
6222:      140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
6223:      149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
6224:        0,     0,     0,     0,     0,   157,   158,   159,   160,   161,
6225:      162,   163,   164,   165,   166,     0,   167,     0,   168,   169,
6226:      170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
6227:        0,     0,   179,   180,   181,   182,   183,     0,   184,   185,
6228:      186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
6229:      194,   195,   196,   197,   198,   199,   200,     0,   201,     0,
6230:      202,   203,   204,   205,     0,   206,     0,   207,     0,     0,
6231:        0,   210,   211,   212,     0,   214,     0,   215,     0,   216,
6232:      217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
6233:        0,   227,   228,   229,   230,     0,   231,   232,   233,   234,
6234:      235,   236,     0,   237,     0,   239,   240,   241,   242,   243,
6235:      244,   245,   246,     0,   247,     0,   248,     0,     0,   251,
6236:        0,   253,   254,   255,   256,   257,     0,     0,   258,     0,
6237:      260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
6238:      267,   268,   269,   502,   271,   272,   273,   274,   275,   276,
6239:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
6240:      287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
6241:      296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
6242:      305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
6243:        0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
6244:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
6245:      329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
6246:      338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
6247:      347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
6248:      356,   357,   358,   359,   360,   361,   362,     0,   363,   364,
6249:        0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
6250:      375,   376,   377,   378,   379,   380,    26,   381,   382,   383,
6251:      384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
6252:      393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
6253:      402,   403,   404,   405,   406,   504,   408,   409,   410,     0,
6254:      411,   412,    31,   413,     0,   415,   416,   417,   418,   419,
6255:        0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
6256:        0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
6257:        0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
6258:      442,   443,   444,   577,   446,     0,   447,     0,   449,   450,
6259:      451,   452,     0,     0,   453,     0,    34,   454,   455,   456,
6260:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
6261:      467,   468,   469,   470,   471,   472,   473,   474,     0,   500,
6262:       35,   581,     0,     0,     0,     0,     0,     0,     0,     0,
6263:        0,     0,     0,     0,    36,    94,    95,    96,    97,    98,
6264:       99,   100,   101,     0,   102,   103,   104,     0,     0,     0,
6265:        0,     0,     0,     0,   105,   106,     0,   107,   108,   109,
6266:        0,   111,   112,   113,   114,   115,     0,   117,   118,     0,
6267:      119,   120,   121,   122,   123,   124,     0,     0,   125,   126,
6268:      127,   128,   129,     0,   130,   131,   132,   133,   134,     0,
6269:        0,     0,   136,   137,   138,   139,   140,   141,     0,   143,
6270:      144,   145,     0,   146,   147,   148,   149,   150,   151,     0,
6271:        0,   153,   154,   155,     0,     0,     0,     0,     0,     0,
6272:        0,   157,   158,   159,   160,   161,   162,   163,   164,   165,
6273:      166,     0,   167,     0,   168,   169,   170,   171,   172,   173,
6274:        0,   174,   175,   176,   177,   178,     0,     0,   179,   180,
6275:      181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
6276:      189,     0,   190,   191,   192,   193,   194,   195,   196,   197,
6277:      198,   199,   200,     0,   201,     0,   202,   203,   204,   205,
6278:        0,   206,     0,   207,     0,     0,     0,   210,   211,   212,
6279:        0,   214,     0,   215,     0,   216,   217,   218,     0,   219,
6280:      220,   221,   222,   223,   224,   225,     0,   227,   228,   229,
6281:      230,     0,   231,   232,   233,   234,   235,   236,     0,   237,
6282:        0,   239,   240,   241,   242,   243,   244,   245,   246,     0,
6283:      247,     0,   248,     0,     0,   251,     0,   253,   254,   255,
6284:      256,   257,     0,     0,   258,     0,   260,     0,     0,   262,
6285:      263,   264,     0,     0,   265,   266,   267,   268,   269,   502,
6286:      271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
6287:      281,   282,   283,   284,   285,   286,   287,   288,   289,     0,
6288:      291,   292,   293,   294,   295,     0,   296,   297,     0,   299,
6289:        0,   300,   301,   302,   303,   304,   305,     0,   306,   307,
6290:        0,     0,   308,   309,   310,     0,     0,   311,   312,     0,
6291:      314,     0,   316,   317,   318,   319,   320,   321,   322,   323,
6292:      324,   325,   326,     0,   327,   328,   329,   330,   331,   332,
6293:      333,   334,   335,     0,   336,   337,   338,   339,   340,   341,
6294:        0,   342,   343,   344,   345,   346,   347,   348,   349,     0,
6295:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
6296:      360,   361,   362,     0,   363,   364,     0,   366,   367,   368,
6297:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
6298:      379,   380,     0,   381,   382,   383,   384,   385,     0,   386,
6299:      387,   388,   389,   390,     0,   392,   393,   394,   395,     0,
6300:      396,   397,   398,   399,   400,   401,   402,   403,   404,   405,
6301:      406,   504,   408,   409,   410,     0,   411,   412,     0,   413,
6302:        0,   415,   416,   417,   418,   419,     0,   420,   421,     0,
6303:        0,   422,   423,   424,   425,   426,     0,   427,   428,   429,
6304:      430,   431,   432,   433,   434,     0,     0,   435,   436,   437,
6305:      438,   439,     0,     0,   440,   441,   442,   443,   444,   445,
6306:      446,     0,   447,     0,   449,   450,   451,   452,     0,     0,
6307:      453,     0,     0,   454,   455,   456,   457,   458,   459,   460,
6308:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
6309:      471,   472,   473,   474,     0,   500,     0,   581,     0,     0,
6310:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6311:      925,    94,    95,    96,    97,    98,    99,   100,   101,     0,
6312:      102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
6313:      105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
6314:      114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
6315:      123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
6316:      130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
6317:      138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
6318:      147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
6319:        0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
6320:      160,   161,   162,   163,   164,   165,   166,     0,   167,     0,
6321:      168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
6322:      177,   178,     0,     0,   179,   180,   181,   182,   183,     0,
6323:      184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
6324:      192,   193,   194,   195,   196,   197,   198,   199,   200,     0,
6325:      201,     0,   202,   203,   204,   205,     0,   206,     0,   207,
6326:        0,     0,     0,   210,   211,   212,     0,   214,     0,   215,
6327:        0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
6328:      224,   225,     0,   227,   228,   229,   230,     0,   231,   232,
6329:      233,   234,   235,   236,     0,   237,     0,   239,   240,   241,
6330:      242,   243,   244,   245,   246,     0,   247,     0,   248,     0,
6331:        0,   251,     0,   253,   254,   255,   256,   257,     0,     0,
6332:      258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
6333:      265,   266,   267,   268,   269,   502,   271,   272,   273,   274,
6334:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6335:      285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
6336:      295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
6337:      303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
6338:      310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
6339:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
6340:      327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
6341:      336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
6342:      345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
6343:      354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
6344:      363,   364,     0,   366,   367,   368,   369,   370,   371,   372,
6345:      373,   374,   375,   376,   377,   378,   379,   380,     0,   381,
6346:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
6347:        0,   392,   393,   394,   395,     0,   396,   397,   398,   399,
6348:      400,   401,   402,   403,   404,   405,   406,   504,   408,   409,
6349:      410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
6350:      418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
6351:      425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
6352:      434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
6353:      440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
6354:      449,   450,   451,   452,     0,     0,   453,     0,     0,   454,
6355:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6356:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
6357:        0,   500,     0,     0,     0,     0,     0,     0,     0,     0,
6358:        0,     0,     0,     0,     0,     0,  2562,    94,    95,    96,
6359:       97,    98,    99,   100,   101,     0,   102,   103,   104,     0,
6360:        0,     0,     0,     0,     0,     0,   105,   106,     0,   107,
6361:      108,   109,     0,   111,   112,   113,   114,   115,     0,   117,
6362:      118,     0,   119,   120,   121,   122,   123,   124,     0,     0,
6363:      125,   126,   127,   128,   129,     0,   130,   131,   132,   133,
6364:      134,     0,     0,     0,   136,   137,   138,   139,   140,   141,
6365:        0,   143,   144,   145,     0,   146,   147,   148,   149,   150,
6366:      151,     0,     0,   153,   154,   155,     0,     0,     0,     0,
6367:        0,     0,     0,   157,   158,   159,   160,   161,   162,   163,
6368:      164,   165,   166,     0,   167,     0,   168,   169,   170,   171,
6369:      172,   173,     0,   174,   175,   176,   177,   178,     0,     0,
6370:      179,   180,   181,   182,   183,     0,   184,   185,   186,     0,
6371:      187,   188,   189,     0,   190,   191,   192,   193,   194,   195,
6372:      196,   197,   198,   199,   200,     0,   201,     0,   202,   203,
6373:      204,   205,     0,   206,     0,   207,     0,     0,     0,   210,
6374:      211,   212,     0,   214,     0,   215,     0,   216,   217,   218,
6375:        0,   219,   220,   221,   222,   223,   224,   225,     0,   227,
6376:      228,   229,   230,     0,   231,   232,   233,   234,   235,   236,
6377:        0,   237,     0,   239,   240,   241,   242,   243,   244,   245,
6378:      246,     0,   247,     0,   248,     0,     0,   251,     0,   253,
6379:      254,   255,   256,   257,     0,     0,   258,     0,   260,     0,
6380:        0,   262,   263,   264,     0,     0,   265,   266,   267,   268,
6381:      269,   502,   271,   272,   273,   274,   275,   276,   277,   278,
6382:      279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
6383:      289,     0,   291,   292,   293,   294,   295,     0,   296,   297,
6384:        0,   299,     0,   300,   301,   302,   303,   304,   305,     0,
6385:      306,   307,     0,     0,   308,   309,   310,     0,     0,   311,
6386:      312,     0,   314,     0,   316,   317,   318,   319,   320,   321,
6387:      322,   323,   324,   325,   326,     0,   327,   328,   329,   330,
6388:      331,   332,   333,   334,   335,     0,   336,   337,   338,   339,
6389:      340,   341,     0,   342,   343,   344,   345,   346,   347,   348,
6390:      349,     0,   350,   351,   352,   353,   354,   355,   356,   357,
6391:      358,   359,   360,   361,   362,     0,   363,   364,     0,   366,
6392:      367,   368,   369,   370,   371,   372,   373,   374,   375,   376,
6393:      377,   378,   379,   380,     0,   381,   382,   383,   384,   385,
6394:        0,   386,   387,   388,   389,   390,     0,   392,   393,   394,
6395:      395,     0,   396,   397,   398,   399,   400,   401,   402,   403,
6396:      404,   405,   406,   504,   408,   409,   410,     0,   411,   412,
6397:        0,   413,     0,   415,   416,   417,   418,   419,     0,   420,
6398:      421,     0,     0,   422,   423,   424,   425,   426,     0,   427,
6399:      428,   429,   430,   431,   432,   433,   434,     0,     0,   435,
6400:      436,   437,   438,   439,     0,     0,   440,   441,   442,   443,
6401:      444,   445,   446,     0,   447,     0,   449,   450,   451,   452,
6402:        0,     0,   453,     0,     0,   454,   455,   456,   457,   458,
6403:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
6404:      469,   470,   471,   472,   473,   474,     0,   500,     0,     0,
6405:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6406:        0,     0,  1663,    94,    95,    96,    97,    98,    99,   100,
6407:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
6408:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
6409:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
6410:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
6411:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
6412:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
6413:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
6414:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
6415:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
6416:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
6417:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
6418:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
6419:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
6420:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
6421:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
6422:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
6423:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
6424:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
6425:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
6426:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
6427:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
6428:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
6429:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
6430:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
6431:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
6432:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
6433:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
6434:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
6435:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
6436:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
6437:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
6438:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
6439:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
6440:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
6441:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
6442:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
6443:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
6444:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
6445:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
6446:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
6447:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
6448:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
6449:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
6450:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
6451:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
6452:      473,   474,     0,   500,     0,     0,     0,     0,     0,     0,
6453:        0,     0,     0,     0,     0,     0,     0,     0,  1768,    94,
6454:       95,    96,    97,    98,    99,   100,   101,     0,   102,   103,
6455:      104,     0,     0,     0,     0,     0,     0,     0,   105,   106,
6456:        0,   107,   108,   109,     0,   111,   112,   113,   114,   115,
6457:        0,   117,   118,     0,   119,   120,   121,   122,   123,   124,
6458:        0,     0,   125,   126,   127,   128,   129,     0,   130,   131,
6459:      132,   133,   134,     0,     0,     0,   136,   137,   138,   139,
6460:      140,   141,     0,   143,   144,   145,     0,   146,   147,   148,
6461:      149,   150,   151,     0,     0,   153,   154,   155,     0,     0,
6462:        0,     0,     0,     0,     0,   157,   158,   159,   160,   161,
6463:      162,   163,   164,   165,   166,     0,   167,     0,   168,   169,
6464:      170,   171,   172,   173,     0,   174,   175,   176,   177,   178,
6465:        0,     0,   179,   180,   181,   182,   183,     0,   184,   185,
6466:      186,     0,   187,   188,   189,     0,   190,   191,   192,   193,
6467:      194,   195,   196,   197,   198,   199,   200,     0,   201,     0,
6468:      202,   203,   204,   205,     0,   206,     0,   207,     0,     0,
6469:        0,   210,   211,   212,     0,   214,     0,   215,     0,   216,
6470:      217,   218,     0,   219,   220,   221,   222,   223,   224,   225,
6471:        0,   227,   228,   229,   230,     0,   231,   232,   233,   234,
6472:      235,   236,     0,   237,     0,   239,   240,   241,   242,   243,
6473:      244,   245,   246,     0,   247,     0,   248,     0,     0,   251,
6474:        0,   253,   254,   255,   256,   257,     0,     0,   258,     0,
6475:      260,     0,     0,   262,   263,   264,     0,     0,   265,   266,
6476:      267,   268,   269,   502,   271,   272,   273,   274,   275,   276,
6477:      277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
6478:      287,   288,   289,     0,   291,   292,   293,   294,   295,     0,
6479:      296,   297,     0,   299,     0,   300,   301,   302,   303,   304,
6480:      305,     0,   306,   307,     0,     0,   308,   309,   310,     0,
6481:        0,   311,   312,     0,   314,     0,   316,   317,   318,   319,
6482:      320,   321,   322,   323,   324,   325,   326,     0,   327,   328,
6483:      329,   330,   331,   332,   333,   334,   335,     0,   336,   337,
6484:      338,   339,   340,   341,     0,   342,   343,   344,   345,   346,
6485:      347,   348,   349,     0,   350,   351,   352,   353,   354,   355,
6486:      356,   357,   358,   359,   360,   361,   362,     0,   363,   364,
6487:        0,   366,   367,   368,   369,   370,   371,   372,   373,   374,
6488:      375,   376,   377,   378,   379,   380,     0,   381,   382,   383,
6489:      384,   385,     0,   386,   387,   388,   389,   390,     0,   392,
6490:      393,   394,   395,     0,   396,   397,   398,   399,   400,   401,
6491:      402,   403,   404,   405,   406,   504,   408,   409,   410,     0,
6492:      411,   412,     0,   413,     0,   415,   416,   417,   418,   419,
6493:        0,   420,   421,     0,     0,   422,   423,   424,   425,   426,
6494:        0,   427,   428,   429,   430,   431,   432,   433,   434,     0,
6495:        0,   435,   436,   437,   438,   439,     0,     0,   440,   441,
6496:      442,   443,   444,   445,   446,     0,   447,     0,   449,   450,
6497:      451,   452,     0,     0,   453,     0,     0,   454,   455,   456,
6498:      457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
6499:      467,   468,   469,   470,   471,   472,   473,   474,     0,     0,
6500:        0,     0,  2417,  1238,   549,     0,     0,  1623,   821,     0,
6501:        0,     0,     0,     0,  2534,  1624,  1625,  1626,    94,    95,
6502:       96,    97,    98,    99,   100,   101,  1057,   102,   103,   104,
6503:     1058,  1059,  1060,  1061,  1062,  1063,  1064,   105,   106,  1065,
6504:      107,   108,   109,  2418,   111,   112,   113,     0,   665,  2419,
6505:      667,   668,  1066,   119,   120,   121,   122,   123,   124,  1067,
6506:     1068,   125,   126,   669,   670,   129,  1069,   130,   131,   132,
6507:      133,     0,  1070,  2420,  1071,   136,   137,   138,   139,   140,
6508:      141,  2421,   143,   144,   145,  1072,   146,   147,   148,   149,
6509:      150,   151,  1073,  2422,   153,   154,   155,  1074,  1075,  1076,
6510:     2423,  1077,  1078,  1079,   157,   158,   159,   160,   161,   162,
6511:      163,   675,   676,   166,  1080,   167,  1081,   168,   169,   170,
6512:      171,   172,   173,  1082,   174,   175,   176,   177,   178,  1083,
6513:     1084,   179,   180,   677,   182,   183,  1085,   184,   185,   186,
6514:     1086,   187,   188,   189,  1087,   190,   191,   192,   193,     0,
6515:      195,   196,   197,   198,   199,     0,  1088,   201,  1089,   202,
6516:      203,   678,   205,  1090,   206,  1091,   207,  2424,  1092,  2425,
6517:      210,   211,   212,  2426,   214,  1093,   215,  1094,     0,     0,
6518:      218,  1095,   219,   220,   221,   222,   223,   224,   225,  2427,
6519:      227,   228,   229,   230,  1096,   231,   232,   233,   234,   235,
6520:      236,  1097,   237,  2428,     0,   240,   241,   242,   243,   244,
6521:      685,   686,  1098,   687,  1099,   248,  2429,  2430,   251,  2431,
6522:      253,   254,   255,   256,   257,  1100,  1101,   258,  2432,   260,
6523:     2433,  1102,   262,   263,   264,  1103,  1104,   265,   266,   267,
6524:      268,   269,  2434,   271,   272,   273,   274,   275,   276,   277,
6525:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
6526:      288,   694,  2435,   696,   292,   293,   294,  2436,  1105,   296,
6527:      297,  2437,   299,  1106,     0,   301,   698,   303,   304,   305,
6528:     1107,   306,   307,  1108,  1109,  2438,   309,   310,  1110,  1111,
6529:      311,     0,  2439,   314,  2440,     0,   317,   318,   319,   320,
6530:      321,   322,   323,   324,   325,   326,  1112,   327,   328,     0,
6531:      330,   331,     0,   333,   334,   335,  1113,   336,   337,   338,
6532:      339,   340,   341,  1114,   342,   343,   344,   701,   346,   347,
6533:      348,   349,  1115,   350,   351,   352,   353,   354,   355,   356,
6534:      357,   358,   359,   360,   361,   362,  1116,   363,   364,  2441,
6535:      366,   367,   368,   703,   370,   371,   372,   373,   374,   375,
6536:      376,   377,   378,   379,   380,  1117,   381,   382,   383,   384,
6537:      385,  1118,   386,  2442,   388,   389,   390,  2443,   392,   393,
6538:      706,   395,  1119,   396,   397,   398,   399,   400,   401,   402,
6539:      403,   404,   405,   406,  2444,   408,     0,   410,  1120,   411,
6540:      412,  1121,   413,  2445,   415,   416,   417,   418,   419,  1122,
6541:      709,   710,  1123,  1124,   422,   423,     0,   425,     0,  1125,
6542:      427,   428,  2446,   430,   431,   432,   433,   434,  1126,  1127,
6543:      435,   436,   437,   438,   439,  1128,  1129,   440,   441,   442,
6544:      443,   444,     0,   712,  1131,   447,  2447,   449,   450,   451,
6545:      452,  1132,  1133,   453,  1134,  1135,   454,   455,   456,   457,
6546:      458,   459,     0,     0,     0,     0,     0,     0,     0,     0,
6547:        0,     0,     0,   471,   472,   473,   474,     0,   500,     0,
6548:     1627,  1628,  1629,  1623,  2448,  2449,  1632,  1633,  1634,  1635,
6549:        0,  1624,  1625,  1626,    94,    95,    96,    97,    98,    99,
6550:      100,   101,     0,   102,   103,   104,     0,     0,     0,     0,
6551:        0,     0,     0,   105,   106,     0,   107,   108,   109,     0,
6552:      111,   112,   113,   114,   115,     0,   117,   118,     0,   119,
6553:      120,   121,   122,   123,   124,     0,     0,   125,   126,   127,
6554:      128,   129,     0,   130,   131,   132,   133,   134,     0,     0,
6555:        0,   136,   137,   138,   139,   140,   141,     0,   143,   144,
6556:      145,     0,   146,   147,   148,   149,   150,   151,     0,     0,
6557:      153,   154,   155,     0,     0,     0,     0,     0,     0,     0,
6558:      157,   158,   159,   160,   161,   162,   163,   164,   165,   166,
6559:        0,   167,     0,   168,   169,   170,   171,   172,   173,     0,
6560:      174,   175,   176,   177,   178,     0,     0,   179,   180,   181,
6561:      182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
6562:        0,   190,   191,   192,   193,   194,   195,   196,   197,   198,
6563:      199,   200,     0,   201,     0,   202,   203,   204,   205,     0,
6564:      206,     0,   207,     0,     0,     0,   210,   211,   212,     0,
6565:      214,     0,   215,     0,   216,   217,   218,     0,   219,   220,
6566:      221,   222,   223,   224,   225,     0,   227,   228,   229,   230,
6567:        0,   231,   232,   233,   234,   235,   236,     0,   237,     0,
6568:      239,   240,   241,   242,   243,   244,   245,   246,     0,   247,
6569:        0,   248,     0,     0,   251,     0,   253,   254,   255,   256,
6570:      257,     0,     0,   258,     0,   260,     0,     0,   262,   263,
6571:      264,     0,     0,   265,   266,   267,   268,   269,   502,   271,
6572:      272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
6573:      282,   283,   284,   285,   286,   287,   288,   289,     0,   291,
6574:      292,   293,   294,   295,     0,   296,   297,     0,   299,     0,
6575:      300,   301,   302,   303,   304,   305,     0,   306,   307,     0,
6576:        0,   308,   309,   310,     0,     0,   311,   312,     0,   314,
6577:        0,   316,   317,   318,   319,   320,   321,   322,   323,   324,
6578:      325,   326,     0,   327,   328,   329,   330,   331,   332,   333,
6579:      334,   335,     0,   336,   337,   338,   339,   340,   341,     0,
6580:      342,   343,   344,   345,   346,   347,   348,   349,     0,   350,
6581:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
6582:      361,   362,     0,   363,   364,     0,   366,   367,   368,   369,
6583:      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
6584:      380,     0,   381,   382,   383,   384,   385,     0,   386,   387,
6585:      388,   389,   390,     0,   392,   393,   394,   395,     0,   396,
6586:      397,   398,   399,   400,   401,   402,   403,   404,   405,   406,
6587:      504,   408,   409,   410,     0,   411,   412,     0,   413,     0,
6588:      415,   416,   417,   418,   419,     0,   420,   421,     0,     0,
6589:      422,   423,   424,   425,   426,     0,   427,   428,   429,   430,
6590:      431,   432,   433,   434,     0,     0,   435,   436,   437,   438,
6591:      439,     0,     0,   440,   441,   442,   443,   444,   445,   446,
6592:        0,   447,     0,   449,   450,   451,   452,     0,     0,   453,
6593:        0,     0,   454,   455,   456,   457,   458,   459,   460,   461,
6594:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
6595:      472,   473,   474,     0,     0,     0,  1627,  1628,  1629,     0,
6596:     1630,  1631,  1632,  1633,  1634,  1635,  1315,     0,     0,  1316,
6597:        0,     0,     0,     0,  1317,  1318,  1319,     0,     0,     0,
6598:        0,     0,     0,     0,  1315,     0,     0,  1316,     0,     0,
6599:        0,  1320,  1317,  1318,  1319,     0,     0,     0,     0,  1322,
6600:        0,     0,     0,     0,     0,     0,  1323,     0,     0,  1320,
6601:        0,     0,     0,  1315,     0,     0,  1316,  1322,     0,     0,
6602:        0,  1317,  1318,  1319,  1323,     0,     0,     0,     0,     0,
6603:        0,  1324,  1315,     0,     0,  1316,     0,     0,  1320,     0,
6604:     1317,  1318,  1319,     0,     0,     0,  1322,     0,     0,  1324,
6605:        0,     0,     0,  1323,     0,     0,     0,  1320,     0,     0,
6606:        0,     0,     0,     0,     0,  1322,     0,     0,     0,     0,
6607:        0,     0,  1323,     0,     0,     0,     0,     0,  1324,     0,
6608:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6609:        0,     0,     0,     0,     0,     0,     0,  1324,  1315,     0,
6610:        0,  1316,     0,     0,     0,     0,  1317,  1318,  1319,     0,
6611:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6612:        0,     0,     0,  1320,     0,     0,     0,     0,     0,     0,
6613:        0,  1322,  1325,     0,     0,     0,     0,     0,  1323,     0,
6614:        0,     0,     0,     0,     0,     0,     0,     0,  1326,     0,
6615:     1325,     0,     0,  1327,     0,     0,     0,     0,     0,     0,
6616:        0,     0,     0,  1324,     0,     0,  1326,     0,     0,     0,
6617:        0,  1327,     0,     0,     0,  1328,  1329,     0,     0,  1325,
6618:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
6619:        0,     0,     0,  1328,  1329,  1326,     0,     0,  1325,     0,
6620:     1327,     0,     0,     0,     0,     0,     0,  1330,     0,     0,
6621:        0,     0,     0,     0,  1326,     0,     0,     0,     0,  1327,
6622:        0,     0,  1328,  1329,     0,     0,     0,  1331,     0,     0,
6623:     1332,     0,     0,     0,     0,     0,  1330,     0,     0,     0,
6624:        0,  1328,  1329,     0,  1333,  1331,     0,  1334,  1332,     0,
6625:        0,     0,     0,     0,     0,  1330,     0,     0,     0,     0,
6626:        0,     0,  1333,     0,  1325,  1334,     0,     0,     0,     0,
6627:        0,     0,     0,     0,  1331,     0,     0,  1332,     0,     0,
6628:     1326,     0,     0,     0,     0,  1327,     0,     0,     0,     0,
6629:        0,  1333,     0,  1331,  1334,     0,  1332,     0,     0,     0,
6630:        0,     0,     0,     0,     0,     0,     0,  1328,  1329,     0,
6631:     1333,     0,     0,  1334,     0,     0,     0,     0,     0,     0,
6632:        0,  1330,     0,     0,     0,     0,     0,     0,     0,     0,
6633:        0,     0,     0,     0,     0,  1315,  1335,     0,  1316,     0,
6634:        0,     0,     0,  1317,  1318,  1319,     0,     0,     0,     0,
6635:        0,     0,     0,     0,  1335,     0,     0,     0,     0,  1331,
6636:     1320,     0,  1332,     0,     0,     0,     0,     0,  1322,     0,
6637:        0,     0,     0,     0,     0,  1323,  1333,     0,     0,  1334,
6638:        0,     0,     0,  1335,     0,     0,     0,     0,     0,     0,
6639:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6640:     1324,     0,  1335,     0,     0,     0,     0,     0,     0,     0,
6641:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6642:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6643:        0,     0,     0,     0,     0,     0,  1336,     0,     0,  1337,
6644:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
6645:        0,     0,     0,  2036,  1336,     0,     0,  1337,  1338,  1339,
6646:        0,  1340,  1341,  1342,  1343,  1344,  1345,     0,  1335,     0,
6647:        0,  2252,     0,     0,     0,     0,     0,     0,     0,     0,
6648:        0,     0,     0,  1336,     0,     0,  1337,  1338,  1339,     0,
6649:     1340,  1341,  1342,  1343,  1344,  1345,     0,     0,     0,     0,
6650:     2293,  1325,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,
6651:     1341,  1342,  1343,  1344,  1345,     0,     0,  1326,     0,  2380,
6652:        0,  1315,  1327,     0,  1316,     0,     0,     0,     0,  1317,
6653:     1318,  1319,     0,     0,     0,     0,     0,     0,     0,     0,
6654:        0,     0,     0,     0,  1328,  1329,  1320,     0,     0,     0,
6655:        0,     0,     0,     0,  1322,     0,     0,     0,  1330,     0,
6656:        0,  1323,     0,     0,     0,     0,     0,     0,  1336,     0,
6657:        0,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,
6658:     1345,  1315,     0,     0,  1316,  2509,  1324,     0,     0,  1317,
6659:     1318,  1319,     0,     0,     0,     0,  1331,     0,     0,  1332,
6660:        0,     0,     0,     0,     0,     0,  1320,     0,     0,     0,
6661:        0,     0,     0,  1333,  1322,     0,  1334,     0,     0,     0,
6662:        0,  1323,     0,     0,     0,     0,     0,     0,     0,     0,
6663:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6664:        0,  1315,     0,     0,  1316,     0,  1324,     0,     0,  1317,
6665:     1318,  1319,     0,     0,     0,     0,     0,     0,     0,  1315,
6666:        0,     0,  1316,     0,     0,     0,  1320,  1317,  1318,  1319,
6667:        0,     0,     0,     0,  1322,     0,     0,     0,     0,     0,
6668:        0,  1323,     0,     0,  1320,     0,     0,  1325,     0,     0,
6669:        0,     0,  1322,     0,     0,     0,     0,     0,     0,  1323,
6670:        0,     0,     0,  1326,     0,  1335,  1324,     0,  1327,     0,
6671:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6672:        0,     0,     0,     0,  1324,     0,     0,     0,     0,     0,
6673:     1328,  1329,     0,     0,     0,     0,     0,     0,     0,     0,
6674:        0,     0,     0,     0,  1330,     0,     0,  1325,     0,     0,
6675:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6676:        0,     0,     0,  1326,     0,     0,     0,     0,  1327,     0,
6677:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6678:        0,     0,  1331,     0,     0,  1332,     0,     0,     0,     0,
6679:     1328,  1329,     0,     0,     0,     0,     0,     0,     0,  1333,
6680:        0,     0,  1334,     0,  1330,  1336,     0,  1325,  1337,  1338,
6681:     1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,     0,
6682:        0,     0,  2531,  1326,     0,  1325,     0,     0,  1327,     0,
6683:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6684:        0,  1326,  1331,     0,     0,  1332,  1327,     0,     0,     0,
6685:     1328,  1329,     0,     0,     0,     0,     0,     0,     0,  1333,
6686:        0,     0,  1334,     0,  1330,     0,     0,     0,  1328,  1329,
6687:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6688:        0,     0,  1330,     0,     0,     0,     0,     0,     0,     0,
6689:        0,  1335,     0,     0,     0,     0,     0,     0,     0,     0,
6690:        0,     0,  1331,     0,     0,  1332,     0,     0,     0,     0,
6691:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1333,
6692:     1331,     0,  1334,  1332,     0,     0,     0,     0,     0,     0,
6693:        0,     0,     0,     0,     0,     0,     0,  1333,     0,     0,
6694:     1334,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6695:        0,  1335,     0,     0,     0,     0,     0,     0,     0,     0,
6696:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6697:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6698:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6699:        0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,  1341,
6700:     1342,  1343,  1344,  1345,     0,     0,     0,     0,  2679,     0,
6701:        0,  1335,     0,     0,     0,     0,     0,     0,     0,     0,
6702:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1335,
6703:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6704:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6705:        0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,  1341,
6706:     1342,  1343,  1344,  1345,     0,     0,     0,     0,  2902,     0,
6707:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6708:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6709:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6710:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6711:        0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,  1341,
6712:     1342,  1343,  1344,  1345,     0,     0,     0,     0,  2914,  1336,
6713:     1056,     0,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,
6714:     1344,  1345,     0,     0,  1498,     0,    94,    95,    96,    97,
6715:       98,    99,   100,   101,  1057,   102,   103,   104,  1058,  1059,
6716:     1060,  1061,  1062,  1063,  1064,   105,   106,  1065,   107,   108,
6717:      109,     0,   111,   112,   113,   746,   747,     0,   748,   749,
6718:     1066,   119,   120,   121,   122,   123,   124,  1067,  1068,   125,
6719:      126,   750,   751,   129,  1069,   130,   131,   132,   133,   752,
6720:     1070,     0,  1071,   136,   137,   138,   139,   140,   141,     0,
6721:      143,   144,   145,  1072,   146,   147,   148,   149,   150,   151,
6722:     1073,     0,   153,   154,   155,  1074,  1075,  1076,     0,  1077,
6723:     1078,  1079,   157,   158,   159,   160,   161,   162,   163,   753,
6724:      754,   166,  1080,   167,  1081,   168,   169,   170,   171,   172,
6725:      173,  1082,   174,   175,   176,   177,   178,  1083,  1084,   179,
6726:      180,   181,   182,   183,  1085,   184,   185,   186,  1086,   187,
6727:      188,   189,  1087,   190,   191,   192,   193,   755,   195,   196,
6728:      197,   198,   199,   756,  1088,   201,  1089,   202,   203,   757,
6729:      205,  1090,   206,  1091,   207,     0,  1092,     0,   210,   211,
6730:      212,     0,   214,  1093,   215,  1094,   758,   759,   218,  1095,
6731:      219,   220,   221,   222,   223,   224,   225,     0,   227,   228,
6732:      229,   230,  1096,   231,   232,   233,   234,   235,   236,  1097,
6733:      237,     0,   760,   240,   241,   242,   243,   244,   761,   762,
6734:     1098,   763,  1099,   248,     0,     0,   251,     0,   253,   254,
6735:      255,   256,   257,  1100,  1101,   258,     0,   260,     0,  1102,
6736:      262,   263,   264,  1103,  1104,   265,   266,   267,   268,   269,
6737:      764,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6738:      280,   281,   282,   283,   284,   285,   286,   287,   288,   765,
6739:        0,   766,   292,   293,   294,   767,  1105,   296,   297,     0,
6740:      299,  1106,   768,   301,   769,   303,   304,   305,  1107,   306,
6741:      307,  1108,  1109,   308,   309,   310,  1110,  1111,   311,   770,
6742:        0,   314,     0,   771,   317,   318,   319,   320,   321,   322,
6743:      323,   324,   325,   326,  1112,   327,   328,   772,   330,   331,
6744:      773,   333,   334,   335,  1113,   336,   337,   338,   339,   340,
6745:      341,  1114,   342,   343,   344,   774,   346,   347,   348,   349,
6746:     1115,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6747:      359,   360,   361,   362,  1116,   363,   364,     0,   366,   367,
6748:      368,   775,   370,   371,   372,   373,   374,   375,   376,   377,
6749:      378,   379,   380,  1117,   381,   382,   383,   384,   385,  1118,
6750:      386,   776,   388,   389,   390,     0,   392,   393,   777,   395,
6751:     1119,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6752:      405,   406,   778,   408,   779,   410,  1120,   411,   412,  1121,
6753:      413,     0,   415,   416,   417,   418,   419,  1122,   780,   781,
6754:     1123,  1124,   422,   423,   782,   425,   783,  1125,   427,   428,
6755:      784,   430,   431,   432,   433,   434,  1126,  1127,   435,   436,
6756:      437,   438,   439,  1128,  1129,   440,   441,   442,   443,   444,
6757:     1130,   786,  1131,   447,     0,   449,   450,   451,   452,  1132,
6758:     1133,   453,  1134,  1135,   454,   455,   456,   457,   458,   459,
6759:      787,   788,   789,   790,   791,   792,   793,   794,   795,   796,
6760:      797,   471,   472,   473,   474,   500,     0,     0,     0,     0,
6761:        0,     0,     0,     0,  1747,     0,     0,     0,     0,     0,
6762:        0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
6763:      102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
6764:      105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
6765:      114,   115,     0,   117,   118,     0,   119,   120,   121,   122,
6766:      123,   124,     0,     0,   125,   126,   127,   128,   129,     0,
6767:      130,   131,   132,   133,   134,     0,     0,     0,   136,   137,
6768:      138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
6769:      147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
6770:        0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
6771:      160,   161,   162,   163,   164,   165,   166,     0,   167,     0,
6772:      168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
6773:      177,   178,     0,     0,   179,   180,   181,   182,   183,     0,
6774:      184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
6775:      192,   193,   194,   195,   196,   197,   198,   199,   200,     0,
6776:      201,     0,   202,   203,   204,   205,     0,   206,     0,   207,
6777:        0,     0,     0,   210,   211,   212,     0,   214,     0,   215,
6778:        0,   216,   217,   218,     0,   219,   220,   221,   222,   223,
6779:      224,   225,     0,   227,   228,   229,   230,     0,   231,   232,
6780:      233,   234,   235,   236,     0,   237,     0,   239,   240,   241,
6781:      242,   243,   244,   245,   246,     0,   247,     0,   248,     0,
6782:        0,   251,     0,   253,   254,   255,   256,   257,     0,     0,
6783:      258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
6784:      265,   266,   267,   268,   269,   502,   271,   272,   273,   274,
6785:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6786:      285,   286,   287,   288,   289,     0,   291,   292,   293,   294,
6787:      295,     0,   296,   297,     0,   299,     0,   300,   301,   302,
6788:      303,   304,   305,     0,   306,   307,     0,     0,   308,   309,
6789:      310,     0,     0,   311,   312,     0,   314,     0,   316,   317,
6790:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
6791:      327,   328,   329,   330,   331,   332,   333,   334,   335,     0,
6792:      336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
6793:      345,   346,   347,   348,   349,     0,   350,   351,   352,   353,
6794:      354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
6795:      363,   364,     0,   366,   367,   368,   369,   370,   371,   372,
6796:      373,   374,   375,   376,   377,   378,   379,   380,     0,   381,
6797:      382,   383,   384,   385,     0,   386,   387,   388,   389,   390,
6798:        0,   392,   393,   394,   395,     0,   396,   397,   398,   399,
6799:      400,   401,   402,   403,   404,   405,   406,   504,   408,   409,
6800:      410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
6801:      418,   419,     0,   420,   421,     0,     0,   422,   423,   424,
6802:      425,   426,     0,   427,   428,   429,   430,   431,   432,   433,
6803:      434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
6804:      440,   441,   442,   443,   444,   445,   446,     0,   447,     0,
6805:      449,   450,   451,   452,     0,     0,   453,     0,     0,   454,
6806:      455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
6807:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
6808:      745,  1238,   549,     0,     0,     0,   821,     0,     0,  2244,
6809:        0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
6810:       98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
6811:        0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
6812:      109,     0,   111,   112,   113,   746,   747,     0,   748,   749,
6813:        0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
6814:      126,   750,   751,   129,     0,   130,   131,   132,   133,   752,
6815:        0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
6816:      143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
6817:        0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
6818:        0,     0,   157,   158,   159,   160,   161,   162,   163,   753,
6819:      754,   166,  1374,   167,     0,   168,   169,   170,   171,   172,
6820:      173,     0,   174,   175,   176,   177,   178,     0,     0,   179,
6821:      180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
6822:      188,   189,     0,   190,   191,   192,   193,   755,   195,   196,
6823:      197,   198,   199,   756,  1239,   201,     0,   202,   203,   757,
6824:      205,     0,   206,     0,   207,     0,     0,     0,   210,   211,
6825:      212,     0,   214,     0,   215,     0,   758,   759,   218,     0,
6826:      219,   220,   221,   222,   223,   224,   225,     0,   227,   228,
6827:      229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
6828:      237,     0,   760,   240,   241,   242,   243,   244,   761,   762,
6829:        0,   763,     0,   248,     0,     0,   251,     0,   253,   254,
6830:      255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
6831:      262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
6832:      764,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6833:      280,   281,   282,   283,   284,   285,   286,   287,   288,   765,
6834:        0,   766,   292,   293,   294,   767,     0,   296,   297,     0,
6835:      299,     0,   768,   301,   769,   303,   304,   305,     0,   306,
6836:      307,  1240,     0,   308,   309,   310,     0,     0,   311,   770,
6837:        0,   314,     0,   771,   317,   318,   319,   320,   321,   322,
6838:      323,   324,   325,   326,     0,   327,   328,   772,   330,   331,
6839:      773,   333,   334,   335,     0,   336,   337,   338,   339,   340,
6840:      341,     0,   342,   343,   344,   774,   346,   347,   348,   349,
6841:        0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6842:      359,   360,   361,   362,     0,   363,   364,     0,   366,   367,
6843:      368,   775,   370,   371,   372,   373,   374,   375,   376,   377,
6844:      378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
6845:      386,   776,   388,   389,   390,     0,   392,   393,   777,   395,
6846:        0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6847:      405,   406,   778,   408,   779,   410,     0,   411,   412,     0,
6848:      413,     0,   415,   416,   417,   418,   419,     0,   780,   781,
6849:        0,     0,   422,   423,   782,   425,   783,  1241,   427,   428,
6850:      784,   430,   431,   432,   433,   434,     0,     0,   435,   436,
6851:      437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
6852:     1130,   786,     0,   447,     0,   449,   450,   451,   452,     0,
6853:        0,   453,     0,     0,   454,   455,   456,   457,   458,   459,
6854:      787,   788,   789,   790,   791,   792,   793,   794,   795,   796,
6855:      797,   471,   472,   473,   474,   745,  1238,   549,     0,     0,
6856:        0,   821,  1242,  1243,     0,     0,     0,     0,     0,     0,
6857:        0,    94,    95,    96,    97,    98,    99,   100,   101,     0,
6858:      102,   103,   104,     0,     0,     0,     0,     0,     0,     0,
6859:      105,   106,     0,   107,   108,   109,     0,   111,   112,   113,
6860:      746,   747,     0,   748,   749,     0,   119,   120,   121,   122,
6861:      123,   124,     0,     0,   125,   126,   750,   751,   129,     0,
6862:      130,   131,   132,   133,   752,     0,     0,     0,   136,   137,
6863:      138,   139,   140,   141,     0,   143,   144,   145,     0,   146,
6864:      147,   148,   149,   150,   151,     0,     0,   153,   154,   155,
6865:        0,     0,     0,     0,     0,     0,     0,   157,   158,   159,
6866:      160,   161,   162,   163,   753,   754,   166,  1376,   167,     0,
6867:      168,   169,   170,   171,   172,   173,     0,   174,   175,   176,
6868:      177,   178,     0,     0,   179,   180,   181,   182,   183,     0,
6869:      184,   185,   186,     0,   187,   188,   189,     0,   190,   191,
6870:      192,   193,   755,   195,   196,   197,   198,   199,   756,  1239,
6871:      201,     0,   202,   203,   757,   205,     0,   206,     0,   207,
6872:        0,     0,     0,   210,   211,   212,     0,   214,     0,   215,
6873:        0,   758,   759,   218,     0,   219,   220,   221,   222,   223,
6874:      224,   225,     0,   227,   228,   229,   230,     0,   231,   232,
6875:      233,   234,   235,   236,     0,   237,     0,   760,   240,   241,
6876:      242,   243,   244,   761,   762,     0,   763,     0,   248,     0,
6877:        0,   251,     0,   253,   254,   255,   256,   257,     0,     0,
6878:      258,     0,   260,     0,     0,   262,   263,   264,     0,     0,
6879:      265,   266,   267,   268,   269,   764,   271,   272,   273,   274,
6880:      275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
6881:      285,   286,   287,   288,   765,     0,   766,   292,   293,   294,
6882:      767,     0,   296,   297,     0,   299,     0,   768,   301,   769,
6883:      303,   304,   305,     0,   306,   307,  1240,     0,   308,   309,
6884:      310,     0,     0,   311,   770,     0,   314,     0,   771,   317,
6885:      318,   319,   320,   321,   322,   323,   324,   325,   326,     0,
6886:      327,   328,   772,   330,   331,   773,   333,   334,   335,     0,
6887:      336,   337,   338,   339,   340,   341,     0,   342,   343,   344,
6888:      774,   346,   347,   348,   349,     0,   350,   351,   352,   353,
6889:      354,   355,   356,   357,   358,   359,   360,   361,   362,     0,
6890:      363,   364,     0,   366,   367,   368,   775,   370,   371,   372,
6891:      373,   374,   375,   376,   377,   378,   379,   380,     0,   381,
6892:      382,   383,   384,   385,     0,   386,   776,   388,   389,   390,
6893:        0,   392,   393,   777,   395,     0,   396,   397,   398,   399,
6894:      400,   401,   402,   403,   404,   405,   406,   778,   408,   779,
6895:      410,     0,   411,   412,     0,   413,     0,   415,   416,   417,
6896:      418,   419,     0,   780,   781,     0,     0,   422,   423,   782,
6897:      425,   783,  1241,   427,   428,   784,   430,   431,   432,   433,
6898:      434,     0,     0,   435,   436,   437,   438,   439,     0,     0,
6899:      440,   441,   442,   443,   444,  1130,   786,     0,   447,     0,
6900:      449,   450,   451,   452,     0,     0,   453,     0,     0,   454,
6901:      455,   456,   457,   458,   459,   787,   788,   789,   790,   791,
6902:      792,   793,   794,   795,   796,   797,   471,   472,   473,   474,
6903:      745,  1238,   549,     0,     0,     0,   821,  1242,  1243,     0,
6904:        0,     0,     0,     0,     0,     0,    94,    95,    96,    97,
6905:       98,    99,   100,   101,     0,   102,   103,   104,     0,     0,
6906:        0,     0,     0,     0,     0,   105,   106,     0,   107,   108,
6907:      109,     0,   111,   112,   113,   746,   747,     0,   748,   749,
6908:        0,   119,   120,   121,   122,   123,   124,     0,     0,   125,
6909:      126,   750,   751,   129,     0,   130,   131,   132,   133,   752,
6910:        0,     0,     0,   136,   137,   138,   139,   140,   141,     0,
6911:      143,   144,   145,     0,   146,   147,   148,   149,   150,   151,
6912:        0,     0,   153,   154,   155,     0,     0,     0,     0,     0,
6913:        0,     0,   157,   158,   159,   160,   161,   162,   163,   753,
6914:      754,   166,     0,   167,     0,   168,   169,   170,   171,   172,
6915:      173,     0,   174,   175,   176,   177,   178,     0,     0,   179,
6916:      180,   181,   182,   183,     0,   184,   185,   186,     0,   187,
6917:      188,   189,     0,   190,   191,   192,   193,   755,   195,   196,
6918:      197,   198,   199,   756,  1239,   201,     0,   202,   203,   757,
6919:      205,     0,   206,     0,   207,     0,     0,     0,   210,   211,
6920:      212,     0,   214,     0,   215,     0,   758,   759,   218,     0,
6921:      219,   220,   221,   222,   223,   224,   225,     0,   227,   228,
6922:      229,   230,     0,   231,   232,   233,   234,   235,   236,     0,
6923:      237,     0,   760,   240,   241,   242,   243,   244,   761,   762,
6924:        0,   763,     0,   248,     0,     0,   251,     0,   253,   254,
6925:      255,   256,   257,     0,     0,   258,     0,   260,     0,     0,
6926:      262,   263,   264,     0,     0,   265,   266,   267,   268,   269,
6927:      764,   271,   272,   273,   274,   275,   276,   277,   278,   279,
6928:      280,   281,   282,   283,   284,   285,   286,   287,   288,   765,
6929:        0,   766,   292,   293,   294,   767,     0,   296,   297,     0,
6930:      299,     0,   768,   301,   769,   303,   304,   305,     0,   306,
6931:      307,  1240,     0,   308,   309,   310,     0,     0,   311,   770,
6932:        0,   314,     0,   771,   317,   318,   319,   320,   321,   322,
6933:      323,   324,   325,   326,     0,   327,   328,   772,   330,   331,
6934:      773,   333,   334,   335,     0,   336,   337,   338,   339,   340,
6935:      341,     0,   342,   343,   344,   774,   346,   347,   348,   349,
6936:        0,   350,   351,   352,   353,   354,   355,   356,   357,   358,
6937:      359,   360,   361,   362,     0,   363,   364,     0,   366,   367,
6938:      368,   775,   370,   371,   372,   373,   374,   375,   376,   377,
6939:      378,   379,   380,     0,   381,   382,   383,   384,   385,     0,
6940:      386,   776,   388,   389,   390,     0,   392,   393,   777,   395,
6941:        0,   396,   397,   398,   399,   400,   401,   402,   403,   404,
6942:      405,   406,   778,   408,   779,   410,     0,   411,   412,     0,
6943:      413,     0,   415,   416,   417,   418,   419,     0,   780,   781,
6944:        0,     0,   422,   423,   782,   425,   783,  1241,   427,   428,
6945:      784,   430,   431,   432,   433,   434,     0,     0,   435,   436,
6946:      437,   438,   439,     0,     0,   440,   441,   442,   443,   444,
6947:     1130,   786,     0,   447,     0,   449,   450,   451,   452,     0,
6948:        0,   453,     0,     0,   454,   455,   456,   457,   458,   459,
6949:      787,   788,   789,   790,   791,   792,   793,   794,   795,   796,
6950:      797,   471,   472,   473,   474,     0,  1315,     0,     0,  1316,
6951:        0,     0,  1242,  1243,  1317,  1318,  1319,     0,     0,     0,
6952:        0,     0,     0,     0,  1315,     0,     0,  1316,     0,     0,
6953:        0,  1320,  1317,  1318,  1319,  1774,     0,     0,     0,  1322,
6954:        0,     0,     0,     0,     0,     0,  1323,     0,     0,  1320,
6955:        0,     0,     0,  1315,     0,     0,  1316,  1322,     0,     0,
6956:        0,  1317,  1318,  1319,  1323,     0,     0,     0,     0,     0,
6957:        0,  1324,  1315,     0,     0,  1316,     0,     0,  1320,     0,
6958:     1317,  1318,  1319,     0,     0,     0,  1322,     0,     0,  1324,
6959:        0,     0,     0,  1323,     0,     0,     0,  1320,     0,     0,
6960:     1974,     0,     0,     0,     0,  1322,     0,     0,     0,     0,
6961:        0,     0,  1323,     0,     0,     0,     0,     0,  1324,     0,
6962:        0,     0,  1775,     0,     0,     0,     0,     0,     0,     0,
6963:        0,     0,     0,     0,     0,     0,     0,  1324,  1315,     0,
6964:        0,  1316,     0,     0,     0,     0,  1317,  1318,  1319,     0,
6965:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6966:        0,     0,     0,  1320,     0,     0,     0,     0,     0,     0,
6967:        0,  1322,  1325,     0,     0,     0,     0,     0,  1323,     0,
6968:     2012,     0,     0,     0,     0,  2013,     0,     0,  1326,     0,
6969:     1325,     0,     0,  1327,     0,     0,     0,     0,     0,     0,
6970:        0,     0,     0,  1324,     0,     0,  1326,     0,  3000,     0,
6971:        0,  1327,     0,     0,     0,  1328,  1329,     0,     0,  1325,
6972:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
6973:        0,     0,     0,  1328,  1329,  1326,     0,     0,  1325,     0,
6974:     1327,     0,     0,     0,     0,     0,     0,  1330,     0,     0,
6975:        0,     0,     0,     0,  1326,     0,     0,     0,     0,  1327,
6976:        0,     0,  1328,  1329,     0,     0,     0,  1331,     0,     0,
6977:     1332,     0,     0,     0,     0,     0,  1330,     0,     0,     0,
6978:        0,  1328,  1329,     0,  1333,  1331,     0,  1334,  1332,     0,
6979:        0,     0,     0,     0,     0,  1330,     0,     0,     0,     0,
6980:        0,     0,  1333,     0,  1325,  1334,     0,     0,     0,     0,
6981:        0,     0,     0,     0,  1331,     0,     0,  1332,     0,     0,
6982:     1326,     0,     0,     0,     0,  1327,     0,     0,     0,     0,
6983:        0,  1333,     0,  1331,  1334,     0,  1332,     0,     0,     0,
6984:        0,     0,     0,     0,     0,     0,     0,  1328,  1329,     0,
6985:     1333,     0,     0,  1334,     0,     0,     0,  3001,     0,     0,
6986:        0,  1330,     0,     0,     0,     0,     0,     0,     0,     0,
6987:        0,     0,     0,     0,     0,  1315,  1335,     0,  1316,     0,
6988:        0,     0,     0,  1317,  1318,  1319,     0,     0,     0,     0,
6989:        0,     0,     0,     0,  1335,     0,     0,     0,     0,  1331,
6990:     1320,     0,  1332,  2018,     0,     0,     0,     0,  1322,     0,
6991:        0,     0,     0,     0,     0,  1323,  1333,     0,     0,  1334,
6992:        0,     0,     0,  1335,     0,     0,     0,     0,     0,     0,
6993:        0,     0,     0,     0,     0,  1779,     0,  1986,     0,     0,
6994:     1324,     0,  1335,     0,     0,     0,     0,     0,     0,     0,
6995:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6996:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
6997:        0,     0,     0,     0,     0,     0,  1336,     0,     0,  1337,
6998:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
6999:        0,     0,     0,     0,  1336,     0,     0,  1337,  1338,  1339,
7000:        0,  1340,  1341,  1342,  1343,  1344,  1345,     0,  1335,     0,
7001:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7002:        0,     0,     0,  1336,     0,     0,  1337,  1338,  1339,     0,
7003:     1340,  1341,  1342,  1343,  1344,  1345,     0,     0,     0,     0,
7004:        0,  1325,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,
7005:     1341,  1342,  1343,  1344,  1345,     0,  1315,  1326,     0,  1316,
7006:        0,     0,  1327,     0,  1317,  1318,  1319,     0,     0,     0,
7007:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7008:        0,  1320,     0,     0,  1328,  1329,     0,     0,     0,  1322,
7009:        0,     0,     0,     0,     0,     0,  1323,     0,  1330,     0,
7010:        0,     0,     0,     0,     0,     0,     0,     0,  1336,     0,
7011:        0,  1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,
7012:     1345,  1324,     0,     0,     0,     0,     0,     0,     0,     0,
7013:        0,     0,     0,     0,     0,     0,  1331,  1315,     0,  1332,
7014:     1316,     0,     0,     0,     0,  1317,  1318,  1319,     0,     0,
7015:        0,     0,     0,  1333,     0,     0,  1334,     0,     0,     0,
7016:        0,     0,  1320,     0,     0,  2025,     0,     0,     0,     0,
7017:     1322,     0,     0,     0,     0,     0,  1315,  1323,     0,  1316,
7018:        0,     0,     0,     0,  1317,  1318,  1319,     0,     0,     0,
7019:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7020:        0,  1320,  1324,     0,     0,     0,     0,     0,     0,  1322,
7021:        0,     0,     0,     0,     0,     0,  1323,  2023,     0,     0,
7022:        0,  1315,  1325,     0,  1316,     0,     0,     0,     0,  1317,
7023:     1318,  1319,     0,     0,     0,     0,     0,     0,  1326,     0,
7024:        0,  1324,     0,  1327,     0,  1335,  1320,     0,     0,  2292,
7025:        0,     0,     0,     0,  1322,     0,     0,     0,     0,     0,
7026:        0,  1323,     0,     0,     0,  1328,  1329,     0,     0,     0,
7027:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
7028:        0,     0,     0,     0,     0,     0,  1324,     0,     0,     0,
7029:        0,     0,     0,     0,     0,     0,  1315,     0,     0,  1316,
7030:        0,     0,     0,  1325,  1317,  1318,  1319,     0,     0,     0,
7031:        0,     0,     0,     0,     0,     0,     0,  1331,     0,  1326,
7032:     1332,  1320,     0,     0,  1327,     0,     0,     0,     0,  1322,
7033:        0,     0,     0,     0,  1333,     0,  1323,  1334,     0,     0,
7034:        0,     0,  1325,     0,     0,  1336,  1328,  1329,  1337,  1338,
7035:     1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,  1326,     0,
7036:     1330,  1324,  1315,  1327,     0,  1316,     0,     0,     0,     0,
7037:     1317,  1318,  1319,     0,     0,     0,     0,     0,     0,     0,
7038:        0,     0,     0,     0,     0,  1328,  1329,  1325,     0,     0,
7039:        0,     0,     0,     0,     0,  1322,     0,     0,  1331,  1330,
7040:        0,  1332,  1323,  1326,     0,     0,     0,     0,  1327,     0,
7041:        0,     0,     0,     0,     0,  1333,     0,     0,  1334,     0,
7042:        0,     0,     0,     0,     0,     0,  1335,  1324,     0,     0,
7043:     1328,  1329,     0,     0,     0,     0,     0,  1331,     0,     0,
7044:     1332,     0,     0,     0,  1330,     0,     0,     0,     0,     0,
7045:        0,     0,     0,     0,  1333,  1315,     0,  1334,  1316,     0,
7046:        0,     0,  1325,  1317,  1318,  1319,     0,     0,     0,     0,
7047:        0,     0,     0,     0,     0,     0,     0,     0,  1326,     0,
7048:     1320,     0,  1331,  1327,     0,  1332,     0,     0,  1322,     0,
7049:        0,     0,     0,     0,     0,  1323,     0,     0,     0,  1333,
7050:        0,     0,  1334,     0,     0,  1328,  1329,  1335,     0,     0,
7051:        0,     0,     0,     0,     0,     0,     0,     0,     0,  1330,
7052:     1324,     0,     0,     0,     0,     0,  1336,     0,  1325,  1337,
7053:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
7054:        0,     0,     0,     0,  1326,     0,  1335,     0,     0,  1327,
7055:        0,     0,     0,     0,     0,     0,     0,  1331,     0,     0,
7056:     1332,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7057:        0,  1328,  1329,     0,  1333,     0,     0,  1334,  2248,     0,
7058:        0,     0,     0,     0,     0,  1330,     0,     0,     0,     0,
7059:        0,  1335,     0,     0,     0,     0,     0,     0,     0,     0,
7060:        0,     0,     0,     0,     0,     0,     0,  1336,     0,     0,
7061:     1337,  1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,
7062:        0,  1325,     0,  1331,     0,     0,  1332,     0,     0,     0,
7063:        0,     0,     0,     0,     0,     0,     0,  1326,     0,     0,
7064:     1333,     0,  1327,     0,     0,     0,  1336,     0,     0,  1337,
7065:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
7066:        0,     0,     0,     0,  1328,  1329,  1335,     0,     0,     0,
7067:        0,     0,     0,     0,     0,     0,     0,     0,  1330,     0,
7068:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7069:        0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,  1341,
7070:     1342,  1343,  1344,  1345,     0,     0,     0,     0,     0,     0,
7071:        0,     0,     0,     0,     0,     0,  1331,     0,     0,  1332,
7072:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7073:        0,     0,  1335,  1333,     0,     0,  1334,     0,     0,     0,
7074:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7075:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7076:        0,     0,     0,     0,     0,     0,  1336,     0,     0,  1337,
7077:     1338,  1339,     0,  1340,  1341,  1342,  1343,  1344,  1345,     0,
7078:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7079:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7080:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7081:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7082:        0,     0,     0,     0,     0,  1335,     0,     0,     0,     0,
7083:        0,     0,  1336,     0,     0,  1337,  1338,  1339,     0,  1340,
7084:     1341,  1342,  1343,  1344,  1345,     0,     0,     0,     0,     0,
7085:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7086:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7087:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7088:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7089:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7090:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7091:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7092:        0,     0,  1056,     0,  1682,  1336,     0,     0,  1337,  1338,
7093:     1339,     0,  1340,  1341,  1342,  1343,  1794,  1345,    94,    95,
7094:       96,    97,    98,    99,   100,   101,  1057,   102,   103,   104,
7095:     1058,  1059,  1060,  1061,  1062,  1063,  1064,   105,   106,  1065,
7096:      107,   108,   109,     0,   111,   112,   113,   746,   747,     0,
7097:      748,   749,  1066,   119,   120,   121,   122,   123,   124,  1067,
7098:     1068,   125,   126,   750,   751,   129,  1069,   130,   131,   132,
7099:      133,   752,  1070,     0,  1071,   136,   137,   138,   139,   140,
7100:      141,     0,   143,   144,   145,  1072,   146,   147,   148,   149,
7101:      150,   151,  1073,     0,   153,   154,   155,  1074,  1075,  1076,
7102:        0,  1077,  1078,  1079,   157,   158,   159,   160,   161,   162,
7103:      163,   753,   754,   166,  1080,   167,  1081,   168,   169,   170,
7104:      171,   172,   173,  1082,   174,   175,   176,   177,   178,  1083,
7105:     1084,   179,   180,   181,   182,   183,  1085,   184,   185,   186,
7106:     1086,   187,   188,   189,  1087,   190,   191,   192,   193,   755,
7107:      195,   196,   197,   198,   199,   756,  1088,   201,  1089,   202,
7108:      203,   757,   205,  1090,   206,  1091,   207,     0,  1092,     0,
7109:      210,   211,   212,     0,   214,  1093,   215,  1094,   758,   759,
7110:      218,  1095,   219,   220,   221,   222,   223,   224,   225,     0,
7111:      227,   228,   229,   230,  1096,   231,   232,   233,   234,   235,
7112:      236,  1097,   237,     0,   760,   240,   241,   242,   243,   244,
7113:      761,   762,  1098,   763,  1099,   248,     0,     0,   251,     0,
7114:      253,   254,   255,   256,   257,  1100,  1101,   258,     0,   260,
7115:        0,  1102,   262,   263,   264,  1103,  1104,   265,   266,   267,
7116:      268,   269,   764,   271,   272,   273,   274,   275,   276,   277,
7117:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7118:      288,   765,     0,   766,   292,   293,   294,   767,  1105,   296,
7119:      297,     0,   299,  1106,   768,   301,   769,   303,   304,   305,
7120:     1107,   306,   307,  1108,  1109,   308,   309,   310,  1110,  1111,
7121:      311,   770,     0,   314,     0,   771,   317,   318,   319,   320,
7122:      321,   322,   323,   324,   325,   326,  1112,   327,   328,   772,
7123:      330,   331,   773,   333,   334,   335,  1113,   336,   337,   338,
7124:      339,   340,   341,  1114,   342,   343,   344,   774,   346,   347,
7125:      348,   349,  1115,   350,   351,   352,   353,   354,   355,   356,
7126:      357,   358,   359,   360,   361,   362,  1116,   363,   364,     0,
7127:      366,   367,   368,   775,   370,   371,   372,   373,   374,   375,
7128:      376,   377,   378,   379,   380,  1117,   381,   382,   383,   384,
7129:      385,  1118,   386,   776,   388,   389,   390,     0,   392,   393,
7130:      777,   395,  1119,   396,   397,   398,   399,   400,   401,   402,
7131:      403,   404,   405,   406,   778,   408,   779,   410,  1120,   411,
7132:      412,  1121,   413,     0,   415,   416,   417,   418,   419,  1122,
7133:      780,   781,  1123,  1124,   422,   423,   782,   425,   783,  1125,
7134:      427,   428,   784,   430,   431,   432,   433,   434,  1126,  1127,
7135:      435,   436,   437,   438,   439,  1128,  1129,   440,   441,   442,
7136:      443,   444,  1130,   786,  1131,   447,     0,   449,   450,   451,
7137:      452,  1132,  1133,   453,  1134,  1135,   454,   455,   456,   457,
7138:      458,   459,   787,   788,   789,   790,   791,   792,   793,   794,
7139:      795,   796,   797,   471,   472,   473,   474,  1056,     0,     0,
7140:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7141:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7142:      101,  1057,   102,   103,   104,  1058,  1059,  1060,  1061,  1062,
7143:     1063,  1064,   105,   106,  1065,   107,   108,   109,     0,   111,
7144:      112,   113,   746,   747,     0,   748,   749,  1066,   119,   120,
7145:      121,   122,   123,   124,  1067,  1068,   125,   126,   750,   751,
7146:      129,  1069,   130,   131,   132,   133,   752,  1070,     0,  1071,
7147:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7148:     1072,   146,   147,   148,   149,   150,   151,  1073,     0,   153,
7149:      154,   155,  1074,  1075,  1076,     0,  1077,  1078,  1079,   157,
7150:      158,   159,   160,   161,   162,   163,   753,   754,   166,  1080,
7151:      167,  1081,   168,   169,   170,   171,   172,   173,  1082,   174,
7152:      175,   176,   177,   178,  1083,  1084,   179,   180,   181,   182,
7153:      183,  1085,   184,   185,   186,  1086,   187,   188,   189,  1087,
7154:      190,   191,   192,   193,   755,   195,   196,   197,   198,   199,
7155:      756,  1088,   201,  1089,   202,   203,   757,   205,  1090,   206,
7156:     1091,   207,     0,  1092,     0,   210,   211,   212,     0,   214,
7157:     1093,   215,  1094,   758,   759,   218,  1095,   219,   220,   221,
7158:      222,   223,   224,   225,     0,   227,   228,   229,   230,  1096,
7159:      231,   232,   233,   234,   235,   236,  1097,   237,     0,   760,
7160:      240,   241,   242,   243,   244,   761,   762,  1098,   763,  1099,
7161:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7162:     1100,  1101,   258,     0,   260,     0,  1102,   262,   263,   264,
7163:     1103,  1104,   265,   266,   267,   268,   269,   764,   271,   272,
7164:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7165:      283,   284,   285,   286,   287,   288,   765,     0,   766,   292,
7166:      293,   294,   767,  1105,   296,   297,     0,   299,  1106,   768,
7167:      301,   769,   303,   304,   305,  1107,   306,   307,  1108,  1109,
7168:      308,   309,   310,  1110,  1111,   311,   770,     0,   314,     0,
7169:      771,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7170:      326,  1112,   327,   328,   772,   330,   331,   773,   333,   334,
7171:      335,  1113,   336,   337,   338,   339,   340,   341,  1114,   342,
7172:      343,   344,   774,   346,   347,   348,   349,  1115,   350,   351,
7173:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7174:      362,  1116,   363,   364,     0,   366,   367,   368,   775,   370,
7175:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7176:     1117,   381,   382,   383,   384,   385,  1118,   386,   776,   388,
7177:      389,   390,     0,   392,   393,   777,   395,  1119,   396,   397,
7178:      398,   399,   400,   401,   402,   403,   404,   405,   406,   778,
7179:      408,   779,   410,  1120,   411,   412,  1121,   413,     0,   415,
7180:      416,   417,   418,   419,  1122,   780,   781,  1123,  1124,   422,
7181:      423,   782,   425,   783,  1125,   427,   428,   784,   430,   431,
7182:      432,   433,   434,  1126,  1127,   435,   436,   437,   438,   439,
7183:     1128,  1129,   440,   441,   442,   443,   444,  1130,   786,  1131,
7184:      447,     0,   449,   450,   451,   452,  1132,  1133,   453,  1134,
7185:     1135,   454,   455,   456,   457,   458,   459,   787,   788,   789,
7186:      790,   791,   792,   793,   794,   795,   796,   797,   471,   472,
7187:      473,   474,  1056,     0,     0,     0,     0,     0,     0,     0,
7188:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7189:       96,    97,  1829,    99,   100,   101,  1057,   102,   103,   104,
7190:     1058,  1059,  1060,  1061,  1062,  1063,  1064,   105,   106,  1065,
7191:      107,   108,   109,     0,   111,   112,   113,   746,   747,     0,
7192:      748,   749,  1066,   119,   120,   121,   122,   123,   124,  1067,
7193:     1068,   125,   126,   750,   751,   129,  1069,   130,   131,   132,
7194:      133,   752,  1070,     0,  1071,   136,   137,   138,   139,   140,
7195:      141,     0,   143,   144,   145,  1072,   146,   147,   148,   149,
7196:      150,   151,  1073,     0,   153,   154,   155,  1074,  1075,  1076,
7197:        0,  1077,  1078,  1079,   157,   158,   159,   160,   161,   162,
7198:      163,   753,   754,   166,  1080,   167,  1081,   168,   169,   170,
7199:      171,   172,   173,  1082,   174,   175,   176,   177,   178,  1083,
7200:     1084,   179,   180,   181,  1830,   183,  1085,   184,   185,   186,
7201:     1086,   187,   188,   189,  1087,   190,   191,   192,   193,   755,
7202:      195,   196,   197,   198,   199,   756,  1088,   201,  1089,   202,
7203:      203,   757,   205,  1090,   206,  1091,   207,     0,  1092,     0,
7204:      210,   211,   212,     0,   214,  1093,   215,  1094,   758,   759,
7205:      218,  1095,   219,   220,   221,   222,   223,   224,   225,     0,
7206:      227,   228,   229,   230,  1096,   231,   232,   233,   234,   235,
7207:      236,  1097,   237,     0,   760,   240,   241,   242,   243,   244,
7208:      761,   762,  1098,   763,  1099,   248,     0,     0,   251,     0,
7209:      253,   254,   255,   256,   257,  1100,  1101,   258,     0,   260,
7210:        0,  1102,   262,   263,   264,  1103,  1104,   265,   266,   267,
7211:      268,   269,   764,   271,   272,   273,   274,   275,   276,   277,
7212:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7213:      288,   765,     0,   766,   292,   293,   294,   767,  1105,   296,
7214:      297,     0,   299,  1106,   768,   301,   769,   303,   304,   305,
7215:     1107,   306,   307,  1108,  1109,   308,   309,   310,  1110,  1111,
7216:      311,   770,     0,   314,     0,   771,   317,   318,   319,   320,
7217:      321,   322,   323,   324,   325,   326,  1112,   327,   328,   772,
7218:      330,   331,   773,   333,   334,   335,  1113,   336,   337,   338,
7219:      339,   340,   341,  1114,   342,   343,   344,   774,   346,   347,
7220:      348,   349,  1115,   350,   351,   352,   353,   354,   355,   356,
7221:      357,   358,   359,   360,   361,   362,  1116,   363,   364,     0,
7222:      366,   367,   368,   775,   370,   371,   372,   373,   374,   375,
7223:      376,   377,   378,   379,   380,  1117,   381,   382,   383,   384,
7224:      385,  1118,  1831,   776,   388,   389,   390,     0,   392,   393,
7225:      777,   395,  1119,   396,   397,   398,   399,   400,   401,   402,
7226:      403,   404,   405,   406,   778,   408,   779,   410,  1120,   411,
7227:      412,  1121,   413,     0,   415,   416,   417,   418,   419,  1122,
7228:      780,   781,  1123,  1124,   422,   423,   782,   425,   783,  1125,
7229:      427,   428,   784,   430,   431,   432,   433,   434,  1126,  1127,
7230:      435,   436,   437,   438,   439,  1128,  1129,   440,   441,   442,
7231:      443,   444,  1130,   786,  1131,   447,     0,   449,   450,   451,
7232:      452,  1132,  1133,   453,  1134,  1135,   454,   455,   456,   457,
7233:      458,   459,   787,   788,   789,   790,   791,   792,   793,   794,
7234:      795,   796,   797,   471,   472,   473,   474,    93,     0,     0,
7235:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7236:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7237:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7238:        0,     0,   105,   106,     0,   107,   108,   109,   110,   111,
7239:      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,
7240:      121,   122,   123,   124,     0,   828,   125,   126,   127,   128,
7241:      129,     0,   130,   131,   132,   133,   831,     0,   832,     0,
7242:      136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
7243:        0,   146,   147,   148,   149,   150,   151,     0,   152,   153,
7244:      154,   155,   833,   834,   835,   836,   837,   838,   839,   157,
7245:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7246:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7247:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7248:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7249:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7250:      844,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7251:        0,   207,   208,     0,   209,   210,   211,   212,   213,   214,
7252:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7253:      222,   223,   224,   225,   226,   227,   228,   229,   230,     0,
7254:      231,   232,   233,   234,   235,   236,     0,   237,   238,   239,
7255:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7256:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
7257:        0,     0,   258,   259,   260,   261,     0,   262,   263,   264,
7258:      852,   853,   265,   266,   267,   268,   269,   270,   271,   272,
7259:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7260:      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
7261:      293,   294,   295,     0,   296,   297,   298,   299,     0,   858,
7262:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
7263:      308,   309,   310,     0,     0,   311,   312,   313,   314,   315,
7264:      861,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7265:      326,     0,   327,   328,   862,   330,   331,   332,   333,   334,
7266:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7267:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7268:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7269:      362,     0,   363,   364,   365,   366,   367,   368,   369,   370,
7270:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7271:        0,   381,   382,   383,   384,   385,   865,   386,   387,   388,
7272:      389,   390,   391,   392,   393,   394,   395,     0,   396,   397,
7273:      398,   399,   400,   401,   402,   403,   404,   405,   406,   407,
7274:      408,   867,   410,     0,   411,   412,     0,   413,   414,   415,
7275:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7276:      423,   870,   425,   871,     0,   427,   428,   873,   430,   431,
7277:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7278:      874,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7279:      447,   448,   449,   450,   451,   452,     0,     0,   453,     0,
7280:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7281:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7282:      473,   474,    93,     0,     0,     0,     0,     0,     0,     0,
7283:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7284:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7285:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7286:      107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
7287:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7288:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7289:      133,   134,     0,   135,     0,   136,   137,   138,   139,   140,
7290:      141,   142,   143,   144,   145,     0,   146,   147,   148,   149,
7291:      150,   151,     0,   152,   153,   154,   155,     0,     0,     0,
7292:      156,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7293:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7294:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7295:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7296:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7297:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7298:      203,   204,   205,     0,   206,     0,   207,   208,     0,   209,
7299:      210,   211,   212,   213,   214,     0,   215,     0,   216,   217,
7300:      218,     0,   219,   220,   221,   222,   223,   224,   225,   226,
7301:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7302:      236,     0,   237,   238,   239,   240,   241,   242,   243,   244,
7303:      245,   246,     0,   247,     0,   248,   249,   250,   251,   252,
7304:      253,   254,   255,   256,   257,     0,     0,   258,   259,   260,
7305:      261,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7306:      268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
7307:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7308:      288,   289,   290,   291,   292,   293,   294,   295,     0,   296,
7309:      297,   298,   299,     0,   300,   301,   302,   303,   304,   305,
7310:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7311:      311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
7312:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7313:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7314:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7315:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7316:      357,   358,   359,   360,   361,   362,     0,   363,   364,   365,
7317:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7318:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7319:      385,     0,   386,   387,   388,   389,   390,   391,   392,   393,
7320:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7321:      403,   404,   405,   406,   407,   408,   409,   410,     0,   411,
7322:      412,     0,   413,   414,   415,   416,   417,   418,   419,     0,
7323:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7324:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7325:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7326:      443,   444,   445,   446,     0,   447,   448,   449,   450,   451,
7327:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7328:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7329:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
7330:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7331:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7332:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7333:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7334:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
7335:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
7336:      129,  1436,   130,   131,   132,   133,   134,     0,     0,  1437,
7337:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7338:     1438,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7339:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7340:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7341:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7342:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7343:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7344:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7345:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7346:     1439,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7347:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7348:      222,   223,  1440,   225,     0,   227,   228,   229,   230,     0,
7349:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
7350:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7351:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7352:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7353:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
7354:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7355:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
7356:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
7357:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
7358:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
7359:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7360:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7361:      335,  1441,   336,   337,   338,   339,   340,   341,     0,   342,
7362:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7363:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7364:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
7365:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7366:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
7367:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
7368:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
7369:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
7370:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7371:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
7372:      432,   433,   434,     0,  1442,   435,   436,   437,   438,   439,
7373:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7374:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7375:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7376:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7377:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
7378:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7379:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7380:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7381:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7382:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7383:        0,   125,   126,   127,   128,   129,  1436,   130,   131,   132,
7384:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7385:      141,     0,   143,   144,   145,  1438,   146,   147,   148,   149,
7386:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7387:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7388:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7389:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7390:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7391:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7392:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7393:      203,   204,   205,     0,   206,  1439,   207,     0,     0,     0,
7394:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7395:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
7396:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7397:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7398:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7399:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7400:     1899,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7401:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7402:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7403:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7404:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7405:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7406:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7407:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7408:      330,   331,   332,   333,   334,   335,  1441,   336,   337,   338,
7409:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7410:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7411:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7412:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7413:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7414:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7415:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7416:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7417:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7418:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7419:      427,   428,   429,   430,   431,   432,   433,   434,     0,  1442,
7420:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7421:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7422:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7423:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7424:      468,   469,   470,   471,   472,   473,   474,   745,     0,   549,
7425:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7426:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7427:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7428:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7429:      112,   113,   746,   747,     0,   748,   749,     0,   119,   120,
7430:      121,   122,   123,   124,     0,     0,   125,   126,   750,   751,
7431:      129,     0,   130,   131,   132,   133,   752,     0,     0,     0,
7432:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7433:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7434:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7435:      158,   159,   160,   161,   162,   163,   753,   754,   166,     0,
7436:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7437:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7438:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7439:      190,   191,   192,   193,   755,   195,   196,   197,   198,   199,
7440:      756,  1239,   201,     0,   202,   203,   757,   205,     0,   206,
7441:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7442:        0,   215,     0,   758,   759,   218,     0,   219,   220,   221,
7443:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
7444:      231,   232,   233,   234,   235,   236,     0,   237,     0,   760,
7445:      240,   241,   242,   243,   244,   761,   762,     0,   763,     0,
7446:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7447:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7448:        0,     0,   265,   266,   267,   268,   269,   764,   271,   272,
7449:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7450:      283,   284,   285,   286,   287,   288,   765,     0,   766,   292,
7451:      293,   294,   767,     0,   296,   297,     0,   299,     0,   768,
7452:      301,   769,   303,   304,   305,     0,   306,   307,  1240,     0,
7453:      308,   309,   310,     0,     0,   311,   770,     0,   314,     0,
7454:      771,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7455:      326,     0,   327,   328,   772,   330,   331,   773,   333,   334,
7456:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7457:      343,   344,   774,   346,   347,   348,   349,     0,   350,   351,
7458:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7459:      362,     0,   363,   364,     0,   366,   367,   368,   775,   370,
7460:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7461:        0,   381,   382,   383,   384,   385,     0,   386,   776,   388,
7462:      389,   390,     0,   392,   393,   777,   395,     0,   396,   397,
7463:      398,   399,   400,   401,   402,   403,   404,   405,   406,   778,
7464:      408,   779,   410,     0,   411,   412,     0,   413,     0,   415,
7465:      416,   417,   418,   419,     0,   780,   781,     0,     0,   422,
7466:      423,   782,   425,   783,  1241,   427,   428,   784,   430,   431,
7467:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7468:        0,     0,   440,   441,   442,   443,   444,  1130,   786,     0,
7469:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7470:        0,   454,   455,   456,   457,   458,   459,   787,   788,   789,
7471:      790,   791,   792,   793,   794,   795,   796,   797,   471,   472,
7472:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
7473:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7474:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7475:        3,     4,     0,     0,     0,     0,     0,   105,   106,     0,
7476:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7477:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7478:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7479:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7480:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7481:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7482:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7483:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7484:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7485:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7486:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7487:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7488:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7489:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7490:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
7491:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7492:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7493:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7494:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7495:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7496:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7497:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7498:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7499:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7500:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7501:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7502:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7503:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7504:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7505:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7506:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7507:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7508:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7509:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7510:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7511:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7512:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7513:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7514:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7515:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7516:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7517:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7518:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7519:      468,   469,   470,   471,   472,   473,   474,   500,     0,   581,
7520:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7521:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7522:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7523:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7524:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
7525:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
7526:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
7527:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7528:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7529:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7530:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7531:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7532:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7533:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7534:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7535:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7536:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7537:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7538:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
7539:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
7540:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7541:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7542:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7543:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
7544:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7545:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
7546:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
7547:      301,   302,   303,   304,   305,     0,   306,   307,     0,   582,
7548:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
7549:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7550:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7551:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7552:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7553:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7554:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
7555:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7556:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
7557:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
7558:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
7559:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
7560:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7561:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
7562:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7563:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7564:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7565:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7566:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7567:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
7568:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7569:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7570:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7571:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7572:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7573:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7574:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7575:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7576:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7577:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7578:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7579:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7580:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7581:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7582:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7583:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7584:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7585:      218,     0,   219,   220,   221,   222,   223,   625,   225,     0,
7586:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7587:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7588:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7589:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7590:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7591:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7592:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7593:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7594:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7595:        0,   306,   307,     0,   582,   308,   309,   310,     0,     0,
7596:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7597:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7598:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7599:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7600:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7601:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7602:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7603:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7604:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7605:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7606:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7607:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7608:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7609:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7610:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7611:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7612:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7613:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7614:      468,   469,   470,   471,   472,   473,   474,   745,     0,     0,
7615:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7616:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7617:      101,     0,   102,   103,   104,     3,     4,     0,     0,     0,
7618:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7619:      112,   113,   746,   747,     0,   748,   749,     0,   119,   120,
7620:      121,   122,   123,   124,     0,     0,   125,   126,   750,   751,
7621:      129,     0,   130,   131,   132,   133,   752,     0,     0,     0,
7622:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7623:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7624:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7625:      158,   159,   160,   161,   162,   163,   753,   754,   166,     0,
7626:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7627:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7628:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7629:      190,   191,   192,   193,   755,   195,   196,   197,   198,   199,
7630:      756,     0,   201,     0,   202,   203,   757,   205,     0,   206,
7631:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7632:        0,   215,     0,   758,   759,   218,     0,   219,   220,   221,
7633:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
7634:      231,   232,   233,   234,   235,   236,     0,   237,     0,   760,
7635:      240,   241,   242,   243,   244,   761,   762,     0,   763,     0,
7636:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7637:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7638:        0,     0,   265,   266,   267,   268,   269,   764,   271,   272,
7639:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7640:      283,   284,   285,   286,   287,   288,   765,     0,   766,   292,
7641:      293,   294,   767,     0,   296,   297,     0,   299,     0,   768,
7642:      301,   769,   303,   304,   305,     0,   306,   307,     0,     0,
7643:      308,   309,   310,     0,     0,   311,   770,     0,   314,     0,
7644:      771,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7645:      326,     0,   327,   328,   772,   330,   331,   773,   333,   334,
7646:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7647:      343,   344,   774,   346,   347,   348,   349,     0,   350,   351,
7648:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7649:      362,     0,   363,   364,     0,   366,   367,   368,   775,   370,
7650:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7651:        0,   381,   382,   383,   384,   385,     0,   386,   776,   388,
7652:      389,   390,     0,   392,   393,   777,   395,     0,   396,   397,
7653:      398,   399,   400,   401,   402,   403,   404,   405,   406,   778,
7654:      408,   779,   410,     0,   411,   412,     0,   413,     0,   415,
7655:      416,   417,   418,   419,     0,   780,   781,     0,     0,   422,
7656:      423,   782,   425,   783,     0,   427,   428,   784,   430,   431,
7657:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7658:        0,     0,   440,   441,   442,   443,   444,  1130,   786,     0,
7659:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7660:        0,   454,   455,   456,   457,   458,   459,   787,   788,   789,
7661:      790,   791,   792,   793,   794,   795,   796,   797,   471,   472,
7662:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
7663:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7664:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7665:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7666:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7667:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7668:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7669:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7670:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7671:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7672:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7673:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7674:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7675:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7676:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7677:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7678:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7679:      210,   211,   212,     0,  1736,     0,   215,     0,   216,   217,
7680:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
7681:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7682:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7683:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7684:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7685:        0,     0,   262,   263,  1737,     0,     0,   265,   266,   267,
7686:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7687:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7688:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7689:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7690:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7691:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7692:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7693:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7694:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7695:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7696:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7697:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7698:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7699:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7700:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7701:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7702:      412,  1738,   413,     0,   415,  1739,   417,  1740,   419,     0,
7703:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7704:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7705:      435,   436,  1741,   438,   439,     0,     0,   440,   441,   442,
7706:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7707:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7708:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7709:      468,   469,   470,   471,   472,   473,   474,   500,  2687,     0,
7710:        0,     0,     0,  2688,     0,     0,     0,     0,     0,     0,
7711:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7712:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7713:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7714:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
7715:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
7716:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
7717:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7718:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7719:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7720:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7721:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7722:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7723:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7724:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7725:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7726:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7727:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7728:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
7729:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
7730:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7731:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7732:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7733:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
7734:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7735:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
7736:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
7737:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
7738:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
7739:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7740:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7741:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7742:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7743:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7744:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
7745:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7746:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
7747:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
7748:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
7749:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
7750:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7751:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
7752:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7753:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7754:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7755:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7756:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7757:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
7758:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7759:       96,    97,    98,    99,   100,   101,   501,   102,   103,   104,
7760:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7761:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7762:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7763:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7764:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7765:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7766:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7767:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7768:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7769:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7770:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7771:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7772:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7773:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7774:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7775:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
7776:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7777:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7778:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7779:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7780:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7781:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7782:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7783:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7784:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7785:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7786:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7787:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7788:      330,   331,   332,   503,   334,   335,     0,   336,   337,   338,
7789:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7790:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7791:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7792:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7793:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7794:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7795:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7796:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7797:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7798:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7799:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7800:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7801:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7802:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7803:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7804:      468,   469,   470,   471,   472,   473,   474,   500,     0,   549,
7805:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7806:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7807:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7808:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7809:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
7810:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
7811:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
7812:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7813:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7814:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7815:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7816:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7817:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7818:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7819:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7820:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7821:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7822:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7823:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
7824:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
7825:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7826:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7827:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7828:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
7829:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7830:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
7831:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
7832:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
7833:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
7834:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7835:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7836:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7837:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7838:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7839:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
7840:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7841:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
7842:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
7843:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
7844:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
7845:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7846:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
7847:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7848:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7849:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7850:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7851:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7852:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
7853:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7854:       96,    97,    98,    99,   100,   101,   556,   102,   103,   104,
7855:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7856:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7857:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7858:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7859:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7860:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7861:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7862:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7863:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7864:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7865:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7866:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7867:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7868:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7869:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7870:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
7871:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7872:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7873:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7874:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7875:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7876:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7877:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7878:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7879:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7880:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7881:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7882:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7883:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7884:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7885:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7886:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7887:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7888:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7889:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7890:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7891:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7892:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7893:      557,   421,     0,     0,   558,   423,   424,   425,   426,     0,
7894:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7895:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7896:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7897:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7898:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7899:      468,   469,   470,   471,   472,   473,   474,   500,     0,   581,
7900:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7901:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7902:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7903:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7904:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
7905:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
7906:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
7907:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
7908:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
7909:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
7910:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
7911:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
7912:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
7913:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
7914:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
7915:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
7916:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
7917:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
7918:      222,   223,   620,   225,     0,   227,   228,   229,   230,     0,
7919:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
7920:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
7921:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
7922:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
7923:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
7924:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
7925:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
7926:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
7927:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
7928:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
7929:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
7930:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
7931:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
7932:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
7933:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
7934:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
7935:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
7936:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
7937:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
7938:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
7939:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
7940:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
7941:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
7942:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
7943:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
7944:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
7945:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
7946:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
7947:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
7948:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
7949:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
7950:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
7951:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
7952:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
7953:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
7954:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
7955:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
7956:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
7957:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
7958:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
7959:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
7960:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
7961:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
7962:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
7963:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
7964:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
7965:      218,     0,   219,   220,   221,   222,   223,   623,   225,     0,
7966:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
7967:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
7968:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
7969:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
7970:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
7971:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
7972:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
7973:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
7974:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
7975:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
7976:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
7977:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
7978:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
7979:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
7980:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
7981:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
7982:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
7983:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
7984:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
7985:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
7986:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
7987:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
7988:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
7989:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
7990:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
7991:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
7992:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
7993:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
7994:      468,   469,   470,   471,   472,   473,   474,   500,     0,   581,
7995:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
7996:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
7997:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
7998:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
7999:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8000:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8001:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8002:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8003:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8004:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8005:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8006:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8007:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8008:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8009:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8010:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8011:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8012:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8013:      222,   223,   627,   225,     0,   227,   228,   229,   230,     0,
8014:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8015:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8016:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8017:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8018:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8019:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8020:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8021:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8022:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8023:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8024:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8025:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8026:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8027:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8028:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8029:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8030:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8031:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8032:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8033:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8034:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8035:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8036:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8037:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8038:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8039:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8040:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8041:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8042:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
8043:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8044:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8045:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8046:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8047:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8048:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8049:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8050:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8051:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8052:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8053:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8054:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8055:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8056:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8057:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8058:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8059:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8060:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
8061:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8062:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8063:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8064:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8065:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8066:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8067:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8068:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8069:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8070:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8071:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8072:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8073:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8074:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8075:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8076:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8077:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8078:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8079:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8080:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8081:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8082:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8083:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8084:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8085:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8086:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8087:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8088:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8089:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8090:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8091:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8092:      101,   655,   102,   103,   104,     0,     0,     0,     0,     0,
8093:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8094:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8095:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8096:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8097:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8098:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8099:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8100:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8101:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8102:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8103:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8104:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8105:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8106:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8107:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8108:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
8109:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8110:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8111:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8112:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8113:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8114:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8115:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8116:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8117:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8118:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8119:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8120:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8121:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8122:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8123:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8124:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8125:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8126:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8127:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8128:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8129:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8130:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8131:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8132:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8133:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8134:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8135:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8136:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8137:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
8138:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8139:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8140:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8141:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8142:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8143:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8144:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8145:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8146:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8147:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8148:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8149:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8150:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8151:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8152:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8153:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8154:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8155:      218,     0,   219,   220,   221,   222,   223,  1152,   225,     0,
8156:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8157:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8158:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8159:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8160:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8161:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8162:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8163:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8164:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8165:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8166:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8167:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8168:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8169:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8170:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8171:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8172:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8173:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8174:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8175:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8176:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8177:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8178:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8179:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8180:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8181:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8182:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8183:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8184:      468,   469,   470,   471,   472,   473,   474,   500,     0,   581,
8185:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8186:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8187:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8188:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8189:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8190:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8191:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8192:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8193:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8194:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8195:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8196:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8197:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8198:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8199:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8200:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8201:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8202:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8203:      222,   223,  1154,   225,     0,   227,   228,   229,   230,     0,
8204:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8205:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8206:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8207:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8208:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8209:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8210:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8211:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8212:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8213:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8214:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8215:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8216:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8217:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8218:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8219:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8220:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8221:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8222:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8223:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8224:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8225:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8226:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8227:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8228:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8229:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8230:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8231:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8232:      473,   474,   500,     0,   581,     0,     0,     0,     0,     0,
8233:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8234:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8235:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8236:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8237:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8238:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8239:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8240:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8241:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8242:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8243:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8244:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8245:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8246:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8247:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8248:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8249:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8250:      218,     0,   219,   220,   221,   222,   223,  1567,   225,     0,
8251:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8252:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8253:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8254:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8255:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8256:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8257:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8258:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8259:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8260:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8261:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8262:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8263:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8264:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8265:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8266:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8267:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8268:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8269:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8270:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8271:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8272:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8273:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8274:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8275:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8276:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8277:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8278:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8279:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8280:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8281:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8282:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8283:     2330,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8284:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8285:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8286:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8287:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8288:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8289:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8290:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8291:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8292:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8293:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8294:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8295:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8296:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8297:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8298:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
8299:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8300:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8301:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8302:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8303:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8304:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8305:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8306:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8307:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8308:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8309:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8310:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8311:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8312:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8313:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8314:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8315:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8316:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8317:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8318:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8319:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8320:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8321:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8322:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8323:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8324:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8325:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8326:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8327:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8328:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8329:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8330:        0,     0,     0,     0,     0,  2344,     0,   105,   106,     0,
8331:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8332:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8333:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8334:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8335:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8336:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8337:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8338:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8339:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8340:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8341:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8342:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8343:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8344:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8345:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
8346:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8347:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8348:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8349:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8350:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8351:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8352:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8353:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8354:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8355:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8356:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8357:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8358:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8359:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8360:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8361:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8362:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8363:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8364:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8365:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8366:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8367:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8368:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8369:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8370:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8371:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8372:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8373:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8374:      468,   469,   470,   471,   472,   473,   474,   500,     0,   581,
8375:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8376:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8377:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8378:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8379:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8380:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8381:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8382:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8383:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8384:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8385:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8386:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8387:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8388:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8389:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8390:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8391:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8392:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8393:      222,   223,  2481,   225,     0,   227,   228,   229,   230,     0,
8394:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8395:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8396:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8397:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8398:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8399:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8400:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8401:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8402:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8403:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8404:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8405:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8406:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8407:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8408:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8409:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8410:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8411:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8412:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8413:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8414:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8415:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8416:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8417:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8418:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8419:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8420:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8421:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8422:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8423:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8424:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8425:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8426:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8427:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8428:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8429:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8430:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8431:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8432:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8433:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8434:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8435:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8436:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8437:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8438:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8439:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8440:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
8441:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8442:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8443:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8444:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8445:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8446:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8447:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8448:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8449:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8450:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8451:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8452:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8453:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8454:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8455:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8456:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8457:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8458:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8459:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8460:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8461:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8462:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8463:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8464:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8465:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8466:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8467:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8468:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8469:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8470:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8471:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8472:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8473:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8474:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8475:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8476:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8477:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8478:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8479:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8480:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8481:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8482:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8483:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8484:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8485:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8486:        0,   207,     0,     0,     0,   210,   211,   212,     0,   568,
8487:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8488:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
8489:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8490:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8491:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8492:        0,     0,   258,     0,   260,     0,     0,   262,   263,   569,
8493:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8494:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8495:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8496:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8497:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8498:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8499:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8500:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8501:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8502:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8503:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8504:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8505:      371,   372,   373,   570,   375,   376,   377,   378,   379,   380,
8506:        0,   381,   382,   383,   384,   571,     0,   386,   387,   388,
8507:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8508:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8509:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8510:      416,   417,   418,   419,     0,   572,   421,     0,     0,   422,
8511:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8512:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8513:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8514:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8515:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8516:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8517:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8518:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8519:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8520:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8521:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8522:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8523:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8524:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8525:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8526:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8527:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8528:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8529:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8530:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8531:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8532:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8533:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8534:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8535:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
8536:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8537:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8538:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8539:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8540:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8541:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8542:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8543:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8544:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8545:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8546:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8547:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8548:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8549:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8550:      591,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8551:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8552:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8553:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8554:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8555:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8556:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8557:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8558:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8559:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8560:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8561:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8562:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8563:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8564:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8565:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8566:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8567:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8568:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8569:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8570:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8571:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8572:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8573:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8574:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8575:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8576:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8577:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8578:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8579:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8580:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8581:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8582:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8583:      222,   223,   645,   225,     0,   227,   228,   229,   230,     0,
8584:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8585:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8586:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8587:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8588:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8589:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8590:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8591:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8592:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8593:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8594:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8595:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8596:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8597:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8598:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8599:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8600:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8601:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8602:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8603:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8604:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8605:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8606:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8607:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8608:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8609:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8610:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8611:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8612:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8613:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8614:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8615:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8616:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8617:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8618:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8619:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8620:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8621:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8622:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8623:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8624:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8625:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8626:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8627:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8628:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8629:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8630:      218,     0,   219,   220,   221,   222,   223,   732,   225,     0,
8631:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8632:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8633:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8634:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8635:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8636:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8637:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8638:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8639:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8640:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8641:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8642:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8643:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8644:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8645:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8646:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8647:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8648:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8649:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8650:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8651:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8652:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8653:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8654:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8655:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8656:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8657:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8658:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8659:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8660:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8661:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8662:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8663:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8664:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8665:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8666:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8667:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8668:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8669:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8670:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8671:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8672:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8673:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8674:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8675:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8676:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8677:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8678:      222,   223,   735,   225,     0,   227,   228,   229,   230,     0,
8679:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8680:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8681:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8682:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8683:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8684:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8685:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8686:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8687:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8688:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8689:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8690:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8691:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8692:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8693:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8694:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8695:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8696:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8697:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8698:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8699:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8700:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8701:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8702:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8703:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8704:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8705:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8706:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8707:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8708:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8709:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8710:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8711:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8712:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8713:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8714:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8715:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8716:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8717:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8718:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8719:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8720:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8721:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8722:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8723:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8724:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8725:      218,     0,   219,   220,   221,   222,   223,   738,   225,     0,
8726:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8727:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8728:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8729:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8730:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8731:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8732:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8733:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8734:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8735:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8736:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8737:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8738:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8739:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8740:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8741:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8742:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8743:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8744:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8745:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8746:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8747:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8748:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8749:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8750:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8751:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8752:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8753:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8754:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8755:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8756:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8757:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8758:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8759:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8760:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8761:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8762:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8763:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8764:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8765:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8766:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8767:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8768:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8769:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8770:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8771:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8772:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8773:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
8774:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8775:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8776:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8777:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8778:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8779:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8780:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8781:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8782:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8783:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8784:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8785:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8786:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8787:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8788:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8789:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8790:      371,   372,   373,   570,   375,   376,   377,   378,   379,   380,
8791:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8792:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8793:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8794:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8795:      416,   417,   418,   419,     0,   572,   421,     0,     0,   422,
8796:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8797:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8798:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8799:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8800:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8801:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8802:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8803:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8804:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8805:        0,     0,     0,     0,     0,  1390,     0,   105,   106,     0,
8806:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8807:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8808:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8809:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8810:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8811:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8812:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8813:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8814:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8815:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8816:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8817:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8818:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8819:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8820:      218,     0,   219,   220,   221,   222,   223,   224,   225,     0,
8821:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8822:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8823:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8824:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8825:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8826:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8827:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8828:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8829:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8830:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8831:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8832:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8833:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8834:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8835:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8836:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8837:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8838:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8839:      385,     0,     0,   387,   388,   389,   390,     0,   392,   393,
8840:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8841:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8842:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8843:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8844:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8845:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8846:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8847:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8848:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8849:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8850:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8851:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8852:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8853:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8854:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8855:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8856:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8857:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8858:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8859:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8860:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8861:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8862:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8863:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8864:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8865:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8866:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8867:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8868:      222,   223,  1531,   225,     0,   227,   228,   229,   230,     0,
8869:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8870:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8871:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8872:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8873:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8874:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8875:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8876:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8877:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8878:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8879:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8880:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8881:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8882:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8883:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8884:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8885:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8886:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8887:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8888:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8889:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8890:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8891:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8892:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8893:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8894:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8895:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8896:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8897:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8898:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8899:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8900:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8901:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8902:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8903:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8904:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
8905:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
8906:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
8907:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
8908:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
8909:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
8910:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
8911:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
8912:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
8913:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
8914:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
8915:      218,     0,   219,   220,   221,   222,   223,  1813,   225,     0,
8916:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
8917:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
8918:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
8919:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
8920:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
8921:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
8922:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
8923:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
8924:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
8925:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
8926:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
8927:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
8928:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
8929:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
8930:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
8931:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
8932:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
8933:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
8934:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
8935:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
8936:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
8937:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
8938:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
8939:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
8940:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
8941:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
8942:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
8943:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
8944:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
8945:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
8946:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
8947:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
8948:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
8949:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
8950:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
8951:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
8952:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
8953:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
8954:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
8955:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
8956:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
8957:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
8958:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
8959:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
8960:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
8961:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
8962:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
8963:      222,   223,  1825,   225,     0,   227,   228,   229,   230,     0,
8964:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
8965:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
8966:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
8967:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
8968:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
8969:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
8970:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
8971:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
8972:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
8973:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
8974:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
8975:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
8976:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
8977:      343,   344,   345,   346,   347,   348,   349,     0,   350,   351,
8978:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
8979:      362,     0,   363,   364,     0,   366,   367,   368,   369,   370,
8980:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
8981:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
8982:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
8983:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
8984:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
8985:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
8986:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
8987:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
8988:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
8989:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
8990:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
8991:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
8992:      473,   474,   500,     0,     0,     0,     0,     0,     0,     0,
8993:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
8994:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
8995:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
8996:      107,   108,   109,     0,   111,   112,   113,   114,   115,     0,
8997:      117,   118,     0,   119,   120,   121,   122,   123,   124,     0,
8998:        0,   125,   126,   127,   128,   129,     0,   130,   131,   132,
8999:      133,   134,     0,     0,     0,   136,   137,   138,   139,   140,
9000:      141,     0,   143,   144,   145,     0,   146,   147,   148,   149,
9001:      150,   151,     0,     0,   153,   154,   155,     0,     0,     0,
9002:        0,     0,     0,     0,   157,   158,   159,   160,   161,   162,
9003:      163,   164,   165,   166,     0,   167,     0,   168,   169,   170,
9004:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
9005:        0,   179,   180,   181,   182,   183,     0,   184,   185,   186,
9006:        0,   187,   188,   189,     0,   190,   191,   192,   193,   194,
9007:      195,   196,   197,   198,   199,   200,     0,   201,     0,   202,
9008:      203,   204,   205,     0,   206,     0,   207,     0,     0,     0,
9009:      210,   211,   212,     0,   214,     0,   215,     0,   216,   217,
9010:      218,     0,   219,   220,   221,   222,   223,  1827,   225,     0,
9011:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
9012:      236,     0,   237,     0,   239,   240,   241,   242,   243,   244,
9013:      245,   246,     0,   247,     0,   248,     0,     0,   251,     0,
9014:      253,   254,   255,   256,   257,     0,     0,   258,     0,   260,
9015:        0,     0,   262,   263,   264,     0,     0,   265,   266,   267,
9016:      268,   269,   502,   271,   272,   273,   274,   275,   276,   277,
9017:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9018:      288,   289,     0,   291,   292,   293,   294,   295,     0,   296,
9019:      297,     0,   299,     0,   300,   301,   302,   303,   304,   305,
9020:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
9021:      311,   312,     0,   314,     0,   316,   317,   318,   319,   320,
9022:      321,   322,   323,   324,   325,   326,     0,   327,   328,   329,
9023:      330,   331,   332,   333,   334,   335,     0,   336,   337,   338,
9024:      339,   340,   341,     0,   342,   343,   344,   345,   346,   347,
9025:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
9026:      357,   358,   359,   360,   361,   362,     0,   363,   364,     0,
9027:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
9028:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
9029:      385,     0,   386,   387,   388,   389,   390,     0,   392,   393,
9030:      394,   395,     0,   396,   397,   398,   399,   400,   401,   402,
9031:      403,   404,   405,   406,   504,   408,   409,   410,     0,   411,
9032:      412,     0,   413,     0,   415,   416,   417,   418,   419,     0,
9033:      420,   421,     0,     0,   422,   423,   424,   425,   426,     0,
9034:      427,   428,   429,   430,   431,   432,   433,   434,     0,     0,
9035:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
9036:      443,   444,   445,   446,     0,   447,     0,   449,   450,   451,
9037:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
9038:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
9039:      468,   469,   470,   471,   472,   473,   474,   500,     0,     0,
9040:        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
9041:        0,     0,     0,    94,    95,    96,    97,    98,    99,   100,
9042:      101,     0,   102,   103,   104,     0,     0,     0,     0,     0,
9043:        0,     0,   105,   106,     0,   107,   108,   109,     0,   111,
9044:      112,   113,   114,   115,     0,   117,   118,     0,   119,   120,
9045:      121,   122,   123,   124,     0,     0,   125,   126,   127,   128,
9046:      129,     0,   130,   131,   132,   133,   134,     0,     0,     0,
9047:      136,   137,   138,   139,   140,   141,     0,   143,   144,   145,
9048:        0,   146,   147,   148,   149,   150,   151,     0,     0,   153,
9049:      154,   155,     0,     0,     0,     0,     0,     0,     0,   157,
9050:      158,   159,   160,   161,   162,   163,   164,   165,   166,     0,
9051:      167,     0,   168,   169,   170,   171,   172,   173,     0,   174,
9052:      175,   176,   177,   178,     0,     0,   179,   180,   181,   182,
9053:      183,     0,   184,   185,   186,     0,   187,   188,   189,     0,
9054:      190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
9055:      200,     0,   201,     0,   202,   203,   204,   205,     0,   206,
9056:        0,   207,     0,     0,     0,   210,   211,   212,     0,   214,
9057:        0,   215,     0,   216,   217,   218,     0,   219,   220,   221,
9058:      222,   223,   224,   225,     0,   227,   228,   229,   230,     0,
9059:      231,   232,   233,   234,   235,   236,     0,   237,     0,   239,
9060:      240,   241,   242,   243,   244,   245,   246,     0,   247,     0,
9061:      248,     0,     0,   251,     0,   253,   254,   255,   256,   257,
9062:        0,     0,   258,     0,   260,     0,     0,   262,   263,   264,
9063:        0,     0,   265,   266,   267,   268,   269,   502,   271,   272,
9064:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
9065:      283,   284,   285,   286,   287,   288,   289,     0,   291,   292,
9066:      293,   294,   295,     0,   296,   297,     0,   299,     0,   300,
9067:      301,   302,   303,   304,   305,     0,   306,   307,     0,     0,
9068:      308,   309,   310,     0,     0,   311,   312,     0,   314,     0,
9069:      316,   317,   318,   319,   320,   321,   322,     0,   324,   325,
9070:      326,     0,   327,   328,   329,   330,   331,   332,   333,   334,
9071:      335,     0,   336,   337,   338,   339,   340,   341,     0,   342,
9072:        0,   344,   345,   346,   347,   348,   349,     0,   350,   351,
9073:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
9074:      362,     0,   363,   364,     0,   366,   367,   368,   369,     0,
9075:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
9076:        0,   381,   382,   383,   384,   385,     0,   386,   387,   388,
9077:      389,   390,     0,   392,   393,   394,   395,     0,   396,   397,
9078:      398,   399,   400,   401,   402,   403,   404,   405,   406,   504,
9079:      408,   409,   410,     0,   411,   412,     0,   413,     0,   415,
9080:      416,   417,   418,   419,     0,   420,   421,     0,     0,   422,
9081:      423,   424,   425,   426,     0,   427,   428,   429,   430,   431,
9082:      432,   433,   434,     0,     0,   435,   436,   437,   438,   439,
9083:        0,     0,   440,   441,   442,   443,   444,   445,   446,     0,
9084:      447,     0,   449,   450,   451,   452,     0,     0,   453,     0,
9085:        0,   454,   455,   456,   457,   458,   459,   460,   461,   462,
9086:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
9087:      473,   474,   663,     0,     0,     0,     0,     0,     0,     0,
9088:        0,     0,     0,     0,     0,     0,     0,     0,    94,    95,
9089:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
9090:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
9091:      107,   108,   109,   664,   111,   112,   113,     0,   665,   666,
9092:      667,   668,     0,   119,   120,   121,   122,   123,   124,     0,
9093:        0,   125,   126,   669,   670,   129,     0,   130,   131,   132,
9094:      133,     0,     0,   671,     0,   136,   137,   138,   139,   140,
9095:      141,   672,   143,   144,   145,     0,   146,   147,   148,   149,
9096:      150,   151,     0,   673,   153,   154,   155,     0,     0,     0,
9097:      674,     0,     0,     0,   157,   158,   159,   160,   161,   162,
9098:      163,   675,   676,   166,     0,   167,     0,   168,   169,   170,
9099:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
9100:        0,   179,   180,   677,   182,   183,     0,   184,   185,   186,
9101:        0,   187,   188,   189,     0,   190,   191,   192,   193,     0,
9102:      195,   196,   197,   198,   199,     0,     0,   201,     0,   202,
9103:      203,   678,   205,     0,   206,     0,   207,   679,     0,   680,
9104:      210,   211,   212,   681,   214,     0,   215,     0,     0,     0,
9105:      218,     0,   219,   220,   221,   222,   223,   682,   225,   683,
9106:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
9107:      236,     0,   237,   684,     0,   240,   241,   242,   243,   244,
9108:      685,   686,     0,   687,     0,   248,   688,   689,   251,   690,
9109:      253,   254,   255,   256,   257,     0,     0,   258,   691,   260,
9110:      692,     0,   262,   263,   264,     0,     0,   265,   266,   267,
9111:      268,   269,   693,   271,   272,   273,   274,   275,   276,   277,
9112:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9113:      288,   694,   695,   696,   292,   293,   294,     0,     0,   296,
9114:      297,   697,   299,     0,     0,   301,   698,   303,   304,   305,
9115:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
9116:      311,     0,   699,   314,   700,     0,   317,   318,   319,   320,
9117:      321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
9118:      330,   331,     0,   333,   334,   335,     0,   336,   337,   338,
9119:      339,   340,   341,     0,   342,   343,   344,   701,   346,   347,
9120:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
9121:      357,   358,   359,   360,   361,   362,     0,   363,   364,   702,
9122:      366,   367,   368,   703,   370,   371,   372,   373,   374,   375,
9123:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
9124:      385,     0,   386,   704,   388,   389,   390,   705,   392,   393,
9125:      706,   395,     0,   396,   397,   398,   399,   400,   401,   402,
9126:      403,   404,   405,   406,   707,   408,     0,   410,     0,   411,
9127:      412,     0,   413,   708,   415,   416,   417,   418,   419,     0,
9128:      709,   710,     0,     0,   422,   423,     0,   425,     0,     0,
9129:      427,   428,   711,   430,   431,   432,   433,   434,     0,     0,
9130:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
9131:      443,   444,     0,   712,     0,   447,   713,   449,   450,   451,
9132:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
9133:      458,   459,   663,     0,     0,     0,     0,     0,     0,     0,
9134:        0,     0,     0,   471,   472,   473,   474,     0,    94,    95,
9135:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
9136:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
9137:      107,   108,   109,   664,   111,   112,   113,     0,   665,   666,
9138:      667,   668,     0,   119,   120,   121,   122,   123,   124,     0,
9139:        0,   125,   126,   669,   670,   129,     0,   130,   131,   132,
9140:      133,     0,     0,   671,     0,   136,   137,   138,   139,   140,
9141:      141,   672,   143,   144,   145,     0,   146,   147,   148,   149,
9142:      150,   151,     0,   673,   153,   154,   155,     0,     0,     0,
9143:      674,     0,     0,     0,   157,   158,   159,   160,   161,   162,
9144:      163,   675,   676,   166,     0,   167,     0,   168,   169,   170,
9145:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
9146:        0,   179,   180,   677,   182,   183,     0,   184,   185,   186,
9147:        0,   187,   188,   189,     0,   190,   191,   192,   193,     0,
9148:      195,   196,   197,   198,   199,     0,     0,   201,     0,   202,
9149:      203,   678,   205,     0,   206,     0,   207,   679,     0,   680,
9150:      210,   211,   212,   681,   214,     0,   215,     0,     0,     0,
9151:      218,     0,   219,   220,   221,   222,   223,   224,   225,   683,
9152:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
9153:      236,     0,   237,   684,     0,   240,   241,   242,   243,   244,
9154:      685,   686,     0,   687,     0,   248,   688,   689,   251,   690,
9155:      253,   254,   255,   256,   257,     0,     0,   258,   691,   260,
9156:      692,     0,   262,   263,   264,     0,     0,   265,   266,   267,
9157:      268,   269,   693,   271,   272,   273,   274,   275,   276,   277,
9158:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9159:      288,   694,   695,   696,   292,   293,   294,     0,     0,   296,
9160:      297,   697,   299,     0,     0,   301,   698,   303,   304,   305,
9161:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
9162:      311,     0,   699,   314,   700,     0,   317,   318,   319,   320,
9163:      321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
9164:      330,   331,     0,   333,   334,   335,     0,   336,   337,   338,
9165:      339,   340,   341,     0,   342,   343,   344,   701,   346,   347,
9166:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
9167:      357,   358,   359,   360,   361,   362,     0,   363,   364,   702,
9168:      366,   367,   368,   703,   370,   371,   372,   373,   374,   375,
9169:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
9170:      385,     0,   386,   704,   388,   389,   390,   705,   392,   393,
9171:      706,   395,     0,   396,   397,   398,   399,   400,   401,   402,
9172:      403,   404,   405,   406,   707,   408,     0,   410,     0,   411,
9173:      412,     0,   413,   708,   415,   416,   417,   418,   419,     0,
9174:      709,   710,     0,     0,   422,   423,     0,   425,     0,     0,
9175:      427,   428,   711,   430,   431,   432,   433,   434,     0,     0,
9176:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
9177:      443,   444,     0,   712,     0,   447,   713,   449,   450,   451,
9178:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
9179:      458,   459,  2417,     0,     0,     0,     0,     0,     0,     0,
9180:        0,     0,     0,   471,   472,   473,   474,     0,    94,    95,
9181:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
9182:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
9183:      107,   108,   109,  2418,   111,   112,   113,     0,   665,  2419,
9184:      667,   668,     0,   119,   120,   121,   122,   123,   124,     0,
9185:        0,   125,   126,   669,   670,   129,     0,   130,   131,   132,
9186:      133,     0,     0,  2420,     0,   136,   137,   138,   139,   140,
9187:      141,  2421,   143,   144,   145,     0,   146,   147,   148,   149,
9188:      150,   151,     0,  2422,   153,   154,   155,     0,     0,     0,
9189:     2423,     0,     0,     0,   157,   158,   159,   160,   161,   162,
9190:      163,   675,   676,   166,     0,   167,     0,   168,   169,   170,
9191:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
9192:        0,   179,   180,   677,   182,   183,     0,   184,   185,   186,
9193:        0,   187,   188,   189,     0,   190,   191,   192,   193,     0,
9194:      195,   196,   197,   198,   199,     0,     0,   201,     0,   202,
9195:      203,   678,   205,     0,   206,     0,   207,  2424,     0,  2425,
9196:      210,   211,   212,  2426,   214,     0,   215,     0,     0,     0,
9197:      218,     0,   219,   220,   221,   222,   223,   224,   225,  2427,
9198:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
9199:      236,     0,   237,  2428,     0,   240,   241,   242,   243,   244,
9200:      685,   686,     0,   687,     0,   248,  2429,  2430,   251,  2431,
9201:      253,   254,   255,   256,   257,     0,     0,   258,  2432,   260,
9202:     2433,     0,   262,   263,   264,     0,     0,   265,   266,   267,
9203:      268,   269,  2630,   271,   272,   273,   274,   275,   276,   277,
9204:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9205:      288,   694,  2435,   696,   292,   293,   294,     0,     0,   296,
9206:      297,  2437,   299,     0,     0,   301,   698,   303,   304,   305,
9207:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
9208:      311,     0,  2439,   314,  2440,     0,   317,   318,   319,   320,
9209:      321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
9210:      330,   331,     0,   333,   334,   335,     0,   336,   337,   338,
9211:      339,   340,   341,     0,   342,   343,   344,   701,   346,   347,
9212:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
9213:      357,   358,   359,   360,   361,   362,     0,   363,   364,  2441,
9214:      366,   367,   368,     0,   370,   371,   372,   373,   374,   375,
9215:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
9216:      385,     0,   386,     0,   388,   389,   390,  2443,   392,   393,
9217:      706,   395,     0,   396,   397,   398,   399,   400,   401,   402,
9218:      403,   404,   405,   406,  2631,   408,     0,   410,     0,   411,
9219:      412,     0,   413,  2445,   415,   416,   417,   418,   419,     0,
9220:      709,   710,     0,     0,   422,   423,     0,   425,     0,     0,
9221:      427,   428,  2446,   430,   431,   432,   433,   434,     0,     0,
9222:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
9223:      443,   444,     0,   712,     0,   447,  2447,   449,   450,   451,
9224:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
9225:      458,   459,   663,     0,     0,     0,     0,     0,     0,     0,
9226:        0,     0,     0,   471,   472,   473,   474,     0,    94,    95,
9227:       96,    97,    98,    99,   100,   101,     0,   102,   103,   104,
9228:        0,     0,     0,     0,     0,     0,     0,   105,   106,     0,
9229:      107,   108,   109,   664,   111,   112,   113,     0,   665,   666,
9230:      667,   668,     0,   119,   120,   121,   122,   123,   124,     0,
9231:        0,   125,   126,   669,   670,   129,     0,   130,   131,   132,
9232:      133,     0,     0,   671,     0,   136,   137,   138,   139,   140,
9233:      141,   672,   143,   144,   145,     0,   146,   147,   148,   149,
9234:      150,   151,     0,   673,   153,   154,   155,     0,     0,     0,
9235:      674,     0,     0,     0,   157,   158,   159,   160,   161,   162,
9236:      163,   675,   676,   166,     0,   167,     0,   168,   169,   170,
9237:      171,   172,   173,     0,   174,   175,   176,   177,   178,     0,
9238:        0,   179,   180,   677,   182,   183,     0,   184,   185,   186,
9239:        0,   187,   188,   189,     0,   190,   191,   192,   193,     0,
9240:      195,   196,   197,   198,   199,     0,     0,   201,     0,   202,
9241:      203,   678,   205,     0,   206,     0,   207,   679,     0,   680,
9242:      210,   211,   212,   681,   214,     0,   215,     0,     0,     0,
9243:      218,     0,   219,   220,   221,   222,   223,   224,   225,   683,
9244:      227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
9245:      236,     0,   237,   684,     0,   240,   241,   242,   243,   244,
9246:      685,   686,     0,   687,     0,   248,   688,   689,   251,   690,
9247:      253,   254,   255,   256,   257,     0,     0,   258,   691,   260,
9248:      692,     0,   262,   263,   264,     0,     0,   265,   266,   267,
9249:      268,   269,     0,   271,   272,   273,   274,   275,   276,   277,
9250:      278,   279,   280,   281,   282,   283,   284,   285,   286,   287,
9251:      288,   694,   695,   696,   292,   293,   294,     0,     0,   296,
9252:      297,   697,   299,     0,     0,   301,   698,   303,   304,   305,
9253:        0,   306,   307,     0,     0,   308,   309,   310,     0,     0,
9254:      311,     0,   699,   314,   700,     0,   317,   318,   319,   320,
9255:      321,   322,   323,   324,   325,   326,     0,   327,   328,     0,
9256:      330,   331,     0,   333,   334,   335,     0,   336,   337,   338,
9257:      339,   340,   341,     0,   342,   343,   344,   701,   346,   347,
9258:      348,   349,     0,   350,   351,   352,   353,   354,   355,   356,
9259:      357,   358,   359,   360,   361,   362,     0,   363,   364,   702,
9260:      366,   367,   368,     0,   370,   371,   372,   373,   374,   375,
9261:      376,   377,   378,   379,   380,     0,   381,   382,   383,   384,
9262:      385,     0,   386,     0,   388,   389,   390,   705,   392,   393,
9263:      706,   395,     0,   396,   397,   398,   399,   400,   401,   402,
9264:      403,   404,   405,   406,     0,   408,     0,   410,     0,   411,
9265:      412,     0,   413,   708,   415,   416,   417,   418,   419,     0,
9266:      709,   710,     0,     0,   422,   423,     0,   425,     0,     0,
9267:      427,   428,   711,   430,   431,   432,   433,   434,     0,     0,
9268:      435,   436,   437,   438,   439,     0,     0,   440,   441,   442,
9269:      443,   444,     0,   712,     0,   447,   713,   449,   450,   451,
9270:      452,     0,     0,   453,     0,     0,   454,   455,   456,   457,
9271:      458,   459,     0,     0,     0,     0,     0,     0,     0,     0,
9272:        0,     0,     0,   471,   472,   473,   474
9273: };
9274: 
9275: static const yytype_int16 yycheck[] =
9276: {
9277:        6,     6,   590,   624,   537,   528,   639,     0,   610,   704,
9278:        0,    59,  1004,     0,   535,   802,    36,   881,   633,  1002,
9279:      651,    16,   882,    16,   631,   528,  1178,     0,     0,   585,
9280:     1357,  1748,   494,   884,  1147,   710,  1777,  1147,  1282,  1780,
9281:       30,  1663,     6,  1147,  1396,  1147,   802,  1399,   977,   900,
9282:      982,    31,   528,  1823,   979,   973,  1183,  2170,  2199,  2170,
9283:      537,  2197,   913,  1829,   531,  1831,  1768,   624,   530,   626,
9284:     1820,   628,  2076,  1704,     0,  1312,  1313,  2211,  2218,   528,
9285:       35,   810,  1007,  1882,  1043,   669,   670,    21,   536,   528,
9286:       80,  1263,     5,    61,  1867,  1868,  1869,     9,    61,  1415,
9287:     1744,     5,     5,     0,  2083,     5,     9,    58,  2028,    58,
9288:       90,   542,   696,     5,     5,  1759,     5,     9,     5,     5,
9289:       50,    73,     0,   644,    40,     5,    13,    14,  1417,     5,
9290:       58,     5,     5,   733,    13,    14,   736,    13,    14,    13,
9291:       14,     5,   117,     5,     5,     3,  1896,  1148,   169,    13,
9292:       14,     5,   740,  2543,     5,     5,     5,     9,   962,    13,
9293:       14,     5,     5,  1365,   607,   921,     4,    27,    23,     0,
9294:       11,     9,  1277,    31,    32,   607,   170,    11,     3,     4,
9295:        5,   704,  2490,     4,     9,    16,    58,    75,     9,  2579,
9296:       20,    21,   137,  2478,   869,   120,    93,  2565,    86,    30,
9297:       41,   704,    15,   169,   122,    36,  1277,    40,  2493,    11,
9298:      306,   120,  1962,  1963,   145,    93,    27,  2667,    78,    27,
9299:     2634,   284,    67,    34,    27,   241,    34,    87,   704,  2082,
9300:       61,    34,    73,    75,  2474,   991,   290,   282,   994,   995,
9301:     2108,   107,   241,  2014,    86,   829,   830,   290,   170,    80,
9302:     2772,   270,    48,   306,  1277,    83,   116,  2404,  2588,   355,
9303:      189,  2456,    59,   120,   117,   704,   273,   115,   354,   802,
9304:       67,   855,  2733,    68,   494,   676,   809,  2667,   135,  2609,
9305:      135,   375,   213,   208,   241,   107,  1015,    37,   811,   115,
9306:      115,   159,   880,  1022,   159,   990,   164,   698,   161,   127,
9307:     2841,    27,   118,    13,    14,   437,   437,   147,   811,   118,
9308:      168,   415,   170,   928,    11,   269,   458,  2090,  2140,   175,
9309:      274,   166,    27,   458,  2967,  1987,   456,   187,   729,   885,
9310:     2334,  2442,   161,   489,  2338,   811,  2704,   326,   480,   199,
9311:      496,    30,   489,   359,  2485,   480,  2325,    11,  2870,   496,
9312:      480,  2487,   494,  2015,  1985,   459,   196,   805,   914,   290,
9313:      359,   187,   494,   494,   232,    54,   355,   232,  2653,  2139,
9314:     3013,   325,   811,   380,   124,   191,    73,    41,   174,   235,
9315:      302,  2122,   191,   345,   972,   941,  2136,   284,  2138,   214,
9316:      923,   924,   413,   489,   190,   346,   225,   346,   921,   195,
9317:      494,  2223,  1277,   266,   130,  2946,   284,   108,   494,    73,
9318:      235,   373,  2802,   281,   209,   344,   435,   433,   346,  1641,
9319:     1642,   274,  1286,  2753,  1646,   130,   274,    31,    32,  1158,
9320:     2074,   494,  2076,   288,   433,   231,   489,  2632,   235,   108,
9321:      841,  2902,  2964,   269,   498,   267,  1048,   413,  2838,   494,
9322:      347,  1556,  1557,  1558,   164,   498,  2603,   379,   859,   316,
9323:     1704,     0,   483,  2771,   439,  1687,  1688,   990,  1784,   347,
9324:      497,  2324,   317,   301,   346,   496,   433,   944,   494,  2929,
9325:     1284,    11,   295,   399,  1555,    15,  2257,   990,   343,    93,
9326:      345,   484,  2242,    23,   484,   494,  1785,   484,   429,  2913,
9327:      494,   390,   391,  2371,    34,    35,   937,   452,  1437,  2643,
9328:      435,   484,   484,  1750,   990,  2883,  1517,   537,   373,   437,
9329:       58,  2634,   528,  2634,  1157,   413,   435,   970,  2768,   389,
9330:     1522,   537,   392,  1556,  1493,  1779,   402,   494,   970,  2929,
9331:      492,  1148,   537,   536,   496,   458,   446,   498,  2552,   498,
9332:      406,   990,   408,  2557,   458,    11,  2560,    93,    88,   456,
9333:      566,   567,   610,  2871,   494,  2544,   399,   480,   341,  1771,
9334:      498,   413,   383,   485,   486,   383,   480,   433,   456,   407,
9335:      383,   494,   378,  1171,   590,   430,  1758,  2872,  2387,   447,
9336:      494,   494,   498,   588,   494,  1179,  1180,  2517,   495,  1403,
9337:      497,   492,   494,   494,  1235,   496,   599,   494,   494,   599,
9338:     2380,   579,   599,   547,   494,   494,   579,   495,   494,   497,
9339:      494,   494,   602,   629,   630,   631,   599,   599,  2394,  2770,
9340:      494,  1360,   494,   494,  1593,   456,   591,  2777,    64,    65,
9341:      494,   493,  2776,   494,   494,   494,  1253,   485,   486,   490,
9342:      494,   494,  1267,   484,  1177,  1178,   490,   130,   447,   480,
9343:      485,   486,   163,   115,   485,   486,   106,  2369,   483,  1192,
9344:       13,    14,   241,   599,  1177,  1178,   401,   494,  1266,   494,
9345:     1268,  1556,  1557,   483,  1272,   487,   488,   489,   490,  1192,
9346:     2334,   198,  1307,  1308,  2338,  2699,   496,  1285,   704,   248,
9347:     2473,  1177,  1178,    11,  1237,   536,   537,   130,   492,   418,
9348:     1466,   436,   496,  1234,  1321,   545,  1192,   547,   548,    24,
9349:     1476,  1309,   449,  1479,    75,    30,  2476,    11,  1177,   267,
9350:      458,   362,  2868,    41,   740,    86,  2877,  1352,  1177,  1178,
9351:      570,  1985,  1298,  1192,  2375,   331,   494,  1362,   579,  1364,
9352:        4,   221,   480,  1192,     5,     9,  1363,    41,  1740,  1741,
9353:     1237,  1228,   366,  1225,  1226,    73,   494,   198,   599,   149,
9354:     1232,  1993,  1994,  1995,  1996,    80,   494,  1999,  2000,  2001,
9355:     2002,  2003,  2004,  2005,  2006,  2007,  2008,  2923,  1236,    73,
9356:      359,  1578,   406,  1316,   408,  1922,   802,   267,   402,  2036,
9357:     2913,  1928,  2913,   809,   810,   811,   279,   247,   346,   241,
9358:     1670,   312,   805,  1316,   241,   255,   402,  1668,   159,     8,
9359:     2590,   827,  1578,   487,   488,   489,   490,    16,    17,    18,
9360:      366,  2053,  2054,    75,  1752,   373,   477,  1641,  1642,   443,
9361:     1316,  1462,  1646,   447,    86,   297,   269,  1454,     4,   241,
9362:      856,   219,   456,     9,  2995,  1847,   279,   327,   496,   130,
9363:      159,   881,  1324,   449,   433,   164,   402,  1316,  1732,   492,
9364:      876,   877,   878,   496,   880,   881,   480,  1316,  1435,    13,
9365:       14,   331,   175,  1687,  1688,   221,   157,  1489,  1490,  1491,
9366:      494,   232,     8,    13,    14,    11,   117,  2049,   904,  2543,
9367:       16,    17,    18,   253,   254,  1462,   376,   443,  2552,    23,
9368:     1517,  1870,   284,  2557,   366,    29,  2560,   923,   924,   406,
9369:      456,   408,  1773,  1446,  1481,   494,  2170,   359,   359,  1486,
9370:     1855,   267,   359,   232,     4,  2579,   367,   477,  1538,     9,
9371:      281,     4,   235,  1446,   480,   495,     9,  1535,   498,   168,
9372:      402,   957,   402,    13,    14,   961,   962,   528,   494,  1559,
9373:      495,  1561,   487,   498,  1564,   435,   972,   359,  2738,   949,
9374:     1446,   402,   802,   503,   805,  1907,   456,  2743,   458,   809,
9375:     1912,   202,   281,  2136,   990,  2138,   366,   955,   956,  1510,
9376:      958,   443,   955,   956,   498,   958,   289,  1446,   269,   449,
9377:      331,   433,   532,   274,   456,   494,   433,  1446,   279,  1015,
9378:     1472,   495,   843,   363,   364,  1477,  1022,   331,   449,    13,
9379:       14,   135,   402,  2667,    13,    14,  1006,  1550,   480,   485,
9380:      486,   487,   488,   489,   490,   495,   367,  1043,   498,   169,
9381:      376,   433,   494,    23,   495,  1578,   267,  1550,   269,    29,
9382:      881,   568,   569,   367,   571,  2699,   215,   887,  1591,   366,
9383:      494,   591,   494,   443,  2686,   477,   896,   494,  1656,    54,
9384:      149,   402,  1595,   170,  1550,  1583,   456,    13,    14,  1587,
9385:      910,  1589,  2704,  2065,  2066,  2067,  2068,  2200,   402,   339,
9386:     2200,   921,  1595,   923,   924,   402,  2200,   286,  2200,   435,
9387:      480,  1550,   494,   406,  1692,   408,   492,   204,   494,  2343,
9388:      496,  1550,  2346,   406,   494,   408,    13,    14,   449,  1595,
9389:     2837,   219,    23,   220,   955,   956,   495,   958,    29,   498,
9390:      150,  2375,   229,   704,   495,   449,   443,   498,   495,   150,
9391:      433,   498,  1148,   150,  1746,  1655,  1595,  1657,  1658,   420,
9392:     2302,   495,  1158,   150,   498,   135,  1595,    23,  2802,  2151,
9393:      431,    13,    14,    29,  2028,  1171,  1953,  2150,    13,    14,
9394:      286,  1177,  1178,   495,   288,   495,   498,   485,   486,   487,
9395:      488,   489,   490,    13,    14,   495,  1192,   494,   498,  1993,
9396:     1994,  1995,  1996,  2815,  2838,  1999,  2000,  2001,  2002,  2003,
9397:     2004,  2005,  2006,  2007,  2008,   494,  2947,  2948,  2137,  2192,
9398:       23,   130,   269,  2930,    36,  2985,    29,  2149,   496,  2151,
9399:      495,     5,    36,   498,     8,   339,  1826,   449,  1828,   343,
9400:       14,  1237,  2949,    55,   135,   406,   495,   408,   157,   498,
9401:      811,    25,  1237,  1236,   604,    29,   606,  1253,   494,  2053,
9402:     2054,  1926,  1927,   350,  2339,  2106,  2341,  1890,   495,   373,
9403:     1266,   498,  1268,  3004,    82,  1271,  1272,  1898,    23,   135,
9404:     1263,    13,    14,  1263,    29,  1281,  1263,  1283,  1284,  1285,
9405:     1286,  1287,  1288,  1289,   106,  2929,   460,   366,   446,  2511,
9406:     1263,  1263,   481,   482,   483,  3012,   485,   486,   487,   488,
9407:      489,   490,   494,  1309,   495,  1311,   494,   498,   288,   313,
9408:     1316,  1317,  1318,  1319,  1320,  1321,    13,    14,   495,  1325,
9409:     1326,   498,   135,   402,  1330,   150,   440,   495,  1334,   494,
9410:      498,  1337,  1338,  1339,  1340,  1341,  1342,  1343,  1344,  1345,
9411:      495,   494,  1348,   498,  1951,   495,   495,  1353,   498,   498,
9412:     1356,  1357,    35,   495,  1360,   274,   498,  1363,   495,   339,
9413:      279,   498,  2514,   343,   443,   481,   482,   483,    94,   485,
9414:      486,   487,   488,   489,   490,   197,  1382,   456,   495,  2601,
9415:      135,   498,    94,  1906,   494,  1380,   495,   288,   495,   498,
9416:     2634,   498,   495,   373,   150,   498,   150,  1403,  1388,  2726,
9417:      150,   480,   284,  1906,   495,  1236,   341,   498,  1414,  1415,
9418:       13,    14,   402,   943,  2170,   494,  2031,   494,  2410,   990,
9419:     1953,   495,   288,    36,   498,   247,    67,   230,   495,   494,
9420:     1906,   498,  1263,   255,   495,  2023,   495,   498,   339,   498,
9421:     1446,   492,   343,     5,   170,   267,  1452,  1277,  1454,  2671,
9422:      495,  1974,  2381,   498,    13,    14,   495,  1906,   170,   498,
9423:      440,   495,    13,    14,   498,    13,    14,  1906,     5,  1992,
9424:     2330,  1974,   373,   339,   115,   288,   298,   343,   204,    13,
9425:       14,    13,    14,  1945,  2344,    13,    14,  1493,   494,  1992,
9426:     1496,  1497,   204,  1499,   220,  2018,  1327,   164,  1974,    23,
9427:     2115,   420,  2025,   229,     5,    29,   494,   373,   220,    13,
9428:       14,  1517,   431,    13,    14,  2018,  1992,   229,    13,    14,
9429:     2672,   494,  2025,   345,  1530,  1974,  2049,   354,   355,  1535,
9430:      343,  2087,   173,   288,   494,  1974,  1526,   263,   494,   440,
9431:     1370,   494,  2018,  1992,  1550,   367,  2049,   354,   355,  2025,
9432:      494,   263,   494,  1992,  2906,     5,  2908,  1388,   284,     5,
9433:      373,   494,  2169,   494,  2171,   387,   257,   258,   494,  2018,
9434:      363,   364,  1578,  2049,   440,     5,  2025,   494,   145,  2018,
9435:      354,   355,   494,  2185,   339,  1591,  2025,  1593,   343,  1595,
9436:      354,   355,   159,   146,  1600,   923,   924,   164,   494,  1605,
9437:      494,   494,   494,   494,  2235,   494,  1177,  1178,     9,   494,
9438:     2049,   135,    15,   457,   498,   185,   186,   215,   373,    97,
9439:      498,  1192,   495,  1643,   350,    36,   373,   440,   269,  2981,
9440:      281,   164,   279,   274,  2234,  1641,  1642,  1643,   350,   164,
9441:     1646,   230,   366,   494,   413,  2401,   213,  2170,   494,  1655,
9442:     1656,  1657,  1658,    86,   413,   498,    54,  2640,   297,  1665,
9443:       54,   413,   413,  1669,   260,   232,  1672,  2170,   503,  2913,
9444:      413,   495,  1692,   495,   456,   150,   317,    93,   402,   496,
9445:     2201,  1687,  1688,   253,   254,   440,  1692,    87,   142,    89,
9446:      269,    91,   333,   269,  2170,  1526,   494,    36,    36,  1229,
9447:     1706,  1231,   494,  1709,     9,  1711,    35,  2511,  2231,   411,
9448:       67,   437,   411,   492,   281,   492,    73,   413,  2505,   443,
9449:      413,  2170,   495,   290,   413,   413,  1732,   366,  2231,    86,
9450:      498,  2170,   456,   452,   494,  2350,    11,   341,  1744,  1744,
9451:      493,   498,   500,  1763,   274,  1316,   411,  2442,  1578,   498,
9452:     2365,   413,  1582,  1759,  1759,  2231,   480,   503,   115,   494,
9453:      117,  1591,   494,   402,   288,  1758,   178,   160,  1758,   494,
9454:      494,  1758,  1778,   169,   495,    36,   437,   213,   498,  2302,
9455:     1744,   376,  2231,   221,   306,  1758,  1758,  1793,  1794,   430,
9456:      306,   285,  2231,   363,   364,  1759,   437,  2601,   498,  2302,
9457:        8,   495,   494,    11,   443,   269,  1812,   221,    16,    17,
9458:       18,   221,  1643,  2413,  2414,   339,   173,   456,   290,   343,
9459:      322,   282,     6,  1829,  1830,  1831,  2302,    11,   449,   150,
9460:      494,    15,   150,   456,   494,   269,    20,    21,    22,    23,
9461:       24,   480,   284,    27,   492,   202,    30,    31,  2712,   373,
9462:       34,    35,   495,   495,   269,   494,   284,   477,   477,   495,
9463:      495,  1692,   429,  2302,  1870,   495,   495,  2671,    36,    36,
9464:      495,   402,   169,   495,   498,  1446,   493,   495,  2634,  1710,
9465:      496,   495,   169,   495,   495,   495,   495,   495,   495,  2412,
9466:      495,   477,   413,   495,   495,  1726,    80,   153,   495,   453,
9467:     1906,   494,   494,    87,    88,    89,    90,    91,  1438,  2412,
9468:      494,   494,   269,  1744,   453,   175,   440,   274,  1448,  2442,
9469:     1450,   284,   483,  1453,   443,   498,   285,  1758,  1759,  1459,
9470:      479,  1461,  1763,   285,   285,   498,  2412,   435,   198,  2442,
9471:      240,   269,   413,  1473,   494,  1951,   150,  1953,  1478,   198,
9472:      150,   288,  1482,  1483,  1484,  1485,   150,  1487,  1488,  1949,
9473:      317,   413,   413,  2412,   413,  1971,  2442,   276,  1974,    50,
9474:      413,  2963,  2505,  2412,  1980,   235,   333,  1983,   276,  1550,
9475:     1986,   495,   493,    36,   494,   341,  1992,  1993,  1994,  1995,
9476:     1996,  2514,   495,  1999,  2000,  2001,  2002,  2003,  2004,  2005,
9477:     2006,  2007,  2008,  2442,   282,  1835,  2012,  2013,  2028,   217,
9478:     2016,  2514,  2018,  2061,    95,  2879,   498,  2023,   284,  2025,
9479:       36,   456,  2028,   150,  1595,   495,   493,    36,   493,   289,
9480:       36,  2037,   150,   274,  2040,   141,  2042,   169,  2514,  2059,
9481:      121,    11,   164,  2049,  2050,   498,    55,  2053,  2054,    55,
9482:     1880,   495,  2058,  2059,   495,   495,  2076,   169,   139,   294,
9483:      402,   453,   143,   495,   495,  1895,   495,   494,  2074,  2074,
9484:     2076,  2076,   169,   430,   498,  2514,   480,   178,   286,   347,
9485:      437,   442,  2088,    84,   165,   485,   495,   168,   495,   494,
9486:      285,   150,  2098,   173,   424,   494,   498,   106,   498,   494,
9487:      106,   498,   183,    36,   495,   495,   495,   495,  2114,   495,
9488:     2074,  2634,  2076,   494,    79,   437,   493,   495,  1949,   498,
9489:      169,  2754,   494,  1953,   495,   495,   220,   495,  1958,   498,
9490:     1960,  2634,  2739,   495,  1964,  1965,   494,  2599,   293,   404,
9491:      495,   494,   220,   291,     8,   494,   406,    11,   408,  2672,
9492:       54,   182,    16,    17,    18,   495,   483,  2913,  2634,  2165,
9493:      495,   495,   456,  2169,  2170,  2171,   200,   173,   188,  2672,
9494:      430,   274,   274,   433,   413,   483,   496,   496,    36,   496,
9495:     2703,   496,   582,  2706,   496,  2634,   496,   413,   197,   496,
9496:      496,   197,   496,   274,   496,  2634,  2672,  2028,  2800,   495,
9497:     2703,   282,   269,  2706,   496,   496,   496,   496,  2198,   494,
9498:      496,  2844,   496,   496,   614,   496,   496,   496,   107,   496,
9499:      496,   284,   496,   496,   496,  2231,   496,  2703,  2059,   496,
9500:     2706,   456,  2222,  2672,   496,  2823,   494,  2825,   247,    36,
9501:      169,   247,  2248,  2074,   325,  2076,   255,   494,   494,   255,
9502:      650,   651,   652,   220,  2703,   498,   494,  2706,   267,   455,
9503:       86,   267,   131,   495,  2703,   333,     8,  2706,   221,    11,
9504:      494,   494,   115,   481,   482,   483,    81,   485,   486,   487,
9505:      488,   489,   490,    36,   150,    73,   495,   122,   150,   298,
9506:     2296,  2297,   298,    36,   495,  2301,  2302,  2918,  2760,    41,
9507:     2306,   485,    36,  2309,  2310,  2912,    48,   491,  2314,   355,
9508:      494,   355,   303,   494,   498,   494,   498,   495,   494,   503,
9509:      494,   494,   324,   442,    73,    36,   187,   437,  2334,  2334,
9510:      494,    73,  2338,  2338,   424,  1906,   345,    67,   287,   345,
9511:     2170,    67,    54,   109,   110,   494,   530,   531,   532,   495,
9512:      494,   498,    36,   217,  2360,   437,   373,   483,   367,   274,
9513:      187,   367,   245,   547,   494,  2195,   424,  2198,    36,   494,
9514:     2334,   287,  2362,  2363,  2338,   287,   357,  2839,   387,   494,
9515:     1910,   387,   566,   567,   568,   569,   495,   571,  2394,   494,
9516:     2913,  2222,   267,   284,     9,   495,   495,  2403,   582,   495,
9517:      495,   143,   340,  1974,   528,   200,  2412,   591,   495,   354,
9518:     2913,   284,   284,   120,   435,    33,   495,   494,   602,   185,
9519:      186,  1992,   286,     9,    22,   495,  2165,   599,  2152,  1460,
9520:      614,  1824,   174,  2112,  2838,  2575,  2442,  2913,  2909,  2207,
9521:     2364,  2406,  2915,  2988,  2746,  2962,  2950,  2018,   190,  2655,
9522:      977,  1818,  1830,   195,  2025,  2212,  2912,  2169,  2960,  1815,
9523:     2910,  1177,  1225,  1951,  2913,  1886,   650,   651,   652,  2505,
9524:      943,   964,  2195,  1431,  2913,   965,   915,  1778,  2049,  2812,
9525:     2833,  2945,  1793,   249,   250,   251,   252,   253,   254,   231,
9526:     1403,   257,   258,  2092,  2892,  2827,   145,  2356,  2488,  2505,
9527:     2725,  1430,  1759,  2334,   967,  2511,  2076,  2338,  2514,  2700,
9528:      159,  2517,  2074,  2325,  2802,   164,  2340,  2801,  2819,  2571,
9529:     2526,  2527,  2820,  2895,  2530,   925,  2896,  2357,     3,  1277,
9530:        5,  2362,  2363,  1277,  2933,  1354,  1277,  2543,  2543,  1277,
9531:     1779,  1670,  1499,  1710,   286,  1268,  2552,  2552,  1601,   567,
9532:      950,  2557,  2557,  1707,  2560,  2560,  2360,  1747,  2091,  1891,
9533:     2794,  2567,  2568,  1237,   213,  1591,   949,  2113,  1380,    -1,
9534:     1381,    -1,    -1,  2579,  2579,  2581,   976,    -1,    -1,  2543,
9535:      704,    -1,    -1,   232,    -1,    -1,    -1,    -1,  2552,   989,
9536:       -1,    -1,    -1,  2557,    -1,  2601,  2560,   363,   364,  2170,
9537:       -1,    -1,  2132,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9538:     1010,    -1,    -1,    -1,    -1,  2579,    -1,   481,   482,   483,
9539:       -1,   485,   486,   487,   488,   489,   490,  2157,  2634,    -1,
9540:       -1,   815,   281,    -1,   109,   110,   378,    -1,    -1,    -1,
9541:       -1,   290,  2172,  2173,  2174,  2175,  2176,  2177,  2178,  2179,
9542:     2180,  2181,    -1,    -1,  2484,  2645,    -1,  2488,    -1,    -1,
9543:     2231,  2667,  2667,    -1,    -1,  2671,  2672,    -1,    -1,  1284,
9544:       -1,     8,    -1,    -1,    11,  2505,    -1,    -1,  2668,    16,
9545:       17,    18,    -1,    -1,    -1,     8,    -1,   811,    11,  2695,
9546:       -1,    -1,  2712,  2699,  2699,    -1,    -1,  2703,   882,    -1,
9547:     2706,    -1,    -1,  2667,    -1,    -1,  2712,    -1,   474,   475,
9548:      185,   186,    -1,    -1,    -1,    -1,    -1,    -1,    41,   528,
9549:     2726,  2552,    -1,  2729,    -1,    48,  2557,    -1,   494,  2560,
9550:       -1,  2302,    -1,  2739,    -1,  2699,   478,  2743,  2744,    -1,
9551:     2570,   925,   802,   485,   486,   487,   488,   489,   490,   809,
9552:       73,  1151,    -1,    -1,    -1,    -1,  2286,    -1,    -1,   943,
9553:      944,     8,    -1,    -1,    11,   949,   950,   951,    -1,    16,
9554:       17,    18,    -1,    -1,   249,   250,   251,   252,   253,   254,
9555:      429,    -1,   257,   258,    -1,  2775,    33,    -1,  1403,    -1,
9556:       -1,    -1,   976,   977,    -1,    -1,  2802,  2802,    -1,    -1,
9557:       -1,    -1,    -1,    -1,  2634,   989,    -1,    -1,    -1,    -1,
9558:       -1,    -1,    -1,    -1,  2645,    -1,    -1,  2823,    -1,  2825,
9559:      143,  2827,  1006,    -1,    -1,  2831,  1010,    -1,    -1,    -1,
9560:       -1,    -1,  2838,  2838,    -1,  1235,   896,  2668,  2802,    -1,
9561:       -1,  2412,    -1,   492,  2834,    -1,   495,   496,    -1,    -1,
9562:       -1,   174,    -1,  2859,    -1,    -1,    -1,    -1,   195,    -1,
9563:       -1,   921,    -1,   923,   924,    -1,   990,   190,  2699,    -1,
9564:       -1,  2442,   195,  2879,  2838,    -1,    -1,    -1,    -1,    -1,
9565:      217,  2712,    -1,    -1,    -1,    -1,  2892,    -1,   363,   364,
9566:       -1,    -1,    -1,    -1,    -1,   704,    -1,    -1,    -1,    -1,
9567:       -1,    -1,    -1,    -1,    -1,    -1,  2912,  2913,   231,    -1,
9568:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9569:       -1,    -1,    -1,  2929,  2929,    -1,  2932,  2933,    -1,    -1,
9570:       -1,   991,  2922,    -1,   994,   995,    -1,    -1,    -1,  2769,
9571:       -1,    -1,    -1,  2514,  2775,   109,   110,    -1,    -1,   286,
9572:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1358,  1143,
9573:       -1,  2967,    -1,   286,    -1,  2929,    -1,  1151,    -1,    -1,
9574:      217,    -1,    -1,    -1,    -1,    -1,    -1,  1161,    -1,  1379,
9575:       -1,  1381,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
9576:       -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,   474,
9577:      475,    -1,   811,  2834,    -1,    -1,    -1,  3013,    -1,    33,
9578:     1194,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9579:       -1,   185,   186,    -1,    -1,    -1,  1641,  1642,  1428,    -1,
9580:       -1,  1646,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
9581:       -1,  1225,  1226,    -1,  1228,  1229,    -1,  1231,  1232,    -1,
9582:       -1,  1235,    -1,  1177,  1178,   378,    -1,    -1,    -1,    -1,
9583:       -1,    -1,    -1,  2634,    -1,    -1,    -1,    -1,  1192,    -1,
9584:     2600,    -1,  1687,  1688,    -1,    -1,    -1,    -1,    -1,    -1,
9585:       -1,    -1,    -1,  2913,    -1,   249,   250,   251,   252,   253,
9586:      254,  2922,    -1,   257,   258,    -1,    -1,    -1,  1282,    -1,
9587:       -1,  2672,    -1,    -1,    -1,  2635,  2636,  1507,  1508,  1293,
9588:       -1,    -1,    -1,    -1,    -1,  1175,    -1,    -1,    -1,    -1,
9589:       -1,    -1,  2652,    -1,    -1,    -1,  1186,    -1,  1188,    -1,
9590:       -1,    -1,  2703,    -1,    -1,  2706,    -1,  1197,    -1,    -1,
9591:     1324,    -1,    -1,    -1,   481,   482,   483,    -1,   485,   486,
9592:      487,   488,   489,   490,  1214,   478,    -1,    -1,    -1,    -1,
9593:       -1,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
9594:       -1,    -1,    -1,  1357,  1358,    -1,    -1,    -1,    -1,    -1,
9595:       -1,   990,  1242,  1243,    -1,    -1,    -1,    -1,     0,    -1,
9596:       -1,    -1,  1316,   217,    -1,  1379,    -1,  1381,  2728,   363,
9597:      364,    -1,    -1,    -1,    -1,    -1,  1390,    -1,  1392,    -1,
9598:       -1,    -1,    -1,    -1,  1274,  1275,    -1,    -1,  1278,  1279,
9599:       -1,    -1,    -1,    -1,    -1,    -1,  2756,    -1,    -1,    -1,
9600:       -1,    -1,    -1,    -1,   481,   482,   483,    -1,   485,   486,
9601:      487,   488,   489,   490,  1428,    -1,    -1,    -1,    -1,    -1,
9602:       -1,    -1,    -1,  1437,  1438,    -1,    -1,    -1,    -1,    -1,
9603:       -1,    -1,   286,    -1,  1448,  1449,  1450,  1451,    -1,  1453,
9604:       -1,    -1,     0,    -1,    -1,  1459,    -1,  1461,    -1,    -1,
9605:       -1,    93,    -1,    -1,    -1,    -1,    -1,    -1,  1472,  1473,
9606:       -1,    -1,    -1,  1477,  1478,    -1,    -1,    -1,  1482,  1483,
9607:     1484,  1485,    -1,  1487,  1488,    -1,    -1,    -1,    -1,    -1,
9608:      474,   475,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9609:       -1,    -1,  1446,  1507,  1508,  1509,    -1,    -1,    -1,    -1,
9610:       -1,    -1,    -1,   145,    -1,    -1,    -1,    -1,  1738,    -1,
9611:     1524,    -1,  2913,    -1,    -1,    -1,    -1,   159,    -1,    -1,
9612:       -1,    -1,   164,    -1,  1414,  1415,    -1,   169,    -1,    -1,
9613:       -1,    -1,    -1,    -1,     8,    93,   178,    11,  1177,  1178,
9614:      182,    -1,    16,    17,    18,    -1,    -1,    -1,  1993,  1994,
9615:     1995,  1996,    -1,  1192,  1999,  2000,  2001,  2002,  2003,  2004,
9616:     2005,  2006,  2007,  2008,    -1,    -1,    -1,    41,    -1,     8,
9617:       -1,   213,    11,    -1,    48,    -1,  1466,    16,    17,    18,
9618:       -1,    -1,    -1,    -1,    -1,    -1,  1476,   145,    -1,  1479,
9619:      232,    -1,    -1,    -1,    33,    -1,  1550,    -1,    -1,    73,
9620:       -1,   159,    -1,    -1,    -1,    -1,   164,    -1,  2053,  2054,
9621:       -1,   169,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9622:      178,    -1,    -1,    -1,   182,    -1,    -1,   481,   482,   483,
9623:       -1,   485,   486,   487,   488,   489,   490,    -1,    -1,   281,
9624:       -1,  1595,   284,    -1,    -1,    -1,    -1,    -1,   290,  1663,
9625:       -1,    -1,    -1,    -1,    -1,   213,  1670,  1887,    -1,    -1,
9626:       -1,  1551,  1552,    -1,    -1,    -1,    -1,  1897,  1898,  1899,
9627:       -1,    -1,    -1,    -1,   232,    -1,    -1,  1316,    -1,    -1,
9628:       -1,    -1,   324,    -1,    -1,    -1,    -1,  1917,  1578,    -1,
9629:     1704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9630:      174,  1591,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,
9631:       -1,    -1,    -1,    -1,    -1,    -1,   190,  1947,    -1,    -1,
9632:       -1,   195,    -1,   281,  1738,    -1,   284,    -1,    -1,    -1,
9633:     1744,    -1,   290,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9634:       -1,    -1,    -1,   217,   218,  1759,    -1,    -1,    -1,  1763,
9635:       -1,    -1,  1766,    -1,  1768,    -1,    -1,   231,    -1,     8,
9636:      402,    -1,    11,    -1,    -1,    -1,   324,    16,    17,    18,
9637:       -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,   217,    11,
9638:       -1,    -1,    -1,    -1,    16,    17,    18,   429,    -1,   347,
9639:       -1,    -1,    41,    -1,    -1,   437,    -1,    -1,   272,    48,
9640:       -1,    33,    -1,    -1,    -1,    -1,  1820,  1446,    -1,    -1,
9641:       -1,   453,   286,   455,   456,    -1,    -1,    -1,    -1,    -1,
9642:       -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
9643:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9644:       -1,  2071,  2072,  2073,   402,    -1,    -1,   286,    -1,    -1,
9645:      492,    -1,    -1,   495,   496,   497,    -1,    -1,    -1,  1749,
9646:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1882,    -1,
9647:       -1,   429,    -1,  1887,    -1,    -1,    -1,    -1,    -1,   437,
9648:       -1,    -1,  1896,  1897,  1898,  1899,    -1,    -1,    -1,    -1,
9649:       -1,    -1,    -1,  1783,  1784,   453,  1910,   455,   456,    -1,
9650:     2130,    -1,    -1,  1917,   378,    -1,    -1,    -1,    -1,    -1,
9651:       -1,  1550,    -1,    -1,    -1,  1929,    -1,    -1,     8,    -1,
9652:       -1,    11,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,
9653:       -1,  1945,    -1,  1947,   492,    -1,    -1,   495,   496,   497,
9654:       -1,   190,    -1,    -1,    -1,    -1,   195,    -1,  1962,  1963,
9655:       -1,    41,  1906,    -1,    -1,    -1,  1595,    -1,    48,    -1,
9656:       -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
9657:       -1,  1985,  2202,    -1,    16,    17,    18,    -1,    -1,    -1,
9658:       -1,    -1,   231,    73,    -1,   217,    -1,    -1,    -1,    -1,
9659:       -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    41,
9660:       -1,    -1,    -1,    -1,   478,  2235,    48,   481,   482,   483,
9661:       -1,   485,   486,   487,   488,   489,   490,    -1,    -1,    -1,
9662:     1974,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9663:       -1,    73,    -1,  1923,    -1,    -1,    -1,   286,  1992,    -1,
9664:       -1,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
9665:      489,   490,    -1,   143,   286,    -1,    -1,  2071,  2072,  2073,
9666:     2074,    -1,  2076,  2077,  2018,    -1,  2511,    -1,  2082,  2083,
9667:       -1,  2025,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9668:       -1,    -1,    -1,    -1,   174,    -1,    -1,  2317,  2318,  2319,
9669:     2320,    -1,    -1,    -1,    -1,  2049,    -1,    -1,  2112,    -1,
9670:      190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
9671:       -1,    -1,    -1,    -1,   566,   567,  2130,    -1,  2132,    -1,
9672:       -1,    -1,  2136,  2137,  2138,    -1,  2140,    -1,    -1,   378,
9673:       -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9674:       -1,   231,    -1,  2157,    -1,  2159,    -1,    -1,   190,    -1,
9675:       -1,    -1,    -1,   195,    -1,    -1,  2601,    -1,  2172,  2173,
9676:     2174,  2175,  2176,  2177,  2178,  2179,  2180,  2181,    -1,    -1,
9677:       -1,    -1,    -1,    -1,    -1,   217,   218,   629,   630,    -1,
9678:       -1,    -1,    -1,  2197,    -1,    -1,    -1,    -1,  2202,   231,
9679:       -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,  2212,    -1,
9680:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2223,
9681:       -1,    -1,    -1,    -1,    -1,    -1,  2170,    -1,    -1,    -1,
9682:       -1,  2235,    -1,    -1,    -1,    -1,  2671,   269,  2242,   478,
9683:      272,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
9684:      489,   490,    -1,    -1,   286,    -1,    -1,   289,    -1,   481,
9685:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
9686:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1906,    -1,    -1,
9687:       -1,    -1,  2286,    -1,    -1,    -1,    -1,  2231,  2292,    -1,
9688:     2170,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,     8,
9689:       -1,    -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,
9690:       -1,  2315,    -1,  2317,  2318,  2319,  2320,    -1,    -1,    -1,
9691:     2324,  2325,    -1,  2327,    33,    -1,  2330,    -1,    -1,    -1,
9692:     2334,    -1,    41,    -1,  2338,    -1,    -1,    -1,    -1,    48,
9693:     2344,    -1,    -1,    -1,    -1,  1974,   378,    -1,    -1,    -1,
9694:       -1,    -1,    -1,    -1,    -1,    -1,  2360,   171,  2302,    -1,
9695:     2364,   175,    -1,  1992,    73,  2369,    -1,    -1,   810,    -1,
9696:       -1,  2375,    -1,    -1,    -1,    -1,    -1,  2381,    -1,    -1,
9697:       -1,    -1,    -1,  2387,   198,   827,    -1,    -1,  2608,  2018,
9698:       -1,    -1,    -1,    -1,    -1,    -1,  2025,    -1,   478,    -1,
9699:       -1,    -1,    -1,  2407,    -1,   485,   486,   487,   488,   489,
9700:      490,    -1,    -1,    -1,   856,    -1,    -1,    -1,    -1,    -1,
9701:     2049,   235,    -1,    -1,    -1,    -1,  2646,    -1,   242,    -1,
9702:       -1,    -1,    -1,    -1,   876,   877,   878,    -1,    -1,   881,
9703:       -1,    -1,    -1,    -1,  2664,    -1,   478,    -1,    -1,   481,
9704:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
9705:       -1,    -1,   904,    -1,    -1,   174,   498,    -1,  2412,    -1,
9706:       -1,    -1,  2476,    -1,    -1,   289,    -1,    -1,    -1,    -1,
9707:       -1,   190,    -1,  2487,    -1,    -1,   195,    -1,    -1,    -1,
9708:       -1,    -1,    -1,    -1,  2498,    -1,    -1,    -1,  2442,    -1,
9709:       -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,   217,   218,
9710:       -1,     8,    -1,    -1,    11,   957,    -1,  2737,    -1,   961,
9711:      962,  2401,   231,    -1,    -1,    -1,  2406,    -1,    -1,    -1,
9712:     2534,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2543,
9713:     2544,  2170,    -1,  2547,    41,   359,  2550,    -1,  2552,    -1,
9714:       -1,    48,    -1,  2557,  2774,    -1,  2560,    -1,  2562,    -1,
9715:      269,  2565,    -1,   272,    -1,    -1,    -1,    -1,  2448,  2449,
9716:     2514,    -1,    -1,  1015,    -1,  2579,    73,   286,    -1,    -1,
9717:     1022,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9718:       -1,    -1,   406,    -1,   408,  2599,  2600,    -1,    -1,    -1,
9719:       93,  1043,  2231,    -1,  2608,    -1,    -1,    -1,    -1,    -1,
9720:      424,    -1,    -1,    -1,   897,    -1,   430,    -1,    -1,   433,
9721:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9722:       -1,  2635,  2636,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9723:       -1,    -1,  2646,    -1,  2648,    -1,   143,    -1,  2652,    -1,
9724:       -1,    -1,   145,    -1,    -1,   938,    -1,    -1,    -1,    -1,
9725:     2664,    -1,    -1,  2667,    -1,    -1,   159,    -1,    -1,   378,
9726:       -1,   164,    -1,  2302,    -1,    -1,   169,   174,    -1,    -1,
9727:       -1,    -1,  2686,    -1,    -1,   178,    -1,    -1,    -1,   182,
9728:     2634,    -1,    -1,   190,    -1,  2699,    -1,    -1,   195,    -1,
9729:     2704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9730:       -1,    -1,    -1,    -1,    -1,    -1,  1158,    -1,  2722,    -1,
9731:      213,    -1,  2726,    -1,  2728,    -1,    -1,    -1,  2672,    -1,
9732:       -1,    -1,    -1,  2737,   231,    -1,    -1,    -1,    -1,   232,
9733:       -1,    -1,    -1,  2623,  2624,    -1,    -1,    -1,    -1,    -1,
9734:       -1,    -1,  2756,    -1,  2634,    -1,  2760,    -1,    -1,  2703,
9735:       -1,    -1,  2706,    -1,  1047,    -1,    -1,    -1,    -1,   478,
9736:     2774,  1054,   481,   482,   483,    -1,   485,   486,   487,   488,
9737:      489,   490,    -1,  2412,    -1,    -1,    -1,    -1,   281,   286,
9738:       -1,   284,    -1,    -1,    -1,    -1,    -1,   290,  2802,    -1,
9739:        8,    -1,    -1,    11,    -1,    -1,    -1,  2811,    -1,    -1,
9740:       -1,  2815,    -1,  2442,    -1,  2819,    -1,    -1,    -1,    -1,
9741:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1271,
9742:       -1,   324,    -1,    41,  2838,  2839,  2840,  2841,    -1,  1281,
9743:       48,  1283,    -1,    -1,  1286,  1287,  1288,  1289,    -1,    -1,
9744:       -1,    -1,    -1,    -1,   347,    -1,    -1,    -1,    -1,    -1,
9745:       -1,    -1,    -1,    -1,  2868,    73,    -1,    -1,    -1,  1311,
9746:       -1,    -1,    -1,    -1,    -1,  1317,  1318,  1319,  1320,  2883,
9747:       -1,   378,    -1,  1325,  1326,  2514,    -1,    -1,  1330,    -1,
9748:       -1,  2895,  1334,    -1,    -1,  1337,  1338,  1339,  1340,  1341,
9749:     1342,  1343,  1344,  1345,    -1,  2909,  1348,    -1,    -1,   402,
9750:       -1,  1353,    -1,    -1,  1356,  1357,    -1,    -1,  1360,  2923,
9751:       -1,    -1,    -1,    -1,    -1,  2929,    -1,    -1,    -1,    -1,
9752:       -1,    -1,    -1,    -1,    -1,   143,   429,    -1,    -1,    -1,
9753:     1382,  2945,  2946,    -1,   437,    -1,    -1,    -1,    -1,    -1,
9754:       -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,
9755:      453,    -1,   455,   456,    -1,    -1,   174,    -1,    -1,  2913,
9756:       -1,    -1,  1414,  1415,    -1,    55,    -1,    -1,    -1,    -1,
9757:       -1,   478,   190,    -1,    -1,    -1,  1269,   195,   485,   486,
9758:      487,   488,   489,   490,    -1,    -1,    -1,  1280,    -1,   492,
9759:       -1,  1284,   495,   496,   497,  2634,    -1,  1290,  1291,  1292,
9760:       -1,    -1,    -1,    -1,    -1,    -1,  1299,    -1,    -1,    -1,
9761:       -1,    -1,    -1,   231,    -1,    -1,   106,   107,    -1,    -1,
9762:       -1,    -1,    -1,  2913,    -1,   115,    -1,    -1,    -1,    -1,
9763:       -1,    -1,    -1,  2672,    -1,    -1,    -1,    -1,    -1,    -1,
9764:       -1,  1493,    -1,    -1,  1496,  1497,    -1,  1499,    -1,    -1,
9765:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9766:       -1,    -1,  1355,    -1,  2703,    -1,    -1,  2706,   286,    -1,
9767:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1530,    -1,
9768:       -1,    -1,    -1,   173,    -1,    -1,    -1,    -1,    -1,    -1,
9769:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     0,
9770:       -1,    -1,    -1,    -1,    -1,    -1,  1399,   197,    -1,    -1,
9771:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    -1,
9772:     1413,    -1,    -1,    -1,    -1,  1418,    -1,    -1,    29,    -1,
9773:       31,    32,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9774:       -1,  1593,    -1,    -1,    -1,    -1,    47,    -1,  1600,    -1,
9775:       -1,    -1,    -1,  1605,    -1,    56,    -1,   247,    -1,    -1,
9776:      378,    -1,    -1,    -1,    -1,   255,    -1,    68,    -1,    -1,
9777:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    79,   269,
9778:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9779:       91,  1643,    93,     8,    -1,    -1,    11,    -1,    -1,    -1,
9780:       -1,    -1,    -1,  1655,    -1,  1657,  1658,    -1,   298,    -1,
9781:      111,    -1,    -1,  1665,    -1,    -1,    -1,  1669,    -1,    -1,
9782:     1672,    -1,    -1,    -1,   125,    -1,    41,    -1,    -1,    -1,
9783:       -1,    -1,    -1,    48,   135,    -1,    -1,    -1,    -1,    -1,
9784:      141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   149,    -1,
9785:      151,   152,    -1,    -1,  1706,   345,    -1,  1709,    73,  1711,
9786:      478,    -1,    -1,    -1,   165,    -1,    -1,   485,   486,   487,
9787:      488,   489,   490,    -1,  2913,    -1,    -1,   367,    -1,    -1,
9788:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9789:       -1,    -1,    -1,   194,    -1,    -1,    -1,   387,    -1,   389,
9790:       -1,    -1,   392,    -1,    -1,    -1,    -1,    -1,   209,    -1,
9791:     1603,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9792:       -1,    -1,    -1,    -1,    -1,    -1,  1778,    -1,   143,  1622,
9793:       -1,    -1,    -1,   234,     8,    -1,    -1,    11,    -1,    -1,
9794:       -1,  1793,  1794,    -1,    -1,    -1,  1639,    -1,  1641,  1642,
9795:       -1,  1644,    -1,  1646,    -1,    -1,    -1,    -1,  1651,   174,
9796:     1812,  1654,    -1,    -1,    -1,    -1,  1659,    41,    -1,  1662,
9797:       -1,    -1,    -1,    -1,    48,   190,    -1,    -1,    -1,    -1,
9798:      195,  1674,    -1,    -1,    -1,  1678,  1679,  1680,  1681,    -1,
9799:       -1,    -1,    -1,    -1,  1687,  1688,    -1,  1690,  1691,    73,
9800:       -1,    -1,    -1,    -1,   494,    -1,    -1,    -1,    -1,  1702,
9801:      311,    -1,  1705,   314,    -1,    -1,   231,    -1,  1870,    -1,
9802:     1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,  1721,  1722,
9803:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  1730,    -1,    -1,
9804:       -1,  1734,   343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9805:       -1,   352,    -1,    -1,    -1,    23,    -1,    -1,    -1,    -1,
9806:       -1,    29,    -1,  1756,    -1,   366,    -1,    -1,    36,    -1,
9807:       -1,   286,   373,    -1,    -1,    -1,   377,    -1,    -1,    -1,
9808:       -1,    -1,    -1,    -1,    -1,    -1,   387,    55,    -1,    -1,
9809:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   398,    -1,    -1,
9810:      174,   402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9811:       -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,  1971,
9812:       -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,  1980,    -1,
9813:       -1,  1983,    -1,    -1,  1986,    -1,    -1,   438,   106,    -1,
9814:       -1,    -1,   443,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9815:       -1,    -1,    -1,    -1,    -1,   456,    -1,   231,    -1,    -1,
9816:     2012,  2013,    -1,   378,  2016,    -1,    -1,   135,    -1,    -1,
9817:       -1,    -1,    -1,    -1,    -1,    -1,  2028,    -1,    -1,   480,
9818:       -1,    -1,  1875,  1876,  1877,  2037,    -1,    -1,  2040,    -1,
9819:     2042,    -1,    -1,   494,    -1,    -1,   497,    -1,  2050,    -1,
9820:       -1,    -1,    -1,    -1,    -1,    -1,  2058,  2059,    -1,    -1,
9821:        3,    -1,   286,    -1,    -1,     8,    -1,    -1,    11,    -1,
9822:       -1,    -1,  1915,    16,    17,    18,    -1,    -1,    -1,   197,
9823:       -1,    -1,    -1,    -1,    -1,    -1,  2088,    -1,    -1,    -1,
9824:       33,    -1,    -1,    36,    -1,    -1,  2098,    -1,    41,    -1,
9825:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,    -1,
9826:       -1,    -1,  2114,   478,    -1,    -1,    -1,    -1,    -1,    -1,
9827:      485,   486,   487,   488,   489,   490,    -1,  1970,    -1,   247,
9828:       73,    -1,    -1,  1976,    -1,    -1,    -1,   255,    -1,    -1,
9829:       -1,    -1,    -1,    -1,    -1,    -1,  1989,  1990,  1991,   267,
9830:     1993,  1994,  1995,  1996,   378,    -1,  1999,  2000,  2001,  2002,
9831:     2003,  2004,  2005,  2006,  2007,  2008,  2009,    -1,    -1,    -1,
9832:      288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9833:      298,    -1,    -1,    -1,    -1,    -1,  2029,    -1,    -1,  2032,
9834:       -1,  2034,    -1,    -1,    -1,  2038,  2039,    -1,    -1,    -1,
9835:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2052,
9836:     2053,  2054,  2055,    -1,  2057,    -1,    -1,    -1,    -1,    -1,
9837:       -1,   339,    -1,    -1,    -1,   343,    -1,   345,    -1,    -1,
9838:       -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9839:       -1,    -1,    -1,    -1,    -1,    -1,  2248,   190,    -1,   367,
9840:       -1,    -1,   195,    -1,   478,   373,    -1,    -1,    -1,    -1,
9841:       -1,   485,   486,   487,   488,   489,   490,    -1,    -1,   387,
9842:       -1,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,    -1,
9843:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
9844:     2133,    -1,    -1,    -1,  2296,  2297,    -1,    -1,    -1,  2301,
9845:       -1,    -1,    -1,    -1,  2306,    -1,    -1,  2309,  2310,    -1,
9846:       -1,     8,  2314,    -1,    11,    -1,    -1,    -1,    -1,    16,
9847:       17,    18,   440,    -1,    -1,    -1,   269,    -1,    -1,   272,
9848:       -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    36,
9849:       -1,    -1,    -1,   286,    41,    -1,   289,    -1,    -1,    -1,
9850:       -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,  2360,    -1,
9851:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9852:       -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
9853:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9854:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9855:       -1,  2403,    -1,    -1,    -1,    -1,  2249,    -1,    -1,    -1,
9856:     2253,  2254,    -1,  2256,    -1,    -1,  2259,  2260,  2261,  2262,
9857:       -1,    -1,    -1,  2266,  2267,  2268,  2269,  2270,  2271,  2272,
9858:     2273,  2274,  2275,  2276,  2277,   378,    -1,    -1,     8,    -1,
9859:       -1,    11,    -1,    -1,    -1,  2288,    16,    17,    18,    -1,
9860:       -1,    -1,  2295,    -1,    -1,  2298,    -1,  2300,    -1,    -1,
9861:       -1,  2304,    -1,    33,  2307,  2308,    -1,    -1,  2311,  2312,
9862:       -1,    41,    -1,    -1,    -1,    -1,    -1,   174,    48,    -1,
9863:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9864:       -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,
9865:       -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,  2351,    -1,
9866:       -1,    -1,    -1,    -1,    -1,  2517,  2359,    -1,    -1,    -1,
9867:      217,   218,    -1,    -1,  2526,  2527,    -1,    -1,  2530,  2372,
9868:       -1,    -1,    -1,    -1,   231,   478,    -1,    -1,   481,   482,
9869:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
9870:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9871:       -1,    -1,    -1,    -1,    -1,  2567,  2568,    -1,    -1,    -1,
9872:       -1,    -1,   269,    -1,    -1,   272,    -1,    23,    -1,  2581,
9873:       -1,    -1,    -1,    29,    -1,    -1,    -1,    -1,    -1,   286,
9874:       36,    -1,   289,    -1,    -1,    -1,    -1,    -1,    21,    -1,
9875:       -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    55,
9876:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9877:      190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
9878:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9879:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
9880:       -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9881:      106,   231,    -1,    -1,  2507,    -1,    -1,    90,  2511,    -1,
9882:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2520,  2521,  2522,
9883:       -1,   378,  2525,    -1,    -1,  2528,  2529,    -1,    -1,   135,
9884:     2533,    -1,    -1,  2695,    -1,    -1,    -1,    -1,    -1,   269,
9885:       -1,    -1,   272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9886:     2712,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,
9887:       -1,   144,    -1,    -1,  2726,    -1,    -1,  2729,    -1,    -1,
9888:       -1,   154,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9889:       -1,    -1,  2744,   166,    -1,    -1,    -1,    -1,   171,    -1,
9890:       -1,   197,    -1,    -1,    -1,    -1,    -1,    -1,  2601,    -1,
9891:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9892:       -1,    -1,    -1,    -1,    -1,   198,    -1,  2620,    -1,    -1,
9893:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
9894:      487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,
9895:       -1,   247,    -1,    -1,    -1,    -1,    -1,    -1,   378,   255,
9896:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   242,
9897:       -1,   267,    -1,   246,    -1,  2827,    -1,  2670,  2671,  2831,
9898:       -1,    -1,    -1,  2676,  2677,  2678,    -1,    -1,    -1,    -1,
9899:       -1,    -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9900:       -1,    -1,   298,    -1,    -1,    -1,    -1,  2859,    -1,    -1,
9901:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9902:       -1,    -1,    -1,    -1,    -1,    -1,    -1,  2720,  2721,    -1,
9903:       -1,    -1,    -1,    -1,    -1,    -1,   309,    -1,    -1,    -1,
9904:     2892,    -1,  2735,   339,    -1,    -1,    -1,   343,    -1,   345,
9905:      323,    -1,    -1,    -1,  2747,    -1,    -1,    -1,   478,    -1,
9906:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
9907:      490,   367,    -1,    -1,    -1,   495,    -1,   373,    -1,    -1,
9908:     2932,  2933,    -1,   356,    -1,    -1,   359,    -1,    -1,    -1,
9909:       -1,   387,    -1,    -1,   367,    -1,    -1,   370,    -1,    -1,
9910:       -1,    -1,    -1,  2796,    -1,    -1,    -1,    -1,    -1,    -1,
9911:       -1,    -1,    -1,    -1,    -1,  2967,   389,    -1,    -1,    -1,
9912:       -1,  2814,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   402,
9913:       -1,    -1,    -1,    -1,    -1,    -1,   409,    -1,    -1,    -1,
9914:       -1,    -1,    -1,  2836,   440,   418,    -1,    -1,    -1,    -1,
9915:       -1,   424,    -1,    -1,    -1,    -1,    -1,  2850,    -1,    -1,
9916:       -1,  3013,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9917:       -1,    -1,    -1,    -1,    -1,    -1,   449,    -1,    -1,    -1,
9918:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9919:       -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,
9920:        9,    10,    -1,    -1,  2897,    -1,    -1,    -1,    -1,    -1,
9921:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
9922:       29,    30,    -1,    -1,    -1,    -1,    35,  2920,    -1,    38,
9923:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
9924:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
9925:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
9926:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
9927:       79,    80,    81,    82,    83,    84,    85,  2970,    87,    88,
9928:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
9929:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
9930:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
9931:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
9932:      129,   130,    -1,   132,   133,   134,   135,   136,    -1,   138,
9933:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
9934:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
9935:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
9936:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
9937:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
9938:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
9939:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
9940:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
9941:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
9942:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
9943:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
9944:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
9945:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
9946:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
9947:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
9948:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
9949:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
9950:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
9951:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
9952:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
9953:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
9954:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
9955:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
9956:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
9957:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
9958:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
9959:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
9960:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
9961:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
9962:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
9963:      439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
9964:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
9965:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
9966:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
9967:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,    -1,
9968:       -1,    -1,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,
9969:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
9970:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
9971:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
9972:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
9973:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
9974:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
9975:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
9976:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
9977:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
9978:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
9979:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
9980:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
9981:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
9982:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
9983:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
9984:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
9985:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
9986:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
9987:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
9988:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
9989:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
9990:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
9991:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
9992:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
9993:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
9994:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
9995:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
9996:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
9997:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
9998:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
9999:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10000:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10001:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10002:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10003:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10004:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10005:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
10006:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10007:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10008:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10009:       -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
10010:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10011:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10012:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10013:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10014:      449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
10015:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10016:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10017:       -1,   480,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10018:       -1,    -1,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,
10019:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10020:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10021:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10022:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10023:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10024:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10025:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10026:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10027:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10028:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10029:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10030:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10031:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10032:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10033:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10034:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10035:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10036:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10037:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10038:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10039:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10040:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10041:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10042:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10043:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10044:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10045:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10046:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10047:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10048:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10049:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10050:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10051:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10052:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10053:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10054:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10055:      359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
10056:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10057:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10058:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10059:       -1,   400,   401,   402,   403,   404,   405,   406,   407,   408,
10060:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10061:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10062:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10063:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10064:      449,   450,   451,    -1,    -1,   454,    -1,   456,   457,   458,
10065:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10066:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10067:       -1,   480,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10068:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10069:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10070:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10071:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10072:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10073:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10074:       49,    50,    51,    52,    53,    54,    55,    56,    57,    58,
10075:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10076:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10077:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10078:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10079:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10080:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10081:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10082:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10083:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10084:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10085:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10086:      169,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10087:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10088:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10089:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10090:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10091:      219,   220,   221,   222,   223,   224,   225,    -1,   227,   228,
10092:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10093:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10094:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10095:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10096:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10097:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10098:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10099:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10100:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10101:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10102:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10103:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10104:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10105:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10106:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10107:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10108:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10109:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10110:      409,    -1,   411,   412,    -1,   414,   415,   416,   417,   418,
10111:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10112:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10113:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10114:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10115:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10116:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10117:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10118:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10119:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10120:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10121:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
10122:       29,    30,    -1,    -1,    -1,    34,    35,    -1,    -1,    38,
10123:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10124:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10125:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10126:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10127:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10128:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10129:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10130:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10131:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10132:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10133:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10134:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10135:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10136:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10137:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10138:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10139:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10140:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10141:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10142:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10143:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10144:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10145:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10146:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10147:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10148:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10149:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10150:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10151:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10152:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10153:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10154:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10155:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10156:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10157:      379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
10158:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10159:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10160:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10161:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10162:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10163:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10164:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10165:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10166:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10167:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10168:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10169:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10170:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10171:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
10172:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10173:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10174:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10175:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10176:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10177:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10178:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10179:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10180:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10181:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10182:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10183:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10184:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10185:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10186:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10187:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10188:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10189:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10190:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10191:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10192:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10193:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10194:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10195:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10196:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10197:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10198:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10199:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10200:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10201:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10202:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10203:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10204:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10205:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10206:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10207:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10208:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10209:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10210:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10211:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10212:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10213:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10214:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10215:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10216:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10217:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,    -1,
10218:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10219:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10220:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10221:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
10222:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10223:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10224:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10225:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10226:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10227:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10228:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10229:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10230:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10231:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10232:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10233:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10234:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10235:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10236:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10237:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10238:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10239:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10240:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10241:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10242:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10243:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10244:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10245:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10246:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10247:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10248:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10249:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10250:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10251:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10252:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10253:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10254:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10255:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10256:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10257:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10258:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10259:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10260:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10261:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10262:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10263:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10264:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10265:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10266:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10267:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,    -1,
10268:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10269:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10270:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10271:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10272:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10273:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10274:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10275:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10276:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10277:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10278:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10279:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10280:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10281:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10282:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10283:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10284:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10285:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10286:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10287:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10288:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10289:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10290:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10291:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10292:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10293:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10294:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10295:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10296:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10297:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10298:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10299:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10300:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10301:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10302:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10303:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10304:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10305:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10306:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10307:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10308:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10309:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10310:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10311:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10312:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10313:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10314:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10315:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10316:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10317:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,    -1,
10318:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10319:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10320:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10321:       19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
10322:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10323:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10324:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10325:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10326:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10327:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10328:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10329:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10330:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10331:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10332:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10333:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10334:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10335:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10336:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10337:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10338:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10339:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10340:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10341:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10342:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10343:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10344:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10345:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10346:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10347:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10348:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10349:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10350:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10351:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10352:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10353:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10354:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10355:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10356:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10357:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10358:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10359:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10360:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10361:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10362:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10363:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10364:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10365:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10366:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10367:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10368:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10369:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10370:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10371:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10372:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10373:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10374:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10375:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10376:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10377:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10378:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10379:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10380:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10381:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10382:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10383:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10384:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10385:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10386:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10387:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10388:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10389:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10390:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10391:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10392:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10393:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10394:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10395:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10396:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10397:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10398:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10399:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10400:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10401:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10402:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10403:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10404:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10405:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10406:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10407:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10408:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10409:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10410:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10411:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10412:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10413:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10414:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10415:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10416:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10417:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10418:       -1,    -1,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,
10419:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10420:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10421:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10422:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10423:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10424:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10425:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10426:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10427:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10428:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10429:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10430:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10431:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10432:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10433:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10434:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10435:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10436:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10437:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10438:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10439:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10440:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10441:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10442:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10443:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10444:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10445:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10446:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10447:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10448:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10449:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10450:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10451:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10452:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10453:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10454:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10455:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10456:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10457:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10458:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10459:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10460:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10461:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10462:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10463:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10464:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10465:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10466:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10467:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10468:       -1,    -1,    -1,   492,    -1,   494,   495,    -1,    -1,    -1,
10469:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10470:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10471:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10472:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10473:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10474:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10475:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10476:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10477:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10478:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10479:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10480:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10481:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10482:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10483:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10484:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10485:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10486:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10487:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10488:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10489:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10490:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10491:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10492:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10493:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10494:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10495:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10496:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10497:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10498:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10499:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10500:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10501:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10502:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10503:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10504:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10505:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10506:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10507:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10508:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10509:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10510:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10511:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10512:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10513:      439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
10514:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10515:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10516:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10517:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10518:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10519:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10520:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10521:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10522:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10523:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10524:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10525:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10526:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10527:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10528:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10529:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10530:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10531:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10532:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10533:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10534:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10535:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10536:      169,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10537:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10538:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10539:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10540:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10541:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10542:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10543:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10544:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10545:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10546:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10547:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10548:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10549:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10550:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10551:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10552:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10553:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10554:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10555:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10556:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10557:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10558:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10559:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10560:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10561:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10562:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10563:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10564:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10565:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10566:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10567:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10568:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10569:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10570:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10571:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10572:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10573:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10574:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10575:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10576:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10577:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10578:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10579:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10580:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10581:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10582:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10583:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10584:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10585:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10586:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10587:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10588:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10589:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10590:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10591:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10592:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10593:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10594:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10595:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10596:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10597:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10598:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10599:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10600:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10601:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10602:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10603:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10604:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10605:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10606:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10607:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10608:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10609:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10610:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10611:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10612:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10613:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10614:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10615:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10616:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10617:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10618:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10619:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10620:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10621:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10622:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10623:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10624:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10625:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10626:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10627:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10628:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10629:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10630:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10631:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10632:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10633:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10634:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10635:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10636:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10637:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10638:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10639:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10640:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10641:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10642:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10643:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10644:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10645:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10646:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10647:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10648:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10649:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10650:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10651:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10652:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10653:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10654:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10655:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10656:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10657:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10658:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10659:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10660:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10661:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10662:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10663:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10664:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10665:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10666:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10667:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10668:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10669:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10670:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10671:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10672:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10673:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10674:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10675:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10676:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10677:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10678:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10679:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10680:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10681:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10682:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10683:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10684:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10685:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10686:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10687:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10688:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10689:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10690:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10691:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10692:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10693:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10694:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10695:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10696:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10697:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10698:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10699:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10700:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10701:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10702:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10703:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10704:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10705:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10706:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10707:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10708:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10709:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10710:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10711:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10712:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10713:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10714:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10715:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10716:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10717:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10718:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10719:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10720:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10721:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10722:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10723:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10724:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10725:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10726:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10727:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10728:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10729:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10730:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10731:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10732:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10733:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10734:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10735:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10736:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10737:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10738:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10739:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10740:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10741:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10742:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10743:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10744:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10745:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10746:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10747:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10748:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10749:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10750:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10751:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10752:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10753:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10754:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10755:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10756:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10757:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10758:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10759:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10760:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10761:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10762:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10763:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10764:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10765:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10766:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10767:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10768:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10769:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10770:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10771:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10772:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10773:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10774:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10775:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10776:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10777:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10778:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10779:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10780:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10781:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10782:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10783:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10784:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10785:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10786:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10787:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10788:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10789:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10790:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10791:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10792:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10793:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10794:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10795:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10796:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10797:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10798:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10799:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10800:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10801:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10802:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10803:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10804:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10805:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10806:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10807:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10808:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10809:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10810:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10811:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10812:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10813:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10814:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10815:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10816:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10817:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10818:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10819:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10820:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10821:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10822:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10823:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10824:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10825:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10826:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10827:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10828:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10829:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10830:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10831:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10832:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10833:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10834:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10835:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10836:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10837:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10838:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10839:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10840:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10841:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10842:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10843:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10844:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10845:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10846:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10847:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10848:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10849:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10850:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10851:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10852:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10853:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10854:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10855:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10856:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10857:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10858:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10859:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10860:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10861:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10862:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10863:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10864:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10865:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10866:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10867:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10868:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10869:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10870:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10871:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10872:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10873:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10874:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10875:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10876:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10877:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10878:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10879:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10880:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10881:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10882:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10883:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10884:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10885:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10886:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10887:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10888:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10889:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10890:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10891:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10892:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10893:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10894:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10895:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10896:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10897:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10898:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10899:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10900:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10901:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10902:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10903:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10904:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10905:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10906:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10907:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10908:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10909:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10910:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10911:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10912:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10913:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10914:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10915:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10916:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10917:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10918:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10919:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10920:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10921:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10922:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10923:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10924:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10925:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10926:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10927:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10928:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10929:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10930:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10931:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10932:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10933:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10934:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10935:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10936:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10937:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10938:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10939:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10940:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
10941:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10942:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10943:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10944:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10945:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10946:      269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
10947:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10948:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10949:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
10950:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
10951:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
10952:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
10953:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
10954:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
10955:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
10956:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
10957:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
10958:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
10959:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
10960:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
10961:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
10962:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
10963:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
10964:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
10965:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
10966:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
10967:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
10968:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
10969:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
10970:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
10971:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
10972:       29,    30,    -1,    -1,    -1,    -1,    35,    -1,    -1,    38,
10973:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
10974:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
10975:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
10976:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
10977:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
10978:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
10979:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
10980:      109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
10981:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
10982:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
10983:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
10984:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
10985:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
10986:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
10987:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
10988:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
10989:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
10990:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
10991:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
10992:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
10993:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
10994:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
10995:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
10996:       -1,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
10997:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
10998:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
10999:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11000:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11001:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11002:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11003:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11004:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11005:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
11006:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
11007:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11008:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11009:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
11010:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11011:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
11012:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
11013:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
11014:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
11015:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11016:      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,
11017:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
11018:       -1,    -1,    -1,   492,    -1,   494,    -1,    -1,    -1,    -1,
11019:      499,    -1,   501,   502,     3,     4,     5,     6,     7,     8,
11020:        9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11021:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11022:       29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,
11023:       39,    -1,    41,    42,    43,    44,    45,    46,    47,    48,
11024:       49,    50,    51,    52,    -1,    54,    55,    56,    57,    58,
11025:       59,    60,    61,    62,    63,    64,    65,    66,    -1,    68,
11026:       69,    70,    71,    72,    -1,    74,    -1,    76,    77,    78,
11027:       79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
11028:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
11029:       99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
11030:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
11031:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
11032:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
11033:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
11034:      149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
11035:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
11036:       -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
11037:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
11038:      189,   190,   191,   192,   193,   194,    -1,   196,   197,   198,
11039:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
11040:      209,   210,   211,   212,    -1,   214,    -1,   216,   217,   218,
11041:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
11042:      229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,
11043:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11044:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11045:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
11046:       -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
11047:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
11048:       -1,    -1,   291,   292,   293,   294,   295,   296,   297,   298,
11049:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11050:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11051:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11052:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11053:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11054:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11055:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
11056:      369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
11057:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11058:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11059:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
11060:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11061:      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
11062:       -1,    -1,   431,   432,   433,   434,   435,   436,    -1,   438,
11063:      439,   440,   441,   442,   443,   444,    -1,   446,   447,   448,
11064:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
11065:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11066:      469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
11067:       -1,    -1,    -1,    -1,    -1,    -1,   485,   486,    -1,    -1,
11068:        3,     4,     5,     6,     7,   494,     9,    10,    -1,    -1,
11069:       -1,    -1,   501,   502,    -1,    -1,    19,    20,    21,    22,
11070:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11071:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11072:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
11073:       -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
11074:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11075:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
11076:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11077:       -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
11078:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11079:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
11080:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11081:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11082:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11083:      153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
11084:      163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
11085:      173,   174,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11086:      183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
11087:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11088:      203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
11089:       -1,   214,    -1,   216,   217,   218,   219,   220,   221,   222,
11090:      223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
11091:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11092:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11093:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11094:      263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
11095:      273,   274,   275,   276,   277,   278,   279,   280,    -1,   282,
11096:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11097:      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
11098:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11099:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11100:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11101:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11102:      343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
11103:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11104:      363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
11105:      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
11106:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11107:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
11108:      403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
11109:       -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
11110:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11111:      433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
11112:      443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
11113:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
11114:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11115:      473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
11116:       -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
11117:       -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
11118:        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
11119:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
11120:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11121:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
11122:       43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
11123:       -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
11124:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11125:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
11126:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11127:       -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
11128:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11129:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
11130:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11131:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11132:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11133:      153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
11134:      163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
11135:      173,   174,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11136:      183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
11137:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11138:      203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
11139:       -1,   214,    -1,   216,    -1,   218,   219,   220,   221,   222,
11140:      223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,
11141:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11142:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11143:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11144:      263,   264,   265,   266,   267,   268,    -1,   270,   271,   272,
11145:      273,   274,   275,   276,   277,   278,   279,   280,    -1,   282,
11146:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11147:      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
11148:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11149:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11150:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11151:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11152:      343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
11153:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11154:      363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
11155:      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,
11156:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11157:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
11158:      403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
11159:       -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
11160:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11161:      433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
11162:      443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
11163:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
11164:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11165:      473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
11166:       -1,    -1,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
11167:       -1,   494,    -1,    -1,    -1,    -1,    -1,    -1,   501,   502,
11168:        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
11169:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
11170:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
11171:       -1,    -1,    35,    -1,    -1,    38,    39,    -1,    41,    42,
11172:       43,    44,    45,    46,    47,    -1,    49,    50,    51,    52,
11173:       -1,    54,    55,    56,    57,    58,    59,    60,    61,    62,
11174:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
11175:       -1,    74,    -1,    76,    77,    78,    79,    80,    81,    82,
11176:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
11177:       -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
11178:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
11179:      113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
11180:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
11181:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
11182:       -1,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
11183:      153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
11184:      163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
11185:      173,    -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,
11186:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
11187:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
11188:      203,   204,   205,   206,   207,   208,   209,   210,   211,   212,
11189:       -1,   214,    -1,   216,    -1,    -1,   219,   220,   221,   222,
11190:      223,   224,   225,    -1,    -1,   228,   229,   230,    -1,    -1,
11191:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
11192:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
11193:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
11194:      263,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
11195:      273,   274,   275,   276,   277,   278,   279,   280,    -1,   282,
11196:      283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,
11197:      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
11198:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
11199:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
11200:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
11201:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
11202:      343,   344,   345,   346,    -1,   348,   349,   350,   351,   352,
11203:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
11204:      363,   364,   365,    -1,   367,   368,   369,   370,   371,   372,
11205:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
11206:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
11207:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
11208:      403,   404,   405,   406,   407,   408,   409,    -1,   411,   412,
11209:       -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
11210:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
11211:      433,   434,   435,   436,    -1,   438,   439,   440,   441,   442,
11212:      443,   444,    -1,   446,   447,   448,   449,   450,   451,    -1,
11213:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
11214:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
11215:      473,   474,   475,   476,   477,    -1,    -1,    -1,    -1,    -1,
11216:       -1,    -1,   485,   486,     3,    -1,    -1,    -1,    -1,   492,
11217:       -1,   494,    -1,    -1,    -1,    -1,   499,    -1,   501,   502,
11218:       19,    20,    21,    22,    23,    24,    25,    26,    -1,    28,
11219:       29,    30,    -1,    -1,    -1,    -1,    -1,    36,    -1,    38,
11220:       39,    -1,    41,    42,    43,    -1,    45,    46,    47,    48,
11221:       49,    -1,    51,    52,    -1,    54,    55,    56,    57,    58,
11222:       59,    -1,    -1,    62,    63,    64,    65,    66,    -1,    68,
11223:       69,    70,    71,    72,    -1,    -1,    -1,    76,    77,    78,
11224:       79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
11225:       89,    90,    91,    92,    -1,    94,    95,    96,    97,    -1,
11226:       -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
11227:      109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
11228:      119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
11229:      129,    -1,    -1,   132,   133,   134,   135,   136,    -1,   138,
11230:      139,   140,    -1,   142,   143,   144,    -1,   146,   147,   148,
11231:      149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
11232:       -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
11233:       -1,   170,   171,   172,   173,    -1,   175,    -1,   177,    -1,
11234:      179,   180,   181,    -1,   183,   184,   185,   186,   187,   188,
11235:      189,    -1,   191,   192,   193,   194,    -1,   196,   197,   198,
11236:      199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
11237:      209,   210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,
11238:      219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,
11239:      229,   230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,
11240:      239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
11241:      249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
11242:      259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
11243:       -1,   270,   271,    -1,   273,    -1,   275,   276,   277,   278,
11244:      279,   280,    -1,   282,   283,    -1,    -1,   286,   287,   288,
11245:       -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,   298,
11246:      299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
11247:      309,   310,   311,   312,   313,   314,   315,   316,    -1,   318,
11248:      319,   320,   321,   322,   323,    -1,   325,   326,   327,   328,
11249:      329,   330,   331,   332,    -1,   334,   335,   336,   337,   338,
11250:      339,   340,   341,   342,   343,   344,   345,   346,    -1,   348,
11251:      349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
11252:      359,   360,   361,   362,   363,   364,   365,    -1,   367,   368,
11253:      369,   370,   371,    -1,   373,   374,   375,   376,   377,    -1,
11254:      379,   380,   381,   382,    -1,   384,   385,   386,   387,   388,
11255:      389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
11256:       -1,   400,   401,    -1,   403,   404,   405,   406,   407,   408,
11257:      409,    -1,   411,   412,    -1,    -1,   415,   416,   417,   418,
11258:      419,    -1,   421,   422,   423,   424,   425,   426,   427,   428,
11259:       -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,   438,
11260:      439,   440,   441,   442,   443,   444,    -1,   446,    -1,   448,
11261:      449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,
11262:      459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
11263:      469,   470,   471,   472,   473,   474,   475,   476,   477,    -1,
11264:       -1,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
11265:       -1,    -1,    -1,    -1,    -1,    -1,   495,    19,    20,    21,
11266:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
11267:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
11268:       42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
11269:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    61,
11270:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
11271:       72,    -1,    74,    -1,    76,    77,    78,    79,    80,    81,
11272:       82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
11273:       92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
11274:      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
11275:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
11276:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
11277:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
11278:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
11279:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
11280:      162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
11281:      172,   173,   174,   175,    -1,   177,    -1,   179,   180,   181,
11282:       -1,   183,   184,   185,   186,   187,   188,   189,   190,   191,
11283:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
11284:       -1,   203,   204,   205,   206,   207,   208,   209,   210,   211,
11285:      212,    -1,   214,    -1,   216,   217,   218,   219,   220,   221,
11286:      222,   223,   224,   225,   226,    -1,   228,   229,   230,   231,
11287:       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,
11288:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11289:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11290:      262,   263,   264,   265,   266,   267,   268,    -1,   270,   271,
11291:      272,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
11292:      282,   283,    -1,   285,   286,   287,   288,    -1,    -1,   291,
11293:      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
11294:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11295:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11296:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11297:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11298:      342,   343,   344,   345,   346,    -1,   348,   349,   350,   351,
11299:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11300:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
11301:      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,
11302:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11303:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11304:      402,   403,   404,   405,   406,   407,   408,   409,    -1,   411,
11305:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
11306:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11307:      432,   433,   434,   435,   436,    -1,   438,   439,   440,   441,
11308:      442,   443,   444,    -1,   446,   447,   448,   449,   450,   451,
11309:       -1,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
11310:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11311:      472,   473,   474,   475,   476,   477,    -1,     3,   480,     5,
11312:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11313:       -1,    -1,   494,    19,    20,    21,    22,    23,    24,    25,
11314:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11315:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
11316:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
11317:       56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
11318:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
11319:       76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
11320:       -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
11321:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
11322:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
11323:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11324:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11325:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
11326:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11327:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
11328:       -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
11329:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11330:      186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
11331:      196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
11332:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11333:      216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
11334:      226,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
11335:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
11336:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11337:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
11338:      266,   267,   268,    -1,   270,   271,   272,   273,    -1,   275,
11339:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,   285,
11340:      286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
11341:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11342:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11343:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11344:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11345:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11346:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
11347:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11348:       -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
11349:      376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
11350:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11351:      396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
11352:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11353:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
11354:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11355:      436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11356:      446,   447,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11357:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11358:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11359:      476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
11360:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,
11361:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11362:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11363:       -1,    41,    42,    43,    44,    45,    46,    47,    48,    49,
11364:       50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11365:       -1,    61,    62,    63,    64,    65,    66,    -1,    68,    69,
11366:       70,    71,    72,    -1,    74,    -1,    76,    77,    78,    79,
11367:       80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
11368:       90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
11369:      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
11370:      110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
11371:      120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
11372:       -1,    -1,   132,   133,   134,   135,   136,    -1,   138,   139,
11373:      140,    -1,   142,   143,   144,    -1,   146,   147,   148,   149,
11374:      150,   151,   152,   153,   154,   155,   156,    -1,   158,    -1,
11375:      160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
11376:      170,   171,   172,   173,   174,   175,    -1,   177,    -1,   179,
11377:      180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
11378:      190,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
11379:      200,   201,    -1,   203,   204,   205,   206,   207,   208,   209,
11380:      210,   211,   212,    -1,   214,    -1,   216,   217,   218,   219,
11381:      220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,
11382:      230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,
11383:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11384:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
11385:      260,   261,   262,   263,   264,   265,   266,   267,   268,    -1,
11386:      270,   271,   272,   273,    -1,   275,   276,   277,   278,   279,
11387:      280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
11388:       -1,   291,   292,   293,   294,   295,   296,   297,   298,   299,
11389:      300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
11390:      310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
11391:      320,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
11392:      330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
11393:      340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
11394:      350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
11395:      360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
11396:      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
11397:      380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
11398:      390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
11399:      400,   401,    -1,   403,   404,   405,   406,   407,   408,   409,
11400:       -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
11401:       -1,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
11402:       -1,   431,   432,   433,   434,   435,   436,    -1,   438,   439,
11403:      440,   441,   442,   443,   444,    -1,   446,   447,   448,   449,
11404:      450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
11405:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11406:      470,   471,   472,   473,   474,   475,   476,   477,    -1,     3,
11407:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11408:       -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,    23,
11409:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
11410:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
11411:       44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,
11412:       54,    55,    56,    57,    58,    59,    -1,    61,    62,    63,
11413:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
11414:       74,    -1,    76,    77,    78,    79,    80,    81,    82,    83,
11415:       84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
11416:       94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
11417:      104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11418:      114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
11419:       -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
11420:      134,   135,   136,    -1,   138,   139,   140,    -1,   142,   143,
11421:      144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
11422:      154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
11423:       -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
11424:      174,   175,    -1,   177,    -1,   179,   180,   181,    -1,   183,
11425:      184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
11426:      194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
11427:      204,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
11428:      214,    -1,   216,   217,   218,   219,   220,   221,   222,   223,
11429:      224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,
11430:      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
11431:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
11432:      254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
11433:      264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
11434:       -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
11435:       -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,   293,
11436:      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
11437:      304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
11438:      314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
11439:       -1,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
11440:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
11441:      344,   345,   346,    -1,   348,   349,   350,   351,   352,   353,
11442:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
11443:      364,   365,    -1,   367,   368,   369,   370,   371,   372,   373,
11444:      374,   375,   376,   377,   378,   379,   380,   381,   382,    -1,
11445:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
11446:      394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
11447:      404,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
11448:       -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
11449:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
11450:      434,   435,   436,    -1,   438,   439,   440,   441,   442,   443,
11451:      444,    -1,   446,   447,   448,   449,   450,   451,    -1,    -1,
11452:      454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
11453:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
11454:      474,   475,   476,   477,    -1,     3,     4,     5,    -1,    -1,
11455:       -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11456:      494,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
11457:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11458:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
11459:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
11460:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
11461:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
11462:       78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
11463:       88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
11464:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
11465:      108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
11466:      118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
11467:      128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
11468:      138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
11469:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
11470:      158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
11471:       -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
11472:       -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
11473:      188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
11474:      198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
11475:      208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
11476:       -1,   219,    -1,   221,   222,   223,   224,   225,    -1,    -1,
11477:      228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,
11478:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
11479:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
11480:      258,   259,   260,   261,   262,    -1,   264,   265,   266,   267,
11481:      268,    -1,   270,   271,    -1,   273,    -1,   275,   276,   277,
11482:      278,   279,   280,    -1,   282,   283,   284,    -1,   286,   287,
11483:      288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,
11484:      298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
11485:      308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
11486:      318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
11487:      328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
11488:      338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
11489:      348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
11490:      358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
11491:      368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
11492:       -1,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
11493:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
11494:      398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
11495:      408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
11496:      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
11497:      428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
11498:      438,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
11499:      448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
11500:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
11501:      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
11502:       -1,     3,    -1,    -1,    -1,    -1,    -1,   485,   486,   487,
11503:       -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,
11504:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    31,
11505:       32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
11506:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
11507:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
11508:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
11509:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
11510:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
11511:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
11512:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
11513:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
11514:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
11515:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
11516:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
11517:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
11518:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
11519:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
11520:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
11521:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
11522:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
11523:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
11524:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
11525:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
11526:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11527:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11528:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
11529:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
11530:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
11531:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
11532:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11533:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11534:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11535:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11536:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
11537:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11538:      362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
11539:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
11540:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11541:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11542:      402,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
11543:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
11544:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11545:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
11546:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
11547:       -1,    -1,   454,    -1,   456,   457,   458,   459,   460,   461,
11548:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11549:      472,   473,   474,   475,   476,   477,    -1,     3,   480,    -1,
11550:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11551:       -1,    -1,   494,    19,    20,    21,    22,    23,    24,    25,
11552:       26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11553:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
11554:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
11555:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
11556:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
11557:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
11558:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
11559:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
11560:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
11561:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11562:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11563:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
11564:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11565:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
11566:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
11567:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11568:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
11569:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
11570:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11571:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
11572:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
11573:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
11574:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11575:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
11576:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
11577:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
11578:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
11579:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11580:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11581:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11582:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11583:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11584:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
11585:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11586:      366,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
11587:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
11588:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11589:      396,   397,   398,    -1,   400,   401,   402,   403,    -1,   405,
11590:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11591:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
11592:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11593:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11594:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11595:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11596:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11597:      476,   477,    -1,     3,   480,    -1,    -1,    -1,    -1,    -1,
11598:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,
11599:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11600:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11601:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11602:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11603:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
11604:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
11605:       80,    81,    -1,    83,    84,    85,    -1,    87,    88,    89,
11606:       90,    91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,
11607:       -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,
11608:      110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
11609:      120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
11610:       -1,    -1,   132,   133,   134,   135,   136,    -1,   138,   139,
11611:      140,    -1,   142,   143,   144,    -1,   146,   147,   148,   149,
11612:      150,   151,   152,   153,   154,   155,   156,    -1,   158,    -1,
11613:      160,   161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,
11614:       -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,   179,
11615:      180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
11616:       -1,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
11617:      200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
11618:      210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
11619:       -1,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
11620:      230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
11621:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11622:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
11623:      260,   261,   262,    -1,   264,   265,   266,   267,   268,    -1,
11624:      270,   271,    -1,   273,    -1,   275,   276,   277,   278,   279,
11625:      280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
11626:       -1,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
11627:      300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
11628:      310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
11629:      320,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
11630:      330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
11631:      340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
11632:       -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
11633:      360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
11634:      370,   371,    -1,   373,   374,   375,   376,   377,    -1,   379,
11635:      380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
11636:      390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
11637:      400,   401,   402,   403,    -1,   405,   406,   407,   408,   409,
11638:       -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
11639:       -1,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
11640:       -1,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
11641:      440,   441,   442,   443,   444,    -1,   446,    -1,   448,   449,
11642:      450,   451,    -1,    -1,   454,    -1,   456,   457,   458,   459,
11643:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11644:      470,   471,   472,   473,   474,   475,   476,   477,    -1,     3,
11645:      480,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11646:       -1,    -1,    -1,    -1,   494,    19,    20,    21,    22,    23,
11647:       24,    25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,
11648:       -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,
11649:       -1,    45,    46,    47,    48,    49,    -1,    51,    52,    -1,
11650:       54,    55,    56,    57,    58,    59,    -1,    -1,    62,    63,
11651:       64,    65,    66,    -1,    68,    69,    70,    71,    72,    -1,
11652:       -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
11653:       84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
11654:       -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
11655:       -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
11656:      114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
11657:       -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
11658:      134,   135,   136,    -1,   138,   139,   140,    -1,   142,   143,
11659:      144,    -1,   146,   147,   148,   149,   150,   151,   152,   153,
11660:      154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
11661:       -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
11662:       -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,   183,
11663:      184,   185,   186,   187,   188,   189,    -1,   191,   192,   193,
11664:      194,    -1,   196,   197,   198,   199,   200,   201,    -1,   203,
11665:       -1,   205,   206,   207,   208,   209,   210,   211,   212,    -1,
11666:      214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,
11667:      224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,
11668:      234,   235,    -1,    -1,   238,   239,   240,   241,   242,   243,
11669:      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
11670:      254,   255,   256,   257,   258,   259,   260,   261,   262,    -1,
11671:      264,   265,   266,   267,   268,    -1,   270,   271,    -1,   273,
11672:       -1,   275,   276,   277,   278,   279,   280,    -1,   282,   283,
11673:       -1,    -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,
11674:      294,    -1,   296,   297,   298,   299,   300,   301,   302,   303,
11675:      304,   305,   306,    -1,   308,   309,   310,   311,   312,   313,
11676:      314,   315,   316,    -1,   318,   319,   320,   321,   322,   323,
11677:       -1,   325,   326,   327,   328,   329,   330,   331,   332,    -1,
11678:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
11679:      344,   345,   346,    -1,   348,   349,    -1,   351,   352,   353,
11680:      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
11681:      364,   365,    -1,   367,   368,   369,   370,   371,    -1,   373,
11682:      374,   375,   376,   377,    -1,   379,   380,   381,   382,    -1,
11683:      384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
11684:      394,   395,   396,   397,   398,    -1,   400,   401,    -1,   403,
11685:       -1,   405,   406,   407,   408,   409,    -1,   411,   412,    -1,
11686:       -1,   415,   416,   417,   418,   419,    -1,   421,   422,   423,
11687:      424,   425,   426,   427,   428,    -1,    -1,   431,   432,   433,
11688:      434,   435,    -1,    -1,   438,   439,   440,   441,   442,   443,
11689:      444,    -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,
11690:      454,    -1,    -1,   457,   458,   459,   460,   461,   462,   463,
11691:      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
11692:      474,   475,   476,   477,    -1,     3,    -1,     5,    -1,    -1,
11693:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11694:      494,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
11695:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11696:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
11697:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
11698:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
11699:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
11700:       78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
11701:       88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
11702:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
11703:      108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
11704:      118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
11705:      128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
11706:      138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
11707:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
11708:      158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
11709:       -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
11710:       -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
11711:      188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
11712:      198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
11713:      208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
11714:       -1,   219,    -1,   221,   222,   223,   224,   225,    -1,    -1,
11715:      228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,
11716:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
11717:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
11718:      258,   259,   260,   261,   262,    -1,   264,   265,   266,   267,
11719:      268,    -1,   270,   271,    -1,   273,    -1,   275,   276,   277,
11720:      278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
11721:      288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,
11722:      298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
11723:      308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
11724:      318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
11725:      328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
11726:      338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
11727:      348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
11728:      358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
11729:      368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
11730:       -1,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
11731:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
11732:      398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
11733:      408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
11734:      418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
11735:      428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
11736:      438,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
11737:      448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
11738:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
11739:      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
11740:       -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11741:       -1,    -1,    -1,    -1,    -1,    -1,   494,    19,    20,    21,
11742:       22,    23,    24,    25,    26,    -1,    28,    29,    30,    -1,
11743:       -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,
11744:       42,    43,    -1,    45,    46,    47,    48,    49,    -1,    51,
11745:       52,    -1,    54,    55,    56,    57,    58,    59,    -1,    -1,
11746:       62,    63,    64,    65,    66,    -1,    68,    69,    70,    71,
11747:       72,    -1,    -1,    -1,    76,    77,    78,    79,    80,    81,
11748:       -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
11749:       92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
11750:       -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
11751:      112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
11752:      122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
11753:      132,   133,   134,   135,   136,    -1,   138,   139,   140,    -1,
11754:      142,   143,   144,    -1,   146,   147,   148,   149,   150,   151,
11755:      152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
11756:      162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
11757:      172,   173,    -1,   175,    -1,   177,    -1,   179,   180,   181,
11758:       -1,   183,   184,   185,   186,   187,   188,   189,    -1,   191,
11759:      192,   193,   194,    -1,   196,   197,   198,   199,   200,   201,
11760:       -1,   203,    -1,   205,   206,   207,   208,   209,   210,   211,
11761:      212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,
11762:      222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,
11763:       -1,   233,   234,   235,    -1,    -1,   238,   239,   240,   241,
11764:      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
11765:      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
11766:      262,    -1,   264,   265,   266,   267,   268,    -1,   270,   271,
11767:       -1,   273,    -1,   275,   276,   277,   278,   279,   280,    -1,
11768:      282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,   291,
11769:      292,    -1,   294,    -1,   296,   297,   298,   299,   300,   301,
11770:      302,   303,   304,   305,   306,    -1,   308,   309,   310,   311,
11771:      312,   313,   314,   315,   316,    -1,   318,   319,   320,   321,
11772:      322,   323,    -1,   325,   326,   327,   328,   329,   330,   331,
11773:      332,    -1,   334,   335,   336,   337,   338,   339,   340,   341,
11774:      342,   343,   344,   345,   346,    -1,   348,   349,    -1,   351,
11775:      352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
11776:      362,   363,   364,   365,    -1,   367,   368,   369,   370,   371,
11777:       -1,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
11778:      382,    -1,   384,   385,   386,   387,   388,   389,   390,   391,
11779:      392,   393,   394,   395,   396,   397,   398,    -1,   400,   401,
11780:       -1,   403,    -1,   405,   406,   407,   408,   409,    -1,   411,
11781:      412,    -1,    -1,   415,   416,   417,   418,   419,    -1,   421,
11782:      422,   423,   424,   425,   426,   427,   428,    -1,    -1,   431,
11783:      432,   433,   434,   435,    -1,    -1,   438,   439,   440,   441,
11784:      442,   443,   444,    -1,   446,    -1,   448,   449,   450,   451,
11785:       -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,   461,
11786:      462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
11787:      472,   473,   474,   475,   476,   477,    -1,     3,    -1,    -1,
11788:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11789:       -1,    -1,   494,    19,    20,    21,    22,    23,    24,    25,
11790:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
11791:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
11792:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
11793:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
11794:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
11795:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
11796:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
11797:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
11798:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
11799:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
11800:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
11801:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
11802:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
11803:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
11804:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
11805:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
11806:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
11807:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
11808:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
11809:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
11810:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
11811:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
11812:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
11813:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
11814:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
11815:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
11816:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
11817:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
11818:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
11819:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
11820:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
11821:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
11822:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
11823:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
11824:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
11825:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
11826:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
11827:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
11828:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
11829:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
11830:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
11831:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
11832:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
11833:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
11834:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
11835:      476,   477,    -1,     3,    -1,    -1,    -1,    -1,    -1,    -1,
11836:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   494,    19,
11837:       20,    21,    22,    23,    24,    25,    26,    -1,    28,    29,
11838:       30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,
11839:       -1,    41,    42,    43,    -1,    45,    46,    47,    48,    49,
11840:       -1,    51,    52,    -1,    54,    55,    56,    57,    58,    59,
11841:       -1,    -1,    62,    63,    64,    65,    66,    -1,    68,    69,
11842:       70,    71,    72,    -1,    -1,    -1,    76,    77,    78,    79,
11843:       80,    81,    -1,    83,    84,    85,    -1,    87,    88,    89,
11844:       90,    91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,
11845:       -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,
11846:      110,   111,   112,   113,   114,    -1,   116,    -1,   118,   119,
11847:      120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
11848:       -1,    -1,   132,   133,   134,   135,   136,    -1,   138,   139,
11849:      140,    -1,   142,   143,   144,    -1,   146,   147,   148,   149,
11850:      150,   151,   152,   153,   154,   155,   156,    -1,   158,    -1,
11851:      160,   161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,
11852:       -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,   179,
11853:      180,   181,    -1,   183,   184,   185,   186,   187,   188,   189,
11854:       -1,   191,   192,   193,   194,    -1,   196,   197,   198,   199,
11855:      200,   201,    -1,   203,    -1,   205,   206,   207,   208,   209,
11856:      210,   211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,
11857:       -1,   221,   222,   223,   224,   225,    -1,    -1,   228,    -1,
11858:      230,    -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,
11859:      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
11860:      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
11861:      260,   261,   262,    -1,   264,   265,   266,   267,   268,    -1,
11862:      270,   271,    -1,   273,    -1,   275,   276,   277,   278,   279,
11863:      280,    -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,
11864:       -1,   291,   292,    -1,   294,    -1,   296,   297,   298,   299,
11865:      300,   301,   302,   303,   304,   305,   306,    -1,   308,   309,
11866:      310,   311,   312,   313,   314,   315,   316,    -1,   318,   319,
11867:      320,   321,   322,   323,    -1,   325,   326,   327,   328,   329,
11868:      330,   331,   332,    -1,   334,   335,   336,   337,   338,   339,
11869:      340,   341,   342,   343,   344,   345,   346,    -1,   348,   349,
11870:       -1,   351,   352,   353,   354,   355,   356,   357,   358,   359,
11871:      360,   361,   362,   363,   364,   365,    -1,   367,   368,   369,
11872:      370,   371,    -1,   373,   374,   375,   376,   377,    -1,   379,
11873:      380,   381,   382,    -1,   384,   385,   386,   387,   388,   389,
11874:      390,   391,   392,   393,   394,   395,   396,   397,   398,    -1,
11875:      400,   401,    -1,   403,    -1,   405,   406,   407,   408,   409,
11876:       -1,   411,   412,    -1,    -1,   415,   416,   417,   418,   419,
11877:       -1,   421,   422,   423,   424,   425,   426,   427,   428,    -1,
11878:       -1,   431,   432,   433,   434,   435,    -1,    -1,   438,   439,
11879:      440,   441,   442,   443,   444,    -1,   446,    -1,   448,   449,
11880:      450,   451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,
11881:      460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
11882:      470,   471,   472,   473,   474,   475,   476,   477,    -1,    -1,
11883:       -1,    -1,     3,     4,     5,    -1,    -1,     8,     9,    -1,
11884:       -1,    -1,    -1,    -1,   494,    16,    17,    18,    19,    20,
11885:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
11886:       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
11887:       41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
11888:       51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
11889:       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
11890:       71,    -1,    73,    74,    75,    76,    77,    78,    79,    80,
11891:       81,    82,    83,    84,    85,    86,    87,    88,    89,    90,
11892:       91,    92,    93,    94,    95,    96,    97,    98,    99,   100,
11893:      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,
11894:      111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
11895:      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
11896:      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
11897:      141,   142,   143,   144,   145,   146,   147,   148,   149,    -1,
11898:      151,   152,   153,   154,   155,    -1,   157,   158,   159,   160,
11899:      161,   162,   163,   164,   165,   166,   167,   168,   169,   170,
11900:      171,   172,   173,   174,   175,   176,   177,   178,    -1,    -1,
11901:      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,
11902:      191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
11903:      201,   202,   203,   204,    -1,   206,   207,   208,   209,   210,
11904:      211,   212,   213,   214,   215,   216,   217,   218,   219,   220,
11905:      221,   222,   223,   224,   225,   226,   227,   228,   229,   230,
11906:      231,   232,   233,   234,   235,   236,   237,   238,   239,   240,
11907:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
11908:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
11909:      261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
11910:      271,   272,   273,   274,    -1,   276,   277,   278,   279,   280,
11911:      281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
11912:      291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
11913:      301,   302,   303,   304,   305,   306,   307,   308,   309,    -1,
11914:      311,   312,    -1,   314,   315,   316,   317,   318,   319,   320,
11915:      321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
11916:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
11917:      341,   342,   343,   344,   345,   346,   347,   348,   349,   350,
11918:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
11919:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
11920:      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,
11921:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
11922:      391,   392,   393,   394,   395,   396,    -1,   398,   399,   400,
11923:      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,
11924:      411,   412,   413,   414,   415,   416,    -1,   418,    -1,   420,
11925:      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
11926:      431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
11927:      441,   442,    -1,   444,   445,   446,   447,   448,   449,   450,
11928:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
11929:      461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11930:       -1,    -1,    -1,   474,   475,   476,   477,    -1,     3,    -1,
11931:      481,   482,   483,     8,   485,   486,   487,   488,   489,   490,
11932:       -1,    16,    17,    18,    19,    20,    21,    22,    23,    24,
11933:       25,    26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,
11934:       -1,    -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,
11935:       45,    46,    47,    48,    49,    -1,    51,    52,    -1,    54,
11936:       55,    56,    57,    58,    59,    -1,    -1,    62,    63,    64,
11937:       65,    66,    -1,    68,    69,    70,    71,    72,    -1,    -1,
11938:       -1,    76,    77,    78,    79,    80,    81,    -1,    83,    84,
11939:       85,    -1,    87,    88,    89,    90,    91,    92,    -1,    -1,
11940:       95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11941:      105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
11942:       -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
11943:      125,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
11944:      135,   136,    -1,   138,   139,   140,    -1,   142,   143,   144,
11945:       -1,   146,   147,   148,   149,   150,   151,   152,   153,   154,
11946:      155,   156,    -1,   158,    -1,   160,   161,   162,   163,    -1,
11947:      165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,
11948:      175,    -1,   177,    -1,   179,   180,   181,    -1,   183,   184,
11949:      185,   186,   187,   188,   189,    -1,   191,   192,   193,   194,
11950:       -1,   196,   197,   198,   199,   200,   201,    -1,   203,    -1,
11951:      205,   206,   207,   208,   209,   210,   211,   212,    -1,   214,
11952:       -1,   216,    -1,    -1,   219,    -1,   221,   222,   223,   224,
11953:      225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,
11954:      235,    -1,    -1,   238,   239,   240,   241,   242,   243,   244,
11955:      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
11956:      255,   256,   257,   258,   259,   260,   261,   262,    -1,   264,
11957:      265,   266,   267,   268,    -1,   270,   271,    -1,   273,    -1,
11958:      275,   276,   277,   278,   279,   280,    -1,   282,   283,    -1,
11959:       -1,   286,   287,   288,    -1,    -1,   291,   292,    -1,   294,
11960:       -1,   296,   297,   298,   299,   300,   301,   302,   303,   304,
11961:      305,   306,    -1,   308,   309,   310,   311,   312,   313,   314,
11962:      315,   316,    -1,   318,   319,   320,   321,   322,   323,    -1,
11963:      325,   326,   327,   328,   329,   330,   331,   332,    -1,   334,
11964:      335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
11965:      345,   346,    -1,   348,   349,    -1,   351,   352,   353,   354,
11966:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
11967:      365,    -1,   367,   368,   369,   370,   371,    -1,   373,   374,
11968:      375,   376,   377,    -1,   379,   380,   381,   382,    -1,   384,
11969:      385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
11970:      395,   396,   397,   398,    -1,   400,   401,    -1,   403,    -1,
11971:      405,   406,   407,   408,   409,    -1,   411,   412,    -1,    -1,
11972:      415,   416,   417,   418,   419,    -1,   421,   422,   423,   424,
11973:      425,   426,   427,   428,    -1,    -1,   431,   432,   433,   434,
11974:      435,    -1,    -1,   438,   439,   440,   441,   442,   443,   444,
11975:       -1,   446,    -1,   448,   449,   450,   451,    -1,    -1,   454,
11976:       -1,    -1,   457,   458,   459,   460,   461,   462,   463,   464,
11977:      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
11978:      475,   476,   477,    -1,    -1,    -1,   481,   482,   483,    -1,
11979:      485,   486,   487,   488,   489,   490,     8,    -1,    -1,    11,
11980:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
11981:       -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
11982:       -1,    33,    16,    17,    18,    -1,    -1,    -1,    -1,    41,
11983:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,
11984:       -1,    -1,    -1,     8,    -1,    -1,    11,    41,    -1,    -1,
11985:       -1,    16,    17,    18,    48,    -1,    -1,    -1,    -1,    -1,
11986:       -1,    73,     8,    -1,    -1,    11,    -1,    -1,    33,    -1,
11987:       16,    17,    18,    -1,    -1,    -1,    41,    -1,    -1,    73,
11988:       -1,    -1,    -1,    48,    -1,    -1,    -1,    33,    -1,    -1,
11989:       -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
11990:       -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    73,    -1,
11991:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11992:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,     8,    -1,
11993:       -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
11994:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
11995:       -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
11996:       -1,    41,   174,    -1,    -1,    -1,    -1,    -1,    48,    -1,
11997:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
11998:      174,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
11999:       -1,    -1,    -1,    73,    -1,    -1,   190,    -1,    -1,    -1,
12000:       -1,   195,    -1,    -1,    -1,   217,   218,    -1,    -1,   174,
12001:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
12002:       -1,    -1,    -1,   217,   218,   190,    -1,    -1,   174,    -1,
12003:      195,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,
12004:       -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
12005:       -1,    -1,   217,   218,    -1,    -1,    -1,   269,    -1,    -1,
12006:      272,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,
12007:       -1,   217,   218,    -1,   286,   269,    -1,   289,   272,    -1,
12008:       -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
12009:       -1,    -1,   286,    -1,   174,   289,    -1,    -1,    -1,    -1,
12010:       -1,    -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,
12011:      190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
12012:       -1,   286,    -1,   269,   289,    -1,   272,    -1,    -1,    -1,
12013:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
12014:      286,    -1,    -1,   289,    -1,    -1,    -1,    -1,    -1,    -1,
12015:       -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12016:       -1,    -1,    -1,    -1,    -1,     8,   378,    -1,    11,    -1,
12017:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
12018:       -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,   269,
12019:       33,    -1,   272,    -1,    -1,    -1,    -1,    -1,    41,    -1,
12020:       -1,    -1,    -1,    -1,    -1,    48,   286,    -1,    -1,   289,
12021:       -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,
12022:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12023:       73,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12024:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12025:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12026:       -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
12027:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12028:       -1,    -1,    -1,   495,   478,    -1,    -1,   481,   482,   483,
12029:       -1,   485,   486,   487,   488,   489,   490,    -1,   378,    -1,
12030:       -1,   495,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12031:       -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,
12032:      485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
12033:      495,   174,   478,    -1,    -1,   481,   482,   483,    -1,   485,
12034:      486,   487,   488,   489,   490,    -1,    -1,   190,    -1,   495,
12035:       -1,     8,   195,    -1,    11,    -1,    -1,    -1,    -1,    16,
12036:       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12037:       -1,    -1,    -1,    -1,   217,   218,    33,    -1,    -1,    -1,
12038:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,   231,    -1,
12039:       -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
12040:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12041:      490,     8,    -1,    -1,    11,   495,    73,    -1,    -1,    16,
12042:       17,    18,    -1,    -1,    -1,    -1,   269,    -1,    -1,   272,
12043:       -1,    -1,    -1,    -1,    -1,    -1,    33,    -1,    -1,    -1,
12044:       -1,    -1,    -1,   286,    41,    -1,   289,    -1,    -1,    -1,
12045:       -1,    48,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12046:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12047:       -1,     8,    -1,    -1,    11,    -1,    73,    -1,    -1,    16,
12048:       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,
12049:       -1,    -1,    11,    -1,    -1,    -1,    33,    16,    17,    18,
12050:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
12051:       -1,    48,    -1,    -1,    33,    -1,    -1,   174,    -1,    -1,
12052:       -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,    -1,    48,
12053:       -1,    -1,    -1,   190,    -1,   378,    73,    -1,   195,    -1,
12054:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12055:       -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,    -1,    -1,
12056:      217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12057:       -1,    -1,    -1,    -1,   231,    -1,    -1,   174,    -1,    -1,
12058:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12059:       -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,    -1,
12060:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12061:       -1,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,    -1,
12062:      217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
12063:       -1,    -1,   289,    -1,   231,   478,    -1,   174,   481,   482,
12064:      483,    -1,   485,   486,   487,   488,   489,   490,    -1,    -1,
12065:       -1,    -1,   495,   190,    -1,   174,    -1,    -1,   195,    -1,
12066:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12067:       -1,   190,   269,    -1,    -1,   272,   195,    -1,    -1,    -1,
12068:      217,   218,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
12069:       -1,    -1,   289,    -1,   231,    -1,    -1,    -1,   217,   218,
12070:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12071:       -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12072:       -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12073:       -1,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,    -1,
12074:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,
12075:      269,    -1,   289,   272,    -1,    -1,    -1,    -1,    -1,    -1,
12076:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,
12077:      289,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12078:       -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12079:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12080:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12081:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12082:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12083:      487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,
12084:       -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12085:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   378,
12086:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12087:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12088:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12089:      487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,
12090:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12091:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12092:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12093:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12094:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12095:      487,   488,   489,   490,    -1,    -1,    -1,    -1,   495,   478,
12096:        3,    -1,   481,   482,   483,    -1,   485,   486,   487,   488,
12097:      489,   490,    -1,    -1,   493,    -1,    19,    20,    21,    22,
12098:       23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
12099:       33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
12100:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
12101:       53,    54,    55,    56,    57,    58,    59,    60,    61,    62,
12102:       63,    64,    65,    66,    67,    68,    69,    70,    71,    72,
12103:       73,    -1,    75,    76,    77,    78,    79,    80,    81,    -1,
12104:       83,    84,    85,    86,    87,    88,    89,    90,    91,    92,
12105:       93,    -1,    95,    96,    97,    98,    99,   100,    -1,   102,
12106:      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
12107:      113,   114,   115,   116,   117,   118,   119,   120,   121,   122,
12108:      123,   124,   125,   126,   127,   128,   129,   130,   131,   132,
12109:      133,   134,   135,   136,   137,   138,   139,   140,   141,   142,
12110:      143,   144,   145,   146,   147,   148,   149,   150,   151,   152,
12111:      153,   154,   155,   156,   157,   158,   159,   160,   161,   162,
12112:      163,   164,   165,   166,   167,    -1,   169,    -1,   171,   172,
12113:      173,    -1,   175,   176,   177,   178,   179,   180,   181,   182,
12114:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
12115:      193,   194,   195,   196,   197,   198,   199,   200,   201,   202,
12116:      203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
12117:      213,   214,   215,   216,    -1,    -1,   219,    -1,   221,   222,
12118:      223,   224,   225,   226,   227,   228,    -1,   230,    -1,   232,
12119:      233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
12120:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
12121:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
12122:       -1,   264,   265,   266,   267,   268,   269,   270,   271,    -1,
12123:      273,   274,   275,   276,   277,   278,   279,   280,   281,   282,
12124:      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,
12125:       -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
12126:      303,   304,   305,   306,   307,   308,   309,   310,   311,   312,
12127:      313,   314,   315,   316,   317,   318,   319,   320,   321,   322,
12128:      323,   324,   325,   326,   327,   328,   329,   330,   331,   332,
12129:      333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
12130:      343,   344,   345,   346,   347,   348,   349,    -1,   351,   352,
12131:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
12132:      363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
12133:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
12134:      383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
12135:      393,   394,   395,   396,   397,   398,   399,   400,   401,   402,
12136:      403,    -1,   405,   406,   407,   408,   409,   410,   411,   412,
12137:      413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
12138:      423,   424,   425,   426,   427,   428,   429,   430,   431,   432,
12139:      433,   434,   435,   436,   437,   438,   439,   440,   441,   442,
12140:      443,   444,   445,   446,    -1,   448,   449,   450,   451,   452,
12141:      453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
12142:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
12143:      473,   474,   475,   476,   477,     3,    -1,    -1,    -1,    -1,
12144:       -1,    -1,    -1,    -1,   487,    -1,    -1,    -1,    -1,    -1,
12145:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12146:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12147:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12148:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12149:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12150:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12151:       78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
12152:       88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
12153:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
12154:      108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
12155:      118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
12156:      128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
12157:      138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
12158:      148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
12159:      158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
12160:       -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
12161:       -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
12162:      188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
12163:      198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
12164:      208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
12165:       -1,   219,    -1,   221,   222,   223,   224,   225,    -1,    -1,
12166:      228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,
12167:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12168:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12169:      258,   259,   260,   261,   262,    -1,   264,   265,   266,   267,
12170:      268,    -1,   270,   271,    -1,   273,    -1,   275,   276,   277,
12171:      278,   279,   280,    -1,   282,   283,    -1,    -1,   286,   287,
12172:      288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,
12173:      298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
12174:      308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
12175:      318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
12176:      328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
12177:      338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
12178:      348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
12179:      358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
12180:      368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
12181:       -1,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
12182:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
12183:      398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
12184:      408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
12185:      418,   419,    -1,   421,   422,   423,   424,   425,   426,   427,
12186:      428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
12187:      438,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
12188:      448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
12189:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12190:      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
12191:        3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,   487,
12192:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
12193:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
12194:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
12195:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
12196:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
12197:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
12198:       -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
12199:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
12200:       -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
12201:       -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
12202:      113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
12203:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
12204:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
12205:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
12206:      153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
12207:      163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
12208:      173,    -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,
12209:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
12210:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
12211:      203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
12212:       -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
12213:      223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
12214:      233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
12215:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
12216:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
12217:       -1,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
12218:      273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
12219:      283,   284,    -1,   286,   287,   288,    -1,    -1,   291,   292,
12220:       -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
12221:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
12222:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
12223:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
12224:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
12225:      343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
12226:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
12227:      363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
12228:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
12229:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
12230:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
12231:      403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
12232:       -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
12233:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
12234:      433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
12235:      443,   444,    -1,   446,    -1,   448,   449,   450,   451,    -1,
12236:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
12237:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
12238:      473,   474,   475,   476,   477,     3,     4,     5,    -1,    -1,
12239:       -1,     9,   485,   486,    -1,    -1,    -1,    -1,    -1,    -1,
12240:       -1,    19,    20,    21,    22,    23,    24,    25,    26,    -1,
12241:       28,    29,    30,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12242:       38,    39,    -1,    41,    42,    43,    -1,    45,    46,    47,
12243:       48,    49,    -1,    51,    52,    -1,    54,    55,    56,    57,
12244:       58,    59,    -1,    -1,    62,    63,    64,    65,    66,    -1,
12245:       68,    69,    70,    71,    72,    -1,    -1,    -1,    76,    77,
12246:       78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
12247:       88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
12248:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
12249:      108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
12250:      118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
12251:      128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
12252:      138,   139,   140,    -1,   142,   143,   144,    -1,   146,   147,
12253:      148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
12254:      158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
12255:       -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
12256:       -1,   179,   180,   181,    -1,   183,   184,   185,   186,   187,
12257:      188,   189,    -1,   191,   192,   193,   194,    -1,   196,   197,
12258:      198,   199,   200,   201,    -1,   203,    -1,   205,   206,   207,
12259:      208,   209,   210,   211,   212,    -1,   214,    -1,   216,    -1,
12260:       -1,   219,    -1,   221,   222,   223,   224,   225,    -1,    -1,
12261:      228,    -1,   230,    -1,    -1,   233,   234,   235,    -1,    -1,
12262:      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
12263:      248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
12264:      258,   259,   260,   261,   262,    -1,   264,   265,   266,   267,
12265:      268,    -1,   270,   271,    -1,   273,    -1,   275,   276,   277,
12266:      278,   279,   280,    -1,   282,   283,   284,    -1,   286,   287,
12267:      288,    -1,    -1,   291,   292,    -1,   294,    -1,   296,   297,
12268:      298,   299,   300,   301,   302,   303,   304,   305,   306,    -1,
12269:      308,   309,   310,   311,   312,   313,   314,   315,   316,    -1,
12270:      318,   319,   320,   321,   322,   323,    -1,   325,   326,   327,
12271:      328,   329,   330,   331,   332,    -1,   334,   335,   336,   337,
12272:      338,   339,   340,   341,   342,   343,   344,   345,   346,    -1,
12273:      348,   349,    -1,   351,   352,   353,   354,   355,   356,   357,
12274:      358,   359,   360,   361,   362,   363,   364,   365,    -1,   367,
12275:      368,   369,   370,   371,    -1,   373,   374,   375,   376,   377,
12276:       -1,   379,   380,   381,   382,    -1,   384,   385,   386,   387,
12277:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
12278:      398,    -1,   400,   401,    -1,   403,    -1,   405,   406,   407,
12279:      408,   409,    -1,   411,   412,    -1,    -1,   415,   416,   417,
12280:      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,
12281:      428,    -1,    -1,   431,   432,   433,   434,   435,    -1,    -1,
12282:      438,   439,   440,   441,   442,   443,   444,    -1,   446,    -1,
12283:      448,   449,   450,   451,    -1,    -1,   454,    -1,    -1,   457,
12284:      458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
12285:      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,
12286:        3,     4,     5,    -1,    -1,    -1,     9,   485,   486,    -1,
12287:       -1,    -1,    -1,    -1,    -1,    -1,    19,    20,    21,    22,
12288:       23,    24,    25,    26,    -1,    28,    29,    30,    -1,    -1,
12289:       -1,    -1,    -1,    -1,    -1,    38,    39,    -1,    41,    42,
12290:       43,    -1,    45,    46,    47,    48,    49,    -1,    51,    52,
12291:       -1,    54,    55,    56,    57,    58,    59,    -1,    -1,    62,
12292:       63,    64,    65,    66,    -1,    68,    69,    70,    71,    72,
12293:       -1,    -1,    -1,    76,    77,    78,    79,    80,    81,    -1,
12294:       83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
12295:       -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
12296:       -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
12297:      113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
12298:      123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
12299:      133,   134,   135,   136,    -1,   138,   139,   140,    -1,   142,
12300:      143,   144,    -1,   146,   147,   148,   149,   150,   151,   152,
12301:      153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
12302:      163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
12303:      173,    -1,   175,    -1,   177,    -1,   179,   180,   181,    -1,
12304:      183,   184,   185,   186,   187,   188,   189,    -1,   191,   192,
12305:      193,   194,    -1,   196,   197,   198,   199,   200,   201,    -1,
12306:      203,    -1,   205,   206,   207,   208,   209,   210,   211,   212,
12307:       -1,   214,    -1,   216,    -1,    -1,   219,    -1,   221,   222,
12308:      223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,
12309:      233,   234,   235,    -1,    -1,   238,   239,   240,   241,   242,
12310:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
12311:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
12312:       -1,   264,   265,   266,   267,   268,    -1,   270,   271,    -1,
12313:      273,    -1,   275,   276,   277,   278,   279,   280,    -1,   282,
12314:      283,   284,    -1,   286,   287,   288,    -1,    -1,   291,   292,
12315:       -1,   294,    -1,   296,   297,   298,   299,   300,   301,   302,
12316:      303,   304,   305,   306,    -1,   308,   309,   310,   311,   312,
12317:      313,   314,   315,   316,    -1,   318,   319,   320,   321,   322,
12318:      323,    -1,   325,   326,   327,   328,   329,   330,   331,   332,
12319:       -1,   334,   335,   336,   337,   338,   339,   340,   341,   342,
12320:      343,   344,   345,   346,    -1,   348,   349,    -1,   351,   352,
12321:      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
12322:      363,   364,   365,    -1,   367,   368,   369,   370,   371,    -1,
12323:      373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
12324:       -1,   384,   385,   386,   387,   388,   389,   390,   391,   392,
12325:      393,   394,   395,   396,   397,   398,    -1,   400,   401,    -1,
12326:      403,    -1,   405,   406,   407,   408,   409,    -1,   411,   412,
12327:       -1,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
12328:      423,   424,   425,   426,   427,   428,    -1,    -1,   431,   432,
12329:      433,   434,   435,    -1,    -1,   438,   439,   440,   441,   442,
12330:      443,   444,    -1,   446,    -1,   448,   449,   450,   451,    -1,
12331:       -1,   454,    -1,    -1,   457,   458,   459,   460,   461,   462,
12332:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
12333:      473,   474,   475,   476,   477,    -1,     8,    -1,    -1,    11,
12334:       -1,    -1,   485,   486,    16,    17,    18,    -1,    -1,    -1,
12335:       -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,
12336:       -1,    33,    16,    17,    18,    37,    -1,    -1,    -1,    41,
12337:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    33,
12338:       -1,    -1,    -1,     8,    -1,    -1,    11,    41,    -1,    -1,
12339:       -1,    16,    17,    18,    48,    -1,    -1,    -1,    -1,    -1,
12340:       -1,    73,     8,    -1,    -1,    11,    -1,    -1,    33,    -1,
12341:       16,    17,    18,    -1,    -1,    -1,    41,    -1,    -1,    73,
12342:       -1,    -1,    -1,    48,    -1,    -1,    -1,    33,    -1,    -1,
12343:       36,    -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,
12344:       -1,    -1,    48,    -1,    -1,    -1,    -1,    -1,    73,    -1,
12345:       -1,    -1,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12346:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    73,     8,    -1,
12347:       -1,    11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,
12348:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12349:       -1,    -1,    -1,    33,    -1,    -1,    -1,    -1,    -1,    -1,
12350:       -1,    41,   174,    -1,    -1,    -1,    -1,    -1,    48,    -1,
12351:      164,    -1,    -1,    -1,    -1,   169,    -1,    -1,   190,    -1,
12352:      174,    -1,    -1,   195,    -1,    -1,    -1,    -1,    -1,    -1,
12353:       -1,    -1,    -1,    73,    -1,    -1,   190,    -1,   163,    -1,
12354:       -1,   195,    -1,    -1,    -1,   217,   218,    -1,    -1,   174,
12355:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
12356:       -1,    -1,    -1,   217,   218,   190,    -1,    -1,   174,    -1,
12357:      195,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,
12358:       -1,    -1,    -1,    -1,   190,    -1,    -1,    -1,    -1,   195,
12359:       -1,    -1,   217,   218,    -1,    -1,    -1,   269,    -1,    -1,
12360:      272,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,
12361:       -1,   217,   218,    -1,   286,   269,    -1,   289,   272,    -1,
12362:       -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
12363:       -1,    -1,   286,    -1,   174,   289,    -1,    -1,    -1,    -1,
12364:       -1,    -1,    -1,    -1,   269,    -1,    -1,   272,    -1,    -1,
12365:      190,    -1,    -1,    -1,    -1,   195,    -1,    -1,    -1,    -1,
12366:       -1,   286,    -1,   269,   289,    -1,   272,    -1,    -1,    -1,
12367:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   217,   218,    -1,
12368:      286,    -1,    -1,   289,    -1,    -1,    -1,   312,    -1,    -1,
12369:       -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12370:       -1,    -1,    -1,    -1,    -1,     8,   378,    -1,    11,    -1,
12371:       -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,    -1,
12372:       -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,   269,
12373:       33,    -1,   272,    36,    -1,    -1,    -1,    -1,    41,    -1,
12374:       -1,    -1,    -1,    -1,    -1,    48,   286,    -1,    -1,   289,
12375:       -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,
12376:       -1,    -1,    -1,    -1,    -1,   437,    -1,   307,    -1,    -1,
12377:       73,    -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12378:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12379:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12380:       -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
12381:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12382:       -1,    -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,
12383:       -1,   485,   486,   487,   488,   489,   490,    -1,   378,    -1,
12384:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12385:       -1,    -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,
12386:      485,   486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,
12387:       -1,   174,   478,    -1,    -1,   481,   482,   483,    -1,   485,
12388:      486,   487,   488,   489,   490,    -1,     8,   190,    -1,    11,
12389:       -1,    -1,   195,    -1,    16,    17,    18,    -1,    -1,    -1,
12390:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12391:       -1,    33,    -1,    -1,   217,   218,    -1,    -1,    -1,    41,
12392:       -1,    -1,    -1,    -1,    -1,    -1,    48,    -1,   231,    -1,
12393:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,
12394:       -1,   481,   482,   483,    -1,   485,   486,   487,   488,   489,
12395:      490,    73,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12396:       -1,    -1,    -1,    -1,    -1,    -1,   269,     8,    -1,   272,
12397:       11,    -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,
12398:       -1,    -1,    -1,   286,    -1,    -1,   289,    -1,    -1,    -1,
12399:       -1,    -1,    33,    -1,    -1,    36,    -1,    -1,    -1,    -1,
12400:       41,    -1,    -1,    -1,    -1,    -1,     8,    48,    -1,    11,
12401:       -1,    -1,    -1,    -1,    16,    17,    18,    -1,    -1,    -1,
12402:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12403:       -1,    33,    73,    -1,    -1,    -1,    -1,    -1,    -1,    41,
12404:       -1,    -1,    -1,    -1,    -1,    -1,    48,   169,    -1,    -1,
12405:       -1,     8,   174,    -1,    11,    -1,    -1,    -1,    -1,    16,
12406:       17,    18,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
12407:       -1,    73,    -1,   195,    -1,   378,    33,    -1,    -1,    36,
12408:       -1,    -1,    -1,    -1,    41,    -1,    -1,    -1,    -1,    -1,
12409:       -1,    48,    -1,    -1,    -1,   217,   218,    -1,    -1,    -1,
12410:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
12411:       -1,    -1,    -1,    -1,    -1,    -1,    73,    -1,    -1,    -1,
12412:       -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
12413:       -1,    -1,    -1,   174,    16,    17,    18,    -1,    -1,    -1,
12414:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,   190,
12415:      272,    33,    -1,    -1,   195,    -1,    -1,    -1,    -1,    41,
12416:       -1,    -1,    -1,    -1,   286,    -1,    48,   289,    -1,    -1,
12417:       -1,    -1,   174,    -1,    -1,   478,   217,   218,   481,   482,
12418:      483,    -1,   485,   486,   487,   488,   489,   490,   190,    -1,
12419:      231,    73,     8,   195,    -1,    11,    -1,    -1,    -1,    -1,
12420:       16,    17,    18,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12421:       -1,    -1,    -1,    -1,    -1,   217,   218,   174,    -1,    -1,
12422:       -1,    -1,    -1,    -1,    -1,    41,    -1,    -1,   269,   231,
12423:       -1,   272,    48,   190,    -1,    -1,    -1,    -1,   195,    -1,
12424:       -1,    -1,    -1,    -1,    -1,   286,    -1,    -1,   289,    -1,
12425:       -1,    -1,    -1,    -1,    -1,    -1,   378,    73,    -1,    -1,
12426:      217,   218,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,
12427:      272,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,
12428:       -1,    -1,    -1,    -1,   286,     8,    -1,   289,    11,    -1,
12429:       -1,    -1,   174,    16,    17,    18,    -1,    -1,    -1,    -1,
12430:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,
12431:       33,    -1,   269,   195,    -1,   272,    -1,    -1,    41,    -1,
12432:       -1,    -1,    -1,    -1,    -1,    48,    -1,    -1,    -1,   286,
12433:       -1,    -1,   289,    -1,    -1,   217,   218,   378,    -1,    -1,
12434:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,
12435:       73,    -1,    -1,    -1,    -1,    -1,   478,    -1,   174,   481,
12436:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12437:       -1,    -1,    -1,    -1,   190,    -1,   378,    -1,    -1,   195,
12438:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,
12439:      272,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12440:       -1,   217,   218,    -1,   286,    -1,    -1,   289,   410,    -1,
12441:       -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,
12442:       -1,   378,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12443:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,
12444:      481,   482,   483,    -1,   485,   486,   487,   488,   489,   490,
12445:       -1,   174,    -1,   269,    -1,    -1,   272,    -1,    -1,    -1,
12446:       -1,    -1,    -1,    -1,    -1,    -1,    -1,   190,    -1,    -1,
12447:      286,    -1,   195,    -1,    -1,    -1,   478,    -1,    -1,   481,
12448:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12449:       -1,    -1,    -1,    -1,   217,   218,   378,    -1,    -1,    -1,
12450:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,
12451:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12452:       -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,   486,
12453:      487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,    -1,
12454:       -1,    -1,    -1,    -1,    -1,    -1,   269,    -1,    -1,   272,
12455:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12456:       -1,    -1,   378,   286,    -1,    -1,   289,    -1,    -1,    -1,
12457:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12458:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12459:       -1,    -1,    -1,    -1,    -1,    -1,   478,    -1,    -1,   481,
12460:      482,   483,    -1,   485,   486,   487,   488,   489,   490,    -1,
12461:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12462:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12463:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12464:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12465:       -1,    -1,    -1,    -1,    -1,   378,    -1,    -1,    -1,    -1,
12466:       -1,    -1,   478,    -1,    -1,   481,   482,   483,    -1,   485,
12467:      486,   487,   488,   489,   490,    -1,    -1,    -1,    -1,    -1,
12468:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12469:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12470:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12471:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12472:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12473:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12474:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12475:       -1,    -1,     3,    -1,     5,   478,    -1,    -1,   481,   482,
12476:      483,    -1,   485,   486,   487,   488,   489,   490,    19,    20,
12477:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
12478:       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
12479:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12480:       51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
12481:       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
12482:       71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
12483:       81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
12484:       91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
12485:       -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
12486:      111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
12487:      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
12488:      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
12489:      141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
12490:      151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
12491:      161,   162,   163,   164,   165,   166,   167,    -1,   169,    -1,
12492:      171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
12493:      181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
12494:      191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
12495:      201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
12496:      211,   212,   213,   214,   215,   216,    -1,    -1,   219,    -1,
12497:      221,   222,   223,   224,   225,   226,   227,   228,    -1,   230,
12498:       -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
12499:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12500:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12501:      261,   262,    -1,   264,   265,   266,   267,   268,   269,   270,
12502:      271,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
12503:      281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
12504:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
12505:      301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
12506:      311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
12507:      321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
12508:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
12509:      341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
12510:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12511:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
12512:      371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
12513:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
12514:      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
12515:      401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
12516:      411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
12517:      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
12518:      431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
12519:      441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
12520:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
12521:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12522:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
12523:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12524:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12525:       26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
12526:       36,    37,    38,    39,    40,    41,    42,    43,    -1,    45,
12527:       46,    47,    48,    49,    -1,    51,    52,    53,    54,    55,
12528:       56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
12529:       66,    67,    68,    69,    70,    71,    72,    73,    -1,    75,
12530:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
12531:       86,    87,    88,    89,    90,    91,    92,    93,    -1,    95,
12532:       96,    97,    98,    99,   100,    -1,   102,   103,   104,   105,
12533:      106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
12534:      116,   117,   118,   119,   120,   121,   122,   123,   124,   125,
12535:      126,   127,   128,   129,   130,   131,   132,   133,   134,   135,
12536:      136,   137,   138,   139,   140,   141,   142,   143,   144,   145,
12537:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
12538:      156,   157,   158,   159,   160,   161,   162,   163,   164,   165,
12539:      166,   167,    -1,   169,    -1,   171,   172,   173,    -1,   175,
12540:      176,   177,   178,   179,   180,   181,   182,   183,   184,   185,
12541:      186,   187,   188,   189,    -1,   191,   192,   193,   194,   195,
12542:      196,   197,   198,   199,   200,   201,   202,   203,    -1,   205,
12543:      206,   207,   208,   209,   210,   211,   212,   213,   214,   215,
12544:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
12545:      226,   227,   228,    -1,   230,    -1,   232,   233,   234,   235,
12546:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12547:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12548:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
12549:      266,   267,   268,   269,   270,   271,    -1,   273,   274,   275,
12550:      276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
12551:      286,   287,   288,   289,   290,   291,   292,    -1,   294,    -1,
12552:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
12553:      306,   307,   308,   309,   310,   311,   312,   313,   314,   315,
12554:      316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
12555:      326,   327,   328,   329,   330,   331,   332,   333,   334,   335,
12556:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
12557:      346,   347,   348,   349,    -1,   351,   352,   353,   354,   355,
12558:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
12559:      366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
12560:      376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
12561:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
12562:      396,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
12563:      406,   407,   408,   409,   410,   411,   412,   413,   414,   415,
12564:      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
12565:      426,   427,   428,   429,   430,   431,   432,   433,   434,   435,
12566:      436,   437,   438,   439,   440,   441,   442,   443,   444,   445,
12567:      446,    -1,   448,   449,   450,   451,   452,   453,   454,   455,
12568:      456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12569:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
12570:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12571:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12572:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
12573:       31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
12574:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12575:       51,    52,    53,    54,    55,    56,    57,    58,    59,    60,
12576:       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,
12577:       71,    72,    73,    -1,    75,    76,    77,    78,    79,    80,
12578:       81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
12579:       91,    92,    93,    -1,    95,    96,    97,    98,    99,   100,
12580:       -1,   102,   103,   104,   105,   106,   107,   108,   109,   110,
12581:      111,   112,   113,   114,   115,   116,   117,   118,   119,   120,
12582:      121,   122,   123,   124,   125,   126,   127,   128,   129,   130,
12583:      131,   132,   133,   134,   135,   136,   137,   138,   139,   140,
12584:      141,   142,   143,   144,   145,   146,   147,   148,   149,   150,
12585:      151,   152,   153,   154,   155,   156,   157,   158,   159,   160,
12586:      161,   162,   163,   164,   165,   166,   167,    -1,   169,    -1,
12587:      171,   172,   173,    -1,   175,   176,   177,   178,   179,   180,
12588:      181,   182,   183,   184,   185,   186,   187,   188,   189,    -1,
12589:      191,   192,   193,   194,   195,   196,   197,   198,   199,   200,
12590:      201,   202,   203,    -1,   205,   206,   207,   208,   209,   210,
12591:      211,   212,   213,   214,   215,   216,    -1,    -1,   219,    -1,
12592:      221,   222,   223,   224,   225,   226,   227,   228,    -1,   230,
12593:       -1,   232,   233,   234,   235,   236,   237,   238,   239,   240,
12594:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12595:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12596:      261,   262,    -1,   264,   265,   266,   267,   268,   269,   270,
12597:      271,    -1,   273,   274,   275,   276,   277,   278,   279,   280,
12598:      281,   282,   283,   284,   285,   286,   287,   288,   289,   290,
12599:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
12600:      301,   302,   303,   304,   305,   306,   307,   308,   309,   310,
12601:      311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
12602:      321,   322,   323,   324,   325,   326,   327,   328,   329,   330,
12603:      331,   332,   333,   334,   335,   336,   337,   338,   339,   340,
12604:      341,   342,   343,   344,   345,   346,   347,   348,   349,    -1,
12605:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12606:      361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
12607:      371,   372,   373,   374,   375,   376,   377,    -1,   379,   380,
12608:      381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
12609:      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
12610:      401,   402,   403,    -1,   405,   406,   407,   408,   409,   410,
12611:      411,   412,   413,   414,   415,   416,   417,   418,   419,   420,
12612:      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,
12613:      431,   432,   433,   434,   435,   436,   437,   438,   439,   440,
12614:      441,   442,   443,   444,   445,   446,    -1,   448,   449,   450,
12615:      451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
12616:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12617:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
12618:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12619:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12620:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12621:       -1,    -1,    38,    39,    -1,    41,    42,    43,    44,    45,
12622:       46,    47,    48,    49,    50,    51,    52,    -1,    54,    55,
12623:       56,    57,    58,    59,    -1,    61,    62,    63,    64,    65,
12624:       66,    -1,    68,    69,    70,    71,    72,    -1,    74,    -1,
12625:       76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
12626:       -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
12627:       96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
12628:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
12629:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
12630:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
12631:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
12632:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
12633:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
12634:       -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
12635:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
12636:      186,   187,   188,   189,   190,   191,   192,   193,   194,    -1,
12637:      196,   197,   198,   199,   200,   201,    -1,   203,   204,   205,
12638:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
12639:      216,   217,   218,   219,   220,   221,   222,   223,   224,   225,
12640:       -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,
12641:      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
12642:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12643:      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
12644:      266,   267,   268,    -1,   270,   271,   272,   273,    -1,   275,
12645:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
12646:      286,   287,   288,    -1,    -1,   291,   292,   293,   294,   295,
12647:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
12648:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
12649:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
12650:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
12651:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
12652:      346,    -1,   348,   349,   350,   351,   352,   353,   354,   355,
12653:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
12654:       -1,   367,   368,   369,   370,   371,   372,   373,   374,   375,
12655:      376,   377,   378,   379,   380,   381,   382,    -1,   384,   385,
12656:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
12657:      396,   397,   398,    -1,   400,   401,    -1,   403,   404,   405,
12658:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
12659:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
12660:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12661:      436,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
12662:      446,   447,   448,   449,   450,   451,    -1,    -1,   454,    -1,
12663:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12664:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
12665:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12666:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12667:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12668:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12669:       41,    42,    43,    44,    45,    46,    47,    48,    49,    50,
12670:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12671:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
12672:       71,    72,    -1,    74,    -1,    76,    77,    78,    79,    80,
12673:       81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
12674:       91,    92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,
12675:      101,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
12676:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
12677:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
12678:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
12679:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
12680:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
12681:      161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
12682:      171,   172,   173,   174,   175,    -1,   177,    -1,   179,   180,
12683:      181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
12684:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
12685:      201,    -1,   203,   204,   205,   206,   207,   208,   209,   210,
12686:      211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
12687:      221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
12688:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
12689:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12690:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12691:      261,   262,   263,   264,   265,   266,   267,   268,    -1,   270,
12692:      271,   272,   273,    -1,   275,   276,   277,   278,   279,   280,
12693:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
12694:      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,
12695:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
12696:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
12697:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
12698:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
12699:      341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
12700:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12701:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
12702:      371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
12703:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
12704:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
12705:      401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
12706:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
12707:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
12708:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
12709:      441,   442,   443,   444,    -1,   446,   447,   448,   449,   450,
12710:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
12711:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12712:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
12713:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12714:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12715:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12716:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12717:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12718:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12719:       66,    67,    68,    69,    70,    71,    72,    -1,    -1,    75,
12720:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
12721:       86,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
12722:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
12723:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
12724:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
12725:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
12726:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
12727:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
12728:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
12729:      166,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
12730:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
12731:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
12732:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
12733:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
12734:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
12735:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
12736:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
12737:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12738:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
12739:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
12740:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
12741:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
12742:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
12743:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
12744:      316,   317,   318,   319,   320,   321,   322,   323,    -1,   325,
12745:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
12746:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
12747:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
12748:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
12749:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
12750:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
12751:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
12752:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
12753:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
12754:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
12755:      426,   427,   428,    -1,   430,   431,   432,   433,   434,   435,
12756:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
12757:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
12758:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12759:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
12760:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12761:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12762:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12763:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12764:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12765:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12766:       -1,    62,    63,    64,    65,    66,    67,    68,    69,    70,
12767:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
12768:       81,    -1,    83,    84,    85,    86,    87,    88,    89,    90,
12769:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
12770:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
12771:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
12772:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
12773:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
12774:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
12775:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
12776:      161,   162,   163,    -1,   165,   166,   167,    -1,    -1,    -1,
12777:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
12778:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
12779:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
12780:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
12781:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
12782:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
12783:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
12784:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12785:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12786:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
12787:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
12788:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
12789:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
12790:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
12791:      311,   312,   313,   314,   315,   316,   317,   318,   319,   320,
12792:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
12793:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
12794:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
12795:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12796:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
12797:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
12798:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
12799:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
12800:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
12801:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
12802:      421,   422,   423,   424,   425,   426,   427,   428,    -1,   430,
12803:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
12804:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
12805:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
12806:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12807:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
12808:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12809:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12810:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12811:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12812:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12813:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12814:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12815:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
12816:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
12817:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
12818:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
12819:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
12820:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
12821:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
12822:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
12823:      156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
12824:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
12825:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
12826:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
12827:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
12828:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
12829:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
12830:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
12831:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
12832:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12833:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
12834:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
12835:      276,   277,   278,   279,   280,    -1,   282,   283,   284,    -1,
12836:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
12837:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
12838:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
12839:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
12840:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
12841:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
12842:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
12843:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
12844:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
12845:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
12846:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
12847:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
12848:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
12849:      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,
12850:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12851:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
12852:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
12853:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12854:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
12855:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
12856:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12857:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12858:       31,    32,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12859:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12860:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12861:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
12862:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
12863:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
12864:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
12865:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
12866:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
12867:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
12868:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
12869:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
12870:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
12871:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
12872:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
12873:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
12874:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
12875:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
12876:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
12877:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
12878:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
12879:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12880:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12881:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
12882:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
12883:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
12884:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
12885:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
12886:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
12887:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
12888:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
12889:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
12890:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12891:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
12892:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
12893:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
12894:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
12895:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
12896:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
12897:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
12898:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
12899:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
12900:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
12901:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12902:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
12903:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12904:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
12905:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
12906:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
12907:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
12908:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
12909:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
12910:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
12911:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
12912:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
12913:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
12914:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
12915:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
12916:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
12917:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
12918:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
12919:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
12920:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
12921:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
12922:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
12923:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
12924:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
12925:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
12926:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
12927:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
12928:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
12929:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
12930:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,   285,
12931:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
12932:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
12933:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
12934:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
12935:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
12936:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
12937:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
12938:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
12939:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
12940:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
12941:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
12942:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
12943:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
12944:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
12945:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
12946:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
12947:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
12948:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
12949:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
12950:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
12951:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
12952:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
12953:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
12954:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
12955:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
12956:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
12957:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
12958:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
12959:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
12960:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
12961:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
12962:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
12963:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
12964:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
12965:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
12966:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
12967:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
12968:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
12969:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
12970:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
12971:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
12972:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
12973:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
12974:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
12975:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
12976:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
12977:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
12978:       -1,   282,   283,    -1,   285,   286,   287,   288,    -1,    -1,
12979:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
12980:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
12981:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
12982:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
12983:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
12984:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
12985:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
12986:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
12987:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
12988:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
12989:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
12990:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
12991:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
12992:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
12993:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
12994:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
12995:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
12996:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
12997:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
12998:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
12999:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13000:       26,    -1,    28,    29,    30,    31,    32,    -1,    -1,    -1,
13001:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13002:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13003:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13004:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13005:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13006:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13007:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13008:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13009:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13010:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13011:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13012:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13013:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13014:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13015:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13016:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13017:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13018:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13019:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13020:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13021:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13022:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13023:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13024:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13025:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13026:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13027:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13028:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13029:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13030:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13031:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13032:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13033:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13034:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13035:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13036:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13037:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13038:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13039:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13040:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13041:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13042:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13043:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13044:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13045:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
13046:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13047:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13048:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13049:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13050:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13051:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13052:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13053:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13054:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13055:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13056:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13057:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13058:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13059:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13060:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13061:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13062:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13063:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13064:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13065:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13066:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13067:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13068:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13069:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13070:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13071:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13072:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13073:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13074:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13075:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13076:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13077:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13078:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13079:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13080:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13081:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13082:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13083:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13084:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13085:      401,   402,   403,    -1,   405,   406,   407,   408,   409,    -1,
13086:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13087:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13088:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13089:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13090:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13091:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13092:      471,   472,   473,   474,   475,   476,   477,     3,     4,    -1,
13093:       -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,
13094:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13095:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13096:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13097:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13098:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13099:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13100:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13101:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13102:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13103:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13104:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13105:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13106:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13107:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13108:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13109:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13110:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13111:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13112:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13113:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13114:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13115:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13116:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13117:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13118:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13119:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13120:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13121:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13122:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13123:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13124:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13125:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13126:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13127:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13128:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13129:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13130:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13131:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13132:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13133:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13134:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13135:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13136:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13137:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13138:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13139:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13140:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13141:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13142:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
13143:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13144:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13145:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13146:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13147:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13148:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13149:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13150:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13151:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13152:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13153:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13154:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13155:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13156:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13157:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13158:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13159:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13160:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13161:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13162:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13163:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13164:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13165:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13166:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13167:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13168:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13169:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13170:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13171:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13172:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13173:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13174:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13175:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13176:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13177:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13178:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13179:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13180:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13181:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13182:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13183:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13184:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13185:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13186:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13187:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
13188:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13189:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13190:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13191:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13192:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13193:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13194:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13195:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13196:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13197:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13198:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13199:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13200:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13201:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13202:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13203:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13204:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13205:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13206:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13207:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13208:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13209:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13210:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13211:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13212:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13213:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13214:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13215:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13216:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13217:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13218:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13219:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13220:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13221:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13222:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13223:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13224:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13225:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13226:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13227:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13228:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13229:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13230:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13231:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13232:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13233:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13234:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13235:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13236:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13237:       21,    22,    23,    24,    25,    26,    27,    28,    29,    30,
13238:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13239:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13240:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13241:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13242:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13243:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13244:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13245:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13246:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13247:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13248:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13249:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13250:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13251:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13252:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13253:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13254:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13255:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13256:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13257:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13258:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13259:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13260:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13261:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13262:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13263:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13264:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13265:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13266:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13267:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13268:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13269:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13270:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13271:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13272:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13273:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13274:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13275:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13276:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13277:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13278:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13279:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13280:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13281:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13282:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
13283:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13284:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13285:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13286:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13287:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13288:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13289:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13290:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13291:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13292:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13293:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13294:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13295:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13296:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13297:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13298:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13299:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13300:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13301:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13302:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13303:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13304:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13305:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13306:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13307:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13308:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13309:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13310:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13311:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13312:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13313:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13314:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13315:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13316:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13317:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13318:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13319:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13320:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13321:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13322:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13323:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13324:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13325:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13326:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13327:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13328:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13329:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13330:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
13331:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13332:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13333:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13334:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13335:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13336:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13337:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13338:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13339:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13340:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13341:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13342:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13343:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13344:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13345:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13346:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13347:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13348:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13349:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13350:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13351:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13352:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13353:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13354:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13355:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13356:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13357:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13358:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13359:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13360:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13361:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13362:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13363:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13364:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13365:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13366:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13367:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13368:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13369:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13370:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13371:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13372:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13373:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13374:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13375:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13376:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13377:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
13378:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13379:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13380:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13381:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13382:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13383:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13384:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13385:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13386:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13387:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13388:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13389:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13390:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13391:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13392:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13393:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13394:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13395:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13396:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13397:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13398:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13399:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13400:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13401:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13402:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13403:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13404:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13405:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13406:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13407:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13408:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13409:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13410:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13411:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13412:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13413:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13414:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13415:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13416:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13417:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13418:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13419:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13420:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13421:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13422:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13423:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13424:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13425:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
13426:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13427:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13428:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13429:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13430:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13431:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13432:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13433:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13434:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13435:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13436:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13437:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13438:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13439:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13440:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13441:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13442:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13443:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13444:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13445:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13446:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13447:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13448:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13449:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13450:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13451:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13452:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13453:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13454:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13455:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13456:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13457:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13458:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13459:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13460:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13461:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13462:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13463:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13464:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13465:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13466:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13467:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13468:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13469:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13470:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13471:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13472:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
13473:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13474:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13475:       26,    27,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13476:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13477:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13478:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13479:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13480:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13481:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13482:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13483:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13484:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13485:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13486:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13487:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13488:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13489:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13490:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13491:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13492:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13493:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13494:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13495:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13496:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13497:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13498:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13499:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13500:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13501:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13502:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13503:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13504:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13505:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13506:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13507:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13508:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13509:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13510:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13511:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13512:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13513:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13514:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13515:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13516:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13517:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13518:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13519:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13520:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
13521:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13522:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13523:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13524:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13525:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13526:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13527:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13528:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13529:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13530:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13531:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13532:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13533:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13534:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13535:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13536:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13537:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13538:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13539:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13540:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13541:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13542:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13543:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13544:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13545:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13546:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13547:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13548:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13549:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13550:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13551:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13552:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13553:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13554:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13555:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13556:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13557:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13558:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13559:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13560:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13561:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13562:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13563:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13564:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13565:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13566:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13567:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
13568:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13569:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13570:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13571:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13572:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13573:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13574:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13575:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13576:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13577:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13578:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13579:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13580:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13581:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13582:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13583:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13584:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13585:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13586:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13587:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13588:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13589:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13590:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13591:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13592:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13593:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13594:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13595:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13596:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13597:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13598:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13599:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13600:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13601:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13602:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13603:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13604:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13605:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13606:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13607:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13608:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13609:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13610:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13611:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13612:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13613:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13614:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13615:      476,   477,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,
13616:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13617:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13618:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13619:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13620:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13621:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13622:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13623:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13624:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13625:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13626:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13627:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13628:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13629:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13630:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13631:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13632:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13633:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13634:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13635:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13636:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13637:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13638:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13639:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13640:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13641:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13642:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13643:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13644:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13645:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13646:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13647:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13648:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13649:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13650:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13651:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13652:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13653:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13654:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13655:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13656:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13657:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13658:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13659:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13660:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13661:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13662:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
13663:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13664:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13665:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13666:       36,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13667:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13668:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13669:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13670:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13671:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13672:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13673:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13674:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13675:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13676:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13677:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13678:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13679:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13680:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13681:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13682:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13683:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13684:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13685:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13686:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13687:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13688:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13689:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13690:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13691:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13692:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13693:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13694:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13695:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13696:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13697:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13698:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13699:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13700:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13701:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13702:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13703:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13704:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13705:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13706:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13707:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13708:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13709:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13710:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13711:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13712:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13713:       -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
13714:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13715:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13716:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13717:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13718:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13719:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13720:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13721:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13722:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13723:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13724:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13725:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13726:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13727:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13728:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13729:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13730:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13731:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13732:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13733:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13734:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13735:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13736:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13737:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13738:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13739:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13740:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13741:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13742:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13743:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13744:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13745:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13746:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13747:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13748:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13749:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13750:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13751:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13752:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13753:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13754:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13755:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13756:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13757:      471,   472,   473,   474,   475,   476,   477,     3,    -1,     5,
13758:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13759:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13760:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13761:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13762:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13763:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13764:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13765:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13766:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13767:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13768:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13769:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13770:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13771:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13772:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13773:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13774:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13775:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13776:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13777:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13778:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13779:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13780:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13781:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13782:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13783:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13784:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13785:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13786:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13787:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13788:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13789:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13790:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13791:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13792:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13793:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13794:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13795:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13796:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13797:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13798:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13799:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13800:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13801:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13802:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13803:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13804:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13805:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13806:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13807:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13808:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13809:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13810:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13811:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13812:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13813:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13814:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13815:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13816:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13817:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13818:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13819:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13820:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13821:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13822:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13823:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13824:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13825:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13826:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13827:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13828:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13829:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13830:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13831:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13832:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13833:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13834:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13835:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13836:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13837:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13838:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13839:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13840:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13841:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13842:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13843:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13844:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13845:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13846:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13847:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13848:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13849:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13850:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13851:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13852:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
13853:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13854:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13855:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13856:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13857:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13858:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13859:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13860:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13861:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13862:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13863:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13864:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13865:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13866:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13867:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13868:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13869:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13870:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13871:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13872:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13873:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13874:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13875:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13876:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13877:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13878:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13879:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13880:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13881:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13882:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13883:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13884:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13885:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13886:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13887:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13888:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13889:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13890:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13891:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13892:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13893:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13894:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13895:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13896:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13897:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13898:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13899:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13900:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13901:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13902:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13903:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13904:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
13905:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
13906:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
13907:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
13908:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
13909:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
13910:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
13911:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
13912:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
13913:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
13914:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
13915:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
13916:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
13917:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
13918:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
13919:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
13920:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
13921:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
13922:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
13923:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
13924:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
13925:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
13926:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
13927:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
13928:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
13929:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
13930:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
13931:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
13932:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
13933:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
13934:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
13935:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
13936:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
13937:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
13938:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
13939:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
13940:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
13941:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
13942:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
13943:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
13944:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
13945:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
13946:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
13947:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
13948:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13949:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
13950:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
13951:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
13952:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
13953:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
13954:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
13955:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
13956:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
13957:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
13958:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
13959:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
13960:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
13961:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
13962:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
13963:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
13964:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
13965:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
13966:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
13967:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
13968:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
13969:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
13970:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
13971:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
13972:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
13973:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
13974:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
13975:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
13976:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
13977:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
13978:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
13979:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
13980:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
13981:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
13982:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
13983:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
13984:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
13985:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
13986:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
13987:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
13988:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
13989:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
13990:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
13991:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
13992:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
13993:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
13994:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
13995:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
13996:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
13997:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
13998:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
13999:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
14000:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14001:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14002:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
14003:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
14004:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
14005:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14006:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14007:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14008:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14009:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
14010:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
14011:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
14012:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
14013:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
14014:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14015:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
14016:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
14017:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
14018:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14019:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14020:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14021:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
14022:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
14023:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14024:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
14025:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
14026:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
14027:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14028:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14029:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
14030:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14031:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14032:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
14033:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14034:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
14035:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
14036:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
14037:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14038:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14039:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
14040:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14041:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
14042:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
14043:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14044:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
14045:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
14046:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
14047:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
14048:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
14049:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
14050:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
14051:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
14052:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
14053:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
14054:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
14055:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
14056:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
14057:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14058:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
14059:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
14060:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
14061:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
14062:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
14063:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
14064:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
14065:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
14066:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
14067:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
14068:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
14069:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
14070:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
14071:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
14072:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
14073:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
14074:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
14075:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
14076:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
14077:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
14078:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14079:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
14080:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
14081:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
14082:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
14083:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
14084:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
14085:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
14086:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
14087:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
14088:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
14089:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
14090:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14091:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
14092:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14093:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14094:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
14095:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14096:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14097:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
14098:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
14099:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
14100:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14101:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14102:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14103:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14104:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
14105:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
14106:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
14107:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
14108:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
14109:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14110:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
14111:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
14112:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
14113:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14114:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14115:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14116:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
14117:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
14118:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14119:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
14120:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
14121:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
14122:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14123:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14124:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
14125:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14126:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14127:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
14128:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14129:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
14130:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
14131:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
14132:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14133:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14134:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
14135:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14136:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
14137:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
14138:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14139:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
14140:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
14141:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
14142:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
14143:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
14144:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
14145:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
14146:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
14147:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
14148:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
14149:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
14150:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
14151:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
14152:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14153:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
14154:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
14155:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
14156:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
14157:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
14158:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
14159:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
14160:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
14161:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
14162:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
14163:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
14164:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
14165:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
14166:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
14167:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
14168:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
14169:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
14170:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
14171:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
14172:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
14173:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14174:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
14175:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
14176:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
14177:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
14178:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
14179:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
14180:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
14181:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
14182:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
14183:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
14184:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
14185:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14186:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
14187:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14188:       -1,    -1,    -1,    -1,    -1,    36,    -1,    38,    39,    -1,
14189:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
14190:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14191:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14192:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
14193:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
14194:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
14195:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14196:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14197:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14198:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14199:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
14200:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
14201:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
14202:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
14203:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
14204:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14205:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
14206:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
14207:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
14208:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14209:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14210:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14211:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
14212:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
14213:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14214:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
14215:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
14216:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
14217:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14218:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14219:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
14220:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14221:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14222:      371,    -1,    -1,   374,   375,   376,   377,    -1,   379,   380,
14223:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14224:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
14225:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
14226:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
14227:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14228:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14229:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
14230:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14231:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
14232:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
14233:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14234:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
14235:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
14236:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
14237:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
14238:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
14239:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
14240:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
14241:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
14242:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
14243:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
14244:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
14245:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
14246:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
14247:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14248:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
14249:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
14250:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
14251:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
14252:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
14253:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
14254:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
14255:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
14256:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
14257:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
14258:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
14259:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
14260:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
14261:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
14262:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
14263:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
14264:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
14265:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
14266:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
14267:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
14268:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14269:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
14270:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
14271:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
14272:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
14273:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
14274:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
14275:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
14276:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
14277:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
14278:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
14279:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
14280:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14281:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
14282:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14283:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14284:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
14285:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14286:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14287:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
14288:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
14289:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
14290:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14291:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14292:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14293:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14294:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
14295:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
14296:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
14297:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
14298:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
14299:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14300:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
14301:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
14302:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
14303:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14304:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14305:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14306:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
14307:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
14308:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14309:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
14310:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
14311:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
14312:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14313:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14314:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
14315:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14316:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14317:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
14318:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14319:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
14320:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
14321:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
14322:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14323:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14324:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
14325:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14326:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
14327:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
14328:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14329:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
14330:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
14331:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
14332:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
14333:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
14334:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
14335:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
14336:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
14337:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
14338:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
14339:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
14340:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
14341:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
14342:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14343:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
14344:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
14345:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
14346:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
14347:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
14348:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
14349:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
14350:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
14351:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
14352:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
14353:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
14354:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
14355:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
14356:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
14357:      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,
14358:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
14359:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
14360:      326,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
14361:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
14362:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,   355,
14363:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14364:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
14365:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
14366:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
14367:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
14368:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
14369:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
14370:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
14371:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
14372:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
14373:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
14374:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
14375:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14376:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
14377:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14378:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14379:       41,    42,    43,    -1,    45,    46,    47,    48,    49,    -1,
14380:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14381:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14382:       71,    72,    -1,    -1,    -1,    76,    77,    78,    79,    80,
14383:       81,    -1,    83,    84,    85,    -1,    87,    88,    89,    90,
14384:       91,    92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,
14385:       -1,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14386:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14387:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14388:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14389:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,   150,
14390:      151,   152,   153,   154,   155,   156,    -1,   158,    -1,   160,
14391:      161,   162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,
14392:      171,   172,   173,    -1,   175,    -1,   177,    -1,   179,   180,
14393:      181,    -1,   183,   184,   185,   186,   187,   188,   189,    -1,
14394:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14395:      201,    -1,   203,    -1,   205,   206,   207,   208,   209,   210,
14396:      211,   212,    -1,   214,    -1,   216,    -1,    -1,   219,    -1,
14397:      221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,
14398:       -1,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14399:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14400:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14401:      261,   262,    -1,   264,   265,   266,   267,   268,    -1,   270,
14402:      271,    -1,   273,    -1,   275,   276,   277,   278,   279,   280,
14403:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14404:      291,   292,    -1,   294,    -1,   296,   297,   298,   299,   300,
14405:      301,   302,   303,   304,   305,   306,    -1,   308,   309,   310,
14406:      311,   312,   313,   314,   315,   316,    -1,   318,   319,   320,
14407:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14408:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14409:      341,   342,   343,   344,   345,   346,    -1,   348,   349,    -1,
14410:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14411:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14412:      371,    -1,   373,   374,   375,   376,   377,    -1,   379,   380,
14413:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14414:      391,   392,   393,   394,   395,   396,   397,   398,    -1,   400,
14415:      401,    -1,   403,    -1,   405,   406,   407,   408,   409,    -1,
14416:      411,   412,    -1,    -1,   415,   416,   417,   418,   419,    -1,
14417:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14418:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14419:      441,   442,   443,   444,    -1,   446,    -1,   448,   449,   450,
14420:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14421:      461,   462,   463,   464,   465,   466,   467,   468,   469,   470,
14422:      471,   472,   473,   474,   475,   476,   477,     3,    -1,    -1,
14423:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14424:       -1,    -1,    -1,    19,    20,    21,    22,    23,    24,    25,
14425:       26,    -1,    28,    29,    30,    -1,    -1,    -1,    -1,    -1,
14426:       -1,    -1,    38,    39,    -1,    41,    42,    43,    -1,    45,
14427:       46,    47,    48,    49,    -1,    51,    52,    -1,    54,    55,
14428:       56,    57,    58,    59,    -1,    -1,    62,    63,    64,    65,
14429:       66,    -1,    68,    69,    70,    71,    72,    -1,    -1,    -1,
14430:       76,    77,    78,    79,    80,    81,    -1,    83,    84,    85,
14431:       -1,    87,    88,    89,    90,    91,    92,    -1,    -1,    95,
14432:       96,    97,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,
14433:      106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
14434:      116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
14435:      126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
14436:      136,    -1,   138,   139,   140,    -1,   142,   143,   144,    -1,
14437:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14438:      156,    -1,   158,    -1,   160,   161,   162,   163,    -1,   165,
14439:       -1,   167,    -1,    -1,    -1,   171,   172,   173,    -1,   175,
14440:       -1,   177,    -1,   179,   180,   181,    -1,   183,   184,   185,
14441:      186,   187,   188,   189,    -1,   191,   192,   193,   194,    -1,
14442:      196,   197,   198,   199,   200,   201,    -1,   203,    -1,   205,
14443:      206,   207,   208,   209,   210,   211,   212,    -1,   214,    -1,
14444:      216,    -1,    -1,   219,    -1,   221,   222,   223,   224,   225,
14445:       -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,
14446:       -1,    -1,   238,   239,   240,   241,   242,   243,   244,   245,
14447:      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
14448:      256,   257,   258,   259,   260,   261,   262,    -1,   264,   265,
14449:      266,   267,   268,    -1,   270,   271,    -1,   273,    -1,   275,
14450:      276,   277,   278,   279,   280,    -1,   282,   283,    -1,    -1,
14451:      286,   287,   288,    -1,    -1,   291,   292,    -1,   294,    -1,
14452:      296,   297,   298,   299,   300,   301,   302,    -1,   304,   305,
14453:      306,    -1,   308,   309,   310,   311,   312,   313,   314,   315,
14454:      316,    -1,   318,   319,   320,   321,   322,   323,    -1,   325,
14455:       -1,   327,   328,   329,   330,   331,   332,    -1,   334,   335,
14456:      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,
14457:      346,    -1,   348,   349,    -1,   351,   352,   353,   354,    -1,
14458:      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
14459:       -1,   367,   368,   369,   370,   371,    -1,   373,   374,   375,
14460:      376,   377,    -1,   379,   380,   381,   382,    -1,   384,   385,
14461:      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,
14462:      396,   397,   398,    -1,   400,   401,    -1,   403,    -1,   405,
14463:      406,   407,   408,   409,    -1,   411,   412,    -1,    -1,   415,
14464:      416,   417,   418,   419,    -1,   421,   422,   423,   424,   425,
14465:      426,   427,   428,    -1,    -1,   431,   432,   433,   434,   435,
14466:       -1,    -1,   438,   439,   440,   441,   442,   443,   444,    -1,
14467:      446,    -1,   448,   449,   450,   451,    -1,    -1,   454,    -1,
14468:       -1,   457,   458,   459,   460,   461,   462,   463,   464,   465,
14469:      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,
14470:      476,   477,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14471:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    19,    20,
14472:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14473:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14474:       41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
14475:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14476:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14477:       71,    -1,    -1,    74,    -1,    76,    77,    78,    79,    80,
14478:       81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
14479:       91,    92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,
14480:      101,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14481:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14482:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14483:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14484:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,    -1,
14485:      151,   152,   153,   154,   155,    -1,    -1,   158,    -1,   160,
14486:      161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
14487:      171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
14488:      181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
14489:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14490:      201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
14491:      211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
14492:      221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
14493:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14494:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14495:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14496:      261,   262,   263,   264,   265,   266,   267,    -1,    -1,   270,
14497:      271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
14498:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14499:      291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
14500:      301,   302,   303,   304,   305,   306,    -1,   308,   309,    -1,
14501:      311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
14502:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14503:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14504:      341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
14505:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14506:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14507:      371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
14508:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14509:      391,   392,   393,   394,   395,   396,    -1,   398,    -1,   400,
14510:      401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
14511:      411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,    -1,
14512:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14513:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14514:      441,   442,    -1,   444,    -1,   446,   447,   448,   449,   450,
14515:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14516:      461,   462,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14517:       -1,    -1,    -1,   474,   475,   476,   477,    -1,    19,    20,
14518:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14519:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14520:       41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
14521:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14522:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14523:       71,    -1,    -1,    74,    -1,    76,    77,    78,    79,    80,
14524:       81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
14525:       91,    92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,
14526:      101,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14527:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14528:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14529:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14530:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,    -1,
14531:      151,   152,   153,   154,   155,    -1,    -1,   158,    -1,   160,
14532:      161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
14533:      171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
14534:      181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
14535:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14536:      201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
14537:      211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
14538:      221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
14539:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14540:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14541:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14542:      261,   262,   263,   264,   265,   266,   267,    -1,    -1,   270,
14543:      271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
14544:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14545:      291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
14546:      301,   302,   303,   304,   305,   306,    -1,   308,   309,    -1,
14547:      311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
14548:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14549:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14550:      341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
14551:      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,
14552:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14553:      371,    -1,   373,   374,   375,   376,   377,   378,   379,   380,
14554:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14555:      391,   392,   393,   394,   395,   396,    -1,   398,    -1,   400,
14556:      401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
14557:      411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,    -1,
14558:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14559:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14560:      441,   442,    -1,   444,    -1,   446,   447,   448,   449,   450,
14561:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14562:      461,   462,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14563:       -1,    -1,    -1,   474,   475,   476,   477,    -1,    19,    20,
14564:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14565:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14566:       41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
14567:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14568:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14569:       71,    -1,    -1,    74,    -1,    76,    77,    78,    79,    80,
14570:       81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
14571:       91,    92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,
14572:      101,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14573:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14574:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14575:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14576:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,    -1,
14577:      151,   152,   153,   154,   155,    -1,    -1,   158,    -1,   160,
14578:      161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
14579:      171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
14580:      181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
14581:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14582:      201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
14583:      211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
14584:      221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
14585:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14586:      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
14587:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14588:      261,   262,   263,   264,   265,   266,   267,    -1,    -1,   270,
14589:      271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
14590:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14591:      291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
14592:      301,   302,   303,   304,   305,   306,    -1,   308,   309,    -1,
14593:      311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
14594:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14595:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14596:      341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
14597:      351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
14598:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14599:      371,    -1,   373,    -1,   375,   376,   377,   378,   379,   380,
14600:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14601:      391,   392,   393,   394,   395,   396,    -1,   398,    -1,   400,
14602:      401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
14603:      411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,    -1,
14604:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14605:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14606:      441,   442,    -1,   444,    -1,   446,   447,   448,   449,   450,
14607:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14608:      461,   462,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14609:       -1,    -1,    -1,   474,   475,   476,   477,    -1,    19,    20,
14610:       21,    22,    23,    24,    25,    26,    -1,    28,    29,    30,
14611:       -1,    -1,    -1,    -1,    -1,    -1,    -1,    38,    39,    -1,
14612:       41,    42,    43,    44,    45,    46,    47,    -1,    49,    50,
14613:       51,    52,    -1,    54,    55,    56,    57,    58,    59,    -1,
14614:       -1,    62,    63,    64,    65,    66,    -1,    68,    69,    70,
14615:       71,    -1,    -1,    74,    -1,    76,    77,    78,    79,    80,
14616:       81,    82,    83,    84,    85,    -1,    87,    88,    89,    90,
14617:       91,    92,    -1,    94,    95,    96,    97,    -1,    -1,    -1,
14618:      101,    -1,    -1,    -1,   105,   106,   107,   108,   109,   110,
14619:      111,   112,   113,   114,    -1,   116,    -1,   118,   119,   120,
14620:      121,   122,   123,    -1,   125,   126,   127,   128,   129,    -1,
14621:       -1,   132,   133,   134,   135,   136,    -1,   138,   139,   140,
14622:       -1,   142,   143,   144,    -1,   146,   147,   148,   149,    -1,
14623:      151,   152,   153,   154,   155,    -1,    -1,   158,    -1,   160,
14624:      161,   162,   163,    -1,   165,    -1,   167,   168,    -1,   170,
14625:      171,   172,   173,   174,   175,    -1,   177,    -1,    -1,    -1,
14626:      181,    -1,   183,   184,   185,   186,   187,   188,   189,   190,
14627:      191,   192,   193,   194,    -1,   196,   197,   198,   199,   200,
14628:      201,    -1,   203,   204,    -1,   206,   207,   208,   209,   210,
14629:      211,   212,    -1,   214,    -1,   216,   217,   218,   219,   220,
14630:      221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,
14631:      231,    -1,   233,   234,   235,    -1,    -1,   238,   239,   240,
14632:      241,   242,    -1,   244,   245,   246,   247,   248,   249,   250,
14633:      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,
14634:      261,   262,   263,   264,   265,   266,   267,    -1,    -1,   270,
14635:      271,   272,   273,    -1,    -1,   276,   277,   278,   279,   280,
14636:       -1,   282,   283,    -1,    -1,   286,   287,   288,    -1,    -1,
14637:      291,    -1,   293,   294,   295,    -1,   297,   298,   299,   300,
14638:      301,   302,   303,   304,   305,   306,    -1,   308,   309,    -1,
14639:      311,   312,    -1,   314,   315,   316,    -1,   318,   319,   320,
14640:      321,   322,   323,    -1,   325,   326,   327,   328,   329,   330,
14641:      331,   332,    -1,   334,   335,   336,   337,   338,   339,   340,
14642:      341,   342,   343,   344,   345,   346,    -1,   348,   349,   350,
14643:      351,   352,   353,    -1,   355,   356,   357,   358,   359,   360,
14644:      361,   362,   363,   364,   365,    -1,   367,   368,   369,   370,
14645:      371,    -1,   373,    -1,   375,   376,   377,   378,   379,   380,
14646:      381,   382,    -1,   384,   385,   386,   387,   388,   389,   390,
14647:      391,   392,   393,   394,    -1,   396,    -1,   398,    -1,   400,
14648:      401,    -1,   403,   404,   405,   406,   407,   408,   409,    -1,
14649:      411,   412,    -1,    -1,   415,   416,    -1,   418,    -1,    -1,
14650:      421,   422,   423,   424,   425,   426,   427,   428,    -1,    -1,
14651:      431,   432,   433,   434,   435,    -1,    -1,   438,   439,   440,
14652:      441,   442,    -1,   444,    -1,   446,   447,   448,   449,   450,
14653:      451,    -1,    -1,   454,    -1,    -1,   457,   458,   459,   460,
14654:      461,   462,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
14655:       -1,    -1,    -1,   474,   475,   476,   477
14656: };
14657: 
14658: /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
14659:    symbol of state STATE-NUM.  */
14660: static const yytype_uint16 yystos[] =
14661: {
14662:        0,    19,    29,    31,    32,    47,    56,    68,    79,    91,
14663:       93,   111,   125,   135,   141,   149,   151,   152,   165,   194,
14664:      209,   234,   311,   314,   343,   352,   366,   373,   377,   387,
14665:      398,   402,   438,   443,   456,   480,   494,   505,   506,   507,
14666:      508,   519,   520,   523,   525,   529,   544,   545,   547,   549,
14667:      556,   558,   605,   612,   615,   616,   633,   634,   635,   636,
14668:      637,   638,   689,   690,   834,   837,   840,   847,   848,   849,
14669:      850,   851,   858,   862,   868,   870,   875,   879,   880,   883,
14670:      884,   886,   887,   889,   415,   459,   557,   198,   359,   367,
14671:      402,   449,   557,     3,    19,    20,    21,    22,    23,    24,
14672:       25,    26,    28,    29,    30,    38,    39,    41,    42,    43,
14673:       44,    45,    46,    47,    48,    49,    50,    51,    52,    54,
14674:       55,    56,    57,    58,    59,    62,    63,    64,    65,    66,
14675:       68,    69,    70,    71,    72,    74,    76,    77,    78,    79,
14676:       80,    81,    82,    83,    84,    85,    87,    88,    89,    90,
14677:       91,    92,    94,    95,    96,    97,   101,   105,   106,   107,
14678:      108,   109,   110,   111,   112,   113,   114,   116,   118,   119,
14679:      120,   121,   122,   123,   125,   126,   127,   128,   129,   132,
14680:      133,   134,   135,   136,   138,   139,   140,   142,   143,   144,
14681:      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,
14682:      156,   158,   160,   161,   162,   163,   165,   167,   168,   170,
14683:      171,   172,   173,   174,   175,   177,   179,   180,   181,   183,
14684:      184,   185,   186,   187,   188,   189,   190,   191,   192,   193,
14685:      194,   196,   197,   198,   199,   200,   201,   203,   204,   205,
14686:      206,   207,   208,   209,   210,   211,   212,   214,   216,   217,
14687:      218,   219,   220,   221,   222,   223,   224,   225,   228,   229,
14688:      230,   231,   233,   234,   235,   238,   239,   240,   241,   242,
14689:      243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
14690:      253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
14691:      263,   264,   265,   266,   267,   268,   270,   271,   272,   273,
14692:      275,   276,   277,   278,   279,   280,   282,   283,   286,   287,
14693:      288,   291,   292,   293,   294,   295,   296,   297,   298,   299,
14694:      300,   301,   302,   303,   304,   305,   306,   308,   309,   310,
14695:      311,   312,   313,   314,   315,   316,   318,   319,   320,   321,
14696:      322,   323,   325,   326,   327,   328,   329,   330,   331,   332,
14697:      334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
14698:      344,   345,   346,   348,   349,   350,   351,   352,   353,   354,
14699:      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
14700:      365,   367,   368,   369,   370,   371,   373,   374,   375,   376,
14701:      377,   378,   379,   380,   381,   382,   384,   385,   386,   387,
14702:      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
14703:      398,   400,   401,   403,   404,   405,   406,   407,   408,   409,
14704:      411,   412,   415,   416,   417,   418,   419,   421,   422,   423,
14705:      424,   425,   426,   427,   428,   431,   432,   433,   434,   435,
14706:      438,   439,   440,   441,   442,   443,   444,   446,   447,   448,
14707:      449,   450,   451,   454,   457,   458,   459,   460,   461,   462,
14708:      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
14709:      473,   474,   475,   476,   477,   747,   819,   823,   826,   892,
14710:      893,   894,   557,    50,   494,   628,   171,   175,   235,   242,
14711:      289,   359,   406,   408,   424,   430,   433,   603,   613,   846,
14712:        3,    27,   243,   314,   395,   817,   823,   892,    21,    74,
14713:       90,   144,   154,   166,   171,   198,   242,   246,   309,   323,
14714:      356,   359,   367,   370,   389,   402,   409,   418,   424,   449,
14715:      606,   607,   610,   557,   817,    93,   447,   494,   525,   615,
14716:      633,   854,   858,   875,   889,   108,    68,   209,   108,     5,
14717:      822,   823,   869,   869,   823,   817,    27,   411,   415,   823,
14718:      881,   882,   885,   557,    27,   130,   645,   646,   175,   235,
14719:      359,   371,   411,   863,   864,   885,   557,   443,   633,   638,
14720:      885,     5,   285,   702,   814,   823,   824,   170,   494,   872,
14721:      494,   331,   639,   640,   817,   639,   634,   635,     0,   497,
14722:      120,   208,   435,   145,   213,   290,   429,   648,   649,   634,
14723:      636,   637,   498,   447,   852,    27,   411,   415,   633,   885,
14724:      188,   814,   817,   188,   814,   188,   702,   188,   814,   494,
14725:      492,   496,   798,   800,   525,   615,   633,   836,   875,   814,
14726:      406,   408,   406,   408,   341,   188,   823,   823,   828,   331,
14727:      367,   402,   449,   814,   198,    27,   817,   248,   418,   107,
14728:      402,   449,   362,     3,    44,    49,    50,    51,    52,    64,
14729:       65,    74,    82,    94,   101,   112,   113,   134,   162,   168,
14730:      170,   174,   188,   190,   204,   211,   212,   214,   217,   218,
14731:      220,   229,   231,   243,   262,   263,   264,   272,   277,   293,
14732:      295,   328,   350,   354,   374,   378,   381,   395,   404,   411,
14733:      412,   423,   444,   447,   611,   713,   714,   716,   718,   720,
14734:      722,   724,   725,   726,   728,   729,   730,   732,   733,   827,
14735:      892,   895,   188,   608,   828,   188,   815,   817,   188,   817,
14736:      494,   548,   289,   603,   854,     3,    48,    49,    51,    52,
14737:       64,    65,    72,   112,   113,   150,   156,   162,   179,   180,
14738:      205,   211,   212,   214,   243,   262,   264,   268,   275,   277,
14739:      292,   296,   310,   313,   328,   354,   374,   381,   395,   397,
14740:      411,   412,   417,   419,   423,   443,   444,   463,   464,   465,
14741:      466,   467,   468,   469,   470,   471,   472,   473,   855,   857,
14742:      858,   860,   861,   892,   896,   852,   822,   869,   822,   483,
14743:      494,   494,   835,   477,   219,   496,   284,     4,     6,     7,
14744:        8,     9,    10,    35,    49,    51,    52,    60,    61,    64,
14745:       65,    72,    74,    98,    99,   100,   101,   102,   103,   104,
14746:      112,   113,   115,   150,   156,   157,   162,   179,   180,   211,
14747:      212,   214,   236,   237,   262,   264,   269,   274,   275,   277,
14748:      286,   296,   310,   328,   354,   372,   381,   397,   411,   412,
14749:      417,   419,   420,   423,   436,   444,   478,   485,   486,   487,
14750:      492,   494,   499,   501,   502,   634,   679,   717,   720,   723,
14751:      724,   725,   727,   728,   729,   732,   733,   744,   746,   747,
14752:      748,   750,   764,   765,   772,   792,   797,   804,   805,   806,
14753:      819,   820,   821,   822,   823,   803,   805,   863,   863,   822,
14754:      863,   477,   169,   413,   483,   494,   814,   487,   800,     3,
14755:      168,   170,   447,   858,   871,   873,   168,   874,   744,   776,
14756:      777,   823,   639,   498,   494,   830,   495,   495,   507,   169,
14757:      215,   702,   876,    27,   130,   644,   644,    54,   644,   159,
14758:      164,   232,   281,   654,   656,   657,   682,   684,   685,   686,
14759:      648,   649,   494,   814,   477,   219,   150,    23,    29,   135,
14760:      288,   339,   343,   373,   440,   513,   516,   517,   339,   150,
14761:       36,    55,   106,   197,   247,   255,   267,   298,   339,   345,
14762:      367,   373,   387,   516,   550,   553,   150,   339,   373,   516,
14763:      150,   339,   373,   516,     3,    27,    44,    50,    74,    82,
14764:       94,   101,   130,   168,   170,   174,   190,   204,   217,   218,
14765:      220,   229,   231,   243,   263,   272,   293,   295,   350,   378,
14766:      395,   404,   423,   445,   447,   487,   495,   744,   779,   780,
14767:      825,   831,   892,   897,   744,   799,     3,    27,    31,    32,
14768:       33,    34,    35,    36,    37,    40,    53,    60,    61,    67,
14769:       73,    75,    86,    93,    98,    99,   100,   102,   103,   104,
14770:      115,   117,   124,   130,   131,   137,   141,   145,   157,   159,
14771:      164,   166,   169,   176,   178,   182,   195,   202,   213,   215,
14772:      226,   227,   232,   236,   237,   269,   274,   281,   284,   285,
14773:      289,   290,   307,   317,   324,   333,   347,   366,   372,   383,
14774:      399,   402,   410,   413,   414,   420,   429,   430,   436,   437,
14775:      443,   445,   452,   453,   455,   456,   818,   832,   892,   896,
14776:      898,   798,   495,   494,   592,   603,   269,   838,   496,   829,
14777:       36,   449,   188,   814,   188,   814,   891,   814,   494,   614,
14778:       82,   843,   460,    83,   127,   301,   407,   446,   731,   731,
14779:      731,   494,   719,   719,   313,   494,   721,   150,   494,    64,
14780:       65,   731,   719,   716,   458,   480,   494,   734,   494,   734,
14781:       58,   346,   498,   609,   494,    35,   715,   494,   109,   110,
14782:      185,   186,   249,   250,   251,   252,   253,   254,   257,   258,
14783:      363,   364,   474,   475,   494,   735,   736,   737,   738,   739,
14784:      740,   741,   742,   743,   719,   150,   498,   609,   150,   498,
14785:      609,   150,   284,   777,   341,   402,   495,   498,     4,   157,
14786:      284,   420,   485,   486,   552,   555,   821,   822,   853,   855,
14787:      856,   859,   854,   494,   623,   627,   552,   859,   865,   867,
14788:      779,   714,   781,    36,   230,   823,   494,   801,   492,   744,
14789:      796,   494,   494,   164,   494,   494,   634,   494,   494,   494,
14790:      744,   494,   494,   494,   494,   494,   494,   494,   494,   494,
14791:      744,   744,   744,   146,   807,   808,   777,   778,   634,   744,
14792:      776,   766,   767,   768,   823,   824,     9,   801,   800,   494,
14793:      822,   494,   821,   822,     3,     8,    11,    16,    17,    18,
14794:       33,    36,    41,    48,    73,   174,   190,   195,   217,   218,
14795:      231,   269,   272,   286,   289,   378,   478,   481,   482,   483,
14796:      485,   486,   487,   488,   489,   490,   770,   771,   772,   774,
14797:      457,   751,   801,    15,   295,   744,    15,   498,   215,   641,
14798:      494,   822,   801,   496,   800,   641,     3,   115,   235,   552,
14799:      733,   822,   866,    97,   115,   867,   115,   867,   814,   495,
14800:      498,   852,   498,   495,   640,   815,    36,   876,   527,   814,
14801:       36,   823,   373,   636,   636,    27,   487,   650,   651,   744,
14802:      636,   161,   266,   670,   221,   267,   327,   376,   435,     4,
14803:        9,    27,   665,   744,   485,   486,   666,   667,   744,   746,
14804:      682,   683,   657,   656,   654,   655,   164,   685,   279,   687,
14805:      654,   682,   777,   830,   230,   814,    67,    75,    86,   166,
14806:      188,   317,   430,   573,   583,   599,   823,    75,    86,   524,
14807:       86,   524,   494,   413,   494,   571,   241,   433,   571,    86,
14808:      498,   413,   814,   716,   552,    54,   554,   552,   552,   106,
14809:      247,   255,    54,   413,   456,   480,   551,   260,   359,   551,
14810:      553,   702,    86,   413,   524,   359,   814,   413,   359,   779,
14811:      779,   780,   495,   498,   648,   649,    13,    14,   493,   503,
14812:      413,   591,   596,   823,   456,   626,   331,   402,   449,   150,
14813:       93,   545,   558,   839,   840,   887,   818,   496,   142,   814,
14814:      269,   546,   550,   269,   494,   592,    36,   592,   495,   779,
14815:       36,   188,   586,   823,   844,   494,   777,   821,   611,   781,
14816:      731,   731,    35,   715,   411,   411,   821,   821,   714,   712,
14817:      823,   492,   492,   821,   821,   413,   413,   413,   413,   608,
14818:      828,   815,   817,   817,   828,   495,   603,   188,   814,   891,
14819:      854,   860,     4,   821,     4,   821,   625,   632,   832,    50,
14820:       95,   121,   139,   143,   165,   168,   183,   274,   282,   325,
14821:      629,   498,   495,   498,   495,   498,   836,   777,   798,   778,
14822:      452,   793,   794,   744,   777,   494,   821,   821,     3,   735,
14823:      736,   737,   738,   739,   740,   741,   742,   782,   783,   822,
14824:      821,   821,   744,     8,    16,    17,    18,   481,   482,   483,
14825:      485,   486,   487,   488,   489,   490,   770,   775,   823,   744,
14826:      784,   485,   486,   494,   745,   746,   772,   786,   797,   495,
14827:      777,   744,   776,   787,   744,    53,   169,   227,   414,   744,
14828:      777,   790,   744,   494,   823,   341,   812,   493,   495,   498,
14829:      498,   500,   503,   777,   744,   743,   743,   714,   744,   744,
14830:      744,   744,     5,   832,   833,   411,    40,   399,   802,   828,
14831:      744,   744,   494,   634,   791,   130,   157,   269,   274,   279,
14832:      420,   431,   744,   274,   494,   744,   413,    48,   174,   190,
14833:      195,   231,   378,   744,   744,   744,   744,   744,   744,   744,
14834:      744,   744,   744,    27,    34,   383,   769,   178,   160,   752,
14835:      744,   354,   494,   765,   744,   806,   175,   235,   402,   406,
14836:      408,   433,   642,   814,   169,   691,   779,   487,   691,   494,
14837:      822,   495,   814,   871,   814,   879,   744,   495,   494,   437,
14838:      878,   115,   297,   494,   526,   633,    36,   823,   494,   531,
14839:      540,   541,   543,   823,    37,   124,   652,   652,   498,   437,
14840:      652,   354,   355,   485,   486,   667,   669,   746,   376,   221,
14841:      285,   306,   306,   498,   489,     4,   668,   821,   668,   354,
14842:      355,   669,   813,   814,   273,   380,   688,   683,   655,   495,
14843:      339,   516,   494,   188,   583,   817,   221,   269,   221,   437,
14844:      494,   576,   714,   817,   823,   188,   817,   188,   823,    23,
14845:      135,   373,   512,   515,   566,   581,   832,   817,   575,   595,
14846:      832,   817,   513,   817,   339,   373,   516,   550,   552,   828,
14847:      817,   552,   828,   817,   552,   339,   373,   516,   817,   817,
14848:      817,   817,   339,   373,   516,   817,   817,   648,   648,   648,
14849:      445,   780,   189,   344,   647,   744,   744,   744,   799,   322,
14850:      622,   495,   498,   282,   169,   413,   617,   449,   814,   891,
14851:      814,   823,   289,   603,   818,   494,   494,   150,   150,   231,
14852:      573,   583,   587,   590,   600,   602,   823,   456,   458,   578,
14853:      149,   633,   456,   845,   495,   744,   269,   284,   777,   495,
14854:      495,   609,   495,   492,   477,   477,   495,   495,   495,   498,
14855:      714,   821,   493,   821,   495,   495,   736,   738,   739,   740,
14856:      739,   740,   740,   609,   609,   284,   609,   402,   269,    36,
14857:      495,   498,   487,   494,   552,   624,   859,    36,   621,   822,
14858:      621,   269,   274,   325,   621,   621,   865,   714,   495,   493,
14859:      744,   137,   794,   795,    36,   495,   744,   495,   495,   495,
14860:      169,   495,   495,   498,   495,   496,   307,   785,   495,   745,
14861:      745,   744,    11,    16,    17,    18,   195,   217,   286,   481,
14862:      482,   483,   485,   486,   487,   488,   489,   490,   772,   745,
14863:      495,   495,   164,   169,   788,   789,   498,   495,    36,   790,
14864:      777,   790,   790,   169,   495,    36,   815,   816,   494,   744,
14865:      809,   801,   744,   766,   744,   495,   495,   477,   745,   745,
14866:      143,   777,   169,   130,   157,   274,   279,   420,   431,   494,
14867:      143,   775,   744,   399,   802,   744,   791,   744,   413,   494,
14868:      634,   494,   494,   153,   753,   406,   408,   406,   408,   814,
14869:      402,   643,   643,   643,   226,   355,   494,   634,   692,   693,
14870:      694,   695,   702,   703,   747,   749,   750,   823,   453,   708,
14871:      648,   808,   708,   821,   743,   830,   836,   693,   453,   877,
14872:      443,   401,   436,   535,   530,   539,   823,   284,   532,   823,
14873:      536,   543,   498,   691,   483,   801,   479,   653,   653,   651,
14874:      286,   770,   773,   653,     4,   821,   669,   285,   435,   666,
14875:      498,   240,   413,   744,   269,   599,   494,   150,   494,   576,
14876:      198,   596,   597,   559,   288,   569,   559,    23,   135,   343,
14877:      345,   373,   509,   510,   511,   517,   518,   150,   609,   150,
14878:      609,   566,   581,   566,   495,   498,   562,   822,   495,   498,
14879:      483,   496,   413,   359,    86,   413,   524,   359,   413,   413,
14880:      413,   359,   647,   647,   647,   780,   276,   276,   495,   493,
14881:      390,   391,   631,   822,   591,   622,   814,   494,    36,   592,
14882:      838,   341,   402,   521,   522,   822,   596,   814,   814,   891,
14883:      814,   495,   498,   282,   571,   282,   284,   570,   817,   456,
14884:      890,   571,    36,   150,   814,   495,   715,   821,   734,   734,
14885:      715,   823,   493,   493,   828,   150,   625,   619,   630,   859,
14886:      822,   822,   274,   596,   487,   596,   822,   822,   410,   744,
14887:      141,   714,   495,   744,   744,   775,   744,   788,   714,   745,
14888:      745,   745,   745,   130,   269,   279,   745,   745,   745,   745,
14889:      745,   745,   745,   745,   745,   745,   744,   744,   789,   788,
14890:      714,   495,   495,   495,   777,   714,   498,   495,   744,   809,
14891:      810,   811,    36,   495,   743,   744,    33,    33,   744,   495,
14892:      744,   169,   494,   781,   744,   495,   143,   745,   745,   143,
14893:      143,   744,   744,   649,   453,   294,   757,   643,   643,   643,
14894:      643,   814,   814,   814,   634,   703,   169,   634,   694,   695,
14895:       36,   696,   697,   823,   498,    94,   170,   204,   220,   229,
14896:      263,   350,   699,   697,    36,   696,   698,   823,   480,   707,
14897:      800,   744,   178,   671,   647,   812,   671,   495,   495,   744,
14898:      347,   534,   442,   495,   498,   801,    84,   534,   495,   498,
14899:      531,   877,   744,   161,   225,   494,   653,   285,   814,   817,
14900:      495,   150,   597,   583,   597,   559,   586,   498,   495,   117,
14901:      202,   267,   269,   582,   494,   593,   173,   115,   187,   269,
14902:      571,   551,   107,   115,   173,   269,   389,   392,   553,   571,
14903:      373,   511,   424,   817,   823,   515,   595,     3,    44,    50,
14904:       74,    82,    94,   101,   168,   170,   174,   190,   204,   217,
14905:      218,   220,   229,   231,   243,   263,   268,   272,   286,   293,
14906:      295,   350,   374,   378,   395,   404,   423,   447,   485,   486,
14907:      552,   560,   598,   714,   773,   822,   825,   892,   898,   832,
14908:      817,   817,   817,   817,   817,   817,   817,   817,   817,   817,
14909:      495,   495,   495,   648,   551,   631,   494,   590,   633,   845,
14910:      603,   188,   814,   495,   498,   495,   546,   494,    36,   580,
14911:      578,   587,    79,   548,   107,   267,   633,   586,   437,   842,
14912:      493,   714,   609,   891,   495,   498,   596,   744,   495,   495,
14913:      789,   169,   130,   279,   494,   495,   495,   498,   495,   823,
14914:      744,   744,   744,   781,   495,   744,    33,    33,   744,   744,
14915:      143,   495,   495,   744,   494,   758,   823,   814,   814,   814,
14916:      814,   697,   698,   494,   495,   823,   824,   404,   662,   663,
14917:      494,   694,   220,   293,   700,   694,   700,   220,   699,   700,
14918:      220,   663,   494,   823,   663,   494,   291,    54,   182,   680,
14919:      495,   680,   822,   804,   633,   297,   633,   530,   284,   494,
14920:      528,   483,   543,   534,   775,   559,   583,   495,   495,   456,
14921:      589,   118,   191,   200,   117,   439,   566,   584,    67,    73,
14922:       86,   115,   117,   173,   202,   269,   274,   317,   333,   430,
14923:      437,   564,   565,   577,    30,    54,   604,   188,   274,   552,
14924:      744,   604,   274,   485,   486,   555,   823,   714,   609,   609,
14925:      243,   395,   825,   829,   483,   413,   413,   647,   623,   437,
14926:      618,   620,   596,   495,   890,    36,   402,   269,   494,   822,
14927:      845,   590,   149,   633,   147,   196,   570,   120,   135,   316,
14928:      890,   107,   456,   888,   284,   823,   841,   494,    36,   630,
14929:      745,   169,   494,   781,   809,   495,   744,   744,   744,   495,
14930:      759,   823,   704,   705,   749,   696,   494,     4,     9,   658,
14931:      660,   661,   823,   816,   694,   284,   437,   701,   694,   220,
14932:      694,   709,   710,   823,   494,   709,   823,    27,    96,   179,
14933:      353,   487,   494,   672,   673,   674,   675,   676,   677,   678,
14934:      744,   744,   455,   754,   822,   754,   498,   535,    86,   494,
14935:      533,   542,   749,   823,   131,   744,   495,   333,   589,   494,
14936:      579,   559,   495,   498,   494,   828,   817,   745,   604,   118,
14937:      191,   117,   274,   221,   814,   589,    81,   115,    36,   150,
14938:       73,   711,   829,   489,   560,   817,   817,   495,   551,   122,
14939:      495,   578,   633,   814,   150,    36,   495,   817,   890,    27,
14940:       78,    87,   116,   187,   199,   389,   392,   574,   574,   355,
14941:      355,    59,    67,   235,   814,   542,   745,   781,   495,   303,
14942:      760,   495,   498,    36,   706,   816,   306,   489,   306,   355,
14943:      489,   494,   494,   495,   744,   494,   694,   701,   495,   498,
14944:      714,   709,   495,   494,   375,   494,   495,   498,   755,   756,
14945:      823,   324,   681,   681,   442,   817,   744,   495,   498,    73,
14946:      537,   537,   270,   435,   814,   559,   585,   588,   832,   566,
14947:      744,   269,   565,    36,   589,   592,   817,   187,   828,   437,
14948:      514,   489,   424,   623,   822,   845,   570,   888,   494,   814,
14949:      633,   578,   548,    67,   287,    67,   842,   495,   495,    54,
14950:      648,   707,   704,   494,   495,   823,   658,   816,   710,   711,
14951:      495,   777,   494,   777,   674,   498,    36,   744,   437,   659,
14952:      659,   633,   495,   708,   533,   828,   538,   828,   538,   373,
14953:      592,   495,   498,   483,   495,   187,   245,   601,   494,   561,
14954:      744,   424,    36,   494,   888,   570,   890,   287,   287,   494,
14955:      845,   776,   326,   355,   761,   709,   495,   498,   495,   495,
14956:      495,   673,   495,   756,   758,   357,   537,   652,   652,   541,
14957:      601,   588,   560,   267,   572,   561,   170,   302,   379,   284,
14958:      567,   568,   594,   550,   633,   542,   708,    48,    97,   426,
14959:      744,   762,   763,   762,   495,   495,     9,   340,   664,   495,
14960:      661,   538,   653,   653,   708,   568,   200,   120,   435,   284,
14961:      594,   284,   567,   495,   888,   495,   763,   354,   163,   312,
14962:      163,   312,   495,   494,   652,   559,    58,   267,   346,   373,
14963:      563,   563,   845,    33,     9,   653,    22,   115,   274,   708,
14964:      763,   495
14965: };
14966: 
14967: #define yyerrok		(yyerrstatus = 0)
14968: #define yyclearin	(yychar = YYEMPTY)
14969: #define YYEMPTY		(-2)
14970: #define YYEOF		0
14971: 
14972: #define YYACCEPT	goto yyacceptlab
14973: #define YYABORT		goto yyabortlab
14974: #define YYERROR		goto yyerrorlab
14975: 
14976: 
14977: /* Like YYERROR except do call yyerror.  This remains here temporarily
14978:    to ease the transition to the new meaning of YYERROR, for GCC.
14979:    Once GCC version 2 has supplanted version 1, this can go.  */
14980: 
14981: #define YYFAIL		goto yyerrlab
14982: 
14983: #define YYRECOVERING()  (!!yyerrstatus)
14984: 
14985: #define YYBACKUP(Token, Value)					\
14986: do								\
14987:   if (yychar == YYEMPTY && yylen == 1)				\
14988:     {								\
14989:       yychar = (Token);						\
14990:       yylval = (Value);						\
14991:       yytoken = YYTRANSLATE (yychar);				\
14992:       YYPOPSTACK (1);						\
14993:       goto yybackup;						\
14994:     }								\
14995:   else								\
14996:     {								\
14997:       yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
14998:       YYERROR;							\
14999:     }								\
15000: while (YYID (0))
15001: 
15002: 
15003: #define YYTERROR	1
15004: #define YYERRCODE	256
15005: 
15006: 
15007: /* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
15008:    If N is 0, then set CURRENT to the empty location which ends
15009:    the previous symbol: RHS[0] (always defined).  */
15010: 
15011: #define YYRHSLOC(Rhs, K) ((Rhs)[K])
15012: #ifndef YYLLOC_DEFAULT
15013: # define YYLLOC_DEFAULT(Current, Rhs, N)				\
15014:     do									\
15015:       if (YYID (N))                                                    \
15016: 	{								\
15017: 	  (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;	\
15018: 	  (Current).first_column = YYRHSLOC (Rhs, 1).first_column;	\
15019: 	  (Current).last_line    = YYRHSLOC (Rhs, N).last_line;		\
15020: 	  (Current).last_column  = YYRHSLOC (Rhs, N).last_column;	\
15021: 	}								\
15022:       else								\
15023: 	{								\
15024: 	  (Current).first_line   = (Current).last_line   =		\
15025: 	    YYRHSLOC (Rhs, 0).last_line;				\
15026: 	  (Current).first_column = (Current).last_column =		\
15027: 	    YYRHSLOC (Rhs, 0).last_column;				\
15028: 	}								\
15029:     while (YYID (0))
15030: #endif
15031: 
15032: 
15033: /* YY_LOCATION_PRINT -- Print the location on the stream.
15034:    This macro was not mandated originally: define only if we know
15035:    we won't break user code: when these are the locations we know.  */
15036: 
15037: #ifndef YY_LOCATION_PRINT
15038: # if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
15039: #  define YY_LOCATION_PRINT(File, Loc)			\
15040:      fprintf (File, "%d.%d-%d.%d",			\
15041: 	      (Loc).first_line, (Loc).first_column,	\
15042: 	      (Loc).last_line,  (Loc).last_column)
15043: # else
15044: #  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
15045: # endif
15046: #endif
15047: 
15048: 
15049: /* YYLEX -- calling `yylex' with the right arguments.  */
15050: 
15051: #ifdef YYLEX_PARAM
15052: # define YYLEX yylex (&yylval, &yylloc, YYLEX_PARAM)
15053: #else
15054: # define YYLEX yylex (&yylval, &yylloc, yyscanner)
15055: #endif
15056: 
15057: /* Enable debugging if requested.  */
15058: #if YYDEBUG
15059: 
15060: # ifndef YYFPRINTF
15061: #  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
15062: #  define YYFPRINTF fprintf
15063: # endif
15064: 
15065: # define YYDPRINTF(Args)			\
15066: do {						\
15067:   if (yydebug)					\
15068:     YYFPRINTF Args;				\
15069: } while (YYID (0))
15070: 
15071: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)			  \
15072: do {									  \
15073:   if (yydebug)								  \
15074:     {									  \
15075:       YYFPRINTF (stderr, "%s ", Title);					  \
15076:       yy_symbol_print (stderr,						  \
15077: 		  Type, Value, Location, yyscanner); \
15078:       YYFPRINTF (stderr, "\n");						  \
15079:     }									  \
15080: } while (YYID (0))
15081: 
15082: 
15083: /*--------------------------------.
15084: | Print this symbol on YYOUTPUT.  |
15085: `--------------------------------*/
15086: 
15087: /*ARGSUSED*/
15088: #if (defined __STDC__ || defined __C99__FUNC__ \
15089:      || defined __cplusplus || defined _MSC_VER)
15090: static void
15091: yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
15092: #else
15093: static void
15094: yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
15095:     FILE *yyoutput;
15096:     int yytype;
15097:     YYSTYPE const * const yyvaluep;
15098:     YYLTYPE const * const yylocationp;
15099:     core_yyscan_t yyscanner;
15100: #endif
15101: {
15102:   if (!yyvaluep)
15103:     return;
15104:   YYUSE (yylocationp);
15105:   YYUSE (yyscanner);
15106: # ifdef YYPRINT
15107:   if (yytype < YYNTOKENS)
15108:     YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
15109: # else
15110:   YYUSE (yyoutput);
15111: # endif
15112:   switch (yytype)
15113:     {
15114:       default:
15115: 	break;
15116:     }
15117: }
15118: 
15119: 
15120: /*--------------------------------.
15121: | Print this symbol on YYOUTPUT.  |
15122: `--------------------------------*/
15123: 
15124: #if (defined __STDC__ || defined __C99__FUNC__ \
15125:      || defined __cplusplus || defined _MSC_VER)
15126: static void
15127: yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
15128: #else
15129: static void
15130: yy_symbol_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner)
15131:     FILE *yyoutput;
15132:     int yytype;
15133:     YYSTYPE const * const yyvaluep;
15134:     YYLTYPE const * const yylocationp;
15135:     core_yyscan_t yyscanner;
15136: #endif
15137: {
15138:   if (yytype < YYNTOKENS)
15139:     YYFPRINTF (yyoutput, "token %s (", yytname[yytype]);
15140:   else
15141:     YYFPRINTF (yyoutput, "nterm %s (", yytname[yytype]);
15142: 
15143:   YY_LOCATION_PRINT (yyoutput, *yylocationp);
15144:   YYFPRINTF (yyoutput, ": ");
15145:   yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
15146:   YYFPRINTF (yyoutput, ")");
15147: }
15148: 
15149: /*------------------------------------------------------------------.
15150: | yy_stack_print -- Print the state stack from its BOTTOM up to its |
15151: | TOP (included).                                                   |
15152: `------------------------------------------------------------------*/
15153: 
15154: #if (defined __STDC__ || defined __C99__FUNC__ \
15155:      || defined __cplusplus || defined _MSC_VER)
15156: static void
15157: yy_stack_print (yytype_int16 *bottom, yytype_int16 *top)
15158: #else
15159: static void
15160: yy_stack_print (bottom, top)
15161:     yytype_int16 *bottom;
15162:     yytype_int16 *top;
15163: #endif
15164: {
15165:   YYFPRINTF (stderr, "Stack now");
15166:   for (; bottom <= top; ++bottom)
15167:     YYFPRINTF (stderr, " %d", *bottom);
15168:   YYFPRINTF (stderr, "\n");
15169: }
15170: 
15171: # define YY_STACK_PRINT(Bottom, Top)				\
15172: do {								\
15173:   if (yydebug)							\
15174:     yy_stack_print ((Bottom), (Top));				\
15175: } while (YYID (0))
15176: 
15177: 
15178: /*------------------------------------------------.
15179: | Report that the YYRULE is going to be reduced.  |
15180: `------------------------------------------------*/
15181: 
15182: #if (defined __STDC__ || defined __C99__FUNC__ \
15183:      || defined __cplusplus || defined _MSC_VER)
15184: static void
15185: yy_reduce_print (YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
15186: #else
15187: static void
15188: yy_reduce_print (yyvsp, yylsp, yyrule, yyscanner)
15189:     YYSTYPE *yyvsp;
15190:     YYLTYPE *yylsp;
15191:     int yyrule;
15192:     core_yyscan_t yyscanner;
15193: #endif
15194: {
15195:   int yynrhs = yyr2[yyrule];
15196:   int yyi;
15197:   unsigned long int yylno = yyrline[yyrule];
15198:   YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
15199: 	     yyrule - 1, yylno);
15200:   /* The symbols being reduced.  */
15201:   for (yyi = 0; yyi < yynrhs; yyi++)
15202:     {
15203:       fprintf (stderr, "   $%d = ", yyi + 1);
15204:       yy_symbol_print (stderr, yyrhs[yyprhs[yyrule] + yyi],
15205: 		       &(yyvsp[(yyi + 1) - (yynrhs)])
15206: 		       , &(yylsp[(yyi + 1) - (yynrhs)])		       , yyscanner);
15207:       fprintf (stderr, "\n");
15208:     }
15209: }
15210: 
15211: # define YY_REDUCE_PRINT(Rule)		\
15212: do {					\
15213:   if (yydebug)				\
15214:     yy_reduce_print (yyvsp, yylsp, Rule, yyscanner); \
15215: } while (YYID (0))
15216: 
15217: /* Nonzero means print parse trace.  It is left uninitialized so that
15218:    multiple parsers can coexist.  */
15219: int yydebug;
15220: #else /* !YYDEBUG */
15221: # define YYDPRINTF(Args)
15222: # define YY_SYMBOL_PRINT(Title, Type, Value, Location)
15223: # define YY_STACK_PRINT(Bottom, Top)
15224: # define YY_REDUCE_PRINT(Rule)
15225: #endif /* !YYDEBUG */
15226: 
15227: 
15228: /* YYINITDEPTH -- initial size of the parser's stacks.  */
15229: #ifndef	YYINITDEPTH
15230: # define YYINITDEPTH 200
15231: #endif
15232: 
15233: /* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
15234:    if the built-in stack extension method is used).
15235: 
15236:    Do not make this value too large; the results are undefined if
15237:    YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
15238:    evaluated with infinite-precision integer arithmetic.  */
15239: 
15240: #ifndef YYMAXDEPTH
15241: # define YYMAXDEPTH 10000
15242: #endif
15243: 
15244: 
15245: 
15246: #if YYERROR_VERBOSE
15247: 
15248: # ifndef yystrlen
15249: #  if defined __GLIBC__ && defined _STRING_H
15250: #   define yystrlen strlen
15251: #  else
15252: /* Return the length of YYSTR.  */
15253: #if (defined __STDC__ || defined __C99__FUNC__ \
15254:      || defined __cplusplus || defined _MSC_VER)
15255: static YYSIZE_T
15256: yystrlen (const char *yystr)
15257: #else
15258: static YYSIZE_T
15259: yystrlen (yystr)
15260:     const char *yystr;
15261: #endif
15262: {
15263:   YYSIZE_T yylen;
15264:   for (yylen = 0; yystr[yylen]; yylen++)
15265:     continue;
15266:   return yylen;
15267: }
15268: #  endif
15269: # endif
15270: 
15271: # ifndef yystpcpy
15272: #  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
15273: #   define yystpcpy stpcpy
15274: #  else
15275: /* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
15276:    YYDEST.  */
15277: #if (defined __STDC__ || defined __C99__FUNC__ \
15278:      || defined __cplusplus || defined _MSC_VER)
15279: static char *
15280: yystpcpy (char *yydest, const char *yysrc)
15281: #else
15282: static char *
15283: yystpcpy (yydest, yysrc)
15284:     char *yydest;
15285:     const char *yysrc;
15286: #endif
15287: {
15288:   char *yyd = yydest;
15289:   const char *yys = yysrc;
15290: 
15291:   while ((*yyd++ = *yys++) != '\0')
15292:     continue;
15293: 
15294:   return yyd - 1;
15295: }
15296: #  endif
15297: # endif
15298: 
15299: # ifndef yytnamerr
15300: /* Copy to YYRES the contents of YYSTR after stripping away unnecessary
15301:    quotes and backslashes, so that it's suitable for yyerror.  The
15302:    heuristic is that double-quoting is unnecessary unless the string
15303:    contains an apostrophe, a comma, or backslash (other than
15304:    backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
15305:    null, do not copy; instead, return the length of what the result
15306:    would have been.  */
15307: static YYSIZE_T
15308: yytnamerr (char *yyres, const char *yystr)
15309: {
15310:   if (*yystr == '"')
15311:     {
15312:       YYSIZE_T yyn = 0;
15313:       char const *yyp = yystr;
15314: 
15315:       for (;;)
15316: 	switch (*++yyp)
15317: 	  {
15318: 	  case '\'':
15319: 	  case ',':
15320: 	    goto do_not_strip_quotes;
15321: 
15322: 	  case '\\':
15323: 	    if (*++yyp != '\\')
15324: 	      goto do_not_strip_quotes;
15325: 	    /* Fall through.  */
15326: 	  default:
15327: 	    if (yyres)
15328: 	      yyres[yyn] = *yyp;
15329: 	    yyn++;
15330: 	    break;
15331: 
15332: 	  case '"':
15333: 	    if (yyres)
15334: 	      yyres[yyn] = '\0';
15335: 	    return yyn;
15336: 	  }
15337:     do_not_strip_quotes: ;
15338:     }
15339: 
15340:   if (! yyres)
15341:     return yystrlen (yystr);
15342: 
15343:   return yystpcpy (yyres, yystr) - yyres;
15344: }
15345: # endif
15346: 
15347: /* Copy into YYRESULT an error message about the unexpected token
15348:    YYCHAR while in state YYSTATE.  Return the number of bytes copied,
15349:    including the terminating null byte.  If YYRESULT is null, do not
15350:    copy anything; just return the number of bytes that would be
15351:    copied.  As a special case, return 0 if an ordinary "syntax error"
15352:    message will do.  Return YYSIZE_MAXIMUM if overflow occurs during
15353:    size calculation.  */
15354: static YYSIZE_T
15355: yysyntax_error (char *yyresult, int yystate, int yychar)
15356: {
15357:   int yyn = yypact[yystate];
15358: 
15359:   if (! (YYPACT_NINF < yyn && yyn <= YYLAST))
15360:     return 0;
15361:   else
15362:     {
15363:       int yytype = YYTRANSLATE (yychar);
15364:       YYSIZE_T yysize0 = yytnamerr (0, yytname[yytype]);
15365:       YYSIZE_T yysize = yysize0;
15366:       YYSIZE_T yysize1;
15367:       int yysize_overflow = 0;
15368:       enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
15369:       char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
15370:       int yyx;
15371: 
15372: # if 0
15373:       /* This is so xgettext sees the translatable formats that are
15374: 	 constructed on the fly.  */
15375:       YY_("syntax error, unexpected %s");
15376:       YY_("syntax error, unexpected %s, expecting %s");
15377:       YY_("syntax error, unexpected %s, expecting %s or %s");
15378:       YY_("syntax error, unexpected %s, expecting %s or %s or %s");
15379:       YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s");
15380: # endif
15381:       char *yyfmt;
15382:       char const *yyf;
15383:       static char const yyunexpected[] = "syntax error, unexpected %s";
15384:       static char const yyexpecting[] = ", expecting %s";
15385:       static char const yyor[] = " or %s";
15386:       char yyformat[sizeof yyunexpected
15387: 		    + sizeof yyexpecting - 1
15388: 		    + ((YYERROR_VERBOSE_ARGS_MAXIMUM - 2)
15389: 		       * (sizeof yyor - 1))];
15390:       char const *yyprefix = yyexpecting;
15391: 
15392:       /* Start YYX at -YYN if negative to avoid negative indexes in
15393: 	 YYCHECK.  */
15394:       int yyxbegin = yyn < 0 ? -yyn : 0;
15395: 
15396:       /* Stay within bounds of both yycheck and yytname.  */
15397:       int yychecklim = YYLAST - yyn + 1;
15398:       int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
15399:       int yycount = 1;
15400: 
15401:       yyarg[0] = yytname[yytype];
15402:       yyfmt = yystpcpy (yyformat, yyunexpected);
15403: 
15404:       for (yyx = yyxbegin; yyx < yyxend; ++yyx)
15405: 	if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR)
15406: 	  {
15407: 	    if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
15408: 	      {
15409: 		yycount = 1;
15410: 		yysize = yysize0;
15411: 		yyformat[sizeof yyunexpected - 1] = '\0';
15412: 		break;
15413: 	      }
15414: 	    yyarg[yycount++] = yytname[yyx];
15415: 	    yysize1 = yysize + yytnamerr (0, yytname[yyx]);
15416: 	    yysize_overflow |= (yysize1 < yysize);
15417: 	    yysize = yysize1;
15418: 	    yyfmt = yystpcpy (yyfmt, yyprefix);
15419: 	    yyprefix = yyor;
15420: 	  }
15421: 
15422:       yyf = YY_(yyformat);
15423:       yysize1 = yysize + yystrlen (yyf);
15424:       yysize_overflow |= (yysize1 < yysize);
15425:       yysize = yysize1;
15426: 
15427:       if (yysize_overflow)
15428: 	return YYSIZE_MAXIMUM;
15429: 
15430:       if (yyresult)
15431: 	{
15432: 	  /* Avoid sprintf, as that infringes on the user's name space.
15433: 	     Don't have undefined behavior even if the translation
15434: 	     produced a string with the wrong number of "%s"s.  */
15435: 	  char *yyp = yyresult;
15436: 	  int yyi = 0;
15437: 	  while ((*yyp = *yyf) != '\0')
15438: 	    {
15439: 	      if (*yyp == '%' && yyf[1] == 's' && yyi < yycount)
15440: 		{
15441: 		  yyp += yytnamerr (yyp, yyarg[yyi++]);
15442: 		  yyf += 2;
15443: 		}
15444: 	      else
15445: 		{
15446: 		  yyp++;
15447: 		  yyf++;
15448: 		}
15449: 	    }
15450: 	}
15451:       return yysize;
15452:     }
15453: }
15454: #endif /* YYERROR_VERBOSE */
15455: 
15456: 
15457: /*-----------------------------------------------.
15458: | Release the memory associated to this symbol.  |
15459: `-----------------------------------------------*/
15460: 
15461: /*ARGSUSED*/
15462: #if (defined __STDC__ || defined __C99__FUNC__ \
15463:      || defined __cplusplus || defined _MSC_VER)
15464: static void
15465: yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
15466: #else
15467: static void
15468: yydestruct (yymsg, yytype, yyvaluep, yylocationp, yyscanner)
15469:     const char *yymsg;
15470:     int yytype;
15471:     YYSTYPE *yyvaluep;
15472:     YYLTYPE *yylocationp;
15473:     core_yyscan_t yyscanner;
15474: #endif
15475: {
15476:   YYUSE (yyvaluep);
15477:   YYUSE (yylocationp);
15478:   YYUSE (yyscanner);
15479: 
15480:   if (!yymsg)
15481:     yymsg = "Deleting";
15482:   YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);
15483: 
15484:   switch (yytype)
15485:     {
15486: 
15487:       default:
15488: 	break;
15489:     }
15490: }
15491: 
15492: 
15493: /* Prevent warnings from -Wmissing-prototypes.  */
15494: 
15495: #ifdef YYPARSE_PARAM
15496: #if defined __STDC__ || defined __cplusplus
15497: int yyparse (void *YYPARSE_PARAM);
15498: #else
15499: int yyparse ();
15500: #endif
15501: #else /* ! YYPARSE_PARAM */
15502: #if defined __STDC__ || defined __cplusplus
15503: int yyparse (core_yyscan_t yyscanner);
15504: #else
15505: int yyparse ();
15506: #endif
15507: #endif /* ! YYPARSE_PARAM */
15508: 
15509: 
15510: 
15511: 
15512: 
15513: 
15514: /*----------.
15515: | yyparse.  |
15516: `----------*/
15517: 
15518: #ifdef YYPARSE_PARAM
15519: #if (defined __STDC__ || defined __C99__FUNC__ \
15520:      || defined __cplusplus || defined _MSC_VER)
15521: int
15522: yyparse (void *YYPARSE_PARAM)
15523: #else
15524: int
15525: yyparse (YYPARSE_PARAM)
15526:     void *YYPARSE_PARAM;
15527: #endif
15528: #else /* ! YYPARSE_PARAM */
15529: #if (defined __STDC__ || defined __C99__FUNC__ \
15530:      || defined __cplusplus || defined _MSC_VER)
15531: int
15532: yyparse (core_yyscan_t yyscanner)
15533: #else
15534: int
15535: yyparse (yyscanner)
15536:     core_yyscan_t yyscanner;
15537: #endif
15538: #endif
15539: {
15540:   /* The look-ahead symbol.  */
15541: int yychar;
15542: 
15543: /* The semantic value of the look-ahead symbol.  */
15544: YYSTYPE yylval;
15545: 
15546: /* Number of syntax errors so far.  */
15547: int yynerrs;
15548: /* Location data for the look-ahead symbol.  */
15549: YYLTYPE yylloc;
15550: 
15551:   int yystate;
15552:   int yyn;
15553:   int yyresult;
15554:   /* Number of tokens to shift before error messages enabled.  */
15555:   int yyerrstatus;
15556:   /* Look-ahead token as an internal (translated) token number.  */
15557:   int yytoken = 0;
15558: #if YYERROR_VERBOSE
15559:   /* Buffer for error messages, and its allocated size.  */
15560:   char yymsgbuf[128];
15561:   char *yymsg = yymsgbuf;
15562:   YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
15563: #endif
15564: 
15565:   /* Three stacks and their tools:
15566:      `yyss': related to states,
15567:      `yyvs': related to semantic values,
15568:      `yyls': related to locations.
15569: 
15570:      Refer to the stacks thru separate pointers, to allow yyoverflow
15571:      to reallocate them elsewhere.  */
15572: 
15573:   /* The state stack.  */
15574:   yytype_int16 yyssa[YYINITDEPTH];
15575:   yytype_int16 *yyss = yyssa;
15576:   yytype_int16 *yyssp;
15577: 
15578:   /* The semantic value stack.  */
15579:   YYSTYPE yyvsa[YYINITDEPTH];
15580:   YYSTYPE *yyvs = yyvsa;
15581:   YYSTYPE *yyvsp;
15582: 
15583:   /* The location stack.  */
15584:   YYLTYPE yylsa[YYINITDEPTH];
15585:   YYLTYPE *yyls = yylsa;
15586:   YYLTYPE *yylsp;
15587:   /* The locations where the error started and ended.  */
15588:   YYLTYPE yyerror_range[2];
15589: 
15590: #define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))
15591: 
15592:   YYSIZE_T yystacksize = YYINITDEPTH;
15593: 
15594:   /* The variables used to return semantic value and location from the
15595:      action routines.  */
15596:   YYSTYPE yyval;
15597:   YYLTYPE yyloc;
15598: 
15599:   /* The number of symbols on the RHS of the reduced rule.
15600:      Keep to zero when no symbol should be popped.  */
15601:   int yylen = 0;
15602: 
15603:   YYDPRINTF ((stderr, "Starting parse\n"));
15604: 
15605:   yystate = 0;
15606:   yyerrstatus = 0;
15607:   yynerrs = 0;
15608:   yychar = YYEMPTY;		/* Cause a token to be read.  */
15609: 
15610:   /* Initialize stack pointers.
15611:      Waste one element of value and location stack
15612:      so that they stay on the same level as the state stack.
15613:      The wasted elements are never initialized.  */
15614: 
15615:   yyssp = yyss;
15616:   yyvsp = yyvs;
15617:   yylsp = yyls;
15618: #if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
15619:   /* Initialize the default location before parsing starts.  */
15620:   yylloc.first_line   = yylloc.last_line   = 1;
15621:   yylloc.first_column = yylloc.last_column = 0;
15622: #endif
15623: 
15624:   goto yysetstate;
15625: 
15626: /*------------------------------------------------------------.
15627: | yynewstate -- Push a new state, which is found in yystate.  |
15628: `------------------------------------------------------------*/
15629:  yynewstate:
15630:   /* In all cases, when you get here, the value and location stacks
15631:      have just been pushed.  So pushing a state here evens the stacks.  */
15632:   yyssp++;
15633: 
15634:  yysetstate:
15635:   *yyssp = yystate;
15636: 
15637:   if (yyss + yystacksize - 1 <= yyssp)
15638:     {
15639:       /* Get the current used size of the three stacks, in elements.  */
15640:       YYSIZE_T yysize = yyssp - yyss + 1;
15641: 
15642: #ifdef yyoverflow
15643:       {
15644: 	/* Give user a chance to reallocate the stack.  Use copies of
15645: 	   these so that the &'s don't force the real ones into
15646: 	   memory.  */
15647: 	YYSTYPE *yyvs1 = yyvs;
15648: 	yytype_int16 *yyss1 = yyss;
15649: 	YYLTYPE *yyls1 = yyls;
15650: 
15651: 	/* Each stack pointer address is followed by the size of the
15652: 	   data in use in that stack, in bytes.  This used to be a
15653: 	   conditional around just the two extra args, but that might
15654: 	   be undefined if yyoverflow is a macro.  */
15655: 	yyoverflow (YY_("memory exhausted"),
15656: 		    &yyss1, yysize * sizeof (*yyssp),
15657: 		    &yyvs1, yysize * sizeof (*yyvsp),
15658: 		    &yyls1, yysize * sizeof (*yylsp),
15659: 		    &yystacksize);
15660: 	yyls = yyls1;
15661: 	yyss = yyss1;
15662: 	yyvs = yyvs1;
15663:       }
15664: #else /* no yyoverflow */
15665: # ifndef YYSTACK_RELOCATE
15666:       goto yyexhaustedlab;
15667: # else
15668:       /* Extend the stack our own way.  */
15669:       if (YYMAXDEPTH <= yystacksize)
15670: 	goto yyexhaustedlab;
15671:       yystacksize *= 2;
15672:       if (YYMAXDEPTH < yystacksize)
15673: 	yystacksize = YYMAXDEPTH;
15674: 
15675:       {
15676: 	yytype_int16 *yyss1 = yyss;
15677: 	union yyalloc *yyptr =
15678: 	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
15679: 	if (! yyptr)
15680: 	  goto yyexhaustedlab;
15681: 	YYSTACK_RELOCATE (yyss);
15682: 	YYSTACK_RELOCATE (yyvs);
15683: 	YYSTACK_RELOCATE (yyls);
15684: #  undef YYSTACK_RELOCATE
15685: 	if (yyss1 != yyssa)
15686: 	  YYSTACK_FREE (yyss1);
15687:       }
15688: # endif
15689: #endif /* no yyoverflow */
15690: 
15691:       yyssp = yyss + yysize - 1;
15692:       yyvsp = yyvs + yysize - 1;
15693:       yylsp = yyls + yysize - 1;
15694: 
15695:       YYDPRINTF ((stderr, "Stack size increased to %lu\n",
15696: 		  (unsigned long int) yystacksize));
15697: 
15698:       if (yyss + yystacksize - 1 <= yyssp)
15699: 	YYABORT;
15700:     }
15701: 
15702:   YYDPRINTF ((stderr, "Entering state %d\n", yystate));
15703: 
15704:   goto yybackup;
15705: 
15706: /*-----------.
15707: | yybackup.  |
15708: `-----------*/
15709: yybackup:
15710: 
15711:   /* Do appropriate processing given the current state.  Read a
15712:      look-ahead token if we need one and don't already have one.  */
15713: 
15714:   /* First try to decide what to do without reference to look-ahead token.  */
15715:   yyn = yypact[yystate];
15716:   if (yyn == YYPACT_NINF)
15717:     goto yydefault;
15718: 
15719:   /* Not known => get a look-ahead token if don't already have one.  */
15720: 
15721:   /* YYCHAR is either YYEMPTY or YYEOF or a valid look-ahead symbol.  */
15722:   if (yychar == YYEMPTY)
15723:     {
15724:       YYDPRINTF ((stderr, "Reading a token: "));
15725:       yychar = YYLEX;
15726:     }
15727: 
15728:   if (yychar <= YYEOF)
15729:     {
15730:       yychar = yytoken = YYEOF;
15731:       YYDPRINTF ((stderr, "Now at end of input.\n"));
15732:     }
15733:   else
15734:     {
15735:       yytoken = YYTRANSLATE (yychar);
15736:       YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
15737:     }
15738: 
15739:   /* If the proper action on seeing token YYTOKEN is to reduce or to
15740:      detect an error, take that action.  */
15741:   yyn += yytoken;
15742:   if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
15743:     goto yydefault;
15744:   yyn = yytable[yyn];
15745:   if (yyn <= 0)
15746:     {
15747:       if (yyn == 0 || yyn == YYTABLE_NINF)
15748: 	goto yyerrlab;
15749:       yyn = -yyn;
15750:       goto yyreduce;
15751:     }
15752: 
15753:   if (yyn == YYFINAL)
15754:     YYACCEPT;
15755: 
15756:   /* Count tokens shifted since error; after three, turn off error
15757:      status.  */
15758:   if (yyerrstatus)
15759:     yyerrstatus--;
15760: 
15761:   /* Shift the look-ahead token.  */
15762:   YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
15763: 
15764:   /* Discard the shifted token unless it is eof.  */
15765:   if (yychar != YYEOF)
15766:     yychar = YYEMPTY;
15767: 
15768:   yystate = yyn;
15769:   *++yyvsp = yylval;
15770:   *++yylsp = yylloc;
15771:   goto yynewstate;
15772: 
15773: 
15774: /*-----------------------------------------------------------.
15775: | yydefault -- do the default action for the current state.  |
15776: `-----------------------------------------------------------*/
15777: yydefault:
15778:   yyn = yydefact[yystate];
15779:   if (yyn == 0)
15780:     goto yyerrlab;
15781:   goto yyreduce;
15782: 
15783: 
15784: /*-----------------------------.
15785: | yyreduce -- Do a reduction.  |
15786: `-----------------------------*/
15787: yyreduce:
15788:   /* yyn is the number of a rule to reduce with.  */
15789:   yylen = yyr2[yyn];
15790: 
15791:   /* If YYLEN is nonzero, implement the default value of the action:
15792:      `$$ = $1'.
15793: 
15794:      Otherwise, the following line sets YYVAL to garbage.
15795:      This behavior is undocumented and Bison
15796:      users should not rely upon it.  Assigning to YYVAL
15797:      unconditionally makes the parser a bit smaller, and it avoids a
15798:      GCC warning that YYVAL may be used uninitialized.  */
15799:   yyval = yyvsp[1-yylen];
15800: 
15801:   /* Default location.  */
15802:   YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
15803:   YY_REDUCE_PRINT (yyn);
15804:   switch (yyn)
15805:     {
15806:         case 2:
15807: #line 468 "third_party/libpg_query/grammar/grammar.y"
15808:     {
15809: 				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);
15810: 			;}
15811:     break;
15812: 
15813:   case 3:
15814: #line 484 "third_party/libpg_query/grammar/grammar.y"
15815:     {
15816: 					if ((yyvsp[(1) - (3)].list) != NIL)
15817: 					{
15818: 						/* update length of previous stmt */
15819: 						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[(1) - (3)].list)), (yylsp[(2) - (3)]));
15820: 					}
15821: 					if ((yyvsp[(3) - (3)].node) != NULL)
15822: 						(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeRawStmt((yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]) + 1));
15823: 					else
15824: 						(yyval.list) = (yyvsp[(1) - (3)].list);
15825: 				;}
15826:     break;
15827: 
15828:   case 4:
15829: #line 496 "third_party/libpg_query/grammar/grammar.y"
15830:     {
15831: 					if ((yyvsp[(1) - (1)].node) != NULL)
15832: 						(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));
15833: 					else
15834: 						(yyval.list) = NIL;
15835: 				;}
15836:     break;
15837: 
15838:   case 39:
15839: #line 539 "third_party/libpg_query/grammar/grammar.y"
15840:     { (yyval.node) = NULL; ;}
15841:     break;
15842: 
15843:   case 40:
15844: #line 10 "third_party/libpg_query/grammar/statements/alter_table.y"
15845:     {
15846: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15847: 					n->relation = (yyvsp[(3) - (4)].range);
15848: 					n->cmds = (yyvsp[(4) - (4)].list);
15849: 					n->relkind = PG_OBJECT_TABLE;
15850: 					n->missing_ok = false;
15851: 					(yyval.node) = (PGNode *)n;
15852: 				;}
15853:     break;
15854: 
15855:   case 41:
15856: #line 19 "third_party/libpg_query/grammar/statements/alter_table.y"
15857:     {
15858: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15859: 					n->relation = (yyvsp[(5) - (6)].range);
15860: 					n->cmds = (yyvsp[(6) - (6)].list);
15861: 					n->relkind = PG_OBJECT_TABLE;
15862: 					n->missing_ok = true;
15863: 					(yyval.node) = (PGNode *)n;
15864: 				;}
15865:     break;
15866: 
15867:   case 42:
15868: #line 28 "third_party/libpg_query/grammar/statements/alter_table.y"
15869:     {
15870: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15871: 					n->relation = (yyvsp[(3) - (4)].range);
15872: 					n->cmds = (yyvsp[(4) - (4)].list);
15873: 					n->relkind = PG_OBJECT_INDEX;
15874: 					n->missing_ok = false;
15875: 					(yyval.node) = (PGNode *)n;
15876: 				;}
15877:     break;
15878: 
15879:   case 43:
15880: #line 37 "third_party/libpg_query/grammar/statements/alter_table.y"
15881:     {
15882: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15883: 					n->relation = (yyvsp[(5) - (6)].range);
15884: 					n->cmds = (yyvsp[(6) - (6)].list);
15885: 					n->relkind = PG_OBJECT_INDEX;
15886: 					n->missing_ok = true;
15887: 					(yyval.node) = (PGNode *)n;
15888: 				;}
15889:     break;
15890: 
15891:   case 44:
15892: #line 46 "third_party/libpg_query/grammar/statements/alter_table.y"
15893:     {
15894: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15895: 					n->relation = (yyvsp[(3) - (4)].range);
15896: 					n->cmds = (yyvsp[(4) - (4)].list);
15897: 					n->relkind = PG_OBJECT_SEQUENCE;
15898: 					n->missing_ok = false;
15899: 					(yyval.node) = (PGNode *)n;
15900: 				;}
15901:     break;
15902: 
15903:   case 45:
15904: #line 55 "third_party/libpg_query/grammar/statements/alter_table.y"
15905:     {
15906: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15907: 					n->relation = (yyvsp[(5) - (6)].range);
15908: 					n->cmds = (yyvsp[(6) - (6)].list);
15909: 					n->relkind = PG_OBJECT_SEQUENCE;
15910: 					n->missing_ok = true;
15911: 					(yyval.node) = (PGNode *)n;
15912: 				;}
15913:     break;
15914: 
15915:   case 46:
15916: #line 64 "third_party/libpg_query/grammar/statements/alter_table.y"
15917:     {
15918: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15919: 					n->relation = (yyvsp[(3) - (4)].range);
15920: 					n->cmds = (yyvsp[(4) - (4)].list);
15921: 					n->relkind = PG_OBJECT_VIEW;
15922: 					n->missing_ok = false;
15923: 					(yyval.node) = (PGNode *)n;
15924: 				;}
15925:     break;
15926: 
15927:   case 47:
15928: #line 73 "third_party/libpg_query/grammar/statements/alter_table.y"
15929:     {
15930: 					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
15931: 					n->relation = (yyvsp[(5) - (6)].range);
15932: 					n->cmds = (yyvsp[(6) - (6)].list);
15933: 					n->relkind = PG_OBJECT_VIEW;
15934: 					n->missing_ok = true;
15935: 					(yyval.node) = (PGNode *)n;
15936: 				;}
15937:     break;
15938: 
15939:   case 48:
15940: #line 86 "third_party/libpg_query/grammar/statements/alter_table.y"
15941:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
15942:     break;
15943: 
15944:   case 49:
15945: #line 88 "third_party/libpg_query/grammar/statements/alter_table.y"
15946:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
15947:     break;
15948: 
15949:   case 50:
15950: #line 93 "third_party/libpg_query/grammar/statements/alter_table.y"
15951:     { (yyval.node) = (yyvsp[(3) - (3)].node); ;}
15952:     break;
15953: 
15954:   case 51:
15955: #line 94 "third_party/libpg_query/grammar/statements/alter_table.y"
15956:     { (yyval.node) = NULL; ;}
15957:     break;
15958: 
15959:   case 52:
15960: #line 100 "third_party/libpg_query/grammar/statements/alter_table.y"
15961:     {
15962: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
15963: 				;}
15964:     break;
15965: 
15966:   case 53:
15967: #line 104 "third_party/libpg_query/grammar/statements/alter_table.y"
15968:     {
15969: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
15970: 				;}
15971:     break;
15972: 
15973:   case 54:
15974: #line 108 "third_party/libpg_query/grammar/statements/alter_table.y"
15975:     {
15976: 					if (strcmp((yyvsp[(2) - (2)].defelt)->defname, "as") == 0 ||
15977: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "restart") == 0 ||
15978: 						strcmp((yyvsp[(2) - (2)].defelt)->defname, "owned_by") == 0)
15979: 						ereport(ERROR,
15980: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
15981: 								 errmsg("sequence option \"%s\" not supported here", (yyvsp[(2) - (2)].defelt)->defname),
15982: 								 parser_errposition((yylsp[(2) - (2)]))));
15983: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
15984: 				;}
15985:     break;
15986: 
15987:   case 55:
15988: #line 119 "third_party/libpg_query/grammar/statements/alter_table.y"
15989:     {
15990: 					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[(3) - (3)].ival)), (yylsp[(1) - (3)]));
15991: 				;}
15992:     break;
15993: 
15994:   case 56:
15995: #line 127 "third_party/libpg_query/grammar/statements/alter_table.y"
15996:     {
15997: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
15998: 				;}
15999:     break;
16000: 
16001:   case 57:
16002: #line 131 "third_party/libpg_query/grammar/statements/alter_table.y"
16003:     {
16004: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
16005: 				;}
16006:     break;
16007: 
16008:   case 58:
16009: #line 140 "third_party/libpg_query/grammar/statements/alter_table.y"
16010:     {
16011: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16012: 					n->subtype = PG_AT_AddColumn;
16013: 					n->def = (yyvsp[(2) - (2)].node);
16014: 					n->missing_ok = false;
16015: 					(yyval.node) = (PGNode *)n;
16016: 				;}
16017:     break;
16018: 
16019:   case 59:
16020: #line 149 "third_party/libpg_query/grammar/statements/alter_table.y"
16021:     {
16022: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16023: 					n->subtype = PG_AT_AddColumn;
16024: 					n->def = (yyvsp[(5) - (5)].node);
16025: 					n->missing_ok = true;
16026: 					(yyval.node) = (PGNode *)n;
16027: 				;}
16028:     break;
16029: 
16030:   case 60:
16031: #line 158 "third_party/libpg_query/grammar/statements/alter_table.y"
16032:     {
16033: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16034: 					n->subtype = PG_AT_AddColumn;
16035: 					n->def = (yyvsp[(3) - (3)].node);
16036: 					n->missing_ok = false;
16037: 					(yyval.node) = (PGNode *)n;
16038: 				;}
16039:     break;
16040: 
16041:   case 61:
16042: #line 167 "third_party/libpg_query/grammar/statements/alter_table.y"
16043:     {
16044: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16045: 					n->subtype = PG_AT_AddColumn;
16046: 					n->def = (yyvsp[(6) - (6)].node);
16047: 					n->missing_ok = true;
16048: 					(yyval.node) = (PGNode *)n;
16049: 				;}
16050:     break;
16051: 
16052:   case 62:
16053: #line 176 "third_party/libpg_query/grammar/statements/alter_table.y"
16054:     {
16055: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16056: 					n->subtype = PG_AT_ColumnDefault;
16057: 					n->name = (yyvsp[(3) - (4)].str);
16058: 					n->def = (yyvsp[(4) - (4)].node);
16059: 					(yyval.node) = (PGNode *)n;
16060: 				;}
16061:     break;
16062: 
16063:   case 63:
16064: #line 185 "third_party/libpg_query/grammar/statements/alter_table.y"
16065:     {
16066: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16067: 					n->subtype = PG_AT_DropNotNull;
16068: 					n->name = (yyvsp[(3) - (6)].str);
16069: 					(yyval.node) = (PGNode *)n;
16070: 				;}
16071:     break;
16072: 
16073:   case 64:
16074: #line 193 "third_party/libpg_query/grammar/statements/alter_table.y"
16075:     {
16076: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16077: 					n->subtype = PG_AT_SetNotNull;
16078: 					n->name = (yyvsp[(3) - (6)].str);
16079: 					(yyval.node) = (PGNode *)n;
16080: 				;}
16081:     break;
16082: 
16083:   case 65:
16084: #line 201 "third_party/libpg_query/grammar/statements/alter_table.y"
16085:     {
16086: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16087: 					n->subtype = PG_AT_SetStatistics;
16088: 					n->name = (yyvsp[(3) - (6)].str);
16089: 					n->def = (PGNode *) makeInteger((yyvsp[(6) - (6)].ival));
16090: 					(yyval.node) = (PGNode *)n;
16091: 				;}
16092:     break;
16093: 
16094:   case 66:
16095: #line 210 "third_party/libpg_query/grammar/statements/alter_table.y"
16096:     {
16097: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16098: 					n->subtype = PG_AT_SetOptions;
16099: 					n->name = (yyvsp[(3) - (5)].str);
16100: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
16101: 					(yyval.node) = (PGNode *)n;
16102: 				;}
16103:     break;
16104: 
16105:   case 67:
16106: #line 219 "third_party/libpg_query/grammar/statements/alter_table.y"
16107:     {
16108: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16109: 					n->subtype = PG_AT_ResetOptions;
16110: 					n->name = (yyvsp[(3) - (5)].str);
16111: 					n->def = (PGNode *) (yyvsp[(5) - (5)].list);
16112: 					(yyval.node) = (PGNode *)n;
16113: 				;}
16114:     break;
16115: 
16116:   case 68:
16117: #line 228 "third_party/libpg_query/grammar/statements/alter_table.y"
16118:     {
16119: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16120: 					n->subtype = PG_AT_SetStorage;
16121: 					n->name = (yyvsp[(3) - (6)].str);
16122: 					n->def = (PGNode *) makeString((yyvsp[(6) - (6)].str));
16123: 					(yyval.node) = (PGNode *)n;
16124: 				;}
16125:     break;
16126: 
16127:   case 69:
16128: #line 237 "third_party/libpg_query/grammar/statements/alter_table.y"
16129:     {
16130: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16131: 					PGConstraint *c = makeNode(PGConstraint);
16132: 
16133: 					c->contype = PG_CONSTR_IDENTITY;
16134: 					c->generated_when = (yyvsp[(6) - (9)].ival);
16135: 					c->options = (yyvsp[(9) - (9)].list);
16136: 					c->location = (yylsp[(5) - (9)]);
16137: 
16138: 					n->subtype = PG_AT_AddIdentity;
16139: 					n->name = (yyvsp[(3) - (9)].str);
16140: 					n->def = (PGNode *) c;
16141: 
16142: 					(yyval.node) = (PGNode *)n;
16143: 				;}
16144:     break;
16145: 
16146:   case 70:
16147: #line 254 "third_party/libpg_query/grammar/statements/alter_table.y"
16148:     {
16149: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16150: 					n->subtype = PG_AT_SetIdentity;
16151: 					n->name = (yyvsp[(3) - (4)].str);
16152: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
16153: 					(yyval.node) = (PGNode *)n;
16154: 				;}
16155:     break;
16156: 
16157:   case 71:
16158: #line 263 "third_party/libpg_query/grammar/statements/alter_table.y"
16159:     {
16160: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16161: 					n->subtype = AT_DropIdentity;
16162: 					n->name = (yyvsp[(3) - (5)].str);
16163: 					n->missing_ok = false;
16164: 					(yyval.node) = (PGNode *)n;
16165: 				;}
16166:     break;
16167: 
16168:   case 72:
16169: #line 272 "third_party/libpg_query/grammar/statements/alter_table.y"
16170:     {
16171: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16172: 					n->subtype = AT_DropIdentity;
16173: 					n->name = (yyvsp[(3) - (7)].str);
16174: 					n->missing_ok = true;
16175: 					(yyval.node) = (PGNode *)n;
16176: 				;}
16177:     break;
16178: 
16179:   case 73:
16180: #line 281 "third_party/libpg_query/grammar/statements/alter_table.y"
16181:     {
16182: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16183: 					n->subtype = PG_AT_DropColumn;
16184: 					n->name = (yyvsp[(5) - (6)].str);
16185: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
16186: 					n->missing_ok = true;
16187: 					(yyval.node) = (PGNode *)n;
16188: 				;}
16189:     break;
16190: 
16191:   case 74:
16192: #line 291 "third_party/libpg_query/grammar/statements/alter_table.y"
16193:     {
16194: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16195: 					n->subtype = PG_AT_DropColumn;
16196: 					n->name = (yyvsp[(3) - (4)].str);
16197: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
16198: 					n->missing_ok = false;
16199: 					(yyval.node) = (PGNode *)n;
16200: 				;}
16201:     break;
16202: 
16203:   case 75:
16204: #line 304 "third_party/libpg_query/grammar/statements/alter_table.y"
16205:     {
16206: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16207: 					PGColumnDef *def = makeNode(PGColumnDef);
16208: 					n->subtype = PG_AT_AlterColumnType;
16209: 					n->name = (yyvsp[(3) - (8)].str);
16210: 					n->def = (PGNode *) def;
16211: 					/* We only use these fields of the PGColumnDef node */
16212: 					def->typeName = (yyvsp[(6) - (8)].typnam);
16213: 					def->collClause = (PGCollateClause *) (yyvsp[(7) - (8)].node);
16214: 					def->raw_default = (yyvsp[(8) - (8)].node);
16215: 					def->location = (yylsp[(3) - (8)]);
16216: 					(yyval.node) = (PGNode *)n;
16217: 				;}
16218:     break;
16219: 
16220:   case 76:
16221: #line 319 "third_party/libpg_query/grammar/statements/alter_table.y"
16222:     {
16223: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16224: 					n->subtype = PG_AT_AlterColumnGenericOptions;
16225: 					n->name = (yyvsp[(3) - (4)].str);
16226: 					n->def = (PGNode *) (yyvsp[(4) - (4)].list);
16227: 					(yyval.node) = (PGNode *)n;
16228: 				;}
16229:     break;
16230: 
16231:   case 77:
16232: #line 328 "third_party/libpg_query/grammar/statements/alter_table.y"
16233:     {
16234: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16235: 					n->subtype = PG_AT_AddConstraint;
16236: 					n->def = (yyvsp[(2) - (2)].node);
16237: 					(yyval.node) = (PGNode *)n;
16238: 				;}
16239:     break;
16240: 
16241:   case 78:
16242: #line 336 "third_party/libpg_query/grammar/statements/alter_table.y"
16243:     {
16244: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16245: 					PGConstraint *c = makeNode(PGConstraint);
16246: 					n->subtype = PG_AT_AlterConstraint;
16247: 					n->def = (PGNode *) c;
16248: 					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
16249: 					c->conname = (yyvsp[(3) - (4)].str);
16250: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "ALTER CONSTRAINT statement",
16251: 									&c->deferrable,
16252: 									&c->initdeferred,
16253: 									NULL, NULL, yyscanner);
16254: 					(yyval.node) = (PGNode *)n;
16255: 				;}
16256:     break;
16257: 
16258:   case 79:
16259: #line 351 "third_party/libpg_query/grammar/statements/alter_table.y"
16260:     {
16261: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16262: 					n->subtype = PG_AT_ValidateConstraint;
16263: 					n->name = (yyvsp[(3) - (3)].str);
16264: 					(yyval.node) = (PGNode *)n;
16265: 				;}
16266:     break;
16267: 
16268:   case 80:
16269: #line 359 "third_party/libpg_query/grammar/statements/alter_table.y"
16270:     {
16271: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16272: 					n->subtype = PG_AT_DropConstraint;
16273: 					n->name = (yyvsp[(5) - (6)].str);
16274: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
16275: 					n->missing_ok = true;
16276: 					(yyval.node) = (PGNode *)n;
16277: 				;}
16278:     break;
16279: 
16280:   case 81:
16281: #line 369 "third_party/libpg_query/grammar/statements/alter_table.y"
16282:     {
16283: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16284: 					n->subtype = PG_AT_DropConstraint;
16285: 					n->name = (yyvsp[(3) - (4)].str);
16286: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
16287: 					n->missing_ok = false;
16288: 					(yyval.node) = (PGNode *)n;
16289: 				;}
16290:     break;
16291: 
16292:   case 82:
16293: #line 379 "third_party/libpg_query/grammar/statements/alter_table.y"
16294:     {
16295: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16296: 					n->subtype = PG_AT_SetLogged;
16297: 					(yyval.node) = (PGNode *)n;
16298: 				;}
16299:     break;
16300: 
16301:   case 83:
16302: #line 386 "third_party/libpg_query/grammar/statements/alter_table.y"
16303:     {
16304: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16305: 					n->subtype = PG_AT_SetUnLogged;
16306: 					(yyval.node) = (PGNode *)n;
16307: 				;}
16308:     break;
16309: 
16310:   case 84:
16311: #line 393 "third_party/libpg_query/grammar/statements/alter_table.y"
16312:     {
16313: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16314: 					n->subtype = PG_AT_SetRelOptions;
16315: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
16316: 					(yyval.node) = (PGNode *)n;
16317: 				;}
16318:     break;
16319: 
16320:   case 85:
16321: #line 401 "third_party/libpg_query/grammar/statements/alter_table.y"
16322:     {
16323: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16324: 					n->subtype = PG_AT_ResetRelOptions;
16325: 					n->def = (PGNode *)(yyvsp[(2) - (2)].list);
16326: 					(yyval.node) = (PGNode *)n;
16327: 				;}
16328:     break;
16329: 
16330:   case 86:
16331: #line 408 "third_party/libpg_query/grammar/statements/alter_table.y"
16332:     {
16333: 					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
16334: 					n->subtype = PG_AT_GenericOptions;
16335: 					n->def = (PGNode *)(yyvsp[(1) - (1)].list);
16336: 					(yyval.node) = (PGNode *) n;
16337: 				;}
16338:     break;
16339: 
16340:   case 87:
16341: #line 418 "third_party/libpg_query/grammar/statements/alter_table.y"
16342:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
16343:     break;
16344: 
16345:   case 88:
16346: #line 419 "third_party/libpg_query/grammar/statements/alter_table.y"
16347:     { (yyval.node) = NULL; ;}
16348:     break;
16349: 
16350:   case 89:
16351: #line 425 "third_party/libpg_query/grammar/statements/alter_table.y"
16352:     {
16353: 					(yyval.defelt) = (yyvsp[(1) - (1)].defelt);
16354: 				;}
16355:     break;
16356: 
16357:   case 90:
16358: #line 429 "third_party/libpg_query/grammar/statements/alter_table.y"
16359:     {
16360: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
16361: 					(yyval.defelt)->defaction = PG_DEFELEM_SET;
16362: 				;}
16363:     break;
16364: 
16365:   case 91:
16366: #line 434 "third_party/libpg_query/grammar/statements/alter_table.y"
16367:     {
16368: 					(yyval.defelt) = (yyvsp[(2) - (2)].defelt);
16369: 					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
16370: 				;}
16371:     break;
16372: 
16373:   case 92:
16374: #line 439 "third_party/libpg_query/grammar/statements/alter_table.y"
16375:     {
16376: 					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[(2) - (2)].str), NULL, DEFELEM_DROP, (yylsp[(2) - (2)]));
16377: 				;}
16378:     break;
16379: 
16380:   case 93:
16381: #line 446 "third_party/libpg_query/grammar/statements/alter_table.y"
16382:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
16383:     break;
16384: 
16385:   case 94:
16386: #line 447 "third_party/libpg_query/grammar/statements/alter_table.y"
16387:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
16388:     break;
16389: 
16390:   case 95:
16391: #line 452 "third_party/libpg_query/grammar/statements/alter_table.y"
16392:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
16393:     break;
16394: 
16395:   case 96:
16396: #line 456 "third_party/libpg_query/grammar/statements/alter_table.y"
16397:     { (yyval.ival) = 1; ;}
16398:     break;
16399: 
16400:   case 97:
16401: #line 457 "third_party/libpg_query/grammar/statements/alter_table.y"
16402:     { (yyval.ival) = 0; ;}
16403:     break;
16404: 
16405:   case 98:
16406: #line 458 "third_party/libpg_query/grammar/statements/alter_table.y"
16407:     { (yyval.ival) = 0; ;}
16408:     break;
16409: 
16410:   case 99:
16411: #line 8 "third_party/libpg_query/grammar/statements/deallocate.y"
16412:     {
16413: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16414: 						n->name = (yyvsp[(2) - (2)].str);
16415: 						(yyval.node) = (PGNode *) n;
16416: 					;}
16417:     break;
16418: 
16419:   case 100:
16420: #line 14 "third_party/libpg_query/grammar/statements/deallocate.y"
16421:     {
16422: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16423: 						n->name = (yyvsp[(3) - (3)].str);
16424: 						(yyval.node) = (PGNode *) n;
16425: 					;}
16426:     break;
16427: 
16428:   case 101:
16429: #line 20 "third_party/libpg_query/grammar/statements/deallocate.y"
16430:     {
16431: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16432: 						n->name = NULL;
16433: 						(yyval.node) = (PGNode *) n;
16434: 					;}
16435:     break;
16436: 
16437:   case 102:
16438: #line 26 "third_party/libpg_query/grammar/statements/deallocate.y"
16439:     {
16440: 						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
16441: 						n->name = NULL;
16442: 						(yyval.node) = (PGNode *) n;
16443: 					;}
16444:     break;
16445: 
16446:   case 103:
16447: #line 8 "third_party/libpg_query/grammar/statements/create_enum.y"
16448:     {
16449: 					PGCreateEnumStmt *n = makeNode(PGCreateEnumStmt);
16450: 					n->typeName = (yyvsp[(3) - (8)].list);
16451: 					n->vals = (yyvsp[(7) - (8)].list);
16452: 					(yyval.node) = (PGNode *)n;
16453: 				;}
16454:     break;
16455: 
16456:   case 104:
16457: #line 17 "third_party/libpg_query/grammar/statements/create_enum.y"
16458:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16459:     break;
16460: 
16461:   case 105:
16462: #line 18 "third_party/libpg_query/grammar/statements/create_enum.y"
16463:     { (yyval.list) = NIL; ;}
16464:     break;
16465: 
16466:   case 106:
16467: #line 22 "third_party/libpg_query/grammar/statements/create_enum.y"
16468:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
16469:     break;
16470: 
16471:   case 107:
16472: #line 24 "third_party/libpg_query/grammar/statements/create_enum.y"
16473:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
16474:     break;
16475: 
16476:   case 108:
16477: #line 7 "third_party/libpg_query/grammar/statements/rename.y"
16478:     {
16479: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16480: 					n->renameType = PG_OBJECT_SCHEMA;
16481: 					n->subname = (yyvsp[(3) - (6)].str);
16482: 					n->newname = (yyvsp[(6) - (6)].str);
16483: 					n->missing_ok = false;
16484: 					(yyval.node) = (PGNode *)n;
16485: 				;}
16486:     break;
16487: 
16488:   case 109:
16489: #line 16 "third_party/libpg_query/grammar/statements/rename.y"
16490:     {
16491: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16492: 					n->renameType = PG_OBJECT_TABLE;
16493: 					n->relation = (yyvsp[(3) - (6)].range);
16494: 					n->subname = NULL;
16495: 					n->newname = (yyvsp[(6) - (6)].str);
16496: 					n->missing_ok = false;
16497: 					(yyval.node) = (PGNode *)n;
16498: 				;}
16499:     break;
16500: 
16501:   case 110:
16502: #line 26 "third_party/libpg_query/grammar/statements/rename.y"
16503:     {
16504: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16505: 					n->renameType = PG_OBJECT_TABLE;
16506: 					n->relation = (yyvsp[(5) - (8)].range);
16507: 					n->subname = NULL;
16508: 					n->newname = (yyvsp[(8) - (8)].str);
16509: 					n->missing_ok = true;
16510: 					(yyval.node) = (PGNode *)n;
16511: 				;}
16512:     break;
16513: 
16514:   case 111:
16515: #line 36 "third_party/libpg_query/grammar/statements/rename.y"
16516:     {
16517: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16518: 					n->renameType = PG_OBJECT_SEQUENCE;
16519: 					n->relation = (yyvsp[(3) - (6)].range);
16520: 					n->subname = NULL;
16521: 					n->newname = (yyvsp[(6) - (6)].str);
16522: 					n->missing_ok = false;
16523: 					(yyval.node) = (PGNode *)n;
16524: 				;}
16525:     break;
16526: 
16527:   case 112:
16528: #line 46 "third_party/libpg_query/grammar/statements/rename.y"
16529:     {
16530: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16531: 					n->renameType = PG_OBJECT_SEQUENCE;
16532: 					n->relation = (yyvsp[(5) - (8)].range);
16533: 					n->subname = NULL;
16534: 					n->newname = (yyvsp[(8) - (8)].str);
16535: 					n->missing_ok = true;
16536: 					(yyval.node) = (PGNode *)n;
16537: 				;}
16538:     break;
16539: 
16540:   case 113:
16541: #line 56 "third_party/libpg_query/grammar/statements/rename.y"
16542:     {
16543: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16544: 					n->renameType = PG_OBJECT_VIEW;
16545: 					n->relation = (yyvsp[(3) - (6)].range);
16546: 					n->subname = NULL;
16547: 					n->newname = (yyvsp[(6) - (6)].str);
16548: 					n->missing_ok = false;
16549: 					(yyval.node) = (PGNode *)n;
16550: 				;}
16551:     break;
16552: 
16553:   case 114:
16554: #line 66 "third_party/libpg_query/grammar/statements/rename.y"
16555:     {
16556: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16557: 					n->renameType = PG_OBJECT_VIEW;
16558: 					n->relation = (yyvsp[(5) - (8)].range);
16559: 					n->subname = NULL;
16560: 					n->newname = (yyvsp[(8) - (8)].str);
16561: 					n->missing_ok = true;
16562: 					(yyval.node) = (PGNode *)n;
16563: 				;}
16564:     break;
16565: 
16566:   case 115:
16567: #line 76 "third_party/libpg_query/grammar/statements/rename.y"
16568:     {
16569: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16570: 					n->renameType = PG_OBJECT_INDEX;
16571: 					n->relation = (yyvsp[(3) - (6)].range);
16572: 					n->subname = NULL;
16573: 					n->newname = (yyvsp[(6) - (6)].str);
16574: 					n->missing_ok = false;
16575: 					(yyval.node) = (PGNode *)n;
16576: 				;}
16577:     break;
16578: 
16579:   case 116:
16580: #line 86 "third_party/libpg_query/grammar/statements/rename.y"
16581:     {
16582: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16583: 					n->renameType = PG_OBJECT_INDEX;
16584: 					n->relation = (yyvsp[(5) - (8)].range);
16585: 					n->subname = NULL;
16586: 					n->newname = (yyvsp[(8) - (8)].str);
16587: 					n->missing_ok = true;
16588: 					(yyval.node) = (PGNode *)n;
16589: 				;}
16590:     break;
16591: 
16592:   case 117:
16593: #line 96 "third_party/libpg_query/grammar/statements/rename.y"
16594:     {
16595: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16596: 					n->renameType = PG_OBJECT_COLUMN;
16597: 					n->relationType = PG_OBJECT_TABLE;
16598: 					n->relation = (yyvsp[(3) - (8)].range);
16599: 					n->subname = (yyvsp[(6) - (8)].str);
16600: 					n->newname = (yyvsp[(8) - (8)].str);
16601: 					n->missing_ok = false;
16602: 					(yyval.node) = (PGNode *)n;
16603: 				;}
16604:     break;
16605: 
16606:   case 118:
16607: #line 107 "third_party/libpg_query/grammar/statements/rename.y"
16608:     {
16609: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16610: 					n->renameType = PG_OBJECT_COLUMN;
16611: 					n->relationType = PG_OBJECT_TABLE;
16612: 					n->relation = (yyvsp[(5) - (10)].range);
16613: 					n->subname = (yyvsp[(8) - (10)].str);
16614: 					n->newname = (yyvsp[(10) - (10)].str);
16615: 					n->missing_ok = true;
16616: 					(yyval.node) = (PGNode *)n;
16617: 				;}
16618:     break;
16619: 
16620:   case 119:
16621: #line 118 "third_party/libpg_query/grammar/statements/rename.y"
16622:     {
16623: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16624: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
16625: 					n->relation = (yyvsp[(3) - (8)].range);
16626: 					n->subname = (yyvsp[(6) - (8)].str);
16627: 					n->newname = (yyvsp[(8) - (8)].str);
16628: 					n->missing_ok = false;
16629: 					(yyval.node) = (PGNode *)n;
16630: 				;}
16631:     break;
16632: 
16633:   case 120:
16634: #line 128 "third_party/libpg_query/grammar/statements/rename.y"
16635:     {
16636: 					PGRenameStmt *n = makeNode(PGRenameStmt);
16637: 					n->renameType = PG_OBJECT_TABCONSTRAINT;
16638: 					n->relation = (yyvsp[(5) - (10)].range);
16639: 					n->subname = (yyvsp[(8) - (10)].str);
16640: 					n->newname = (yyvsp[(10) - (10)].str);
16641: 					n->missing_ok = true;
16642: 					(yyval.node) = (PGNode *)n;
16643: 				;}
16644:     break;
16645: 
16646:   case 121:
16647: #line 140 "third_party/libpg_query/grammar/statements/rename.y"
16648:     { (yyval.ival) = COLUMN; ;}
16649:     break;
16650: 
16651:   case 122:
16652: #line 141 "third_party/libpg_query/grammar/statements/rename.y"
16653:     { (yyval.ival) = 0; ;}
16654:     break;
16655: 
16656:   case 123:
16657: #line 10 "third_party/libpg_query/grammar/statements/insert.y"
16658:     {
16659: 					(yyvsp[(5) - (7)].istmt)->relation = (yyvsp[(4) - (7)].range);
16660: 					(yyvsp[(5) - (7)].istmt)->onConflictClause = (yyvsp[(6) - (7)].onconflict);
16661: 					(yyvsp[(5) - (7)].istmt)->returningList = (yyvsp[(7) - (7)].list);
16662: 					(yyvsp[(5) - (7)].istmt)->withClause = (yyvsp[(1) - (7)].with);
16663: 					(yyval.node) = (PGNode *) (yyvsp[(5) - (7)].istmt);
16664: 				;}
16665:     break;
16666: 
16667:   case 124:
16668: #line 22 "third_party/libpg_query/grammar/statements/insert.y"
16669:     {
16670: 					(yyval.istmt) = makeNode(PGInsertStmt);
16671: 					(yyval.istmt)->cols = NIL;
16672: 					(yyval.istmt)->selectStmt = (yyvsp[(1) - (1)].node);
16673: 				;}
16674:     break;
16675: 
16676:   case 125:
16677: #line 28 "third_party/libpg_query/grammar/statements/insert.y"
16678:     {
16679: 					(yyval.istmt) = makeNode(PGInsertStmt);
16680: 					(yyval.istmt)->cols = NIL;
16681: 					(yyval.istmt)->override = (yyvsp[(2) - (4)].override);
16682: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16683: 				;}
16684:     break;
16685: 
16686:   case 126:
16687: #line 35 "third_party/libpg_query/grammar/statements/insert.y"
16688:     {
16689: 					(yyval.istmt) = makeNode(PGInsertStmt);
16690: 					(yyval.istmt)->cols = (yyvsp[(2) - (4)].list);
16691: 					(yyval.istmt)->selectStmt = (yyvsp[(4) - (4)].node);
16692: 				;}
16693:     break;
16694: 
16695:   case 127:
16696: #line 41 "third_party/libpg_query/grammar/statements/insert.y"
16697:     {
16698: 					(yyval.istmt) = makeNode(PGInsertStmt);
16699: 					(yyval.istmt)->cols = (yyvsp[(2) - (7)].list);
16700: 					(yyval.istmt)->override = (yyvsp[(5) - (7)].override);
16701: 					(yyval.istmt)->selectStmt = (yyvsp[(7) - (7)].node);
16702: 				;}
16703:     break;
16704: 
16705:   case 128:
16706: #line 48 "third_party/libpg_query/grammar/statements/insert.y"
16707:     {
16708: 					(yyval.istmt) = makeNode(PGInsertStmt);
16709: 					(yyval.istmt)->cols = NIL;
16710: 					(yyval.istmt)->selectStmt = NULL;
16711: 				;}
16712:     break;
16713: 
16714:   case 129:
16715: #line 58 "third_party/libpg_query/grammar/statements/insert.y"
16716:     {
16717: 					(yyval.range) = (yyvsp[(1) - (1)].range);
16718: 				;}
16719:     break;
16720: 
16721:   case 130:
16722: #line 62 "third_party/libpg_query/grammar/statements/insert.y"
16723:     {
16724: 					(yyvsp[(1) - (3)].range)->alias = makeAlias((yyvsp[(3) - (3)].str), NIL);
16725: 					(yyval.range) = (yyvsp[(1) - (3)].range);
16726: 				;}
16727:     break;
16728: 
16729:   case 131:
16730: #line 71 "third_party/libpg_query/grammar/statements/insert.y"
16731:     {
16732: 					(yyval.infer) = makeNode(PGInferClause);
16733: 					(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);
16734: 					(yyval.infer)->whereClause = (yyvsp[(4) - (4)].node);
16735: 					(yyval.infer)->conname = NULL;
16736: 					(yyval.infer)->location = (yylsp[(1) - (4)]);
16737: 				;}
16738:     break;
16739: 
16740:   case 132:
16741: #line 80 "third_party/libpg_query/grammar/statements/insert.y"
16742:     {
16743: 					(yyval.infer) = makeNode(PGInferClause);
16744: 					(yyval.infer)->indexElems = NIL;
16745: 					(yyval.infer)->whereClause = NULL;
16746: 					(yyval.infer)->conname = (yyvsp[(3) - (3)].str);
16747: 					(yyval.infer)->location = (yylsp[(1) - (3)]);
16748: 				;}
16749:     break;
16750: 
16751:   case 133:
16752: #line 88 "third_party/libpg_query/grammar/statements/insert.y"
16753:     {
16754: 					(yyval.infer) = NULL;
16755: 				;}
16756:     break;
16757: 
16758:   case 134:
16759: #line 95 "third_party/libpg_query/grammar/statements/insert.y"
16760:     { (yyval.with) = (yyvsp[(1) - (1)].with); ;}
16761:     break;
16762: 
16763:   case 135:
16764: #line 96 "third_party/libpg_query/grammar/statements/insert.y"
16765:     { (yyval.with) = NULL; ;}
16766:     break;
16767: 
16768:   case 136:
16769: #line 102 "third_party/libpg_query/grammar/statements/insert.y"
16770:     {
16771: 					(yyval.target) = makeNode(PGResTarget);
16772: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16773: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16774: 					(yyval.target)->val = NULL;
16775: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16776: 				;}
16777:     break;
16778: 
16779:   case 137:
16780: #line 114 "third_party/libpg_query/grammar/statements/insert.y"
16781:     {
16782: 					(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);
16783: 					(yyval.list) = list_make1((yyvsp[(1) - (3)].target));
16784: 				;}
16785:     break;
16786: 
16787:   case 138:
16788: #line 119 "third_party/libpg_query/grammar/statements/insert.y"
16789:     {
16790: 					int ncolumns = list_length((yyvsp[(2) - (5)].list));
16791: 					int i = 1;
16792: 					PGListCell *col_cell;
16793: 
16794: 					/* Create a PGMultiAssignRef source for each target */
16795: 					foreach(col_cell, (yyvsp[(2) - (5)].list))
16796: 					{
16797: 						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
16798: 						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);
16799: 
16800: 						r->source = (PGNode *) (yyvsp[(5) - (5)].node);
16801: 						r->colno = i;
16802: 						r->ncolumns = ncolumns;
16803: 						res_col->val = (PGNode *) r;
16804: 						i++;
16805: 					}
16806: 
16807: 					(yyval.list) = (yyvsp[(2) - (5)].list);
16808: 				;}
16809:     break;
16810: 
16811:   case 139:
16812: #line 144 "third_party/libpg_query/grammar/statements/insert.y"
16813:     {
16814: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16815: 					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
16816: 					(yyval.onconflict)->infer = (yyvsp[(3) - (8)].infer);
16817: 					(yyval.onconflict)->targetList = (yyvsp[(7) - (8)].list);
16818: 					(yyval.onconflict)->whereClause = (yyvsp[(8) - (8)].node);
16819: 					(yyval.onconflict)->location = (yylsp[(1) - (8)]);
16820: 				;}
16821:     break;
16822: 
16823:   case 140:
16824: #line 154 "third_party/libpg_query/grammar/statements/insert.y"
16825:     {
16826: 					(yyval.onconflict) = makeNode(PGOnConflictClause);
16827: 					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
16828: 					(yyval.onconflict)->infer = (yyvsp[(3) - (5)].infer);
16829: 					(yyval.onconflict)->targetList = NIL;
16830: 					(yyval.onconflict)->whereClause = NULL;
16831: 					(yyval.onconflict)->location = (yylsp[(1) - (5)]);
16832: 				;}
16833:     break;
16834: 
16835:   case 141:
16836: #line 163 "third_party/libpg_query/grammar/statements/insert.y"
16837:     {
16838: 					(yyval.onconflict) = NULL;
16839: 				;}
16840:     break;
16841: 
16842:   case 142:
16843: #line 170 "third_party/libpg_query/grammar/statements/insert.y"
16844:     {
16845: 					(yyval.ielem) = makeNode(PGIndexElem);
16846: 					(yyval.ielem)->name = (yyvsp[(1) - (5)].str);
16847: 					(yyval.ielem)->expr = NULL;
16848: 					(yyval.ielem)->indexcolname = NULL;
16849: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16850: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16851: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16852: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16853: 				;}
16854:     break;
16855: 
16856:   case 143:
16857: #line 181 "third_party/libpg_query/grammar/statements/insert.y"
16858:     {
16859: 					(yyval.ielem) = makeNode(PGIndexElem);
16860: 					(yyval.ielem)->name = NULL;
16861: 					(yyval.ielem)->expr = (yyvsp[(1) - (5)].node);
16862: 					(yyval.ielem)->indexcolname = NULL;
16863: 					(yyval.ielem)->collation = (yyvsp[(2) - (5)].list);
16864: 					(yyval.ielem)->opclass = (yyvsp[(3) - (5)].list);
16865: 					(yyval.ielem)->ordering = (yyvsp[(4) - (5)].sortorder);
16866: 					(yyval.ielem)->nulls_ordering = (yyvsp[(5) - (5)].nullorder);
16867: 				;}
16868:     break;
16869: 
16870:   case 144:
16871: #line 192 "third_party/libpg_query/grammar/statements/insert.y"
16872:     {
16873: 					(yyval.ielem) = makeNode(PGIndexElem);
16874: 					(yyval.ielem)->name = NULL;
16875: 					(yyval.ielem)->expr = (yyvsp[(2) - (7)].node);
16876: 					(yyval.ielem)->indexcolname = NULL;
16877: 					(yyval.ielem)->collation = (yyvsp[(4) - (7)].list);
16878: 					(yyval.ielem)->opclass = (yyvsp[(5) - (7)].list);
16879: 					(yyval.ielem)->ordering = (yyvsp[(6) - (7)].sortorder);
16880: 					(yyval.ielem)->nulls_ordering = (yyvsp[(7) - (7)].nullorder);
16881: 				;}
16882:     break;
16883: 
16884:   case 145:
16885: #line 206 "third_party/libpg_query/grammar/statements/insert.y"
16886:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16887:     break;
16888: 
16889:   case 146:
16890: #line 207 "third_party/libpg_query/grammar/statements/insert.y"
16891:     { (yyval.list) = NIL; ;}
16892:     break;
16893: 
16894:   case 147:
16895: #line 213 "third_party/libpg_query/grammar/statements/insert.y"
16896:     { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}
16897:     break;
16898: 
16899:   case 148:
16900: #line 214 "third_party/libpg_query/grammar/statements/insert.y"
16901:     { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}
16902:     break;
16903: 
16904:   case 149:
16905: #line 219 "third_party/libpg_query/grammar/statements/insert.y"
16906:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16907:     break;
16908: 
16909:   case 150:
16910: #line 220 "third_party/libpg_query/grammar/statements/insert.y"
16911:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}
16912:     break;
16913: 
16914:   case 151:
16915: #line 226 "third_party/libpg_query/grammar/statements/insert.y"
16916:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
16917:     break;
16918: 
16919:   case 152:
16920: #line 227 "third_party/libpg_query/grammar/statements/insert.y"
16921:     { (yyval.list) = NIL; ;}
16922:     break;
16923: 
16924:   case 153:
16925: #line 231 "third_party/libpg_query/grammar/statements/insert.y"
16926:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16927:     break;
16928: 
16929:   case 154:
16930: #line 232 "third_party/libpg_query/grammar/statements/insert.y"
16931:     { (yyval.list) = NIL; ;}
16932:     break;
16933: 
16934:   case 155:
16935: #line 238 "third_party/libpg_query/grammar/statements/insert.y"
16936:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
16937:     break;
16938: 
16939:   case 156:
16940: #line 240 "third_party/libpg_query/grammar/statements/insert.y"
16941:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
16942:     break;
16943: 
16944:   case 157:
16945: #line 245 "third_party/libpg_query/grammar/statements/insert.y"
16946:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16947:     break;
16948: 
16949:   case 158:
16950: #line 246 "third_party/libpg_query/grammar/statements/insert.y"
16951:     { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}
16952:     break;
16953: 
16954:   case 159:
16955: #line 250 "third_party/libpg_query/grammar/statements/insert.y"
16956:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
16957:     break;
16958: 
16959:   case 160:
16960: #line 251 "third_party/libpg_query/grammar/statements/insert.y"
16961:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
16962:     break;
16963: 
16964:   case 161:
16965: #line 254 "third_party/libpg_query/grammar/statements/insert.y"
16966:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}
16967:     break;
16968: 
16969:   case 162:
16970: #line 255 "third_party/libpg_query/grammar/statements/insert.y"
16971:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}
16972:     break;
16973: 
16974:   case 163:
16975: #line 261 "third_party/libpg_query/grammar/statements/insert.y"
16976:     {
16977: 					(yyval.target) = makeNode(PGResTarget);
16978: 					(yyval.target)->name = (yyvsp[(1) - (2)].str);
16979: 					(yyval.target)->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
16980: 					(yyval.target)->val = NULL;	/* upper production sets this */
16981: 					(yyval.target)->location = (yylsp[(1) - (2)]);
16982: 				;}
16983:     break;
16984: 
16985:   case 164:
16986: #line 8 "third_party/libpg_query/grammar/statements/pragma.y"
16987:     {
16988: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
16989: 					n->kind = PG_PRAGMA_TYPE_NOTHING;
16990: 					n->name = (yyvsp[(2) - (2)].str);
16991: 					(yyval.node) = (PGNode *)n;
16992: 				;}
16993:     break;
16994: 
16995:   case 165:
16996: #line 15 "third_party/libpg_query/grammar/statements/pragma.y"
16997:     {
16998: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
16999: 					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
17000: 					n->name = (yyvsp[(2) - (4)].str);
17001: 					n->args = (yyvsp[(4) - (4)].list);
17002: 					(yyval.node) = (PGNode *)n;
17003: 				;}
17004:     break;
17005: 
17006:   case 166:
17007: #line 23 "third_party/libpg_query/grammar/statements/pragma.y"
17008:     {
17009: 					PGPragmaStmt *n = makeNode(PGPragmaStmt);
17010: 					n->kind = PG_PRAGMA_TYPE_CALL;
17011: 					n->name = (yyvsp[(2) - (5)].str);
17012: 					n->args = (yyvsp[(4) - (5)].list);
17013: 					(yyval.node) = (PGNode *)n;
17014: 				;}
17015:     break;
17016: 
17017:   case 167:
17018: #line 10 "third_party/libpg_query/grammar/statements/create_sequence.y"
17019:     {
17020: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
17021: 					(yyvsp[(4) - (5)].range)->relpersistence = (yyvsp[(2) - (5)].ival);
17022: 					n->sequence = (yyvsp[(4) - (5)].range);
17023: 					n->options = (yyvsp[(5) - (5)].list);
17024: 					n->ownerId = InvalidOid;
17025: 					n->onconflict = PG_ERROR_ON_CONFLICT;
17026: 					(yyval.node) = (PGNode *)n;
17027: 				;}
17028:     break;
17029: 
17030:   case 168:
17031: #line 20 "third_party/libpg_query/grammar/statements/create_sequence.y"
17032:     {
17033: 					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
17034: 					(yyvsp[(7) - (8)].range)->relpersistence = (yyvsp[(2) - (8)].ival);
17035: 					n->sequence = (yyvsp[(7) - (8)].range);
17036: 					n->options = (yyvsp[(8) - (8)].list);
17037: 					n->ownerId = InvalidOid;
17038: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
17039: 					(yyval.node) = (PGNode *)n;
17040: 				;}
17041:     break;
17042: 
17043:   case 169:
17044: #line 32 "third_party/libpg_query/grammar/statements/create_sequence.y"
17045:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
17046:     break;
17047: 
17048:   case 170:
17049: #line 33 "third_party/libpg_query/grammar/statements/create_sequence.y"
17050:     { (yyval.list) = NIL; ;}
17051:     break;
17052: 
17053:   case 171:
17054: #line 8 "third_party/libpg_query/grammar/statements/execute.y"
17055:     {
17056: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17057: 					n->name = (yyvsp[(2) - (3)].str);
17058: 					n->params = (yyvsp[(3) - (3)].list);
17059: 					(yyval.node) = (PGNode *) n;
17060: 				;}
17061:     break;
17062: 
17063:   case 172:
17064: #line 16 "third_party/libpg_query/grammar/statements/execute.y"
17065:     {
17066: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
17067: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17068: 					n->name = (yyvsp[(7) - (9)].str);
17069: 					n->params = (yyvsp[(8) - (9)].list);
17070: 					ctas->query = (PGNode *) n;
17071: 					ctas->into = (yyvsp[(4) - (9)].into);
17072: 					ctas->relkind = PG_OBJECT_TABLE;
17073: 					ctas->is_select_into = false;
17074: 					ctas->onconflict = PG_ERROR_ON_CONFLICT;
17075: 					/* cram additional flags into the PGIntoClause */
17076: 					(yyvsp[(4) - (9)].into)->rel->relpersistence = (yyvsp[(2) - (9)].ival);
17077: 					(yyvsp[(4) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
17078: 					(yyval.node) = (PGNode *) ctas;
17079: 				;}
17080:     break;
17081: 
17082:   case 173:
17083: #line 33 "third_party/libpg_query/grammar/statements/execute.y"
17084:     {
17085: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
17086: 					PGExecuteStmt *n = makeNode(PGExecuteStmt);
17087: 					n->name = (yyvsp[(10) - (12)].str);
17088: 					n->params = (yyvsp[(11) - (12)].list);
17089: 					ctas->query = (PGNode *) n;
17090: 					ctas->into = (yyvsp[(7) - (12)].into);
17091: 					ctas->relkind = PG_OBJECT_TABLE;
17092: 					ctas->is_select_into = false;
17093: 					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
17094: 					/* cram additional flags into the PGIntoClause */
17095: 					(yyvsp[(7) - (12)].into)->rel->relpersistence = (yyvsp[(2) - (12)].ival);
17096: 					(yyvsp[(7) - (12)].into)->skipData = !((yyvsp[(12) - (12)].boolean));
17097: 					(yyval.node) = (PGNode *) ctas;
17098: 				;}
17099:     break;
17100: 
17101:   case 174:
17102: #line 51 "third_party/libpg_query/grammar/statements/execute.y"
17103:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17104:     break;
17105: 
17106:   case 175:
17107: #line 52 "third_party/libpg_query/grammar/statements/execute.y"
17108:     { (yyval.list) = NIL; ;}
17109:     break;
17110: 
17111:   case 176:
17112: #line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17113:     {
17114: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
17115: 					n->sequence = (yyvsp[(3) - (4)].range);
17116: 					n->options = (yyvsp[(4) - (4)].list);
17117: 					n->missing_ok = false;
17118: 					(yyval.node) = (PGNode *)n;
17119: 				;}
17120:     break;
17121: 
17122:   case 177:
17123: #line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17124:     {
17125: 					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
17126: 					n->sequence = (yyvsp[(5) - (6)].range);
17127: 					n->options = (yyvsp[(6) - (6)].list);
17128: 					n->missing_ok = true;
17129: 					(yyval.node) = (PGNode *)n;
17130: 				;}
17131:     break;
17132: 
17133:   case 178:
17134: #line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17135:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17136:     break;
17137: 
17138:   case 179:
17139: #line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17140:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
17141:     break;
17142: 
17143:   case 180:
17144: #line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17145:     {;}
17146:     break;
17147: 
17148:   case 181:
17149: #line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17150:     {;}
17151:     break;
17152: 
17153:   case 182:
17154: #line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17155:     {;}
17156:     break;
17157: 
17158:   case 183:
17159: #line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17160:     { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}
17161:     break;
17162: 
17163:   case 184:
17164: #line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17165:     { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}
17166:     break;
17167: 
17168:   case 185:
17169: #line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17170:     {
17171: 					(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));
17172: 					doNegateFloat((yyval.value));
17173: 				;}
17174:     break;
17175: 
17176:   case 186:
17177: #line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17178:     { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}
17179:     break;
17180: 
17181:   case 187:
17182: #line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17183:     {
17184: 					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));
17185: 				;}
17186:     break;
17187: 
17188:   case 188:
17189: #line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17190:     {
17191: 					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17192: 				;}
17193:     break;
17194: 
17195:   case 189:
17196: #line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17197:     {
17198: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
17199: 				;}
17200:     break;
17201: 
17202:   case 190:
17203: #line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17204:     {
17205: 					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));
17206: 				;}
17207:     break;
17208: 
17209:   case 191:
17210: #line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17211:     {
17212: 					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17213: 				;}
17214:     break;
17215: 
17216:   case 192:
17217: #line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17218:     {
17219: 					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17220: 				;}
17221:     break;
17222: 
17223:   case 193:
17224: #line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17225:     {
17226: 					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));
17227: 				;}
17228:     break;
17229: 
17230:   case 194:
17231: #line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17232:     {
17233: 					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[(1) - (2)]));
17234: 				;}
17235:     break;
17236: 
17237:   case 195:
17238: #line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17239:     {
17240: 					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[(1) - (2)]));
17241: 				;}
17242:     break;
17243: 
17244:   case 196:
17245: #line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17246:     {
17247: 					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17248: 				;}
17249:     break;
17250: 
17251:   case 197:
17252: #line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17253:     {
17254: 					/* not documented, only used by pg_dump */
17255: 					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
17256: 				;}
17257:     break;
17258: 
17259:   case 198:
17260: #line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17261:     {
17262: 					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17263: 				;}
17264:     break;
17265: 
17266:   case 199:
17267: #line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17268:     {
17269: 					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[(1) - (1)]));
17270: 				;}
17271:     break;
17272: 
17273:   case 200:
17274: #line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17275:     {
17276: 					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));
17277: 				;}
17278:     break;
17279: 
17280:   case 201:
17281: #line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17282:     {;}
17283:     break;
17284: 
17285:   case 202:
17286: #line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17287:     {;}
17288:     break;
17289: 
17290:   case 203:
17291: #line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17292:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
17293:     break;
17294: 
17295:   case 204:
17296: #line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17297:     { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}
17298:     break;
17299: 
17300:   case 205:
17301: #line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y"
17302:     { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}
17303:     break;
17304: 
17305:   case 206:
17306: #line 3 "third_party/libpg_query/grammar/statements/transaction.y"
17307:     {
17308: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17309: 					n->kind = PG_TRANS_STMT_ROLLBACK;
17310: 					n->options = NIL;
17311: 					(yyval.node) = (PGNode *)n;
17312: 				;}
17313:     break;
17314: 
17315:   case 207:
17316: #line 10 "third_party/libpg_query/grammar/statements/transaction.y"
17317:     {
17318: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17319: 					n->kind = PG_TRANS_STMT_BEGIN;
17320: 					(yyval.node) = (PGNode *)n;
17321: 				;}
17322:     break;
17323: 
17324:   case 208:
17325: #line 16 "third_party/libpg_query/grammar/statements/transaction.y"
17326:     {
17327: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17328: 					n->kind = PG_TRANS_STMT_START;
17329: 					(yyval.node) = (PGNode *)n;
17330: 				;}
17331:     break;
17332: 
17333:   case 209:
17334: #line 22 "third_party/libpg_query/grammar/statements/transaction.y"
17335:     {
17336: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17337: 					n->kind = PG_TRANS_STMT_COMMIT;
17338: 					n->options = NIL;
17339: 					(yyval.node) = (PGNode *)n;
17340: 				;}
17341:     break;
17342: 
17343:   case 210:
17344: #line 29 "third_party/libpg_query/grammar/statements/transaction.y"
17345:     {
17346: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17347: 					n->kind = PG_TRANS_STMT_COMMIT;
17348: 					n->options = NIL;
17349: 					(yyval.node) = (PGNode *)n;
17350: 				;}
17351:     break;
17352: 
17353:   case 211:
17354: #line 36 "third_party/libpg_query/grammar/statements/transaction.y"
17355:     {
17356: 					PGTransactionStmt *n = makeNode(PGTransactionStmt);
17357: 					n->kind = PG_TRANS_STMT_ROLLBACK;
17358: 					n->options = NIL;
17359: 					(yyval.node) = (PGNode *)n;
17360: 				;}
17361:     break;
17362: 
17363:   case 212:
17364: #line 45 "third_party/libpg_query/grammar/statements/transaction.y"
17365:     {;}
17366:     break;
17367: 
17368:   case 213:
17369: #line 46 "third_party/libpg_query/grammar/statements/transaction.y"
17370:     {;}
17371:     break;
17372: 
17373:   case 214:
17374: #line 47 "third_party/libpg_query/grammar/statements/transaction.y"
17375:     {;}
17376:     break;
17377: 
17378:   case 215:
17379: #line 9 "third_party/libpg_query/grammar/statements/create.y"
17380:     {
17381: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17382: 					(yyvsp[(4) - (9)].range)->relpersistence = (yyvsp[(2) - (9)].ival);
17383: 					n->relation = (yyvsp[(4) - (9)].range);
17384: 					n->tableElts = (yyvsp[(6) - (9)].list);
17385: 					n->ofTypename = NULL;
17386: 					n->constraints = NIL;
17387: 					n->options = (yyvsp[(8) - (9)].list);
17388: 					n->oncommit = (yyvsp[(9) - (9)].oncommit);
17389: 					n->onconflict = PG_ERROR_ON_CONFLICT;
17390: 					(yyval.node) = (PGNode *)n;
17391: 				;}
17392:     break;
17393: 
17394:   case 216:
17395: #line 24 "third_party/libpg_query/grammar/statements/create.y"
17396:     {
17397: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17398: 					(yyvsp[(7) - (12)].range)->relpersistence = (yyvsp[(2) - (12)].ival);
17399: 					n->relation = (yyvsp[(7) - (12)].range);
17400: 					n->tableElts = (yyvsp[(9) - (12)].list);
17401: 					n->ofTypename = NULL;
17402: 					n->constraints = NIL;
17403: 					n->options = (yyvsp[(11) - (12)].list);
17404: 					n->oncommit = (yyvsp[(12) - (12)].oncommit);
17405: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
17406: 					(yyval.node) = (PGNode *)n;
17407: 				;}
17408:     break;
17409: 
17410:   case 217:
17411: #line 39 "third_party/libpg_query/grammar/statements/create.y"
17412:     {
17413: 					PGCreateStmt *n = makeNode(PGCreateStmt);
17414: 					(yyvsp[(6) - (11)].range)->relpersistence = (yyvsp[(4) - (11)].ival);
17415: 					n->relation = (yyvsp[(6) - (11)].range);
17416: 					n->tableElts = (yyvsp[(8) - (11)].list);
17417: 					n->ofTypename = NULL;
17418: 					n->constraints = NIL;
17419: 					n->options = (yyvsp[(10) - (11)].list);
17420: 					n->oncommit = (yyvsp[(11) - (11)].oncommit);
17421: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
17422: 					(yyval.node) = (PGNode *)n;
17423: 				;}
17424:     break;
17425: 
17426:   case 218:
17427: #line 56 "third_party/libpg_query/grammar/statements/create.y"
17428:     { (yyval.ival) = 0; ;}
17429:     break;
17430: 
17431:   case 219:
17432: #line 58 "third_party/libpg_query/grammar/statements/create.y"
17433:     {
17434: 					/*
17435: 					 * We must complain about conflicting options.
17436: 					 * We could, but choose not to, complain about redundant
17437: 					 * options (ie, where $2's bit is already set in $1).
17438: 					 */
17439: 					int		newspec = (yyvsp[(1) - (2)].ival) | (yyvsp[(2) - (2)].ival);
17440: 
17441: 					/* special message for this case */
17442: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
17443: 						ereport(ERROR,
17444: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17445: 								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
17446: 								 parser_errposition((yylsp[(2) - (2)]))));
17447: 					/* generic message for other conflicts */
17448: 					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
17449: 						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
17450: 						ereport(ERROR,
17451: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
17452: 								 errmsg("conflicting constraint properties"),
17453: 								 parser_errposition((yylsp[(2) - (2)]))));
17454: 					(yyval.ival) = newspec;
17455: 				;}
17456:     break;
17457: 
17458:   case 220:
17459: #line 84 "third_party/libpg_query/grammar/statements/create.y"
17460:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}
17461:     break;
17462: 
17463:   case 221:
17464: #line 85 "third_party/libpg_query/grammar/statements/create.y"
17465:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
17466:     break;
17467: 
17468:   case 222:
17469: #line 86 "third_party/libpg_query/grammar/statements/create.y"
17470:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}
17471:     break;
17472: 
17473:   case 223:
17474: #line 87 "third_party/libpg_query/grammar/statements/create.y"
17475:     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}
17476:     break;
17477: 
17478:   case 224:
17479: #line 88 "third_party/libpg_query/grammar/statements/create.y"
17480:     { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}
17481:     break;
17482: 
17483:   case 225:
17484: #line 89 "third_party/libpg_query/grammar/statements/create.y"
17485:     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}
17486:     break;
17487: 
17488:   case 226:
17489: #line 93 "third_party/libpg_query/grammar/statements/create.y"
17490:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17491:     break;
17492: 
17493:   case 227:
17494: #line 94 "third_party/libpg_query/grammar/statements/create.y"
17495:     { (yyval.list) = NIL; ;}
17496:     break;
17497: 
17498:   case 228:
17499: #line 99 "third_party/libpg_query/grammar/statements/create.y"
17500:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
17501:     break;
17502: 
17503:   case 229:
17504: #line 104 "third_party/libpg_query/grammar/statements/create.y"
17505:     { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}
17506:     break;
17507: 
17508:   case 230:
17509: #line 105 "third_party/libpg_query/grammar/statements/create.y"
17510:     { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}
17511:     break;
17512: 
17513:   case 231:
17514: #line 106 "third_party/libpg_query/grammar/statements/create.y"
17515:     { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}
17516:     break;
17517: 
17518:   case 232:
17519: #line 107 "third_party/libpg_query/grammar/statements/create.y"
17520:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}
17521:     break;
17522: 
17523:   case 233:
17524: #line 108 "third_party/libpg_query/grammar/statements/create.y"
17525:     { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}
17526:     break;
17527: 
17528:   case 234:
17529: #line 114 "third_party/libpg_query/grammar/statements/create.y"
17530:     {
17531: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
17532: 					n->conname = (yyvsp[(2) - (3)].str);
17533: 					n->location = (yylsp[(1) - (3)]);
17534: 					(yyval.node) = (PGNode *) n;
17535: 				;}
17536:     break;
17537: 
17538:   case 235:
17539: #line 120 "third_party/libpg_query/grammar/statements/create.y"
17540:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17541:     break;
17542: 
17543:   case 236:
17544: #line 121 "third_party/libpg_query/grammar/statements/create.y"
17545:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17546:     break;
17547: 
17548:   case 237:
17549: #line 123 "third_party/libpg_query/grammar/statements/create.y"
17550:     {
17551: 					/*
17552: 					 * Note: the PGCollateClause is momentarily included in
17553: 					 * the list built by ColQualList, but we split it out
17554: 					 * again in SplitColQualList.
17555: 					 */
17556: 					PGCollateClause *n = makeNode(PGCollateClause);
17557: 					n->arg = NULL;
17558: 					n->collname = (yyvsp[(2) - (2)].list);
17559: 					n->location = (yylsp[(1) - (2)]);
17560: 					(yyval.node) = (PGNode *) n;
17561: 				;}
17562:     break;
17563: 
17564:   case 238:
17565: #line 140 "third_party/libpg_query/grammar/statements/create.y"
17566:     {
17567: 					PGConstraint *n = makeNode(PGConstraint);
17568: 					n->contype = PG_CONSTR_NOTNULL;
17569: 					n->location = (yylsp[(1) - (2)]);
17570: 					(yyval.node) = (PGNode *)n;
17571: 				;}
17572:     break;
17573: 
17574:   case 239:
17575: #line 147 "third_party/libpg_query/grammar/statements/create.y"
17576:     {
17577: 					PGConstraint *n = makeNode(PGConstraint);
17578: 					n->contype = PG_CONSTR_NULL;
17579: 					n->location = (yylsp[(1) - (1)]);
17580: 					(yyval.node) = (PGNode *)n;
17581: 				;}
17582:     break;
17583: 
17584:   case 240:
17585: #line 154 "third_party/libpg_query/grammar/statements/create.y"
17586:     {
17587: 					PGConstraint *n = makeNode(PGConstraint);
17588: 					n->contype = PG_CONSTR_UNIQUE;
17589: 					n->location = (yylsp[(1) - (2)]);
17590: 					n->keys = NULL;
17591: 					n->options = (yyvsp[(2) - (2)].list);
17592: 					n->indexname = NULL;
17593: 					(yyval.node) = (PGNode *)n;
17594: 				;}
17595:     break;
17596: 
17597:   case 241:
17598: #line 164 "third_party/libpg_query/grammar/statements/create.y"
17599:     {
17600: 					PGConstraint *n = makeNode(PGConstraint);
17601: 					n->contype = PG_CONSTR_PRIMARY;
17602: 					n->location = (yylsp[(1) - (3)]);
17603: 					n->keys = NULL;
17604: 					n->options = (yyvsp[(3) - (3)].list);
17605: 					n->indexname = NULL;
17606: 					(yyval.node) = (PGNode *)n;
17607: 				;}
17608:     break;
17609: 
17610:   case 242:
17611: #line 174 "third_party/libpg_query/grammar/statements/create.y"
17612:     {
17613: 					PGConstraint *n = makeNode(PGConstraint);
17614: 					n->contype = PG_CONSTR_CHECK;
17615: 					n->location = (yylsp[(1) - (5)]);
17616: 					n->is_no_inherit = (yyvsp[(5) - (5)].boolean);
17617: 					n->raw_expr = (yyvsp[(3) - (5)].node);
17618: 					n->cooked_expr = NULL;
17619: 					n->skip_validation = false;
17620: 					n->initially_valid = true;
17621: 					(yyval.node) = (PGNode *)n;
17622: 				;}
17623:     break;
17624: 
17625:   case 243:
17626: #line 186 "third_party/libpg_query/grammar/statements/create.y"
17627:     {
17628: 					PGConstraint *n = makeNode(PGConstraint);
17629: 					n->contype = PG_CONSTR_COMPRESSION;
17630: 					n->location = (yylsp[(1) - (3)]);
17631: 					n->compression_name = (yyvsp[(3) - (3)].str);
17632: 					(yyval.node) = (PGNode *)n;
17633: 				;}
17634:     break;
17635: 
17636:   case 244:
17637: #line 194 "third_party/libpg_query/grammar/statements/create.y"
17638:     {
17639: 					PGConstraint *n = makeNode(PGConstraint);
17640: 					n->contype = PG_CONSTR_DEFAULT;
17641: 					n->location = (yylsp[(1) - (2)]);
17642: 					n->raw_expr = (yyvsp[(2) - (2)].node);
17643: 					n->cooked_expr = NULL;
17644: 					(yyval.node) = (PGNode *)n;
17645: 				;}
17646:     break;
17647: 
17648:   case 245:
17649: #line 203 "third_party/libpg_query/grammar/statements/create.y"
17650:     {
17651: 					PGConstraint *n = makeNode(PGConstraint);
17652: 					n->contype = PG_CONSTR_IDENTITY;
17653: 					n->generated_when = (yyvsp[(2) - (5)].ival);
17654: 					n->options = (yyvsp[(5) - (5)].list);
17655: 					n->location = (yylsp[(1) - (5)]);
17656: 					(yyval.node) = (PGNode *)n;
17657: 				;}
17658:     break;
17659: 
17660:   case 246:
17661: #line 212 "third_party/libpg_query/grammar/statements/create.y"
17662:     {
17663: 					PGConstraint *n = makeNode(PGConstraint);
17664: 					n->contype = PG_CONSTR_FOREIGN;
17665: 					n->location = (yylsp[(1) - (5)]);
17666: 					n->pktable			= (yyvsp[(2) - (5)].range);
17667: 					n->fk_attrs			= NIL;
17668: 					n->pk_attrs			= (yyvsp[(3) - (5)].list);
17669: 					n->fk_matchtype		= (yyvsp[(4) - (5)].ival);
17670: 					n->fk_upd_action	= (char) ((yyvsp[(5) - (5)].ival) >> 8);
17671: 					n->fk_del_action	= (char) ((yyvsp[(5) - (5)].ival) & 0xFF);
17672: 					n->skip_validation  = false;
17673: 					n->initially_valid  = true;
17674: 					(yyval.node) = (PGNode *)n;
17675: 				;}
17676:     break;
17677: 
17678:   case 247:
17679: #line 231 "third_party/libpg_query/grammar/statements/create.y"
17680:     {
17681: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
17682: 				;}
17683:     break;
17684: 
17685:   case 248:
17686: #line 237 "third_party/libpg_query/grammar/statements/create.y"
17687:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
17688:     break;
17689: 
17690:   case 249:
17691: #line 243 "third_party/libpg_query/grammar/statements/create.y"
17692:     { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
17693:     break;
17694: 
17695:   case 250:
17696: #line 245 "third_party/libpg_query/grammar/statements/create.y"
17697:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}
17698:     break;
17699: 
17700:   case 251:
17701: #line 247 "third_party/libpg_query/grammar/statements/create.y"
17702:     { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}
17703:     break;
17704: 
17705:   case 252:
17706: #line 249 "third_party/libpg_query/grammar/statements/create.y"
17707:     { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}
17708:     break;
17709: 
17710:   case 253:
17711: #line 251 "third_party/libpg_query/grammar/statements/create.y"
17712:     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}
17713:     break;
17714: 
17715:   case 254:
17716: #line 256 "third_party/libpg_query/grammar/statements/create.y"
17717:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
17718:     break;
17719: 
17720:   case 255:
17721: #line 257 "third_party/libpg_query/grammar/statements/create.y"
17722:     { (yyval.list) = NIL; ;}
17723:     break;
17724: 
17725:   case 256:
17726: #line 261 "third_party/libpg_query/grammar/statements/create.y"
17727:     { (yyval.oncommit) = ONCOMMIT_DROP; ;}
17728:     break;
17729: 
17730:   case 257:
17731: #line 262 "third_party/libpg_query/grammar/statements/create.y"
17732:     { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}
17733:     break;
17734: 
17735:   case 258:
17736: #line 263 "third_party/libpg_query/grammar/statements/create.y"
17737:     { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}
17738:     break;
17739: 
17740:   case 259:
17741: #line 264 "third_party/libpg_query/grammar/statements/create.y"
17742:     { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}
17743:     break;
17744: 
17745:   case 260:
17746: #line 269 "third_party/libpg_query/grammar/statements/create.y"
17747:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17748:     break;
17749: 
17750:   case 261:
17751: #line 273 "third_party/libpg_query/grammar/statements/create.y"
17752:     {  (yyval.boolean) = true; ;}
17753:     break;
17754: 
17755:   case 262:
17756: #line 274 "third_party/libpg_query/grammar/statements/create.y"
17757:     {  (yyval.boolean) = false; ;}
17758:     break;
17759: 
17760:   case 263:
17761: #line 280 "third_party/libpg_query/grammar/statements/create.y"
17762:     {
17763: 					PGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));
17764: 					n->conname = (yyvsp[(2) - (3)].str);
17765: 					n->location = (yylsp[(1) - (3)]);
17766: 					(yyval.node) = (PGNode *) n;
17767: 				;}
17768:     break;
17769: 
17770:   case 264:
17771: #line 286 "third_party/libpg_query/grammar/statements/create.y"
17772:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17773:     break;
17774: 
17775:   case 265:
17776: #line 291 "third_party/libpg_query/grammar/statements/create.y"
17777:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}
17778:     break;
17779: 
17780:   case 266:
17781: #line 292 "third_party/libpg_query/grammar/statements/create.y"
17782:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}
17783:     break;
17784: 
17785:   case 267:
17786: #line 293 "third_party/libpg_query/grammar/statements/create.y"
17787:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}
17788:     break;
17789: 
17790:   case 268:
17791: #line 294 "third_party/libpg_query/grammar/statements/create.y"
17792:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}
17793:     break;
17794: 
17795:   case 269:
17796: #line 295 "third_party/libpg_query/grammar/statements/create.y"
17797:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}
17798:     break;
17799: 
17800:   case 270:
17801: #line 296 "third_party/libpg_query/grammar/statements/create.y"
17802:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}
17803:     break;
17804: 
17805:   case 271:
17806: #line 297 "third_party/libpg_query/grammar/statements/create.y"
17807:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}
17808:     break;
17809: 
17810:   case 272:
17811: #line 298 "third_party/libpg_query/grammar/statements/create.y"
17812:     { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}
17813:     break;
17814: 
17815:   case 273:
17816: #line 304 "third_party/libpg_query/grammar/statements/create.y"
17817:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17818:     break;
17819: 
17820:   case 274:
17821: #line 305 "third_party/libpg_query/grammar/statements/create.y"
17822:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
17823:     break;
17824: 
17825:   case 275:
17826: #line 309 "third_party/libpg_query/grammar/statements/create.y"
17827:     { (yyval.str) = (yyvsp[(3) - (3)].str); ;}
17828:     break;
17829: 
17830:   case 276:
17831: #line 315 "third_party/libpg_query/grammar/statements/create.y"
17832:     {
17833: 					PGConstraint *n = makeNode(PGConstraint);
17834: 					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
17835: 					n->location = (yylsp[(1) - (1)]);
17836: 					(yyval.node) = (PGNode *)n;
17837: 				;}
17838:     break;
17839: 
17840:   case 277:
17841: #line 322 "third_party/libpg_query/grammar/statements/create.y"
17842:     {
17843: 					PGConstraint *n = makeNode(PGConstraint);
17844: 					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
17845: 					n->location = (yylsp[(1) - (2)]);
17846: 					(yyval.node) = (PGNode *)n;
17847: 				;}
17848:     break;
17849: 
17850:   case 278:
17851: #line 329 "third_party/libpg_query/grammar/statements/create.y"
17852:     {
17853: 					PGConstraint *n = makeNode(PGConstraint);
17854: 					n->contype = PG_CONSTR_ATTR_DEFERRED;
17855: 					n->location = (yylsp[(1) - (2)]);
17856: 					(yyval.node) = (PGNode *)n;
17857: 				;}
17858:     break;
17859: 
17860:   case 279:
17861: #line 336 "third_party/libpg_query/grammar/statements/create.y"
17862:     {
17863: 					PGConstraint *n = makeNode(PGConstraint);
17864: 					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
17865: 					n->location = (yylsp[(1) - (2)]);
17866: 					(yyval.node) = (PGNode *)n;
17867: 				;}
17868:     break;
17869: 
17870:   case 280:
17871: #line 347 "third_party/libpg_query/grammar/statements/create.y"
17872:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
17873:     break;
17874: 
17875:   case 281:
17876: #line 348 "third_party/libpg_query/grammar/statements/create.y"
17877:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}
17878:     break;
17879: 
17880:   case 282:
17881: #line 349 "third_party/libpg_query/grammar/statements/create.y"
17882:     { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}
17883:     break;
17884: 
17885:   case 283:
17886: #line 350 "third_party/libpg_query/grammar/statements/create.y"
17887:     { (yyval.list) = NIL; ;}
17888:     break;
17889: 
17890:   case 284:
17891: #line 354 "third_party/libpg_query/grammar/statements/create.y"
17892:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
17893:     break;
17894: 
17895:   case 285:
17896: #line 359 "third_party/libpg_query/grammar/statements/create.y"
17897:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
17898:     break;
17899: 
17900:   case 286:
17901: #line 360 "third_party/libpg_query/grammar/statements/create.y"
17902:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}
17903:     break;
17904: 
17905:   case 287:
17906: #line 361 "third_party/libpg_query/grammar/statements/create.y"
17907:     { (yyval.ival) = 0; ;}
17908:     break;
17909: 
17910:   case 288:
17911: #line 366 "third_party/libpg_query/grammar/statements/create.y"
17912:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17913:     break;
17914: 
17915:   case 289:
17916: #line 371 "third_party/libpg_query/grammar/statements/create.y"
17917:     { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}
17918:     break;
17919: 
17920:   case 290:
17921: #line 372 "third_party/libpg_query/grammar/statements/create.y"
17922:     { (yyval.ival) = CAS_DEFERRABLE; ;}
17923:     break;
17924: 
17925:   case 291:
17926: #line 373 "third_party/libpg_query/grammar/statements/create.y"
17927:     { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}
17928:     break;
17929: 
17930:   case 292:
17931: #line 374 "third_party/libpg_query/grammar/statements/create.y"
17932:     { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}
17933:     break;
17934: 
17935:   case 293:
17936: #line 375 "third_party/libpg_query/grammar/statements/create.y"
17937:     { (yyval.ival) = CAS_NOT_VALID; ;}
17938:     break;
17939: 
17940:   case 294:
17941: #line 376 "third_party/libpg_query/grammar/statements/create.y"
17942:     { (yyval.ival) = CAS_NO_INHERIT; ;}
17943:     break;
17944: 
17945:   case 295:
17946: #line 382 "third_party/libpg_query/grammar/statements/create.y"
17947:     {
17948: 					PGColumnDef *n = makeNode(PGColumnDef);
17949: 					n->colname = (yyvsp[(1) - (4)].str);
17950: 					n->typeName = (yyvsp[(2) - (4)].typnam);
17951: 					n->inhcount = 0;
17952: 					n->is_local = true;
17953: 					n->is_not_null = false;
17954: 					n->is_from_type = false;
17955: 					n->storage = 0;
17956: 					n->raw_default = NULL;
17957: 					n->cooked_default = NULL;
17958: 					n->collOid = InvalidOid;
17959: 					n->fdwoptions = (yyvsp[(3) - (4)].list);
17960: 					SplitColQualList((yyvsp[(4) - (4)].list), &n->constraints, &n->collClause,
17961: 									 yyscanner);
17962: 					n->location = (yylsp[(1) - (4)]);
17963: 					(yyval.node) = (PGNode *)n;
17964: 				;}
17965:     break;
17966: 
17967:   case 296:
17968: #line 405 "third_party/libpg_query/grammar/statements/create.y"
17969:     {
17970: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
17971: 				;}
17972:     break;
17973: 
17974:   case 297:
17975: #line 409 "third_party/libpg_query/grammar/statements/create.y"
17976:     {
17977: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
17978: 				;}
17979:     break;
17980: 
17981:   case 298:
17982: #line 415 "third_party/libpg_query/grammar/statements/create.y"
17983:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}
17984:     break;
17985: 
17986:   case 299:
17987: #line 416 "third_party/libpg_query/grammar/statements/create.y"
17988:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}
17989:     break;
17990: 
17991:   case 300:
17992: #line 420 "third_party/libpg_query/grammar/statements/create.y"
17993:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
17994:     break;
17995: 
17996:   case 301:
17997: #line 424 "third_party/libpg_query/grammar/statements/create.y"
17998:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
17999:     break;
18000: 
18001:   case 302:
18002: #line 425 "third_party/libpg_query/grammar/statements/create.y"
18003:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18004:     break;
18005: 
18006:   case 303:
18007: #line 426 "third_party/libpg_query/grammar/statements/create.y"
18008:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
18009:     break;
18010: 
18011:   case 304:
18012: #line 431 "third_party/libpg_query/grammar/statements/create.y"
18013:     {
18014: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
18015: 				;}
18016:     break;
18017: 
18018:   case 305:
18019: #line 435 "third_party/libpg_query/grammar/statements/create.y"
18020:     {
18021: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
18022: 				;}
18023:     break;
18024: 
18025:   case 306:
18026: #line 442 "third_party/libpg_query/grammar/statements/create.y"
18027:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
18028:     break;
18029: 
18030:   case 307:
18031: #line 443 "third_party/libpg_query/grammar/statements/create.y"
18032:     { (yyval.list) = NIL; ;}
18033:     break;
18034: 
18035:   case 308:
18036: #line 448 "third_party/libpg_query/grammar/statements/create.y"
18037:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18038:     break;
18039: 
18040:   case 309:
18041: #line 449 "third_party/libpg_query/grammar/statements/create.y"
18042:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
18043:     break;
18044: 
18045:   case 310:
18046: #line 450 "third_party/libpg_query/grammar/statements/create.y"
18047:     { (yyval.list) = NIL; ;}
18048:     break;
18049: 
18050:   case 311:
18051: #line 455 "third_party/libpg_query/grammar/statements/create.y"
18052:     {
18053: 					(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));
18054: 				;}
18055:     break;
18056: 
18057:   case 312:
18058: #line 462 "third_party/libpg_query/grammar/statements/create.y"
18059:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
18060:     break;
18061: 
18062:   case 313:
18063: #line 463 "third_party/libpg_query/grammar/statements/create.y"
18064:     { (yyval.list) = NIL; ;}
18065:     break;
18066: 
18067:   case 314:
18068: #line 468 "third_party/libpg_query/grammar/statements/create.y"
18069:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
18070:     break;
18071: 
18072:   case 315:
18073: #line 469 "third_party/libpg_query/grammar/statements/create.y"
18074:     { (yyval.list) = NIL; ;}
18075:     break;
18076: 
18077:   case 316:
18078: #line 473 "third_party/libpg_query/grammar/statements/create.y"
18079:     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}
18080:     break;
18081: 
18082:   case 317:
18083: #line 479 "third_party/libpg_query/grammar/statements/create.y"
18084:     {
18085: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));
18086: 				;}
18087:     break;
18088: 
18089:   case 318:
18090: #line 483 "third_party/libpg_query/grammar/statements/create.y"
18091:     {
18092: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));
18093: 				;}
18094:     break;
18095: 
18096:   case 319:
18097: #line 487 "third_party/libpg_query/grammar/statements/create.y"
18098:     {
18099: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),
18100: 											 PG_DEFELEM_UNSPEC, (yylsp[(1) - (5)]));
18101: 				;}
18102:     break;
18103: 
18104:   case 320:
18105: #line 492 "third_party/libpg_query/grammar/statements/create.y"
18106:     {
18107: 					(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));
18108: 				;}
18109:     break;
18110: 
18111:   case 321:
18112: #line 499 "third_party/libpg_query/grammar/statements/create.y"
18113:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
18114:     break;
18115: 
18116:   case 322:
18117: #line 500 "third_party/libpg_query/grammar/statements/create.y"
18118:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
18119:     break;
18120: 
18121:   case 323:
18122: #line 504 "third_party/libpg_query/grammar/statements/create.y"
18123:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18124:     break;
18125: 
18126:   case 324:
18127: #line 505 "third_party/libpg_query/grammar/statements/create.y"
18128:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
18129:     break;
18130: 
18131:   case 325:
18132: #line 509 "third_party/libpg_query/grammar/statements/create.y"
18133:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
18134:     break;
18135: 
18136:   case 326:
18137: #line 511 "third_party/libpg_query/grammar/statements/create.y"
18138:     {
18139: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));
18140: 					(yyval.typnam)->pct_type = true;
18141: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
18142: 				;}
18143:     break;
18144: 
18145:   case 327:
18146: #line 517 "third_party/libpg_query/grammar/statements/create.y"
18147:     {
18148: 					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));
18149: 					(yyval.typnam)->pct_type = true;
18150: 					(yyval.typnam)->setof = true;
18151: 					(yyval.typnam)->location = (yylsp[(2) - (5)]);
18152: 				;}
18153:     break;
18154: 
18155:   case 328:
18156: #line 528 "third_party/libpg_query/grammar/statements/create.y"
18157:     {
18158: 					PGConstraint *n = makeNode(PGConstraint);
18159: 					n->contype = PG_CONSTR_CHECK;
18160: 					n->location = (yylsp[(1) - (5)]);
18161: 					n->raw_expr = (yyvsp[(3) - (5)].node);
18162: 					n->cooked_expr = NULL;
18163: 					processCASbits((yyvsp[(5) - (5)].ival), (yylsp[(5) - (5)]), "CHECK",
18164: 								   NULL, NULL, &n->skip_validation,
18165: 								   &n->is_no_inherit, yyscanner);
18166: 					n->initially_valid = !n->skip_validation;
18167: 					(yyval.node) = (PGNode *)n;
18168: 				;}
18169:     break;
18170: 
18171:   case 329:
18172: #line 542 "third_party/libpg_query/grammar/statements/create.y"
18173:     {
18174: 					PGConstraint *n = makeNode(PGConstraint);
18175: 					n->contype = PG_CONSTR_UNIQUE;
18176: 					n->location = (yylsp[(1) - (6)]);
18177: 					n->keys = (yyvsp[(3) - (6)].list);
18178: 					n->options = (yyvsp[(5) - (6)].list);
18179: 					n->indexname = NULL;
18180: 					processCASbits((yyvsp[(6) - (6)].ival), (yylsp[(6) - (6)]), "UNIQUE",
18181: 								   &n->deferrable, &n->initdeferred, NULL,
18182: 								   NULL, yyscanner);
18183: 					(yyval.node) = (PGNode *)n;
18184: 				;}
18185:     break;
18186: 
18187:   case 330:
18188: #line 555 "third_party/libpg_query/grammar/statements/create.y"
18189:     {
18190: 					PGConstraint *n = makeNode(PGConstraint);
18191: 					n->contype = PG_CONSTR_UNIQUE;
18192: 					n->location = (yylsp[(1) - (3)]);
18193: 					n->keys = NIL;
18194: 					n->options = NIL;
18195: 					n->indexname = (yyvsp[(2) - (3)].str);
18196: 					n->indexspace = NULL;
18197: 					processCASbits((yyvsp[(3) - (3)].ival), (yylsp[(3) - (3)]), "UNIQUE",
18198: 								   &n->deferrable, &n->initdeferred, NULL,
18199: 								   NULL, yyscanner);
18200: 					(yyval.node) = (PGNode *)n;
18201: 				;}
18202:     break;
18203: 
18204:   case 331:
18205: #line 570 "third_party/libpg_query/grammar/statements/create.y"
18206:     {
18207: 					PGConstraint *n = makeNode(PGConstraint);
18208: 					n->contype = PG_CONSTR_PRIMARY;
18209: 					n->location = (yylsp[(1) - (7)]);
18210: 					n->keys = (yyvsp[(4) - (7)].list);
18211: 					n->options = (yyvsp[(6) - (7)].list);
18212: 					n->indexname = NULL;
18213: 					processCASbits((yyvsp[(7) - (7)].ival), (yylsp[(7) - (7)]), "PRIMARY KEY",
18214: 								   &n->deferrable, &n->initdeferred, NULL,
18215: 								   NULL, yyscanner);
18216: 					(yyval.node) = (PGNode *)n;
18217: 				;}
18218:     break;
18219: 
18220:   case 332:
18221: #line 583 "third_party/libpg_query/grammar/statements/create.y"
18222:     {
18223: 					PGConstraint *n = makeNode(PGConstraint);
18224: 					n->contype = PG_CONSTR_PRIMARY;
18225: 					n->location = (yylsp[(1) - (4)]);
18226: 					n->keys = NIL;
18227: 					n->options = NIL;
18228: 					n->indexname = (yyvsp[(3) - (4)].str);
18229: 					n->indexspace = NULL;
18230: 					processCASbits((yyvsp[(4) - (4)].ival), (yylsp[(4) - (4)]), "PRIMARY KEY",
18231: 								   &n->deferrable, &n->initdeferred, NULL,
18232: 								   NULL, yyscanner);
18233: 					(yyval.node) = (PGNode *)n;
18234: 				;}
18235:     break;
18236: 
18237:   case 333:
18238: #line 598 "third_party/libpg_query/grammar/statements/create.y"
18239:     {
18240: 					PGConstraint *n = makeNode(PGConstraint);
18241: 					n->contype = PG_CONSTR_FOREIGN;
18242: 					n->location = (yylsp[(1) - (11)]);
18243: 					n->pktable			= (yyvsp[(7) - (11)].range);
18244: 					n->fk_attrs			= (yyvsp[(4) - (11)].list);
18245: 					n->pk_attrs			= (yyvsp[(8) - (11)].list);
18246: 					n->fk_matchtype		= (yyvsp[(9) - (11)].ival);
18247: 					n->fk_upd_action	= (char) ((yyvsp[(10) - (11)].ival) >> 8);
18248: 					n->fk_del_action	= (char) ((yyvsp[(10) - (11)].ival) & 0xFF);
18249: 					processCASbits((yyvsp[(11) - (11)].ival), (yylsp[(11) - (11)]), "FOREIGN KEY",
18250: 								   &n->deferrable, &n->initdeferred,
18251: 								   &n->skip_validation, NULL,
18252: 								   yyscanner);
18253: 					n->initially_valid = !n->skip_validation;
18254: 					(yyval.node) = (PGNode *)n;
18255: 				;}
18256:     break;
18257: 
18258:   case 334:
18259: #line 620 "third_party/libpg_query/grammar/statements/create.y"
18260:     {
18261: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
18262: 				;}
18263:     break;
18264: 
18265:   case 335:
18266: #line 624 "third_party/libpg_query/grammar/statements/create.y"
18267:     {
18268: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
18269: 				;}
18270:     break;
18271: 
18272:   case 336:
18273: #line 631 "third_party/libpg_query/grammar/statements/create.y"
18274:     {
18275: 				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
18276: 			;}
18277:     break;
18278: 
18279:   case 337:
18280: #line 635 "third_party/libpg_query/grammar/statements/create.y"
18281:     {
18282: 				ereport(ERROR,
18283: 						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
18284: 						 errmsg("MATCH PARTIAL not yet implemented"),
18285: 						 parser_errposition((yylsp[(1) - (2)]))));
18286: 				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
18287: 			;}
18288:     break;
18289: 
18290:   case 338:
18291: #line 643 "third_party/libpg_query/grammar/statements/create.y"
18292:     {
18293: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
18294: 			;}
18295:     break;
18296: 
18297:   case 339:
18298: #line 647 "third_party/libpg_query/grammar/statements/create.y"
18299:     {
18300: 				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
18301: 			;}
18302:     break;
18303: 
18304:   case 340:
18305: #line 655 "third_party/libpg_query/grammar/statements/create.y"
18306:     {
18307: 					PGTableLikeClause *n = makeNode(PGTableLikeClause);
18308: 					n->relation = (yyvsp[(2) - (3)].range);
18309: 					n->options = (yyvsp[(3) - (3)].ival);
18310: 					(yyval.node) = (PGNode *)n;
18311: 				;}
18312:     break;
18313: 
18314:   case 341:
18315: #line 664 "third_party/libpg_query/grammar/statements/create.y"
18316:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18317:     break;
18318: 
18319:   case 342:
18320: #line 665 "third_party/libpg_query/grammar/statements/create.y"
18321:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18322:     break;
18323: 
18324:   case 343:
18325: #line 666 "third_party/libpg_query/grammar/statements/create.y"
18326:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18327:     break;
18328: 
18329:   case 344:
18330: #line 667 "third_party/libpg_query/grammar/statements/create.y"
18331:     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}
18332:     break;
18333: 
18334:   case 345:
18335: #line 669 "third_party/libpg_query/grammar/statements/create.y"
18336:     {
18337: 					ereport(PGWARNING,
18338: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18339: 							 parser_errposition((yylsp[(1) - (2)]))));
18340: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
18341: 				;}
18342:     break;
18343: 
18344:   case 346:
18345: #line 676 "third_party/libpg_query/grammar/statements/create.y"
18346:     {
18347: 					ereport(PGWARNING,
18348: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
18349: 							 parser_errposition((yylsp[(1) - (2)]))));
18350: 					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
18351: 				;}
18352:     break;
18353: 
18354:   case 347:
18355: #line 682 "third_party/libpg_query/grammar/statements/create.y"
18356:     { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}
18357:     break;
18358: 
18359:   case 348:
18360: #line 683 "third_party/libpg_query/grammar/statements/create.y"
18361:     { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}
18362:     break;
18363: 
18364:   case 349:
18365: #line 688 "third_party/libpg_query/grammar/statements/create.y"
18366:     { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}
18367:     break;
18368: 
18369:   case 350:
18370: #line 689 "third_party/libpg_query/grammar/statements/create.y"
18371:     { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}
18372:     break;
18373: 
18374:   case 351:
18375: #line 10 "third_party/libpg_query/grammar/statements/drop.y"
18376:     {
18377: 					PGDropStmt *n = makeNode(PGDropStmt);
18378: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18379: 					n->missing_ok = true;
18380: 					n->objects = (yyvsp[(5) - (6)].list);
18381: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18382: 					n->concurrent = false;
18383: 					(yyval.node) = (PGNode *)n;
18384: 				;}
18385:     break;
18386: 
18387:   case 352:
18388: #line 20 "third_party/libpg_query/grammar/statements/drop.y"
18389:     {
18390: 					PGDropStmt *n = makeNode(PGDropStmt);
18391: 					n->removeType = (yyvsp[(2) - (4)].objtype);
18392: 					n->missing_ok = false;
18393: 					n->objects = (yyvsp[(3) - (4)].list);
18394: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18395: 					n->concurrent = false;
18396: 					(yyval.node) = (PGNode *)n;
18397: 				;}
18398:     break;
18399: 
18400:   case 353:
18401: #line 30 "third_party/libpg_query/grammar/statements/drop.y"
18402:     {
18403: 					PGDropStmt *n = makeNode(PGDropStmt);
18404: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18405: 					n->missing_ok = true;
18406: 					n->objects = (yyvsp[(5) - (6)].list);
18407: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18408: 					n->concurrent = false;
18409: 					(yyval.node) = (PGNode *)n;
18410: 				;}
18411:     break;
18412: 
18413:   case 354:
18414: #line 40 "third_party/libpg_query/grammar/statements/drop.y"
18415:     {
18416: 					PGDropStmt *n = makeNode(PGDropStmt);
18417: 					n->removeType = (yyvsp[(2) - (4)].objtype);
18418: 					n->missing_ok = false;
18419: 					n->objects = (yyvsp[(3) - (4)].list);
18420: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18421: 					n->concurrent = false;
18422: 					(yyval.node) = (PGNode *)n;
18423: 				;}
18424:     break;
18425: 
18426:   case 355:
18427: #line 50 "third_party/libpg_query/grammar/statements/drop.y"
18428:     {
18429: 					PGDropStmt *n = makeNode(PGDropStmt);
18430: 					n->removeType = (yyvsp[(2) - (6)].objtype);
18431: 					n->objects = list_make1(lappend((yyvsp[(5) - (6)].list), makeString((yyvsp[(3) - (6)].str))));
18432: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18433: 					n->missing_ok = false;
18434: 					n->concurrent = false;
18435: 					(yyval.node) = (PGNode *) n;
18436: 				;}
18437:     break;
18438: 
18439:   case 356:
18440: #line 60 "third_party/libpg_query/grammar/statements/drop.y"
18441:     {
18442: 					PGDropStmt *n = makeNode(PGDropStmt);
18443: 					n->removeType = (yyvsp[(2) - (8)].objtype);
18444: 					n->objects = list_make1(lappend((yyvsp[(7) - (8)].list), makeString((yyvsp[(5) - (8)].str))));
18445: 					n->behavior = (yyvsp[(8) - (8)].dbehavior);
18446: 					n->missing_ok = true;
18447: 					n->concurrent = false;
18448: 					(yyval.node) = (PGNode *) n;
18449: 				;}
18450:     break;
18451: 
18452:   case 357:
18453: #line 70 "third_party/libpg_query/grammar/statements/drop.y"
18454:     {
18455: 					PGDropStmt *n = makeNode(PGDropStmt);
18456: 					n->removeType = PG_OBJECT_TYPE;
18457: 					n->missing_ok = false;
18458: 					n->objects = (yyvsp[(3) - (4)].list);
18459: 					n->behavior = (yyvsp[(4) - (4)].dbehavior);
18460: 					n->concurrent = false;
18461: 					(yyval.node) = (PGNode *) n;
18462: 				;}
18463:     break;
18464: 
18465:   case 358:
18466: #line 80 "third_party/libpg_query/grammar/statements/drop.y"
18467:     {
18468: 					PGDropStmt *n = makeNode(PGDropStmt);
18469: 					n->removeType = PG_OBJECT_TYPE;
18470: 					n->missing_ok = true;
18471: 					n->objects = (yyvsp[(5) - (6)].list);
18472: 					n->behavior = (yyvsp[(6) - (6)].dbehavior);
18473: 					n->concurrent = false;
18474: 					(yyval.node) = (PGNode *) n;
18475: 				;}
18476:     break;
18477: 
18478:   case 359:
18479: #line 93 "third_party/libpg_query/grammar/statements/drop.y"
18480:     { (yyval.objtype) = PG_OBJECT_TABLE; ;}
18481:     break;
18482: 
18483:   case 360:
18484: #line 94 "third_party/libpg_query/grammar/statements/drop.y"
18485:     { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}
18486:     break;
18487: 
18488:   case 361:
18489: #line 95 "third_party/libpg_query/grammar/statements/drop.y"
18490:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
18491:     break;
18492: 
18493:   case 362:
18494: #line 96 "third_party/libpg_query/grammar/statements/drop.y"
18495:     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}
18496:     break;
18497: 
18498:   case 363:
18499: #line 97 "third_party/libpg_query/grammar/statements/drop.y"
18500:     { (yyval.objtype) = PG_OBJECT_VIEW; ;}
18501:     break;
18502: 
18503:   case 364:
18504: #line 98 "third_party/libpg_query/grammar/statements/drop.y"
18505:     { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}
18506:     break;
18507: 
18508:   case 365:
18509: #line 99 "third_party/libpg_query/grammar/statements/drop.y"
18510:     { (yyval.objtype) = PG_OBJECT_INDEX; ;}
18511:     break;
18512: 
18513:   case 366:
18514: #line 100 "third_party/libpg_query/grammar/statements/drop.y"
18515:     { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}
18516:     break;
18517: 
18518:   case 367:
18519: #line 101 "third_party/libpg_query/grammar/statements/drop.y"
18520:     { (yyval.objtype) = PG_OBJECT_COLLATION; ;}
18521:     break;
18522: 
18523:   case 368:
18524: #line 102 "third_party/libpg_query/grammar/statements/drop.y"
18525:     { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}
18526:     break;
18527: 
18528:   case 369:
18529: #line 103 "third_party/libpg_query/grammar/statements/drop.y"
18530:     { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}
18531:     break;
18532: 
18533:   case 370:
18534: #line 104 "third_party/libpg_query/grammar/statements/drop.y"
18535:     { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}
18536:     break;
18537: 
18538:   case 371:
18539: #line 105 "third_party/libpg_query/grammar/statements/drop.y"
18540:     { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}
18541:     break;
18542: 
18543:   case 372:
18544: #line 106 "third_party/libpg_query/grammar/statements/drop.y"
18545:     { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}
18546:     break;
18547: 
18548:   case 373:
18549: #line 107 "third_party/libpg_query/grammar/statements/drop.y"
18550:     { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}
18551:     break;
18552: 
18553:   case 374:
18554: #line 112 "third_party/libpg_query/grammar/statements/drop.y"
18555:     { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}
18556:     break;
18557: 
18558:   case 375:
18559: #line 113 "third_party/libpg_query/grammar/statements/drop.y"
18560:     { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}
18561:     break;
18562: 
18563:   case 376:
18564: #line 114 "third_party/libpg_query/grammar/statements/drop.y"
18565:     { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}
18566:     break;
18567: 
18568:   case 377:
18569: #line 115 "third_party/libpg_query/grammar/statements/drop.y"
18570:     { (yyval.objtype) = PG_OBJECT_FDW; ;}
18571:     break;
18572: 
18573:   case 378:
18574: #line 116 "third_party/libpg_query/grammar/statements/drop.y"
18575:     { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}
18576:     break;
18577: 
18578:   case 379:
18579: #line 117 "third_party/libpg_query/grammar/statements/drop.y"
18580:     { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}
18581:     break;
18582: 
18583:   case 380:
18584: #line 118 "third_party/libpg_query/grammar/statements/drop.y"
18585:     { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}
18586:     break;
18587: 
18588:   case 381:
18589: #line 123 "third_party/libpg_query/grammar/statements/drop.y"
18590:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
18591:     break;
18592: 
18593:   case 382:
18594: #line 124 "third_party/libpg_query/grammar/statements/drop.y"
18595:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
18596:     break;
18597: 
18598:   case 383:
18599: #line 129 "third_party/libpg_query/grammar/statements/drop.y"
18600:     { (yyval.dbehavior) = PG_DROP_CASCADE; ;}
18601:     break;
18602: 
18603:   case 384:
18604: #line 130 "third_party/libpg_query/grammar/statements/drop.y"
18605:     { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}
18606:     break;
18607: 
18608:   case 385:
18609: #line 131 "third_party/libpg_query/grammar/statements/drop.y"
18610:     { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}
18611:     break;
18612: 
18613:   case 386:
18614: #line 136 "third_party/libpg_query/grammar/statements/drop.y"
18615:     { (yyval.objtype) = PG_OBJECT_POLICY; ;}
18616:     break;
18617: 
18618:   case 387:
18619: #line 137 "third_party/libpg_query/grammar/statements/drop.y"
18620:     { (yyval.objtype) = PG_OBJECT_RULE; ;}
18621:     break;
18622: 
18623:   case 388:
18624: #line 138 "third_party/libpg_query/grammar/statements/drop.y"
18625:     { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}
18626:     break;
18627: 
18628:   case 389:
18629: #line 141 "third_party/libpg_query/grammar/statements/drop.y"
18630:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
18631:     break;
18632: 
18633:   case 390:
18634: #line 142 "third_party/libpg_query/grammar/statements/drop.y"
18635:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
18636:     break;
18637: 
18638:   case 391:
18639: #line 8 "third_party/libpg_query/grammar/statements/create_function.y"
18640:     {
18641: 					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
18642: 					n->name = (yyvsp[(3) - (6)].range);
18643: 					n->params = (yyvsp[(4) - (6)].list);
18644: 					n->function = (yyvsp[(6) - (6)].node);
18645: 					(yyval.node) = (PGNode *)n;
18646: 				;}
18647:     break;
18648: 
18649:   case 394:
18650: #line 24 "third_party/libpg_query/grammar/statements/create_function.y"
18651:     {
18652: 				(yyval.list) = NIL;
18653: 			;}
18654:     break;
18655: 
18656:   case 395:
18657: #line 28 "third_party/libpg_query/grammar/statements/create_function.y"
18658:     {
18659: 				(yyval.list) = (yyvsp[(2) - (3)].list);
18660: 			;}
18661:     break;
18662: 
18663:   case 396:
18664: #line 12 "third_party/libpg_query/grammar/statements/update.y"
18665:     {
18666: 					PGUpdateStmt *n = makeNode(PGUpdateStmt);
18667: 					n->relation = (yyvsp[(3) - (8)].range);
18668: 					n->targetList = (yyvsp[(5) - (8)].list);
18669: 					n->fromClause = (yyvsp[(6) - (8)].list);
18670: 					n->whereClause = (yyvsp[(7) - (8)].node);
18671: 					n->returningList = (yyvsp[(8) - (8)].list);
18672: 					n->withClause = (yyvsp[(1) - (8)].with);
18673: 					(yyval.node) = (PGNode *)n;
18674: 				;}
18675:     break;
18676: 
18677:   case 397:
18678: #line 3 "third_party/libpg_query/grammar/statements/copy.y"
18679:     {
18680: 					PGCopyStmt *n = makeNode(PGCopyStmt);
18681: 					n->relation = (yyvsp[(3) - (11)].range);
18682: 					n->query = NULL;
18683: 					n->attlist = (yyvsp[(4) - (11)].list);
18684: 					n->is_from = (yyvsp[(6) - (11)].boolean);
18685: 					n->is_program = (yyvsp[(7) - (11)].boolean);
18686: 					n->filename = (yyvsp[(8) - (11)].str);
18687: 
18688: 					if (n->is_program && n->filename == NULL)
18689: 						ereport(ERROR,
18690: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
18691: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
18692: 								 parser_errposition((yylsp[(8) - (11)]))));
18693: 
18694: 					n->options = NIL;
18695: 					/* Concatenate user-supplied flags */
18696: 					if ((yyvsp[(2) - (11)].defelt))
18697: 						n->options = lappend(n->options, (yyvsp[(2) - (11)].defelt));
18698: 					if ((yyvsp[(5) - (11)].defelt))
18699: 						n->options = lappend(n->options, (yyvsp[(5) - (11)].defelt));
18700: 					if ((yyvsp[(9) - (11)].defelt))
18701: 						n->options = lappend(n->options, (yyvsp[(9) - (11)].defelt));
18702: 					if ((yyvsp[(11) - (11)].list))
18703: 						n->options = list_concat(n->options, (yyvsp[(11) - (11)].list));
18704: 					(yyval.node) = (PGNode *)n;
18705: 				;}
18706:     break;
18707: 
18708:   case 398:
18709: #line 31 "third_party/libpg_query/grammar/statements/copy.y"
18710:     {
18711: 					PGCopyStmt *n = makeNode(PGCopyStmt);
18712: 					n->relation = NULL;
18713: 					n->query = (yyvsp[(3) - (9)].node);
18714: 					n->attlist = NIL;
18715: 					n->is_from = false;
18716: 					n->is_program = (yyvsp[(6) - (9)].boolean);
18717: 					n->filename = (yyvsp[(7) - (9)].str);
18718: 					n->options = (yyvsp[(9) - (9)].list);
18719: 
18720: 					if (n->is_program && n->filename == NULL)
18721: 						ereport(ERROR,
18722: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
18723: 								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
18724: 								 parser_errposition((yylsp[(5) - (9)]))));
18725: 
18726: 					(yyval.node) = (PGNode *)n;
18727: 				;}
18728:     break;
18729: 
18730:   case 399:
18731: #line 53 "third_party/libpg_query/grammar/statements/copy.y"
18732:     { (yyval.boolean) = true; ;}
18733:     break;
18734: 
18735:   case 400:
18736: #line 54 "third_party/libpg_query/grammar/statements/copy.y"
18737:     { (yyval.boolean) = false; ;}
18738:     break;
18739: 
18740:   case 401:
18741: #line 60 "third_party/libpg_query/grammar/statements/copy.y"
18742:     {
18743: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));
18744: 				;}
18745:     break;
18746: 
18747:   case 402:
18748: #line 63 "third_party/libpg_query/grammar/statements/copy.y"
18749:     { (yyval.defelt) = NULL; ;}
18750:     break;
18751: 
18752:   case 403:
18753: #line 69 "third_party/libpg_query/grammar/statements/copy.y"
18754:     {
18755: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
18756: 				;}
18757:     break;
18758: 
18759:   case 404:
18760: #line 73 "third_party/libpg_query/grammar/statements/copy.y"
18761:     {
18762: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
18763: 				;}
18764:     break;
18765: 
18766:   case 405:
18767: #line 80 "third_party/libpg_query/grammar/statements/copy.y"
18768:     {;}
18769:     break;
18770: 
18771:   case 406:
18772: #line 81 "third_party/libpg_query/grammar/statements/copy.y"
18773:     {;}
18774:     break;
18775: 
18776:   case 407:
18777: #line 85 "third_party/libpg_query/grammar/statements/copy.y"
18778:     {;}
18779:     break;
18780: 
18781:   case 408:
18782: #line 86 "third_party/libpg_query/grammar/statements/copy.y"
18783:     {;}
18784:     break;
18785: 
18786:   case 409:
18787: #line 91 "third_party/libpg_query/grammar/statements/copy.y"
18788:     { (yyval.boolean) = true; ;}
18789:     break;
18790: 
18791:   case 410:
18792: #line 92 "third_party/libpg_query/grammar/statements/copy.y"
18793:     { (yyval.boolean) = false; ;}
18794:     break;
18795: 
18796:   case 411:
18797: #line 96 "third_party/libpg_query/grammar/statements/copy.y"
18798:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
18799:     break;
18800: 
18801:   case 412:
18802: #line 97 "third_party/libpg_query/grammar/statements/copy.y"
18803:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
18804:     break;
18805: 
18806:   case 413:
18807: #line 102 "third_party/libpg_query/grammar/statements/copy.y"
18808:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18809:     break;
18810: 
18811:   case 414:
18812: #line 103 "third_party/libpg_query/grammar/statements/copy.y"
18813:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
18814:     break;
18815: 
18816:   case 415:
18817: #line 104 "third_party/libpg_query/grammar/statements/copy.y"
18818:     { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}
18819:     break;
18820: 
18821:   case 416:
18822: #line 105 "third_party/libpg_query/grammar/statements/copy.y"
18823:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}
18824:     break;
18825: 
18826:   case 417:
18827: #line 106 "third_party/libpg_query/grammar/statements/copy.y"
18828:     { (yyval.node) = NULL; ;}
18829:     break;
18830: 
18831:   case 418:
18832: #line 112 "third_party/libpg_query/grammar/statements/copy.y"
18833:     {
18834: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
18835: 				;}
18836:     break;
18837: 
18838:   case 419:
18839: #line 120 "third_party/libpg_query/grammar/statements/copy.y"
18840:     {
18841: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));
18842: 				;}
18843:     break;
18844: 
18845:   case 420:
18846: #line 123 "third_party/libpg_query/grammar/statements/copy.y"
18847:     { (yyval.defelt) = NULL; ;}
18848:     break;
18849: 
18850:   case 421:
18851: #line 128 "third_party/libpg_query/grammar/statements/copy.y"
18852:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}
18853:     break;
18854: 
18855:   case 422:
18856: #line 129 "third_party/libpg_query/grammar/statements/copy.y"
18857:     { (yyval.list) = NIL; ;}
18858:     break;
18859: 
18860:   case 423:
18861: #line 135 "third_party/libpg_query/grammar/statements/copy.y"
18862:     {
18863: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18864: 				;}
18865:     break;
18866: 
18867:   case 424:
18868: #line 138 "third_party/libpg_query/grammar/statements/copy.y"
18869:     { (yyval.defelt) = NULL; ;}
18870:     break;
18871: 
18872:   case 425:
18873: #line 144 "third_party/libpg_query/grammar/statements/copy.y"
18874:     {
18875: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[(1) - (1)]));
18876: 				;}
18877:     break;
18878: 
18879:   case 426:
18880: #line 148 "third_party/libpg_query/grammar/statements/copy.y"
18881:     {
18882: 					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18883: 				;}
18884:     break;
18885: 
18886:   case 427:
18887: #line 152 "third_party/libpg_query/grammar/statements/copy.y"
18888:     {
18889: 					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18890: 				;}
18891:     break;
18892: 
18893:   case 428:
18894: #line 156 "third_party/libpg_query/grammar/statements/copy.y"
18895:     {
18896: 					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18897: 				;}
18898:     break;
18899: 
18900:   case 429:
18901: #line 160 "third_party/libpg_query/grammar/statements/copy.y"
18902:     {
18903: 					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18904: 				;}
18905:     break;
18906: 
18907:   case 430:
18908: #line 164 "third_party/libpg_query/grammar/statements/copy.y"
18909:     {
18910: 					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[(1) - (1)]));
18911: 				;}
18912:     break;
18913: 
18914:   case 431:
18915: #line 168 "third_party/libpg_query/grammar/statements/copy.y"
18916:     {
18917: 					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));
18918: 				;}
18919:     break;
18920: 
18921:   case 432:
18922: #line 172 "third_party/libpg_query/grammar/statements/copy.y"
18923:     {
18924: 					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18925: 				;}
18926:     break;
18927: 
18928:   case 433:
18929: #line 176 "third_party/libpg_query/grammar/statements/copy.y"
18930:     {
18931: 					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));
18932: 				;}
18933:     break;
18934: 
18935:   case 434:
18936: #line 180 "third_party/libpg_query/grammar/statements/copy.y"
18937:     {
18938: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18939: 				;}
18940:     break;
18941: 
18942:   case 435:
18943: #line 184 "third_party/libpg_query/grammar/statements/copy.y"
18944:     {
18945: 					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));
18946: 				;}
18947:     break;
18948: 
18949:   case 436:
18950: #line 188 "third_party/libpg_query/grammar/statements/copy.y"
18951:     {
18952: 					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));
18953: 				;}
18954:     break;
18955: 
18956:   case 437:
18957: #line 192 "third_party/libpg_query/grammar/statements/copy.y"
18958:     {
18959: 					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));
18960: 				;}
18961:     break;
18962: 
18963:   case 438:
18964: #line 196 "third_party/libpg_query/grammar/statements/copy.y"
18965:     {
18966: 					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));
18967: 				;}
18968:     break;
18969: 
18970:   case 439:
18971: #line 203 "third_party/libpg_query/grammar/statements/copy.y"
18972:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
18973:     break;
18974: 
18975:   case 440:
18976: #line 209 "third_party/libpg_query/grammar/statements/copy.y"
18977:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
18978:     break;
18979: 
18980:   case 441:
18981: #line 210 "third_party/libpg_query/grammar/statements/copy.y"
18982:     { (yyval.str) = NULL; ;}
18983:     break;
18984: 
18985:   case 442:
18986: #line 211 "third_party/libpg_query/grammar/statements/copy.y"
18987:     { (yyval.str) = NULL; ;}
18988:     break;
18989: 
18990:   case 443:
18991: #line 217 "third_party/libpg_query/grammar/statements/copy.y"
18992:     {
18993: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
18994: 				;}
18995:     break;
18996: 
18997:   case 444:
18998: #line 221 "third_party/libpg_query/grammar/statements/copy.y"
18999:     {
19000: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
19001: 				;}
19002:     break;
19003: 
19004:   case 447:
19005: #line 52 "third_party/libpg_query/grammar/statements/select.y"
19006:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19007:     break;
19008: 
19009:   case 448:
19010: #line 53 "third_party/libpg_query/grammar/statements/select.y"
19011:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19012:     break;
19013: 
19014:   case 449:
19015: #line 68 "third_party/libpg_query/grammar/statements/select.y"
19016:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19017:     break;
19018: 
19019:   case 450:
19020: #line 70 "third_party/libpg_query/grammar/statements/select.y"
19021:     {
19022: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,
19023: 										NULL, NULL, NULL,
19024: 										yyscanner);
19025: 					(yyval.node) = (yyvsp[(1) - (2)].node);
19026: 				;}
19027:     break;
19028: 
19029:   case 451:
19030: #line 77 "third_party/libpg_query/grammar/statements/select.y"
19031:     {
19032: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),
19033: 										(PGNode*) list_nth((yyvsp[(4) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (4)].list), 1),
19034: 										NULL,
19035: 										yyscanner);
19036: 					(yyval.node) = (yyvsp[(1) - (4)].node);
19037: 				;}
19038:     break;
19039: 
19040:   case 452:
19041: #line 85 "third_party/libpg_query/grammar/statements/select.y"
19042:     {
19043: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),
19044: 										(PGNode*) list_nth((yyvsp[(3) - (4)].list), 0), (PGNode*) list_nth((yyvsp[(3) - (4)].list), 1),
19045: 										NULL,
19046: 										yyscanner);
19047: 					(yyval.node) = (yyvsp[(1) - (4)].node);
19048: 				;}
19049:     break;
19050: 
19051:   case 453:
19052: #line 93 "third_party/libpg_query/grammar/statements/select.y"
19053:     {
19054: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,
19055: 										NULL, NULL,
19056: 										(yyvsp[(1) - (2)].with),
19057: 										yyscanner);
19058: 					(yyval.node) = (yyvsp[(2) - (2)].node);
19059: 				;}
19060:     break;
19061: 
19062:   case 454:
19063: #line 101 "third_party/libpg_query/grammar/statements/select.y"
19064:     {
19065: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,
19066: 										NULL, NULL,
19067: 										(yyvsp[(1) - (3)].with),
19068: 										yyscanner);
19069: 					(yyval.node) = (yyvsp[(2) - (3)].node);
19070: 				;}
19071:     break;
19072: 
19073:   case 455:
19074: #line 109 "third_party/libpg_query/grammar/statements/select.y"
19075:     {
19076: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),
19077: 										(PGNode*) list_nth((yyvsp[(5) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(5) - (5)].list), 1),
19078: 										(yyvsp[(1) - (5)].with),
19079: 										yyscanner);
19080: 					(yyval.node) = (yyvsp[(2) - (5)].node);
19081: 				;}
19082:     break;
19083: 
19084:   case 456:
19085: #line 117 "third_party/libpg_query/grammar/statements/select.y"
19086:     {
19087: 					insertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),
19088: 										(PGNode*) list_nth((yyvsp[(4) - (5)].list), 0), (PGNode*) list_nth((yyvsp[(4) - (5)].list), 1),
19089: 										(yyvsp[(1) - (5)].with),
19090: 										yyscanner);
19091: 					(yyval.node) = (yyvsp[(2) - (5)].node);
19092: 				;}
19093:     break;
19094: 
19095:   case 457:
19096: #line 127 "third_party/libpg_query/grammar/statements/select.y"
19097:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19098:     break;
19099: 
19100:   case 458:
19101: #line 128 "third_party/libpg_query/grammar/statements/select.y"
19102:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19103:     break;
19104: 
19105:   case 459:
19106: #line 158 "third_party/libpg_query/grammar/statements/select.y"
19107:     {
19108: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19109: 					n->targetList = (yyvsp[(3) - (11)].list);
19110: 					n->intoClause = (yyvsp[(4) - (11)].into);
19111: 					n->fromClause = (yyvsp[(5) - (11)].list);
19112: 					n->whereClause = (yyvsp[(6) - (11)].node);
19113: 					n->groupClause = (yyvsp[(7) - (11)].list);
19114: 					n->havingClause = (yyvsp[(8) - (11)].node);
19115: 					n->windowClause = (yyvsp[(9) - (11)].list);
19116: 					n->qualifyClause = (yyvsp[(10) - (11)].node);
19117: 					n->sampleOptions = (yyvsp[(11) - (11)].node);
19118: 					(yyval.node) = (PGNode *)n;
19119: 				;}
19120:     break;
19121: 
19122:   case 460:
19123: #line 174 "third_party/libpg_query/grammar/statements/select.y"
19124:     {
19125: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19126: 					n->distinctClause = (yyvsp[(2) - (11)].list);
19127: 					n->targetList = (yyvsp[(3) - (11)].list);
19128: 					n->intoClause = (yyvsp[(4) - (11)].into);
19129: 					n->fromClause = (yyvsp[(5) - (11)].list);
19130: 					n->whereClause = (yyvsp[(6) - (11)].node);
19131: 					n->groupClause = (yyvsp[(7) - (11)].list);
19132: 					n->havingClause = (yyvsp[(8) - (11)].node);
19133: 					n->windowClause = (yyvsp[(9) - (11)].list);
19134: 					n->qualifyClause = (yyvsp[(10) - (11)].node);
19135: 					n->sampleOptions = (yyvsp[(11) - (11)].node);
19136: 					(yyval.node) = (PGNode *)n;
19137: 				;}
19138:     break;
19139: 
19140:   case 461:
19141: #line 188 "third_party/libpg_query/grammar/statements/select.y"
19142:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19143:     break;
19144: 
19145:   case 462:
19146: #line 190 "third_party/libpg_query/grammar/statements/select.y"
19147:     {
19148: 					/* same as SELECT * FROM relation_expr */
19149: 					PGColumnRef *cr = makeNode(PGColumnRef);
19150: 					PGResTarget *rt = makeNode(PGResTarget);
19151: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19152: 
19153: 					cr->fields = list_make1(makeNode(PGAStar));
19154: 					cr->location = -1;
19155: 
19156: 					rt->name = NULL;
19157: 					rt->indirection = NIL;
19158: 					rt->val = (PGNode *)cr;
19159: 					rt->location = -1;
19160: 
19161: 					n->targetList = list_make1(rt);
19162: 					n->fromClause = list_make1((yyvsp[(2) - (2)].range));
19163: 					(yyval.node) = (PGNode *)n;
19164: 				;}
19165:     break;
19166: 
19167:   case 463:
19168: #line 209 "third_party/libpg_query/grammar/statements/select.y"
19169:     {
19170: 					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19171: 				;}
19172:     break;
19173: 
19174:   case 464:
19175: #line 213 "third_party/libpg_query/grammar/statements/select.y"
19176:     {
19177: 					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19178: 				;}
19179:     break;
19180: 
19181:   case 465:
19182: #line 217 "third_party/libpg_query/grammar/statements/select.y"
19183:     {
19184: 					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));
19185: 				;}
19186:     break;
19187: 
19188:   case 466:
19189: #line 234 "third_party/libpg_query/grammar/statements/select.y"
19190:     {
19191: 				(yyval.with) = makeNode(PGWithClause);
19192: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
19193: 				(yyval.with)->recursive = false;
19194: 				(yyval.with)->location = (yylsp[(1) - (2)]);
19195: 			;}
19196:     break;
19197: 
19198:   case 467:
19199: #line 241 "third_party/libpg_query/grammar/statements/select.y"
19200:     {
19201: 				(yyval.with) = makeNode(PGWithClause);
19202: 				(yyval.with)->ctes = (yyvsp[(2) - (2)].list);
19203: 				(yyval.with)->recursive = false;
19204: 				(yyval.with)->location = (yylsp[(1) - (2)]);
19205: 			;}
19206:     break;
19207: 
19208:   case 468:
19209: #line 248 "third_party/libpg_query/grammar/statements/select.y"
19210:     {
19211: 				(yyval.with) = makeNode(PGWithClause);
19212: 				(yyval.with)->ctes = (yyvsp[(3) - (3)].list);
19213: 				(yyval.with)->recursive = true;
19214: 				(yyval.with)->location = (yylsp[(1) - (3)]);
19215: 			;}
19216:     break;
19217: 
19218:   case 469:
19219: #line 257 "third_party/libpg_query/grammar/statements/select.y"
19220:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19221:     break;
19222: 
19223:   case 470:
19224: #line 258 "third_party/libpg_query/grammar/statements/select.y"
19225:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
19226:     break;
19227: 
19228:   case 471:
19229: #line 262 "third_party/libpg_query/grammar/statements/select.y"
19230:     {
19231: 				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
19232: 				n->ctename = (yyvsp[(1) - (6)].str);
19233: 				n->aliascolnames = (yyvsp[(2) - (6)].list);
19234: 				n->ctequery = (yyvsp[(5) - (6)].node);
19235: 				n->location = (yylsp[(1) - (6)]);
19236: 				(yyval.node) = (PGNode *) n;
19237: 			;}
19238:     break;
19239: 
19240:   case 472:
19241: #line 274 "third_party/libpg_query/grammar/statements/select.y"
19242:     {
19243: 					(yyval.into) = makeNode(PGIntoClause);
19244: 					(yyval.into)->rel = (yyvsp[(2) - (2)].range);
19245: 					(yyval.into)->colNames = NIL;
19246: 					(yyval.into)->options = NIL;
19247: 					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
19248: 					(yyval.into)->viewQuery = NULL;
19249: 					(yyval.into)->skipData = false;
19250: 				;}
19251:     break;
19252: 
19253:   case 473:
19254: #line 284 "third_party/libpg_query/grammar/statements/select.y"
19255:     { (yyval.into) = NULL; ;}
19256:     break;
19257: 
19258:   case 474:
19259: #line 293 "third_party/libpg_query/grammar/statements/select.y"
19260:     {
19261: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19262: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19263: 				;}
19264:     break;
19265: 
19266:   case 475:
19267: #line 298 "third_party/libpg_query/grammar/statements/select.y"
19268:     {
19269: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19270: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19271: 				;}
19272:     break;
19273: 
19274:   case 476:
19275: #line 303 "third_party/libpg_query/grammar/statements/select.y"
19276:     {
19277: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19278: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19279: 				;}
19280:     break;
19281: 
19282:   case 477:
19283: #line 308 "third_party/libpg_query/grammar/statements/select.y"
19284:     {
19285: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19286: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19287: 				;}
19288:     break;
19289: 
19290:   case 478:
19291: #line 313 "third_party/libpg_query/grammar/statements/select.y"
19292:     {
19293: 					ereport(PGWARNING,
19294: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
19295: 							 parser_errposition((yylsp[(1) - (4)]))));
19296: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19297: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19298: 				;}
19299:     break;
19300: 
19301:   case 479:
19302: #line 321 "third_party/libpg_query/grammar/statements/select.y"
19303:     {
19304: 					ereport(PGWARNING,
19305: 							(errmsg("GLOBAL is deprecated in temporary table creation"),
19306: 							 parser_errposition((yylsp[(1) - (4)]))));
19307: 					(yyval.range) = (yyvsp[(4) - (4)].range);
19308: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
19309: 				;}
19310:     break;
19311: 
19312:   case 480:
19313: #line 329 "third_party/libpg_query/grammar/statements/select.y"
19314:     {
19315: 					(yyval.range) = (yyvsp[(3) - (3)].range);
19316: 					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
19317: 				;}
19318:     break;
19319: 
19320:   case 481:
19321: #line 334 "third_party/libpg_query/grammar/statements/select.y"
19322:     {
19323: 					(yyval.range) = (yyvsp[(2) - (2)].range);
19324: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
19325: 				;}
19326:     break;
19327: 
19328:   case 482:
19329: #line 339 "third_party/libpg_query/grammar/statements/select.y"
19330:     {
19331: 					(yyval.range) = (yyvsp[(1) - (1)].range);
19332: 					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
19333: 				;}
19334:     break;
19335: 
19336:   case 483:
19337: #line 345 "third_party/libpg_query/grammar/statements/select.y"
19338:     {;}
19339:     break;
19340: 
19341:   case 484:
19342: #line 346 "third_party/libpg_query/grammar/statements/select.y"
19343:     {;}
19344:     break;
19345: 
19346:   case 485:
19347: #line 350 "third_party/libpg_query/grammar/statements/select.y"
19348:     { (yyval.boolean) = true; ;}
19349:     break;
19350: 
19351:   case 486:
19352: #line 351 "third_party/libpg_query/grammar/statements/select.y"
19353:     { (yyval.boolean) = false; ;}
19354:     break;
19355: 
19356:   case 487:
19357: #line 352 "third_party/libpg_query/grammar/statements/select.y"
19358:     { (yyval.boolean) = false; ;}
19359:     break;
19360: 
19361:   case 488:
19362: #line 359 "third_party/libpg_query/grammar/statements/select.y"
19363:     { (yyval.list) = list_make1(NIL); ;}
19364:     break;
19365: 
19366:   case 489:
19367: #line 360 "third_party/libpg_query/grammar/statements/select.y"
19368:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
19369:     break;
19370: 
19371:   case 490:
19372: #line 364 "third_party/libpg_query/grammar/statements/select.y"
19373:     { (yyval.list) = NIL;;}
19374:     break;
19375: 
19376:   case 491:
19377: #line 365 "third_party/libpg_query/grammar/statements/select.y"
19378:     { (yyval.list) = NIL; ;}
19379:     break;
19380: 
19381:   case 492:
19382: #line 369 "third_party/libpg_query/grammar/statements/select.y"
19383:     { (yyval.boolean) = true;;}
19384:     break;
19385: 
19386:   case 493:
19387: #line 370 "third_party/libpg_query/grammar/statements/select.y"
19388:     { (yyval.boolean) = false;;}
19389:     break;
19390: 
19391:   case 494:
19392: #line 371 "third_party/libpg_query/grammar/statements/select.y"
19393:     { (yyval.boolean) = false; ;}
19394:     break;
19395: 
19396:   case 495:
19397: #line 375 "third_party/libpg_query/grammar/statements/select.y"
19398:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
19399:     break;
19400: 
19401:   case 496:
19402: #line 376 "third_party/libpg_query/grammar/statements/select.y"
19403:     { (yyval.list) = NIL; ;}
19404:     break;
19405: 
19406:   case 497:
19407: #line 380 "third_party/libpg_query/grammar/statements/select.y"
19408:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
19409:     break;
19410: 
19411:   case 498:
19412: #line 382 "third_party/libpg_query/grammar/statements/select.y"
19413:     {
19414: 					PGSortBy *sort = makeNode(PGSortBy);
19415: 					sort->node = (PGNode *) makeNode(PGAStar);
19416: 					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
19417: 					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
19418: 					sort->useOp = NIL;
19419: 					sort->location = -1;		/* no operator */
19420: 					(yyval.list) = list_make1(sort);
19421: 				;}
19422:     break;
19423: 
19424:   case 499:
19425: #line 392 "third_party/libpg_query/grammar/statements/select.y"
19426:     {
19427: 					PGSortBy *sort = makeNode(PGSortBy);
19428: 					sort->node = (PGNode *) makeNode(PGAStar);
19429: 					sort->sortby_dir = (yyvsp[(4) - (5)].sortorder);
19430: 					sort->sortby_nulls = (yyvsp[(5) - (5)].nullorder);
19431: 					sort->useOp = NIL;
19432: 					sort->location = -1;		/* no operator */
19433: 					(yyval.list) = list_make1(sort);
19434: 				;}
19435:     break;
19436: 
19437:   case 500:
19438: #line 404 "third_party/libpg_query/grammar/statements/select.y"
19439:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}
19440:     break;
19441: 
19442:   case 501:
19443: #line 405 "third_party/libpg_query/grammar/statements/select.y"
19444:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}
19445:     break;
19446: 
19447:   case 502:
19448: #line 409 "third_party/libpg_query/grammar/statements/select.y"
19449:     {
19450: 					(yyval.sortby) = makeNode(PGSortBy);
19451: 					(yyval.sortby)->node = (yyvsp[(1) - (4)].node);
19452: 					(yyval.sortby)->sortby_dir = SORTBY_USING;
19453: 					(yyval.sortby)->sortby_nulls = (yyvsp[(4) - (4)].nullorder);
19454: 					(yyval.sortby)->useOp = (yyvsp[(3) - (4)].list);
19455: 					(yyval.sortby)->location = (yylsp[(3) - (4)]);
19456: 				;}
19457:     break;
19458: 
19459:   case 503:
19460: #line 418 "third_party/libpg_query/grammar/statements/select.y"
19461:     {
19462: 					(yyval.sortby) = makeNode(PGSortBy);
19463: 					(yyval.sortby)->node = (yyvsp[(1) - (3)].node);
19464: 					(yyval.sortby)->sortby_dir = (yyvsp[(2) - (3)].sortorder);
19465: 					(yyval.sortby)->sortby_nulls = (yyvsp[(3) - (3)].nullorder);
19466: 					(yyval.sortby)->useOp = NIL;
19467: 					(yyval.sortby)->location = -1;		/* no operator */
19468: 				;}
19469:     break;
19470: 
19471:   case 504:
19472: #line 428 "third_party/libpg_query/grammar/statements/select.y"
19473:     { (yyval.sortorder) = PG_SORTBY_ASC; ;}
19474:     break;
19475: 
19476:   case 505:
19477: #line 429 "third_party/libpg_query/grammar/statements/select.y"
19478:     { (yyval.sortorder) = PG_SORTBY_DESC; ;}
19479:     break;
19480: 
19481:   case 506:
19482: #line 430 "third_party/libpg_query/grammar/statements/select.y"
19483:     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}
19484:     break;
19485: 
19486:   case 507:
19487: #line 433 "third_party/libpg_query/grammar/statements/select.y"
19488:     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}
19489:     break;
19490: 
19491:   case 508:
19492: #line 434 "third_party/libpg_query/grammar/statements/select.y"
19493:     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}
19494:     break;
19495: 
19496:   case 509:
19497: #line 435 "third_party/libpg_query/grammar/statements/select.y"
19498:     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}
19499:     break;
19500: 
19501:   case 510:
19502: #line 439 "third_party/libpg_query/grammar/statements/select.y"
19503:     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}
19504:     break;
19505: 
19506:   case 511:
19507: #line 440 "third_party/libpg_query/grammar/statements/select.y"
19508:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}
19509:     break;
19510: 
19511:   case 512:
19512: #line 441 "third_party/libpg_query/grammar/statements/select.y"
19513:     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}
19514:     break;
19515: 
19516:   case 513:
19517: #line 442 "third_party/libpg_query/grammar/statements/select.y"
19518:     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}
19519:     break;
19520: 
19521:   case 514:
19522: #line 446 "third_party/libpg_query/grammar/statements/select.y"
19523:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19524:     break;
19525: 
19526:   case 515:
19527: #line 447 "third_party/libpg_query/grammar/statements/select.y"
19528:     { (yyval.list) = list_make2(NULL,NULL); ;}
19529:     break;
19530: 
19531:   case 516:
19532: #line 452 "third_party/libpg_query/grammar/statements/select.y"
19533:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19534:     break;
19535: 
19536:   case 517:
19537: #line 454 "third_party/libpg_query/grammar/statements/select.y"
19538:     {
19539: 					/* Disabled because it was too confusing, bjm 2002-02-18 */
19540: 					ereport(ERROR,
19541: 							(errcode(PG_ERRCODE_SYNTAX_ERROR),
19542: 							 errmsg("LIMIT #,# syntax is not supported"),
19543: 							 errhint("Use separate LIMIT and OFFSET clauses."),
19544: 							 parser_errposition((yylsp[(1) - (4)]))));
19545: 				;}
19546:     break;
19547: 
19548:   case 518:
19549: #line 470 "third_party/libpg_query/grammar/statements/select.y"
19550:     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}
19551:     break;
19552: 
19553:   case 519:
19554: #line 472 "third_party/libpg_query/grammar/statements/select.y"
19555:     { (yyval.node) = makeIntConst(1, -1); ;}
19556:     break;
19557: 
19558:   case 520:
19559: #line 477 "third_party/libpg_query/grammar/statements/select.y"
19560:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19561:     break;
19562: 
19563:   case 521:
19564: #line 480 "third_party/libpg_query/grammar/statements/select.y"
19565:     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}
19566:     break;
19567: 
19568:   case 522:
19569: #line 488 "third_party/libpg_query/grammar/statements/select.y"
19570:     {
19571: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
19572: 		;}
19573:     break;
19574: 
19575:   case 523:
19576: #line 492 "third_party/libpg_query/grammar/statements/select.y"
19577:     {
19578: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
19579: 		;}
19580:     break;
19581: 
19582:   case 524:
19583: #line 496 "third_party/libpg_query/grammar/statements/select.y"
19584:     {
19585: 			(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);
19586: 		;}
19587:     break;
19588: 
19589:   case 525:
19590: #line 500 "third_party/libpg_query/grammar/statements/select.y"
19591:     {
19592: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);
19593: 		;}
19594:     break;
19595: 
19596:   case 526:
19597: #line 504 "third_party/libpg_query/grammar/statements/select.y"
19598:     {
19599: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);
19600: 		;}
19601:     break;
19602: 
19603:   case 527:
19604: #line 508 "third_party/libpg_query/grammar/statements/select.y"
19605:     {
19606: 			(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);
19607: 		;}
19608:     break;
19609: 
19610:   case 528:
19611: #line 515 "third_party/libpg_query/grammar/statements/select.y"
19612:     {
19613: 					(yyval.node) = (yyvsp[(3) - (3)].node);
19614: 				;}
19615:     break;
19616: 
19617:   case 529:
19618: #line 519 "third_party/libpg_query/grammar/statements/select.y"
19619:     { (yyval.node) = NULL; ;}
19620:     break;
19621: 
19622:   case 530:
19623: #line 526 "third_party/libpg_query/grammar/statements/select.y"
19624:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
19625:     break;
19626: 
19627:   case 531:
19628: #line 527 "third_party/libpg_query/grammar/statements/select.y"
19629:     { (yyval.str) = NULL; ;}
19630:     break;
19631: 
19632:   case 532:
19633: #line 532 "third_party/libpg_query/grammar/statements/select.y"
19634:     {
19635: 					(yyval.node) = makeSampleOptions((yyvsp[(3) - (5)].node), (yyvsp[(1) - (5)].str), (yyvsp[(5) - (5)].ival), (yylsp[(1) - (5)]));
19636: 				;}
19637:     break;
19638: 
19639:   case 533:
19640: #line 536 "third_party/libpg_query/grammar/statements/select.y"
19641:     {
19642: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, -1, (yylsp[(1) - (1)]));
19643: 		;}
19644:     break;
19645: 
19646:   case 534:
19647: #line 540 "third_party/libpg_query/grammar/statements/select.y"
19648:     {
19649: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), -1, (yylsp[(1) - (4)]));
19650: 		;}
19651:     break;
19652: 
19653:   case 535:
19654: #line 544 "third_party/libpg_query/grammar/statements/select.y"
19655:     {
19656: 			(yyval.node) = makeSampleOptions((yyvsp[(1) - (6)].node), (yyvsp[(3) - (6)].str), (yyvsp[(5) - (6)].ival), (yylsp[(1) - (6)]));
19657: 		;}
19658:     break;
19659: 
19660:   case 536:
19661: #line 551 "third_party/libpg_query/grammar/statements/select.y"
19662:     {
19663: 					(yyval.node) = (yyvsp[(2) - (2)].node);
19664: 				;}
19665:     break;
19666: 
19667:   case 537:
19668: #line 557 "third_party/libpg_query/grammar/statements/select.y"
19669:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19670:     break;
19671: 
19672:   case 538:
19673: #line 558 "third_party/libpg_query/grammar/statements/select.y"
19674:     { (yyval.node) = NULL; ;}
19675:     break;
19676: 
19677:   case 539:
19678: #line 563 "third_party/libpg_query/grammar/statements/select.y"
19679:     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}
19680:     break;
19681: 
19682:   case 540:
19683: #line 564 "third_party/libpg_query/grammar/statements/select.y"
19684:     { (yyval.ival) = -1; ;}
19685:     break;
19686: 
19687:   case 541:
19688: #line 568 "third_party/libpg_query/grammar/statements/select.y"
19689:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19690:     break;
19691: 
19692:   case 542:
19693: #line 570 "third_party/libpg_query/grammar/statements/select.y"
19694:     {
19695: 					/* LIMIT ALL is represented as a NULL constant */
19696: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
19697: 				;}
19698:     break;
19699: 
19700:   case 543:
19701: #line 575 "third_party/libpg_query/grammar/statements/select.y"
19702:     { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}
19703:     break;
19704: 
19705:   case 544:
19706: #line 577 "third_party/libpg_query/grammar/statements/select.y"
19707:     { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}
19708:     break;
19709: 
19710:   case 545:
19711: #line 579 "third_party/libpg_query/grammar/statements/select.y"
19712:     { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}
19713:     break;
19714: 
19715:   case 546:
19716: #line 583 "third_party/libpg_query/grammar/statements/select.y"
19717:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19718:     break;
19719: 
19720:   case 547:
19721: #line 603 "third_party/libpg_query/grammar/statements/select.y"
19722:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19723:     break;
19724: 
19725:   case 548:
19726: #line 605 "third_party/libpg_query/grammar/statements/select.y"
19727:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19728:     break;
19729: 
19730:   case 549:
19731: #line 607 "third_party/libpg_query/grammar/statements/select.y"
19732:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
19733:     break;
19734: 
19735:   case 550:
19736: #line 611 "third_party/libpg_query/grammar/statements/select.y"
19737:     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}
19738:     break;
19739: 
19740:   case 551:
19741: #line 612 "third_party/libpg_query/grammar/statements/select.y"
19742:     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}
19743:     break;
19744: 
19745:   case 552:
19746: #line 616 "third_party/libpg_query/grammar/statements/select.y"
19747:     { (yyval.ival) = 0; ;}
19748:     break;
19749: 
19750:   case 553:
19751: #line 617 "third_party/libpg_query/grammar/statements/select.y"
19752:     { (yyval.ival) = 0; ;}
19753:     break;
19754: 
19755:   case 554:
19756: #line 620 "third_party/libpg_query/grammar/statements/select.y"
19757:     { (yyval.ival) = 0; ;}
19758:     break;
19759: 
19760:   case 555:
19761: #line 621 "third_party/libpg_query/grammar/statements/select.y"
19762:     { (yyval.ival) = 0; ;}
19763:     break;
19764: 
19765:   case 556:
19766: #line 646 "third_party/libpg_query/grammar/statements/select.y"
19767:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
19768:     break;
19769: 
19770:   case 557:
19771: #line 648 "third_party/libpg_query/grammar/statements/select.y"
19772:     {
19773: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
19774: 					(yyval.list) = list_make1(node);
19775: 				;}
19776:     break;
19777: 
19778:   case 558:
19779: #line 653 "third_party/libpg_query/grammar/statements/select.y"
19780:     {
19781: 					PGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));
19782: 					(yyval.list) = list_make1(node);
19783: 				;}
19784:     break;
19785: 
19786:   case 559:
19787: #line 657 "third_party/libpg_query/grammar/statements/select.y"
19788:     { (yyval.list) = NIL; ;}
19789:     break;
19790: 
19791:   case 560:
19792: #line 661 "third_party/libpg_query/grammar/statements/select.y"
19793:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19794:     break;
19795: 
19796:   case 561:
19797: #line 662 "third_party/libpg_query/grammar/statements/select.y"
19798:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}
19799:     break;
19800: 
19801:   case 562:
19802: #line 666 "third_party/libpg_query/grammar/statements/select.y"
19803:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19804:     break;
19805: 
19806:   case 563:
19807: #line 667 "third_party/libpg_query/grammar/statements/select.y"
19808:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
19809:     break;
19810: 
19811:   case 564:
19812: #line 671 "third_party/libpg_query/grammar/statements/select.y"
19813:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19814:     break;
19815: 
19816:   case 565:
19817: #line 672 "third_party/libpg_query/grammar/statements/select.y"
19818:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19819:     break;
19820: 
19821:   case 566:
19822: #line 673 "third_party/libpg_query/grammar/statements/select.y"
19823:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19824:     break;
19825: 
19826:   case 567:
19827: #line 674 "third_party/libpg_query/grammar/statements/select.y"
19828:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19829:     break;
19830: 
19831:   case 568:
19832: #line 675 "third_party/libpg_query/grammar/statements/select.y"
19833:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
19834:     break;
19835: 
19836:   case 569:
19837: #line 680 "third_party/libpg_query/grammar/statements/select.y"
19838:     {
19839: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));
19840: 				;}
19841:     break;
19842: 
19843:   case 570:
19844: #line 693 "third_party/libpg_query/grammar/statements/select.y"
19845:     {
19846: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
19847: 				;}
19848:     break;
19849: 
19850:   case 571:
19851: #line 700 "third_party/libpg_query/grammar/statements/select.y"
19852:     {
19853: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
19854: 				;}
19855:     break;
19856: 
19857:   case 572:
19858: #line 707 "third_party/libpg_query/grammar/statements/select.y"
19859:     {
19860: 					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
19861: 				;}
19862:     break;
19863: 
19864:   case 573:
19865: #line 713 "third_party/libpg_query/grammar/statements/select.y"
19866:     { (yyval.node) = NULL; ;}
19867:     break;
19868: 
19869:   case 574:
19870: #line 714 "third_party/libpg_query/grammar/statements/select.y"
19871:     { (yyval.node) = NULL; ;}
19872:     break;
19873: 
19874:   case 575:
19875: #line 718 "third_party/libpg_query/grammar/statements/select.y"
19876:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19877:     break;
19878: 
19879:   case 576:
19880: #line 719 "third_party/libpg_query/grammar/statements/select.y"
19881:     { (yyval.node) = NULL; ;}
19882:     break;
19883: 
19884:   case 577:
19885: #line 723 "third_party/libpg_query/grammar/statements/select.y"
19886:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
19887:     break;
19888: 
19889:   case 578:
19890: #line 724 "third_party/libpg_query/grammar/statements/select.y"
19891:     { (yyval.node) = NULL; ;}
19892:     break;
19893: 
19894:   case 579:
19895: #line 728 "third_party/libpg_query/grammar/statements/select.y"
19896:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19897:     break;
19898: 
19899:   case 580:
19900: #line 729 "third_party/libpg_query/grammar/statements/select.y"
19901:     { (yyval.list) = NIL; ;}
19902:     break;
19903: 
19904:   case 581:
19905: #line 733 "third_party/libpg_query/grammar/statements/select.y"
19906:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
19907:     break;
19908: 
19909:   case 582:
19910: #line 734 "third_party/libpg_query/grammar/statements/select.y"
19911:     { (yyval.list) = NIL; ;}
19912:     break;
19913: 
19914:   case 583:
19915: #line 738 "third_party/libpg_query/grammar/statements/select.y"
19916:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
19917:     break;
19918: 
19919:   case 584:
19920: #line 739 "third_party/libpg_query/grammar/statements/select.y"
19921:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
19922:     break;
19923: 
19924:   case 585:
19925: #line 744 "third_party/libpg_query/grammar/statements/select.y"
19926:     {
19927: 					PGLockingClause *n = makeNode(PGLockingClause);
19928: 					n->lockedRels = (yyvsp[(2) - (3)].list);
19929: 					n->strength = (yyvsp[(1) - (3)].lockstrength);
19930: 					n->waitPolicy = (yyvsp[(3) - (3)].lockwaitpolicy);
19931: 					(yyval.node) = (PGNode *) n;
19932: 				;}
19933:     break;
19934: 
19935:   case 586:
19936: #line 754 "third_party/libpg_query/grammar/statements/select.y"
19937:     { (yyval.lockstrength) = LCS_FORUPDATE; ;}
19938:     break;
19939: 
19940:   case 587:
19941: #line 755 "third_party/libpg_query/grammar/statements/select.y"
19942:     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}
19943:     break;
19944: 
19945:   case 588:
19946: #line 756 "third_party/libpg_query/grammar/statements/select.y"
19947:     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}
19948:     break;
19949: 
19950:   case 589:
19951: #line 757 "third_party/libpg_query/grammar/statements/select.y"
19952:     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}
19953:     break;
19954: 
19955:   case 590:
19956: #line 761 "third_party/libpg_query/grammar/statements/select.y"
19957:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
19958:     break;
19959: 
19960:   case 591:
19961: #line 762 "third_party/libpg_query/grammar/statements/select.y"
19962:     { (yyval.list) = NIL; ;}
19963:     break;
19964: 
19965:   case 592:
19966: #line 767 "third_party/libpg_query/grammar/statements/select.y"
19967:     { (yyval.lockwaitpolicy) = LockWaitError; ;}
19968:     break;
19969: 
19970:   case 593:
19971: #line 768 "third_party/libpg_query/grammar/statements/select.y"
19972:     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}
19973:     break;
19974: 
19975:   case 594:
19976: #line 769 "third_party/libpg_query/grammar/statements/select.y"
19977:     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}
19978:     break;
19979: 
19980:   case 595:
19981: #line 779 "third_party/libpg_query/grammar/statements/select.y"
19982:     {
19983: 					PGSelectStmt *n = makeNode(PGSelectStmt);
19984: 					n->valuesLists = list_make1((yyvsp[(3) - (4)].list));
19985: 					(yyval.node) = (PGNode *) n;
19986: 				;}
19987:     break;
19988: 
19989:   case 596:
19990: #line 785 "third_party/libpg_query/grammar/statements/select.y"
19991:     {
19992: 					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);
19993: 					n->valuesLists = lappend(n->valuesLists, (yyvsp[(4) - (5)].list));
19994: 					(yyval.node) = (PGNode *) n;
19995: 				;}
19996:     break;
19997: 
19998:   case 597:
19999: #line 793 "third_party/libpg_query/grammar/statements/select.y"
20000:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
20001:     break;
20002: 
20003:   case 598:
20004: #line 794 "third_party/libpg_query/grammar/statements/select.y"
20005:     { (yyval.node) = (yyvsp[(1) - (2)].node); ;}
20006:     break;
20007: 
20008:   case 599:
20009: #line 807 "third_party/libpg_query/grammar/statements/select.y"
20010:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
20011:     break;
20012: 
20013:   case 600:
20014: #line 808 "third_party/libpg_query/grammar/statements/select.y"
20015:     { (yyval.list) = NIL; ;}
20016:     break;
20017: 
20018:   case 601:
20019: #line 812 "third_party/libpg_query/grammar/statements/select.y"
20020:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
20021:     break;
20022: 
20023:   case 602:
20024: #line 813 "third_party/libpg_query/grammar/statements/select.y"
20025:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
20026:     break;
20027: 
20028:   case 603:
20029: #line 817 "third_party/libpg_query/grammar/statements/select.y"
20030:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
20031:     break;
20032: 
20033:   case 604:
20034: #line 818 "third_party/libpg_query/grammar/statements/select.y"
20035:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
20036:     break;
20037: 
20038:   case 605:
20039: #line 825 "third_party/libpg_query/grammar/statements/select.y"
20040:     {
20041: 					(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);
20042: 					(yyvsp[(1) - (3)].range)->sample = (yyvsp[(3) - (3)].node);
20043: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (3)].range);
20044: 				;}
20045:     break;
20046: 
20047:   case 606:
20048: #line 831 "third_party/libpg_query/grammar/statements/select.y"
20049:     {
20050: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);
20051: 					n->alias = (PGAlias*) linitial((yyvsp[(2) - (3)].list));
20052: 					n->coldeflist = (PGList*) lsecond((yyvsp[(2) - (3)].list));
20053: 					n->sample = (yyvsp[(3) - (3)].node);
20054: 					(yyval.node) = (PGNode *) n;
20055: 				;}
20056:     break;
20057: 
20058:   case 607:
20059: #line 839 "third_party/libpg_query/grammar/statements/select.y"
20060:     {
20061: 					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);
20062: 					n->lateral = true;
20063: 					n->alias = (PGAlias*) linitial((yyvsp[(3) - (3)].list));
20064: 					n->coldeflist = (PGList*) lsecond((yyvsp[(3) - (3)].list));
20065: 					(yyval.node) = (PGNode *) n;
20066: 				;}
20067:     break;
20068: 
20069:   case 608:
20070: #line 847 "third_party/libpg_query/grammar/statements/select.y"
20071:     {
20072: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
20073: 					n->lateral = false;
20074: 					n->subquery = (yyvsp[(1) - (3)].node);
20075: 					n->alias = (yyvsp[(2) - (3)].alias);
20076: 					n->sample = (yyvsp[(3) - (3)].node);
20077: 					(yyval.node) = (PGNode *) n;
20078: 				;}
20079:     break;
20080: 
20081:   case 609:
20082: #line 856 "third_party/libpg_query/grammar/statements/select.y"
20083:     {
20084: 					PGRangeSubselect *n = makeNode(PGRangeSubselect);
20085: 					n->lateral = true;
20086: 					n->subquery = (yyvsp[(2) - (3)].node);
20087: 					n->alias = (yyvsp[(3) - (3)].alias);
20088: 					n->sample = NULL;
20089: 					(yyval.node) = (PGNode *) n;
20090: 				;}
20091:     break;
20092: 
20093:   case 610:
20094: #line 865 "third_party/libpg_query/grammar/statements/select.y"
20095:     {
20096: 					(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);
20097: 				;}
20098:     break;
20099: 
20100:   case 611:
20101: #line 869 "third_party/libpg_query/grammar/statements/select.y"
20102:     {
20103: 					(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);
20104: 					(yyval.node) = (PGNode *) (yyvsp[(2) - (4)].jexpr);
20105: 				;}
20106:     break;
20107: 
20108:   case 612:
20109: #line 895 "third_party/libpg_query/grammar/statements/select.y"
20110:     {
20111: 					(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);
20112: 				;}
20113:     break;
20114: 
20115:   case 613:
20116: #line 899 "third_party/libpg_query/grammar/statements/select.y"
20117:     {
20118: 					/* CROSS JOIN is same as unqualified inner join */
20119: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20120: 					n->jointype = PG_JOIN_INNER;
20121: 					n->isNatural = false;
20122: 					n->larg = (yyvsp[(1) - (4)].node);
20123: 					n->rarg = (yyvsp[(4) - (4)].node);
20124: 					n->usingClause = NIL;
20125: 					n->quals = NULL;
20126: 					n->location = (yylsp[(2) - (4)]);
20127: 					(yyval.jexpr) = n;
20128: 				;}
20129:     break;
20130: 
20131:   case 614:
20132: #line 912 "third_party/libpg_query/grammar/statements/select.y"
20133:     {
20134: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20135: 					n->jointype = (yyvsp[(2) - (5)].jtype);
20136: 					n->isNatural = false;
20137: 					n->larg = (yyvsp[(1) - (5)].node);
20138: 					n->rarg = (yyvsp[(4) - (5)].node);
20139: 					if ((yyvsp[(5) - (5)].node) != NULL && IsA((yyvsp[(5) - (5)].node), PGList))
20140: 						n->usingClause = (PGList *) (yyvsp[(5) - (5)].node); /* USING clause */
20141: 					else
20142: 						n->quals = (yyvsp[(5) - (5)].node); /* ON clause */
20143: 					n->location = (yylsp[(2) - (5)]);
20144: 					(yyval.jexpr) = n;
20145: 				;}
20146:     break;
20147: 
20148:   case 615:
20149: #line 926 "third_party/libpg_query/grammar/statements/select.y"
20150:     {
20151: 					/* letting join_type reduce to empty doesn't work */
20152: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20153: 					n->jointype = PG_JOIN_INNER;
20154: 					n->isNatural = false;
20155: 					n->larg = (yyvsp[(1) - (4)].node);
20156: 					n->rarg = (yyvsp[(3) - (4)].node);
20157: 					if ((yyvsp[(4) - (4)].node) != NULL && IsA((yyvsp[(4) - (4)].node), PGList))
20158: 						n->usingClause = (PGList *) (yyvsp[(4) - (4)].node); /* USING clause */
20159: 					else
20160: 						n->quals = (yyvsp[(4) - (4)].node); /* ON clause */
20161: 					n->location = (yylsp[(2) - (4)]);
20162: 					(yyval.jexpr) = n;
20163: 				;}
20164:     break;
20165: 
20166:   case 616:
20167: #line 941 "third_party/libpg_query/grammar/statements/select.y"
20168:     {
20169: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20170: 					n->jointype = (yyvsp[(3) - (5)].jtype);
20171: 					n->isNatural = true;
20172: 					n->larg = (yyvsp[(1) - (5)].node);
20173: 					n->rarg = (yyvsp[(5) - (5)].node);
20174: 					n->usingClause = NIL; /* figure out which columns later... */
20175: 					n->quals = NULL; /* fill later */
20176: 					n->location = (yylsp[(2) - (5)]);
20177: 					(yyval.jexpr) = n;
20178: 				;}
20179:     break;
20180: 
20181:   case 617:
20182: #line 953 "third_party/libpg_query/grammar/statements/select.y"
20183:     {
20184: 					/* letting join_type reduce to empty doesn't work */
20185: 					PGJoinExpr *n = makeNode(PGJoinExpr);
20186: 					n->jointype = PG_JOIN_INNER;
20187: 					n->isNatural = true;
20188: 					n->larg = (yyvsp[(1) - (4)].node);
20189: 					n->rarg = (yyvsp[(4) - (4)].node);
20190: 					n->usingClause = NIL; /* figure out which columns later... */
20191: 					n->quals = NULL; /* fill later */
20192: 					n->location = (yylsp[(2) - (4)]);
20193: 					(yyval.jexpr) = n;
20194: 				;}
20195:     break;
20196: 
20197:   case 618:
20198: #line 969 "third_party/libpg_query/grammar/statements/select.y"
20199:     {
20200: 					(yyval.alias) = makeNode(PGAlias);
20201: 					(yyval.alias)->aliasname = (yyvsp[(2) - (5)].str);
20202: 					(yyval.alias)->colnames = (yyvsp[(4) - (5)].list);
20203: 				;}
20204:     break;
20205: 
20206:   case 619:
20207: #line 975 "third_party/libpg_query/grammar/statements/select.y"
20208:     {
20209: 					(yyval.alias) = makeNode(PGAlias);
20210: 					(yyval.alias)->aliasname = (yyvsp[(2) - (2)].str);
20211: 				;}
20212:     break;
20213: 
20214:   case 620:
20215: #line 980 "third_party/libpg_query/grammar/statements/select.y"
20216:     {
20217: 					(yyval.alias) = makeNode(PGAlias);
20218: 					(yyval.alias)->aliasname = (yyvsp[(1) - (4)].str);
20219: 					(yyval.alias)->colnames = (yyvsp[(3) - (4)].list);
20220: 				;}
20221:     break;
20222: 
20223:   case 621:
20224: #line 986 "third_party/libpg_query/grammar/statements/select.y"
20225:     {
20226: 					(yyval.alias) = makeNode(PGAlias);
20227: 					(yyval.alias)->aliasname = (yyvsp[(1) - (1)].str);
20228: 				;}
20229:     break;
20230: 
20231:   case 622:
20232: #line 992 "third_party/libpg_query/grammar/statements/select.y"
20233:     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}
20234:     break;
20235: 
20236:   case 623:
20237: #line 993 "third_party/libpg_query/grammar/statements/select.y"
20238:     { (yyval.alias) = NULL; ;}
20239:     break;
20240: 
20241:   case 624:
20242: #line 1002 "third_party/libpg_query/grammar/statements/select.y"
20243:     {
20244: 					(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);
20245: 				;}
20246:     break;
20247: 
20248:   case 625:
20249: #line 1006 "third_party/libpg_query/grammar/statements/select.y"
20250:     {
20251: 					(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));
20252: 				;}
20253:     break;
20254: 
20255:   case 626:
20256: #line 1010 "third_party/libpg_query/grammar/statements/select.y"
20257:     {
20258: 					PGAlias *a = makeNode(PGAlias);
20259: 					a->aliasname = (yyvsp[(2) - (5)].str);
20260: 					(yyval.list) = list_make2(a, (yyvsp[(4) - (5)].list));
20261: 				;}
20262:     break;
20263: 
20264:   case 627:
20265: #line 1016 "third_party/libpg_query/grammar/statements/select.y"
20266:     {
20267: 					PGAlias *a = makeNode(PGAlias);
20268: 					a->aliasname = (yyvsp[(1) - (4)].str);
20269: 					(yyval.list) = list_make2(a, (yyvsp[(3) - (4)].list));
20270: 				;}
20271:     break;
20272: 
20273:   case 628:
20274: #line 1022 "third_party/libpg_query/grammar/statements/select.y"
20275:     {
20276: 					(yyval.list) = list_make2(NULL, NIL);
20277: 				;}
20278:     break;
20279: 
20280:   case 629:
20281: #line 1027 "third_party/libpg_query/grammar/statements/select.y"
20282:     { (yyval.jtype) = PG_JOIN_FULL; ;}
20283:     break;
20284: 
20285:   case 630:
20286: #line 1028 "third_party/libpg_query/grammar/statements/select.y"
20287:     { (yyval.jtype) = PG_JOIN_LEFT; ;}
20288:     break;
20289: 
20290:   case 631:
20291: #line 1029 "third_party/libpg_query/grammar/statements/select.y"
20292:     { (yyval.jtype) = PG_JOIN_RIGHT; ;}
20293:     break;
20294: 
20295:   case 632:
20296: #line 1030 "third_party/libpg_query/grammar/statements/select.y"
20297:     { (yyval.jtype) = PG_JOIN_INNER; ;}
20298:     break;
20299: 
20300:   case 633:
20301: #line 1034 "third_party/libpg_query/grammar/statements/select.y"
20302:     { (yyval.node) = NULL; ;}
20303:     break;
20304: 
20305:   case 634:
20306: #line 1035 "third_party/libpg_query/grammar/statements/select.y"
20307:     { (yyval.node) = NULL; ;}
20308:     break;
20309: 
20310:   case 635:
20311: #line 1047 "third_party/libpg_query/grammar/statements/select.y"
20312:     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}
20313:     break;
20314: 
20315:   case 636:
20316: #line 1048 "third_party/libpg_query/grammar/statements/select.y"
20317:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
20318:     break;
20319: 
20320:   case 637:
20321: #line 1054 "third_party/libpg_query/grammar/statements/select.y"
20322:     {
20323: 					/* inheritance query, implicitly */
20324: 					(yyval.range) = (yyvsp[(1) - (1)].range);
20325: 					(yyval.range)->inh = true;
20326: 					(yyval.range)->alias = NULL;
20327: 				;}
20328:     break;
20329: 
20330:   case 638:
20331: #line 1061 "third_party/libpg_query/grammar/statements/select.y"
20332:     {
20333: 					/* inheritance query, explicitly */
20334: 					(yyval.range) = (yyvsp[(1) - (2)].range);
20335: 					(yyval.range)->inh = true;
20336: 					(yyval.range)->alias = NULL;
20337: 				;}
20338:     break;
20339: 
20340:   case 639:
20341: #line 1068 "third_party/libpg_query/grammar/statements/select.y"
20342:     {
20343: 					/* no inheritance */
20344: 					(yyval.range) = (yyvsp[(2) - (2)].range);
20345: 					(yyval.range)->inh = false;
20346: 					(yyval.range)->alias = NULL;
20347: 				;}
20348:     break;
20349: 
20350:   case 640:
20351: #line 1075 "third_party/libpg_query/grammar/statements/select.y"
20352:     {
20353: 					/* no inheritance, SQL99-style syntax */
20354: 					(yyval.range) = (yyvsp[(3) - (4)].range);
20355: 					(yyval.range)->inh = false;
20356: 					(yyval.range)->alias = NULL;
20357: 				;}
20358:     break;
20359: 
20360:   case 641:
20361: #line 1107 "third_party/libpg_query/grammar/statements/select.y"
20362:     {
20363: 					PGRangeFunction *n = makeNode(PGRangeFunction);
20364: 					n->lateral = false;
20365: 					n->ordinality = (yyvsp[(2) - (2)].boolean);
20366: 					n->is_rowsfrom = false;
20367: 					n->functions = list_make1(list_make2((yyvsp[(1) - (2)].node), NIL));
20368: 					n->sample = NULL;
20369: 					/* alias and coldeflist are set by table_ref production */
20370: 					(yyval.node) = (PGNode *) n;
20371: 				;}
20372:     break;
20373: 
20374:   case 642:
20375: #line 1118 "third_party/libpg_query/grammar/statements/select.y"
20376:     {
20377: 					PGRangeFunction *n = makeNode(PGRangeFunction);
20378: 					n->lateral = false;
20379: 					n->ordinality = (yyvsp[(6) - (6)].boolean);
20380: 					n->is_rowsfrom = true;
20381: 					n->functions = (yyvsp[(4) - (6)].list);
20382: 					n->sample = NULL;
20383: 					/* alias and coldeflist are set by table_ref production */
20384: 					(yyval.node) = (PGNode *) n;
20385: 				;}
20386:     break;
20387: 
20388:   case 643:
20389: #line 1131 "third_party/libpg_query/grammar/statements/select.y"
20390:     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}
20391:     break;
20392: 
20393:   case 644:
20394: #line 1135 "third_party/libpg_query/grammar/statements/select.y"
20395:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
20396:     break;
20397: 
20398:   case 645:
20399: #line 1136 "third_party/libpg_query/grammar/statements/select.y"
20400:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
20401:     break;
20402: 
20403:   case 646:
20404: #line 1139 "third_party/libpg_query/grammar/statements/select.y"
20405:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
20406:     break;
20407: 
20408:   case 647:
20409: #line 1140 "third_party/libpg_query/grammar/statements/select.y"
20410:     { (yyval.list) = NIL; ;}
20411:     break;
20412: 
20413:   case 648:
20414: #line 1143 "third_party/libpg_query/grammar/statements/select.y"
20415:     { (yyval.boolean) = true; ;}
20416:     break;
20417: 
20418:   case 649:
20419: #line 1144 "third_party/libpg_query/grammar/statements/select.y"
20420:     { (yyval.boolean) = false; ;}
20421:     break;
20422: 
20423:   case 650:
20424: #line 1149 "third_party/libpg_query/grammar/statements/select.y"
20425:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
20426:     break;
20427: 
20428:   case 651:
20429: #line 1150 "third_party/libpg_query/grammar/statements/select.y"
20430:     { (yyval.node) = NULL; ;}
20431:     break;
20432: 
20433:   case 652:
20434: #line 1156 "third_party/libpg_query/grammar/statements/select.y"
20435:     {
20436: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
20437: 				;}
20438:     break;
20439: 
20440:   case 653:
20441: #line 1160 "third_party/libpg_query/grammar/statements/select.y"
20442:     {
20443: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
20444: 				;}
20445:     break;
20446: 
20447:   case 654:
20448: #line 1166 "third_party/libpg_query/grammar/statements/select.y"
20449:     {
20450: 					PGColumnDef *n = makeNode(PGColumnDef);
20451: 					n->colname = (yyvsp[(1) - (3)].str);
20452: 					n->typeName = (yyvsp[(2) - (3)].typnam);
20453: 					n->inhcount = 0;
20454: 					n->is_local = true;
20455: 					n->is_not_null = false;
20456: 					n->is_from_type = false;
20457: 					n->storage = 0;
20458: 					n->raw_default = NULL;
20459: 					n->cooked_default = NULL;
20460: 					n->collClause = (PGCollateClause *) (yyvsp[(3) - (3)].node);
20461: 					n->collOid = InvalidOid;
20462: 					n->constraints = NIL;
20463: 					n->location = (yylsp[(1) - (3)]);
20464: 					(yyval.node) = (PGNode *)n;
20465: 				;}
20466:     break;
20467: 
20468:   case 655:
20469: #line 1187 "third_party/libpg_query/grammar/statements/select.y"
20470:     {
20471: 					PGCollateClause *n = makeNode(PGCollateClause);
20472: 					n->arg = NULL;
20473: 					n->collname = (yyvsp[(2) - (2)].list);
20474: 					n->location = (yylsp[(1) - (2)]);
20475: 					(yyval.node) = (PGNode *) n;
20476: 				;}
20477:     break;
20478: 
20479:   case 656:
20480: #line 1194 "third_party/libpg_query/grammar/statements/select.y"
20481:     { (yyval.node) = NULL; ;}
20482:     break;
20483: 
20484:   case 657:
20485: #line 1207 "third_party/libpg_query/grammar/statements/select.y"
20486:     {
20487:              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));
20488:             ;}
20489:     break;
20490: 
20491:   case 658:
20492: #line 1210 "third_party/libpg_query/grammar/statements/select.y"
20493:     {
20494:              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));
20495:             ;}
20496:     break;
20497: 
20498:   case 661:
20499: #line 1217 "third_party/libpg_query/grammar/statements/select.y"
20500:     {
20501: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20502: 					(yyval.typnam)->arrayBounds = (yyvsp[(2) - (2)].list);
20503: 				;}
20504:     break;
20505: 
20506:   case 662:
20507: #line 1222 "third_party/libpg_query/grammar/statements/select.y"
20508:     {
20509: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
20510: 					(yyval.typnam)->arrayBounds = (yyvsp[(3) - (3)].list);
20511: 					(yyval.typnam)->setof = true;
20512: 				;}
20513:     break;
20514: 
20515:   case 663:
20516: #line 1229 "third_party/libpg_query/grammar/statements/select.y"
20517:     {
20518: 					(yyval.typnam) = (yyvsp[(1) - (5)].typnam);
20519: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(4) - (5)].ival)));
20520: 				;}
20521:     break;
20522: 
20523:   case 664:
20524: #line 1234 "third_party/libpg_query/grammar/statements/select.y"
20525:     {
20526: 					(yyval.typnam) = (yyvsp[(2) - (6)].typnam);
20527: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[(5) - (6)].ival)));
20528: 					(yyval.typnam)->setof = true;
20529: 				;}
20530:     break;
20531: 
20532:   case 665:
20533: #line 1240 "third_party/libpg_query/grammar/statements/select.y"
20534:     {
20535: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20536: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
20537: 				;}
20538:     break;
20539: 
20540:   case 666:
20541: #line 1245 "third_party/libpg_query/grammar/statements/select.y"
20542:     {
20543: 					(yyval.typnam) = (yyvsp[(2) - (3)].typnam);
20544: 					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
20545: 					(yyval.typnam)->setof = true;
20546: 				;}
20547:     break;
20548: 
20549:   case 667:
20550: #line 1250 "third_party/libpg_query/grammar/statements/select.y"
20551:     {
20552:                (yyval.typnam) = SystemTypeName("struct");
20553:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
20554:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
20555:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
20556:                ;}
20557:     break;
20558: 
20559:   case 668:
20560: #line 1256 "third_party/libpg_query/grammar/statements/select.y"
20561:     {
20562:                (yyval.typnam) = SystemTypeName("map");
20563:                (yyval.typnam)->arrayBounds = (yyvsp[(5) - (5)].list);
20564:                (yyval.typnam)->typmods = (yyvsp[(3) - (5)].list);
20565:                (yyval.typnam)->location = (yylsp[(1) - (5)]);
20566: 			;}
20567:     break;
20568: 
20569:   case 669:
20570: #line 1266 "third_party/libpg_query/grammar/statements/select.y"
20571:     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}
20572:     break;
20573: 
20574:   case 670:
20575: #line 1268 "third_party/libpg_query/grammar/statements/select.y"
20576:     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}
20577:     break;
20578: 
20579:   case 671:
20580: #line 1270 "third_party/libpg_query/grammar/statements/select.y"
20581:     {  (yyval.list) = NIL; ;}
20582:     break;
20583: 
20584:   case 672:
20585: #line 1274 "third_party/libpg_query/grammar/statements/select.y"
20586:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20587:     break;
20588: 
20589:   case 673:
20590: #line 1275 "third_party/libpg_query/grammar/statements/select.y"
20591:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20592:     break;
20593: 
20594:   case 674:
20595: #line 1276 "third_party/libpg_query/grammar/statements/select.y"
20596:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20597:     break;
20598: 
20599:   case 675:
20600: #line 1277 "third_party/libpg_query/grammar/statements/select.y"
20601:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20602:     break;
20603: 
20604:   case 676:
20605: #line 1278 "third_party/libpg_query/grammar/statements/select.y"
20606:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20607:     break;
20608: 
20609:   case 677:
20610: #line 1280 "third_party/libpg_query/grammar/statements/select.y"
20611:     {
20612: 					(yyval.typnam) = (yyvsp[(1) - (2)].typnam);
20613: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20614: 				;}
20615:     break;
20616: 
20617:   case 678:
20618: #line 1285 "third_party/libpg_query/grammar/statements/select.y"
20619:     {
20620: 					(yyval.typnam) = (yyvsp[(1) - (4)].typnam);
20621: 					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
20622: 											 makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
20623: 				;}
20624:     break;
20625: 
20626:   case 679:
20627: #line 1304 "third_party/libpg_query/grammar/statements/select.y"
20628:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20629:     break;
20630: 
20631:   case 680:
20632: #line 1305 "third_party/libpg_query/grammar/statements/select.y"
20633:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20634:     break;
20635: 
20636:   case 681:
20637: #line 1306 "third_party/libpg_query/grammar/statements/select.y"
20638:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20639:     break;
20640: 
20641:   case 682:
20642: #line 1307 "third_party/libpg_query/grammar/statements/select.y"
20643:     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}
20644:     break;
20645: 
20646:   case 683:
20647: #line 1319 "third_party/libpg_query/grammar/statements/select.y"
20648:     {
20649: 					(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));
20650: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20651: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20652: 				;}
20653:     break;
20654: 
20655:   case 684:
20656: #line 1332 "third_party/libpg_query/grammar/statements/select.y"
20657:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
20658:     break;
20659: 
20660:   case 685:
20661: #line 1333 "third_party/libpg_query/grammar/statements/select.y"
20662:     { (yyval.list) = NIL; ;}
20663:     break;
20664: 
20665:   case 686:
20666: #line 1340 "third_party/libpg_query/grammar/statements/select.y"
20667:     {
20668: 					(yyval.typnam) = SystemTypeName("int4");
20669: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20670: 				;}
20671:     break;
20672: 
20673:   case 687:
20674: #line 1345 "third_party/libpg_query/grammar/statements/select.y"
20675:     {
20676: 					(yyval.typnam) = SystemTypeName("int4");
20677: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20678: 				;}
20679:     break;
20680: 
20681:   case 688:
20682: #line 1350 "third_party/libpg_query/grammar/statements/select.y"
20683:     {
20684: 					(yyval.typnam) = SystemTypeName("int2");
20685: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20686: 				;}
20687:     break;
20688: 
20689:   case 689:
20690: #line 1355 "third_party/libpg_query/grammar/statements/select.y"
20691:     {
20692: 					(yyval.typnam) = SystemTypeName("int8");
20693: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20694: 				;}
20695:     break;
20696: 
20697:   case 690:
20698: #line 1360 "third_party/libpg_query/grammar/statements/select.y"
20699:     {
20700: 					(yyval.typnam) = SystemTypeName("float4");
20701: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20702: 				;}
20703:     break;
20704: 
20705:   case 691:
20706: #line 1365 "third_party/libpg_query/grammar/statements/select.y"
20707:     {
20708: 					(yyval.typnam) = (yyvsp[(2) - (2)].typnam);
20709: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20710: 				;}
20711:     break;
20712: 
20713:   case 692:
20714: #line 1370 "third_party/libpg_query/grammar/statements/select.y"
20715:     {
20716: 					(yyval.typnam) = SystemTypeName("float8");
20717: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20718: 				;}
20719:     break;
20720: 
20721:   case 693:
20722: #line 1375 "third_party/libpg_query/grammar/statements/select.y"
20723:     {
20724: 					(yyval.typnam) = SystemTypeName("numeric");
20725: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20726: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20727: 				;}
20728:     break;
20729: 
20730:   case 694:
20731: #line 1381 "third_party/libpg_query/grammar/statements/select.y"
20732:     {
20733: 					(yyval.typnam) = SystemTypeName("numeric");
20734: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20735: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20736: 				;}
20737:     break;
20738: 
20739:   case 695:
20740: #line 1387 "third_party/libpg_query/grammar/statements/select.y"
20741:     {
20742: 					(yyval.typnam) = SystemTypeName("numeric");
20743: 					(yyval.typnam)->typmods = (yyvsp[(2) - (2)].list);
20744: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20745: 				;}
20746:     break;
20747: 
20748:   case 696:
20749: #line 1393 "third_party/libpg_query/grammar/statements/select.y"
20750:     {
20751: 					(yyval.typnam) = SystemTypeName("bool");
20752: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20753: 				;}
20754:     break;
20755: 
20756:   case 697:
20757: #line 1400 "third_party/libpg_query/grammar/statements/select.y"
20758:     {
20759: 					/*
20760: 					 * Check FLOAT() precision limits assuming IEEE floating
20761: 					 * types - thomas 1997-09-18
20762: 					 */
20763: 					if ((yyvsp[(2) - (3)].ival) < 1)
20764: 						ereport(ERROR,
20765: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
20766: 								 errmsg("precision for type float must be at least 1 bit"),
20767: 								 parser_errposition((yylsp[(2) - (3)]))));
20768: 					else if ((yyvsp[(2) - (3)].ival) <= 24)
20769: 						(yyval.typnam) = SystemTypeName("float4");
20770: 					else if ((yyvsp[(2) - (3)].ival) <= 53)
20771: 						(yyval.typnam) = SystemTypeName("float8");
20772: 					else
20773: 						ereport(ERROR,
20774: 								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
20775: 								 errmsg("precision for type float must be less than 54 bits"),
20776: 								 parser_errposition((yylsp[(2) - (3)]))));
20777: 				;}
20778:     break;
20779: 
20780:   case 698:
20781: #line 1421 "third_party/libpg_query/grammar/statements/select.y"
20782:     {
20783: 					(yyval.typnam) = SystemTypeName("float4");
20784: 				;}
20785:     break;
20786: 
20787:   case 699:
20788: #line 1431 "third_party/libpg_query/grammar/statements/select.y"
20789:     {
20790: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20791: 				;}
20792:     break;
20793: 
20794:   case 700:
20795: #line 1435 "third_party/libpg_query/grammar/statements/select.y"
20796:     {
20797: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20798: 				;}
20799:     break;
20800: 
20801:   case 701:
20802: #line 1443 "third_party/libpg_query/grammar/statements/select.y"
20803:     {
20804: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20805: 				;}
20806:     break;
20807: 
20808:   case 702:
20809: #line 1447 "third_party/libpg_query/grammar/statements/select.y"
20810:     {
20811: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20812: 					(yyval.typnam)->typmods = NIL;
20813: 				;}
20814:     break;
20815: 
20816:   case 703:
20817: #line 1455 "third_party/libpg_query/grammar/statements/select.y"
20818:     {
20819: 					const char *typname;
20820: 
20821: 					typname = (yyvsp[(2) - (5)].boolean) ? "varbit" : "bit";
20822: 					(yyval.typnam) = SystemTypeName(typname);
20823: 					(yyval.typnam)->typmods = (yyvsp[(4) - (5)].list);
20824: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20825: 				;}
20826:     break;
20827: 
20828:   case 704:
20829: #line 1467 "third_party/libpg_query/grammar/statements/select.y"
20830:     {
20831: 					/* bit defaults to bit(1), varbit to no limit */
20832: 					if ((yyvsp[(2) - (2)].boolean))
20833: 					{
20834: 						(yyval.typnam) = SystemTypeName("varbit");
20835: 					}
20836: 					else
20837: 					{
20838: 						(yyval.typnam) = SystemTypeName("bit");
20839: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
20840: 					}
20841: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20842: 				;}
20843:     break;
20844: 
20845:   case 705:
20846: #line 1488 "third_party/libpg_query/grammar/statements/select.y"
20847:     {
20848: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20849: 				;}
20850:     break;
20851: 
20852:   case 706:
20853: #line 1492 "third_party/libpg_query/grammar/statements/select.y"
20854:     {
20855: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20856: 				;}
20857:     break;
20858: 
20859:   case 707:
20860: #line 1498 "third_party/libpg_query/grammar/statements/select.y"
20861:     {
20862: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20863: 				;}
20864:     break;
20865: 
20866:   case 708:
20867: #line 1502 "third_party/libpg_query/grammar/statements/select.y"
20868:     {
20869: 					/* Length was not specified so allow to be unrestricted.
20870: 					 * This handles problems with fixed-length (bpchar) strings
20871: 					 * which in column definitions must default to a length
20872: 					 * of one, but should not be constrained if the length
20873: 					 * was not specified.
20874: 					 */
20875: 					(yyval.typnam) = (yyvsp[(1) - (1)].typnam);
20876: 					(yyval.typnam)->typmods = NIL;
20877: 				;}
20878:     break;
20879: 
20880:   case 709:
20881: #line 1515 "third_party/libpg_query/grammar/statements/select.y"
20882:     {
20883: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));
20884: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (4)].ival), (yylsp[(3) - (4)])));
20885: 					(yyval.typnam)->location = (yylsp[(1) - (4)]);
20886: 				;}
20887:     break;
20888: 
20889:   case 710:
20890: #line 1523 "third_party/libpg_query/grammar/statements/select.y"
20891:     {
20892: 					(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));
20893: 					/* char defaults to char(1), varchar to no limit */
20894: 					if (strcmp((yyvsp[(1) - (1)].conststr), "bpchar") == 0)
20895: 						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
20896: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20897: 				;}
20898:     break;
20899: 
20900:   case 711:
20901: #line 1533 "third_party/libpg_query/grammar/statements/select.y"
20902:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20903:     break;
20904: 
20905:   case 712:
20906: #line 1535 "third_party/libpg_query/grammar/statements/select.y"
20907:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20908:     break;
20909: 
20910:   case 713:
20911: #line 1537 "third_party/libpg_query/grammar/statements/select.y"
20912:     { (yyval.conststr) = "varchar"; ;}
20913:     break;
20914: 
20915:   case 714:
20916: #line 1539 "third_party/libpg_query/grammar/statements/select.y"
20917:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20918:     break;
20919: 
20920:   case 715:
20921: #line 1541 "third_party/libpg_query/grammar/statements/select.y"
20922:     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? "varchar": "bpchar"; ;}
20923:     break;
20924: 
20925:   case 716:
20926: #line 1543 "third_party/libpg_query/grammar/statements/select.y"
20927:     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? "varchar": "bpchar"; ;}
20928:     break;
20929: 
20930:   case 717:
20931: #line 1547 "third_party/libpg_query/grammar/statements/select.y"
20932:     { (yyval.boolean) = true; ;}
20933:     break;
20934: 
20935:   case 718:
20936: #line 1548 "third_party/libpg_query/grammar/statements/select.y"
20937:     { (yyval.boolean) = false; ;}
20938:     break;
20939: 
20940:   case 719:
20941: #line 1556 "third_party/libpg_query/grammar/statements/select.y"
20942:     {
20943: 					if ((yyvsp[(5) - (5)].boolean))
20944: 						(yyval.typnam) = SystemTypeName("timestamptz");
20945: 					else
20946: 						(yyval.typnam) = SystemTypeName("timestamp");
20947: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20948: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20949: 				;}
20950:     break;
20951: 
20952:   case 720:
20953: #line 1565 "third_party/libpg_query/grammar/statements/select.y"
20954:     {
20955: 					if ((yyvsp[(2) - (2)].boolean))
20956: 						(yyval.typnam) = SystemTypeName("timestamptz");
20957: 					else
20958: 						(yyval.typnam) = SystemTypeName("timestamp");
20959: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20960: 				;}
20961:     break;
20962: 
20963:   case 721:
20964: #line 1573 "third_party/libpg_query/grammar/statements/select.y"
20965:     {
20966: 					if ((yyvsp[(5) - (5)].boolean))
20967: 						(yyval.typnam) = SystemTypeName("timetz");
20968: 					else
20969: 						(yyval.typnam) = SystemTypeName("time");
20970: 					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
20971: 					(yyval.typnam)->location = (yylsp[(1) - (5)]);
20972: 				;}
20973:     break;
20974: 
20975:   case 722:
20976: #line 1582 "third_party/libpg_query/grammar/statements/select.y"
20977:     {
20978: 					if ((yyvsp[(2) - (2)].boolean))
20979: 						(yyval.typnam) = SystemTypeName("timetz");
20980: 					else
20981: 						(yyval.typnam) = SystemTypeName("time");
20982: 					(yyval.typnam)->location = (yylsp[(1) - (2)]);
20983: 				;}
20984:     break;
20985: 
20986:   case 723:
20987: #line 1593 "third_party/libpg_query/grammar/statements/select.y"
20988:     {
20989: 					(yyval.typnam) = SystemTypeName("interval");
20990: 					(yyval.typnam)->location = (yylsp[(1) - (1)]);
20991: 				;}
20992:     break;
20993: 
20994:   case 724:
20995: #line 1600 "third_party/libpg_query/grammar/statements/select.y"
20996:     { (yyval.boolean) = true; ;}
20997:     break;
20998: 
20999:   case 725:
21000: #line 1601 "third_party/libpg_query/grammar/statements/select.y"
21001:     { (yyval.boolean) = false; ;}
21002:     break;
21003: 
21004:   case 726:
21005: #line 1602 "third_party/libpg_query/grammar/statements/select.y"
21006:     { (yyval.boolean) = false; ;}
21007:     break;
21008: 
21009:   case 743:
21010: #line 1631 "third_party/libpg_query/grammar/statements/select.y"
21011:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}
21012:     break;
21013: 
21014:   case 744:
21015: #line 1633 "third_party/libpg_query/grammar/statements/select.y"
21016:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}
21017:     break;
21018: 
21019:   case 745:
21020: #line 1635 "third_party/libpg_query/grammar/statements/select.y"
21021:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}
21022:     break;
21023: 
21024:   case 746:
21025: #line 1637 "third_party/libpg_query/grammar/statements/select.y"
21026:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}
21027:     break;
21028: 
21029:   case 747:
21030: #line 1639 "third_party/libpg_query/grammar/statements/select.y"
21031:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}
21032:     break;
21033: 
21034:   case 748:
21035: #line 1641 "third_party/libpg_query/grammar/statements/select.y"
21036:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}
21037:     break;
21038: 
21039:   case 749:
21040: #line 1643 "third_party/libpg_query/grammar/statements/select.y"
21041:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}
21042:     break;
21043: 
21044:   case 750:
21045: #line 1645 "third_party/libpg_query/grammar/statements/select.y"
21046:     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}
21047:     break;
21048: 
21049:   case 751:
21050: #line 1647 "third_party/libpg_query/grammar/statements/select.y"
21051:     {
21052: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
21053: 												 INTERVAL_MASK(MONTH), (yylsp[(1) - (3)])));
21054: 				;}
21055:     break;
21056: 
21057:   case 752:
21058: #line 1652 "third_party/libpg_query/grammar/statements/select.y"
21059:     {
21060: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21061: 												 INTERVAL_MASK(HOUR), (yylsp[(1) - (3)])));
21062: 				;}
21063:     break;
21064: 
21065:   case 753:
21066: #line 1657 "third_party/libpg_query/grammar/statements/select.y"
21067:     {
21068: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21069: 												 INTERVAL_MASK(HOUR) |
21070: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
21071: 				;}
21072:     break;
21073: 
21074:   case 754:
21075: #line 1663 "third_party/libpg_query/grammar/statements/select.y"
21076:     {
21077: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
21078: 												 INTERVAL_MASK(HOUR) |
21079: 												 INTERVAL_MASK(MINUTE) |
21080: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21081: 				;}
21082:     break;
21083: 
21084:   case 755:
21085: #line 1670 "third_party/libpg_query/grammar/statements/select.y"
21086:     {
21087: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
21088: 												 INTERVAL_MASK(MINUTE), (yylsp[(1) - (3)])));
21089: 				;}
21090:     break;
21091: 
21092:   case 756:
21093: #line 1675 "third_party/libpg_query/grammar/statements/select.y"
21094:     {
21095: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
21096: 												 INTERVAL_MASK(MINUTE) |
21097: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21098: 				;}
21099:     break;
21100: 
21101:   case 757:
21102: #line 1681 "third_party/libpg_query/grammar/statements/select.y"
21103:     {
21104: 					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
21105: 												 INTERVAL_MASK(SECOND), (yylsp[(1) - (3)])));
21106: 				;}
21107:     break;
21108: 
21109:   case 758:
21110: #line 1686 "third_party/libpg_query/grammar/statements/select.y"
21111:     { (yyval.list) = NIL; ;}
21112:     break;
21113: 
21114:   case 759:
21115: #line 1717 "third_party/libpg_query/grammar/statements/select.y"
21116:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21117:     break;
21118: 
21119:   case 760:
21120: #line 1720 "third_party/libpg_query/grammar/statements/select.y"
21121:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
21122:     break;
21123: 
21124:   case 761:
21125: #line 1722 "third_party/libpg_query/grammar/statements/select.y"
21126:     {
21127: 					PGCollateClause *n = makeNode(PGCollateClause);
21128: 					n->arg = (yyvsp[(1) - (3)].node);
21129: 					n->collname = (yyvsp[(3) - (3)].list);
21130: 					n->location = (yylsp[(2) - (3)]);
21131: 					(yyval.node) = (PGNode *) n;
21132: 				;}
21133:     break;
21134: 
21135:   case 762:
21136: #line 1730 "third_party/libpg_query/grammar/statements/select.y"
21137:     {
21138: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
21139: 											   list_make2((yyvsp[(5) - (5)].node), (yyvsp[(1) - (5)].node)),
21140: 											   (yylsp[(2) - (5)]));
21141: 				;}
21142:     break;
21143: 
21144:   case 763:
21145: #line 1745 "third_party/libpg_query/grammar/statements/select.y"
21146:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21147:     break;
21148: 
21149:   case 764:
21150: #line 1747 "third_party/libpg_query/grammar/statements/select.y"
21151:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21152:     break;
21153: 
21154:   case 765:
21155: #line 1749 "third_party/libpg_query/grammar/statements/select.y"
21156:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21157:     break;
21158: 
21159:   case 766:
21160: #line 1751 "third_party/libpg_query/grammar/statements/select.y"
21161:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21162:     break;
21163: 
21164:   case 767:
21165: #line 1753 "third_party/libpg_query/grammar/statements/select.y"
21166:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21167:     break;
21168: 
21169:   case 768:
21170: #line 1755 "third_party/libpg_query/grammar/statements/select.y"
21171:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21172:     break;
21173: 
21174:   case 769:
21175: #line 1757 "third_party/libpg_query/grammar/statements/select.y"
21176:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21177:     break;
21178: 
21179:   case 770:
21180: #line 1759 "third_party/libpg_query/grammar/statements/select.y"
21181:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21182:     break;
21183: 
21184:   case 771:
21185: #line 1761 "third_party/libpg_query/grammar/statements/select.y"
21186:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21187:     break;
21188: 
21189:   case 772:
21190: #line 1763 "third_party/libpg_query/grammar/statements/select.y"
21191:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21192:     break;
21193: 
21194:   case 773:
21195: #line 1765 "third_party/libpg_query/grammar/statements/select.y"
21196:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21197:     break;
21198: 
21199:   case 774:
21200: #line 1767 "third_party/libpg_query/grammar/statements/select.y"
21201:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21202:     break;
21203: 
21204:   case 775:
21205: #line 1769 "third_party/libpg_query/grammar/statements/select.y"
21206:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21207:     break;
21208: 
21209:   case 776:
21210: #line 1771 "third_party/libpg_query/grammar/statements/select.y"
21211:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21212:     break;
21213: 
21214:   case 777:
21215: #line 1774 "third_party/libpg_query/grammar/statements/select.y"
21216:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21217:     break;
21218: 
21219:   case 778:
21220: #line 1776 "third_party/libpg_query/grammar/statements/select.y"
21221:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21222:     break;
21223: 
21224:   case 779:
21225: #line 1778 "third_party/libpg_query/grammar/statements/select.y"
21226:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
21227:     break;
21228: 
21229:   case 780:
21230: #line 1781 "third_party/libpg_query/grammar/statements/select.y"
21231:     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21232:     break;
21233: 
21234:   case 781:
21235: #line 1783 "third_party/libpg_query/grammar/statements/select.y"
21236:     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21237:     break;
21238: 
21239:   case 782:
21240: #line 1785 "third_party/libpg_query/grammar/statements/select.y"
21241:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21242:     break;
21243: 
21244:   case 783:
21245: #line 1787 "third_party/libpg_query/grammar/statements/select.y"
21246:     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21247:     break;
21248: 
21249:   case 784:
21250: #line 1790 "third_party/libpg_query/grammar/statements/select.y"
21251:     {
21252: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
21253: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21254: 				;}
21255:     break;
21256: 
21257:   case 785:
21258: #line 1795 "third_party/libpg_query/grammar/statements/select.y"
21259:     {
21260: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
21261: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21262: 				;}
21263:     break;
21264: 
21265:   case 786:
21266: #line 1800 "third_party/libpg_query/grammar/statements/select.y"
21267:     {
21268: 					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
21269: 											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
21270: 											   (yylsp[(2) - (5)]));
21271: 					(yyval.node) = (PGNode *) n;
21272: 				;}
21273:     break;
21274: 
21275:   case 787:
21276: #line 1807 "third_party/libpg_query/grammar/statements/select.y"
21277:     {
21278: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
21279: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21280: 				;}
21281:     break;
21282: 
21283:   case 788:
21284: #line 1812 "third_party/libpg_query/grammar/statements/select.y"
21285:     {
21286: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
21287: 											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21288: 											   (yylsp[(2) - (6)]));
21289: 					(yyval.node) = (PGNode *) n;
21290: 				;}
21291:     break;
21292: 
21293:   case 789:
21294: #line 1819 "third_party/libpg_query/grammar/statements/select.y"
21295:     {
21296: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
21297: 												   (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21298: 				;}
21299:     break;
21300: 
21301:   case 790:
21302: #line 1824 "third_party/libpg_query/grammar/statements/select.y"
21303:     {
21304: 					PGFuncCall *n = makeFuncCall(SystemFuncName("ilike_escape"),
21305: 											   list_make3((yyvsp[(1) - (5)].node), (yyvsp[(3) - (5)].node), (yyvsp[(5) - (5)].node)),
21306: 											   (yylsp[(2) - (5)]));
21307: 					(yyval.node) = (PGNode *) n;
21308: 				;}
21309:     break;
21310: 
21311:   case 791:
21312: #line 1831 "third_party/libpg_query/grammar/statements/select.y"
21313:     {
21314: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
21315: 												   (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21316: 				;}
21317:     break;
21318: 
21319:   case 792:
21320: #line 1836 "third_party/libpg_query/grammar/statements/select.y"
21321:     {
21322: 					PGFuncCall *n = makeFuncCall(SystemFuncName("not_ilike_escape"),
21323: 											   list_make3((yyvsp[(1) - (6)].node), (yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21324: 											   (yylsp[(2) - (6)]));
21325: 					(yyval.node) = (PGNode *) n;
21326: 				;}
21327:     break;
21328: 
21329:   case 793:
21330: #line 1844 "third_party/libpg_query/grammar/statements/select.y"
21331:     {
21332: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21333: 											   list_make2((yyvsp[(4) - (4)].node), makeNullAConst(-1)),
21334: 											   (yylsp[(2) - (4)]));
21335: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
21336: 												   (yyvsp[(1) - (4)].node), (PGNode *) n, (yylsp[(2) - (4)]));
21337: 				;}
21338:     break;
21339: 
21340:   case 794:
21341: #line 1852 "third_party/libpg_query/grammar/statements/select.y"
21342:     {
21343: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21344: 											   list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21345: 											   (yylsp[(2) - (6)]));
21346: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
21347: 												   (yyvsp[(1) - (6)].node), (PGNode *) n, (yylsp[(2) - (6)]));
21348: 				;}
21349:     break;
21350: 
21351:   case 795:
21352: #line 1860 "third_party/libpg_query/grammar/statements/select.y"
21353:     {
21354: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21355: 											   list_make2((yyvsp[(5) - (5)].node), makeNullAConst(-1)),
21356: 											   (yylsp[(2) - (5)]));
21357: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
21358: 												   (yyvsp[(1) - (5)].node), (PGNode *) n, (yylsp[(2) - (5)]));
21359: 				;}
21360:     break;
21361: 
21362:   case 796:
21363: #line 1868 "third_party/libpg_query/grammar/statements/select.y"
21364:     {
21365: 					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
21366: 											   list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21367: 											   (yylsp[(2) - (7)]));
21368: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
21369: 												   (yyvsp[(1) - (7)].node), (PGNode *) n, (yylsp[(2) - (7)]));
21370: 				;}
21371:     break;
21372: 
21373:   case 797:
21374: #line 1886 "third_party/libpg_query/grammar/statements/select.y"
21375:     {
21376: 					PGNullTest *n = makeNode(PGNullTest);
21377: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21378: 					n->nulltesttype = PG_IS_NULL;
21379: 					n->location = (yylsp[(2) - (3)]);
21380: 					(yyval.node) = (PGNode *)n;
21381: 				;}
21382:     break;
21383: 
21384:   case 798:
21385: #line 1894 "third_party/libpg_query/grammar/statements/select.y"
21386:     {
21387: 					PGNullTest *n = makeNode(PGNullTest);
21388: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
21389: 					n->nulltesttype = PG_IS_NULL;
21390: 					n->location = (yylsp[(2) - (2)]);
21391: 					(yyval.node) = (PGNode *)n;
21392: 				;}
21393:     break;
21394: 
21395:   case 799:
21396: #line 1902 "third_party/libpg_query/grammar/statements/select.y"
21397:     {
21398: 					PGNullTest *n = makeNode(PGNullTest);
21399: 					n->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21400: 					n->nulltesttype = IS_NOT_NULL;
21401: 					n->location = (yylsp[(2) - (4)]);
21402: 					(yyval.node) = (PGNode *)n;
21403: 				;}
21404:     break;
21405: 
21406:   case 800:
21407: #line 1910 "third_party/libpg_query/grammar/statements/select.y"
21408:     {
21409: 					PGNullTest *n = makeNode(PGNullTest);
21410: 					n->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21411: 					n->nulltesttype = IS_NOT_NULL;
21412: 					n->location = (yylsp[(2) - (3)]);
21413: 					(yyval.node) = (PGNode *)n;
21414: 				;}
21415:     break;
21416: 
21417:   case 801:
21418: #line 1918 "third_party/libpg_query/grammar/statements/select.y"
21419:     {
21420: 					PGNullTest *n = makeNode(PGNullTest);
21421: 					n->arg = (PGExpr *) (yyvsp[(1) - (2)].node);
21422: 					n->nulltesttype = IS_NOT_NULL;
21423: 					n->location = (yylsp[(2) - (2)]);
21424: 					(yyval.node) = (PGNode *)n;
21425: 				;}
21426:     break;
21427: 
21428:   case 802:
21429: #line 1925 "third_party/libpg_query/grammar/statements/select.y"
21430:     {
21431: 				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));
21432: 				(yyval.node) = (PGNode *) n;
21433: 			;}
21434:     break;
21435: 
21436:   case 803:
21437: #line 1929 "third_party/libpg_query/grammar/statements/select.y"
21438:     {
21439: 				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
21440: 				(yyval.node) = (PGNode *) n;
21441: 			;}
21442:     break;
21443: 
21444:   case 804:
21445: #line 1933 "third_party/libpg_query/grammar/statements/select.y"
21446:     {
21447: 				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));
21448: 				(yyval.node) = (PGNode *) n;
21449: 			;}
21450:     break;
21451: 
21452:   case 805:
21453: #line 1938 "third_party/libpg_query/grammar/statements/select.y"
21454:     {
21455: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
21456: 				n->parameters = (yyvsp[(1) - (3)].list);
21457: 				n->function = (yyvsp[(3) - (3)].node);
21458: 				n->location = (yylsp[(2) - (3)]);
21459: 				(yyval.node) = (PGNode *) n;
21460: 			;}
21461:     break;
21462: 
21463:   case 806:
21464: #line 1946 "third_party/libpg_query/grammar/statements/select.y"
21465:     {
21466: 				PGLambdaFunction *n = makeNode(PGLambdaFunction);
21467: 				n->parameters = list_make1((yyvsp[(1) - (3)].node));
21468: 				n->function = (yyvsp[(3) - (3)].node);
21469: 				n->location = (yylsp[(2) - (3)]);
21470: 				(yyval.node) = (PGNode *) n;
21471: 			;}
21472:     break;
21473: 
21474:   case 807:
21475: #line 1954 "third_party/libpg_query/grammar/statements/select.y"
21476:     {
21477: 					if (list_length((yyvsp[(1) - (3)].list)) != 2)
21478: 						ereport(ERROR,
21479: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
21480: 								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
21481: 								 parser_errposition((yylsp[(1) - (3)]))));
21482: 					if (list_length((yyvsp[(3) - (3)].list)) != 2)
21483: 						ereport(ERROR,
21484: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
21485: 								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
21486: 								 parser_errposition((yylsp[(3) - (3)]))));
21487: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
21488: 											   list_concat((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)),
21489: 											   (yylsp[(2) - (3)]));
21490: 				;}
21491:     break;
21492: 
21493:   case 808:
21494: #line 1970 "third_party/libpg_query/grammar/statements/select.y"
21495:     {
21496: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21497: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21498: 					b->booltesttype = PG_IS_TRUE;
21499: 					b->location = (yylsp[(2) - (3)]);
21500: 					(yyval.node) = (PGNode *)b;
21501: 				;}
21502:     break;
21503: 
21504:   case 809:
21505: #line 1978 "third_party/libpg_query/grammar/statements/select.y"
21506:     {
21507: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21508: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21509: 					b->booltesttype = IS_NOT_TRUE;
21510: 					b->location = (yylsp[(2) - (4)]);
21511: 					(yyval.node) = (PGNode *)b;
21512: 				;}
21513:     break;
21514: 
21515:   case 810:
21516: #line 1986 "third_party/libpg_query/grammar/statements/select.y"
21517:     {
21518: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21519: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21520: 					b->booltesttype = IS_FALSE;
21521: 					b->location = (yylsp[(2) - (3)]);
21522: 					(yyval.node) = (PGNode *)b;
21523: 				;}
21524:     break;
21525: 
21526:   case 811:
21527: #line 1994 "third_party/libpg_query/grammar/statements/select.y"
21528:     {
21529: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21530: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21531: 					b->booltesttype = IS_NOT_FALSE;
21532: 					b->location = (yylsp[(2) - (4)]);
21533: 					(yyval.node) = (PGNode *)b;
21534: 				;}
21535:     break;
21536: 
21537:   case 812:
21538: #line 2002 "third_party/libpg_query/grammar/statements/select.y"
21539:     {
21540: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21541: 					b->arg = (PGExpr *) (yyvsp[(1) - (3)].node);
21542: 					b->booltesttype = IS_UNKNOWN;
21543: 					b->location = (yylsp[(2) - (3)]);
21544: 					(yyval.node) = (PGNode *)b;
21545: 				;}
21546:     break;
21547: 
21548:   case 813:
21549: #line 2010 "third_party/libpg_query/grammar/statements/select.y"
21550:     {
21551: 					PGBooleanTest *b = makeNode(PGBooleanTest);
21552: 					b->arg = (PGExpr *) (yyvsp[(1) - (4)].node);
21553: 					b->booltesttype = IS_NOT_UNKNOWN;
21554: 					b->location = (yylsp[(2) - (4)]);
21555: 					(yyval.node) = (PGNode *)b;
21556: 				;}
21557:     break;
21558: 
21559:   case 814:
21560: #line 2018 "third_party/libpg_query/grammar/statements/select.y"
21561:     {
21562: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
21563: 				;}
21564:     break;
21565: 
21566:   case 815:
21567: #line 2022 "third_party/libpg_query/grammar/statements/select.y"
21568:     {
21569: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
21570: 				;}
21571:     break;
21572: 
21573:   case 816:
21574: #line 2026 "third_party/libpg_query/grammar/statements/select.y"
21575:     {
21576: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
21577: 				;}
21578:     break;
21579: 
21580:   case 817:
21581: #line 2030 "third_party/libpg_query/grammar/statements/select.y"
21582:     {
21583: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
21584: 				;}
21585:     break;
21586: 
21587:   case 818:
21588: #line 2034 "third_party/libpg_query/grammar/statements/select.y"
21589:     {
21590: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
21591: 												   "BETWEEN",
21592: 												   (yyvsp[(1) - (6)].node),
21593: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21594: 												   (yylsp[(2) - (6)]));
21595: 				;}
21596:     break;
21597: 
21598:   case 819:
21599: #line 2042 "third_party/libpg_query/grammar/statements/select.y"
21600:     {
21601: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
21602: 												   "NOT BETWEEN",
21603: 												   (yyvsp[(1) - (7)].node),
21604: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21605: 												   (yylsp[(2) - (7)]));
21606: 				;}
21607:     break;
21608: 
21609:   case 820:
21610: #line 2050 "third_party/libpg_query/grammar/statements/select.y"
21611:     {
21612: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
21613: 												   "BETWEEN SYMMETRIC",
21614: 												   (yyvsp[(1) - (6)].node),
21615: 												   (PGNode *) list_make2((yyvsp[(4) - (6)].node), (yyvsp[(6) - (6)].node)),
21616: 												   (yylsp[(2) - (6)]));
21617: 				;}
21618:     break;
21619: 
21620:   case 821:
21621: #line 2058 "third_party/libpg_query/grammar/statements/select.y"
21622:     {
21623: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
21624: 												   "NOT BETWEEN SYMMETRIC",
21625: 												   (yyvsp[(1) - (7)].node),
21626: 												   (PGNode *) list_make2((yyvsp[(5) - (7)].node), (yyvsp[(7) - (7)].node)),
21627: 												   (yylsp[(2) - (7)]));
21628: 				;}
21629:     break;
21630: 
21631:   case 822:
21632: #line 2066 "third_party/libpg_query/grammar/statements/select.y"
21633:     {
21634: 					/* in_expr returns a PGSubLink or a list of a_exprs */
21635: 					if (IsA((yyvsp[(3) - (3)].node), PGSubLink))
21636: 					{
21637: 						/* generate foo = ANY (subquery) */
21638: 						PGSubLink *n = (PGSubLink *) (yyvsp[(3) - (3)].node);
21639: 						n->subLinkType = PG_ANY_SUBLINK;
21640: 						n->subLinkId = 0;
21641: 						n->testexpr = (yyvsp[(1) - (3)].node);
21642: 						n->operName = NIL;		/* show it's IN not = ANY */
21643: 						n->location = (yylsp[(2) - (3)]);
21644: 						(yyval.node) = (PGNode *)n;
21645: 					}
21646: 					else
21647: 					{
21648: 						/* generate scalar IN expression */
21649: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));
21650: 					}
21651: 				;}
21652:     break;
21653: 
21654:   case 823:
21655: #line 2086 "third_party/libpg_query/grammar/statements/select.y"
21656:     {
21657: 					/* in_expr returns a PGSubLink or a list of a_exprs */
21658: 					if (IsA((yyvsp[(4) - (4)].node), PGSubLink))
21659: 					{
21660: 						/* generate NOT (foo = ANY (subquery)) */
21661: 						/* Make an = ANY node */
21662: 						PGSubLink *n = (PGSubLink *) (yyvsp[(4) - (4)].node);
21663: 						n->subLinkType = PG_ANY_SUBLINK;
21664: 						n->subLinkId = 0;
21665: 						n->testexpr = (yyvsp[(1) - (4)].node);
21666: 						n->operName = NIL;		/* show it's IN not = ANY */
21667: 						n->location = (yylsp[(2) - (4)]);
21668: 						/* Stick a NOT on top; must have same parse location */
21669: 						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[(2) - (4)]));
21670: 					}
21671: 					else
21672: 					{
21673: 						/* generate scalar NOT IN expression */
21674: 						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node), (yylsp[(2) - (4)]));
21675: 					}
21676: 				;}
21677:     break;
21678: 
21679:   case 824:
21680: #line 2108 "third_party/libpg_query/grammar/statements/select.y"
21681:     {
21682: 					PGSubLink *n = makeNode(PGSubLink);
21683: 					n->subLinkType = (yyvsp[(3) - (4)].subquerytype);
21684: 					n->subLinkId = 0;
21685: 					n->testexpr = (yyvsp[(1) - (4)].node);
21686: 					n->operName = (yyvsp[(2) - (4)].list);
21687: 					n->subselect = (yyvsp[(4) - (4)].node);
21688: 					n->location = (yylsp[(2) - (4)]);
21689: 					(yyval.node) = (PGNode *)n;
21690: 				;}
21691:     break;
21692: 
21693:   case 825:
21694: #line 2119 "third_party/libpg_query/grammar/statements/select.y"
21695:     {
21696: 					if ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)
21697: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
21698: 					else
21699: 						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[(2) - (6)].list), (yyvsp[(1) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(2) - (6)]));
21700: 				;}
21701:     break;
21702: 
21703:   case 826:
21704: #line 2126 "third_party/libpg_query/grammar/statements/select.y"
21705:     {
21706: 					/*
21707: 					 * The SQL spec only allows DEFAULT in "contextually typed
21708: 					 * expressions", but for us, it's easier to allow it in
21709: 					 * any a_expr and then throw error during parse analysis
21710: 					 * if it's in an inappropriate context.  This way also
21711: 					 * lets us say something smarter than "syntax error".
21712: 					 */
21713: 					PGSetToDefault *n = makeNode(PGSetToDefault);
21714: 					/* parse analysis will fill in the rest */
21715: 					n->location = (yylsp[(1) - (1)]);
21716: 					(yyval.node) = (PGNode *)n;
21717: 				;}
21718:     break;
21719: 
21720:   case 827:
21721: #line 2139 "third_party/libpg_query/grammar/statements/select.y"
21722:     {
21723: 				PGList *func_name = list_make1(makeString("construct_array"));
21724: 				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
21725: 				(yyval.node) = (PGNode *) n;
21726: 			;}
21727:     break;
21728: 
21729:   case 828:
21730: #line 2156 "third_party/libpg_query/grammar/statements/select.y"
21731:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21732:     break;
21733: 
21734:   case 829:
21735: #line 2158 "third_party/libpg_query/grammar/statements/select.y"
21736:     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}
21737:     break;
21738: 
21739:   case 830:
21740: #line 2160 "third_party/libpg_query/grammar/statements/select.y"
21741:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21742:     break;
21743: 
21744:   case 831:
21745: #line 2162 "third_party/libpg_query/grammar/statements/select.y"
21746:     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21747:     break;
21748: 
21749:   case 832:
21750: #line 2164 "third_party/libpg_query/grammar/statements/select.y"
21751:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21752:     break;
21753: 
21754:   case 833:
21755: #line 2166 "third_party/libpg_query/grammar/statements/select.y"
21756:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21757:     break;
21758: 
21759:   case 834:
21760: #line 2168 "third_party/libpg_query/grammar/statements/select.y"
21761:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21762:     break;
21763: 
21764:   case 835:
21765: #line 2170 "third_party/libpg_query/grammar/statements/select.y"
21766:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21767:     break;
21768: 
21769:   case 836:
21770: #line 2172 "third_party/libpg_query/grammar/statements/select.y"
21771:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21772:     break;
21773: 
21774:   case 837:
21775: #line 2174 "third_party/libpg_query/grammar/statements/select.y"
21776:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21777:     break;
21778: 
21779:   case 838:
21780: #line 2176 "third_party/libpg_query/grammar/statements/select.y"
21781:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21782:     break;
21783: 
21784:   case 839:
21785: #line 2178 "third_party/libpg_query/grammar/statements/select.y"
21786:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21787:     break;
21788: 
21789:   case 840:
21790: #line 2180 "third_party/libpg_query/grammar/statements/select.y"
21791:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21792:     break;
21793: 
21794:   case 841:
21795: #line 2182 "third_party/libpg_query/grammar/statements/select.y"
21796:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21797:     break;
21798: 
21799:   case 842:
21800: #line 2184 "third_party/libpg_query/grammar/statements/select.y"
21801:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21802:     break;
21803: 
21804:   case 843:
21805: #line 2186 "third_party/libpg_query/grammar/statements/select.y"
21806:     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21807:     break;
21808: 
21809:   case 844:
21810: #line 2188 "third_party/libpg_query/grammar/statements/select.y"
21811:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}
21812:     break;
21813: 
21814:   case 845:
21815: #line 2190 "third_party/libpg_query/grammar/statements/select.y"
21816:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}
21817:     break;
21818: 
21819:   case 846:
21820: #line 2192 "third_party/libpg_query/grammar/statements/select.y"
21821:     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}
21822:     break;
21823: 
21824:   case 847:
21825: #line 2194 "third_party/libpg_query/grammar/statements/select.y"
21826:     {
21827: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));
21828: 				;}
21829:     break;
21830: 
21831:   case 848:
21832: #line 2198 "third_party/libpg_query/grammar/statements/select.y"
21833:     {
21834: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));
21835: 				;}
21836:     break;
21837: 
21838:   case 849:
21839: #line 2202 "third_party/libpg_query/grammar/statements/select.y"
21840:     {
21841: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));
21842: 				;}
21843:     break;
21844: 
21845:   case 850:
21846: #line 2206 "third_party/libpg_query/grammar/statements/select.y"
21847:     {
21848: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));
21849: 				;}
21850:     break;
21851: 
21852:   case 851:
21853: #line 2219 "third_party/libpg_query/grammar/statements/select.y"
21854:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21855:     break;
21856: 
21857:   case 852:
21858: #line 2220 "third_party/libpg_query/grammar/statements/select.y"
21859:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21860:     break;
21861: 
21862:   case 853:
21863: #line 2222 "third_party/libpg_query/grammar/statements/select.y"
21864:     {
21865: 					PGPositionalReference *n = makeNode(PGPositionalReference);
21866: 					n->position = (yyvsp[(2) - (2)].ival);
21867: 					n->location = (yylsp[(1) - (2)]);
21868: 					(yyval.node) = (PGNode *) n;
21869: 				;}
21870:     break;
21871: 
21872:   case 854:
21873: #line 2229 "third_party/libpg_query/grammar/statements/select.y"
21874:     {
21875: 					if ((yyvsp[(2) - (2)].list))
21876: 					{
21877: 						PGAIndirection *n = makeNode(PGAIndirection);
21878: 						n->arg = makeParamRef(0, (yylsp[(1) - (2)]));
21879: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21880: 						(yyval.node) = (PGNode *) n;
21881: 					}
21882: 					else
21883: 						(yyval.node) = makeParamRef(0, (yylsp[(1) - (2)]));
21884: 				;}
21885:     break;
21886: 
21887:   case 855:
21888: #line 2241 "third_party/libpg_query/grammar/statements/select.y"
21889:     {
21890: 					PGParamRef *p = makeNode(PGParamRef);
21891: 					p->number = (yyvsp[(1) - (2)].ival);
21892: 					p->location = (yylsp[(1) - (2)]);
21893: 					if ((yyvsp[(2) - (2)].list))
21894: 					{
21895: 						PGAIndirection *n = makeNode(PGAIndirection);
21896: 						n->arg = (PGNode *) p;
21897: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21898: 						(yyval.node) = (PGNode *) n;
21899: 					}
21900: 					else
21901: 						(yyval.node) = (PGNode *) p;
21902: 				;}
21903:     break;
21904: 
21905:   case 856:
21906: #line 2256 "third_party/libpg_query/grammar/statements/select.y"
21907:     {
21908: 					if ((yyvsp[(4) - (4)].list))
21909: 					{
21910: 						PGAIndirection *n = makeNode(PGAIndirection);
21911: 						n->arg = (yyvsp[(2) - (4)].node);
21912: 						n->indirection = check_indirection((yyvsp[(4) - (4)].list), yyscanner);
21913: 						(yyval.node) = (PGNode *)n;
21914: 					}
21915: 					else
21916: 						(yyval.node) = (yyvsp[(2) - (4)].node);
21917: 				;}
21918:     break;
21919: 
21920:   case 857:
21921: #line 2268 "third_party/libpg_query/grammar/statements/select.y"
21922:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
21923:     break;
21924: 
21925:   case 858:
21926: #line 2270 "third_party/libpg_query/grammar/statements/select.y"
21927:     {
21928: 					if ((yyvsp[(2) - (2)].list)) {
21929: 						PGAIndirection *n = makeNode(PGAIndirection);
21930: 						n->arg = (yyvsp[(1) - (2)].node);
21931: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21932: 						(yyval.node) = (PGNode *)n;
21933: 					}
21934: 					else {
21935: 						(yyval.node) = (yyvsp[(1) - (2)].node);
21936: 					}
21937: 				;}
21938:     break;
21939: 
21940:   case 859:
21941: #line 2282 "third_party/libpg_query/grammar/statements/select.y"
21942:     {
21943: 					PGSubLink *n = makeNode(PGSubLink);
21944: 					n->subLinkType = PG_EXPR_SUBLINK;
21945: 					n->subLinkId = 0;
21946: 					n->testexpr = NULL;
21947: 					n->operName = NIL;
21948: 					n->subselect = (yyvsp[(1) - (1)].node);
21949: 					n->location = (yylsp[(1) - (1)]);
21950: 					(yyval.node) = (PGNode *)n;
21951: 				;}
21952:     break;
21953: 
21954:   case 860:
21955: #line 2293 "third_party/libpg_query/grammar/statements/select.y"
21956:     {
21957: 					/*
21958: 					 * Because the select_with_parens nonterminal is designed
21959: 					 * to "eat" as many levels of parens as possible, the
21960: 					 * '(' a_expr ')' opt_indirection production above will
21961: 					 * fail to match a sub-SELECT with indirection decoration;
21962: 					 * the sub-SELECT won't be regarded as an a_expr as long
21963: 					 * as there are parens around it.  To support applying
21964: 					 * subscripting or field selection to a sub-SELECT result,
21965: 					 * we need this redundant-looking production.
21966: 					 */
21967: 					PGSubLink *n = makeNode(PGSubLink);
21968: 					PGAIndirection *a = makeNode(PGAIndirection);
21969: 					n->subLinkType = PG_EXPR_SUBLINK;
21970: 					n->subLinkId = 0;
21971: 					n->testexpr = NULL;
21972: 					n->operName = NIL;
21973: 					n->subselect = (yyvsp[(1) - (2)].node);
21974: 					n->location = (yylsp[(1) - (2)]);
21975: 					a->arg = (PGNode *)n;
21976: 					a->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
21977: 					(yyval.node) = (PGNode *)a;
21978: 				;}
21979:     break;
21980: 
21981:   case 861:
21982: #line 2317 "third_party/libpg_query/grammar/statements/select.y"
21983:     {
21984: 					PGSubLink *n = makeNode(PGSubLink);
21985: 					n->subLinkType = PG_EXISTS_SUBLINK;
21986: 					n->subLinkId = 0;
21987: 					n->testexpr = NULL;
21988: 					n->operName = NIL;
21989: 					n->subselect = (yyvsp[(2) - (2)].node);
21990: 					n->location = (yylsp[(1) - (2)]);
21991: 					(yyval.node) = (PGNode *)n;
21992: 				;}
21993:     break;
21994: 
21995:   case 862:
21996: #line 2328 "third_party/libpg_query/grammar/statements/select.y"
21997:     {
21998: 				  PGGroupingFunc *g = makeNode(PGGroupingFunc);
21999: 				  g->args = (yyvsp[(3) - (4)].list);
22000: 				  g->location = (yylsp[(1) - (4)]);
22001: 				  (yyval.node) = (PGNode *)g;
22002: 			  ;}
22003:     break;
22004: 
22005:   case 863:
22006: #line 2337 "third_party/libpg_query/grammar/statements/select.y"
22007:     {
22008: 					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));
22009: 				;}
22010:     break;
22011: 
22012:   case 864:
22013: #line 2341 "third_party/libpg_query/grammar/statements/select.y"
22014:     {
22015: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));
22016: 					n->agg_order = (yyvsp[(4) - (6)].list);
22017: 					n->agg_ignore_nulls = (yyvsp[(5) - (6)].boolean);
22018: 					(yyval.node) = (PGNode *)n;
22019: 				;}
22020:     break;
22021: 
22022:   case 865:
22023: #line 2348 "third_party/libpg_query/grammar/statements/select.y"
22024:     {
22025: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));
22026: 					n->func_variadic = true;
22027: 					n->agg_order = (yyvsp[(5) - (7)].list);
22028: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22029: 					(yyval.node) = (PGNode *)n;
22030: 				;}
22031:     break;
22032: 
22033:   case 866:
22034: #line 2356 "third_party/libpg_query/grammar/statements/select.y"
22035:     {
22036: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));
22037: 					n->func_variadic = true;
22038: 					n->agg_order = (yyvsp[(7) - (9)].list);
22039: 					n->agg_ignore_nulls = (yyvsp[(8) - (9)].boolean);
22040: 					(yyval.node) = (PGNode *)n;
22041: 				;}
22042:     break;
22043: 
22044:   case 867:
22045: #line 2364 "third_party/libpg_query/grammar/statements/select.y"
22046:     {
22047: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
22048: 					n->agg_order = (yyvsp[(5) - (7)].list);
22049: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22050: 					/* Ideally we'd mark the PGFuncCall node to indicate
22051: 					 * "must be an aggregate", but there's no provision
22052: 					 * for that in PGFuncCall at the moment.
22053: 					 */
22054: 					(yyval.node) = (PGNode *)n;
22055: 				;}
22056:     break;
22057: 
22058:   case 868:
22059: #line 2375 "third_party/libpg_query/grammar/statements/select.y"
22060:     {
22061: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));
22062: 					n->agg_order = (yyvsp[(5) - (7)].list);
22063: 					n->agg_ignore_nulls = (yyvsp[(6) - (7)].boolean);
22064: 					n->agg_distinct = true;
22065: 					(yyval.node) = (PGNode *)n;
22066: 				;}
22067:     break;
22068: 
22069:   case 869:
22070: #line 2383 "third_party/libpg_query/grammar/statements/select.y"
22071:     {
22072: 					/*
22073: 					 * We consider AGGREGATE(*) to invoke a parameterless
22074: 					 * aggregate.  This does the right thing for COUNT(*),
22075: 					 * and there are no other aggregates in SQL that accept
22076: 					 * '*' as parameter.
22077: 					 *
22078: 					 * The PGFuncCall node is also marked agg_star = true,
22079: 					 * so that later processing can detect what the argument
22080: 					 * really was.
22081: 					 */
22082: 					PGFuncCall *n = makeFuncCall((yyvsp[(1) - (4)].list), NIL, (yylsp[(1) - (4)]));
22083: 					n->agg_star = true;
22084: 					(yyval.node) = (PGNode *)n;
22085: 				;}
22086:     break;
22087: 
22088:   case 870:
22089: #line 2411 "third_party/libpg_query/grammar/statements/select.y"
22090:     {
22091: 					PGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);
22092: 					/*
22093: 					 * The order clause for WITHIN GROUP and the one for
22094: 					 * plain-aggregate ORDER BY share a field, so we have to
22095: 					 * check here that at most one is present.  We also check
22096: 					 * for DISTINCT and VARIADIC here to give a better error
22097: 					 * location.  Other consistency checks are deferred to
22098: 					 * parse analysis.
22099: 					 */
22100: 					if ((yyvsp[(2) - (5)].list) != NIL)
22101: 					{
22102: 						if (n->agg_order != NIL)
22103: 							ereport(ERROR,
22104: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22105: 									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
22106: 									 parser_errposition((yylsp[(2) - (5)]))));
22107: 						if (n->agg_distinct)
22108: 							ereport(ERROR,
22109: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22110: 									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
22111: 									 parser_errposition((yylsp[(2) - (5)]))));
22112: 						if (n->func_variadic)
22113: 							ereport(ERROR,
22114: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
22115: 									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
22116: 									 parser_errposition((yylsp[(2) - (5)]))));
22117: 						n->agg_order = (yyvsp[(2) - (5)].list);
22118: 						n->agg_within_group = true;
22119: 					}
22120: 					n->agg_filter = (yyvsp[(3) - (5)].node);
22121: 					n->export_state = (yyvsp[(4) - (5)].boolean);
22122: 					n->over = (yyvsp[(5) - (5)].windef);
22123: 					(yyval.node) = (PGNode *) n;
22124: 				;}
22125:     break;
22126: 
22127:   case 871:
22128: #line 2447 "third_party/libpg_query/grammar/statements/select.y"
22129:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22130:     break;
22131: 
22132:   case 872:
22133: #line 2457 "third_party/libpg_query/grammar/statements/select.y"
22134:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22135:     break;
22136: 
22137:   case 873:
22138: #line 2458 "third_party/libpg_query/grammar/statements/select.y"
22139:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
22140:     break;
22141: 
22142:   case 874:
22143: #line 2466 "third_party/libpg_query/grammar/statements/select.y"
22144:     {
22145: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
22146: 											   list_make1((yyvsp[(4) - (5)].node)),
22147: 											   (yylsp[(1) - (5)]));
22148: 				;}
22149:     break;
22150: 
22151:   case 875:
22152: #line 2472 "third_party/libpg_query/grammar/statements/select.y"
22153:     {
22154: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[(1) - (1)]));
22155: 				;}
22156:     break;
22157: 
22158:   case 876:
22159: #line 2476 "third_party/libpg_query/grammar/statements/select.y"
22160:     {
22161: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[(1) - (1)]));
22162: 				;}
22163:     break;
22164: 
22165:   case 877:
22166: #line 2480 "third_party/libpg_query/grammar/statements/select.y"
22167:     {
22168: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22169: 				;}
22170:     break;
22171: 
22172:   case 878:
22173: #line 2484 "third_party/libpg_query/grammar/statements/select.y"
22174:     {
22175: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[(1) - (1)]));
22176: 				;}
22177:     break;
22178: 
22179:   case 879:
22180: #line 2488 "third_party/libpg_query/grammar/statements/select.y"
22181:     {
22182: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22183: 				;}
22184:     break;
22185: 
22186:   case 880:
22187: #line 2492 "third_party/libpg_query/grammar/statements/select.y"
22188:     {
22189: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[(1) - (1)]));
22190: 				;}
22191:     break;
22192: 
22193:   case 881:
22194: #line 2496 "third_party/libpg_query/grammar/statements/select.y"
22195:     {
22196: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22197: 				;}
22198:     break;
22199: 
22200:   case 882:
22201: #line 2500 "third_party/libpg_query/grammar/statements/select.y"
22202:     {
22203: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[(1) - (1)]));
22204: 				;}
22205:     break;
22206: 
22207:   case 883:
22208: #line 2504 "third_party/libpg_query/grammar/statements/select.y"
22209:     {
22210: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[(3) - (4)].ival), (yylsp[(1) - (4)]));
22211: 				;}
22212:     break;
22213: 
22214:   case 884:
22215: #line 2508 "third_party/libpg_query/grammar/statements/select.y"
22216:     {
22217: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[(1) - (1)]));
22218: 				;}
22219:     break;
22220: 
22221:   case 885:
22222: #line 2512 "third_party/libpg_query/grammar/statements/select.y"
22223:     {
22224: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[(1) - (1)]));
22225: 				;}
22226:     break;
22227: 
22228:   case 886:
22229: #line 2516 "third_party/libpg_query/grammar/statements/select.y"
22230:     {
22231: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[(1) - (1)]));
22232: 				;}
22233:     break;
22234: 
22235:   case 887:
22236: #line 2520 "third_party/libpg_query/grammar/statements/select.y"
22237:     {
22238: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[(1) - (1)]));
22239: 				;}
22240:     break;
22241: 
22242:   case 888:
22243: #line 2524 "third_party/libpg_query/grammar/statements/select.y"
22244:     {
22245: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[(1) - (1)]));
22246: 				;}
22247:     break;
22248: 
22249:   case 889:
22250: #line 2528 "third_party/libpg_query/grammar/statements/select.y"
22251:     {
22252: 					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[(1) - (1)]));
22253: 				;}
22254:     break;
22255: 
22256:   case 890:
22257: #line 2532 "third_party/libpg_query/grammar/statements/select.y"
22258:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}
22259:     break;
22260: 
22261:   case 891:
22262: #line 2534 "third_party/libpg_query/grammar/statements/select.y"
22263:     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}
22264:     break;
22265: 
22266:   case 892:
22267: #line 2536 "third_party/libpg_query/grammar/statements/select.y"
22268:     {
22269: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22270: 				;}
22271:     break;
22272: 
22273:   case 893:
22274: #line 2540 "third_party/libpg_query/grammar/statements/select.y"
22275:     {
22276: 					/* overlay(A PLACING B FROM C FOR D) is converted to
22277: 					 * overlay(A, B, C, D)
22278: 					 * overlay(A PLACING B FROM C) is converted to
22279: 					 * overlay(A, B, C)
22280: 					 */
22281: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22282: 				;}
22283:     break;
22284: 
22285:   case 894:
22286: #line 2549 "third_party/libpg_query/grammar/statements/select.y"
22287:     {
22288: 					/* position(A in B) is converted to position(B, A) */
22289: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22290: 				;}
22291:     break;
22292: 
22293:   case 895:
22294: #line 2554 "third_party/libpg_query/grammar/statements/select.y"
22295:     {
22296: 					/* substring(A from B for C) is converted to
22297: 					 * substring(A, B, C) - thomas 2000-11-28
22298: 					 */
22299: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22300: 				;}
22301:     break;
22302: 
22303:   case 896:
22304: #line 2561 "third_party/libpg_query/grammar/statements/select.y"
22305:     {
22306: 					/* TREAT(expr AS target) converts expr of a particular type to target,
22307: 					 * which is defined to be a subtype of the original expression.
22308: 					 * In SQL99, this is intended for use with structured UDTs,
22309: 					 * but let's make this a generally useful form allowing stronger
22310: 					 * coercions than are handled by implicit casting.
22311: 					 *
22312: 					 * Convert SystemTypeName() to SystemFuncName() even though
22313: 					 * at the moment they result in the same thing.
22314: 					 */
22315: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[(5) - (6)].typnam)->names))->val.str),
22316: 												list_make1((yyvsp[(3) - (6)].node)),
22317: 												(yylsp[(1) - (6)]));
22318: 				;}
22319:     break;
22320: 
22321:   case 897:
22322: #line 2576 "third_party/libpg_query/grammar/statements/select.y"
22323:     {
22324: 					/* various trim expressions are defined in SQL
22325: 					 * - thomas 1997-07-19
22326: 					 */
22327: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22328: 				;}
22329:     break;
22330: 
22331:   case 898:
22332: #line 2583 "third_party/libpg_query/grammar/statements/select.y"
22333:     {
22334: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22335: 				;}
22336:     break;
22337: 
22338:   case 899:
22339: #line 2587 "third_party/libpg_query/grammar/statements/select.y"
22340:     {
22341: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));
22342: 				;}
22343:     break;
22344: 
22345:   case 900:
22346: #line 2591 "third_party/libpg_query/grammar/statements/select.y"
22347:     {
22348: 					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));
22349: 				;}
22350:     break;
22351: 
22352:   case 901:
22353: #line 2595 "third_party/libpg_query/grammar/statements/select.y"
22354:     {
22355: 					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));
22356: 				;}
22357:     break;
22358: 
22359:   case 902:
22360: #line 2599 "third_party/libpg_query/grammar/statements/select.y"
22361:     {
22362: 					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
22363: 					c->args = (yyvsp[(3) - (4)].list);
22364: 					c->location = (yylsp[(1) - (4)]);
22365: 					(yyval.node) = (PGNode *)c;
22366: 				;}
22367:     break;
22368: 
22369:   case 903:
22370: #line 2612 "third_party/libpg_query/grammar/statements/select.y"
22371:     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}
22372:     break;
22373: 
22374:   case 904:
22375: #line 2613 "third_party/libpg_query/grammar/statements/select.y"
22376:     { (yyval.list) = NIL; ;}
22377:     break;
22378: 
22379:   case 905:
22380: #line 2617 "third_party/libpg_query/grammar/statements/select.y"
22381:     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}
22382:     break;
22383: 
22384:   case 906:
22385: #line 2618 "third_party/libpg_query/grammar/statements/select.y"
22386:     { (yyval.node) = NULL; ;}
22387:     break;
22388: 
22389:   case 907:
22390: #line 2622 "third_party/libpg_query/grammar/statements/select.y"
22391:     { (yyval.boolean) = true; ;}
22392:     break;
22393: 
22394:   case 908:
22395: #line 2623 "third_party/libpg_query/grammar/statements/select.y"
22396:     { (yyval.boolean) = false; ;}
22397:     break;
22398: 
22399:   case 909:
22400: #line 2630 "third_party/libpg_query/grammar/statements/select.y"
22401:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
22402:     break;
22403: 
22404:   case 910:
22405: #line 2631 "third_party/libpg_query/grammar/statements/select.y"
22406:     { (yyval.list) = NIL; ;}
22407:     break;
22408: 
22409:   case 911:
22410: #line 2635 "third_party/libpg_query/grammar/statements/select.y"
22411:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}
22412:     break;
22413: 
22414:   case 912:
22415: #line 2637 "third_party/libpg_query/grammar/statements/select.y"
22416:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}
22417:     break;
22418: 
22419:   case 913:
22420: #line 2642 "third_party/libpg_query/grammar/statements/select.y"
22421:     {
22422: 					PGWindowDef *n = (yyvsp[(3) - (3)].windef);
22423: 					n->name = (yyvsp[(1) - (3)].str);
22424: 					(yyval.windef) = n;
22425: 				;}
22426:     break;
22427: 
22428:   case 914:
22429: #line 2650 "third_party/libpg_query/grammar/statements/select.y"
22430:     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}
22431:     break;
22432: 
22433:   case 915:
22434: #line 2652 "third_party/libpg_query/grammar/statements/select.y"
22435:     {
22436: 					PGWindowDef *n = makeNode(PGWindowDef);
22437: 					n->name = (yyvsp[(2) - (2)].str);
22438: 					n->refname = NULL;
22439: 					n->partitionClause = NIL;
22440: 					n->orderClause = NIL;
22441: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
22442: 					n->startOffset = NULL;
22443: 					n->endOffset = NULL;
22444: 					n->location = (yylsp[(2) - (2)]);
22445: 					(yyval.windef) = n;
22446: 				;}
22447:     break;
22448: 
22449:   case 916:
22450: #line 2665 "third_party/libpg_query/grammar/statements/select.y"
22451:     { (yyval.windef) = NULL; ;}
22452:     break;
22453: 
22454:   case 917:
22455: #line 2670 "third_party/libpg_query/grammar/statements/select.y"
22456:     {
22457: 					PGWindowDef *n = makeNode(PGWindowDef);
22458: 					n->name = NULL;
22459: 					n->refname = (yyvsp[(2) - (6)].str);
22460: 					n->partitionClause = (yyvsp[(3) - (6)].list);
22461: 					n->orderClause = (yyvsp[(4) - (6)].list);
22462: 					/* copy relevant fields of opt_frame_clause */
22463: 					n->frameOptions = (yyvsp[(5) - (6)].windef)->frameOptions;
22464: 					n->startOffset = (yyvsp[(5) - (6)].windef)->startOffset;
22465: 					n->endOffset = (yyvsp[(5) - (6)].windef)->endOffset;
22466: 					n->location = (yylsp[(1) - (6)]);
22467: 					(yyval.windef) = n;
22468: 				;}
22469:     break;
22470: 
22471:   case 918:
22472: #line 2695 "third_party/libpg_query/grammar/statements/select.y"
22473:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22474:     break;
22475: 
22476:   case 919:
22477: #line 2696 "third_party/libpg_query/grammar/statements/select.y"
22478:     { (yyval.str) = NULL; ;}
22479:     break;
22480: 
22481:   case 920:
22482: #line 2699 "third_party/libpg_query/grammar/statements/select.y"
22483:     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}
22484:     break;
22485: 
22486:   case 921:
22487: #line 2700 "third_party/libpg_query/grammar/statements/select.y"
22488:     { (yyval.list) = NIL; ;}
22489:     break;
22490: 
22491:   case 922:
22492: #line 2712 "third_party/libpg_query/grammar/statements/select.y"
22493:     {
22494: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
22495: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
22496: 					(yyval.windef) = n;
22497: 				;}
22498:     break;
22499: 
22500:   case 923:
22501: #line 2718 "third_party/libpg_query/grammar/statements/select.y"
22502:     {
22503: 					PGWindowDef *n = (yyvsp[(2) - (2)].windef);
22504: 					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
22505: 					(yyval.windef) = n;
22506: 				;}
22507:     break;
22508: 
22509:   case 924:
22510: #line 2724 "third_party/libpg_query/grammar/statements/select.y"
22511:     {
22512: 					PGWindowDef *n = makeNode(PGWindowDef);
22513: 					n->frameOptions = FRAMEOPTION_DEFAULTS;
22514: 					n->startOffset = NULL;
22515: 					n->endOffset = NULL;
22516: 					(yyval.windef) = n;
22517: 				;}
22518:     break;
22519: 
22520:   case 925:
22521: #line 2734 "third_party/libpg_query/grammar/statements/select.y"
22522:     {
22523: 					PGWindowDef *n = (yyvsp[(1) - (1)].windef);
22524: 					/* reject invalid cases */
22525: 					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
22526: 						ereport(ERROR,
22527: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22528: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
22529: 								 parser_errposition((yylsp[(1) - (1)]))));
22530: 					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
22531: 						ereport(ERROR,
22532: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22533: 								 errmsg("frame starting from following row cannot end with current row"),
22534: 								 parser_errposition((yylsp[(1) - (1)]))));
22535: 					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
22536: 					(yyval.windef) = n;
22537: 				;}
22538:     break;
22539: 
22540:   case 926:
22541: #line 2751 "third_party/libpg_query/grammar/statements/select.y"
22542:     {
22543: 					PGWindowDef *n1 = (yyvsp[(2) - (4)].windef);
22544: 					PGWindowDef *n2 = (yyvsp[(4) - (4)].windef);
22545: 					/* form merged options */
22546: 					int		frameOptions = n1->frameOptions;
22547: 					/* shift converts START_ options to END_ options */
22548: 					frameOptions |= n2->frameOptions << 1;
22549: 					frameOptions |= FRAMEOPTION_BETWEEN;
22550: 					/* reject invalid cases */
22551: 					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
22552: 						ereport(ERROR,
22553: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22554: 								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
22555: 								 parser_errposition((yylsp[(2) - (4)]))));
22556: 					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
22557: 						ereport(ERROR,
22558: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22559: 								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
22560: 								 parser_errposition((yylsp[(4) - (4)]))));
22561: 					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
22562: 						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
22563: 						ereport(ERROR,
22564: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22565: 								 errmsg("frame starting from current row cannot have preceding rows"),
22566: 								 parser_errposition((yylsp[(4) - (4)]))));
22567: 					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
22568: 						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
22569: 										 FRAMEOPTION_END_CURRENT_ROW)))
22570: 						ereport(ERROR,
22571: 								(errcode(PG_ERRCODE_WINDOWING_ERROR),
22572: 								 errmsg("frame starting from following row cannot have preceding rows"),
22573: 								 parser_errposition((yylsp[(4) - (4)]))));
22574: 					n1->frameOptions = frameOptions;
22575: 					n1->endOffset = n2->startOffset;
22576: 					(yyval.windef) = n1;
22577: 				;}
22578:     break;
22579: 
22580:   case 927:
22581: #line 2796 "third_party/libpg_query/grammar/statements/select.y"
22582:     {
22583: 					PGWindowDef *n = makeNode(PGWindowDef);
22584: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
22585: 					n->startOffset = NULL;
22586: 					n->endOffset = NULL;
22587: 					(yyval.windef) = n;
22588: 				;}
22589:     break;
22590: 
22591:   case 928:
22592: #line 2804 "third_party/libpg_query/grammar/statements/select.y"
22593:     {
22594: 					PGWindowDef *n = makeNode(PGWindowDef);
22595: 					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
22596: 					n->startOffset = NULL;
22597: 					n->endOffset = NULL;
22598: 					(yyval.windef) = n;
22599: 				;}
22600:     break;
22601: 
22602:   case 929:
22603: #line 2812 "third_party/libpg_query/grammar/statements/select.y"
22604:     {
22605: 					PGWindowDef *n = makeNode(PGWindowDef);
22606: 					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
22607: 					n->startOffset = NULL;
22608: 					n->endOffset = NULL;
22609: 					(yyval.windef) = n;
22610: 				;}
22611:     break;
22612: 
22613:   case 930:
22614: #line 2820 "third_party/libpg_query/grammar/statements/select.y"
22615:     {
22616: 					PGWindowDef *n = makeNode(PGWindowDef);
22617: 					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
22618: 					n->startOffset = (yyvsp[(1) - (2)].node);
22619: 					n->endOffset = NULL;
22620: 					(yyval.windef) = n;
22621: 				;}
22622:     break;
22623: 
22624:   case 931:
22625: #line 2828 "third_party/libpg_query/grammar/statements/select.y"
22626:     {
22627: 					PGWindowDef *n = makeNode(PGWindowDef);
22628: 					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
22629: 					n->startOffset = (yyvsp[(1) - (2)].node);
22630: 					n->endOffset = NULL;
22631: 					(yyval.windef) = n;
22632: 				;}
22633:     break;
22634: 
22635:   case 932:
22636: #line 2848 "third_party/libpg_query/grammar/statements/select.y"
22637:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22638:     break;
22639: 
22640:   case 933:
22641: #line 2849 "third_party/libpg_query/grammar/statements/select.y"
22642:     { (yyval.list) = NIL; ;}
22643:     break;
22644: 
22645:   case 934:
22646: #line 2852 "third_party/libpg_query/grammar/statements/select.y"
22647:     { (yyval.list) = (yyvsp[(1) - (1)].list);;}
22648:     break;
22649: 
22650:   case 935:
22651: #line 2853 "third_party/libpg_query/grammar/statements/select.y"
22652:     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}
22653:     break;
22654: 
22655:   case 936:
22656: #line 2857 "third_party/libpg_query/grammar/statements/select.y"
22657:     {
22658: 		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22659: 		na->name = (yyvsp[(1) - (3)].str);
22660: 		na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22661: 		na->argnumber = -1;
22662: 		na->location = (yylsp[(1) - (3)]);
22663: 		(yyval.node) = (PGNode *) na;
22664: 	;}
22665:     break;
22666: 
22667:   case 937:
22668: #line 2867 "third_party/libpg_query/grammar/statements/select.y"
22669:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
22670:     break;
22671: 
22672:   case 938:
22673: #line 2868 "third_party/libpg_query/grammar/statements/select.y"
22674:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
22675:     break;
22676: 
22677:   case 939:
22678: #line 2872 "third_party/libpg_query/grammar/statements/select.y"
22679:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
22680:     break;
22681: 
22682:   case 940:
22683: #line 2873 "third_party/libpg_query/grammar/statements/select.y"
22684:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
22685:     break;
22686: 
22687:   case 941:
22688: #line 2877 "third_party/libpg_query/grammar/statements/select.y"
22689:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
22690:     break;
22691: 
22692:   case 942:
22693: #line 2878 "third_party/libpg_query/grammar/statements/select.y"
22694:     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}
22695:     break;
22696: 
22697:   case 943:
22698: #line 2879 "third_party/libpg_query/grammar/statements/select.y"
22699:     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}
22700:     break;
22701: 
22702:   case 944:
22703: #line 2882 "third_party/libpg_query/grammar/statements/select.y"
22704:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22705:     break;
22706: 
22707:   case 945:
22708: #line 2883 "third_party/libpg_query/grammar/statements/select.y"
22709:     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}
22710:     break;
22711: 
22712:   case 946:
22713: #line 2886 "third_party/libpg_query/grammar/statements/select.y"
22714:     { (yyval.conststr) = "+"; ;}
22715:     break;
22716: 
22717:   case 947:
22718: #line 2887 "third_party/libpg_query/grammar/statements/select.y"
22719:     { (yyval.conststr) = "-"; ;}
22720:     break;
22721: 
22722:   case 948:
22723: #line 2888 "third_party/libpg_query/grammar/statements/select.y"
22724:     { (yyval.conststr) = "*"; ;}
22725:     break;
22726: 
22727:   case 949:
22728: #line 2889 "third_party/libpg_query/grammar/statements/select.y"
22729:     { (yyval.conststr) = "/"; ;}
22730:     break;
22731: 
22732:   case 950:
22733: #line 2890 "third_party/libpg_query/grammar/statements/select.y"
22734:     { (yyval.conststr) = "%"; ;}
22735:     break;
22736: 
22737:   case 951:
22738: #line 2891 "third_party/libpg_query/grammar/statements/select.y"
22739:     { (yyval.conststr) = "^"; ;}
22740:     break;
22741: 
22742:   case 952:
22743: #line 2892 "third_party/libpg_query/grammar/statements/select.y"
22744:     { (yyval.conststr) = "<"; ;}
22745:     break;
22746: 
22747:   case 953:
22748: #line 2893 "third_party/libpg_query/grammar/statements/select.y"
22749:     { (yyval.conststr) = ">"; ;}
22750:     break;
22751: 
22752:   case 954:
22753: #line 2894 "third_party/libpg_query/grammar/statements/select.y"
22754:     { (yyval.conststr) = "="; ;}
22755:     break;
22756: 
22757:   case 955:
22758: #line 2895 "third_party/libpg_query/grammar/statements/select.y"
22759:     { (yyval.conststr) = "<="; ;}
22760:     break;
22761: 
22762:   case 956:
22763: #line 2896 "third_party/libpg_query/grammar/statements/select.y"
22764:     { (yyval.conststr) = ">="; ;}
22765:     break;
22766: 
22767:   case 957:
22768: #line 2897 "third_party/libpg_query/grammar/statements/select.y"
22769:     { (yyval.conststr) = "<>"; ;}
22770:     break;
22771: 
22772:   case 958:
22773: #line 2901 "third_party/libpg_query/grammar/statements/select.y"
22774:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22775:     break;
22776: 
22777:   case 959:
22778: #line 2903 "third_party/libpg_query/grammar/statements/select.y"
22779:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22780:     break;
22781: 
22782:   case 960:
22783: #line 2908 "third_party/libpg_query/grammar/statements/select.y"
22784:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22785:     break;
22786: 
22787:   case 961:
22788: #line 2910 "third_party/libpg_query/grammar/statements/select.y"
22789:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22790:     break;
22791: 
22792:   case 962:
22793: #line 2915 "third_party/libpg_query/grammar/statements/select.y"
22794:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22795:     break;
22796: 
22797:   case 963:
22798: #line 2917 "third_party/libpg_query/grammar/statements/select.y"
22799:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
22800:     break;
22801: 
22802:   case 964:
22803: #line 2919 "third_party/libpg_query/grammar/statements/select.y"
22804:     { (yyval.list) = list_make1(makeString("~~")); ;}
22805:     break;
22806: 
22807:   case 965:
22808: #line 2921 "third_party/libpg_query/grammar/statements/select.y"
22809:     { (yyval.list) = list_make1(makeString("!~~")); ;}
22810:     break;
22811: 
22812:   case 966:
22813: #line 2923 "third_party/libpg_query/grammar/statements/select.y"
22814:     { (yyval.list) = list_make1(makeString("~~~")); ;}
22815:     break;
22816: 
22817:   case 967:
22818: #line 2925 "third_party/libpg_query/grammar/statements/select.y"
22819:     { (yyval.list) = list_make1(makeString("!~~~")); ;}
22820:     break;
22821: 
22822:   case 968:
22823: #line 2927 "third_party/libpg_query/grammar/statements/select.y"
22824:     { (yyval.list) = list_make1(makeString("~~*")); ;}
22825:     break;
22826: 
22827:   case 969:
22828: #line 2929 "third_party/libpg_query/grammar/statements/select.y"
22829:     { (yyval.list) = list_make1(makeString("!~~*")); ;}
22830:     break;
22831: 
22832:   case 970:
22833: #line 2943 "third_party/libpg_query/grammar/statements/select.y"
22834:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
22835:     break;
22836: 
22837:   case 971:
22838: #line 2945 "third_party/libpg_query/grammar/statements/select.y"
22839:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}
22840:     break;
22841: 
22842:   case 972:
22843: #line 2949 "third_party/libpg_query/grammar/statements/select.y"
22844:     {
22845: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
22846: 				;}
22847:     break;
22848: 
22849:   case 973:
22850: #line 2953 "third_party/libpg_query/grammar/statements/select.y"
22851:     {
22852: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
22853: 				;}
22854:     break;
22855: 
22856:   case 974:
22857: #line 2960 "third_party/libpg_query/grammar/statements/select.y"
22858:     {
22859: 					(yyval.list) = (yyvsp[(1) - (1)].list);
22860: 				;}
22861:     break;
22862: 
22863:   case 975:
22864: #line 2965 "third_party/libpg_query/grammar/statements/select.y"
22865:     {
22866: 					(yyval.list) = (yyvsp[(1) - (2)].list);
22867: 				;}
22868:     break;
22869: 
22870:   case 976:
22871: #line 2983 "third_party/libpg_query/grammar/statements/select.y"
22872:     {
22873: 					(yyval.list) = (yyvsp[(1) - (1)].list);
22874: 				;}
22875:     break;
22876: 
22877:   case 977:
22878: #line 2987 "third_party/libpg_query/grammar/statements/select.y"
22879:     {
22880: 					(yyval.list) = NULL;
22881: 				;}
22882:     break;
22883: 
22884:   case 978:
22885: #line 2996 "third_party/libpg_query/grammar/statements/select.y"
22886:     {
22887: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].node));
22888: 				;}
22889:     break;
22890: 
22891:   case 979:
22892: #line 3000 "third_party/libpg_query/grammar/statements/select.y"
22893:     {
22894: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));
22895: 				;}
22896:     break;
22897: 
22898:   case 980:
22899: #line 3006 "third_party/libpg_query/grammar/statements/select.y"
22900:     {
22901: 					(yyval.node) = (yyvsp[(1) - (1)].node);
22902: 				;}
22903:     break;
22904: 
22905:   case 981:
22906: #line 3010 "third_party/libpg_query/grammar/statements/select.y"
22907:     {
22908: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22909: 					na->name = (yyvsp[(1) - (3)].str);
22910: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22911: 					na->argnumber = -1;		/* until determined */
22912: 					na->location = (yylsp[(1) - (3)]);
22913: 					(yyval.node) = (PGNode *) na;
22914: 				;}
22915:     break;
22916: 
22917:   case 982:
22918: #line 3019 "third_party/libpg_query/grammar/statements/select.y"
22919:     {
22920: 					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
22921: 					na->name = (yyvsp[(1) - (3)].str);
22922: 					na->arg = (PGExpr *) (yyvsp[(3) - (3)].node);
22923: 					na->argnumber = -1;		/* until determined */
22924: 					na->location = (yylsp[(1) - (3)]);
22925: 					(yyval.node) = (PGNode *) na;
22926: 				;}
22927:     break;
22928: 
22929:   case 983:
22930: #line 3029 "third_party/libpg_query/grammar/statements/select.y"
22931:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}
22932:     break;
22933: 
22934:   case 984:
22935: #line 3030 "third_party/libpg_query/grammar/statements/select.y"
22936:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}
22937:     break;
22938: 
22939:   case 985:
22940: #line 3035 "third_party/libpg_query/grammar/statements/select.y"
22941:     {
22942: 					(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));
22943: 				;}
22944:     break;
22945: 
22946:   case 986:
22947: #line 3038 "third_party/libpg_query/grammar/statements/select.y"
22948:     { (yyval.list) = NIL; ;}
22949:     break;
22950: 
22951:   case 987:
22952: #line 3045 "third_party/libpg_query/grammar/statements/select.y"
22953:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22954:     break;
22955: 
22956:   case 988:
22957: #line 3046 "third_party/libpg_query/grammar/statements/select.y"
22958:     { (yyval.str) = (char*) "year"; ;}
22959:     break;
22960: 
22961:   case 989:
22962: #line 3047 "third_party/libpg_query/grammar/statements/select.y"
22963:     { (yyval.str) = (char*) "month"; ;}
22964:     break;
22965: 
22966:   case 990:
22967: #line 3048 "third_party/libpg_query/grammar/statements/select.y"
22968:     { (yyval.str) = (char*) "day"; ;}
22969:     break;
22970: 
22971:   case 991:
22972: #line 3049 "third_party/libpg_query/grammar/statements/select.y"
22973:     { (yyval.str) = (char*) "hour"; ;}
22974:     break;
22975: 
22976:   case 992:
22977: #line 3050 "third_party/libpg_query/grammar/statements/select.y"
22978:     { (yyval.str) = (char*) "minute"; ;}
22979:     break;
22980: 
22981:   case 993:
22982: #line 3051 "third_party/libpg_query/grammar/statements/select.y"
22983:     { (yyval.str) = (char*) "second"; ;}
22984:     break;
22985: 
22986:   case 994:
22987: #line 3052 "third_party/libpg_query/grammar/statements/select.y"
22988:     { (yyval.str) = (char*) "millisecond"; ;}
22989:     break;
22990: 
22991:   case 995:
22992: #line 3053 "third_party/libpg_query/grammar/statements/select.y"
22993:     { (yyval.str) = (char*) "microsecond"; ;}
22994:     break;
22995: 
22996:   case 996:
22997: #line 3054 "third_party/libpg_query/grammar/statements/select.y"
22998:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
22999:     break;
23000: 
23001:   case 997:
23002: #line 3065 "third_party/libpg_query/grammar/statements/select.y"
23003:     {
23004: 					(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));
23005: 				;}
23006:     break;
23007: 
23008:   case 998:
23009: #line 3069 "third_party/libpg_query/grammar/statements/select.y"
23010:     {
23011: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
23012: 				;}
23013:     break;
23014: 
23015:   case 999:
23016: #line 3076 "third_party/libpg_query/grammar/statements/select.y"
23017:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23018:     break;
23019: 
23020:   case 1000:
23021: #line 3082 "third_party/libpg_query/grammar/statements/select.y"
23022:     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}
23023:     break;
23024: 
23025:   case 1001:
23026: #line 3083 "third_party/libpg_query/grammar/statements/select.y"
23027:     { (yyval.list) = NIL; ;}
23028:     break;
23029: 
23030:   case 1002:
23031: #line 3100 "third_party/libpg_query/grammar/statements/select.y"
23032:     {
23033: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));
23034: 				;}
23035:     break;
23036: 
23037:   case 1003:
23038: #line 3104 "third_party/libpg_query/grammar/statements/select.y"
23039:     {
23040: 					/* not legal per SQL99, but might as well allow it */
23041: 					(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));
23042: 				;}
23043:     break;
23044: 
23045:   case 1004:
23046: #line 3109 "third_party/libpg_query/grammar/statements/select.y"
23047:     {
23048: 					(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));
23049: 				;}
23050:     break;
23051: 
23052:   case 1005:
23053: #line 3113 "third_party/libpg_query/grammar/statements/select.y"
23054:     {
23055: 					/*
23056: 					 * Since there are no cases where this syntax allows
23057: 					 * a textual FOR value, we forcibly cast the argument
23058: 					 * to int4.  The possible matches in pg_proc are
23059: 					 * substring(text,int4) and substring(text,text),
23060: 					 * and we don't want the parser to choose the latter,
23061: 					 * which it is likely to do if the second argument
23062: 					 * is unknown or doesn't have an implicit cast to int4.
23063: 					 */
23064: 					(yyval.list) = list_make3((yyvsp[(1) - (2)].node), makeIntConst(1, -1),
23065: 									makeTypeCast((yyvsp[(2) - (2)].node),
23066: 												 SystemTypeName("int4"), 0, -1));
23067: 				;}
23068:     break;
23069: 
23070:   case 1006:
23071: #line 3128 "third_party/libpg_query/grammar/statements/select.y"
23072:     {
23073: 					(yyval.list) = (yyvsp[(1) - (1)].list);
23074: 				;}
23075:     break;
23076: 
23077:   case 1007:
23078: #line 3132 "third_party/libpg_query/grammar/statements/select.y"
23079:     { (yyval.list) = NIL; ;}
23080:     break;
23081: 
23082:   case 1008:
23083: #line 3136 "third_party/libpg_query/grammar/statements/select.y"
23084:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23085:     break;
23086: 
23087:   case 1009:
23088: #line 3139 "third_party/libpg_query/grammar/statements/select.y"
23089:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23090:     break;
23091: 
23092:   case 1010:
23093: #line 3142 "third_party/libpg_query/grammar/statements/select.y"
23094:     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}
23095:     break;
23096: 
23097:   case 1011:
23098: #line 3143 "third_party/libpg_query/grammar/statements/select.y"
23099:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23100:     break;
23101: 
23102:   case 1012:
23103: #line 3144 "third_party/libpg_query/grammar/statements/select.y"
23104:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23105:     break;
23106: 
23107:   case 1013:
23108: #line 3148 "third_party/libpg_query/grammar/statements/select.y"
23109:     {
23110: 					PGSubLink *n = makeNode(PGSubLink);
23111: 					n->subselect = (yyvsp[(1) - (1)].node);
23112: 					/* other fields will be filled later */
23113: 					(yyval.node) = (PGNode *)n;
23114: 				;}
23115:     break;
23116: 
23117:   case 1014:
23118: #line 3154 "third_party/libpg_query/grammar/statements/select.y"
23119:     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}
23120:     break;
23121: 
23122:   case 1015:
23123: #line 3165 "third_party/libpg_query/grammar/statements/select.y"
23124:     {
23125: 					PGCaseExpr *c = makeNode(PGCaseExpr);
23126: 					c->casetype = InvalidOid; /* not analyzed yet */
23127: 					c->arg = (PGExpr *) (yyvsp[(2) - (5)].node);
23128: 					c->args = (yyvsp[(3) - (5)].list);
23129: 					c->defresult = (PGExpr *) (yyvsp[(4) - (5)].node);
23130: 					c->location = (yylsp[(1) - (5)]);
23131: 					(yyval.node) = (PGNode *)c;
23132: 				;}
23133:     break;
23134: 
23135:   case 1016:
23136: #line 3178 "third_party/libpg_query/grammar/statements/select.y"
23137:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
23138:     break;
23139: 
23140:   case 1017:
23141: #line 3179 "third_party/libpg_query/grammar/statements/select.y"
23142:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23143:     break;
23144: 
23145:   case 1018:
23146: #line 3184 "third_party/libpg_query/grammar/statements/select.y"
23147:     {
23148: 					PGCaseWhen *w = makeNode(PGCaseWhen);
23149: 					w->expr = (PGExpr *) (yyvsp[(2) - (4)].node);
23150: 					w->result = (PGExpr *) (yyvsp[(4) - (4)].node);
23151: 					w->location = (yylsp[(1) - (4)]);
23152: 					(yyval.node) = (PGNode *)w;
23153: 				;}
23154:     break;
23155: 
23156:   case 1019:
23157: #line 3194 "third_party/libpg_query/grammar/statements/select.y"
23158:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
23159:     break;
23160: 
23161:   case 1020:
23162: #line 3195 "third_party/libpg_query/grammar/statements/select.y"
23163:     { (yyval.node) = NULL; ;}
23164:     break;
23165: 
23166:   case 1021:
23167: #line 3198 "third_party/libpg_query/grammar/statements/select.y"
23168:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
23169:     break;
23170: 
23171:   case 1022:
23172: #line 3199 "third_party/libpg_query/grammar/statements/select.y"
23173:     { (yyval.node) = NULL; ;}
23174:     break;
23175: 
23176:   case 1023:
23177: #line 3203 "third_party/libpg_query/grammar/statements/select.y"
23178:     {
23179: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);
23180: 				;}
23181:     break;
23182: 
23183:   case 1024:
23184: #line 3207 "third_party/libpg_query/grammar/statements/select.y"
23185:     {
23186: 					(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);
23187: 				;}
23188:     break;
23189: 
23190:   case 1025:
23191: #line 3214 "third_party/libpg_query/grammar/statements/select.y"
23192:     {
23193: 					(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));
23194: 				;}
23195:     break;
23196: 
23197:   case 1026:
23198: #line 3218 "third_party/libpg_query/grammar/statements/select.y"
23199:     {
23200: 					PGAIndices *ai = makeNode(PGAIndices);
23201: 					ai->is_slice = false;
23202: 					ai->lidx = NULL;
23203: 					ai->uidx = (yyvsp[(2) - (3)].node);
23204: 					(yyval.node) = (PGNode *) ai;
23205: 				;}
23206:     break;
23207: 
23208:   case 1027:
23209: #line 3226 "third_party/libpg_query/grammar/statements/select.y"
23210:     {
23211: 					PGAIndices *ai = makeNode(PGAIndices);
23212: 					ai->is_slice = true;
23213: 					ai->lidx = (yyvsp[(2) - (5)].node);
23214: 					ai->uidx = (yyvsp[(4) - (5)].node);
23215: 					(yyval.node) = (PGNode *) ai;
23216: 				;}
23217:     break;
23218: 
23219:   case 1028:
23220: #line 3236 "third_party/libpg_query/grammar/statements/select.y"
23221:     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}
23222:     break;
23223: 
23224:   case 1029:
23225: #line 3237 "third_party/libpg_query/grammar/statements/select.y"
23226:     { (yyval.node) = NULL; ;}
23227:     break;
23228: 
23229:   case 1030:
23230: #line 3241 "third_party/libpg_query/grammar/statements/select.y"
23231:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
23232:     break;
23233: 
23234:   case 1031:
23235: #line 3242 "third_party/libpg_query/grammar/statements/select.y"
23236:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23237:     break;
23238: 
23239:   case 1032:
23240: #line 3246 "third_party/libpg_query/grammar/statements/select.y"
23241:     { (yyval.list) = NIL; ;}
23242:     break;
23243: 
23244:   case 1033:
23245: #line 3247 "third_party/libpg_query/grammar/statements/select.y"
23246:     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}
23247:     break;
23248: 
23249:   case 1036:
23250: #line 3261 "third_party/libpg_query/grammar/statements/select.y"
23251:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23252:     break;
23253: 
23254:   case 1037:
23255: #line 3262 "third_party/libpg_query/grammar/statements/select.y"
23256:     { (yyval.list) = NIL; ;}
23257:     break;
23258: 
23259:   case 1038:
23260: #line 3266 "third_party/libpg_query/grammar/statements/select.y"
23261:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}
23262:     break;
23263: 
23264:   case 1039:
23265: #line 3267 "third_party/libpg_query/grammar/statements/select.y"
23266:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}
23267:     break;
23268: 
23269:   case 1040:
23270: #line 3271 "third_party/libpg_query/grammar/statements/select.y"
23271:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23272:     break;
23273: 
23274:   case 1041:
23275: #line 3272 "third_party/libpg_query/grammar/statements/select.y"
23276:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
23277:     break;
23278: 
23279:   case 1042:
23280: #line 3276 "third_party/libpg_query/grammar/statements/select.y"
23281:     {
23282: 					(yyval.target) = makeNode(PGResTarget);
23283: 					(yyval.target)->name = (yyvsp[(3) - (3)].str);
23284: 					(yyval.target)->indirection = NIL;
23285: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (3)].node);
23286: 					(yyval.target)->location = (yylsp[(1) - (3)]);
23287: 				;}
23288:     break;
23289: 
23290:   case 1043:
23291: #line 3292 "third_party/libpg_query/grammar/statements/select.y"
23292:     {
23293: 					(yyval.target) = makeNode(PGResTarget);
23294: 					(yyval.target)->name = (yyvsp[(2) - (2)].str);
23295: 					(yyval.target)->indirection = NIL;
23296: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (2)].node);
23297: 					(yyval.target)->location = (yylsp[(1) - (2)]);
23298: 				;}
23299:     break;
23300: 
23301:   case 1044:
23302: #line 3300 "third_party/libpg_query/grammar/statements/select.y"
23303:     {
23304: 					(yyval.target) = makeNode(PGResTarget);
23305: 					(yyval.target)->name = NULL;
23306: 					(yyval.target)->indirection = NIL;
23307: 					(yyval.target)->val = (PGNode *)(yyvsp[(1) - (1)].node);
23308: 					(yyval.target)->location = (yylsp[(1) - (1)]);
23309: 				;}
23310:     break;
23311: 
23312:   case 1045:
23313: #line 3308 "third_party/libpg_query/grammar/statements/select.y"
23314:     {
23315: 					PGColumnRef *n = makeNode(PGColumnRef);
23316: 					PGAStar *star = makeNode(PGAStar);
23317: 					n->fields = list_make1(star);
23318: 					n->location = (yylsp[(1) - (3)]);
23319: 					star->except_list = (yyvsp[(2) - (3)].list);
23320: 					star->replace_list = (yyvsp[(3) - (3)].list);
23321: 
23322: 					(yyval.target) = makeNode(PGResTarget);
23323: 					(yyval.target)->name = NULL;
23324: 					(yyval.target)->indirection = NIL;
23325: 					(yyval.target)->val = (PGNode *)n;
23326: 					(yyval.target)->location = (yylsp[(1) - (3)]);
23327: 				;}
23328:     break;
23329: 
23330:   case 1046:
23331: #line 3323 "third_party/libpg_query/grammar/statements/select.y"
23332:     {
23333: 					PGColumnRef *n = makeNode(PGColumnRef);
23334: 					PGAStar *star = makeNode(PGAStar);
23335: 					n->fields = list_make1(star);
23336: 					n->location = (yylsp[(1) - (5)]);
23337: 					star->relation = (yyvsp[(1) - (5)].str);
23338: 					star->except_list = (yyvsp[(4) - (5)].list);
23339: 					star->replace_list = (yyvsp[(5) - (5)].list);
23340: 
23341: 					(yyval.target) = makeNode(PGResTarget);
23342: 					(yyval.target)->name = NULL;
23343: 					(yyval.target)->indirection = NIL;
23344: 					(yyval.target)->val = (PGNode *)n;
23345: 					(yyval.target)->location = (yylsp[(1) - (5)]);
23346: 				;}
23347:     break;
23348: 
23349:   case 1047:
23350: #line 3340 "third_party/libpg_query/grammar/statements/select.y"
23351:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
23352:     break;
23353: 
23354:   case 1048:
23355: #line 3341 "third_party/libpg_query/grammar/statements/select.y"
23356:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
23357:     break;
23358: 
23359:   case 1049:
23360: #line 3344 "third_party/libpg_query/grammar/statements/select.y"
23361:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23362:     break;
23363: 
23364:   case 1050:
23365: #line 3345 "third_party/libpg_query/grammar/statements/select.y"
23366:     { (yyval.list) = NULL; ;}
23367:     break;
23368: 
23369:   case 1051:
23370: #line 3348 "third_party/libpg_query/grammar/statements/select.y"
23371:     { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}
23372:     break;
23373: 
23374:   case 1052:
23375: #line 3352 "third_party/libpg_query/grammar/statements/select.y"
23376:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}
23377:     break;
23378: 
23379:   case 1053:
23380: #line 3353 "third_party/libpg_query/grammar/statements/select.y"
23381:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}
23382:     break;
23383: 
23384:   case 1054:
23385: #line 3357 "third_party/libpg_query/grammar/statements/select.y"
23386:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23387:     break;
23388: 
23389:   case 1055:
23390: #line 3358 "third_party/libpg_query/grammar/statements/select.y"
23391:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
23392:     break;
23393: 
23394:   case 1056:
23395: #line 3361 "third_party/libpg_query/grammar/statements/select.y"
23396:     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}
23397:     break;
23398: 
23399:   case 1057:
23400: #line 3362 "third_party/libpg_query/grammar/statements/select.y"
23401:     { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}
23402:     break;
23403: 
23404:   case 1058:
23405: #line 3363 "third_party/libpg_query/grammar/statements/select.y"
23406:     { (yyval.list) = NULL; ;}
23407:     break;
23408: 
23409:   case 1059:
23410: #line 3373 "third_party/libpg_query/grammar/statements/select.y"
23411:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}
23412:     break;
23413: 
23414:   case 1060:
23415: #line 3374 "third_party/libpg_query/grammar/statements/select.y"
23416:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}
23417:     break;
23418: 
23419:   case 1061:
23420: #line 3386 "third_party/libpg_query/grammar/statements/select.y"
23421:     {
23422: 					(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23423: 				;}
23424:     break;
23425: 
23426:   case 1062:
23427: #line 3390 "third_party/libpg_query/grammar/statements/select.y"
23428:     {
23429: 					check_qualified_name((yyvsp[(2) - (2)].list), yyscanner);
23430: 					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));
23431: 					switch (list_length((yyvsp[(2) - (2)].list)))
23432: 					{
23433: 						case 1:
23434: 							(yyval.range)->catalogname = NULL;
23435: 							(yyval.range)->schemaname = (yyvsp[(1) - (2)].str);
23436: 							(yyval.range)->relname = strVal(linitial((yyvsp[(2) - (2)].list)));
23437: 							break;
23438: 						case 2:
23439: 							(yyval.range)->catalogname = (yyvsp[(1) - (2)].str);
23440: 							(yyval.range)->schemaname = strVal(linitial((yyvsp[(2) - (2)].list)));
23441: 							(yyval.range)->relname = strVal(lsecond((yyvsp[(2) - (2)].list)));
23442: 							break;
23443: 						default:
23444: 							ereport(ERROR,
23445: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23446: 									 errmsg("improper qualified name (too many dotted names): %s",
23447: 											NameListToString(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)))),
23448: 									 parser_errposition((yylsp[(1) - (2)]))));
23449: 							break;
23450: 					}
23451: 				;}
23452:     break;
23453: 
23454:   case 1063:
23455: #line 3417 "third_party/libpg_query/grammar/statements/select.y"
23456:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23457:     break;
23458: 
23459:   case 1064:
23460: #line 3419 "third_party/libpg_query/grammar/statements/select.y"
23461:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
23462:     break;
23463: 
23464:   case 1065:
23465: #line 3424 "third_party/libpg_query/grammar/statements/select.y"
23466:     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}
23467:     break;
23468: 
23469:   case 1066:
23470: #line 3425 "third_party/libpg_query/grammar/statements/select.y"
23471:     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}
23472:     break;
23473: 
23474:   case 1067:
23475: #line 3428 "third_party/libpg_query/grammar/statements/select.y"
23476:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23477:     break;
23478: 
23479:   case 1068:
23480: #line 3430 "third_party/libpg_query/grammar/statements/select.y"
23481:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23482:     break;
23483: 
23484:   case 1069:
23485: #line 3441 "third_party/libpg_query/grammar/statements/select.y"
23486:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23487:     break;
23488: 
23489:   case 1070:
23490: #line 3444 "third_party/libpg_query/grammar/statements/select.y"
23491:     {
23492: 						(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),
23493: 											 yyscanner);
23494: 					;}
23495:     break;
23496: 
23497:   case 1071:
23498: #line 3455 "third_party/libpg_query/grammar/statements/select.y"
23499:     {
23500: 					(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));
23501: 				;}
23502:     break;
23503: 
23504:   case 1072:
23505: #line 3459 "third_party/libpg_query/grammar/statements/select.y"
23506:     {
23507: 					(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23508: 				;}
23509:     break;
23510: 
23511:   case 1073:
23512: #line 3463 "third_party/libpg_query/grammar/statements/select.y"
23513:     {
23514: 					if ((yyvsp[(2) - (2)].list))
23515: 					{
23516: 						PGAIndirection *n = makeNode(PGAIndirection);
23517: 						n->arg = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
23518: 						n->indirection = check_indirection((yyvsp[(2) - (2)].list), yyscanner);
23519: 						(yyval.node) = (PGNode *) n;
23520: 					}
23521: 					else
23522: 						(yyval.node) = makeStringConst((yyvsp[(1) - (2)].str), (yylsp[(1) - (2)]));
23523: 				;}
23524:     break;
23525: 
23526:   case 1074:
23527: #line 3475 "third_party/libpg_query/grammar/statements/select.y"
23528:     {
23529: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23530: 				;}
23531:     break;
23532: 
23533:   case 1075:
23534: #line 3479 "third_party/libpg_query/grammar/statements/select.y"
23535:     {
23536: 					/* This is a bit constant per SQL99:
23537: 					 * Without Feature F511, "BIT data type",
23538: 					 * a <general literal> shall not be a
23539: 					 * <bit string literal> or a <hex string literal>.
23540: 					 */
23541: 					(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
23542: 				;}
23543:     break;
23544: 
23545:   case 1076:
23546: #line 3488 "third_party/libpg_query/grammar/statements/select.y"
23547:     {
23548: 					/* generic type 'literal' syntax */
23549: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));
23550: 					t->location = (yylsp[(1) - (2)]);
23551: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), t);
23552: 				;}
23553:     break;
23554: 
23555:   case 1077:
23556: #line 3495 "third_party/libpg_query/grammar/statements/select.y"
23557:     {
23558: 					/* generic syntax with a type modifier */
23559: 					PGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));
23560: 					PGListCell *lc;
23561: 
23562: 					/*
23563: 					 * We must use func_arg_list and opt_sort_clause in the
23564: 					 * production to avoid reduce/reduce conflicts, but we
23565: 					 * don't actually wish to allow PGNamedArgExpr in this
23566: 					 * context, ORDER BY, nor IGNORE NULLS.
23567: 					 */
23568: 					foreach(lc, (yyvsp[(3) - (7)].list))
23569: 					{
23570: 						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);
23571: 
23572: 						if (IsA(arg, PGNamedArgExpr))
23573: 							ereport(ERROR,
23574: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23575: 									 errmsg("type modifier cannot have parameter name"),
23576: 									 parser_errposition(arg->location)));
23577: 					}
23578: 					if ((yyvsp[(4) - (7)].list) != NIL)
23579: 							ereport(ERROR,
23580: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23581: 									 errmsg("type modifier cannot have ORDER BY"),
23582: 									 parser_errposition((yylsp[(4) - (7)]))));
23583: 					if ((yyvsp[(5) - (7)].boolean) != false)
23584: 							ereport(ERROR,
23585: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
23586: 									 errmsg("type modifier cannot have IGNORE NULLS"),
23587: 									 parser_errposition((yylsp[(5) - (7)]))));
23588: 
23589: 
23590: 					t->typmods = (yyvsp[(3) - (7)].list);
23591: 					t->location = (yylsp[(1) - (7)]);
23592: 					(yyval.node) = makeStringConstCast((yyvsp[(7) - (7)].str), (yylsp[(7) - (7)]), t);
23593: 				;}
23594:     break;
23595: 
23596:   case 1078:
23597: #line 3533 "third_party/libpg_query/grammar/statements/select.y"
23598:     {
23599: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));
23600: 				;}
23601:     break;
23602: 
23603:   case 1079:
23604: #line 3537 "third_party/libpg_query/grammar/statements/select.y"
23605:     {
23606: 					(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));
23607: 				;}
23608:     break;
23609: 
23610:   case 1080:
23611: #line 3541 "third_party/libpg_query/grammar/statements/select.y"
23612:     {
23613: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
23614: 				;}
23615:     break;
23616: 
23617:   case 1081:
23618: #line 3545 "third_party/libpg_query/grammar/statements/select.y"
23619:     {
23620: 					(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));
23621: 				;}
23622:     break;
23623: 
23624:   case 1082:
23625: #line 3549 "third_party/libpg_query/grammar/statements/select.y"
23626:     {
23627: 					(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));
23628: 				;}
23629:     break;
23630: 
23631:   case 1083:
23632: #line 3553 "third_party/libpg_query/grammar/statements/select.y"
23633:     {
23634: 					(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));
23635: 				;}
23636:     break;
23637: 
23638:   case 1084:
23639: #line 3557 "third_party/libpg_query/grammar/statements/select.y"
23640:     {
23641: 					(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));
23642: 				;}
23643:     break;
23644: 
23645:   case 1085:
23646: #line 3562 "third_party/libpg_query/grammar/statements/select.y"
23647:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
23648:     break;
23649: 
23650:   case 1086:
23651: #line 3563 "third_party/libpg_query/grammar/statements/select.y"
23652:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23653:     break;
23654: 
23655:   case 1087:
23656: #line 3579 "third_party/libpg_query/grammar/statements/select.y"
23657:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23658:     break;
23659: 
23660:   case 1088:
23661: #line 3580 "third_party/libpg_query/grammar/statements/select.y"
23662:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23663:     break;
23664: 
23665:   case 1089:
23666: #line 3581 "third_party/libpg_query/grammar/statements/select.y"
23667:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23668:     break;
23669: 
23670:   case 1090:
23671: #line 3584 "third_party/libpg_query/grammar/statements/select.y"
23672:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23673:     break;
23674: 
23675:   case 1091:
23676: #line 3585 "third_party/libpg_query/grammar/statements/select.y"
23677:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23678:     break;
23679: 
23680:   case 1092:
23681: #line 3591 "third_party/libpg_query/grammar/statements/select.y"
23682:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23683:     break;
23684: 
23685:   case 1093:
23686: #line 3592 "third_party/libpg_query/grammar/statements/select.y"
23687:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23688:     break;
23689: 
23690:   case 1094:
23691: #line 3593 "third_party/libpg_query/grammar/statements/select.y"
23692:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23693:     break;
23694: 
23695:   case 1095:
23696: #line 3596 "third_party/libpg_query/grammar/statements/select.y"
23697:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23698:     break;
23699: 
23700:   case 1096:
23701: #line 3597 "third_party/libpg_query/grammar/statements/select.y"
23702:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23703:     break;
23704: 
23705:   case 1097:
23706: #line 3598 "third_party/libpg_query/grammar/statements/select.y"
23707:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23708:     break;
23709: 
23710:   case 1098:
23711: #line 3601 "third_party/libpg_query/grammar/statements/select.y"
23712:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23713:     break;
23714: 
23715:   case 1099:
23716: #line 3602 "third_party/libpg_query/grammar/statements/select.y"
23717:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23718:     break;
23719: 
23720:   case 1100:
23721: #line 3603 "third_party/libpg_query/grammar/statements/select.y"
23722:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23723:     break;
23724: 
23725:   case 1101:
23726: #line 3606 "third_party/libpg_query/grammar/statements/select.y"
23727:     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}
23728:     break;
23729: 
23730:   case 1102:
23731: #line 3607 "third_party/libpg_query/grammar/statements/select.y"
23732:     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}
23733:     break;
23734: 
23735:   case 1103:
23736: #line 3611 "third_party/libpg_query/grammar/statements/select.y"
23737:     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}
23738:     break;
23739: 
23740:   case 1104:
23741: #line 3613 "third_party/libpg_query/grammar/statements/select.y"
23742:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}
23743:     break;
23744: 
23745:   case 1105:
23746: #line 3617 "third_party/libpg_query/grammar/statements/select.y"
23747:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
23748:     break;
23749: 
23750:   case 1106:
23751: #line 3618 "third_party/libpg_query/grammar/statements/select.y"
23752:     { (yyval.list) = NIL; ;}
23753:     break;
23754: 
23755:   case 1108:
23756: #line 3629 "third_party/libpg_query/grammar/statements/select.y"
23757:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23758:     break;
23759: 
23760:   case 1109:
23761: #line 3630 "third_party/libpg_query/grammar/statements/select.y"
23762:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23763:     break;
23764: 
23765:   case 1110:
23766: #line 3631 "third_party/libpg_query/grammar/statements/select.y"
23767:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23768:     break;
23769: 
23770:   case 1111:
23771: #line 3632 "third_party/libpg_query/grammar/statements/select.y"
23772:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
23773:     break;
23774: 
23775:   case 1112:
23776: #line 3635 "third_party/libpg_query/grammar/statements/select.y"
23777:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23778:     break;
23779: 
23780:   case 1113:
23781: #line 3636 "third_party/libpg_query/grammar/statements/select.y"
23782:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23783:     break;
23784: 
23785:   case 1114:
23786: #line 8 "third_party/libpg_query/grammar/statements/prepare.y"
23787:     {
23788: 					PGPrepareStmt *n = makeNode(PGPrepareStmt);
23789: 					n->name = (yyvsp[(2) - (5)].str);
23790: 					n->argtypes = (yyvsp[(3) - (5)].list);
23791: 					n->query = (yyvsp[(5) - (5)].node);
23792: 					(yyval.node) = (PGNode *) n;
23793: 				;}
23794:     break;
23795: 
23796:   case 1115:
23797: #line 18 "third_party/libpg_query/grammar/statements/prepare.y"
23798:     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}
23799:     break;
23800: 
23801:   case 1116:
23802: #line 19 "third_party/libpg_query/grammar/statements/prepare.y"
23803:     { (yyval.list) = NIL; ;}
23804:     break;
23805: 
23806:   case 1121:
23807: #line 8 "third_party/libpg_query/grammar/statements/create_schema.y"
23808:     {
23809: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
23810: 					/* ...but not both */
23811: 					n->schemaname = (yyvsp[(3) - (4)].str);
23812: 					n->schemaElts = (yyvsp[(4) - (4)].list);
23813: 					n->onconflict = PG_ERROR_ON_CONFLICT;
23814: 					(yyval.node) = (PGNode *)n;
23815: 				;}
23816:     break;
23817: 
23818:   case 1122:
23819: #line 17 "third_party/libpg_query/grammar/statements/create_schema.y"
23820:     {
23821: 					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
23822: 					/* ...but not here */
23823: 					n->schemaname = (yyvsp[(6) - (7)].str);
23824: 					if ((yyvsp[(7) - (7)].list) != NIL)
23825: 						ereport(ERROR,
23826: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
23827: 								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
23828: 								 parser_errposition((yylsp[(7) - (7)]))));
23829: 					n->schemaElts = (yyvsp[(7) - (7)].list);
23830: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
23831: 					(yyval.node) = (PGNode *)n;
23832: 				;}
23833:     break;
23834: 
23835:   case 1123:
23836: #line 35 "third_party/libpg_query/grammar/statements/create_schema.y"
23837:     {
23838: 					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
23839: 						(yyloc) = (yylsp[(2) - (2)]);
23840: 					(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));
23841: 				;}
23842:     break;
23843: 
23844:   case 1124:
23845: #line 41 "third_party/libpg_query/grammar/statements/create_schema.y"
23846:     { (yyval.list) = NIL; ;}
23847:     break;
23848: 
23849:   case 1129:
23850: #line 11 "third_party/libpg_query/grammar/statements/index.y"
23851:     {
23852: 					PGIndexStmt *n = makeNode(PGIndexStmt);
23853: 					n->unique = (yyvsp[(2) - (13)].boolean);
23854: 					n->concurrent = (yyvsp[(4) - (13)].boolean);
23855: 					n->idxname = (yyvsp[(5) - (13)].str);
23856: 					n->relation = (yyvsp[(7) - (13)].range);
23857: 					n->accessMethod = (yyvsp[(8) - (13)].str);
23858: 					n->indexParams = (yyvsp[(10) - (13)].list);
23859: 					n->options = (yyvsp[(12) - (13)].list);
23860: 					n->whereClause = (yyvsp[(13) - (13)].node);
23861: 					n->excludeOpNames = NIL;
23862: 					n->idxcomment = NULL;
23863: 					n->indexOid = InvalidOid;
23864: 					n->oldNode = InvalidOid;
23865: 					n->primary = false;
23866: 					n->isconstraint = false;
23867: 					n->deferrable = false;
23868: 					n->initdeferred = false;
23869: 					n->transformed = false;
23870: 					n->onconflict = PG_ERROR_ON_CONFLICT;
23871: 					(yyval.node) = (PGNode *)n;
23872: 				;}
23873:     break;
23874: 
23875:   case 1130:
23876: #line 36 "third_party/libpg_query/grammar/statements/index.y"
23877:     {
23878: 					PGIndexStmt *n = makeNode(PGIndexStmt);
23879: 					n->unique = (yyvsp[(2) - (16)].boolean);
23880: 					n->concurrent = (yyvsp[(4) - (16)].boolean);
23881: 					n->idxname = (yyvsp[(8) - (16)].str);
23882: 					n->relation = (yyvsp[(10) - (16)].range);
23883: 					n->accessMethod = (yyvsp[(11) - (16)].str);
23884: 					n->indexParams = (yyvsp[(13) - (16)].list);
23885: 					n->options = (yyvsp[(15) - (16)].list);
23886: 					n->whereClause = (yyvsp[(16) - (16)].node);
23887: 					n->excludeOpNames = NIL;
23888: 					n->idxcomment = NULL;
23889: 					n->indexOid = InvalidOid;
23890: 					n->oldNode = InvalidOid;
23891: 					n->primary = false;
23892: 					n->isconstraint = false;
23893: 					n->deferrable = false;
23894: 					n->initdeferred = false;
23895: 					n->transformed = false;
23896: 					n->onconflict = PG_IGNORE_ON_CONFLICT;
23897: 					(yyval.node) = (PGNode *)n;
23898: 				;}
23899:     break;
23900: 
23901:   case 1131:
23902: #line 62 "third_party/libpg_query/grammar/statements/index.y"
23903:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23904:     break;
23905: 
23906:   case 1132:
23907: #line 66 "third_party/libpg_query/grammar/statements/index.y"
23908:     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}
23909:     break;
23910: 
23911:   case 1133:
23912: #line 67 "third_party/libpg_query/grammar/statements/index.y"
23913:     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}
23914:     break;
23915: 
23916:   case 1134:
23917: #line 72 "third_party/libpg_query/grammar/statements/index.y"
23918:     { (yyval.boolean) = true; ;}
23919:     break;
23920: 
23921:   case 1135:
23922: #line 73 "third_party/libpg_query/grammar/statements/index.y"
23923:     { (yyval.boolean) = false; ;}
23924:     break;
23925: 
23926:   case 1136:
23927: #line 78 "third_party/libpg_query/grammar/statements/index.y"
23928:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
23929:     break;
23930: 
23931:   case 1137:
23932: #line 79 "third_party/libpg_query/grammar/statements/index.y"
23933:     { (yyval.str) = NULL; ;}
23934:     break;
23935: 
23936:   case 1138:
23937: #line 83 "third_party/libpg_query/grammar/statements/index.y"
23938:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
23939:     break;
23940: 
23941:   case 1139:
23942: #line 84 "third_party/libpg_query/grammar/statements/index.y"
23943:     { (yyval.list) = NIL; ;}
23944:     break;
23945: 
23946:   case 1140:
23947: #line 89 "third_party/libpg_query/grammar/statements/index.y"
23948:     { (yyval.boolean) = true; ;}
23949:     break;
23950: 
23951:   case 1141:
23952: #line 90 "third_party/libpg_query/grammar/statements/index.y"
23953:     { (yyval.boolean) = false; ;}
23954:     break;
23955: 
23956:   case 1142:
23957: #line 8 "third_party/libpg_query/grammar/statements/alter_schema.y"
23958:     {
23959: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23960: 					n->objectType = PG_OBJECT_TABLE;
23961: 					n->relation = (yyvsp[(3) - (6)].range);
23962: 					n->newschema = (yyvsp[(6) - (6)].str);
23963: 					n->missing_ok = false;
23964: 					(yyval.node) = (PGNode *)n;
23965: 				;}
23966:     break;
23967: 
23968:   case 1143:
23969: #line 17 "third_party/libpg_query/grammar/statements/alter_schema.y"
23970:     {
23971: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23972: 					n->objectType = PG_OBJECT_TABLE;
23973: 					n->relation = (yyvsp[(5) - (8)].range);
23974: 					n->newschema = (yyvsp[(8) - (8)].str);
23975: 					n->missing_ok = true;
23976: 					(yyval.node) = (PGNode *)n;
23977: 				;}
23978:     break;
23979: 
23980:   case 1144:
23981: #line 26 "third_party/libpg_query/grammar/statements/alter_schema.y"
23982:     {
23983: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23984: 					n->objectType = PG_OBJECT_SEQUENCE;
23985: 					n->relation = (yyvsp[(3) - (6)].range);
23986: 					n->newschema = (yyvsp[(6) - (6)].str);
23987: 					n->missing_ok = false;
23988: 					(yyval.node) = (PGNode *)n;
23989: 				;}
23990:     break;
23991: 
23992:   case 1145:
23993: #line 35 "third_party/libpg_query/grammar/statements/alter_schema.y"
23994:     {
23995: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
23996: 					n->objectType = PG_OBJECT_SEQUENCE;
23997: 					n->relation = (yyvsp[(5) - (8)].range);
23998: 					n->newschema = (yyvsp[(8) - (8)].str);
23999: 					n->missing_ok = true;
24000: 					(yyval.node) = (PGNode *)n;
24001: 				;}
24002:     break;
24003: 
24004:   case 1146:
24005: #line 44 "third_party/libpg_query/grammar/statements/alter_schema.y"
24006:     {
24007: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
24008: 					n->objectType = PG_OBJECT_VIEW;
24009: 					n->relation = (yyvsp[(3) - (6)].range);
24010: 					n->newschema = (yyvsp[(6) - (6)].str);
24011: 					n->missing_ok = false;
24012: 					(yyval.node) = (PGNode *)n;
24013: 				;}
24014:     break;
24015: 
24016:   case 1147:
24017: #line 53 "third_party/libpg_query/grammar/statements/alter_schema.y"
24018:     {
24019: 					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
24020: 					n->objectType = PG_OBJECT_VIEW;
24021: 					n->relation = (yyvsp[(5) - (8)].range);
24022: 					n->newschema = (yyvsp[(8) - (8)].str);
24023: 					n->missing_ok = true;
24024: 					(yyval.node) = (PGNode *)n;
24025: 				;}
24026:     break;
24027: 
24028:   case 1148:
24029: #line 6 "third_party/libpg_query/grammar/statements/checkpoint.y"
24030:     {
24031: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
24032: 					n->force = true;
24033: 					(yyval.node) = (PGNode *)n;
24034: 				;}
24035:     break;
24036: 
24037:   case 1149:
24038: #line 12 "third_party/libpg_query/grammar/statements/checkpoint.y"
24039:     {
24040: 					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
24041: 					n->force = false;
24042: 					(yyval.node) = (PGNode *)n;
24043: 				;}
24044:     break;
24045: 
24046:   case 1150:
24047: #line 8 "third_party/libpg_query/grammar/statements/export.y"
24048:     {
24049: 					PGExportStmt *n = makeNode(PGExportStmt);
24050: 					n->filename = (yyvsp[(3) - (4)].str);
24051: 					n->options = NIL;
24052: 					if ((yyvsp[(4) - (4)].list)) {
24053: 						n->options = list_concat(n->options, (yyvsp[(4) - (4)].list));
24054: 					}
24055: 					(yyval.node) = (PGNode *)n;
24056: 				;}
24057:     break;
24058: 
24059:   case 1151:
24060: #line 21 "third_party/libpg_query/grammar/statements/export.y"
24061:     {
24062: 					PGImportStmt *n = makeNode(PGImportStmt);
24063: 					n->filename = (yyvsp[(3) - (3)].str);
24064: 					(yyval.node) = (PGNode *)n;
24065: 				;}
24066:     break;
24067: 
24068:   case 1152:
24069: #line 10 "third_party/libpg_query/grammar/statements/explain.y"
24070:     {
24071: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24072: 					n->query = (yyvsp[(2) - (2)].node);
24073: 					n->options = NIL;
24074: 					(yyval.node) = (PGNode *) n;
24075: 				;}
24076:     break;
24077: 
24078:   case 1153:
24079: #line 17 "third_party/libpg_query/grammar/statements/explain.y"
24080:     {
24081: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24082: 					n->query = (yyvsp[(4) - (4)].node);
24083: 					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[(2) - (4)])));
24084: 					if ((yyvsp[(3) - (4)].boolean))
24085: 						n->options = lappend(n->options,
24086: 											 makeDefElem("verbose", NULL, (yylsp[(3) - (4)])));
24087: 					(yyval.node) = (PGNode *) n;
24088: 				;}
24089:     break;
24090: 
24091:   case 1154:
24092: #line 27 "third_party/libpg_query/grammar/statements/explain.y"
24093:     {
24094: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24095: 					n->query = (yyvsp[(3) - (3)].node);
24096: 					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[(2) - (3)])));
24097: 					(yyval.node) = (PGNode *) n;
24098: 				;}
24099:     break;
24100: 
24101:   case 1155:
24102: #line 34 "third_party/libpg_query/grammar/statements/explain.y"
24103:     {
24104: 					PGExplainStmt *n = makeNode(PGExplainStmt);
24105: 					n->query = (yyvsp[(5) - (5)].node);
24106: 					n->options = (yyvsp[(3) - (5)].list);
24107: 					(yyval.node) = (PGNode *) n;
24108: 				;}
24109:     break;
24110: 
24111:   case 1156:
24112: #line 44 "third_party/libpg_query/grammar/statements/explain.y"
24113:     { (yyval.boolean) = true; ;}
24114:     break;
24115: 
24116:   case 1157:
24117: #line 45 "third_party/libpg_query/grammar/statements/explain.y"
24118:     { (yyval.boolean) = false; ;}
24119:     break;
24120: 
24121:   case 1158:
24122: #line 50 "third_party/libpg_query/grammar/statements/explain.y"
24123:     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}
24124:     break;
24125: 
24126:   case 1159:
24127: #line 51 "third_party/libpg_query/grammar/statements/explain.y"
24128:     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}
24129:     break;
24130: 
24131:   case 1160:
24132: #line 52 "third_party/libpg_query/grammar/statements/explain.y"
24133:     { (yyval.node) = NULL; ;}
24134:     break;
24135: 
24136:   case 1166:
24137: #line 65 "third_party/libpg_query/grammar/statements/explain.y"
24138:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24139:     break;
24140: 
24141:   case 1167:
24142: #line 66 "third_party/libpg_query/grammar/statements/explain.y"
24143:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
24144:     break;
24145: 
24146:   case 1168:
24147: #line 67 "third_party/libpg_query/grammar/statements/explain.y"
24148:     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}
24149:     break;
24150: 
24151:   case 1169:
24152: #line 72 "third_party/libpg_query/grammar/statements/explain.y"
24153:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24154:     break;
24155: 
24156:   case 1170:
24157: #line 73 "third_party/libpg_query/grammar/statements/explain.y"
24158:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24159:     break;
24160: 
24161:   case 1171:
24162: #line 79 "third_party/libpg_query/grammar/statements/explain.y"
24163:     {
24164: 					(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));
24165: 				;}
24166:     break;
24167: 
24168:   case 1172:
24169: #line 83 "third_party/libpg_query/grammar/statements/explain.y"
24170:     {
24171: 					(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));
24172: 				;}
24173:     break;
24174: 
24175:   case 1173:
24176: #line 90 "third_party/libpg_query/grammar/statements/explain.y"
24177:     {;}
24178:     break;
24179: 
24180:   case 1174:
24181: #line 91 "third_party/libpg_query/grammar/statements/explain.y"
24182:     {;}
24183:     break;
24184: 
24185:   case 1175:
24186: #line 96 "third_party/libpg_query/grammar/statements/explain.y"
24187:     { (yyval.str) = (char*) "true"; ;}
24188:     break;
24189: 
24190:   case 1176:
24191: #line 97 "third_party/libpg_query/grammar/statements/explain.y"
24192:     { (yyval.str) = (char*) "false"; ;}
24193:     break;
24194: 
24195:   case 1177:
24196: #line 98 "third_party/libpg_query/grammar/statements/explain.y"
24197:     { (yyval.str) = (char*) "on"; ;}
24198:     break;
24199: 
24200:   case 1178:
24201: #line 104 "third_party/libpg_query/grammar/statements/explain.y"
24202:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24203:     break;
24204: 
24205:   case 1179:
24206: #line 110 "third_party/libpg_query/grammar/statements/explain.y"
24207:     {
24208: 					(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));
24209: 				;}
24210:     break;
24211: 
24212:   case 1180:
24213: #line 117 "third_party/libpg_query/grammar/statements/explain.y"
24214:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24215:     break;
24216: 
24217:   case 1181:
24218: #line 118 "third_party/libpg_query/grammar/statements/explain.y"
24219:     { (yyval.str) = (char*) "analyze"; ;}
24220:     break;
24221: 
24222:   case 1182:
24223: #line 11 "third_party/libpg_query/grammar/statements/variable_set.y"
24224:     {
24225: 					PGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);
24226: 					n->scope = VAR_SET_SCOPE_DEFAULT;
24227: 					(yyval.node) = (PGNode *) n;
24228: 				;}
24229:     break;
24230: 
24231:   case 1183:
24232: #line 17 "third_party/libpg_query/grammar/statements/variable_set.y"
24233:     {
24234: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24235: 					n->scope = VAR_SET_SCOPE_LOCAL;
24236: 					(yyval.node) = (PGNode *) n;
24237: 				;}
24238:     break;
24239: 
24240:   case 1184:
24241: #line 23 "third_party/libpg_query/grammar/statements/variable_set.y"
24242:     {
24243: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24244: 					n->scope = VAR_SET_SCOPE_SESSION;
24245: 					(yyval.node) = (PGNode *) n;
24246: 				;}
24247:     break;
24248: 
24249:   case 1185:
24250: #line 29 "third_party/libpg_query/grammar/statements/variable_set.y"
24251:     {
24252: 					PGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);
24253: 					n->scope = VAR_SET_SCOPE_GLOBAL;
24254: 					(yyval.node) = (PGNode *) n;
24255: 				;}
24256:     break;
24257: 
24258:   case 1186:
24259: #line 38 "third_party/libpg_query/grammar/statements/variable_set.y"
24260:     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}
24261:     break;
24262: 
24263:   case 1187:
24264: #line 40 "third_party/libpg_query/grammar/statements/variable_set.y"
24265:     {
24266: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24267: 					n->kind = VAR_SET_CURRENT;
24268: 					n->name = (yyvsp[(1) - (3)].str);
24269: 					(yyval.vsetstmt) = n;
24270: 				;}
24271:     break;
24272: 
24273:   case 1188:
24274: #line 48 "third_party/libpg_query/grammar/statements/variable_set.y"
24275:     {
24276: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24277: 					n->kind = VAR_SET_VALUE;
24278: 					n->name = (char*) "timezone";
24279: 					if ((yyvsp[(3) - (3)].node) != NULL)
24280: 						n->args = list_make1((yyvsp[(3) - (3)].node));
24281: 					else
24282: 						n->kind = VAR_SET_DEFAULT;
24283: 					(yyval.vsetstmt) = n;
24284: 				;}
24285:     break;
24286: 
24287:   case 1189:
24288: #line 59 "third_party/libpg_query/grammar/statements/variable_set.y"
24289:     {
24290: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24291: 					n->kind = VAR_SET_VALUE;
24292: 					n->name = (char*) "search_path";
24293: 					n->args = list_make1(makeStringConst((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)])));
24294: 					(yyval.vsetstmt) = n;
24295: 				;}
24296:     break;
24297: 
24298:   case 1190:
24299: #line 71 "third_party/libpg_query/grammar/statements/variable_set.y"
24300:     {
24301: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24302: 					n->kind = VAR_SET_VALUE;
24303: 					n->name = (yyvsp[(1) - (3)].str);
24304: 					n->args = (yyvsp[(3) - (3)].list);
24305: 					(yyval.vsetstmt) = n;
24306: 				;}
24307:     break;
24308: 
24309:   case 1191:
24310: #line 79 "third_party/libpg_query/grammar/statements/variable_set.y"
24311:     {
24312: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24313: 					n->kind = VAR_SET_VALUE;
24314: 					n->name = (yyvsp[(1) - (3)].str);
24315: 					n->args = (yyvsp[(3) - (3)].list);
24316: 					(yyval.vsetstmt) = n;
24317: 				;}
24318:     break;
24319: 
24320:   case 1192:
24321: #line 87 "third_party/libpg_query/grammar/statements/variable_set.y"
24322:     {
24323: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24324: 					n->kind = VAR_SET_DEFAULT;
24325: 					n->name = (yyvsp[(1) - (3)].str);
24326: 					(yyval.vsetstmt) = n;
24327: 				;}
24328:     break;
24329: 
24330:   case 1193:
24331: #line 94 "third_party/libpg_query/grammar/statements/variable_set.y"
24332:     {
24333: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24334: 					n->kind = VAR_SET_DEFAULT;
24335: 					n->name = (yyvsp[(1) - (3)].str);
24336: 					(yyval.vsetstmt) = n;
24337: 				;}
24338:     break;
24339: 
24340:   case 1194:
24341: #line 104 "third_party/libpg_query/grammar/statements/variable_set.y"
24342:     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}
24343:     break;
24344: 
24345:   case 1195:
24346: #line 106 "third_party/libpg_query/grammar/statements/variable_set.y"
24347:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
24348:     break;
24349: 
24350:   case 1196:
24351: #line 112 "third_party/libpg_query/grammar/statements/variable_set.y"
24352:     {
24353: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
24354: 				;}
24355:     break;
24356: 
24357:   case 1197:
24358: #line 116 "third_party/libpg_query/grammar/statements/variable_set.y"
24359:     {
24360: 					(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));
24361: 				;}
24362:     break;
24363: 
24364:   case 1198:
24365: #line 120 "third_party/libpg_query/grammar/statements/variable_set.y"
24366:     {
24367: 					PGTypeName *t = (yyvsp[(1) - (3)].typnam);
24368: 					if ((yyvsp[(3) - (3)].list) != NIL)
24369: 					{
24370: 						PGAConst *n = (PGAConst *) linitial((yyvsp[(3) - (3)].list));
24371: 						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
24372: 							ereport(ERROR,
24373: 									(errcode(PG_ERRCODE_SYNTAX_ERROR),
24374: 									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
24375: 									 parser_errposition((yylsp[(3) - (3)]))));
24376: 					}
24377: 					t->typmods = (yyvsp[(3) - (3)].list);
24378: 					(yyval.node) = makeStringConstCast((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), t);
24379: 				;}
24380:     break;
24381: 
24382:   case 1199:
24383: #line 135 "third_party/libpg_query/grammar/statements/variable_set.y"
24384:     {
24385: 					PGTypeName *t = (yyvsp[(1) - (5)].typnam);
24386: 					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
24387: 											makeIntConst((yyvsp[(3) - (5)].ival), (yylsp[(3) - (5)])));
24388: 					(yyval.node) = makeStringConstCast((yyvsp[(5) - (5)].str), (yylsp[(5) - (5)]), t);
24389: 				;}
24390:     break;
24391: 
24392:   case 1200:
24393: #line 141 "third_party/libpg_query/grammar/statements/variable_set.y"
24394:     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}
24395:     break;
24396: 
24397:   case 1201:
24398: #line 142 "third_party/libpg_query/grammar/statements/variable_set.y"
24399:     { (yyval.node) = NULL; ;}
24400:     break;
24401: 
24402:   case 1202:
24403: #line 143 "third_party/libpg_query/grammar/statements/variable_set.y"
24404:     { (yyval.node) = NULL; ;}
24405:     break;
24406: 
24407:   case 1203:
24408: #line 147 "third_party/libpg_query/grammar/statements/variable_set.y"
24409:     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}
24410:     break;
24411: 
24412:   case 1204:
24413: #line 148 "third_party/libpg_query/grammar/statements/variable_set.y"
24414:     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}
24415:     break;
24416: 
24417:   case 1205:
24418: #line 8 "third_party/libpg_query/grammar/statements/load.y"
24419:     {
24420: 					PGLoadStmt *n = makeNode(PGLoadStmt);
24421: 					n->filename = (yyvsp[(2) - (2)].str);
24422: 					n->load_type = PG_LOAD_TYPE_LOAD;
24423: 					(yyval.node) = (PGNode *)n;
24424: 				;}
24425:     break;
24426: 
24427:   case 1206:
24428: #line 14 "third_party/libpg_query/grammar/statements/load.y"
24429:     {
24430:                     PGLoadStmt *n = makeNode(PGLoadStmt);
24431:                     n->filename = (yyvsp[(2) - (2)].str);
24432:                     n->load_type = PG_LOAD_TYPE_INSTALL;
24433:                     (yyval.node) = (PGNode *)n;
24434: 				;}
24435:     break;
24436: 
24437:   case 1207:
24438: #line 20 "third_party/libpg_query/grammar/statements/load.y"
24439:     {
24440:                       PGLoadStmt *n = makeNode(PGLoadStmt);
24441:                       n->filename = (yyvsp[(3) - (3)].str);
24442:                       n->load_type = PG_LOAD_TYPE_FORCE_INSTALL;
24443:                       (yyval.node) = (PGNode *)n;
24444:                 ;}
24445:     break;
24446: 
24447:   case 1208:
24448: #line 28 "third_party/libpg_query/grammar/statements/load.y"
24449:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24450:     break;
24451: 
24452:   case 1209:
24453: #line 29 "third_party/libpg_query/grammar/statements/load.y"
24454:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24455:     break;
24456: 
24457:   case 1210:
24458: #line 9 "third_party/libpg_query/grammar/statements/vacuum.y"
24459:     {
24460: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24461: 					n->options = PG_VACOPT_VACUUM;
24462: 					if ((yyvsp[(2) - (4)].boolean))
24463: 						n->options |= PG_VACOPT_FULL;
24464: 					if ((yyvsp[(3) - (4)].boolean))
24465: 						n->options |= PG_VACOPT_FREEZE;
24466: 					if ((yyvsp[(4) - (4)].boolean))
24467: 						n->options |= PG_VACOPT_VERBOSE;
24468: 					n->relation = NULL;
24469: 					n->va_cols = NIL;
24470: 					(yyval.node) = (PGNode *)n;
24471: 				;}
24472:     break;
24473: 
24474:   case 1211:
24475: #line 23 "third_party/libpg_query/grammar/statements/vacuum.y"
24476:     {
24477: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24478: 					n->options = PG_VACOPT_VACUUM;
24479: 					if ((yyvsp[(2) - (5)].boolean))
24480: 						n->options |= PG_VACOPT_FULL;
24481: 					if ((yyvsp[(3) - (5)].boolean))
24482: 						n->options |= PG_VACOPT_FREEZE;
24483: 					if ((yyvsp[(4) - (5)].boolean))
24484: 						n->options |= PG_VACOPT_VERBOSE;
24485: 					n->relation = (yyvsp[(5) - (5)].range);
24486: 					n->va_cols = NIL;
24487: 					(yyval.node) = (PGNode *)n;
24488: 				;}
24489:     break;
24490: 
24491:   case 1212:
24492: #line 37 "third_party/libpg_query/grammar/statements/vacuum.y"
24493:     {
24494: 					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);
24495: 					n->options |= PG_VACOPT_VACUUM;
24496: 					if ((yyvsp[(2) - (5)].boolean))
24497: 						n->options |= PG_VACOPT_FULL;
24498: 					if ((yyvsp[(3) - (5)].boolean))
24499: 						n->options |= PG_VACOPT_FREEZE;
24500: 					if ((yyvsp[(4) - (5)].boolean))
24501: 						n->options |= PG_VACOPT_VERBOSE;
24502: 					(yyval.node) = (PGNode *)n;
24503: 				;}
24504:     break;
24505: 
24506:   case 1213:
24507: #line 49 "third_party/libpg_query/grammar/statements/vacuum.y"
24508:     {
24509: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24510: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (4)].ival);
24511: 					n->relation = NULL;
24512: 					n->va_cols = NIL;
24513: 					(yyval.node) = (PGNode *) n;
24514: 				;}
24515:     break;
24516: 
24517:   case 1214:
24518: #line 57 "third_party/libpg_query/grammar/statements/vacuum.y"
24519:     {
24520: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24521: 					n->options = PG_VACOPT_VACUUM | (yyvsp[(3) - (6)].ival);
24522: 					n->relation = (yyvsp[(5) - (6)].range);
24523: 					n->va_cols = (yyvsp[(6) - (6)].list);
24524: 					if (n->va_cols != NIL)	/* implies analyze */
24525: 						n->options |= PG_VACOPT_ANALYZE;
24526: 					(yyval.node) = (PGNode *) n;
24527: 				;}
24528:     break;
24529: 
24530:   case 1215:
24531: #line 70 "third_party/libpg_query/grammar/statements/vacuum.y"
24532:     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}
24533:     break;
24534: 
24535:   case 1216:
24536: #line 71 "third_party/libpg_query/grammar/statements/vacuum.y"
24537:     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}
24538:     break;
24539: 
24540:   case 1217:
24541: #line 72 "third_party/libpg_query/grammar/statements/vacuum.y"
24542:     { (yyval.ival) = PG_VACOPT_FREEZE; ;}
24543:     break;
24544: 
24545:   case 1218:
24546: #line 73 "third_party/libpg_query/grammar/statements/vacuum.y"
24547:     { (yyval.ival) = PG_VACOPT_FULL; ;}
24548:     break;
24549: 
24550:   case 1219:
24551: #line 75 "third_party/libpg_query/grammar/statements/vacuum.y"
24552:     {
24553: 					if (strcmp((yyvsp[(1) - (1)].str), "disable_page_skipping") == 0)
24554: 						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
24555: 					else
24556: 						ereport(ERROR,
24557: 								(errcode(PG_ERRCODE_SYNTAX_ERROR),
24558: 							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[(1) - (1)].str)),
24559: 									 parser_errposition((yylsp[(1) - (1)]))));
24560: 				;}
24561:     break;
24562: 
24563:   case 1220:
24564: #line 87 "third_party/libpg_query/grammar/statements/vacuum.y"
24565:     { (yyval.boolean) = true; ;}
24566:     break;
24567: 
24568:   case 1221:
24569: #line 88 "third_party/libpg_query/grammar/statements/vacuum.y"
24570:     { (yyval.boolean) = false; ;}
24571:     break;
24572: 
24573:   case 1222:
24574: #line 93 "third_party/libpg_query/grammar/statements/vacuum.y"
24575:     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}
24576:     break;
24577: 
24578:   case 1223:
24579: #line 94 "third_party/libpg_query/grammar/statements/vacuum.y"
24580:     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}
24581:     break;
24582: 
24583:   case 1224:
24584: #line 98 "third_party/libpg_query/grammar/statements/vacuum.y"
24585:     { (yyval.boolean) = true; ;}
24586:     break;
24587: 
24588:   case 1225:
24589: #line 99 "third_party/libpg_query/grammar/statements/vacuum.y"
24590:     { (yyval.boolean) = false; ;}
24591:     break;
24592: 
24593:   case 1226:
24594: #line 9 "third_party/libpg_query/grammar/statements/delete.y"
24595:     {
24596: 					PGDeleteStmt *n = makeNode(PGDeleteStmt);
24597: 					n->relation = (yyvsp[(4) - (7)].range);
24598: 					n->usingClause = (yyvsp[(5) - (7)].list);
24599: 					n->whereClause = (yyvsp[(6) - (7)].node);
24600: 					n->returningList = (yyvsp[(7) - (7)].list);
24601: 					n->withClause = (yyvsp[(1) - (7)].with);
24602: 					(yyval.node) = (PGNode *)n;
24603: 				;}
24604:     break;
24605: 
24606:   case 1227:
24607: #line 22 "third_party/libpg_query/grammar/statements/delete.y"
24608:     {
24609: 					(yyval.range) = (yyvsp[(1) - (1)].range);
24610: 				;}
24611:     break;
24612: 
24613:   case 1228:
24614: #line 26 "third_party/libpg_query/grammar/statements/delete.y"
24615:     {
24616: 					PGAlias *alias = makeNode(PGAlias);
24617: 					alias->aliasname = (yyvsp[(2) - (2)].str);
24618: 					(yyvsp[(1) - (2)].range)->alias = alias;
24619: 					(yyval.range) = (yyvsp[(1) - (2)].range);
24620: 				;}
24621:     break;
24622: 
24623:   case 1229:
24624: #line 33 "third_party/libpg_query/grammar/statements/delete.y"
24625:     {
24626: 					PGAlias *alias = makeNode(PGAlias);
24627: 					alias->aliasname = (yyvsp[(3) - (3)].str);
24628: 					(yyvsp[(1) - (3)].range)->alias = alias;
24629: 					(yyval.range) = (yyvsp[(1) - (3)].range);
24630: 				;}
24631:     break;
24632: 
24633:   case 1230:
24634: #line 43 "third_party/libpg_query/grammar/statements/delete.y"
24635:     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}
24636:     break;
24637: 
24638:   case 1231:
24639: #line 44 "third_party/libpg_query/grammar/statements/delete.y"
24640:     { (yyval.node) = NULL; ;}
24641:     break;
24642: 
24643:   case 1232:
24644: #line 50 "third_party/libpg_query/grammar/statements/delete.y"
24645:     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}
24646:     break;
24647: 
24648:   case 1233:
24649: #line 51 "third_party/libpg_query/grammar/statements/delete.y"
24650:     { (yyval.list) = NIL; ;}
24651:     break;
24652: 
24653:   case 1234:
24654: #line 10 "third_party/libpg_query/grammar/statements/analyze.y"
24655:     {
24656: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24657: 					n->options = PG_VACOPT_ANALYZE;
24658: 					if ((yyvsp[(2) - (2)].boolean))
24659: 						n->options |= PG_VACOPT_VERBOSE;
24660: 					n->relation = NULL;
24661: 					n->va_cols = NIL;
24662: 					(yyval.node) = (PGNode *)n;
24663: 				;}
24664:     break;
24665: 
24666:   case 1235:
24667: #line 20 "third_party/libpg_query/grammar/statements/analyze.y"
24668:     {
24669: 					PGVacuumStmt *n = makeNode(PGVacuumStmt);
24670: 					n->options = PG_VACOPT_ANALYZE;
24671: 					if ((yyvsp[(2) - (4)].boolean))
24672: 						n->options |= PG_VACOPT_VERBOSE;
24673: 					n->relation = (yyvsp[(3) - (4)].range);
24674: 					n->va_cols = (yyvsp[(4) - (4)].list);
24675: 					(yyval.node) = (PGNode *)n;
24676: 				;}
24677:     break;
24678: 
24679:   case 1236:
24680: #line 2 "third_party/libpg_query/grammar/statements/variable_reset.y"
24681:     { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}
24682:     break;
24683: 
24684:   case 1237:
24685: #line 8 "third_party/libpg_query/grammar/statements/variable_reset.y"
24686:     {
24687: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24688: 					n->kind = VAR_RESET;
24689: 					n->name = (yyvsp[(1) - (1)].str);
24690: 					(yyval.vsetstmt) = n;
24691: 				;}
24692:     break;
24693: 
24694:   case 1238:
24695: #line 15 "third_party/libpg_query/grammar/statements/variable_reset.y"
24696:     {
24697: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24698: 					n->kind = VAR_RESET_ALL;
24699: 					(yyval.vsetstmt) = n;
24700: 				;}
24701:     break;
24702: 
24703:   case 1239:
24704: #line 24 "third_party/libpg_query/grammar/statements/variable_reset.y"
24705:     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}
24706:     break;
24707: 
24708:   case 1240:
24709: #line 26 "third_party/libpg_query/grammar/statements/variable_reset.y"
24710:     {
24711: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24712: 					n->kind = VAR_RESET;
24713: 					n->name = (char*) "timezone";
24714: 					(yyval.vsetstmt) = n;
24715: 				;}
24716:     break;
24717: 
24718:   case 1241:
24719: #line 33 "third_party/libpg_query/grammar/statements/variable_reset.y"
24720:     {
24721: 					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
24722: 					n->kind = VAR_RESET;
24723: 					n->name = (char*) "transaction_isolation";
24724: 					(yyval.vsetstmt) = n;
24725: 				;}
24726:     break;
24727: 
24728:   case 1242:
24729: #line 3 "third_party/libpg_query/grammar/statements/variable_show.y"
24730:     {
24731: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
24732: 				n->stmt = (yyvsp[(2) - (2)].node);
24733: 				n->name = (char*) "select";
24734: 				n->is_summary = 0;
24735: 				(yyval.node) = (PGNode *) n;
24736: 			;}
24737:     break;
24738: 
24739:   case 1243:
24740: #line 10 "third_party/libpg_query/grammar/statements/variable_show.y"
24741:     {
24742: 				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
24743: 				n->stmt = (yyvsp[(2) - (2)].node);
24744: 				n->name = (char*) "select";
24745: 				n->is_summary = 1;
24746: 				(yyval.node) = (PGNode *) n;
24747: 			;}
24748:     break;
24749: 
24750:   case 1244:
24751: #line 18 "third_party/libpg_query/grammar/statements/variable_show.y"
24752:     {
24753: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24754: 				n->name = (yyvsp[(2) - (2)].str);
24755: 				n->is_summary = 1;
24756: 				(yyval.node) = (PGNode *) n;
24757: 			;}
24758:     break;
24759: 
24760:   case 1245:
24761: #line 25 "third_party/libpg_query/grammar/statements/variable_show.y"
24762:     {
24763: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24764: 				n->name = (yyvsp[(2) - (2)].str);
24765: 				n->is_summary = 0;
24766: 				(yyval.node) = (PGNode *) n;
24767: 			;}
24768:     break;
24769: 
24770:   case 1246:
24771: #line 32 "third_party/libpg_query/grammar/statements/variable_show.y"
24772:     {
24773: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24774: 				n->name = (char*) "timezone";
24775: 				n->is_summary = 0;
24776: 				(yyval.node) = (PGNode *) n;
24777: 			;}
24778:     break;
24779: 
24780:   case 1247:
24781: #line 39 "third_party/libpg_query/grammar/statements/variable_show.y"
24782:     {
24783: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24784: 				n->name = (char*) "transaction_isolation";
24785: 				n->is_summary = 0;
24786: 				(yyval.node) = (PGNode *) n;
24787: 			;}
24788:     break;
24789: 
24790:   case 1248:
24791: #line 46 "third_party/libpg_query/grammar/statements/variable_show.y"
24792:     {
24793: 				PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
24794: 				n->name = (char*) "all";
24795: 				n->is_summary = 0;
24796: 				(yyval.node) = (PGNode *) n;
24797: 			;}
24798:     break;
24799: 
24800:   case 1251:
24801: #line 57 "third_party/libpg_query/grammar/statements/variable_show.y"
24802:     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}
24803:     break;
24804: 
24805:   case 1252:
24806: #line 59 "third_party/libpg_query/grammar/statements/variable_show.y"
24807:     { (yyval.str) = psprintf("%s.%s", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}
24808:     break;
24809: 
24810:   case 1253:
24811: #line 7 "third_party/libpg_query/grammar/statements/call.y"
24812:     {
24813: 					PGCallStmt *n = makeNode(PGCallStmt);
24814: 					n->func = (yyvsp[(2) - (2)].node);
24815: 					(yyval.node) = (PGNode *) n;
24816: 				;}
24817:     break;
24818: 
24819:   case 1254:
24820: #line 10 "third_party/libpg_query/grammar/statements/view.y"
24821:     {
24822: 					PGViewStmt *n = makeNode(PGViewStmt);
24823: 					n->view = (yyvsp[(4) - (9)].range);
24824: 					n->view->relpersistence = (yyvsp[(2) - (9)].ival);
24825: 					n->aliases = (yyvsp[(5) - (9)].list);
24826: 					n->query = (yyvsp[(8) - (9)].node);
24827: 					n->onconflict = PG_ERROR_ON_CONFLICT;
24828: 					n->options = (yyvsp[(6) - (9)].list);
24829: 					n->withCheckOption = (yyvsp[(9) - (9)].viewcheckoption);
24830: 					(yyval.node) = (PGNode *) n;
24831: 				;}
24832:     break;
24833: 
24834:   case 1255:
24835: #line 23 "third_party/libpg_query/grammar/statements/view.y"
24836:     {
24837: 					PGViewStmt *n = makeNode(PGViewStmt);
24838: 					n->view = (yyvsp[(6) - (11)].range);
24839: 					n->view->relpersistence = (yyvsp[(4) - (11)].ival);
24840: 					n->aliases = (yyvsp[(7) - (11)].list);
24841: 					n->query = (yyvsp[(10) - (11)].node);
24842: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
24843: 					n->options = (yyvsp[(8) - (11)].list);
24844: 					n->withCheckOption = (yyvsp[(11) - (11)].viewcheckoption);
24845: 					(yyval.node) = (PGNode *) n;
24846: 				;}
24847:     break;
24848: 
24849:   case 1256:
24850: #line 36 "third_party/libpg_query/grammar/statements/view.y"
24851:     {
24852: 					PGViewStmt *n = makeNode(PGViewStmt);
24853: 					n->view = (yyvsp[(5) - (12)].range);
24854: 					n->view->relpersistence = (yyvsp[(2) - (12)].ival);
24855: 					n->aliases = (yyvsp[(7) - (12)].list);
24856: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(11) - (12)].node));
24857: 					n->onconflict = PG_ERROR_ON_CONFLICT;
24858: 					n->options = (yyvsp[(9) - (12)].list);
24859: 					n->withCheckOption = (yyvsp[(12) - (12)].viewcheckoption);
24860: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
24861: 						ereport(ERROR,
24862: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24863: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
24864: 								 parser_errposition((yylsp[(12) - (12)]))));
24865: 					(yyval.node) = (PGNode *) n;
24866: 				;}
24867:     break;
24868: 
24869:   case 1257:
24870: #line 54 "third_party/libpg_query/grammar/statements/view.y"
24871:     {
24872: 					PGViewStmt *n = makeNode(PGViewStmt);
24873: 					n->view = (yyvsp[(7) - (14)].range);
24874: 					n->view->relpersistence = (yyvsp[(4) - (14)].ival);
24875: 					n->aliases = (yyvsp[(9) - (14)].list);
24876: 					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[(13) - (14)].node));
24877: 					n->onconflict = PG_REPLACE_ON_CONFLICT;
24878: 					n->options = (yyvsp[(11) - (14)].list);
24879: 					n->withCheckOption = (yyvsp[(14) - (14)].viewcheckoption);
24880: 					if (n->withCheckOption != PG_NO_CHECK_OPTION)
24881: 						ereport(ERROR,
24882: 								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
24883: 								 errmsg("WITH CHECK OPTION not supported on recursive views"),
24884: 								 parser_errposition((yylsp[(14) - (14)]))));
24885: 					(yyval.node) = (PGNode *) n;
24886: 				;}
24887:     break;
24888: 
24889:   case 1258:
24890: #line 74 "third_party/libpg_query/grammar/statements/view.y"
24891:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
24892:     break;
24893: 
24894:   case 1259:
24895: #line 75 "third_party/libpg_query/grammar/statements/view.y"
24896:     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}
24897:     break;
24898: 
24899:   case 1260:
24900: #line 76 "third_party/libpg_query/grammar/statements/view.y"
24901:     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}
24902:     break;
24903: 
24904:   case 1261:
24905: #line 77 "third_party/libpg_query/grammar/statements/view.y"
24906:     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}
24907:     break;
24908: 
24909:   case 1262:
24910: #line 12 "third_party/libpg_query/grammar/statements/create_as.y"
24911:     {
24912: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
24913: 					ctas->query = (yyvsp[(6) - (7)].node);
24914: 					ctas->into = (yyvsp[(4) - (7)].into);
24915: 					ctas->relkind = PG_OBJECT_TABLE;
24916: 					ctas->is_select_into = false;
24917: 					ctas->onconflict = PG_ERROR_ON_CONFLICT;
24918: 					/* cram additional flags into the PGIntoClause */
24919: 					(yyvsp[(4) - (7)].into)->rel->relpersistence = (yyvsp[(2) - (7)].ival);
24920: 					(yyvsp[(4) - (7)].into)->skipData = !((yyvsp[(7) - (7)].boolean));
24921: 					(yyval.node) = (PGNode *) ctas;
24922: 				;}
24923:     break;
24924: 
24925:   case 1263:
24926: #line 25 "third_party/libpg_query/grammar/statements/create_as.y"
24927:     {
24928: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
24929: 					ctas->query = (yyvsp[(9) - (10)].node);
24930: 					ctas->into = (yyvsp[(7) - (10)].into);
24931: 					ctas->relkind = PG_OBJECT_TABLE;
24932: 					ctas->is_select_into = false;
24933: 					ctas->onconflict = PG_IGNORE_ON_CONFLICT;
24934: 					/* cram additional flags into the PGIntoClause */
24935: 					(yyvsp[(7) - (10)].into)->rel->relpersistence = (yyvsp[(2) - (10)].ival);
24936: 					(yyvsp[(7) - (10)].into)->skipData = !((yyvsp[(10) - (10)].boolean));
24937: 					(yyval.node) = (PGNode *) ctas;
24938: 				;}
24939:     break;
24940: 
24941:   case 1264:
24942: #line 38 "third_party/libpg_query/grammar/statements/create_as.y"
24943:     {
24944: 					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
24945: 					ctas->query = (yyvsp[(8) - (9)].node);
24946: 					ctas->into = (yyvsp[(6) - (9)].into);
24947: 					ctas->relkind = PG_OBJECT_TABLE;
24948: 					ctas->is_select_into = false;
24949: 					ctas->onconflict = PG_REPLACE_ON_CONFLICT;
24950: 					/* cram additional flags into the PGIntoClause */
24951: 					(yyvsp[(6) - (9)].into)->rel->relpersistence = (yyvsp[(4) - (9)].ival);
24952: 					(yyvsp[(6) - (9)].into)->skipData = !((yyvsp[(9) - (9)].boolean));
24953: 					(yyval.node) = (PGNode *) ctas;
24954: 				;}
24955:     break;
24956: 
24957:   case 1265:
24958: #line 54 "third_party/libpg_query/grammar/statements/create_as.y"
24959:     { (yyval.boolean) = true; ;}
24960:     break;
24961: 
24962:   case 1266:
24963: #line 55 "third_party/libpg_query/grammar/statements/create_as.y"
24964:     { (yyval.boolean) = false; ;}
24965:     break;
24966: 
24967:   case 1267:
24968: #line 56 "third_party/libpg_query/grammar/statements/create_as.y"
24969:     { (yyval.boolean) = true; ;}
24970:     break;
24971: 
24972:   case 1268:
24973: #line 62 "third_party/libpg_query/grammar/statements/create_as.y"
24974:     {
24975: 					(yyval.into) = makeNode(PGIntoClause);
24976: 					(yyval.into)->rel = (yyvsp[(1) - (4)].range);
24977: 					(yyval.into)->colNames = (yyvsp[(2) - (4)].list);
24978: 					(yyval.into)->options = (yyvsp[(3) - (4)].list);
24979: 					(yyval.into)->onCommit = (yyvsp[(4) - (4)].oncommit);
24980: 					(yyval.into)->viewQuery = NULL;
24981: 					(yyval.into)->skipData = false;		/* might get changed later */
24982: 				;}
24983:     break;
24984: 
24985: 
24986: /* Line 1267 of yacc.c.  */
24987: #line 24988 "third_party/libpg_query/grammar/grammar_out.cpp"
24988:       default: break;
24989:     }
24990:   YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);
24991: 
24992:   YYPOPSTACK (yylen);
24993:   yylen = 0;
24994:   YY_STACK_PRINT (yyss, yyssp);
24995: 
24996:   *++yyvsp = yyval;
24997:   *++yylsp = yyloc;
24998: 
24999:   /* Now `shift' the result of the reduction.  Determine what state
25000:      that goes to, based on the state we popped back to and the rule
25001:      number reduced by.  */
25002: 
25003:   yyn = yyr1[yyn];
25004: 
25005:   yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
25006:   if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
25007:     yystate = yytable[yystate];
25008:   else
25009:     yystate = yydefgoto[yyn - YYNTOKENS];
25010: 
25011:   goto yynewstate;
25012: 
25013: 
25014: /*------------------------------------.
25015: | yyerrlab -- here on detecting error |
25016: `------------------------------------*/
25017: yyerrlab:
25018:   /* If not already recovering from an error, report this error.  */
25019:   if (!yyerrstatus)
25020:     {
25021:       ++yynerrs;
25022: #if ! YYERROR_VERBOSE
25023:       yyerror (&yylloc, yyscanner, YY_("syntax error"));
25024: #else
25025:       {
25026: 	YYSIZE_T yysize = yysyntax_error (0, yystate, yychar);
25027: 	if (yymsg_alloc < yysize && yymsg_alloc < YYSTACK_ALLOC_MAXIMUM)
25028: 	  {
25029: 	    YYSIZE_T yyalloc = 2 * yysize;
25030: 	    if (! (yysize <= yyalloc && yyalloc <= YYSTACK_ALLOC_MAXIMUM))
25031: 	      yyalloc = YYSTACK_ALLOC_MAXIMUM;
25032: 	    if (yymsg != yymsgbuf)
25033: 	      YYSTACK_FREE (yymsg);
25034: 	    yymsg = (char *) YYSTACK_ALLOC (yyalloc);
25035: 	    if (yymsg)
25036: 	      yymsg_alloc = yyalloc;
25037: 	    else
25038: 	      {
25039: 		yymsg = yymsgbuf;
25040: 		yymsg_alloc = sizeof yymsgbuf;
25041: 	      }
25042: 	  }
25043: 
25044: 	if (0 < yysize && yysize <= yymsg_alloc)
25045: 	  {
25046: 	    (void) yysyntax_error (yymsg, yystate, yychar);
25047: 	    yyerror (&yylloc, yyscanner, yymsg);
25048: 	  }
25049: 	else
25050: 	  {
25051: 	    yyerror (&yylloc, yyscanner, YY_("syntax error"));
25052: 	    if (yysize != 0)
25053: 	      goto yyexhaustedlab;
25054: 	  }
25055:       }
25056: #endif
25057:     }
25058: 
25059:   yyerror_range[0] = yylloc;
25060: 
25061:   if (yyerrstatus == 3)
25062:     {
25063:       /* If just tried and failed to reuse look-ahead token after an
25064: 	 error, discard it.  */
25065: 
25066:       if (yychar <= YYEOF)
25067: 	{
25068: 	  /* Return failure if at end of input.  */
25069: 	  if (yychar == YYEOF)
25070: 	    YYABORT;
25071: 	}
25072:       else
25073: 	{
25074: 	  yydestruct ("Error: discarding",
25075: 		      yytoken, &yylval, &yylloc, yyscanner);
25076: 	  yychar = YYEMPTY;
25077: 	}
25078:     }
25079: 
25080:   /* Else will try to reuse look-ahead token after shifting the error
25081:      token.  */
25082:   goto yyerrlab1;
25083: 
25084: 
25085: /*---------------------------------------------------.
25086: | yyerrorlab -- error raised explicitly by YYERROR.  |
25087: `---------------------------------------------------*/
25088: yyerrorlab:
25089: 
25090:   /* Pacify compilers like GCC when the user code never invokes
25091:      YYERROR and the label yyerrorlab therefore never appears in user
25092:      code.  */
25093:   if (/*CONSTCOND*/ 0)
25094:      goto yyerrorlab;
25095: 
25096:   yyerror_range[0] = yylsp[1-yylen];
25097:   /* Do not reclaim the symbols of the rule which action triggered
25098:      this YYERROR.  */
25099:   YYPOPSTACK (yylen);
25100:   yylen = 0;
25101:   YY_STACK_PRINT (yyss, yyssp);
25102:   yystate = *yyssp;
25103:   goto yyerrlab1;
25104: 
25105: 
25106: /*-------------------------------------------------------------.
25107: | yyerrlab1 -- common code for both syntax error and YYERROR.  |
25108: `-------------------------------------------------------------*/
25109: yyerrlab1:
25110:   yyerrstatus = 3;	/* Each real token shifted decrements this.  */
25111: 
25112:   for (;;)
25113:     {
25114:       yyn = yypact[yystate];
25115:       if (yyn != YYPACT_NINF)
25116: 	{
25117: 	  yyn += YYTERROR;
25118: 	  if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
25119: 	    {
25120: 	      yyn = yytable[yyn];
25121: 	      if (0 < yyn)
25122: 		break;
25123: 	    }
25124: 	}
25125: 
25126:       /* Pop the current state because it cannot handle the error token.  */
25127:       if (yyssp == yyss)
25128: 	YYABORT;
25129: 
25130:       yyerror_range[0] = *yylsp;
25131:       yydestruct ("Error: popping",
25132: 		  yystos[yystate], yyvsp, yylsp, yyscanner);
25133:       YYPOPSTACK (1);
25134:       yystate = *yyssp;
25135:       YY_STACK_PRINT (yyss, yyssp);
25136:     }
25137: 
25138:   if (yyn == YYFINAL)
25139:     YYACCEPT;
25140: 
25141:   *++yyvsp = yylval;
25142: 
25143:   yyerror_range[1] = yylloc;
25144:   /* Using YYLLOC is tempting, but would change the location of
25145:      the look-ahead.  YYLOC is available though.  */
25146:   YYLLOC_DEFAULT (yyloc, (yyerror_range - 1), 2);
25147:   *++yylsp = yyloc;
25148: 
25149:   /* Shift the error token.  */
25150:   YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);
25151: 
25152:   yystate = yyn;
25153:   goto yynewstate;
25154: 
25155: 
25156: /*-------------------------------------.
25157: | yyacceptlab -- YYACCEPT comes here.  |
25158: `-------------------------------------*/
25159: yyacceptlab:
25160:   yyresult = 0;
25161:   goto yyreturn;
25162: 
25163: /*-----------------------------------.
25164: | yyabortlab -- YYABORT comes here.  |
25165: `-----------------------------------*/
25166: yyabortlab:
25167:   yyresult = 1;
25168:   goto yyreturn;
25169: 
25170: #ifndef yyoverflow
25171: /*-------------------------------------------------.
25172: | yyexhaustedlab -- memory exhaustion comes here.  |
25173: `-------------------------------------------------*/
25174: yyexhaustedlab:
25175:   yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
25176:   yyresult = 2;
25177:   /* Fall through.  */
25178: #endif
25179: 
25180: yyreturn:
25181:   if (yychar != YYEOF && yychar != YYEMPTY)
25182:      yydestruct ("Cleanup: discarding lookahead",
25183: 		 yytoken, &yylval, &yylloc, yyscanner);
25184:   /* Do not reclaim the symbols of the rule which action triggered
25185:      this YYABORT or YYACCEPT.  */
25186:   YYPOPSTACK (yylen);
25187:   YY_STACK_PRINT (yyss, yyssp);
25188:   while (yyssp != yyss)
25189:     {
25190:       yydestruct ("Cleanup: popping",
25191: 		  yystos[*yyssp], yyvsp, yylsp, yyscanner);
25192:       YYPOPSTACK (1);
25193:     }
25194: #ifndef yyoverflow
25195:   if (yyss != yyssa)
25196:     YYSTACK_FREE (yyss);
25197: #endif
25198: #if YYERROR_VERBOSE
25199:   if (yymsg != yymsgbuf)
25200:     YYSTACK_FREE (yymsg);
25201: #endif
25202:   /* Make sure YYID is used.  */
25203:   return YYID (yyresult);
25204: }
25205: 
25206: 
25207: #line 83 "third_party/libpg_query/grammar/statements/create_as.y"
25208: 
25209: 
25210: #line 1 "third_party/libpg_query/grammar/grammar.cpp"
25211: /*
25212:  * The signature of this function is required by bison.  However, we
25213:  * ignore the passed yylloc and instead use the last token position
25214:  * available from the scanner.
25215:  */
25216: static void
25217: base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
25218: {
25219: 	parser_yyerror(msg);
25220: }
25221: 
25222: static PGRawStmt *
25223: makeRawStmt(PGNode *stmt, int stmt_location)
25224: {
25225: 	PGRawStmt    *rs = makeNode(PGRawStmt);
25226: 
25227: 	rs->stmt = stmt;
25228: 	rs->stmt_location = stmt_location;
25229: 	rs->stmt_len = 0;			/* might get changed later */
25230: 	return rs;
25231: }
25232: 
25233: /* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
25234: static void
25235: updateRawStmtEnd(PGRawStmt *rs, int end_location)
25236: {
25237: 	/*
25238: 	 * If we already set the length, don't change it.  This is for situations
25239: 	 * like "select foo ;; select bar" where the same statement will be last
25240: 	 * in the string for more than one semicolon.
25241: 	 */
25242: 	if (rs->stmt_len > 0)
25243: 		return;
25244: 
25245: 	/* OK, update length of PGRawStmt */
25246: 	rs->stmt_len = end_location - rs->stmt_location;
25247: }
25248: 
25249: static PGNode *
25250: makeColumnRef(char *colname, PGList *indirection,
25251: 			  int location, core_yyscan_t yyscanner)
25252: {
25253: 	/*
25254: 	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
25255: 	 * is any subscripting in the specified indirection list.  However,
25256: 	 * any field selection at the start of the indirection list must be
25257: 	 * transposed into the "fields" part of the PGColumnRef node.
25258: 	 */
25259: 	PGColumnRef  *c = makeNode(PGColumnRef);
25260: 	int		nfields = 0;
25261: 	PGListCell *l;
25262: 
25263: 	c->location = location;
25264: 	foreach(l, indirection)
25265: 	{
25266: 		if (IsA(lfirst(l), PGAIndices))
25267: 		{
25268: 			PGAIndirection *i = makeNode(PGAIndirection);
25269: 
25270: 			if (nfields == 0)
25271: 			{
25272: 				/* easy case - all indirection goes to PGAIndirection */
25273: 				c->fields = list_make1(makeString(colname));
25274: 				i->indirection = check_indirection(indirection, yyscanner);
25275: 			}
25276: 			else
25277: 			{
25278: 				/* got to split the list in two */
25279: 				i->indirection = check_indirection(list_copy_tail(indirection,
25280: 																  nfields),
25281: 												   yyscanner);
25282: 				indirection = list_truncate(indirection, nfields);
25283: 				c->fields = lcons(makeString(colname), indirection);
25284: 			}
25285: 			i->arg = (PGNode *) c;
25286: 			return (PGNode *) i;
25287: 		}
25288: 		else if (IsA(lfirst(l), PGAStar))
25289: 		{
25290: 			/* We only allow '*' at the end of a PGColumnRef */
25291: 			if (lnext(l) != NULL)
25292: 				parser_yyerror("improper use of \"*\"");
25293: 		}
25294: 		nfields++;
25295: 	}
25296: 	/* No subscripting, so all indirection gets added to field list */
25297: 	c->fields = lcons(makeString(colname), indirection);
25298: 	return (PGNode *) c;
25299: }
25300: 
25301: static PGNode *
25302: makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
25303: {
25304: 	PGTypeCast *n = makeNode(PGTypeCast);
25305: 	n->arg = arg;
25306: 	n->typeName = tpname;
25307: 	n->tryCast = trycast;
25308: 	n->location = location;
25309: 	return (PGNode *) n;
25310: }
25311: 
25312: static PGNode *
25313: makeStringConst(char *str, int location)
25314: {
25315: 	PGAConst *n = makeNode(PGAConst);
25316: 
25317: 	n->val.type = T_PGString;
25318: 	n->val.val.str = str;
25319: 	n->location = location;
25320: 
25321: 	return (PGNode *)n;
25322: }
25323: 
25324: static PGNode *
25325: makeStringConstCast(char *str, int location, PGTypeName *tpname)
25326: {
25327: 	PGNode *s = makeStringConst(str, location);
25328: 
25329: 	return makeTypeCast(s, tpname, 0, -1);
25330: }
25331: 
25332: static PGNode *
25333: makeIntervalNode(char *str, int location, PGList *typmods) {
25334: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25335: 
25336: 	n->val_type = T_PGString;
25337: 	n->sval = str;
25338: 	n->location = location;
25339: 	n->typmods = typmods;
25340: 
25341: 	return (PGNode *)n;
25342: 
25343: }
25344: 
25345: static PGNode *
25346: makeIntervalNode(int val, int location, PGList *typmods) {
25347: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25348: 
25349: 	n->val_type = T_PGInteger;
25350: 	n->ival = val;
25351: 	n->location = location;
25352: 	n->typmods = typmods;
25353: 
25354: 	return (PGNode *)n;
25355: }
25356: 
25357: static PGNode *
25358: makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
25359: 	PGIntervalConstant *n = makeNode(PGIntervalConstant);
25360: 
25361: 	n->val_type = T_PGAExpr;
25362: 	n->eval = arg;
25363: 	n->location = location;
25364: 	n->typmods = typmods;
25365: 
25366: 	return (PGNode *)n;
25367: }
25368: 
25369: static PGNode *
25370: makeSampleSize(PGValue *sample_size, bool is_percentage) {
25371: 	PGSampleSize *n = makeNode(PGSampleSize);
25372: 
25373: 	n->sample_size = *sample_size;
25374: 	n->is_percentage = is_percentage;
25375: 
25376: 	return (PGNode *)n;
25377: }
25378: 
25379: static PGNode *
25380: makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
25381: 	PGSampleOptions *n = makeNode(PGSampleOptions);
25382: 
25383: 	n->sample_size = sample_size;
25384: 	n->method = method;
25385: 	n->seed = seed;
25386: 	n->location = location;
25387: 
25388: 	return (PGNode *)n;
25389: }
25390: 
25391: /* makeLimitPercent()
25392:  * Make limit percent node
25393:  */
25394: static PGNode *
25395: makeLimitPercent(PGNode *limit_percent) {
25396: 	PGLimitPercent *n = makeNode(PGLimitPercent);
25397: 
25398: 	n->limit_percent = limit_percent;
25399: 
25400: 	return (PGNode *)n;
25401: }
25402: 
25403: static PGNode *
25404: makeIntConst(int val, int location)
25405: {
25406: 	PGAConst *n = makeNode(PGAConst);
25407: 
25408: 	n->val.type = T_PGInteger;
25409: 	n->val.val.ival = val;
25410: 	n->location = location;
25411: 
25412: 	return (PGNode *)n;
25413: }
25414: 
25415: static PGNode *
25416: makeFloatConst(char *str, int location)
25417: {
25418: 	PGAConst *n = makeNode(PGAConst);
25419: 
25420: 	n->val.type = T_PGFloat;
25421: 	n->val.val.str = str;
25422: 	n->location = location;
25423: 
25424: 	return (PGNode *)n;
25425: }
25426: 
25427: static PGNode *
25428: makeBitStringConst(char *str, int location)
25429: {
25430: 	PGAConst *n = makeNode(PGAConst);
25431: 
25432: 	n->val.type = T_PGBitString;
25433: 	n->val.val.str = str;
25434: 	n->location = location;
25435: 
25436: 	return (PGNode *)n;
25437: }
25438: 
25439: static PGNode *
25440: makeNullAConst(int location)
25441: {
25442: 	PGAConst *n = makeNode(PGAConst);
25443: 
25444: 	n->val.type = T_PGNull;
25445: 	n->location = location;
25446: 
25447: 	return (PGNode *)n;
25448: }
25449: 
25450: static PGNode *
25451: makeAConst(PGValue *v, int location)
25452: {
25453: 	PGNode *n;
25454: 
25455: 	switch (v->type)
25456: 	{
25457: 		case T_PGFloat:
25458: 			n = makeFloatConst(v->val.str, location);
25459: 			break;
25460: 
25461: 		case T_PGInteger:
25462: 			n = makeIntConst(v->val.ival, location);
25463: 			break;
25464: 
25465: 		case T_PGString:
25466: 		default:
25467: 			n = makeStringConst(v->val.str, location);
25468: 			break;
25469: 	}
25470: 
25471: 	return n;
25472: }
25473: 
25474: /* makeBoolAConst()
25475:  * Create an PGAConst string node and put it inside a boolean cast.
25476:  */
25477: static PGNode *
25478: makeBoolAConst(bool state, int location)
25479: {
25480: 	PGAConst *n = makeNode(PGAConst);
25481: 
25482: 	n->val.type = T_PGString;
25483: 	n->val.val.str = (state ? (char*) "t" : (char*) "f");
25484: 	n->location = location;
25485: 
25486: 	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
25487: }
25488: 
25489: /* check_qualified_name --- check the result of qualified_name production
25490:  *
25491:  * It's easiest to let the grammar production for qualified_name allow
25492:  * subscripts and '*', which we then must reject here.
25493:  */
25494: static void
25495: check_qualified_name(PGList *names, core_yyscan_t yyscanner)
25496: {
25497: 	PGListCell   *i;
25498: 
25499: 	foreach(i, names)
25500: 	{
25501: 		if (!IsA(lfirst(i), PGString))
25502: 			parser_yyerror("syntax error");
25503: 	}
25504: }
25505: 
25506: /* check_func_name --- check the result of func_name production
25507:  *
25508:  * It's easiest to let the grammar production for func_name allow subscripts
25509:  * and '*', which we then must reject here.
25510:  */
25511: static PGList *
25512: check_func_name(PGList *names, core_yyscan_t yyscanner)
25513: {
25514: 	PGListCell   *i;
25515: 
25516: 	foreach(i, names)
25517: 	{
25518: 		if (!IsA(lfirst(i), PGString))
25519: 			parser_yyerror("syntax error");
25520: 	}
25521: 	return names;
25522: }
25523: 
25524: /* check_indirection --- check the result of indirection production
25525:  *
25526:  * We only allow '*' at the end of the list, but it's hard to enforce that
25527:  * in the grammar, so do it here.
25528:  */
25529: static PGList *
25530: check_indirection(PGList *indirection, core_yyscan_t yyscanner)
25531: {
25532: 	PGListCell *l;
25533: 
25534: 	foreach(l, indirection)
25535: 	{
25536: 		if (IsA(lfirst(l), PGAStar))
25537: 		{
25538: 			if (lnext(l) != NULL)
25539: 				parser_yyerror("improper use of \"*\"");
25540: 		}
25541: 	}
25542: 	return indirection;
25543: }
25544: 
25545: /* makeParamRef
25546:  * Creates a new PGParamRef node
25547:  */
25548: static PGNode* makeParamRef(int number, int location)
25549: {
25550: 	PGParamRef *p = makeNode(PGParamRef);
25551: 	p->number = number;
25552: 	p->location = location;
25553: 	return (PGNode *) p;
25554: }
25555: 
25556: 
25557: /* insertSelectOptions()
25558:  * Insert ORDER BY, etc into an already-constructed SelectStmt.
25559:  *
25560:  * This routine is just to avoid duplicating code in PGSelectStmt productions.
25561:  */
25562: static void
25563: insertSelectOptions(PGSelectStmt *stmt,
25564: 					PGList *sortClause, PGList *lockingClause,
25565: 					PGNode *limitOffset, PGNode *limitCount,
25566: 					PGWithClause *withClause,
25567: 					core_yyscan_t yyscanner)
25568: {
25569: 	Assert(IsA(stmt, PGSelectStmt));
25570: 
25571: 	/*
25572: 	 * Tests here are to reject constructs like
25573: 	 *	(SELECT foo ORDER BY bar) ORDER BY baz
25574: 	 */
25575: 	if (sortClause)
25576: 	{
25577: 		if (stmt->sortClause)
25578: 			ereport(ERROR,
25579: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25580: 					 errmsg("multiple ORDER BY clauses not allowed"),
25581: 					 parser_errposition(exprLocation((PGNode *) sortClause))));
25582: 		stmt->sortClause = sortClause;
25583: 	}
25584: 	/* We can handle multiple locking clauses, though */
25585: 	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
25586: 	if (limitOffset)
25587: 	{
25588: 		if (stmt->limitOffset)
25589: 			ereport(ERROR,
25590: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25591: 					 errmsg("multiple OFFSET clauses not allowed"),
25592: 					 parser_errposition(exprLocation(limitOffset))));
25593: 		stmt->limitOffset = limitOffset;
25594: 	}
25595: 	if (limitCount)
25596: 	{
25597: 		if (stmt->limitCount)
25598: 			ereport(ERROR,
25599: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25600: 					 errmsg("multiple LIMIT clauses not allowed"),
25601: 					 parser_errposition(exprLocation(limitCount))));
25602: 		stmt->limitCount = limitCount;
25603: 	}
25604: 	if (withClause)
25605: 	{
25606: 		if (stmt->withClause)
25607: 			ereport(ERROR,
25608: 					(errcode(PG_ERRCODE_SYNTAX_ERROR),
25609: 					 errmsg("multiple WITH clauses not allowed"),
25610: 					 parser_errposition(exprLocation((PGNode *) withClause))));
25611: 		stmt->withClause = withClause;
25612: 	}
25613: }
25614: 
25615: static PGNode *
25616: makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
25617: {
25618: 	PGSelectStmt *n = makeNode(PGSelectStmt);
25619: 
25620: 	n->op = op;
25621: 	n->all = all;
25622: 	n->larg = (PGSelectStmt *) larg;
25623: 	n->rarg = (PGSelectStmt *) rarg;
25624: 	return (PGNode *) n;
25625: }
25626: 
25627: /* SystemFuncName()
25628:  * Build a properly-qualified reference to a built-in function.
25629:  */
25630: PGList *
25631: SystemFuncName(const char *name)
25632: {
25633: 	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
25634: }
25635: 
25636: /* SystemTypeName()
25637:  * Build a properly-qualified reference to a built-in type.
25638:  *
25639:  * typmod is defaulted, but may be changed afterwards by caller.
25640:  * Likewise for the location.
25641:  */
25642: PGTypeName *
25643: SystemTypeName(const char *name)
25644: {
25645: 	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
25646: 											   makeString(name)));
25647: }
25648: 
25649: /* doNegate()
25650:  * Handle negation of a numeric constant.
25651:  *
25652:  * Formerly, we did this here because the optimizer couldn't cope with
25653:  * indexquals that looked like "var = -4" --- it wants "var = const"
25654:  * and a unary minus operator applied to a constant didn't qualify.
25655:  * As of Postgres 7.0, that problem doesn't exist anymore because there
25656:  * is a constant-subexpression simplifier in the optimizer.  However,
25657:  * there's still a good reason for doing this here, which is that we can
25658:  * postpone committing to a particular internal representation for simple
25659:  * negative constants.	It's better to leave "-123.456" in string form
25660:  * until we know what the desired type is.
25661:  */
25662: static PGNode *
25663: doNegate(PGNode *n, int location)
25664: {
25665: 	if (IsA(n, PGAConst))
25666: 	{
25667: 		PGAConst *con = (PGAConst *)n;
25668: 
25669: 		/* report the constant's location as that of the '-' sign */
25670: 		con->location = location;
25671: 
25672: 		if (con->val.type == T_PGInteger)
25673: 		{
25674: 			con->val.val.ival = -con->val.val.ival;
25675: 			return n;
25676: 		}
25677: 		if (con->val.type == T_PGFloat)
25678: 		{
25679: 			doNegateFloat(&con->val);
25680: 			return n;
25681: 		}
25682: 	}
25683: 
25684: 	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
25685: }
25686: 
25687: static void
25688: doNegateFloat(PGValue *v)
25689: {
25690: 	char   *oldval = v->val.str;
25691: 
25692: 	Assert(IsA(v, PGFloat));
25693: 	if (*oldval == '+')
25694: 		oldval++;
25695: 	if (*oldval == '-')
25696: 		v->val.str = oldval+1;	/* just strip the '-' */
25697: 	else
25698: 		v->val.str = psprintf("-%s", oldval);
25699: }
25700: 
25701: static PGNode *
25702: makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
25703: {
25704: 	PGNode	   *lexp = lexpr;
25705: 
25706: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
25707: 	while (IsA(lexp, PGAExpr) &&
25708: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
25709: 		lexp = ((PGAExpr *) lexp)->lexpr;
25710: 	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
25711: 	if (IsA(lexp, PGBoolExpr))
25712: 	{
25713: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
25714: 
25715: 		if (blexpr->boolop == PG_AND_EXPR)
25716: 		{
25717: 			blexpr->args = lappend(blexpr->args, rexpr);
25718: 			return (PGNode *) blexpr;
25719: 		}
25720: 	}
25721: 	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
25722: }
25723: 
25724: static PGNode *
25725: makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
25726: {
25727: 	PGNode	   *lexp = lexpr;
25728: 
25729: 	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
25730: 	while (IsA(lexp, PGAExpr) &&
25731: 		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
25732: 		lexp = ((PGAExpr *) lexp)->lexpr;
25733: 	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
25734: 	if (IsA(lexp, PGBoolExpr))
25735: 	{
25736: 		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;
25737: 
25738: 		if (blexpr->boolop == PG_OR_EXPR)
25739: 		{
25740: 			blexpr->args = lappend(blexpr->args, rexpr);
25741: 			return (PGNode *) blexpr;
25742: 		}
25743: 	}
25744: 	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
25745: }
25746: 
25747: static PGNode *
25748: makeNotExpr(PGNode *expr, int location)
25749: {
25750: 	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
25751: }
25752: 
25753: static PGNode *
25754: makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
25755: {
25756: 	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);
25757: 
25758: 	svf->op = op;
25759: 	/* svf->type will be filled during parse analysis */
25760: 	svf->typmod = typmod;
25761: 	svf->location = location;
25762: 	return (PGNode *) svf;
25763: }
25764: 
25765: /* Separate PGConstraint nodes from COLLATE clauses in a */
25766: static void
25767: SplitColQualList(PGList *qualList,
25768: 				 PGList **constraintList, PGCollateClause **collClause,
25769: 				 core_yyscan_t yyscanner)
25770: {
25771: 	PGListCell   *cell;
25772: 	PGListCell   *prev;
25773: 	PGListCell   *next;
25774: 
25775: 	*collClause = NULL;
25776: 	prev = NULL;
25777: 	for (cell = list_head(qualList); cell; cell = next)
25778: 	{
25779: 		PGNode   *n = (PGNode *) lfirst(cell);
25780: 
25781: 		next = lnext(cell);
25782: 		if (IsA(n, PGConstraint))
25783: 		{
25784: 			/* keep it in list */
25785: 			prev = cell;
25786: 			continue;
25787: 		}
25788: 		if (IsA(n, PGCollateClause))
25789: 		{
25790: 			PGCollateClause *c = (PGCollateClause *) n;
25791: 
25792: 			if (*collClause)
25793: 				ereport(ERROR,
25794: 						(errcode(PG_ERRCODE_SYNTAX_ERROR),
25795: 						 errmsg("multiple COLLATE clauses not allowed"),
25796: 						 parser_errposition(c->location)));
25797: 			*collClause = c;
25798: 		}
25799: 		else
25800: 			elog(ERROR, "unexpected node type %d", (int) n->type);
25801: 		/* remove non-Constraint nodes from qualList */
25802: 		qualList = list_delete_cell(qualList, cell, prev);
25803: 	}
25804: 	*constraintList = qualList;
25805: }
25806: 
25807: /*
25808:  * Process result of ConstraintAttributeSpec, and set appropriate bool flags
25809:  * in the output command node.  Pass NULL for any flags the particular
25810:  * command doesn't support.
25811:  */
25812: static void
25813: processCASbits(int cas_bits, int location, const char *constrType,
25814: 			   bool *deferrable, bool *initdeferred, bool *not_valid,
25815: 			   bool *no_inherit, core_yyscan_t yyscanner)
25816: {
25817: 	/* defaults */
25818: 	if (deferrable)
25819: 		*deferrable = false;
25820: 	if (initdeferred)
25821: 		*initdeferred = false;
25822: 	if (not_valid)
25823: 		*not_valid = false;
25824: 
25825: 	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
25826: 	{
25827: 		if (deferrable)
25828: 			*deferrable = true;
25829: 		else
25830: 			ereport(ERROR,
25831: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25832: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25833: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
25834: 							constrType),
25835: 					 parser_errposition(location)));
25836: 	}
25837: 
25838: 	if (cas_bits & CAS_INITIALLY_DEFERRED)
25839: 	{
25840: 		if (initdeferred)
25841: 			*initdeferred = true;
25842: 		else
25843: 			ereport(ERROR,
25844: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25845: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25846: 					 errmsg("%s constraints cannot be marked DEFERRABLE",
25847: 							constrType),
25848: 					 parser_errposition(location)));
25849: 	}
25850: 
25851: 	if (cas_bits & CAS_NOT_VALID)
25852: 	{
25853: 		if (not_valid)
25854: 			*not_valid = true;
25855: 		else
25856: 			ereport(ERROR,
25857: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25858: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25859: 					 errmsg("%s constraints cannot be marked NOT VALID",
25860: 							constrType),
25861: 					 parser_errposition(location)));
25862: 	}
25863: 
25864: 	if (cas_bits & CAS_NO_INHERIT)
25865: 	{
25866: 		if (no_inherit)
25867: 			*no_inherit = true;
25868: 		else
25869: 			ereport(ERROR,
25870: 					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
25871: 					 /* translator: %s is CHECK, UNIQUE, or similar */
25872: 					 errmsg("%s constraints cannot be marked NO INHERIT",
25873: 							constrType),
25874: 					 parser_errposition(location)));
25875: 	}
25876: }
25877: 
25878: /*----------
25879:  * Recursive view transformation
25880:  *
25881:  * Convert
25882:  *
25883:  *     CREATE RECURSIVE VIEW relname (aliases) AS query
25884:  *
25885:  * to
25886:  *
25887:  *     CREATE VIEW relname (aliases) AS
25888:  *         WITH RECURSIVE relname (aliases) AS (query)
25889:  *         SELECT aliases FROM relname
25890:  *
25891:  * Actually, just the WITH ... part, which is then inserted into the original
25892:  * view as the query.
25893:  * ----------
25894:  */
25895: static PGNode *
25896: makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
25897: {
25898: 	PGSelectStmt *s = makeNode(PGSelectStmt);
25899: 	PGWithClause *w = makeNode(PGWithClause);
25900: 	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
25901: 	PGList	   *tl = NIL;
25902: 	PGListCell   *lc;
25903: 
25904: 	/* create common table expression */
25905: 	cte->ctename = relname;
25906: 	cte->aliascolnames = aliases;
25907: 	cte->ctequery = query;
25908: 	cte->location = -1;
25909: 
25910: 	/* create WITH clause and attach CTE */
25911: 	w->recursive = true;
25912: 	w->ctes = list_make1(cte);
25913: 	w->location = -1;
25914: 
25915: 	/* create target list for the new SELECT from the alias list of the
25916: 	 * recursive view specification */
25917: 	foreach (lc, aliases)
25918: 	{
25919: 		PGResTarget *rt = makeNode(PGResTarget);
25920: 
25921: 		rt->name = NULL;
25922: 		rt->indirection = NIL;
25923: 		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
25924: 		rt->location = -1;
25925: 
25926: 		tl = lappend(tl, rt);
25927: 	}
25928: 
25929: 	/* create new SELECT combining WITH clause, target list, and fake FROM
25930: 	 * clause */
25931: 	s->withClause = w;
25932: 	s->targetList = tl;
25933: 	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));
25934: 
25935: 	return (PGNode *) s;
25936: }
25937: 
25938: /* parser_init()
25939:  * Initialize to parse one query string
25940:  */
25941: void
25942: parser_init(base_yy_extra_type *yyext)
25943: {
25944: 	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
25945: }
25946: 
25947: #undef yyparse
25948: #undef yylex
25949: #undef yyerror
25950: #undef yylval
25951: #undef yychar
25952: #undef yydebug
25953: #undef yynerrs
25954: #undef yylloc
25955: 
25956: } // namespace duckdb_libpgquery
25957: 
[end of third_party/libpg_query/src_backend_parser_gram.cpp]
[start of third_party/sqlsmith/duckdb.cc]
1: #include "duckdb.hh"
2: #include "tpch-extension.hpp"
3: 
4: #include <cassert>
5: #include <cstring>
6: #include <iostream>
7: #include <stdexcept>
8: #include <thread>
9: #include <chrono>
10: 
11: #include <regex>
12: 
13: using namespace duckdb;
14: using namespace std;
15: 
16: static regex e_syntax("syntax error at or near .*");
17: 
18: duckdb_connection::duckdb_connection(string &conninfo) {
19: 	// in-memory database
20: 	database = make_unique<DuckDB>(nullptr);
21: 	connection = make_unique<Connection>(*database);
22: }
23: 
24: void duckdb_connection::q(const char *query) {
25: 	auto result = connection->Query(query);
26: 	if (!result->success) {
27: 		throw runtime_error(result->error);
28: 	}
29: }
30: 
31: schema_duckdb::schema_duckdb(std::string &conninfo, bool no_catalog) : duckdb_connection(conninfo) {
32: 	// generate empty TPC-H schema
33: 	connection->Query("CALL dbgen(sf=0)");
34: 
35: 	cerr << "Loading tables...";
36: 	auto result = connection->Query("SELECT * FROM sqlite_master WHERE type IN ('table', 'view')");
37: 	if (!result->success) {
38: 		throw runtime_error(result->error);
39: 	}
40: 	for (size_t i = 0; i < result->collection.Count(); i++) {
41: 		auto type = StringValue::Get(result->collection.GetValue(0, i));
42: 		auto name = StringValue::Get(result->collection.GetValue(2, i));
43: 		bool view = type == "view";
44: 		table tab(name, "main", !view, !view);
45: 		tables.push_back(tab);
46: 	}
47: 	cerr << "done." << endl;
48: 
49: 	if (tables.size() == 0) {
50: 		throw std::runtime_error("No tables available in catalog!");
51: 	}
52: 
53: 	cerr << "Loading columns and constraints...";
54: 
55: 	for (auto t = tables.begin(); t != tables.end(); ++t) {
56: 		result = connection->Query("PRAGMA table_info('" + t->name + "')");
57: 		if (!result->success) {
58: 			throw runtime_error(result->error);
59: 		}
60: 		for (size_t i = 0; i < result->collection.Count(); i++) {
61: 			auto name = StringValue::Get(result->collection.GetValue(1, i));
62: 			auto type = StringValue::Get(result->collection.GetValue(2, i));
63: 			column c(name, sqltype::get(type));
64: 			t->columns().push_back(c);
65: 		}
66: 	}
67: 
68: 	cerr << "done." << endl;
69: 
70: #define BINOP(n, t)                                                                                                    \
71: 	do {                                                                                                               \
72: 		op o(#n, sqltype::get(#t), sqltype::get(#t), sqltype::get(#t));                                                \
73: 		register_operator(o);                                                                                          \
74: 	} while (0)
75: 
76: 	BINOP(||, TEXT);
77: 	BINOP(*, INTEGER);
78: 	BINOP(/, INTEGER);
79: 
80: 	BINOP(+, INTEGER);
81: 	BINOP(-, INTEGER);
82: 
83: 	BINOP(>>, INTEGER);
84: 	BINOP(<<, INTEGER);
85: 
86: 	BINOP(&, INTEGER);
87: 	BINOP(|, INTEGER);
88: 
89: 	BINOP(<, INTEGER);
90: 	BINOP(<=, INTEGER);
91: 	BINOP(>, INTEGER);
92: 	BINOP(>=, INTEGER);
93: 
94: 	BINOP(=, INTEGER);
95: 	BINOP(<>, INTEGER);
96: 	BINOP(IS, INTEGER);
97: 	BINOP(IS NOT, INTEGER);
98: 
99: 	BINOP(AND, INTEGER);
100: 	BINOP(OR, INTEGER);
101: 
102: #define FUNC(n, r)                                                                                                     \
103: 	do {                                                                                                               \
104: 		routine proc("", "", sqltype::get(#r), #n);                                                                    \
105: 		register_routine(proc);                                                                                        \
106: 	} while (0)
107: 
108: #define FUNC1(n, r, a)                                                                                                 \
109: 	do {                                                                                                               \
110: 		routine proc("", "", sqltype::get(#r), #n);                                                                    \
111: 		proc.argtypes.push_back(sqltype::get(#a));                                                                     \
112: 		register_routine(proc);                                                                                        \
113: 	} while (0)
114: 
115: #define FUNC2(n, r, a, b)                                                                                              \
116: 	do {                                                                                                               \
117: 		routine proc("", "", sqltype::get(#r), #n);                                                                    \
118: 		proc.argtypes.push_back(sqltype::get(#a));                                                                     \
119: 		proc.argtypes.push_back(sqltype::get(#b));                                                                     \
120: 		register_routine(proc);                                                                                        \
121: 	} while (0)
122: 
123: #define FUNC3(n, r, a, b, c)                                                                                           \
124: 	do {                                                                                                               \
125: 		routine proc("", "", sqltype::get(#r), #n);                                                                    \
126: 		proc.argtypes.push_back(sqltype::get(#a));                                                                     \
127: 		proc.argtypes.push_back(sqltype::get(#b));                                                                     \
128: 		proc.argtypes.push_back(sqltype::get(#c));                                                                     \
129: 		register_routine(proc);                                                                                        \
130: 	} while (0)
131: 
132: 	// FUNC(last_insert_rowid, INTEGER);
133: 	// FUNC(random, INTEGER);
134: 	// FUNC(sqlite_source_id, TEXT);
135: 	// FUNC(sqlite_version, TEXT);
136: 	// FUNC(total_changes, INTEGER);
137: 
138: 	FUNC1(abs, INTEGER, REAL);
139: 	// FUNC1(hex, TEXT, TEXT);
140: 	FUNC1(length, INTEGER, TEXT);
141: 	FUNC1(lower, TEXT, TEXT);
142: 	// FUNC1(ltrim, TEXT, TEXT);
143: 	// FUNC1(quote, TEXT, TEXT);
144: 	// FUNC1(randomblob, TEXT, INTEGER);
145: 	FUNC1(round, INTEGER, REAL);
146: 	// FUNC1(rtrim, TEXT, TEXT);
147: 	// FUNC1(soundex, TEXT, TEXT);
148: 	// FUNC1(sqlite_compileoption_get, TEXT, INTEGER);
149: 	// FUNC1(sqlite_compileoption_used, INTEGER, TEXT);
150: 	// FUNC1(trim, TEXT, TEXT);
151: 	// FUNC1(typeof, TEXT, INTEGER);
152: 	// FUNC1(typeof, TEXT, NUMERIC);
153: 	// FUNC1(typeof, TEXT, REAL);
154: 	// FUNC1(typeof, TEXT, TEXT);
155: 	// FUNC1(unicode, INTEGER, TEXT);
156: 	FUNC1(upper, TEXT, TEXT);
157: 	// FUNC1(zeroblob, TEXT, INTEGER);
158: 
159: 	// FUNC2(glob, INTEGER, TEXT, TEXT);
160: 	// FUNC2(instr, INTEGER, TEXT, TEXT);
161: 	// FUNC2(like, INTEGER, TEXT, TEXT);
162: 	// FUNC2(ltrim, TEXT, TEXT, TEXT);
163: 	// FUNC2(rtrim, TEXT, TEXT, TEXT);
164: 	// FUNC2(trim, TEXT, TEXT, TEXT);
165: 	// FUNC2(round, INTEGER, REAL, INTEGER);
166: 	FUNC2(substr, TEXT, TEXT, INTEGER);
167: 
168: 	FUNC3(substr, TEXT, TEXT, INTEGER, INTEGER);
169: 	FUNC3(replace, TEXT, TEXT, TEXT, TEXT);
170: 
171: #define AGG(n, r, a)                                                                                                   \
172: 	do {                                                                                                               \
173: 		routine proc("", "", sqltype::get(#r), #n);                                                                    \
174: 		proc.argtypes.push_back(sqltype::get(#a));                                                                     \
175: 		register_aggregate(proc);                                                                                      \
176: 	} while (0)
177: 
178: 	AGG(avg, INTEGER, INTEGER);
179: 	AGG(avg, REAL, REAL);
180: 	AGG(count, INTEGER, REAL);
181: 	AGG(count, INTEGER, TEXT);
182: 	AGG(count, INTEGER, INTEGER);
183: 	AGG(string_agg, TEXT, TEXT);
184: 	AGG(max, REAL, REAL);
185: 	AGG(max, INTEGER, INTEGER);
186: 	AGG(min, REAL, REAL);
187: 	AGG(min, INTEGER, INTEGER);
188: 	AGG(sum, REAL, REAL);
189: 	AGG(sum, INTEGER, INTEGER);
190: 	// AGG(total, REAL, INTEGER);
191: 	// AGG(total, REAL, REAL);
192: 
193: 	booltype = sqltype::get("INTEGER");
194: 	inttype = sqltype::get("INTEGER");
195: 
196: 	internaltype = sqltype::get("internal");
197: 	arraytype = sqltype::get("ARRAY");
198: 
199: 	true_literal = "1";
200: 	false_literal = "0";
201: 
202: 	generate_indexes();
203: }
204: 
205: dut_duckdb::dut_duckdb(std::string &conninfo) : duckdb_connection(conninfo) {
206: 	cerr << "Generating TPC-H...";
207: 	connection->Query("CALL dbgen(sf=0.01)");
208: 	cerr << "done." << endl;
209: 	// q("PRAGMA main.auto_vacuum = 2");
210: }
211: 
212: volatile bool is_active = false;
213: // timeout is 10ms * TIMEOUT_TICKS
214: #define TIMEOUT_TICKS 50
215: 
216: void sleep_thread(Connection *connection) {
217: 	for (size_t i = 0; i < TIMEOUT_TICKS && is_active; i++) {
218: 		std::this_thread::sleep_for(std::chrono::milliseconds(10));
219: 	}
220: 	if (is_active) {
221: 		connection->Interrupt();
222: 	}
223: }
224: 
225: void dut_duckdb::test(const std::string &stmt) {
226: 	is_active = true;
227: 	thread interrupt_thread(sleep_thread, connection.get());
228: 	auto result = connection->Query(stmt);
229: 	is_active = false;
230: 	interrupt_thread.join();
231: 
232: 	if (!result->success) {
233: 		auto error = result->error.c_str();
234: 		try {
235: 			if (regex_match(error, e_syntax))
236: 				throw dut::syntax(error);
237: 			else
238: 				throw dut::failure(error);
239: 		} catch (dut::failure &e) {
240: 			throw;
241: 		}
242: 	}
243: }
[end of third_party/sqlsmith/duckdb.cc]
[start of third_party/sqlsmith/include/duckdb.hh]
1: /// @file
2: /// @brief schema and dut classes for DuckDB
3: 
4: #ifndef DUCKDB_HH
5: #define DUCKDB_HH
6: 
7: #include "duckdb.hpp"
8: 
9: #include "dut.hh"
10: #include "relmodel.hh"
11: #include "schema.hh"
12: 
13: struct duckdb_connection {
14: 	std::unique_ptr<duckdb::DuckDB> database;
15: 	std::unique_ptr<duckdb::Connection> connection;
16: 	char *zErrMsg = 0;
17: 	int rc;
18: 	void q(const char *query);
19: 	duckdb_connection(std::string &conninfo);
20: };
21: 
22: struct schema_duckdb : schema, duckdb_connection {
23: 	schema_duckdb(std::string &conninfo, bool no_catalog);
24: 	virtual std::string quote_name(const std::string &id) {
25: 		return id;
26: 	}
27: };
28: 
29: struct dut_duckdb : dut_base, duckdb_connection {
30: 	virtual void test(const std::string &stmt);
31: 	dut_duckdb(std::string &conninfo);
32: };
33: #endif
[end of third_party/sqlsmith/include/duckdb.hh]
[start of tools/jdbc/src/jni/duckdb_java.cpp]
1: #include "org_duckdb_DuckDBNative.h"
2: #include "duckdb.hpp"
3: #include "duckdb/main/client_context.hpp"
4: #include "duckdb/main/appender.hpp"
5: #include "duckdb/common/operator/cast_operators.hpp"
6: 
7: using namespace duckdb;
8: using namespace std;
9: 
10: static string byte_array_to_string(JNIEnv *env, jbyteArray ba_j) {
11: 	idx_t len = env->GetArrayLength(ba_j);
12: 	string ret;
13: 	ret.resize(len);
14: 
15: 	jbyte *bytes = (jbyte *)env->GetByteArrayElements(ba_j, NULL);
16: 
17: 	for (idx_t i = 0; i < len; i++) {
18: 		ret[i] = bytes[i];
19: 	}
20: 	env->ReleaseByteArrayElements(ba_j, bytes, 0);
21: 
22: 	return ret;
23: }
24: 
25: static jobject decode_charbuffer_to_jstring(JNIEnv *env, const char *d_str, idx_t d_str_len) {
26: 	// TODO cache this somewhere, probably slow to look this stuff for every string
27: 	jclass charset_class = env->FindClass("java/nio/charset/Charset");
28: 	jclass charbuffer_class = env->FindClass("java/nio/CharBuffer");
29: 	jmethodID for_name =
30: 	    env->GetStaticMethodID(charset_class, "forName", "(Ljava/lang/String;)Ljava/nio/charset/Charset;");
31: 	jobject charset = env->CallStaticObjectMethod(charset_class, for_name, env->NewStringUTF("UTF-8"));
32: 	jmethodID charset_decode =
33: 	    env->GetMethodID(charset_class, "decode", "(Ljava/nio/ByteBuffer;)Ljava/nio/CharBuffer;");
34: 	jmethodID charbuffer_to_string = env->GetMethodID(charbuffer_class, "toString", "()Ljava/lang/String;");
35: 
36: 	auto bb = env->NewDirectByteBuffer((void *)d_str, d_str_len);
37: 	auto j_cb = env->CallObjectMethod(charset, charset_decode, bb);
38: 	auto j_str = env->CallObjectMethod(j_cb, charbuffer_to_string);
39: 	return j_str;
40: }
41: 
42: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1startup(JNIEnv *env, jclass, jbyteArray database_j,
43:                                                                              jboolean read_only) {
44: 	auto database = byte_array_to_string(env, database_j);
45: 	DBConfig config;
46: 	if (read_only) {
47: 		config.access_mode = AccessMode::READ_ONLY;
48: 	}
49: 	try {
50: 		auto db = new DuckDB(database, &config);
51: 		return env->NewDirectByteBuffer(db, 0);
52: 	} catch (exception &e) {
53: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
54: 	}
55: 	return nullptr;
56: }
57: 
58: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1shutdown(JNIEnv *env, jclass, jobject db_ref_buf) {
59: 	auto db_ref = (DuckDB *)env->GetDirectBufferAddress(db_ref_buf);
60: 	if (db_ref) {
61: 		delete db_ref;
62: 	}
63: }
64: 
65: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1connect(JNIEnv *env, jclass, jobject db_ref_buf) {
66: 	auto db_ref = (DuckDB *)env->GetDirectBufferAddress(db_ref_buf);
67: 	try {
68: 		auto conn = new Connection(*db_ref);
69: 		return env->NewDirectByteBuffer(conn, 0);
70: 	} catch (exception &e) {
71: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
72: 	}
73: 	return nullptr;
74: }
75: 
76: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1set_1auto_1commit(JNIEnv *env, jclass,
77:                                                                                     jobject conn_ref_buf,
78:                                                                                     jboolean auto_commit) {
79: 	auto conn_ref = (Connection *)env->GetDirectBufferAddress(conn_ref_buf);
80: 	if (!conn_ref || !conn_ref->context) {
81: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid connection");
82: 	}
83: 	conn_ref->context->RunFunctionInTransaction([&]() { conn_ref->SetAutoCommit(auto_commit); });
84: }
85: 
86: JNIEXPORT jboolean JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1get_1auto_1commit(JNIEnv *env, jclass,
87:                                                                                         jobject conn_ref_buf) {
88: 	auto conn_ref = (Connection *)env->GetDirectBufferAddress(conn_ref_buf);
89: 	if (!conn_ref) {
90: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid connection");
91: 	}
92: 	return conn_ref->IsAutoCommit();
93: }
94: 
95: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1disconnect(JNIEnv *env, jclass,
96:                                                                              jobject conn_ref_buf) {
97: 	auto conn_ref = (Connection *)env->GetDirectBufferAddress(conn_ref_buf);
98: 	if (conn_ref) {
99: 		delete conn_ref;
100: 	}
101: }
102: 
103: struct StatementHolder {
104: 	unique_ptr<PreparedStatement> stmt;
105: };
106: 
107: #include "utf8proc_wrapper.hpp"
108: 
109: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1prepare(JNIEnv *env, jclass, jobject conn_ref_buf,
110:                                                                              jbyteArray query_j) {
111: 	auto conn_ref = (Connection *)env->GetDirectBufferAddress(conn_ref_buf);
112: 	if (!conn_ref) {
113: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid connection");
114: 	}
115: 
116: 	auto query = byte_array_to_string(env, query_j);
117: 
118: 	auto stmt_ref = new StatementHolder();
119: 	stmt_ref->stmt = conn_ref->Prepare(query);
120: 	if (!stmt_ref->stmt->success) {
121: 		string error_msg = string(stmt_ref->stmt->error);
122: 		stmt_ref->stmt = nullptr;
123: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), error_msg.c_str());
124: 	}
125: 	return env->NewDirectByteBuffer(stmt_ref, 0);
126: }
127: 
128: struct ResultHolder {
129: 	unique_ptr<QueryResult> res;
130: 	unique_ptr<DataChunk> chunk;
131: };
132: 
133: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1execute(JNIEnv *env, jclass, jobject stmt_ref_buf,
134:                                                                              jobjectArray params) {
135: 	auto stmt_ref = (StatementHolder *)env->GetDirectBufferAddress(stmt_ref_buf);
136: 	if (!stmt_ref) {
137: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid statement");
138: 	}
139: 	auto res_ref = new ResultHolder();
140: 	vector<Value> duckdb_params;
141: 
142: 	idx_t param_len = env->GetArrayLength(params);
143: 	if (param_len != stmt_ref->stmt->n_param) {
144: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Parameter count mismatch");
145: 	}
146: 
147: 	if (param_len > 0) {
148: 		auto bool_class = env->FindClass("java/lang/Boolean");
149: 		auto byte_class = env->FindClass("java/lang/Byte");
150: 		auto short_class = env->FindClass("java/lang/Short");
151: 		auto integer_class = env->FindClass("java/lang/Integer");
152: 		auto long_class = env->FindClass("java/lang/Long");
153: 		auto float_class = env->FindClass("java/lang/Float");
154: 		auto double_class = env->FindClass("java/lang/Double");
155: 		auto string_class = env->FindClass("java/lang/String");
156: 		auto timestamp_class = env->FindClass("org/duckdb/DuckDBTimestamp");
157: 		auto decimal_class = env->FindClass("java/math/BigDecimal");
158: 
159: 		for (idx_t i = 0; i < param_len; i++) {
160: 			auto param = env->GetObjectArrayElement(params, i);
161: 			if (param == nullptr) {
162: 				duckdb_params.push_back(Value());
163: 				continue;
164: 			} else if (env->IsInstanceOf(param, bool_class)) {
165: 				duckdb_params.push_back(
166: 				    Value::BOOLEAN(env->CallBooleanMethod(param, env->GetMethodID(bool_class, "booleanValue", "()Z"))));
167: 				continue;
168: 			} else if (env->IsInstanceOf(param, byte_class)) {
169: 				duckdb_params.push_back(
170: 				    Value::TINYINT(env->CallByteMethod(param, env->GetMethodID(byte_class, "byteValue", "()B"))));
171: 				continue;
172: 			} else if (env->IsInstanceOf(param, short_class)) {
173: 				duckdb_params.push_back(
174: 				    Value::SMALLINT(env->CallShortMethod(param, env->GetMethodID(short_class, "shortValue", "()S"))));
175: 				continue;
176: 			} else if (env->IsInstanceOf(param, integer_class)) {
177: 				duckdb_params.push_back(
178: 				    Value::INTEGER(env->CallIntMethod(param, env->GetMethodID(integer_class, "intValue", "()I"))));
179: 				continue;
180: 			} else if (env->IsInstanceOf(param, long_class)) {
181: 				duckdb_params.push_back(
182: 				    Value::BIGINT(env->CallLongMethod(param, env->GetMethodID(long_class, "longValue", "()J"))));
183: 				continue;
184: 			} else if (env->IsInstanceOf(param, timestamp_class)) {
185: 				duckdb_params.push_back(Value::TIMESTAMP((timestamp_t)env->CallLongMethod(
186: 				    param, env->GetMethodID(timestamp_class, "getMicrosEpoch", "()J"))));
187: 				continue;
188: 			} else if (env->IsInstanceOf(param, float_class)) {
189: 				duckdb_params.push_back(
190: 				    Value::FLOAT(env->CallFloatMethod(param, env->GetMethodID(float_class, "floatValue", "()F"))));
191: 				continue;
192: 			} else if (env->IsInstanceOf(param, double_class)) {
193: 				duckdb_params.push_back(
194: 				    Value::DOUBLE(env->CallDoubleMethod(param, env->GetMethodID(double_class, "doubleValue", "()D"))));
195: 				continue;
196: 			} else if (env->IsInstanceOf(param, decimal_class)) {
197: 				jint precision = env->CallIntMethod(param, env->GetMethodID(decimal_class, "precision", "()I"));
198: 				jint scale = env->CallIntMethod(param, env->GetMethodID(decimal_class, "scale", "()I"));
199: 
200: 				if (precision <= 18) { // normal sizes -> avoid string processing
201: 					jobject no_point_dec = env->CallObjectMethod(
202: 					    param, env->GetMethodID(decimal_class, "scaleByPowerOfTen", "(I)Ljava/math/BigDecimal;"),
203: 					    scale);
204: 					jlong result =
205: 					    env->CallLongMethod(no_point_dec, env->GetMethodID(decimal_class, "longValue", "()J"));
206: 					duckdb_params.push_back(Value::DECIMAL((int64_t)result, (uint8_t)precision, (uint8_t)scale));
207: 				} else if (precision <= 38) { // larger than int64 -> get string and cast
208: 					jobject str_val = env->CallObjectMethod(
209: 					    param, env->GetMethodID(decimal_class, "toPlainString", "()Ljava/lang/String;"));
210: 					auto *str_char = env->GetStringUTFChars((jstring)str_val, 0);
211: 					Value val = Value(str_char);
212: 					val = val.CastAs(LogicalType::DECIMAL(precision, scale));
213: 
214: 					duckdb_params.push_back(val);
215: 					env->ReleaseStringUTFChars((jstring)str_val, str_char);
216: 				}
217: 				continue;
218: 			} else if (env->IsInstanceOf(param, string_class)) {
219: 				auto *param_string = env->GetStringUTFChars((jstring)param, 0);
220: 				duckdb_params.push_back(Value(param_string));
221: 				env->ReleaseStringUTFChars((jstring)param, param_string);
222: 				continue;
223: 			} else {
224: 				env->ThrowNew(env->FindClass("java/sql/SQLException"), "Unsupported parameter type");
225: 			}
226: 		}
227: 	}
228: 
229: 	res_ref->res = stmt_ref->stmt->Execute(duckdb_params, false);
230: 	if (!res_ref->res->success) {
231: 		string error_msg = string(res_ref->res->error);
232: 		res_ref->res = nullptr;
233: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), error_msg.c_str());
234: 	}
235: 	return env->NewDirectByteBuffer(res_ref, 0);
236: }
237: 
238: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1release(JNIEnv *env, jclass, jobject stmt_ref_buf) {
239: 	auto stmt_ref = (StatementHolder *)env->GetDirectBufferAddress(stmt_ref_buf);
240: 	if (stmt_ref) {
241: 		delete stmt_ref;
242: 	}
243: }
244: 
245: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1free_1result(JNIEnv *env, jclass,
246:                                                                                jobject res_ref_buf) {
247: 	auto res_ref = (ResultHolder *)env->GetDirectBufferAddress(res_ref_buf);
248: 	if (res_ref) {
249: 		delete res_ref;
250: 	}
251: }
252: 
253: static std::string type_to_jduckdb_type(LogicalType logical_type) {
254: 	switch (logical_type.id()) {
255: 	case LogicalTypeId::DECIMAL: {
256: 
257: 		uint8_t width = 0;
258: 		uint8_t scale = 0;
259: 		logical_type.GetDecimalProperties(width, scale);
260: 		std::string width_scale = std::to_string(width) + std::string(";") + std::to_string(scale);
261: 
262: 		auto physical_type = logical_type.InternalType();
263: 		switch (physical_type) {
264: 		case PhysicalType::INT16: {
265: 			string res = std::string("DECIMAL16;") + width_scale;
266: 			return res;
267: 		}
268: 		case PhysicalType::INT32: {
269: 			string res = std::string("DECIMAL32;") + width_scale;
270: 			return res;
271: 		}
272: 		case PhysicalType::INT64: {
273: 			string res = std::string("DECIMAL64;") + width_scale;
274: 			return res;
275: 		}
276: 		case PhysicalType::INT128: {
277: 			string res = std::string("DECIMAL128;") + width_scale;
278: 			return res;
279: 		}
280: 		default:
281: 			return std::string("no physical type found");
282: 		}
283: 	} break;
284: 	}
285: 	return std::string("");
286: }
287: 
288: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1meta(JNIEnv *env, jclass, jobject stmt_ref_buf) {
289: 
290: 	auto stmt_ref = (StatementHolder *)env->GetDirectBufferAddress(stmt_ref_buf);
291: 	if (!stmt_ref || !stmt_ref->stmt || !stmt_ref->stmt->success) {
292: 		jclass Exception = env->FindClass("java/sql/SQLException");
293: 		env->ThrowNew(Exception, "Invalid statement");
294: 	}
295: 
296: 	jclass meta = env->FindClass("org/duckdb/DuckDBResultSetMetaData");
297: 	jmethodID meta_construct =
298: 	    env->GetMethodID(meta, "<init>", "(II[Ljava/lang/String;[Ljava/lang/String;[Ljava/lang/String;)V");
299: 
300: 	auto column_count = stmt_ref->stmt->ColumnCount();
301: 	auto &names = stmt_ref->stmt->GetNames();
302: 	auto &types = stmt_ref->stmt->GetTypes();
303: 
304: 	auto name_array = env->NewObjectArray(column_count, env->FindClass("java/lang/String"), nullptr);
305: 	auto type_array = env->NewObjectArray(column_count, env->FindClass("java/lang/String"), nullptr);
306: 	auto type_detail_array = env->NewObjectArray(column_count, env->FindClass("java/lang/String"), nullptr);
307: 
308: 	for (idx_t col_idx = 0; col_idx < column_count; col_idx++) {
309: 		env->SetObjectArrayElement(name_array, col_idx,
310: 		                           decode_charbuffer_to_jstring(env, names[col_idx].c_str(), names[col_idx].length()));
311: 		env->SetObjectArrayElement(type_array, col_idx, env->NewStringUTF(types[col_idx].ToString().c_str()));
312: 		env->SetObjectArrayElement(type_detail_array, col_idx,
313: 		                           env->NewStringUTF(type_to_jduckdb_type(types[col_idx]).c_str()));
314: 	}
315: 
316: 	return env->NewObject(meta, meta_construct, stmt_ref->stmt->n_param, column_count, name_array, type_array,
317: 	                      type_detail_array);
318: }
319: 
320: JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(JNIEnv *env, jclass,
321:                                                                                 jobject res_ref_buf) {
322: 	auto res_ref = (ResultHolder *)env->GetDirectBufferAddress(res_ref_buf);
323: 	if (!res_ref || !res_ref->res || !res_ref->res->success) {
324: 		jclass Exception = env->FindClass("java/sql/SQLException");
325: 		env->ThrowNew(Exception, "Invalid result set");
326: 	}
327: 
328: 	res_ref->chunk = res_ref->res->Fetch();
329: 	if (!res_ref->chunk) {
330: 		res_ref->chunk = make_unique<DataChunk>();
331: 	}
332: 	auto row_count = res_ref->chunk->size();
333: 
334: 	auto vec_array = (jobjectArray)env->NewObjectArray(res_ref->chunk->ColumnCount(),
335: 	                                                   env->FindClass("org/duckdb/DuckDBVector"), nullptr);
336: 	for (idx_t col_idx = 0; col_idx < res_ref->chunk->ColumnCount(); col_idx++) {
337: 		auto &vec = res_ref->chunk->data[col_idx];
338: 		auto type_str = env->NewStringUTF(vec.GetType().ToString().c_str());
339: 		// construct nullmask
340: 		auto null_array = env->NewBooleanArray(row_count);
341: 		jboolean *null_array_ptr = env->GetBooleanArrayElements(null_array, nullptr);
342: 		for (idx_t row_idx = 0; row_idx < row_count; row_idx++) {
343: 			null_array_ptr[row_idx] = FlatVector::IsNull(vec, row_idx);
344: 		}
345: 		env->ReleaseBooleanArrayElements(null_array, null_array_ptr, 0);
346: 
347: 		jclass vec_class = env->FindClass("org/duckdb/DuckDBVector");
348: 		jmethodID vec_construct = env->GetMethodID(vec_class, "<init>", "(Ljava/lang/String;I[Z)V");
349: 		auto jvec = env->NewObject(vec_class, vec_construct, type_str, (int)row_count, null_array);
350: 
351: 		jobject constlen_data = nullptr;
352: 		jobjectArray varlen_data = nullptr;
353: 
354: 		switch (vec.GetType().id()) {
355: 		case LogicalTypeId::BOOLEAN:
356: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(bool));
357: 			break;
358: 		case LogicalTypeId::TINYINT:
359: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int8_t));
360: 			break;
361: 		case LogicalTypeId::SMALLINT:
362: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int16_t));
363: 			break;
364: 		case LogicalTypeId::INTEGER:
365: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int32_t));
366: 			break;
367: 		case LogicalTypeId::BIGINT:
368: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int64_t));
369: 			break;
370: 		case LogicalTypeId::UTINYINT:
371: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint8_t));
372: 			break;
373: 		case LogicalTypeId::USMALLINT:
374: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint16_t));
375: 			break;
376: 		case LogicalTypeId::UINTEGER:
377: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint32_t));
378: 			break;
379: 		case LogicalTypeId::UBIGINT:
380: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint64_t));
381: 			break;
382: 		case LogicalTypeId::HUGEINT:
383: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));
384: 			break;
385: 		case LogicalTypeId::FLOAT:
386: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(float));
387: 			break;
388: 		case LogicalTypeId::DECIMAL: {
389: 			auto physical_type = vec.GetType().InternalType();
390: 
391: 			switch (physical_type) {
392: 			case PhysicalType::INT16:
393: 				constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int16_t));
394: 				break;
395: 			case PhysicalType::INT32:
396: 				constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int32_t));
397: 				break;
398: 			case PhysicalType::INT64:
399: 				constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int64_t));
400: 				break;
401: 			case PhysicalType::INT128:
402: 				constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));
403: 				break;
404: 			}
405: 			break;
406: 		}
407: 		case LogicalTypeId::DOUBLE:
408: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(double));
409: 			break;
410: 		case LogicalTypeId::TIMESTAMP:
411: 			constlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(timestamp_t));
412: 			break;
413: 		case LogicalTypeId::TIME:
414: 		case LogicalTypeId::DATE:
415: 		case LogicalTypeId::INTERVAL: {
416: 			Vector string_vec(LogicalType::VARCHAR);
417: 			VectorOperations::Cast(vec, string_vec, row_count);
418: 			vec.ReferenceAndSetType(string_vec);
419: 			// fall through on purpose
420: 		}
421: 		case LogicalTypeId::VARCHAR:
422: 			varlen_data = env->NewObjectArray(row_count, env->FindClass("java/lang/String"), nullptr);
423: 			for (idx_t row_idx = 0; row_idx < row_count; row_idx++) {
424: 				if (FlatVector::IsNull(vec, row_idx)) {
425: 					continue;
426: 				}
427: 				auto d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];
428: 				auto j_str = decode_charbuffer_to_jstring(env, d_str.GetDataUnsafe(), d_str.GetSize());
429: 				env->SetObjectArrayElement(varlen_data, row_idx, j_str);
430: 			}
431: 			break;
432: 		case LogicalTypeId::BLOB:
433: 			varlen_data = env->NewObjectArray(row_count, env->FindClass("java/nio/ByteBuffer"), nullptr);
434: 
435: 			for (idx_t row_idx = 0; row_idx < row_count; row_idx++) {
436: 				if (FlatVector::IsNull(vec, row_idx)) {
437: 					continue;
438: 				}
439: 				auto &d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];
440: 				auto j_obj = env->NewDirectByteBuffer((void *)d_str.GetDataUnsafe(), d_str.GetSize());
441: 				env->SetObjectArrayElement(varlen_data, row_idx, j_obj);
442: 			}
443: 			break;
444: 		default:
445: 			jclass Exception = env->FindClass("java/sql/SQLException");
446: 			env->ThrowNew(Exception, ("Unsupported result column type " + vec.GetType().ToString()).c_str());
447: 		}
448: 
449: 		jfieldID constlen_data_field = env->GetFieldID(vec_class, "constlen_data", "Ljava/nio/ByteBuffer;");
450: 		jfieldID varlen_data_field = env->GetFieldID(vec_class, "varlen_data", "[Ljava/lang/Object;");
451: 
452: 		env->SetObjectField(jvec, constlen_data_field, constlen_data);
453: 		env->SetObjectField(jvec, varlen_data_field, varlen_data);
454: 
455: 		env->SetObjectArrayElement(vec_array, col_idx, jvec);
456: 	}
457: 
458: 	return vec_array;
459: }
460: 
461: JNIEXPORT jint JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch_1size(JNIEnv *, jclass) {
462: 	return STANDARD_VECTOR_SIZE;
463: }
464: 
465: JNIEXPORT jstring JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1prepare_1type(JNIEnv *env, jclass,
466:                                                                                    jobject stmt_ref_buf) {
467: 
468: 	auto stmt_ref = (StatementHolder *)env->GetDirectBufferAddress(stmt_ref_buf);
469: 	if (!stmt_ref || !stmt_ref->stmt || !stmt_ref->stmt->success) {
470: 		jclass Exception = env->FindClass("java/sql/SQLException");
471: 		env->ThrowNew(Exception, "Invalid statement");
472: 	}
473: 	return env->NewStringUTF(StatementTypeToString(stmt_ref->stmt->GetStatementType()).c_str());
474: }
475: 
476: JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1create_1appender(JNIEnv *env, jclass,
477:                                                                                       jobject conn_ref_buf,
478:                                                                                       jbyteArray schema_name_j,
479:                                                                                       jbyteArray table_name_j) {
480: 
481: 	auto conn_ref = (Connection *)env->GetDirectBufferAddress(conn_ref_buf);
482: 	if (!conn_ref || !conn_ref->context) {
483: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid connection");
484: 	}
485: 	auto schema_name = byte_array_to_string(env, schema_name_j);
486: 	auto table_name = byte_array_to_string(env, table_name_j);
487: 	try {
488: 		auto appender = new Appender(*conn_ref, schema_name, table_name);
489: 		return env->NewDirectByteBuffer(appender, 0);
490: 	} catch (exception &e) {
491: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
492: 	}
493: 	return nullptr;
494: }
495: 
496: static Appender *get_appender(JNIEnv *env, jobject appender_ref_buf) {
497: 	auto appender_ref = (Appender *)env->GetDirectBufferAddress(appender_ref_buf);
498: 	if (!appender_ref) {
499: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), "Invalid appender");
500: 	}
501: 	return appender_ref;
502: }
503: 
504: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1begin_1row(JNIEnv *env, jclass,
505:                                                                                        jobject appender_ref_buf) {
506: 	try {
507: 		get_appender(env, appender_ref_buf)->BeginRow();
508: 	} catch (exception &e) {
509: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
510: 	}
511: }
512: 
513: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1end_1row(JNIEnv *env, jclass,
514:                                                                                      jobject appender_ref_buf) {
515: 	try {
516: 		get_appender(env, appender_ref_buf)->EndRow();
517: 	} catch (exception &e) {
518: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
519: 	}
520: }
521: 
522: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1flush(JNIEnv *env, jclass,
523:                                                                                   jobject appender_ref_buf) {
524: 	try {
525: 		get_appender(env, appender_ref_buf)->Flush();
526: 	} catch (exception &e) {
527: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
528: 	}
529: }
530: 
531: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1close(JNIEnv *env, jclass,
532:                                                                                   jobject appender_ref_buf) {
533: 	try {
534: 		auto appender = get_appender(env, appender_ref_buf);
535: 		appender->Close();
536: 		delete appender;
537: 	} catch (exception &e) {
538: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
539: 	}
540: }
541: 
542: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1boolean(JNIEnv *env, jclass,
543:                                                                                             jobject appender_ref_buf,
544:                                                                                             jboolean value) {
545: 	try {
546: 		get_appender(env, appender_ref_buf)->Append((bool)value);
547: 	} catch (exception &e) {
548: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
549: 	}
550: }
551: 
552: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1byte(JNIEnv *env, jclass,
553:                                                                                          jobject appender_ref_buf,
554:                                                                                          jbyte value) {
555: 	try {
556: 		get_appender(env, appender_ref_buf)->Append((int8_t)value);
557: 	} catch (exception &e) {
558: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
559: 	}
560: }
561: 
562: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1short(JNIEnv *env, jclass,
563:                                                                                           jobject appender_ref_buf,
564:                                                                                           jshort value) {
565: 	try {
566: 		get_appender(env, appender_ref_buf)->Append((int16_t)value);
567: 	} catch (exception &e) {
568: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
569: 	}
570: }
571: 
572: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1int(JNIEnv *env, jclass,
573:                                                                                         jobject appender_ref_buf,
574:                                                                                         jint value) {
575: 	try {
576: 		get_appender(env, appender_ref_buf)->Append((int32_t)value);
577: 	} catch (exception &e) {
578: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
579: 	}
580: }
581: 
582: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1long(JNIEnv *env, jclass,
583:                                                                                          jobject appender_ref_buf,
584:                                                                                          jlong value) {
585: 	try {
586: 		get_appender(env, appender_ref_buf)->Append((int64_t)value);
587: 	} catch (exception &e) {
588: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
589: 	}
590: }
591: 
592: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1float(JNIEnv *env, jclass,
593:                                                                                           jobject appender_ref_buf,
594:                                                                                           jfloat value) {
595: 	try {
596: 		get_appender(env, appender_ref_buf)->Append((float)value);
597: 	} catch (exception &e) {
598: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
599: 	}
600: }
601: 
602: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1double(JNIEnv *env, jclass,
603:                                                                                            jobject appender_ref_buf,
604:                                                                                            jdouble value) {
605: 	try {
606: 		get_appender(env, appender_ref_buf)->Append((double)value);
607: 	} catch (exception &e) {
608: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
609: 	}
610: }
611: 
612: JNIEXPORT void JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1appender_1append_1string(JNIEnv *env, jclass,
613:                                                                                            jobject appender_ref_buf,
614:                                                                                            jstring value) {
615: 	try {
616: 		if (env->IsSameObject(value, NULL)) {
617: 			get_appender(env, appender_ref_buf)->Append<std::nullptr_t>(nullptr);
618: 			return;
619: 		}
620: 
621: 		auto c_string_value = env->GetStringUTFChars(value, NULL);
622: 		get_appender(env, appender_ref_buf)->Append(c_string_value);
623: 		env->ReleaseStringUTFChars(value, c_string_value);
624: 	} catch (exception &e) {
625: 		env->ThrowNew(env->FindClass("java/sql/SQLException"), e.what());
626: 	}
627: }
[end of tools/jdbc/src/jni/duckdb_java.cpp]
[start of tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java]
1: package org.duckdb;
2: 
3: public enum DuckDBColumnType {
4: 	BOOLEAN, TINYINT, SMALLINT, INTEGER, BIGINT, UTINYINT, USMALLINT, UINTEGER, UBIGINT, HUGEINT, FLOAT, DOUBLE,
5: 	DECIMAL, VARCHAR, BLOB, TIME, DATE, TIMESTAMP, TIMESTAMP_WITH_TIMEZONE, INTERVAL, LIST, STRUCT
6: }
[end of tools/jdbc/src/main/java/org/duckdb/DuckDBColumnType.java]
[start of tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java]
1: package org.duckdb;
2: 
3: import java.io.InputStream;
4: import java.io.Reader;
5: import java.math.BigDecimal;
6: import java.net.URL;
7: import java.nio.ByteBuffer;
8: import java.nio.charset.StandardCharsets;
9: import java.sql.Array;
10: import java.sql.Blob;
11: import java.sql.Clob;
12: import java.sql.Connection;
13: import java.sql.Date;
14: import java.sql.NClob;
15: import java.sql.ParameterMetaData;
16: import java.sql.PreparedStatement;
17: import java.sql.Ref;
18: import java.sql.ResultSet;
19: import java.sql.ResultSetMetaData;
20: import java.sql.RowId;
21: import java.sql.SQLException;
22: import java.sql.SQLFeatureNotSupportedException;
23: import java.sql.SQLWarning;
24: import java.sql.SQLXML;
25: import java.sql.Time;
26: import java.sql.Timestamp;
27: import java.sql.Types;
28: import java.util.Calendar;
29: import java.time.LocalDateTime;
30: 
31: public class DuckDBPreparedStatement implements PreparedStatement {
32: 	private DuckDBConnection conn;
33: 
34: 	private ByteBuffer stmt_ref = null;
35: 	private DuckDBResultSet select_result = null;
36: 	private int update_result = 0;
37: 	private boolean is_update = false;
38: 	private Object[] params = new Object[0];
39: 	private DuckDBResultSetMetaData meta = null;
40: 
41: 	public DuckDBPreparedStatement(DuckDBConnection conn) throws SQLException {
42: 		if (conn == null) {
43: 			throw new SQLException("connection parameter cannot be null");
44: 		}
45: 		this.conn = conn;
46: 	}
47: 
48: 	public DuckDBPreparedStatement(DuckDBConnection conn, String sql) throws SQLException {
49: 		if (conn == null) {
50: 			throw new SQLException("connection parameter cannot be null");
51: 		}
52: 		if (sql == null) {
53: 			throw new SQLException("sql query parameter cannot be null");
54: 		}
55: 		this.conn = conn;
56: 		prepare(sql);
57: 	}
58: 
59: 	private void prepare(String sql) throws SQLException {
60: 		if (isClosed()) {
61: 			throw new SQLException("Statement was closed");
62: 		}
63: 		if (sql == null) {
64: 			throw new SQLException("sql query parameter cannot be null");
65: 		}
66: 
67: 		stmt_ref = null;
68: 		meta = null;
69: 		params = null;
70: 
71: 		select_result = null;
72: 		update_result = 0;
73: 
74: 		stmt_ref = DuckDBNative.duckdb_jdbc_prepare(conn.conn_ref, sql.getBytes(StandardCharsets.UTF_8));
75: 		meta = DuckDBNative.duckdb_jdbc_meta(stmt_ref);
76: 		params = new Object[0];
77: 		// TODO add query type to meta
78: 		String query_type = DuckDBNative.duckdb_jdbc_prepare_type(stmt_ref);
79: 		is_update = !query_type.equals("SELECT") && !query_type.equals("PRAGMA") && !query_type.equals("EXPLAIN");
80: 	}
81: 
82: 	@Override
83: 	public boolean execute() throws SQLException {
84: 		if (isClosed()) {
85: 			throw new SQLException("Statement was closed");
86: 		}
87: 		if (stmt_ref == null) {
88: 			throw new SQLException("Prepare something first");
89: 		}
90: 		ByteBuffer result_ref = DuckDBNative.duckdb_jdbc_execute(stmt_ref, params);
91: 		select_result = new DuckDBResultSet(this, meta, result_ref);
92: 
93: 		return !is_update;
94: 	}
95: 
96: 	@Override
97: 	public ResultSet executeQuery() throws SQLException {
98: 		if (is_update) {
99: 			throw new SQLException("executeQuery() can only be used with SELECT queries");
100: 		}
101: 		execute();
102: 		return getResultSet();
103: 	}
104: 
105: 	@Override
106: 	public int executeUpdate() throws SQLException {
107: 		if (!is_update) {
108: 			throw new SQLException("executeUpdate() cannot be used with SELECT queries");
109: 		}
110: 		execute();
111: 		update_result = 0;
112: 		if (select_result.next()) {
113: 			update_result = select_result.getInt(1);
114: 		}
115: 		select_result.close();
116: 
117: 		return update_result;
118: 	}
119: 
120: 	@Override
121: 	public boolean execute(String sql) throws SQLException {
122: 		prepare(sql);
123: 		return execute();
124: 	}
125: 
126: 	@Override
127: 	public ResultSet executeQuery(String sql) throws SQLException {
128: 		prepare(sql);
129: 		return executeQuery();
130: 	}
131: 
132: 	@Override
133: 	public int executeUpdate(String sql) throws SQLException {
134: 		prepare(sql);
135: 		return executeUpdate();
136: 	}
137: 
138: 	@Override
139: 	public ResultSetMetaData getMetaData() throws SQLException {
140: 		if (isClosed()) {
141: 			throw new SQLException("Statement was closed");
142: 		}
143: 		if (stmt_ref == null || select_result == null) {
144: 			throw new SQLException("Prepare and execute something first");
145: 		}
146: 		return select_result.getMetaData();
147: 	}
148: 
149: 	@Override
150: 	public ParameterMetaData getParameterMetaData() throws SQLException {
151: 		if (isClosed()) {
152: 			throw new SQLException("Statement was closed");
153: 		}
154: 		if (stmt_ref == null) {
155: 			throw new SQLException("Prepare something first");
156: 		}
157: 		return new DuckDBParameterMetaData(meta);
158: 	}
159: 
160: 	@Override
161: 	public void setObject(int parameterIndex, Object x) throws SQLException {
162: 		if (parameterIndex < 1 || parameterIndex > getParameterMetaData().getParameterCount()) {
163: 			throw new SQLException("Parameter index out of bounds");
164: 		}
165: 		if (params.length == 0) {
166: 			params = new Object[getParameterMetaData().getParameterCount()];
167: 		}
168: 		// Change sql.Timestamp to DuckDBTimestamp
169: 		if (x instanceof Timestamp) {
170: 			x = new DuckDBTimestamp((Timestamp)x);
171: 		} else if (x instanceof LocalDateTime) {
172: 			x = new DuckDBTimestamp((LocalDateTime) x);
173: 		}
174: 		params[parameterIndex - 1] = x;
175: 	}
176: 
177: 	@Override
178: 	public void setNull(int parameterIndex, int sqlType) throws SQLException {
179: 		setObject(parameterIndex, null);
180: 	}
181: 
182: 	@Override
183: 	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
184: 		setObject(parameterIndex, x);
185: 	}
186: 
187: 	@Override
188: 	public void setByte(int parameterIndex, byte x) throws SQLException {
189: 		setObject(parameterIndex, x);
190: 	}
191: 
192: 	@Override
193: 	public void setShort(int parameterIndex, short x) throws SQLException {
194: 		setObject(parameterIndex, x);
195: 	}
196: 
197: 	@Override
198: 	public void setInt(int parameterIndex, int x) throws SQLException {
199: 		setObject(parameterIndex, x);
200: 	}
201: 
202: 	@Override
203: 	public void setLong(int parameterIndex, long x) throws SQLException {
204: 		setObject(parameterIndex, x);
205: 	}
206: 
207: 	@Override
208: 	public void setFloat(int parameterIndex, float x) throws SQLException {
209: 		setObject(parameterIndex, x);
210: 	}
211: 
212: 	@Override
213: 	public void setDouble(int parameterIndex, double x) throws SQLException {
214: 		setObject(parameterIndex, x);
215: 	}
216: 
217: 	@Override
218: 	public void setString(int parameterIndex, String x) throws SQLException {
219: 		setObject(parameterIndex, x);
220: 	}
221: 
222: 	@Override
223: 	public void clearParameters() throws SQLException {
224: 		params = new Object[0];
225: 	}
226: 
227: 	@Override
228: 	public void close() throws SQLException {
229: 		if (stmt_ref != null) {
230: 			DuckDBNative.duckdb_jdbc_release(stmt_ref);
231: 			stmt_ref = null;
232: 		}
233: 		conn = null; // we use this as a check for closed-ness
234: 	}
235: 
236: 	protected void finalize() throws Throwable {
237: 		close();
238: 	}
239: 
240: 	@Override
241: 	public int getMaxFieldSize() throws SQLException {
242: 		return 0;
243: 	}
244: 
245: 	@Override
246: 	public void setMaxFieldSize(int max) throws SQLException {
247: 		throw new SQLFeatureNotSupportedException();
248: 	}
249: 
250: 	@Override
251: 	public int getMaxRows() throws SQLException {
252: 		return 0;
253: 	}
254: 
255: 	@Override
256: 	public void setMaxRows(int max) throws SQLException {
257: 	}
258: 
259: 	@Override
260: 	public void setEscapeProcessing(boolean enable) throws SQLException {
261: 	}
262: 
263: 	@Override
264: 	public int getQueryTimeout() throws SQLException {
265: 		return 0;
266: 	}
267: 
268: 	@Override
269: 	public void setQueryTimeout(int seconds) throws SQLException {
270: 		throw new SQLFeatureNotSupportedException();
271: 	}
272: 
273: 	@Override
274: 	public void cancel() throws SQLException {
275: 		throw new SQLFeatureNotSupportedException();
276: 	}
277: 
278: 	@Override
279: 	public SQLWarning getWarnings() throws SQLException {
280: 		return null;
281: 	}
282: 
283: 	@Override
284: 	public void clearWarnings() throws SQLException {
285: 	}
286: 
287: 	@Override
288: 	public void setCursorName(String name) throws SQLException {
289: 		throw new SQLFeatureNotSupportedException();
290: 	}
291: 
292: 	@Override
293: 	public ResultSet getResultSet() throws SQLException {
294: 		if (isClosed()) {
295: 			throw new SQLException("Statement was closed");
296: 		}
297: 		if (stmt_ref == null) {
298: 			throw new SQLException("Prepare something first");
299: 		}
300: 
301: 		if (is_update) {
302: 			return null;
303: 		}
304: 		return select_result;
305: 	}
306: 
307: 	@Override
308: 	public int getUpdateCount() throws SQLException {
309: 		if (isClosed()) {
310: 			throw new SQLException("Statement was closed");
311: 		}
312: 		if (stmt_ref == null) {
313: 			throw new SQLException("Prepare something first");
314: 		}
315: 
316: 		if (!is_update || update_result == 0) {
317: 			return -1;
318: 		}
319: 		return update_result;
320: 	}
321: 
322: 	@Override
323: 	public boolean getMoreResults() throws SQLException {
324: 		return false;
325: 	}
326: 
327: 	@Override
328: 	public void setFetchDirection(int direction) throws SQLException {
329: 		if (direction == ResultSet.FETCH_FORWARD) {
330: 			return;
331: 		}
332: 		throw new SQLFeatureNotSupportedException();
333: 	}
334: 
335: 	@Override
336: 	public int getFetchDirection() throws SQLException {
337: 		return ResultSet.FETCH_FORWARD;
338: 	}
339: 
340: 	@Override
341: 	public void setFetchSize(int rows) throws SQLException {
342: 	}
343: 
344: 	@Override
345: 	public int getFetchSize() throws SQLException {
346: 		return DuckDBNative.duckdb_jdbc_fetch_size();
347: 	}
348: 
349: 	@Override
350: 	public int getResultSetConcurrency() throws SQLException {
351: 		return ResultSet.CONCUR_READ_ONLY;
352: 	}
353: 
354: 	@Override
355: 	public int getResultSetType() throws SQLException {
356: 		return ResultSet.TYPE_FORWARD_ONLY;
357: 	}
358: 
359: 	@Override
360: 	public void addBatch(String sql) throws SQLException {
361: 		throw new SQLFeatureNotSupportedException();
362: 	}
363: 
364: 	@Override
365: 	public void clearBatch() throws SQLException {
366: 		throw new SQLFeatureNotSupportedException();
367: 	}
368: 
369: 	@Override
370: 	public int[] executeBatch() throws SQLException {
371: 		throw new SQLFeatureNotSupportedException();
372: 	}
373: 
374: 	@Override
375: 	public Connection getConnection() throws SQLException {
376: 		if (isClosed()) {
377: 			throw new SQLException("Statement was closed");
378: 		}
379: 		return conn;
380: 	}
381: 
382: 	@Override
383: 	public boolean getMoreResults(int current) throws SQLException {
384: 		throw new SQLFeatureNotSupportedException();
385: 	}
386: 
387: 	@Override
388: 	public ResultSet getGeneratedKeys() throws SQLException {
389: 		throw new SQLFeatureNotSupportedException();
390: 	}
391: 
392: 	@Override
393: 	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
394: 		throw new SQLFeatureNotSupportedException();
395: 	}
396: 
397: 	@Override
398: 	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
399: 		throw new SQLFeatureNotSupportedException();
400: 	}
401: 
402: 	@Override
403: 	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
404: 		throw new SQLFeatureNotSupportedException();
405: 	}
406: 
407: 	@Override
408: 	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
409: 		throw new SQLFeatureNotSupportedException();
410: 	}
411: 
412: 	@Override
413: 	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
414: 		throw new SQLFeatureNotSupportedException();
415: 	}
416: 
417: 	@Override
418: 	public boolean execute(String sql, String[] columnNames) throws SQLException {
419: 		throw new SQLFeatureNotSupportedException();
420: 	}
421: 
422: 	@Override
423: 	public int getResultSetHoldability() throws SQLException {
424: 		throw new SQLFeatureNotSupportedException();
425: 	}
426: 
427: 	@Override
428: 	public boolean isClosed() throws SQLException {
429: 		return conn == null;
430: 	}
431: 
432: 	@Override
433: 	public void setPoolable(boolean poolable) throws SQLException {
434: 		throw new SQLFeatureNotSupportedException();
435: 	}
436: 
437: 	@Override
438: 	public boolean isPoolable() throws SQLException {
439: 		throw new SQLFeatureNotSupportedException();
440: 	}
441: 
442: 	@Override
443: 	public void closeOnCompletion() throws SQLException {
444: 		throw new SQLFeatureNotSupportedException();
445: 	}
446: 
447: 	@Override
448: 	public boolean isCloseOnCompletion() throws SQLException {
449: 		return false;
450: 	}
451: 
452: 	@Override
453: 	public <T> T unwrap(Class<T> iface) throws SQLException {
454: 		throw new SQLFeatureNotSupportedException();
455: 	}
456: 
457: 	@Override
458: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
459: 		throw new SQLFeatureNotSupportedException();
460: 	}
461: 
462: 	@Override
463: 	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
464: 		throw new SQLFeatureNotSupportedException();
465: 	}
466: 
467: 	@Override
468: 	public void setDate(int parameterIndex, Date x) throws SQLException {
469: 		throw new SQLFeatureNotSupportedException();
470: 	}
471: 
472: 	@Override
473: 	public void setTime(int parameterIndex, Time x) throws SQLException {
474: 		throw new SQLFeatureNotSupportedException();
475: 	}
476: 
477: 	@Override
478: 	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
479: 		setObject(parameterIndex, x);
480: 	}
481: 
482: 	@Override
483: 	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
484: 		throw new SQLFeatureNotSupportedException();
485: 	}
486: 
487: 	@Override
488: 	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
489: 		throw new SQLFeatureNotSupportedException();
490: 	}
491: 
492: 	@Override
493: 	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
494: 		throw new SQLFeatureNotSupportedException();
495: 	}
496: 
497: 	@Override
498: 	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
499: 		if (x == null) {
500: 			setNull(parameterIndex, targetSqlType);
501: 			return;
502: 		}
503: 		switch (targetSqlType) {
504: 		case Types.BOOLEAN:
505: 		case Types.BIT:
506: 			if (x instanceof Boolean) {
507: 				setObject(parameterIndex, x);
508: 			} else if (x instanceof Number) {
509: 				setObject(parameterIndex, ((Number) x).byteValue() == 1);
510: 			} else if (x instanceof String) {
511: 				setObject(parameterIndex, Boolean.parseBoolean((String) x));
512: 			} else {
513: 				throw new SQLException("Can't convert value to boolean " + x.getClass().toString());
514: 			}
515: 			break;
516: 		case Types.TINYINT:
517: 			if (x instanceof Byte) {
518: 				setObject(parameterIndex, x);
519: 			} else if (x instanceof Number) {
520: 				setObject(parameterIndex, ((Number) x).byteValue());
521: 			} else if (x instanceof String) {
522: 				setObject(parameterIndex, Byte.parseByte((String) x));
523: 			} else if (x instanceof Boolean) {
524: 				setObject(parameterIndex, (byte) (((Boolean) x) ? 1 : 0));
525: 			} else {
526: 				throw new SQLException("Can't convert value to byte " + x.getClass().toString());
527: 			}
528: 			break;
529: 		case Types.SMALLINT:
530: 			if (x instanceof Short) {
531: 				setObject(parameterIndex, x);
532: 			} else if (x instanceof Number) {
533: 				setObject(parameterIndex, ((Number) x).shortValue());
534: 			} else if (x instanceof String) {
535: 				setObject(parameterIndex, Short.parseShort((String) x));
536: 			} else if (x instanceof Boolean) {
537: 				setObject(parameterIndex, (short) (((Boolean) x) ? 1 : 0));
538: 			} else {
539: 				throw new SQLException("Can't convert value to short " + x.getClass().toString());
540: 			}
541: 			break;
542: 		case Types.INTEGER:
543: 			if (x instanceof Integer) {
544: 				setObject(parameterIndex, x);
545: 			} else if (x instanceof Number) {
546: 				setObject(parameterIndex, ((Number) x).intValue());
547: 			} else if (x instanceof String) {
548: 				setObject(parameterIndex, Integer.parseInt((String) x));
549: 			} else if (x instanceof Boolean) {
550: 				setObject(parameterIndex, (int) (((Boolean) x) ? 1 : 0));
551: 			} else {
552: 				throw new SQLException("Can't convert value to int " + x.getClass().toString());
553: 			}
554: 			break;
555: 		case Types.BIGINT:
556: 			if (x instanceof Long) {
557: 				setObject(parameterIndex, x);
558: 			} else if (x instanceof Number) {
559: 				setObject(parameterIndex, ((Number) x).longValue());
560: 			} else if (x instanceof String) {
561: 				setObject(parameterIndex, Long.parseLong((String) x));
562: 			} else if (x instanceof Boolean) {
563: 				setObject(parameterIndex, (long) (((Boolean) x) ? 1 : 0));
564: 			} else {
565: 				throw new SQLException("Can't convert value to long " + x.getClass().toString());
566: 			}
567: 			break;
568: 		case Types.REAL:
569: 		case Types.FLOAT:
570: 			if (x instanceof Float) {
571: 				setObject(parameterIndex, x);
572: 			} else if (x instanceof Number) {
573: 				setObject(parameterIndex, ((Number) x).floatValue());
574: 			} else if (x instanceof String) {
575: 				setObject(parameterIndex, Float.parseFloat((String) x));
576: 			} else if (x instanceof Boolean) {
577: 				setObject(parameterIndex, (float) (((Boolean) x) ? 1 : 0));
578: 			} else {
579: 				throw new SQLException("Can't convert value to float " + x.getClass().toString());
580: 			}
581: 			break;
582: 		case Types.DECIMAL:
583: 			if (x instanceof BigDecimal) {
584: 				setObject(parameterIndex, x);
585: 			} else if (x instanceof Double) {
586: 				setObject(parameterIndex, new BigDecimal((Double) x));
587: 			} else if (x instanceof String) {
588: 				setObject(parameterIndex, new BigDecimal((String) x));
589: 			} else {
590: 				throw new SQLException("Can't convert value to double " + x.getClass().toString());
591: 			}
592: 			break;
593: 		case Types.NUMERIC:
594: 		case Types.DOUBLE:
595: 			if (x instanceof Double) {
596: 				setObject(parameterIndex, x);
597: 			} else if (x instanceof Number) {
598: 				setObject(parameterIndex, ((Number) x).doubleValue());
599: 			} else if (x instanceof String) {
600: 				setObject(parameterIndex, Double.parseDouble((String) x));
601: 			} else if (x instanceof Boolean) {
602: 				setObject(parameterIndex, (double) (((Boolean) x) ? 1 : 0));
603: 			} else {
604: 				throw new SQLException("Can't convert value to double " + x.getClass().toString());
605: 			}
606: 			break;
607: 		case Types.CHAR:
608: 		case Types.LONGVARCHAR:
609: 		case Types.VARCHAR:
610: 			if (x instanceof String) {
611: 				setObject(parameterIndex, (String) x);
612: 			} else {
613: 				setObject(parameterIndex, x.toString());
614: 			}
615: 			break;
616: 		case Types.TIMESTAMP:
617: 			if (x instanceof Timestamp) {
618: 				setObject(parameterIndex, x);
619: 			} else if (x instanceof LocalDateTime) {
620: 				setObject(parameterIndex, x);
621: 			} else {
622: 				throw new SQLException("Can't convert value to timestamp " + x.getClass().toString());
623: 			}
624: 			break;
625: 		default:
626: 			throw new SQLException("Unknown target type " + targetSqlType);
627: 		}
628: 	}
629: 
630: 	@Override
631: 	public void addBatch() throws SQLException {
632: 		throw new SQLFeatureNotSupportedException();
633: 	}
634: 
635: 	@Override
636: 	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
637: 		throw new SQLFeatureNotSupportedException();
638: 	}
639: 
640: 	@Override
641: 	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
642: 		setObject(parameterIndex, x);
643: 	}
644: 
645: 	@Override
646: 	public void setRef(int parameterIndex, Ref x) throws SQLException {
647: 		throw new SQLFeatureNotSupportedException();
648: 	}
649: 
650: 	@Override
651: 	public void setBlob(int parameterIndex, Blob x) throws SQLException {
652: 		throw new SQLFeatureNotSupportedException();
653: 	}
654: 
655: 	@Override
656: 	public void setClob(int parameterIndex, Clob x) throws SQLException {
657: 		throw new SQLFeatureNotSupportedException();
658: 	}
659: 
660: 	@Override
661: 	public void setArray(int parameterIndex, Array x) throws SQLException {
662: 		throw new SQLFeatureNotSupportedException();
663: 	}
664: 
665: 	@Override
666: 	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
667: 		throw new SQLFeatureNotSupportedException();
668: 	}
669: 
670: 	@Override
671: 	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
672: 		throw new SQLFeatureNotSupportedException();
673: 	}
674: 
675: 	@Override
676: 	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
677: 		throw new SQLFeatureNotSupportedException();
678: 	}
679: 
680: 	@Override
681: 	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
682: 		throw new SQLFeatureNotSupportedException();
683: 	}
684: 
685: 	@Override
686: 	public void setURL(int parameterIndex, URL x) throws SQLException {
687: 		throw new SQLFeatureNotSupportedException();
688: 	}
689: 
690: 	@Override
691: 	public void setRowId(int parameterIndex, RowId x) throws SQLException {
692: 		throw new SQLFeatureNotSupportedException();
693: 	}
694: 
695: 	@Override
696: 	public void setNString(int parameterIndex, String value) throws SQLException {
697: 		throw new SQLFeatureNotSupportedException();
698: 	}
699: 
700: 	@Override
701: 	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
702: 		throw new SQLFeatureNotSupportedException();
703: 	}
704: 
705: 	@Override
706: 	public void setNClob(int parameterIndex, NClob value) throws SQLException {
707: 		throw new SQLFeatureNotSupportedException();
708: 	}
709: 
710: 	@Override
711: 	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
712: 		throw new SQLFeatureNotSupportedException();
713: 	}
714: 
715: 	@Override
716: 	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
717: 		throw new SQLFeatureNotSupportedException();
718: 	}
719: 
720: 	@Override
721: 	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
722: 		throw new SQLFeatureNotSupportedException();
723: 	}
724: 
725: 	@Override
726: 	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
727: 		throw new SQLFeatureNotSupportedException();
728: 	}
729: 
730: 	@Override
731: 	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
732: 		setObject(parameterIndex, x, targetSqlType);
733: 	}
734: 
735: 	@Override
736: 	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
737: 		throw new SQLFeatureNotSupportedException();
738: 	}
739: 
740: 	@Override
741: 	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
742: 		throw new SQLFeatureNotSupportedException();
743: 	}
744: 
745: 	@Override
746: 	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
747: 		throw new SQLFeatureNotSupportedException();
748: 	}
749: 
750: 	@Override
751: 	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
752: 		throw new SQLFeatureNotSupportedException();
753: 	}
754: 
755: 	@Override
756: 	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
757: 		throw new SQLFeatureNotSupportedException();
758: 	}
759: 
760: 	@Override
761: 	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
762: 		throw new SQLFeatureNotSupportedException();
763: 	}
764: 
765: 	@Override
766: 	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
767: 		throw new SQLFeatureNotSupportedException();
768: 	}
769: 
770: 	@Override
771: 	public void setClob(int parameterIndex, Reader reader) throws SQLException {
772: 		throw new SQLFeatureNotSupportedException();
773: 	}
774: 
775: 	@Override
776: 	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
777: 		throw new SQLFeatureNotSupportedException();
778: 	}
779: 
780: 	@Override
781: 	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
782: 		throw new SQLFeatureNotSupportedException();
783: 	}
784: 
785: }
[end of tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java]
[start of tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java]
1: package org.duckdb;
2: 
3: import java.io.IOException;
4: import java.io.InputStream;
5: import java.io.OutputStream;
6: import java.io.Reader;
7: import java.math.BigDecimal;
8: import java.math.BigInteger;
9: import java.net.URL;
10: import java.nio.ByteBuffer;
11: import java.nio.ByteOrder;
12: import java.sql.Array;
13: import java.sql.Blob;
14: import java.sql.Clob;
15: import java.sql.Date;
16: import java.sql.NClob;
17: import java.sql.Ref;
18: import java.sql.ResultSet;
19: import java.sql.ResultSetMetaData;
20: import java.sql.RowId;
21: import java.sql.SQLException;
22: import java.sql.SQLFeatureNotSupportedException;
23: import java.sql.SQLWarning;
24: import java.sql.SQLXML;
25: import java.sql.Statement;
26: import java.sql.Time;
27: import java.sql.Timestamp;
28: import java.util.Calendar;
29: import java.util.Map;
30: import java.time.LocalDateTime;
31: import java.time.OffsetDateTime;
32: 
33: public class DuckDBResultSet implements ResultSet {
34: 
35: 	// Constant to construct BigDecimals from hugeint_t
36: 	private final static BigDecimal ULONG_MULTIPLIER = new BigDecimal("18446744073709551616");
37: 
38: 	private DuckDBPreparedStatement stmt;
39: 	private DuckDBResultSetMetaData meta;
40: 
41: 	private ByteBuffer result_ref;
42: 	private DuckDBVector[] current_chunk;
43: 	private int chunk_idx = 0;
44: 	private boolean finished = false;
45: 	private boolean was_null;
46: 
47: 	public DuckDBResultSet(DuckDBPreparedStatement stmt, DuckDBResultSetMetaData meta, ByteBuffer result_ref) {
48: 		this.stmt = stmt;
49: 		this.result_ref = result_ref;
50: 		this.meta = meta;
51: 		current_chunk = DuckDBNative.duckdb_jdbc_fetch(result_ref);
52: 		if (current_chunk.length == 0) {
53: 			finished = true;
54: 		}
55: 	}
56: 
57: 	public Statement getStatement() throws SQLException {
58: 		if (isClosed()) {
59: 			throw new SQLException("ResultSet was closed");
60: 		}
61: 		return stmt;
62: 	}
63: 
64: 	public ResultSetMetaData getMetaData() throws SQLException {
65: 		if (isClosed()) {
66: 			throw new SQLException("ResultSet was closed");
67: 		}
68: 		return meta;
69: 	}
70: 
71: 	public boolean next() throws SQLException {
72: 		if (isClosed()) {
73: 			throw new SQLException("ResultSet was closed");
74: 		}
75: 		if (finished) {
76: 			return false;
77: 		}
78: 		chunk_idx++;
79: 		if (chunk_idx > current_chunk[0].length) {
80: 			current_chunk = DuckDBNative.duckdb_jdbc_fetch(result_ref);
81: 			chunk_idx = 1;
82: 		}
83: 		if (current_chunk.length == 0) {
84: 			finished = true;
85: 			return false;
86: 		}
87: 		return true;
88: 	}
89: 
90: 	public synchronized void close() throws SQLException {
91: 		if (result_ref != null) {
92: 			DuckDBNative.duckdb_jdbc_free_result(result_ref);
93: 			result_ref = null;
94: 		}
95: 		stmt = null;
96: 		meta = null;
97: 		current_chunk = null;
98: 	}
99: 
100: 	protected void finalize() throws Throwable {
101: 		close();
102: 	}
103: 
104: 	public boolean isClosed() throws SQLException {
105: 		return result_ref == null;
106: 	}
107: 
108: 	private void check(int columnIndex) throws SQLException {
109: 		if (isClosed()) {
110: 			throw new SQLException("ResultSet was closed");
111: 		}
112: 		if (columnIndex < 1 || columnIndex > meta.column_count) {
113: 			throw new SQLException("Column index out of bounds");
114: 		}
115: 
116: 	}
117: 
118: 	public Object getObject(int columnIndex) throws SQLException {
119: 		check_and_null(columnIndex);
120: 		if (was_null) {
121: 			return null;
122: 		}
123: 		switch (meta.column_types[columnIndex - 1]) {
124: 		case BOOLEAN:
125: 			return getBoolean(columnIndex);
126: 		case TINYINT:
127: 			return getByte(columnIndex);
128: 		case SMALLINT:
129: 			return getShort(columnIndex);
130: 		case INTEGER:
131: 			return getInt(columnIndex);
132: 		case BIGINT:
133: 			return getLong(columnIndex);
134: 		case HUGEINT:
135: 			return getHugeint(columnIndex);
136: 		case UTINYINT:
137: 			return getUint8(columnIndex);
138: 		case USMALLINT:
139: 			return getUint16(columnIndex);
140: 		case UINTEGER:
141: 			return getUint32(columnIndex);
142: 		case UBIGINT:
143: 			return getUint64(columnIndex);
144: 		case FLOAT:
145: 			return getFloat(columnIndex);
146: 		case DOUBLE:
147: 			return getDouble(columnIndex);
148: 		case DECIMAL:
149: 			return getBigDecimal(columnIndex);
150: 		case VARCHAR:
151: 			return getString(columnIndex);
152: 		case TIME:
153: 			return getTime(columnIndex);
154: 		case DATE:
155: 			return getDate(columnIndex);
156: 		case TIMESTAMP:
157: 			return getTimestamp(columnIndex);
158: 		case INTERVAL:
159: 			return getLazyString(columnIndex);
160: 		default:
161: 			throw new SQLException("Not implemented type: " + meta.column_types_string[columnIndex - 1]);
162: 		}
163: 
164: 	}
165: 
166: 	public boolean wasNull() throws SQLException {
167: 		if (isClosed()) {
168: 			throw new SQLException("ResultSet was closed");
169: 		}
170: 		return was_null;
171: 	}
172: 
173: 	private boolean check_and_null(int columnIndex) throws SQLException {
174: 		check(columnIndex);
175: 		was_null = current_chunk[columnIndex - 1].nullmask[chunk_idx - 1];
176: 		return was_null;
177: 	}
178: 
179: 	public String getLazyString(int columnIndex) throws SQLException {
180: 		if (check_and_null(columnIndex)) {
181: 			return null;
182: 		}
183: 		return (String) current_chunk[columnIndex - 1].varlen_data[chunk_idx - 1];
184: 	}
185: 
186: 	private boolean isType(int columnIndex, DuckDBColumnType type) {
187: 		return meta.column_types[columnIndex - 1] == type;
188: 	}
189: 
190: 	public String getString(int columnIndex) throws SQLException {
191: 		if (check_and_null(columnIndex)) {
192: 			return null;
193: 		}
194: 
195: 		if (isType(columnIndex, DuckDBColumnType.VARCHAR)) {
196: 			return (String) current_chunk[columnIndex - 1].varlen_data[chunk_idx - 1];
197: 		}
198: 		Object res = getObject(columnIndex);
199: 		if (res == null) {
200: 			return null;
201: 		} else {
202: 			return res.toString();
203: 		}
204: 	}
205: 
206: 	private ByteBuffer getbuf(int columnIndex, int typeWidth) throws SQLException {
207: 		ByteBuffer buf = current_chunk[columnIndex - 1].constlen_data;
208: 		buf.order(ByteOrder.LITTLE_ENDIAN);
209: 		buf.position((chunk_idx - 1) * typeWidth);
210: 		return buf;
211: 	}
212: 
213: 	public boolean getBoolean(int columnIndex) throws SQLException {
214: 		if (check_and_null(columnIndex)) {
215: 			return false;
216: 		}
217: 		if (isType(columnIndex, DuckDBColumnType.BOOLEAN)) {
218: 			return getbuf(columnIndex, 1).get() == 1;
219: 		}
220: 		Object o = getObject(columnIndex);
221: 		if (o instanceof Number) {
222: 			return ((Number) o).byteValue() == 1;
223: 		}
224: 
225: 		return Boolean.parseBoolean(getObject(columnIndex).toString());
226: 	}
227: 
228: 	public byte getByte(int columnIndex) throws SQLException {
229: 		if (check_and_null(columnIndex)) {
230: 			return 0;
231: 		}
232: 		if (isType(columnIndex, DuckDBColumnType.TINYINT)) {
233: 			return getbuf(columnIndex, 1).get();
234: 		}
235: 		Object o = getObject(columnIndex);
236: 		if (o instanceof Number) {
237: 			return ((Number) o).byteValue();
238: 		}
239: 		return Byte.parseByte(o.toString());
240: 	}
241: 
242: 	public short getShort(int columnIndex) throws SQLException {
243: 		if (check_and_null(columnIndex)) {
244: 			return 0;
245: 		}
246: 		if (isType(columnIndex, DuckDBColumnType.SMALLINT)) {
247: 			return getbuf(columnIndex, 2).getShort();
248: 		}
249: 		Object o = getObject(columnIndex);
250: 		if (o instanceof Number) {
251: 			return ((Number) o).shortValue();
252: 		}
253: 		return Short.parseShort(o.toString());
254: 	}
255: 
256: 	public int getInt(int columnIndex) throws SQLException {
257: 		if (check_and_null(columnIndex)) {
258: 			return 0;
259: 		}
260: 		if (isType(columnIndex, DuckDBColumnType.INTEGER)) {
261: 			return getbuf(columnIndex, 4).getInt();
262: 		}
263: 		Object o = getObject(columnIndex);
264: 		if (o instanceof Number) {
265: 			return ((Number) o).intValue();
266: 		}
267: 		return Integer.parseInt(o.toString());
268: 	}
269: 
270: 	private short getUint8(int columnIndex) throws SQLException {
271: 		if (check_and_null(columnIndex)) {
272: 			return 0;
273: 		}
274: 		if (isType(columnIndex, DuckDBColumnType.UTINYINT)) {
275: 			ByteBuffer buf = ByteBuffer.allocate(2);
276: 			getbuf(columnIndex, 1).get(buf.array(), 1, 1);
277: 			return buf.getShort();
278: 
279: 		}
280: 		throw new SQLFeatureNotSupportedException();
281: 	}
282: 
283: 	private int getUint16(int columnIndex) throws SQLException {
284: 		if (check_and_null(columnIndex)) {
285: 			return 0;
286: 		}
287: 		if (isType(columnIndex, DuckDBColumnType.USMALLINT)) {
288: 			ByteBuffer buf = ByteBuffer.allocate(4);
289: 			buf.order(ByteOrder.LITTLE_ENDIAN);
290: 			getbuf(columnIndex, 2).get(buf.array(), 0, 2);
291: 			return buf.getInt();
292: 		}
293: 		throw new SQLFeatureNotSupportedException();
294: 
295: 	}
296: 
297: 	private long getUint32(int columnIndex) throws SQLException {
298: 		if (check_and_null(columnIndex)) {
299: 			return 0;
300: 		}
301: 		if (isType(columnIndex, DuckDBColumnType.UINTEGER)) {
302: 			ByteBuffer buf = ByteBuffer.allocate(8);
303: 			buf.order(ByteOrder.LITTLE_ENDIAN);
304: 			getbuf(columnIndex, 4).get(buf.array(), 0, 4);
305: 			return buf.getLong();
306: 		}
307: 		throw new SQLFeatureNotSupportedException();
308: 	}
309: 
310: 	private BigInteger getUint64(int columnIndex) throws SQLException {
311: 		if (check_and_null(columnIndex)) {
312: 			return BigInteger.ZERO;
313: 		}
314: 		if (isType(columnIndex, DuckDBColumnType.UBIGINT)) {
315: 			byte[] buf_res = new byte[16];
316: 			byte[] buf = new byte[8];
317: 			getbuf(columnIndex, 8).get(buf);
318: 			for (int i = 0; i < 8; i++) {
319: 				buf_res[i + 8] = buf[7 - i];
320: 			}
321: 			return new BigInteger(buf_res);
322: 		}
323: 		throw new SQLFeatureNotSupportedException();
324: 	}
325: 
326: 	public long getLong(int columnIndex) throws SQLException {
327: 		if (check_and_null(columnIndex)) {
328: 			return 0;
329: 		}
330: 		if (isType(columnIndex, DuckDBColumnType.BIGINT)) {
331: 			return getbuf(columnIndex, 8).getLong();
332: 		}
333: 		Object o = getObject(columnIndex);
334: 		if (o instanceof Number) {
335: 			return ((Number) o).longValue();
336: 		}
337: 		return Long.parseLong(o.toString());
338: 	}
339: 
340: 	public BigInteger getHugeint(int columnIndex) throws SQLException {
341: 		if (check_and_null(columnIndex)) {
342: 			return BigInteger.ZERO;
343: 		}
344: 		if (isType(columnIndex, DuckDBColumnType.HUGEINT)) {
345: 			byte[] buf = new byte[16];
346: 			getbuf(columnIndex, 16).get(buf);
347: 			for (int i = 0; i < 8; i++) {
348: 				byte keep = buf[i];
349: 				buf[i] = buf[15 - i];
350: 				buf[15 - i] = keep;
351: 			}
352: 			return new BigInteger(buf);
353: 		}
354: 		Object o = getObject(columnIndex);
355: 		return new BigInteger(o.toString());
356: 	}
357: 
358: 	public float getFloat(int columnIndex) throws SQLException {
359: 		if (check_and_null(columnIndex)) {
360: 			return Float.NaN;
361: 		}
362: 		if (isType(columnIndex, DuckDBColumnType.FLOAT)) {
363: 			return getbuf(columnIndex, 4).getFloat();
364: 		}
365: 		Object o = getObject(columnIndex);
366: 		if (o instanceof Number) {
367: 			return ((Number) o).floatValue();
368: 		}
369: 		return Float.parseFloat(o.toString());
370: 	}
371: 
372: 	public double getDouble(int columnIndex) throws SQLException {
373: 		if (check_and_null(columnIndex)) {
374: 			return Double.NaN;
375: 		}
376: 		if (isType(columnIndex, DuckDBColumnType.DOUBLE)) {
377: 			return getbuf(columnIndex, 8).getDouble();
378: 		}
379: 		Object o = getObject(columnIndex);
380: 		if (o instanceof Number) {
381: 			return ((Number) o).doubleValue();
382: 		}
383: 		return Double.parseDouble(o.toString());
384: 	}
385: 
386: 	public int findColumn(String columnLabel) throws SQLException {
387: 		if (isClosed()) {
388: 			throw new SQLException("ResultSet was closed");
389: 		}
390: 		for (int col_idx = 0; col_idx < meta.column_count; col_idx++) {
391: 			if (meta.column_names[col_idx].contentEquals(columnLabel)) {
392: 				return col_idx + 1;
393: 			}
394: 		}
395: 		throw new SQLException("Could not find column with label " + columnLabel);
396: 	}
397: 
398: 	public String getString(String columnLabel) throws SQLException {
399: 		return getString(findColumn(columnLabel));
400: 	}
401: 
402: 	public boolean getBoolean(String columnLabel) throws SQLException {
403: 		return getBoolean(findColumn(columnLabel));
404: 	}
405: 
406: 	public byte getByte(String columnLabel) throws SQLException {
407: 		return getByte(findColumn(columnLabel));
408: 	}
409: 
410: 	public short getShort(String columnLabel) throws SQLException {
411: 		return getShort(findColumn(columnLabel));
412: 	}
413: 
414: 	public int getInt(String columnLabel) throws SQLException {
415: 		return getInt(findColumn(columnLabel));
416: 	}
417: 
418: 	public long getLong(String columnLabel) throws SQLException {
419: 		return getLong(findColumn(columnLabel));
420: 	}
421: 
422: 	public float getFloat(String columnLabel) throws SQLException {
423: 		return getFloat(findColumn(columnLabel));
424: 	}
425: 
426: 	public double getDouble(String columnLabel) throws SQLException {
427: 		return getDouble(findColumn(columnLabel));
428: 	}
429: 
430: 	public Object getObject(String columnLabel) throws SQLException {
431: 		return getObject(findColumn(columnLabel));
432: 	}
433: 
434: 	public BigDecimal getBigDecimal(int columnIndex, int scale) throws SQLException {
435: 		throw new SQLFeatureNotSupportedException();
436: 	}
437: 
438: 	public byte[] getBytes(int columnIndex) throws SQLException {
439: 		throw new SQLFeatureNotSupportedException();
440: 	}
441: 
442: 	public Date getDate(int columnIndex) throws SQLException {
443: 		String string_value = getLazyString(columnIndex);
444: 		if (string_value == null) {
445: 			return null;
446: 		}
447: 		try {
448: 			return Date.valueOf(string_value);
449: 		} catch (Exception e) {
450: 			return null;
451: 		}
452: 	}
453: 
454: 	public Time getTime(int columnIndex) throws SQLException {
455: 		String string_value = getLazyString(columnIndex);
456: 		if (string_value == null) {
457: 			return null;
458: 		}
459: 		try {
460: 
461: 			return Time.valueOf(getLazyString(columnIndex));
462: 		} catch (Exception e) {
463: 			return null;
464: 		}
465: 	}
466: 
467: 	public Timestamp getTimestamp(int columnIndex) throws SQLException {
468: 		if (check_and_null(columnIndex)) {
469: 			return null;
470: 		}
471: 		if (isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {
472: 			return DuckDBTimestamp.toSqlTimestamp(getbuf(columnIndex, 8).getLong());
473: 		}
474: 		return null;
475: 	}
476: 
477: 	private LocalDateTime getLocalDateTime(int columnIndex) throws SQLException {
478: 		if (check_and_null(columnIndex)) {
479: 			return null;
480: 		}
481: 		if (isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {
482: 			return DuckDBTimestamp.toLocalDateTime(getbuf(columnIndex, 8).getLong());
483: 		}
484: 		return null;
485: 	}
486: 	static class DuckDBBlobResult implements Blob {
487: 
488: 		static class ByteBufferBackedInputStream extends InputStream {
489: 
490: 			ByteBuffer buf;
491: 
492: 			public ByteBufferBackedInputStream(ByteBuffer buf) {
493: 				this.buf = buf;
494: 			}
495: 
496: 			public int read() throws IOException {
497: 				if (!buf.hasRemaining()) {
498: 					return -1;
499: 				}
500: 				return buf.get() & 0xFF;
501: 			}
502: 
503: 			public int read(byte[] bytes, int off, int len) throws IOException {
504: 				if (!buf.hasRemaining()) {
505: 					return -1;
506: 				}
507: 
508: 				len = Math.min(len, buf.remaining());
509: 				buf.get(bytes, off, len);
510: 				return len;
511: 			}
512: 		}
513: 
514: 		public DuckDBBlobResult(ByteBuffer buffer_p) {
515: 			buffer_p.position(0);
516: 			buffer_p.order(ByteOrder.LITTLE_ENDIAN);
517: 			this.buffer = buffer_p;
518: 		}
519: 
520: 		public InputStream getBinaryStream() {
521: 			return getBinaryStream(0, length());
522: 		}
523: 
524: 		public InputStream getBinaryStream(long pos, long length) {
525: 			return new ByteBufferBackedInputStream(buffer);
526: 		}
527: 
528: 		public byte[] getBytes(long pos, int length) {
529: 			byte[] bytes = new byte[length];
530: 			buffer.position((int) pos);
531: 			buffer.get(bytes, 0, length);
532: 			return bytes;
533: 		}
534: 
535: 		public long position(Blob pattern, long start) throws SQLException {
536: 			throw new SQLFeatureNotSupportedException();
537: 		}
538: 
539: 		public long position(byte[] pattern, long start) throws SQLException {
540: 			throw new SQLFeatureNotSupportedException();
541: 		}
542: 
543: 		public long length() {
544: 			return buffer.capacity();
545: 		}
546: 
547: 		public void free() {
548: 			// nop
549: 		}
550: 
551: 		public OutputStream setBinaryStream(long pos) throws SQLException {
552: 			throw new SQLFeatureNotSupportedException();
553: 		}
554: 
555: 		public void truncate(long length) throws SQLException {
556: 			throw new SQLFeatureNotSupportedException();
557: 		}
558: 
559: 		public int setBytes(long pos, byte[] bytes) throws SQLException {
560: 			throw new SQLFeatureNotSupportedException();
561: 
562: 		}
563: 
564: 		public int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLException {
565: 			throw new SQLFeatureNotSupportedException();
566: 
567: 		}
568: 
569: 		private ByteBuffer buffer;
570: 
571: 	}
572: 
573: 	public Blob getBlob(int columnIndex) throws SQLException {
574: 		if (check_and_null(columnIndex)) {
575: 			return null;
576: 		}
577: 		if (isType(columnIndex, DuckDBColumnType.BLOB)) {
578: 			return new DuckDBBlobResult(((ByteBuffer[]) current_chunk[columnIndex - 1].varlen_data)[chunk_idx - 1]);
579: 		}
580: 
581: 		throw new SQLFeatureNotSupportedException();
582: 	}
583: 
584: 	public Blob getBlob(String columnLabel) throws SQLException {
585: 		return getBlob(findColumn(columnLabel));
586: 	}
587: 
588: 	public InputStream getAsciiStream(int columnIndex) throws SQLException {
589: 		throw new SQLFeatureNotSupportedException();
590: 	}
591: 
592: 	public InputStream getUnicodeStream(int columnIndex) throws SQLException {
593: 		throw new SQLFeatureNotSupportedException();
594: 	}
595: 
596: 	public InputStream getBinaryStream(int columnIndex) throws SQLException {
597: 		throw new SQLFeatureNotSupportedException();
598: 	}
599: 
600: 	public BigDecimal getBigDecimal(String columnLabel, int scale) throws SQLException {
601: 		throw new SQLFeatureNotSupportedException();
602: 	}
603: 
604: 	public byte[] getBytes(String columnLabel) throws SQLException {
605: 		throw new SQLFeatureNotSupportedException();
606: 	}
607: 
608: 	public Date getDate(String columnLabel) throws SQLException {
609: 		return getDate(findColumn(columnLabel));
610: 	}
611: 
612: 	public Time getTime(String columnLabel) throws SQLException {
613: 		return getTime(findColumn(columnLabel));
614: 	}
615: 
616: 	public Timestamp getTimestamp(String columnLabel) throws SQLException {
617: 		return getTimestamp(findColumn(columnLabel));
618: 	}
619: 
620: 	public InputStream getAsciiStream(String columnLabel) throws SQLException {
621: 		throw new SQLFeatureNotSupportedException();
622: 	}
623: 
624: 	public InputStream getUnicodeStream(String columnLabel) throws SQLException {
625: 		throw new SQLFeatureNotSupportedException();
626: 	}
627: 
628: 	public InputStream getBinaryStream(String columnLabel) throws SQLException {
629: 		throw new SQLFeatureNotSupportedException();
630: 	}
631: 
632: 	public SQLWarning getWarnings() throws SQLException {
633: 		throw new SQLFeatureNotSupportedException();
634: 	}
635: 
636: 	public void clearWarnings() throws SQLException {
637: 		throw new SQLFeatureNotSupportedException();
638: 	}
639: 
640: 	public String getCursorName() throws SQLException {
641: 		throw new SQLFeatureNotSupportedException();
642: 	}
643: 
644: 	public Reader getCharacterStream(int columnIndex) throws SQLException {
645: 		throw new SQLFeatureNotSupportedException();
646: 	}
647: 
648: 	public Reader getCharacterStream(String columnLabel) throws SQLException {
649: 		throw new SQLFeatureNotSupportedException();
650: 	}
651: 
652: 	public BigDecimal getBigDecimal(int columnIndex) throws SQLException {
653: 		if (check_and_null(columnIndex)) {
654: 			return null;
655: 		}
656: 		if (isType(columnIndex, DuckDBColumnType.DECIMAL)) {
657: 			switch(meta.column_types_meta[columnIndex -1].type_size){
658: 			case 16:
659: 				return new BigDecimal((int)getbuf(columnIndex, 2).getShort())
660: 					.scaleByPowerOfTen(meta.column_types_meta[columnIndex -1].scale * -1);
661: 			case 32:
662: 				return new BigDecimal(getbuf(columnIndex, 4).getInt())
663: 					.scaleByPowerOfTen(meta.column_types_meta[columnIndex -1].scale * -1);
664: 			case 64:
665: 				return new BigDecimal(getbuf(columnIndex, 8).getLong())
666: 					.scaleByPowerOfTen(meta.column_types_meta[columnIndex -1].scale * -1);
667: 			case 128:
668: 				ByteBuffer buf = getbuf(columnIndex, 16);
669: 				long lower = buf.getLong();
670: 				long upper = buf.getLong();
671: 				return new BigDecimal(upper).multiply(ULONG_MULTIPLIER).add(new BigDecimal(Long.toUnsignedString(lower)))
672: 					.scaleByPowerOfTen(meta.column_types_meta[columnIndex -1].scale * -1);
673: 			}
674: 		}
675: 		Object o = getObject(columnIndex);
676: 		return new BigDecimal(o.toString());
677: 	}
678: 
679: 	public BigDecimal getBigDecimal(String columnLabel) throws SQLException {
680: 		return getBigDecimal(findColumn(columnLabel));
681: 	}
682: 
683: 	public boolean isBeforeFirst() throws SQLException {
684: 		throw new SQLFeatureNotSupportedException();
685: 	}
686: 
687: 	public boolean isAfterLast() throws SQLException {
688: 		throw new SQLFeatureNotSupportedException();
689: 	}
690: 
691: 	public boolean isFirst() throws SQLException {
692: 		throw new SQLFeatureNotSupportedException();
693: 	}
694: 
695: 	public boolean isLast() throws SQLException {
696: 		throw new SQLFeatureNotSupportedException();
697: 	}
698: 
699: 	public void beforeFirst() throws SQLException {
700: 		throw new SQLFeatureNotSupportedException();
701: 	}
702: 
703: 	public void afterLast() throws SQLException {
704: 		throw new SQLFeatureNotSupportedException();
705: 	}
706: 
707: 	public boolean first() throws SQLException {
708: 		throw new SQLFeatureNotSupportedException();
709: 	}
710: 
711: 	public boolean last() throws SQLException {
712: 		throw new SQLFeatureNotSupportedException();
713: 	}
714: 
715: 	public int getRow() throws SQLException {
716: 		throw new SQLFeatureNotSupportedException();
717: 	}
718: 
719: 	public boolean absolute(int row) throws SQLException {
720: 		throw new SQLFeatureNotSupportedException();
721: 	}
722: 
723: 	public boolean relative(int rows) throws SQLException {
724: 		throw new SQLFeatureNotSupportedException();
725: 	}
726: 
727: 	public boolean previous() throws SQLException {
728: 		throw new SQLFeatureNotSupportedException();
729: 	}
730: 
731: 	public void setFetchDirection(int direction) throws SQLException {
732: 		if (direction != ResultSet.FETCH_FORWARD && direction != ResultSet.FETCH_UNKNOWN) {
733: 			throw new SQLFeatureNotSupportedException();
734: 		}
735: 	}
736: 
737: 	public int getFetchDirection() throws SQLException {
738: 		return ResultSet.FETCH_FORWARD;
739: 	}
740: 
741: 	public void setFetchSize(int rows) throws SQLException {
742: 		if (rows < 0) {
743: 			throw new SQLException("Fetch size has to be >= 0");
744: 		}
745: 		// whatevs
746: 	}
747: 
748: 	public int getFetchSize() throws SQLException {
749: 		return DuckDBNative.duckdb_jdbc_fetch_size();
750: 	}
751: 
752: 	public int getType() throws SQLException {
753: 		return ResultSet.TYPE_FORWARD_ONLY;
754: 	}
755: 
756: 	public int getConcurrency() throws SQLException {
757: 		return ResultSet.CONCUR_READ_ONLY;
758: 	}
759: 
760: 	public boolean rowUpdated() throws SQLException {
761: 		throw new SQLFeatureNotSupportedException();
762: 	}
763: 
764: 	public boolean rowInserted() throws SQLException {
765: 		throw new SQLFeatureNotSupportedException();
766: 	}
767: 
768: 	public boolean rowDeleted() throws SQLException {
769: 		throw new SQLFeatureNotSupportedException();
770: 	}
771: 
772: 	public void updateNull(int columnIndex) throws SQLException {
773: 		throw new SQLFeatureNotSupportedException();
774: 	}
775: 
776: 	public void updateBoolean(int columnIndex, boolean x) throws SQLException {
777: 		throw new SQLFeatureNotSupportedException();
778: 	}
779: 
780: 	public void updateByte(int columnIndex, byte x) throws SQLException {
781: 		throw new SQLFeatureNotSupportedException();
782: 	}
783: 
784: 	public void updateShort(int columnIndex, short x) throws SQLException {
785: 		throw new SQLFeatureNotSupportedException();
786: 	}
787: 
788: 	public void updateInt(int columnIndex, int x) throws SQLException {
789: 		throw new SQLFeatureNotSupportedException();
790: 	}
791: 
792: 	public void updateLong(int columnIndex, long x) throws SQLException {
793: 		throw new SQLFeatureNotSupportedException();
794: 	}
795: 
796: 	public void updateFloat(int columnIndex, float x) throws SQLException {
797: 		throw new SQLFeatureNotSupportedException();
798: 	}
799: 
800: 	public void updateDouble(int columnIndex, double x) throws SQLException {
801: 		throw new SQLFeatureNotSupportedException();
802: 	}
803: 
804: 	public void updateBigDecimal(int columnIndex, BigDecimal x) throws SQLException {
805: 		throw new SQLFeatureNotSupportedException();
806: 	}
807: 
808: 	public void updateString(int columnIndex, String x) throws SQLException {
809: 		throw new SQLFeatureNotSupportedException();
810: 	}
811: 
812: 	public void updateBytes(int columnIndex, byte[] x) throws SQLException {
813: 		throw new SQLFeatureNotSupportedException();
814: 	}
815: 
816: 	public void updateDate(int columnIndex, Date x) throws SQLException {
817: 		throw new SQLFeatureNotSupportedException();
818: 	}
819: 
820: 	public void updateTime(int columnIndex, Time x) throws SQLException {
821: 		throw new SQLFeatureNotSupportedException();
822: 	}
823: 
824: 	public void updateTimestamp(int columnIndex, Timestamp x) throws SQLException {
825: 		throw new SQLFeatureNotSupportedException();
826: 	}
827: 
828: 	public void updateAsciiStream(int columnIndex, InputStream x, int length) throws SQLException {
829: 		throw new SQLFeatureNotSupportedException();
830: 	}
831: 
832: 	public void updateBinaryStream(int columnIndex, InputStream x, int length) throws SQLException {
833: 		throw new SQLFeatureNotSupportedException();
834: 	}
835: 
836: 	public void updateCharacterStream(int columnIndex, Reader x, int length) throws SQLException {
837: 		throw new SQLFeatureNotSupportedException();
838: 	}
839: 
840: 	public void updateObject(int columnIndex, Object x, int scaleOrLength) throws SQLException {
841: 		throw new SQLFeatureNotSupportedException();
842: 	}
843: 
844: 	public void updateObject(int columnIndex, Object x) throws SQLException {
845: 		throw new SQLFeatureNotSupportedException();
846: 	}
847: 
848: 	public void updateNull(String columnLabel) throws SQLException {
849: 		throw new SQLFeatureNotSupportedException();
850: 	}
851: 
852: 	public void updateBoolean(String columnLabel, boolean x) throws SQLException {
853: 		throw new SQLFeatureNotSupportedException();
854: 	}
855: 
856: 	public void updateByte(String columnLabel, byte x) throws SQLException {
857: 		throw new SQLFeatureNotSupportedException();
858: 	}
859: 
860: 	public void updateShort(String columnLabel, short x) throws SQLException {
861: 		throw new SQLFeatureNotSupportedException();
862: 	}
863: 
864: 	public void updateInt(String columnLabel, int x) throws SQLException {
865: 		throw new SQLFeatureNotSupportedException();
866: 	}
867: 
868: 	public void updateLong(String columnLabel, long x) throws SQLException {
869: 		throw new SQLFeatureNotSupportedException();
870: 	}
871: 
872: 	public void updateFloat(String columnLabel, float x) throws SQLException {
873: 		throw new SQLFeatureNotSupportedException();
874: 	}
875: 
876: 	public void updateDouble(String columnLabel, double x) throws SQLException {
877: 		throw new SQLFeatureNotSupportedException();
878: 	}
879: 
880: 	public void updateBigDecimal(String columnLabel, BigDecimal x) throws SQLException {
881: 		throw new SQLFeatureNotSupportedException();
882: 	}
883: 
884: 	public void updateString(String columnLabel, String x) throws SQLException {
885: 		throw new SQLFeatureNotSupportedException();
886: 	}
887: 
888: 	public void updateBytes(String columnLabel, byte[] x) throws SQLException {
889: 		throw new SQLFeatureNotSupportedException();
890: 	}
891: 
892: 	public void updateDate(String columnLabel, Date x) throws SQLException {
893: 		throw new SQLFeatureNotSupportedException();
894: 	}
895: 
896: 	public void updateTime(String columnLabel, Time x) throws SQLException {
897: 		throw new SQLFeatureNotSupportedException();
898: 	}
899: 
900: 	public void updateTimestamp(String columnLabel, Timestamp x) throws SQLException {
901: 		throw new SQLFeatureNotSupportedException();
902: 	}
903: 
904: 	public void updateAsciiStream(String columnLabel, InputStream x, int length) throws SQLException {
905: 		throw new SQLFeatureNotSupportedException();
906: 	}
907: 
908: 	public void updateBinaryStream(String columnLabel, InputStream x, int length) throws SQLException {
909: 		throw new SQLFeatureNotSupportedException();
910: 	}
911: 
912: 	public void updateCharacterStream(String columnLabel, Reader reader, int length) throws SQLException {
913: 		throw new SQLFeatureNotSupportedException();
914: 	}
915: 
916: 	public void updateObject(String columnLabel, Object x, int scaleOrLength) throws SQLException {
917: 		throw new SQLFeatureNotSupportedException();
918: 	}
919: 
920: 	public void updateObject(String columnLabel, Object x) throws SQLException {
921: 		throw new SQLFeatureNotSupportedException();
922: 	}
923: 
924: 	public void insertRow() throws SQLException {
925: 		throw new SQLFeatureNotSupportedException();
926: 	}
927: 
928: 	public void updateRow() throws SQLException {
929: 		throw new SQLFeatureNotSupportedException();
930: 	}
931: 
932: 	public void deleteRow() throws SQLException {
933: 		throw new SQLFeatureNotSupportedException();
934: 	}
935: 
936: 	public void refreshRow() throws SQLException {
937: 		throw new SQLFeatureNotSupportedException();
938: 	}
939: 
940: 	public void cancelRowUpdates() throws SQLException {
941: 		throw new SQLFeatureNotSupportedException();
942: 	}
943: 
944: 	public void moveToInsertRow() throws SQLException {
945: 		throw new SQLFeatureNotSupportedException();
946: 	}
947: 
948: 	public void moveToCurrentRow() throws SQLException {
949: 		throw new SQLFeatureNotSupportedException();
950: 	}
951: 
952: 	public Object getObject(int columnIndex, Map<String, Class<?>> map) throws SQLException {
953: 		throw new SQLFeatureNotSupportedException();
954: 	}
955: 
956: 	public Ref getRef(int columnIndex) throws SQLException {
957: 		throw new SQLFeatureNotSupportedException();
958: 	}
959: 
960: 	public Clob getClob(int columnIndex) throws SQLException {
961: 		throw new SQLFeatureNotSupportedException();
962: 	}
963: 
964: 	public Array getArray(int columnIndex) throws SQLException {
965: 		throw new SQLFeatureNotSupportedException();
966: 	}
967: 
968: 	public Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException {
969: 		throw new SQLFeatureNotSupportedException();
970: 	}
971: 
972: 	public Ref getRef(String columnLabel) throws SQLException {
973: 		throw new SQLFeatureNotSupportedException();
974: 	}
975: 
976: 	public Clob getClob(String columnLabel) throws SQLException {
977: 		throw new SQLFeatureNotSupportedException();
978: 	}
979: 
980: 	public Array getArray(String columnLabel) throws SQLException {
981: 		throw new SQLFeatureNotSupportedException();
982: 	}
983: 
984: 	public Date getDate(int columnIndex, Calendar cal) throws SQLException {
985: 		throw new SQLFeatureNotSupportedException();
986: 	}
987: 
988: 	public Date getDate(String columnLabel, Calendar cal) throws SQLException {
989: 		throw new SQLFeatureNotSupportedException();
990: 	}
991: 
992: 	public Time getTime(int columnIndex, Calendar cal) throws SQLException {
993: 		throw new SQLFeatureNotSupportedException();
994: 	}
995: 
996: 	public Time getTime(String columnLabel, Calendar cal) throws SQLException {
997: 		throw new SQLFeatureNotSupportedException();
998: 	}
999: 
1000: 	public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException {
1001: 		throw new SQLFeatureNotSupportedException();
1002: 	}
1003: 
1004: 	public Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException {
1005: 		throw new SQLFeatureNotSupportedException();
1006: 	}
1007: 
1008: 	public URL getURL(int columnIndex) throws SQLException {
1009: 		throw new SQLFeatureNotSupportedException();
1010: 	}
1011: 
1012: 	public URL getURL(String columnLabel) throws SQLException {
1013: 		throw new SQLFeatureNotSupportedException();
1014: 	}
1015: 
1016: 	public void updateRef(int columnIndex, Ref x) throws SQLException {
1017: 		throw new SQLFeatureNotSupportedException();
1018: 	}
1019: 
1020: 	public void updateRef(String columnLabel, Ref x) throws SQLException {
1021: 		throw new SQLFeatureNotSupportedException();
1022: 	}
1023: 
1024: 	public void updateBlob(int columnIndex, Blob x) throws SQLException {
1025: 		throw new SQLFeatureNotSupportedException();
1026: 	}
1027: 
1028: 	public void updateBlob(String columnLabel, Blob x) throws SQLException {
1029: 		throw new SQLFeatureNotSupportedException();
1030: 	}
1031: 
1032: 	public void updateClob(int columnIndex, Clob x) throws SQLException {
1033: 		throw new SQLFeatureNotSupportedException();
1034: 	}
1035: 
1036: 	public void updateClob(String columnLabel, Clob x) throws SQLException {
1037: 		throw new SQLFeatureNotSupportedException();
1038: 	}
1039: 
1040: 	public void updateArray(int columnIndex, Array x) throws SQLException {
1041: 		throw new SQLFeatureNotSupportedException();
1042: 	}
1043: 
1044: 	public void updateArray(String columnLabel, Array x) throws SQLException {
1045: 		throw new SQLFeatureNotSupportedException();
1046: 	}
1047: 
1048: 	public RowId getRowId(int columnIndex) throws SQLException {
1049: 		throw new SQLFeatureNotSupportedException();
1050: 	}
1051: 
1052: 	public RowId getRowId(String columnLabel) throws SQLException {
1053: 		throw new SQLFeatureNotSupportedException();
1054: 	}
1055: 
1056: 	public void updateRowId(int columnIndex, RowId x) throws SQLException {
1057: 		throw new SQLFeatureNotSupportedException();
1058: 	}
1059: 
1060: 	public void updateRowId(String columnLabel, RowId x) throws SQLException {
1061: 		throw new SQLFeatureNotSupportedException();
1062: 	}
1063: 
1064: 	public int getHoldability() throws SQLException {
1065: 		throw new SQLFeatureNotSupportedException();
1066: 	}
1067: 
1068: 	public void updateNString(int columnIndex, String nString) throws SQLException {
1069: 		throw new SQLFeatureNotSupportedException();
1070: 	}
1071: 
1072: 	public void updateNString(String columnLabel, String nString) throws SQLException {
1073: 		throw new SQLFeatureNotSupportedException();
1074: 	}
1075: 
1076: 	public void updateNClob(int columnIndex, NClob nClob) throws SQLException {
1077: 		throw new SQLFeatureNotSupportedException();
1078: 	}
1079: 
1080: 	public void updateNClob(String columnLabel, NClob nClob) throws SQLException {
1081: 		throw new SQLFeatureNotSupportedException();
1082: 	}
1083: 
1084: 	public NClob getNClob(int columnIndex) throws SQLException {
1085: 		throw new SQLFeatureNotSupportedException();
1086: 	}
1087: 
1088: 	public NClob getNClob(String columnLabel) throws SQLException {
1089: 		throw new SQLFeatureNotSupportedException();
1090: 	}
1091: 
1092: 	public SQLXML getSQLXML(int columnIndex) throws SQLException {
1093: 		throw new SQLFeatureNotSupportedException();
1094: 	}
1095: 
1096: 	public SQLXML getSQLXML(String columnLabel) throws SQLException {
1097: 		throw new SQLFeatureNotSupportedException();
1098: 	}
1099: 
1100: 	public void updateSQLXML(int columnIndex, SQLXML xmlObject) throws SQLException {
1101: 		throw new SQLFeatureNotSupportedException();
1102: 	}
1103: 
1104: 	public void updateSQLXML(String columnLabel, SQLXML xmlObject) throws SQLException {
1105: 		throw new SQLFeatureNotSupportedException();
1106: 	}
1107: 
1108: 	public String getNString(int columnIndex) throws SQLException {
1109: 		throw new SQLFeatureNotSupportedException();
1110: 	}
1111: 
1112: 	public String getNString(String columnLabel) throws SQLException {
1113: 		throw new SQLFeatureNotSupportedException();
1114: 	}
1115: 
1116: 	public Reader getNCharacterStream(int columnIndex) throws SQLException {
1117: 		throw new SQLFeatureNotSupportedException();
1118: 	}
1119: 
1120: 	public Reader getNCharacterStream(String columnLabel) throws SQLException {
1121: 		throw new SQLFeatureNotSupportedException();
1122: 	}
1123: 
1124: 	public void updateNCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1125: 		throw new SQLFeatureNotSupportedException();
1126: 	}
1127: 
1128: 	public void updateNCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1129: 		throw new SQLFeatureNotSupportedException();
1130: 	}
1131: 
1132: 	public void updateAsciiStream(int columnIndex, InputStream x, long length) throws SQLException {
1133: 		throw new SQLFeatureNotSupportedException();
1134: 	}
1135: 
1136: 	public void updateBinaryStream(int columnIndex, InputStream x, long length) throws SQLException {
1137: 		throw new SQLFeatureNotSupportedException();
1138: 	}
1139: 
1140: 	public void updateCharacterStream(int columnIndex, Reader x, long length) throws SQLException {
1141: 		throw new SQLFeatureNotSupportedException();
1142: 	}
1143: 
1144: 	public void updateAsciiStream(String columnLabel, InputStream x, long length) throws SQLException {
1145: 		throw new SQLFeatureNotSupportedException();
1146: 	}
1147: 
1148: 	public void updateBinaryStream(String columnLabel, InputStream x, long length) throws SQLException {
1149: 		throw new SQLFeatureNotSupportedException();
1150: 	}
1151: 
1152: 	public void updateCharacterStream(String columnLabel, Reader reader, long length) throws SQLException {
1153: 		throw new SQLFeatureNotSupportedException();
1154: 	}
1155: 
1156: 	public void updateBlob(int columnIndex, InputStream inputStream, long length) throws SQLException {
1157: 		throw new SQLFeatureNotSupportedException();
1158: 	}
1159: 
1160: 	public void updateBlob(String columnLabel, InputStream inputStream, long length) throws SQLException {
1161: 		throw new SQLFeatureNotSupportedException();
1162: 	}
1163: 
1164: 	public void updateClob(int columnIndex, Reader reader, long length) throws SQLException {
1165: 		throw new SQLFeatureNotSupportedException();
1166: 	}
1167: 
1168: 	public void updateClob(String columnLabel, Reader reader, long length) throws SQLException {
1169: 		throw new SQLFeatureNotSupportedException();
1170: 	}
1171: 
1172: 	public void updateNClob(int columnIndex, Reader reader, long length) throws SQLException {
1173: 		throw new SQLFeatureNotSupportedException();
1174: 	}
1175: 
1176: 	public void updateNClob(String columnLabel, Reader reader, long length) throws SQLException {
1177: 		throw new SQLFeatureNotSupportedException();
1178: 	}
1179: 
1180: 	public void updateNCharacterStream(int columnIndex, Reader x) throws SQLException {
1181: 		throw new SQLFeatureNotSupportedException();
1182: 	}
1183: 
1184: 	public void updateNCharacterStream(String columnLabel, Reader reader) throws SQLException {
1185: 		throw new SQLFeatureNotSupportedException();
1186: 	}
1187: 
1188: 	public void updateAsciiStream(int columnIndex, InputStream x) throws SQLException {
1189: 		throw new SQLFeatureNotSupportedException();
1190: 	}
1191: 
1192: 	public void updateBinaryStream(int columnIndex, InputStream x) throws SQLException {
1193: 		throw new SQLFeatureNotSupportedException();
1194: 	}
1195: 
1196: 	public void updateCharacterStream(int columnIndex, Reader x) throws SQLException {
1197: 		throw new SQLFeatureNotSupportedException();
1198: 	}
1199: 
1200: 	public void updateAsciiStream(String columnLabel, InputStream x) throws SQLException {
1201: 		throw new SQLFeatureNotSupportedException();
1202: 	}
1203: 
1204: 	public void updateBinaryStream(String columnLabel, InputStream x) throws SQLException {
1205: 		throw new SQLFeatureNotSupportedException();
1206: 	}
1207: 
1208: 	public void updateCharacterStream(String columnLabel, Reader reader) throws SQLException {
1209: 		throw new SQLFeatureNotSupportedException();
1210: 	}
1211: 
1212: 	public void updateBlob(int columnIndex, InputStream inputStream) throws SQLException {
1213: 		throw new SQLFeatureNotSupportedException();
1214: 	}
1215: 
1216: 	public void updateBlob(String columnLabel, InputStream inputStream) throws SQLException {
1217: 		throw new SQLFeatureNotSupportedException();
1218: 	}
1219: 
1220: 	public void updateClob(int columnIndex, Reader reader) throws SQLException {
1221: 		throw new SQLFeatureNotSupportedException();
1222: 	}
1223: 
1224: 	public void updateClob(String columnLabel, Reader reader) throws SQLException {
1225: 		throw new SQLFeatureNotSupportedException();
1226: 	}
1227: 
1228: 	public void updateNClob(int columnIndex, Reader reader) throws SQLException {
1229: 		throw new SQLFeatureNotSupportedException();
1230: 	}
1231: 
1232: 	public void updateNClob(String columnLabel, Reader reader) throws SQLException {
1233: 		throw new SQLFeatureNotSupportedException();
1234: 	}
1235: 
1236: 	public <T> T getObject(int columnIndex, Class<T> type) throws SQLException {
1237: 		if (type == null) {
1238: 			throw new SQLException("type is null");
1239: 		}
1240: 
1241: 		DuckDBColumnType sqlType = meta.column_types[columnIndex - 1];
1242: 		// Missing: unsigned types like UINTEGER, more liberal casting, e.g. SMALLINT -> Integer
1243: 		// Compare results with expected results from Javadoc
1244: 		// https://docs.oracle.com/en/java/javase/17/docs/api/java.sql/java/sql/ResultSet.html
1245: 		if (type == BigDecimal.class) {
1246: 			if (sqlType == DuckDBColumnType.DECIMAL) {
1247: 				return type.cast(getBigDecimal(columnIndex));
1248: 			} else {
1249: 				throw new SQLException("Can't convert value to BigDecimal " + type.toString());
1250: 			}
1251: 		} else if (type == String.class) {
1252: 			if (sqlType == DuckDBColumnType.VARCHAR) {
1253: 				return type.cast(getString(columnIndex));
1254: 			} else {
1255: 				throw new SQLException("Can't convert value to String " + type.toString());
1256: 			}
1257: 		} else if (type == Boolean.class) {
1258: 			if (sqlType == DuckDBColumnType.BOOLEAN) {
1259: 				return type.cast(getBoolean(columnIndex));
1260: 			} else {
1261: 				throw new SQLException("Can't convert value to boolean " + type.toString());
1262: 			}
1263: 		} else if (type == Short.class) {
1264: 			if (sqlType == DuckDBColumnType.SMALLINT) {
1265: 				return type.cast(getShort(columnIndex));
1266: 			} else {
1267: 				throw new SQLException("Can't convert value to short " + type.toString());
1268: 			}
1269: 		} else if (type == Integer.class) {
1270: 			if (sqlType == DuckDBColumnType.INTEGER) {
1271: 				return type.cast(getInt(columnIndex));
1272: 			} else if (sqlType == DuckDBColumnType.SMALLINT){
1273: 				return type.cast(getShort(columnIndex));
1274: 			} else if (sqlType == DuckDBColumnType.TINYINT){
1275: 				return type.cast(getByte(columnIndex));
1276: 			} else if (sqlType == DuckDBColumnType.USMALLINT){
1277: 				throw new SQLException("Can't convert value to integer " + type.toString());
1278: 			// return type.cast(getShort(columnIndex));
1279: 			} else if (sqlType == DuckDBColumnType.UTINYINT){
1280: 				throw new SQLException("Can't convert value to integer " + type.toString());
1281: 			// return type.cast(getShort(columnIndex));
1282: 			} else {
1283: 				throw new SQLException("Can't convert value to integer " + type.toString());
1284: 			}
1285: 		} else if (type == Long.class) {
1286: 			if (sqlType == DuckDBColumnType.BIGINT) {
1287: 				return type.cast(getLong(columnIndex));
1288: 			} else if (sqlType == DuckDBColumnType.UINTEGER) {
1289: 				throw new SQLException("Can't convert value to long " + type.toString());
1290: 			// return type.cast(getLong(columnIndex));
1291: 			} else {
1292: 				throw new SQLException("Can't convert value to long " + type.toString());
1293: 			}
1294: 		} else if (type == Float.class) {
1295: 			if (sqlType == DuckDBColumnType.FLOAT) {
1296: 				return type.cast(getFloat(columnIndex));
1297: 			} else {
1298: 				throw new SQLException("Can't convert value to float " + type.toString());
1299: 			}
1300: 		} else if (type == Double.class) {
1301: 			if (sqlType == DuckDBColumnType.DOUBLE) {
1302: 				return type.cast(getDouble(columnIndex));
1303: 			} else {
1304: 				throw new SQLException("Can't convert value to float " + type.toString());
1305: 			}
1306: 		} else if (type == Date.class) {
1307: 			if (sqlType == DuckDBColumnType.DATE) {
1308: 				return type.cast(getDate(columnIndex));
1309: 			} else {
1310: 				throw new SQLException("Can't convert value to Date " + type.toString());
1311: 			}
1312: 		} else if (type == Time.class) {
1313: 			if (sqlType == DuckDBColumnType.TIME) {
1314: 				return type.cast(getTime(columnIndex));
1315: 			} else {
1316: 				throw new SQLException("Can't convert value to Time " + type.toString());
1317: 			}
1318: 		} else if (type == Timestamp.class) {
1319: 			if (sqlType == DuckDBColumnType.TIMESTAMP) {
1320: 				return type.cast(getTimestamp(columnIndex));
1321: 			} else {
1322: 				throw new SQLException("Can't convert value to Timestamp " + type.toString());
1323: 			}
1324: 		} else if (type == LocalDateTime.class) {
1325: 			if (sqlType == DuckDBColumnType.TIMESTAMP) {
1326: 				return type.cast(getLocalDateTime(columnIndex));
1327: 			} else {
1328: 				throw new SQLException("Can't convert value to LocalDateTime " + type.toString());
1329: 			}
1330: 		} else if (type == BigInteger.class) {
1331: 			if (sqlType == DuckDBColumnType.HUGEINT) {
1332: 				throw new SQLException("Can't convert value to BigInteger " + type.toString());
1333: 			// return type.cast(getLocalDateTime(columnIndex));
1334: 			} else if (sqlType == DuckDBColumnType.UBIGINT) {
1335: 				throw new SQLException("Can't convert value to BigInteger " + type.toString());
1336: 			// return type.cast(getLocalDateTime(columnIndex));
1337: 			} else {
1338: 				throw new SQLException("Can't convert value to BigInteger " + type.toString());
1339: 			}
1340: 		} else if (type == OffsetDateTime.class) {
1341: 			if (sqlType == DuckDBColumnType.TIMESTAMP_WITH_TIMEZONE) {
1342: 				throw new SQLException("Can't convert value to OffsetDateTime " + type.toString());
1343: 			// return type.cast(getLocalDateTime(columnIndex));
1344: 			} else {
1345: 				throw new SQLException("Can't convert value to OffsetDateTime " + type.toString());
1346: 			}
1347: 		} else if (type == Blob.class) {
1348: 			if (sqlType == DuckDBColumnType.BLOB) {
1349: 				throw new SQLException("Can't convert value to Blob " + type.toString());
1350: 			// return type.cast(getLocalDateTime(columnIndex));
1351: 			} else {
1352: 				throw new SQLException("Can't convert value to Blob " + type.toString());
1353: 			}
1354: 		} else {
1355: 			throw new SQLException("Can't convert value to " + type +  " " +  type.toString());
1356: 		}
1357: 	}
1358: 
1359: 	public <T> T getObject(String columnLabel, Class<T> type) throws SQLException {
1360: 		throw new SQLFeatureNotSupportedException();
1361: 	}
1362: 
1363: 	public <T> T unwrap(Class<T> iface) throws SQLException {
1364: 		throw new SQLFeatureNotSupportedException();
1365: 	}
1366: 
1367: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
1368: 		throw new SQLFeatureNotSupportedException();
1369: 	}
1370: 
1371: }
[end of tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java]
[start of tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java]
1: package org.duckdb;
2: 
3: import java.sql.Date;
4: import java.sql.ResultSetMetaData;
5: import java.sql.SQLException;
6: import java.sql.SQLFeatureNotSupportedException;
7: import java.sql.Time;
8: import java.sql.Timestamp;
9: import java.sql.Types;
10: import java.util.ArrayList;
11: 
12: import org.duckdb.DuckDBResultSet.DuckDBBlobResult;
13: 
14: public class DuckDBResultSetMetaData implements ResultSetMetaData {
15: 
16: 	public DuckDBResultSetMetaData(int param_count, int column_count, String[] column_names,
17: 			String[] column_types_string, String[] column_types_details) {
18: 		this.param_count = param_count;
19: 		this.column_count = column_count;
20: 		this.column_names = column_names;
21: 		this.column_types_string = column_types_string;
22: 		this.column_types_details = column_types_details;
23: 		ArrayList<DuckDBColumnType> column_types_al = new ArrayList<DuckDBColumnType>(column_count);
24: 		ArrayList<DuckDBColumnTypeMetaData> column_types_meta = new ArrayList<DuckDBColumnTypeMetaData>(column_count);
25: 
26: 		for (String column_type_string : this.column_types_string) {
27: 			column_types_al.add(TypeNameToType(column_type_string));
28: 		}
29: 		this.column_types = new DuckDBColumnType[column_count];
30: 		this.column_types = column_types_al.toArray(this.column_types);
31: 
32: 		for (String column_type_detail : this.column_types_details) {
33: 			if (!column_type_detail.equals("")) {
34: 				String[] split_details = column_type_detail.split(";");
35: 				column_types_meta.add(new DuckDBColumnTypeMetaData(Short.parseShort(split_details[0].replace("DECIMAL", ""))
36: 							, Short.parseShort(split_details[1]), Short.parseShort(split_details[2])));
37: 			}
38: 			else { column_types_meta.add(null); }
39: 		}
40: 		this.column_types_meta = column_types_meta.toArray(new DuckDBColumnTypeMetaData[column_count]);
41: 	}
42: 
43: 	public static DuckDBColumnType TypeNameToType(String type_name) {
44: 		if (type_name.startsWith("DECIMAL")) {
45: 			return DuckDBColumnType.DECIMAL;
46: 		} else {
47: 			return DuckDBColumnType.valueOf(type_name);
48: 		}
49: 	}
50: 
51: 	protected int param_count;
52: 	protected int column_count;
53: 	protected String[] column_names;
54: 	protected String[] column_types_string;
55: 	protected String[] column_types_details;
56: 	protected DuckDBColumnType[] column_types;
57: 	protected DuckDBColumnTypeMetaData[] column_types_meta;
58: 
59: 	public int getColumnCount() throws SQLException {
60: 		return column_count;
61: 	}
62: 
63: 	public String getColumnLabel(int column) throws SQLException {
64: 		return getColumnName(column);
65: 	}
66: 
67: 	public String getColumnName(int column) throws SQLException {
68: 		if (column > column_count) {
69: 			throw new SQLException("Column index out of bounds");
70: 		}
71: 		return column_names[column - 1];
72: 	}
73: 
74: 	public static int type_to_int(DuckDBColumnType type) throws SQLException {
75: 		switch (type) {
76: 		case BOOLEAN:
77: 			return Types.BOOLEAN;
78: 		case TINYINT:
79: 			return Types.TINYINT;
80: 		case SMALLINT:
81: 			return Types.SMALLINT;
82: 		case INTEGER:
83: 			return Types.INTEGER;
84: 		case BIGINT:
85: 			return Types.BIGINT;
86: 		case HUGEINT:
87: 			return Types.JAVA_OBJECT;
88: 		case UTINYINT:
89: 			return Types.JAVA_OBJECT;
90: 		case USMALLINT:
91: 			return Types.JAVA_OBJECT;
92: 		case UINTEGER:
93: 			return Types.JAVA_OBJECT;
94: 		case UBIGINT:
95: 			return Types.JAVA_OBJECT;
96: 		case FLOAT:
97: 			return Types.FLOAT;
98: 		case DOUBLE:
99: 			return Types.DOUBLE;
100: 		case DECIMAL:
101: 			return Types.DECIMAL;
102: 		case VARCHAR:
103: 			return Types.VARCHAR;
104: 		case TIME:
105: 			return Types.TIME;
106: 		case DATE:
107: 			return Types.DATE;
108: 		case TIMESTAMP:
109: 			return Types.TIMESTAMP;
110: 		case INTERVAL:
111: 			return Types.JAVA_OBJECT;
112: 		case BLOB:
113: 			return Types.BLOB;
114: 
115: 		default:
116: 			throw new SQLException("Unsupported type " + type.toString());
117: 		}
118: 	}
119: 
120: 	public int getColumnType(int column) throws SQLException {
121: 		if (column > column_count) {
122: 			throw new SQLException("Column index out of bounds");
123: 		}
124: 		return type_to_int(column_types[column - 1]);
125: 	}
126: 
127: 	public String getColumnClassName(int column) throws SQLException {
128: 		switch (getColumnType(column)) {
129: 		case Types.BOOLEAN:
130: 			return Boolean.class.toString();
131: 		case Types.TINYINT:
132: 			return Byte.class.toString();
133: 		case Types.SMALLINT:
134: 			return Short.class.toString();
135: 		case Types.INTEGER:
136: 			return Integer.class.toString();
137: 		case Types.BIGINT:
138: 			return Long.class.toString();
139: 		case Types.FLOAT:
140: 			return Float.class.toString();
141: 		case Types.DOUBLE:
142: 			return Double.class.toString();
143: 		case Types.VARCHAR:
144: 			return String.class.toString();
145: 		case Types.TIME:
146: 			return Time.class.toString();
147: 		case Types.DATE:
148: 			return Date.class.toString();
149: 		case Types.TIMESTAMP:
150: 			return Timestamp.class.toString();
151: 		case Types.BLOB:
152: 			return DuckDBBlobResult.class.toString();
153: 		default:
154: 			throw new SQLException("Unknown type " + getColumnTypeName(column));
155: 		}
156: 	}
157: 
158: 	public String getColumnTypeName(int column) throws SQLException {
159: 		if (column > column_count) {
160: 			throw new SQLException("Column index out of bounds");
161: 		}
162: 		return column_types_string[column - 1];
163: 	}
164: 
165: 	public boolean isReadOnly(int column) throws SQLException {
166: 		return true;
167: 	}
168: 
169: 	public boolean isWritable(int column) throws SQLException {
170: 		return false;
171: 	}
172: 
173: 	public boolean isDefinitelyWritable(int column) throws SQLException {
174: 		return false;
175: 	}
176: 
177: 	public boolean isCaseSensitive(int column) throws SQLException {
178: 		return true;
179: 	}
180: 
181: 	public int isNullable(int column) throws SQLException {
182: 		return columnNullable;
183: 	}
184: 
185: 	public String getSchemaName(int column) throws SQLException {
186: 		return "";
187: 	}
188: 
189: 	public boolean isAutoIncrement(int column) throws SQLException {
190: 		return false;
191: 	}
192: 
193: 	public boolean isSearchable(int column) throws SQLException {
194: 		return true;
195: 	}
196: 
197: 	public boolean isCurrency(int column) throws SQLException {
198: 		return false;
199: 	}
200: 
201: 	public boolean isSigned(int column) throws SQLException {
202: 		return false;
203: 	}
204: 
205: 	public int getColumnDisplaySize(int column) throws SQLException {
206: 		throw new SQLFeatureNotSupportedException();
207: 	}
208: 
209: 	public int getPrecision(int column) throws SQLException {
210: 		return 0;
211: 	}
212: 
213: 	public int getScale(int column) throws SQLException {
214: 		return 0;
215: 	}
216: 
217: 	public String getTableName(int column) throws SQLException {
218: 		return "";
219: 	}
220: 
221: 	public String getCatalogName(int column) throws SQLException {
222: 		return "";
223: 	}
224: 
225: 	public <T> T unwrap(Class<T> iface) throws SQLException {
226: 		throw new SQLFeatureNotSupportedException();
227: 	}
228: 
229: 	public boolean isWrapperFor(Class<?> iface) throws SQLException {
230: 		throw new SQLFeatureNotSupportedException();
231: 	}
232: }
[end of tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java]
[start of tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java]
1: package org.duckdb;
2: 
3: import java.sql.Timestamp;
4: import java.time.ZoneOffset;
5: import java.time.LocalDateTime;
6: import java.time.temporal.ChronoUnit;
7: 
8: public class DuckDBTimestamp {
9: 	static
10: 	{
11: 		// LocalDateTime reference of epoch
12: 		RefLocalDateTime =
13: 			LocalDateTime.ofEpochSecond(0, 0, ZoneOffset.UTC);
14: 	}
15: 
16: 	public DuckDBTimestamp(long timeMicros) {
17: 		this.timeMicros = timeMicros;
18: 	}
19: 
20: 	public DuckDBTimestamp(LocalDateTime localDateTime) {
21: 		this.timeMicros = DuckDBTimestamp.RefLocalDateTime.until(
22: 			localDateTime, ChronoUnit.MICROS);
23: 	}
24: 
25: 	public DuckDBTimestamp(Timestamp sqlTimestamp) {
26: 		this.timeMicros = DuckDBTimestamp.RefLocalDateTime.until(
27: 			sqlTimestamp.toLocalDateTime(), ChronoUnit.MICROS);
28: 	}
29: 
30: 	final static LocalDateTime RefLocalDateTime;
31: 	protected long timeMicros;
32: 
33: 	public static Timestamp toSqlTimestamp(long timeMicros) {
34: 		return Timestamp.valueOf(
35: 			LocalDateTime.ofEpochSecond(micros2seconds(timeMicros)
36: 				, nanosPartMicros(timeMicros), ZoneOffset.UTC));
37: 	}
38: 
39: 	public static LocalDateTime toLocalDateTime(long timeMicros) {
40: 		return LocalDateTime.ofEpochSecond(micros2seconds(timeMicros)
41: 				, nanosPartMicros(timeMicros), ZoneOffset.UTC);
42: 	}
43: 
44: 	public Timestamp toSqlTimestamp() {
45: 		return Timestamp.valueOf(this.toLocalDateTime());
46: 	}
47: 
48: 	public LocalDateTime toLocalDateTime() {
49: 		return LocalDateTime.ofEpochSecond(micros2seconds(timeMicros)
50: 				, nanosPartMicros(timeMicros), ZoneOffset.UTC);
51: 	}
52: 
53: 	public static long getMicroseconds(Timestamp sqlTimestamp) {
54: 		return DuckDBTimestamp.RefLocalDateTime.until(
55: 				sqlTimestamp.toLocalDateTime(), ChronoUnit.MICROS);
56: 	}
57: 
58: 	public long getMicrosEpoch() {
59: 		return this.timeMicros;
60: 	}
61: 
62: 	public String toString() {
63: 		return this.toLocalDateTime().toString();
64: 	}
65: 
66: 	private static long micros2seconds(long micros) {
67: 		return micros / 1000_000L;
68: 	}
69: 
70: 	private static int nanosPartMicros(long micros) {
71: 		return (int) ((micros % 1000_000L) * 1000);
72: 	}
73: }
[end of tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java]
[start of tools/odbc/CMakeLists.txt]
1: cmake_minimum_required(VERSION 3.12.0)
2: 
3: find_package(ODBC)
4: 
5: if(NOT ODBC_FOUND)
6:   message(FATAL_ERROR No ODBC found)
7: endif()
8: 
9: set(LINK_LIB_LIST "")
10: 
11: if(ODBC_FOUND)
12:   find_library(ODBCINST_LIB NAMES odbcinst libodbcinst)
13:   if(ODBCINST_LIB)
14:     list(APPEND LINK_LIB_LIST ${ODBCINST_LIB})
15:     add_definitions(-DODBC_LINK_ODBCINST)
16:     message(STATUS "Found ODBCINST_LIB: " ${ODBCINST_LIB})
17:   endif()
18: 
19:   if(WIN32)
20:     set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}/bin)
21:     add_subdirectory(winsetup)
22:   endif()
23: endif()
24: 
25: add_definitions(-DNO_FRAMEWORKS)
26: include_directories(${ODBC_INCLUDE_DIRS} include)
27: 
28: add_library(
29:   duckdb_odbc SHARED
30:   duckdb_odbc.cpp
31:   driver.cpp
32:   connection.cpp
33:   statement.cpp
34:   prepared.cpp
35:   result.cpp
36:   api_info.cpp
37:   statement_functions.cpp
38:   odbc_interval.cpp
39:   odbc_fetch.cpp
40:   odbc_utils.cpp
41:   empty_stubs.cpp
42:   descriptor.cpp
43:   parameter_descriptor.cpp
44:   row_descriptor.cpp
45:   cursor.cpp
46:   duckdb_odbc.def)
47: 
48: set_target_properties(duckdb_odbc PROPERTIES DEFINE_SYMBOL "DUCKDB_ODBC_API")
49: 
50: target_link_libraries(duckdb_odbc ${LINK_LIB_LIST} duckdb_static)
[end of tools/odbc/CMakeLists.txt]
[start of tools/odbc/connection.cpp]
1: #include "driver.hpp"
2: #include "duckdb_odbc.hpp"
3: #include "api_info.hpp"
4: #include "odbc_utils.hpp"
5: 
6: #include "duckdb/common/helper.hpp"
7: 
8: using duckdb::OdbcUtils;
9: using std::ptrdiff_t;
10: 
11: SQLRETURN SQL_API SQLGetConnectAttr(SQLHDBC connection_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,
12:                                     SQLINTEGER buffer_length, SQLINTEGER *string_length_ptr) {
13: 
14: 	return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) {
15: 		if (!value_ptr) {
16: 			return SQL_ERROR;
17: 		}
18: 		switch (attribute) {
19: 		case SQL_ATTR_AUTOCOMMIT: {
20: 			duckdb::Store<SQLUINTEGER>(dbc->autocommit, (duckdb::data_ptr_t)value_ptr);
21: 			return SQL_SUCCESS;
22: 		}
23: 		case SQL_ATTR_ACCESS_MODE: {
24: 			duckdb::Store<SQLUINTEGER>(dbc->sql_attr_access_mode, (duckdb::data_ptr_t)value_ptr);
25: 			return SQL_SUCCESS;
26: 		}
27: 		case SQL_ATTR_CURRENT_CATALOG: {
28: 			if (value_ptr == nullptr) {
29: 				*string_length_ptr = dbc->sql_attr_current_catalog.size();
30: 				dbc->error_messages.emplace_back("SQLGetConnectAttr returned with info.");
31: 				return SQL_SUCCESS_WITH_INFO;
32: 			}
33: 
34: 			auto ret = SQL_SUCCESS;
35: 			auto out_len = duckdb::MinValue(dbc->sql_attr_current_catalog.size(), (size_t)buffer_length);
36: 			memcpy((char *)value_ptr, dbc->sql_attr_current_catalog.c_str(), out_len);
37: 
38: 			if (out_len == (size_t)buffer_length) {
39: 				ret = SQL_SUCCESS_WITH_INFO;
40: 				out_len = buffer_length - 1;
41: 				dbc->error_messages.emplace_back("SQLGetConnectAttr returned with info.");
42: 			}
43: 
44: 			((char *)value_ptr)[out_len] = '\0';
45: 
46: 			if (string_length_ptr) {
47: 				*string_length_ptr = out_len;
48: 			}
49: 
50: 			return ret;
51: 		}
52: #ifdef SQL_ATTR_ASYNC_DBC_EVENT
53: 		case SQL_ATTR_ASYNC_DBC_EVENT:
54: #endif
55: 		case SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE:
56: #ifdef SQL_ATTR_ASYNC_DBC_PCALLBACK
57: 		case SQL_ATTR_ASYNC_DBC_PCALLBACK:
58: #endif
59: #ifdef SQL_ATTR_ASYNC_DBC_PCONTEXT
60: 		case SQL_ATTR_ASYNC_DBC_PCONTEXT:
61: #endif
62: 		case SQL_ATTR_ASYNC_ENABLE:
63: 		case SQL_ATTR_AUTO_IPD:
64: 		case SQL_ATTR_CONNECTION_DEAD:
65: 		case SQL_ATTR_CONNECTION_TIMEOUT:
66: #ifdef SQL_ATTR_DBC_INFO_TOKEN
67: 		case SQL_ATTR_DBC_INFO_TOKEN:
68: #endif
69: 		case SQL_ATTR_ENLIST_IN_DTC:
70: 		case SQL_ATTR_LOGIN_TIMEOUT:
71: 		case SQL_ATTR_METADATA_ID:
72: 		case SQL_ATTR_ODBC_CURSORS:
73: 		case SQL_ATTR_PACKET_SIZE:
74: 		case SQL_ATTR_QUIET_MODE:
75: 		case SQL_ATTR_TRACE:
76: 		case SQL_ATTR_TRACEFILE:
77: 		case SQL_ATTR_TRANSLATE_LIB:
78: 		case SQL_ATTR_TRANSLATE_OPTION:
79: 		case SQL_ATTR_TXN_ISOLATION:
80: 			return SQL_NO_DATA;
81: 		default:
82: 			dbc->error_messages.emplace_back("Attribute not supported.");
83: 			return SQL_ERROR;
84: 		}
85: 	});
86: }
87: 
88: SQLRETURN SQL_API SQLSetConnectAttr(SQLHDBC connection_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,
89:                                     SQLINTEGER string_length) {
90: 	return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) {
91: 		switch (attribute) {
92: 		case SQL_ATTR_AUTOCOMMIT:
93: 			switch ((ptrdiff_t)value_ptr) {
94: 			case (ptrdiff_t)SQL_AUTOCOMMIT_ON:
95: 				dbc->autocommit = true;
96: 				dbc->conn->SetAutoCommit(true);
97: 				return SQL_SUCCESS;
98: 			case (ptrdiff_t)SQL_AUTOCOMMIT_OFF:
99: 				dbc->autocommit = false;
100: 				dbc->conn->SetAutoCommit(false);
101: 				return SQL_SUCCESS;
102: 			case SQL_ATTR_METADATA_ID:
103: 				dbc->sql_attr_metadata_id = *((SQLUINTEGER *)value_ptr);
104: 				return SQL_SUCCESS;
105: 			default:
106: 				return SQL_ERROR;
107: 			}
108: 			break;
109: 		case SQL_ATTR_ACCESS_MODE:
110: 			dbc->sql_attr_access_mode = *((SQLUINTEGER *)value_ptr);
111: 			return SQL_SUCCESS;
112: #ifdef SQL_ATTR_ASYNC_DBC_EVENT
113: 		case SQL_ATTR_ASYNC_DBC_EVENT:
114: #endif
115: 		case SQL_ATTR_ASYNC_DBC_FUNCTIONS_ENABLE:
116: #ifdef SQL_ATTR_ASYNC_DBC_PCALLBACK
117: 		case SQL_ATTR_ASYNC_DBC_PCALLBACK:
118: #endif
119: #ifdef SQL_ATTR_ASYNC_DBC_PCONTEXT
120: 		case SQL_ATTR_ASYNC_DBC_PCONTEXT:
121: #endif
122: 		case SQL_ATTR_ASYNC_ENABLE:
123: 			dbc->error_messages.emplace_back("DuckDB does not support asynchronous events.");
124: 			return SQL_ERROR;
125: 		case SQL_ATTR_AUTO_IPD:
126: 		case SQL_ATTR_CONNECTION_DEAD:
127: 			dbc->error_messages.emplace_back("Read-only attribute.");
128: 			return SQL_ERROR;
129: 		case SQL_ATTR_CONNECTION_TIMEOUT:
130: 			dbc->error_messages.emplace_back("DuckDB does not support connection timeout.");
131: 			return SQL_ERROR;
132: 		case SQL_ATTR_CURRENT_CATALOG: {
133: 			if (dbc->conn) {
134: 				dbc->error_messages.emplace_back("Connection already stablished, the database name could not be set");
135: 				return SQL_ERROR;
136: 			}
137: 			if (string_length == SQL_NTS) {
138: 				dbc->sql_attr_current_catalog = std::string((char *)value_ptr);
139: 			} else {
140: 				dbc->sql_attr_current_catalog = std::string((char *)value_ptr, string_length);
141: 			}
142: 			return SQL_SUCCESS;
143: 		}
144: #ifdef SQL_ATTR_DBC_INFO_TOKEN
145: 		case SQL_ATTR_DBC_INFO_TOKEN:
146: #endif
147: 		case SQL_ATTR_ENLIST_IN_DTC:
148: 		case SQL_ATTR_LOGIN_TIMEOUT:
149: 		case SQL_ATTR_METADATA_ID:
150: 		case SQL_ATTR_ODBC_CURSORS:
151: 		case SQL_ATTR_PACKET_SIZE:
152: 		case SQL_ATTR_QUIET_MODE:
153: 		case SQL_ATTR_TRACE:
154: 		case SQL_ATTR_TRACEFILE:
155: 		case SQL_ATTR_TRANSLATE_LIB:
156: 		case SQL_ATTR_TRANSLATE_OPTION:
157: 		case SQL_ATTR_TXN_ISOLATION:
158: 			dbc->error_messages.emplace_back("Optional feature not supported.");
159: 			return SQL_ERROR;
160: 		default:
161: 			return SQL_ERROR;
162: 		}
163: 	});
164: }
165: SQLRETURN SQL_API SQLGetInfo(SQLHDBC connection_handle, SQLUSMALLINT info_type, SQLPOINTER info_value_ptr,
166:                              SQLSMALLINT buffer_length, SQLSMALLINT *string_length_ptr) {
167: 
168: 	// https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqlgetinfo-function?view=sql-server-ver15
169: 
170: 	// verify numeric info value type and null value pointer
171: 	if (duckdb::ApiInfo::IsNumericInfoType(info_type) && info_value_ptr == nullptr) {
172: 		return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) -> SQLRETURN {
173: 			dbc->error_messages.emplace_back("Invalid null value pointer for numeric info type");
174: 			return SQL_ERROR;
175: 		});
176: 	}
177: 
178: 	// Default strings: YES or NO
179: 	std::string yes_str("Y");
180: 	std::string no_str("N");
181: 
182: 	switch (info_type) {
183: 	case SQL_ACCESSIBLE_PROCEDURES: {
184: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
185: 		return SQL_SUCCESS;
186: 	}
187: 	case SQL_ACCESSIBLE_TABLES: {
188: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
189: 		return SQL_SUCCESS;
190: 	}
191: 	case SQL_ACTIVE_ENVIRONMENTS: {
192: 		duckdb::Store<SQLUSMALLINT>(0, (duckdb::data_ptr_t)info_value_ptr);
193: 		return SQL_SUCCESS;
194: 	}
195: 	case SQL_AGGREGATE_FUNCTIONS: {
196: 		SQLUINTEGER mask =
197: 		    SQL_AF_ALL | SQL_AF_AVG | SQL_AF_COUNT | SQL_AF_DISTINCT | SQL_AF_MAX | SQL_AF_MIN | SQL_AF_SUM;
198: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
199: 		return SQL_SUCCESS;
200: 	}
201: 	case SQL_ALTER_DOMAIN: {
202: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
203: 		return SQL_SUCCESS;
204: 	}
205: 	case SQL_ALTER_TABLE: {
206: 		// options suppoerd by the DuckDB's tables
207: 		SQLUINTEGER mask = SQL_AT_ADD_COLUMN_COLLATION | SQL_AT_ADD_COLUMN_DEFAULT | SQL_AT_ADD_COLUMN_SINGLE |
208: 		                   SQL_AT_ADD_CONSTRAINT | SQL_AT_ADD_TABLE_CONSTRAINT | SQL_AT_DROP_COLUMN_DEFAULT |
209: 		                   SQL_AT_SET_COLUMN_DEFAULT;
210: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
211: 		return SQL_SUCCESS;
212: 	}
213: 	case SQL_ASYNC_DBC_FUNCTIONS: {
214: 		duckdb::Store<SQLUINTEGER>(SQL_ASYNC_DBC_NOT_CAPABLE, (duckdb::data_ptr_t)info_value_ptr);
215: 		return SQL_SUCCESS;
216: 	}
217: 	case SQL_ASYNC_MODE: {
218: 		duckdb::Store<SQLUINTEGER>(SQL_AM_NONE, (duckdb::data_ptr_t)info_value_ptr);
219: 		return SQL_SUCCESS;
220: 	}
221: #ifdef SQL_ASYNC_NOTIFICATION
222: 	case SQL_ASYNC_NOTIFICATION: {
223: 		duckdb::Store<SQLUINTEGER>(SQL_ASYNC_NOTIFICATION_NOT_CAPABLE, (duckdb::data_ptr_t)info_value_ptr);
224: 		return SQL_SUCCESS;
225: 	}
226: #endif
227: 	case SQL_BATCH_ROW_COUNT: {
228: 		duckdb::Store<SQLUINTEGER>(SQL_BRC_EXPLICIT, (duckdb::data_ptr_t)info_value_ptr);
229: 		return SQL_SUCCESS;
230: 	}
231: 	case SQL_BATCH_SUPPORT: {
232: 		SQLUINTEGER mask = SQL_BS_SELECT_EXPLICIT | SQL_BS_ROW_COUNT_EXPLICIT;
233: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
234: 		return SQL_SUCCESS;
235: 	}
236: 	case SQL_BOOKMARK_PERSISTENCE: {
237: 		// we do not support bookmark, it's is implicit in DuckDB
238: 		/* SQL_BP_CLOSE |
239: 		 * SQL_BP_DELETE |
240: 		 * SQL_BP_DROP |
241: 		 * SQL_BP_OTHER_HSTMT |
242: 		 * SQL_BP_TRANSACTION |
243: 		 * SQL_BP_UPDATE */
244: 		return SQL_SUCCESS;
245: 	}
246: 	case SQL_CATALOG_LOCATION: {
247: 		duckdb::Store<SQLUSMALLINT>(SQL_CL_START, (duckdb::data_ptr_t)info_value_ptr);
248: 		return SQL_SUCCESS;
249: 	}
250: 	case SQL_CATALOG_NAME: {
251: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
252: 		return SQL_SUCCESS;
253: 	}
254: 	case SQL_CATALOG_NAME_SEPARATOR: {
255: 		std::string cat_separator(".");
256: 		duckdb::OdbcUtils::WriteString(cat_separator, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
257: 		return SQL_SUCCESS;
258: 	}
259: 	case SQL_CATALOG_TERM: {
260: 		std::string empty_str("");
261: 		duckdb::OdbcUtils::WriteString(empty_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
262: 		return SQL_SUCCESS;
263: 	}
264: 	case SQL_CATALOG_USAGE: {
265: 		SQLUINTEGER mask = SQL_CU_DML_STATEMENTS | SQL_CU_TABLE_DEFINITION;
266: 		/* | SQL_CU_PRIVILEGE_DEFINITION |
267: 		 * SQL_CU_INDEX_DEFINITION
268: 		 * SQL_CU_PROCEDURE_INVOCATION |
269: 		 */
270: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
271: 		return SQL_SUCCESS;
272: 	}
273: 	case SQL_COLLATION_SEQ: {
274: 		std::string default_collation("UTF-8");
275: 		duckdb::OdbcUtils::WriteString(default_collation, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
276: 		return SQL_SUCCESS;
277: 	}
278: 	case SQL_COLUMN_ALIAS: {
279: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
280: 		return SQL_SUCCESS;
281: 	}
282: 	case SQL_CONCAT_NULL_BEHAVIOR: {
283: 		duckdb::Store<SQLUSMALLINT>(SQL_CB_NON_NULL, (duckdb::data_ptr_t)info_value_ptr);
284: 		return SQL_SUCCESS;
285: 	}
286: 	// basically, we used the same conversion rules from MonetBD, it's needed to be tested
287: 	case SQL_CONVERT_TINYINT:
288: 	case SQL_CONVERT_SMALLINT:
289: 	case SQL_CONVERT_INTEGER:
290: 	case SQL_CONVERT_BIGINT: {
291: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_BIT | SQL_CVT_CHAR | SQL_CVT_DECIMAL | SQL_CVT_DOUBLE |
292: 		                   SQL_CVT_FLOAT | SQL_CVT_INTEGER | SQL_CVT_LONGVARCHAR | SQL_CVT_NUMERIC | SQL_CVT_REAL |
293: 		                   SQL_CVT_SMALLINT | SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
294: 
295: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
296: 		return SQL_SUCCESS;
297: 	}
298: 	case SQL_CONVERT_BINARY:
299: 	case SQL_CONVERT_LONGVARBINARY:
300: 	case SQL_CONVERT_VARBINARY: {
301: 		SQLUINTEGER mask = SQL_CVT_BINARY | SQL_CVT_CHAR | SQL_CVT_LONGVARBINARY | SQL_CVT_LONGVARCHAR |
302: 		                   SQL_CVT_VARBINARY | SQL_CVT_VARCHAR;
303: 
304: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
305: 		return SQL_SUCCESS;
306: 	}
307: 	case SQL_CONVERT_BIT: {
308: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_BIT | SQL_CVT_CHAR | SQL_CVT_INTEGER | SQL_CVT_LONGVARCHAR |
309: 		                   SQL_CVT_SMALLINT | SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
310: 
311: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
312: 		return SQL_SUCCESS;
313: 	}
314: 	case SQL_CONVERT_CHAR:
315: 	case SQL_CONVERT_VARCHAR:
316: 	case SQL_CONVERT_LONGVARCHAR: {
317: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_BINARY | SQL_CVT_BIT | SQL_CVT_CHAR | SQL_CVT_DATE |
318: 		                   SQL_CVT_DECIMAL | SQL_CVT_DOUBLE | SQL_CVT_FLOAT | SQL_CVT_INTEGER |
319: 		                   SQL_CVT_INTERVAL_DAY_TIME | SQL_CVT_INTERVAL_YEAR_MONTH | SQL_CVT_LONGVARBINARY |
320: 		                   SQL_CVT_LONGVARCHAR | SQL_CVT_NUMERIC | SQL_CVT_REAL | SQL_CVT_SMALLINT | SQL_CVT_TIME |
321: 		                   SQL_CVT_TIMESTAMP | SQL_CVT_TINYINT | SQL_CVT_VARBINARY | SQL_CVT_VARCHAR;
322: 
323: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
324: 		return SQL_SUCCESS;
325: 	}
326: 	case SQL_CONVERT_DATE: {
327: 		SQLUINTEGER mask = SQL_CVT_CHAR | SQL_CVT_DATE | SQL_CVT_LONGVARCHAR | SQL_CVT_TIMESTAMP | SQL_CVT_VARCHAR;
328: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
329: 		return SQL_SUCCESS;
330: 	}
331: 	case SQL_CONVERT_DECIMAL:
332: 	case SQL_CONVERT_NUMERIC: {
333: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_CHAR | SQL_CVT_DECIMAL | SQL_CVT_DOUBLE | SQL_CVT_FLOAT |
334: 		                   SQL_CVT_INTEGER | SQL_CVT_INTERVAL_DAY_TIME | SQL_CVT_LONGVARCHAR | SQL_CVT_NUMERIC |
335: 		                   SQL_CVT_REAL | SQL_CVT_SMALLINT | SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
336: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
337: 		return SQL_SUCCESS;
338: 	}
339: 	case SQL_CONVERT_DOUBLE:
340: 	case SQL_CONVERT_REAL:
341: 	case SQL_CONVERT_FLOAT: {
342: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_CHAR | SQL_CVT_DECIMAL | SQL_CVT_DOUBLE | SQL_CVT_FLOAT |
343: 		                   SQL_CVT_INTEGER | SQL_CVT_LONGVARCHAR | SQL_CVT_NUMERIC | SQL_CVT_REAL | SQL_CVT_SMALLINT |
344: 		                   SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
345: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
346: 		return SQL_SUCCESS;
347: 	}
348: 	case SQL_CONVERT_INTERVAL_DAY_TIME: {
349: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_CHAR | SQL_CVT_INTEGER | SQL_CVT_INTERVAL_DAY_TIME |
350: 		                   SQL_CVT_LONGVARCHAR | SQL_CVT_SMALLINT | SQL_CVT_TIME | SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
351: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
352: 		return SQL_SUCCESS;
353: 	}
354: 	case SQL_CONVERT_INTERVAL_YEAR_MONTH: {
355: 		SQLUINTEGER mask = SQL_CVT_BIGINT | SQL_CVT_CHAR | SQL_CVT_INTEGER | SQL_CVT_INTERVAL_YEAR_MONTH |
356: 		                   SQL_CVT_LONGVARCHAR | SQL_CVT_SMALLINT | SQL_CVT_TINYINT | SQL_CVT_VARCHAR;
357: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
358: 		return SQL_SUCCESS;
359: 	}
360: 	case SQL_CONVERT_TIME: {
361: 		SQLUINTEGER mask =
362: 		    SQL_CVT_CHAR | SQL_CVT_INTERVAL_DAY_TIME | SQL_CVT_LONGVARCHAR | SQL_CVT_TIME | SQL_CVT_VARCHAR;
363: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
364: 		return SQL_SUCCESS;
365: 	}
366: 	case SQL_CONVERT_TIMESTAMP: {
367: 		SQLUINTEGER mask =
368: 		    SQL_CVT_CHAR | SQL_CVT_DATE | SQL_CVT_LONGVARCHAR | SQL_CVT_TIME | SQL_CVT_TIMESTAMP | SQL_CVT_VARCHAR;
369: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
370: 		return SQL_SUCCESS;
371: 	}
372: 		// end conversion rules
373: 
374: 	case SQL_CONVERT_FUNCTIONS: {
375: 		duckdb::Store<SQLUINTEGER>(SQL_FN_CVT_CAST, (duckdb::data_ptr_t)info_value_ptr);
376: 		return SQL_SUCCESS;
377: 	}
378: 	case SQL_CORRELATION_NAME: {
379: 		duckdb::Store<SQLUSMALLINT>(SQL_CN_ANY, (duckdb::data_ptr_t)info_value_ptr);
380: 		return SQL_SUCCESS;
381: 	}
382: 	case SQL_CREATE_ASSERTION:
383: 	case SQL_CREATE_CHARACTER_SET:
384: 	case SQL_CREATE_COLLATION:
385: 	case SQL_CREATE_DOMAIN:
386: 	case SQL_CREATE_TRANSLATION: {
387: 		// "0" means that the statement is not supported.
388: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
389: 		return SQL_SUCCESS;
390: 	}
391: 	case SQL_CREATE_SCHEMA: {
392: 		duckdb::Store<SQLUINTEGER>(SQL_CS_CREATE_SCHEMA, (duckdb::data_ptr_t)info_value_ptr);
393: 		return SQL_SUCCESS;
394: 	}
395: 	case SQL_CREATE_TABLE: {
396: 		SQLUINTEGER mask = SQL_CT_COLUMN_CONSTRAINT | SQL_CT_COLUMN_DEFAULT | SQL_CT_CONSTRAINT_NAME_DEFINITION |
397: 		                   SQL_CT_CREATE_TABLE | SQL_CT_LOCAL_TEMPORARY | SQL_CT_TABLE_CONSTRAINT |
398: 		                   SQL_CT_COLUMN_COLLATION;
399: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
400: 		return SQL_SUCCESS;
401: 	}
402: 	case SQL_CREATE_VIEW: {
403: 		SQLUINTEGER mask = SQL_CV_CREATE_VIEW | SQL_CV_CHECK_OPTION;
404: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
405: 		return SQL_SUCCESS;
406: 	}
407: 	case SQL_CURSOR_COMMIT_BEHAVIOR: {
408: 		duckdb::Store<SQLUSMALLINT>(SQL_CB_PRESERVE, (duckdb::data_ptr_t)info_value_ptr);
409: 		return SQL_SUCCESS;
410: 	}
411: 	case SQL_CURSOR_ROLLBACK_BEHAVIOR: {
412: 		duckdb::Store<SQLUSMALLINT>(SQL_CB_CLOSE, (duckdb::data_ptr_t)info_value_ptr);
413: 		return SQL_SUCCESS;
414: 	}
415: 	case SQL_CURSOR_SENSITIVITY: {
416: 		duckdb::Store<SQLUINTEGER>(SQL_INSENSITIVE, (duckdb::data_ptr_t)info_value_ptr);
417: 		return SQL_SUCCESS;
418: 	}
419: 	case SQL_DATA_SOURCE_NAME: {
420: 		return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) -> SQLRETURN {
421: 			duckdb::OdbcUtils::WriteString(dbc->dsn, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
422: 			return SQL_SUCCESS;
423: 		});
424: 	}
425: 	case SQL_DATA_SOURCE_READ_ONLY: {
426: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
427: 		return SQL_SUCCESS;
428: 	}
429: 	case SQL_DATABASE_NAME: {
430: 		return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) -> SQLRETURN {
431: 			std::string db_name = dbc->GetDatabaseName();
432: 			if (db_name == ":memory:") {
433: 				db_name = "";
434: 			}
435: 			duckdb::OdbcUtils::WriteString(db_name, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
436: 			return SQL_SUCCESS;
437: 		});
438: 	}
439: 	case SQL_DATETIME_LITERALS: {
440: 		SQLUINTEGER mask = SQL_DL_SQL92_DATE | SQL_DL_SQL92_TIME | SQL_DL_SQL92_TIMESTAMP | SQL_DL_SQL92_INTERVAL_YEAR |
441: 		                   SQL_DL_SQL92_INTERVAL_MONTH | SQL_DL_SQL92_INTERVAL_DAY | SQL_DL_SQL92_INTERVAL_HOUR |
442: 		                   SQL_DL_SQL92_INTERVAL_MINUTE | SQL_DL_SQL92_INTERVAL_SECOND |
443: 		                   SQL_DL_SQL92_INTERVAL_YEAR_TO_MONTH | SQL_DL_SQL92_INTERVAL_DAY_TO_HOUR |
444: 		                   SQL_DL_SQL92_INTERVAL_DAY_TO_MINUTE | SQL_DL_SQL92_INTERVAL_DAY_TO_SECOND |
445: 		                   SQL_DL_SQL92_INTERVAL_HOUR_TO_MINUTE | SQL_DL_SQL92_INTERVAL_HOUR_TO_SECOND |
446: 		                   SQL_DL_SQL92_INTERVAL_MINUTE_TO_SECOND;
447: 
448: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
449: 		return SQL_SUCCESS;
450: 	}
451: 	case SQL_DRIVER_NAME:
452: 	case SQL_DBMS_NAME: {
453: 		std::string dbname = "DuckDB";
454: 		duckdb::OdbcUtils::WriteString(dbname, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
455: 		return SQL_SUCCESS;
456: 	}
457: 	case SQL_DBMS_VER: {
458: 		SQLHDBC stmt;
459: 
460: 		if (!SQL_SUCCEEDED(SQLAllocHandle(SQL_HANDLE_STMT, connection_handle, &stmt))) {
461: 			duckdb::FreeHandle(SQL_HANDLE_STMT, stmt);
462: 			return SQL_ERROR;
463: 		}
464: 		if (!SQL_SUCCEEDED(SQLExecDirect(stmt, (SQLCHAR *)"SELECT library_version FROM pragma_version()", SQL_NTS))) {
465: 			duckdb::FreeHandle(SQL_HANDLE_STMT, stmt);
466: 			return SQL_ERROR;
467: 		}
468: 		if (!SQL_SUCCEEDED(SQLFetch(stmt))) {
469: 			duckdb::FreeHandle(SQL_HANDLE_STMT, stmt);
470: 			return SQL_ERROR;
471: 		}
472: 
473: 		SQLRETURN ret;
474: 		if (string_length_ptr) {
475: 			SQLLEN len_ptr;
476: 			ret = SQLGetData(stmt, 1, SQL_C_CHAR, info_value_ptr, buffer_length, &len_ptr);
477: 			*string_length_ptr = len_ptr;
478: 		} else {
479: 			ret = SQLGetData(stmt, 1, SQL_C_CHAR, info_value_ptr, buffer_length, nullptr);
480: 		}
481: 		if (!SQL_SUCCEEDED(ret)) {
482: 			duckdb::FreeHandle(SQL_HANDLE_STMT, stmt);
483: 			return SQL_ERROR;
484: 		}
485: 
486: 		duckdb::FreeHandle(SQL_HANDLE_STMT, stmt);
487: 		return SQL_SUCCESS;
488: 	}
489: 	case SQL_DDL_INDEX: {
490: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
491: 		return SQL_SUCCESS;
492: 	}
493: 	case SQL_DEFAULT_TXN_ISOLATION: {
494: 		duckdb::Store<SQLUINTEGER>(SQL_TXN_SERIALIZABLE, (duckdb::data_ptr_t)info_value_ptr);
495: 		return SQL_SUCCESS;
496: 	}
497: 	case SQL_DESCRIBE_PARAMETER: {
498: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
499: 		return SQL_SUCCESS;
500: 	}
501: 	case SQL_DM_VER: {
502: 		std::string odbc_major = std::to_string(SQL_SPEC_MAJOR);
503: 		std::string odbc_minor = std::to_string(SQL_SPEC_MINOR);
504: 		// this doesn't seem to be so relevant
505: 		std::string dm_build_version = ".####.####";
506: 
507: 		std::string dm_version(odbc_major + "." + odbc_minor + dm_build_version);
508: 		duckdb::OdbcUtils::WriteString(dm_version, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
509: 		return SQL_SUCCESS;
510: 	}
511: #ifdef SQL_DRIVER_AWARE_POOLING_SUPPORTED
512: 	case SQL_DRIVER_AWARE_POOLING_SUPPORTED: {
513: 		duckdb::Store<SQLUINTEGER>(SQL_DRIVER_AWARE_POOLING_NOT_CAPABLE, (duckdb::data_ptr_t)info_value_ptr);
514: 		return SQL_SUCCESS;
515: 	}
516: #endif
517: 		// weird info types ("This information type is implemented by the Driver Manager alone.")
518: 		// case SQL_DRIVER_HDBCSQL_DRIVER_HENV:
519: 		// case SQL_DRIVER_HDESC:
520: 		// case SQL_DRIVER_HSTMT:
521: 
522: 	case SQL_DRIVER_ODBC_VER: {
523: 		std::string driver_ver = "03.00";
524: 		duckdb::OdbcUtils::WriteString(driver_ver, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
525: 		return SQL_SUCCESS;
526: 	}
527: 	case SQL_DRIVER_VER: {
528: 		std::string driver_ver = "03.00.0000";
529: 		duckdb::OdbcUtils::WriteString(driver_ver, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
530: 		return SQL_SUCCESS;
531: 	}
532: 	case SQL_DROP_ASSERTION: {
533: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
534: 		return SQL_SUCCESS;
535: 	}
536: 	case SQL_DROP_CHARACTER_SET: {
537: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
538: 		return SQL_SUCCESS;
539: 	}
540: 	case SQL_DROP_COLLATION: {
541: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
542: 		return SQL_SUCCESS;
543: 	}
544: 	case SQL_DROP_DOMAIN: {
545: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
546: 		return SQL_SUCCESS;
547: 	}
548: 	case SQL_DROP_SCHEMA: {
549: 		SQLUINTEGER mask = SQL_DS_DROP_SCHEMA | SQL_DS_CASCADE | SQL_DS_RESTRICT;
550: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
551: 		return SQL_SUCCESS;
552: 	}
553: 	case SQL_DROP_TABLE: {
554: 		SQLUINTEGER mask = SQL_DT_DROP_TABLE | SQL_DT_CASCADE | SQL_DT_RESTRICT;
555: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
556: 		return SQL_SUCCESS;
557: 	}
558: 	case SQL_DROP_TRANSLATION: {
559: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
560: 		return SQL_SUCCESS;
561: 	}
562: 	case SQL_DROP_VIEW: {
563: 		SQLUINTEGER mask = SQL_DV_DROP_VIEW | SQL_DV_CASCADE | SQL_DV_RESTRICT;
564: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
565: 		return SQL_SUCCESS;
566: 	}
567: 	case SQL_DYNAMIC_CURSOR_ATTRIBUTES1: {
568: 		SQLUINTEGER mask = SQL_CA1_ABSOLUTE | SQL_CA1_NEXT | SQL_CA1_RELATIVE;
569: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
570: 		return SQL_SUCCESS;
571: 	}
572: 	case SQL_DYNAMIC_CURSOR_ATTRIBUTES2: {
573: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
574: 		return SQL_SUCCESS;
575: 	}
576: 	case SQL_EXPRESSIONS_IN_ORDERBY: {
577: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
578: 		return SQL_SUCCESS;
579: 	}
580: 	case SQL_FILE_USAGE: {
581: 		duckdb::Store<SQLUSMALLINT>(SQL_FILE_NOT_SUPPORTED, (duckdb::data_ptr_t)info_value_ptr);
582: 		return SQL_SUCCESS;
583: 	}
584: 	case SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES1: {
585: 		duckdb::Store<SQLUINTEGER>(SQL_CA1_NEXT, (duckdb::data_ptr_t)info_value_ptr);
586: 		return SQL_SUCCESS;
587: 	}
588: 	case SQL_FORWARD_ONLY_CURSOR_ATTRIBUTES2: {
589: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
590: 		return SQL_SUCCESS;
591: 	}
592: 	case SQL_GETDATA_EXTENSIONS: {
593: 		SQLUINTEGER mask = SQL_GD_ANY_COLUMN | SQL_GD_ANY_ORDER | SQL_GD_BOUND | SQL_GD_BLOCK;
594: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
595: 		return SQL_SUCCESS;
596: 	}
597: 	case SQL_GROUP_BY: {
598: 		duckdb::Store<SQLUSMALLINT>(SQL_GB_NO_RELATION, (duckdb::data_ptr_t)info_value_ptr);
599: 		return SQL_SUCCESS;
600: 	}
601: 	case SQL_IDENTIFIER_CASE: {
602: 		duckdb::Store<SQLUSMALLINT>(SQL_IC_LOWER, (duckdb::data_ptr_t)info_value_ptr);
603: 		return SQL_SUCCESS;
604: 	}
605: 	case SQL_IDENTIFIER_QUOTE_CHAR: {
606: 		std::string quote_char("\"");
607: 		duckdb::OdbcUtils::WriteString(quote_char, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
608: 		return SQL_SUCCESS;
609: 	}
610: 	case SQL_INDEX_KEYWORDS: {
611: 		duckdb::Store<SQLUINTEGER>(SQL_IK_NONE, (duckdb::data_ptr_t)info_value_ptr);
612: 		return SQL_SUCCESS;
613: 	}
614: 	case SQL_INFO_SCHEMA_VIEWS: {
615: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
616: 		return SQL_SUCCESS;
617: 	}
618: 	case SQL_INSERT_STATEMENT: {
619: 		duckdb::Store<SQLUINTEGER>(SQL_IS_INSERT_LITERALS, (duckdb::data_ptr_t)info_value_ptr);
620: 		return SQL_SUCCESS;
621: 	}
622: 	case SQL_INTEGRITY: {
623: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
624: 		return SQL_SUCCESS;
625: 	}
626: 	case SQL_KEYSET_CURSOR_ATTRIBUTES1: {
627: 		SQLUINTEGER mask = SQL_CA1_ABSOLUTE | SQL_CA1_NEXT | SQL_CA1_RELATIVE;
628: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
629: 		return SQL_SUCCESS;
630: 	}
631: 	case SQL_KEYSET_CURSOR_ATTRIBUTES2: {
632: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
633: 		return SQL_SUCCESS;
634: 	}
635: 	case SQL_KEYWORDS: {
636: 		SQLHSTMT hstmt;
637: 
638: 		if (!SQL_SUCCEEDED(SQLAllocHandle(SQL_HANDLE_STMT, connection_handle, &hstmt))) {
639: 			duckdb::FreeHandle(SQL_HANDLE_STMT, hstmt);
640: 			return SQL_ERROR;
641: 		}
642: 		if (!SQL_SUCCEEDED(SQLExecDirect(
643: 		        hstmt, (SQLCHAR *)"SELECT keyword_name FROM duckdb_keywords() WHERE keyword_category='reserved'",
644: 		        SQL_NTS))) {
645: 			duckdb::FreeHandle(SQL_HANDLE_STMT, hstmt);
646: 			return SQL_ERROR;
647: 		}
648: 
649: 		SQLRETURN rc;
650: 		const size_t keyword_size = 100;
651: 		SQLCHAR *keyword = (SQLCHAR *)malloc(sizeof(SQLCHAR) * keyword_size);
652: 		std::string reserved_keywords;
653: 		while ((rc = SQLFetch(hstmt)) != SQL_NO_DATA) {
654: 			if (!SQL_SUCCEEDED(SQLGetData(hstmt, 1, SQL_C_CHAR, keyword, keyword_size, nullptr))) {
655: 				duckdb::FreeHandle(SQL_HANDLE_STMT, hstmt);
656: 				free(keyword);
657: 				return SQL_ERROR;
658: 			}
659: 			reserved_keywords += std::string((char *)keyword) + ",";
660: 		}
661: 		if (reserved_keywords.empty()) {
662: 			// remove last inserted comma
663: 			reserved_keywords.pop_back();
664: 		}
665: 		free(keyword);
666: 		duckdb::FreeHandle(SQL_HANDLE_STMT, hstmt);
667: 
668: 		duckdb::OdbcUtils::WriteString(reserved_keywords, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
669: 		return SQL_SUCCESS;
670: 	}
671: 	case SQL_LIKE_ESCAPE_CLAUSE: {
672: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
673: 		return SQL_SUCCESS;
674: 	}
675: 	case SQL_MAX_ASYNC_CONCURRENT_STATEMENTS:
676: 	case SQL_MAX_BINARY_LITERAL_LEN:
677: 	case SQL_MAX_CHAR_LITERAL_LEN:
678: 	case SQL_MAX_INDEX_SIZE:
679: 	case SQL_MAX_ROW_SIZE:
680: 	case SQL_MAX_STATEMENT_LEN: {
681: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
682: 		return SQL_SUCCESS;
683: 	}
684: 	case SQL_MAX_CATALOG_NAME_LEN:
685: 	case SQL_MAX_COLUMN_NAME_LEN:
686: 	case SQL_MAX_COLUMNS_IN_GROUP_BY:
687: 	case SQL_MAX_COLUMNS_IN_INDEX:
688: 	case SQL_MAX_COLUMNS_IN_ORDER_BY:
689: 	case SQL_MAX_COLUMNS_IN_SELECT:
690: 	case SQL_MAX_COLUMNS_IN_TABLE:
691: 	case SQL_MAX_CONCURRENT_ACTIVITIES:
692: 	case SQL_MAX_CURSOR_NAME_LEN:
693: 	case SQL_MAX_IDENTIFIER_LEN:
694: 	case SQL_MAX_PROCEDURE_NAME_LEN:
695: 	case SQL_MAX_SCHEMA_NAME_LEN:
696: 	case SQL_MAX_TABLE_NAME_LEN:
697: 	case SQL_MAX_TABLES_IN_SELECT:
698: 	case SQL_MAX_USER_NAME_LEN: {
699: 		duckdb::Store<SQLUSMALLINT>(0, (duckdb::data_ptr_t)info_value_ptr);
700: 		return SQL_SUCCESS;
701: 	}
702: 	case SQL_MAX_DRIVER_CONNECTIONS: {
703: 		// Set in 1, maximum number of active connections
704: 		duckdb::Store<SQLUSMALLINT>(1, (duckdb::data_ptr_t)info_value_ptr);
705: 		return SQL_SUCCESS;
706: 	}
707: 	case SQL_MAX_ROW_SIZE_INCLUDES_LONG: {
708: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
709: 		return SQL_SUCCESS;
710: 	}
711: 	case SQL_MULT_RESULT_SETS: {
712: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
713: 		return SQL_SUCCESS;
714: 	}
715: 	case SQL_MULTIPLE_ACTIVE_TXN: {
716: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
717: 		return SQL_SUCCESS;
718: 	}
719: 	case SQL_NEED_LONG_DATA_LEN: {
720: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
721: 		return SQL_SUCCESS;
722: 	}
723: 	case SQL_NON_NULLABLE_COLUMNS: {
724: 		duckdb::Store<SQLUSMALLINT>(SQL_NNC_NON_NULL, (duckdb::data_ptr_t)info_value_ptr);
725: 		return SQL_SUCCESS;
726: 	}
727: 	case SQL_NULL_COLLATION: {
728: 		duckdb::Store<SQLUSMALLINT>(SQL_NC_START, (duckdb::data_ptr_t)info_value_ptr);
729: 		return SQL_SUCCESS;
730: 	}
731: 	case SQL_NUMERIC_FUNCTIONS: {
732: 		SQLUINTEGER mask = SQL_FN_NUM_ABS | SQL_FN_NUM_ACOS | SQL_FN_NUM_ASIN | SQL_FN_NUM_ATAN | SQL_FN_NUM_ATAN2 |
733: 		                   SQL_FN_NUM_CEILING | SQL_FN_NUM_COS | SQL_FN_NUM_COT | SQL_FN_NUM_DEGREES | SQL_FN_NUM_EXP |
734: 		                   SQL_FN_NUM_FLOOR | SQL_FN_NUM_LOG | SQL_FN_NUM_LOG10 | SQL_FN_NUM_MOD | SQL_FN_NUM_PI |
735: 		                   SQL_FN_NUM_POWER | SQL_FN_NUM_RADIANS | SQL_FN_NUM_ROUND | SQL_FN_NUM_SIGN | SQL_FN_NUM_SIN |
736: 		                   SQL_FN_NUM_SQRT | SQL_FN_NUM_TAN;
737: 
738: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
739: 		return SQL_SUCCESS;
740: 	}
741: 	case SQL_ODBC_INTERFACE_CONFORMANCE: {
742: 		duckdb::Store<SQLUINTEGER>(SQL_OIC_CORE, (duckdb::data_ptr_t)info_value_ptr);
743: 		return SQL_SUCCESS;
744: 	}
745: 	//  This is implemented only in the Driver Manager
746: 	// case SQL_ODBC_VER:
747: 	case SQL_OJ_CAPABILITIES: {
748: 		SQLUINTEGER mask = SQL_OJ_LEFT | SQL_OJ_RIGHT | SQL_OJ_FULL | SQL_OJ_INNER | SQL_OJ_ALL_COMPARISON_OPS;
749: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
750: 		return SQL_SUCCESS;
751: 	}
752: 	case SQL_ORDER_BY_COLUMNS_IN_SELECT: {
753: 		duckdb::OdbcUtils::WriteString(yes_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
754: 		return SQL_SUCCESS;
755: 	}
756: 	case SQL_PARAM_ARRAY_ROW_COUNTS: {
757: 		duckdb::Store<SQLUINTEGER>(SQL_PARC_BATCH, (duckdb::data_ptr_t)info_value_ptr);
758: 		return SQL_SUCCESS;
759: 	}
760: 	case SQL_PARAM_ARRAY_SELECTS: {
761: 		duckdb::Store<SQLUINTEGER>(SQL_PAS_BATCH, (duckdb::data_ptr_t)info_value_ptr);
762: 		return SQL_SUCCESS;
763: 	}
764: 	case SQL_POS_OPERATIONS: {
765: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
766: 		return SQL_SUCCESS;
767: 	}
768: 	case SQL_PROCEDURE_TERM: {
769: 		duckdb::OdbcUtils::WriteString("", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
770: 		return SQL_SUCCESS;
771: 	}
772: 	case SQL_PROCEDURES: {
773: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
774: 		return SQL_SUCCESS;
775: 	}
776: 	case SQL_QUOTED_IDENTIFIER_CASE: {
777: 		duckdb::Store<SQLUSMALLINT>(SQL_IC_SENSITIVE, (duckdb::data_ptr_t)info_value_ptr);
778: 		return SQL_SUCCESS;
779: 	}
780: 	case SQL_ROW_UPDATES: {
781: 		duckdb::OdbcUtils::WriteString(no_str, (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
782: 		return SQL_SUCCESS;
783: 	}
784: 	case SQL_SCHEMA_TERM: {
785: 		duckdb::OdbcUtils::WriteString("schema", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
786: 		return SQL_SUCCESS;
787: 	}
788: 	case SQL_SCHEMA_USAGE: {
789: 		SQLUINTEGER mask = SQL_SU_DML_STATEMENTS | SQL_SU_TABLE_DEFINITION;
790: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
791: 		return SQL_SUCCESS;
792: 	}
793: 	case SQL_SCROLL_OPTIONS: {
794: 		duckdb::Store<SQLUINTEGER>(SQL_SCROLL_OPTIONS, (duckdb::data_ptr_t)info_value_ptr);
795: 		return SQL_SUCCESS;
796: 	}
797: 	case SQL_SEARCH_PATTERN_ESCAPE: {
798: 		duckdb::OdbcUtils::WriteString("\\", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
799: 		return SQL_SUCCESS;
800: 	}
801: 	case SQL_SERVER_NAME: {
802: 		duckdb::OdbcUtils::WriteString("", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
803: 		return SQL_SUCCESS;
804: 	}
805: 	case SQL_SPECIAL_CHARACTERS: {
806: 		duckdb::OdbcUtils::WriteString("!%&'()*+,-./;:<=>?@[]^{}|~", (SQLCHAR *)info_value_ptr, buffer_length,
807: 		                               string_length_ptr);
808: 		return SQL_SUCCESS;
809: 	}
810: 	case SQL_SQL_CONFORMANCE: {
811: 		duckdb::Store<SQLUINTEGER>(SQL_SC_SQL92_ENTRY, (duckdb::data_ptr_t)info_value_ptr);
812: 		return SQL_SUCCESS;
813: 	}
814: 	case SQL_SQL92_DATETIME_FUNCTIONS: {
815: 		SQLUINTEGER mask = SQL_SDF_CURRENT_DATE | SQL_SDF_CURRENT_TIME | SQL_SDF_CURRENT_TIMESTAMP;
816: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
817: 		return SQL_SUCCESS;
818: 	}
819: 	case SQL_SQL92_FOREIGN_KEY_DELETE_RULE:
820: 	case SQL_SQL92_FOREIGN_KEY_UPDATE_RULE:
821: 	case SQL_SQL92_GRANT: {
822: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
823: 		return SQL_SUCCESS;
824: 	}
825: 	case SQL_SQL92_NUMERIC_VALUE_FUNCTIONS: {
826: 		SQLUINTEGER mask = SQL_SNVF_BIT_LENGTH | SQL_SNVF_EXTRACT | SQL_SNVF_OCTET_LENGTH | SQL_SNVF_POSITION;
827: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
828: 		return SQL_SUCCESS;
829: 	}
830: 	case SQL_SQL92_PREDICATES: {
831: 		SQLUINTEGER mask = SQL_SP_BETWEEN | SQL_SP_COMPARISON | SQL_SP_EXISTS | SQL_SP_IN | SQL_SP_ISNOTNULL |
832: 		                   SQL_SP_ISNULL | SQL_SP_LIKE;
833: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
834: 		return SQL_SUCCESS;
835: 	}
836: 	case SQL_SQL92_RELATIONAL_JOIN_OPERATORS: {
837: 		SQLUINTEGER mask = SQL_SRJO_CROSS_JOIN | SQL_SRJO_FULL_OUTER_JOIN | SQL_SRJO_INNER_JOIN |
838: 		                   SQL_SRJO_LEFT_OUTER_JOIN | SQL_SRJO_NATURAL_JOIN | SQL_SRJO_RIGHT_OUTER_JOIN;
839: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
840: 		return SQL_SUCCESS;
841: 	}
842: 	case SQL_SQL92_REVOKE: {
843: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
844: 		return SQL_SUCCESS;
845: 	}
846: 	case SQL_SQL92_ROW_VALUE_CONSTRUCTOR: {
847: 		SQLUINTEGER mask = SQL_SRVC_VALUE_EXPRESSION | SQL_SRVC_NULL | SQL_SRVC_DEFAULT | SQL_SRVC_ROW_SUBQUERY;
848: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
849: 		return SQL_SUCCESS;
850: 	}
851: 	case SQL_SQL92_STRING_FUNCTIONS: {
852: 		SQLUINTEGER mask = SQL_SSF_CONVERT | SQL_SSF_LOWER | SQL_SSF_UPPER | SQL_SSF_SUBSTRING | SQL_SSF_TRIM_BOTH |
853: 		                   SQL_SSF_TRIM_LEADING | SQL_SSF_TRIM_TRAILING;
854: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
855: 		return SQL_SUCCESS;
856: 	}
857: 	case SQL_SQL92_VALUE_EXPRESSIONS: {
858: 		SQLUINTEGER mask = SQL_SVE_CASE | SQL_SVE_CAST | SQL_SVE_COALESCE | SQL_SVE_NULLIF;
859: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
860: 		return SQL_SUCCESS;
861: 	}
862: 	case SQL_STANDARD_CLI_CONFORMANCE: {
863: 		// do we comply with SQL_SCC_XOPEN_CLI_VERSION1 | SQL_SCC_ISO92_CLI ??
864: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
865: 		return SQL_SUCCESS;
866: 	}
867: 	case SQL_STATIC_CURSOR_ATTRIBUTES1: {
868: 		SQLUINTEGER mask = SQL_CA1_NEXT | SQL_CA1_ABSOLUTE | SQL_CA1_RELATIVE;
869: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
870: 		return SQL_SUCCESS;
871: 	}
872: 	case SQL_STATIC_CURSOR_ATTRIBUTES2: {
873: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
874: 		return SQL_SUCCESS;
875: 	}
876: 	case SQL_STRING_FUNCTIONS: {
877: 		SQLUINTEGER mask = SQL_FN_STR_ASCII | SQL_FN_STR_BIT_LENGTH | SQL_FN_STR_CONCAT | SQL_FN_STR_LCASE |
878: 		                   SQL_FN_STR_LEFT | SQL_FN_STR_LENGTH | SQL_FN_STR_LOCATE | SQL_FN_STR_LTRIM |
879: 		                   SQL_FN_STR_REPEAT | SQL_FN_STR_REPLACE | SQL_FN_STR_RIGHT | SQL_FN_STR_RTRIM |
880: 		                   SQL_FN_STR_SUBSTRING | SQL_FN_STR_UCASE;
881: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
882: 		return SQL_SUCCESS;
883: 	}
884: 	case SQL_SUBQUERIES: {
885: 		SQLUINTEGER mask =
886: 		    SQL_SQ_CORRELATED_SUBQUERIES | SQL_SQ_COMPARISON | SQL_SQ_EXISTS | SQL_SQ_IN | SQL_SQ_QUANTIFIED;
887: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
888: 		return SQL_SUCCESS;
889: 	}
890: 	case SQL_SYSTEM_FUNCTIONS: {
891: 		duckdb::Store<SQLUINTEGER>(0, (duckdb::data_ptr_t)info_value_ptr);
892: 		return SQL_SUCCESS;
893: 	}
894: 	case SQL_TABLE_TERM: {
895: 		duckdb::OdbcUtils::WriteString("table", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
896: 		return SQL_SUCCESS;
897: 	}
898: 	case SQL_TIMEDATE_ADD_INTERVALS:
899: 	case SQL_TIMEDATE_DIFF_INTERVALS: {
900: 		SQLUINTEGER mask = SQL_FN_TSI_FRAC_SECOND | SQL_FN_TSI_SECOND | SQL_FN_TSI_MINUTE | SQL_FN_TSI_HOUR |
901: 		                   SQL_FN_TSI_DAY | SQL_FN_TSI_WEEK | SQL_FN_TSI_MONTH | SQL_FN_TSI_QUARTER | SQL_FN_TSI_YEAR;
902: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
903: 		return SQL_SUCCESS;
904: 	}
905: 	case SQL_TIMEDATE_FUNCTIONS: {
906: 		SQLUINTEGER mask = SQL_FN_TD_CURRENT_DATE | SQL_FN_TD_CURRENT_TIME | SQL_FN_TD_CURRENT_TIMESTAMP |
907: 		                   SQL_FN_TD_DAYNAME | SQL_FN_TD_DAYOFMONTH | SQL_FN_TD_DAYOFWEEK | SQL_FN_TD_DAYOFYEAR |
908: 		                   SQL_FN_TD_EXTRACT | SQL_FN_TD_HOUR | SQL_FN_TD_MINUTE | SQL_FN_TD_MONTH |
909: 		                   SQL_FN_TD_MONTHNAME | SQL_FN_TD_NOW | SQL_FN_TD_QUARTER | SQL_FN_TD_SECOND | SQL_FN_TD_WEEK |
910: 		                   SQL_FN_TD_YEAR;
911: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
912: 		return SQL_SUCCESS;
913: 	}
914: 	case SQL_TXN_CAPABLE: {
915: 		duckdb::Store<SQLUSMALLINT>(SQL_TC_ALL, (duckdb::data_ptr_t)info_value_ptr);
916: 		return SQL_SUCCESS;
917: 	}
918: 	case SQL_TXN_ISOLATION_OPTION: {
919: 		duckdb::Store<SQLUINTEGER>(SQL_TXN_SERIALIZABLE, (duckdb::data_ptr_t)info_value_ptr);
920: 		return SQL_SUCCESS;
921: 	}
922: 	case SQL_UNION: {
923: 		SQLUINTEGER mask = SQL_U_UNION | SQL_U_UNION_ALL;
924: 		duckdb::Store<SQLUINTEGER>(mask, (duckdb::data_ptr_t)info_value_ptr);
925: 		return SQL_SUCCESS;
926: 	}
927: 	case SQL_USER_NAME:
928: 	case SQL_XOPEN_CLI_YEAR: {
929: 		duckdb::OdbcUtils::WriteString("", (SQLCHAR *)info_value_ptr, buffer_length, string_length_ptr);
930: 		return SQL_SUCCESS;
931: 	}
932: 	default:
933: 		return SQL_ERROR;
934: 	}
935: } // end SQLGetInfo
936: 
937: SQLRETURN SQL_API SQLEndTran(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALLINT completion_type) {
938: 	if (handle_type != SQL_HANDLE_DBC) { // theoretically this can also be done on env but no no no
939: 		return SQL_ERROR;
940: 	}
941: 	return duckdb::WithConnection(handle, [&](duckdb::OdbcHandleDbc *dbc) {
942: 		switch (completion_type) {
943: 		case SQL_COMMIT:
944: 			// it needs to materialize the result set because ODBC can still fetch after a commit
945: 			if (dbc->MaterializeResult() != SQL_SUCCESS) {
946: 				// for some reason we couldn't materialize the result set
947: 				return SQL_ERROR;
948: 			}
949: 			if (dbc->conn->IsAutoCommit()) {
950: 				return SQL_SUCCESS;
951: 			}
952: 			dbc->conn->Commit();
953: 			return SQL_SUCCESS;
954: 		case SQL_ROLLBACK:
955: 			dbc->conn->Rollback();
956: 			return SQL_SUCCESS;
957: 		default:
958: 			return SQL_ERROR;
959: 		}
960: 	});
961: }
962: 
963: SQLRETURN SQL_API SQLDisconnect(SQLHDBC connection_handle) {
964: 	return duckdb::WithConnection(connection_handle, [&](duckdb::OdbcHandleDbc *dbc) {
965: 		dbc->conn.reset();
966: 		return SQL_SUCCESS;
967: 	});
968: }
[end of tools/odbc/connection.cpp]
[start of tools/odbc/driver.cpp]
1: #include "duckdb_odbc.hpp"
2: #include "driver.hpp"
3: #include "odbc_fetch.hpp"
4: #include "odbc_utils.hpp"
5: 
6: #include "duckdb/main/config.hpp"
7: 
8: #include <odbcinst.h>
9: #include <locale>
10: 
11: using duckdb::OdbcUtils;
12: using std::string;
13: 
14: SQLRETURN duckdb::FreeHandle(SQLSMALLINT handle_type, SQLHANDLE handle) {
15: 	if (!handle) {
16: 		return SQL_ERROR;
17: 	}
18: 
19: 	switch (handle_type) {
20: 	case SQL_HANDLE_DBC: {
21: 		auto *hdl = (duckdb::OdbcHandleDbc *)handle;
22: 		delete hdl;
23: 		return SQL_SUCCESS;
24: 	}
25: 	case SQL_HANDLE_DESC: {
26: 		auto *hdl = (duckdb::OdbcHandleDesc *)handle;
27: 		hdl->dbc->ResetStmtDescriptors(hdl);
28: 		delete hdl;
29: 		return SQL_ERROR;
30: 	}
31: 	case SQL_HANDLE_ENV: {
32: 		auto *hdl = (duckdb::OdbcHandleEnv *)handle;
33: 		delete hdl;
34: 		return SQL_SUCCESS;
35: 	}
36: 	case SQL_HANDLE_STMT: {
37: 		auto *hdl = (duckdb::OdbcHandleStmt *)handle;
38: 		hdl->dbc->EraseStmtRef(hdl);
39: 		delete hdl;
40: 		return SQL_SUCCESS;
41: 	}
42: 	default:
43: 		return SQL_ERROR;
44: 	}
45: }
46: 
47: SQLRETURN SQL_API SQLFreeHandle(SQLSMALLINT handle_type, SQLHANDLE handle) {
48: 	return duckdb::FreeHandle(handle_type, handle);
49: }
50: 
51: SQLRETURN SQL_API SQLAllocHandle(SQLSMALLINT handle_type, SQLHANDLE input_handle, SQLHANDLE *output_handle_ptr) {
52: 	switch (handle_type) {
53: 	case SQL_HANDLE_DBC: {
54: 		D_ASSERT(input_handle);
55: 		auto *env = (duckdb::OdbcHandleEnv *)input_handle;
56: 		D_ASSERT(env->type == duckdb::OdbcHandleType::ENV);
57: 		*output_handle_ptr = new duckdb::OdbcHandleDbc(env);
58: 		return SQL_SUCCESS;
59: 	}
60: 	case SQL_HANDLE_ENV:
61: 		*output_handle_ptr = new duckdb::OdbcHandleEnv();
62: 		return SQL_SUCCESS;
63: 	case SQL_HANDLE_STMT: {
64: 		D_ASSERT(input_handle);
65: 		auto *dbc = (duckdb::OdbcHandleDbc *)input_handle;
66: 		D_ASSERT(dbc->type == duckdb::OdbcHandleType::DBC);
67: 		*output_handle_ptr = new duckdb::OdbcHandleStmt(dbc);
68: 		return SQL_SUCCESS;
69: 	}
70: 	case SQL_HANDLE_DESC: {
71: 		D_ASSERT(input_handle);
72: 		auto *dbc = (duckdb::OdbcHandleDbc *)input_handle;
73: 		D_ASSERT(dbc->type == duckdb::OdbcHandleType::DBC);
74: 		*output_handle_ptr = new duckdb::OdbcHandleDesc(dbc);
75: 		return SQL_SUCCESS;
76: 	}
77: 	default:
78: 		return SQL_ERROR;
79: 	}
80: }
81: 
82: SQLRETURN SQL_API SQLSetEnvAttr(SQLHENV environment_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,
83:                                 SQLINTEGER string_length) {
84: 	if (!environment_handle) {
85: 		return SQL_ERROR;
86: 	}
87: 	auto *env = (duckdb::OdbcHandleEnv *)environment_handle;
88: 	if (env->type != duckdb::OdbcHandleType::ENV) {
89: 		return SQL_ERROR;
90: 	}
91: 	switch (attribute) {
92: 	case SQL_ATTR_ODBC_VERSION: {
93: 		switch ((SQLUINTEGER)(intptr_t)value_ptr) {
94: 		case SQL_OV_ODBC3:
95: 			// TODO actually do something with this?
96: 			// auto version = (SQLINTEGER)(uintptr_t)value_ptr;
97: 			return SQL_SUCCESS;
98: 		default:
99: 			env->error_messages.emplace_back("ODBC version not supported.");
100: 			return SQL_ERROR;
101: 		}
102: 	}
103: 	case SQL_ATTR_CONNECTION_POOLING:
104: 		switch ((SQLINTEGER)(intptr_t)value_ptr) {
105: 		case SQL_CP_OFF:
106: 		case SQL_CP_ONE_PER_DRIVER:
107: 		case SQL_CP_ONE_PER_HENV:
108: 			return SQL_SUCCESS;
109: 		default:
110: 			env->error_messages.emplace_back("Connection pool option not supported.");
111: 			return SQL_ERROR;
112: 		}
113: 	case SQL_ATTR_CP_MATCH:
114: 		env->error_messages.emplace_back("Optional feature not supported.");
115: 		return SQL_ERROR;
116: 	case SQL_ATTR_OUTPUT_NTS: /* SQLINTEGER */
117: 		switch (*(SQLINTEGER *)value_ptr) {
118: 		case SQL_TRUE:
119: 			return SQL_SUCCESS;
120: 		default:
121: 			env->error_messages.emplace_back("Optional feature not supported.");
122: 			return SQL_ERROR;
123: 		}
124: 	default:
125: 		return SQL_ERROR;
126: 	}
127: }
128: 
129: SQLRETURN SQL_API SQLGetEnvAttr(SQLHENV environment_handle, SQLINTEGER attribute, SQLPOINTER value_ptr,
130:                                 SQLINTEGER buffer_length, SQLINTEGER *string_length_ptr) {
131: 	if (value_ptr == nullptr) {
132: 		return SQL_ERROR;
133: 	}
134: 	auto *env = (duckdb::OdbcHandleEnv *)environment_handle;
135: 	if (env->type != duckdb::OdbcHandleType::ENV) {
136: 		return SQL_ERROR;
137: 	}
138: 
139: 	switch (attribute) {
140: 	case SQL_ATTR_ODBC_VERSION:
141: 		*(SQLUINTEGER *)value_ptr = SQL_OV_ODBC3;
142: 		break;
143: 	case SQL_ATTR_CONNECTION_POOLING:
144: 		*(SQLINTEGER *)value_ptr = SQL_CP_OFF;
145: 		break;
146: 	case SQL_ATTR_OUTPUT_NTS:
147: 		*(SQLINTEGER *)value_ptr = SQL_TRUE;
148: 		break;
149: 	case SQL_ATTR_CP_MATCH:
150: 		env->error_messages.emplace_back("Optional feature not supported.");
151: 		return SQL_ERROR;
152: 	}
153: 	return SQL_SUCCESS;
154: }
155: 
156: /**
157:  * Get the new database name from the DSN string.
158:  * Otherwise, try to read the database name from odbc.ini
159:  */
160: static void GetDatabaseNameFromDSN(duckdb::OdbcHandleDbc *dbc, SQLCHAR *dsn, string &new_db_name) {
161: 	OdbcUtils::SetValueFromConnStr(dsn, "Database", new_db_name);
162: 
163: 	// given preference for the connection attribute
164: 	if (!dbc->sql_attr_current_catalog.empty() && new_db_name.empty()) {
165: 		new_db_name = dbc->sql_attr_current_catalog;
166: 		return;
167: 	}
168: #ifdef ODBC_LINK_ODBCINST
169: 	if (new_db_name.empty()) {
170: 		string dsn_name;
171: 		OdbcUtils::SetValueFromConnStr(dsn, "DSN", dsn_name);
172: 		if (!dsn_name.empty()) {
173: 			const int MAX_DB_NAME = 256;
174: 			char db_name[MAX_DB_NAME];
175: 			SQLGetPrivateProfileString(dsn_name.c_str(), "Database", "", db_name, MAX_DB_NAME, "odbc.ini");
176: 			new_db_name = string(db_name);
177: 		}
178: 	}
179: #endif
180: }
181: 
182: static SQLRETURN SetConnection(SQLHDBC connection_handle, SQLCHAR *conn_str) {
183: 	// TODO actually interpret Database in in_connection_string
184: 	if (!connection_handle) {
185: 		return SQL_ERROR;
186: 	}
187: 	auto *dbc = (duckdb::OdbcHandleDbc *)connection_handle;
188: 	if (dbc->type != duckdb::OdbcHandleType::DBC) {
189: 		return SQL_ERROR;
190: 	}
191: 
192: 	// set DSN
193: 	OdbcUtils::SetValueFromConnStr(conn_str, "DSN", dbc->dsn);
194: 
195: 	string db_name;
196: 	GetDatabaseNameFromDSN(dbc, conn_str, db_name);
197: 	dbc->SetDatabaseName(db_name);
198: 	db_name = dbc->GetDatabaseName();
199: 
200: 	if (!db_name.empty()) {
201: 		duckdb::DBConfig config;
202: 		if (dbc->sql_attr_access_mode == SQL_MODE_READ_ONLY) {
203: 			config.access_mode = duckdb::AccessMode::READ_ONLY;
204: 		}
205: 		dbc->env->db = duckdb::make_unique<duckdb::DuckDB>(db_name, &config);
206: 	}
207: 
208: 	if (!dbc->conn) {
209: 		dbc->conn = duckdb::make_unique<duckdb::Connection>(*dbc->env->db);
210: 		dbc->conn->SetAutoCommit(dbc->autocommit);
211: 	}
212: 	return SQL_SUCCESS;
213: }
214: 
215: SQLRETURN SQL_API SQLDriverConnect(SQLHDBC connection_handle, SQLHWND window_handle, SQLCHAR *in_connection_string,
216:                                    SQLSMALLINT string_length1, SQLCHAR *out_connection_string,
217:                                    SQLSMALLINT buffer_length, SQLSMALLINT *string_length2_ptr,
218:                                    SQLUSMALLINT driver_completion) {
219: 	auto ret = SetConnection(connection_handle, in_connection_string);
220: 	std::string connect_str = "DuckDB connection";
221: 	if (string_length2_ptr) {
222: 		*string_length2_ptr = connect_str.size();
223: 	}
224: 	if (ret == SQL_SUCCESS && out_connection_string) {
225: 		memcpy(out_connection_string, connect_str.c_str(),
226: 		       duckdb::MinValue<SQLSMALLINT>((SQLSMALLINT)connect_str.size(), buffer_length));
227: 	}
228: 	return ret;
229: }
230: 
231: SQLRETURN SQL_API SQLConnect(SQLHDBC connection_handle, SQLCHAR *server_name, SQLSMALLINT name_length1,
232:                              SQLCHAR *user_name, SQLSMALLINT name_length2, SQLCHAR *authentication,
233:                              SQLSMALLINT name_length3) {
234: 	return SetConnection(connection_handle, server_name);
235: }
236: 
237: SQLRETURN SQL_API SQLGetDiagRec(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALLINT rec_number, SQLCHAR *sql_state,
238:                                 SQLINTEGER *native_error_ptr, SQLCHAR *message_text, SQLSMALLINT buffer_length,
239:                                 SQLSMALLINT *text_length_ptr) {
240: 	if (!handle) {
241: 		std::string msg_str("Handle is NULL.");
242: 		OdbcUtils::WriteString(msg_str, message_text, buffer_length, text_length_ptr);
243: 		return SQL_INVALID_HANDLE;
244: 	}
245: 	if (rec_number <= 0 || buffer_length < 0) {
246: 		return SQL_ERROR;
247: 	}
248: 	if (message_text) {
249: 		*message_text = '\0';
250: 	}
251: 	if (text_length_ptr) {
252: 		*text_length_ptr = 0;
253: 	}
254: 	if (sql_state) {
255: 		*sql_state = '\0';
256: 	}
257: 	if (native_error_ptr) {
258: 		*native_error_ptr = 0; // we don't have error codes
259: 	}
260: 
261: 	auto *hdl = (duckdb::OdbcHandle *)handle;
262: 
263: 	// lambda function that writes the diagnostic messages
264: 	std::function<SQLRETURN(duckdb::OdbcHandle *, duckdb::OdbcHandleType)> func_write_diag =
265: 	    [&](duckdb::OdbcHandle *hdl, duckdb::OdbcHandleType target_type) {
266: 		    if (hdl->type != target_type) {
267: 			    std::string msg_str("Handle type " + duckdb::OdbcHandleTypeToString(hdl->type) + " mismatch with " +
268: 			                        duckdb::OdbcHandleTypeToString(target_type));
269: 			    OdbcUtils::WriteString(msg_str, message_text, buffer_length, text_length_ptr);
270: 			    return SQL_SUCCESS;
271: 		    }
272: 
273: 		    // Errors should be placed at the error_messages
274: 		    if ((size_t)rec_number <= hdl->error_messages.size()) {
275: 			    OdbcUtils::WriteString(hdl->error_messages[rec_number - 1], message_text, buffer_length,
276: 			                           text_length_ptr);
277: 			    return SQL_SUCCESS;
278: 		    } else {
279: 			    return SQL_NO_DATA;
280: 		    }
281: 	    };
282: 
283: 	switch (handle_type) {
284: 	case SQL_HANDLE_ENV: {
285: 		return func_write_diag(hdl, duckdb::OdbcHandleType::ENV);
286: 	}
287: 	case SQL_HANDLE_DBC: {
288: 		return func_write_diag(hdl, duckdb::OdbcHandleType::DBC);
289: 	}
290: 	case SQL_HANDLE_STMT: {
291: 		return func_write_diag(hdl, duckdb::OdbcHandleType::STMT);
292: 	}
293: 	case SQL_HANDLE_DESC: {
294: 		return func_write_diag(hdl, duckdb::OdbcHandleType::DESC);
295: 	}
296: 	default:
297: 		return SQL_INVALID_HANDLE;
298: 	}
299: }
300: 
301: SQLRETURN SQL_API SQLGetDiagField(SQLSMALLINT handle_type, SQLHANDLE handle, SQLSMALLINT rec_number,
302:                                   SQLSMALLINT diag_identifier, SQLPOINTER diag_info_ptr, SQLSMALLINT buffer_length,
303:                                   SQLSMALLINT *string_length_ptr) {
304: 	return SQL_ERROR;
305: }
306: 
307: SQLRETURN SQL_API SQLDataSources(SQLHENV environment_handle, SQLUSMALLINT direction, SQLCHAR *server_name,
308:                                  SQLSMALLINT buffer_length1, SQLSMALLINT *name_length1_ptr, SQLCHAR *description,
309:                                  SQLSMALLINT buffer_length2, SQLSMALLINT *name_length2_ptr) {
310: 	auto *env = (duckdb::OdbcHandleEnv *)environment_handle;
311: 	env->error_messages.emplace_back("Driver Manager only function");
312: 	return SQL_ERROR;
313: }
314: 
315: SQLRETURN SQL_API SQLDrivers(SQLHENV environment_handle, SQLUSMALLINT direction, SQLCHAR *driver_description,
316:                              SQLSMALLINT buffer_length1, SQLSMALLINT *description_length_ptr,
317:                              SQLCHAR *driver_attributes, SQLSMALLINT buffer_length2,
318:                              SQLSMALLINT *attributes_length_ptr) {
319: 	auto *env = (duckdb::OdbcHandleEnv *)environment_handle;
320: 	env->error_messages.emplace_back("Driver Manager only function");
321: 	return SQL_ERROR;
322: }
[end of tools/odbc/driver.cpp]
[start of tools/odbc/duckdb_odbc.cpp]
1: #include "duckdb_odbc.hpp"
2: #include "odbc_fetch.hpp"
3: #include "odbc_interval.hpp"
4: #include "descriptor.hpp"
5: #include "parameter_descriptor.hpp"
6: #include "row_descriptor.hpp"
7: 
8: using duckdb::OdbcHandle;
9: using duckdb::OdbcHandleDbc;
10: using duckdb::OdbcHandleDesc;
11: using duckdb::OdbcHandleStmt;
12: using duckdb::OdbcHandleType;
13: 
14: std::string duckdb::OdbcHandleTypeToString(OdbcHandleType type) {
15: 	switch (type) {
16: 	case OdbcHandleType::ENV:
17: 		return "ENV";
18: 	case OdbcHandleType::DBC:
19: 		return "DBC";
20: 	case OdbcHandleType::STMT:
21: 		return "STMT";
22: 	case OdbcHandleType::DESC:
23: 		return "DESC";
24: 	}
25: 	return "INVALID";
26: }
27: 
28: //! OdbcHandle functions ***************************************************
29: OdbcHandle::OdbcHandle(const OdbcHandle &other) {
30: 	// calling copy assigment opetator;
31: 	*this = other;
32: }
33: 
34: OdbcHandle &OdbcHandle::operator=(const OdbcHandle &other) {
35: 	type = other.type;
36: 	std::copy(other.error_messages.begin(), other.error_messages.end(), std::back_inserter(error_messages));
37: 	return *this;
38: }
39: 
40: //! OdbcHandleDbc functions ***************************************************
41: OdbcHandleDbc::~OdbcHandleDbc() {
42: 	// this is needed because some applications may not call SQLFreeHandle
43: 	for (auto stmt : vec_stmt_ref) {
44: 		delete stmt;
45: 	}
46: }
47: 
48: void OdbcHandleDbc::EraseStmtRef(OdbcHandleStmt *stmt) {
49: 	// erase the reference from vec_stmt_ref
50: 	for (duckdb::idx_t v_idx = 0; v_idx < vec_stmt_ref.size(); ++v_idx) {
51: 		if (vec_stmt_ref[v_idx] == stmt) {
52: 			vec_stmt_ref.erase(vec_stmt_ref.begin() + v_idx);
53: 			break;
54: 		}
55: 	}
56: }
57: 
58: SQLRETURN OdbcHandleDbc::MaterializeResult() {
59: 	if (vec_stmt_ref.empty()) {
60: 		return SQL_SUCCESS;
61: 	}
62: 	// only materializing the result set from the last statement
63: 	return vec_stmt_ref.back()->MaterializeResult();
64: }
65: 
66: void OdbcHandleDbc::ResetStmtDescriptors(OdbcHandleDesc *old_desc) {
67: 	for (auto stmt : vec_stmt_ref) {
68: 		if (stmt->param_desc->GetAPD() == old_desc) {
69: 			stmt->param_desc->ResetCurrentAPD();
70: 		}
71: 		if (stmt->row_desc->GetARD() == old_desc) {
72: 			stmt->row_desc->ResetCurrentARD();
73: 		}
74: 	}
75: }
76: 
77: void OdbcHandleDbc::SetDatabaseName(const string &db_name) {
78: 	if (!db_name.empty()) {
79: 		sql_attr_current_catalog = db_name;
80: 	}
81: }
82: 
83: std::string OdbcHandleDbc::GetDatabaseName() {
84: 	return sql_attr_current_catalog;
85: }
86: 
87: //! OdbcHandleStmt functions **************************************************
88: OdbcHandleStmt::OdbcHandleStmt(OdbcHandleDbc *dbc_p)
89:     : OdbcHandle(OdbcHandleType::STMT), dbc(dbc_p), rows_fetched_ptr(nullptr) {
90: 	D_ASSERT(dbc_p);
91: 	D_ASSERT(dbc_p->conn);
92: 
93: 	odbc_fetcher = make_unique<OdbcFetch>(this);
94: 	dbc->vec_stmt_ref.emplace_back(this);
95: 
96: 	// Implicit parameter and row descriptor associated with this ODBC handle statement
97: 	param_desc = make_unique<ParameterDescriptor>(this);
98: 	row_desc = make_unique<RowDescriptor>(this);
99: }
100: 
101: OdbcHandleStmt::~OdbcHandleStmt() {
102: }
103: 
104: void OdbcHandleStmt::Close() {
105: 	open = false;
106: 	res.reset();
107: 	odbc_fetcher->ClearChunks();
108: 	// the parameter values can be reused after
109: 	param_desc->Reset();
110: 	// stmt->stmt.reset(); // the statment can be reuse in prepared statement
111: 	bound_cols.clear();
112: 	error_messages.clear();
113: }
114: 
115: SQLRETURN OdbcHandleStmt::MaterializeResult() {
116: 	if (!stmt || !stmt->success) {
117: 		return SQL_SUCCESS;
118: 	}
119: 	if (!res || !res->success) {
120: 		return SQL_SUCCESS;
121: 	}
122: 	return odbc_fetcher->Materialize(this);
123: }
124: 
125: void OdbcHandleStmt::SetARD(OdbcHandleDesc *new_ard) {
126: 	row_desc->SetCurrentARD(new_ard);
127: }
128: 
129: void OdbcHandleStmt::SetAPD(OdbcHandleDesc *new_apd) {
130: 	param_desc->SetCurrentAPD(new_apd);
131: }
[end of tools/odbc/duckdb_odbc.cpp]
[start of tools/odbc/include/duckdb_odbc.hpp]
1: #ifndef DUCKDB_ODBC_HPP
2: #define DUCKDB_ODBC_HPP
3: 
4: // needs to be first because BOOL
5: #include "duckdb.hpp"
6: 
7: #include "duckdb/common/windows.hpp"
8: #include "descriptor.hpp"
9: #include "odbc_utils.hpp"
10: 
11: #include <sqltypes.h>
12: #include <sqlext.h>
13: #include <vector>
14: 
15: #ifdef _WIN32
16: #include <Windows.h>
17: #endif
18: 
19: namespace duckdb {
20: 
21: class OdbcFetch;
22: class ParameterDescriptor;
23: class RowDescriptor;
24: 
25: enum OdbcHandleType { ENV, DBC, STMT, DESC };
26: std::string OdbcHandleTypeToString(OdbcHandleType type);
27: 
28: struct OdbcHandle {
29: 	explicit OdbcHandle(OdbcHandleType type_p) : type(type_p) {};
30: 	OdbcHandle(const OdbcHandle &other);
31: 	OdbcHandle &operator=(const OdbcHandle &other);
32: 
33: 	OdbcHandleType type;
34: 	// appending all error messages into it
35: 	std::vector<std::string> error_messages;
36: };
37: 
38: struct OdbcHandleEnv : public OdbcHandle {
39: 	OdbcHandleEnv() : OdbcHandle(OdbcHandleType::ENV), db(make_unique<DuckDB>(nullptr)) {};
40: 	unique_ptr<DuckDB> db;
41: };
42: 
43: struct OdbcHandleStmt;
44: struct OdbcHandleDesc;
45: 
46: struct OdbcHandleDbc : public OdbcHandle {
47: public:
48: 	explicit OdbcHandleDbc(OdbcHandleEnv *env_p)
49: 	    : OdbcHandle(OdbcHandleType::DBC), env(env_p), autocommit(true), sql_attr_access_mode(SQL_MODE_READ_WRITE) {
50: 		D_ASSERT(env_p);
51: 		D_ASSERT(env_p->db);
52: 	};
53: 	~OdbcHandleDbc();
54: 	void EraseStmtRef(OdbcHandleStmt *stmt);
55: 	SQLRETURN MaterializeResult();
56: 	void ResetStmtDescriptors(OdbcHandleDesc *old_desc);
57: 
58: 	void SetDatabaseName(const string &db_name);
59: 	std::string GetDatabaseName();
60: 
61: public:
62: 	OdbcHandleEnv *env;
63: 	unique_ptr<Connection> conn;
64: 	bool autocommit;
65: 	SQLUINTEGER sql_attr_metadata_id;
66: 	SQLUINTEGER sql_attr_access_mode;
67: 	// this is the database name, see: SQLSetConnectAttr
68: 	std::string sql_attr_current_catalog;
69: 	// this is DSN get in string connection, see: SQLConnect
70: 	// Ex: "DSN=DuckDB"
71: 	std::string dsn;
72: 	// reference to an open statement handled by this connection
73: 	std::vector<OdbcHandleStmt *> vec_stmt_ref;
74: };
75: 
76: struct OdbcBoundCol {
77: 	OdbcBoundCol() : type(SQL_UNKNOWN_TYPE), ptr(nullptr), len(0), strlen_or_ind(nullptr) {};
78: 
79: 	bool IsBound() {
80: 		return ptr != nullptr;
81: 	}
82: 
83: 	bool IsVarcharBound() {
84: 		if (OdbcUtils::IsCharType(type)) {
85: 			return strlen_or_ind != nullptr;
86: 		}
87: 		return false;
88: 	}
89: 
90: 	SQLSMALLINT type;
91: 	SQLPOINTER ptr;
92: 	SQLLEN len;
93: 	SQLLEN *strlen_or_ind;
94: };
95: 
96: struct OdbcHandleStmt : public OdbcHandle {
97: public:
98: 	explicit OdbcHandleStmt(OdbcHandleDbc *dbc_p);
99: 	~OdbcHandleStmt();
100: 	void Close();
101: 	SQLRETURN MaterializeResult();
102: 	void SetARD(OdbcHandleDesc *new_ard);
103: 	void SetAPD(OdbcHandleDesc *new_apd);
104: 	bool IsPrepared() {
105: 		return stmt != nullptr;
106: 	}
107: 
108: public:
109: 	OdbcHandleDbc *dbc;
110: 	unique_ptr<PreparedStatement> stmt;
111: 	unique_ptr<QueryResult> res;
112: 	vector<OdbcBoundCol> bound_cols;
113: 	bool open;
114: 	SQLULEN *rows_fetched_ptr;
115: 
116: 	// fetcher
117: 	unique_ptr<OdbcFetch> odbc_fetcher;
118: 
119: 	unique_ptr<ParameterDescriptor> param_desc;
120: 
121: 	unique_ptr<RowDescriptor> row_desc;
122: };
123: 
124: struct OdbcHandleDesc : public OdbcHandle {
125: 	//! https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/descriptors?view=sql-server-ver15
126: 	// TODO requires full implmentation
127: public:
128: 	explicit OdbcHandleDesc(OdbcHandleDbc *dbc_ptr = nullptr, OdbcHandleStmt *stmt_ptr = nullptr,
129: 	                        bool explicit_desc = false)
130: 	    : OdbcHandle(OdbcHandleType::DESC), dbc(dbc_ptr), stmt(stmt_ptr) {
131: 		header.sql_desc_alloc_type = SQL_DESC_ALLOC_AUTO;
132: 		if (explicit_desc) {
133: 			header.sql_desc_alloc_type = SQL_DESC_ALLOC_USER;
134: 		}
135: 	}
136: 	OdbcHandleDesc(const OdbcHandleDesc &other);
137: 	~OdbcHandleDesc() {
138: 	}
139: 	OdbcHandleDesc &operator=(const OdbcHandleDesc &other);
140: 	void CopyOnlyOdbcFields(const OdbcHandleDesc &other);
141: 	void CopyFieldByField(const OdbcHandleDesc &other);
142: 
143: 	DescRecord *GetDescRecord(idx_t param_idx);
144: 	SQLRETURN SetDescField(SQLSMALLINT rec_number, SQLSMALLINT field_identifier, SQLPOINTER value_ptr,
145: 	                       SQLINTEGER buffer_length);
146: 	void Clear();
147: 	void Reset();
148: 	void Copy(OdbcHandleDesc &other);
149: 
150: 	// verify Implementation Descriptor (ID)
151: 	bool IsID();
152: 	// verify Application Descriptor (AD)
153: 	bool IsAD();
154: 	bool IsIRD();
155: 	bool IsIPD();
156: 
157: 	void AddMoreRecords(SQLSMALLINT new_size);
158: 
159: public:
160: 	DescHeader header;
161: 	std::vector<DescRecord> records;
162: 	OdbcHandleDbc *dbc;
163: 	OdbcHandleStmt *stmt;
164: };
165: 
166: template <class T>
167: SQLRETURN WithConnection(SQLHANDLE &connection_handle, T &&lambda) {
168: 	if (!connection_handle) {
169: 		return SQL_ERROR;
170: 	}
171: 	auto *hdl = (OdbcHandleDbc *)connection_handle;
172: 	if (hdl->type != OdbcHandleType::DBC) {
173: 		return SQL_ERROR;
174: 	}
175: 	if (!hdl->conn) {
176: 		return SQL_ERROR;
177: 	}
178: 
179: 	return lambda(hdl);
180: }
181: 
182: template <class T>
183: SQLRETURN WithStatement(SQLHANDLE &statement_handle, T &&lambda) {
184: 	if (!statement_handle) {
185: 		return SQL_ERROR;
186: 	}
187: 	auto *hdl = (OdbcHandleStmt *)statement_handle;
188: 	if (hdl->type != OdbcHandleType::STMT) {
189: 		return SQL_ERROR;
190: 	}
191: 	if (!hdl->dbc || !hdl->dbc->conn) {
192: 		return SQL_ERROR;
193: 	}
194: 	return lambda(hdl);
195: }
196: 
197: template <class T>
198: SQLRETURN WithStatementPrepared(SQLHANDLE &statement_handle, T &&lambda) {
199: 	return WithStatement(statement_handle, [&](OdbcHandleStmt *stmt) -> SQLRETURN {
200: 		if (!stmt->stmt) {
201: 			return SQL_ERROR;
202: 		}
203: 		if (!stmt->stmt->success) {
204: 			return SQL_ERROR;
205: 		}
206: 		return lambda(stmt);
207: 	});
208: }
209: 
210: template <class T>
211: SQLRETURN WithStatementResult(SQLHANDLE &statement_handle, T &&lambda) {
212: 	return WithStatementPrepared(statement_handle, [&](OdbcHandleStmt *stmt) -> SQLRETURN {
213: 		if (!stmt->res) {
214: 			return SQL_ERROR;
215: 		}
216: 		if (!stmt->res->success) {
217: 			return SQL_ERROR;
218: 		}
219: 		return lambda(stmt);
220: 	});
221: }
222: 
223: template <class T>
224: SQLRETURN WithDescriptor(SQLHANDLE &descriptor_handle, T &&lambda) {
225: 	if (!descriptor_handle) {
226: 		return SQL_ERROR;
227: 	}
228: 	auto *hdl = (OdbcHandleDesc *)descriptor_handle;
229: 	if (hdl->type != OdbcHandleType::DESC) {
230: 		return SQL_ERROR;
231: 	}
232: 	return lambda(hdl);
233: }
234: 
235: } // namespace duckdb
236: 
237: #endif // DUCKDB_ODBC_HPP
[end of tools/odbc/include/duckdb_odbc.hpp]
[start of tools/odbc/include/odbc_utils.hpp]
1: #ifndef ODBC_UTILS_HPP
2: #define ODBC_UTILS_HPP
3: 
4: // needs to be first because BOOL
5: #include "duckdb.hpp"
6: 
7: #ifdef _WIN32
8: #include <Windows.h>
9: #endif
10: 
11: #include <sql.h>
12: #include <sqltypes.h>
13: #include <string>
14: #include <vector>
15: 
16: namespace duckdb {
17: struct OdbcUtils {
18: public:
19: 	static std::string ReadString(const SQLPOINTER ptr, const SQLSMALLINT len);
20: 	// static void WriteString(const std::string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len, SQLSMALLINT *out_len);
21: 	template <typename INT_TYPE>
22: 	static void WriteString(const string &s, SQLCHAR *out_buf, SQLSMALLINT buf_len, INT_TYPE *out_len) {
23: 		if (out_buf) {
24: 			snprintf((char *)out_buf, buf_len, "%s", s.c_str());
25: 		}
26: 		if (out_len) {
27: 			*out_len = s.size();
28: 		}
29: 	}
30: 
31: 	template <typename FIELD_TYPE>
32: 	SQLRETURN IsValidPtrForSpecificedField(SQLPOINTER value_ptr, FIELD_TYPE target_field,
33: 	                                       const std::vector<FIELD_TYPE> vec_field_ids) {
34: 		for (auto field_id : vec_field_ids) {
35: 			// target field doens't accept null_ptr
36: 			if (field_id == target_field && value_ptr == nullptr) {
37: 				return SQL_ERROR;
38: 			}
39: 		}
40: 		return SQL_SUCCESS;
41: 	}
42: 
43: 	static bool IsCharType(SQLSMALLINT type);
44: 
45: 	static SQLRETURN SetStringValueLength(const std::string &val_str, SQLLEN *str_len_or_ind_ptr);
46: 	static SQLRETURN SetStringAndLength(std::vector<std::string> &error_messages, const std::string &val_str,
47: 	                                    SQLPOINTER target_value_ptr, SQLSMALLINT buffer_length,
48: 	                                    SQLSMALLINT *str_len_or_ind_ptr);
49: 
50: 	static std::string GetStringAsIdentifier(const std::string &str);
51: 	static std::string ParseStringFilter(const std::string &filter_name, const std::string &filter_value,
52: 	                                     SQLUINTEGER sql_attr_metadata_id, const std::string &coalesce_str = "");
53: 
54: 	static std::string GetQueryDuckdbTables(const std::string &schema_filter, const std::string &table_filter,
55: 	                                        const std::string &table_type_filter);
56: 	static std::string GetQueryDuckdbColumns(const std::string &catalog_filter, const std::string &schema_filter,
57: 	                                         const std::string &table_filter, const std::string &column_filter);
58: 
59: 	static void SetValueFromConnStr(const string &conn_str, const char *key, string &value);
60: 	static void SetValueFromConnStr(SQLCHAR *conn_c_str, const char *key, string &value);
61: };
62: } // namespace duckdb
63: #endif
[end of tools/odbc/include/odbc_utils.hpp]
[start of tools/odbc/odbc_interval.cpp]
1: #include "odbc_interval.hpp"
2: #include "duckdb/common/operator/cast_operators.hpp"
3: #include <sqltypes.h>
4: #include <sqlext.h>
5: 
6: using duckdb::interval_t;
7: using duckdb::OdbcInterval;
8: using duckdb::Value;
9: 
10: bool OdbcInterval::GetInterval(Value &value, interval_t &interval, duckdb::OdbcHandleStmt *stmt) {
11: 	switch (value.type().id()) {
12: 	case LogicalTypeId::INTERVAL:
13: 		interval = IntervalValue::Get(value);
14: 		return true;
15: 	case LogicalTypeId::VARCHAR: {
16: 		string error_message;
17: 		auto &val_str = StringValue::Get(value);
18: 		if (!TryCastErrorMessage::Operation<string_t, interval_t>(string_t(val_str), interval, &error_message)) {
19: 			if (error_message.empty()) {
20: 				error_message = CastExceptionText<string_t, interval_t>(string_t(val_str));
21: 			}
22: 			stmt->error_messages.emplace_back(error_message);
23: 			return false;
24: 		}
25: 		return true;
26: 	}
27: 	default:
28: 		return false;
29: 	}
30: }
31: 
32: /**
33:  * Set the interval signal, give preference to the most precedent (i.e., year, month, day)
34:  * */
35: void OdbcInterval::SetSignal(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
36: 	if (interval.months != 0) {
37: 		interval_struct->interval_sign = (interval.months < 0) ? SQL_TRUE : SQL_FALSE;
38: 		return;
39: 	}
40: 	if (interval.days != 0) {
41: 		interval_struct->interval_sign = (interval.days < 0) ? SQL_TRUE : SQL_FALSE;
42: 		return;
43: 	}
44: 
45: 	interval_struct->interval_sign = (interval.micros < 0) ? SQL_TRUE : SQL_FALSE;
46: }
47: 
48: void OdbcInterval::SetYear(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
49: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_YEAR;
50: 	interval_struct->intval.year_month.year = std::abs(interval.months) / duckdb::Interval::MONTHS_PER_YEAR;
51: }
52: 
53: void OdbcInterval::SetMonth(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
54: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_MONTH;
55: 	interval_struct->intval.year_month.month = std::abs(interval.months);
56: }
57: 
58: void OdbcInterval::SetDay(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
59: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_DAY;
60: 	// set the absolute value of days
61: 	interval_struct->intval.day_second.day =
62: 	    std::abs(interval.days + interval.months * duckdb::Interval::DAYS_PER_MONTH);
63: }
64: 
65: void OdbcInterval::SetHour(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
66: 	// firstly, set number of days
67: 	SetDay(interval, interval_struct);
68: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_HOUR;
69: 
70: 	interval_struct->intval.day_second.hour = interval_struct->intval.day_second.day * duckdb::Interval::HOURS_PER_DAY;
71: 	interval_struct->intval.day_second.hour += std::abs(interval.micros) / duckdb::Interval::MICROS_PER_HOUR;
72: 	// remaning stores into the fraction
73: 	interval_struct->intval.day_second.fraction = std::abs(interval.micros) % duckdb::Interval::MICROS_PER_HOUR;
74: }
75: 
76: void OdbcInterval::SetMinute(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
77: 	// firstly, set number of hours
78: 	SetHour(interval, interval_struct);
79: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_MINUTE;
80: 
81: 	interval_struct->intval.day_second.minute =
82: 	    interval_struct->intval.day_second.hour * duckdb::Interval::MINS_PER_HOUR;
83: 	interval_struct->intval.day_second.minute +=
84: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_MINUTE;
85: 	// remaning stores into the fraction
86: 	interval_struct->intval.day_second.fraction =
87: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_MINUTE;
88: }
89: 
90: void OdbcInterval::SetSecond(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
91: 	// firstly, set number of minutes
92: 	SetMinute(interval, interval_struct);
93: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_SECOND;
94: 
95: 	interval_struct->intval.day_second.second =
96: 	    interval_struct->intval.day_second.minute * duckdb::Interval::SECS_PER_MINUTE;
97: 	interval_struct->intval.day_second.fraction += std::abs(interval.micros) / duckdb::Interval::MICROS_PER_SEC;
98: 	// remaning stores into the fraction
99: 	interval_struct->intval.day_second.fraction = std::abs(interval.micros) % duckdb::Interval::MICROS_PER_SEC;
100: }
101: 
102: void OdbcInterval::SetDayToHour(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
103: 	SetDay(interval, interval_struct);
104: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_DAY_TO_HOUR;
105: 	// set hours
106: 	interval_struct->intval.day_second.hour = std::abs(interval.micros) / duckdb::Interval::MICROS_PER_HOUR;
107: 
108: 	// remaning stores into the fraction
109: 	interval_struct->intval.day_second.fraction = std::abs(interval.micros) % duckdb::Interval::MICROS_PER_HOUR;
110: }
111: 
112: void OdbcInterval::SetDayToMinute(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
113: 	SetDayToHour(interval, interval_struct);
114: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_DAY_TO_MINUTE;
115: 	// set minutes
116: 	interval_struct->intval.day_second.minute =
117: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_MINUTE;
118: 
119: 	// remaning stores into the fraction
120: 	interval_struct->intval.day_second.fraction =
121: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_MINUTE;
122: }
123: 
124: void OdbcInterval::SetDayToSecond(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
125: 	SetDayToMinute(interval, interval_struct);
126: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_DAY_TO_SECOND;
127: 	// set minutes
128: 	interval_struct->intval.day_second.second =
129: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_SEC;
130: 
131: 	// remaning stores into the fraction
132: 	interval_struct->intval.day_second.fraction =
133: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_SEC;
134: }
135: 
136: void OdbcInterval::SetHourToMinute(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
137: 	SetHour(interval, interval_struct);
138: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_HOUR_TO_MINUTE;
139: 
140: 	// set minutes
141: 	interval_struct->intval.day_second.minute =
142: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_MINUTE;
143: 
144: 	// remaning stores into the fraction
145: 	interval_struct->intval.day_second.fraction =
146: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_MINUTE;
147: }
148: 
149: void OdbcInterval::SetHourToSecond(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
150: 	SetHourToMinute(interval, interval_struct);
151: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_HOUR_TO_SECOND;
152: 
153: 	// set seconds
154: 	interval_struct->intval.day_second.second =
155: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_SEC;
156: 
157: 	// remaning stores into the fraction
158: 	interval_struct->intval.day_second.fraction =
159: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_SEC;
160: }
161: 
162: void OdbcInterval::SetMinuteToSecond(interval_t &interval, SQL_INTERVAL_STRUCT *interval_struct) {
163: 	SetMinute(interval, interval_struct);
164: 	interval_struct->interval_type = SQLINTERVAL::SQL_IS_MINUTE_TO_SECOND;
165: 
166: 	// set seconds
167: 	interval_struct->intval.day_second.second =
168: 	    interval_struct->intval.day_second.fraction / duckdb::Interval::MICROS_PER_SEC;
169: 
170: 	// remaning stores into the fraction
171: 	interval_struct->intval.day_second.fraction =
172: 	    interval_struct->intval.day_second.fraction % duckdb::Interval::MICROS_PER_SEC;
173: }
174: 
175: bool OdbcInterval::IsIntervalType(SQLSMALLINT value_type) {
176: 	switch (value_type) {
177: 	case SQL_C_INTERVAL_YEAR:
178: 	case SQL_C_INTERVAL_MONTH:
179: 	case SQL_C_INTERVAL_DAY:
180: 	case SQL_C_INTERVAL_HOUR:
181: 	case SQL_C_INTERVAL_MINUTE:
182: 	case SQL_C_INTERVAL_SECOND:
183: 	case SQL_C_INTERVAL_YEAR_TO_MONTH:
184: 	case SQL_C_INTERVAL_DAY_TO_HOUR:
185: 	case SQL_C_INTERVAL_DAY_TO_MINUTE:
186: 	case SQL_C_INTERVAL_DAY_TO_SECOND:
187: 	case SQL_C_INTERVAL_HOUR_TO_MINUTE:
188: 	case SQL_C_INTERVAL_HOUR_TO_SECOND:
189: 	case SQL_C_INTERVAL_MINUTE_TO_SECOND:
190: 		return true;
191: 	default:
192: 		return false;
193: 	}
194: }
195: 
196: SQLSMALLINT OdbcInterval::GetSQLIntervalType(SQLSMALLINT value_type) {
197: 	switch (value_type) {
198: 	case SQL_C_INTERVAL_YEAR:
199: 		return SQL_INTERVAL_YEAR;
200: 	case SQL_C_INTERVAL_MONTH:
201: 		return SQL_INTERVAL_MONTH;
202: 	case SQL_C_INTERVAL_DAY:
203: 		return SQL_INTERVAL_DAY;
204: 	case SQL_C_INTERVAL_HOUR:
205: 		return SQL_INTERVAL_HOUR;
206: 	case SQL_C_INTERVAL_MINUTE:
207: 		return SQL_INTERVAL_MINUTE;
208: 	case SQL_C_INTERVAL_SECOND:
209: 		return SQL_INTERVAL_SECOND;
210: 	case SQL_C_INTERVAL_YEAR_TO_MONTH:
211: 		return SQL_INTERVAL_YEAR_TO_MONTH;
212: 	case SQL_C_INTERVAL_DAY_TO_HOUR:
213: 		return SQL_INTERVAL_DAY_TO_HOUR;
214: 	case SQL_C_INTERVAL_DAY_TO_MINUTE:
215: 		return SQL_INTERVAL_DAY_TO_MINUTE;
216: 	case SQL_C_INTERVAL_DAY_TO_SECOND:
217: 		return SQL_INTERVAL_DAY_TO_SECOND;
218: 	case SQL_C_INTERVAL_HOUR_TO_MINUTE:
219: 		return SQL_INTERVAL_HOUR_TO_MINUTE;
220: 	case SQL_C_INTERVAL_HOUR_TO_SECOND:
221: 		return SQL_INTERVAL_HOUR_TO_SECOND;
222: 	case SQL_C_INTERVAL_MINUTE_TO_SECOND:
223: 		return SQL_INTERVAL_MINUTE_TO_SECOND;
224: 	default:
225: 		return SQL_ERROR;
226: 	}
227: }
228: 
229: SQLSMALLINT OdbcInterval::GetIntervalCode(SQLSMALLINT value_type) {
230: 	switch (value_type) {
231: 	case SQL_C_INTERVAL_YEAR:
232: 		return SQL_CODE_YEAR;
233: 	case SQL_C_INTERVAL_MONTH:
234: 		return SQL_CODE_MONTH;
235: 	case SQL_C_INTERVAL_DAY:
236: 		return SQL_CODE_DAY;
237: 	case SQL_C_INTERVAL_HOUR:
238: 		return SQL_CODE_HOUR;
239: 	case SQL_C_INTERVAL_MINUTE:
240: 		return SQL_CODE_MINUTE;
241: 	case SQL_C_INTERVAL_SECOND:
242: 		return SQL_CODE_SECOND;
243: 	case SQL_C_INTERVAL_YEAR_TO_MONTH:
244: 		return SQL_CODE_YEAR_TO_MONTH;
245: 	case SQL_C_INTERVAL_DAY_TO_HOUR:
246: 		return SQL_CODE_DAY_TO_HOUR;
247: 	case SQL_C_INTERVAL_DAY_TO_MINUTE:
248: 		return SQL_CODE_DAY_TO_MINUTE;
249: 	case SQL_C_INTERVAL_DAY_TO_SECOND:
250: 		return SQL_CODE_DAY_TO_SECOND;
251: 	case SQL_C_INTERVAL_HOUR_TO_MINUTE:
252: 		return SQL_CODE_HOUR_TO_MINUTE;
253: 	case SQL_C_INTERVAL_HOUR_TO_SECOND:
254: 		return SQL_CODE_HOUR_TO_SECOND;
255: 	case SQL_C_INTERVAL_MINUTE_TO_SECOND:
256: 		return SQL_CODE_MINUTE_TO_SECOND;
257: 	default:
258: 		return SQL_ERROR;
259: 	}
260: }
[end of tools/odbc/odbc_interval.cpp]
[start of tools/odbc/statement_functions.cpp]
1: #include "statement_functions.hpp"
2: #include "odbc_interval.hpp"
3: #include "odbc_fetch.hpp"
4: #include "odbc_utils.hpp"
5: #include "descriptor.hpp"
6: #include "parameter_descriptor.hpp"
7: 
8: #include "duckdb/common/types/decimal.hpp"
9: #include "duckdb/common/types/string_type.hpp"
10: #include "duckdb/common/operator/cast_operators.hpp"
11: #include "duckdb/common/operator/decimal_cast_operators.hpp"
12: #include "duckdb/common/types/blob.hpp"
13: #include "duckdb/common/types/date.hpp"
14: #include "duckdb/common/types/time.hpp"
15: #include "duckdb/common/types/timestamp.hpp"
16: 
17: #include <algorithm>
18: #include <codecvt>
19: #include <locale>
20: 
21: using std::string;
22: 
23: using duckdb::date_t;
24: using duckdb::Decimal;
25: using duckdb::DecimalType;
26: using duckdb::dtime_t;
27: using duckdb::hugeint_t;
28: using duckdb::interval_t;
29: using duckdb::LogicalType;
30: using duckdb::LogicalTypeId;
31: using duckdb::OdbcInterval;
32: using duckdb::OdbcUtils;
33: using duckdb::Store;
34: using duckdb::string_t;
35: using duckdb::timestamp_t;
36: 
37: SQLRETURN duckdb::PrepareStmt(SQLHSTMT statement_handle, SQLCHAR *statement_text, SQLINTEGER text_length) {
38: 	return duckdb::WithStatement(statement_handle, [&](duckdb::OdbcHandleStmt *stmt) {
39: 		if (stmt->stmt) {
40: 			stmt->stmt.reset();
41: 		}
42: 		if (stmt->res) {
43: 			stmt->res.reset();
44: 		}
45: 		stmt->odbc_fetcher->ClearChunks();
46: 		// we should not clear the parameters because of SQLExecDirect may reuse them
47: 		// stmt->params.resize(0);
48: 		// we should not clear the bound columns because SQLBindCol might bind columns in it
49: 		// stmt->bound_cols.resize(0);
50: 
51: 		auto query = duckdb::OdbcUtils::ReadString(statement_text, text_length);
52: 		stmt->stmt = stmt->dbc->conn->Prepare(query);
53: 		if (!stmt->stmt->success) {
54: 			stmt->error_messages.emplace_back(stmt->stmt->error);
55: 			return SQL_ERROR;
56: 		}
57: 		stmt->param_desc->ResetParams(stmt->stmt->n_param);
58: 
59: 		stmt->bound_cols.resize(stmt->stmt->ColumnCount());
60: 		return SQL_SUCCESS;
61: 	});
62: }
63: 
64: //! Execute stmt in a batch manner while there is a parameter set to process,
65: //! the stmt is executed multiple times when there is a bound array of parameters in INSERT and UPDATE statements
66: SQLRETURN duckdb::BatchExecuteStmt(SQLHSTMT statement_handle) {
67: 	return duckdb::WithStatement(statement_handle, [&](duckdb::OdbcHandleStmt *stmt) -> SQLRETURN {
68: 		SQLRETURN ret;
69: 		do {
70: 			ret = SingleExecuteStmt(stmt);
71: 		} while (ret == SQL_STILL_EXECUTING);
72: 
73: 		// now, fetching the first chunk to verify constant folding (See: PR #2462 and issue #2452)
74: 		if (ret == SQL_SUCCESS) {
75: 			auto fetch_ret = stmt->odbc_fetcher->FetchFirst(statement_handle, stmt);
76: 			if (fetch_ret == SQL_ERROR) {
77: 				return fetch_ret;
78: 			}
79: 		}
80: 
81: 		return ret;
82: 	});
83: }
84: 
85: //! Execute statement only once
86: SQLRETURN duckdb::SingleExecuteStmt(duckdb::OdbcHandleStmt *stmt) {
87: 	if (stmt->res) {
88: 		stmt->res.reset();
89: 	}
90: 	stmt->odbc_fetcher->ClearChunks();
91: 
92: 	stmt->open = false;
93: 	if (stmt->rows_fetched_ptr) {
94: 		*stmt->rows_fetched_ptr = 0;
95: 	}
96: 
97: 	std::vector<Value> values;
98: 	SQLRETURN ret = stmt->param_desc->GetParamValues(values);
99: 	if (ret == SQL_NEED_DATA || ret == SQL_ERROR) {
100: 		return ret;
101: 	}
102: 
103: 	stmt->res = stmt->stmt->Execute(values);
104: 
105: 	if (!stmt->res->success) {
106: 		stmt->error_messages.emplace_back(stmt->res->error);
107: 		return SQL_ERROR;
108: 	}
109: 	stmt->open = true;
110: 	if (ret == SQL_STILL_EXECUTING) {
111: 		return SQL_STILL_EXECUTING;
112: 	}
113: 	return SQL_SUCCESS;
114: }
115: 
116: SQLRETURN duckdb::FetchStmtResult(SQLHSTMT statement_handle, SQLSMALLINT fetch_orientation, SQLLEN fetch_offset) {
117: 	return duckdb::WithStatementResult(statement_handle, [&](duckdb::OdbcHandleStmt *stmt) -> SQLRETURN {
118: 		if (!stmt->open) {
119: 			return SQL_NO_DATA;
120: 		}
121: 		SQLRETURN ret = stmt->odbc_fetcher->Fetch(statement_handle, stmt, fetch_orientation, fetch_offset);
122: 		if (!SQL_SUCCEEDED(ret)) {
123: 			return ret;
124: 		}
125: 
126: 		stmt->odbc_fetcher->AssertCurrentChunk();
127: 		return SQL_SUCCESS;
128: 	});
129: }
130: 
131: //! Static fuctions used by GetDataStmtResult //
132: 
133: static bool ValidateType(LogicalTypeId input, LogicalTypeId expected, duckdb::OdbcHandleStmt *stmt) {
134: 	if (input != expected) {
135: 		stmt->error_messages.emplace_back("Type mismatch error: received " + LogicalTypeIdToString(input) +
136: 		                                  ", but expected " + LogicalTypeIdToString(expected));
137: 		return false;
138: 	}
139: 	return true;
140: }
141: 
142: static void LogInvalidCast(const LogicalType &from_type, const LogicalType &to_type, duckdb::OdbcHandleStmt *stmt) {
143: 	string msg = "Not implemented Error: Unimplemented type for cast (" + from_type.ToString() + " -> " +
144: 	             to_type.ToString() + ")";
145: 	stmt->error_messages.emplace_back(msg);
146: }
147: 
148: template <class SRC, class DEST = SRC>
149: static SQLRETURN GetInternalValue(duckdb::OdbcHandleStmt *stmt, const duckdb::Value &val, const LogicalType &type,
150:                                   SQLPOINTER target_value_ptr, SQLLEN *str_len_or_ind_ptr) {
151: 	// https://docs.microsoft.com/en-us/sql/odbc/reference/syntax/sqlbindcol-function
152: 	// When the driver returns fixed-length data, such as an integer or a date structure, the driver ignores
153: 	// BufferLength... D_ASSERT(((size_t)buffer_length) >= sizeof(DEST));
154: 	try {
155: 		auto casted_value = val.CastAs(type).GetValue<SRC>();
156: 		Store<DEST>(casted_value, (duckdb::data_ptr_t)target_value_ptr);
157: 		if (str_len_or_ind_ptr) {
158: 			*str_len_or_ind_ptr = sizeof(casted_value);
159: 		}
160: 		return SQL_SUCCESS;
161: 	} catch (std::exception &ex) {
162: 		stmt->error_messages.emplace_back(ex.what());
163: 		return SQL_ERROR;
164: 	}
165: }
166: 
167: template <class CAST_OP, typename TARGET_TYPE, class CAST_FUNC = std::function<timestamp_t(int64_t)>>
168: static bool CastTimestampValue(duckdb::OdbcHandleStmt *stmt, const duckdb::Value &val, TARGET_TYPE &target,
169:                                CAST_FUNC cast_timestamp_fun) {
170: 	try {
171: 		timestamp_t timestamp = cast_timestamp_fun(val.GetValue<int64_t>());
172: 		target = CAST_OP::template Operation<timestamp_t, TARGET_TYPE>(timestamp);
173: 		return true;
174: 	} catch (duckdb::Exception &ex) {
175: 		stmt->error_messages.emplace_back(ex.what());
176: 		return false;
177: 	}
178: }
179: 
180: SQLRETURN GetVariableValue(const std::string &val_str, SQLUSMALLINT col_idx, duckdb::OdbcHandleStmt *stmt,
181:                            SQLPOINTER target_value_ptr, SQLLEN buffer_length, SQLLEN *str_len_or_ind_ptr) {
182: 	if (!target_value_ptr) {
183: 		return OdbcUtils::SetStringValueLength(val_str, str_len_or_ind_ptr);
184: 	}
185: 
186: 	SQLRETURN ret = SQL_SUCCESS;
187: 	stmt->odbc_fetcher->SetLastFetchedVariableVal((duckdb::row_t)col_idx);
188: 
189: 	auto last_len = stmt->odbc_fetcher->GetLastFetchedLength();
190: 	// case already reached the end of the current variable value, reset the length
191: 	if (last_len >= val_str.size()) {
192: 		last_len = 0;
193: 	}
194: 
195: 	auto out_len = duckdb::MinValue(val_str.size() - last_len, (size_t)buffer_length);
196: 	memcpy((char *)target_value_ptr, val_str.c_str() + last_len, out_len);
197: 
198: 	if (out_len == (size_t)buffer_length) {
199: 		ret = SQL_SUCCESS_WITH_INFO;
200: 		out_len = buffer_length - 1;
201: 		last_len += out_len;
202: 		stmt->error_messages.emplace_back("SQLGetData returned with info.");
203: 	} else {
204: 		last_len = 0;
205: 	}
206: 
207: 	// null terminator char
208: 	((char *)target_value_ptr)[out_len] = '\0';
209: 	stmt->odbc_fetcher->SetLastFetchedLength(last_len);
210: 
211: 	if (str_len_or_ind_ptr) {
212: 		*str_len_or_ind_ptr = out_len;
213: 	}
214: 
215: 	return ret;
216: }
217: 
218: SQLRETURN duckdb::GetDataStmtResult(SQLHSTMT statement_handle, SQLUSMALLINT col_or_param_num, SQLSMALLINT target_type,
219:                                     SQLPOINTER target_value_ptr, SQLLEN buffer_length, SQLLEN *str_len_or_ind_ptr) {
220: 
221: 	return duckdb::WithStatementResult(statement_handle, [&](duckdb::OdbcHandleStmt *stmt) -> SQLRETURN {
222: 		if (!target_value_ptr && !OdbcUtils::IsCharType(target_type)) {
223: 			return SQL_ERROR;
224: 		}
225: 
226: 		Value val;
227: 		stmt->odbc_fetcher->GetValue(col_or_param_num - 1, val);
228: 		if (val.IsNull()) {
229: 			if (!str_len_or_ind_ptr) {
230: 				return SQL_ERROR;
231: 			}
232: 			*str_len_or_ind_ptr = SQL_NULL_DATA;
233: 			return SQL_SUCCESS;
234: 		}
235: 
236: 		switch (target_type) {
237: 		case SQL_C_SSHORT:
238: 			return GetInternalValue<int16_t, SQLSMALLINT>(stmt, val, LogicalType::SMALLINT, target_value_ptr,
239: 			                                              str_len_or_ind_ptr);
240: 		case SQL_C_USHORT:
241: 			return GetInternalValue<uint16_t, SQLUSMALLINT>(stmt, val, LogicalType::USMALLINT, target_value_ptr,
242: 			                                                str_len_or_ind_ptr);
243: 		case SQL_C_LONG:
244: 		case SQL_C_SLONG:
245: 			return GetInternalValue<int32_t, SQLINTEGER>(stmt, val, LogicalType::INTEGER, target_value_ptr,
246: 			                                             str_len_or_ind_ptr);
247: 		case SQL_C_ULONG:
248: 			return GetInternalValue<uint32_t, SQLUINTEGER>(stmt, val, LogicalType::UINTEGER, target_value_ptr,
249: 			                                               str_len_or_ind_ptr);
250: 		case SQL_C_FLOAT:
251: 			return GetInternalValue<float, SQLREAL>(stmt, val, LogicalType::FLOAT, target_value_ptr,
252: 			                                        str_len_or_ind_ptr);
253: 		case SQL_C_DOUBLE:
254: 			return GetInternalValue<double, SQLFLOAT>(stmt, val, LogicalType::DOUBLE, target_value_ptr,
255: 			                                          str_len_or_ind_ptr);
256: 		case SQL_C_BIT: {
257: 			LogicalType char_type = LogicalType(LogicalTypeId::CHAR);
258: 			return GetInternalValue<SQLCHAR>(stmt, val, char_type, target_value_ptr, str_len_or_ind_ptr);
259: 		}
260: 		case SQL_C_STINYINT:
261: 			return GetInternalValue<int8_t, SQLSCHAR>(stmt, val, LogicalType::TINYINT, target_value_ptr,
262: 			                                          str_len_or_ind_ptr);
263: 		case SQL_C_UTINYINT:
264: 			return GetInternalValue<uint8_t, uint8_t>(stmt, val, LogicalType::UTINYINT, target_value_ptr,
265: 			                                          str_len_or_ind_ptr);
266: 		case SQL_C_SBIGINT:
267: 			return GetInternalValue<int64_t, SQLBIGINT>(stmt, val, LogicalType::BIGINT, target_value_ptr,
268: 			                                            str_len_or_ind_ptr);
269: 		case SQL_C_UBIGINT:
270: 			// case SQL_C_BOOKMARK: // same ODBC type (\\TODO we don't support bookmark types)
271: 			return GetInternalValue<uint64_t, SQLUBIGINT>(stmt, val, LogicalType::UBIGINT, target_value_ptr,
272: 			                                              str_len_or_ind_ptr);
273: 		case SQL_C_WCHAR: {
274: 			std::string str = val.GetValue<std::string>();
275: 			if (!target_value_ptr) {
276: 				return OdbcUtils::SetStringValueLength(str, str_len_or_ind_ptr);
277: 			}
278: 
279: 			SQLRETURN ret = SQL_SUCCESS;
280: 
281: 			std::wstring_convert<std::codecvt_utf8_utf16<char16_t>, char16_t> converter_utf16;
282: 			std::u16string utf16_str = converter_utf16.from_bytes(str.data());
283: 			auto out_len = duckdb::MinValue(utf16_str.size(), (size_t)buffer_length);
284: 			// reserving two bytes for each char
285: 			out_len *= 2;
286: 			// check space for 2 null terminator char
287: 			if (out_len > (size_t)(buffer_length - 2)) {
288: 				out_len = buffer_length - 2;
289: 				// check odd length
290: 				if ((out_len % 2) != 0) {
291: 					out_len -= 1;
292: 				}
293: 				ret = SQL_SUCCESS_WITH_INFO;
294: 				stmt->error_messages.emplace_back("SQLGetData returned with info.");
295: 			}
296: 			memcpy((char *)target_value_ptr, (char *)utf16_str.c_str(), out_len);
297: 
298: 			// null terminator char
299: 			((char *)target_value_ptr)[out_len] = '\0';
300: 			((char *)target_value_ptr)[out_len + 1] = '\0';
301: 
302: 			if (str_len_or_ind_ptr) {
303: 				*str_len_or_ind_ptr = out_len;
304: 			}
305: 			return ret;
306: 		}
307: 		// case SQL_C_VARBOOKMARK: // same ODBC type (\\TODO we don't support bookmark types)
308: 		case SQL_C_BINARY: {
309: 			// threating binary values as BLOB type
310: 			string blob = duckdb::Blob::ToBlob(duckdb::string_t(val.GetValue<string>().c_str()));
311: 			return GetVariableValue(blob, col_or_param_num, stmt, target_value_ptr, buffer_length, str_len_or_ind_ptr);
312: 		}
313: 		case SQL_C_CHAR: {
314: 			std::string val_str = val.GetValue<std::string>();
315: 			return GetVariableValue(val_str, col_or_param_num, stmt, target_value_ptr, buffer_length,
316: 			                        str_len_or_ind_ptr);
317: 		}
318: 		case SQL_C_NUMERIC: {
319: 			if (!ValidateType(val.type().id(), LogicalTypeId::DECIMAL, stmt)) {
320: 				return SQL_ERROR;
321: 			}
322: 			SQL_NUMERIC_STRUCT *numeric = (SQL_NUMERIC_STRUCT *)target_value_ptr;
323: 			auto dataptr = (duckdb::data_ptr_t)numeric->val;
324: 			// reset numeric val to remove some garbage
325: 			memset(dataptr, '\0', SQL_MAX_NUMERIC_LEN);
326: 
327: 			numeric->sign = 1;
328: 			numeric->precision = numeric->scale = 0;
329: 
330: 			string str_val = val.ToString();
331: 			auto width = str_val.size();
332: 
333: 			if (str_val[0] == '-') {
334: 				numeric->sign = 0;
335: 				str_val.erase(std::remove(str_val.begin(), str_val.end(), '-'), str_val.end());
336: 				// uncounting negative signal '-'
337: 				--width;
338: 			}
339: 
340: 			auto pos_dot = str_val.find('.');
341: 			if (pos_dot != string::npos) {
342: 				str_val.erase(std::remove(str_val.begin(), str_val.end(), '.'), str_val.end());
343: 				numeric->scale = str_val.size() - pos_dot;
344: 
345: 				string str_fraction = str_val.substr(pos_dot);
346: 				// case all digits in fraction is 0, remove them
347: 				if (std::stoi(str_fraction) == 0) {
348: 					str_val.erase(str_val.begin() + pos_dot, str_val.end());
349: 				}
350: 				width = str_val.size();
351: 			}
352: 			numeric->precision = width;
353: 
354: 			string_t str_t(str_val.c_str(), width);
355: 			if (numeric->precision <= Decimal::MAX_WIDTH_INT64) {
356: 				int64_t val_i64;
357: 				if (!duckdb::TryCast::Operation(str_t, val_i64)) {
358: 					return SQL_ERROR;
359: 				}
360: 				memcpy(dataptr, &val_i64, sizeof(val_i64));
361: 			} else {
362: 				hugeint_t huge_int;
363: 				string error_message;
364: 				if (!duckdb::TryCastToDecimal::Operation<string_t, hugeint_t>(str_t, huge_int, &error_message,
365: 				                                                              numeric->precision, numeric->scale)) {
366: 					return SQL_ERROR;
367: 				}
368: 				memcpy(dataptr, &huge_int.lower, sizeof(huge_int.lower));
369: 				memcpy(dataptr + sizeof(huge_int.lower), &huge_int.upper, sizeof(huge_int.upper));
370: 			}
371: 
372: 			if (str_len_or_ind_ptr) {
373: 				*str_len_or_ind_ptr = sizeof(SQL_NUMERIC_STRUCT);
374: 			}
375: 			return SQL_SUCCESS;
376: 		}
377: 		case SQL_C_TYPE_DATE: {
378: 			date_t date;
379: 			switch (val.type().id()) {
380: 			case LogicalTypeId::DATE:
381: 				date = val.GetValue<date_t>();
382: 				break;
383: 			case LogicalTypeId::TIMESTAMP_SEC: {
384: 				if (!CastTimestampValue<duckdb::Cast, date_t>(stmt, val, date, duckdb::Timestamp::FromEpochSeconds)) {
385: 					return SQL_ERROR;
386: 				}
387: 				break;
388: 			}
389: 			case LogicalTypeId::TIMESTAMP_MS: {
390: 				if (!CastTimestampValue<duckdb::Cast, date_t>(stmt, val, date, duckdb::Timestamp::FromEpochMs)) {
391: 					return SQL_ERROR;
392: 				}
393: 				break;
394: 			}
395: 			case LogicalTypeId::TIMESTAMP: {
396: 				if (!CastTimestampValue<duckdb::Cast, date_t>(stmt, val, date,
397: 				                                              duckdb::Timestamp::FromEpochMicroSeconds)) {
398: 					return SQL_ERROR;
399: 				}
400: 				break;
401: 			}
402: 			case LogicalTypeId::TIMESTAMP_NS: {
403: 				if (!CastTimestampValue<duckdb::Cast, date_t>(stmt, val, date,
404: 				                                              duckdb::Timestamp::FromEpochNanoSeconds)) {
405: 					return SQL_ERROR;
406: 				}
407: 				break;
408: 			}
409: 			case LogicalTypeId::VARCHAR: {
410: 				string val_str = val.GetValue<string>();
411: 				auto str_input = string_t(val_str);
412: 				if (!TryCast::Operation<string_t, date_t>(str_input, date)) {
413: 					stmt->error_messages.emplace_back(CastExceptionText<string_t, date_t>(str_input));
414: 					return SQL_ERROR;
415: 				}
416: 				break;
417: 			}
418: 			default:
419: 				LogInvalidCast(val.type(), LogicalType::DATE, stmt);
420: 				return SQL_ERROR;
421: 			} // end switch "val.type().id()": SQL_C_TYPE_DATE
422: 
423: 			SQL_DATE_STRUCT *date_struct = (SQL_DATE_STRUCT *)target_value_ptr;
424: 			int32_t year, month, day;
425: 			Date::Convert(date, year, month, day);
426: 			date_struct->year = year;
427: 			date_struct->month = month;
428: 			date_struct->day = day;
429: 			if (str_len_or_ind_ptr) {
430: 				*str_len_or_ind_ptr = sizeof(SQL_DATE_STRUCT);
431: 			}
432: 			return SQL_SUCCESS;
433: 		}
434: 		case SQL_C_TYPE_TIME: {
435: 			dtime_t time;
436: 			switch (val.type().id()) {
437: 			case LogicalTypeId::TIME:
438: 				time = val.GetValue<dtime_t>();
439: 				break;
440: 			case LogicalTypeId::TIMESTAMP_SEC: {
441: 				if (!CastTimestampValue<duckdb::Cast, dtime_t>(stmt, val, time, duckdb::Timestamp::FromEpochSeconds)) {
442: 					return SQL_ERROR;
443: 				}
444: 				break;
445: 			}
446: 			case LogicalTypeId::TIMESTAMP_MS: {
447: 				if (!CastTimestampValue<duckdb::Cast, dtime_t>(stmt, val, time, duckdb::Timestamp::FromEpochMs)) {
448: 					return SQL_ERROR;
449: 				}
450: 				break;
451: 			}
452: 			case LogicalTypeId::TIMESTAMP: {
453: 				if (!CastTimestampValue<duckdb::Cast, dtime_t>(stmt, val, time,
454: 				                                               duckdb::Timestamp::FromEpochMicroSeconds)) {
455: 					return SQL_ERROR;
456: 				}
457: 				break;
458: 			}
459: 			case LogicalTypeId::TIMESTAMP_NS: {
460: 				if (!CastTimestampValue<duckdb::Cast, dtime_t>(stmt, val, time,
461: 				                                               duckdb::Timestamp::FromEpochNanoSeconds)) {
462: 					return SQL_ERROR;
463: 				}
464: 				break;
465: 			}
466: 			case LogicalTypeId::VARCHAR: {
467: 				string val_str = val.GetValue<string>();
468: 				auto str_input = string_t(val_str);
469: 				if (!TryCast::Operation<string_t, dtime_t>(str_input, time)) {
470: 					stmt->error_messages.emplace_back(CastExceptionText<string_t, dtime_t>(str_input));
471: 					return SQL_ERROR;
472: 				}
473: 				break;
474: 			}
475: 			default:
476: 				LogInvalidCast(val.type(), LogicalType::TIME, stmt);
477: 				return SQL_ERROR;
478: 			} // end switch "val.type().id()": SQL_C_TYPE_TIME
479: 
480: 			SQL_TIME_STRUCT *time_struct = (SQL_TIME_STRUCT *)target_value_ptr;
481: 			int32_t hour, minute, second, micros;
482: 			duckdb::Time::Convert(time, hour, minute, second, micros);
483: 
484: 			time_struct->hour = hour;
485: 			time_struct->minute = minute;
486: 			time_struct->second = second;
487: 			if (str_len_or_ind_ptr) {
488: 				*str_len_or_ind_ptr = sizeof(SQL_TIME_STRUCT);
489: 			}
490: 			return SQL_SUCCESS;
491: 		}
492: 		case SQL_C_TYPE_TIMESTAMP: {
493: 			timestamp_t timestamp;
494: 			switch (val.type().id()) {
495: 			case LogicalTypeId::TIMESTAMP_SEC:
496: 				timestamp = duckdb::Timestamp::FromEpochSeconds(val.GetValue<int64_t>());
497: 				break;
498: 			case LogicalTypeId::TIMESTAMP_MS:
499: 				timestamp = duckdb::Timestamp::FromEpochMs(val.GetValue<int64_t>());
500: 				break;
501: 			case LogicalTypeId::TIMESTAMP:
502: 				timestamp = duckdb::Timestamp::FromEpochMicroSeconds(val.GetValue<int64_t>());
503: 				break;
504: 			case LogicalTypeId::TIMESTAMP_NS:
505: 				timestamp = duckdb::Timestamp::FromEpochNanoSeconds(val.GetValue<int64_t>());
506: 				break;
507: 			case LogicalTypeId::DATE: {
508: 				auto date_input = val.GetValue<date_t>();
509: 				if (!TryCast::Operation<date_t, timestamp_t>(date_input, timestamp)) {
510: 					stmt->error_messages.emplace_back(CastExceptionText<date_t, timestamp_t>(date_input));
511: 					return SQL_ERROR;
512: 				}
513: 				break;
514: 			}
515: 			case LogicalTypeId::VARCHAR: {
516: 				string val_str = val.GetValue<string>();
517: 				auto str_input = string_t(val_str);
518: 				if (!TryCast::Operation<string_t, timestamp_t>(str_input, timestamp)) {
519: 					stmt->error_messages.emplace_back(CastExceptionText<string_t, timestamp_t>(str_input));
520: 					return SQL_ERROR;
521: 				}
522: 				break;
523: 			}
524: 			default:
525: 				LogInvalidCast(val.type(), LogicalType::TIMESTAMP, stmt);
526: 				return SQL_ERROR;
527: 			} // end switch "val.type().id()"
528: 
529: 			SQL_TIMESTAMP_STRUCT *timestamp_struct = (SQL_TIMESTAMP_STRUCT *)target_value_ptr;
530: 			date_t date = duckdb::Timestamp::GetDate(timestamp);
531: 
532: 			int32_t year, month, day;
533: 			Date::Convert(date, year, month, day);
534: 			timestamp_struct->year = year;
535: 			timestamp_struct->month = month;
536: 			timestamp_struct->day = day;
537: 
538: 			dtime_t time = duckdb::Timestamp::GetTime(timestamp);
539: 			int32_t hour, minute, second, micros;
540: 			duckdb::Time::Convert(time, hour, minute, second, micros);
541: 			timestamp_struct->hour = hour;
542: 			timestamp_struct->minute = minute;
543: 			timestamp_struct->second = second;
544: 			timestamp_struct->fraction = micros;
545: 			if (str_len_or_ind_ptr) {
546: 				*str_len_or_ind_ptr = sizeof(SQL_TIMESTAMP_STRUCT);
547: 			}
548: 
549: 			return SQL_SUCCESS;
550: 		}
551: 		case SQL_C_INTERVAL_YEAR: {
552: 			interval_t interval;
553: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
554: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
555: 				return SQL_ERROR;
556: 			}
557: 
558: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
559: 			OdbcInterval::SetYear(interval, interval_struct);
560: 			OdbcInterval::SetSignal(interval, interval_struct);
561: 
562: 			if (str_len_or_ind_ptr) {
563: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
564: 			}
565: 
566: 			return SQL_SUCCESS;
567: 		}
568: 		case SQL_C_INTERVAL_MONTH: {
569: 			interval_t interval;
570: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
571: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
572: 				return SQL_ERROR;
573: 			}
574: 
575: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
576: 			OdbcInterval::SetMonth(interval, interval_struct);
577: 			OdbcInterval::SetSignal(interval, interval_struct);
578: 
579: 			if (str_len_or_ind_ptr) {
580: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
581: 			}
582: 
583: 			return SQL_SUCCESS;
584: 		}
585: 		case SQL_C_INTERVAL_DAY: {
586: 			interval_t interval;
587: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
588: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
589: 				return SQL_ERROR;
590: 			}
591: 
592: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
593: 			OdbcInterval::SetDay(interval, interval_struct);
594: 			OdbcInterval::SetSignal(interval, interval_struct);
595: 
596: 			if (str_len_or_ind_ptr) {
597: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
598: 			}
599: 
600: 			return SQL_SUCCESS;
601: 		}
602: 		case SQL_C_INTERVAL_HOUR: {
603: 			interval_t interval;
604: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
605: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
606: 				return SQL_ERROR;
607: 			}
608: 
609: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
610: 			OdbcInterval::SetHour(interval, interval_struct);
611: 			OdbcInterval::SetSignal(interval, interval_struct);
612: 
613: 			if (str_len_or_ind_ptr) {
614: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
615: 			}
616: 
617: 			return SQL_SUCCESS;
618: 		}
619: 		case SQL_C_INTERVAL_MINUTE: {
620: 			interval_t interval;
621: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
622: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
623: 				return SQL_ERROR;
624: 			}
625: 
626: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
627: 			OdbcInterval::SetMinute(interval, interval_struct);
628: 			OdbcInterval::SetSignal(interval, interval_struct);
629: 
630: 			if (str_len_or_ind_ptr) {
631: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
632: 			}
633: 
634: 			return SQL_SUCCESS;
635: 		}
636: 		case SQL_C_INTERVAL_SECOND: {
637: 			interval_t interval;
638: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
639: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
640: 				return SQL_ERROR;
641: 			}
642: 
643: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
644: 			OdbcInterval::SetSecond(interval, interval_struct);
645: 			OdbcInterval::SetSignal(interval, interval_struct);
646: 
647: 			if (str_len_or_ind_ptr) {
648: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
649: 			}
650: 
651: 			return SQL_SUCCESS;
652: 		}
653: 		case SQL_C_INTERVAL_YEAR_TO_MONTH: {
654: 			interval_t interval;
655: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
656: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
657: 				return SQL_ERROR;
658: 			}
659: 
660: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
661: 			OdbcInterval::SetYear(interval, interval_struct);
662: 			// fraction of years stored as months
663: 			interval_struct->intval.year_month.month = std::abs(interval.months) % duckdb::Interval::MONTHS_PER_YEAR;
664: 			interval_struct->interval_type = SQLINTERVAL::SQL_IS_YEAR_TO_MONTH;
665: 			OdbcInterval::SetSignal(interval, interval_struct);
666: 
667: 			if (str_len_or_ind_ptr) {
668: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
669: 			}
670: 
671: 			return SQL_SUCCESS;
672: 		}
673: 		case SQL_C_INTERVAL_DAY_TO_HOUR: {
674: 			interval_t interval;
675: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
676: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
677: 				return SQL_ERROR;
678: 			}
679: 
680: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
681: 			OdbcInterval::SetDayToHour(interval, interval_struct);
682: 			OdbcInterval::SetSignal(interval, interval_struct);
683: 
684: 			if (str_len_or_ind_ptr) {
685: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
686: 			}
687: 
688: 			return SQL_SUCCESS;
689: 		}
690: 		case SQL_C_INTERVAL_DAY_TO_MINUTE: {
691: 			interval_t interval;
692: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
693: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
694: 				return SQL_ERROR;
695: 			}
696: 
697: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
698: 			OdbcInterval::SetDayToMinute(interval, interval_struct);
699: 			OdbcInterval::SetSignal(interval, interval_struct);
700: 
701: 			if (str_len_or_ind_ptr) {
702: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
703: 			}
704: 
705: 			return SQL_SUCCESS;
706: 		}
707: 		case SQL_C_INTERVAL_DAY_TO_SECOND: {
708: 			interval_t interval;
709: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
710: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
711: 				return SQL_ERROR;
712: 			}
713: 
714: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
715: 			OdbcInterval::SetDayToSecond(interval, interval_struct);
716: 			OdbcInterval::SetSignal(interval, interval_struct);
717: 
718: 			if (str_len_or_ind_ptr) {
719: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
720: 			}
721: 
722: 			return SQL_SUCCESS;
723: 		}
724: 		case SQL_C_INTERVAL_HOUR_TO_MINUTE: {
725: 			interval_t interval;
726: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
727: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
728: 				return SQL_ERROR;
729: 			}
730: 
731: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
732: 			OdbcInterval::SetHourToMinute(interval, interval_struct);
733: 			OdbcInterval::SetSignal(interval, interval_struct);
734: 
735: 			if (str_len_or_ind_ptr) {
736: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
737: 			}
738: 
739: 			return SQL_SUCCESS;
740: 		}
741: 		case SQL_C_INTERVAL_HOUR_TO_SECOND: {
742: 			interval_t interval;
743: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
744: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
745: 				return SQL_ERROR;
746: 			}
747: 
748: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
749: 			OdbcInterval::SetHourToSecond(interval, interval_struct);
750: 			OdbcInterval::SetSignal(interval, interval_struct);
751: 
752: 			if (str_len_or_ind_ptr) {
753: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
754: 			}
755: 
756: 			return SQL_SUCCESS;
757: 		}
758: 		case SQL_C_INTERVAL_MINUTE_TO_SECOND: {
759: 			interval_t interval;
760: 			if (!OdbcInterval::GetInterval(val, interval, stmt)) {
761: 				LogInvalidCast(val.type(), LogicalType::INTERVAL, stmt);
762: 				return SQL_ERROR;
763: 			}
764: 
765: 			SQL_INTERVAL_STRUCT *interval_struct = (SQL_INTERVAL_STRUCT *)target_value_ptr;
766: 			OdbcInterval::SetMinuteToSecond(interval, interval_struct);
767: 			OdbcInterval::SetSignal(interval, interval_struct);
768: 
769: 			if (str_len_or_ind_ptr) {
770: 				*str_len_or_ind_ptr = sizeof(SQL_INTERVAL_STRUCT);
771: 			}
772: 
773: 			return SQL_SUCCESS;
774: 		}
775: 		// TODO other types
776: 		default:
777: 			stmt->error_messages.emplace_back("Unsupported type.");
778: 			return SQL_ERROR;
779: 
780: 		} // end switch "(target_type)": SQL_C_TYPE_TIMESTAMP
781: 	});
782: }
783: 
784: SQLRETURN duckdb::ExecDirectStmt(SQLHSTMT statement_handle, SQLCHAR *statement_text, SQLINTEGER text_length) {
785: 	auto prepare_status = duckdb::PrepareStmt(statement_handle, statement_text, text_length);
786: 	if (prepare_status != SQL_SUCCESS) {
787: 		return SQL_ERROR;
788: 	}
789: 
790: 	auto execute_status = duckdb::BatchExecuteStmt(statement_handle);
791: 	if (execute_status != SQL_SUCCESS) {
792: 		return SQL_ERROR;
793: 	}
794: 	return SQL_SUCCESS;
795: }
796: 
797: SQLRETURN duckdb::ExecuteStmt(SQLHSTMT statement_handle) {
798: 	return duckdb::WithStatement(statement_handle,
799: 	                             [&](duckdb::OdbcHandleStmt *stmt) { return duckdb::BatchExecuteStmt(stmt); });
800: }
801: 
802: SQLRETURN duckdb::BindParameterStmt(SQLHSTMT statement_handle, SQLUSMALLINT parameter_number,
803:                                     SQLSMALLINT input_output_type, SQLSMALLINT value_type, SQLSMALLINT parameter_type,
804:                                     SQLULEN column_size, SQLSMALLINT decimal_digits, SQLPOINTER parameter_value_ptr,
805:                                     SQLLEN buffer_length, SQLLEN *str_len_or_ind_ptr) {
806: 	return duckdb::WithStatement(statement_handle, [&](duckdb::OdbcHandleStmt *stmt) {
807: 		if (input_output_type != SQL_PARAM_INPUT) {
808: 			stmt->error_messages.emplace_back("Output parameters are not supported.");
809: 			return SQL_ERROR;
810: 		}
811: 		/* check input parameters */
812: 		if (parameter_number < 1) {
813: 			stmt->error_messages.emplace_back("Invalid descriptor index.");
814: 			return SQL_ERROR;
815: 		}
816: 		idx_t param_idx = parameter_number - 1;
817: 
818: 		//! New descriptor
819: 		auto ipd_record = stmt->param_desc->ipd->GetDescRecord(param_idx);
820: 		auto apd_record = stmt->param_desc->apd->GetDescRecord(param_idx);
821: 
822: 		ipd_record->sql_desc_parameter_type = input_output_type;
823: 		ipd_record->sql_desc_length = column_size;
824: 		ipd_record->sql_desc_precision = column_size;
825: 		ipd_record->sql_desc_scale = decimal_digits;
826: 		if (value_type == SQL_DECIMAL || value_type == SQL_NUMERIC || value_type == SQL_FLOAT ||
827: 		    value_type == SQL_REAL || value_type == SQL_DOUBLE) {
828: 			ipd_record->sql_desc_precision = column_size;
829: 		}
830: 
831: 		if (ipd_record->SetValueType(parameter_type) == SQL_ERROR ||
832: 		    apd_record->SetValueType(value_type) == SQL_ERROR) {
833: 			stmt->error_messages.emplace_back("Error while binding parameter/value type.");
834: 			return SQL_ERROR;
835: 		}
836: 
837: 		apd_record->sql_desc_data_ptr = parameter_value_ptr;
838: 		apd_record->sql_desc_octet_length = buffer_length;
839: 		apd_record->sql_desc_indicator_ptr = str_len_or_ind_ptr;
840: 		apd_record->sql_desc_octet_length_ptr = str_len_or_ind_ptr;
841: 
842: 		return SQL_SUCCESS;
843: 	});
844: }
845: 
846: SQLRETURN duckdb::CloseStmt(duckdb::OdbcHandleStmt *stmt) {
847: 	stmt->Close();
848: 	return SQL_SUCCESS;
849: }
[end of tools/odbc/statement_functions.cpp]
[start of tools/pythonpkg/src/pyconnection.cpp]
1: #include "duckdb_python/pyconnection.hpp"
2: #include "duckdb_python/pyresult.hpp"
3: #include "duckdb_python/pyrelation.hpp"
4: #include "duckdb_python/pandas_scan.hpp"
5: #include "duckdb_python/map.hpp"
6: 
7: #include "duckdb/common/arrow.hpp"
8: #include "duckdb_python/arrow_array_stream.hpp"
9: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
10: #include "duckdb/main/client_context.hpp"
11: #include "duckdb/parser/parsed_data/create_table_function_info.hpp"
12: #include "duckdb/common/types/vector.hpp"
13: #include "duckdb/common/printer.hpp"
14: #include "duckdb/main/config.hpp"
15: #include "duckdb/parser/expression/constant_expression.hpp"
16: #include "duckdb/parser/expression/function_expression.hpp"
17: #include "duckdb/parser/tableref/table_function_ref.hpp"
18: #include "duckdb/parser/parser.hpp"
19: 
20: #include "datetime.h" // from Python
21: 
22: #include <random>
23: 
24: namespace duckdb {
25: 
26: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::default_connection = nullptr;
27: 
28: void DuckDBPyConnection::Initialize(py::handle &m) {
29: 	py::class_<DuckDBPyConnection, shared_ptr<DuckDBPyConnection>>(m, "DuckDBPyConnection", py::module_local())
30: 	    .def("cursor", &DuckDBPyConnection::Cursor, "Create a duplicate of the current connection")
31: 	    .def("duplicate", &DuckDBPyConnection::Cursor, "Create a duplicate of the current connection")
32: 	    .def("execute", &DuckDBPyConnection::Execute,
33: 	         "Execute the given SQL query, optionally using prepared statements with parameters set", py::arg("query"),
34: 	         py::arg("parameters") = py::list(), py::arg("multiple_parameter_sets") = false)
35: 	    .def("executemany", &DuckDBPyConnection::ExecuteMany,
36: 	         "Execute the given prepared statement multiple times using the list of parameter sets in parameters",
37: 	         py::arg("query"), py::arg("parameters") = py::list())
38: 	    .def("close", &DuckDBPyConnection::Close, "Close the connection")
39: 	    .def("fetchone", &DuckDBPyConnection::FetchOne, "Fetch a single row from a result following execute")
40: 	    .def("fetchall", &DuckDBPyConnection::FetchAll, "Fetch all rows from a result following execute")
41: 	    .def("fetchnumpy", &DuckDBPyConnection::FetchNumpy, "Fetch a result as list of NumPy arrays following execute")
42: 	    .def("fetchdf", &DuckDBPyConnection::FetchDF, "Fetch a result as Data.Frame following execute()")
43: 	    .def("fetch_df", &DuckDBPyConnection::FetchDF, "Fetch a result as Data.Frame following execute()")
44: 	    .def("fetch_df_chunk", &DuckDBPyConnection::FetchDFChunk,
45: 	         "Fetch a chunk of the result as Data.Frame following execute()", py::arg("vectors_per_chunk") = 1)
46: 	    .def("df", &DuckDBPyConnection::FetchDF, "Fetch a result as Data.Frame following execute()")
47: 	    .def("fetch_arrow_table", &DuckDBPyConnection::FetchArrow, "Fetch a result as Arrow table following execute()")
48: 	    .def("fetch_arrow_chunk", &DuckDBPyConnection::FetchArrowChunk,
49: 	         "Fetch a chunk of the result as an Arrow Table following execute()", py::arg("vectors_per_chunk") = 1,
50: 	         py::arg("return_table") = false)
51: 	    .def("fetch_record_batch", &DuckDBPyConnection::FetchRecordBatchReader,
52: 	         "Fetch an Arrow RecordBatchReader following execute()", py::arg("approx_batch_size") = 1)
53: 	    .def("arrow", &DuckDBPyConnection::FetchArrow, "Fetch a result as Arrow table following execute()")
54: 	    .def("begin", &DuckDBPyConnection::Begin, "Start a new transaction")
55: 	    .def("commit", &DuckDBPyConnection::Commit, "Commit changes performed within a transaction")
56: 	    .def("rollback", &DuckDBPyConnection::Rollback, "Roll back changes performed within a transaction")
57: 	    .def("append", &DuckDBPyConnection::Append, "Append the passed Data.Frame to the named table",
58: 	         py::arg("table_name"), py::arg("df"))
59: 	    .def("register", &DuckDBPyConnection::RegisterPythonObject,
60: 	         "Register the passed Python Object value for querying with a view", py::arg("view_name"),
61: 	         py::arg("python_object"), py::arg("rows_per_thread") = 1000000)
62: 	    .def("unregister", &DuckDBPyConnection::UnregisterPythonObject, "Unregister the view name",
63: 	         py::arg("view_name"))
64: 	    .def("table", &DuckDBPyConnection::Table, "Create a relation object for the name'd table",
65: 	         py::arg("table_name"))
66: 	    .def("view", &DuckDBPyConnection::View, "Create a relation object for the name'd view", py::arg("view_name"))
67: 	    .def("values", &DuckDBPyConnection::Values, "Create a relation object from the passed values",
68: 	         py::arg("values"))
69: 	    .def("table_function", &DuckDBPyConnection::TableFunction,
70: 	         "Create a relation object from the name'd table function with given parameters", py::arg("name"),
71: 	         py::arg("parameters") = py::list())
72: 	    .def("from_query", &DuckDBPyConnection::FromQuery, "Create a relation object from the given SQL query",
73: 	         py::arg("query"), py::arg("alias") = "query_relation")
74: 	    .def("query", &DuckDBPyConnection::RunQuery,
75: 	         "Run a SQL query. If it is a SELECT statement, create a relation object from the given SQL query, "
76: 	         "otherwise run the query as-is.",
77: 	         py::arg("query"), py::arg("alias") = "query_relation")
78: 	    .def("from_df", &DuckDBPyConnection::FromDF, "Create a relation object from the Data.Frame in df",
79: 	         py::arg("df") = py::none())
80: 	    .def("from_arrow_table", &DuckDBPyConnection::FromArrowTable, "Create a relation object from an Arrow table",
81: 	         py::arg("table"), py::arg("rows_per_thread") = 1000000)
82: 	    .def("df", &DuckDBPyConnection::FromDF, "Create a relation object from the Data.Frame in df (alias of from_df)",
83: 	         py::arg("df"))
84: 	    .def("from_csv_auto", &DuckDBPyConnection::FromCsvAuto,
85: 	         "Create a relation object from the CSV file in file_name", py::arg("file_name"))
86: 	    .def("from_parquet", &DuckDBPyConnection::FromParquet,
87: 	         "Create a relation object from the Parquet file in file_name", py::arg("file_name"),
88: 	         py::arg("binary_as_string") = false)
89: 	    .def_property_readonly("description", &DuckDBPyConnection::GetDescription,
90: 	                           "Get result set attributes, mainly column names");
91: 
92: 	PyDateTime_IMPORT;
93: }
94: 
95: DuckDBPyConnection *DuckDBPyConnection::ExecuteMany(const string &query, py::object params) {
96: 	Execute(query, std::move(params), true);
97: 	return this;
98: }
99: 
100: DuckDBPyConnection *DuckDBPyConnection::Execute(const string &query, py::object params, bool many) {
101: 	if (!connection) {
102: 		throw std::runtime_error("connection closed");
103: 	}
104: 	if (std::this_thread::get_id() != thread_id) {
105: 		throw std::runtime_error("DuckDB objects created in a thread can only be used in that same thread. The object "
106: 		                         "was created in thread id " +
107: 		                         to_string(std::hash<std::thread::id> {}(thread_id)) + " and this is thread id " +
108: 		                         to_string(std::hash<std::thread::id> {}(std::this_thread::get_id())));
109: 	}
110: 	result = nullptr;
111: 	unique_ptr<PreparedStatement> prep;
112: 	{
113: 		py::gil_scoped_release release;
114: 		auto statements = connection->ExtractStatements(query);
115: 		if (statements.empty()) {
116: 			// no statements to execute
117: 			return this;
118: 		}
119: 		// if there are multiple statements, we directly execute the statements besides the last one
120: 		// we only return the result of the last statement to the user, unless one of the previous statements fails
121: 		for (idx_t i = 0; i + 1 < statements.size(); i++) {
122: 			auto res = connection->Query(move(statements[i]));
123: 			if (!res->success) {
124: 				throw std::runtime_error(res->error);
125: 			}
126: 		}
127: 
128: 		prep = connection->Prepare(move(statements.back()));
129: 		if (!prep->success) {
130: 			throw std::runtime_error(prep->error);
131: 		}
132: 	}
133: 
134: 	// this is a list of a list of parameters in executemany
135: 	py::list params_set;
136: 	if (!many) {
137: 		params_set = py::list(1);
138: 		params_set[0] = params;
139: 	} else {
140: 		params_set = params;
141: 	}
142: 
143: 	for (pybind11::handle single_query_params : params_set) {
144: 		if (prep->n_param != py::len(single_query_params)) {
145: 			throw std::runtime_error("Prepared statement needs " + to_string(prep->n_param) + " parameters, " +
146: 			                         to_string(py::len(single_query_params)) + " given");
147: 		}
148: 		auto args = DuckDBPyConnection::TransformPythonParamList(single_query_params);
149: 		auto res = make_unique<DuckDBPyResult>();
150: 		{
151: 			py::gil_scoped_release release;
152: 			res->result = prep->Execute(args);
153: 			if (!res->result->success) {
154: 				throw std::runtime_error(res->result->error);
155: 			}
156: 		}
157: 
158: 		if (!many) {
159: 			result = move(res);
160: 		}
161: 	}
162: 	return this;
163: }
164: 
165: DuckDBPyConnection *DuckDBPyConnection::Append(const string &name, py::object value) {
166: 	RegisterPythonObject("__append_df", std::move(value));
167: 	return Execute("INSERT INTO \"" + name + "\" SELECT * FROM __append_df");
168: }
169: 
170: DuckDBPyConnection *DuckDBPyConnection::RegisterPythonObject(const string &name, py::object python_object,
171:                                                              const idx_t rows_per_tuple) {
172: 	if (!connection) {
173: 		throw std::runtime_error("connection closed");
174: 	}
175: 	auto py_object_type = string(py::str(python_object.get_type().attr("__name__")));
176: 
177: 	if (py_object_type == "DataFrame") {
178: 		{
179: 			py::gil_scoped_release release;
180: 			connection->TableFunction("pandas_scan", {Value::POINTER((uintptr_t)python_object.ptr())})
181: 			    ->CreateView(name, true, true);
182: 		}
183: 
184: 		// keep a reference
185: 		auto object = make_unique<RegisteredObject>(python_object);
186: 		registered_objects[name] = move(object);
187: 	} else if (py_object_type == "Table" || py_object_type == "FileSystemDataset" ||
188: 	           py_object_type == "InMemoryDataset") {
189: 		auto stream_factory = make_unique<PythonTableArrowArrayStreamFactory>(python_object.ptr());
190: 
191: 		auto stream_factory_produce = PythonTableArrowArrayStreamFactory::Produce;
192: 		{
193: 			py::gil_scoped_release release;
194: 			connection
195: 			    ->TableFunction("arrow_scan",
196: 			                    {Value::POINTER((uintptr_t)stream_factory.get()),
197: 			                     Value::POINTER((uintptr_t)stream_factory_produce), Value::UBIGINT(rows_per_tuple)})
198: 			    ->CreateView(name, true, true);
199: 		}
200: 		auto object = make_unique<RegisteredArrow>(move(stream_factory), move(python_object));
201: 		registered_objects[name] = move(object);
202: 	} else {
203: 		throw std::runtime_error("Python Object " + py_object_type + " not suitable to be registered as a view");
204: 	}
205: 	return this;
206: }
207: 
208: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromQuery(const string &query, const string &alias) {
209: 	if (!connection) {
210: 		throw std::runtime_error("connection closed");
211: 	}
212: 	const char *duckdb_query_error = R"(duckdb.from_query cannot be used to run arbitrary SQL queries.
213: It can only be used to run individual SELECT statements, and converts the result of that SELECT
214: statement into a Relation object.
215: Use duckdb.query to run arbitrary SQL queries.)";
216: 	return make_unique<DuckDBPyRelation>(connection->RelationFromQuery(query, alias, duckdb_query_error));
217: }
218: 
219: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::RunQuery(const string &query, const string &alias) {
220: 	if (!connection) {
221: 		throw std::runtime_error("connection closed");
222: 	}
223: 	Parser parser(connection->context->GetParserOptions());
224: 	parser.ParseQuery(query);
225: 	if (parser.statements.size() == 1 && parser.statements[0]->type == StatementType::SELECT_STATEMENT) {
226: 		return make_unique<DuckDBPyRelation>(connection->RelationFromQuery(
227: 		    unique_ptr_cast<SQLStatement, SelectStatement>(move(parser.statements[0])), alias));
228: 	}
229: 	Execute(query);
230: 	if (result) {
231: 		FetchAll();
232: 	}
233: 	return nullptr;
234: }
235: 
236: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Table(const string &tname) {
237: 	if (!connection) {
238: 		throw std::runtime_error("connection closed");
239: 	}
240: 	return make_unique<DuckDBPyRelation>(connection->Table(tname));
241: }
242: 
243: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::Values(py::object params) {
244: 	if (!connection) {
245: 		throw std::runtime_error("connection closed");
246: 	}
247: 	vector<vector<Value>> values {DuckDBPyConnection::TransformPythonParamList(std::move(params))};
248: 	return make_unique<DuckDBPyRelation>(connection->Values(values));
249: }
250: 
251: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::View(const string &vname) {
252: 	if (!connection) {
253: 		throw std::runtime_error("connection closed");
254: 	}
255: 	return make_unique<DuckDBPyRelation>(connection->View(vname));
256: }
257: 
258: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::TableFunction(const string &fname, py::object params) {
259: 	if (!connection) {
260: 		throw std::runtime_error("connection closed");
261: 	}
262: 
263: 	return make_unique<DuckDBPyRelation>(
264: 	    connection->TableFunction(fname, DuckDBPyConnection::TransformPythonParamList(std::move(params))));
265: }
266: 
267: static std::string GenerateRandomName() {
268: 	std::random_device rd;
269: 	std::mt19937 gen(rd());
270: 	std::uniform_int_distribution<> dis(0, 15);
271: 
272: 	std::stringstream ss;
273: 	int i;
274: 	ss << std::hex;
275: 	for (i = 0; i < 16; i++) {
276: 		ss << dis(gen);
277: 	}
278: 	return ss.str();
279: }
280: 
281: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromDF(py::object value) {
282: 	if (!connection) {
283: 		throw std::runtime_error("connection closed");
284: 	}
285: 	string name = "df_" + GenerateRandomName();
286: 	registered_objects[name] = make_unique<RegisteredObject>(value);
287: 	vector<Value> params;
288: 	params.emplace_back(Value::POINTER((uintptr_t)value.ptr()));
289: 	return make_unique<DuckDBPyRelation>(connection->TableFunction("pandas_scan", params)->Alias(name));
290: }
291: 
292: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromCsvAuto(const string &filename) {
293: 	if (!connection) {
294: 		throw std::runtime_error("connection closed");
295: 	}
296: 	vector<Value> params;
297: 	params.emplace_back(filename);
298: 	return make_unique<DuckDBPyRelation>(connection->TableFunction("read_csv_auto", params)->Alias(filename));
299: }
300: 
301: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromParquet(const string &filename, bool binary_as_string) {
302: 	if (!connection) {
303: 		throw std::runtime_error("connection closed");
304: 	}
305: 	vector<Value> params;
306: 	params.emplace_back(filename);
307: 	named_parameter_map_t named_parameters({{"binary_as_string", Value::BOOLEAN(binary_as_string)}});
308: 	return make_unique<DuckDBPyRelation>(
309: 	    connection->TableFunction("parquet_scan", params, named_parameters)->Alias(filename));
310: }
311: 
312: unique_ptr<DuckDBPyRelation> DuckDBPyConnection::FromArrowTable(py::object &table, const idx_t rows_per_tuple) {
313: 	if (!connection) {
314: 		throw std::runtime_error("connection closed");
315: 	}
316: 	py::gil_scoped_acquire acquire;
317: 	string name = "arrow_table_" + GenerateRandomName();
318: 
319: 	auto stream_factory = make_unique<PythonTableArrowArrayStreamFactory>(table.ptr());
320: 
321: 	auto stream_factory_produce = PythonTableArrowArrayStreamFactory::Produce;
322: 	auto rel = make_unique<DuckDBPyRelation>(
323: 	    connection
324: 	        ->TableFunction("arrow_scan",
325: 	                        {Value::POINTER((uintptr_t)stream_factory.get()),
326: 	                         Value::POINTER((uintptr_t)stream_factory_produce), Value::UBIGINT(rows_per_tuple)})
327: 	        ->Alias(name));
328: 	registered_objects[name] = make_unique<RegisteredArrow>(move(stream_factory), table);
329: 	return rel;
330: }
331: 
332: DuckDBPyConnection *DuckDBPyConnection::UnregisterPythonObject(const string &name) {
333: 	registered_objects.erase(name);
334: 	py::gil_scoped_release release;
335: 	if (connection) {
336: 		connection->Query("DROP VIEW \"" + name + "\"");
337: 	}
338: 	return this;
339: }
340: 
341: DuckDBPyConnection *DuckDBPyConnection::Begin() {
342: 	Execute("BEGIN TRANSACTION");
343: 	return this;
344: }
345: 
346: DuckDBPyConnection *DuckDBPyConnection::Commit() {
347: 	if (connection->context->transaction.IsAutoCommit()) {
348: 		return this;
349: 	}
350: 	Execute("COMMIT");
351: 	return this;
352: }
353: 
354: DuckDBPyConnection *DuckDBPyConnection::Rollback() {
355: 	Execute("ROLLBACK");
356: 	return this;
357: }
358: 
359: py::object DuckDBPyConnection::GetDescription() {
360: 	if (!result) {
361: 		return py::none();
362: 	}
363: 	return result->Description();
364: }
365: 
366: void DuckDBPyConnection::Close() {
367: 	result = nullptr;
368: 	connection = nullptr;
369: 	database = nullptr;
370: 	for (auto &cur : cursors) {
371: 		cur->Close();
372: 	}
373: 	cursors.clear();
374: }
375: 
376: // cursor() is stupid
377: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Cursor() {
378: 	auto res = make_shared<DuckDBPyConnection>(thread_id);
379: 	res->database = database;
380: 	res->connection = connection;
381: 	cursors.push_back(res);
382: 	return res;
383: }
384: 
385: // these should be functions on the result but well
386: py::object DuckDBPyConnection::FetchOne() {
387: 	if (!result) {
388: 		throw std::runtime_error("no open result set");
389: 	}
390: 	return result->Fetchone();
391: }
392: 
393: py::list DuckDBPyConnection::FetchAll() {
394: 	if (!result) {
395: 		throw std::runtime_error("no open result set");
396: 	}
397: 	return result->Fetchall();
398: }
399: 
400: py::dict DuckDBPyConnection::FetchNumpy() {
401: 	if (!result) {
402: 		throw std::runtime_error("no open result set");
403: 	}
404: 	return result->FetchNumpyInternal();
405: }
406: py::object DuckDBPyConnection::FetchDF() {
407: 	if (!result) {
408: 		throw std::runtime_error("no open result set");
409: 	}
410: 	return result->FetchDF();
411: }
412: 
413: py::object DuckDBPyConnection::FetchDFChunk(const idx_t vectors_per_chunk) const {
414: 	if (!result) {
415: 		throw std::runtime_error("no open result set");
416: 	}
417: 	return result->FetchDFChunk(vectors_per_chunk);
418: }
419: 
420: py::object DuckDBPyConnection::FetchArrow() {
421: 	if (!result) {
422: 		throw std::runtime_error("no open result set");
423: 	}
424: 	return result->FetchArrowTable();
425: }
426: 
427: py::object DuckDBPyConnection::FetchArrowChunk(const idx_t vectors_per_chunk, bool return_table) const {
428: 	if (!result) {
429: 		throw std::runtime_error("no open result set");
430: 	}
431: 	return result->FetchArrowTableChunk(vectors_per_chunk, return_table);
432: }
433: 
434: py::object DuckDBPyConnection::FetchRecordBatchReader(const idx_t approx_batch_size) const {
435: 	if (!result) {
436: 		throw std::runtime_error("no open result set");
437: 	}
438: 	return result->FetchRecordBatchReader(approx_batch_size);
439: }
440: static unique_ptr<TableFunctionRef>
441: TryReplacement(py::dict &dict, py::str &table_name,
442:                unordered_map<string, unique_ptr<RegisteredObject>> &registered_objects) {
443: 	if (!dict.contains(table_name)) {
444: 		// not present in the globals
445: 		return nullptr;
446: 	}
447: 	auto entry = dict[table_name];
448: 	auto py_object_type = string(py::str(entry.get_type().attr("__name__")));
449: 	auto table_function = make_unique<TableFunctionRef>();
450: 	vector<unique_ptr<ParsedExpression>> children;
451: 	if (py_object_type == "DataFrame") {
452: 		string name = "df_" + GenerateRandomName();
453: 		children.push_back(make_unique<ConstantExpression>(Value::POINTER((uintptr_t)entry.ptr())));
454: 		table_function->function = make_unique<FunctionExpression>("pandas_scan", move(children));
455: 		// keep a reference
456: 		auto object = make_unique<RegisteredObject>(entry);
457: 		registered_objects[name] = move(object);
458: 	} else if (py_object_type == "Table" || py_object_type == "FileSystemDataset" ||
459: 	           py_object_type == "InMemoryDataset") {
460: 		string name = "arrow_" + GenerateRandomName();
461: 		auto stream_factory = make_unique<PythonTableArrowArrayStreamFactory>(entry.ptr());
462: 		auto stream_factory_produce = PythonTableArrowArrayStreamFactory::Produce;
463: 		children.push_back(make_unique<ConstantExpression>(Value::POINTER((uintptr_t)stream_factory.get())));
464: 		children.push_back(make_unique<ConstantExpression>(Value::POINTER((uintptr_t)stream_factory_produce)));
465: 		children.push_back(make_unique<ConstantExpression>(Value::UBIGINT(1000000)));
466: 		table_function->function = make_unique<FunctionExpression>("arrow_scan", move(children));
467: 		registered_objects[name] = make_unique<RegisteredArrow>(move(stream_factory), entry);
468: 	} else {
469: 		throw std::runtime_error("Python Object " + py_object_type + " not suitable for replacement scans");
470: 	}
471: 	return table_function;
472: }
473: 
474: static unique_ptr<TableFunctionRef> ScanReplacement(const string &table_name, void *data) {
475: 	py::gil_scoped_acquire acquire;
476: 	auto registered_objects = (unordered_map<string, unique_ptr<RegisteredObject>> *)data;
477: 	auto py_table_name = py::str(table_name);
478: 	// Here we do an exhaustive search on the frame lineage
479: 	auto current_frame = py::module::import("inspect").attr("currentframe")();
480: 	while (hasattr(current_frame, "f_locals")) {
481: 		auto local_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_locals"));
482: 		// search local dictionary
483: 		if (local_dict) {
484: 			auto result = TryReplacement(local_dict, py_table_name, *registered_objects);
485: 			if (result) {
486: 				return result;
487: 			}
488: 		}
489: 		// search global dictionary
490: 		auto global_dict = py::reinterpret_borrow<py::dict>(current_frame.attr("f_globals"));
491: 		if (global_dict) {
492: 			auto result = TryReplacement(global_dict, py_table_name, *registered_objects);
493: 			if (result) {
494: 				return result;
495: 			}
496: 		}
497: 		current_frame = current_frame.attr("f_back");
498: 	}
499: 	// Not found :(
500: 	return nullptr;
501: }
502: 
503: shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const string &database, bool read_only,
504:                                                            const py::dict &config_dict) {
505: 	auto res = make_shared<DuckDBPyConnection>();
506: 	DBConfig config;
507: 	if (read_only) {
508: 		config.access_mode = AccessMode::READ_ONLY;
509: 	}
510: 	for (auto &kv : config_dict) {
511: 		string key = py::str(kv.first);
512: 		string val = py::str(kv.second);
513: 		auto config_property = DBConfig::GetOptionByName(key);
514: 		if (!config_property) {
515: 			throw InvalidInputException("Unrecognized configuration property \"%s\"", key);
516: 		}
517: 		config.SetOption(*config_property, Value(val));
518: 	}
519: 	if (config.enable_external_access) {
520: 		config.replacement_scans.emplace_back(ScanReplacement, (void *)&res->registered_objects);
521: 	}
522: 
523: 	res->database = make_unique<DuckDB>(database, &config);
524: 	res->connection = make_unique<Connection>(*res->database);
525: 
526: 	PandasScanFunction scan_fun;
527: 	CreateTableFunctionInfo scan_info(scan_fun);
528: 
529: 	MapFunction map_fun;
530: 	CreateTableFunctionInfo map_info(map_fun);
531: 
532: 	auto &context = *res->connection->context;
533: 	auto &catalog = Catalog::GetCatalog(context);
534: 	context.transaction.BeginTransaction();
535: 	catalog.CreateTableFunction(context, &scan_info);
536: 	catalog.CreateTableFunction(context, &map_info);
537: 
538: 	context.transaction.Commit();
539: 
540: 	return res;
541: }
542: 
543: vector<Value> DuckDBPyConnection::TransformPythonParamList(py::handle params) {
544: 	vector<Value> args;
545: 
546: 	auto datetime_mod = py::module::import("datetime");
547: 	auto datetime_date = datetime_mod.attr("date");
548: 	auto datetime_datetime = datetime_mod.attr("datetime");
549: 	auto datetime_time = datetime_mod.attr("time");
550: 	auto decimal_mod = py::module::import("decimal");
551: 	auto decimal_decimal = decimal_mod.attr("Decimal");
552: 
553: 	for (pybind11::handle ele : params) {
554: 		if (ele.is_none()) {
555: 			args.emplace_back();
556: 		} else if (py::isinstance<py::bool_>(ele)) {
557: 			args.push_back(Value::BOOLEAN(ele.cast<bool>()));
558: 		} else if (py::isinstance<py::int_>(ele)) {
559: 			args.push_back(Value::BIGINT(ele.cast<int64_t>()));
560: 		} else if (py::isinstance<py::float_>(ele)) {
561: 			args.push_back(Value::DOUBLE(ele.cast<double>()));
562: 		} else if (py::isinstance(ele, decimal_decimal)) {
563: 			args.emplace_back(py::str(ele).cast<string>());
564: 		} else if (py::isinstance(ele, datetime_datetime)) {
565: 			auto year = PyDateTime_GET_YEAR(ele.ptr());
566: 			auto month = PyDateTime_GET_MONTH(ele.ptr());
567: 			auto day = PyDateTime_GET_DAY(ele.ptr());
568: 			auto hour = PyDateTime_DATE_GET_HOUR(ele.ptr());
569: 			auto minute = PyDateTime_DATE_GET_MINUTE(ele.ptr());
570: 			auto second = PyDateTime_DATE_GET_SECOND(ele.ptr());
571: 			auto micros = PyDateTime_DATE_GET_MICROSECOND(ele.ptr());
572: 			args.push_back(Value::TIMESTAMP(year, month, day, hour, minute, second, micros));
573: 		} else if (py::isinstance(ele, datetime_time)) {
574: 			auto hour = PyDateTime_TIME_GET_HOUR(ele.ptr());
575: 			auto minute = PyDateTime_TIME_GET_MINUTE(ele.ptr());
576: 			auto second = PyDateTime_TIME_GET_SECOND(ele.ptr());
577: 			auto micros = PyDateTime_TIME_GET_MICROSECOND(ele.ptr());
578: 			args.push_back(Value::TIME(hour, minute, second, micros));
579: 		} else if (py::isinstance(ele, datetime_date)) {
580: 			auto year = PyDateTime_GET_YEAR(ele.ptr());
581: 			auto month = PyDateTime_GET_MONTH(ele.ptr());
582: 			auto day = PyDateTime_GET_DAY(ele.ptr());
583: 			args.push_back(Value::DATE(year, month, day));
584: 		} else if (py::isinstance<py::str>(ele)) {
585: 			args.emplace_back(ele.cast<string>());
586: 		} else if (py::isinstance<py::memoryview>(ele)) {
587: 			py::memoryview py_view = ele.cast<py::memoryview>();
588: 			PyObject *py_view_ptr = py_view.ptr();
589: 			Py_buffer *py_buf = PyMemoryView_GET_BUFFER(py_view_ptr);
590: 			args.emplace_back(Value::BLOB(const_data_ptr_t(py_buf->buf), idx_t(py_buf->len)));
591: 		} else if (py::isinstance<py::bytes>(ele)) {
592: 			const string &ele_string = ele.cast<string>();
593: 			args.emplace_back(Value::BLOB(const_data_ptr_t(ele_string.data()), ele_string.size()));
594: 		} else {
595: 			throw std::runtime_error("unknown param type " + py::str(ele.get_type()).cast<string>());
596: 		}
597: 	}
598: 	return args;
599: }
600: 
601: DuckDBPyConnection *DuckDBPyConnection::DefaultConnection() {
602: 	if (!default_connection) {
603: 		py::dict config_dict;
604: 		default_connection = DuckDBPyConnection::Connect(":memory:", false, config_dict);
605: 	}
606: 	return default_connection.get();
607: }
608: 
609: void DuckDBPyConnection::Cleanup() {
610: 	default_connection.reset();
611: }
612: 
613: } // namespace duckdb
[end of tools/pythonpkg/src/pyconnection.cpp]
[start of tools/pythonpkg/src/pyrelation.cpp]
1: #include "duckdb_python/pyrelation.hpp"
2: #include "duckdb_python/pyconnection.hpp"
3: #include "duckdb_python/pyresult.hpp"
4: #include "duckdb/parser/qualified_name.hpp"
5: #include "duckdb/main/client_context.hpp"
6: 
7: namespace duckdb {
8: 
9: void DuckDBPyRelation::Initialize(py::handle &m) {
10: 	py::class_<DuckDBPyRelation>(m, "DuckDBPyRelation", py::module_local())
11: 	    .def_property_readonly("type", &DuckDBPyRelation::Type, "Get the type of the relation.")
12: 	    .def_property_readonly("columns", &DuckDBPyRelation::Columns, "Get the names of the columns of this relation.")
13: 	    .def_property_readonly("types", &DuckDBPyRelation::ColumnTypes, "Get the columns types of the result.")
14: 	    .def_property_readonly("dtypes", &DuckDBPyRelation::ColumnTypes, "Get the columns types of the result.")
15: 	    .def("__len__", &DuckDBPyRelation::Length, "Number of rows in relation.")
16: 	    .def_property_readonly("shape", &DuckDBPyRelation::Shape, " Tuple of # of rows, # of columns in relation.")
17: 	    .def("filter", &DuckDBPyRelation::Filter, "Filter the relation object by the filter in filter_expr",
18: 	         py::arg("filter_expr"))
19: 	    .def("project", &DuckDBPyRelation::Project, "Project the relation object by the projection in project_expr",
20: 	         py::arg("project_expr"))
21: 	    .def("set_alias", &DuckDBPyRelation::SetAlias, "Rename the relation object to new alias", py::arg("alias"))
22: 	    .def_property_readonly("alias", &DuckDBPyRelation::GetAlias, "Get the name of the current alias")
23: 	    .def("order", &DuckDBPyRelation::Order, "Reorder the relation object by order_expr", py::arg("order_expr"))
24: 	    .def("aggregate", &DuckDBPyRelation::Aggregate,
25: 	         "Compute the aggregate aggr_expr by the optional groups group_expr on the relation", py::arg("aggr_expr"),
26: 	         py::arg("group_expr") = "")
27: 	    .def(
28: 	        "sum", &DuckDBPyRelation::Sum,
29: 	        "Compute the aggregate sum of a single column or a list of columns  by the optional groups on the relation",
30: 	        py::arg("sum_aggr"), py::arg("group_expr") = "")
31: 	    .def("count", &DuckDBPyRelation::Count,
32: 	         "Compute the aggregate count of a single column or a list of columns  by the optional groups on the "
33: 	         "relation",
34: 	         py::arg("count_aggr"), py::arg("group_expr") = "")
35: 	    .def("median", &DuckDBPyRelation::Median,
36: 	         "Compute the aggregate median of a single column or a list of columns by the optional groups on the "
37: 	         "relation",
38: 	         py::arg("median_aggr"), py::arg("group_expr") = "")
39: 	    .def("quantile", &DuckDBPyRelation::Quantile,
40: 	         "Compute the quantile of a single column or a list of columns  by the optional groups on the relation",
41: 	         py::arg("q"), py::arg("quantile_aggr"), py::arg("group_expr") = "")
42: 	    .def("apply", &DuckDBPyRelation::GenericAggregator,
43: 	         "Compute the function of a single column or a list of columns  by the optional groups on the relation",
44: 	         py::arg("function_name"), py::arg("function_aggr"), py::arg("group_expr") = "",
45: 	         py::arg("function_parameter") = "", py::arg("projected_columns") = "")
46: 	    .def("min", &DuckDBPyRelation::Min,
47: 	         "Compute the aggregate min of a single column or a list of columns by the optional groups on the relation",
48: 	         py::arg("min_aggr"), py::arg("group_expr") = "")
49: 	    .def("max", &DuckDBPyRelation::Max,
50: 	         "Compute the aggregate max of a single column or a list of columns by the optional groups on the relation",
51: 	         py::arg("max_aggr"), py::arg("group_expr") = "")
52: 	    .def(
53: 	        "mean", &DuckDBPyRelation::Mean,
54: 	        "Compute the aggregate mean of a single column or a list of columns by the optional groups on the relation",
55: 	        py::arg("mean_aggr"), py::arg("group_expr") = "")
56: 	    .def("var", &DuckDBPyRelation::Var,
57: 	         "Compute the variance of a single column or a list of columns by the optional groups on the relation",
58: 	         py::arg("var_aggr"), py::arg("group_expr") = "")
59: 	    .def("std", &DuckDBPyRelation::STD,
60: 	         "Compute the standard deviation of a single column or a list of columns by the optional groups on the "
61: 	         "relation",
62: 	         py::arg("std_aggr"), py::arg("group_expr") = "")
63: 	    .def("value_counts", &DuckDBPyRelation::ValueCounts, "Count number of rows with each unique value of variable",
64: 	         py::arg("value_counts_aggr"), py::arg("group_expr") = "")
65: 	    .def("mad", &DuckDBPyRelation::MAD,
66: 	         "Returns the median absolute deviation for the  aggregate columns. NULL values are ignored. Temporal "
67: 	         "types return a positive INTERVAL.",
68: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
69: 	    .def("mode", &DuckDBPyRelation::Mode,
70: 	         "Returns the most frequent value for the aggregate columns. NULL values are ignored.",
71: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
72: 	    .def("abs", &DuckDBPyRelation::Abs,
73: 	         "Returns the most absolute value for the  aggregate columns. NULL values are ignored.",
74: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
75: 	    .def("prod", &DuckDBPyRelation::Prod, "Calculates the product of the aggregate column.",
76: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
77: 	    .def("skew", &DuckDBPyRelation::Skew, "Returns the skewness of the aggregate column.",
78: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
79: 	    .def("kurt", &DuckDBPyRelation::Kurt, "Returns the excess kurtosis of the aggregate column.",
80: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
81: 	    .def("sem", &DuckDBPyRelation::SEM, "Returns the standard error of the mean of the aggregate column.",
82: 	         py::arg("aggregation_columns"), py::arg("group_columns") = "")
83: 	    .def("unique", &DuckDBPyRelation::Unique, "Number of distinct values in a column.", py::arg("unique_aggr"))
84: 	    .def("cumsum", &DuckDBPyRelation::CumSum, "Returns the cumulative sum of the aggregate column.",
85: 	         py::arg("aggregation_columns"))
86: 	    .def("cumprod", &DuckDBPyRelation::CumProd, "Returns the cumulative product of the aggregate column.",
87: 	         py::arg("aggregation_columns"))
88: 	    .def("cummax", &DuckDBPyRelation::CumMax, "Returns the cumulative maximum of the aggregate column.",
89: 	         py::arg("aggregation_columns"))
90: 	    .def("cummin", &DuckDBPyRelation::CumMin, "Returns the cumulative minimum of the aggregate column.",
91: 	         py::arg("aggregation_columns"))
92: 	    .def("describe", &DuckDBPyRelation::Describe,
93: 	         "Gives basic statistics (e.g., min,max) and if null exists for each column of the relation.")
94: 	    .def("union", &DuckDBPyRelation::Union,
95: 	         "Create the set union of this relation object with another relation object in other_rel")
96: 	    .def("except_", &DuckDBPyRelation::Except,
97: 	         "Create the set except of this relation object with another relation object in other_rel",
98: 	         py::arg("other_rel"))
99: 	    .def("intersect", &DuckDBPyRelation::Intersect,
100: 	         "Create the set intersection of this relation object with another relation object in other_rel",
101: 	         py::arg("other_rel"))
102: 	    .def("join", &DuckDBPyRelation::Join,
103: 	         "Join the relation object with another relation object in other_rel using the join condition expression "
104: 	         "in join_condition. Types supported are 'inner' and 'left'",
105: 	         py::arg("other_rel"), py::arg("condition"), py::arg("how") = "inner")
106: 	    .def("distinct", &DuckDBPyRelation::Distinct, "Retrieve distinct rows from this relation object")
107: 	    .def("limit", &DuckDBPyRelation::Limit, "Only retrieve the first n rows from this relation object",
108: 	         py::arg("n"))
109: 	    .def("query", &DuckDBPyRelation::Query,
110: 	         "Run the given SQL query in sql_query on the view named virtual_table_name that refers to the relation "
111: 	         "object",
112: 	         py::arg("virtual_table_name"), py::arg("sql_query"))
113: 	    .def("execute", &DuckDBPyRelation::Execute, "Transform the relation into a result set")
114: 	    .def("write_csv", &DuckDBPyRelation::WriteCsv, "Write the relation object to a CSV file in file_name",
115: 	         py::arg("file_name"))
116: 	    .def("insert_into", &DuckDBPyRelation::InsertInto,
117: 	         "Inserts the relation object into an existing table named table_name", py::arg("table_name"))
118: 	    .def("insert", &DuckDBPyRelation::Insert, "Inserts the given values into the relation", py::arg("values"))
119: 	    .def("create", &DuckDBPyRelation::Create,
120: 	         "Creates a new table named table_name with the contents of the relation object", py::arg("table_name"))
121: 	    .def("create_view", &DuckDBPyRelation::CreateView,
122: 	         "Creates a view named view_name that refers to the relation object", py::arg("view_name"),
123: 	         py::arg("replace") = true)
124: 	    .def("to_arrow_table", &DuckDBPyRelation::ToArrowTable, "Transforms the relation object into a Arrow table")
125: 	    .def("arrow", &DuckDBPyRelation::ToArrowTable, "Transforms the relation object into a Arrow table")
126: 	    .def("to_df", &DuckDBPyRelation::ToDF, "Transforms the relation object into a Data.Frame")
127: 	    .def("df", &DuckDBPyRelation::ToDF, "Transforms the relation object into a Data.Frame")
128: 	    .def("fetchone", &DuckDBPyRelation::Fetchone, "Execute and fetch a single row")
129: 	    .def("fetchall", &DuckDBPyRelation::Fetchall, "Execute and fetch all rows")
130: 	    .def("map", &DuckDBPyRelation::Map, py::arg("map_function"), "Calls the passed function on the relation")
131: 	    .def("__str__", &DuckDBPyRelation::Print)
132: 	    .def("__repr__", &DuckDBPyRelation::Print);
133: }
134: 
135: DuckDBPyRelation::DuckDBPyRelation(shared_ptr<Relation> rel) : rel(move(rel)) {
136: }
137: 
138: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromDf(py::object df, DuckDBPyConnection *conn) {
139: 	return conn->FromDF(std::move(df));
140: }
141: 
142: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Values(py::object values, DuckDBPyConnection *conn) {
143: 	return conn->Values(std::move(values));
144: }
145: 
146: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromQuery(const string &query, const string &alias,
147:                                                          DuckDBPyConnection *conn) {
148: 	return conn->FromQuery(query, alias);
149: }
150: 
151: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::RunQuery(const string &query, const string &alias,
152:                                                         DuckDBPyConnection *conn) {
153: 	return conn->RunQuery(query, alias);
154: }
155: 
156: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromCsvAuto(const string &filename, DuckDBPyConnection *conn) {
157: 	return conn->FromCsvAuto(filename);
158: }
159: 
160: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromParquet(const string &filename, bool binary_as_string,
161:                                                            DuckDBPyConnection *conn) {
162: 	return conn->FromParquet(filename, binary_as_string);
163: }
164: 
165: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromParquetDefault(const string &filename, DuckDBPyConnection *conn) {
166: 	bool binary_as_string = false;
167: 	Value result;
168: 	if (conn->connection->context->TryGetCurrentSetting("binary_as_string", result)) {
169: 		binary_as_string = result.GetValue<bool>();
170: 	}
171: 	return conn->FromParquet(filename, binary_as_string);
172: }
173: 
174: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FromArrowTable(py::object &table, DuckDBPyConnection *conn) {
175: 	return conn->FromArrowTable(table);
176: }
177: 
178: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Project(const string &expr) {
179: 	return make_unique<DuckDBPyRelation>(rel->Project(expr));
180: }
181: 
182: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::ProjectDf(py::object df, const string &expr, DuckDBPyConnection *conn) {
183: 	return conn->FromDF(std::move(df))->Project(expr);
184: }
185: 
186: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::SetAlias(const string &expr) {
187: 	return make_unique<DuckDBPyRelation>(rel->Alias(expr));
188: }
189: 
190: py::str DuckDBPyRelation::GetAlias() {
191: 	return py::str(string(rel->GetAlias()));
192: }
193: 
194: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::AliasDF(py::object df, const string &expr, DuckDBPyConnection *conn) {
195: 	return conn->FromDF(std::move(df))->SetAlias(expr);
196: }
197: 
198: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Filter(const string &expr) {
199: 	return make_unique<DuckDBPyRelation>(rel->Filter(expr));
200: }
201: 
202: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::FilterDf(py::object df, const string &expr, DuckDBPyConnection *conn) {
203: 	return conn->FromDF(std::move(df))->Filter(expr);
204: }
205: 
206: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Limit(int64_t n) {
207: 	return make_unique<DuckDBPyRelation>(rel->Limit(n));
208: }
209: 
210: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::LimitDF(py::object df, int64_t n, DuckDBPyConnection *conn) {
211: 	return conn->FromDF(std::move(df))->Limit(n);
212: }
213: 
214: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Order(const string &expr) {
215: 	return make_unique<DuckDBPyRelation>(rel->Order(expr));
216: }
217: 
218: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::OrderDf(py::object df, const string &expr, DuckDBPyConnection *conn) {
219: 	return conn->FromDF(std::move(df))->Order(expr);
220: }
221: 
222: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Aggregate(const string &expr, const string &groups) {
223: 	if (!groups.empty()) {
224: 		return make_unique<DuckDBPyRelation>(rel->Aggregate(expr, groups));
225: 	}
226: 	return make_unique<DuckDBPyRelation>(rel->Aggregate(expr));
227: }
228: 
229: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Describe() {
230: 	string columns;
231: 	for (auto &column_rel : rel->Columns()) {
232: 		columns += column_rel.name + ",";
233: 	}
234: 	columns.erase(columns.size() - 1, columns.size());
235: 	auto expr = GenerateExpressionList("stats", columns);
236: 	return make_unique<DuckDBPyRelation>(rel->Project(expr)->Limit(1));
237: }
238: 
239: string DuckDBPyRelation::GenerateExpressionList(const string &function_name, const string &aggregated_columns,
240:                                                 const string &groups, const string &function_parameter,
241:                                                 const string &projected_columns, const string &window_function) {
242: 	auto input = StringUtil::Split(aggregated_columns, ',');
243: 	string expr;
244: 	if (!projected_columns.empty()) {
245: 		expr = projected_columns + ", ";
246: 	}
247: 	for (idx_t i = 0; i < input.size(); i++) {
248: 		if (function_parameter.empty()) {
249: 			expr += function_name + "(" + input[i] + ") " + window_function;
250: 		} else {
251: 			expr += function_name + "(" + input[i] + "," + function_parameter + ")" + window_function;
252: 		}
253: 
254: 		if (i < input.size() - 1) {
255: 			expr += ",";
256: 		}
257: 	}
258: 	return expr;
259: }
260: 
261: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::GenericAggregator(const string &function_name,
262:                                                                  const string &aggregated_columns, const string &groups,
263:                                                                  const string &function_parameter,
264:                                                                  const string &projected_columns) {
265: 
266: 	//! Construct Aggregation Expression
267: 	auto expr =
268: 	    GenerateExpressionList(function_name, aggregated_columns, groups, function_parameter, projected_columns);
269: 	return Aggregate(expr, groups);
270: }
271: 
272: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Sum(const string &sum_columns, const string &groups) {
273: 	return GenericAggregator("sum", sum_columns, groups);
274: }
275: 
276: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Count(const string &count_columns, const string &groups) {
277: 	return GenericAggregator("count", count_columns, groups);
278: }
279: 
280: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Median(const string &median_columns, const string &groups) {
281: 	return GenericAggregator("median", median_columns, groups);
282: }
283: 
284: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Quantile(const string &q, const string &quantile_columns,
285:                                                         const string &groups) {
286: 	return GenericAggregator("quantile", quantile_columns, groups, q);
287: }
288: 
289: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Min(const string &min_columns, const string &groups) {
290: 	return GenericAggregator("min", min_columns, groups);
291: }
292: 
293: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Max(const string &max_columns, const string &groups) {
294: 	return GenericAggregator("max", max_columns, groups);
295: }
296: 
297: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Mean(const string &mean_columns, const string &groups) {
298: 	return GenericAggregator("avg", mean_columns, groups);
299: }
300: 
301: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Var(const string &var_columns, const string &groups) {
302: 	return GenericAggregator("var_pop", var_columns, groups);
303: }
304: 
305: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::STD(const string &std_columns, const string &groups) {
306: 	return GenericAggregator("stddev_pop", std_columns, groups);
307: }
308: 
309: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::ValueCounts(const string &count_column, const string &groups) {
310: 	if (count_column.find(',') != string::npos) {
311: 		throw std::runtime_error("Only one column is accepted in Value_Counts method");
312: 	}
313: 	return GenericAggregator("count", count_column, groups, "", count_column);
314: }
315: 
316: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::MAD(const string &aggr_columns, const string &groups) {
317: 	return GenericAggregator("mad", aggr_columns, groups);
318: }
319: 
320: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Mode(const string &aggr_columns, const string &groups) {
321: 	return GenericAggregator("mode", aggr_columns, groups);
322: }
323: 
324: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Abs(const string &aggr_columns, const string &groups) {
325: 	return GenericAggregator("abs", aggr_columns, groups);
326: }
327: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Prod(const string &aggr_columns, const string &groups) {
328: 	return GenericAggregator("product", aggr_columns, groups);
329: }
330: 
331: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Skew(const string &aggr_columns, const string &groups) {
332: 	return GenericAggregator("skewness", aggr_columns, groups);
333: }
334: 
335: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Kurt(const string &aggr_columns, const string &groups) {
336: 	return GenericAggregator("kurtosis", aggr_columns, groups);
337: }
338: 
339: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::SEM(const string &aggr_columns, const string &groups) {
340: 	return GenericAggregator("sem", aggr_columns, groups);
341: }
342: 
343: idx_t DuckDBPyRelation::Length() {
344: 	auto query_result = GenericAggregator("count", "*")->Execute();
345: 	return query_result->result->Fetch()->GetValue(0, 0).GetValue<idx_t>();
346: }
347: 
348: py::tuple DuckDBPyRelation::Shape() {
349: 	auto length = Length();
350: 	return py::make_tuple(length, rel->Columns().size());
351: }
352: 
353: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Unique(const string &std_columns) {
354: 	return make_unique<DuckDBPyRelation>(rel->Project(std_columns)->Distinct());
355: }
356: 
357: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::GenericWindowFunction(const string &function_name,
358:                                                                      const string &aggr_columns) {
359: 	auto expr = GenerateExpressionList(function_name, aggr_columns, "", "", "",
360: 	                                   "over (rows between unbounded preceding and current row) ");
361: 	return make_unique<DuckDBPyRelation>(rel->Project(expr));
362: }
363: 
364: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::CumSum(const string &aggr_columns) {
365: 	return GenericWindowFunction("sum", aggr_columns);
366: }
367: 
368: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::CumProd(const string &aggr_columns) {
369: 	return GenericWindowFunction("product", aggr_columns);
370: }
371: 
372: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::CumMax(const string &aggr_columns) {
373: 	return GenericWindowFunction("max", aggr_columns);
374: }
375: 
376: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::CumMin(const string &aggr_columns) {
377: 	return GenericWindowFunction("min", aggr_columns);
378: }
379: 
380: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::AggregateDF(py::object df, const string &expr, const string &groups,
381:                                                            DuckDBPyConnection *conn) {
382: 	return conn->FromDF(std::move(df))->Aggregate(expr, groups);
383: }
384: 
385: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Distinct() {
386: 	return make_unique<DuckDBPyRelation>(rel->Distinct());
387: }
388: 
389: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::DistinctDF(py::object df, DuckDBPyConnection *conn) {
390: 	return conn->FromDF(std::move(df))->Distinct();
391: }
392: 
393: py::object DuckDBPyRelation::ToDF() {
394: 	auto res = make_unique<DuckDBPyResult>();
395: 	{
396: 		py::gil_scoped_release release;
397: 		res->result = rel->Execute();
398: 	}
399: 	if (!res->result->success) {
400: 		throw std::runtime_error(res->result->error);
401: 	}
402: 	return res->FetchDF();
403: }
404: 
405: py::object DuckDBPyRelation::Fetchone() {
406: 	auto res = make_unique<DuckDBPyResult>();
407: 	{
408: 		py::gil_scoped_release release;
409: 		res->result = rel->Execute();
410: 	}
411: 	if (!res->result->success) {
412: 		throw std::runtime_error(res->result->error);
413: 	}
414: 	return res->Fetchone();
415: }
416: 
417: py::object DuckDBPyRelation::Fetchall() {
418: 	auto res = make_unique<DuckDBPyResult>();
419: 	{
420: 		py::gil_scoped_release release;
421: 		res->result = rel->Execute();
422: 	}
423: 	if (!res->result->success) {
424: 		throw std::runtime_error(res->result->error);
425: 	}
426: 	return res->Fetchall();
427: }
428: 
429: py::object DuckDBPyRelation::ToArrowTable() {
430: 	auto res = make_unique<DuckDBPyResult>();
431: 	{
432: 		py::gil_scoped_release release;
433: 		res->result = rel->Execute();
434: 	}
435: 	if (!res->result->success) {
436: 		throw std::runtime_error(res->result->error);
437: 	}
438: 	return res->FetchArrowTable();
439: }
440: 
441: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Union(DuckDBPyRelation *other) {
442: 	return make_unique<DuckDBPyRelation>(rel->Union(other->rel));
443: }
444: 
445: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Except(DuckDBPyRelation *other) {
446: 	return make_unique<DuckDBPyRelation>(rel->Except(other->rel));
447: }
448: 
449: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Intersect(DuckDBPyRelation *other) {
450: 	return make_unique<DuckDBPyRelation>(rel->Intersect(other->rel));
451: }
452: 
453: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Join(DuckDBPyRelation *other, const string &condition,
454:                                                     const string &type) {
455: 	JoinType dtype;
456: 	string type_string = StringUtil::Lower(type);
457: 	StringUtil::Trim(type_string);
458: 	if (type_string == "inner") {
459: 		dtype = JoinType::INNER;
460: 	} else if (type_string == "left") {
461: 		dtype = JoinType::LEFT;
462: 	} else {
463: 		throw std::runtime_error("Unsupported join type " + type_string + ", try 'inner' or 'left'");
464: 	}
465: 	return make_unique<DuckDBPyRelation>(rel->Join(other->rel, condition, dtype));
466: }
467: 
468: void DuckDBPyRelation::WriteCsv(const string &file) {
469: 	rel->WriteCSV(file);
470: }
471: 
472: void DuckDBPyRelation::WriteCsvDF(py::object df, const string &file, DuckDBPyConnection *conn) {
473: 	return conn->FromDF(std::move(df))->WriteCsv(file);
474: }
475: 
476: // should this return a rel with the new view?
477: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::CreateView(const string &view_name, bool replace) {
478: 	rel->CreateView(view_name, replace);
479: 	return make_unique<DuckDBPyRelation>(rel);
480: }
481: 
482: unique_ptr<DuckDBPyResult> DuckDBPyRelation::Query(const string &view_name, const string &sql_query) {
483: 	auto res = make_unique<DuckDBPyResult>();
484: 	res->result = rel->Query(view_name, sql_query);
485: 	if (!res->result->success) {
486: 		throw std::runtime_error(res->result->error);
487: 	}
488: 	return res;
489: }
490: 
491: unique_ptr<DuckDBPyResult> DuckDBPyRelation::Execute() {
492: 	auto res = make_unique<DuckDBPyResult>();
493: 	{
494: 		py::gil_scoped_release release;
495: 		res->result = rel->Execute();
496: 	}
497: 	if (!res->result->success) {
498: 		throw std::runtime_error(res->result->error);
499: 	}
500: 	return res;
501: }
502: 
503: unique_ptr<DuckDBPyResult> DuckDBPyRelation::QueryDF(py::object df, const string &view_name, const string &sql_query,
504:                                                      DuckDBPyConnection *conn) {
505: 	return conn->FromDF(std::move(df))->Query(view_name, sql_query);
506: }
507: 
508: void DuckDBPyRelation::InsertInto(const string &table) {
509: 	auto parsed_info = QualifiedName::Parse(table);
510: 	if (parsed_info.schema.empty()) {
511: 		//! No Schema Defined, we use default schema.
512: 		rel->Insert(table);
513: 	} else {
514: 		//! Schema defined, we try to insert into it.
515: 		rel->Insert(parsed_info.schema, parsed_info.name);
516: 	};
517: }
518: 
519: void DuckDBPyRelation::Insert(py::object params) {
520: 	vector<vector<Value>> values {DuckDBPyConnection::TransformPythonParamList(move(params))};
521: 	py::gil_scoped_release release;
522: 	rel->Insert(values);
523: }
524: 
525: void DuckDBPyRelation::Create(const string &table) {
526: 	py::gil_scoped_release release;
527: 	rel->Create(table);
528: }
529: 
530: unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Map(py::function fun) {
531: 	vector<Value> params;
532: 	params.emplace_back(Value::POINTER((uintptr_t)fun.ptr()));
533: 	auto res = make_unique<DuckDBPyRelation>(rel->TableFunction("python_map_function", params));
534: 	res->map_function = fun;
535: 	return res;
536: }
537: 
538: string DuckDBPyRelation::Print() {
539: 	std::string rel_res_string;
540: 	{
541: 		py::gil_scoped_release release;
542: 		rel_res_string = rel->Limit(10)->Execute()->ToString();
543: 	}
544: 
545: 	return rel->ToString() + "\n---------------------\n-- Result Preview  --\n---------------------\n" +
546: 	       rel_res_string + "\n";
547: }
548: 
549: // TODO: RelationType to a python enum
550: py::str DuckDBPyRelation::Type() {
551: 	return py::str(RelationTypeToString(rel->type));
552: }
553: 
554: py::list DuckDBPyRelation::Columns() {
555: 	py::list res;
556: 	for (auto &col : rel->Columns()) {
557: 		res.append(col.name);
558: 	}
559: 	return res;
560: }
561: 
562: py::list DuckDBPyRelation::ColumnTypes() {
563: 	py::list res;
564: 	for (auto &col : rel->Columns()) {
565: 		res.append(col.type.ToString());
566: 	}
567: 	return res;
568: }
569: 
570: } // namespace duckdb
[end of tools/pythonpkg/src/pyrelation.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: