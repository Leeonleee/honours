{
  "repo": "duckdb/duckdb",
  "pull_number": 9272,
  "instance_id": "duckdb__duckdb-9272",
  "issue_numbers": [
    "9252",
    "9252"
  ],
  "base_commit": "c9efe88f1421b376adb9beff07da6b3902b4d817",
  "patch": "diff --git a/src/parser/transform/statement/transform_create_sequence.cpp b/src/parser/transform/statement/transform_create_sequence.cpp\nindex cfc671f64257..50e3c3f4d8f4 100644\n--- a/src/parser/transform/statement/transform_create_sequence.cpp\n+++ b/src/parser/transform/statement/transform_create_sequence.cpp\n@@ -17,6 +17,8 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \tinfo->name = qname.name;\n \n \tif (stmt.options) {\n+\t\tint64_t default_start_value = info->start_value;\n+\t\tbool has_start_value = false;\n \t\tunordered_set<SequenceInfo, EnumClassHash> used;\n \t\tduckdb_libpgquery::PGListCell *cell = nullptr;\n \t\tfor_each_cell(cell, stmt.options->head) {\n@@ -51,10 +53,10 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \t\t\t\t\tthrow ParserException(\"Increment must not be zero\");\n \t\t\t\t}\n \t\t\t\tif (info->increment < 0) {\n-\t\t\t\t\tinfo->start_value = info->max_value = -1;\n+\t\t\t\t\tdefault_start_value = info->max_value = -1;\n \t\t\t\t\tinfo->min_value = NumericLimits<int64_t>::Minimum();\n \t\t\t\t} else {\n-\t\t\t\t\tinfo->start_value = info->min_value = 1;\n+\t\t\t\t\tdefault_start_value = info->min_value = 1;\n \t\t\t\t\tinfo->max_value = NumericLimits<int64_t>::Maximum();\n \t\t\t\t}\n \t\t\t} else if (opt_name == \"minvalue\") {\n@@ -68,7 +70,7 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \n \t\t\t\tinfo->min_value = opt_value;\n \t\t\t\tif (info->increment > 0) {\n-\t\t\t\t\tinfo->start_value = info->min_value;\n+\t\t\t\t\tdefault_start_value = info->min_value;\n \t\t\t\t}\n \t\t\t} else if (opt_name == \"maxvalue\") {\n \t\t\t\tif (used.find(SequenceInfo::SEQ_MAX) != used.end()) {\n@@ -81,7 +83,7 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \n \t\t\t\tinfo->max_value = opt_value;\n \t\t\t\tif (info->increment < 0) {\n-\t\t\t\t\tinfo->start_value = info->max_value;\n+\t\t\t\t\tdefault_start_value = info->max_value;\n \t\t\t\t}\n \t\t\t} else if (opt_name == \"start\") {\n \t\t\t\tif (used.find(SequenceInfo::SEQ_START) != used.end()) {\n@@ -91,7 +93,7 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \t\t\t\tif (nodef) {\n \t\t\t\t\tcontinue;\n \t\t\t\t}\n-\n+\t\t\t\thas_start_value = true;\n \t\t\t\tinfo->start_value = opt_value;\n \t\t\t} else if (opt_name == \"cycle\") {\n \t\t\t\tif (used.find(SequenceInfo::SEQ_CYCLE) != used.end()) {\n@@ -107,6 +109,9 @@ unique_ptr<CreateStatement> Transformer::TransformCreateSequence(duckdb_libpgque\n \t\t\t\tthrow ParserException(\"Unrecognized option \\\"%s\\\" for CREATE SEQUENCE\", opt_name);\n \t\t\t}\n \t\t}\n+\t\tif (!has_start_value) {\n+\t\t\tinfo->start_value = default_start_value;\n+\t\t}\n \t}\n \tinfo->temporary = !stmt.sequence->relpersistence;\n \tinfo->on_conflict = TransformOnConflict(stmt.onconflict);\n",
  "test_patch": "diff --git a/test/sql/catalog/sequence/sequence_offset_increment.test b/test/sql/catalog/sequence/sequence_offset_increment.test\nnew file mode 100644\nindex 000000000000..377a3ad4cdb8\n--- /dev/null\n+++ b/test/sql/catalog/sequence/sequence_offset_increment.test\n@@ -0,0 +1,18 @@\n+# name: test/sql/catalog/sequence/sequence_offset_increment.test\n+# description: Issue #9252: Sequences defined with offset and custom increment always start with 1 instead of using the offset\n+# group: [sequence]\n+\n+require skip_reload\n+\n+statement ok\n+create sequence xx start 100 increment by 2;\n+\n+query I\n+SELECT nextval('xx')\n+----\n+100\n+\n+query I\n+SELECT nextval('xx')\n+----\n+102\n",
  "problem_statement": "Sequences defined with offset and custom increment always start with 1 instead of using the offset.\n### What happens?\n\nAs stated in the title:\r\nOffset values for starting to increment a sequence are ignored, if a custom \"increment by\" is provided.\r\nThe offset is honored, when I use no custom \"increment by\".\r\n\n\n### To Reproduce\n\n```sql\r\nD create sequence xx start 100 increment by 2;\r\nD select nextval('xx');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 nextval('xx') \u2502\r\n\u2502     int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502             1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select nextval('xx');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 nextval('xx') \u2502\r\n\u2502     int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502             3 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n... But should be 100 and 102 ...\r\n\n\n### OS:\n\nLinux x64\n\n### DuckDB Version:\n\nv0.9.1-dev120 af666ad8ba\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nKurt Rahstorfer\n\n### Affiliation:\n\nsilicon IT GmbH\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a release build (and could not test with a main build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\nSequences defined with offset and custom increment always start with 1 instead of using the offset.\n### What happens?\n\nAs stated in the title:\r\nOffset values for starting to increment a sequence are ignored, if a custom \"increment by\" is provided.\r\nThe offset is honored, when I use no custom \"increment by\".\r\n\n\n### To Reproduce\n\n```sql\r\nD create sequence xx start 100 increment by 2;\r\nD select nextval('xx');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 nextval('xx') \u2502\r\n\u2502     int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502             1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD select nextval('xx');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 nextval('xx') \u2502\r\n\u2502     int64     \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502             3 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n... But should be 100 and 102 ...\r\n\n\n### OS:\n\nLinux x64\n\n### DuckDB Version:\n\nv0.9.1-dev120 af666ad8ba\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nKurt Rahstorfer\n\n### Affiliation:\n\nsilicon IT GmbH\n\n### Have you tried this on the latest `main` branch?\n\nI have tested with a release build (and could not test with a main build)\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] Yes, I have\n",
  "hints_text": "\n",
  "created_at": "2023-10-09T09:28:39Z"
}