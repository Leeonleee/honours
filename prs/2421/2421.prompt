You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
arg_max/arg_min doesn't work properly with DATE
#### Environment:
* SQLite v0.3.1-dev208 b948abc70 msvc-1929
* SQLite v0.3.1-dev214 9981e8a3a gcc-10.2.1 20210110

#### What does happen?
arg_min/max(&lt;column&gt;, &lt;date-column&gt;)  returns a value from &lt;column&gt;, but almost never the correct one.

arg_min/max(&lt;date-column&gt;, &lt;column&gt;) often returns an arbitrary date that's not even a value in &lt;date-column&gt;.

#### To reproduce:

(results are almost always wrong, but not in a reproducible way):


```
D CREATE TABLE test(d DATE, i INTEGER);

D INSERT INTO test VALUES ('2021-01-01', 1), ('2021-02-01', 2), ('2021-03-01', 3), ('2021-04-01', 4);

D select arg_max(i, d) from test;
┌───────────────┐
│ arg_max(i, d) │
├───────────────┤
│ 2             │
└───────────────┘
D select arg_min(i, d) from test;
┌───────────────┐
│ arg_min(i, d) │
├───────────────┤
│ 3             │
└───────────────┘
D select arg_max(d, i) from test;
┌───────────────┐
│ arg_max(d, d) │
├───────────────┤
│ 2021-09-29    │
└───────────────┘
```
arg_max/arg_min doesn't work properly with DATE
#### Environment:
* SQLite v0.3.1-dev208 b948abc70 msvc-1929
* SQLite v0.3.1-dev214 9981e8a3a gcc-10.2.1 20210110

#### What does happen?
arg_min/max(&lt;column&gt;, &lt;date-column&gt;)  returns a value from &lt;column&gt;, but almost never the correct one.

arg_min/max(&lt;date-column&gt;, &lt;column&gt;) often returns an arbitrary date that's not even a value in &lt;date-column&gt;.

#### To reproduce:

(results are almost always wrong, but not in a reproducible way):


```
D CREATE TABLE test(d DATE, i INTEGER);

D INSERT INTO test VALUES ('2021-01-01', 1), ('2021-02-01', 2), ('2021-03-01', 3), ('2021-04-01', 4);

D select arg_max(i, d) from test;
┌───────────────┐
│ arg_max(i, d) │
├───────────────┤
│ 2             │
└───────────────┘
D select arg_min(i, d) from test;
┌───────────────┐
│ arg_min(i, d) │
├───────────────┤
│ 3             │
└───────────────┘
D select arg_max(d, i) from test;
┌───────────────┐
│ arg_max(d, d) │
├───────────────┤
│ 2021-09-29    │
└───────────────┘
```

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/function/aggregate/distributive/arg_min_max.cpp]
1: #include "duckdb/common/exception.hpp"
2: #include "duckdb/common/vector_operations/vector_operations.hpp"
3: #include "duckdb/function/aggregate/distributive_functions.hpp"
4: #include "duckdb/function/function_set.hpp"
5: #include "duckdb/planner/expression/bound_aggregate_expression.hpp"
6: 
7: #include <utility>
8: 
9: namespace duckdb {
10: 
11: template <class T, class T2>
12: struct ArgMinMaxState {
13: 	T arg;
14: 	T2 value;
15: 	bool is_initialized;
16: };
17: 
18: struct ArgMinMaxOperation {
19: 	template <class STATE>
20: 	static void Initialize(STATE *state) {
21: 		state->is_initialized = false;
22: 	}
23: 
24: 	template <class T, class STATE>
25: 	static void Finalize(Vector &result, FunctionData *, STATE *state, T *target, ValidityMask &mask, idx_t idx) {
26: 		if (!state->is_initialized) {
27: 			mask.SetInvalid(idx);
28: 		} else {
29: 			target[idx] = state->arg;
30: 		}
31: 	}
32: 
33: 	static bool IgnoreNull() {
34: 		return true;
35: 	}
36: };
37: 
38: struct ArgMinOperation : ArgMinMaxOperation {
39: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
40: 	static void Operation(STATE *state, FunctionData *bind_data, A_TYPE *x_data, B_TYPE *y_data, ValidityMask &amask,
41: 	                      ValidityMask &bmask, idx_t xidx, idx_t yidx) {
42: 		if (!state->is_initialized) {
43: 			state->value = y_data[yidx];
44: 			state->arg = x_data[xidx];
45: 			state->is_initialized = true;
46: 		} else {
47: 			if (y_data[yidx] < state->value) {
48: 				state->value = y_data[yidx];
49: 				state->arg = x_data[xidx];
50: 			}
51: 		}
52: 	}
53: 
54: 	template <class STATE, class OP>
55: 	static void Combine(const STATE &source, STATE *target) {
56: 		if (!source.is_initialized) {
57: 			return;
58: 		}
59: 		if (!target->is_initialized) {
60: 			target->is_initialized = true;
61: 			target->value = source.value;
62: 			target->arg = source.arg;
63: 			return;
64: 		}
65: 		if (source.value < target->value) {
66: 			target->value = source.value;
67: 			target->arg = source.arg;
68: 		}
69: 	}
70: };
71: 
72: struct ArgMaxOperation : ArgMinMaxOperation {
73: 	template <class A_TYPE, class B_TYPE, class STATE, class OP>
74: 	static void Operation(STATE *state, FunctionData *bind_data, A_TYPE *x_data, B_TYPE *y_data, ValidityMask &amask,
75: 	                      ValidityMask &bmask, idx_t xidx, idx_t yidx) {
76: 		if (!state->is_initialized) {
77: 			state->value = y_data[yidx];
78: 			state->arg = x_data[xidx];
79: 			state->is_initialized = true;
80: 		} else {
81: 			if (state->value < y_data[yidx]) {
82: 				state->value = y_data[yidx];
83: 				state->arg = x_data[xidx];
84: 			}
85: 		}
86: 	}
87: 
88: 	template <class STATE, class OP>
89: 	static void Combine(const STATE &source, STATE *target) {
90: 		if (!source.is_initialized) {
91: 			return;
92: 		}
93: 		if (!target->is_initialized) {
94: 			target->is_initialized = true;
95: 			target->value = source.value;
96: 			target->arg = source.arg;
97: 			return;
98: 		}
99: 		if (target->value < source.value) {
100: 			target->value = source.value;
101: 			target->arg = source.arg;
102: 		}
103: 	}
104: };
105: 
106: template <class OP, class T>
107: AggregateFunction GetArgMinMaxFunctionArg2(LogicalTypeId arg_2, const LogicalType &arg) {
108: 	switch (arg_2) {
109: 	case LogicalTypeId::INTEGER:
110: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, int>, T, int, T, OP>(arg, LogicalType::INTEGER,
111: 		                                                                                 arg);
112: 	case LogicalTypeId::BIGINT:
113: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
114: 		    arg, LogicalType::BIGINT, arg);
115: 	case LogicalTypeId::DOUBLE:
116: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, double>, T, double, T, OP>(arg, LogicalType::DOUBLE,
117: 		                                                                                       arg);
118: 	case LogicalTypeId::VARCHAR:
119: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, string_t>, T, string_t, T, OP>(
120: 		    arg, LogicalType::VARCHAR, arg);
121: 	case LogicalTypeId::DATE:
122: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
123: 		    arg, LogicalType::DATE, arg);
124: 	case LogicalTypeId::TIMESTAMP:
125: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, uint64_t>, T, uint64_t, T, OP>(
126: 		    arg, LogicalType::TIMESTAMP, arg);
127: 	case LogicalTypeId::BLOB:
128: 		return AggregateFunction::BinaryAggregate<ArgMinMaxState<T, string_t>, T, string_t, T, OP>(
129: 		    arg, LogicalType::BLOB, arg);
130: 	default:
131: 		throw InternalException("Unimplemented arg_min/arg_max aggregate");
132: 	}
133: }
134: 
135: template <class OP>
136: void GetArgMinMaxFunction(LogicalTypeId arg_1, AggregateFunctionSet &fun) {
137: 	switch (arg_1) {
138: 	case LogicalTypeId::INTEGER:
139: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::INTEGER, LogicalType::INTEGER));
140: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::BIGINT, LogicalType::INTEGER));
141: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::DOUBLE, LogicalType::INTEGER));
142: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::VARCHAR, LogicalType::INTEGER));
143: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::DATE, LogicalType::INTEGER));
144: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::TIMESTAMP, LogicalType::INTEGER));
145: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int>(LogicalTypeId::BLOB, LogicalType::INTEGER));
146: 		break;
147: 	case LogicalTypeId::BIGINT:
148: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::BIGINT));
149: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::BIGINT));
150: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::BIGINT));
151: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::BIGINT));
152: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::BIGINT));
153: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::BIGINT));
154: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::BIGINT));
155: 		break;
156: 	case LogicalTypeId::DOUBLE:
157: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::INTEGER, LogicalType::DOUBLE));
158: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::BIGINT, LogicalType::DOUBLE));
159: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::DOUBLE, LogicalType::DOUBLE));
160: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::VARCHAR, LogicalType::DOUBLE));
161: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::DATE, LogicalType::DOUBLE));
162: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::TIMESTAMP, LogicalType::DOUBLE));
163: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, double>(LogicalTypeId::BLOB, LogicalType::DOUBLE));
164: 		break;
165: 	case LogicalTypeId::VARCHAR:
166: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::INTEGER, LogicalType::VARCHAR));
167: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BIGINT, LogicalType::VARCHAR));
168: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DOUBLE, LogicalType::VARCHAR));
169: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::VARCHAR, LogicalType::VARCHAR));
170: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DATE, LogicalType::VARCHAR));
171: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::TIMESTAMP, LogicalType::VARCHAR));
172: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BLOB, LogicalType::VARCHAR));
173: 		break;
174: 	case LogicalTypeId::DATE:
175: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::DATE));
176: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::DATE));
177: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::DATE));
178: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::DATE));
179: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::DATE));
180: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::DATE));
181: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::DATE));
182: 		break;
183: 	case LogicalTypeId::TIMESTAMP:
184: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::INTEGER, LogicalType::TIMESTAMP));
185: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BIGINT, LogicalType::TIMESTAMP));
186: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DOUBLE, LogicalType::TIMESTAMP));
187: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::VARCHAR, LogicalType::TIMESTAMP));
188: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::DATE, LogicalType::TIMESTAMP));
189: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::TIMESTAMP, LogicalType::TIMESTAMP));
190: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, int64_t>(LogicalTypeId::BLOB, LogicalType::TIMESTAMP));
191: 		break;
192: 	case LogicalTypeId::BLOB:
193: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::INTEGER, LogicalType::BLOB));
194: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BIGINT, LogicalType::BLOB));
195: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DOUBLE, LogicalType::BLOB));
196: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::VARCHAR, LogicalType::BLOB));
197: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::DATE, LogicalType::BLOB));
198: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::TIMESTAMP, LogicalType::BLOB));
199: 		fun.AddFunction(GetArgMinMaxFunctionArg2<OP, string_t>(LogicalTypeId::BLOB, LogicalType::BLOB));
200: 		break;
201: 	default:
202: 		throw InternalException("Unimplemented arg_min/arg_max aggregate");
203: 	}
204: }
205: void ArgMinFun::RegisterFunction(BuiltinFunctions &set) {
206: 	AggregateFunctionSet fun("argmin");
207: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::INTEGER, fun);
208: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::BIGINT, fun);
209: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::DOUBLE, fun);
210: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::VARCHAR, fun);
211: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::DATE, fun);
212: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::TIMESTAMP, fun);
213: 	GetArgMinMaxFunction<ArgMinOperation>(LogicalTypeId::BLOB, fun);
214: 	set.AddFunction(fun);
215: 
216: 	//! Add min_by alias
217: 	fun.name = "min_by";
218: 	set.AddFunction(fun);
219: 
220: 	//! Add arg_min alias
221: 	fun.name = "arg_min";
222: 	set.AddFunction(fun);
223: }
224: 
225: void ArgMaxFun::RegisterFunction(BuiltinFunctions &set) {
226: 	AggregateFunctionSet fun("argmax");
227: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::INTEGER, fun);
228: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::BIGINT, fun);
229: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::DOUBLE, fun);
230: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::VARCHAR, fun);
231: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::DATE, fun);
232: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::TIMESTAMP, fun);
233: 	GetArgMinMaxFunction<ArgMaxOperation>(LogicalTypeId::BLOB, fun);
234: 	set.AddFunction(fun);
235: 
236: 	//! Add max_by alias
237: 	fun.name = "max_by";
238: 	set.AddFunction(fun);
239: 
240: 	//! Add arg_max alias
241: 	fun.name = "arg_max";
242: 	set.AddFunction(fun);
243: }
244: 
245: } // namespace duckdb
[end of src/function/aggregate/distributive/arg_min_max.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: