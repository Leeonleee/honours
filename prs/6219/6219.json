{
  "repo": "duckdb/duckdb",
  "pull_number": 6219,
  "instance_id": "duckdb__duckdb-6219",
  "issue_numbers": [
    "6044",
    "6044"
  ],
  "base_commit": "fc11c159caf616ee0ab86efe900be1c287aeac0a",
  "patch": "diff --git a/src/common/types/value.cpp b/src/common/types/value.cpp\nindex b97865238bb1..57adfb0a441f 100644\n--- a/src/common/types/value.cpp\n+++ b/src/common/types/value.cpp\n@@ -369,19 +369,11 @@ bool Value::StringIsValid(const char *str, idx_t length) {\n }\n \n Value Value::DECIMAL(int16_t value, uint8_t width, uint8_t scale) {\n-\tD_ASSERT(width <= Decimal::MAX_WIDTH_INT16);\n-\tValue result(LogicalType::DECIMAL(width, scale));\n-\tresult.value_.smallint = value;\n-\tresult.is_null = false;\n-\treturn result;\n+\treturn Value::DECIMAL(int64_t(value), width, scale);\n }\n \n Value Value::DECIMAL(int32_t value, uint8_t width, uint8_t scale) {\n-\tD_ASSERT(width >= Decimal::MAX_WIDTH_INT16 && width <= Decimal::MAX_WIDTH_INT32);\n-\tValue result(LogicalType::DECIMAL(width, scale));\n-\tresult.value_.integer = value;\n-\tresult.is_null = false;\n-\treturn result;\n+\treturn Value::DECIMAL(int64_t(value), width, scale);\n }\n \n Value Value::DECIMAL(int64_t value, uint8_t width, uint8_t scale) {\n",
  "test_patch": "diff --git a/test/sql/copy/parquet/parquet_6044.test b/test/sql/copy/parquet/parquet_6044.test\nnew file mode 100644\nindex 000000000000..7a6e9e6528f6\n--- /dev/null\n+++ b/test/sql/copy/parquet/parquet_6044.test\n@@ -0,0 +1,13 @@\n+# name: test/sql/copy/parquet/parquet_6044.test\n+# description: Issue #6044: node: assertion failure when calling parquet_metadata\n+# group: [parquet]\n+\n+require parquet\n+\n+statement ok\n+copy (select 0.9 AS a) to '__TEST_DIR__/tiny_decimal.parquet' (format 'parquet', codec 'zstd');\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/tiny_decimal.parquet'\n+----\n+0.9\n",
  "problem_statement": "node: assertion failure when calling parquet_metadata\n### What happens?\n\nWhen running the following SQL query from the nodejs bindings (and not e.g., the duckdb shell):\r\n\r\n``` sql\r\nselect 'nothing' from parquet_metadata('/tmp/float.parquet')\r\n```\r\n\r\nI get the following assertion failure (and SIGABORT):\r\n```\r\nAssertion failed: (width >= Decimal::MAX_WIDTH_INT16 && width <= Decimal::MAX_WIDTH_INT32), function DECIMAL, file value.cpp, line 379.\r\n```\r\n\r\nWe believe this is a regression from 0.6.1\n\n### To Reproduce\n\nFirst, make `/tmp/float.parquet` in the duckdb shell:\r\n\r\n``` sql\r\ncopy (select 0.9) to '/tmp/float.parquet' (format 'parquet', codec 'zstd');\r\n```\r\n\r\nThen add a test that calls the above query. For instance, I added the following to `parquet.test.ts`:\r\n``` typescript\r\n    it('should be able to read parquet metadata', function(done) {\r\n        db.all(\"select 'nothing' from parquet_metadata('/tmp/float.parquet')\", done);\r\n    });\r\n```\r\n\r\nFinally, run that test. For me, this command works: `npm test -- -g metadata`\n\n### OS:\n\napple silicon OS X, but this originally happened on linux x64\n\n### DuckDB Version:\n\n0.6.2-dev* (I tried 45fed7847f427decf24539f487c70838009444e6)\n\n### DuckDB Client:\n\nNode\n\n### Full Name:\n\nCarl Jackson\n\n### Affiliation:\n\nWatershed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nnode: assertion failure when calling parquet_metadata\n### What happens?\n\nWhen running the following SQL query from the nodejs bindings (and not e.g., the duckdb shell):\r\n\r\n``` sql\r\nselect 'nothing' from parquet_metadata('/tmp/float.parquet')\r\n```\r\n\r\nI get the following assertion failure (and SIGABORT):\r\n```\r\nAssertion failed: (width >= Decimal::MAX_WIDTH_INT16 && width <= Decimal::MAX_WIDTH_INT32), function DECIMAL, file value.cpp, line 379.\r\n```\r\n\r\nWe believe this is a regression from 0.6.1\n\n### To Reproduce\n\nFirst, make `/tmp/float.parquet` in the duckdb shell:\r\n\r\n``` sql\r\ncopy (select 0.9) to '/tmp/float.parquet' (format 'parquet', codec 'zstd');\r\n```\r\n\r\nThen add a test that calls the above query. For instance, I added the following to `parquet.test.ts`:\r\n``` typescript\r\n    it('should be able to read parquet metadata', function(done) {\r\n        db.all(\"select 'nothing' from parquet_metadata('/tmp/float.parquet')\", done);\r\n    });\r\n```\r\n\r\nFinally, run that test. For me, this command works: `npm test -- -g metadata`\n\n### OS:\n\napple silicon OS X, but this originally happened on linux x64\n\n### DuckDB Version:\n\n0.6.2-dev* (I tried 45fed7847f427decf24539f487c70838009444e6)\n\n### DuckDB Client:\n\nNode\n\n### Full Name:\n\nCarl Jackson\n\n### Affiliation:\n\nWatershed\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Chiming in with a little more information from continuing to scope this with @zenazn. \r\n\r\nThis does not appear to be parquet_metadata specific, after all. Extending his original example above, this test will also fail:\r\n\r\n```js\r\n    it('should be able to query a parquet file', function(done) {\r\n        db.all(\"select * from '/tmp/float.parquet'\", done);\r\n    });\r\n```\n### RCA\r\n\r\nParquet exported by the `COPY` has this schema:\r\n```\r\nmessage duckdb_schema {\r\n  optional int32 0.9 (DECIMAL(2,1));\r\n}\r\n```\r\nBut failed the assertion in `value.cpp`:\r\n```\r\nValue Value::DECIMAL(int32_t value, uint8_t width, uint8_t scale) { // value=9, width=2, scale=1\r\n\tD_ASSERT(width >= Decimal::MAX_WIDTH_INT16 && width <= Decimal::MAX_WIDTH_INT32);\r\n\tValue result(LogicalType::DECIMAL(width, scale));\r\n\tresult.value_.integer = value;\r\n\tresult.is_null = false;\r\n\treturn result;\r\n}\r\n```\r\n\r\n### Solution\r\n\r\nThere's no `int16` primitive type in parquet, so I think generating `int32` with `decimal(2,1)` is correct. We just need to accommodate this in reading `ParquetStatisticsUtils::ConvertValue`:\r\n```\r\ncase LogicalTypeId::DECIMAL: {\r\n\tauto width = DecimalType::GetWidth(type);\r\n\tauto scale = DecimalType::GetScale(type);\r\n\tswitch (schema_ele.type) {\r\n\tcase Type::INT32: {\r\n\t\tif (stats.size() != sizeof(int32_t)) {\r\n\t\t\tthrow InternalException(\"Incorrect stats size for type %s\", type.ToString());\r\n\t\t}\r\n\t\treturn Value::DECIMAL(Load<int32_t>((data_ptr_t)stats.c_str()), width, scale);\r\n\t}\r\n```\r\n\r\n@Mytherin any thoughts?\r\n\nChiming in with a little more information from continuing to scope this with @zenazn. \r\n\r\nThis does not appear to be parquet_metadata specific, after all. Extending his original example above, this test will also fail:\r\n\r\n```js\r\n    it('should be able to query a parquet file', function(done) {\r\n        db.all(\"select * from '/tmp/float.parquet'\", done);\r\n    });\r\n```\n### RCA\r\n\r\nParquet exported by the `COPY` has this schema:\r\n```\r\nmessage duckdb_schema {\r\n  optional int32 0.9 (DECIMAL(2,1));\r\n}\r\n```\r\nBut failed the assertion in `value.cpp`:\r\n```\r\nValue Value::DECIMAL(int32_t value, uint8_t width, uint8_t scale) { // value=9, width=2, scale=1\r\n\tD_ASSERT(width >= Decimal::MAX_WIDTH_INT16 && width <= Decimal::MAX_WIDTH_INT32);\r\n\tValue result(LogicalType::DECIMAL(width, scale));\r\n\tresult.value_.integer = value;\r\n\tresult.is_null = false;\r\n\treturn result;\r\n}\r\n```\r\n\r\n### Solution\r\n\r\nThere's no `int16` primitive type in parquet, so I think generating `int32` with `decimal(2,1)` is correct. We just need to accommodate this in reading `ParquetStatisticsUtils::ConvertValue`:\r\n```\r\ncase LogicalTypeId::DECIMAL: {\r\n\tauto width = DecimalType::GetWidth(type);\r\n\tauto scale = DecimalType::GetScale(type);\r\n\tswitch (schema_ele.type) {\r\n\tcase Type::INT32: {\r\n\t\tif (stats.size() != sizeof(int32_t)) {\r\n\t\t\tthrow InternalException(\"Incorrect stats size for type %s\", type.ToString());\r\n\t\t}\r\n\t\treturn Value::DECIMAL(Load<int32_t>((data_ptr_t)stats.c_str()), width, scale);\r\n\t}\r\n```\r\n\r\n@Mytherin any thoughts?\r\n",
  "created_at": "2023-02-12T10:37:55Z"
}