You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
Insert with large decimal fails
#### What happens?
An insert statement with a decimal close to the minimum fails.

#### To Reproduce
v0.3.2-dev1136 0a6525655
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D create table q  (big decimal (38,10));
D insert into q  (big ) values  (-9999999999999999899999999999.9999999999);
Error: Conversion Error: Could not cast value -99999999999999997748809823456034029568.000000 to DECIMAL(38,10)

Before you start counting: Yes these are 38 numbers in the insert statement.

It appears that the number was cast to a double as the error message comes from cast_operators.cpp line 1971. 

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Client: CLI, Java, WASM

#### Before Submitting
- [x] **Have you tried this on the latest `master` branch?**
- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Insert with large decimal fails
#### What happens?
An insert statement with a decimal close to the minimum fails.

#### To Reproduce
v0.3.2-dev1136 0a6525655
Enter ".help" for usage hints.
Connected to a transient in-memory database.
Use ".open FILENAME" to reopen on a persistent database.
D create table q  (big decimal (38,10));
D insert into q  (big ) values  (-9999999999999999899999999999.9999999999);
Error: Conversion Error: Could not cast value -99999999999999997748809823456034029568.000000 to DECIMAL(38,10)

Before you start counting: Yes these are 38 numbers in the insert statement.

It appears that the number was cast to a double as the error message comes from cast_operators.cpp line 1971. 

#### Environment (please complete the following information):
 - OS: Linux
 - DuckDB Client: CLI, Java, WASM

#### Before Submitting
- [x] **Have you tried this on the latest `master` branch?**
- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**


</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16:   <a href="https://discord.gg/tcvwpjfnZx">
17:     <img src="https://shields.io/discord/909674491309850675" alt="discord" />
18:   </a>
19: </p>
20: 
21: ## DuckDB
22: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/why_duckdb).
23: 
24: ## Installation
25: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
26: 
27: ## Data Import
28: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
29: 
30: ```sql
31: SELECT * FROM 'myfile.csv';
32: SELECT * FROM 'myfile.parquet';
33: ```
34: 
35: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
36: 
37: ## SQL Reference
38: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
39: 
40: ## Development
41: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
42: 
43: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
44: 
45: 
[end of README.md]
[start of src/parser/transform/expression/transform_constant.cpp]
1: #include "duckdb/parser/expression/constant_expression.hpp"
2: #include "duckdb/parser/transformer.hpp"
3: #include "duckdb/common/operator/cast_operators.hpp"
4: #include "duckdb/common/limits.hpp"
5: #include "duckdb/common/types/decimal.hpp"
6: 
7: namespace duckdb {
8: 
9: unique_ptr<ConstantExpression> Transformer::TransformValue(duckdb_libpgquery::PGValue val) {
10: 	switch (val.type) {
11: 	case duckdb_libpgquery::T_PGInteger:
12: 		D_ASSERT(val.val.ival <= NumericLimits<int32_t>::Maximum());
13: 		return make_unique<ConstantExpression>(Value::INTEGER((int32_t)val.val.ival));
14: 	case duckdb_libpgquery::T_PGBitString: // FIXME: this should actually convert to BLOB
15: 	case duckdb_libpgquery::T_PGString:
16: 		return make_unique<ConstantExpression>(Value(string(val.val.str)));
17: 	case duckdb_libpgquery::T_PGFloat: {
18: 		string_t str_val(val.val.str);
19: 		bool try_cast_as_integer = true;
20: 		bool try_cast_as_decimal = true;
21: 		int decimal_position = -1;
22: 		for (idx_t i = 0; i < str_val.GetSize(); i++) {
23: 			if (val.val.str[i] == '.') {
24: 				// decimal point: cast as either decimal or double
25: 				try_cast_as_integer = false;
26: 				decimal_position = i;
27: 			}
28: 			if (val.val.str[i] == 'e' || val.val.str[i] == 'E') {
29: 				// found exponent, cast as double
30: 				try_cast_as_integer = false;
31: 				try_cast_as_decimal = false;
32: 			}
33: 		}
34: 		if (try_cast_as_integer) {
35: 			int64_t bigint_value;
36: 			// try to cast as bigint first
37: 			if (TryCast::Operation<string_t, int64_t>(str_val, bigint_value)) {
38: 				// successfully cast to bigint: bigint value
39: 				return make_unique<ConstantExpression>(Value::BIGINT(bigint_value));
40: 			}
41: 			hugeint_t hugeint_value;
42: 			// if that is not successful; try to cast as hugeint
43: 			if (TryCast::Operation<string_t, hugeint_t>(str_val, hugeint_value)) {
44: 				// successfully cast to bigint: bigint value
45: 				return make_unique<ConstantExpression>(Value::HUGEINT(hugeint_value));
46: 			}
47: 		}
48: 		if (try_cast_as_decimal && decimal_position >= 0 && str_val.GetSize() < Decimal::MAX_WIDTH_DECIMAL + 2) {
49: 			// figure out the width/scale based on the decimal position
50: 			auto width = uint8_t(str_val.GetSize() - 1);
51: 			auto scale = uint8_t(width - decimal_position);
52: 			if (val.val.str[0] == '-') {
53: 				width--;
54: 			}
55: 			if (width <= Decimal::MAX_WIDTH_DECIMAL) {
56: 				// we can cast the value as a decimal
57: 				Value val = Value(str_val);
58: 				val = val.CastAs(LogicalType::DECIMAL(width, scale));
59: 				return make_unique<ConstantExpression>(move(val));
60: 			}
61: 		}
62: 		// if there is a decimal or the value is too big to cast as either hugeint or bigint
63: 		double dbl_value = Cast::Operation<string_t, double>(str_val);
64: 		if (!Value::DoubleIsValid(dbl_value)) {
65: 			throw ParserException("Double value \"%s\" is out of range!", val.val.str);
66: 		}
67: 		return make_unique<ConstantExpression>(Value::DOUBLE(dbl_value));
68: 	}
69: 	case duckdb_libpgquery::T_PGNull:
70: 		return make_unique<ConstantExpression>(Value(LogicalType::SQLNULL));
71: 	default:
72: 		throw NotImplementedException("Value not implemented!");
73: 	}
74: }
75: 
76: unique_ptr<ParsedExpression> Transformer::TransformConstant(duckdb_libpgquery::PGAConst *c) {
77: 	return TransformValue(c->val);
78: }
79: 
80: } // namespace duckdb
[end of src/parser/transform/expression/transform_constant.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: