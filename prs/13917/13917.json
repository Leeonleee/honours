{
  "repo": "duckdb/duckdb",
  "pull_number": 13917,
  "instance_id": "duckdb__duckdb-13917",
  "issue_numbers": [
    "13866"
  ],
  "base_commit": "fcd6b214152ac12488ad60cea62e85aaaf4f6eb0",
  "patch": "diff --git a/extension/fts/fts_indexing.cpp b/extension/fts/fts_indexing.cpp\nindex bd985f7a6c2f..a74b9f5de1c4 100644\n--- a/extension/fts/fts_indexing.cpp\n+++ b/extension/fts/fts_indexing.cpp\n@@ -73,7 +73,7 @@ static string IndexingScript(ClientContext &context, QualifiedName &qname, const\n \tif (lower) {\n \t\ttokenize = \"lower(\" + tokenize + \")\";\n \t}\n-\ttokenize = \"regexp_replace(\" + tokenize + \", '\" + ignore + \"', \" + \"' ', 'g')\";\n+\ttokenize = \"regexp_replace(\" + tokenize + \", $$\" + ignore + \"$$, \" + \"' ', 'g')\";\n \ttokenize = \"string_split_regex(\" + tokenize + \", '\\\\s+')\";\n \tresult += \"CREATE MACRO %fts_schema%.tokenize(s) AS \" + tokenize + \";\";\n \n",
  "test_patch": "diff --git a/test/sql/fts/issue_13866.test b/test/sql/fts/issue_13866.test\nnew file mode 100644\nindex 000000000000..6334ebd5a8dc\n--- /dev/null\n+++ b/test/sql/fts/issue_13866.test\n@@ -0,0 +1,13 @@\n+# name: test/sql/fts/issue_13866.test\n+# description: Issue 13866: FTS ignore regex to include single quote\n+# group: [fts]\n+\n+require fts\n+\n+require noalternativeverify\n+\n+statement ok\n+CREATE TABLE my_table AS SELECT 1 AS CustomerId, 'hans' as CustomerName\n+\n+statement ok\n+PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9''])+')\n",
  "problem_statement": "FTS ignore regex to include single quote\n### What happens?\n\nWhen trying to create a duckdb FTS index with single quotes included in the search regex, the following error occurs\r\n```\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9'])+')\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.duckdb.ParserException: Parser Error: syntax error at or near \"]\"\r\n```\r\n\n\n### To Reproduce\n\n```\r\nimport duckdb\r\ncon = duckdb.connect(\"tester.db\")\r\ncon.execute(\"CREATE TABLE my_table AS SELECT 1 AS CustomerId, 'hans' as CustomerName\")\r\n\r\n# FTS Index creation to include search for lowercase alphanumeric characters and single quotes\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9'])+')\")\r\n\r\n# Trying to escape the single quotes as well does not seem to work with PRAGMA\r\n# Escape with single `\\`\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9\\'])+')\")\r\n# Escape with double `\\`\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9\\\\'])+')\")\r\n```\n\n### OS:\n\nUbuntu 24.04.1 LTS\n\n### DuckDB Version:\n\n1.0.0\n\n### DuckDB Client:\n\nPython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nBrandan\n\n### Affiliation:\n\nNIL\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "`'` -> `''`\r\n\r\nYou have to escape the single quote, and to do that in SQL you need to double the single quote\nIndeed, as @Tishj says, in SQL, the way we escape single quotes is by doing a double single quote:\r\n```sql\r\nD select '''';\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  ''''   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 '       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nYou can also use the double-dollar quotes to avoid the single quote issue:\r\n```sql\r\nD select $$'$$;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  ''''   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 '       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nI think in this case the create_fts_index PRAGMA's `ignore` parameter takes in the regex as a string wrapped in single quotes. So any single quotes in the regex itself will in a way prematurely end the input regex string. As i tried your suggestions.\r\n\r\nDoubling up single quote\r\n```\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9''])+')\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.duckdb.ParserException: Parser Error: syntax error at or near \"]\"\r\n```\r\n\r\nAdding double-dollar\r\n```\r\ncon.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore='(\\\\.|[^a-z0-9$$'$$])+')\")\r\nTraceback (most recent call last):\r\n  File \"<stdin>\", line 1, in <module>\r\nduckdb.duckdb.ParserException: Parser Error: unterminated dollar-quoted string at or near \"$$])+')\"\r\n```\nWhen I try something very similar in the DuckDB CLI, there are no problems:\r\n\r\n```~SQL\r\nD create or replace macro s(t := 'hoi') as t;\r\nD select s(t:='(\\\\.|[^a-z0-9''])+');\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 s(t := '(\\\\.|[^a-z0-9''])+') \u2502\r\n\u2502           varchar            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 (\\\\.|[^a-z0-9'])+            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI was curious if the problem was perhaps caused by macro parameter processing, but no, fortunately.\r\nThen I thought it must be the Python API.\r\nHowever:\r\n\r\n```~python\r\n>>> con = duckdb.connect(\"tester.db\")\r\n>>> con.sql(\"create or replace macro s(t := 'hoi') as t;\")\r\n>>> con.sql(\"select s();\")\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   s()   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 hoi     \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n>>> con.sql(\"select s(t:='(\\\\.|[^a-z0-9''])+');\")\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 s(t := '(\\.|[^a-z0-9''])+') \u2502\r\n\u2502           varchar           \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 (\\.|[^a-z0-9'])+            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nAnd, no difference for using `.execute().fetchone()` instead of `.sql()`, all works well.\r\n\r\nI did however get the same error as reported by @brandantck for his example.\r\nBut...\r\n\r\nIf I adapt the most recent example to read:\r\n\r\n```~python\r\n>>> con.execute(\"PRAGMA create_fts_index(my_table, 'CustomerId', 'CustomerName', ignore = '(\\\\.|[^a-z0-9''''])+', overwrite = 1)\");\r\n<duckdb.duckdb.DuckDBPyConnection object at 0x7ffb173b5570>\r\n```\r\n\r\nI think it is the interaction between Python parsing and SQL parsing, but did not look into it in great detail.\r\nCan you maybe just check if this version would deliver the result you expected, @brandantck ?\r\n\r\n(I have been using versions 0.10.0 or 1.1.0.)\r\n\r\n",
  "created_at": "2024-09-13T07:25:24Z"
}