{
  "repo": "duckdb/duckdb",
  "pull_number": 6789,
  "instance_id": "duckdb__duckdb-6789",
  "issue_numbers": [
    "2743",
    "2743"
  ],
  "base_commit": "88b1bfa74d2b79a51ffc4bab18ddeb6a034652f1",
  "patch": "diff --git a/src/parallel/meta_pipeline.cpp b/src/parallel/meta_pipeline.cpp\nindex 2ed724be70a5..25da3a12c819 100644\n--- a/src/parallel/meta_pipeline.cpp\n+++ b/src/parallel/meta_pipeline.cpp\n@@ -133,10 +133,6 @@ bool MetaPipeline::HasFinishEvent(Pipeline *pipeline) {\n }\n \n Pipeline *MetaPipeline::CreateUnionPipeline(Pipeline &current, bool order_matters) {\n-\tif (HasRecursiveCTE()) {\n-\t\tthrow NotImplementedException(\"UNIONS are not supported in recursive CTEs yet\");\n-\t}\n-\n \t// create the union pipeline (batch index 0, should be set correctly afterwards)\n \tauto union_pipeline = CreatePipeline();\n \tstate.SetPipelineOperators(*union_pipeline, state.GetPipelineOperators(current));\n",
  "test_patch": "diff --git a/test/issues/general/test_2743.test b/test/issues/general/test_2743.test\nnew file mode 100644\nindex 000000000000..2f0378fed37a\n--- /dev/null\n+++ b/test/issues/general/test_2743.test\n@@ -0,0 +1,246 @@\n+# name: test/issues/general/test_2743.test\n+# description: Issue 2743: RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet\n+# group: [general]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query II\n+WITH RECURSIVE t(x, y) AS\n+(\n+  SELECT 1, 1\n+    UNION ALL\n+  SELECT 1, 2\n+    UNION ALL\n+  (SELECT x+1, 1\n+  FROM   t\n+  WHERE  x < 10 AND y = 1\n+    UNION ALL\n+  SELECT x+1, 2\n+  FROM   t\n+  WHERE  x < 10 AND y = 2)\n+)\n+SELECT * FROM t ORDER BY x, y;\n+----\n+1\t1\n+1\t2\n+2\t1\n+2\t2\n+3\t1\n+3\t2\n+4\t1\n+4\t2\n+5\t1\n+5\t2\n+6\t1\n+6\t2\n+7\t1\n+7\t2\n+8\t1\n+8\t2\n+9\t1\n+9\t2\n+10\t1\n+10\t2\n+\n+query II\n+WITH RECURSIVE t(x, y) AS\n+(\n+  SELECT 1, 1\n+    UNION ALL\n+  SELECT 1, 2\n+    UNION ALL\n+  SELECT t, z\n+  FROM   t, LATERAL\n+    (SELECT x+1, 2\n+     WHERE  t.y = 1\n+      UNION ALL\n+     SELECT x+1, 1\n+     WHERE t.y = 2) AS _(t, z)\n+  WHERE t.x < 10\n+)\n+SELECT * FROM t ORDER BY x, y;\n+----\n+1\t1\n+1\t2\n+2\t1\n+2\t2\n+3\t1\n+3\t2\n+4\t1\n+4\t2\n+5\t1\n+5\t2\n+6\t1\n+6\t2\n+7\t1\n+7\t2\n+8\t1\n+8\t2\n+9\t1\n+9\t2\n+10\t1\n+10\t2\n+\n+query II\n+WITH RECURSIVE t(x, y) AS\n+(\n+  SELECT 1, 1\n+    UNION\n+  SELECT 1, 2\n+    UNION\n+  (SELECT x+1, 1\n+  FROM   t\n+  WHERE  x < 10 AND y = 1\n+    UNION ALL\n+  SELECT x+1, 1\n+  FROM   t\n+  WHERE  x < 10 AND y = 2)\n+)\n+SELECT * FROM t ORDER BY x, y;\n+----\n+1\t1\n+1\t2\n+2\t1\n+3\t1\n+4\t1\n+5\t1\n+6\t1\n+7\t1\n+8\t1\n+9\t1\n+10\t1\n+\n+statement ok\n+CREATE TABLE flights (\n+  source  TEXT,\n+  dest    TEXT,\n+  carrier TEXT\n+);\n+\n+statement ok\n+INSERT INTO flights VALUES\n+('A', 'B', 'C1'),\n+('A', 'C', 'C2'),\n+('A', 'D', 'C1'),\n+('B', 'D', 'C3'),\n+('C', 'E', 'C3')\n+;\n+\n+statement ok\n+CREATE TABLE trains (\n+  source TEXT,\n+  dest   TEXT\n+);\n+\n+statement ok\n+INSERT INTO trains VALUES\n+('B', 'C'),\n+('A', 'E'),\n+('C', 'E')\n+;\n+\n+query III\n+WITH RECURSIVE connections(source, dest, carrier) AS (\n+     (SELECT f.source, f.dest, f.carrier\n+      FROM flights f\n+      WHERE f.source = 'A'\n+    UNION ALL\n+      SELECT r.source, r.dest, 'Rail' AS carrier\n+      FROM trains r\n+      WHERE r.source = 'A')\n+  UNION ALL -- two recursive terms below\n+     (SELECT c.source, f.dest, f.carrier\n+      FROM connections c, flights f\n+      WHERE c.dest = f.source\n+    UNION ALL\n+      SELECT c.source, r.dest, 'Rail' AS carrier\n+      FROM connections c, trains r\n+      WHERE c.dest = r.source)\n+)\n+SELECT * FROM connections;\n+----\n+A\tB\tC1\n+A\tC\tC2\n+A\tD\tC1\n+A\tE\tRail\n+A\tD\tC3\n+A\tE\tC3\n+A\tC\tRail\n+A\tE\tRail\n+A\tE\tC3\n+A\tE\tRail\n+\n+query I\n+WITH RECURSIVE t(x) AS\n+(\n+  (SELECT 2\n+    UNION\n+  SELECT 1)\n+    UNION ALL\n+  (SELECT x+1\n+  FROM   t\n+  WHERE  x < 4\n+    UNION\n+  SELECT x*2\n+  FROM   t\n+  WHERE  x >= 4 AND x < 8\n+    UNION ALL\n+  SELECT x+1\n+  FROM   t\n+  WHERE  x >= 4 AND x < 8)\n+) SELECT * FROM t ORDER BY x;\n+----\n+1\n+2\n+2\n+3\n+3\n+4\n+4\n+5\n+5\n+6\n+6\n+7\n+7\n+8\n+8\n+8\n+8\n+10\n+10\n+12\n+12\n+14\n+14\n+\n+query I\n+WITH RECURSIVE foo(i) AS\n+    (values (1)\n+      UNION\n+    (SELECT i+1 FROM foo WHERE i < 2\n+      UNION ALL\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION ALL\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION ALL\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION ALL\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION ALL\n+    SELECT i+1 FROM foo WHERE i < 2\n+      UNION\n+    SELECT i+1 FROM foo WHERE i < 2)\n+) SELECT * FROM foo;\n+----\n+1\n+2\n",
  "problem_statement": "Regression: RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet\n#### What happens?\r\n\r\n`RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet`\r\n\r\n#### To Reproduce\r\n\r\n```\r\nimport duckdb\r\nduckdb.connect().execute('''\r\ndrop table if exists parents_tab;\r\ncreate table parents_tab(id integer, value integer, parent integer);\r\ninsert into parents_tab values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1);\r\n\r\n\r\ndrop table if exists parents_tab2;\r\ncreate table parents_tab2(id integer, value integer, parent integer);\r\ninsert into parents_tab2 values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1);\r\n\r\ncreate or replace view parents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n);\r\n\r\n--create or replace view parents as select * from parents_tab;\r\n\r\ncreate or replace view Accum as\r\n    WITH RECURSIVE children AS (\r\n        -- select leaf nodes\r\n        SELECT id, value, parent\r\n            FROM parents\r\n        UNION all\r\n        -- propagate values of leaf nodes up, adding rows \r\n        SELECT parents.id, children.value, parents.parent\r\n            FROM children JOIN parents ON children.parent = parents.id\r\n    )\r\n    SELECT id as id, sum(value) as value\r\n        FROM children \r\n        GROUP BY id   -- sum up appropriate rows\r\n        ORDER BY id;\r\nselect * from Accum;\r\n''').fetchdf()\r\n```\r\n\r\nThis works fine with duckdb 0.3.0 but fails with error: `RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet` on duckdb 0.3.1\r\n\r\n#### Environment (please complete the following information):\r\n - OS: RHEL 6.5\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: Python\r\n\nRegression: RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet\n#### What happens?\r\n\r\n`RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet`\r\n\r\n#### To Reproduce\r\n\r\n```\r\nimport duckdb\r\nduckdb.connect().execute('''\r\ndrop table if exists parents_tab;\r\ncreate table parents_tab(id integer, value integer, parent integer);\r\ninsert into parents_tab values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1);\r\n\r\n\r\ndrop table if exists parents_tab2;\r\ncreate table parents_tab2(id integer, value integer, parent integer);\r\ninsert into parents_tab2 values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1);\r\n\r\ncreate or replace view parents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n);\r\n\r\n--create or replace view parents as select * from parents_tab;\r\n\r\ncreate or replace view Accum as\r\n    WITH RECURSIVE children AS (\r\n        -- select leaf nodes\r\n        SELECT id, value, parent\r\n            FROM parents\r\n        UNION all\r\n        -- propagate values of leaf nodes up, adding rows \r\n        SELECT parents.id, children.value, parents.parent\r\n            FROM children JOIN parents ON children.parent = parents.id\r\n    )\r\n    SELECT id as id, sum(value) as value\r\n        FROM children \r\n        GROUP BY id   -- sum up appropriate rows\r\n        ORDER BY id;\r\nselect * from Accum;\r\n''').fetchdf()\r\n```\r\n\r\nThis works fine with duckdb 0.3.0 but fails with error: `RuntimeError: Not implemented Error: UNIONS are not supported in recursive CTEs yet` on duckdb 0.3.1\r\n\r\n#### Environment (please complete the following information):\r\n - OS: RHEL 6.5\r\n - DuckDB Version: 0.3.1\r\n - DuckDB Client: Python\r\n\n",
  "hints_text": "\n",
  "created_at": "2023-03-20T10:54:16Z"
}