{
  "repo": "duckdb/duckdb",
  "pull_number": 14159,
  "instance_id": "duckdb__duckdb-14159",
  "issue_numbers": [
    "14145"
  ],
  "base_commit": "d58cc56f8554057f9646ea343d845e1b1ba6466e",
  "patch": "diff --git a/src/core_functions/aggregate/distributive/minmax.cpp b/src/core_functions/aggregate/distributive/minmax.cpp\nindex dba09e5aa0a8..9642da1561a7 100644\n--- a/src/core_functions/aggregate/distributive/minmax.cpp\n+++ b/src/core_functions/aggregate/distributive/minmax.cpp\n@@ -315,8 +315,8 @@ static AggregateFunction GetMinMaxOperator(const LogicalType &type) {\n \tauto internal_type = type.InternalType();\n \tswitch (internal_type) {\n \tcase PhysicalType::VARCHAR:\n-\t\treturn AggregateFunction::UnaryAggregateDestructor<MinMaxStringState, string_t, string_t, OP_STRING>(type.id(),\n-\t\t                                                                                                     type.id());\n+\t\treturn AggregateFunction::UnaryAggregateDestructor<MinMaxStringState, string_t, string_t, OP_STRING>(type,\n+\t\t                                                                                                     type);\n \tcase PhysicalType::LIST:\n \tcase PhysicalType::STRUCT:\n \tcase PhysicalType::ARRAY:\n",
  "test_patch": "diff --git a/test/sql/aggregate/aggregates/test_minmax_14145.test b/test/sql/aggregate/aggregates/test_minmax_14145.test\nnew file mode 100644\nindex 000000000000..635c7894a4fa\n--- /dev/null\n+++ b/test/sql/aggregate/aggregates/test_minmax_14145.test\n@@ -0,0 +1,14 @@\n+# name: test/sql/aggregate/aggregates/test_minmax_14145.test\n+# description: Test minmax aggregation issue 14145\n+# group: [aggregates]\n+\n+require json\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query IIIIII\n+DESCRIBE SELECT max(l) from (select unnest( [{'a':1}::JSON, [2]::JSON ]) as l);\n+----\n+max(l)\tJSON\tYES\tNULL\tNULL\tNULL\n+\n",
  "problem_statement": "list_max() and max() lose type information\n### What happens?\n\nFor example:\r\n```\r\nD select list_max( [{'a':1}::JSON, [2]::JSON ]) as max;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   max   \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {\"a\":1} \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\nD select max(l) from (select unnest( [{'a':1}::JSON, [2]::JSON ]) as l);\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 max(l)  \u2502\r\n\u2502 varchar \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 {\"a\":1} \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n\r\nConstrast the above with the DuckDB function max_list() defined as follows:\r\n```\r\nD create or replace function max_list(l) as (\r\n  list_reduce(l, (acc, x) -> greatest(acc,x))\r\n);\r\n\r\nD select max_list( [ ['b']::JSON, ['a']::JSON ) as max;\r\n\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  max  \u2502\r\n\u2502 json  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 [\"b\"] \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### To Reproduce\n\n```\r\nselect list_max( [{'a':1}::JSON, [2]::JSON ]) as max;\r\nselect max(l) from (select unnest( [{'a':1}::JSON, [2]::JSON ]) as l);\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n1.0, 1.1\n\n### DuckDB Client:\n\nCLI\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nPeter\n\n### Affiliation:\n\nKoppstein\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nNot applicable - the reproduction does not require a data set\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-09-29T01:42:44Z"
}