{
  "repo": "duckdb/duckdb",
  "pull_number": 14221,
  "instance_id": "duckdb__duckdb-14221",
  "issue_numbers": [
    "14211"
  ],
  "base_commit": "1eac05ecd3a6b8ec2cdf0c53ccece7ca2effef26",
  "patch": "diff --git a/tools/pythonpkg/src/typing/pytype.cpp b/tools/pythonpkg/src/typing/pytype.cpp\nindex 7b03f167121c..fc19c17ba123 100644\n--- a/tools/pythonpkg/src/typing/pytype.cpp\n+++ b/tools/pythonpkg/src/typing/pytype.cpp\n@@ -270,6 +270,9 @@ static LogicalType FromGenericAlias(const py::object &obj) {\n static LogicalType FromDictionary(const py::object &obj) {\n \tauto dict = py::reinterpret_steal<py::dict>(obj);\n \tchild_list_t<LogicalType> children;\n+\tif (dict.size() == 0) {\n+\t\tthrow InvalidInputException(\"Could not convert empty dictionary to a duckdb STRUCT type\");\n+\t}\n \tchildren.reserve(dict.size());\n \tfor (auto &item : dict) {\n \t\tauto &name_p = item.first;\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/fast/test_type.py b/tools/pythonpkg/tests/fast/test_type.py\nindex 718b9defe310..d87a1cae38db 100644\n--- a/tools/pythonpkg/tests/fast/test_type.py\n+++ b/tools/pythonpkg/tests/fast/test_type.py\n@@ -88,6 +88,12 @@ def test_struct_type(self):\n         type = duckdb.struct_type([BIGINT, BOOLEAN])\n         assert str(type) == 'STRUCT(v1 BIGINT, v2 BOOLEAN)'\n \n+    def test_incomplete_struct_type(self):\n+        with pytest.raises(\n+            duckdb.InvalidInputException, match='Could not convert empty dictionary to a duckdb STRUCT type'\n+        ):\n+            type = duckdb.typing.DuckDBPyType(dict())\n+\n     def test_map_type(self):\n         type = duckdb.map_type(duckdb.sqltype(\"BIGINT\"), duckdb.sqltype(\"DECIMAL(10, 2)\"))\n         assert str(type) == 'MAP(BIGINT, DECIMAL(10,2))'\n",
  "problem_statement": "Could not convert object (DICT) to the desired target type (STRUCT()) in an UDF\n### What happens?\n\nI try to make an UDF that returns a dict, however duckdb fails to retrieve and convert that dict to a struct.\n\n### To Reproduce\n\n```python\r\nimport duckdb\r\nfrom duckdb.typing import *\r\n\r\ncon = duckdb.connect('test')\r\ndef return_dict():\r\n    return {\r\n    1: \"one\",\r\n    \"2\": 2,\r\n    \"three\": [1, 2, 3],\r\n    False: True\r\n}\r\n\r\ncon.create_function(\"return_dict\", return_dict, [], dict())\r\n```\r\n\r\nThen I try to retrieve the dict:\r\n\r\n```python\r\ncon.sql(\"SELECT return_dict()\").fetchall()\r\n```\r\n```\r\nInvalidInputException: Invalid Input Error: We could not convert the object {1: 'one', '2': 2, 'three': [1, 2, 3], False: True} to the desired target type (STRUCT())\r\n```\r\n\r\n\n\n### OS:\n\nWindows 10 x64\n\n### DuckDB Version:\n\n1.1.1\n\n### DuckDB Client:\n\nPython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nBj\u00f8rnar Brende Smestad\n\n### Affiliation:\n\nNTNU\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have not tested with any build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "Keys in duckdb-STRUCTs are all strings.\n> Keys in duckdb-STRUCTs are all strings.\r\n\r\nThey will get auto converted into string, that's not the issue\r\nThe issue is that an incomplete type is given as the return type of the UDF\r\n\r\nI can make it throw earlier, but it's not going to be fixed in the way the author likely wants",
  "created_at": "2024-10-04T09:50:53Z"
}