{
  "repo": "duckdb/duckdb",
  "pull_number": 6911,
  "instance_id": "duckdb__duckdb-6911",
  "issue_numbers": [
    "6906"
  ],
  "base_commit": "d2e318a1fd16b0b35577e5f956c02a8d93a13b16",
  "patch": "diff --git a/src/function/table/system/pragma_storage_info.cpp b/src/function/table/system/pragma_storage_info.cpp\nindex f38b55e5be60..a5d85a9c1925 100644\n--- a/src/function/table/system/pragma_storage_info.cpp\n+++ b/src/function/table/system/pragma_storage_info.cpp\n@@ -11,6 +11,7 @@\n #include \"duckdb/common/limits.hpp\"\n #include \"duckdb/storage/data_table.hpp\"\n #include \"duckdb/storage/table_storage_info.hpp\"\n+#include \"duckdb/planner/binder.hpp\"\n \n #include <algorithm>\n \n@@ -78,6 +79,7 @@ static unique_ptr<FunctionData> PragmaStorageInfoBind(ClientContext &context, Ta\n \tauto qname = QualifiedName::Parse(input.inputs[0].GetValue<string>());\n \n \t// look up the table name in the catalog\n+\tBinder::BindSchemaOrCatalog(context, qname.catalog, qname.schema);\n \tauto table_entry = Catalog::GetEntry<TableCatalogEntry>(context, qname.catalog, qname.schema, qname.name);\n \tauto result = make_unique<PragmaStorageFunctionData>(table_entry);\n \tresult->storage_info = table_entry->GetStorageInfo(context);\n",
  "test_patch": "diff --git a/test/sql/attach/attach_pragma_storage_info.test b/test/sql/attach/attach_pragma_storage_info.test\nnew file mode 100644\nindex 000000000000..0bba58f640b5\n--- /dev/null\n+++ b/test/sql/attach/attach_pragma_storage_info.test\n@@ -0,0 +1,21 @@\n+# name: test/sql/attach/attach_pragma_storage_info.test\n+# group: [attach]\n+\n+require skip_reload\n+\n+load __TEST_DIR__/alter_dependency_conflict.db\n+\n+statement ok\n+ATTACH '__TEST_DIR__/database.db' as persistent;\n+\n+statement ok\n+CREATE OR REPLACE TABLE persistent.T1 (A0 int);\n+\n+statement ok\n+insert into persistent.T1 values (5);\n+\n+query I\n+SELECT column_name from pragma_storage_info('persistent.T1');\n+----\n+A0\n+A0\ndiff --git a/test/sqlite/sqllogic_parser.cpp b/test/sqlite/sqllogic_parser.cpp\nindex eeafe3fb6004..07891b7968b8 100644\n--- a/test/sqlite/sqllogic_parser.cpp\n+++ b/test/sqlite/sqllogic_parser.cpp\n@@ -97,14 +97,12 @@ string SQLLogicParser::ExtractExpectedError(bool expect_ok) {\n \t}\n \tcurrent_line++;\n \tstring error;\n+\tvector<string> error_lines;\n \twhile (current_line < lines.size() && !lines[current_line].empty()) {\n-\t\tif (error.empty()) {\n-\t\t\terror = lines[current_line];\n-\t\t} else {\n-\t\t\tFail(\"Failed to parse statement error: expected single line error message\");\n-\t\t}\n+\t\terror_lines.push_back(lines[current_line]);\n \t\tcurrent_line++;\n \t}\n+\terror = StringUtil::Join(error_lines, \"\\n\");\n \treturn error;\n }\n \n",
  "problem_statement": "Cannot use qualified table name with pragma_storage_info\n### What happens?\n\nCalling `pragma_storage_info` with qualified table name, that is, with the database prepended, fails saying that the table doesn't exist.\n\n### To Reproduce\n\n```\r\n$ ./build/release/duckdb\r\nv0.7.2-dev1244 ab5c07cb68\r\nEnter \".help\" for usage hints.\r\nConnected to a transient in-memory database.\r\nUse \".open FILENAME\" to reopen on a persistent database.\r\nD ATTACH '/tmp/database.db' as persistent;\r\nD CREATE TABLE persistent.T1 (A0 int);\r\nD select * from duckdb_tables();\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 database_name \u2502 database_oid \u2502 schema_name \u2502 schema_oid \u2502 table_name \u2502 table_oid \u2502 internal \u2502 temporary \u2502 has_primary_key \u2502 estimated_size \u2502 column_count \u2502 index_count \u2502 check_constraint_c\u2026  \u2502              sql              \u2502\r\n\u2502    varchar    \u2502    int64     \u2502   varchar   \u2502   int64    \u2502  varchar   \u2502   int64   \u2502 boolean  \u2502  boolean  \u2502     boolean     \u2502     int64      \u2502    int64     \u2502    int64    \u2502        int64         \u2502            varchar            \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 persistent    \u2502          968 \u2502 main        \u2502        966 \u2502 T1         \u2502       970 \u2502 false    \u2502 false     \u2502 false           \u2502              0 \u2502            1 \u2502           0 \u2502                    0 \u2502 CREATE TABLE \"T1\"(\"A0\" INTE\u2026  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD SELECT (COUNT(DISTINCT block_id) * 262144) as size from pragma_storage_info('persistent.T1');\r\nError: Catalog Error: Table with name T1 does not exist!\r\nDid you mean \"persistent.T1\"?\r\nD SELECT (COUNT(DISTINCT block_id) * 262144) as size from pragma_storage_info('T1');\r\nError: Catalog Error: Table with name T1 does not exist!\r\nDid you mean \"persistent.T1\"?\r\nD select * from persistent.T1;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   A0   \u2502\r\n\u2502 int32  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\n0.7.1\n\n### DuckDB Client:\n\nCLI, JDBC\n\n### Full Name:\n\nMichael Albers\n\n### Affiliation:\n\nMode Analytics\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "I had a quick look, I can reproduce this as well:\r\n```sql\r\nload __TEST_DIR__/main.db\r\n\r\nstatement ok\r\nATTACH '__TEST_DIR__/database.db' as persistent;\r\n\r\nstatement ok\r\nCREATE TABLE persistent.T1 (A0 int);\r\n\r\nstatement ok\r\ninsert into persistent.T1 values (5);\r\n\r\nquery I\r\nSELECT column_name from pragma_storage_info('persistent.T1');\r\n----\r\nA0\r\nA0\r\n```\r\nI can fix it, but it's ambiguous depending on the context.\r\nWhen we parse a qualified name, we can have up to 3 parts, catalog - schema - name.\r\nIf there are only 2 parts, the question is which parts are they?\r\nschema + name or catalog + name?\r\n\r\nCurrently the code says it's schema + name, so you would need to add the default schema currently\r\n`persistent.main.T1`\r\n\r\n```sql\r\nquery I\r\nSELECT column_name from pragma_storage_info('persistent.main.T1');\r\n----\r\nA0\r\nA0\r\n```\nIf it's ambiguous it's probably better to leave it as an error. But the error message is quite confusing.",
  "created_at": "2023-03-30T08:06:31Z"
}