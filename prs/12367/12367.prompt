You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`get_table_names` erroring on query using `generate_series` in CTE, but executes it without issue
### What happens?

I've encountered a relatively simple query which uses `generate_series` in a CTE which can be executed just fine, but trying to call `get_table_names` on it yields the error:

```
Traceback (most recent call last):
  File "/Users/dscott/Hex/duckdb-repro/repro.py", line 13, in <module>
    print(conn.get_table_names(query))
  File "/Users/dscott/Hex/duckdb-repro/repro.py", line 13, in <module>
    print(conn.get_table_names(query))
duckdb.duckdb.BinderException: Binder Error: RANGE with NULL argument is not supported
```

On older versions (0.8.1) the error is slightly different, and more fatal as subsequent queries against the same connection error and report "The database must be restarted prior to being used again."

```
Traceback (most recent call last):
  File "/Users/dscott/Hex/duckdb-repro/repro.py", line 13, in <module>
    print(conn.get_table_names(query))
  File "/Users/dscott/Hex/duckdb-repro/repro.py", line 13, in <module>
    print(conn.get_table_names(query))
duckdb.InternalException: INTERNAL Error: Calling GetValueInternal on a value that is NULL
```

### To Reproduce

Here's a minimal reproduction:

```python
import duckdb

query = """
with series_generator as (
   select * from generate_series(TIMESTAMP '2001-04-10', TIMESTAMP '2001-04-11', INTERVAL 1 HOUR)
)
select * from series_generator
"""

with duckdb.execute(query) as conn:
    print(conn.fetchdf())

    print(conn.get_table_names(query))
```

### OS:

macOS Sonoma aarch64, Linux x86_64

### DuckDB Version:

0.8.1, 0.10.3, 0.10.4.dev72

### DuckDB Client:

Python

### Full Name:

Dylan Scott

### Affiliation:

Hex Technologies

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
18: 
19: ## Installation
20: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
21: 
22: ## Data Import
23: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
24: 
25: ```sql
26: SELECT * FROM 'myfile.csv';
27: SELECT * FROM 'myfile.parquet';
28: ```
29: 
30: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
31: 
32: ## SQL Reference
33: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
34: 
35: ## Development
36: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
37: 
38: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
39: 
40: ## Support
41: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/function/table/range.cpp]
1: #include "duckdb/function/table/range.hpp"
2: #include "duckdb/function/table/summary.hpp"
3: #include "duckdb/function/table_function.hpp"
4: #include "duckdb/function/function_set.hpp"
5: #include "duckdb/common/algorithm.hpp"
6: #include "duckdb/common/operator/add.hpp"
7: #include "duckdb/common/types/timestamp.hpp"
8: 
9: namespace duckdb {
10: 
11: //===--------------------------------------------------------------------===//
12: // Range (integers)
13: //===--------------------------------------------------------------------===//
14: struct RangeFunctionBindData : public TableFunctionData {
15: 	hugeint_t start;
16: 	hugeint_t end;
17: 	hugeint_t increment;
18: 
19: public:
20: 	bool Equals(const FunctionData &other_p) const override {
21: 		auto &other = other_p.Cast<RangeFunctionBindData>();
22: 		return other.start == start && other.end == end && other.increment == increment;
23: 	}
24: };
25: 
26: template <bool GENERATE_SERIES>
27: static void GenerateRangeParameters(const vector<Value> &inputs, RangeFunctionBindData &result) {
28: 	for (auto &input : inputs) {
29: 		if (input.IsNull()) {
30: 			result.start = GENERATE_SERIES ? 1 : 0;
31: 			result.end = 0;
32: 			result.increment = 1;
33: 			return;
34: 		}
35: 	}
36: 	if (inputs.size() < 2) {
37: 		// single argument: only the end is specified
38: 		result.start = 0;
39: 		result.end = inputs[0].GetValue<int64_t>();
40: 	} else {
41: 		// two arguments: first two arguments are start and end
42: 		result.start = inputs[0].GetValue<int64_t>();
43: 		result.end = inputs[1].GetValue<int64_t>();
44: 	}
45: 	if (inputs.size() < 3) {
46: 		result.increment = 1;
47: 	} else {
48: 		result.increment = inputs[2].GetValue<int64_t>();
49: 	}
50: 	if (result.increment == 0) {
51: 		throw BinderException("interval cannot be 0!");
52: 	}
53: 	if (result.start > result.end && result.increment > 0) {
54: 		throw BinderException("start is bigger than end, but increment is positive: cannot generate infinite series");
55: 	} else if (result.start < result.end && result.increment < 0) {
56: 		throw BinderException("start is smaller than end, but increment is negative: cannot generate infinite series");
57: 	}
58: }
59: 
60: template <bool GENERATE_SERIES>
61: static unique_ptr<FunctionData> RangeFunctionBind(ClientContext &context, TableFunctionBindInput &input,
62:                                                   vector<LogicalType> &return_types, vector<string> &names) {
63: 	auto result = make_uniq<RangeFunctionBindData>();
64: 	auto &inputs = input.inputs;
65: 	GenerateRangeParameters<GENERATE_SERIES>(inputs, *result);
66: 
67: 	return_types.emplace_back(LogicalType::BIGINT);
68: 	if (GENERATE_SERIES) {
69: 		// generate_series has inclusive bounds on the RHS
70: 		if (result->increment < 0) {
71: 			result->end = result->end - 1;
72: 		} else {
73: 			result->end = result->end + 1;
74: 		}
75: 		names.emplace_back("generate_series");
76: 	} else {
77: 		names.emplace_back("range");
78: 	}
79: 	return std::move(result);
80: }
81: 
82: struct RangeFunctionState : public GlobalTableFunctionState {
83: 	RangeFunctionState() : current_idx(0) {
84: 	}
85: 
86: 	int64_t current_idx;
87: };
88: 
89: static unique_ptr<GlobalTableFunctionState> RangeFunctionInit(ClientContext &context, TableFunctionInitInput &input) {
90: 	return make_uniq<RangeFunctionState>();
91: }
92: 
93: static void RangeFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {
94: 	auto &bind_data = data_p.bind_data->Cast<RangeFunctionBindData>();
95: 	auto &state = data_p.global_state->Cast<RangeFunctionState>();
96: 
97: 	auto increment = bind_data.increment;
98: 	auto end = bind_data.end;
99: 	hugeint_t current_value = bind_data.start + increment * state.current_idx;
100: 	int64_t current_value_i64;
101: 	if (!Hugeint::TryCast<int64_t>(current_value, current_value_i64)) {
102: 		return;
103: 	}
104: 	int64_t offset = increment < 0 ? 1 : -1;
105: 	idx_t remaining = MinValue<idx_t>(Hugeint::Cast<idx_t>((end - current_value + (increment + offset)) / increment),
106: 	                                  STANDARD_VECTOR_SIZE);
107: 	// set the result vector as a sequence vector
108: 	output.data[0].Sequence(current_value_i64, Hugeint::Cast<int64_t>(increment), remaining);
109: 	// increment the index pointer by the remaining count
110: 	state.current_idx += remaining;
111: 	output.SetCardinality(remaining);
112: }
113: 
114: unique_ptr<NodeStatistics> RangeCardinality(ClientContext &context, const FunctionData *bind_data_p) {
115: 	auto &bind_data = bind_data_p->Cast<RangeFunctionBindData>();
116: 	idx_t cardinality = Hugeint::Cast<idx_t>((bind_data.end - bind_data.start) / bind_data.increment);
117: 	return make_uniq<NodeStatistics>(cardinality, cardinality);
118: }
119: 
120: //===--------------------------------------------------------------------===//
121: // Range (timestamp)
122: //===--------------------------------------------------------------------===//
123: struct RangeDateTimeBindData : public TableFunctionData {
124: 	timestamp_t start;
125: 	timestamp_t end;
126: 	interval_t increment;
127: 	bool inclusive_bound;
128: 	bool greater_than_check;
129: 
130: public:
131: 	bool Equals(const FunctionData &other_p) const override {
132: 		auto &other = other_p.Cast<RangeDateTimeBindData>();
133: 		return other.start == start && other.end == end && other.increment == increment &&
134: 		       other.inclusive_bound == inclusive_bound && other.greater_than_check == greater_than_check;
135: 	}
136: 
137: 	bool Finished(timestamp_t current_value) const {
138: 		if (greater_than_check) {
139: 			if (inclusive_bound) {
140: 				return current_value > end;
141: 			} else {
142: 				return current_value >= end;
143: 			}
144: 		} else {
145: 			if (inclusive_bound) {
146: 				return current_value < end;
147: 			} else {
148: 				return current_value <= end;
149: 			}
150: 		}
151: 	}
152: };
153: 
154: template <bool GENERATE_SERIES>
155: static unique_ptr<FunctionData> RangeDateTimeBind(ClientContext &context, TableFunctionBindInput &input,
156:                                                   vector<LogicalType> &return_types, vector<string> &names) {
157: 	auto result = make_uniq<RangeDateTimeBindData>();
158: 	auto &inputs = input.inputs;
159: 	D_ASSERT(inputs.size() == 3);
160: 	for (idx_t i = 0; i < inputs.size(); ++i) {
161: 		if (inputs[i].IsNull()) {
162: 			throw BinderException("RANGE with NULL argument is not supported");
163: 		}
164: 	}
165: 	result->start = inputs[0].GetValue<timestamp_t>();
166: 	result->end = inputs[1].GetValue<timestamp_t>();
167: 	result->increment = inputs[2].GetValue<interval_t>();
168: 
169: 	// Infinities either cause errors or infinite loops, so just ban them
170: 	if (!Timestamp::IsFinite(result->start) || !Timestamp::IsFinite(result->end)) {
171: 		throw BinderException("RANGE with infinite bounds is not supported");
172: 	}
173: 
174: 	if (result->increment.months == 0 && result->increment.days == 0 && result->increment.micros == 0) {
175: 		throw BinderException("interval cannot be 0!");
176: 	}
177: 	// all elements should point in the same direction
178: 	if (result->increment.months > 0 || result->increment.days > 0 || result->increment.micros > 0) {
179: 		if (result->increment.months < 0 || result->increment.days < 0 || result->increment.micros < 0) {
180: 			throw BinderException("RANGE with composite interval that has mixed signs is not supported");
181: 		}
182: 		result->greater_than_check = true;
183: 		if (result->start > result->end) {
184: 			throw BinderException(
185: 			    "start is bigger than end, but increment is positive: cannot generate infinite series");
186: 		}
187: 	} else {
188: 		result->greater_than_check = false;
189: 		if (result->start < result->end) {
190: 			throw BinderException(
191: 			    "start is smaller than end, but increment is negative: cannot generate infinite series");
192: 		}
193: 	}
194: 	return_types.push_back(inputs[0].type());
195: 	if (GENERATE_SERIES) {
196: 		// generate_series has inclusive bounds on the RHS
197: 		result->inclusive_bound = true;
198: 		names.emplace_back("generate_series");
199: 	} else {
200: 		result->inclusive_bound = false;
201: 		names.emplace_back("range");
202: 	}
203: 	return std::move(result);
204: }
205: 
206: struct RangeDateTimeState : public GlobalTableFunctionState {
207: 	explicit RangeDateTimeState(timestamp_t start_p) : current_state(start_p) {
208: 	}
209: 
210: 	timestamp_t current_state;
211: 	bool finished = false;
212: };
213: 
214: static unique_ptr<GlobalTableFunctionState> RangeDateTimeInit(ClientContext &context, TableFunctionInitInput &input) {
215: 	auto &bind_data = input.bind_data->Cast<RangeDateTimeBindData>();
216: 	return make_uniq<RangeDateTimeState>(bind_data.start);
217: }
218: 
219: static void RangeDateTimeFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {
220: 	auto &bind_data = data_p.bind_data->Cast<RangeDateTimeBindData>();
221: 	auto &state = data_p.global_state->Cast<RangeDateTimeState>();
222: 	if (state.finished) {
223: 		return;
224: 	}
225: 
226: 	idx_t size = 0;
227: 	auto data = FlatVector::GetData<timestamp_t>(output.data[0]);
228: 	while (true) {
229: 		if (bind_data.Finished(state.current_state)) {
230: 			state.finished = true;
231: 			break;
232: 		}
233: 		if (size >= STANDARD_VECTOR_SIZE) {
234: 			break;
235: 		}
236: 		data[size++] = state.current_state;
237: 		state.current_state =
238: 		    AddOperator::Operation<timestamp_t, interval_t, timestamp_t>(state.current_state, bind_data.increment);
239: 	}
240: 	output.SetCardinality(size);
241: }
242: 
243: void RangeTableFunction::RegisterFunction(BuiltinFunctions &set) {
244: 	TableFunctionSet range("range");
245: 
246: 	TableFunction range_function({LogicalType::BIGINT}, RangeFunction, RangeFunctionBind<false>, RangeFunctionInit);
247: 	range_function.cardinality = RangeCardinality;
248: 
249: 	// single argument range: (end) - implicit start = 0 and increment = 1
250: 	range.AddFunction(range_function);
251: 	// two arguments range: (start, end) - implicit increment = 1
252: 	range_function.arguments = {LogicalType::BIGINT, LogicalType::BIGINT};
253: 	range.AddFunction(range_function);
254: 	// three arguments range: (start, end, increment)
255: 	range_function.arguments = {LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::BIGINT};
256: 	range.AddFunction(range_function);
257: 	range.AddFunction(TableFunction({LogicalType::TIMESTAMP, LogicalType::TIMESTAMP, LogicalType::INTERVAL},
258: 	                                RangeDateTimeFunction, RangeDateTimeBind<false>, RangeDateTimeInit));
259: 	set.AddFunction(range);
260: 	// generate_series: similar to range, but inclusive instead of exclusive bounds on the RHS
261: 	TableFunctionSet generate_series("generate_series");
262: 	range_function.bind = RangeFunctionBind<true>;
263: 	range_function.arguments = {LogicalType::BIGINT};
264: 	generate_series.AddFunction(range_function);
265: 	range_function.arguments = {LogicalType::BIGINT, LogicalType::BIGINT};
266: 	generate_series.AddFunction(range_function);
267: 	range_function.arguments = {LogicalType::BIGINT, LogicalType::BIGINT, LogicalType::BIGINT};
268: 	generate_series.AddFunction(range_function);
269: 	generate_series.AddFunction(TableFunction({LogicalType::TIMESTAMP, LogicalType::TIMESTAMP, LogicalType::INTERVAL},
270: 	                                          RangeDateTimeFunction, RangeDateTimeBind<true>, RangeDateTimeInit));
271: 	set.AddFunction(generate_series);
272: }
273: 
274: void BuiltinFunctions::RegisterTableFunctions() {
275: 	CheckpointFunction::RegisterFunction(*this);
276: 	GlobTableFunction::RegisterFunction(*this);
277: 	RangeTableFunction::RegisterFunction(*this);
278: 	RepeatTableFunction::RegisterFunction(*this);
279: 	SummaryTableFunction::RegisterFunction(*this);
280: 	UnnestTableFunction::RegisterFunction(*this);
281: 	RepeatRowTableFunction::RegisterFunction(*this);
282: 	CSVSnifferFunction::RegisterFunction(*this);
283: 	ReadBlobFunction::RegisterFunction(*this);
284: 	ReadTextFunction::RegisterFunction(*this);
285: 	QueryTableFunction::RegisterFunction(*this);
286: }
287: 
288: } // namespace duckdb
[end of src/function/table/range.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: