{
  "repo": "duckdb/duckdb",
  "pull_number": 8511,
  "instance_id": "duckdb__duckdb-8511",
  "issue_numbers": [
    "7631"
  ],
  "base_commit": "fd683b9fb21c9c6a72d7599e42c47894d9aedf9e",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex 387a7b906a6b..43e4f7b037e8 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -165,7 +165,7 @@ public ResultSet executeQuery() throws SQLException {\n         if (!returnsResultSet) {\n             throw new SQLException(\"executeQuery() can only be used with queries that return a ResultSet\");\n         }\n-        return getResultSet();\n+        return select_result;\n     }\n \n     @Override\n@@ -175,7 +175,7 @@ public int executeUpdate() throws SQLException {\n             throw new SQLException(\n                 \"executeUpdate() can only be used with queries that return nothing (eg, a DDL statement), or update rows\");\n         }\n-        return getUpdateCount();\n+        return getUpdateCountInternal();\n     }\n \n     @Override\n@@ -361,6 +361,9 @@ public void setCursorName(String name) throws SQLException {\n         throw new SQLFeatureNotSupportedException(\"setCursorName\");\n     }\n \n+    /**\n+     * The returned `ResultSet` must be closed by the user to avoid a memory leak\n+     */\n     @Override\n     public ResultSet getResultSet() throws SQLException {\n         if (isClosed()) {\n@@ -373,11 +376,14 @@ public ResultSet getResultSet() throws SQLException {\n         if (!returnsResultSet) {\n             return null;\n         }\n-        return select_result;\n+\n+        // getResultSet can only be called once per result\n+        ResultSet to_return = select_result;\n+        this.select_result = null;\n+        return to_return;\n     }\n \n-    @Override\n-    public int getUpdateCount() throws SQLException {\n+    private Integer getUpdateCountInternal() throws SQLException {\n         if (isClosed()) {\n             throw new SQLException(\"Statement was closed\");\n         }\n@@ -385,12 +391,20 @@ public int getUpdateCount() throws SQLException {\n             throw new SQLException(\"Prepare something first\");\n         }\n \n-        if (returnsResultSet || select_result.isFinished()) {\n+        if (returnsResultSet || returnsNothing || select_result.isFinished()) {\n             return -1;\n         }\n         return update_result;\n     }\n \n+    @Override\n+    public int getUpdateCount() throws SQLException {\n+        // getUpdateCount can only be called once per result\n+        int to_return = getUpdateCountInternal();\n+        update_result = -1;\n+        return to_return;\n+    }\n+\n     @Override\n     public boolean getMoreResults() throws SQLException {\n         return false;\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex b73cd53f4b41..64a24e9b6588 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -102,8 +102,12 @@ private static void assertEquals(Object actual, Object expected) throws Exceptio\n         assertTrue(Objects.equals(actual, expected), message);\n     }\n \n+    private static void assertNotNull(Object a) throws Exception {\n+        assertFalse(a == null);\n+    }\n+\n     private static void assertNull(Object a) throws Exception {\n-        assertTrue(a == null);\n+        assertEquals(a, null);\n     }\n \n     private static void assertEquals(double a, double b, double epsilon) throws Exception {\n@@ -3336,10 +3340,35 @@ public static void test_getColumnClassName() throws Exception {\n     public static void test_update_count() throws Exception {\n         try (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n              Statement s = connection.createStatement()) {\n-            s.executeUpdate(\"create table t (i int)\");\n+            s.execute(\"create table t (i int)\");\n+            assertEquals(s.getUpdateCount(), -1);\n             assertEquals(s.executeUpdate(\"insert into t values (1)\"), 1);\n             assertFalse(s.execute(\"insert into t values (1)\"));\n             assertEquals(s.getUpdateCount(), 1);\n+\n+            // result is invalidated after a call\n+            assertEquals(s.getUpdateCount(), -1);\n+        }\n+    }\n+\n+    public static void test_get_result_set() throws Exception {\n+        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\")) {\n+            try (PreparedStatement p = conn.prepareStatement(\"select 1\")) {\n+                p.executeQuery();\n+                try (ResultSet resultSet = p.getResultSet()) {\n+                    assertNotNull(resultSet);\n+                }\n+                assertNull(p.getResultSet()); // returns null after initial call\n+            }\n+\n+            try (Statement s = conn.createStatement()) {\n+                s.execute(\"select 1\");\n+                try (ResultSet resultSet = s.getResultSet()) {\n+                    assertNotNull(resultSet);\n+                }\n+                assertFalse(s.getMoreResults());\n+                assertNull(s.getResultSet()); // returns null after initial call\n+            }\n         }\n     }\n \n",
  "problem_statement": "\"CREATE TABLE rough AS SELECT 1\"  hangs on 0.8.0  when used with DataGrip\n### What happens?\n\n\"CREATE TABLE rough AS SELECT 1\" hangs on 0.80 on Mac.\r\nI tried the latest nightly build which has the same behavior.\r\nI initially tried the CTAS with a parquet file, when it hung, I tried with a simpler select clause(SELECT 1) which had the same behavior.\n\n### To Reproduce\n\nTry \"CREATE TABLE rough AS SELECT 1\" hangs on 0.8.0 on Mac.\n\n### OS:\n\nMac x64\n\n### DuckDB Version:\n\n0.80\n\n### DuckDB Client:\n\nPython\n\n### Full Name:\n\nShiv Gowda\n\n### Affiliation:\n\nWorkday\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "Thanks for the report!\r\n\r\nI cannot reproduce this - neither in the Python client nor in the shell:\r\n\r\n```py\r\nimport duckdb\r\nduckdb.sql('CREATE TABLE rough AS SELECT 1')\r\n```\r\n\r\nPerhaps your earlier queries influenced the database state somehow. Could you try to create a reproducible example?\nThanks for the quick reply and for the beautiful product @Mytherin . I was testing 0.8.0 a few different ways yesterday and incorrectly thought it was Python since I was using [Pycharm DataGrip](https://www.jetbrains.com/datagrip/). Underneath DataGrip uses Java JDBC driver and not Python. I tested again today: \"CREATE TABLE rough AS SELECT 1\" it works fine using  Python but hangs when used through JDBC in DataGrip(0.7.1 works fine for both Python and DataGrip). I am now not blocked though since I can use Python to create the tables. \r\n\r\nAlso another piece of feedback, I tested 0.8.0 with Tableau and it works fine now([unlike 0.7.1](https://github.com/duckdb/duckdb/issues/7013)). It would be nice if Duckdb can support JDBC url parameters to pass the [\"duckdb.read_only\"](https://duckdb.org/docs/api/java.html) flag, since we cannot set the properties issuing a separate 'ro_prop.setProperty(\"duckdb.read_only\", \"true\");' for clients like [Tableau](https://duckdb.org/docs/guides/data_viewers/tableau.html). Right now, If I pass the additional parameter(.\"jdbc:duckdb:/tmp/my_database&read_only=true\"), it creates a database with the name =\"my_database&read_only=true\".  If you want me to file a separate issue for it please do let me know.\nsame issue, here but I am on macbook m1 and jdbc library version is 0.8.1",
  "created_at": "2023-08-08T14:44:23Z"
}