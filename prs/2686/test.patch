diff --git a/test/issues/rigger/rowid_in_clause.test b/test/issues/rigger/rowid_in_clause.test
new file mode 100644
index 000000000000..b8e111d22654
--- /dev/null
+++ b/test/issues/rigger/rowid_in_clause.test
@@ -0,0 +1,63 @@
+# name: test/issues/rigger/rowid_in_clause.test
+# description: SQLancer bug that detected an error in the IN-clause simplification when different types were used
+# group: [rigger]
+
+statement ok
+PRAGMA enable_verification;
+
+statement ok
+CREATE TABLE t0(c0 VARCHAR);
+
+statement ok
+CREATE TABLE t1(c0 VARCHAR);
+
+statement ok
+INSERT INTO t0(c0) VALUES (1);
+
+statement ok
+INSERT INTO t1(c0) VALUES (-1);
+
+query II
+SELECT * FROM t0, t1;
+----
+1	-1
+
+query II
+SELECT * FROM t0, t1 WHERE (t0.rowid IN (0.1))
+----
+
+query II
+SELECT * FROM t0, t1 WHERE (NOT (t0.rowid IN (0.1)))
+----
+1	-1
+
+query II
+SELECT * FROM t0, t1 WHERE (((t0.rowid IN (0.1))) IS NULL);
+----
+
+query II
+SELECT * FROM t0, t1 WHERE (t0.rowid IN (0.1))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (NOT (t0.rowid IN (0.1)))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (((t0.rowid IN (0.1))) IS NULL);
+----
+1	-1
+
+query II
+SELECT * FROM t0, t1 WHERE (t0.rowid IN (0.1::REAL))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (NOT (t0.rowid IN (0.1::REAL)))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (((t0.rowid IN (0.1::REAL))) IS NULL);
+----
+1	-1
+
+query II
+SELECT * FROM t0, t1 WHERE (t0.rowid IN (0.1::DOUBLE))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (NOT (t0.rowid IN (0.1::DOUBLE)))
+UNION ALL
+SELECT * FROM t0, t1 WHERE (((t0.rowid IN (0.1::DOUBLE))) IS NULL);
+----
+1	-1
\ No newline at end of file
diff --git a/test/sql/function/generic/case_short_circuit.test b/test/sql/function/generic/case_short_circuit.test
new file mode 100644
index 000000000000..ee824df8625b
--- /dev/null
+++ b/test/sql/function/generic/case_short_circuit.test
@@ -0,0 +1,23 @@
+# name: test/sql/function/generic/case_short_circuit.test
+# description: Test correct CASE statement short circuiting
+# group: [generic]
+
+statement ok
+PRAGMA enable_verification
+
+statement ok
+create table t (n text);
+
+statement ok
+insert into t values ('1'),('0'),('');
+
+query II
+select n, case 
+when n <> '' and cast(substr(n, 1, 1) as int) <= 0 then '0' 
+when n <> '' and cast(substr(n, 1, 1) as int) > 0 then '1' 
+else '2'end as x from t
+ORDER BY n;
+----
+(empty)	2
+0	0
+1	1
diff --git a/test/sql/settings/setting_disabled_optimizer.test b/test/sql/settings/setting_disabled_optimizer.test
new file mode 100644
index 000000000000..6f2b7fd2b5fb
--- /dev/null
+++ b/test/sql/settings/setting_disabled_optimizer.test
@@ -0,0 +1,21 @@
+# name: test/sql/settings/setting_disabled_optimizer.test
+# description: Test disabled optimizers setting
+# group: [settings]
+
+statement ok
+SET disabled_optimizers=''
+
+statement ok
+SET disabled_optimizers TO 'expression_rewriter'
+
+statement ok
+SET disabled_optimizers TO 'expression_rewriter,filter_pushdown,join_order'
+
+statement ok
+SELECT current_setting('disabled_optimizers');
+
+statement error
+SET disabled_optimizers TO 'expression_rewriteX'
+
+statement error
+SET disabled_optimizers TO 'unknown_optimizer'
