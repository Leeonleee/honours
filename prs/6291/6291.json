{
  "repo": "duckdb/duckdb",
  "pull_number": 6291,
  "instance_id": "duckdb__duckdb-6291",
  "issue_numbers": [
    "6269"
  ],
  "base_commit": "8a83cb284a174c14510c6ee6ea8495d2df0be56d",
  "patch": "diff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\nindex 5731c1ce90f6..f1a74805c213 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java\n@@ -2,6 +2,9 @@\n \n import javax.sql.rowset.CachedRowSet;\n import javax.sql.rowset.RowSetProvider;\n+\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n import java.sql.PreparedStatement;\n@@ -788,7 +791,60 @@ public ResultSet getVersionColumns(String catalog, String schema, String table)\n \n \t@Override\n \tpublic ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException(\"getPrimaryKeys\");\n+\t\tStringWriter sw = new StringWriter();\n+\t\tPrintWriter pw = new PrintWriter(sw);\n+\t\tpw.println(\"WITH constraint_columns AS (\");\n+\t\tpw.println(\"SELECT\");\n+\t\tpw.println(\"  database_name AS \\\"TABLE_CAT\\\"\");\n+\t\tpw.println(\", schema_name AS \\\"TABLE_SCHEM\\\"\");\n+\t\tpw.println(\", table_name AS \\\"TABLE_NAME\\\"\");\n+\t\tpw.println(\", unnest(constraint_column_names) AS \\\"COLUMN_NAME\\\"\");\n+\t\tpw.println(\", CAST(NULL AS VARCHAR) AS \\\"PK_NAME\\\"\");\n+\t\tpw.println(\"FROM duckdb_constraints\");\n+\t\tpw.println(\"WHERE constraint_type = 'PRIMARY KEY'\");\n+\t\t// catalog param\n+\t\tif (catalog != null) {\n+\t\t\tif (catalog.isEmpty()) {\n+\t\t\t\tpw.println(\"AND database_name IS NULL\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tpw.println(\"AND database_name = ?\");\n+\t\t\t}\n+\t\t}\n+\t\t// schema param\n+\t\tif (schema != null) {\n+\t\t\tif (schema.isEmpty()) {\n+\t\t\t\tpw.println(\"AND schema_name IS NULL\");\n+\t\t\t}\n+\t\t\telse {\n+\t\t\t\tpw.println(\"AND schema_name = ?\");\n+\t\t\t}\n+\t\t}\n+\t\t// table name param\n+\t\tpw.println(\"AND table_name = ?\");\n+\t\t\n+\t\tpw.println(\")\");\n+\t\tpw.println(\"SELECT \\\"TABLE_CAT\\\"\");\n+\t\tpw.println(\", \\\"TABLE_SCHEM\\\"\");\n+\t\tpw.println(\", \\\"TABLE_NAME\\\"\");\n+\t\tpw.println(\", \\\"COLUMN_NAME\\\"\");\n+\t\tpw.println(\", CAST(ROW_NUMBER() OVER \");\n+\t\tpw.println(\"(PARTITION BY \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\") AS INT) AS \\\"KEY_SEQ\\\"\");\n+\t\tpw.println(\", \\\"PK_NAME\\\"\");\n+\t\tpw.println(\"FROM constraint_columns\");\n+\t\tpw.println(\"ORDER BY \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\", \\\"KEY_SEQ\\\"\");\n+\t\t\n+\t\tint paramIndex = 1;\n+\t\tPreparedStatement ps = conn.prepareStatement(sw.toString());\n+\t\t\n+\t\tif (catalog != null && !catalog.isEmpty()) {\n+\t\t\tps.setString(paramIndex++, catalog);\n+\t\t}\n+\t\tif (schema != null && !schema.isEmpty()) {\n+\t\t\tps.setString(paramIndex++, schema);\n+\t\t}\n+\t\tps.setString(paramIndex++, table);\n+\t\treturn ps.executeQuery();\n \t}\n \n \t@Override\n",
  "test_patch": "diff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex a5a4e44c3c9d..d7cbbe721578 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -1,5 +1,7 @@\n package org.duckdb.test;\n \n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -2552,6 +2554,132 @@ public static void test_get_functions() throws Exception {\n \t\t}\n \t}\n \n+\tpublic static void test_get_primary_keys() throws Exception {\n+\t\ttry (\n+\t\t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\tStatement stmt = conn.createStatement();\n+\t\t) {\n+\t\t\tObject[][] testData = new Object[12][6];\n+\t\t\tint testDataIndex = 0;\n+\n+\t\t\tObject[][] params = new Object[6][5];\n+\t\t\tint paramIndex = 0;\n+\t\t\t\n+\t\t\tString catalog = conn.getCatalog();\n+\n+\t\t\tfor (int schemaNumber = 1; schemaNumber <= 2; schemaNumber++) {\n+\t\t\t\tString schemaName = \"schema\" + schemaNumber;\n+\t\t\t\tstmt.executeUpdate(\"CREATE SCHEMA \" + schemaName);\n+\t\t\t\tstmt.executeUpdate(\"SET SCHEMA = '\" + schemaName + \"'\");\n+\t\t\t\tfor (int tableNumber = 1; tableNumber <= 3; tableNumber++) {\n+\t\t\t\t\tString tableName = \"table\" + tableNumber;\n+\t\t\t\t\tparams[paramIndex] = new Object[] {catalog, schemaName, tableName, testDataIndex, -1};\n+\t\t\t\t\tString columns = null;\n+\t\t\t\t\tString pk = null;\n+\t\t\t\t\tfor (int columnNumber = 1; columnNumber <= tableNumber; columnNumber++) {\n+\t\t\t\t\t\tString columnName = \"column\" + columnNumber;\n+\t\t\t\t\t\tString columnDef = columnName + \" int not null\";\n+\t\t\t\t\t\tcolumns = columns == null ? columnDef : columns + \",\" + columnDef;\n+\t\t\t\t\t\tpk = pk == null ? columnName : pk + \",\" + columnName;\n+\t\t\t\t\t\ttestData[testDataIndex++] = new Object[] { catalog, schemaName, tableName, columnName, columnNumber, null };\n+\t\t\t\t\t}\n+\t\t\t\t\tstmt.executeUpdate(\"CREATE TABLE \" + tableName + \"(\" + columns + \",PRIMARY KEY(\" + pk + \") )\");\n+\t\t\t\t\tparams[paramIndex][4] = testDataIndex;\n+\t\t\t\t\tparamIndex += 1;\n+\t\t\t\t}\n+\t\t\t}\n+\n+\t\t\tDatabaseMetaData databaseMetaData = conn.getMetaData();\n+\t\t\tfor (paramIndex = 0; paramIndex < 6; paramIndex++) {\n+\t\t\t\tObject[] paramSet = params[paramIndex];\n+\t\t\t\tResultSet resultSet = databaseMetaData.getPrimaryKeys(\n+\t\t\t\t\t(String)paramSet[0], \n+\t\t\t\t\t(String)paramSet[1], \n+\t\t\t\t\t(String)paramSet[2]\n+\t\t\t\t);\n+\t\t\t\tfor(testDataIndex = (int)paramSet[3]; testDataIndex < (int)paramSet[4]; testDataIndex++) {\n+\t\t\t\t\tassertTrue(resultSet.next(), \"Expected a row at position \" + testDataIndex);\n+\t\t\t\t\tObject[] testDataRow = testData[testDataIndex];\n+\t\t\t\t\tfor (int columnIndex = 0; columnIndex < testDataRow.length; columnIndex++) {\n+\t\t\t\t\t\tObject value = testDataRow[columnIndex];\n+\t\t\t\t\t\tif (value == null || value instanceof String) {\n+\t\t\t\t\t\t\tString columnValue = resultSet.getString(columnIndex + 1);\n+\t\t\t\t\t\t\tassertTrue(\n+\t\t\t\t\t\t\t\tvalue == null ? columnValue == null : value.equals(columnValue),\n+\t\t\t\t\t\t\t\t\"row value \" + testDataIndex + \", \" + columnIndex + \" \" + value + \n+\t\t\t\t\t\t\t\t\" should equal column value \"+ columnValue\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tint testValue = ((Integer) value).intValue();\n+\t\t\t\t\t\t\tint columnValue = resultSet.getInt(columnIndex + 1);\n+\t\t\t\t\t\t\tassertTrue(\n+\t\t\t\t\t\t\t\ttestValue == columnValue,\n+\t\t\t\t\t\t\t\t\"row value \" + testDataIndex + \", \" + columnIndex + \" \" + testValue + \n+\t\t\t\t\t\t\t\t\" should equal column value \" + columnValue\n+\t\t\t\t\t\t\t);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tresultSet.close();\n+\t\t\t}\n+\n+\t\t\t\n+\t\t\t/*\n+\t\t\tStringWriter sw = new StringWriter();\n+\t\t\tPrintWriter pw = new PrintWriter(sw);\n+\t\t\tpw.println(\"WITH constraint_columns as (\");\n+\t\t\tpw.println(\"select\");\n+\t\t\tpw.println(\"  database_name as \\\"TABLE_CAT\\\"\");\n+\t\t\tpw.println(\", schema_name as \\\"TABLE_SCHEM\\\"\");\n+\t\t\tpw.println(\", table_name as \\\"TABLE_NAME\\\"\");\n+\t\t\tpw.println(\", unnest(constraint_column_names) as \\\"COLUMN_NAME\\\"\");\n+\t\t\tpw.println(\", cast(null as varchar) as \\\"PK_NAME\\\"\");\n+\t\t\tpw.println(\"from duckdb_constraints\");\n+\t\t\tpw.println(\"where constraint_type = 'PRIMARY KEY'\");\n+\t\t\tpw.println(\")\");\n+\t\t\tpw.println(\"SELECT \\\"TABLE_CAT\\\"\");\n+\t\t\tpw.println(\", \\\"TABLE_SCHEM\\\"\");\n+\t\t\tpw.println(\", \\\"TABLE_NAME\\\"\");\n+\t\t\tpw.println(\", \\\"COLUMN_NAME\\\"\");\n+\t\t\tpw.println(\", cast(row_number() over \");\n+\t\t\tpw.println(\"(partition by \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\") as int) as \\\"KEY_SEQ\\\"\");\n+\t\t\tpw.println(\", \\\"PK_NAME\\\"\");\n+\t\t\tpw.println(\"FROM constraint_columns\");\n+\t\t\tpw.println(\"ORDER BY TABLE_CAT, TABLE_SCHEM, TABLE_NAME, KEY_SEQ\");\n+\n+\t\t\tResultSet resultSet = stmt.executeQuery(sw.toString());\n+\t\t\tResultSet resultSet = databaseMetaData.getPrimaryKeys(null, null, catalog);\n+\t\t\tfor (testDataIndex = 0; testDataIndex < testData.length; testDataIndex++) {\n+\t\t\t\tassertTrue(resultSet.next(), \"Expected a row at position \" + testDataIndex);\n+\t\t\t\tObject[] testDataRow = testData[testDataIndex];\n+\t\t\t\tfor (int columnIndex = 0; columnIndex < testDataRow.length; columnIndex++) {\n+\t\t\t\t\tObject value = testDataRow[columnIndex];\n+\t\t\t\t\tif (value == null || value instanceof String) {\n+\t\t\t\t\t\tString columnValue = resultSet.getString(columnIndex + 1);\n+\t\t\t\t\t\tassertTrue(\n+\t\t\t\t\t\t\tvalue == null ? columnValue == null : value.equals(columnValue),\n+\t\t\t\t\t\t\t\"row value \" + testDataIndex + \", \" + columnIndex + \" \" + value + \n+\t\t\t\t\t\t\t\" should equal column value \"+ columnValue\n+\t\t\t\t\t\t);\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\tint testValue = ((Integer) value).intValue();\n+\t\t\t\t\t\tint columnValue = resultSet.getInt(columnIndex + 1);\n+\t\t\t\t\t\tassertTrue(\n+\t\t\t\t\t\t\ttestValue == columnValue,\n+\t\t\t\t\t\t\t\"row value \" + testDataIndex + \", \" + columnIndex + \" \" + testValue + \n+\t\t\t\t\t\t\t\" should equal column value \" + columnValue\n+\t\t\t\t\t\t);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\t*/\n+\t\t}\n+\t\tcatch(Exception e) {\n+\t\t\te.printStackTrace();\n+\t\t\tthrow e;\n+\t\t}\n+\t}\n+\n \tpublic static void test_instance_cache() throws Exception {\n \t\tPath database_file = Files.createTempFile(\"duckdb-instance-cache-test-\", \".duckdb\");\n \t\tdatabase_file.toFile().delete();\n",
  "problem_statement": "DuckDBJ: DuckDBDatabaseMetaData.getPrimaryKeys always throws SQLFeatureNotSupportedException\n### What happens?\n\nCalling getPrimaryKeys on DatabaseMetadata always throws a SQLFeatureNotSupportedException.\r\n\r\nhttps://github.com/duckdb/duckdb/blob/master/tools/jdbc/src/main/java/org/duckdb/DuckDBDatabaseMetaData.java#L791\n\n### To Reproduce\n\nTestcase:\r\n\r\n```\r\n  public void test_get_primary_keys() throws SQLException {\r\n    Object[][] testData = new Object[12][6];\r\n    int testDataIndex = 0;\r\n    Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\r\n    String catalog = conn.getCatalog();\r\n    Statement stmt = conn.createStatement();\r\n    for (int schemaNumber = 1; schemaNumber <= 2; schemaNumber++) {\r\n      String schemaName = \"schema\" + schemaNumber;\r\n      stmt.executeUpdate(\"CREATE SCHEMA \" + schemaName);\r\n      stmt.executeUpdate(\"SET SCHEMA = '\" + schemaName + \"'\");\r\n      for (int tableNumber = 1; tableNumber <= 3; tableNumber++) {\r\n        String tableName = \"table\" + tableNumber;\r\n        String columns = null;\r\n        String pk = null;\r\n        for (int columnNumber = 1; columnNumber <= tableNumber; columnNumber++) {\r\n          String columnName = \"column\" + columnNumber;\r\n          String columnDef = columnName + \" int not null\";\r\n          columns = columns == null ? columnDef : columns + \",\" + columnDef;\r\n          pk = pk == null ? columnName : pk + \",\" + columnName;\r\n          testData[testDataIndex++] = new Object[] {\r\n            catalog,\r\n            schemaName,\r\n            tableName,\r\n            columnName,\r\n            columnNumber,\r\n            null\r\n          };\r\n        }\r\n        stmt.executeUpdate(\r\n          \"CREATE TABLE \" + tableName + \"(\" + columns + \r\n          \",PRIMARY KEY(\" + pk + \") )\"\r\n        );\r\n      }\r\n    }\r\n    StringWriter sw = new StringWriter();\r\n    PrintWriter pw = new PrintWriter(sw);\r\n    pw.println(\"WITH constraint_columns as (\");\r\n    pw.println(\"select\");\r\n    pw.println(\"  database_name as \\\"TABLE_CAT\\\"\");\r\n    pw.println(\", schema_name as \\\"TABLE_SCHEM\\\"\");\r\n    pw.println(\", table_name as \\\"TABLE_NAME\\\"\");\r\n    pw.println(\", unnest(constraint_column_names) as \\\"COLUMN_NAME\\\"\");\r\n    pw.println(\", cast(null as varchar) as \\\"PK_NAME\\\"\");\r\n    pw.println(\"from duckdb_constraints\");\r\n    pw.println(\"where constraint_type = 'PRIMARY KEY'\");\r\n    pw.println(\")\");\r\n    pw.println(\"SELECT \\\"TABLE_CAT\\\"\");\r\n    pw.println(\", \\\"TABLE_SCHEM\\\"\");\r\n    pw.println(\", \\\"TABLE_NAME\\\"\");\r\n    pw.println(\", \\\"COLUMN_NAME\\\"\");\r\n    pw.println(\", cast(row_number() over \");\r\n    pw.println(\"(partition by \\\"TABLE_CAT\\\", \\\"TABLE_SCHEM\\\", \\\"TABLE_NAME\\\") as int) as \\\"KEY_SEQ\\\"\");\r\n    pw.println(\", \\\"PK_NAME\\\"\");\r\n    pw.println(\"FROM constraint_columns\");\r\n    pw.println(\"ORDER BY TABLE_CAT, TABLE_SCHEM, TABLE_NAME, KEY_SEQ\");\r\n    \r\n    ResultSet resultSet = stmt.executeQuery(sw.toString());\r\n    for (testDataIndex = 0; testDataIndex < testData.length; testDataIndex++) {\r\n      assertTrue(\"Expected a row at position \" + testDataIndex, resultSet.next());\r\n      Object[] testDataRow = testData[testDataIndex];\r\n      for (int columnIndex = 0; columnIndex < testDataRow.length; columnIndex++) {\r\n        Object value = testDataRow[columnIndex];\r\n        if (value == null || value instanceof String) {\r\n          String columnValue = resultSet.getString(columnIndex + 1);\r\n          assertTrue(\r\n            \"row value \" + testDataIndex + \", \" + columnIndex + \r\n            \" \" + value + \" should equal column value \" + columnValue, \r\n            value == null ? columnValue == null : value.equals(columnValue)\r\n          );\r\n        }\r\n        else {\r\n          int testValue = ((Integer)value).intValue();\r\n          int columnValue = resultSet.getInt(columnIndex + 1);\r\n          assertTrue(\r\n            \"row value \" + testDataIndex + \", \" + columnIndex + \r\n            \" \" + testValue + \" should equal column value \" + columnValue,\r\n            testValue == columnValue\r\n          );\r\n        }\r\n      }\r\n    }    \r\n  }\r\n```\n\n### OS:\n\nWindows 10 Pro\n\n### DuckDB Version:\n\nv0.6.0 2213f9c946\n\n### DuckDB Client:\n\nDuckDBJ (jdbc)\n\n### Full Name:\n\nRoland Bouman\n\n### Affiliation:\n\nJust-Bi.nl (an EPAM company) \n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "I did some work to provide an implementation. Will send PR this evening.",
  "created_at": "2023-02-14T22:28:29Z"
}