{
  "repo": "duckdb/duckdb",
  "pull_number": 2746,
  "instance_id": "duckdb__duckdb-2746",
  "issue_numbers": [
    "2745",
    "2745"
  ],
  "base_commit": "915530a92d9a7142e2094950030711cfaaeea341",
  "patch": "diff --git a/src/planner/binder/query_node/plan_recursive_cte_node.cpp b/src/planner/binder/query_node/plan_recursive_cte_node.cpp\nindex 81257f6a64c7..1d67f10b60ab 100644\n--- a/src/planner/binder/query_node/plan_recursive_cte_node.cpp\n+++ b/src/planner/binder/query_node/plan_recursive_cte_node.cpp\n@@ -24,7 +24,8 @@ unique_ptr<LogicalOperator> Binder::CreatePlan(BoundRecursiveCTENode &node) {\n \tleft_node = CastLogicalOperatorToTypes(node.left->types, node.types, move(left_node));\n \tright_node = CastLogicalOperatorToTypes(node.right->types, node.types, move(right_node));\n \n-\tif (node.right_binder->bind_context.cte_references[node.ctename] == nullptr) {\n+\tif (!node.right_binder->bind_context.cte_references[node.ctename] ||\n+\t    *node.right_binder->bind_context.cte_references[node.ctename] == 0) {\n \t\tauto root = make_unique<LogicalSetOperation>(node.setop_index, node.types.size(), move(left_node),\n \t\t                                             move(right_node), LogicalOperatorType::LOGICAL_UNION);\n \t\treturn VisitQueryNode(node, move(root));\n",
  "test_patch": "diff --git a/test/sql/cte/recursive_hang_2745.test b/test/sql/cte/recursive_hang_2745.test\nnew file mode 100644\nindex 000000000000..cfca573abdae\n--- /dev/null\n+++ b/test/sql/cte/recursive_hang_2745.test\n@@ -0,0 +1,120 @@\n+# name: test/sql/cte/recursive_hang_2745.test\n+# description: Issue #2745: sql with RECURSIVE keyword but does not RECURSIVE hang\n+# group: [cte]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query III\n+with RECURSIVE parents_tab (id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents as (\n+    select * from parents_tab\n+    union all\n+    select id, value+2, parent from parents_tab2\n+)\n+select * from parents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+query III\n+with RECURSIVE parents_tab (id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+)\n+select * from parents_tab\n+union all\n+select id, value+2, parent from parents_tab2;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+query III\n+with parents_tab (id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents as (\n+    select * from parents_tab\n+    union all\n+    select id, value+2, parent from parents_tab2\n+)\n+select * from parents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n+\n+statement ok\n+create view vparents as\n+with RECURSIVE parents_tab (id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+),\n+parents_tab2(id , value , parent )\n+as (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\n+)\n+select * from parents_tab\n+union all\n+select id, value+2, parent from parents_tab2;\n+\n+query III\n+select * from vparents;\n+----\n+1\t1\t2\n+2\t2\t4\n+3\t1\t4\n+4\t2\t-1\n+5\t1\t2\n+6\t2\t7\n+7\t1\t-1\n+1\t3\t2\n+2\t4\t4\n+3\t3\t4\n+4\t4\t-1\n+5\t3\t2\n+6\t4\t7\n+7\t3\t-1\n",
  "problem_statement": "sql with RECURSIVE keyword but does not RECURSIVE hang\n#### What happens?\r\nselect a cte table(parents) of sql with RECURSIVE keyword but does not RECURSIVE hang, but run the select of the table is good\r\n\r\n#### To Reproduce\r\n\r\n```\r\n--hang\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n)\r\nselect * from parents;\r\n--good\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n)\r\nselect * from parents_tab\r\nunion all\r\nselect id, value+2, parent from parents_tab2;\r\n\r\n--good too\r\nwith parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n)\r\nselect * from parents;\r\n\r\n--create and select a view is good too\r\ncreate view vparents as\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n)\r\nselect * from parents_tab\r\nunion all\r\nselect id, value+2, parent from parents_tab2;\r\n\r\nselect * from vparents;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: [e.g. iOS]Windows 7 x64\r\n - DuckDB Version: [e.g. 22]0.3.0/0.3.2 dev479\r\n - DuckDB Client: [e.g. Python]CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\nsql with RECURSIVE keyword but does not RECURSIVE hang\n#### What happens?\r\nselect a cte table(parents) of sql with RECURSIVE keyword but does not RECURSIVE hang, but run the select of the table is good\r\n\r\n#### To Reproduce\r\n\r\n```\r\n--hang\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n)\r\nselect * from parents;\r\n--good\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n)\r\nselect * from parents_tab\r\nunion all\r\nselect id, value+2, parent from parents_tab2;\r\n\r\n--good too\r\nwith parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents as (\r\n    select * from parents_tab\r\n    union all\r\n    select id, value+2, parent from parents_tab2\r\n)\r\nselect * from parents;\r\n\r\n--create and select a view is good too\r\ncreate view vparents as\r\nwith RECURSIVE parents_tab (id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n),\r\nparents_tab2(id , value , parent )\r\nas (values (1, 1, 2), (2, 2, 4), (3, 1, 4), (4, 2, -1), (5, 1, 2), (6, 2, 7), (7, 1, -1)\r\n)\r\nselect * from parents_tab\r\nunion all\r\nselect id, value+2, parent from parents_tab2;\r\n\r\nselect * from vparents;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: [e.g. iOS]Windows 7 x64\r\n - DuckDB Version: [e.g. 22]0.3.0/0.3.2 dev479\r\n - DuckDB Client: [e.g. Python]CLI\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\n",
  "hints_text": "\n",
  "created_at": "2021-12-07T06:49:46Z"
}