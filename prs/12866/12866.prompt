You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes.
In the patch file, please make sure to include the line numbers and a blank line at the end so it can be applied using git apply.

<issue>
`read_csv()` fails to recognize DOUBLE fields (uses VARCHAR instead) when `decimal_separator` is set, and there are more than 2047 lines in the CSV file
### What happens?

`read_csv()` fails to recognize DOUBLE fields (uses VARCHAR instead) when `decimal_separator` is set, and there are more than 2047 lines in the CSV file.

### To Reproduce


## 1. This works: CSV file with 2047 lines

Create a CSV file with 2047 lines:
```
echo "text|number" >2047.csv; for a in {1..2047}; do echo "foo|123,000" >>2047.csv; done
```

This creates a CSV file with the content:

```
text|number
foo|123,000
foo|123,000
foo|123,000
foo|123,000
foo|123,000
foo|123,000
...
```

Run `read_csv` on it:
```sql
SUMMARIZE SELECT * FROM read_csv('2047.csv', decimal_separator=',');
```
```
┌─────────────┬─────────────┬─────────┬─────────┬───────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────┬─────────────────┐
│ column_name │ column_type │   min   │   max   │ approx_unique │   avg   │   std   │   q25   │   q50   │   q75   │ count │ null_percentage │
│   varchar   │   varchar   │ varchar │ varchar │     int64     │ varchar │ varchar │ varchar │ varchar │ varchar │ int64 │  decimal(9,2)   │
├─────────────┼─────────────┼─────────┼─────────┼───────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────┼─────────────────┤
│ text        │ VARCHAR     │ foo     │ foo     │             1 │         │         │         │         │         │  2047 │            0.00 │
│ number      │ DOUBLE      │ 123.0   │ 123.0   │             1 │ 123.0   │ 0.0     │ 123.0   │ 123.0   │ 123.0   │  2047 │            0.00 │
└─────────────┴─────────────┴─────────┴─────────┴───────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────┴─────────────────┘
```

The `number` field gets recognized correctly as `DOUBLE`.

BUT:

## 2. This bugs: CSV file with 2048 lines

Same with 2048 lines, create the CSV file:
```
echo "text|number" >2048.csv; for a in {1..2048}; do echo "foo|123,000" >>2048.csv; done
```

Run read_csv:

```sql
SUMMARIZE SELECT * FROM read_csv('2048.csv', decimal_separator=',');
```
```
┌─────────────┬─────────────┬─────────┬─────────┬───────────────┬───────┬───────┬───────┬───────┬───────┬───────┬─────────────────┐
│ column_name │ column_type │   min   │   max   │ approx_unique │  avg  │  std  │  q25  │  q50  │  q75  │ count │ null_percentage │
│   varchar   │   varchar   │ varchar │ varchar │     int64     │ int32 │ int32 │ int32 │ int32 │ int32 │ int64 │  decimal(9,2)   │
├─────────────┼─────────────┼─────────┼─────────┼───────────────┼───────┼───────┼───────┼───────┼───────┼───────┼─────────────────┤
│ text        │ VARCHAR     │ foo     │ foo     │             1 │       │       │       │       │       │  2048 │            0.00 │
│ number      │ VARCHAR     │ 123,000 │ 123,000 │             1 │       │       │       │       │       │  2048 │            0.00 │
└─────────────┴─────────────┴─────────┴─────────┴───────────────┴───────┴───────┴───────┴───────┴───────┴───────┴─────────────────┘
```

As you can see, here `| number      │ VARCHAR     │ 123,000 │ 123,000` is not recognized as `DOUBLE`, but `VARCHAR` gets used instead.

### OS:

Linux, Windows

### DuckDB Version:

v1.0.1-dev2164

### DuckDB Client:

CLI

### Full Name:

K Kovacs

### Affiliation:

Priority Queue Consulting

### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.

I have tested with a nightly build

### Did you include all relevant data sets for reproducing the issue?

Yes

### Did you include all code required to reproduce the issue?

- [X] Yes, I have

### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?

- [X] Yes, I have

</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <picture>
3:     <source media="(prefers-color-scheme: light)" srcset="logo/DuckDB_Logo-horizontal.svg">
4:     <source media="(prefers-color-scheme: dark)" srcset="logo/DuckDB_Logo-horizontal-dark-mode.svg">
5:     <img alt="DuckDB logo" src="logo/DuckDB_Logo-horizontal.svg" height="100">
6:   </picture>
7: </div>
8: <br>
9: 
10: <p align="center">
11:   <a href="https://github.com/duckdb/duckdb/actions"><img src="https://github.com/duckdb/duckdb/actions/workflows/Main.yml/badge.svg?branch=main" alt="Github Actions Badge"></a>
12:   <a href="https://discord.gg/tcvwpjfnZx"><img src="https://shields.io/discord/909674491309850675" alt="discord" /></a>
13:   <a href="https://github.com/duckdb/duckdb/releases/"><img src="https://img.shields.io/github/v/release/duckdb/duckdb?color=brightgreen&display_name=tag&logo=duckdb&logoColor=white" alt="Latest Release"></a>
14: </p>
15: 
16: ## DuckDB
17: 
18: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable, portable, and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs, maps), and [several extensions designed to make SQL easier to use](https://duckdb.org/docs/guides/sql_features/friendly_sql).
19: 
20: DuckDB is available as a [standalone CLI application](https://duckdb.org/docs/api/cli/overview) and has clients for [Python](https://duckdb.org/docs/api/python/overview), [R](https://duckdb.org/docs/api/r), [Java](https://duckdb.org/docs/api/java), [Wasm](https://duckdb.org/docs/api/wasm/overview), etc., with deep integrations with packages such as [pandas](https://duckdb.org/docs/guides/python/sql_on_pandas) and [dplyr](https://duckdblabs.github.io/duckplyr/).
21: 
22: For more information on using DuckDB, please refer to the [DuckDB documentation](https://duckdb.org/docs/).
23: 
24: ## Installation
25: 
26: If you want to install DuckDB, please see [our installation page](https://www.duckdb.org/docs/installation) for instructions.
27: 
28: ## Data Import
29: 
30: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
31: 
32: ```sql
33: SELECT * FROM 'myfile.csv';
34: SELECT * FROM 'myfile.parquet';
35: ```
36: 
37: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
38: 
39: ## SQL Reference
40: 
41: The documentation contains a [SQL introduction and reference](https://duckdb.org/docs/sql/introduction).
42: 
43: ## Development
44: 
45: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run `BUILD_BENCHMARK=1 BUILD_TPCH=1 make` and then perform several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`. The details of benchmarks are in our [Benchmark Guide](benchmark/README.md).
46: 
47: Please also refer to our [Build Guide](https://duckdb.org/dev/building) and [Contribution Guide](CONTRIBUTING.md).
48: 
49: ## Support
50: 
51: See the [Support Options](https://duckdblabs.com/support/) page.
[end of README.md]
[start of src/execution/operator/csv_scanner/sniffer/type_refinement.cpp]
1: #include "duckdb/execution/operator/csv_scanner/csv_sniffer.hpp"
2: #include "duckdb/execution/operator/csv_scanner/csv_casting.hpp"
3: 
4: namespace duckdb {
5: 
6: bool CSVSniffer::TryCastVector(Vector &parse_chunk_col, idx_t size, const LogicalType &sql_type) {
7: 	auto &sniffing_state_machine = best_candidate->GetStateMachine();
8: 	// try vector-cast from string to sql_type
9: 	Vector dummy_result(sql_type);
10: 	if (!sniffing_state_machine.dialect_options.date_format[LogicalTypeId::DATE].GetValue().Empty() &&
11: 	    sql_type == LogicalTypeId::DATE) {
12: 		// use the date format to cast the chunk
13: 		string error_message;
14: 		CastParameters parameters(false, &error_message);
15: 		idx_t line_error;
16: 		return CSVCast::TryCastDateVector(sniffing_state_machine.dialect_options.date_format, parse_chunk_col,
17: 		                                  dummy_result, size, parameters, line_error);
18: 	}
19: 	if (!sniffing_state_machine.dialect_options.date_format[LogicalTypeId::TIMESTAMP].GetValue().Empty() &&
20: 	    sql_type == LogicalTypeId::TIMESTAMP) {
21: 		// use the timestamp format to cast the chunk
22: 		string error_message;
23: 		CastParameters parameters(false, &error_message);
24: 		return CSVCast::TryCastTimestampVector(sniffing_state_machine.dialect_options.date_format, parse_chunk_col,
25: 		                                       dummy_result, size, parameters);
26: 	}
27: 	// target type is not varchar: perform a cast
28: 	string error_message;
29: 	return VectorOperations::DefaultTryCast(parse_chunk_col, dummy_result, size, &error_message, true);
30: }
31: 
32: void CSVSniffer::RefineTypes() {
33: 	auto &sniffing_state_machine = best_candidate->GetStateMachine();
34: 	// if data types were provided, exit here if number of columns does not match
35: 	detected_types.assign(sniffing_state_machine.dialect_options.num_cols, LogicalType::VARCHAR);
36: 	if (sniffing_state_machine.options.all_varchar) {
37: 		// return all types varchar
38: 		return;
39: 	}
40: 	for (idx_t i = 1; i < sniffing_state_machine.options.sample_size_chunks; i++) {
41: 		bool finished_file = best_candidate->FinishedFile();
42: 		if (finished_file) {
43: 			// we finished the file: stop
44: 			// set sql types
45: 			detected_types.clear();
46: 			for (idx_t column_idx = 0; column_idx < best_sql_types_candidates_per_column_idx.size(); column_idx++) {
47: 				LogicalType d_type = best_sql_types_candidates_per_column_idx[column_idx].back();
48: 				if (best_sql_types_candidates_per_column_idx[column_idx].size() ==
49: 				    sniffing_state_machine.options.auto_type_candidates.size()) {
50: 					d_type = LogicalType::VARCHAR;
51: 				}
52: 				detected_types.push_back(d_type);
53: 			}
54: 			return;
55: 		}
56: 		auto &parse_chunk = best_candidate->ParseChunk().ToChunk();
57: 
58: 		for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
59: 			vector<LogicalType> &col_type_candidates = best_sql_types_candidates_per_column_idx[col];
60: 			bool is_bool_type = col_type_candidates.back() == LogicalType::BOOLEAN;
61: 			while (col_type_candidates.size() > 1) {
62: 				const auto &sql_type = col_type_candidates.back();
63: 				if (TryCastVector(parse_chunk.data[col], parse_chunk.size(), sql_type)) {
64: 					break;
65: 				}
66: 				if (col_type_candidates.back() == LogicalType::BOOLEAN && is_bool_type) {
67: 					// If we thought this was a boolean value (i.e., T,F, True, False) and it is not, we
68: 					// immediately pop to varchar.
69: 					while (col_type_candidates.back() != LogicalType::VARCHAR) {
70: 						col_type_candidates.pop_back();
71: 					}
72: 					break;
73: 				}
74: 				col_type_candidates.pop_back();
75: 			}
76: 		}
77: 		// reset parse chunk for the next iteration
78: 		parse_chunk.Reset();
79: 	}
80: 	detected_types.clear();
81: 	// set sql types
82: 	for (idx_t column_idx = 0; column_idx < best_sql_types_candidates_per_column_idx.size(); column_idx++) {
83: 		LogicalType d_type = best_sql_types_candidates_per_column_idx[column_idx].back();
84: 		if (best_sql_types_candidates_per_column_idx[column_idx].size() ==
85: 		        best_candidate->GetStateMachine().options.auto_type_candidates.size() &&
86: 		    default_null_to_varchar) {
87: 			d_type = LogicalType::VARCHAR;
88: 		}
89: 		detected_types.push_back(d_type);
90: 	}
91: }
92: } // namespace duckdb
[end of src/execution/operator/csv_scanner/sniffer/type_refinement.cpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: