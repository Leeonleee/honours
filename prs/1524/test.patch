diff --git a/test/api/test_read_only.cpp b/test/api/test_read_only.cpp
index 1dcdd2f7377d..84c73b5ebfa1 100644
--- a/test/api/test_read_only.cpp
+++ b/test/api/test_read_only.cpp
@@ -103,3 +103,27 @@ TEST_CASE("Test connection using a read only database", "[readonly]") {
 	// db2.reset();
 	DeleteDatabase(dbdir);
 }
+
+TEST_CASE("Test view creation using a read only database", "[readonly]") {
+	auto dbdir = TestCreatePath("read_only_view_test");
+	unique_ptr<DuckDB> db;
+	unique_ptr<Connection> con;
+	// make sure the database does not exist
+	DeleteDatabase(dbdir);
+
+	DBConfig readonly_config;
+	readonly_config.use_temporary_directory = false;
+	readonly_config.access_mode = AccessMode::READ_ONLY;
+
+	// create db in first place
+	{ auto db_rw = DuckDB(dbdir); }
+	db = make_unique<DuckDB>(dbdir, &readonly_config);
+	// create the database file and initialize it with data
+	con = make_unique<Connection>(*db);
+
+	REQUIRE_NOTHROW(con->TableFunction("sqlite_master")->CreateView("boo", true, true));
+	con.reset();
+	db.reset();
+
+	DeleteDatabase(dbdir);
+}
diff --git a/tools/pythonpkg/tests/test_dbapi12.py b/tools/pythonpkg/tests/test_dbapi12.py
index 911926c894c1..bf6200b8d88a 100644
--- a/tools/pythonpkg/tests/test_dbapi12.py
+++ b/tools/pythonpkg/tests/test_dbapi12.py
@@ -24,6 +24,7 @@ def test_rel(rel, duckdb_cursor):
             cmp_df = pd.DataFrame.from_dict({"i":[1, 2, 3], "cj":[1, 1, 1]})
             pd.testing.assert_frame_equal(res2.to_df(), cmp_df)
 
+            duckdb_cursor.execute('DROP TABLE IF EXISTS a2')
             rel.create('a2')
             rel_a2 = duckdb_cursor.table('a2').project('CAST(i as BIGINT) i, j').to_df()
             pd.testing.assert_frame_equal(rel_a2, test_df)
diff --git a/tools/rpkg/tests/testthat/test_register_readonly.R b/tools/rpkg/tests/testthat/test_register_readonly.R
new file mode 100644
index 000000000000..16d8b77ea8da
--- /dev/null
+++ b/tools/rpkg/tests/testthat/test_register_readonly.R
@@ -0,0 +1,11 @@
+test_that("we can register a data frame on a read only connection", {
+  path = tempfile()
+  # create empty database
+  con = DBI::dbConnect(duckdb::duckdb(), dbdir = path, read_only = FALSE)
+  DBI::dbDisconnect(con, shutdown = TRUE)
+
+  # reopen database read-only, try to write temp table
+  con = DBI::dbConnect(duckdb::duckdb(), dbdir = path, read_only = TRUE)
+  duckdb::duckdb_register(con, "mtcars", mtcars)
+})
+
