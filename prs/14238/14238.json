{
  "repo": "duckdb/duckdb",
  "pull_number": 14238,
  "instance_id": "duckdb__duckdb-14238",
  "issue_numbers": [
    "14232",
    "14232"
  ],
  "base_commit": "1eac05ecd3a6b8ec2cdf0c53ccece7ca2effef26",
  "patch": "diff --git a/src/optimizer/deliminator.cpp b/src/optimizer/deliminator.cpp\nindex 2771222e7af5..805e56609742 100644\n--- a/src/optimizer/deliminator.cpp\n+++ b/src/optimizer/deliminator.cpp\n@@ -81,13 +81,6 @@ unique_ptr<LogicalOperator> Deliminator::Optimize(unique_ptr<LogicalOperator> op\n \t\tif (candidate.joins.size() == candidate.delim_get_count && all_removed) {\n \t\t\tdelim_join.type = LogicalOperatorType::LOGICAL_COMPARISON_JOIN;\n \t\t\tdelim_join.duplicate_eliminated_columns.clear();\n-\t\t\tif (all_equality_conditions) {\n-\t\t\t\tfor (auto &cond : delim_join.conditions) {\n-\t\t\t\t\tif (IsEqualityJoinCondition(cond)) {\n-\t\t\t\t\t\tcond.comparison = ExpressionType::COMPARE_NOT_DISTINCT_FROM;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \n \t\t// Only DelimJoins are ever created as SINGLE joins,\n",
  "test_patch": "diff --git a/test/issues/general/test_14232.test b/test/issues/general/test_14232.test\nnew file mode 100644\nindex 000000000000..2c6664ccbfb5\n--- /dev/null\n+++ b/test/issues/general/test_14232.test\n@@ -0,0 +1,73 @@\n+# name: test/issues/general/test_14232.test\n+# description: Issue 14232 - Incorrect results for IN clause\n+# group: [general]\n+\n+statement ok\n+CREATE TABLE t1 (\n+t1a TEXT,\n+t1b SMALLINT,\n+t1c INTEGER,\n+t1d BIGINT,\n+t1e REAL,\n+t1f DOUBLE PRECISION,\n+t1g NUMERIC(10,2),\n+t1h TIMESTAMP,\n+t1i DATE\n+)\n+\n+statement ok\n+INSERT INTO t1 (t1a, t1b, t1c, t1d, t1e, t1f, t1g, t1h, t1i) VALUES\n+('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:00:00', '2014-04-04'),\n+('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\n+('t1a', 16, 12, 21, 15.0, 20, 20.00, '2014-06-04 01:02:00.001', '2014-06-04'),\n+('t1a', 16, 12, 10, 15.0, 20, 20.00, '2014-07-04 01:01:00', '2014-07-04'),\n+('t1c', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:02:00.001', '2014-05-05'),\n+('t1d', NULL, 16, 22, 17.0, 25, 26.00, '2014-06-04 01:01:00', NULL),\n+('t1d', NULL, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:02:00.001', NULL),\n+('t1e', 10, NULL, 25, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-04'),\n+('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:02:00.001', '2014-09-04'),\n+('t1d', 10, NULL, 12, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\n+('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:02:00.001', '2014-04-04'),\n+('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04')\n+\n+statement ok\n+CREATE TABLE t2 (\n+t2a TEXT,\n+t2b SMALLINT,\n+t2c INTEGER,\n+t2d BIGINT,\n+t2e REAL,\n+t2f DOUBLE PRECISION,\n+t2g NUMERIC(10,2),\n+t2h TIMESTAMP,\n+t2i DATE\n+)\n+\n+statement ok\n+INSERT INTO t2 (t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i) VALUES\n+('t2a', 6, 12, 14, 15.0, 20, 20.00, '2014-04-04 01:01:00', '2014-04-04'),\n+('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\n+('t1b', 8, 16, 119, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\n+('t1c', 12, 16, 219, 17.0, 25, 26.00, '2016-05-04 01:01:00', '2016-05-04'),\n+('t1b', NULL, 16, 319, 17.0, 25, 26.00, '2017-05-04 01:01:00', NULL),\n+('t2e', 8, NULL, 419, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\n+('t1f', 19, NULL, 519, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\n+('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\n+('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:01:00', '2014-07-04'),\n+('t1c', 12, 16, 19, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-05'),\n+('t1e', 8, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:01:00', '2014-09-04'),\n+('t1f', 19, NULL, 19, 17.0, 25, 26.00, '2014-10-04 01:01:00', '2014-10-04'),\n+('t1b', NULL, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', NULL)\n+\n+query II\n+SELECT t1a,\n+t1b\n+FROM t1\n+WHERE t1c IN (SELECT t2c\n+FROM t2\n+WHERE t1a = t2a)\n+GROUP BY t1a,\n+t1b\n+----\n+t1b\t8\n+t1c\t8\n\\ No newline at end of file\n",
  "problem_statement": "Incorrect results for IN clause\n### What happens?\n\nWhen compared to PostgreSQL , DuckDB is giving incorrect results. Spark SQL and PostgreSQL give 2 rows and DuckDB gives 3 rows.\r\nPostgreSQL and Spark SQL results\r\nt1b,8\r\nt1c,8\r\n\r\nDuckDB results\r\nt1e,10\r\nt1b,8\r\nt1c,8\n\n### To Reproduce\n\n-- Create table t1\r\nCREATE TABLE t1 (\r\n    t1a TEXT,\r\n    t1b SMALLINT,\r\n    t1c INTEGER,\r\n    t1d BIGINT,\r\n    t1e REAL,\r\n    t1f DOUBLE PRECISION,\r\n    t1g NUMERIC(10,2),\r\n    t1h TIMESTAMP,\r\n    t1i DATE\r\n);\r\n\r\nINSERT INTO t1 (t1a, t1b, t1c, t1d, t1e, t1f, t1g, t1h, t1i) VALUES\r\n('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:00:00', '2014-04-04'),\r\n('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1a', 16, 12, 21, 15.0, 20, 20.00, '2014-06-04 01:02:00.001', '2014-06-04'),\r\n('t1a', 16, 12, 10, 15.0, 20, 20.00, '2014-07-04 01:01:00', '2014-07-04'),\r\n('t1c', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:02:00.001', '2014-05-05'),\r\n('t1d', NULL, 16, 22, 17.0, 25, 26.00, '2014-06-04 01:01:00', NULL),\r\n('t1d', NULL, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:02:00.001', NULL),\r\n('t1e', 10, NULL, 25, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-04'),\r\n('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:02:00.001', '2014-09-04'),\r\n('t1d', 10, NULL, 12, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\r\n('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:02:00.001', '2014-04-04'),\r\n('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04');\r\n\r\n-- Create table t2\r\nCREATE TABLE t2 (\r\n    t2a TEXT,\r\n    t2b SMALLINT,\r\n    t2c INTEGER,\r\n    t2d BIGINT,\r\n    t2e REAL,\r\n    t2f DOUBLE PRECISION,\r\n    t2g NUMERIC(10,2),\r\n    t2h TIMESTAMP,\r\n    t2i DATE\r\n);\r\n\r\nINSERT INTO t2 (t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i) VALUES\r\n('t2a', 6, 12, 14, 15.0, 20, 20.00, '2014-04-04 01:01:00', '2014-04-04'),\r\n('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1b', 8, 16, 119, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\r\n('t1c', 12, 16, 219, 17.0, 25, 26.00, '2016-05-04 01:01:00', '2016-05-04'),\r\n('t1b', NULL, 16, 319, 17.0, 25, 26.00, '2017-05-04 01:01:00', NULL),\r\n('t2e', 8, NULL, 419, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\r\n('t1f', 19, NULL, 519, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\r\n('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:01:00', '2014-07-04'),\r\n('t1c', 12, 16, 19, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-05'),\r\n('t1e', 8, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:01:00', '2014-09-04'),\r\n('t1f', 19, NULL, 19, 17.0, 25, 26.00, '2014-10-04 01:01:00', '2014-10-04'),\r\n('t1b', NULL, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', NULL);\r\n\r\n\r\nSELECT t1a,\r\n       t1b\r\nFROM   t1\r\nWHERE  t1c IN (SELECT t2c\r\n               FROM   t2\r\n               WHERE  t1a = t2a)\r\nGROUP  BY t1a,\r\n          t1b;\n\n### OS:\n\nx86_64\n\n### DuckDB Version:\n\n1.1.1\n\n### DuckDB Client:\n\nPython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nRishab C\n\n### Affiliation:\n\nStudent\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\nIncorrect results for IN clause\n### What happens?\n\nWhen compared to PostgreSQL , DuckDB is giving incorrect results. Spark SQL and PostgreSQL give 2 rows and DuckDB gives 3 rows.\r\nPostgreSQL and Spark SQL results\r\nt1b,8\r\nt1c,8\r\n\r\nDuckDB results\r\nt1e,10\r\nt1b,8\r\nt1c,8\n\n### To Reproduce\n\n-- Create table t1\r\nCREATE TABLE t1 (\r\n    t1a TEXT,\r\n    t1b SMALLINT,\r\n    t1c INTEGER,\r\n    t1d BIGINT,\r\n    t1e REAL,\r\n    t1f DOUBLE PRECISION,\r\n    t1g NUMERIC(10,2),\r\n    t1h TIMESTAMP,\r\n    t1i DATE\r\n);\r\n\r\nINSERT INTO t1 (t1a, t1b, t1c, t1d, t1e, t1f, t1g, t1h, t1i) VALUES\r\n('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:00:00', '2014-04-04'),\r\n('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1a', 16, 12, 21, 15.0, 20, 20.00, '2014-06-04 01:02:00.001', '2014-06-04'),\r\n('t1a', 16, 12, 10, 15.0, 20, 20.00, '2014-07-04 01:01:00', '2014-07-04'),\r\n('t1c', 8, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:02:00.001', '2014-05-05'),\r\n('t1d', NULL, 16, 22, 17.0, 25, 26.00, '2014-06-04 01:01:00', NULL),\r\n('t1d', NULL, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:02:00.001', NULL),\r\n('t1e', 10, NULL, 25, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-04'),\r\n('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:02:00.001', '2014-09-04'),\r\n('t1d', 10, NULL, 12, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\r\n('t1a', 6, 8, 10, 15.0, 20, 20.00, '2014-04-04 01:02:00.001', '2014-04-04'),\r\n('t1e', 10, NULL, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04');\r\n\r\n-- Create table t2\r\nCREATE TABLE t2 (\r\n    t2a TEXT,\r\n    t2b SMALLINT,\r\n    t2c INTEGER,\r\n    t2d BIGINT,\r\n    t2e REAL,\r\n    t2f DOUBLE PRECISION,\r\n    t2g NUMERIC(10,2),\r\n    t2h TIMESTAMP,\r\n    t2i DATE\r\n);\r\n\r\nINSERT INTO t2 (t2a, t2b, t2c, t2d, t2e, t2f, t2g, t2h, t2i) VALUES\r\n('t2a', 6, 12, 14, 15.0, 20, 20.00, '2014-04-04 01:01:00', '2014-04-04'),\r\n('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1b', 8, 16, 119, 17.0, 25, 26.00, '2015-05-04 01:01:00', '2015-05-04'),\r\n('t1c', 12, 16, 219, 17.0, 25, 26.00, '2016-05-04 01:01:00', '2016-05-04'),\r\n('t1b', NULL, 16, 319, 17.0, 25, 26.00, '2017-05-04 01:01:00', NULL),\r\n('t2e', 8, NULL, 419, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\r\n('t1f', 19, NULL, 519, 17.0, 25, 26.00, '2014-05-04 01:01:00', '2014-05-04'),\r\n('t1b', 10, 12, 19, 17.0, 25, 26.00, '2014-06-04 01:01:00', '2014-06-04'),\r\n('t1b', 8, 16, 19, 17.0, 25, 26.00, '2014-07-04 01:01:00', '2014-07-04'),\r\n('t1c', 12, 16, 19, 17.0, 25, 26.00, '2014-08-04 01:01:00', '2014-08-05'),\r\n('t1e', 8, NULL, 19, 17.0, 25, 26.00, '2014-09-04 01:01:00', '2014-09-04'),\r\n('t1f', 19, NULL, 19, 17.0, 25, 26.00, '2014-10-04 01:01:00', '2014-10-04'),\r\n('t1b', NULL, 16, 19, 17.0, 25, 26.00, '2014-05-04 01:01:00', NULL);\r\n\r\n\r\nSELECT t1a,\r\n       t1b\r\nFROM   t1\r\nWHERE  t1c IN (SELECT t2c\r\n               FROM   t2\r\n               WHERE  t1a = t2a)\r\nGROUP  BY t1a,\r\n          t1b;\n\n### OS:\n\nx86_64\n\n### DuckDB Version:\n\n1.1.1\n\n### DuckDB Client:\n\nPython\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nRishab C\n\n### Affiliation:\n\nStudent\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a stable release\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "Thanks for opening this issue! Based on our automated check, it seems that your post contains some code but it does not use [code blocks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks) to format it.\n          \nPlease double-check your post and revise it if necessary. To employ syntax highlighting, it's recommended to use code blocks with triple backticks, e.g.:\n````\n```sql\nSELECT ...\n```\n````\nIf this is a false positive, feel free to disregard this comment.\n\nSemantically correct query when changed to Join gives correct results\r\nSELECT t1a,\r\n       t1b\r\nFROM   t1 , t2\r\nWHERE  t1c = t2c\r\n               and t1a = t2a\r\nGROUP  BY t1a,\r\n          t1b;\nThanks for opening this issue! Based on our automated check, it seems that your post contains some code but it does not use [code blocks](https://docs.github.com/en/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks) to format it.\n          \nPlease double-check your post and revise it if necessary. To employ syntax highlighting, it's recommended to use code blocks with triple backticks, e.g.:\n````\n```sql\nSELECT ...\n```\n````\nIf this is a false positive, feel free to disregard this comment.\n\nSemantically correct query when changed to Join gives correct results\r\nSELECT t1a,\r\n       t1b\r\nFROM   t1 , t2\r\nWHERE  t1c = t2c\r\n               and t1a = t2a\r\nGROUP  BY t1a,\r\n          t1b;",
  "created_at": "2024-10-05T12:39:59Z"
}