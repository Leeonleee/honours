diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp
index 9f3c92a0f91c..74b22e699856 100644
--- a/tools/pythonpkg/src/pyconnection.cpp
+++ b/tools/pythonpkg/src/pyconnection.cpp
@@ -1945,6 +1945,10 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Connect(const py::object &dat
 	config.AddExtensionOption("python_enable_replacements",
 	                          "Whether variables visible to the current stack should be used for replacement scans.",
 	                          LogicalType::BOOLEAN, Value::BOOLEAN(true));
+	config.AddExtensionOption(
+	    "python_scan_all_frames",
+	    "If set, restores the old behavior of scanning all preceding frames to locate the referenced variable.",
+	    LogicalType::BOOLEAN, Value::BOOLEAN(false));
 	if (!DuckDBPyConnection::IsJupyter()) {
 		config_dict["duckdb_api"] = Value("python");
 	} else {
diff --git a/tools/pythonpkg/src/python_replacement_scan.cpp b/tools/pythonpkg/src/python_replacement_scan.cpp
index bc52bd4f4809..8d1610534789 100644
--- a/tools/pythonpkg/src/python_replacement_scan.cpp
+++ b/tools/pythonpkg/src/python_replacement_scan.cpp
@@ -194,25 +194,38 @@ static unique_ptr<TableRef> ReplaceInternal(ClientContext &context, const string
 		return nullptr;
 	}
 
+	lookup_result = context.TryGetCurrentSetting("python_scan_all_frames", result);
+	D_ASSERT((bool)lookup_result);
+	auto scan_all_frames = result.GetValue<bool>();
+
 	py::gil_scoped_acquire acquire;
-	auto current_frame = py::module::import("inspect").attr("currentframe")();
-
-	auto local_dict = py::cast<py::dict>(current_frame.attr("f_locals"));
-	// search local dictionary
-	if (local_dict) {
-		auto result = TryReplacement(local_dict, table_name, context, current_frame);
-		if (result) {
-			return result;
+	py::object current_frame = py::module::import("inspect").attr("currentframe")();
+
+	bool has_locals = false;
+	bool has_globals = false;
+	do {
+		py::object local_dict_p = current_frame.attr("f_locals");
+		has_locals = !py::none().is(local_dict_p);
+		if (has_locals) {
+			// search local dictionary
+			auto local_dict = py::cast<py::dict>(local_dict_p);
+			auto result = TryReplacement(local_dict, table_name, context, current_frame);
+			if (result) {
+				return result;
+			}
 		}
-	}
-	// search global dictionary
-	auto global_dict = py::cast<py::dict>(current_frame.attr("f_globals"));
-	if (global_dict) {
-		auto result = TryReplacement(global_dict, table_name, context, current_frame);
-		if (result) {
-			return result;
+		py::object global_dict_p = current_frame.attr("f_globals");
+		has_globals = !py::none().is(global_dict_p);
+		if (has_globals) {
+			auto global_dict = py::cast<py::dict>(global_dict_p);
+			// search global dictionary
+			auto result = TryReplacement(global_dict, table_name, context, current_frame);
+			if (result) {
+				return result;
+			}
 		}
-	}
+		current_frame = current_frame.attr("f_back");
+	} while (scan_all_frames && (has_locals || has_globals));
 	return nullptr;
 }
 
