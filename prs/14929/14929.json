{
  "repo": "duckdb/duckdb",
  "pull_number": 14929,
  "instance_id": "duckdb__duckdb-14929",
  "issue_numbers": [
    "14905"
  ],
  "base_commit": "79cbfab4cdfbae9a7bd4808f0d808a70267440f0",
  "patch": "diff --git a/tools/shell/shell.cpp b/tools/shell/shell.cpp\nindex 4d1c3f1f8726..89c4a5b81b78 100644\n--- a/tools/shell/shell.cpp\n+++ b/tools/shell/shell.cpp\n@@ -1621,19 +1621,57 @@ class DuckBoxRenderer : public duckdb::BaseResultRenderer {\n \tbool highlight = true;\n };\n \n+class TrashRenderer : public duckdb::BaseResultRenderer {\n+public:\n+\tTrashRenderer() {\n+\t}\n+\n+\tvoid RenderLayout(const string &) override {\n+\t}\n+\n+\tvoid RenderColumnName(const string &) override {\n+\t}\n+\n+\tvoid RenderType(const string &) override {\n+\t}\n+\n+\tvoid RenderValue(const string &, const duckdb::LogicalType &) override {\n+\t}\n+\n+\tvoid RenderNull(const string &, const duckdb::LogicalType &) override {\n+\t}\n+\n+\tvoid RenderFooter(const string &) override {\n+\t}\n+\n+\tvoid PrintText(const string &, HighlightElementType) {\n+\t}\n+};\n+\n /*\n ** Run a prepared statement\n */\n-void ShellState::ExecutePreparedStatement(sqlite3_stmt *pStmt /* Statment to run */\n-) {\n+void ShellState::ExecutePreparedStatement(sqlite3_stmt *pStmt) {\n \tif (cMode == RenderMode::DUCKBOX) {\n-\t\tsize_t max_rows = outfile.empty() || outfile[0] == '|' ? this->max_rows : (size_t)-1;\n-\t\tsize_t max_width = outfile.empty() || outfile[0] == '|' ? this->max_width : (size_t)-1;\n+\t\tsize_t max_rows = this->max_rows;\n+\t\tsize_t max_width = this->max_width;\n+\t\tif (!outfile.empty() && outfile[0] != '|') {\n+\t\t\tmax_rows = (size_t)-1;\n+\t\t\tmax_width = (size_t)-1;\n+\t\t}\n+\t\tif (!stdout_is_console) {\n+\t\t\tmax_width = (size_t)-1;\n+\t\t}\n \t\tDuckBoxRenderer renderer(*this, HighlightResults());\n \t\tsqlite3_print_duckbox(pStmt, max_rows, max_width, nullValue.c_str(), columns, thousand_separator,\n \t\t                      decimal_separator, &renderer);\n \t\treturn;\n \t}\n+\tif (cMode == RenderMode::TRASH) {\n+\t\tTrashRenderer renderer;\n+\t\tsqlite3_print_duckbox(pStmt, 1, 80, \"\", false, '\\0', '\\0', &renderer);\n+\t\treturn;\n+\t}\n \n \tif (ShellRenderer::IsColumnar(cMode)) {\n \t\tExecutePreparedStatementColumnar(pStmt);\n@@ -1663,27 +1701,25 @@ void ShellState::ExecutePreparedStatement(sqlite3_stmt *pStmt /* Statment to run\n \n \t// iterate over the rows\n \tdo {\n-\t\tif (renderer) {\n-\t\t\t/* extract the data and data types */\n-\t\t\tfor (int i = 0; i < nCol; i++) {\n-\t\t\t\tresult.types[i] = sqlite3_column_type(pStmt, i);\n-\t\t\t\tif (result.types[i] == SQLITE_BLOB && cMode == RenderMode::INSERT) {\n-\t\t\t\t\tresult.data[i] = \"\";\n-\t\t\t\t} else {\n-\t\t\t\t\tresult.data[i] = (const char *)sqlite3_column_text(pStmt, i);\n-\t\t\t\t}\n-\t\t\t\tif (!result.data[i] && result.types[i] != SQLITE_NULL) {\n-\t\t\t\t\t// OOM\n-\t\t\t\t\trc = SQLITE_NOMEM;\n-\t\t\t\t\tbreak;\n-\t\t\t\t}\n+\t\t/* extract the data and data types */\n+\t\tfor (int i = 0; i < nCol; i++) {\n+\t\t\tresult.types[i] = sqlite3_column_type(pStmt, i);\n+\t\t\tif (result.types[i] == SQLITE_BLOB && cMode == RenderMode::INSERT) {\n+\t\t\t\tresult.data[i] = \"\";\n+\t\t\t} else {\n+\t\t\t\tresult.data[i] = (const char *)sqlite3_column_text(pStmt, i);\n+\t\t\t}\n+\t\t\tif (!result.data[i] && result.types[i] != SQLITE_NULL) {\n+\t\t\t\t// OOM\n+\t\t\t\trc = SQLITE_NOMEM;\n+\t\t\t\tbreak;\n \t\t\t}\n \t\t}\n \n \t\t/* if data and types extracted successfully... */\n \t\tif (SQLITE_ROW == rc) {\n \t\t\t/* call the supplied callback with the result row data */\n-\t\t\tif (renderer && RenderRow(*renderer, result)) {\n+\t\t\tif (RenderRow(*renderer, result)) {\n \t\t\t\trc = SQLITE_ABORT;\n \t\t\t} else {\n \t\t\t\trc = sqlite3_step(pStmt);\n@@ -1691,9 +1727,7 @@ void ShellState::ExecutePreparedStatement(sqlite3_stmt *pStmt /* Statment to run\n \t\t}\n \t} while (SQLITE_ROW == rc);\n \n-\tif (renderer) {\n-\t\trenderer->RenderFooter(result);\n-\t}\n+\trenderer->RenderFooter(result);\n }\n \n /*\n@@ -4739,11 +4773,15 @@ int SQLITE_CDECL wmain(int argc, wchar_t **wargv) {\n \t\t\t\tazCmd[nCmd - 1] = z;\n \t\t\t}\n \t\t}\n-\t\tif (z[1] == '-')\n+\t\tif (z[1] == '-') {\n \t\t\tz++;\n+\t\t}\n \t\tif (strcmp(z, \"-separator\") == 0 || strcmp(z, \"-nullvalue\") == 0 || strcmp(z, \"-newline\") == 0 ||\n-\t\t    strcmp(z, \"-cmd\") == 0 || strcmp(z, \"-c\") == 0 || strcmp(z, \"-s\") == 0) {\n+\t\t    strcmp(z, \"-cmd\") == 0) {\n \t\t\t(void)cmdline_option_value(argc, argv, ++i);\n+\t\t} else if (strcmp(z, \"-c\") == 0 || strcmp(z, \"-s\") == 0) {\n+\t\t\t(void)cmdline_option_value(argc, argv, ++i);\n+\t\t\tstdin_is_interactive = false;\n \t\t} else if (strcmp(z, \"-init\") == 0) {\n \t\t\tzInitFile = cmdline_option_value(argc, argv, ++i);\n \t\t} else if (strcmp(z, \"-batch\") == 0) {\ndiff --git a/tools/shell/shell_highlight.cpp b/tools/shell/shell_highlight.cpp\nindex e17ce09344cc..7749aff3a5cb 100644\n--- a/tools/shell/shell_highlight.cpp\n+++ b/tools/shell/shell_highlight.cpp\n@@ -19,7 +19,7 @@ static HighlightElement highlight_elements[] = {{\"error\", PrintColor::RED, Print\n                                                 {\"numeric_constant\", PrintColor::YELLOW, PrintIntensity::STANDARD},\n                                                 {\"string_constant\", PrintColor::YELLOW, PrintIntensity::STANDARD},\n                                                 {\"line_indicator\", PrintColor::STANDARD, PrintIntensity::BOLD},\n-                                                {\"column_name\", PrintColor::STANDARD, PrintIntensity::BOLD},\n+                                                {\"column_name\", PrintColor::STANDARD, PrintIntensity::STANDARD},\n                                                 {\"column_type\", PrintColor::STANDARD, PrintIntensity::STANDARD},\n                                                 {\"numeric_value\", PrintColor::STANDARD, PrintIntensity::STANDARD},\n                                                 {\"string_value\", PrintColor::STANDARD, PrintIntensity::STANDARD},\ndiff --git a/tools/shell/shell_renderer.cpp b/tools/shell/shell_renderer.cpp\nindex db2a914db074..d597583b8fd7 100644\n--- a/tools/shell/shell_renderer.cpp\n+++ b/tools/shell/shell_renderer.cpp\n@@ -618,6 +618,10 @@ class ModeJsonRenderer : public RowRenderer {\n \t\t\t\t\tstate.Print(\"1e999\");\n \t\t\t\t} else if (strcmp(data[i], \"-inf\") == 0) {\n \t\t\t\t\tstate.Print(\"-1e999\");\n+\t\t\t\t} else if (strcmp(data[i], \"nan\") == 0) {\n+\t\t\t\t\tstate.Print(\"null\");\n+\t\t\t\t} else if (strcmp(data[i], \"-nan\") == 0) {\n+\t\t\t\t\tstate.Print(\"null\");\n \t\t\t\t} else {\n \t\t\t\t\tstate.Print(data[i]);\n \t\t\t\t}\n@@ -830,9 +834,6 @@ unique_ptr<RowRenderer> ShellState::GetRowRenderer(RenderMode mode) {\n \t\treturn unique_ptr<RowRenderer>(new ModeSemiRenderer(*this));\n \tcase RenderMode::PRETTY:\n \t\treturn unique_ptr<RowRenderer>(new ModePrettyRenderer(*this));\n-\tcase RenderMode::TRASH:\n-\t\t// no renderer\n-\t\treturn nullptr;\n \tdefault:\n \t\tthrow std::runtime_error(\"Unsupported mode for GetRowRenderer\");\n \t}\n",
  "test_patch": "diff --git a/tools/shell/tests/test_highlighting.py b/tools/shell/tests/test_highlighting.py\nindex 2d37f64c8bb8..719589b73496 100644\n--- a/tools/shell/tests/test_highlighting.py\n+++ b/tools/shell/tests/test_highlighting.py\n@@ -14,11 +14,10 @@ def test_highlight_column_header(shell):\n     test = (\n         ShellTest(shell)\n         .statement(\".highlight_results on\")\n-        .statement(lineitem_ddl)\n-        .statement('select * from lineitem;')\n+        .statement('select NULL AS r;')\n     )\n     result = test.run()\n-    result.check_stdout('\\x1b[1ml_comment\\x1b[0m')\n+    result.check_stdout('\\x1b[90mNULL\\x1b[0m')\n @pytest.mark.skipif(os.name == 'nt', reason=\"Windows highlighting does not use shell escapes\")\n def test_custom_highlight(shell):\n     test = (\ndiff --git a/tools/shell/tests/test_shell_basics.py b/tools/shell/tests/test_shell_basics.py\nindex 75ef600668fd..af29161ffa5e 100644\n--- a/tools/shell/tests/test_shell_basics.py\n+++ b/tools/shell/tests/test_shell_basics.py\n@@ -593,12 +593,11 @@ def test_mode_json_infinity(shell):\n     test = (\n         ShellTest(shell)\n         .statement(\".mode json\")\n-        .statement(\"SELECT 'inf'::DOUBLE AS inf, '-inf'::DOUBLE AS ninf, 'nan'::DOUBLE AS nan;\")\n+        .statement(\"SELECT 'inf'::DOUBLE AS inf, '-inf'::DOUBLE AS ninf, 'nan'::DOUBLE AS nan, '-nan'::DOUBLE AS nnan;\")\n     )\n     result = test.run()\n-    result.check_stdout('[{\"inf\":1e999,\"ninf\":-1e999,\"nan\":nan}]')\n+    result.check_stdout('[{\"inf\":1e999,\"ninf\":-1e999,\"nan\":null,\"nnan\":null}]')\n \n-# Original comment: FIXME sqlite3_column_blob\n def test_mode_insert(shell):\n     test = (\n         ShellTest(shell)\n",
  "problem_statement": "Invalid json output for cli -json\n### What happens?\r\n\r\nExample cli output:\r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502          a           \u2502       b       \u2502\r\n\u2502        double        \u2502 decimal(38,2) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0.013835631366566025 \u2502     -29641.68 \u2502\r\n\u2502 0.014779952408172961 \u2502     -10296.42 \u2502\r\n\u2502 0.003024374814074319 \u2502      -5077.02 \u2502\r\n\u2502 0.010121712177079566 \u2502      -2664.09 \u2502\r\n\u2502 0.034948037785923564 \u2502       -795.75 \u2502\r\n\u2502                  0.0 \u2502       -531.77 \u2502\r\n\u2502                  0.0 \u2502       -437.56 \u2502\r\n\u2502                  0.0 \u2502        -75.62 \u2502\r\n\u2502                 -nan \u2502          0.00 \u2502\r\n\u2502                 -nan \u2502          0.00 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 10 rows                    2 columns \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n\r\n```\r\nbecomes with -json\r\n\r\n```json\r\n[{\"a\":0.013835631366566025,\"b\":-29641.68},\r\n{\"a\":0.014779952408172961,\"b\":-10296.42},\r\n{\"a\":0.003024374814074319,\"b\":-5077.02},\r\n{\"a\":0.010121712177079566,\"b\":-2664.09},\r\n{\"a\":0.034948037785923564,\"b\":-795.75},\r\n{\"a\":0.0,\"b\":-531.77},\r\n{\"a\":0.0,\"b\":-437.56},\r\n{\"a\":0.0,\"b\":-75.62},\r\n{\"a\":-nan,\"b\":0.00},\r\n{\"a\":-nan,\"b\":0.00}]\r\n```\r\n\r\nE.g. php json parser does not accept \"-nan\" as a number.\r\n\r\nhttps://datatracker.ietf.org/doc/html/rfc8259 says: Numeric values that cannot be represented in the grammar below (such\r\n   as Infinity and NaN) are not permitted.\r\n\r\n### To Reproduce\r\n\r\n```bash\r\nduckdb :memory: \"select 0.0 / 0.0\" -json\r\n```\r\n\r\n```text\r\n[{\"(0.0 / 0.0)\":-nan}]\r\n```\r\n\r\n### OS:\r\n\r\nUbuntu\r\n\r\n### DuckDB Version:\r\n\r\n1.1.3\r\n\r\n### DuckDB Client:\r\n\r\ncli\r\n\r\n### Hardware:\r\n\r\n_No response_\r\n\r\n### Full Name:\r\n\r\nThomas Bley\r\n\r\n### Affiliation:\r\n\r\nmyself\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nNot applicable - the reproduction does not require a data set\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [ ] Yes, I have\n",
  "hints_text": "Also sorting is a big mess:\r\n\r\n```\r\nD SELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id asc;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(id AS DOUBLE) \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                1.0 \u2502\r\n\u2502                2.0 \u2502\r\n\u2502               -nan \u2502\r\n\u2502                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD SELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id desc;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(id AS DOUBLE) \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502               -nan \u2502\r\n\u2502                2.0 \u2502\r\n\u2502                1.0 \u2502\r\n\u2502                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\nIt's reasonable to expect that DuckDB's cast to JSON will return JSON, especially since JSON's `null` is available as an option.  For comparison:\r\n```\r\n$ jq -n '[-infinite, nan, infinite]'\r\n[\r\n  -1.7976931348623157e+308,\r\n  null,\r\n  1.7976931348623157e+308\r\n]\r\n\r\n$ gojq -n '[-infinite, nan, infinite]'\r\n[\r\n  -1.7976931348623157e+308,\r\n  null,\r\n  1.7976931348623157e+308\r\n]\r\n\r\n$ jaq -n '[-infinite, nan, infinite]'\r\n[\r\n  null,\r\n  null,\r\n  null\r\n]\r\n```\n@thbley Thanks for reporting this. Indeed the JSON standard doesn't allow `nan` values. We'll see what we can come up with an alternative (such as using `null` for `nan`).\r\n\r\nSorting is not a \"big mess\", what you're seeing is the effect of the [`NULLS LAST` NULL order modifier](https://duckdb.org/docs/sql/query_syntax/orderby#null-order-modifier).\r\n\r\nSee e.g.:\r\n\r\n```sql\r\nSET null_order = 'NULLS_FIRST_ON_ASC_LAST_ON_DESC';\r\nSELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id asc;\r\nSELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id desc;\r\n```\r\n\r\n```text\r\nD SET null_order = 'NULLS_FIRST_ON_ASC_LAST_ON_DESC';\r\nD SELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id asc;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(id AS DOUBLE) \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                    \u2502\r\n\u2502                1.0 \u2502\r\n\u2502                2.0 \u2502\r\n\u2502                nan \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\nD SELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id desc;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 CAST(id AS DOUBLE) \u2502\r\n\u2502       double       \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502                nan \u2502\r\n\u2502                2.0 \u2502\r\n\u2502                1.0 \u2502\r\n\u2502                    \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n> such as using null for nan\r\n\r\nFor those coming from MariaDB/MySQL, this would be preferred.\r\n\r\n> SET null_order = 'NULLS_FIRST_ON_ASC_LAST_ON_DESC';\r\n\r\nThanks, I only read https://duckdb.org/docs/configuration/overview.html .\n```\r\nD SET null_order = 'NULLS_FIRST_ON_ASC_LAST_ON_DESC';\r\nD SELECT cast(id as double) FROM (VALUES (1), (2), (0.0/0.0), (null)) cities(id) order by id asc;\r\n\u2502                    \u2502\r\n\u2502                1.0 \u2502\r\n\u2502                2.0 \u2502\r\n\u2502                nan \u2502\r\n```\r\n\r\nMaybe you could add a configuration setting for \"nan_order\" ?",
  "created_at": "2024-11-20T17:40:18Z"
}