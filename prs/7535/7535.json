{
  "repo": "duckdb/duckdb",
  "pull_number": 7535,
  "instance_id": "duckdb__duckdb-7535",
  "issue_numbers": [
    "5777",
    "7444",
    "7504"
  ],
  "base_commit": "81a06108ffa8540ddb957d3fe4cb11ac238c2c1d",
  "patch": "diff --git a/.github/actions/build_extensions/action.yml b/.github/actions/build_extensions/action.yml\nindex 5fde0a9a8f36..88771fb7ad8d 100644\n--- a/.github/actions/build_extensions/action.yml\n+++ b/.github/actions/build_extensions/action.yml\n@@ -87,6 +87,12 @@ inputs:\n   aarch64_cross_compile:\n     description: 'Enable Linux aarch64 cross-compiling'\n     default: 0\n+  override_cc:\n+    description: 'Override C Compiler'\n+    default: ''\n+  override_cxx:\n+    description: 'Override CXX Compiler'\n+    default: ''\n \n runs:\n   using: \"composite\"\n@@ -113,8 +119,8 @@ runs:\n         EXTENSION_STATIC_BUILD: ${{ inputs.static_link_build }}\n         OPENSSL_ROOT_DIR: ${{ inputs.openssl_path }}\n         OSX_BUILD_UNIVERSAL: ${{ inputs.osx_universal }}\n-        CC: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-gcc' || '' }}\n-        CXX: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-g++' || '' }}\n+        CC: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-gcc' || inputs.override_cc }}\n+        CXX: ${{ inputs.aarch64_cross_compile == 1 && 'aarch64-linux-gnu-g++' || inputs.override_cxx}}\n \n       run: |\n         cd  ${{ inputs.build_dir}}\ndiff --git a/.github/config/extensions.csv b/.github/config/extensions.csv\nindex 6b06adf60333..7944603e321a 100644\n--- a/.github/config/extensions.csv\n+++ b/.github/config/extensions.csv\n@@ -8,7 +8,7 @@ parquet,,,\n tpcds,,,\n tpch,,,\n visualizer,,,\n-sqlite_scanner,https://github.com/duckdblabs/sqlite_scanner,27b6db88854c539299342034483f7c8907b64085,\n+sqlite_scanner,https://github.com/duckdblabs/sqlite_scanner,e607f30160260a5d3152087e001967ece39c36c0,\n postgres_scanner,https://github.com/duckdblabs/postgres_scanner,cd043b49cdc9e0d3752535b8333c9433e1007a48,\n substrait,https://github.com/duckdblabs/substrait,48d64b27c7a6985d6f6c3e65044038544608c03b,no-windows\n-arrow,https://github.com/duckdblabs/arrow,ec206c1232fcae6d2c3d64194e3f1e43068d3deb,no-windows\n+arrow,https://github.com/duckdblabs/arrow,c80462e30b463c2391e033fe11d86668a5ac44c3,no-windows\ndiff --git a/.github/regression/micro.csv b/.github/regression/micro.csv\nindex 0c7ad9c66d56..a10f0a75233d 100644\n--- a/.github/regression/micro.csv\n+++ b/.github/regression/micro.csv\n@@ -1,5 +1,3 @@\n-Append100KIntegersINSERT\n-Append100KIntegersPREPARED\n benchmark/micro/cast/cast_date_string.benchmark\n benchmark/micro/cast/cast_int_string.benchmark\n benchmark/micro/cast/cast_double_string.benchmark\ndiff --git a/.github/workflows/NodeJS.yml b/.github/workflows/NodeJS.yml\nindex b0ed7d3c51d5..7c53abe3e4cd 100644\n--- a/.github/workflows/NodeJS.yml\n+++ b/.github/workflows/NodeJS.yml\n@@ -233,7 +233,6 @@ jobs:\n           NODE_AUTH_TOKEN: ${{secrets.NODE_AUTH_TOKEN}}\n \n       - name: Node ${{ matrix.node }}\n-        if: matrix.target_arch != 'arm64'\n         shell: bash\n         run: ./scripts/node_build.sh ${{ matrix.node }}\n \ndiff --git a/.github/workflows/OSX.yml b/.github/workflows/OSX.yml\nindex 98d6aaaccc14..165c3c4a6d50 100644\n--- a/.github/workflows/OSX.yml\n+++ b/.github/workflows/OSX.yml\n@@ -88,64 +88,80 @@ jobs:\n       ODBC_CONFIG: ../../build/unixodbc/build/bin/odbc_config\n \n     steps:\n-    - uses: actions/checkout@v3\n-      with:\n-        fetch-depth: 0\n+      - uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n \n-    - uses: actions/setup-python@v4\n-      with:\n-        python-version: '3.7'\n+      - uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.7'\n \n-    - name: Install Ninja\n-      run: brew install ninja\n+      - name: Install Ninja\n+        run: brew install ninja\n \n-    - name: Setup Ccache\n-      uses: hendrikmuhs/ccache-action@main\n-      with:\n-        key: ${{ github.job }}\n-        save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}\n+      - name: Setup Ccache\n+        uses: hendrikmuhs/ccache-action@main\n+        with:\n+          key: ${{ github.job }}\n+          save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}\n \n-    - name: Install UnixODBC\n-      shell: bash\n-      run: |\n-        brew remove --ignore-dependencies unixodbc\n-        CFLAGS=\"-arch x86_64 -arch arm64\" ./scripts/install_unixodbc.sh\n+      - name: Install UnixODBC\n+        shell: bash\n+        run: |\n+          brew remove --ignore-dependencies unixodbc\n+          CFLAGS=\"-arch x86_64 -arch arm64\" ./scripts/install_unixodbc.sh\n \n-    - name: Build\n-      shell: bash\n-      run: make\n+      - name: Build\n+        shell: bash\n+        run: make\n \n-    - name: Unit Test\n-      shell: bash\n-      run: make allunit\n+      - name: Unit Test\n+        shell: bash\n+        run: make allunit\n \n-    - name: Tools Tests\n-      shell: bash\n-      run: |\n-        python tools/shell/shell-test.py build/release/duckdb\n+      - name: Tools Tests\n+        shell: bash\n+        run: |\n+          python tools/shell/shell-test.py build/release/duckdb\n \n-    - name: Examples\n-      shell: bash\n-      run: |\n-        (cd examples/embedded-c; make)\n-        (cd examples/embedded-c++; make)\n+      - name: Examples\n+        shell: bash\n+        run: |\n+          (cd examples/embedded-c; make)\n+          (cd examples/embedded-c++; make)\n \n-    - name: Deploy\n-      shell: bash\n-      run: |\n-        python scripts/amalgamation.py\n-        zip -j duckdb_cli-osx-universal.zip build/release/duckdb\n-        zip -j libduckdb-osx-universal.zip build/release/src/libduckdb*.dylib src/amalgamation/duckdb.hpp src/include/duckdb.h\n-        zip -j duckdb_odbc-osx-universal.zip build/release/tools/odbc/libduckdb_odbc.dylib\n-        python scripts/asset-upload-gha.py libduckdb-osx-universal.zip duckdb_cli-osx-universal.zip duckdb_odbc-osx-universal.zip\n+        #     from https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development\n+      - name: Sign Binaries\n+        shell: bash\n+        env:\n+          BUILD_CERTIFICATE_BASE64: ${{ secrets.OSX_CODESIGN_BUILD_CERTIFICATE_BASE64 }}\n+          P12_PASSWORD: ${{ secrets.OSX_CODESIGN_P12_PASSWORD }}\n+          KEYCHAIN_PASSWORD: ${{ secrets.OSX_CODESIGN_KEYCHAIN_PASSWORD }}\n+        run: |\n+          if [[ \"$GITHUB_REPOSITORY\" = \"duckdb/duckdb\" ]] ; then\n+            . scripts/osx_import_codesign_certificate.sh\n+          \n+            codesign --all-architectures --force --sign \"Developer ID Application: Stichting DuckDB Foundation\" build/release/duckdb\n+            codesign --all-architectures --force --sign \"Developer ID Application: Stichting DuckDB Foundation\" build/release/src/libduckdb*.dylib\n+            codesign --all-architectures --force --sign \"Developer ID Application: Stichting DuckDB Foundation\" build/release/tools/odbc/libduckdb_odbc.dylib\n+          fi\n \n-    - uses: actions/upload-artifact@v3\n-      with:\n-        name: duckdb-binaries-osx\n-        path: |\n-          libduckdb-osx-universal.zip\n-          duckdb_cli-osx-universal.zip\n-          duckdb_odbc-osx-universal.zip\n+      - name: Deploy\n+        shell: bash\n+        run: |\n+          python scripts/amalgamation.py\n+          zip -j duckdb_cli-osx-universal.zip build/release/duckdb\n+          zip -j libduckdb-osx-universal.zip build/release/src/libduckdb*.dylib src/amalgamation/duckdb.hpp src/include/duckdb.h\n+          zip -j duckdb_odbc-osx-universal.zip build/release/tools/odbc/libduckdb_odbc.dylib\n+          python scripts/asset-upload-gha.py libduckdb-osx-universal.zip duckdb_cli-osx-universal.zip duckdb_odbc-osx-universal.zip\n+\n+      - uses: actions/upload-artifact@v3\n+        with:\n+          name: duckdb-binaries-osx\n+          path: |\n+            libduckdb-osx-universal.zip\n+            duckdb_cli-osx-universal.zip\n+            duckdb_odbc-osx-universal.zip\n \n   xcode-extensions:\n     name: OSX Extensions Release\n@@ -199,6 +215,25 @@ jobs:\n           run_tests: 0\n           osx_universal: 1\n \n+      - name: Create separate binaries\n+        shell: bash\n+        run: |\n+          ./scripts/extension-lipo-strip.sh x86_64 build/release/extension build/release/extension_arm64\n+          ./scripts/extension-lipo-strip.sh arm64 build/release/extension build/release/extension_x64\n+\n+      - name: Sign Extension Binaries\n+        env:\n+          BUILD_CERTIFICATE_BASE64: ${{ secrets.OSX_CODESIGN_BUILD_CERTIFICATE_BASE64 }}\n+          P12_PASSWORD: ${{ secrets.OSX_CODESIGN_P12_PASSWORD }}\n+          KEYCHAIN_PASSWORD: ${{ secrets.OSX_CODESIGN_KEYCHAIN_PASSWORD }}\n+        run: |\n+          if [[ \"$GITHUB_REPOSITORY\" = \"duckdb/duckdb\" ]] ; then\n+          . scripts/osx_import_codesign_certificate.sh\n+\n+          codesign --all-architectures --force --sign \"Developer ID Application: Stichting DuckDB Foundation\" build/release/extension_arm64/*.duckdb_extension\n+          codesign --all-architectures --force --sign \"Developer ID Application: Stichting DuckDB Foundation\" build/release/extension_x64/*.duckdb_extension\n+          fi\n+\n       - name: Deploy\n         shell: bash\n         env:\n@@ -207,13 +242,13 @@ jobs:\n         run: |\n           if [[ \"$GITHUB_REF\" =~ ^(refs/tags/v.+)$ && \"$GITHUB_REPOSITORY\" = \"duckdb/duckdb\" ]] ; then\n             pip install awscli\n-            ./scripts/extension-upload.sh osx_amd64 ${{ github.ref_name }}\n-            ./scripts/extension-upload.sh osx_arm64 ${{ github.ref_name }}\n+            ./scripts/extension-upload.sh osx_amd64 ${{ github.ref_name }} build/release/extension_x64\n+            ./scripts/extension-upload.sh osx_arm64 ${{ github.ref_name }} build/release/extension_arm64\n             ./scripts/extension-upload-test.sh\n           elif [[ \"$GITHUB_REF\" =~ ^(refs/heads/master)$ && \"$GITHUB_REPOSITORY\" = \"duckdb/duckdb\" ]] ; then\n             pip install awscli\n-            ./scripts/extension-upload.sh osx_amd64 `git log -1 --format=%h`\n-            ./scripts/extension-upload.sh osx_arm64 `git log -1 --format=%h`\n+            ./scripts/extension-upload.sh osx_amd64 `git log -1 --format=%h` build/release/extension_x64\n+            ./scripts/extension-upload.sh osx_arm64 `git log -1 --format=%h` build/release/extension_arm64\n             ./scripts/extension-upload-test.sh\n           else\n             ./scripts/extension-upload-test.sh local\ndiff --git a/.github/workflows/R.yml b/.github/workflows/R.yml\nindex 7ff11b58cc4d..b8128599671d 100644\n--- a/.github/workflows/R.yml\n+++ b/.github/workflows/R.yml\n@@ -80,7 +80,7 @@ jobs:\n       with:\n         python-version: '3.7'\n \n-    - uses: r-lib/actions/setup-r@v1\n+    - uses: r-lib/actions/setup-r@v2\n       with:\n         r-version: 'devel'\n \n@@ -181,7 +181,7 @@ jobs:\n       with:\n         python-version: '3.7'\n \n-    - uses: r-lib/actions/setup-r@v1\n+    - uses: r-lib/actions/setup-r@v2\n       with:\n         r-version: 'devel'\n \n@@ -220,7 +220,7 @@ jobs:\n       with:\n         python-version: '3.7'\n \n-    - uses: r-lib/actions/setup-r@v1\n+    - uses: r-lib/actions/setup-r@v2\n       with:\n         r-version: 'devel'\n         update-rtools: true\n@@ -249,6 +249,62 @@ jobs:\n         _R_CHECK_CRAN_INCOMING_=FALSE _R_CHECK_PKG_SIZES_=FALSE R CMD check --as-cran --no-manual -o /tmp duckdb_*.tar.gz\n         if egrep 'NOTE|WARNING|ERROR' /tmp/duckdb.Rcheck/00check.log ; then exit 1; fi\n \n+  rstats-windows-extensions:\n+    name: R Package Windows (Extensions)\n+    needs: rstats-linux\n+    runs-on: windows-latest\n+    steps:\n+      - uses: actions/checkout@v3\n+        with:\n+          fetch-depth: 0\n+\n+      - uses: actions/setup-python@v4\n+        with:\n+          python-version: '3.7'\n+\n+      - uses: r-lib/actions/setup-r@v2\n+        with:\n+          r-version: 'devel'\n+          update-rtools: true\n+          rtools-version: '42' # linker bug in 43 ^^\n+\n+      - uses: r-lib/actions/setup-pandoc@v2\n+\n+      - name: Setup Ccache\n+        uses: hendrikmuhs/ccache-action@main\n+        with:\n+          key: ${{ github.job }}\n+          save: ${{ github.ref == 'refs/heads/master' || github.repository != 'duckdb/duckdb' }}\n+\n+      - uses: ./.github/actions/build_extensions\n+        with:\n+          deploy_as: windows_amd64_rtools\n+          treat_warn_as_error: 0\n+          s3_id: ${{ secrets.S3_ID }}\n+          s3_key: ${{ secrets.S3_KEY }}\n+          signing_pk: ${{ secrets.DUCKDB_EXTENSION_SIGNING_PK }}\n+          python_name: python\n+          override_cc: gcc\n+          override_cxx: g++\n+          out_of_tree_ext: 0\n+          openssl_path: C:/rtools43/x86_64-w64-mingw32.static.posix # not sure if this is required, there seems to be an openssl there\n+          run_tests: 0\n+\n+      - name: Install R package\n+        shell: bash\n+        run: |\n+          R -e 'install.packages(\"DBI\", repos = \"https://cloud.r-project.org\")'\n+          cd tools/rpkg\n+          ./configure\n+          R CMD build .\n+          R CMD INSTALL duckdb_*.tar.gz\n+\n+      - name: Test Load\n+        shell: bash\n+        run: |\n+          R -e 'con <- DBI::dbConnect(duckdb::duckdb(config = list(\"allow_unsigned_extensions\" = \"true\")), debug=TRUE); lapply(Sys.glob(\"build/release/extension/*/*.duckdb_extension\"), function(x) DBI::dbExecute(con, sprintf(\"LOAD \\\"%s\\\"\", x))); DBI::dbDisconnect(con, shutdown=TRUE);'\n+\n+\n   rstats-windows-warnings:\n     name: R Package Windows (Warnings)\n     needs: rstats-linux\n@@ -264,7 +320,7 @@ jobs:\n       with:\n         python-version: '3.7'\n \n-    - uses: r-lib/actions/setup-r@v1\n+    - uses: r-lib/actions/setup-r@v2\n       with:\n         r-version: 'devel'\n         update-rtools: true\ndiff --git a/CMakeLists.txt b/CMakeLists.txt\nindex 67e535ebe0ee..ded325be38f5 100644\n--- a/CMakeLists.txt\n+++ b/CMakeLists.txt\n@@ -792,10 +792,6 @@ function(link_threads LIBRARY)\n endfunction()\n \n function(build_loadable_extension_directory NAME OUTPUT_DIRECTORY PARAMETERS)\n-  #  skip building extensions on mingw because its weird\n-  if(WIN32 AND NOT MSVC)\n-    return()\n-  endif()\n   set(TARGET_NAME ${NAME}_loadable_extension)\n   # all parameters after output_directory\n   set(FILES ${ARGV})\n@@ -903,6 +899,98 @@ foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n   endif()\n endforeach()\n \n+if(BUILD_PYTHON\n+        OR BUILD_R\n+        OR BUILD_NODE\n+        OR CONFIGURE_R)\n+  if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n+    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}\")\n+  elseif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n+    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}\")\n+  elseif(CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n+    set(ALL_COMPILE_FLAGS\n+            \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n+  else()\n+    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS}\")\n+  endif()\n+\n+  get_target_property(duckdb_libs duckdb LINK_LIBRARIES)\n+\n+  # This searches all Out-of-tree (OOT) extensions that we have linked into duckdb for their direct dependencies and\n+  # adds them to the duckdb_libs to ensure they also get linked. This allows linking OOT extensions with dependencies\n+  # for the Python/R/Node builds\n+  foreach(OOTE_NAME IN LISTS DUCKDB_OOT_EXTENSION_NAMES)\n+    string(TOUPPER ${OOTE_NAME} OOTE_NAME_UPPERCASE)\n+    if (${DUCKDB_OOT_EXTENSION_${OOTE_NAME_UPPERCASE}_SHOULD_LINK})\n+      get_target_property(OOTE_LINKED_LIBS ${OOTE_NAME}_extension LINK_LIBRARIES)\n+      set(duckdb_libs ${OOTE_LINKED_LIBS} ${duckdb_libs})\n+    endif()\n+  endforeach()\n+\n+  if(BUILD_PYTHON)\n+    if(USER_SPACE)\n+      add_custom_target(\n+              duckdb_python ALL\n+              COMMAND\n+              python3 setup.py install --user --binary-dir=${PROJECT_BINARY_DIR}\n+              --compile-flags=${ALL_COMPILE_FLAGS} --libs=\"${duckdb_libs}\"\n+              DEPENDS duckdb duckdb_static\n+              WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/pythonpkg\n+              COMMENT Build\n+              Python package)\n+    else()\n+      add_custom_target(\n+              duckdb_python ALL\n+              COMMAND python3 setup.py install --binary-dir=${PROJECT_BINARY_DIR}\n+              --compile-flags=${ALL_COMPILE_FLAGS} --libs=\"${duckdb_libs}\"\n+              DEPENDS duckdb duckdb_static\n+              WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/pythonpkg\n+              COMMENT Build\n+              Python package)\n+    endif()\n+    add_extension_dependencies(duckdb_python)\n+  endif()\n+  if(CONFIGURE_R)\n+    add_custom_target(\n+            duckdb_configure_r ALL\n+            COMMAND\n+            DUCKDB_R_BINDIR=${PROJECT_BINARY_DIR}\n+            DUCKDB_R_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n+            DUCKDB_R_LIBS=\\\"${duckdb_libs}\\\" python3 rconfigure.py\n+            DEPENDS duckdb duckdb_static\n+            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/rpkg\n+            COMMENT Configure\n+            R package)\n+    add_extension_dependencies(duckdb_configure_r)\n+  endif()\n+  if(BUILD_R)\n+    add_custom_target(\n+            duckdb_r ALL\n+            COMMAND\n+            DUCKDB_R_BINDIR=${PROJECT_BINARY_DIR}\n+            DUCKDB_R_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n+            DUCKDB_R_LIBS=\\\"${duckdb_libs}\\\" DUCKDB_R_DEBUG= R CMD INSTALL .\n+            DEPENDS duckdb duckdb_static\n+            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/rpkg\n+            COMMENT Build\n+            R package)\n+    add_extension_dependencies(duckdb_r)\n+  endif()\n+  if(BUILD_NODE)\n+    add_custom_target(\n+            duckdb_node ALL\n+            COMMAND\n+            make complete_build DUCKDB_NODE_BINDIR=${CMAKE_BINARY_DIR}\n+            DUCKDB_NODE_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n+            DUCKDB_NODE_LIBS=\\\"${duckdb_libs}\\\"\n+            DEPENDS duckdb duckdb_static\n+            WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/nodejs\n+            COMMENT Build\n+            Node package)\n+    add_extension_dependencies(duckdb_node)\n+  endif()\n+endif()\n+\n if(NOT CLANG_TIDY)\n   if(${BUILD_UNITTESTS})\n     add_subdirectory(test)\ndiff --git a/CONTRIBUTING.md b/CONTRIBUTING.md\nindex 6d66651bcbe4..7f2c6c92c7ff 100644\n--- a/CONTRIBUTING.md\n+++ b/CONTRIBUTING.md\n@@ -51,6 +51,8 @@ This project and everyone participating in it is governed by a [Code of Conduct]\n * Make sure **all** unit tests pass before sending a PR.\n * Slower tests should be added to the **all** unit tests. You can do this by naming the test file `.test_slow` in the sqllogictests, or by adding `[.]` after the test group in the C++ tests.\n * Look at the code coverage report of your branch and attempt to cover all code paths in the fast unit tests. Attempt to trigger exceptions as well. It is acceptable to have some exceptions not triggered (e.g. out of memory exceptions or type switch exceptions), but large branches of code should always be either covered or removed.\n+* DuckDB uses GitHub Actions as its continuous integration (CI) tool. You have the option to run GitHub Actions on your forked repository. For detailed instructions, you can refer to the [GitHub documentation](https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository). Before running GitHub Actions, please ensure that you have all the Git tags from the duckdb/duckdb repository. To accomplish this, execute the following commands `git fetch <your-duckdb/duckdb-repo-remote-name> --tags` then \n+`git push --tags` These commands will fetch all the git tags from the duckdb/duckdb repository and push them to your forked repository. This ensures that you have all the necessary tags available for your GitHub Actions workflow. \n \n ## Formatting\n \ndiff --git a/Makefile b/Makefile\nindex e36661a8cb08..7fe45812a670 100644\n--- a/Makefile\n+++ b/Makefile\n@@ -192,74 +192,25 @@ debug:\n \tmkdir -p ./build/debug && \\\n \tcd build/debug && \\\n \techo ${DUCKDB_OOT_EXTENSION_SUBSTRAIT_PATH} && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${DISABLE_SANITIZER_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DDEBUG_MOVE=1 \\\n-\t\t-DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${EXTRA_CMAKE_VARIABLES} -DDEBUG_MOVE=1 -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n release:\n \tmkdir -p ./build/release && \\\n \tcd build/release && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_WARN_UNUSED_FLAG} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${DISABLE_SANITIZER_FLAG} \\\n-\t\t${OSX_BUILD_UNIVERSAL_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=Release ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=Release ../.. && \\\n \tcmake --build . --config Release\n \n cldebug:\n \tmkdir -p ./build/cldebug && \\\n \tcd build/cldebug && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${EXTENSIONS} \\\n-\t\t-DBUILD_PYTHON=1 \\\n-\t\t-DBUILD_R=1 \\\n-\t\t-DENABLE_SANITIZER=0 \\\n-\t\t-DENABLE_UBSAN=0 \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${EXTENSIONS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n clreldebug:\n \tmkdir -p ./build/clreldebug && \\\n \tcd build/clreldebug && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t-DBUILD_PYTHON=1 \\\n-\t\t-DBUILD_R=1 \\\n-\t\t-DBUILD_FTS_EXTENSION=1 \\\n-\t\t-DENABLE_SANITIZER=0 \\\n-\t\t-DENABLE_UBSAN=0 \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} -DBUILD_PYTHON=1 -DBUILD_R=1 -DBUILD_FTS_EXTENSION=1 -DENABLE_SANITIZER=0 -DENABLE_UBSAN=0 ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n unittest: debug\n@@ -287,91 +238,38 @@ doxygen: docs\n reldebug:\n \tmkdir -p ./build/reldebug && \\\n \tcd build/reldebug && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${DISABLE_SANITIZER_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n relassert:\n \tmkdir -p ./build/relassert && \\\n \tcd build/relassert && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${DISABLE_SANITIZER_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t-DFORCE_ASSERT=1 \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} -DFORCE_ASSERT=1 ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=RelWithDebInfo ../.. && \\\n \tcmake --build . --config RelWithDebInfo\n \n benchmark:\n \tmkdir -p ./build/release && \\\n \tcd build/release && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${WARNINGS_AS_ERRORS} \\\n-\t\t${FORCE_WARN_UNUSED_FLAG} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t${DISABLE_UNITY_FLAG} \\\n-\t\t${DISABLE_SANITIZER_FLAG} \\\n-\t\t${OSX_BUILD_UNIVERSAL_FLAG} \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t-DBUILD_BENCHMARKS=1 \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=Release ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${WARNINGS_AS_ERRORS} ${FORCE_WARN_UNUSED_FLAG} ${FORCE_32_BIT_FLAG} ${DISABLE_UNITY_FLAG} ${DISABLE_SANITIZER_FLAG} ${OSX_BUILD_UNIVERSAL_FLAG} ${STATIC_LIBCPP} ${EXTENSIONS} -DBUILD_BENCHMARKS=1 ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=Release ../.. && \\\n \tcmake --build . --config Release\n \n amaldebug:\n \tmkdir -p ./build/amaldebug && \\\n \tpython3 scripts/amalgamation.py && \\\n \tcd build/amaldebug && \\\n-\tcmake \\\n-\t\t$(GENERATOR) \\\n-\t\t$(FORCE_COLOR) \\\n-\t\t${STATIC_LIBCPP} \\\n-\t\t${EXTENSIONS} \\\n-\t\t${FORCE_32_BIT_FLAG} \\\n-\t\t-DAMALGAMATION_BUILD=1 \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DCMAKE_BUILD_TYPE=Debug ../.. && \\\n+\tcmake $(GENERATOR) $(FORCE_COLOR) ${STATIC_LIBCPP} ${EXTENSIONS} ${FORCE_32_BIT_FLAG} -DAMALGAMATION_BUILD=1 ${EXTRA_CMAKE_VARIABLES} -DCMAKE_BUILD_TYPE=Debug ../.. && \\\n \tcmake --build . --config Debug\n \n tidy-check:\n \tmkdir -p ./build/tidy && \\\n \tcd build/tidy && \\\n-\tcmake \\\n-\t\t-DCLANG_TIDY=1 \\\n-\t\t-DDISABLE_UNITY=1 \\\n-\t\t-DBUILD_PARQUET_EXTENSION=TRUE \\\n-\t\t-DBUILD_PYTHON_PKG=TRUE \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DBUILD_SHELL=0 ../.. && \\\n+\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_PARQUET_EXTENSION=TRUE -DBUILD_PYTHON_PKG=TRUE ${EXTRA_CMAKE_VARIABLES} -DBUILD_SHELL=0 ../.. && \\\n \tpython3 ../../scripts/run-clang-tidy.py -quiet ${TIDY_THREAD_PARAMETER} ${TIDY_BINARY_PARAMETER}\n \n tidy-fix:\n \tmkdir -p ./build/tidy && \\\n \tcd build/tidy && \\\n-\tcmake \\\n-\t\t-DCLANG_TIDY=1 \\\n-\t\t-DDISABLE_UNITY=1 \\\n-\t\t-DBUILD_PARQUET_EXTENSION=TRUE \\\n-\t\t${EXTRA_CMAKE_VARIABLES} \\\n-\t\t-DBUILD_SHELL=0 ../.. && \\\n+\tcmake -DCLANG_TIDY=1 -DDISABLE_UNITY=1 -DBUILD_PARQUET_EXTENSION=TRUE ${EXTRA_CMAKE_VARIABLES} -DBUILD_SHELL=0 ../.. && \\\n \tpython3 ../../scripts/run-clang-tidy.py -fix\n \n test_compile: # test compilation of individual cpp files\ndiff --git a/benchmark/interpreted_benchmark.cpp b/benchmark/interpreted_benchmark.cpp\nindex d65f36d4fe68..8e38eed018af 100644\n--- a/benchmark/interpreted_benchmark.cpp\n+++ b/benchmark/interpreted_benchmark.cpp\n@@ -7,6 +7,7 @@\n #include \"duckdb/main/extension_helper.hpp\"\n #include \"duckdb/main/query_profiler.hpp\"\n #include \"test_helpers.hpp\"\n+#include \"duckdb/common/helper.hpp\"\n \n #include <fstream>\n #include <sstream>\n@@ -160,7 +161,7 @@ void InterpretedBenchmark::LoadBenchmark() {\n \t\t\t\t\tthrow std::runtime_error(\"Failed to read \" + splits[0] + \" from file \" + splits[1]);\n \t\t\t\t}\n \n-\t\t\t\tauto buffer = duckdb::unique_ptr<char[]>(new char[size]);\n+\t\t\t\tauto buffer = make_unsafe_uniq_array<char>(size);\n \t\t\t\tif (!file.read(buffer.get(), size)) {\n \t\t\t\t\tthrow std::runtime_error(\"Failed to read \" + splits[0] + \" from file \" + splits[1]);\n \t\t\t\t}\ndiff --git a/benchmark/micro/append_mix.cpp b/benchmark/micro/append_mix.cpp\nindex aff1024814e3..13446f794998 100644\n--- a/benchmark/micro/append_mix.cpp\n+++ b/benchmark/micro/append_mix.cpp\n@@ -29,11 +29,7 @@ using namespace duckdb;\n \tvoid get_random_area_code(char *area_code) {                                                                       \\\n \t\tuint32_t code = uint32_t(random.NextRandom(0, 999999));                                                        \\\n \t\tauto endptr = area_code + 6;                                                                                   \\\n-\t\tendptr = NumericHelper::FormatUnsigned(code, endptr);                                                          \\\n-\t\twhile (endptr > area_code) {                                                                                   \\\n-\t\t\t*endptr = '0';                                                                                             \\\n-\t\t\tendptr--;                                                                                                  \\\n-\t\t}                                                                                                              \\\n+\t\tNumericHelper::FormatUnsigned(code, endptr);                                                                   \\\n \t}                                                                                                                  \\\n \tvoid RunBenchmark(DuckDBBenchmarkState *state) override {                                                          \\\n \t\tstate->conn.Query(\"BEGIN TRANSACTION\");                                                                        \\\n@@ -42,7 +38,7 @@ using namespace duckdb;\n \t\t\tappender.BeginRow();                                                                                       \\\n \t\t\tappender.Append<int32_t>(i);                                                                               \\\n \t\t\tif (get_random_bool()) {                                                                                   \\\n-\t\t\t\tchar area_code[6];                                                                                     \\\n+\t\t\t\tchar area_code[6] = {'0', '0', '0', '0', '0', '0'};                                                    \\\n \t\t\t\tget_random_area_code(area_code);                                                                       \\\n \t\t\t\tappender.Append<string_t>(string_t(area_code, 6));                                                     \\\n \t\t\t} else {                                                                                                   \\\ndiff --git a/benchmark/micro/join/blockwise_nl_join.benchmark b/benchmark/micro/join/blockwise_nl_join.benchmark\nnew file mode 100644\nindex 000000000000..4e84515a1d76\n--- /dev/null\n+++ b/benchmark/micro/join/blockwise_nl_join.benchmark\n@@ -0,0 +1,23 @@\n+# name: benchmark/micro/join/blockwise_nl_join.benchmark\n+# description: Left join between two tables, where the left table is significantly less than the right table.\n+# group: [join]\n+\n+name Left Join (big RHS, small LHS)\n+group join\n+\n+load\n+create table lhs as select * from range(10000) lhs(id);\n+alter table lhs add column enroll_date date;\n+update lhs set enroll_date = date '2000-01-01' + cast(round(random()*3000) as integer);\n+create table rhs as select * from range(100000) rhs(id);\n+update rhs set id = random() * 1000000;\n+alter table rhs add column claim_date date;\n+update rhs set claim_date = date '2000-01-01' + cast(random()*3000 as integer);\n+alter table rhs add column claim_cost double;\n+update rhs set claim_cost = random() * 10000;\n+\n+run\n+select lhs.id, sum(coalesce(claim_cost,0))\n+from lhs left join rhs on lhs.id = rhs.id\n+and datediff('month',enroll_date,claim_date) between 1 and 12\n+group by lhs.id order by lhs.id;\ndiff --git a/benchmark/micro/join/join_from_parquet.benchmark b/benchmark/micro/join/join_from_parquet.benchmark\nnew file mode 100644\nindex 000000000000..528794550fb7\n--- /dev/null\n+++ b/benchmark/micro/join/join_from_parquet.benchmark\n@@ -0,0 +1,18 @@\n+# name: benchmark/micro/join/join_from_parquet.benchmark\n+# description: Join between two parquet files. We want to put the smaller parquet file on the build side\n+# group: [join]\n+\n+name Right Outer Join (big LHS, small RHS)\n+group join\n+\n+require tpch\n+\n+cache tpch_sf1.duckdb\n+\n+load\n+COPY lineitem TO 'lineitem.parquet';\n+COPY (SELECT 42) TO 'singlerow.parquet';\n+\n+run\n+select * from 'singlerow.parquet', 'lineitem.parquet';\n+\ndiff --git a/benchmark/micro/list/string_split.benchmark b/benchmark/micro/list/string_split.benchmark\nindex b7c4b6d01360..89a7d0bbfee6 100644\n--- a/benchmark/micro/list/string_split.benchmark\n+++ b/benchmark/micro/list/string_split.benchmark\n@@ -17,4 +17,4 @@ run\n SELECT SUM(LENGTH(str_split(l_comment, ' '))) FROM lineitem\n \n result I\n-27124176\n+27116609\ndiff --git a/benchmark/micro/list/string_split_regexp.benchmark b/benchmark/micro/list/string_split_regexp.benchmark\nindex 1504064a19ff..2cf5b1eb66df 100644\n--- a/benchmark/micro/list/string_split_regexp.benchmark\n+++ b/benchmark/micro/list/string_split_regexp.benchmark\n@@ -17,4 +17,4 @@ run\n SELECT SUM(LENGTH(str_split_regex(l_comment, '[z ]'))) FROM lineitem\n \n result I\n-27186473\n+27179168\ndiff --git a/benchmark/tpch/csv/lineitem_csv_gzip.benchmark b/benchmark/tpch/csv/lineitem_csv_gzip.benchmark\nnew file mode 100644\nindex 000000000000..c650cd5f53cc\n--- /dev/null\n+++ b/benchmark/tpch/csv/lineitem_csv_gzip.benchmark\n@@ -0,0 +1,24 @@\n+# name: benchmark/tpch/csv/lineitem_csv_gzip.benchmark\n+# description: Read Lineitem CSV gzipped with auto-detection\n+# group: [csv]\n+\n+name Read Lineitem CSV gzipped with auto-detection\n+group csv\n+\n+require tpch\n+\n+# create the CSV file\n+load\n+CREATE SCHEMA tpch_schema;\n+CALL dbgen(sf=1, schema='tpch_schema');\n+COPY tpch_schema.lineitem TO '${BENCHMARK_DIR}/lineitem.csv.gz' (DELIMITER '|', HEADER);\n+DROP SCHEMA tpch_schema CASCADE;\n+\n+run\n+CREATE OR REPLACE TABLE lineitem AS (SELECT * FROM read_csv_auto(['${BENCHMARK_DIR}/lineitem.csv.gz']));\n+\n+cleanup\n+DROP TABLE IF EXISTS lineitem;\n+\n+result I\n+6001215\ndiff --git a/benchmark/tpch/csv/lineitem_csv_gzip_sample.benchmark b/benchmark/tpch/csv/lineitem_csv_gzip_sample.benchmark\nnew file mode 100644\nindex 000000000000..266fd3fb1198\n--- /dev/null\n+++ b/benchmark/tpch/csv/lineitem_csv_gzip_sample.benchmark\n@@ -0,0 +1,24 @@\n+# name: benchmark/tpch/csv/lineitem_csv_gzip_sample.benchmark\n+# description: Read Lineitem CSV gzipped with auto-detection sampling the entire file\n+# group: [csv]\n+\n+name Read Lineitem CSV gzipped with auto-detection sampling the entire file\n+group csv\n+\n+require tpch\n+\n+# create the CSV file\n+load\n+CREATE SCHEMA tpch_schema;\n+CALL dbgen(sf=1, schema='tpch_schema');\n+COPY tpch_schema.lineitem TO '${BENCHMARK_DIR}/lineitem.csv.gz' (FORMAT CSV, DELIMITER '|', HEADER);\n+DROP SCHEMA tpch_schema CASCADE;\n+\n+run\n+CREATE OR REPLACE TABLE lineitem AS (SELECT * FROM read_csv_auto('${BENCHMARK_DIR}/lineitem.csv.gz', sample_size=-1));\n+\n+cleanup\n+DROP TABLE IF EXISTS lineitem;\n+\n+result I\n+6001215\ndiff --git a/benchmark/tpch/csv/lineitem_csv_many_files.benchmark b/benchmark/tpch/csv/lineitem_csv_many_files.benchmark\nnew file mode 100644\nindex 000000000000..a397885a698b\n--- /dev/null\n+++ b/benchmark/tpch/csv/lineitem_csv_many_files.benchmark\n@@ -0,0 +1,49 @@\n+# name: benchmark/tpch/csv/lineitem_csv_many_files.benchmark\n+# description: Read the lineitem CSV with many files\n+# group: [csv]\n+\n+name Read Lineitem CSV Many Files\n+group csv\n+\n+require tpch\n+\n+# create the CSV file\n+load\n+call dbgen(sf=1);\n+COPY (FROM lineitem LIMIT 200000 OFFSET 0)       TO '${BENCHMARK_DIR}/lineitem-split-0.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 200000)  TO '${BENCHMARK_DIR}/lineitem-split-1.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 400000)  TO '${BENCHMARK_DIR}/lineitem-split-2.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 600000)  TO '${BENCHMARK_DIR}/lineitem-split-3.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 800000)  TO '${BENCHMARK_DIR}/lineitem-split-4.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 1000000) TO '${BENCHMARK_DIR}/lineitem-split-5.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 1200000) TO '${BENCHMARK_DIR}/lineitem-split-6.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 1400000) TO '${BENCHMARK_DIR}/lineitem-split-7.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 1600000) TO '${BENCHMARK_DIR}/lineitem-split-8.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 1800000) TO '${BENCHMARK_DIR}/lineitem-split-9.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 2000000) TO '${BENCHMARK_DIR}/lineitem-split-10.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 2200000) TO '${BENCHMARK_DIR}/lineitem-split-11.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 2400000) TO '${BENCHMARK_DIR}/lineitem-split-12.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 2600000) TO '${BENCHMARK_DIR}/lineitem-split-13.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 2800000) TO '${BENCHMARK_DIR}/lineitem-split-14.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 3000000) TO '${BENCHMARK_DIR}/lineitem-split-15.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 3200000) TO '${BENCHMARK_DIR}/lineitem-split-16.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 3400000) TO '${BENCHMARK_DIR}/lineitem-split-17.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 3600000) TO '${BENCHMARK_DIR}/lineitem-split-18.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 3800000) TO '${BENCHMARK_DIR}/lineitem-split-19.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 4000000) TO '${BENCHMARK_DIR}/lineitem-split-20.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 4200000) TO '${BENCHMARK_DIR}/lineitem-split-21.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 4400000) TO '${BENCHMARK_DIR}/lineitem-split-22.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 4600000) TO '${BENCHMARK_DIR}/lineitem-split-23.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 4800000) TO '${BENCHMARK_DIR}/lineitem-split-24.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 5000000) TO '${BENCHMARK_DIR}/lineitem-split-25.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 5200000) TO '${BENCHMARK_DIR}/lineitem-split-26.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 5400000) TO '${BENCHMARK_DIR}/lineitem-split-27.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 5600000) TO '${BENCHMARK_DIR}/lineitem-split-28.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 5800000) TO '${BENCHMARK_DIR}/lineitem-split-29.csv' (HEADER, DELIMITER '|');\n+COPY (FROM lineitem LIMIT 200000 OFFSET 6000000) TO '${BENCHMARK_DIR}/lineitem-split-30.csv' (HEADER, DELIMITER '|');\n+\n+run\n+SELECT COUNT(*) FROM read_csv_auto('${BENCHMARK_DIR}/lineitem-split-*.csv');\n+\n+result I\n+6001215\ndiff --git a/data/csv/aws_locations.csv b/data/csv/aws_locations.csv\nnew file mode 100644\nindex 000000000000..a5a0c4514d4b\n--- /dev/null\n+++ b/data/csv/aws_locations.csv\n@@ -0,0 +1,103 @@\n+code,city,state,country,country_code,count,latitude,longitude,region,pricing_region\n+IAD,Washington,District of Columbia,United States,US,20,38.94449997,-77.45580292,North America,\"United States, Mexico, & Canada\"\n+ORD,Chicago,Illinois,United States,US,20,41.978611,-87.904722,North America,\"United States, Mexico, & Canada\"\n+JFK,New York,New York,United States,US,8,40.639801,-73.7789,North America,\"United States, Mexico, & Canada\"\n+ATL,Atlanta,Georgia,United States,US,17,33.6367,-84.428101,North America,\"United States, Mexico, & Canada\"\n+LAX,Los Angeles,California,United States,US,15,33.942501,-118.407997,North America,\"United States, Mexico, & Canada\"\n+MIA,Miami,Florida,United States,US,11,25.79319953918457,-80.29060363769531,North America,\"United States, Mexico, & Canada\"\n+DFW,Dallas-Fort Worth,Texas,United States,US,18,32.896801,-97.038002,North America,\"United States, Mexico, & Canada\"\n+IAH,Houston,Texas,United States,US,6,29.984399795532227,-95.34140014648438,North America,\"United States, Mexico, & Canada\"\n+SFO,San Francisco,California,United States,US,8,37.61899948120117,-122.375,North America,\"United States, Mexico, & Canada\"\n+BOS,Boston,Massachusetts,United States,US,5,42.36429977,-71.00520325,North America,\"United States, Mexico, & Canada\"\n+DEN,Denver,Colorado,United States,US,6,39.861698150635,-104.672996521,North America,\"United States, Mexico, & Canada\"\n+PDX,Portland,Oregon,United States,US,2,45.58869934,-122.5979996,North America,\"United States, Mexico, & Canada\"\n+SEA,Seattle,Washington,United States,US,6,47.448889,-122.309444,North America,\"United States, Mexico, & Canada\"\n+MSP,Minneapolis,Minnesota,United States,US,4,44.882,-93.221802,North America,\"United States, Mexico, & Canada\"\n+PHX,Phoenix,Arizona,United States,US,3,33.43429946899414,-112.01200103759766,North America,\"United States, Mexico, & Canada\"\n+PHL,Philadelphia,Pennsylvania,United States,US,2,39.87189865112305,-75.24109649658203,North America,\"United States, Mexico, & Canada\"\n+SLC,Salt Lake City,Utah,United States,US,1,40.78839874267578,-111.97799682617188,North America,\"United States, Mexico, & Canada\"\n+BNA,Nashville,Tennessee,United States,US,2,36.1245002746582,-86.6781997680664,North America,\"United States, Mexico, & Canada\"\n+DTW,Detroit,Michigan,United States,US,2,42.212398529052734,-83.35340118408203,North America,\"United States, Mexico, & Canada\"\n+TPA,Tampa,Florida,United States,US,2,27.975500106811523,-82.533203125,North America,\"United States, Mexico, & Canada\"\n+EWR,Newark,New Jersey,United States,US,10,40.692501068115234,-74.168701171875,North America,\"United States, Mexico, & Canada\"\n+CMH,Columbus,Ohio,United States,US,2,39.998001,-82.891899,North America,\"United States, Mexico, & Canada\"\n+MCI,Kansas City,Missouri,United States,US,2,39.2976,-94.713898,North America,\"United States, Mexico, & Canada\"\n+QRO,Queretaro,,North America,MX,1,20.6173,-100.185997,undefined,\"null\"\n+FRA,Frankfurt am Main,,Germany,DE,17,50.033333,8.570556,Europe,\"Europe & Israel\"\n+DUS,D\u00fcsseldorf,,Germany,DE,3,51.289501,6.76678,Europe,\"Europe & Israel\"\n+HAM,Hamburg,,Germany,DE,6,53.630401611328,9.9882297515869,Europe,\"Europe & Israel\"\n+MUC,Munich,,Germany,DE,4,48.353802,11.7861,Europe,\"Europe & Israel\"\n+TXL,Berlin,,Germany,DE,5,52.559722,13.287778,Europe,\"Europe & Israel\"\n+CDG,Paris,,France,FR,11,49.012798,2.55,Europe,\"Europe & Israel\"\n+MRS,Marseille,,France,FR,6,43.439271922,5.22142410278,Europe,\"Europe & Israel\"\n+MXP,Milan,,Italy,IT,9,45.6306,8.72811,Europe,\"Europe & Israel\"\n+FCO,Rome,,Italy,IT,6,41.8002778,12.2388889,Europe,\"Europe & Israel\"\n+PMO,Palermo,,Italy,IT,1,38.175999,13.091,Europe,\"Europe & Israel\"\n+AMS,Amsterdam,,Netherlands,NL,5,52.308601,4.76389,Europe,\"Europe & Israel\"\n+MAN,Manchester,,UK,GB,5,53.35369873046875,-2.2749500274658203,Europe,\"Europe & Israel\"\n+LHR,London,,UK,GB,25,51.4775,-0.461389,Europe,\"Europe & Israel\"\n+DUB,Dublin,,Ireland,IE,2,53.421299,-6.27007,Europe,\"Europe & Israel\"\n+VIE,Vienna,,Austria,AT,3,48.110298156738,16.569700241089,Europe,\"Europe & Israel\"\n+ARN,Stockholm,,Sweden,SE,4,59.651901245117,17.918600082397,Europe,\"Europe & Israel\"\n+CPH,Copenhagen,,Denmark,DK,3,55.617900848389,12.656000137329,Europe,\"Europe & Israel\"\n+HEL,Helsinki,,Finland,FI,4,60.317199707031,24.963300704956,Europe,\"Europe & Israel\"\n+ATH,Athens,,Greece,GR,1,37.9364013672,23.9444999695,Europe,\"Europe & Israel\"\n+BRU,Brussels,,Belgium,BE,1,50.901401519800004,4.48443984985,Europe,\"Europe & Israel\"\n+BUD,Budapest,,Hungary,HU,1,47.42976,19.261093,Europe,\"Europe & Israel\"\n+LIS,Lisbon,,Portugal,PT,1,38.7813,-9.13592,Europe,\"Europe & Israel\"\n+OSL,Oslo,,Norway,NO,2,60.193901062012,11.100399971008,Europe,\"Europe & Israel\"\n+OTP,Bucharest,,Romania,RO,1,44.5711111,26.085,Europe,\"Europe & Israel\"\n+PRG,Prague,,Czech Republic,CZ,1,50.1008,14.26,Europe,\"Europe & Israel\"\n+SOF,Sofia,,Bulgaria,BG,1,42.696693420410156,23.411436080932617,Europe,\"Europe & Israel\"\n+WAW,Warsaw,,Poland,PL,3,52.165833,20.967222,Europe,\"Europe & Israel\"\n+ZAG,Zagreb,,Croatia,HR,1,45.7429008484,16.0687999725,Europe,\"Europe & Israel\"\n+ZRH,Zurich,,Switzerland,CH,2,47.464699,8.54917,Europe,\"Europe & Israel\"\n+BCN,Barcelona,,Spain,ES,2,41.2971,2.07846,Europe,\"Europe & Israel\"\n+MAD,Madrid,,Spain,ES,10,40.471926,-3.56264,Europe,\"Europe & Israel\"\n+DEL,New Delhi,,India,IN,14,28.5665,77.103104,Asia,\"India\"\n+MAA,Chennai,,India,IN,8,12.990005493164062,80.16929626464844,Asia,\"India\"\n+BOM,Mumbai,,India,IN,8,19.0886993408,72.8678970337,Asia,\"India\"\n+PNQ,Pune,,India,IN,4,18.58209991455078,73.9197006225586,Asia,\"India\"\n+BLR,Bangalore,,India,IN,5,13.1979,77.706299,Asia,\"India\"\n+HYD,Hyderabad,,India,IN,5,17.231318,78.429855,Asia,\"India\"\n+SIN,Singapore,,Singapore,SG,7,1.35019,103.994003,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+KIX,Osaka,,Japan,JP,5,34.42729949951172,135.24400329589844,Asia,\"Japan\"\n+NRT,Tokyo,,Japan,JP,22,35.764702,140.386002,Asia,\"Japan\"\n+TPE,Taoyuan,,Taiwan,TW,3,25.0777,121.233002,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+ICN,Seoul,,Korea,KR,8,37.46910095214844,126.45099639892578,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+BKK,Bangkok,,Thailand,TH,2,13.689999,100.750114,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+CCU,Kolkata,,India,IN,2,22.654699325561523,88.44670104980469,Asia,\"India\"\n+CGK,Jakarta,,Indonesia,ID,5,-6.1255698204,106.65599823,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+KUL,Kuala Lumpur,,Malaysia,MY,2,2.745579957962,101.70999908447,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+MNL,Manila,,Philippines,PH,1,14.5086,121.019997,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+HAN,Hanoi,,Vietnam,VN,1,21.221200942993164,105.80699920654297,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+SGN,Ho Chi Minh City,,Vietnam,VN,1,10.8187999725,106.652000427,Asia,\"Hong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\"\n+SYD,Sydney,,Australia,AU,4,-33.94609832763672,151.177001953125,Australia & New Zealand,\"Australia & New Zealand\"\n+AKL,Auckland,,New Zealand,NZ,2,-37.008098602299995,174.792007446,Australia & New Zealand,\"Australia & New Zealand\"\n+MEL,Melbourne,,Australia,AU,3,-37.673302,144.843002,Australia & New Zealand,\"Australia & New Zealand\"\n+PER,Perth,,Australia,AU,1,-31.94029998779297,115.96700286865234,Australia & New Zealand,\"Australia & New Zealand\"\n+GRU,Sao Paulo,,Brazil,BR,8,-23.435556,-46.473056,South America,\"South America\"\n+GIG,Rio De Janeiro,,Brazil,BR,5,-22.8099994659,-43.2505569458,South America,\"South America\"\n+FOR,Fortaleza,,Brazil,BR,4,-3.776279926300049,-38.53260040283203,South America,\"South America\"\n+BOG,Bogota,,Colombia,CO,3,4.70159,-74.1469,South America,\"South America\"\n+EZE,Buenos Aires,,Argentina,AR,2,-34.8222,-58.5358,South America,\"South America\"\n+SCL,Santiago,,Chile,CL,3,-33.393001556396484,-70.78579711914062,South America,\"South America\"\n+LIM,Lima,,Peru,PE,2,-12.0219,-77.114305,South America,\"South America\"\n+TLV,Tel Aviv,,Israel,IL,2,32.01139831542969,34.88669967651367,Middle East,\"Europe & Israel\"\n+BAH,Manama,,Bahrain,BH,2,26.27079963684082,50.63359832763672,Middle East,\"South Africa, Kenya, & Middle East\"\n+DXB,Dubai,,UAE,AE,1,25.2527999878,55.3643989563,Middle East,\"South Africa, Kenya, & Middle East\"\n+FJR,Fujairah,,UAE,AE,3,25.112222,56.324167,Middle East,\"South Africa, Kenya, & Middle East\"\n+MCT,Muscat,,Oman,OM,1,23.593299865722656,58.284400939941406,Middle East,\"South Africa, Kenya, & Middle East\"\n+CPT,Cape Town,,South Africa,ZA,1,-33.9648017883,18.6016998291,Africa,\"South Africa, Kenya, & Middle East\"\n+JNB,Johannesburg,,South Africa,ZA,1,-26.1392,28.246,Africa,\"South Africa, Kenya, & Middle East\"\n+NBO,Nairobi,,Kenya,KE,1,-1.31923997402,36.9277992249,Africa,\"South Africa, Kenya, & Middle East\"\n+PVG,Shanghai,,China,CN,1,31.143400192260742,121.80500030517578,China,\"China\"\n+SZX,Shenzhen,,China,CN,1,22.639299392700195,113.81099700927734,China,\"China\"\n+ZHY,Zhongwei,,China,CN,1,37.572778,105.154444,China,\"China\"\n+PEK,Beijing,,China,CN,1,40.080101013183594,116.58499908447266,China,\"China\"\n+HKG,Hong Kong,,China,HK,4,22.308901,113.915001,China,\"China\"\n+CMH,Columbus,Ohio,United States,US,1,39.998056,-82.891944,North America,\"United States, Mexico, & Canada\"\n+HIO,Hillsboro,Oregon,United States,US,1,45.540394,-122.949825,North America,\"United States, Mexico, & Canada\"\n+TPA,Tampa,Florida,United States,US,1,27.979722,-82.534722,North America,\"United States, Mexico, & Canada\"\n+PNQ,Pune,Maharashtra,India,IN,1,18.582222,73.919722,Asia,\"India\"\n+MCT,Muscat,Muscat,Oman,OM,1,23.6015386,58.2899376,Middle East,\"South Africa, Kenya, & Middle East\"\n\\ No newline at end of file\ndiff --git a/data/csv/dirty_line.csv b/data/csv/dirty_line.csv\nnew file mode 100644\nindex 000000000000..a62f7ff6348b\n--- /dev/null\n+++ b/data/csv/dirty_line.csv\n@@ -0,0 +1,4 @@\n+a bad starting line\n+COL1,COL2,COL3\n+1.5,a,3\n+2.5,b,4\n\\ No newline at end of file\ndiff --git a/data/csv/error/csv_error.csv b/data/csv/error/csv_error.csv\nnew file mode 100644\nindex 000000000000..fd44b0194da8\n--- /dev/null\n+++ b/data/csv/error/csv_error.csv\n@@ -0,0 +1,3102 @@\n+'1','world'\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+bla,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\n+1,world\ndiff --git a/data/csv/error/date.csv b/data/csv/error/date.csv\nnew file mode 100644\nindex 000000000000..400109532568\n--- /dev/null\n+++ b/data/csv/error/date.csv\n@@ -0,0 +1,3102 @@\n+'2008-01-01','worlds'\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+bla,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\n+2008-01-01,worlds\ndiff --git a/data/csv/error/mixedtypes.csv b/data/csv/error/mixedtypes.csv\nnew file mode 100644\nindex 000000000000..5cc5d11099f3\n--- /dev/null\n+++ b/data/csv/error/mixedtypes.csv\n@@ -0,0 +1,13401 @@\n+i,'world'\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+33,world\n+34,world\n+35,world\n+36,world\n+37,world\n+38,world\n+39,world\n+40,world\n+41,world\n+42,world\n+43,world\n+44,world\n+45,world\n+46,world\n+47,world\n+48,world\n+49,world\n+50,world\n+51,world\n+52,world\n+53,world\n+54,world\n+55,world\n+56,world\n+57,world\n+58,world\n+59,world\n+60,world\n+61,world\n+62,world\n+63,world\n+64,world\n+65,world\n+66,world\n+67,world\n+68,world\n+69,world\n+70,world\n+71,world\n+72,world\n+73,world\n+74,world\n+75,world\n+76,world\n+77,world\n+78,world\n+79,world\n+80,world\n+81,world\n+82,world\n+83,world\n+84,world\n+85,world\n+86,world\n+87,world\n+88,world\n+89,world\n+90,world\n+91,world\n+92,world\n+93,world\n+94,world\n+95,world\n+96,world\n+97,world\n+98,world\n+99,world\n+100,world\n+101,world\n+102,world\n+103,world\n+104,world\n+105,world\n+106,world\n+107,world\n+108,world\n+109,world\n+110,world\n+111,world\n+112,world\n+113,world\n+114,world\n+115,world\n+116,world\n+117,world\n+118,world\n+119,world\n+120,world\n+121,world\n+122,world\n+123,world\n+124,world\n+125,world\n+126,world\n+127,world\n+128,world\n+129,world\n+130,world\n+131,world\n+132,world\n+133,world\n+134,world\n+135,world\n+136,world\n+137,world\n+138,world\n+139,world\n+140,world\n+141,world\n+142,world\n+143,world\n+144,world\n+145,world\n+146,world\n+147,world\n+148,world\n+149,world\n+150,world\n+151,world\n+152,world\n+153,world\n+154,world\n+155,world\n+156,world\n+157,world\n+158,world\n+159,world\n+160,world\n+161,world\n+162,world\n+163,world\n+164,world\n+165,world\n+166,world\n+167,world\n+168,world\n+169,world\n+170,world\n+171,world\n+172,world\n+173,world\n+174,world\n+175,world\n+176,world\n+177,world\n+178,world\n+179,world\n+180,world\n+181,world\n+182,world\n+183,world\n+184,world\n+185,world\n+186,world\n+187,world\n+188,world\n+189,world\n+190,world\n+191,world\n+192,world\n+193,world\n+194,world\n+195,world\n+196,world\n+197,world\n+198,world\n+199,world\n+200,world\n+201,world\n+202,world\n+203,world\n+204,world\n+205,world\n+206,world\n+207,world\n+208,world\n+209,world\n+210,world\n+211,world\n+212,world\n+213,world\n+214,world\n+215,world\n+216,world\n+217,world\n+218,world\n+219,world\n+220,world\n+221,world\n+222,world\n+223,world\n+224,world\n+225,world\n+226,world\n+227,world\n+228,world\n+229,world\n+230,world\n+231,world\n+232,world\n+233,world\n+234,world\n+235,world\n+236,world\n+237,world\n+238,world\n+239,world\n+240,world\n+241,world\n+242,world\n+243,world\n+244,world\n+245,world\n+246,world\n+247,world\n+248,world\n+249,world\n+250,world\n+251,world\n+252,world\n+253,world\n+254,world\n+255,world\n+256,world\n+257,world\n+258,world\n+259,world\n+260,world\n+261,world\n+262,world\n+263,world\n+264,world\n+265,world\n+266,world\n+267,world\n+268,world\n+269,world\n+270,world\n+271,world\n+272,world\n+273,world\n+274,world\n+275,world\n+276,world\n+277,world\n+278,world\n+279,world\n+280,world\n+281,world\n+282,world\n+283,world\n+284,world\n+285,world\n+286,world\n+287,world\n+288,world\n+289,world\n+290,world\n+291,world\n+292,world\n+293,world\n+294,world\n+295,world\n+296,world\n+297,world\n+298,world\n+299,world\n+300,world\n+301,world\n+302,world\n+303,world\n+304,world\n+305,world\n+306,world\n+307,world\n+308,world\n+309,world\n+310,world\n+311,world\n+312,world\n+313,world\n+314,world\n+315,world\n+316,world\n+317,world\n+318,world\n+319,world\n+320,world\n+321,world\n+322,world\n+323,world\n+324,world\n+325,world\n+326,world\n+327,world\n+328,world\n+329,world\n+330,world\n+331,world\n+332,world\n+333,world\n+334,world\n+335,world\n+336,world\n+337,world\n+338,world\n+339,world\n+340,world\n+341,world\n+342,world\n+343,world\n+344,world\n+345,world\n+346,world\n+347,world\n+348,world\n+349,world\n+350,world\n+351,world\n+352,world\n+353,world\n+354,world\n+355,world\n+356,world\n+357,world\n+358,world\n+359,world\n+360,world\n+361,world\n+362,world\n+363,world\n+364,world\n+365,world\n+366,world\n+367,world\n+368,world\n+369,world\n+370,world\n+371,world\n+372,world\n+373,world\n+374,world\n+375,world\n+376,world\n+377,world\n+378,world\n+379,world\n+380,world\n+381,world\n+382,world\n+383,world\n+384,world\n+385,world\n+386,world\n+387,world\n+388,world\n+389,world\n+390,world\n+391,world\n+392,world\n+393,world\n+394,world\n+395,world\n+396,world\n+397,world\n+398,world\n+399,world\n+400,world\n+401,world\n+402,world\n+403,world\n+404,world\n+405,world\n+406,world\n+407,world\n+408,world\n+409,world\n+410,world\n+411,world\n+412,world\n+413,world\n+414,world\n+415,world\n+416,world\n+417,world\n+418,world\n+419,world\n+420,world\n+421,world\n+422,world\n+423,world\n+424,world\n+425,world\n+426,world\n+427,world\n+428,world\n+429,world\n+430,world\n+431,world\n+432,world\n+433,world\n+434,world\n+435,world\n+436,world\n+437,world\n+438,world\n+439,world\n+440,world\n+441,world\n+442,world\n+443,world\n+444,world\n+445,world\n+446,world\n+447,world\n+448,world\n+449,world\n+450,world\n+451,world\n+452,world\n+453,world\n+454,world\n+455,world\n+456,world\n+457,world\n+458,world\n+459,world\n+460,world\n+461,world\n+462,world\n+463,world\n+464,world\n+465,world\n+466,world\n+467,world\n+468,world\n+469,world\n+470,world\n+471,world\n+472,world\n+473,world\n+474,world\n+475,world\n+476,world\n+477,world\n+478,world\n+479,world\n+480,world\n+481,world\n+482,world\n+483,world\n+484,world\n+485,world\n+486,world\n+487,world\n+488,world\n+489,world\n+490,world\n+491,world\n+492,world\n+493,world\n+494,world\n+495,world\n+496,world\n+497,world\n+498,world\n+499,world\n+500,world\n+501,world\n+502,world\n+503,world\n+504,world\n+505,world\n+506,world\n+507,world\n+508,world\n+509,world\n+510,world\n+511,world\n+512,world\n+513,world\n+514,world\n+515,world\n+516,world\n+517,world\n+518,world\n+519,world\n+520,world\n+521,world\n+522,world\n+523,world\n+524,world\n+525,world\n+526,world\n+527,world\n+528,world\n+529,world\n+530,world\n+531,world\n+532,world\n+533,world\n+534,world\n+535,world\n+536,world\n+537,world\n+538,world\n+539,world\n+540,world\n+541,world\n+542,world\n+543,world\n+544,world\n+545,world\n+546,world\n+547,world\n+548,world\n+549,world\n+550,world\n+551,world\n+552,world\n+553,world\n+554,world\n+555,world\n+556,world\n+557,world\n+558,world\n+559,world\n+560,world\n+561,world\n+562,world\n+563,world\n+564,world\n+565,world\n+566,world\n+567,world\n+568,world\n+569,world\n+570,world\n+571,world\n+572,world\n+573,world\n+574,world\n+575,world\n+576,world\n+577,world\n+578,world\n+579,world\n+580,world\n+581,world\n+582,world\n+583,world\n+584,world\n+585,world\n+586,world\n+587,world\n+588,world\n+589,world\n+590,world\n+591,world\n+592,world\n+593,world\n+594,world\n+595,world\n+596,world\n+597,world\n+598,world\n+599,world\n+600,world\n+601,world\n+602,world\n+603,world\n+604,world\n+605,world\n+606,world\n+607,world\n+608,world\n+609,world\n+610,world\n+611,world\n+612,world\n+613,world\n+614,world\n+615,world\n+616,world\n+617,world\n+618,world\n+619,world\n+620,world\n+621,world\n+622,world\n+623,world\n+624,world\n+625,world\n+626,world\n+627,world\n+628,world\n+629,world\n+630,world\n+631,world\n+632,world\n+633,world\n+634,world\n+635,world\n+636,world\n+637,world\n+638,world\n+639,world\n+640,world\n+641,world\n+642,world\n+643,world\n+644,world\n+645,world\n+646,world\n+647,world\n+648,world\n+649,world\n+650,world\n+651,world\n+652,world\n+653,world\n+654,world\n+655,world\n+656,world\n+657,world\n+658,world\n+659,world\n+660,world\n+661,world\n+662,world\n+663,world\n+664,world\n+665,world\n+666,world\n+667,world\n+668,world\n+669,world\n+670,world\n+671,world\n+672,world\n+673,world\n+674,world\n+675,world\n+676,world\n+677,world\n+678,world\n+679,world\n+680,world\n+681,world\n+682,world\n+683,world\n+684,world\n+685,world\n+686,world\n+687,world\n+688,world\n+689,world\n+690,world\n+691,world\n+692,world\n+693,world\n+694,world\n+695,world\n+696,world\n+697,world\n+698,world\n+699,world\n+700,world\n+701,world\n+702,world\n+703,world\n+704,world\n+705,world\n+706,world\n+707,world\n+708,world\n+709,world\n+710,world\n+711,world\n+712,world\n+713,world\n+714,world\n+715,world\n+716,world\n+717,world\n+718,world\n+719,world\n+720,world\n+721,world\n+722,world\n+723,world\n+724,world\n+725,world\n+726,world\n+727,world\n+728,world\n+729,world\n+730,world\n+731,world\n+732,world\n+733,world\n+734,world\n+735,world\n+736,world\n+737,world\n+738,world\n+739,world\n+740,world\n+741,world\n+742,world\n+743,world\n+744,world\n+745,world\n+746,world\n+747,world\n+748,world\n+749,world\n+750,world\n+751,world\n+752,world\n+753,world\n+754,world\n+755,world\n+756,world\n+757,world\n+758,world\n+759,world\n+760,world\n+761,world\n+762,world\n+763,world\n+764,world\n+765,world\n+766,world\n+767,world\n+768,world\n+769,world\n+770,world\n+771,world\n+772,world\n+773,world\n+774,world\n+775,world\n+776,world\n+777,world\n+778,world\n+779,world\n+780,world\n+781,world\n+782,world\n+783,world\n+784,world\n+785,world\n+786,world\n+787,world\n+788,world\n+789,world\n+790,world\n+791,world\n+792,world\n+793,world\n+794,world\n+795,world\n+796,world\n+797,world\n+798,world\n+799,world\n+800,world\n+801,world\n+802,world\n+803,world\n+804,world\n+805,world\n+806,world\n+807,world\n+808,world\n+809,world\n+810,world\n+811,world\n+812,world\n+813,world\n+814,world\n+815,world\n+816,world\n+817,world\n+818,world\n+819,world\n+820,world\n+821,world\n+822,world\n+823,world\n+824,world\n+825,world\n+826,world\n+827,world\n+828,world\n+829,world\n+830,world\n+831,world\n+832,world\n+833,world\n+834,world\n+835,world\n+836,world\n+837,world\n+838,world\n+839,world\n+840,world\n+841,world\n+842,world\n+843,world\n+844,world\n+845,world\n+846,world\n+847,world\n+848,world\n+849,world\n+850,world\n+851,world\n+852,world\n+853,world\n+854,world\n+855,world\n+856,world\n+857,world\n+858,world\n+859,world\n+860,world\n+861,world\n+862,world\n+863,world\n+864,world\n+865,world\n+866,world\n+867,world\n+868,world\n+869,world\n+870,world\n+871,world\n+872,world\n+873,world\n+874,world\n+875,world\n+876,world\n+877,world\n+878,world\n+879,world\n+880,world\n+881,world\n+882,world\n+883,world\n+884,world\n+885,world\n+886,world\n+887,world\n+888,world\n+889,world\n+890,world\n+891,world\n+892,world\n+893,world\n+894,world\n+895,world\n+896,world\n+897,world\n+898,world\n+899,world\n+900,world\n+901,world\n+902,world\n+903,world\n+904,world\n+905,world\n+906,world\n+907,world\n+908,world\n+909,world\n+910,world\n+911,world\n+912,world\n+913,world\n+914,world\n+915,world\n+916,world\n+917,world\n+918,world\n+919,world\n+920,world\n+921,world\n+922,world\n+923,world\n+924,world\n+925,world\n+926,world\n+927,world\n+928,world\n+929,world\n+930,world\n+931,world\n+932,world\n+933,world\n+934,world\n+935,world\n+936,world\n+937,world\n+938,world\n+939,world\n+940,world\n+941,world\n+942,world\n+943,world\n+944,world\n+945,world\n+946,world\n+947,world\n+948,world\n+949,world\n+950,world\n+951,world\n+952,world\n+953,world\n+954,world\n+955,world\n+956,world\n+957,world\n+958,world\n+959,world\n+960,world\n+961,world\n+962,world\n+963,world\n+964,world\n+965,world\n+966,world\n+967,world\n+968,world\n+969,world\n+970,world\n+971,world\n+972,world\n+973,world\n+974,world\n+975,world\n+976,world\n+977,world\n+978,world\n+979,world\n+980,world\n+981,world\n+982,world\n+983,world\n+984,world\n+985,world\n+986,world\n+987,world\n+988,world\n+989,world\n+990,world\n+991,world\n+992,world\n+993,world\n+994,world\n+995,world\n+996,world\n+997,world\n+998,world\n+999,world\n+1000,world\n+1001,world\n+1002,world\n+1003,world\n+1004,world\n+1005,world\n+1006,world\n+1007,world\n+1008,world\n+1009,world\n+1010,world\n+1011,world\n+1012,world\n+1013,world\n+1014,world\n+1015,world\n+1016,world\n+1017,world\n+1018,world\n+1019,world\n+1020,world\n+1021,world\n+1022,world\n+1023,world\n+1024,world\n+1025,world\n+1026,world\n+1027,world\n+1028,world\n+1029,world\n+1030,world\n+1031,world\n+1032,world\n+1033,world\n+1034,world\n+1035,world\n+1036,world\n+1037,world\n+1038,world\n+1039,world\n+1040,world\n+1041,world\n+1042,world\n+1043,world\n+1044,world\n+1045,world\n+1046,world\n+1047,world\n+1048,world\n+1049,world\n+1050,world\n+1051,world\n+1052,world\n+1053,world\n+1054,world\n+1055,world\n+1056,world\n+1057,world\n+1058,world\n+1059,world\n+1060,world\n+1061,world\n+1062,world\n+1063,world\n+1064,world\n+1065,world\n+1066,world\n+1067,world\n+1068,world\n+1069,world\n+1070,world\n+1071,world\n+1072,world\n+1073,world\n+1074,world\n+1075,world\n+1076,world\n+1077,world\n+1078,world\n+1079,world\n+1080,world\n+1081,world\n+1082,world\n+1083,world\n+1084,world\n+1085,world\n+1086,world\n+1087,world\n+1088,world\n+1089,world\n+1090,world\n+1091,world\n+1092,world\n+1093,world\n+1094,world\n+1095,world\n+1096,world\n+1097,world\n+1098,world\n+1099,world\n+1100,world\n+1101,world\n+1102,world\n+1103,world\n+1104,world\n+1105,world\n+1106,world\n+1107,world\n+1108,world\n+1109,world\n+1110,world\n+1111,world\n+1112,world\n+1113,world\n+1114,world\n+1115,world\n+1116,world\n+1117,world\n+1118,world\n+1119,world\n+1120,world\n+1121,world\n+1122,world\n+1123,world\n+1124,world\n+1125,world\n+1126,world\n+1127,world\n+1128,world\n+1129,world\n+1130,world\n+1131,world\n+1132,world\n+1133,world\n+1134,world\n+1135,world\n+1136,world\n+1137,world\n+1138,world\n+1139,world\n+1140,world\n+1141,world\n+1142,world\n+1143,world\n+1144,world\n+1145,world\n+1146,world\n+1147,world\n+1148,world\n+1149,world\n+1150,world\n+1151,world\n+1152,world\n+1153,world\n+1154,world\n+1155,world\n+1156,world\n+1157,world\n+1158,world\n+1159,world\n+1160,world\n+1161,world\n+1162,world\n+1163,world\n+1164,world\n+1165,world\n+1166,world\n+1167,world\n+1168,world\n+1169,world\n+1170,world\n+1171,world\n+1172,world\n+1173,world\n+1174,world\n+1175,world\n+1176,world\n+1177,world\n+1178,world\n+1179,world\n+1180,world\n+1181,world\n+1182,world\n+1183,world\n+1184,world\n+1185,world\n+1186,world\n+1187,world\n+1188,world\n+1189,world\n+1190,world\n+1191,world\n+1192,world\n+1193,world\n+1194,world\n+1195,world\n+1196,world\n+1197,world\n+1198,world\n+1199,world\n+1200,world\n+1201,world\n+1202,world\n+1203,world\n+1204,world\n+1205,world\n+1206,world\n+1207,world\n+1208,world\n+1209,world\n+1210,world\n+1211,world\n+1212,world\n+1213,world\n+1214,world\n+1215,world\n+1216,world\n+1217,world\n+1218,world\n+1219,world\n+1220,world\n+1221,world\n+1222,world\n+1223,world\n+1224,world\n+1225,world\n+1226,world\n+1227,world\n+1228,world\n+1229,world\n+1230,world\n+1231,world\n+1232,world\n+1233,world\n+1234,world\n+1235,world\n+1236,world\n+1237,world\n+1238,world\n+1239,world\n+1240,world\n+1241,world\n+1242,world\n+1243,world\n+1244,world\n+1245,world\n+1246,world\n+1247,world\n+1248,world\n+1249,world\n+1250,world\n+1251,world\n+1252,world\n+1253,world\n+1254,world\n+1255,world\n+1256,world\n+1257,world\n+1258,world\n+1259,world\n+1260,world\n+1261,world\n+1262,world\n+1263,world\n+1264,world\n+1265,world\n+1266,world\n+1267,world\n+1268,world\n+1269,world\n+1270,world\n+1271,world\n+1272,world\n+1273,world\n+1274,world\n+1275,world\n+1276,world\n+1277,world\n+1278,world\n+1279,world\n+1280,world\n+1281,world\n+1282,world\n+1283,world\n+1284,world\n+1285,world\n+1286,world\n+1287,world\n+1288,world\n+1289,world\n+1290,world\n+1291,world\n+1292,world\n+1293,world\n+1294,world\n+1295,world\n+1296,world\n+1297,world\n+1298,world\n+1299,world\n+1300,world\n+1301,world\n+1302,world\n+1303,world\n+1304,world\n+1305,world\n+1306,world\n+1307,world\n+1308,world\n+1309,world\n+1310,world\n+1311,world\n+1312,world\n+1313,world\n+1314,world\n+1315,world\n+1316,world\n+1317,world\n+1318,world\n+1319,world\n+1320,world\n+1321,world\n+1322,world\n+1323,world\n+1324,world\n+1325,world\n+1326,world\n+1327,world\n+1328,world\n+1329,world\n+1330,world\n+1331,world\n+1332,world\n+1333,world\n+1334,world\n+1335,world\n+1336,world\n+1337,world\n+1338,world\n+1339,world\n+1340,world\n+1341,world\n+1342,world\n+1343,world\n+1344,world\n+1345,world\n+1346,world\n+1347,world\n+1348,world\n+1349,world\n+1350,world\n+1351,world\n+1352,world\n+1353,world\n+1354,world\n+1355,world\n+1356,world\n+1357,world\n+1358,world\n+1359,world\n+1360,world\n+1361,world\n+1362,world\n+1363,world\n+1364,world\n+1365,world\n+1366,world\n+1367,world\n+1368,world\n+1369,world\n+1370,world\n+1371,world\n+1372,world\n+1373,world\n+1374,world\n+1375,world\n+1376,world\n+1377,world\n+1378,world\n+1379,world\n+1380,world\n+1381,world\n+1382,world\n+1383,world\n+1384,world\n+1385,world\n+1386,world\n+1387,world\n+1388,world\n+1389,world\n+1390,world\n+1391,world\n+1392,world\n+1393,world\n+1394,world\n+1395,world\n+1396,world\n+1397,world\n+1398,world\n+1399,world\n+1400,world\n+1401,world\n+1402,world\n+1403,world\n+1404,world\n+1405,world\n+1406,world\n+1407,world\n+1408,world\n+1409,world\n+1410,world\n+1411,world\n+1412,world\n+1413,world\n+1414,world\n+1415,world\n+1416,world\n+1417,world\n+1418,world\n+1419,world\n+1420,world\n+1421,world\n+1422,world\n+1423,world\n+1424,world\n+1425,world\n+1426,world\n+1427,world\n+1428,world\n+1429,world\n+1430,world\n+1431,world\n+1432,world\n+1433,world\n+1434,world\n+1435,world\n+1436,world\n+1437,world\n+1438,world\n+1439,world\n+1440,world\n+1441,world\n+1442,world\n+1443,world\n+1444,world\n+1445,world\n+1446,world\n+1447,world\n+1448,world\n+1449,world\n+1450,world\n+1451,world\n+1452,world\n+1453,world\n+1454,world\n+1455,world\n+1456,world\n+1457,world\n+1458,world\n+1459,world\n+1460,world\n+1461,world\n+1462,world\n+1463,world\n+1464,world\n+1465,world\n+1466,world\n+1467,world\n+1468,world\n+1469,world\n+1470,world\n+1471,world\n+1472,world\n+1473,world\n+1474,world\n+1475,world\n+1476,world\n+1477,world\n+1478,world\n+1479,world\n+1480,world\n+1481,world\n+1482,world\n+1483,world\n+1484,world\n+1485,world\n+1486,world\n+1487,world\n+1488,world\n+1489,world\n+1490,world\n+1491,world\n+1492,world\n+1493,world\n+1494,world\n+1495,world\n+1496,world\n+1497,world\n+1498,world\n+1499,world\n+1500,world\n+1501,world\n+1502,world\n+1503,world\n+1504,world\n+1505,world\n+1506,world\n+1507,world\n+1508,world\n+1509,world\n+1510,world\n+1511,world\n+1512,world\n+1513,world\n+1514,world\n+1515,world\n+1516,world\n+1517,world\n+1518,world\n+1519,world\n+1520,world\n+1521,world\n+1522,world\n+1523,world\n+1524,world\n+1525,world\n+1526,world\n+1527,world\n+1528,world\n+1529,world\n+1530,world\n+1531,world\n+1532,world\n+1533,world\n+1534,world\n+1535,world\n+1536,world\n+1537,world\n+1538,world\n+1539,world\n+1540,world\n+1541,world\n+1542,world\n+1543,world\n+1544,world\n+1545,world\n+1546,world\n+1547,world\n+1548,world\n+1549,world\n+1550,world\n+1551,world\n+1552,world\n+1553,world\n+1554,world\n+1555,world\n+1556,world\n+1557,world\n+1558,world\n+1559,world\n+1560,world\n+1561,world\n+1562,world\n+1563,world\n+1564,world\n+1565,world\n+1566,world\n+1567,world\n+1568,world\n+1569,world\n+1570,world\n+1571,world\n+1572,world\n+1573,world\n+1574,world\n+1575,world\n+1576,world\n+1577,world\n+1578,world\n+1579,world\n+1580,world\n+1581,world\n+1582,world\n+1583,world\n+1584,world\n+1585,world\n+1586,world\n+1587,world\n+1588,world\n+1589,world\n+1590,world\n+1591,world\n+1592,world\n+1593,world\n+1594,world\n+1595,world\n+1596,world\n+1597,world\n+1598,world\n+1599,world\n+1600,world\n+1601,world\n+1602,world\n+1603,world\n+1604,world\n+1605,world\n+1606,world\n+1607,world\n+1608,world\n+1609,world\n+1610,world\n+1611,world\n+1612,world\n+1613,world\n+1614,world\n+1615,world\n+1616,world\n+1617,world\n+1618,world\n+1619,world\n+1620,world\n+1621,world\n+1622,world\n+1623,world\n+1624,world\n+1625,world\n+1626,world\n+1627,world\n+1628,world\n+1629,world\n+1630,world\n+1631,world\n+1632,world\n+1633,world\n+1634,world\n+1635,world\n+1636,world\n+1637,world\n+1638,world\n+1639,world\n+1640,world\n+1641,world\n+1642,world\n+1643,world\n+1644,world\n+1645,world\n+1646,world\n+1647,world\n+1648,world\n+1649,world\n+1650,world\n+1651,world\n+1652,world\n+1653,world\n+1654,world\n+1655,world\n+1656,world\n+1657,world\n+1658,world\n+1659,world\n+1660,world\n+1661,world\n+1662,world\n+1663,world\n+1664,world\n+1665,world\n+1666,world\n+1667,world\n+1668,world\n+1669,world\n+1670,world\n+1671,world\n+1672,world\n+1673,world\n+1674,world\n+1675,world\n+1676,world\n+1677,world\n+1678,world\n+1679,world\n+1680,world\n+1681,world\n+1682,world\n+1683,world\n+1684,world\n+1685,world\n+1686,world\n+1687,world\n+1688,world\n+1689,world\n+1690,world\n+1691,world\n+1692,world\n+1693,world\n+1694,world\n+1695,world\n+1696,world\n+1697,world\n+1698,world\n+1699,world\n+1700,world\n+1701,world\n+1702,world\n+1703,world\n+1704,world\n+1705,world\n+1706,world\n+1707,world\n+1708,world\n+1709,world\n+1710,world\n+1711,world\n+1712,world\n+1713,world\n+1714,world\n+1715,world\n+1716,world\n+1717,world\n+1718,world\n+1719,world\n+1720,world\n+1721,world\n+1722,world\n+1723,world\n+1724,world\n+1725,world\n+1726,world\n+1727,world\n+1728,world\n+1729,world\n+1730,world\n+1731,world\n+1732,world\n+1733,world\n+1734,world\n+1735,world\n+1736,world\n+1737,world\n+1738,world\n+1739,world\n+1740,world\n+1741,world\n+1742,world\n+1743,world\n+1744,world\n+1745,world\n+1746,world\n+1747,world\n+1748,world\n+1749,world\n+1750,world\n+1751,world\n+1752,world\n+1753,world\n+1754,world\n+1755,world\n+1756,world\n+1757,world\n+1758,world\n+1759,world\n+1760,world\n+1761,world\n+1762,world\n+1763,world\n+1764,world\n+1765,world\n+1766,world\n+1767,world\n+1768,world\n+1769,world\n+1770,world\n+1771,world\n+1772,world\n+1773,world\n+1774,world\n+1775,world\n+1776,world\n+1777,world\n+1778,world\n+1779,world\n+1780,world\n+1781,world\n+1782,world\n+1783,world\n+1784,world\n+1785,world\n+1786,world\n+1787,world\n+1788,world\n+1789,world\n+1790,world\n+1791,world\n+1792,world\n+1793,world\n+1794,world\n+1795,world\n+1796,world\n+1797,world\n+1798,world\n+1799,world\n+1800,world\n+1801,world\n+1802,world\n+1803,world\n+1804,world\n+1805,world\n+1806,world\n+1807,world\n+1808,world\n+1809,world\n+1810,world\n+1811,world\n+1812,world\n+1813,world\n+1814,world\n+1815,world\n+1816,world\n+1817,world\n+1818,world\n+1819,world\n+1820,world\n+1821,world\n+1822,world\n+1823,world\n+1824,world\n+1825,world\n+1826,world\n+1827,world\n+1828,world\n+1829,world\n+1830,world\n+1831,world\n+1832,world\n+1833,world\n+1834,world\n+1835,world\n+1836,world\n+1837,world\n+1838,world\n+1839,world\n+1840,world\n+1841,world\n+1842,world\n+1843,world\n+1844,world\n+1845,world\n+1846,world\n+1847,world\n+1848,world\n+1849,world\n+1850,world\n+1851,world\n+1852,world\n+1853,world\n+1854,world\n+1855,world\n+1856,world\n+1857,world\n+1858,world\n+1859,world\n+1860,world\n+1861,world\n+1862,world\n+1863,world\n+1864,world\n+1865,world\n+1866,world\n+1867,world\n+1868,world\n+1869,world\n+1870,world\n+1871,world\n+1872,world\n+1873,world\n+1874,world\n+1875,world\n+1876,world\n+1877,world\n+1878,world\n+1879,world\n+1880,world\n+1881,world\n+1882,world\n+1883,world\n+1884,world\n+1885,world\n+1886,world\n+1887,world\n+1888,world\n+1889,world\n+1890,world\n+1891,world\n+1892,world\n+1893,world\n+1894,world\n+1895,world\n+1896,world\n+1897,world\n+1898,world\n+1899,world\n+1900,world\n+1901,world\n+1902,world\n+1903,world\n+1904,world\n+1905,world\n+1906,world\n+1907,world\n+1908,world\n+1909,world\n+1910,world\n+1911,world\n+1912,world\n+1913,world\n+1914,world\n+1915,world\n+1916,world\n+1917,world\n+1918,world\n+1919,world\n+1920,world\n+1921,world\n+1922,world\n+1923,world\n+1924,world\n+1925,world\n+1926,world\n+1927,world\n+1928,world\n+1929,world\n+1930,world\n+1931,world\n+1932,world\n+1933,world\n+1934,world\n+1935,world\n+1936,world\n+1937,world\n+1938,world\n+1939,world\n+1940,world\n+1941,world\n+1942,world\n+1943,world\n+1944,world\n+1945,world\n+1946,world\n+1947,world\n+1948,world\n+1949,world\n+1950,world\n+1951,world\n+1952,world\n+1953,world\n+1954,world\n+1955,world\n+1956,world\n+1957,world\n+1958,world\n+1959,world\n+1960,world\n+1961,world\n+1962,world\n+1963,world\n+1964,world\n+1965,world\n+1966,world\n+1967,world\n+1968,world\n+1969,world\n+1970,world\n+1971,world\n+1972,world\n+1973,world\n+1974,world\n+1975,world\n+1976,world\n+1977,world\n+1978,world\n+1979,world\n+1980,world\n+1981,world\n+1982,world\n+1983,world\n+1984,world\n+1985,world\n+1986,world\n+1987,world\n+1988,world\n+1989,world\n+1990,world\n+1991,world\n+1992,world\n+1993,world\n+1994,world\n+1995,world\n+1996,world\n+1997,world\n+1998,world\n+1999,world\n+2000,world\n+2001,world\n+2002,world\n+2003,world\n+2004,world\n+2005,world\n+2006,world\n+2007,world\n+2008,world\n+2009,world\n+2010,world\n+2011,world\n+2012,world\n+2013,world\n+2014,world\n+2015,world\n+2016,world\n+2017,world\n+2018,world\n+2019,world\n+2020,world\n+2021,world\n+2022,world\n+2023,world\n+2024,world\n+2025,world\n+2026,world\n+2027,world\n+2028,world\n+2029,world\n+2030,world\n+2031,world\n+2032,world\n+2033,world\n+2034,world\n+2035,world\n+2036,world\n+2037,world\n+2038,world\n+2039,world\n+2040,world\n+2041,world\n+2042,world\n+2043,world\n+2044,world\n+2045,world\n+2046,world\n+2047,world\n+2048,world\n+2049,world\n+2050,world\n+2051,world\n+2052,world\n+2053,world\n+2054,world\n+2055,world\n+2056,world\n+2057,world\n+2058,world\n+2059,world\n+2060,world\n+2061,world\n+2062,world\n+2063,world\n+2064,world\n+2065,world\n+2066,world\n+2067,world\n+2068,world\n+2069,world\n+2070,world\n+2071,world\n+2072,world\n+2073,world\n+2074,world\n+2075,world\n+2076,world\n+2077,world\n+2078,world\n+2079,world\n+2080,world\n+2081,world\n+2082,world\n+2083,world\n+2084,world\n+2085,world\n+2086,world\n+2087,world\n+2088,world\n+2089,world\n+2090,world\n+2091,world\n+2092,world\n+2093,world\n+2094,world\n+2095,world\n+2096,world\n+2097,world\n+2098,world\n+2099,world\n+2100,world\n+2101,world\n+2102,world\n+2103,world\n+2104,world\n+2105,world\n+2106,world\n+2107,world\n+2108,world\n+2109,world\n+2110,world\n+2111,world\n+2112,world\n+2113,world\n+2114,world\n+2115,world\n+2116,world\n+2117,world\n+2118,world\n+2119,world\n+2120,world\n+2121,world\n+2122,world\n+2123,world\n+2124,world\n+2125,world\n+2126,world\n+2127,world\n+2128,world\n+2129,world\n+2130,world\n+2131,world\n+2132,world\n+2133,world\n+2134,world\n+2135,world\n+2136,world\n+2137,world\n+2138,world\n+2139,world\n+2140,world\n+2141,world\n+2142,world\n+2143,world\n+2144,world\n+2145,world\n+2146,world\n+2147,world\n+2148,world\n+2149,world\n+2150,world\n+2151,world\n+2152,world\n+2153,world\n+2154,world\n+2155,world\n+2156,world\n+2157,world\n+2158,world\n+2159,world\n+2160,world\n+2161,world\n+2162,world\n+2163,world\n+2164,world\n+2165,world\n+2166,world\n+2167,world\n+2168,world\n+2169,world\n+2170,world\n+2171,world\n+2172,world\n+2173,world\n+2174,world\n+2175,world\n+2176,world\n+2177,world\n+2178,world\n+2179,world\n+2180,world\n+2181,world\n+2182,world\n+2183,world\n+2184,world\n+2185,world\n+2186,world\n+2187,world\n+2188,world\n+2189,world\n+2190,world\n+2191,world\n+2192,world\n+2193,world\n+2194,world\n+2195,world\n+2196,world\n+2197,world\n+2198,world\n+2199,world\n+2200,world\n+2201,world\n+2202,world\n+2203,world\n+2204,world\n+2205,world\n+2206,world\n+2207,world\n+2208,world\n+2209,world\n+2210,world\n+2211,world\n+2212,world\n+2213,world\n+2214,world\n+2215,world\n+2216,world\n+2217,world\n+2218,world\n+2219,world\n+2220,world\n+2221,world\n+2222,world\n+2223,world\n+2224,world\n+2225,world\n+2226,world\n+2227,world\n+2228,world\n+2229,world\n+2230,world\n+2231,world\n+2232,world\n+2233,world\n+2234,world\n+2235,world\n+2236,world\n+2237,world\n+2238,world\n+2239,world\n+2240,world\n+2241,world\n+2242,world\n+2243,world\n+2244,world\n+2245,world\n+2246,world\n+2247,world\n+2248,world\n+2249,world\n+2250,world\n+2251,world\n+2252,world\n+2253,world\n+2254,world\n+2255,world\n+2256,world\n+2257,world\n+2258,world\n+2259,world\n+2260,world\n+2261,world\n+2262,world\n+2263,world\n+2264,world\n+2265,world\n+2266,world\n+2267,world\n+2268,world\n+2269,world\n+2270,world\n+2271,world\n+2272,world\n+2273,world\n+2274,world\n+2275,world\n+2276,world\n+2277,world\n+2278,world\n+2279,world\n+2280,world\n+2281,world\n+2282,world\n+2283,world\n+2284,world\n+2285,world\n+2286,world\n+2287,world\n+2288,world\n+2289,world\n+2290,world\n+2291,world\n+2292,world\n+2293,world\n+2294,world\n+2295,world\n+2296,world\n+2297,world\n+2298,world\n+2299,world\n+2300,world\n+2301,world\n+2302,world\n+2303,world\n+2304,world\n+2305,world\n+2306,world\n+2307,world\n+2308,world\n+2309,world\n+2310,world\n+2311,world\n+2312,world\n+2313,world\n+2314,world\n+2315,world\n+2316,world\n+2317,world\n+2318,world\n+2319,world\n+2320,world\n+2321,world\n+2322,world\n+2323,world\n+2324,world\n+2325,world\n+2326,world\n+2327,world\n+2328,world\n+2329,world\n+2330,world\n+2331,world\n+2332,world\n+2333,world\n+2334,world\n+2335,world\n+2336,world\n+2337,world\n+2338,world\n+2339,world\n+2340,world\n+2341,world\n+2342,world\n+2343,world\n+2344,world\n+2345,world\n+2346,world\n+2347,world\n+2348,world\n+2349,world\n+2350,world\n+2351,world\n+2352,world\n+2353,world\n+2354,world\n+2355,world\n+2356,world\n+2357,world\n+2358,world\n+2359,world\n+2360,world\n+2361,world\n+2362,world\n+2363,world\n+2364,world\n+2365,world\n+2366,world\n+2367,world\n+2368,world\n+2369,world\n+2370,world\n+2371,world\n+2372,world\n+2373,world\n+2374,world\n+2375,world\n+2376,world\n+2377,world\n+2378,world\n+2379,world\n+2380,world\n+2381,world\n+2382,world\n+2383,world\n+2384,world\n+2385,world\n+2386,world\n+2387,world\n+2388,world\n+2389,world\n+2390,world\n+2391,world\n+2392,world\n+2393,world\n+2394,world\n+2395,world\n+2396,world\n+2397,world\n+2398,world\n+2399,world\n+2400,world\n+2401,world\n+2402,world\n+2403,world\n+2404,world\n+2405,world\n+2406,world\n+2407,world\n+2408,world\n+2409,world\n+2410,world\n+2411,world\n+2412,world\n+2413,world\n+2414,world\n+2415,world\n+2416,world\n+2417,world\n+2418,world\n+2419,world\n+2420,world\n+2421,world\n+2422,world\n+2423,world\n+2424,world\n+2425,world\n+2426,world\n+2427,world\n+2428,world\n+2429,world\n+2430,world\n+2431,world\n+2432,world\n+2433,world\n+2434,world\n+2435,world\n+2436,world\n+2437,world\n+2438,world\n+2439,world\n+2440,world\n+2441,world\n+2442,world\n+2443,world\n+2444,world\n+2445,world\n+2446,world\n+2447,world\n+2448,world\n+2449,world\n+2450,world\n+2451,world\n+2452,world\n+2453,world\n+2454,world\n+2455,world\n+2456,world\n+2457,world\n+2458,world\n+2459,world\n+2460,world\n+2461,world\n+2462,world\n+2463,world\n+2464,world\n+2465,world\n+2466,world\n+2467,world\n+2468,world\n+2469,world\n+2470,world\n+2471,world\n+2472,world\n+2473,world\n+2474,world\n+2475,world\n+2476,world\n+2477,world\n+2478,world\n+2479,world\n+2480,world\n+2481,world\n+2482,world\n+2483,world\n+2484,world\n+2485,world\n+2486,world\n+2487,world\n+2488,world\n+2489,world\n+2490,world\n+2491,world\n+2492,world\n+2493,world\n+2494,world\n+2495,world\n+2496,world\n+2497,world\n+2498,world\n+2499,world\n+2500,world\n+2501,world\n+2502,world\n+2503,world\n+2504,world\n+2505,world\n+2506,world\n+2507,world\n+2508,world\n+2509,world\n+2510,world\n+2511,world\n+2512,world\n+2513,world\n+2514,world\n+2515,world\n+2516,world\n+2517,world\n+2518,world\n+2519,world\n+2520,world\n+2521,world\n+2522,world\n+2523,world\n+2524,world\n+2525,world\n+2526,world\n+2527,world\n+2528,world\n+2529,world\n+2530,world\n+2531,world\n+2532,world\n+2533,world\n+2534,world\n+2535,world\n+2536,world\n+2537,world\n+2538,world\n+2539,world\n+2540,world\n+2541,world\n+2542,world\n+2543,world\n+2544,world\n+2545,world\n+2546,world\n+2547,world\n+2548,world\n+2549,world\n+2550,world\n+2551,world\n+2552,world\n+2553,world\n+2554,world\n+2555,world\n+2556,world\n+2557,world\n+2558,world\n+2559,world\n+2560,world\n+2561,world\n+2562,world\n+2563,world\n+2564,world\n+2565,world\n+2566,world\n+2567,world\n+2568,world\n+2569,world\n+2570,world\n+2571,world\n+2572,world\n+2573,world\n+2574,world\n+2575,world\n+2576,world\n+2577,world\n+2578,world\n+2579,world\n+2580,world\n+2581,world\n+2582,world\n+2583,world\n+2584,world\n+2585,world\n+2586,world\n+2587,world\n+2588,world\n+2589,world\n+2590,world\n+2591,world\n+2592,world\n+2593,world\n+2594,world\n+2595,world\n+2596,world\n+2597,world\n+2598,world\n+2599,world\n+2600,world\n+2601,world\n+2602,world\n+2603,world\n+2604,world\n+2605,world\n+2606,world\n+2607,world\n+2608,world\n+2609,world\n+2610,world\n+2611,world\n+2612,world\n+2613,world\n+2614,world\n+2615,world\n+2616,world\n+2617,world\n+2618,world\n+2619,world\n+2620,world\n+2621,world\n+2622,world\n+2623,world\n+2624,world\n+2625,world\n+2626,world\n+2627,world\n+2628,world\n+2629,world\n+2630,world\n+2631,world\n+2632,world\n+2633,world\n+2634,world\n+2635,world\n+2636,world\n+2637,world\n+2638,world\n+2639,world\n+2640,world\n+2641,world\n+2642,world\n+2643,world\n+2644,world\n+2645,world\n+2646,world\n+2647,world\n+2648,world\n+2649,world\n+2650,world\n+2651,world\n+2652,world\n+2653,world\n+2654,world\n+2655,world\n+2656,world\n+2657,world\n+2658,world\n+2659,world\n+2660,world\n+2661,world\n+2662,world\n+2663,world\n+2664,world\n+2665,world\n+2666,world\n+2667,world\n+2668,world\n+2669,world\n+2670,world\n+2671,world\n+2672,world\n+2673,world\n+2674,world\n+2675,world\n+2676,world\n+2677,world\n+2678,world\n+2679,world\n+2680,world\n+2681,world\n+2682,world\n+2683,world\n+2684,world\n+2685,world\n+2686,world\n+2687,world\n+2688,world\n+2689,world\n+2690,world\n+2691,world\n+2692,world\n+2693,world\n+2694,world\n+2695,world\n+2696,world\n+2697,world\n+2698,world\n+2699,world\n+2700,world\n+2701,world\n+2702,world\n+2703,world\n+2704,world\n+2705,world\n+2706,world\n+2707,world\n+2708,world\n+2709,world\n+2710,world\n+2711,world\n+2712,world\n+2713,world\n+2714,world\n+2715,world\n+2716,world\n+2717,world\n+2718,world\n+2719,world\n+2720,world\n+2721,world\n+2722,world\n+2723,world\n+2724,world\n+2725,world\n+2726,world\n+2727,world\n+2728,world\n+2729,world\n+2730,world\n+2731,world\n+2732,world\n+2733,world\n+2734,world\n+2735,world\n+2736,world\n+2737,world\n+2738,world\n+2739,world\n+2740,world\n+2741,world\n+2742,world\n+2743,world\n+2744,world\n+2745,world\n+2746,world\n+2747,world\n+2748,world\n+2749,world\n+2750,world\n+2751,world\n+2752,world\n+2753,world\n+2754,world\n+2755,world\n+2756,world\n+2757,world\n+2758,world\n+2759,world\n+2760,world\n+2761,world\n+2762,world\n+2763,world\n+2764,world\n+2765,world\n+2766,world\n+2767,world\n+2768,world\n+2769,world\n+2770,world\n+2771,world\n+2772,world\n+2773,world\n+2774,world\n+2775,world\n+2776,world\n+2777,world\n+2778,world\n+2779,world\n+2780,world\n+2781,world\n+2782,world\n+2783,world\n+2784,world\n+2785,world\n+2786,world\n+2787,world\n+2788,world\n+2789,world\n+2790,world\n+2791,world\n+2792,world\n+2793,world\n+2794,world\n+2795,world\n+2796,world\n+2797,world\n+2798,world\n+2799,world\n+2800,world\n+2801,world\n+2802,world\n+2803,world\n+2804,world\n+2805,world\n+2806,world\n+2807,world\n+2808,world\n+2809,world\n+2810,world\n+2811,world\n+2812,world\n+2813,world\n+2814,world\n+2815,world\n+2816,world\n+2817,world\n+2818,world\n+2819,world\n+2820,world\n+2821,world\n+2822,world\n+2823,world\n+2824,world\n+2825,world\n+2826,world\n+2827,world\n+2828,world\n+2829,world\n+2830,world\n+2831,world\n+2832,world\n+2833,world\n+2834,world\n+2835,world\n+2836,world\n+2837,world\n+2838,world\n+2839,world\n+2840,world\n+2841,world\n+2842,world\n+2843,world\n+2844,world\n+2845,world\n+2846,world\n+2847,world\n+2848,world\n+2849,world\n+2850,world\n+2851,world\n+2852,world\n+2853,world\n+2854,world\n+2855,world\n+2856,world\n+2857,world\n+2858,world\n+2859,world\n+2860,world\n+2861,world\n+2862,world\n+2863,world\n+2864,world\n+2865,world\n+2866,world\n+2867,world\n+2868,world\n+2869,world\n+2870,world\n+2871,world\n+2872,world\n+2873,world\n+2874,world\n+2875,world\n+2876,world\n+2877,world\n+2878,world\n+2879,world\n+2880,world\n+2881,world\n+2882,world\n+2883,world\n+2884,world\n+2885,world\n+2886,world\n+2887,world\n+2888,world\n+2889,world\n+2890,world\n+2891,world\n+2892,world\n+2893,world\n+2894,world\n+2895,world\n+2896,world\n+2897,world\n+2898,world\n+2899,world\n+2900,world\n+2901,world\n+2902,world\n+2903,world\n+2904,world\n+2905,world\n+2906,world\n+2907,world\n+2908,world\n+2909,world\n+2910,world\n+2911,world\n+2912,world\n+2913,world\n+2914,world\n+2915,world\n+2916,world\n+2917,world\n+2918,world\n+2919,world\n+2920,world\n+2921,world\n+2922,world\n+2923,world\n+2924,world\n+2925,world\n+2926,world\n+2927,world\n+2928,world\n+2929,world\n+2930,world\n+2931,world\n+2932,world\n+2933,world\n+2934,world\n+2935,world\n+2936,world\n+2937,world\n+2938,world\n+2939,world\n+2940,world\n+2941,world\n+2942,world\n+2943,world\n+2944,world\n+2945,world\n+2946,world\n+2947,world\n+2948,world\n+2949,world\n+2950,world\n+2951,world\n+2952,world\n+2953,world\n+2954,world\n+2955,world\n+2956,world\n+2957,world\n+2958,world\n+2959,world\n+2960,world\n+2961,world\n+2962,world\n+2963,world\n+2964,world\n+2965,world\n+2966,world\n+2967,world\n+2968,world\n+2969,world\n+2970,world\n+2971,world\n+2972,world\n+2973,world\n+2974,world\n+2975,world\n+2976,world\n+2977,world\n+2978,world\n+2979,world\n+2980,world\n+2981,world\n+2982,world\n+2983,world\n+2984,world\n+2985,world\n+2986,world\n+2987,world\n+2988,world\n+2989,world\n+2990,world\n+2991,world\n+2992,world\n+2993,world\n+2994,world\n+2995,world\n+2996,world\n+2997,world\n+2998,world\n+2999,world\n+3000,world\n+3001,world\n+3002,world\n+3003,world\n+3004,world\n+3005,world\n+3006,world\n+3007,world\n+3008,world\n+3009,world\n+3010,world\n+3011,world\n+3012,world\n+3013,world\n+3014,world\n+3015,world\n+3016,world\n+3017,world\n+3018,world\n+3019,world\n+3020,world\n+3021,world\n+3022,world\n+3023,world\n+3024,world\n+3025,world\n+3026,world\n+3027,world\n+3028,world\n+3029,world\n+3030,world\n+3031,world\n+3032,world\n+3033,world\n+3034,world\n+3035,world\n+3036,world\n+3037,world\n+3038,world\n+3039,world\n+3040,world\n+3041,world\n+3042,world\n+3043,world\n+3044,world\n+3045,world\n+3046,world\n+3047,world\n+3048,world\n+3049,world\n+3050,world\n+3051,world\n+3052,world\n+3053,world\n+3054,world\n+3055,world\n+3056,world\n+3057,world\n+3058,world\n+3059,world\n+3060,world\n+3061,world\n+3062,world\n+3063,world\n+3064,world\n+3065,world\n+3066,world\n+3067,world\n+3068,world\n+3069,world\n+3070,world\n+3071,world\n+3072,world\n+3073,world\n+3074,world\n+3075,world\n+3076,world\n+3077,world\n+3078,world\n+3079,world\n+3080,world\n+3081,world\n+3082,world\n+3083,world\n+3084,world\n+3085,world\n+3086,world\n+3087,world\n+3088,world\n+3089,world\n+3090,world\n+3091,world\n+3092,world\n+3093,world\n+3094,world\n+3095,world\n+3096,world\n+3097,world\n+3098,world\n+3099,world\n+3100,world\n+3101,world\n+3102,world\n+3103,world\n+3104,world\n+3105,world\n+3106,world\n+3107,world\n+3108,world\n+3109,world\n+3110,world\n+3111,world\n+3112,world\n+3113,world\n+3114,world\n+3115,world\n+3116,world\n+3117,world\n+3118,world\n+3119,world\n+3120,world\n+3121,world\n+3122,world\n+3123,world\n+3124,world\n+3125,world\n+3126,world\n+3127,world\n+3128,world\n+3129,world\n+3130,world\n+3131,world\n+3132,world\n+3133,world\n+3134,world\n+3135,world\n+3136,world\n+3137,world\n+3138,world\n+3139,world\n+3140,world\n+3141,world\n+3142,world\n+3143,world\n+3144,world\n+3145,world\n+3146,world\n+3147,world\n+3148,world\n+3149,world\n+3150,world\n+3151,world\n+3152,world\n+3153,world\n+3154,world\n+3155,world\n+3156,world\n+3157,world\n+3158,world\n+3159,world\n+3160,world\n+3161,world\n+3162,world\n+3163,world\n+3164,world\n+3165,world\n+3166,world\n+3167,world\n+3168,world\n+3169,world\n+3170,world\n+3171,world\n+3172,world\n+3173,world\n+3174,world\n+3175,world\n+3176,world\n+3177,world\n+3178,world\n+3179,world\n+3180,world\n+3181,world\n+3182,world\n+3183,world\n+3184,world\n+3185,world\n+3186,world\n+3187,world\n+3188,world\n+3189,world\n+3190,world\n+3191,world\n+3192,world\n+3193,world\n+3194,world\n+3195,world\n+3196,world\n+3197,world\n+3198,world\n+3199,world\n+3200,world\n+3201,world\n+3202,world\n+3203,world\n+3204,world\n+3205,world\n+3206,world\n+3207,world\n+3208,world\n+3209,world\n+3210,world\n+3211,world\n+3212,world\n+3213,world\n+3214,world\n+3215,world\n+3216,world\n+3217,world\n+3218,world\n+3219,world\n+3220,world\n+3221,world\n+3222,world\n+3223,world\n+3224,world\n+3225,world\n+3226,world\n+3227,world\n+3228,world\n+3229,world\n+3230,world\n+3231,world\n+3232,world\n+3233,world\n+3234,world\n+3235,world\n+3236,world\n+3237,world\n+3238,world\n+3239,world\n+3240,world\n+3241,world\n+3242,world\n+3243,world\n+3244,world\n+3245,world\n+3246,world\n+3247,world\n+3248,world\n+3249,world\n+3250,world\n+3251,world\n+3252,world\n+3253,world\n+3254,world\n+3255,world\n+3256,world\n+3257,world\n+3258,world\n+3259,world\n+3260,world\n+3261,world\n+3262,world\n+3263,world\n+3264,world\n+3265,world\n+3266,world\n+3267,world\n+3268,world\n+3269,world\n+3270,world\n+3271,world\n+3272,world\n+3273,world\n+3274,world\n+3275,world\n+3276,world\n+3277,world\n+3278,world\n+3279,world\n+3280,world\n+3281,world\n+3282,world\n+3283,world\n+3284,world\n+3285,world\n+3286,world\n+3287,world\n+3288,world\n+3289,world\n+3290,world\n+3291,world\n+3292,world\n+3293,world\n+3294,world\n+3295,world\n+3296,world\n+3297,world\n+3298,world\n+3299,world\n+3300,world\n+3301,world\n+3302,world\n+3303,world\n+3304,world\n+3305,world\n+3306,world\n+3307,world\n+3308,world\n+3309,world\n+3310,world\n+3311,world\n+3312,world\n+3313,world\n+3314,world\n+3315,world\n+3316,world\n+3317,world\n+3318,world\n+3319,world\n+3320,world\n+3321,world\n+3322,world\n+3323,world\n+3324,world\n+3325,world\n+3326,world\n+3327,world\n+3328,world\n+3329,world\n+3330,world\n+3331,world\n+3332,world\n+3333,world\n+3334,world\n+3335,world\n+3336,world\n+3337,world\n+3338,world\n+3339,world\n+3340,world\n+3341,world\n+3342,world\n+3343,world\n+3344,world\n+3345,world\n+3346,world\n+3347,world\n+3348,world\n+3349,world\n+3350,world\n+3351,world\n+3352,world\n+3353,world\n+3354,world\n+3355,world\n+3356,world\n+3357,world\n+3358,world\n+3359,world\n+3360,world\n+3361,world\n+3362,world\n+3363,world\n+3364,world\n+3365,world\n+3366,world\n+3367,world\n+3368,world\n+3369,world\n+3370,world\n+3371,world\n+3372,world\n+3373,world\n+3374,world\n+3375,world\n+3376,world\n+3377,world\n+3378,world\n+3379,world\n+3380,world\n+3381,world\n+3382,world\n+3383,world\n+3384,world\n+3385,world\n+3386,world\n+3387,world\n+3388,world\n+3389,world\n+3390,world\n+3391,world\n+3392,world\n+3393,world\n+3394,world\n+3395,world\n+3396,world\n+3397,world\n+3398,world\n+3399,world\n+3400,world\n+3401,world\n+3402,world\n+3403,world\n+3404,world\n+3405,world\n+3406,world\n+3407,world\n+3408,world\n+3409,world\n+3410,world\n+3411,world\n+3412,world\n+3413,world\n+3414,world\n+3415,world\n+3416,world\n+3417,world\n+3418,world\n+3419,world\n+3420,world\n+3421,world\n+3422,world\n+3423,world\n+3424,world\n+3425,world\n+3426,world\n+3427,world\n+3428,world\n+3429,world\n+3430,world\n+3431,world\n+3432,world\n+3433,world\n+3434,world\n+3435,world\n+3436,world\n+3437,world\n+3438,world\n+3439,world\n+3440,world\n+3441,world\n+3442,world\n+3443,world\n+3444,world\n+3445,world\n+3446,world\n+3447,world\n+3448,world\n+3449,world\n+3450,world\n+3451,world\n+3452,world\n+3453,world\n+3454,world\n+3455,world\n+3456,world\n+3457,world\n+3458,world\n+3459,world\n+3460,world\n+3461,world\n+3462,world\n+3463,world\n+3464,world\n+3465,world\n+3466,world\n+3467,world\n+3468,world\n+3469,world\n+3470,world\n+3471,world\n+3472,world\n+3473,world\n+3474,world\n+3475,world\n+3476,world\n+3477,world\n+3478,world\n+3479,world\n+3480,world\n+3481,world\n+3482,world\n+3483,world\n+3484,world\n+3485,world\n+3486,world\n+3487,world\n+3488,world\n+3489,world\n+3490,world\n+3491,world\n+3492,world\n+3493,world\n+3494,world\n+3495,world\n+3496,world\n+3497,world\n+3498,world\n+3499,world\n+3500,world\n+3501,world\n+3502,world\n+3503,world\n+3504,world\n+3505,world\n+3506,world\n+3507,world\n+3508,world\n+3509,world\n+3510,world\n+3511,world\n+3512,world\n+3513,world\n+3514,world\n+3515,world\n+3516,world\n+3517,world\n+3518,world\n+3519,world\n+3520,world\n+3521,world\n+3522,world\n+3523,world\n+3524,world\n+3525,world\n+3526,world\n+3527,world\n+3528,world\n+3529,world\n+3530,world\n+3531,world\n+3532,world\n+3533,world\n+3534,world\n+3535,world\n+3536,world\n+3537,world\n+3538,world\n+3539,world\n+3540,world\n+3541,world\n+3542,world\n+3543,world\n+3544,world\n+3545,world\n+3546,world\n+3547,world\n+3548,world\n+3549,world\n+3550,world\n+3551,world\n+3552,world\n+3553,world\n+3554,world\n+3555,world\n+3556,world\n+3557,world\n+3558,world\n+3559,world\n+3560,world\n+3561,world\n+3562,world\n+3563,world\n+3564,world\n+3565,world\n+3566,world\n+3567,world\n+3568,world\n+3569,world\n+3570,world\n+3571,world\n+3572,world\n+3573,world\n+3574,world\n+3575,world\n+3576,world\n+3577,world\n+3578,world\n+3579,world\n+3580,world\n+3581,world\n+3582,world\n+3583,world\n+3584,world\n+3585,world\n+3586,world\n+3587,world\n+3588,world\n+3589,world\n+3590,world\n+3591,world\n+3592,world\n+3593,world\n+3594,world\n+3595,world\n+3596,world\n+3597,world\n+3598,world\n+3599,world\n+3600,world\n+3601,world\n+3602,world\n+3603,world\n+3604,world\n+3605,world\n+3606,world\n+3607,world\n+3608,world\n+3609,world\n+3610,world\n+3611,world\n+3612,world\n+3613,world\n+3614,world\n+3615,world\n+3616,world\n+3617,world\n+3618,world\n+3619,world\n+3620,world\n+3621,world\n+3622,world\n+3623,world\n+3624,world\n+3625,world\n+3626,world\n+3627,world\n+3628,world\n+3629,world\n+3630,world\n+3631,world\n+3632,world\n+3633,world\n+3634,world\n+3635,world\n+3636,world\n+3637,world\n+3638,world\n+3639,world\n+3640,world\n+3641,world\n+3642,world\n+3643,world\n+3644,world\n+3645,world\n+3646,world\n+3647,world\n+3648,world\n+3649,world\n+3650,world\n+3651,world\n+3652,world\n+3653,world\n+3654,world\n+3655,world\n+3656,world\n+3657,world\n+3658,world\n+3659,world\n+3660,world\n+3661,world\n+3662,world\n+3663,world\n+3664,world\n+3665,world\n+3666,world\n+3667,world\n+3668,world\n+3669,world\n+3670,world\n+3671,world\n+3672,world\n+3673,world\n+3674,world\n+3675,world\n+3676,world\n+3677,world\n+3678,world\n+3679,world\n+3680,world\n+3681,world\n+3682,world\n+3683,world\n+3684,world\n+3685,world\n+3686,world\n+3687,world\n+3688,world\n+3689,world\n+3690,world\n+3691,world\n+3692,world\n+3693,world\n+3694,world\n+3695,world\n+3696,world\n+3697,world\n+3698,world\n+3699,world\n+3700,world\n+3701,world\n+3702,world\n+3703,world\n+3704,world\n+3705,world\n+3706,world\n+3707,world\n+3708,world\n+3709,world\n+3710,world\n+3711,world\n+3712,world\n+3713,world\n+3714,world\n+3715,world\n+3716,world\n+3717,world\n+3718,world\n+3719,world\n+3720,world\n+3721,world\n+3722,world\n+3723,world\n+3724,world\n+3725,world\n+3726,world\n+3727,world\n+3728,world\n+3729,world\n+3730,world\n+3731,world\n+3732,world\n+3733,world\n+3734,world\n+3735,world\n+3736,world\n+3737,world\n+3738,world\n+3739,world\n+3740,world\n+3741,world\n+3742,world\n+3743,world\n+3744,world\n+3745,world\n+3746,world\n+3747,world\n+3748,world\n+3749,world\n+3750,world\n+3751,world\n+3752,world\n+3753,world\n+3754,world\n+3755,world\n+3756,world\n+3757,world\n+3758,world\n+3759,world\n+3760,world\n+3761,world\n+3762,world\n+3763,world\n+3764,world\n+3765,world\n+3766,world\n+3767,world\n+3768,world\n+3769,world\n+3770,world\n+3771,world\n+3772,world\n+3773,world\n+3774,world\n+3775,world\n+3776,world\n+3777,world\n+3778,world\n+3779,world\n+3780,world\n+3781,world\n+3782,world\n+3783,world\n+3784,world\n+3785,world\n+3786,world\n+3787,world\n+3788,world\n+3789,world\n+3790,world\n+3791,world\n+3792,world\n+3793,world\n+3794,world\n+3795,world\n+3796,world\n+3797,world\n+3798,world\n+3799,world\n+3800,world\n+3801,world\n+3802,world\n+3803,world\n+3804,world\n+3805,world\n+3806,world\n+3807,world\n+3808,world\n+3809,world\n+3810,world\n+3811,world\n+3812,world\n+3813,world\n+3814,world\n+3815,world\n+3816,world\n+3817,world\n+3818,world\n+3819,world\n+3820,world\n+3821,world\n+3822,world\n+3823,world\n+3824,world\n+3825,world\n+3826,world\n+3827,world\n+3828,world\n+3829,world\n+3830,world\n+3831,world\n+3832,world\n+3833,world\n+3834,world\n+3835,world\n+3836,world\n+3837,world\n+3838,world\n+3839,world\n+3840,world\n+3841,world\n+3842,world\n+3843,world\n+3844,world\n+3845,world\n+3846,world\n+3847,world\n+3848,world\n+3849,world\n+3850,world\n+3851,world\n+3852,world\n+3853,world\n+3854,world\n+3855,world\n+3856,world\n+3857,world\n+3858,world\n+3859,world\n+3860,world\n+3861,world\n+3862,world\n+3863,world\n+3864,world\n+3865,world\n+3866,world\n+3867,world\n+3868,world\n+3869,world\n+3870,world\n+3871,world\n+3872,world\n+3873,world\n+3874,world\n+3875,world\n+3876,world\n+3877,world\n+3878,world\n+3879,world\n+3880,world\n+3881,world\n+3882,world\n+3883,world\n+3884,world\n+3885,world\n+3886,world\n+3887,world\n+3888,world\n+3889,world\n+3890,world\n+3891,world\n+3892,world\n+3893,world\n+3894,world\n+3895,world\n+3896,world\n+3897,world\n+3898,world\n+3899,world\n+3900,world\n+3901,world\n+3902,world\n+3903,world\n+3904,world\n+3905,world\n+3906,world\n+3907,world\n+3908,world\n+3909,world\n+3910,world\n+3911,world\n+3912,world\n+3913,world\n+3914,world\n+3915,world\n+3916,world\n+3917,world\n+3918,world\n+3919,world\n+3920,world\n+3921,world\n+3922,world\n+3923,world\n+3924,world\n+3925,world\n+3926,world\n+3927,world\n+3928,world\n+3929,world\n+3930,world\n+3931,world\n+3932,world\n+3933,world\n+3934,world\n+3935,world\n+3936,world\n+3937,world\n+3938,world\n+3939,world\n+3940,world\n+3941,world\n+3942,world\n+3943,world\n+3944,world\n+3945,world\n+3946,world\n+3947,world\n+3948,world\n+3949,world\n+3950,world\n+3951,world\n+3952,world\n+3953,world\n+3954,world\n+3955,world\n+3956,world\n+3957,world\n+3958,world\n+3959,world\n+3960,world\n+3961,world\n+3962,world\n+3963,world\n+3964,world\n+3965,world\n+3966,world\n+3967,world\n+3968,world\n+3969,world\n+3970,world\n+3971,world\n+3972,world\n+3973,world\n+3974,world\n+3975,world\n+3976,world\n+3977,world\n+3978,world\n+3979,world\n+3980,world\n+3981,world\n+3982,world\n+3983,world\n+3984,world\n+3985,world\n+3986,world\n+3987,world\n+3988,world\n+3989,world\n+3990,world\n+3991,world\n+3992,world\n+3993,world\n+3994,world\n+3995,world\n+3996,world\n+3997,world\n+3998,world\n+3999,world\n+4000,world\n+4001,world\n+4002,world\n+4003,world\n+4004,world\n+4005,world\n+4006,world\n+4007,world\n+4008,world\n+4009,world\n+4010,world\n+4011,world\n+4012,world\n+4013,world\n+4014,world\n+4015,world\n+4016,world\n+4017,world\n+4018,world\n+4019,world\n+4020,world\n+4021,world\n+4022,world\n+4023,world\n+4024,world\n+4025,world\n+4026,world\n+4027,world\n+4028,world\n+4029,world\n+4030,world\n+4031,world\n+4032,world\n+4033,world\n+4034,world\n+4035,world\n+4036,world\n+4037,world\n+4038,world\n+4039,world\n+4040,world\n+4041,world\n+4042,world\n+4043,world\n+4044,world\n+4045,world\n+4046,world\n+4047,world\n+4048,world\n+4049,world\n+4050,world\n+4051,world\n+4052,world\n+4053,world\n+4054,world\n+4055,world\n+4056,world\n+4057,world\n+4058,world\n+4059,world\n+4060,world\n+4061,world\n+4062,world\n+4063,world\n+4064,world\n+4065,world\n+4066,world\n+4067,world\n+4068,world\n+4069,world\n+4070,world\n+4071,world\n+4072,world\n+4073,world\n+4074,world\n+4075,world\n+4076,world\n+4077,world\n+4078,world\n+4079,world\n+4080,world\n+4081,world\n+4082,world\n+4083,world\n+4084,world\n+4085,world\n+4086,world\n+4087,world\n+4088,world\n+4089,world\n+4090,world\n+4091,world\n+4092,world\n+4093,world\n+4094,world\n+4095,world\n+4096,world\n+4097,world\n+4098,world\n+4099,world\n+4100,world\n+4101,world\n+4102,world\n+4103,world\n+4104,world\n+4105,world\n+4106,world\n+4107,world\n+4108,world\n+4109,world\n+4110,world\n+4111,world\n+4112,world\n+4113,world\n+4114,world\n+4115,world\n+4116,world\n+4117,world\n+4118,world\n+4119,world\n+4120,world\n+4121,world\n+4122,world\n+4123,world\n+4124,world\n+4125,world\n+4126,world\n+4127,world\n+4128,world\n+4129,world\n+4130,world\n+4131,world\n+4132,world\n+4133,world\n+4134,world\n+4135,world\n+4136,world\n+4137,world\n+4138,world\n+4139,world\n+4140,world\n+4141,world\n+4142,world\n+4143,world\n+4144,world\n+4145,world\n+4146,world\n+4147,world\n+4148,world\n+4149,world\n+4150,world\n+4151,world\n+4152,world\n+4153,world\n+4154,world\n+4155,world\n+4156,world\n+4157,world\n+4158,world\n+4159,world\n+4160,world\n+4161,world\n+4162,world\n+4163,world\n+4164,world\n+4165,world\n+4166,world\n+4167,world\n+4168,world\n+4169,world\n+4170,world\n+4171,world\n+4172,world\n+4173,world\n+4174,world\n+4175,world\n+4176,world\n+4177,world\n+4178,world\n+4179,world\n+4180,world\n+4181,world\n+4182,world\n+4183,world\n+4184,world\n+4185,world\n+4186,world\n+4187,world\n+4188,world\n+4189,world\n+4190,world\n+4191,world\n+4192,world\n+4193,world\n+4194,world\n+4195,world\n+4196,world\n+4197,world\n+4198,world\n+4199,world\n+4200,world\n+4201,world\n+4202,world\n+4203,world\n+4204,world\n+4205,world\n+4206,world\n+4207,world\n+4208,world\n+4209,world\n+4210,world\n+4211,world\n+4212,world\n+4213,world\n+4214,world\n+4215,world\n+4216,world\n+4217,world\n+4218,world\n+4219,world\n+4220,world\n+4221,world\n+4222,world\n+4223,world\n+4224,world\n+4225,world\n+4226,world\n+4227,world\n+4228,world\n+4229,world\n+4230,world\n+4231,world\n+4232,world\n+4233,world\n+4234,world\n+4235,world\n+4236,world\n+4237,world\n+4238,world\n+4239,world\n+4240,world\n+4241,world\n+4242,world\n+4243,world\n+4244,world\n+4245,world\n+4246,world\n+4247,world\n+4248,world\n+4249,world\n+4250,world\n+4251,world\n+4252,world\n+4253,world\n+4254,world\n+4255,world\n+4256,world\n+4257,world\n+4258,world\n+4259,world\n+4260,world\n+4261,world\n+4262,world\n+4263,world\n+4264,world\n+4265,world\n+4266,world\n+4267,world\n+4268,world\n+4269,world\n+4270,world\n+4271,world\n+4272,world\n+4273,world\n+4274,world\n+4275,world\n+4276,world\n+4277,world\n+4278,world\n+4279,world\n+4280,world\n+4281,world\n+4282,world\n+4283,world\n+4284,world\n+4285,world\n+4286,world\n+4287,world\n+4288,world\n+4289,world\n+4290,world\n+4291,world\n+4292,world\n+4293,world\n+4294,world\n+4295,world\n+4296,world\n+4297,world\n+4298,world\n+4299,world\n+4300,world\n+4301,world\n+4302,world\n+4303,world\n+4304,world\n+4305,world\n+4306,world\n+4307,world\n+4308,world\n+4309,world\n+4310,world\n+4311,world\n+4312,world\n+4313,world\n+4314,world\n+4315,world\n+4316,world\n+4317,world\n+4318,world\n+4319,world\n+4320,world\n+4321,world\n+4322,world\n+4323,world\n+4324,world\n+4325,world\n+4326,world\n+4327,world\n+4328,world\n+4329,world\n+4330,world\n+4331,world\n+4332,world\n+4333,world\n+4334,world\n+4335,world\n+4336,world\n+4337,world\n+4338,world\n+4339,world\n+4340,world\n+4341,world\n+4342,world\n+4343,world\n+4344,world\n+4345,world\n+4346,world\n+4347,world\n+4348,world\n+4349,world\n+4350,world\n+4351,world\n+4352,world\n+4353,world\n+4354,world\n+4355,world\n+4356,world\n+4357,world\n+4358,world\n+4359,world\n+4360,world\n+4361,world\n+4362,world\n+4363,world\n+4364,world\n+4365,world\n+4366,world\n+4367,world\n+4368,world\n+4369,world\n+4370,world\n+4371,world\n+4372,world\n+4373,world\n+4374,world\n+4375,world\n+4376,world\n+4377,world\n+4378,world\n+4379,world\n+4380,world\n+4381,world\n+4382,world\n+4383,world\n+4384,world\n+4385,world\n+4386,world\n+4387,world\n+4388,world\n+4389,world\n+4390,world\n+4391,world\n+4392,world\n+4393,world\n+4394,world\n+4395,world\n+4396,world\n+4397,world\n+4398,world\n+4399,world\n+4400,world\n+4401,world\n+4402,world\n+4403,world\n+4404,world\n+4405,world\n+4406,world\n+4407,world\n+4408,world\n+4409,world\n+4410,world\n+4411,world\n+4412,world\n+4413,world\n+4414,world\n+4415,world\n+4416,world\n+4417,world\n+4418,world\n+4419,world\n+4420,world\n+4421,world\n+4422,world\n+4423,world\n+4424,world\n+4425,world\n+4426,world\n+4427,world\n+4428,world\n+4429,world\n+4430,world\n+4431,world\n+4432,world\n+4433,world\n+4434,world\n+4435,world\n+4436,world\n+4437,world\n+4438,world\n+4439,world\n+4440,world\n+4441,world\n+4442,world\n+4443,world\n+4444,world\n+4445,world\n+4446,world\n+4447,world\n+4448,world\n+4449,world\n+4450,world\n+4451,world\n+4452,world\n+4453,world\n+4454,world\n+4455,world\n+4456,world\n+4457,world\n+4458,world\n+4459,world\n+4460,world\n+4461,world\n+4462,world\n+4463,world\n+4464,world\n+4465,world\n+4466,world\n+4467,world\n+4468,world\n+4469,world\n+4470,world\n+4471,world\n+4472,world\n+4473,world\n+4474,world\n+4475,world\n+4476,world\n+4477,world\n+4478,world\n+4479,world\n+4480,world\n+4481,world\n+4482,world\n+4483,world\n+4484,world\n+4485,world\n+4486,world\n+4487,world\n+4488,world\n+4489,world\n+4490,world\n+4491,world\n+4492,world\n+4493,world\n+4494,world\n+4495,world\n+4496,world\n+4497,world\n+4498,world\n+4499,world\n+4500,world\n+4501,world\n+4502,world\n+4503,world\n+4504,world\n+4505,world\n+4506,world\n+4507,world\n+4508,world\n+4509,world\n+4510,world\n+4511,world\n+4512,world\n+4513,world\n+4514,world\n+4515,world\n+4516,world\n+4517,world\n+4518,world\n+4519,world\n+4520,world\n+4521,world\n+4522,world\n+4523,world\n+4524,world\n+4525,world\n+4526,world\n+4527,world\n+4528,world\n+4529,world\n+4530,world\n+4531,world\n+4532,world\n+4533,world\n+4534,world\n+4535,world\n+4536,world\n+4537,world\n+4538,world\n+4539,world\n+4540,world\n+4541,world\n+4542,world\n+4543,world\n+4544,world\n+4545,world\n+4546,world\n+4547,world\n+4548,world\n+4549,world\n+4550,world\n+4551,world\n+4552,world\n+4553,world\n+4554,world\n+4555,world\n+4556,world\n+4557,world\n+4558,world\n+4559,world\n+4560,world\n+4561,world\n+4562,world\n+4563,world\n+4564,world\n+4565,world\n+4566,world\n+4567,world\n+4568,world\n+4569,world\n+4570,world\n+4571,world\n+4572,world\n+4573,world\n+4574,world\n+4575,world\n+4576,world\n+4577,world\n+4578,world\n+4579,world\n+4580,world\n+4581,world\n+4582,world\n+4583,world\n+4584,world\n+4585,world\n+4586,world\n+4587,world\n+4588,world\n+4589,world\n+4590,world\n+4591,world\n+4592,world\n+4593,world\n+4594,world\n+4595,world\n+4596,world\n+4597,world\n+4598,world\n+4599,world\n+4600,world\n+4601,world\n+4602,world\n+4603,world\n+4604,world\n+4605,world\n+4606,world\n+4607,world\n+4608,world\n+4609,world\n+4610,world\n+4611,world\n+4612,world\n+4613,world\n+4614,world\n+4615,world\n+4616,world\n+4617,world\n+4618,world\n+4619,world\n+4620,world\n+4621,world\n+4622,world\n+4623,world\n+4624,world\n+4625,world\n+4626,world\n+4627,world\n+4628,world\n+4629,world\n+4630,world\n+4631,world\n+4632,world\n+4633,world\n+4634,world\n+4635,world\n+4636,world\n+4637,world\n+4638,world\n+4639,world\n+4640,world\n+4641,world\n+4642,world\n+4643,world\n+4644,world\n+4645,world\n+4646,world\n+4647,world\n+4648,world\n+4649,world\n+4650,world\n+4651,world\n+4652,world\n+4653,world\n+4654,world\n+4655,world\n+4656,world\n+4657,world\n+4658,world\n+4659,world\n+4660,world\n+4661,world\n+4662,world\n+4663,world\n+4664,world\n+4665,world\n+4666,world\n+4667,world\n+4668,world\n+4669,world\n+4670,world\n+4671,world\n+4672,world\n+4673,world\n+4674,world\n+4675,world\n+4676,world\n+4677,world\n+4678,world\n+4679,world\n+4680,world\n+4681,world\n+4682,world\n+4683,world\n+4684,world\n+4685,world\n+4686,world\n+4687,world\n+4688,world\n+4689,world\n+4690,world\n+4691,world\n+4692,world\n+4693,world\n+4694,world\n+4695,world\n+4696,world\n+4697,world\n+4698,world\n+4699,world\n+4700,world\n+4701,world\n+4702,world\n+4703,world\n+4704,world\n+4705,world\n+4706,world\n+4707,world\n+4708,world\n+4709,world\n+4710,world\n+4711,world\n+4712,world\n+4713,world\n+4714,world\n+4715,world\n+4716,world\n+4717,world\n+4718,world\n+4719,world\n+4720,world\n+4721,world\n+4722,world\n+4723,world\n+4724,world\n+4725,world\n+4726,world\n+4727,world\n+4728,world\n+4729,world\n+4730,world\n+4731,world\n+4732,world\n+4733,world\n+4734,world\n+4735,world\n+4736,world\n+4737,world\n+4738,world\n+4739,world\n+4740,world\n+4741,world\n+4742,world\n+4743,world\n+4744,world\n+4745,world\n+4746,world\n+4747,world\n+4748,world\n+4749,world\n+4750,world\n+4751,world\n+4752,world\n+4753,world\n+4754,world\n+4755,world\n+4756,world\n+4757,world\n+4758,world\n+4759,world\n+4760,world\n+4761,world\n+4762,world\n+4763,world\n+4764,world\n+4765,world\n+4766,world\n+4767,world\n+4768,world\n+4769,world\n+4770,world\n+4771,world\n+4772,world\n+4773,world\n+4774,world\n+4775,world\n+4776,world\n+4777,world\n+4778,world\n+4779,world\n+4780,world\n+4781,world\n+4782,world\n+4783,world\n+4784,world\n+4785,world\n+4786,world\n+4787,world\n+4788,world\n+4789,world\n+4790,world\n+4791,world\n+4792,world\n+4793,world\n+4794,world\n+4795,world\n+4796,world\n+4797,world\n+4798,world\n+4799,world\n+4800,world\n+4801,world\n+4802,world\n+4803,world\n+4804,world\n+4805,world\n+4806,world\n+4807,world\n+4808,world\n+4809,world\n+4810,world\n+4811,world\n+4812,world\n+4813,world\n+4814,world\n+4815,world\n+4816,world\n+4817,world\n+4818,world\n+4819,world\n+4820,world\n+4821,world\n+4822,world\n+4823,world\n+4824,world\n+4825,world\n+4826,world\n+4827,world\n+4828,world\n+4829,world\n+4830,world\n+4831,world\n+4832,world\n+4833,world\n+4834,world\n+4835,world\n+4836,world\n+4837,world\n+4838,world\n+4839,world\n+4840,world\n+4841,world\n+4842,world\n+4843,world\n+4844,world\n+4845,world\n+4846,world\n+4847,world\n+4848,world\n+4849,world\n+4850,world\n+4851,world\n+4852,world\n+4853,world\n+4854,world\n+4855,world\n+4856,world\n+4857,world\n+4858,world\n+4859,world\n+4860,world\n+4861,world\n+4862,world\n+4863,world\n+4864,world\n+4865,world\n+4866,world\n+4867,world\n+4868,world\n+4869,world\n+4870,world\n+4871,world\n+4872,world\n+4873,world\n+4874,world\n+4875,world\n+4876,world\n+4877,world\n+4878,world\n+4879,world\n+4880,world\n+4881,world\n+4882,world\n+4883,world\n+4884,world\n+4885,world\n+4886,world\n+4887,world\n+4888,world\n+4889,world\n+4890,world\n+4891,world\n+4892,world\n+4893,world\n+4894,world\n+4895,world\n+4896,world\n+4897,world\n+4898,world\n+4899,world\n+4900,world\n+4901,world\n+4902,world\n+4903,world\n+4904,world\n+4905,world\n+4906,world\n+4907,world\n+4908,world\n+4909,world\n+4910,world\n+4911,world\n+4912,world\n+4913,world\n+4914,world\n+4915,world\n+4916,world\n+4917,world\n+4918,world\n+4919,world\n+4920,world\n+4921,world\n+4922,world\n+4923,world\n+4924,world\n+4925,world\n+4926,world\n+4927,world\n+4928,world\n+4929,world\n+4930,world\n+4931,world\n+4932,world\n+4933,world\n+4934,world\n+4935,world\n+4936,world\n+4937,world\n+4938,world\n+4939,world\n+4940,world\n+4941,world\n+4942,world\n+4943,world\n+4944,world\n+4945,world\n+4946,world\n+4947,world\n+4948,world\n+4949,world\n+4950,world\n+4951,world\n+4952,world\n+4953,world\n+4954,world\n+4955,world\n+4956,world\n+4957,world\n+4958,world\n+4959,world\n+4960,world\n+4961,world\n+4962,world\n+4963,world\n+4964,world\n+4965,world\n+4966,world\n+4967,world\n+4968,world\n+4969,world\n+4970,world\n+4971,world\n+4972,world\n+4973,world\n+4974,world\n+4975,world\n+4976,world\n+4977,world\n+4978,world\n+4979,world\n+4980,world\n+4981,world\n+4982,world\n+4983,world\n+4984,world\n+4985,world\n+4986,world\n+4987,world\n+4988,world\n+4989,world\n+4990,world\n+4991,world\n+4992,world\n+4993,world\n+4994,world\n+4995,world\n+4996,world\n+4997,world\n+4998,world\n+4999,world\n+5000,world\n+5001,world\n+5002,world\n+5003,world\n+5004,world\n+5005,world\n+5006,world\n+5007,world\n+5008,world\n+5009,world\n+5010,world\n+5011,world\n+5012,world\n+5013,world\n+5014,world\n+5015,world\n+5016,world\n+5017,world\n+5018,world\n+5019,world\n+5020,world\n+5021,world\n+5022,world\n+5023,world\n+5024,world\n+5025,world\n+5026,world\n+5027,world\n+5028,world\n+5029,world\n+5030,world\n+5031,world\n+5032,world\n+5033,world\n+5034,world\n+5035,world\n+5036,world\n+5037,world\n+5038,world\n+5039,world\n+5040,world\n+5041,world\n+5042,world\n+5043,world\n+5044,world\n+5045,world\n+5046,world\n+5047,world\n+5048,world\n+5049,world\n+5050,world\n+5051,world\n+5052,world\n+5053,world\n+5054,world\n+5055,world\n+5056,world\n+5057,world\n+5058,world\n+5059,world\n+5060,world\n+5061,world\n+5062,world\n+5063,world\n+5064,world\n+5065,world\n+5066,world\n+5067,world\n+5068,world\n+5069,world\n+5070,world\n+5071,world\n+5072,world\n+5073,world\n+5074,world\n+5075,world\n+5076,world\n+5077,world\n+5078,world\n+5079,world\n+5080,world\n+5081,world\n+5082,world\n+5083,world\n+5084,world\n+5085,world\n+5086,world\n+5087,world\n+5088,world\n+5089,world\n+5090,world\n+5091,world\n+5092,world\n+5093,world\n+5094,world\n+5095,world\n+5096,world\n+5097,world\n+5098,world\n+5099,world\n+5100,world\n+5101,world\n+5102,world\n+5103,world\n+5104,world\n+5105,world\n+5106,world\n+5107,world\n+5108,world\n+5109,world\n+5110,world\n+5111,world\n+5112,world\n+5113,world\n+5114,world\n+5115,world\n+5116,world\n+5117,world\n+5118,world\n+5119,world\n+5120,world\n+5121,world\n+5122,world\n+5123,world\n+5124,world\n+5125,world\n+5126,world\n+5127,world\n+5128,world\n+5129,world\n+5130,world\n+5131,world\n+5132,world\n+5133,world\n+5134,world\n+5135,world\n+5136,world\n+5137,world\n+5138,world\n+5139,world\n+5140,world\n+5141,world\n+5142,world\n+5143,world\n+5144,world\n+5145,world\n+5146,world\n+5147,world\n+5148,world\n+5149,world\n+5150,world\n+5151,world\n+5152,world\n+5153,world\n+5154,world\n+5155,world\n+5156,world\n+5157,world\n+5158,world\n+5159,world\n+5160,world\n+5161,world\n+5162,world\n+5163,world\n+5164,world\n+5165,world\n+5166,world\n+5167,world\n+5168,world\n+5169,world\n+5170,world\n+5171,world\n+5172,world\n+5173,world\n+5174,world\n+5175,world\n+5176,world\n+5177,world\n+5178,world\n+5179,world\n+5180,world\n+5181,world\n+5182,world\n+5183,world\n+5184,world\n+5185,world\n+5186,world\n+5187,world\n+5188,world\n+5189,world\n+5190,world\n+5191,world\n+5192,world\n+5193,world\n+5194,world\n+5195,world\n+5196,world\n+5197,world\n+5198,world\n+5199,world\n+5200,world\n+5201,world\n+5202,world\n+5203,world\n+5204,world\n+5205,world\n+5206,world\n+5207,world\n+5208,world\n+5209,world\n+5210,world\n+5211,world\n+5212,world\n+5213,world\n+5214,world\n+5215,world\n+5216,world\n+5217,world\n+5218,world\n+5219,world\n+5220,world\n+5221,world\n+5222,world\n+5223,world\n+5224,world\n+5225,world\n+5226,world\n+5227,world\n+5228,world\n+5229,world\n+5230,world\n+5231,world\n+5232,world\n+5233,world\n+5234,world\n+5235,world\n+5236,world\n+5237,world\n+5238,world\n+5239,world\n+5240,world\n+5241,world\n+5242,world\n+5243,world\n+5244,world\n+5245,world\n+5246,world\n+5247,world\n+5248,world\n+5249,world\n+5250,world\n+5251,world\n+5252,world\n+5253,world\n+5254,world\n+5255,world\n+5256,world\n+5257,world\n+5258,world\n+5259,world\n+5260,world\n+5261,world\n+5262,world\n+5263,world\n+5264,world\n+5265,world\n+5266,world\n+5267,world\n+5268,world\n+5269,world\n+5270,world\n+5271,world\n+5272,world\n+5273,world\n+5274,world\n+5275,world\n+5276,world\n+5277,world\n+5278,world\n+5279,world\n+5280,world\n+5281,world\n+5282,world\n+5283,world\n+5284,world\n+5285,world\n+5286,world\n+5287,world\n+5288,world\n+5289,world\n+5290,world\n+5291,world\n+5292,world\n+5293,world\n+5294,world\n+5295,world\n+5296,world\n+5297,world\n+5298,world\n+5299,world\n+5300,world\n+5301,world\n+5302,world\n+5303,world\n+5304,world\n+5305,world\n+5306,world\n+5307,world\n+5308,world\n+5309,world\n+5310,world\n+5311,world\n+5312,world\n+5313,world\n+5314,world\n+5315,world\n+5316,world\n+5317,world\n+5318,world\n+5319,world\n+5320,world\n+5321,world\n+5322,world\n+5323,world\n+5324,world\n+5325,world\n+5326,world\n+5327,world\n+5328,world\n+5329,world\n+5330,world\n+5331,world\n+5332,world\n+5333,world\n+5334,world\n+5335,world\n+5336,world\n+5337,world\n+5338,world\n+5339,world\n+5340,world\n+5341,world\n+5342,world\n+5343,world\n+5344,world\n+5345,world\n+5346,world\n+5347,world\n+5348,world\n+5349,world\n+5350,world\n+5351,world\n+5352,world\n+5353,world\n+5354,world\n+5355,world\n+5356,world\n+5357,world\n+5358,world\n+5359,world\n+5360,world\n+5361,world\n+5362,world\n+5363,world\n+5364,world\n+5365,world\n+5366,world\n+5367,world\n+5368,world\n+5369,world\n+5370,world\n+5371,world\n+5372,world\n+5373,world\n+5374,world\n+5375,world\n+5376,world\n+5377,world\n+5378,world\n+5379,world\n+5380,world\n+5381,world\n+5382,world\n+5383,world\n+5384,world\n+5385,world\n+5386,world\n+5387,world\n+5388,world\n+5389,world\n+5390,world\n+5391,world\n+5392,world\n+5393,world\n+5394,world\n+5395,world\n+5396,world\n+5397,world\n+5398,world\n+5399,world\n+5400,world\n+5401,world\n+5402,world\n+5403,world\n+5404,world\n+5405,world\n+5406,world\n+5407,world\n+5408,world\n+5409,world\n+5410,world\n+5411,world\n+5412,world\n+5413,world\n+5414,world\n+5415,world\n+5416,world\n+5417,world\n+5418,world\n+5419,world\n+5420,world\n+5421,world\n+5422,world\n+5423,world\n+5424,world\n+5425,world\n+5426,world\n+5427,world\n+5428,world\n+5429,world\n+5430,world\n+5431,world\n+5432,world\n+5433,world\n+5434,world\n+5435,world\n+5436,world\n+5437,world\n+5438,world\n+5439,world\n+5440,world\n+5441,world\n+5442,world\n+5443,world\n+5444,world\n+5445,world\n+5446,world\n+5447,world\n+5448,world\n+5449,world\n+5450,world\n+5451,world\n+5452,world\n+5453,world\n+5454,world\n+5455,world\n+5456,world\n+5457,world\n+5458,world\n+5459,world\n+5460,world\n+5461,world\n+5462,world\n+5463,world\n+5464,world\n+5465,world\n+5466,world\n+5467,world\n+5468,world\n+5469,world\n+5470,world\n+5471,world\n+5472,world\n+5473,world\n+5474,world\n+5475,world\n+5476,world\n+5477,world\n+5478,world\n+5479,world\n+5480,world\n+5481,world\n+5482,world\n+5483,world\n+5484,world\n+5485,world\n+5486,world\n+5487,world\n+5488,world\n+5489,world\n+5490,world\n+5491,world\n+5492,world\n+5493,world\n+5494,world\n+5495,world\n+5496,world\n+5497,world\n+5498,world\n+5499,world\n+5500,world\n+5501,world\n+5502,world\n+5503,world\n+5504,world\n+5505,world\n+5506,world\n+5507,world\n+5508,world\n+5509,world\n+5510,world\n+5511,world\n+5512,world\n+5513,world\n+5514,world\n+5515,world\n+5516,world\n+5517,world\n+5518,world\n+5519,world\n+5520,world\n+5521,world\n+5522,world\n+5523,world\n+5524,world\n+5525,world\n+5526,world\n+5527,world\n+5528,world\n+5529,world\n+5530,world\n+5531,world\n+5532,world\n+5533,world\n+5534,world\n+5535,world\n+5536,world\n+5537,world\n+5538,world\n+5539,world\n+5540,world\n+5541,world\n+5542,world\n+5543,world\n+5544,world\n+5545,world\n+5546,world\n+5547,world\n+5548,world\n+5549,world\n+5550,world\n+5551,world\n+5552,world\n+5553,world\n+5554,world\n+5555,world\n+5556,world\n+5557,world\n+5558,world\n+5559,world\n+5560,world\n+5561,world\n+5562,world\n+5563,world\n+5564,world\n+5565,world\n+5566,world\n+5567,world\n+5568,world\n+5569,world\n+5570,world\n+5571,world\n+5572,world\n+5573,world\n+5574,world\n+5575,world\n+5576,world\n+5577,world\n+5578,world\n+5579,world\n+5580,world\n+5581,world\n+5582,world\n+5583,world\n+5584,world\n+5585,world\n+5586,world\n+5587,world\n+5588,world\n+5589,world\n+5590,world\n+5591,world\n+5592,world\n+5593,world\n+5594,world\n+5595,world\n+5596,world\n+5597,world\n+5598,world\n+5599,world\n+5600,world\n+5601,world\n+5602,world\n+5603,world\n+5604,world\n+5605,world\n+5606,world\n+5607,world\n+5608,world\n+5609,world\n+5610,world\n+5611,world\n+5612,world\n+5613,world\n+5614,world\n+5615,world\n+5616,world\n+5617,world\n+5618,world\n+5619,world\n+5620,world\n+5621,world\n+5622,world\n+5623,world\n+5624,world\n+5625,world\n+5626,world\n+5627,world\n+5628,world\n+5629,world\n+5630,world\n+5631,world\n+5632,world\n+5633,world\n+5634,world\n+5635,world\n+5636,world\n+5637,world\n+5638,world\n+5639,world\n+5640,world\n+5641,world\n+5642,world\n+5643,world\n+5644,world\n+5645,world\n+5646,world\n+5647,world\n+5648,world\n+5649,world\n+5650,world\n+5651,world\n+5652,world\n+5653,world\n+5654,world\n+5655,world\n+5656,world\n+5657,world\n+5658,world\n+5659,world\n+5660,world\n+5661,world\n+5662,world\n+5663,world\n+5664,world\n+5665,world\n+5666,world\n+5667,world\n+5668,world\n+5669,world\n+5670,world\n+5671,world\n+5672,world\n+5673,world\n+5674,world\n+5675,world\n+5676,world\n+5677,world\n+5678,world\n+5679,world\n+5680,world\n+5681,world\n+5682,world\n+5683,world\n+5684,world\n+5685,world\n+5686,world\n+5687,world\n+5688,world\n+5689,world\n+5690,world\n+5691,world\n+5692,world\n+5693,world\n+5694,world\n+5695,world\n+5696,world\n+5697,world\n+5698,world\n+5699,world\n+5700,world\n+5701,world\n+5702,world\n+5703,world\n+5704,world\n+5705,world\n+5706,world\n+5707,world\n+5708,world\n+5709,world\n+5710,world\n+5711,world\n+5712,world\n+5713,world\n+5714,world\n+5715,world\n+5716,world\n+5717,world\n+5718,world\n+5719,world\n+5720,world\n+5721,world\n+5722,world\n+5723,world\n+5724,world\n+5725,world\n+5726,world\n+5727,world\n+5728,world\n+5729,world\n+5730,world\n+5731,world\n+5732,world\n+5733,world\n+5734,world\n+5735,world\n+5736,world\n+5737,world\n+5738,world\n+5739,world\n+5740,world\n+5741,world\n+5742,world\n+5743,world\n+5744,world\n+5745,world\n+5746,world\n+5747,world\n+5748,world\n+5749,world\n+5750,world\n+5751,world\n+5752,world\n+5753,world\n+5754,world\n+5755,world\n+5756,world\n+5757,world\n+5758,world\n+5759,world\n+5760,world\n+5761,world\n+5762,world\n+5763,world\n+5764,world\n+5765,world\n+5766,world\n+5767,world\n+5768,world\n+5769,world\n+5770,world\n+5771,world\n+5772,world\n+5773,world\n+5774,world\n+5775,world\n+5776,world\n+5777,world\n+5778,world\n+5779,world\n+5780,world\n+5781,world\n+5782,world\n+5783,world\n+5784,world\n+5785,world\n+5786,world\n+5787,world\n+5788,world\n+5789,world\n+5790,world\n+5791,world\n+5792,world\n+5793,world\n+5794,world\n+5795,world\n+5796,world\n+5797,world\n+5798,world\n+5799,world\n+5800,world\n+5801,world\n+5802,world\n+5803,world\n+5804,world\n+5805,world\n+5806,world\n+5807,world\n+5808,world\n+5809,world\n+5810,world\n+5811,world\n+5812,world\n+5813,world\n+5814,world\n+5815,world\n+5816,world\n+5817,world\n+5818,world\n+5819,world\n+5820,world\n+5821,world\n+5822,world\n+5823,world\n+5824,world\n+5825,world\n+5826,world\n+5827,world\n+5828,world\n+5829,world\n+5830,world\n+5831,world\n+5832,world\n+5833,world\n+5834,world\n+5835,world\n+5836,world\n+5837,world\n+5838,world\n+5839,world\n+5840,world\n+5841,world\n+5842,world\n+5843,world\n+5844,world\n+5845,world\n+5846,world\n+5847,world\n+5848,world\n+5849,world\n+5850,world\n+5851,world\n+5852,world\n+5853,world\n+5854,world\n+5855,world\n+5856,world\n+5857,world\n+5858,world\n+5859,world\n+5860,world\n+5861,world\n+5862,world\n+5863,world\n+5864,world\n+5865,world\n+5866,world\n+5867,world\n+5868,world\n+5869,world\n+5870,world\n+5871,world\n+5872,world\n+5873,world\n+5874,world\n+5875,world\n+5876,world\n+5877,world\n+5878,world\n+5879,world\n+5880,world\n+5881,world\n+5882,world\n+5883,world\n+5884,world\n+5885,world\n+5886,world\n+5887,world\n+5888,world\n+5889,world\n+5890,world\n+5891,world\n+5892,world\n+5893,world\n+5894,world\n+5895,world\n+5896,world\n+5897,world\n+5898,world\n+5899,world\n+5900,world\n+5901,world\n+5902,world\n+5903,world\n+5904,world\n+5905,world\n+5906,world\n+5907,world\n+5908,world\n+5909,world\n+5910,world\n+5911,world\n+5912,world\n+5913,world\n+5914,world\n+5915,world\n+5916,world\n+5917,world\n+5918,world\n+5919,world\n+5920,world\n+5921,world\n+5922,world\n+5923,world\n+5924,world\n+5925,world\n+5926,world\n+5927,world\n+5928,world\n+5929,world\n+5930,world\n+5931,world\n+5932,world\n+5933,world\n+5934,world\n+5935,world\n+5936,world\n+5937,world\n+5938,world\n+5939,world\n+5940,world\n+5941,world\n+5942,world\n+5943,world\n+5944,world\n+5945,world\n+5946,world\n+5947,world\n+5948,world\n+5949,world\n+5950,world\n+5951,world\n+5952,world\n+5953,world\n+5954,world\n+5955,world\n+5956,world\n+5957,world\n+5958,world\n+5959,world\n+5960,world\n+5961,world\n+5962,world\n+5963,world\n+5964,world\n+5965,world\n+5966,world\n+5967,world\n+5968,world\n+5969,world\n+5970,world\n+5971,world\n+5972,world\n+5973,world\n+5974,world\n+5975,world\n+5976,world\n+5977,world\n+5978,world\n+5979,world\n+5980,world\n+5981,world\n+5982,world\n+5983,world\n+5984,world\n+5985,world\n+5986,world\n+5987,world\n+5988,world\n+5989,world\n+5990,world\n+5991,world\n+5992,world\n+5993,world\n+5994,world\n+5995,world\n+5996,world\n+5997,world\n+5998,world\n+5999,world\n+6000,world\n+6001,world\n+6002,world\n+6003,world\n+6004,world\n+6005,world\n+6006,world\n+6007,world\n+6008,world\n+6009,world\n+6010,world\n+6011,world\n+6012,world\n+6013,world\n+6014,world\n+6015,world\n+6016,world\n+6017,world\n+6018,world\n+6019,world\n+6020,world\n+6021,world\n+6022,world\n+6023,world\n+6024,world\n+6025,world\n+6026,world\n+6027,world\n+6028,world\n+6029,world\n+6030,world\n+6031,world\n+6032,world\n+6033,world\n+6034,world\n+6035,world\n+6036,world\n+6037,world\n+6038,world\n+6039,world\n+6040,world\n+6041,world\n+6042,world\n+6043,world\n+6044,world\n+6045,world\n+6046,world\n+6047,world\n+6048,world\n+6049,world\n+6050,world\n+6051,world\n+6052,world\n+6053,world\n+6054,world\n+6055,world\n+6056,world\n+6057,world\n+6058,world\n+6059,world\n+6060,world\n+6061,world\n+6062,world\n+6063,world\n+6064,world\n+6065,world\n+6066,world\n+6067,world\n+6068,world\n+6069,world\n+6070,world\n+6071,world\n+6072,world\n+6073,world\n+6074,world\n+6075,world\n+6076,world\n+6077,world\n+6078,world\n+6079,world\n+6080,world\n+6081,world\n+6082,world\n+6083,world\n+6084,world\n+6085,world\n+6086,world\n+6087,world\n+6088,world\n+6089,world\n+6090,world\n+6091,world\n+6092,world\n+6093,world\n+6094,world\n+6095,world\n+6096,world\n+6097,world\n+6098,world\n+6099,world\n+6100,world\n+6101,world\n+6102,world\n+6103,world\n+6104,world\n+6105,world\n+6106,world\n+6107,world\n+6108,world\n+6109,world\n+6110,world\n+6111,world\n+6112,world\n+6113,world\n+6114,world\n+6115,world\n+6116,world\n+6117,world\n+6118,world\n+6119,world\n+6120,world\n+6121,world\n+6122,world\n+6123,world\n+6124,world\n+6125,world\n+6126,world\n+6127,world\n+6128,world\n+6129,world\n+6130,world\n+6131,world\n+6132,world\n+6133,world\n+6134,world\n+6135,world\n+6136,world\n+6137,world\n+6138,world\n+6139,world\n+6140,world\n+6141,world\n+6142,world\n+6143,world\n+6144,world\n+6145,world\n+6146,world\n+6147,world\n+6148,world\n+6149,world\n+6150,world\n+6151,world\n+6152,world\n+6153,world\n+6154,world\n+6155,world\n+6156,world\n+6157,world\n+6158,world\n+6159,world\n+6160,world\n+6161,world\n+6162,world\n+6163,world\n+6164,world\n+6165,world\n+6166,world\n+6167,world\n+6168,world\n+6169,world\n+6170,world\n+6171,world\n+6172,world\n+6173,world\n+6174,world\n+6175,world\n+6176,world\n+6177,world\n+6178,world\n+6179,world\n+6180,world\n+6181,world\n+6182,world\n+6183,world\n+6184,world\n+6185,world\n+6186,world\n+6187,world\n+6188,world\n+6189,world\n+6190,world\n+6191,world\n+6192,world\n+6193,world\n+6194,world\n+6195,world\n+6196,world\n+6197,world\n+6198,world\n+6199,world\n+6200,world\n+6201,world\n+6202,world\n+6203,world\n+6204,world\n+6205,world\n+6206,world\n+6207,world\n+6208,world\n+6209,world\n+6210,world\n+6211,world\n+6212,world\n+6213,world\n+6214,world\n+6215,world\n+6216,world\n+6217,world\n+6218,world\n+6219,world\n+6220,world\n+6221,world\n+6222,world\n+6223,world\n+6224,world\n+6225,world\n+6226,world\n+6227,world\n+6228,world\n+6229,world\n+6230,world\n+6231,world\n+6232,world\n+6233,world\n+6234,world\n+6235,world\n+6236,world\n+6237,world\n+6238,world\n+6239,world\n+6240,world\n+6241,world\n+6242,world\n+6243,world\n+6244,world\n+6245,world\n+6246,world\n+6247,world\n+6248,world\n+6249,world\n+6250,world\n+6251,world\n+6252,world\n+6253,world\n+6254,world\n+6255,world\n+6256,world\n+6257,world\n+6258,world\n+6259,world\n+6260,world\n+6261,world\n+6262,world\n+6263,world\n+6264,world\n+6265,world\n+6266,world\n+6267,world\n+6268,world\n+6269,world\n+6270,world\n+6271,world\n+6272,world\n+6273,world\n+6274,world\n+6275,world\n+6276,world\n+6277,world\n+6278,world\n+6279,world\n+6280,world\n+6281,world\n+6282,world\n+6283,world\n+6284,world\n+6285,world\n+6286,world\n+6287,world\n+6288,world\n+6289,world\n+6290,world\n+6291,world\n+6292,world\n+6293,world\n+6294,world\n+6295,world\n+6296,world\n+6297,world\n+6298,world\n+6299,world\n+6300,world\n+6301,world\n+6302,world\n+6303,world\n+6304,world\n+6305,world\n+6306,world\n+6307,world\n+6308,world\n+6309,world\n+6310,world\n+6311,world\n+6312,world\n+6313,world\n+6314,world\n+6315,world\n+6316,world\n+6317,world\n+6318,world\n+6319,world\n+6320,world\n+6321,world\n+6322,world\n+6323,world\n+6324,world\n+6325,world\n+6326,world\n+6327,world\n+6328,world\n+6329,world\n+6330,world\n+6331,world\n+6332,world\n+6333,world\n+6334,world\n+6335,world\n+6336,world\n+6337,world\n+6338,world\n+6339,world\n+6340,world\n+6341,world\n+6342,world\n+6343,world\n+6344,world\n+6345,world\n+6346,world\n+6347,world\n+6348,world\n+6349,world\n+6350,world\n+6351,world\n+6352,world\n+6353,world\n+6354,world\n+6355,world\n+6356,world\n+6357,world\n+6358,world\n+6359,world\n+6360,world\n+6361,world\n+6362,world\n+6363,world\n+6364,world\n+6365,world\n+6366,world\n+6367,world\n+6368,world\n+6369,world\n+6370,world\n+6371,world\n+6372,world\n+6373,world\n+6374,world\n+6375,world\n+6376,world\n+6377,world\n+6378,world\n+6379,world\n+6380,world\n+6381,world\n+6382,world\n+6383,world\n+6384,world\n+6385,world\n+6386,world\n+6387,world\n+6388,world\n+6389,world\n+6390,world\n+6391,world\n+6392,world\n+6393,world\n+6394,world\n+6395,world\n+6396,world\n+6397,world\n+6398,world\n+6399,world\n+6400,world\n+6401,world\n+6402,world\n+6403,world\n+6404,world\n+6405,world\n+6406,world\n+6407,world\n+6408,world\n+6409,world\n+6410,world\n+6411,world\n+6412,world\n+6413,world\n+6414,world\n+6415,world\n+6416,world\n+6417,world\n+6418,world\n+6419,world\n+6420,world\n+6421,world\n+6422,world\n+6423,world\n+6424,world\n+6425,world\n+6426,world\n+6427,world\n+6428,world\n+6429,world\n+6430,world\n+6431,world\n+6432,world\n+6433,world\n+6434,world\n+6435,world\n+6436,world\n+6437,world\n+6438,world\n+6439,world\n+6440,world\n+6441,world\n+6442,world\n+6443,world\n+6444,world\n+6445,world\n+6446,world\n+6447,world\n+6448,world\n+6449,world\n+6450,world\n+6451,world\n+6452,world\n+6453,world\n+6454,world\n+6455,world\n+6456,world\n+6457,world\n+6458,world\n+6459,world\n+6460,world\n+6461,world\n+6462,world\n+6463,world\n+6464,world\n+6465,world\n+6466,world\n+6467,world\n+6468,world\n+6469,world\n+6470,world\n+6471,world\n+6472,world\n+6473,world\n+6474,world\n+6475,world\n+6476,world\n+6477,world\n+6478,world\n+6479,world\n+6480,world\n+6481,world\n+6482,world\n+6483,world\n+6484,world\n+6485,world\n+6486,world\n+6487,world\n+6488,world\n+6489,world\n+6490,world\n+6491,world\n+6492,world\n+6493,world\n+6494,world\n+6495,world\n+6496,world\n+6497,world\n+6498,world\n+6499,world\n+6500,world\n+6501,world\n+6502,world\n+6503,world\n+6504,world\n+6505,world\n+6506,world\n+6507,world\n+6508,world\n+6509,world\n+6510,world\n+6511,world\n+6512,world\n+6513,world\n+6514,world\n+6515,world\n+6516,world\n+6517,world\n+6518,world\n+6519,world\n+6520,world\n+6521,world\n+6522,world\n+6523,world\n+6524,world\n+6525,world\n+6526,world\n+6527,world\n+6528,world\n+6529,world\n+6530,world\n+6531,world\n+6532,world\n+6533,world\n+6534,world\n+6535,world\n+6536,world\n+6537,world\n+6538,world\n+6539,world\n+6540,world\n+6541,world\n+6542,world\n+6543,world\n+6544,world\n+6545,world\n+6546,world\n+6547,world\n+6548,world\n+6549,world\n+6550,world\n+6551,world\n+6552,world\n+6553,world\n+6554,world\n+6555,world\n+6556,world\n+6557,world\n+6558,world\n+6559,world\n+6560,world\n+6561,world\n+6562,world\n+6563,world\n+6564,world\n+6565,world\n+6566,world\n+6567,world\n+6568,world\n+6569,world\n+6570,world\n+6571,world\n+6572,world\n+6573,world\n+6574,world\n+6575,world\n+6576,world\n+6577,world\n+6578,world\n+6579,world\n+6580,world\n+6581,world\n+6582,world\n+6583,world\n+6584,world\n+6585,world\n+6586,world\n+6587,world\n+6588,world\n+6589,world\n+6590,world\n+6591,world\n+6592,world\n+6593,world\n+6594,world\n+6595,world\n+6596,world\n+6597,world\n+6598,world\n+6599,world\n+6600,world\n+6601,world\n+6602,world\n+6603,world\n+6604,world\n+6605,world\n+6606,world\n+6607,world\n+6608,world\n+6609,world\n+6610,world\n+6611,world\n+6612,world\n+6613,world\n+6614,world\n+6615,world\n+6616,world\n+6617,world\n+6618,world\n+6619,world\n+6620,world\n+6621,world\n+6622,world\n+6623,world\n+6624,world\n+6625,world\n+6626,world\n+6627,world\n+6628,world\n+6629,world\n+6630,world\n+6631,world\n+6632,world\n+6633,world\n+6634,world\n+6635,world\n+6636,world\n+6637,world\n+6638,world\n+6639,world\n+6640,world\n+6641,world\n+6642,world\n+6643,world\n+6644,world\n+6645,world\n+6646,world\n+6647,world\n+6648,world\n+6649,world\n+6650,world\n+6651,world\n+6652,world\n+6653,world\n+6654,world\n+6655,world\n+6656,world\n+6657,world\n+6658,world\n+6659,world\n+6660,world\n+6661,world\n+6662,world\n+6663,world\n+6664,world\n+6665,world\n+6666,world\n+6667,world\n+6668,world\n+6669,world\n+6670,world\n+6671,world\n+6672,world\n+6673,world\n+6674,world\n+6675,world\n+6676,world\n+6677,world\n+6678,world\n+6679,world\n+6680,world\n+6681,world\n+6682,world\n+6683,world\n+6684,world\n+6685,world\n+6686,world\n+6687,world\n+6688,world\n+6689,world\n+6690,world\n+6691,world\n+6692,world\n+6693,world\n+6694,world\n+6695,world\n+6696,world\n+6697,world\n+6698,world\n+6699,world\n+6700,world\n+6701,world\n+6702,world\n+6703,world\n+6704,world\n+6705,world\n+6706,world\n+6707,world\n+6708,world\n+6709,world\n+6710,world\n+6711,world\n+6712,world\n+6713,world\n+6714,world\n+6715,world\n+6716,world\n+6717,world\n+6718,world\n+6719,world\n+6720,world\n+6721,world\n+6722,world\n+6723,world\n+6724,world\n+6725,world\n+6726,world\n+6727,world\n+6728,world\n+6729,world\n+6730,world\n+6731,world\n+6732,world\n+6733,world\n+6734,world\n+6735,world\n+6736,world\n+6737,world\n+6738,world\n+6739,world\n+6740,world\n+6741,world\n+6742,world\n+6743,world\n+6744,world\n+6745,world\n+6746,world\n+6747,world\n+6748,world\n+6749,world\n+6750,world\n+6751,world\n+6752,world\n+6753,world\n+6754,world\n+6755,world\n+6756,world\n+6757,world\n+6758,world\n+6759,world\n+6760,world\n+6761,world\n+6762,world\n+6763,world\n+6764,world\n+6765,world\n+6766,world\n+6767,world\n+6768,world\n+6769,world\n+6770,world\n+6771,world\n+6772,world\n+6773,world\n+6774,world\n+6775,world\n+6776,world\n+6777,world\n+6778,world\n+6779,world\n+6780,world\n+6781,world\n+6782,world\n+6783,world\n+6784,world\n+6785,world\n+6786,world\n+6787,world\n+6788,world\n+6789,world\n+6790,world\n+6791,world\n+6792,world\n+6793,world\n+6794,world\n+6795,world\n+6796,world\n+6797,world\n+6798,world\n+6799,world\n+6800,world\n+6801,world\n+6802,world\n+6803,world\n+6804,world\n+6805,world\n+6806,world\n+6807,world\n+6808,world\n+6809,world\n+6810,world\n+6811,world\n+6812,world\n+6813,world\n+6814,world\n+6815,world\n+6816,world\n+6817,world\n+6818,world\n+6819,world\n+6820,world\n+6821,world\n+6822,world\n+6823,world\n+6824,world\n+6825,world\n+6826,world\n+6827,world\n+6828,world\n+6829,world\n+6830,world\n+6831,world\n+6832,world\n+6833,world\n+6834,world\n+6835,world\n+6836,world\n+6837,world\n+6838,world\n+6839,world\n+6840,world\n+6841,world\n+6842,world\n+6843,world\n+6844,world\n+6845,world\n+6846,world\n+6847,world\n+6848,world\n+6849,world\n+6850,world\n+6851,world\n+6852,world\n+6853,world\n+6854,world\n+6855,world\n+6856,world\n+6857,world\n+6858,world\n+6859,world\n+6860,world\n+6861,world\n+6862,world\n+6863,world\n+6864,world\n+6865,world\n+6866,world\n+6867,world\n+6868,world\n+6869,world\n+6870,world\n+6871,world\n+6872,world\n+6873,world\n+6874,world\n+6875,world\n+6876,world\n+6877,world\n+6878,world\n+6879,world\n+6880,world\n+6881,world\n+6882,world\n+6883,world\n+6884,world\n+6885,world\n+6886,world\n+6887,world\n+6888,world\n+6889,world\n+6890,world\n+6891,world\n+6892,world\n+6893,world\n+6894,world\n+6895,world\n+6896,world\n+6897,world\n+6898,world\n+6899,world\n+6900,world\n+6901,world\n+6902,world\n+6903,world\n+6904,world\n+6905,world\n+6906,world\n+6907,world\n+6908,world\n+6909,world\n+6910,world\n+6911,world\n+6912,world\n+6913,world\n+6914,world\n+6915,world\n+6916,world\n+6917,world\n+6918,world\n+6919,world\n+6920,world\n+6921,world\n+6922,world\n+6923,world\n+6924,world\n+6925,world\n+6926,world\n+6927,world\n+6928,world\n+6929,world\n+6930,world\n+6931,world\n+6932,world\n+6933,world\n+6934,world\n+6935,world\n+6936,world\n+6937,world\n+6938,world\n+6939,world\n+6940,world\n+6941,world\n+6942,world\n+6943,world\n+6944,world\n+6945,world\n+6946,world\n+6947,world\n+6948,world\n+6949,world\n+6950,world\n+6951,world\n+6952,world\n+6953,world\n+6954,world\n+6955,world\n+6956,world\n+6957,world\n+6958,world\n+6959,world\n+6960,world\n+6961,world\n+6962,world\n+6963,world\n+6964,world\n+6965,world\n+6966,world\n+6967,world\n+6968,world\n+6969,world\n+6970,world\n+6971,world\n+6972,world\n+6973,world\n+6974,world\n+6975,world\n+6976,world\n+6977,world\n+6978,world\n+6979,world\n+6980,world\n+6981,world\n+6982,world\n+6983,world\n+6984,world\n+6985,world\n+6986,world\n+6987,world\n+6988,world\n+6989,world\n+6990,world\n+6991,world\n+6992,world\n+6993,world\n+6994,world\n+6995,world\n+6996,world\n+6997,world\n+6998,world\n+6999,world\n+7000,world\n+7001,world\n+7002,world\n+7003,world\n+7004,world\n+7005,world\n+7006,world\n+7007,world\n+7008,world\n+7009,world\n+7010,world\n+7011,world\n+7012,world\n+7013,world\n+7014,world\n+7015,world\n+7016,world\n+7017,world\n+7018,world\n+7019,world\n+7020,world\n+7021,world\n+7022,world\n+7023,world\n+7024,world\n+7025,world\n+7026,world\n+7027,world\n+7028,world\n+7029,world\n+7030,world\n+7031,world\n+7032,world\n+7033,world\n+7034,world\n+7035,world\n+7036,world\n+7037,world\n+7038,world\n+7039,world\n+7040,world\n+7041,world\n+7042,world\n+7043,world\n+7044,world\n+7045,world\n+7046,world\n+7047,world\n+7048,world\n+7049,world\n+7050,world\n+7051,world\n+7052,world\n+7053,world\n+7054,world\n+7055,world\n+7056,world\n+7057,world\n+7058,world\n+7059,world\n+7060,world\n+7061,world\n+7062,world\n+7063,world\n+7064,world\n+7065,world\n+7066,world\n+7067,world\n+7068,world\n+7069,world\n+7070,world\n+7071,world\n+7072,world\n+7073,world\n+7074,world\n+7075,world\n+7076,world\n+7077,world\n+7078,world\n+7079,world\n+7080,world\n+7081,world\n+7082,world\n+7083,world\n+7084,world\n+7085,world\n+7086,world\n+7087,world\n+7088,world\n+7089,world\n+7090,world\n+7091,world\n+7092,world\n+7093,world\n+7094,world\n+7095,world\n+7096,world\n+7097,world\n+7098,world\n+7099,world\n+7100,world\n+7101,world\n+7102,world\n+7103,world\n+7104,world\n+7105,world\n+7106,world\n+7107,world\n+7108,world\n+7109,world\n+7110,world\n+7111,world\n+7112,world\n+7113,world\n+7114,world\n+7115,world\n+7116,world\n+7117,world\n+7118,world\n+7119,world\n+7120,world\n+7121,world\n+7122,world\n+7123,world\n+7124,world\n+7125,world\n+7126,world\n+7127,world\n+7128,world\n+7129,world\n+7130,world\n+7131,world\n+7132,world\n+7133,world\n+7134,world\n+7135,world\n+7136,world\n+7137,world\n+7138,world\n+7139,world\n+7140,world\n+7141,world\n+7142,world\n+7143,world\n+7144,world\n+7145,world\n+7146,world\n+7147,world\n+7148,world\n+7149,world\n+7150,world\n+7151,world\n+7152,world\n+7153,world\n+7154,world\n+7155,world\n+7156,world\n+7157,world\n+7158,world\n+7159,world\n+7160,world\n+7161,world\n+7162,world\n+7163,world\n+7164,world\n+7165,world\n+7166,world\n+7167,world\n+7168,world\n+7169,world\n+7170,world\n+7171,world\n+7172,world\n+7173,world\n+7174,world\n+7175,world\n+7176,world\n+7177,world\n+7178,world\n+7179,world\n+7180,world\n+7181,world\n+7182,world\n+7183,world\n+7184,world\n+7185,world\n+7186,world\n+7187,world\n+7188,world\n+7189,world\n+7190,world\n+7191,world\n+7192,world\n+7193,world\n+7194,world\n+7195,world\n+7196,world\n+7197,world\n+7198,world\n+7199,world\n+7200,world\n+7201,world\n+7202,world\n+7203,world\n+7204,world\n+7205,world\n+7206,world\n+7207,world\n+7208,world\n+7209,world\n+7210,world\n+7211,world\n+7212,world\n+7213,world\n+7214,world\n+7215,world\n+7216,world\n+7217,world\n+7218,world\n+7219,world\n+7220,world\n+7221,world\n+7222,world\n+7223,world\n+7224,world\n+7225,world\n+7226,world\n+7227,world\n+7228,world\n+7229,world\n+7230,world\n+7231,world\n+7232,world\n+7233,world\n+7234,world\n+7235,world\n+7236,world\n+7237,world\n+7238,world\n+7239,world\n+7240,world\n+7241,world\n+7242,world\n+7243,world\n+7244,world\n+7245,world\n+7246,world\n+7247,world\n+7248,world\n+7249,world\n+7250,world\n+7251,world\n+7252,world\n+7253,world\n+7254,world\n+7255,world\n+7256,world\n+7257,world\n+7258,world\n+7259,world\n+7260,world\n+7261,world\n+7262,world\n+7263,world\n+7264,world\n+7265,world\n+7266,world\n+7267,world\n+7268,world\n+7269,world\n+7270,world\n+7271,world\n+7272,world\n+7273,world\n+7274,world\n+7275,world\n+7276,world\n+7277,world\n+7278,world\n+7279,world\n+7280,world\n+7281,world\n+7282,world\n+7283,world\n+7284,world\n+7285,world\n+7286,world\n+7287,world\n+7288,world\n+7289,world\n+7290,world\n+7291,world\n+7292,world\n+7293,world\n+7294,world\n+7295,world\n+7296,world\n+7297,world\n+7298,world\n+7299,world\n+7300,world\n+7301,world\n+7302,world\n+7303,world\n+7304,world\n+7305,world\n+7306,world\n+7307,world\n+7308,world\n+7309,world\n+7310,world\n+7311,world\n+7312,world\n+7313,world\n+7314,world\n+7315,world\n+7316,world\n+7317,world\n+7318,world\n+7319,world\n+7320,world\n+7321,world\n+7322,world\n+7323,world\n+7324,world\n+7325,world\n+7326,world\n+7327,world\n+7328,world\n+7329,world\n+7330,world\n+7331,world\n+7332,world\n+7333,world\n+7334,world\n+7335,world\n+7336,world\n+7337,world\n+7338,world\n+7339,world\n+7340,world\n+7341,world\n+7342,world\n+7343,world\n+7344,world\n+7345,world\n+7346,world\n+7347,world\n+7348,world\n+7349,world\n+7350,world\n+7351,world\n+7352,world\n+7353,world\n+7354,world\n+7355,world\n+7356,world\n+7357,world\n+7358,world\n+7359,world\n+7360,world\n+7361,world\n+7362,world\n+7363,world\n+7364,world\n+7365,world\n+7366,world\n+7367,world\n+7368,world\n+7369,world\n+7370,world\n+7371,world\n+7372,world\n+7373,world\n+7374,world\n+7375,world\n+7376,world\n+7377,world\n+7378,world\n+7379,world\n+7380,world\n+7381,world\n+7382,world\n+7383,world\n+7384,world\n+7385,world\n+7386,world\n+7387,world\n+7388,world\n+7389,world\n+7390,world\n+7391,world\n+7392,world\n+7393,world\n+7394,world\n+7395,world\n+7396,world\n+7397,world\n+7398,world\n+7399,world\n+7400,world\n+7401,world\n+7402,world\n+7403,world\n+7404,world\n+7405,world\n+7406,world\n+7407,world\n+7408,world\n+7409,world\n+7410,world\n+7411,world\n+7412,world\n+7413,world\n+7414,world\n+7415,world\n+7416,world\n+7417,world\n+7418,world\n+7419,world\n+7420,world\n+7421,world\n+7422,world\n+7423,world\n+7424,world\n+7425,world\n+7426,world\n+7427,world\n+7428,world\n+7429,world\n+7430,world\n+7431,world\n+7432,world\n+7433,world\n+7434,world\n+7435,world\n+7436,world\n+7437,world\n+7438,world\n+7439,world\n+7440,world\n+7441,world\n+7442,world\n+7443,world\n+7444,world\n+7445,world\n+7446,world\n+7447,world\n+7448,world\n+7449,world\n+7450,world\n+7451,world\n+7452,world\n+7453,world\n+7454,world\n+7455,world\n+7456,world\n+7457,world\n+7458,world\n+7459,world\n+7460,world\n+7461,world\n+7462,world\n+7463,world\n+7464,world\n+7465,world\n+7466,world\n+7467,world\n+7468,world\n+7469,world\n+7470,world\n+7471,world\n+7472,world\n+7473,world\n+7474,world\n+7475,world\n+7476,world\n+7477,world\n+7478,world\n+7479,world\n+7480,world\n+7481,world\n+7482,world\n+7483,world\n+7484,world\n+7485,world\n+7486,world\n+7487,world\n+7488,world\n+7489,world\n+7490,world\n+7491,world\n+7492,world\n+7493,world\n+7494,world\n+7495,world\n+7496,world\n+7497,world\n+7498,world\n+7499,world\n+7500,world\n+7501,world\n+7502,world\n+7503,world\n+7504,world\n+7505,world\n+7506,world\n+7507,world\n+7508,world\n+7509,world\n+7510,world\n+7511,world\n+7512,world\n+7513,world\n+7514,world\n+7515,world\n+7516,world\n+7517,world\n+7518,world\n+7519,world\n+7520,world\n+7521,world\n+7522,world\n+7523,world\n+7524,world\n+7525,world\n+7526,world\n+7527,world\n+7528,world\n+7529,world\n+7530,world\n+7531,world\n+7532,world\n+7533,world\n+7534,world\n+7535,world\n+7536,world\n+7537,world\n+7538,world\n+7539,world\n+7540,world\n+7541,world\n+7542,world\n+7543,world\n+7544,world\n+7545,world\n+7546,world\n+7547,world\n+7548,world\n+7549,world\n+7550,world\n+7551,world\n+7552,world\n+7553,world\n+7554,world\n+7555,world\n+7556,world\n+7557,world\n+7558,world\n+7559,world\n+7560,world\n+7561,world\n+7562,world\n+7563,world\n+7564,world\n+7565,world\n+7566,world\n+7567,world\n+7568,world\n+7569,world\n+7570,world\n+7571,world\n+7572,world\n+7573,world\n+7574,world\n+7575,world\n+7576,world\n+7577,world\n+7578,world\n+7579,world\n+7580,world\n+7581,world\n+7582,world\n+7583,world\n+7584,world\n+7585,world\n+7586,world\n+7587,world\n+7588,world\n+7589,world\n+7590,world\n+7591,world\n+7592,world\n+7593,world\n+7594,world\n+7595,world\n+7596,world\n+7597,world\n+7598,world\n+7599,world\n+7600,world\n+7601,world\n+7602,world\n+7603,world\n+7604,world\n+7605,world\n+7606,world\n+7607,world\n+7608,world\n+7609,world\n+7610,world\n+7611,world\n+7612,world\n+7613,world\n+7614,world\n+7615,world\n+7616,world\n+7617,world\n+7618,world\n+7619,world\n+7620,world\n+7621,world\n+7622,world\n+7623,world\n+7624,world\n+7625,world\n+7626,world\n+7627,world\n+7628,world\n+7629,world\n+7630,world\n+7631,world\n+7632,world\n+7633,world\n+7634,world\n+7635,world\n+7636,world\n+7637,world\n+7638,world\n+7639,world\n+7640,world\n+7641,world\n+7642,world\n+7643,world\n+7644,world\n+7645,world\n+7646,world\n+7647,world\n+7648,world\n+7649,world\n+7650,world\n+7651,world\n+7652,world\n+7653,world\n+7654,world\n+7655,world\n+7656,world\n+7657,world\n+7658,world\n+7659,world\n+7660,world\n+7661,world\n+7662,world\n+7663,world\n+7664,world\n+7665,world\n+7666,world\n+7667,world\n+7668,world\n+7669,world\n+7670,world\n+7671,world\n+7672,world\n+7673,world\n+7674,world\n+7675,world\n+7676,world\n+7677,world\n+7678,world\n+7679,world\n+7680,world\n+7681,world\n+7682,world\n+7683,world\n+7684,world\n+7685,world\n+7686,world\n+7687,world\n+7688,world\n+7689,world\n+7690,world\n+7691,world\n+7692,world\n+7693,world\n+7694,world\n+7695,world\n+7696,world\n+7697,world\n+7698,world\n+7699,world\n+7700,world\n+7701,world\n+7702,world\n+7703,world\n+7704,world\n+7705,world\n+7706,world\n+7707,world\n+7708,world\n+7709,world\n+7710,world\n+7711,world\n+7712,world\n+7713,world\n+7714,world\n+7715,world\n+7716,world\n+7717,world\n+7718,world\n+7719,world\n+7720,world\n+7721,world\n+7722,world\n+7723,world\n+7724,world\n+7725,world\n+7726,world\n+7727,world\n+7728,world\n+7729,world\n+7730,world\n+7731,world\n+7732,world\n+7733,world\n+7734,world\n+7735,world\n+7736,world\n+7737,world\n+7738,world\n+7739,world\n+7740,world\n+7741,world\n+7742,world\n+7743,world\n+7744,world\n+7745,world\n+7746,world\n+7747,world\n+7748,world\n+7749,world\n+7750,world\n+7751,world\n+7752,world\n+7753,world\n+7754,world\n+7755,world\n+7756,world\n+7757,world\n+7758,world\n+7759,world\n+7760,world\n+7761,world\n+7762,world\n+7763,world\n+7764,world\n+7765,world\n+7766,world\n+7767,world\n+7768,world\n+7769,world\n+7770,world\n+7771,world\n+7772,world\n+7773,world\n+7774,world\n+7775,world\n+7776,world\n+7777,world\n+7778,world\n+7779,world\n+7780,world\n+7781,world\n+7782,world\n+7783,world\n+7784,world\n+7785,world\n+7786,world\n+7787,world\n+7788,world\n+7789,world\n+7790,world\n+7791,world\n+7792,world\n+7793,world\n+7794,world\n+7795,world\n+7796,world\n+7797,world\n+7798,world\n+7799,world\n+7800,world\n+7801,world\n+7802,world\n+7803,world\n+7804,world\n+7805,world\n+7806,world\n+7807,world\n+7808,world\n+7809,world\n+7810,world\n+7811,world\n+7812,world\n+7813,world\n+7814,world\n+7815,world\n+7816,world\n+7817,world\n+7818,world\n+7819,world\n+7820,world\n+7821,world\n+7822,world\n+7823,world\n+7824,world\n+7825,world\n+7826,world\n+7827,world\n+7828,world\n+7829,world\n+7830,world\n+7831,world\n+7832,world\n+7833,world\n+7834,world\n+7835,world\n+7836,world\n+7837,world\n+7838,world\n+7839,world\n+7840,world\n+7841,world\n+7842,world\n+7843,world\n+7844,world\n+7845,world\n+7846,world\n+7847,world\n+7848,world\n+7849,world\n+7850,world\n+7851,world\n+7852,world\n+7853,world\n+7854,world\n+7855,world\n+7856,world\n+7857,world\n+7858,world\n+7859,world\n+7860,world\n+7861,world\n+7862,world\n+7863,world\n+7864,world\n+7865,world\n+7866,world\n+7867,world\n+7868,world\n+7869,world\n+7870,world\n+7871,world\n+7872,world\n+7873,world\n+7874,world\n+7875,world\n+7876,world\n+7877,world\n+7878,world\n+7879,world\n+7880,world\n+7881,world\n+7882,world\n+7883,world\n+7884,world\n+7885,world\n+7886,world\n+7887,world\n+7888,world\n+7889,world\n+7890,world\n+7891,world\n+7892,world\n+7893,world\n+7894,world\n+7895,world\n+7896,world\n+7897,world\n+7898,world\n+7899,world\n+7900,world\n+7901,world\n+7902,world\n+7903,world\n+7904,world\n+7905,world\n+7906,world\n+7907,world\n+7908,world\n+7909,world\n+7910,world\n+7911,world\n+7912,world\n+7913,world\n+7914,world\n+7915,world\n+7916,world\n+7917,world\n+7918,world\n+7919,world\n+7920,world\n+7921,world\n+7922,world\n+7923,world\n+7924,world\n+7925,world\n+7926,world\n+7927,world\n+7928,world\n+7929,world\n+7930,world\n+7931,world\n+7932,world\n+7933,world\n+7934,world\n+7935,world\n+7936,world\n+7937,world\n+7938,world\n+7939,world\n+7940,world\n+7941,world\n+7942,world\n+7943,world\n+7944,world\n+7945,world\n+7946,world\n+7947,world\n+7948,world\n+7949,world\n+7950,world\n+7951,world\n+7952,world\n+7953,world\n+7954,world\n+7955,world\n+7956,world\n+7957,world\n+7958,world\n+7959,world\n+7960,world\n+7961,world\n+7962,world\n+7963,world\n+7964,world\n+7965,world\n+7966,world\n+7967,world\n+7968,world\n+7969,world\n+7970,world\n+7971,world\n+7972,world\n+7973,world\n+7974,world\n+7975,world\n+7976,world\n+7977,world\n+7978,world\n+7979,world\n+7980,world\n+7981,world\n+7982,world\n+7983,world\n+7984,world\n+7985,world\n+7986,world\n+7987,world\n+7988,world\n+7989,world\n+7990,world\n+7991,world\n+7992,world\n+7993,world\n+7994,world\n+7995,world\n+7996,world\n+7997,world\n+7998,world\n+7999,world\n+8000,world\n+8001,world\n+8002,world\n+8003,world\n+8004,world\n+8005,world\n+8006,world\n+8007,world\n+8008,world\n+8009,world\n+8010,world\n+8011,world\n+8012,world\n+8013,world\n+8014,world\n+8015,world\n+8016,world\n+8017,world\n+8018,world\n+8019,world\n+8020,world\n+8021,world\n+8022,world\n+8023,world\n+8024,world\n+8025,world\n+8026,world\n+8027,world\n+8028,world\n+8029,world\n+8030,world\n+8031,world\n+8032,world\n+8033,world\n+8034,world\n+8035,world\n+8036,world\n+8037,world\n+8038,world\n+8039,world\n+8040,world\n+8041,world\n+8042,world\n+8043,world\n+8044,world\n+8045,world\n+8046,world\n+8047,world\n+8048,world\n+8049,world\n+8050,world\n+8051,world\n+8052,world\n+8053,world\n+8054,world\n+8055,world\n+8056,world\n+8057,world\n+8058,world\n+8059,world\n+8060,world\n+8061,world\n+8062,world\n+8063,world\n+8064,world\n+8065,world\n+8066,world\n+8067,world\n+8068,world\n+8069,world\n+8070,world\n+8071,world\n+8072,world\n+8073,world\n+8074,world\n+8075,world\n+8076,world\n+8077,world\n+8078,world\n+8079,world\n+8080,world\n+8081,world\n+8082,world\n+8083,world\n+8084,world\n+8085,world\n+8086,world\n+8087,world\n+8088,world\n+8089,world\n+8090,world\n+8091,world\n+8092,world\n+8093,world\n+8094,world\n+8095,world\n+8096,world\n+8097,world\n+8098,world\n+8099,world\n+8100,world\n+8101,world\n+8102,world\n+8103,world\n+8104,world\n+8105,world\n+8106,world\n+8107,world\n+8108,world\n+8109,world\n+8110,world\n+8111,world\n+8112,world\n+8113,world\n+8114,world\n+8115,world\n+8116,world\n+8117,world\n+8118,world\n+8119,world\n+8120,world\n+8121,world\n+8122,world\n+8123,world\n+8124,world\n+8125,world\n+8126,world\n+8127,world\n+8128,world\n+8129,world\n+8130,world\n+8131,world\n+8132,world\n+8133,world\n+8134,world\n+8135,world\n+8136,world\n+8137,world\n+8138,world\n+8139,world\n+8140,world\n+8141,world\n+8142,world\n+8143,world\n+8144,world\n+8145,world\n+8146,world\n+8147,world\n+8148,world\n+8149,world\n+8150,world\n+8151,world\n+8152,world\n+8153,world\n+8154,world\n+8155,world\n+8156,world\n+8157,world\n+8158,world\n+8159,world\n+8160,world\n+8161,world\n+8162,world\n+8163,world\n+8164,world\n+8165,world\n+8166,world\n+8167,world\n+8168,world\n+8169,world\n+8170,world\n+8171,world\n+8172,world\n+8173,world\n+8174,world\n+8175,world\n+8176,world\n+8177,world\n+8178,world\n+8179,world\n+8180,world\n+8181,world\n+8182,world\n+8183,world\n+8184,world\n+8185,world\n+8186,world\n+8187,world\n+8188,world\n+8189,world\n+8190,world\n+8191,world\n+8192,world\n+8193,world\n+8194,world\n+8195,world\n+8196,world\n+8197,world\n+8198,world\n+8199,world\n+8200,world\n+8201,world\n+8202,world\n+8203,world\n+8204,world\n+8205,world\n+8206,world\n+8207,world\n+8208,world\n+8209,world\n+8210,world\n+8211,world\n+8212,world\n+8213,world\n+8214,world\n+8215,world\n+8216,world\n+8217,world\n+8218,world\n+8219,world\n+8220,world\n+8221,world\n+8222,world\n+8223,world\n+8224,world\n+8225,world\n+8226,world\n+8227,world\n+8228,world\n+8229,world\n+8230,world\n+8231,world\n+8232,world\n+8233,world\n+8234,world\n+8235,world\n+8236,world\n+8237,world\n+8238,world\n+8239,world\n+8240,world\n+8241,world\n+8242,world\n+8243,world\n+8244,world\n+8245,world\n+8246,world\n+8247,world\n+8248,world\n+8249,world\n+8250,world\n+8251,world\n+8252,world\n+8253,world\n+8254,world\n+8255,world\n+8256,world\n+8257,world\n+8258,world\n+8259,world\n+8260,world\n+8261,world\n+8262,world\n+8263,world\n+8264,world\n+8265,world\n+8266,world\n+8267,world\n+8268,world\n+8269,world\n+8270,world\n+8271,world\n+8272,world\n+8273,world\n+8274,world\n+8275,world\n+8276,world\n+8277,world\n+8278,world\n+8279,world\n+8280,world\n+8281,world\n+8282,world\n+8283,world\n+8284,world\n+8285,world\n+8286,world\n+8287,world\n+8288,world\n+8289,world\n+8290,world\n+8291,world\n+8292,world\n+8293,world\n+8294,world\n+8295,world\n+8296,world\n+8297,world\n+8298,world\n+8299,world\n+8300,world\n+8301,world\n+8302,world\n+8303,world\n+8304,world\n+8305,world\n+8306,world\n+8307,world\n+8308,world\n+8309,world\n+8310,world\n+8311,world\n+8312,world\n+8313,world\n+8314,world\n+8315,world\n+8316,world\n+8317,world\n+8318,world\n+8319,world\n+8320,world\n+8321,world\n+8322,world\n+8323,world\n+8324,world\n+8325,world\n+8326,world\n+8327,world\n+8328,world\n+8329,world\n+8330,world\n+8331,world\n+8332,world\n+8333,world\n+8334,world\n+8335,world\n+8336,world\n+8337,world\n+8338,world\n+8339,world\n+8340,world\n+8341,world\n+8342,world\n+8343,world\n+8344,world\n+8345,world\n+8346,world\n+8347,world\n+8348,world\n+8349,world\n+8350,world\n+8351,world\n+8352,world\n+8353,world\n+8354,world\n+8355,world\n+8356,world\n+8357,world\n+8358,world\n+8359,world\n+8360,world\n+8361,world\n+8362,world\n+8363,world\n+8364,world\n+8365,world\n+8366,world\n+8367,world\n+8368,world\n+8369,world\n+8370,world\n+8371,world\n+8372,world\n+8373,world\n+8374,world\n+8375,world\n+8376,world\n+8377,world\n+8378,world\n+8379,world\n+8380,world\n+8381,world\n+8382,world\n+8383,world\n+8384,world\n+8385,world\n+8386,world\n+8387,world\n+8388,world\n+8389,world\n+8390,world\n+8391,world\n+8392,world\n+8393,world\n+8394,world\n+8395,world\n+8396,world\n+8397,world\n+8398,world\n+8399,world\n+8400,world\n+8401,world\n+8402,world\n+8403,world\n+8404,world\n+8405,world\n+8406,world\n+8407,world\n+8408,world\n+8409,world\n+8410,world\n+8411,world\n+8412,world\n+8413,world\n+8414,world\n+8415,world\n+8416,world\n+8417,world\n+8418,world\n+8419,world\n+8420,world\n+8421,world\n+8422,world\n+8423,world\n+8424,world\n+8425,world\n+8426,world\n+8427,world\n+8428,world\n+8429,world\n+8430,world\n+8431,world\n+8432,world\n+8433,world\n+8434,world\n+8435,world\n+8436,world\n+8437,world\n+8438,world\n+8439,world\n+8440,world\n+8441,world\n+8442,world\n+8443,world\n+8444,world\n+8445,world\n+8446,world\n+8447,world\n+8448,world\n+8449,world\n+8450,world\n+8451,world\n+8452,world\n+8453,world\n+8454,world\n+8455,world\n+8456,world\n+8457,world\n+8458,world\n+8459,world\n+8460,world\n+8461,world\n+8462,world\n+8463,world\n+8464,world\n+8465,world\n+8466,world\n+8467,world\n+8468,world\n+8469,world\n+8470,world\n+8471,world\n+8472,world\n+8473,world\n+8474,world\n+8475,world\n+8476,world\n+8477,world\n+8478,world\n+8479,world\n+8480,world\n+8481,world\n+8482,world\n+8483,world\n+8484,world\n+8485,world\n+8486,world\n+8487,world\n+8488,world\n+8489,world\n+8490,world\n+8491,world\n+8492,world\n+8493,world\n+8494,world\n+8495,world\n+8496,world\n+8497,world\n+8498,world\n+8499,world\n+8500,world\n+8501,world\n+8502,world\n+8503,world\n+8504,world\n+8505,world\n+8506,world\n+8507,world\n+8508,world\n+8509,world\n+8510,world\n+8511,world\n+8512,world\n+8513,world\n+8514,world\n+8515,world\n+8516,world\n+8517,world\n+8518,world\n+8519,world\n+8520,world\n+8521,world\n+8522,world\n+8523,world\n+8524,world\n+8525,world\n+8526,world\n+8527,world\n+8528,world\n+8529,world\n+8530,world\n+8531,world\n+8532,world\n+8533,world\n+8534,world\n+8535,world\n+8536,world\n+8537,world\n+8538,world\n+8539,world\n+8540,world\n+8541,world\n+8542,world\n+8543,world\n+8544,world\n+8545,world\n+8546,world\n+8547,world\n+8548,world\n+8549,world\n+8550,world\n+8551,world\n+8552,world\n+8553,world\n+8554,world\n+8555,world\n+8556,world\n+8557,world\n+8558,world\n+8559,world\n+8560,world\n+8561,world\n+8562,world\n+8563,world\n+8564,world\n+8565,world\n+8566,world\n+8567,world\n+8568,world\n+8569,world\n+8570,world\n+8571,world\n+8572,world\n+8573,world\n+8574,world\n+8575,world\n+8576,world\n+8577,world\n+8578,world\n+8579,world\n+8580,world\n+8581,world\n+8582,world\n+8583,world\n+8584,world\n+8585,world\n+8586,world\n+8587,world\n+8588,world\n+8589,world\n+8590,world\n+8591,world\n+8592,world\n+8593,world\n+8594,world\n+8595,world\n+8596,world\n+8597,world\n+8598,world\n+8599,world\n+8600,world\n+8601,world\n+8602,world\n+8603,world\n+8604,world\n+8605,world\n+8606,world\n+8607,world\n+8608,world\n+8609,world\n+8610,world\n+8611,world\n+8612,world\n+8613,world\n+8614,world\n+8615,world\n+8616,world\n+8617,world\n+8618,world\n+8619,world\n+8620,world\n+8621,world\n+8622,world\n+8623,world\n+8624,world\n+8625,world\n+8626,world\n+8627,world\n+8628,world\n+8629,world\n+8630,world\n+8631,world\n+8632,world\n+8633,world\n+8634,world\n+8635,world\n+8636,world\n+8637,world\n+8638,world\n+8639,world\n+8640,world\n+8641,world\n+8642,world\n+8643,world\n+8644,world\n+8645,world\n+8646,world\n+8647,world\n+8648,world\n+8649,world\n+8650,world\n+8651,world\n+8652,world\n+8653,world\n+8654,world\n+8655,world\n+8656,world\n+8657,world\n+8658,world\n+8659,world\n+8660,world\n+8661,world\n+8662,world\n+8663,world\n+8664,world\n+8665,world\n+8666,world\n+8667,world\n+8668,world\n+8669,world\n+8670,world\n+8671,world\n+8672,world\n+8673,world\n+8674,world\n+8675,world\n+8676,world\n+8677,world\n+8678,world\n+8679,world\n+8680,world\n+8681,world\n+8682,world\n+8683,world\n+8684,world\n+8685,world\n+8686,world\n+8687,world\n+8688,world\n+8689,world\n+8690,world\n+8691,world\n+8692,world\n+8693,world\n+8694,world\n+8695,world\n+8696,world\n+8697,world\n+8698,world\n+8699,world\n+8700,world\n+8701,world\n+8702,world\n+8703,world\n+8704,world\n+8705,world\n+8706,world\n+8707,world\n+8708,world\n+8709,world\n+8710,world\n+8711,world\n+8712,world\n+8713,world\n+8714,world\n+8715,world\n+8716,world\n+8717,world\n+8718,world\n+8719,world\n+8720,world\n+8721,world\n+8722,world\n+8723,world\n+8724,world\n+8725,world\n+8726,world\n+8727,world\n+8728,world\n+8729,world\n+8730,world\n+8731,world\n+8732,world\n+8733,world\n+8734,world\n+8735,world\n+8736,world\n+8737,world\n+8738,world\n+8739,world\n+8740,world\n+8741,world\n+8742,world\n+8743,world\n+8744,world\n+8745,world\n+8746,world\n+8747,world\n+8748,world\n+8749,world\n+8750,world\n+8751,world\n+8752,world\n+8753,world\n+8754,world\n+8755,world\n+8756,world\n+8757,world\n+8758,world\n+8759,world\n+8760,world\n+8761,world\n+8762,world\n+8763,world\n+8764,world\n+8765,world\n+8766,world\n+8767,world\n+8768,world\n+8769,world\n+8770,world\n+8771,world\n+8772,world\n+8773,world\n+8774,world\n+8775,world\n+8776,world\n+8777,world\n+8778,world\n+8779,world\n+8780,world\n+8781,world\n+8782,world\n+8783,world\n+8784,world\n+8785,world\n+8786,world\n+8787,world\n+8788,world\n+8789,world\n+8790,world\n+8791,world\n+8792,world\n+8793,world\n+8794,world\n+8795,world\n+8796,world\n+8797,world\n+8798,world\n+8799,world\n+8800,world\n+8801,world\n+8802,world\n+8803,world\n+8804,world\n+8805,world\n+8806,world\n+8807,world\n+8808,world\n+8809,world\n+8810,world\n+8811,world\n+8812,world\n+8813,world\n+8814,world\n+8815,world\n+8816,world\n+8817,world\n+8818,world\n+8819,world\n+8820,world\n+8821,world\n+8822,world\n+8823,world\n+8824,world\n+8825,world\n+8826,world\n+8827,world\n+8828,world\n+8829,world\n+8830,world\n+8831,world\n+8832,world\n+8833,world\n+8834,world\n+8835,world\n+8836,world\n+8837,world\n+8838,world\n+8839,world\n+8840,world\n+8841,world\n+8842,world\n+8843,world\n+8844,world\n+8845,world\n+8846,world\n+8847,world\n+8848,world\n+8849,world\n+8850,world\n+8851,world\n+8852,world\n+8853,world\n+8854,world\n+8855,world\n+8856,world\n+8857,world\n+8858,world\n+8859,world\n+8860,world\n+8861,world\n+8862,world\n+8863,world\n+8864,world\n+8865,world\n+8866,world\n+8867,world\n+8868,world\n+8869,world\n+8870,world\n+8871,world\n+8872,world\n+8873,world\n+8874,world\n+8875,world\n+8876,world\n+8877,world\n+8878,world\n+8879,world\n+8880,world\n+8881,world\n+8882,world\n+8883,world\n+8884,world\n+8885,world\n+8886,world\n+8887,world\n+8888,world\n+8889,world\n+8890,world\n+8891,world\n+8892,world\n+8893,world\n+8894,world\n+8895,world\n+8896,world\n+8897,world\n+8898,world\n+8899,world\n+8900,world\n+8901,world\n+8902,world\n+8903,world\n+8904,world\n+8905,world\n+8906,world\n+8907,world\n+8908,world\n+8909,world\n+8910,world\n+8911,world\n+8912,world\n+8913,world\n+8914,world\n+8915,world\n+8916,world\n+8917,world\n+8918,world\n+8919,world\n+8920,world\n+8921,world\n+8922,world\n+8923,world\n+8924,world\n+8925,world\n+8926,world\n+8927,world\n+8928,world\n+8929,world\n+8930,world\n+8931,world\n+8932,world\n+8933,world\n+8934,world\n+8935,world\n+8936,world\n+8937,world\n+8938,world\n+8939,world\n+8940,world\n+8941,world\n+8942,world\n+8943,world\n+8944,world\n+8945,world\n+8946,world\n+8947,world\n+8948,world\n+8949,world\n+8950,world\n+8951,world\n+8952,world\n+8953,world\n+8954,world\n+8955,world\n+8956,world\n+8957,world\n+8958,world\n+8959,world\n+8960,world\n+8961,world\n+8962,world\n+8963,world\n+8964,world\n+8965,world\n+8966,world\n+8967,world\n+8968,world\n+8969,world\n+8970,world\n+8971,world\n+8972,world\n+8973,world\n+8974,world\n+8975,world\n+8976,world\n+8977,world\n+8978,world\n+8979,world\n+8980,world\n+8981,world\n+8982,world\n+8983,world\n+8984,world\n+8985,world\n+8986,world\n+8987,world\n+8988,world\n+8989,world\n+8990,world\n+8991,world\n+8992,world\n+8993,world\n+8994,world\n+8995,world\n+8996,world\n+8997,world\n+8998,world\n+8999,world\n+9000,world\n+9001,world\n+9002,world\n+9003,world\n+9004,world\n+9005,world\n+9006,world\n+9007,world\n+9008,world\n+9009,world\n+9010,world\n+9011,world\n+9012,world\n+9013,world\n+9014,world\n+9015,world\n+9016,world\n+9017,world\n+9018,world\n+9019,world\n+9020,world\n+9021,world\n+9022,world\n+9023,world\n+9024,world\n+9025,world\n+9026,world\n+9027,world\n+9028,world\n+9029,world\n+9030,world\n+9031,world\n+9032,world\n+9033,world\n+9034,world\n+9035,world\n+9036,world\n+9037,world\n+9038,world\n+9039,world\n+9040,world\n+9041,world\n+9042,world\n+9043,world\n+9044,world\n+9045,world\n+9046,world\n+9047,world\n+9048,world\n+9049,world\n+9050,world\n+9051,world\n+9052,world\n+9053,world\n+9054,world\n+9055,world\n+9056,world\n+9057,world\n+9058,world\n+9059,world\n+9060,world\n+9061,world\n+9062,world\n+9063,world\n+9064,world\n+9065,world\n+9066,world\n+9067,world\n+9068,world\n+9069,world\n+9070,world\n+9071,world\n+9072,world\n+9073,world\n+9074,world\n+9075,world\n+9076,world\n+9077,world\n+9078,world\n+9079,world\n+9080,world\n+9081,world\n+9082,world\n+9083,world\n+9084,world\n+9085,world\n+9086,world\n+9087,world\n+9088,world\n+9089,world\n+9090,world\n+9091,world\n+9092,world\n+9093,world\n+9094,world\n+9095,world\n+9096,world\n+9097,world\n+9098,world\n+9099,world\n+9100,world\n+9101,world\n+9102,world\n+9103,world\n+9104,world\n+9105,world\n+9106,world\n+9107,world\n+9108,world\n+9109,world\n+9110,world\n+9111,world\n+9112,world\n+9113,world\n+9114,world\n+9115,world\n+9116,world\n+9117,world\n+9118,world\n+9119,world\n+9120,world\n+9121,world\n+9122,world\n+9123,world\n+9124,world\n+9125,world\n+9126,world\n+9127,world\n+9128,world\n+9129,world\n+9130,world\n+9131,world\n+9132,world\n+9133,world\n+9134,world\n+9135,world\n+9136,world\n+9137,world\n+9138,world\n+9139,world\n+9140,world\n+9141,world\n+9142,world\n+9143,world\n+9144,world\n+9145,world\n+9146,world\n+9147,world\n+9148,world\n+9149,world\n+9150,world\n+9151,world\n+9152,world\n+9153,world\n+9154,world\n+9155,world\n+9156,world\n+9157,world\n+9158,world\n+9159,world\n+9160,world\n+9161,world\n+9162,world\n+9163,world\n+9164,world\n+9165,world\n+9166,world\n+9167,world\n+9168,world\n+9169,world\n+9170,world\n+9171,world\n+9172,world\n+9173,world\n+9174,world\n+9175,world\n+9176,world\n+9177,world\n+9178,world\n+9179,world\n+9180,world\n+9181,world\n+9182,world\n+9183,world\n+9184,world\n+9185,world\n+9186,world\n+9187,world\n+9188,world\n+9189,world\n+9190,world\n+9191,world\n+9192,world\n+9193,world\n+9194,world\n+9195,world\n+9196,world\n+9197,world\n+9198,world\n+9199,world\n+9200,world\n+9201,world\n+9202,world\n+9203,world\n+9204,world\n+9205,world\n+9206,world\n+9207,world\n+9208,world\n+9209,world\n+9210,world\n+9211,world\n+9212,world\n+9213,world\n+9214,world\n+9215,world\n+9216,world\n+9217,world\n+9218,world\n+9219,world\n+9220,world\n+9221,world\n+9222,world\n+9223,world\n+9224,world\n+9225,world\n+9226,world\n+9227,world\n+9228,world\n+9229,world\n+9230,world\n+9231,world\n+9232,world\n+9233,world\n+9234,world\n+9235,world\n+9236,world\n+9237,world\n+9238,world\n+9239,world\n+9240,world\n+9241,world\n+9242,world\n+9243,world\n+9244,world\n+9245,world\n+9246,world\n+9247,world\n+9248,world\n+9249,world\n+9250,world\n+9251,world\n+9252,world\n+9253,world\n+9254,world\n+9255,world\n+9256,world\n+9257,world\n+9258,world\n+9259,world\n+9260,world\n+9261,world\n+9262,world\n+9263,world\n+9264,world\n+9265,world\n+9266,world\n+9267,world\n+9268,world\n+9269,world\n+9270,world\n+9271,world\n+9272,world\n+9273,world\n+9274,world\n+9275,world\n+9276,world\n+9277,world\n+9278,world\n+9279,world\n+9280,world\n+9281,world\n+9282,world\n+9283,world\n+9284,world\n+9285,world\n+9286,world\n+9287,world\n+9288,world\n+9289,world\n+9290,world\n+9291,world\n+9292,world\n+9293,world\n+9294,world\n+9295,world\n+9296,world\n+9297,world\n+9298,world\n+9299,world\n+9300,world\n+9301,world\n+9302,world\n+9303,world\n+9304,world\n+9305,world\n+9306,world\n+9307,world\n+9308,world\n+9309,world\n+9310,world\n+9311,world\n+9312,world\n+9313,world\n+9314,world\n+9315,world\n+9316,world\n+9317,world\n+9318,world\n+9319,world\n+9320,world\n+9321,world\n+9322,world\n+9323,world\n+9324,world\n+9325,world\n+9326,world\n+9327,world\n+9328,world\n+9329,world\n+9330,world\n+9331,world\n+9332,world\n+9333,world\n+9334,world\n+9335,world\n+9336,world\n+9337,world\n+9338,world\n+9339,world\n+9340,world\n+9341,world\n+9342,world\n+9343,world\n+9344,world\n+9345,world\n+9346,world\n+9347,world\n+9348,world\n+9349,world\n+9350,world\n+9351,world\n+9352,world\n+9353,world\n+9354,world\n+9355,world\n+9356,world\n+9357,world\n+9358,world\n+9359,world\n+9360,world\n+9361,world\n+9362,world\n+9363,world\n+9364,world\n+9365,world\n+9366,world\n+9367,world\n+9368,world\n+9369,world\n+9370,world\n+9371,world\n+9372,world\n+9373,world\n+9374,world\n+9375,world\n+9376,world\n+9377,world\n+9378,world\n+9379,world\n+9380,world\n+9381,world\n+9382,world\n+9383,world\n+9384,world\n+9385,world\n+9386,world\n+9387,world\n+9388,world\n+9389,world\n+9390,world\n+9391,world\n+9392,world\n+9393,world\n+9394,world\n+9395,world\n+9396,world\n+9397,world\n+9398,world\n+9399,world\n+9400,world\n+9401,world\n+9402,world\n+9403,world\n+9404,world\n+9405,world\n+9406,world\n+9407,world\n+9408,world\n+9409,world\n+9410,world\n+9411,world\n+9412,world\n+9413,world\n+9414,world\n+9415,world\n+9416,world\n+9417,world\n+9418,world\n+9419,world\n+9420,world\n+9421,world\n+9422,world\n+9423,world\n+9424,world\n+9425,world\n+9426,world\n+9427,world\n+9428,world\n+9429,world\n+9430,world\n+9431,world\n+9432,world\n+9433,world\n+9434,world\n+9435,world\n+9436,world\n+9437,world\n+9438,world\n+9439,world\n+9440,world\n+9441,world\n+9442,world\n+9443,world\n+9444,world\n+9445,world\n+9446,world\n+9447,world\n+9448,world\n+9449,world\n+9450,world\n+9451,world\n+9452,world\n+9453,world\n+9454,world\n+9455,world\n+9456,world\n+9457,world\n+9458,world\n+9459,world\n+9460,world\n+9461,world\n+9462,world\n+9463,world\n+9464,world\n+9465,world\n+9466,world\n+9467,world\n+9468,world\n+9469,world\n+9470,world\n+9471,world\n+9472,world\n+9473,world\n+9474,world\n+9475,world\n+9476,world\n+9477,world\n+9478,world\n+9479,world\n+9480,world\n+9481,world\n+9482,world\n+9483,world\n+9484,world\n+9485,world\n+9486,world\n+9487,world\n+9488,world\n+9489,world\n+9490,world\n+9491,world\n+9492,world\n+9493,world\n+9494,world\n+9495,world\n+9496,world\n+9497,world\n+9498,world\n+9499,world\n+9500,world\n+9501,world\n+9502,world\n+9503,world\n+9504,world\n+9505,world\n+9506,world\n+9507,world\n+9508,world\n+9509,world\n+9510,world\n+9511,world\n+9512,world\n+9513,world\n+9514,world\n+9515,world\n+9516,world\n+9517,world\n+9518,world\n+9519,world\n+9520,world\n+9521,world\n+9522,world\n+9523,world\n+9524,world\n+9525,world\n+9526,world\n+9527,world\n+9528,world\n+9529,world\n+9530,world\n+9531,world\n+9532,world\n+9533,world\n+9534,world\n+9535,world\n+9536,world\n+9537,world\n+9538,world\n+9539,world\n+9540,world\n+9541,world\n+9542,world\n+9543,world\n+9544,world\n+9545,world\n+9546,world\n+9547,world\n+9548,world\n+9549,world\n+9550,world\n+9551,world\n+9552,world\n+9553,world\n+9554,world\n+9555,world\n+9556,world\n+9557,world\n+9558,world\n+9559,world\n+9560,world\n+9561,world\n+9562,world\n+9563,world\n+9564,world\n+9565,world\n+9566,world\n+9567,world\n+9568,world\n+9569,world\n+9570,world\n+9571,world\n+9572,world\n+9573,world\n+9574,world\n+9575,world\n+9576,world\n+9577,world\n+9578,world\n+9579,world\n+9580,world\n+9581,world\n+9582,world\n+9583,world\n+9584,world\n+9585,world\n+9586,world\n+9587,world\n+9588,world\n+9589,world\n+9590,world\n+9591,world\n+9592,world\n+9593,world\n+9594,world\n+9595,world\n+9596,world\n+9597,world\n+9598,world\n+9599,world\n+9600,world\n+9601,world\n+9602,world\n+9603,world\n+9604,world\n+9605,world\n+9606,world\n+9607,world\n+9608,world\n+9609,world\n+9610,world\n+9611,world\n+9612,world\n+9613,world\n+9614,world\n+9615,world\n+9616,world\n+9617,world\n+9618,world\n+9619,world\n+9620,world\n+9621,world\n+9622,world\n+9623,world\n+9624,world\n+9625,world\n+9626,world\n+9627,world\n+9628,world\n+9629,world\n+9630,world\n+9631,world\n+9632,world\n+9633,world\n+9634,world\n+9635,world\n+9636,world\n+9637,world\n+9638,world\n+9639,world\n+9640,world\n+9641,world\n+9642,world\n+9643,world\n+9644,world\n+9645,world\n+9646,world\n+9647,world\n+9648,world\n+9649,world\n+9650,world\n+9651,world\n+9652,world\n+9653,world\n+9654,world\n+9655,world\n+9656,world\n+9657,world\n+9658,world\n+9659,world\n+9660,world\n+9661,world\n+9662,world\n+9663,world\n+9664,world\n+9665,world\n+9666,world\n+9667,world\n+9668,world\n+9669,world\n+9670,world\n+9671,world\n+9672,world\n+9673,world\n+9674,world\n+9675,world\n+9676,world\n+9677,world\n+9678,world\n+9679,world\n+9680,world\n+9681,world\n+9682,world\n+9683,world\n+9684,world\n+9685,world\n+9686,world\n+9687,world\n+9688,world\n+9689,world\n+9690,world\n+9691,world\n+9692,world\n+9693,world\n+9694,world\n+9695,world\n+9696,world\n+9697,world\n+9698,world\n+9699,world\n+9700,world\n+9701,world\n+9702,world\n+9703,world\n+9704,world\n+9705,world\n+9706,world\n+9707,world\n+9708,world\n+9709,world\n+9710,world\n+9711,world\n+9712,world\n+9713,world\n+9714,world\n+9715,world\n+9716,world\n+9717,world\n+9718,world\n+9719,world\n+9720,world\n+9721,world\n+9722,world\n+9723,world\n+9724,world\n+9725,world\n+9726,world\n+9727,world\n+9728,world\n+9729,world\n+9730,world\n+9731,world\n+9732,world\n+9733,world\n+9734,world\n+9735,world\n+9736,world\n+9737,world\n+9738,world\n+9739,world\n+9740,world\n+9741,world\n+9742,world\n+9743,world\n+9744,world\n+9745,world\n+9746,world\n+9747,world\n+9748,world\n+9749,world\n+9750,world\n+9751,world\n+9752,world\n+9753,world\n+9754,world\n+9755,world\n+9756,world\n+9757,world\n+9758,world\n+9759,world\n+9760,world\n+9761,world\n+9762,world\n+9763,world\n+9764,world\n+9765,world\n+9766,world\n+9767,world\n+9768,world\n+9769,world\n+9770,world\n+9771,world\n+9772,world\n+9773,world\n+9774,world\n+9775,world\n+9776,world\n+9777,world\n+9778,world\n+9779,world\n+9780,world\n+9781,world\n+9782,world\n+9783,world\n+9784,world\n+9785,world\n+9786,world\n+9787,world\n+9788,world\n+9789,world\n+9790,world\n+9791,world\n+9792,world\n+9793,world\n+9794,world\n+9795,world\n+9796,world\n+9797,world\n+9798,world\n+9799,world\n+9800,world\n+9801,world\n+9802,world\n+9803,world\n+9804,world\n+9805,world\n+9806,world\n+9807,world\n+9808,world\n+9809,world\n+9810,world\n+9811,world\n+9812,world\n+9813,world\n+9814,world\n+9815,world\n+9816,world\n+9817,world\n+9818,world\n+9819,world\n+9820,world\n+9821,world\n+9822,world\n+9823,world\n+9824,world\n+9825,world\n+9826,world\n+9827,world\n+9828,world\n+9829,world\n+9830,world\n+9831,world\n+9832,world\n+9833,world\n+9834,world\n+9835,world\n+9836,world\n+9837,world\n+9838,world\n+9839,world\n+9840,world\n+9841,world\n+9842,world\n+9843,world\n+9844,world\n+9845,world\n+9846,world\n+9847,world\n+9848,world\n+9849,world\n+9850,world\n+9851,world\n+9852,world\n+9853,world\n+9854,world\n+9855,world\n+9856,world\n+9857,world\n+9858,world\n+9859,world\n+9860,world\n+9861,world\n+9862,world\n+9863,world\n+9864,world\n+9865,world\n+9866,world\n+9867,world\n+9868,world\n+9869,world\n+9870,world\n+9871,world\n+9872,world\n+9873,world\n+9874,world\n+9875,world\n+9876,world\n+9877,world\n+9878,world\n+9879,world\n+9880,world\n+9881,world\n+9882,world\n+9883,world\n+9884,world\n+9885,world\n+9886,world\n+9887,world\n+9888,world\n+9889,world\n+9890,world\n+9891,world\n+9892,world\n+9893,world\n+9894,world\n+9895,world\n+9896,world\n+9897,world\n+9898,world\n+9899,world\n+9900,world\n+9901,world\n+9902,world\n+9903,world\n+9904,world\n+9905,world\n+9906,world\n+9907,world\n+9908,world\n+9909,world\n+9910,world\n+9911,world\n+9912,world\n+9913,world\n+9914,world\n+9915,world\n+9916,world\n+9917,world\n+9918,world\n+9919,world\n+9920,world\n+9921,world\n+9922,world\n+9923,world\n+9924,world\n+9925,world\n+9926,world\n+9927,world\n+9928,world\n+9929,world\n+9930,world\n+9931,world\n+9932,world\n+9933,world\n+9934,world\n+9935,world\n+9936,world\n+9937,world\n+9938,world\n+9939,world\n+9940,world\n+9941,world\n+9942,world\n+9943,world\n+9944,world\n+9945,world\n+9946,world\n+9947,world\n+9948,world\n+9949,world\n+9950,world\n+9951,world\n+9952,world\n+9953,world\n+9954,world\n+9955,world\n+9956,world\n+9957,world\n+9958,world\n+9959,world\n+9960,world\n+9961,world\n+9962,world\n+9963,world\n+9964,world\n+9965,world\n+9966,world\n+9967,world\n+9968,world\n+9969,world\n+9970,world\n+9971,world\n+9972,world\n+9973,world\n+9974,world\n+9975,world\n+9976,world\n+9977,world\n+9978,world\n+9979,world\n+9980,world\n+9981,world\n+9982,world\n+9983,world\n+9984,world\n+9985,world\n+9986,world\n+9987,world\n+9988,world\n+9989,world\n+9990,world\n+9991,world\n+9992,world\n+9993,world\n+9994,world\n+9995,world\n+9996,world\n+9997,world\n+9998,world\n+9999,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+hello,world\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\ndiff --git a/data/csv/error/mixedtypes_rn.csv b/data/csv/error/mixedtypes_rn.csv\nnew file mode 100644\nindex 000000000000..551e6d9dfc47\n--- /dev/null\n+++ b/data/csv/error/mixedtypes_rn.csv\n@@ -0,0 +1,13401 @@\n+i,'world'\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+33,world\r\n+34,world\r\n+35,world\r\n+36,world\r\n+37,world\r\n+38,world\r\n+39,world\r\n+40,world\r\n+41,world\r\n+42,world\r\n+43,world\r\n+44,world\r\n+45,world\r\n+46,world\r\n+47,world\r\n+48,world\r\n+49,world\r\n+50,world\r\n+51,world\r\n+52,world\r\n+53,world\r\n+54,world\r\n+55,world\r\n+56,world\r\n+57,world\r\n+58,world\r\n+59,world\r\n+60,world\r\n+61,world\r\n+62,world\r\n+63,world\r\n+64,world\r\n+65,world\r\n+66,world\r\n+67,world\r\n+68,world\r\n+69,world\r\n+70,world\r\n+71,world\r\n+72,world\r\n+73,world\r\n+74,world\r\n+75,world\r\n+76,world\r\n+77,world\r\n+78,world\r\n+79,world\r\n+80,world\r\n+81,world\r\n+82,world\r\n+83,world\r\n+84,world\r\n+85,world\r\n+86,world\r\n+87,world\r\n+88,world\r\n+89,world\r\n+90,world\r\n+91,world\r\n+92,world\r\n+93,world\r\n+94,world\r\n+95,world\r\n+96,world\r\n+97,world\r\n+98,world\r\n+99,world\r\n+100,world\r\n+101,world\r\n+102,world\r\n+103,world\r\n+104,world\r\n+105,world\r\n+106,world\r\n+107,world\r\n+108,world\r\n+109,world\r\n+110,world\r\n+111,world\r\n+112,world\r\n+113,world\r\n+114,world\r\n+115,world\r\n+116,world\r\n+117,world\r\n+118,world\r\n+119,world\r\n+120,world\r\n+121,world\r\n+122,world\r\n+123,world\r\n+124,world\r\n+125,world\r\n+126,world\r\n+127,world\r\n+128,world\r\n+129,world\r\n+130,world\r\n+131,world\r\n+132,world\r\n+133,world\r\n+134,world\r\n+135,world\r\n+136,world\r\n+137,world\r\n+138,world\r\n+139,world\r\n+140,world\r\n+141,world\r\n+142,world\r\n+143,world\r\n+144,world\r\n+145,world\r\n+146,world\r\n+147,world\r\n+148,world\r\n+149,world\r\n+150,world\r\n+151,world\r\n+152,world\r\n+153,world\r\n+154,world\r\n+155,world\r\n+156,world\r\n+157,world\r\n+158,world\r\n+159,world\r\n+160,world\r\n+161,world\r\n+162,world\r\n+163,world\r\n+164,world\r\n+165,world\r\n+166,world\r\n+167,world\r\n+168,world\r\n+169,world\r\n+170,world\r\n+171,world\r\n+172,world\r\n+173,world\r\n+174,world\r\n+175,world\r\n+176,world\r\n+177,world\r\n+178,world\r\n+179,world\r\n+180,world\r\n+181,world\r\n+182,world\r\n+183,world\r\n+184,world\r\n+185,world\r\n+186,world\r\n+187,world\r\n+188,world\r\n+189,world\r\n+190,world\r\n+191,world\r\n+192,world\r\n+193,world\r\n+194,world\r\n+195,world\r\n+196,world\r\n+197,world\r\n+198,world\r\n+199,world\r\n+200,world\r\n+201,world\r\n+202,world\r\n+203,world\r\n+204,world\r\n+205,world\r\n+206,world\r\n+207,world\r\n+208,world\r\n+209,world\r\n+210,world\r\n+211,world\r\n+212,world\r\n+213,world\r\n+214,world\r\n+215,world\r\n+216,world\r\n+217,world\r\n+218,world\r\n+219,world\r\n+220,world\r\n+221,world\r\n+222,world\r\n+223,world\r\n+224,world\r\n+225,world\r\n+226,world\r\n+227,world\r\n+228,world\r\n+229,world\r\n+230,world\r\n+231,world\r\n+232,world\r\n+233,world\r\n+234,world\r\n+235,world\r\n+236,world\r\n+237,world\r\n+238,world\r\n+239,world\r\n+240,world\r\n+241,world\r\n+242,world\r\n+243,world\r\n+244,world\r\n+245,world\r\n+246,world\r\n+247,world\r\n+248,world\r\n+249,world\r\n+250,world\r\n+251,world\r\n+252,world\r\n+253,world\r\n+254,world\r\n+255,world\r\n+256,world\r\n+257,world\r\n+258,world\r\n+259,world\r\n+260,world\r\n+261,world\r\n+262,world\r\n+263,world\r\n+264,world\r\n+265,world\r\n+266,world\r\n+267,world\r\n+268,world\r\n+269,world\r\n+270,world\r\n+271,world\r\n+272,world\r\n+273,world\r\n+274,world\r\n+275,world\r\n+276,world\r\n+277,world\r\n+278,world\r\n+279,world\r\n+280,world\r\n+281,world\r\n+282,world\r\n+283,world\r\n+284,world\r\n+285,world\r\n+286,world\r\n+287,world\r\n+288,world\r\n+289,world\r\n+290,world\r\n+291,world\r\n+292,world\r\n+293,world\r\n+294,world\r\n+295,world\r\n+296,world\r\n+297,world\r\n+298,world\r\n+299,world\r\n+300,world\r\n+301,world\r\n+302,world\r\n+303,world\r\n+304,world\r\n+305,world\r\n+306,world\r\n+307,world\r\n+308,world\r\n+309,world\r\n+310,world\r\n+311,world\r\n+312,world\r\n+313,world\r\n+314,world\r\n+315,world\r\n+316,world\r\n+317,world\r\n+318,world\r\n+319,world\r\n+320,world\r\n+321,world\r\n+322,world\r\n+323,world\r\n+324,world\r\n+325,world\r\n+326,world\r\n+327,world\r\n+328,world\r\n+329,world\r\n+330,world\r\n+331,world\r\n+332,world\r\n+333,world\r\n+334,world\r\n+335,world\r\n+336,world\r\n+337,world\r\n+338,world\r\n+339,world\r\n+340,world\r\n+341,world\r\n+342,world\r\n+343,world\r\n+344,world\r\n+345,world\r\n+346,world\r\n+347,world\r\n+348,world\r\n+349,world\r\n+350,world\r\n+351,world\r\n+352,world\r\n+353,world\r\n+354,world\r\n+355,world\r\n+356,world\r\n+357,world\r\n+358,world\r\n+359,world\r\n+360,world\r\n+361,world\r\n+362,world\r\n+363,world\r\n+364,world\r\n+365,world\r\n+366,world\r\n+367,world\r\n+368,world\r\n+369,world\r\n+370,world\r\n+371,world\r\n+372,world\r\n+373,world\r\n+374,world\r\n+375,world\r\n+376,world\r\n+377,world\r\n+378,world\r\n+379,world\r\n+380,world\r\n+381,world\r\n+382,world\r\n+383,world\r\n+384,world\r\n+385,world\r\n+386,world\r\n+387,world\r\n+388,world\r\n+389,world\r\n+390,world\r\n+391,world\r\n+392,world\r\n+393,world\r\n+394,world\r\n+395,world\r\n+396,world\r\n+397,world\r\n+398,world\r\n+399,world\r\n+400,world\r\n+401,world\r\n+402,world\r\n+403,world\r\n+404,world\r\n+405,world\r\n+406,world\r\n+407,world\r\n+408,world\r\n+409,world\r\n+410,world\r\n+411,world\r\n+412,world\r\n+413,world\r\n+414,world\r\n+415,world\r\n+416,world\r\n+417,world\r\n+418,world\r\n+419,world\r\n+420,world\r\n+421,world\r\n+422,world\r\n+423,world\r\n+424,world\r\n+425,world\r\n+426,world\r\n+427,world\r\n+428,world\r\n+429,world\r\n+430,world\r\n+431,world\r\n+432,world\r\n+433,world\r\n+434,world\r\n+435,world\r\n+436,world\r\n+437,world\r\n+438,world\r\n+439,world\r\n+440,world\r\n+441,world\r\n+442,world\r\n+443,world\r\n+444,world\r\n+445,world\r\n+446,world\r\n+447,world\r\n+448,world\r\n+449,world\r\n+450,world\r\n+451,world\r\n+452,world\r\n+453,world\r\n+454,world\r\n+455,world\r\n+456,world\r\n+457,world\r\n+458,world\r\n+459,world\r\n+460,world\r\n+461,world\r\n+462,world\r\n+463,world\r\n+464,world\r\n+465,world\r\n+466,world\r\n+467,world\r\n+468,world\r\n+469,world\r\n+470,world\r\n+471,world\r\n+472,world\r\n+473,world\r\n+474,world\r\n+475,world\r\n+476,world\r\n+477,world\r\n+478,world\r\n+479,world\r\n+480,world\r\n+481,world\r\n+482,world\r\n+483,world\r\n+484,world\r\n+485,world\r\n+486,world\r\n+487,world\r\n+488,world\r\n+489,world\r\n+490,world\r\n+491,world\r\n+492,world\r\n+493,world\r\n+494,world\r\n+495,world\r\n+496,world\r\n+497,world\r\n+498,world\r\n+499,world\r\n+500,world\r\n+501,world\r\n+502,world\r\n+503,world\r\n+504,world\r\n+505,world\r\n+506,world\r\n+507,world\r\n+508,world\r\n+509,world\r\n+510,world\r\n+511,world\r\n+512,world\r\n+513,world\r\n+514,world\r\n+515,world\r\n+516,world\r\n+517,world\r\n+518,world\r\n+519,world\r\n+520,world\r\n+521,world\r\n+522,world\r\n+523,world\r\n+524,world\r\n+525,world\r\n+526,world\r\n+527,world\r\n+528,world\r\n+529,world\r\n+530,world\r\n+531,world\r\n+532,world\r\n+533,world\r\n+534,world\r\n+535,world\r\n+536,world\r\n+537,world\r\n+538,world\r\n+539,world\r\n+540,world\r\n+541,world\r\n+542,world\r\n+543,world\r\n+544,world\r\n+545,world\r\n+546,world\r\n+547,world\r\n+548,world\r\n+549,world\r\n+550,world\r\n+551,world\r\n+552,world\r\n+553,world\r\n+554,world\r\n+555,world\r\n+556,world\r\n+557,world\r\n+558,world\r\n+559,world\r\n+560,world\r\n+561,world\r\n+562,world\r\n+563,world\r\n+564,world\r\n+565,world\r\n+566,world\r\n+567,world\r\n+568,world\r\n+569,world\r\n+570,world\r\n+571,world\r\n+572,world\r\n+573,world\r\n+574,world\r\n+575,world\r\n+576,world\r\n+577,world\r\n+578,world\r\n+579,world\r\n+580,world\r\n+581,world\r\n+582,world\r\n+583,world\r\n+584,world\r\n+585,world\r\n+586,world\r\n+587,world\r\n+588,world\r\n+589,world\r\n+590,world\r\n+591,world\r\n+592,world\r\n+593,world\r\n+594,world\r\n+595,world\r\n+596,world\r\n+597,world\r\n+598,world\r\n+599,world\r\n+600,world\r\n+601,world\r\n+602,world\r\n+603,world\r\n+604,world\r\n+605,world\r\n+606,world\r\n+607,world\r\n+608,world\r\n+609,world\r\n+610,world\r\n+611,world\r\n+612,world\r\n+613,world\r\n+614,world\r\n+615,world\r\n+616,world\r\n+617,world\r\n+618,world\r\n+619,world\r\n+620,world\r\n+621,world\r\n+622,world\r\n+623,world\r\n+624,world\r\n+625,world\r\n+626,world\r\n+627,world\r\n+628,world\r\n+629,world\r\n+630,world\r\n+631,world\r\n+632,world\r\n+633,world\r\n+634,world\r\n+635,world\r\n+636,world\r\n+637,world\r\n+638,world\r\n+639,world\r\n+640,world\r\n+641,world\r\n+642,world\r\n+643,world\r\n+644,world\r\n+645,world\r\n+646,world\r\n+647,world\r\n+648,world\r\n+649,world\r\n+650,world\r\n+651,world\r\n+652,world\r\n+653,world\r\n+654,world\r\n+655,world\r\n+656,world\r\n+657,world\r\n+658,world\r\n+659,world\r\n+660,world\r\n+661,world\r\n+662,world\r\n+663,world\r\n+664,world\r\n+665,world\r\n+666,world\r\n+667,world\r\n+668,world\r\n+669,world\r\n+670,world\r\n+671,world\r\n+672,world\r\n+673,world\r\n+674,world\r\n+675,world\r\n+676,world\r\n+677,world\r\n+678,world\r\n+679,world\r\n+680,world\r\n+681,world\r\n+682,world\r\n+683,world\r\n+684,world\r\n+685,world\r\n+686,world\r\n+687,world\r\n+688,world\r\n+689,world\r\n+690,world\r\n+691,world\r\n+692,world\r\n+693,world\r\n+694,world\r\n+695,world\r\n+696,world\r\n+697,world\r\n+698,world\r\n+699,world\r\n+700,world\r\n+701,world\r\n+702,world\r\n+703,world\r\n+704,world\r\n+705,world\r\n+706,world\r\n+707,world\r\n+708,world\r\n+709,world\r\n+710,world\r\n+711,world\r\n+712,world\r\n+713,world\r\n+714,world\r\n+715,world\r\n+716,world\r\n+717,world\r\n+718,world\r\n+719,world\r\n+720,world\r\n+721,world\r\n+722,world\r\n+723,world\r\n+724,world\r\n+725,world\r\n+726,world\r\n+727,world\r\n+728,world\r\n+729,world\r\n+730,world\r\n+731,world\r\n+732,world\r\n+733,world\r\n+734,world\r\n+735,world\r\n+736,world\r\n+737,world\r\n+738,world\r\n+739,world\r\n+740,world\r\n+741,world\r\n+742,world\r\n+743,world\r\n+744,world\r\n+745,world\r\n+746,world\r\n+747,world\r\n+748,world\r\n+749,world\r\n+750,world\r\n+751,world\r\n+752,world\r\n+753,world\r\n+754,world\r\n+755,world\r\n+756,world\r\n+757,world\r\n+758,world\r\n+759,world\r\n+760,world\r\n+761,world\r\n+762,world\r\n+763,world\r\n+764,world\r\n+765,world\r\n+766,world\r\n+767,world\r\n+768,world\r\n+769,world\r\n+770,world\r\n+771,world\r\n+772,world\r\n+773,world\r\n+774,world\r\n+775,world\r\n+776,world\r\n+777,world\r\n+778,world\r\n+779,world\r\n+780,world\r\n+781,world\r\n+782,world\r\n+783,world\r\n+784,world\r\n+785,world\r\n+786,world\r\n+787,world\r\n+788,world\r\n+789,world\r\n+790,world\r\n+791,world\r\n+792,world\r\n+793,world\r\n+794,world\r\n+795,world\r\n+796,world\r\n+797,world\r\n+798,world\r\n+799,world\r\n+800,world\r\n+801,world\r\n+802,world\r\n+803,world\r\n+804,world\r\n+805,world\r\n+806,world\r\n+807,world\r\n+808,world\r\n+809,world\r\n+810,world\r\n+811,world\r\n+812,world\r\n+813,world\r\n+814,world\r\n+815,world\r\n+816,world\r\n+817,world\r\n+818,world\r\n+819,world\r\n+820,world\r\n+821,world\r\n+822,world\r\n+823,world\r\n+824,world\r\n+825,world\r\n+826,world\r\n+827,world\r\n+828,world\r\n+829,world\r\n+830,world\r\n+831,world\r\n+832,world\r\n+833,world\r\n+834,world\r\n+835,world\r\n+836,world\r\n+837,world\r\n+838,world\r\n+839,world\r\n+840,world\r\n+841,world\r\n+842,world\r\n+843,world\r\n+844,world\r\n+845,world\r\n+846,world\r\n+847,world\r\n+848,world\r\n+849,world\r\n+850,world\r\n+851,world\r\n+852,world\r\n+853,world\r\n+854,world\r\n+855,world\r\n+856,world\r\n+857,world\r\n+858,world\r\n+859,world\r\n+860,world\r\n+861,world\r\n+862,world\r\n+863,world\r\n+864,world\r\n+865,world\r\n+866,world\r\n+867,world\r\n+868,world\r\n+869,world\r\n+870,world\r\n+871,world\r\n+872,world\r\n+873,world\r\n+874,world\r\n+875,world\r\n+876,world\r\n+877,world\r\n+878,world\r\n+879,world\r\n+880,world\r\n+881,world\r\n+882,world\r\n+883,world\r\n+884,world\r\n+885,world\r\n+886,world\r\n+887,world\r\n+888,world\r\n+889,world\r\n+890,world\r\n+891,world\r\n+892,world\r\n+893,world\r\n+894,world\r\n+895,world\r\n+896,world\r\n+897,world\r\n+898,world\r\n+899,world\r\n+900,world\r\n+901,world\r\n+902,world\r\n+903,world\r\n+904,world\r\n+905,world\r\n+906,world\r\n+907,world\r\n+908,world\r\n+909,world\r\n+910,world\r\n+911,world\r\n+912,world\r\n+913,world\r\n+914,world\r\n+915,world\r\n+916,world\r\n+917,world\r\n+918,world\r\n+919,world\r\n+920,world\r\n+921,world\r\n+922,world\r\n+923,world\r\n+924,world\r\n+925,world\r\n+926,world\r\n+927,world\r\n+928,world\r\n+929,world\r\n+930,world\r\n+931,world\r\n+932,world\r\n+933,world\r\n+934,world\r\n+935,world\r\n+936,world\r\n+937,world\r\n+938,world\r\n+939,world\r\n+940,world\r\n+941,world\r\n+942,world\r\n+943,world\r\n+944,world\r\n+945,world\r\n+946,world\r\n+947,world\r\n+948,world\r\n+949,world\r\n+950,world\r\n+951,world\r\n+952,world\r\n+953,world\r\n+954,world\r\n+955,world\r\n+956,world\r\n+957,world\r\n+958,world\r\n+959,world\r\n+960,world\r\n+961,world\r\n+962,world\r\n+963,world\r\n+964,world\r\n+965,world\r\n+966,world\r\n+967,world\r\n+968,world\r\n+969,world\r\n+970,world\r\n+971,world\r\n+972,world\r\n+973,world\r\n+974,world\r\n+975,world\r\n+976,world\r\n+977,world\r\n+978,world\r\n+979,world\r\n+980,world\r\n+981,world\r\n+982,world\r\n+983,world\r\n+984,world\r\n+985,world\r\n+986,world\r\n+987,world\r\n+988,world\r\n+989,world\r\n+990,world\r\n+991,world\r\n+992,world\r\n+993,world\r\n+994,world\r\n+995,world\r\n+996,world\r\n+997,world\r\n+998,world\r\n+999,world\r\n+1000,world\r\n+1001,world\r\n+1002,world\r\n+1003,world\r\n+1004,world\r\n+1005,world\r\n+1006,world\r\n+1007,world\r\n+1008,world\r\n+1009,world\r\n+1010,world\r\n+1011,world\r\n+1012,world\r\n+1013,world\r\n+1014,world\r\n+1015,world\r\n+1016,world\r\n+1017,world\r\n+1018,world\r\n+1019,world\r\n+1020,world\r\n+1021,world\r\n+1022,world\r\n+1023,world\r\n+1024,world\r\n+1025,world\r\n+1026,world\r\n+1027,world\r\n+1028,world\r\n+1029,world\r\n+1030,world\r\n+1031,world\r\n+1032,world\r\n+1033,world\r\n+1034,world\r\n+1035,world\r\n+1036,world\r\n+1037,world\r\n+1038,world\r\n+1039,world\r\n+1040,world\r\n+1041,world\r\n+1042,world\r\n+1043,world\r\n+1044,world\r\n+1045,world\r\n+1046,world\r\n+1047,world\r\n+1048,world\r\n+1049,world\r\n+1050,world\r\n+1051,world\r\n+1052,world\r\n+1053,world\r\n+1054,world\r\n+1055,world\r\n+1056,world\r\n+1057,world\r\n+1058,world\r\n+1059,world\r\n+1060,world\r\n+1061,world\r\n+1062,world\r\n+1063,world\r\n+1064,world\r\n+1065,world\r\n+1066,world\r\n+1067,world\r\n+1068,world\r\n+1069,world\r\n+1070,world\r\n+1071,world\r\n+1072,world\r\n+1073,world\r\n+1074,world\r\n+1075,world\r\n+1076,world\r\n+1077,world\r\n+1078,world\r\n+1079,world\r\n+1080,world\r\n+1081,world\r\n+1082,world\r\n+1083,world\r\n+1084,world\r\n+1085,world\r\n+1086,world\r\n+1087,world\r\n+1088,world\r\n+1089,world\r\n+1090,world\r\n+1091,world\r\n+1092,world\r\n+1093,world\r\n+1094,world\r\n+1095,world\r\n+1096,world\r\n+1097,world\r\n+1098,world\r\n+1099,world\r\n+1100,world\r\n+1101,world\r\n+1102,world\r\n+1103,world\r\n+1104,world\r\n+1105,world\r\n+1106,world\r\n+1107,world\r\n+1108,world\r\n+1109,world\r\n+1110,world\r\n+1111,world\r\n+1112,world\r\n+1113,world\r\n+1114,world\r\n+1115,world\r\n+1116,world\r\n+1117,world\r\n+1118,world\r\n+1119,world\r\n+1120,world\r\n+1121,world\r\n+1122,world\r\n+1123,world\r\n+1124,world\r\n+1125,world\r\n+1126,world\r\n+1127,world\r\n+1128,world\r\n+1129,world\r\n+1130,world\r\n+1131,world\r\n+1132,world\r\n+1133,world\r\n+1134,world\r\n+1135,world\r\n+1136,world\r\n+1137,world\r\n+1138,world\r\n+1139,world\r\n+1140,world\r\n+1141,world\r\n+1142,world\r\n+1143,world\r\n+1144,world\r\n+1145,world\r\n+1146,world\r\n+1147,world\r\n+1148,world\r\n+1149,world\r\n+1150,world\r\n+1151,world\r\n+1152,world\r\n+1153,world\r\n+1154,world\r\n+1155,world\r\n+1156,world\r\n+1157,world\r\n+1158,world\r\n+1159,world\r\n+1160,world\r\n+1161,world\r\n+1162,world\r\n+1163,world\r\n+1164,world\r\n+1165,world\r\n+1166,world\r\n+1167,world\r\n+1168,world\r\n+1169,world\r\n+1170,world\r\n+1171,world\r\n+1172,world\r\n+1173,world\r\n+1174,world\r\n+1175,world\r\n+1176,world\r\n+1177,world\r\n+1178,world\r\n+1179,world\r\n+1180,world\r\n+1181,world\r\n+1182,world\r\n+1183,world\r\n+1184,world\r\n+1185,world\r\n+1186,world\r\n+1187,world\r\n+1188,world\r\n+1189,world\r\n+1190,world\r\n+1191,world\r\n+1192,world\r\n+1193,world\r\n+1194,world\r\n+1195,world\r\n+1196,world\r\n+1197,world\r\n+1198,world\r\n+1199,world\r\n+1200,world\r\n+1201,world\r\n+1202,world\r\n+1203,world\r\n+1204,world\r\n+1205,world\r\n+1206,world\r\n+1207,world\r\n+1208,world\r\n+1209,world\r\n+1210,world\r\n+1211,world\r\n+1212,world\r\n+1213,world\r\n+1214,world\r\n+1215,world\r\n+1216,world\r\n+1217,world\r\n+1218,world\r\n+1219,world\r\n+1220,world\r\n+1221,world\r\n+1222,world\r\n+1223,world\r\n+1224,world\r\n+1225,world\r\n+1226,world\r\n+1227,world\r\n+1228,world\r\n+1229,world\r\n+1230,world\r\n+1231,world\r\n+1232,world\r\n+1233,world\r\n+1234,world\r\n+1235,world\r\n+1236,world\r\n+1237,world\r\n+1238,world\r\n+1239,world\r\n+1240,world\r\n+1241,world\r\n+1242,world\r\n+1243,world\r\n+1244,world\r\n+1245,world\r\n+1246,world\r\n+1247,world\r\n+1248,world\r\n+1249,world\r\n+1250,world\r\n+1251,world\r\n+1252,world\r\n+1253,world\r\n+1254,world\r\n+1255,world\r\n+1256,world\r\n+1257,world\r\n+1258,world\r\n+1259,world\r\n+1260,world\r\n+1261,world\r\n+1262,world\r\n+1263,world\r\n+1264,world\r\n+1265,world\r\n+1266,world\r\n+1267,world\r\n+1268,world\r\n+1269,world\r\n+1270,world\r\n+1271,world\r\n+1272,world\r\n+1273,world\r\n+1274,world\r\n+1275,world\r\n+1276,world\r\n+1277,world\r\n+1278,world\r\n+1279,world\r\n+1280,world\r\n+1281,world\r\n+1282,world\r\n+1283,world\r\n+1284,world\r\n+1285,world\r\n+1286,world\r\n+1287,world\r\n+1288,world\r\n+1289,world\r\n+1290,world\r\n+1291,world\r\n+1292,world\r\n+1293,world\r\n+1294,world\r\n+1295,world\r\n+1296,world\r\n+1297,world\r\n+1298,world\r\n+1299,world\r\n+1300,world\r\n+1301,world\r\n+1302,world\r\n+1303,world\r\n+1304,world\r\n+1305,world\r\n+1306,world\r\n+1307,world\r\n+1308,world\r\n+1309,world\r\n+1310,world\r\n+1311,world\r\n+1312,world\r\n+1313,world\r\n+1314,world\r\n+1315,world\r\n+1316,world\r\n+1317,world\r\n+1318,world\r\n+1319,world\r\n+1320,world\r\n+1321,world\r\n+1322,world\r\n+1323,world\r\n+1324,world\r\n+1325,world\r\n+1326,world\r\n+1327,world\r\n+1328,world\r\n+1329,world\r\n+1330,world\r\n+1331,world\r\n+1332,world\r\n+1333,world\r\n+1334,world\r\n+1335,world\r\n+1336,world\r\n+1337,world\r\n+1338,world\r\n+1339,world\r\n+1340,world\r\n+1341,world\r\n+1342,world\r\n+1343,world\r\n+1344,world\r\n+1345,world\r\n+1346,world\r\n+1347,world\r\n+1348,world\r\n+1349,world\r\n+1350,world\r\n+1351,world\r\n+1352,world\r\n+1353,world\r\n+1354,world\r\n+1355,world\r\n+1356,world\r\n+1357,world\r\n+1358,world\r\n+1359,world\r\n+1360,world\r\n+1361,world\r\n+1362,world\r\n+1363,world\r\n+1364,world\r\n+1365,world\r\n+1366,world\r\n+1367,world\r\n+1368,world\r\n+1369,world\r\n+1370,world\r\n+1371,world\r\n+1372,world\r\n+1373,world\r\n+1374,world\r\n+1375,world\r\n+1376,world\r\n+1377,world\r\n+1378,world\r\n+1379,world\r\n+1380,world\r\n+1381,world\r\n+1382,world\r\n+1383,world\r\n+1384,world\r\n+1385,world\r\n+1386,world\r\n+1387,world\r\n+1388,world\r\n+1389,world\r\n+1390,world\r\n+1391,world\r\n+1392,world\r\n+1393,world\r\n+1394,world\r\n+1395,world\r\n+1396,world\r\n+1397,world\r\n+1398,world\r\n+1399,world\r\n+1400,world\r\n+1401,world\r\n+1402,world\r\n+1403,world\r\n+1404,world\r\n+1405,world\r\n+1406,world\r\n+1407,world\r\n+1408,world\r\n+1409,world\r\n+1410,world\r\n+1411,world\r\n+1412,world\r\n+1413,world\r\n+1414,world\r\n+1415,world\r\n+1416,world\r\n+1417,world\r\n+1418,world\r\n+1419,world\r\n+1420,world\r\n+1421,world\r\n+1422,world\r\n+1423,world\r\n+1424,world\r\n+1425,world\r\n+1426,world\r\n+1427,world\r\n+1428,world\r\n+1429,world\r\n+1430,world\r\n+1431,world\r\n+1432,world\r\n+1433,world\r\n+1434,world\r\n+1435,world\r\n+1436,world\r\n+1437,world\r\n+1438,world\r\n+1439,world\r\n+1440,world\r\n+1441,world\r\n+1442,world\r\n+1443,world\r\n+1444,world\r\n+1445,world\r\n+1446,world\r\n+1447,world\r\n+1448,world\r\n+1449,world\r\n+1450,world\r\n+1451,world\r\n+1452,world\r\n+1453,world\r\n+1454,world\r\n+1455,world\r\n+1456,world\r\n+1457,world\r\n+1458,world\r\n+1459,world\r\n+1460,world\r\n+1461,world\r\n+1462,world\r\n+1463,world\r\n+1464,world\r\n+1465,world\r\n+1466,world\r\n+1467,world\r\n+1468,world\r\n+1469,world\r\n+1470,world\r\n+1471,world\r\n+1472,world\r\n+1473,world\r\n+1474,world\r\n+1475,world\r\n+1476,world\r\n+1477,world\r\n+1478,world\r\n+1479,world\r\n+1480,world\r\n+1481,world\r\n+1482,world\r\n+1483,world\r\n+1484,world\r\n+1485,world\r\n+1486,world\r\n+1487,world\r\n+1488,world\r\n+1489,world\r\n+1490,world\r\n+1491,world\r\n+1492,world\r\n+1493,world\r\n+1494,world\r\n+1495,world\r\n+1496,world\r\n+1497,world\r\n+1498,world\r\n+1499,world\r\n+1500,world\r\n+1501,world\r\n+1502,world\r\n+1503,world\r\n+1504,world\r\n+1505,world\r\n+1506,world\r\n+1507,world\r\n+1508,world\r\n+1509,world\r\n+1510,world\r\n+1511,world\r\n+1512,world\r\n+1513,world\r\n+1514,world\r\n+1515,world\r\n+1516,world\r\n+1517,world\r\n+1518,world\r\n+1519,world\r\n+1520,world\r\n+1521,world\r\n+1522,world\r\n+1523,world\r\n+1524,world\r\n+1525,world\r\n+1526,world\r\n+1527,world\r\n+1528,world\r\n+1529,world\r\n+1530,world\r\n+1531,world\r\n+1532,world\r\n+1533,world\r\n+1534,world\r\n+1535,world\r\n+1536,world\r\n+1537,world\r\n+1538,world\r\n+1539,world\r\n+1540,world\r\n+1541,world\r\n+1542,world\r\n+1543,world\r\n+1544,world\r\n+1545,world\r\n+1546,world\r\n+1547,world\r\n+1548,world\r\n+1549,world\r\n+1550,world\r\n+1551,world\r\n+1552,world\r\n+1553,world\r\n+1554,world\r\n+1555,world\r\n+1556,world\r\n+1557,world\r\n+1558,world\r\n+1559,world\r\n+1560,world\r\n+1561,world\r\n+1562,world\r\n+1563,world\r\n+1564,world\r\n+1565,world\r\n+1566,world\r\n+1567,world\r\n+1568,world\r\n+1569,world\r\n+1570,world\r\n+1571,world\r\n+1572,world\r\n+1573,world\r\n+1574,world\r\n+1575,world\r\n+1576,world\r\n+1577,world\r\n+1578,world\r\n+1579,world\r\n+1580,world\r\n+1581,world\r\n+1582,world\r\n+1583,world\r\n+1584,world\r\n+1585,world\r\n+1586,world\r\n+1587,world\r\n+1588,world\r\n+1589,world\r\n+1590,world\r\n+1591,world\r\n+1592,world\r\n+1593,world\r\n+1594,world\r\n+1595,world\r\n+1596,world\r\n+1597,world\r\n+1598,world\r\n+1599,world\r\n+1600,world\r\n+1601,world\r\n+1602,world\r\n+1603,world\r\n+1604,world\r\n+1605,world\r\n+1606,world\r\n+1607,world\r\n+1608,world\r\n+1609,world\r\n+1610,world\r\n+1611,world\r\n+1612,world\r\n+1613,world\r\n+1614,world\r\n+1615,world\r\n+1616,world\r\n+1617,world\r\n+1618,world\r\n+1619,world\r\n+1620,world\r\n+1621,world\r\n+1622,world\r\n+1623,world\r\n+1624,world\r\n+1625,world\r\n+1626,world\r\n+1627,world\r\n+1628,world\r\n+1629,world\r\n+1630,world\r\n+1631,world\r\n+1632,world\r\n+1633,world\r\n+1634,world\r\n+1635,world\r\n+1636,world\r\n+1637,world\r\n+1638,world\r\n+1639,world\r\n+1640,world\r\n+1641,world\r\n+1642,world\r\n+1643,world\r\n+1644,world\r\n+1645,world\r\n+1646,world\r\n+1647,world\r\n+1648,world\r\n+1649,world\r\n+1650,world\r\n+1651,world\r\n+1652,world\r\n+1653,world\r\n+1654,world\r\n+1655,world\r\n+1656,world\r\n+1657,world\r\n+1658,world\r\n+1659,world\r\n+1660,world\r\n+1661,world\r\n+1662,world\r\n+1663,world\r\n+1664,world\r\n+1665,world\r\n+1666,world\r\n+1667,world\r\n+1668,world\r\n+1669,world\r\n+1670,world\r\n+1671,world\r\n+1672,world\r\n+1673,world\r\n+1674,world\r\n+1675,world\r\n+1676,world\r\n+1677,world\r\n+1678,world\r\n+1679,world\r\n+1680,world\r\n+1681,world\r\n+1682,world\r\n+1683,world\r\n+1684,world\r\n+1685,world\r\n+1686,world\r\n+1687,world\r\n+1688,world\r\n+1689,world\r\n+1690,world\r\n+1691,world\r\n+1692,world\r\n+1693,world\r\n+1694,world\r\n+1695,world\r\n+1696,world\r\n+1697,world\r\n+1698,world\r\n+1699,world\r\n+1700,world\r\n+1701,world\r\n+1702,world\r\n+1703,world\r\n+1704,world\r\n+1705,world\r\n+1706,world\r\n+1707,world\r\n+1708,world\r\n+1709,world\r\n+1710,world\r\n+1711,world\r\n+1712,world\r\n+1713,world\r\n+1714,world\r\n+1715,world\r\n+1716,world\r\n+1717,world\r\n+1718,world\r\n+1719,world\r\n+1720,world\r\n+1721,world\r\n+1722,world\r\n+1723,world\r\n+1724,world\r\n+1725,world\r\n+1726,world\r\n+1727,world\r\n+1728,world\r\n+1729,world\r\n+1730,world\r\n+1731,world\r\n+1732,world\r\n+1733,world\r\n+1734,world\r\n+1735,world\r\n+1736,world\r\n+1737,world\r\n+1738,world\r\n+1739,world\r\n+1740,world\r\n+1741,world\r\n+1742,world\r\n+1743,world\r\n+1744,world\r\n+1745,world\r\n+1746,world\r\n+1747,world\r\n+1748,world\r\n+1749,world\r\n+1750,world\r\n+1751,world\r\n+1752,world\r\n+1753,world\r\n+1754,world\r\n+1755,world\r\n+1756,world\r\n+1757,world\r\n+1758,world\r\n+1759,world\r\n+1760,world\r\n+1761,world\r\n+1762,world\r\n+1763,world\r\n+1764,world\r\n+1765,world\r\n+1766,world\r\n+1767,world\r\n+1768,world\r\n+1769,world\r\n+1770,world\r\n+1771,world\r\n+1772,world\r\n+1773,world\r\n+1774,world\r\n+1775,world\r\n+1776,world\r\n+1777,world\r\n+1778,world\r\n+1779,world\r\n+1780,world\r\n+1781,world\r\n+1782,world\r\n+1783,world\r\n+1784,world\r\n+1785,world\r\n+1786,world\r\n+1787,world\r\n+1788,world\r\n+1789,world\r\n+1790,world\r\n+1791,world\r\n+1792,world\r\n+1793,world\r\n+1794,world\r\n+1795,world\r\n+1796,world\r\n+1797,world\r\n+1798,world\r\n+1799,world\r\n+1800,world\r\n+1801,world\r\n+1802,world\r\n+1803,world\r\n+1804,world\r\n+1805,world\r\n+1806,world\r\n+1807,world\r\n+1808,world\r\n+1809,world\r\n+1810,world\r\n+1811,world\r\n+1812,world\r\n+1813,world\r\n+1814,world\r\n+1815,world\r\n+1816,world\r\n+1817,world\r\n+1818,world\r\n+1819,world\r\n+1820,world\r\n+1821,world\r\n+1822,world\r\n+1823,world\r\n+1824,world\r\n+1825,world\r\n+1826,world\r\n+1827,world\r\n+1828,world\r\n+1829,world\r\n+1830,world\r\n+1831,world\r\n+1832,world\r\n+1833,world\r\n+1834,world\r\n+1835,world\r\n+1836,world\r\n+1837,world\r\n+1838,world\r\n+1839,world\r\n+1840,world\r\n+1841,world\r\n+1842,world\r\n+1843,world\r\n+1844,world\r\n+1845,world\r\n+1846,world\r\n+1847,world\r\n+1848,world\r\n+1849,world\r\n+1850,world\r\n+1851,world\r\n+1852,world\r\n+1853,world\r\n+1854,world\r\n+1855,world\r\n+1856,world\r\n+1857,world\r\n+1858,world\r\n+1859,world\r\n+1860,world\r\n+1861,world\r\n+1862,world\r\n+1863,world\r\n+1864,world\r\n+1865,world\r\n+1866,world\r\n+1867,world\r\n+1868,world\r\n+1869,world\r\n+1870,world\r\n+1871,world\r\n+1872,world\r\n+1873,world\r\n+1874,world\r\n+1875,world\r\n+1876,world\r\n+1877,world\r\n+1878,world\r\n+1879,world\r\n+1880,world\r\n+1881,world\r\n+1882,world\r\n+1883,world\r\n+1884,world\r\n+1885,world\r\n+1886,world\r\n+1887,world\r\n+1888,world\r\n+1889,world\r\n+1890,world\r\n+1891,world\r\n+1892,world\r\n+1893,world\r\n+1894,world\r\n+1895,world\r\n+1896,world\r\n+1897,world\r\n+1898,world\r\n+1899,world\r\n+1900,world\r\n+1901,world\r\n+1902,world\r\n+1903,world\r\n+1904,world\r\n+1905,world\r\n+1906,world\r\n+1907,world\r\n+1908,world\r\n+1909,world\r\n+1910,world\r\n+1911,world\r\n+1912,world\r\n+1913,world\r\n+1914,world\r\n+1915,world\r\n+1916,world\r\n+1917,world\r\n+1918,world\r\n+1919,world\r\n+1920,world\r\n+1921,world\r\n+1922,world\r\n+1923,world\r\n+1924,world\r\n+1925,world\r\n+1926,world\r\n+1927,world\r\n+1928,world\r\n+1929,world\r\n+1930,world\r\n+1931,world\r\n+1932,world\r\n+1933,world\r\n+1934,world\r\n+1935,world\r\n+1936,world\r\n+1937,world\r\n+1938,world\r\n+1939,world\r\n+1940,world\r\n+1941,world\r\n+1942,world\r\n+1943,world\r\n+1944,world\r\n+1945,world\r\n+1946,world\r\n+1947,world\r\n+1948,world\r\n+1949,world\r\n+1950,world\r\n+1951,world\r\n+1952,world\r\n+1953,world\r\n+1954,world\r\n+1955,world\r\n+1956,world\r\n+1957,world\r\n+1958,world\r\n+1959,world\r\n+1960,world\r\n+1961,world\r\n+1962,world\r\n+1963,world\r\n+1964,world\r\n+1965,world\r\n+1966,world\r\n+1967,world\r\n+1968,world\r\n+1969,world\r\n+1970,world\r\n+1971,world\r\n+1972,world\r\n+1973,world\r\n+1974,world\r\n+1975,world\r\n+1976,world\r\n+1977,world\r\n+1978,world\r\n+1979,world\r\n+1980,world\r\n+1981,world\r\n+1982,world\r\n+1983,world\r\n+1984,world\r\n+1985,world\r\n+1986,world\r\n+1987,world\r\n+1988,world\r\n+1989,world\r\n+1990,world\r\n+1991,world\r\n+1992,world\r\n+1993,world\r\n+1994,world\r\n+1995,world\r\n+1996,world\r\n+1997,world\r\n+1998,world\r\n+1999,world\r\n+2000,world\r\n+2001,world\r\n+2002,world\r\n+2003,world\r\n+2004,world\r\n+2005,world\r\n+2006,world\r\n+2007,world\r\n+2008,world\r\n+2009,world\r\n+2010,world\r\n+2011,world\r\n+2012,world\r\n+2013,world\r\n+2014,world\r\n+2015,world\r\n+2016,world\r\n+2017,world\r\n+2018,world\r\n+2019,world\r\n+2020,world\r\n+2021,world\r\n+2022,world\r\n+2023,world\r\n+2024,world\r\n+2025,world\r\n+2026,world\r\n+2027,world\r\n+2028,world\r\n+2029,world\r\n+2030,world\r\n+2031,world\r\n+2032,world\r\n+2033,world\r\n+2034,world\r\n+2035,world\r\n+2036,world\r\n+2037,world\r\n+2038,world\r\n+2039,world\r\n+2040,world\r\n+2041,world\r\n+2042,world\r\n+2043,world\r\n+2044,world\r\n+2045,world\r\n+2046,world\r\n+2047,world\r\n+2048,world\r\n+2049,world\r\n+2050,world\r\n+2051,world\r\n+2052,world\r\n+2053,world\r\n+2054,world\r\n+2055,world\r\n+2056,world\r\n+2057,world\r\n+2058,world\r\n+2059,world\r\n+2060,world\r\n+2061,world\r\n+2062,world\r\n+2063,world\r\n+2064,world\r\n+2065,world\r\n+2066,world\r\n+2067,world\r\n+2068,world\r\n+2069,world\r\n+2070,world\r\n+2071,world\r\n+2072,world\r\n+2073,world\r\n+2074,world\r\n+2075,world\r\n+2076,world\r\n+2077,world\r\n+2078,world\r\n+2079,world\r\n+2080,world\r\n+2081,world\r\n+2082,world\r\n+2083,world\r\n+2084,world\r\n+2085,world\r\n+2086,world\r\n+2087,world\r\n+2088,world\r\n+2089,world\r\n+2090,world\r\n+2091,world\r\n+2092,world\r\n+2093,world\r\n+2094,world\r\n+2095,world\r\n+2096,world\r\n+2097,world\r\n+2098,world\r\n+2099,world\r\n+2100,world\r\n+2101,world\r\n+2102,world\r\n+2103,world\r\n+2104,world\r\n+2105,world\r\n+2106,world\r\n+2107,world\r\n+2108,world\r\n+2109,world\r\n+2110,world\r\n+2111,world\r\n+2112,world\r\n+2113,world\r\n+2114,world\r\n+2115,world\r\n+2116,world\r\n+2117,world\r\n+2118,world\r\n+2119,world\r\n+2120,world\r\n+2121,world\r\n+2122,world\r\n+2123,world\r\n+2124,world\r\n+2125,world\r\n+2126,world\r\n+2127,world\r\n+2128,world\r\n+2129,world\r\n+2130,world\r\n+2131,world\r\n+2132,world\r\n+2133,world\r\n+2134,world\r\n+2135,world\r\n+2136,world\r\n+2137,world\r\n+2138,world\r\n+2139,world\r\n+2140,world\r\n+2141,world\r\n+2142,world\r\n+2143,world\r\n+2144,world\r\n+2145,world\r\n+2146,world\r\n+2147,world\r\n+2148,world\r\n+2149,world\r\n+2150,world\r\n+2151,world\r\n+2152,world\r\n+2153,world\r\n+2154,world\r\n+2155,world\r\n+2156,world\r\n+2157,world\r\n+2158,world\r\n+2159,world\r\n+2160,world\r\n+2161,world\r\n+2162,world\r\n+2163,world\r\n+2164,world\r\n+2165,world\r\n+2166,world\r\n+2167,world\r\n+2168,world\r\n+2169,world\r\n+2170,world\r\n+2171,world\r\n+2172,world\r\n+2173,world\r\n+2174,world\r\n+2175,world\r\n+2176,world\r\n+2177,world\r\n+2178,world\r\n+2179,world\r\n+2180,world\r\n+2181,world\r\n+2182,world\r\n+2183,world\r\n+2184,world\r\n+2185,world\r\n+2186,world\r\n+2187,world\r\n+2188,world\r\n+2189,world\r\n+2190,world\r\n+2191,world\r\n+2192,world\r\n+2193,world\r\n+2194,world\r\n+2195,world\r\n+2196,world\r\n+2197,world\r\n+2198,world\r\n+2199,world\r\n+2200,world\r\n+2201,world\r\n+2202,world\r\n+2203,world\r\n+2204,world\r\n+2205,world\r\n+2206,world\r\n+2207,world\r\n+2208,world\r\n+2209,world\r\n+2210,world\r\n+2211,world\r\n+2212,world\r\n+2213,world\r\n+2214,world\r\n+2215,world\r\n+2216,world\r\n+2217,world\r\n+2218,world\r\n+2219,world\r\n+2220,world\r\n+2221,world\r\n+2222,world\r\n+2223,world\r\n+2224,world\r\n+2225,world\r\n+2226,world\r\n+2227,world\r\n+2228,world\r\n+2229,world\r\n+2230,world\r\n+2231,world\r\n+2232,world\r\n+2233,world\r\n+2234,world\r\n+2235,world\r\n+2236,world\r\n+2237,world\r\n+2238,world\r\n+2239,world\r\n+2240,world\r\n+2241,world\r\n+2242,world\r\n+2243,world\r\n+2244,world\r\n+2245,world\r\n+2246,world\r\n+2247,world\r\n+2248,world\r\n+2249,world\r\n+2250,world\r\n+2251,world\r\n+2252,world\r\n+2253,world\r\n+2254,world\r\n+2255,world\r\n+2256,world\r\n+2257,world\r\n+2258,world\r\n+2259,world\r\n+2260,world\r\n+2261,world\r\n+2262,world\r\n+2263,world\r\n+2264,world\r\n+2265,world\r\n+2266,world\r\n+2267,world\r\n+2268,world\r\n+2269,world\r\n+2270,world\r\n+2271,world\r\n+2272,world\r\n+2273,world\r\n+2274,world\r\n+2275,world\r\n+2276,world\r\n+2277,world\r\n+2278,world\r\n+2279,world\r\n+2280,world\r\n+2281,world\r\n+2282,world\r\n+2283,world\r\n+2284,world\r\n+2285,world\r\n+2286,world\r\n+2287,world\r\n+2288,world\r\n+2289,world\r\n+2290,world\r\n+2291,world\r\n+2292,world\r\n+2293,world\r\n+2294,world\r\n+2295,world\r\n+2296,world\r\n+2297,world\r\n+2298,world\r\n+2299,world\r\n+2300,world\r\n+2301,world\r\n+2302,world\r\n+2303,world\r\n+2304,world\r\n+2305,world\r\n+2306,world\r\n+2307,world\r\n+2308,world\r\n+2309,world\r\n+2310,world\r\n+2311,world\r\n+2312,world\r\n+2313,world\r\n+2314,world\r\n+2315,world\r\n+2316,world\r\n+2317,world\r\n+2318,world\r\n+2319,world\r\n+2320,world\r\n+2321,world\r\n+2322,world\r\n+2323,world\r\n+2324,world\r\n+2325,world\r\n+2326,world\r\n+2327,world\r\n+2328,world\r\n+2329,world\r\n+2330,world\r\n+2331,world\r\n+2332,world\r\n+2333,world\r\n+2334,world\r\n+2335,world\r\n+2336,world\r\n+2337,world\r\n+2338,world\r\n+2339,world\r\n+2340,world\r\n+2341,world\r\n+2342,world\r\n+2343,world\r\n+2344,world\r\n+2345,world\r\n+2346,world\r\n+2347,world\r\n+2348,world\r\n+2349,world\r\n+2350,world\r\n+2351,world\r\n+2352,world\r\n+2353,world\r\n+2354,world\r\n+2355,world\r\n+2356,world\r\n+2357,world\r\n+2358,world\r\n+2359,world\r\n+2360,world\r\n+2361,world\r\n+2362,world\r\n+2363,world\r\n+2364,world\r\n+2365,world\r\n+2366,world\r\n+2367,world\r\n+2368,world\r\n+2369,world\r\n+2370,world\r\n+2371,world\r\n+2372,world\r\n+2373,world\r\n+2374,world\r\n+2375,world\r\n+2376,world\r\n+2377,world\r\n+2378,world\r\n+2379,world\r\n+2380,world\r\n+2381,world\r\n+2382,world\r\n+2383,world\r\n+2384,world\r\n+2385,world\r\n+2386,world\r\n+2387,world\r\n+2388,world\r\n+2389,world\r\n+2390,world\r\n+2391,world\r\n+2392,world\r\n+2393,world\r\n+2394,world\r\n+2395,world\r\n+2396,world\r\n+2397,world\r\n+2398,world\r\n+2399,world\r\n+2400,world\r\n+2401,world\r\n+2402,world\r\n+2403,world\r\n+2404,world\r\n+2405,world\r\n+2406,world\r\n+2407,world\r\n+2408,world\r\n+2409,world\r\n+2410,world\r\n+2411,world\r\n+2412,world\r\n+2413,world\r\n+2414,world\r\n+2415,world\r\n+2416,world\r\n+2417,world\r\n+2418,world\r\n+2419,world\r\n+2420,world\r\n+2421,world\r\n+2422,world\r\n+2423,world\r\n+2424,world\r\n+2425,world\r\n+2426,world\r\n+2427,world\r\n+2428,world\r\n+2429,world\r\n+2430,world\r\n+2431,world\r\n+2432,world\r\n+2433,world\r\n+2434,world\r\n+2435,world\r\n+2436,world\r\n+2437,world\r\n+2438,world\r\n+2439,world\r\n+2440,world\r\n+2441,world\r\n+2442,world\r\n+2443,world\r\n+2444,world\r\n+2445,world\r\n+2446,world\r\n+2447,world\r\n+2448,world\r\n+2449,world\r\n+2450,world\r\n+2451,world\r\n+2452,world\r\n+2453,world\r\n+2454,world\r\n+2455,world\r\n+2456,world\r\n+2457,world\r\n+2458,world\r\n+2459,world\r\n+2460,world\r\n+2461,world\r\n+2462,world\r\n+2463,world\r\n+2464,world\r\n+2465,world\r\n+2466,world\r\n+2467,world\r\n+2468,world\r\n+2469,world\r\n+2470,world\r\n+2471,world\r\n+2472,world\r\n+2473,world\r\n+2474,world\r\n+2475,world\r\n+2476,world\r\n+2477,world\r\n+2478,world\r\n+2479,world\r\n+2480,world\r\n+2481,world\r\n+2482,world\r\n+2483,world\r\n+2484,world\r\n+2485,world\r\n+2486,world\r\n+2487,world\r\n+2488,world\r\n+2489,world\r\n+2490,world\r\n+2491,world\r\n+2492,world\r\n+2493,world\r\n+2494,world\r\n+2495,world\r\n+2496,world\r\n+2497,world\r\n+2498,world\r\n+2499,world\r\n+2500,world\r\n+2501,world\r\n+2502,world\r\n+2503,world\r\n+2504,world\r\n+2505,world\r\n+2506,world\r\n+2507,world\r\n+2508,world\r\n+2509,world\r\n+2510,world\r\n+2511,world\r\n+2512,world\r\n+2513,world\r\n+2514,world\r\n+2515,world\r\n+2516,world\r\n+2517,world\r\n+2518,world\r\n+2519,world\r\n+2520,world\r\n+2521,world\r\n+2522,world\r\n+2523,world\r\n+2524,world\r\n+2525,world\r\n+2526,world\r\n+2527,world\r\n+2528,world\r\n+2529,world\r\n+2530,world\r\n+2531,world\r\n+2532,world\r\n+2533,world\r\n+2534,world\r\n+2535,world\r\n+2536,world\r\n+2537,world\r\n+2538,world\r\n+2539,world\r\n+2540,world\r\n+2541,world\r\n+2542,world\r\n+2543,world\r\n+2544,world\r\n+2545,world\r\n+2546,world\r\n+2547,world\r\n+2548,world\r\n+2549,world\r\n+2550,world\r\n+2551,world\r\n+2552,world\r\n+2553,world\r\n+2554,world\r\n+2555,world\r\n+2556,world\r\n+2557,world\r\n+2558,world\r\n+2559,world\r\n+2560,world\r\n+2561,world\r\n+2562,world\r\n+2563,world\r\n+2564,world\r\n+2565,world\r\n+2566,world\r\n+2567,world\r\n+2568,world\r\n+2569,world\r\n+2570,world\r\n+2571,world\r\n+2572,world\r\n+2573,world\r\n+2574,world\r\n+2575,world\r\n+2576,world\r\n+2577,world\r\n+2578,world\r\n+2579,world\r\n+2580,world\r\n+2581,world\r\n+2582,world\r\n+2583,world\r\n+2584,world\r\n+2585,world\r\n+2586,world\r\n+2587,world\r\n+2588,world\r\n+2589,world\r\n+2590,world\r\n+2591,world\r\n+2592,world\r\n+2593,world\r\n+2594,world\r\n+2595,world\r\n+2596,world\r\n+2597,world\r\n+2598,world\r\n+2599,world\r\n+2600,world\r\n+2601,world\r\n+2602,world\r\n+2603,world\r\n+2604,world\r\n+2605,world\r\n+2606,world\r\n+2607,world\r\n+2608,world\r\n+2609,world\r\n+2610,world\r\n+2611,world\r\n+2612,world\r\n+2613,world\r\n+2614,world\r\n+2615,world\r\n+2616,world\r\n+2617,world\r\n+2618,world\r\n+2619,world\r\n+2620,world\r\n+2621,world\r\n+2622,world\r\n+2623,world\r\n+2624,world\r\n+2625,world\r\n+2626,world\r\n+2627,world\r\n+2628,world\r\n+2629,world\r\n+2630,world\r\n+2631,world\r\n+2632,world\r\n+2633,world\r\n+2634,world\r\n+2635,world\r\n+2636,world\r\n+2637,world\r\n+2638,world\r\n+2639,world\r\n+2640,world\r\n+2641,world\r\n+2642,world\r\n+2643,world\r\n+2644,world\r\n+2645,world\r\n+2646,world\r\n+2647,world\r\n+2648,world\r\n+2649,world\r\n+2650,world\r\n+2651,world\r\n+2652,world\r\n+2653,world\r\n+2654,world\r\n+2655,world\r\n+2656,world\r\n+2657,world\r\n+2658,world\r\n+2659,world\r\n+2660,world\r\n+2661,world\r\n+2662,world\r\n+2663,world\r\n+2664,world\r\n+2665,world\r\n+2666,world\r\n+2667,world\r\n+2668,world\r\n+2669,world\r\n+2670,world\r\n+2671,world\r\n+2672,world\r\n+2673,world\r\n+2674,world\r\n+2675,world\r\n+2676,world\r\n+2677,world\r\n+2678,world\r\n+2679,world\r\n+2680,world\r\n+2681,world\r\n+2682,world\r\n+2683,world\r\n+2684,world\r\n+2685,world\r\n+2686,world\r\n+2687,world\r\n+2688,world\r\n+2689,world\r\n+2690,world\r\n+2691,world\r\n+2692,world\r\n+2693,world\r\n+2694,world\r\n+2695,world\r\n+2696,world\r\n+2697,world\r\n+2698,world\r\n+2699,world\r\n+2700,world\r\n+2701,world\r\n+2702,world\r\n+2703,world\r\n+2704,world\r\n+2705,world\r\n+2706,world\r\n+2707,world\r\n+2708,world\r\n+2709,world\r\n+2710,world\r\n+2711,world\r\n+2712,world\r\n+2713,world\r\n+2714,world\r\n+2715,world\r\n+2716,world\r\n+2717,world\r\n+2718,world\r\n+2719,world\r\n+2720,world\r\n+2721,world\r\n+2722,world\r\n+2723,world\r\n+2724,world\r\n+2725,world\r\n+2726,world\r\n+2727,world\r\n+2728,world\r\n+2729,world\r\n+2730,world\r\n+2731,world\r\n+2732,world\r\n+2733,world\r\n+2734,world\r\n+2735,world\r\n+2736,world\r\n+2737,world\r\n+2738,world\r\n+2739,world\r\n+2740,world\r\n+2741,world\r\n+2742,world\r\n+2743,world\r\n+2744,world\r\n+2745,world\r\n+2746,world\r\n+2747,world\r\n+2748,world\r\n+2749,world\r\n+2750,world\r\n+2751,world\r\n+2752,world\r\n+2753,world\r\n+2754,world\r\n+2755,world\r\n+2756,world\r\n+2757,world\r\n+2758,world\r\n+2759,world\r\n+2760,world\r\n+2761,world\r\n+2762,world\r\n+2763,world\r\n+2764,world\r\n+2765,world\r\n+2766,world\r\n+2767,world\r\n+2768,world\r\n+2769,world\r\n+2770,world\r\n+2771,world\r\n+2772,world\r\n+2773,world\r\n+2774,world\r\n+2775,world\r\n+2776,world\r\n+2777,world\r\n+2778,world\r\n+2779,world\r\n+2780,world\r\n+2781,world\r\n+2782,world\r\n+2783,world\r\n+2784,world\r\n+2785,world\r\n+2786,world\r\n+2787,world\r\n+2788,world\r\n+2789,world\r\n+2790,world\r\n+2791,world\r\n+2792,world\r\n+2793,world\r\n+2794,world\r\n+2795,world\r\n+2796,world\r\n+2797,world\r\n+2798,world\r\n+2799,world\r\n+2800,world\r\n+2801,world\r\n+2802,world\r\n+2803,world\r\n+2804,world\r\n+2805,world\r\n+2806,world\r\n+2807,world\r\n+2808,world\r\n+2809,world\r\n+2810,world\r\n+2811,world\r\n+2812,world\r\n+2813,world\r\n+2814,world\r\n+2815,world\r\n+2816,world\r\n+2817,world\r\n+2818,world\r\n+2819,world\r\n+2820,world\r\n+2821,world\r\n+2822,world\r\n+2823,world\r\n+2824,world\r\n+2825,world\r\n+2826,world\r\n+2827,world\r\n+2828,world\r\n+2829,world\r\n+2830,world\r\n+2831,world\r\n+2832,world\r\n+2833,world\r\n+2834,world\r\n+2835,world\r\n+2836,world\r\n+2837,world\r\n+2838,world\r\n+2839,world\r\n+2840,world\r\n+2841,world\r\n+2842,world\r\n+2843,world\r\n+2844,world\r\n+2845,world\r\n+2846,world\r\n+2847,world\r\n+2848,world\r\n+2849,world\r\n+2850,world\r\n+2851,world\r\n+2852,world\r\n+2853,world\r\n+2854,world\r\n+2855,world\r\n+2856,world\r\n+2857,world\r\n+2858,world\r\n+2859,world\r\n+2860,world\r\n+2861,world\r\n+2862,world\r\n+2863,world\r\n+2864,world\r\n+2865,world\r\n+2866,world\r\n+2867,world\r\n+2868,world\r\n+2869,world\r\n+2870,world\r\n+2871,world\r\n+2872,world\r\n+2873,world\r\n+2874,world\r\n+2875,world\r\n+2876,world\r\n+2877,world\r\n+2878,world\r\n+2879,world\r\n+2880,world\r\n+2881,world\r\n+2882,world\r\n+2883,world\r\n+2884,world\r\n+2885,world\r\n+2886,world\r\n+2887,world\r\n+2888,world\r\n+2889,world\r\n+2890,world\r\n+2891,world\r\n+2892,world\r\n+2893,world\r\n+2894,world\r\n+2895,world\r\n+2896,world\r\n+2897,world\r\n+2898,world\r\n+2899,world\r\n+2900,world\r\n+2901,world\r\n+2902,world\r\n+2903,world\r\n+2904,world\r\n+2905,world\r\n+2906,world\r\n+2907,world\r\n+2908,world\r\n+2909,world\r\n+2910,world\r\n+2911,world\r\n+2912,world\r\n+2913,world\r\n+2914,world\r\n+2915,world\r\n+2916,world\r\n+2917,world\r\n+2918,world\r\n+2919,world\r\n+2920,world\r\n+2921,world\r\n+2922,world\r\n+2923,world\r\n+2924,world\r\n+2925,world\r\n+2926,world\r\n+2927,world\r\n+2928,world\r\n+2929,world\r\n+2930,world\r\n+2931,world\r\n+2932,world\r\n+2933,world\r\n+2934,world\r\n+2935,world\r\n+2936,world\r\n+2937,world\r\n+2938,world\r\n+2939,world\r\n+2940,world\r\n+2941,world\r\n+2942,world\r\n+2943,world\r\n+2944,world\r\n+2945,world\r\n+2946,world\r\n+2947,world\r\n+2948,world\r\n+2949,world\r\n+2950,world\r\n+2951,world\r\n+2952,world\r\n+2953,world\r\n+2954,world\r\n+2955,world\r\n+2956,world\r\n+2957,world\r\n+2958,world\r\n+2959,world\r\n+2960,world\r\n+2961,world\r\n+2962,world\r\n+2963,world\r\n+2964,world\r\n+2965,world\r\n+2966,world\r\n+2967,world\r\n+2968,world\r\n+2969,world\r\n+2970,world\r\n+2971,world\r\n+2972,world\r\n+2973,world\r\n+2974,world\r\n+2975,world\r\n+2976,world\r\n+2977,world\r\n+2978,world\r\n+2979,world\r\n+2980,world\r\n+2981,world\r\n+2982,world\r\n+2983,world\r\n+2984,world\r\n+2985,world\r\n+2986,world\r\n+2987,world\r\n+2988,world\r\n+2989,world\r\n+2990,world\r\n+2991,world\r\n+2992,world\r\n+2993,world\r\n+2994,world\r\n+2995,world\r\n+2996,world\r\n+2997,world\r\n+2998,world\r\n+2999,world\r\n+3000,world\r\n+3001,world\r\n+3002,world\r\n+3003,world\r\n+3004,world\r\n+3005,world\r\n+3006,world\r\n+3007,world\r\n+3008,world\r\n+3009,world\r\n+3010,world\r\n+3011,world\r\n+3012,world\r\n+3013,world\r\n+3014,world\r\n+3015,world\r\n+3016,world\r\n+3017,world\r\n+3018,world\r\n+3019,world\r\n+3020,world\r\n+3021,world\r\n+3022,world\r\n+3023,world\r\n+3024,world\r\n+3025,world\r\n+3026,world\r\n+3027,world\r\n+3028,world\r\n+3029,world\r\n+3030,world\r\n+3031,world\r\n+3032,world\r\n+3033,world\r\n+3034,world\r\n+3035,world\r\n+3036,world\r\n+3037,world\r\n+3038,world\r\n+3039,world\r\n+3040,world\r\n+3041,world\r\n+3042,world\r\n+3043,world\r\n+3044,world\r\n+3045,world\r\n+3046,world\r\n+3047,world\r\n+3048,world\r\n+3049,world\r\n+3050,world\r\n+3051,world\r\n+3052,world\r\n+3053,world\r\n+3054,world\r\n+3055,world\r\n+3056,world\r\n+3057,world\r\n+3058,world\r\n+3059,world\r\n+3060,world\r\n+3061,world\r\n+3062,world\r\n+3063,world\r\n+3064,world\r\n+3065,world\r\n+3066,world\r\n+3067,world\r\n+3068,world\r\n+3069,world\r\n+3070,world\r\n+3071,world\r\n+3072,world\r\n+3073,world\r\n+3074,world\r\n+3075,world\r\n+3076,world\r\n+3077,world\r\n+3078,world\r\n+3079,world\r\n+3080,world\r\n+3081,world\r\n+3082,world\r\n+3083,world\r\n+3084,world\r\n+3085,world\r\n+3086,world\r\n+3087,world\r\n+3088,world\r\n+3089,world\r\n+3090,world\r\n+3091,world\r\n+3092,world\r\n+3093,world\r\n+3094,world\r\n+3095,world\r\n+3096,world\r\n+3097,world\r\n+3098,world\r\n+3099,world\r\n+3100,world\r\n+3101,world\r\n+3102,world\r\n+3103,world\r\n+3104,world\r\n+3105,world\r\n+3106,world\r\n+3107,world\r\n+3108,world\r\n+3109,world\r\n+3110,world\r\n+3111,world\r\n+3112,world\r\n+3113,world\r\n+3114,world\r\n+3115,world\r\n+3116,world\r\n+3117,world\r\n+3118,world\r\n+3119,world\r\n+3120,world\r\n+3121,world\r\n+3122,world\r\n+3123,world\r\n+3124,world\r\n+3125,world\r\n+3126,world\r\n+3127,world\r\n+3128,world\r\n+3129,world\r\n+3130,world\r\n+3131,world\r\n+3132,world\r\n+3133,world\r\n+3134,world\r\n+3135,world\r\n+3136,world\r\n+3137,world\r\n+3138,world\r\n+3139,world\r\n+3140,world\r\n+3141,world\r\n+3142,world\r\n+3143,world\r\n+3144,world\r\n+3145,world\r\n+3146,world\r\n+3147,world\r\n+3148,world\r\n+3149,world\r\n+3150,world\r\n+3151,world\r\n+3152,world\r\n+3153,world\r\n+3154,world\r\n+3155,world\r\n+3156,world\r\n+3157,world\r\n+3158,world\r\n+3159,world\r\n+3160,world\r\n+3161,world\r\n+3162,world\r\n+3163,world\r\n+3164,world\r\n+3165,world\r\n+3166,world\r\n+3167,world\r\n+3168,world\r\n+3169,world\r\n+3170,world\r\n+3171,world\r\n+3172,world\r\n+3173,world\r\n+3174,world\r\n+3175,world\r\n+3176,world\r\n+3177,world\r\n+3178,world\r\n+3179,world\r\n+3180,world\r\n+3181,world\r\n+3182,world\r\n+3183,world\r\n+3184,world\r\n+3185,world\r\n+3186,world\r\n+3187,world\r\n+3188,world\r\n+3189,world\r\n+3190,world\r\n+3191,world\r\n+3192,world\r\n+3193,world\r\n+3194,world\r\n+3195,world\r\n+3196,world\r\n+3197,world\r\n+3198,world\r\n+3199,world\r\n+3200,world\r\n+3201,world\r\n+3202,world\r\n+3203,world\r\n+3204,world\r\n+3205,world\r\n+3206,world\r\n+3207,world\r\n+3208,world\r\n+3209,world\r\n+3210,world\r\n+3211,world\r\n+3212,world\r\n+3213,world\r\n+3214,world\r\n+3215,world\r\n+3216,world\r\n+3217,world\r\n+3218,world\r\n+3219,world\r\n+3220,world\r\n+3221,world\r\n+3222,world\r\n+3223,world\r\n+3224,world\r\n+3225,world\r\n+3226,world\r\n+3227,world\r\n+3228,world\r\n+3229,world\r\n+3230,world\r\n+3231,world\r\n+3232,world\r\n+3233,world\r\n+3234,world\r\n+3235,world\r\n+3236,world\r\n+3237,world\r\n+3238,world\r\n+3239,world\r\n+3240,world\r\n+3241,world\r\n+3242,world\r\n+3243,world\r\n+3244,world\r\n+3245,world\r\n+3246,world\r\n+3247,world\r\n+3248,world\r\n+3249,world\r\n+3250,world\r\n+3251,world\r\n+3252,world\r\n+3253,world\r\n+3254,world\r\n+3255,world\r\n+3256,world\r\n+3257,world\r\n+3258,world\r\n+3259,world\r\n+3260,world\r\n+3261,world\r\n+3262,world\r\n+3263,world\r\n+3264,world\r\n+3265,world\r\n+3266,world\r\n+3267,world\r\n+3268,world\r\n+3269,world\r\n+3270,world\r\n+3271,world\r\n+3272,world\r\n+3273,world\r\n+3274,world\r\n+3275,world\r\n+3276,world\r\n+3277,world\r\n+3278,world\r\n+3279,world\r\n+3280,world\r\n+3281,world\r\n+3282,world\r\n+3283,world\r\n+3284,world\r\n+3285,world\r\n+3286,world\r\n+3287,world\r\n+3288,world\r\n+3289,world\r\n+3290,world\r\n+3291,world\r\n+3292,world\r\n+3293,world\r\n+3294,world\r\n+3295,world\r\n+3296,world\r\n+3297,world\r\n+3298,world\r\n+3299,world\r\n+3300,world\r\n+3301,world\r\n+3302,world\r\n+3303,world\r\n+3304,world\r\n+3305,world\r\n+3306,world\r\n+3307,world\r\n+3308,world\r\n+3309,world\r\n+3310,world\r\n+3311,world\r\n+3312,world\r\n+3313,world\r\n+3314,world\r\n+3315,world\r\n+3316,world\r\n+3317,world\r\n+3318,world\r\n+3319,world\r\n+3320,world\r\n+3321,world\r\n+3322,world\r\n+3323,world\r\n+3324,world\r\n+3325,world\r\n+3326,world\r\n+3327,world\r\n+3328,world\r\n+3329,world\r\n+3330,world\r\n+3331,world\r\n+3332,world\r\n+3333,world\r\n+3334,world\r\n+3335,world\r\n+3336,world\r\n+3337,world\r\n+3338,world\r\n+3339,world\r\n+3340,world\r\n+3341,world\r\n+3342,world\r\n+3343,world\r\n+3344,world\r\n+3345,world\r\n+3346,world\r\n+3347,world\r\n+3348,world\r\n+3349,world\r\n+3350,world\r\n+3351,world\r\n+3352,world\r\n+3353,world\r\n+3354,world\r\n+3355,world\r\n+3356,world\r\n+3357,world\r\n+3358,world\r\n+3359,world\r\n+3360,world\r\n+3361,world\r\n+3362,world\r\n+3363,world\r\n+3364,world\r\n+3365,world\r\n+3366,world\r\n+3367,world\r\n+3368,world\r\n+3369,world\r\n+3370,world\r\n+3371,world\r\n+3372,world\r\n+3373,world\r\n+3374,world\r\n+3375,world\r\n+3376,world\r\n+3377,world\r\n+3378,world\r\n+3379,world\r\n+3380,world\r\n+3381,world\r\n+3382,world\r\n+3383,world\r\n+3384,world\r\n+3385,world\r\n+3386,world\r\n+3387,world\r\n+3388,world\r\n+3389,world\r\n+3390,world\r\n+3391,world\r\n+3392,world\r\n+3393,world\r\n+3394,world\r\n+3395,world\r\n+3396,world\r\n+3397,world\r\n+3398,world\r\n+3399,world\r\n+3400,world\r\n+3401,world\r\n+3402,world\r\n+3403,world\r\n+3404,world\r\n+3405,world\r\n+3406,world\r\n+3407,world\r\n+3408,world\r\n+3409,world\r\n+3410,world\r\n+3411,world\r\n+3412,world\r\n+3413,world\r\n+3414,world\r\n+3415,world\r\n+3416,world\r\n+3417,world\r\n+3418,world\r\n+3419,world\r\n+3420,world\r\n+3421,world\r\n+3422,world\r\n+3423,world\r\n+3424,world\r\n+3425,world\r\n+3426,world\r\n+3427,world\r\n+3428,world\r\n+3429,world\r\n+3430,world\r\n+3431,world\r\n+3432,world\r\n+3433,world\r\n+3434,world\r\n+3435,world\r\n+3436,world\r\n+3437,world\r\n+3438,world\r\n+3439,world\r\n+3440,world\r\n+3441,world\r\n+3442,world\r\n+3443,world\r\n+3444,world\r\n+3445,world\r\n+3446,world\r\n+3447,world\r\n+3448,world\r\n+3449,world\r\n+3450,world\r\n+3451,world\r\n+3452,world\r\n+3453,world\r\n+3454,world\r\n+3455,world\r\n+3456,world\r\n+3457,world\r\n+3458,world\r\n+3459,world\r\n+3460,world\r\n+3461,world\r\n+3462,world\r\n+3463,world\r\n+3464,world\r\n+3465,world\r\n+3466,world\r\n+3467,world\r\n+3468,world\r\n+3469,world\r\n+3470,world\r\n+3471,world\r\n+3472,world\r\n+3473,world\r\n+3474,world\r\n+3475,world\r\n+3476,world\r\n+3477,world\r\n+3478,world\r\n+3479,world\r\n+3480,world\r\n+3481,world\r\n+3482,world\r\n+3483,world\r\n+3484,world\r\n+3485,world\r\n+3486,world\r\n+3487,world\r\n+3488,world\r\n+3489,world\r\n+3490,world\r\n+3491,world\r\n+3492,world\r\n+3493,world\r\n+3494,world\r\n+3495,world\r\n+3496,world\r\n+3497,world\r\n+3498,world\r\n+3499,world\r\n+3500,world\r\n+3501,world\r\n+3502,world\r\n+3503,world\r\n+3504,world\r\n+3505,world\r\n+3506,world\r\n+3507,world\r\n+3508,world\r\n+3509,world\r\n+3510,world\r\n+3511,world\r\n+3512,world\r\n+3513,world\r\n+3514,world\r\n+3515,world\r\n+3516,world\r\n+3517,world\r\n+3518,world\r\n+3519,world\r\n+3520,world\r\n+3521,world\r\n+3522,world\r\n+3523,world\r\n+3524,world\r\n+3525,world\r\n+3526,world\r\n+3527,world\r\n+3528,world\r\n+3529,world\r\n+3530,world\r\n+3531,world\r\n+3532,world\r\n+3533,world\r\n+3534,world\r\n+3535,world\r\n+3536,world\r\n+3537,world\r\n+3538,world\r\n+3539,world\r\n+3540,world\r\n+3541,world\r\n+3542,world\r\n+3543,world\r\n+3544,world\r\n+3545,world\r\n+3546,world\r\n+3547,world\r\n+3548,world\r\n+3549,world\r\n+3550,world\r\n+3551,world\r\n+3552,world\r\n+3553,world\r\n+3554,world\r\n+3555,world\r\n+3556,world\r\n+3557,world\r\n+3558,world\r\n+3559,world\r\n+3560,world\r\n+3561,world\r\n+3562,world\r\n+3563,world\r\n+3564,world\r\n+3565,world\r\n+3566,world\r\n+3567,world\r\n+3568,world\r\n+3569,world\r\n+3570,world\r\n+3571,world\r\n+3572,world\r\n+3573,world\r\n+3574,world\r\n+3575,world\r\n+3576,world\r\n+3577,world\r\n+3578,world\r\n+3579,world\r\n+3580,world\r\n+3581,world\r\n+3582,world\r\n+3583,world\r\n+3584,world\r\n+3585,world\r\n+3586,world\r\n+3587,world\r\n+3588,world\r\n+3589,world\r\n+3590,world\r\n+3591,world\r\n+3592,world\r\n+3593,world\r\n+3594,world\r\n+3595,world\r\n+3596,world\r\n+3597,world\r\n+3598,world\r\n+3599,world\r\n+3600,world\r\n+3601,world\r\n+3602,world\r\n+3603,world\r\n+3604,world\r\n+3605,world\r\n+3606,world\r\n+3607,world\r\n+3608,world\r\n+3609,world\r\n+3610,world\r\n+3611,world\r\n+3612,world\r\n+3613,world\r\n+3614,world\r\n+3615,world\r\n+3616,world\r\n+3617,world\r\n+3618,world\r\n+3619,world\r\n+3620,world\r\n+3621,world\r\n+3622,world\r\n+3623,world\r\n+3624,world\r\n+3625,world\r\n+3626,world\r\n+3627,world\r\n+3628,world\r\n+3629,world\r\n+3630,world\r\n+3631,world\r\n+3632,world\r\n+3633,world\r\n+3634,world\r\n+3635,world\r\n+3636,world\r\n+3637,world\r\n+3638,world\r\n+3639,world\r\n+3640,world\r\n+3641,world\r\n+3642,world\r\n+3643,world\r\n+3644,world\r\n+3645,world\r\n+3646,world\r\n+3647,world\r\n+3648,world\r\n+3649,world\r\n+3650,world\r\n+3651,world\r\n+3652,world\r\n+3653,world\r\n+3654,world\r\n+3655,world\r\n+3656,world\r\n+3657,world\r\n+3658,world\r\n+3659,world\r\n+3660,world\r\n+3661,world\r\n+3662,world\r\n+3663,world\r\n+3664,world\r\n+3665,world\r\n+3666,world\r\n+3667,world\r\n+3668,world\r\n+3669,world\r\n+3670,world\r\n+3671,world\r\n+3672,world\r\n+3673,world\r\n+3674,world\r\n+3675,world\r\n+3676,world\r\n+3677,world\r\n+3678,world\r\n+3679,world\r\n+3680,world\r\n+3681,world\r\n+3682,world\r\n+3683,world\r\n+3684,world\r\n+3685,world\r\n+3686,world\r\n+3687,world\r\n+3688,world\r\n+3689,world\r\n+3690,world\r\n+3691,world\r\n+3692,world\r\n+3693,world\r\n+3694,world\r\n+3695,world\r\n+3696,world\r\n+3697,world\r\n+3698,world\r\n+3699,world\r\n+3700,world\r\n+3701,world\r\n+3702,world\r\n+3703,world\r\n+3704,world\r\n+3705,world\r\n+3706,world\r\n+3707,world\r\n+3708,world\r\n+3709,world\r\n+3710,world\r\n+3711,world\r\n+3712,world\r\n+3713,world\r\n+3714,world\r\n+3715,world\r\n+3716,world\r\n+3717,world\r\n+3718,world\r\n+3719,world\r\n+3720,world\r\n+3721,world\r\n+3722,world\r\n+3723,world\r\n+3724,world\r\n+3725,world\r\n+3726,world\r\n+3727,world\r\n+3728,world\r\n+3729,world\r\n+3730,world\r\n+3731,world\r\n+3732,world\r\n+3733,world\r\n+3734,world\r\n+3735,world\r\n+3736,world\r\n+3737,world\r\n+3738,world\r\n+3739,world\r\n+3740,world\r\n+3741,world\r\n+3742,world\r\n+3743,world\r\n+3744,world\r\n+3745,world\r\n+3746,world\r\n+3747,world\r\n+3748,world\r\n+3749,world\r\n+3750,world\r\n+3751,world\r\n+3752,world\r\n+3753,world\r\n+3754,world\r\n+3755,world\r\n+3756,world\r\n+3757,world\r\n+3758,world\r\n+3759,world\r\n+3760,world\r\n+3761,world\r\n+3762,world\r\n+3763,world\r\n+3764,world\r\n+3765,world\r\n+3766,world\r\n+3767,world\r\n+3768,world\r\n+3769,world\r\n+3770,world\r\n+3771,world\r\n+3772,world\r\n+3773,world\r\n+3774,world\r\n+3775,world\r\n+3776,world\r\n+3777,world\r\n+3778,world\r\n+3779,world\r\n+3780,world\r\n+3781,world\r\n+3782,world\r\n+3783,world\r\n+3784,world\r\n+3785,world\r\n+3786,world\r\n+3787,world\r\n+3788,world\r\n+3789,world\r\n+3790,world\r\n+3791,world\r\n+3792,world\r\n+3793,world\r\n+3794,world\r\n+3795,world\r\n+3796,world\r\n+3797,world\r\n+3798,world\r\n+3799,world\r\n+3800,world\r\n+3801,world\r\n+3802,world\r\n+3803,world\r\n+3804,world\r\n+3805,world\r\n+3806,world\r\n+3807,world\r\n+3808,world\r\n+3809,world\r\n+3810,world\r\n+3811,world\r\n+3812,world\r\n+3813,world\r\n+3814,world\r\n+3815,world\r\n+3816,world\r\n+3817,world\r\n+3818,world\r\n+3819,world\r\n+3820,world\r\n+3821,world\r\n+3822,world\r\n+3823,world\r\n+3824,world\r\n+3825,world\r\n+3826,world\r\n+3827,world\r\n+3828,world\r\n+3829,world\r\n+3830,world\r\n+3831,world\r\n+3832,world\r\n+3833,world\r\n+3834,world\r\n+3835,world\r\n+3836,world\r\n+3837,world\r\n+3838,world\r\n+3839,world\r\n+3840,world\r\n+3841,world\r\n+3842,world\r\n+3843,world\r\n+3844,world\r\n+3845,world\r\n+3846,world\r\n+3847,world\r\n+3848,world\r\n+3849,world\r\n+3850,world\r\n+3851,world\r\n+3852,world\r\n+3853,world\r\n+3854,world\r\n+3855,world\r\n+3856,world\r\n+3857,world\r\n+3858,world\r\n+3859,world\r\n+3860,world\r\n+3861,world\r\n+3862,world\r\n+3863,world\r\n+3864,world\r\n+3865,world\r\n+3866,world\r\n+3867,world\r\n+3868,world\r\n+3869,world\r\n+3870,world\r\n+3871,world\r\n+3872,world\r\n+3873,world\r\n+3874,world\r\n+3875,world\r\n+3876,world\r\n+3877,world\r\n+3878,world\r\n+3879,world\r\n+3880,world\r\n+3881,world\r\n+3882,world\r\n+3883,world\r\n+3884,world\r\n+3885,world\r\n+3886,world\r\n+3887,world\r\n+3888,world\r\n+3889,world\r\n+3890,world\r\n+3891,world\r\n+3892,world\r\n+3893,world\r\n+3894,world\r\n+3895,world\r\n+3896,world\r\n+3897,world\r\n+3898,world\r\n+3899,world\r\n+3900,world\r\n+3901,world\r\n+3902,world\r\n+3903,world\r\n+3904,world\r\n+3905,world\r\n+3906,world\r\n+3907,world\r\n+3908,world\r\n+3909,world\r\n+3910,world\r\n+3911,world\r\n+3912,world\r\n+3913,world\r\n+3914,world\r\n+3915,world\r\n+3916,world\r\n+3917,world\r\n+3918,world\r\n+3919,world\r\n+3920,world\r\n+3921,world\r\n+3922,world\r\n+3923,world\r\n+3924,world\r\n+3925,world\r\n+3926,world\r\n+3927,world\r\n+3928,world\r\n+3929,world\r\n+3930,world\r\n+3931,world\r\n+3932,world\r\n+3933,world\r\n+3934,world\r\n+3935,world\r\n+3936,world\r\n+3937,world\r\n+3938,world\r\n+3939,world\r\n+3940,world\r\n+3941,world\r\n+3942,world\r\n+3943,world\r\n+3944,world\r\n+3945,world\r\n+3946,world\r\n+3947,world\r\n+3948,world\r\n+3949,world\r\n+3950,world\r\n+3951,world\r\n+3952,world\r\n+3953,world\r\n+3954,world\r\n+3955,world\r\n+3956,world\r\n+3957,world\r\n+3958,world\r\n+3959,world\r\n+3960,world\r\n+3961,world\r\n+3962,world\r\n+3963,world\r\n+3964,world\r\n+3965,world\r\n+3966,world\r\n+3967,world\r\n+3968,world\r\n+3969,world\r\n+3970,world\r\n+3971,world\r\n+3972,world\r\n+3973,world\r\n+3974,world\r\n+3975,world\r\n+3976,world\r\n+3977,world\r\n+3978,world\r\n+3979,world\r\n+3980,world\r\n+3981,world\r\n+3982,world\r\n+3983,world\r\n+3984,world\r\n+3985,world\r\n+3986,world\r\n+3987,world\r\n+3988,world\r\n+3989,world\r\n+3990,world\r\n+3991,world\r\n+3992,world\r\n+3993,world\r\n+3994,world\r\n+3995,world\r\n+3996,world\r\n+3997,world\r\n+3998,world\r\n+3999,world\r\n+4000,world\r\n+4001,world\r\n+4002,world\r\n+4003,world\r\n+4004,world\r\n+4005,world\r\n+4006,world\r\n+4007,world\r\n+4008,world\r\n+4009,world\r\n+4010,world\r\n+4011,world\r\n+4012,world\r\n+4013,world\r\n+4014,world\r\n+4015,world\r\n+4016,world\r\n+4017,world\r\n+4018,world\r\n+4019,world\r\n+4020,world\r\n+4021,world\r\n+4022,world\r\n+4023,world\r\n+4024,world\r\n+4025,world\r\n+4026,world\r\n+4027,world\r\n+4028,world\r\n+4029,world\r\n+4030,world\r\n+4031,world\r\n+4032,world\r\n+4033,world\r\n+4034,world\r\n+4035,world\r\n+4036,world\r\n+4037,world\r\n+4038,world\r\n+4039,world\r\n+4040,world\r\n+4041,world\r\n+4042,world\r\n+4043,world\r\n+4044,world\r\n+4045,world\r\n+4046,world\r\n+4047,world\r\n+4048,world\r\n+4049,world\r\n+4050,world\r\n+4051,world\r\n+4052,world\r\n+4053,world\r\n+4054,world\r\n+4055,world\r\n+4056,world\r\n+4057,world\r\n+4058,world\r\n+4059,world\r\n+4060,world\r\n+4061,world\r\n+4062,world\r\n+4063,world\r\n+4064,world\r\n+4065,world\r\n+4066,world\r\n+4067,world\r\n+4068,world\r\n+4069,world\r\n+4070,world\r\n+4071,world\r\n+4072,world\r\n+4073,world\r\n+4074,world\r\n+4075,world\r\n+4076,world\r\n+4077,world\r\n+4078,world\r\n+4079,world\r\n+4080,world\r\n+4081,world\r\n+4082,world\r\n+4083,world\r\n+4084,world\r\n+4085,world\r\n+4086,world\r\n+4087,world\r\n+4088,world\r\n+4089,world\r\n+4090,world\r\n+4091,world\r\n+4092,world\r\n+4093,world\r\n+4094,world\r\n+4095,world\r\n+4096,world\r\n+4097,world\r\n+4098,world\r\n+4099,world\r\n+4100,world\r\n+4101,world\r\n+4102,world\r\n+4103,world\r\n+4104,world\r\n+4105,world\r\n+4106,world\r\n+4107,world\r\n+4108,world\r\n+4109,world\r\n+4110,world\r\n+4111,world\r\n+4112,world\r\n+4113,world\r\n+4114,world\r\n+4115,world\r\n+4116,world\r\n+4117,world\r\n+4118,world\r\n+4119,world\r\n+4120,world\r\n+4121,world\r\n+4122,world\r\n+4123,world\r\n+4124,world\r\n+4125,world\r\n+4126,world\r\n+4127,world\r\n+4128,world\r\n+4129,world\r\n+4130,world\r\n+4131,world\r\n+4132,world\r\n+4133,world\r\n+4134,world\r\n+4135,world\r\n+4136,world\r\n+4137,world\r\n+4138,world\r\n+4139,world\r\n+4140,world\r\n+4141,world\r\n+4142,world\r\n+4143,world\r\n+4144,world\r\n+4145,world\r\n+4146,world\r\n+4147,world\r\n+4148,world\r\n+4149,world\r\n+4150,world\r\n+4151,world\r\n+4152,world\r\n+4153,world\r\n+4154,world\r\n+4155,world\r\n+4156,world\r\n+4157,world\r\n+4158,world\r\n+4159,world\r\n+4160,world\r\n+4161,world\r\n+4162,world\r\n+4163,world\r\n+4164,world\r\n+4165,world\r\n+4166,world\r\n+4167,world\r\n+4168,world\r\n+4169,world\r\n+4170,world\r\n+4171,world\r\n+4172,world\r\n+4173,world\r\n+4174,world\r\n+4175,world\r\n+4176,world\r\n+4177,world\r\n+4178,world\r\n+4179,world\r\n+4180,world\r\n+4181,world\r\n+4182,world\r\n+4183,world\r\n+4184,world\r\n+4185,world\r\n+4186,world\r\n+4187,world\r\n+4188,world\r\n+4189,world\r\n+4190,world\r\n+4191,world\r\n+4192,world\r\n+4193,world\r\n+4194,world\r\n+4195,world\r\n+4196,world\r\n+4197,world\r\n+4198,world\r\n+4199,world\r\n+4200,world\r\n+4201,world\r\n+4202,world\r\n+4203,world\r\n+4204,world\r\n+4205,world\r\n+4206,world\r\n+4207,world\r\n+4208,world\r\n+4209,world\r\n+4210,world\r\n+4211,world\r\n+4212,world\r\n+4213,world\r\n+4214,world\r\n+4215,world\r\n+4216,world\r\n+4217,world\r\n+4218,world\r\n+4219,world\r\n+4220,world\r\n+4221,world\r\n+4222,world\r\n+4223,world\r\n+4224,world\r\n+4225,world\r\n+4226,world\r\n+4227,world\r\n+4228,world\r\n+4229,world\r\n+4230,world\r\n+4231,world\r\n+4232,world\r\n+4233,world\r\n+4234,world\r\n+4235,world\r\n+4236,world\r\n+4237,world\r\n+4238,world\r\n+4239,world\r\n+4240,world\r\n+4241,world\r\n+4242,world\r\n+4243,world\r\n+4244,world\r\n+4245,world\r\n+4246,world\r\n+4247,world\r\n+4248,world\r\n+4249,world\r\n+4250,world\r\n+4251,world\r\n+4252,world\r\n+4253,world\r\n+4254,world\r\n+4255,world\r\n+4256,world\r\n+4257,world\r\n+4258,world\r\n+4259,world\r\n+4260,world\r\n+4261,world\r\n+4262,world\r\n+4263,world\r\n+4264,world\r\n+4265,world\r\n+4266,world\r\n+4267,world\r\n+4268,world\r\n+4269,world\r\n+4270,world\r\n+4271,world\r\n+4272,world\r\n+4273,world\r\n+4274,world\r\n+4275,world\r\n+4276,world\r\n+4277,world\r\n+4278,world\r\n+4279,world\r\n+4280,world\r\n+4281,world\r\n+4282,world\r\n+4283,world\r\n+4284,world\r\n+4285,world\r\n+4286,world\r\n+4287,world\r\n+4288,world\r\n+4289,world\r\n+4290,world\r\n+4291,world\r\n+4292,world\r\n+4293,world\r\n+4294,world\r\n+4295,world\r\n+4296,world\r\n+4297,world\r\n+4298,world\r\n+4299,world\r\n+4300,world\r\n+4301,world\r\n+4302,world\r\n+4303,world\r\n+4304,world\r\n+4305,world\r\n+4306,world\r\n+4307,world\r\n+4308,world\r\n+4309,world\r\n+4310,world\r\n+4311,world\r\n+4312,world\r\n+4313,world\r\n+4314,world\r\n+4315,world\r\n+4316,world\r\n+4317,world\r\n+4318,world\r\n+4319,world\r\n+4320,world\r\n+4321,world\r\n+4322,world\r\n+4323,world\r\n+4324,world\r\n+4325,world\r\n+4326,world\r\n+4327,world\r\n+4328,world\r\n+4329,world\r\n+4330,world\r\n+4331,world\r\n+4332,world\r\n+4333,world\r\n+4334,world\r\n+4335,world\r\n+4336,world\r\n+4337,world\r\n+4338,world\r\n+4339,world\r\n+4340,world\r\n+4341,world\r\n+4342,world\r\n+4343,world\r\n+4344,world\r\n+4345,world\r\n+4346,world\r\n+4347,world\r\n+4348,world\r\n+4349,world\r\n+4350,world\r\n+4351,world\r\n+4352,world\r\n+4353,world\r\n+4354,world\r\n+4355,world\r\n+4356,world\r\n+4357,world\r\n+4358,world\r\n+4359,world\r\n+4360,world\r\n+4361,world\r\n+4362,world\r\n+4363,world\r\n+4364,world\r\n+4365,world\r\n+4366,world\r\n+4367,world\r\n+4368,world\r\n+4369,world\r\n+4370,world\r\n+4371,world\r\n+4372,world\r\n+4373,world\r\n+4374,world\r\n+4375,world\r\n+4376,world\r\n+4377,world\r\n+4378,world\r\n+4379,world\r\n+4380,world\r\n+4381,world\r\n+4382,world\r\n+4383,world\r\n+4384,world\r\n+4385,world\r\n+4386,world\r\n+4387,world\r\n+4388,world\r\n+4389,world\r\n+4390,world\r\n+4391,world\r\n+4392,world\r\n+4393,world\r\n+4394,world\r\n+4395,world\r\n+4396,world\r\n+4397,world\r\n+4398,world\r\n+4399,world\r\n+4400,world\r\n+4401,world\r\n+4402,world\r\n+4403,world\r\n+4404,world\r\n+4405,world\r\n+4406,world\r\n+4407,world\r\n+4408,world\r\n+4409,world\r\n+4410,world\r\n+4411,world\r\n+4412,world\r\n+4413,world\r\n+4414,world\r\n+4415,world\r\n+4416,world\r\n+4417,world\r\n+4418,world\r\n+4419,world\r\n+4420,world\r\n+4421,world\r\n+4422,world\r\n+4423,world\r\n+4424,world\r\n+4425,world\r\n+4426,world\r\n+4427,world\r\n+4428,world\r\n+4429,world\r\n+4430,world\r\n+4431,world\r\n+4432,world\r\n+4433,world\r\n+4434,world\r\n+4435,world\r\n+4436,world\r\n+4437,world\r\n+4438,world\r\n+4439,world\r\n+4440,world\r\n+4441,world\r\n+4442,world\r\n+4443,world\r\n+4444,world\r\n+4445,world\r\n+4446,world\r\n+4447,world\r\n+4448,world\r\n+4449,world\r\n+4450,world\r\n+4451,world\r\n+4452,world\r\n+4453,world\r\n+4454,world\r\n+4455,world\r\n+4456,world\r\n+4457,world\r\n+4458,world\r\n+4459,world\r\n+4460,world\r\n+4461,world\r\n+4462,world\r\n+4463,world\r\n+4464,world\r\n+4465,world\r\n+4466,world\r\n+4467,world\r\n+4468,world\r\n+4469,world\r\n+4470,world\r\n+4471,world\r\n+4472,world\r\n+4473,world\r\n+4474,world\r\n+4475,world\r\n+4476,world\r\n+4477,world\r\n+4478,world\r\n+4479,world\r\n+4480,world\r\n+4481,world\r\n+4482,world\r\n+4483,world\r\n+4484,world\r\n+4485,world\r\n+4486,world\r\n+4487,world\r\n+4488,world\r\n+4489,world\r\n+4490,world\r\n+4491,world\r\n+4492,world\r\n+4493,world\r\n+4494,world\r\n+4495,world\r\n+4496,world\r\n+4497,world\r\n+4498,world\r\n+4499,world\r\n+4500,world\r\n+4501,world\r\n+4502,world\r\n+4503,world\r\n+4504,world\r\n+4505,world\r\n+4506,world\r\n+4507,world\r\n+4508,world\r\n+4509,world\r\n+4510,world\r\n+4511,world\r\n+4512,world\r\n+4513,world\r\n+4514,world\r\n+4515,world\r\n+4516,world\r\n+4517,world\r\n+4518,world\r\n+4519,world\r\n+4520,world\r\n+4521,world\r\n+4522,world\r\n+4523,world\r\n+4524,world\r\n+4525,world\r\n+4526,world\r\n+4527,world\r\n+4528,world\r\n+4529,world\r\n+4530,world\r\n+4531,world\r\n+4532,world\r\n+4533,world\r\n+4534,world\r\n+4535,world\r\n+4536,world\r\n+4537,world\r\n+4538,world\r\n+4539,world\r\n+4540,world\r\n+4541,world\r\n+4542,world\r\n+4543,world\r\n+4544,world\r\n+4545,world\r\n+4546,world\r\n+4547,world\r\n+4548,world\r\n+4549,world\r\n+4550,world\r\n+4551,world\r\n+4552,world\r\n+4553,world\r\n+4554,world\r\n+4555,world\r\n+4556,world\r\n+4557,world\r\n+4558,world\r\n+4559,world\r\n+4560,world\r\n+4561,world\r\n+4562,world\r\n+4563,world\r\n+4564,world\r\n+4565,world\r\n+4566,world\r\n+4567,world\r\n+4568,world\r\n+4569,world\r\n+4570,world\r\n+4571,world\r\n+4572,world\r\n+4573,world\r\n+4574,world\r\n+4575,world\r\n+4576,world\r\n+4577,world\r\n+4578,world\r\n+4579,world\r\n+4580,world\r\n+4581,world\r\n+4582,world\r\n+4583,world\r\n+4584,world\r\n+4585,world\r\n+4586,world\r\n+4587,world\r\n+4588,world\r\n+4589,world\r\n+4590,world\r\n+4591,world\r\n+4592,world\r\n+4593,world\r\n+4594,world\r\n+4595,world\r\n+4596,world\r\n+4597,world\r\n+4598,world\r\n+4599,world\r\n+4600,world\r\n+4601,world\r\n+4602,world\r\n+4603,world\r\n+4604,world\r\n+4605,world\r\n+4606,world\r\n+4607,world\r\n+4608,world\r\n+4609,world\r\n+4610,world\r\n+4611,world\r\n+4612,world\r\n+4613,world\r\n+4614,world\r\n+4615,world\r\n+4616,world\r\n+4617,world\r\n+4618,world\r\n+4619,world\r\n+4620,world\r\n+4621,world\r\n+4622,world\r\n+4623,world\r\n+4624,world\r\n+4625,world\r\n+4626,world\r\n+4627,world\r\n+4628,world\r\n+4629,world\r\n+4630,world\r\n+4631,world\r\n+4632,world\r\n+4633,world\r\n+4634,world\r\n+4635,world\r\n+4636,world\r\n+4637,world\r\n+4638,world\r\n+4639,world\r\n+4640,world\r\n+4641,world\r\n+4642,world\r\n+4643,world\r\n+4644,world\r\n+4645,world\r\n+4646,world\r\n+4647,world\r\n+4648,world\r\n+4649,world\r\n+4650,world\r\n+4651,world\r\n+4652,world\r\n+4653,world\r\n+4654,world\r\n+4655,world\r\n+4656,world\r\n+4657,world\r\n+4658,world\r\n+4659,world\r\n+4660,world\r\n+4661,world\r\n+4662,world\r\n+4663,world\r\n+4664,world\r\n+4665,world\r\n+4666,world\r\n+4667,world\r\n+4668,world\r\n+4669,world\r\n+4670,world\r\n+4671,world\r\n+4672,world\r\n+4673,world\r\n+4674,world\r\n+4675,world\r\n+4676,world\r\n+4677,world\r\n+4678,world\r\n+4679,world\r\n+4680,world\r\n+4681,world\r\n+4682,world\r\n+4683,world\r\n+4684,world\r\n+4685,world\r\n+4686,world\r\n+4687,world\r\n+4688,world\r\n+4689,world\r\n+4690,world\r\n+4691,world\r\n+4692,world\r\n+4693,world\r\n+4694,world\r\n+4695,world\r\n+4696,world\r\n+4697,world\r\n+4698,world\r\n+4699,world\r\n+4700,world\r\n+4701,world\r\n+4702,world\r\n+4703,world\r\n+4704,world\r\n+4705,world\r\n+4706,world\r\n+4707,world\r\n+4708,world\r\n+4709,world\r\n+4710,world\r\n+4711,world\r\n+4712,world\r\n+4713,world\r\n+4714,world\r\n+4715,world\r\n+4716,world\r\n+4717,world\r\n+4718,world\r\n+4719,world\r\n+4720,world\r\n+4721,world\r\n+4722,world\r\n+4723,world\r\n+4724,world\r\n+4725,world\r\n+4726,world\r\n+4727,world\r\n+4728,world\r\n+4729,world\r\n+4730,world\r\n+4731,world\r\n+4732,world\r\n+4733,world\r\n+4734,world\r\n+4735,world\r\n+4736,world\r\n+4737,world\r\n+4738,world\r\n+4739,world\r\n+4740,world\r\n+4741,world\r\n+4742,world\r\n+4743,world\r\n+4744,world\r\n+4745,world\r\n+4746,world\r\n+4747,world\r\n+4748,world\r\n+4749,world\r\n+4750,world\r\n+4751,world\r\n+4752,world\r\n+4753,world\r\n+4754,world\r\n+4755,world\r\n+4756,world\r\n+4757,world\r\n+4758,world\r\n+4759,world\r\n+4760,world\r\n+4761,world\r\n+4762,world\r\n+4763,world\r\n+4764,world\r\n+4765,world\r\n+4766,world\r\n+4767,world\r\n+4768,world\r\n+4769,world\r\n+4770,world\r\n+4771,world\r\n+4772,world\r\n+4773,world\r\n+4774,world\r\n+4775,world\r\n+4776,world\r\n+4777,world\r\n+4778,world\r\n+4779,world\r\n+4780,world\r\n+4781,world\r\n+4782,world\r\n+4783,world\r\n+4784,world\r\n+4785,world\r\n+4786,world\r\n+4787,world\r\n+4788,world\r\n+4789,world\r\n+4790,world\r\n+4791,world\r\n+4792,world\r\n+4793,world\r\n+4794,world\r\n+4795,world\r\n+4796,world\r\n+4797,world\r\n+4798,world\r\n+4799,world\r\n+4800,world\r\n+4801,world\r\n+4802,world\r\n+4803,world\r\n+4804,world\r\n+4805,world\r\n+4806,world\r\n+4807,world\r\n+4808,world\r\n+4809,world\r\n+4810,world\r\n+4811,world\r\n+4812,world\r\n+4813,world\r\n+4814,world\r\n+4815,world\r\n+4816,world\r\n+4817,world\r\n+4818,world\r\n+4819,world\r\n+4820,world\r\n+4821,world\r\n+4822,world\r\n+4823,world\r\n+4824,world\r\n+4825,world\r\n+4826,world\r\n+4827,world\r\n+4828,world\r\n+4829,world\r\n+4830,world\r\n+4831,world\r\n+4832,world\r\n+4833,world\r\n+4834,world\r\n+4835,world\r\n+4836,world\r\n+4837,world\r\n+4838,world\r\n+4839,world\r\n+4840,world\r\n+4841,world\r\n+4842,world\r\n+4843,world\r\n+4844,world\r\n+4845,world\r\n+4846,world\r\n+4847,world\r\n+4848,world\r\n+4849,world\r\n+4850,world\r\n+4851,world\r\n+4852,world\r\n+4853,world\r\n+4854,world\r\n+4855,world\r\n+4856,world\r\n+4857,world\r\n+4858,world\r\n+4859,world\r\n+4860,world\r\n+4861,world\r\n+4862,world\r\n+4863,world\r\n+4864,world\r\n+4865,world\r\n+4866,world\r\n+4867,world\r\n+4868,world\r\n+4869,world\r\n+4870,world\r\n+4871,world\r\n+4872,world\r\n+4873,world\r\n+4874,world\r\n+4875,world\r\n+4876,world\r\n+4877,world\r\n+4878,world\r\n+4879,world\r\n+4880,world\r\n+4881,world\r\n+4882,world\r\n+4883,world\r\n+4884,world\r\n+4885,world\r\n+4886,world\r\n+4887,world\r\n+4888,world\r\n+4889,world\r\n+4890,world\r\n+4891,world\r\n+4892,world\r\n+4893,world\r\n+4894,world\r\n+4895,world\r\n+4896,world\r\n+4897,world\r\n+4898,world\r\n+4899,world\r\n+4900,world\r\n+4901,world\r\n+4902,world\r\n+4903,world\r\n+4904,world\r\n+4905,world\r\n+4906,world\r\n+4907,world\r\n+4908,world\r\n+4909,world\r\n+4910,world\r\n+4911,world\r\n+4912,world\r\n+4913,world\r\n+4914,world\r\n+4915,world\r\n+4916,world\r\n+4917,world\r\n+4918,world\r\n+4919,world\r\n+4920,world\r\n+4921,world\r\n+4922,world\r\n+4923,world\r\n+4924,world\r\n+4925,world\r\n+4926,world\r\n+4927,world\r\n+4928,world\r\n+4929,world\r\n+4930,world\r\n+4931,world\r\n+4932,world\r\n+4933,world\r\n+4934,world\r\n+4935,world\r\n+4936,world\r\n+4937,world\r\n+4938,world\r\n+4939,world\r\n+4940,world\r\n+4941,world\r\n+4942,world\r\n+4943,world\r\n+4944,world\r\n+4945,world\r\n+4946,world\r\n+4947,world\r\n+4948,world\r\n+4949,world\r\n+4950,world\r\n+4951,world\r\n+4952,world\r\n+4953,world\r\n+4954,world\r\n+4955,world\r\n+4956,world\r\n+4957,world\r\n+4958,world\r\n+4959,world\r\n+4960,world\r\n+4961,world\r\n+4962,world\r\n+4963,world\r\n+4964,world\r\n+4965,world\r\n+4966,world\r\n+4967,world\r\n+4968,world\r\n+4969,world\r\n+4970,world\r\n+4971,world\r\n+4972,world\r\n+4973,world\r\n+4974,world\r\n+4975,world\r\n+4976,world\r\n+4977,world\r\n+4978,world\r\n+4979,world\r\n+4980,world\r\n+4981,world\r\n+4982,world\r\n+4983,world\r\n+4984,world\r\n+4985,world\r\n+4986,world\r\n+4987,world\r\n+4988,world\r\n+4989,world\r\n+4990,world\r\n+4991,world\r\n+4992,world\r\n+4993,world\r\n+4994,world\r\n+4995,world\r\n+4996,world\r\n+4997,world\r\n+4998,world\r\n+4999,world\r\n+5000,world\r\n+5001,world\r\n+5002,world\r\n+5003,world\r\n+5004,world\r\n+5005,world\r\n+5006,world\r\n+5007,world\r\n+5008,world\r\n+5009,world\r\n+5010,world\r\n+5011,world\r\n+5012,world\r\n+5013,world\r\n+5014,world\r\n+5015,world\r\n+5016,world\r\n+5017,world\r\n+5018,world\r\n+5019,world\r\n+5020,world\r\n+5021,world\r\n+5022,world\r\n+5023,world\r\n+5024,world\r\n+5025,world\r\n+5026,world\r\n+5027,world\r\n+5028,world\r\n+5029,world\r\n+5030,world\r\n+5031,world\r\n+5032,world\r\n+5033,world\r\n+5034,world\r\n+5035,world\r\n+5036,world\r\n+5037,world\r\n+5038,world\r\n+5039,world\r\n+5040,world\r\n+5041,world\r\n+5042,world\r\n+5043,world\r\n+5044,world\r\n+5045,world\r\n+5046,world\r\n+5047,world\r\n+5048,world\r\n+5049,world\r\n+5050,world\r\n+5051,world\r\n+5052,world\r\n+5053,world\r\n+5054,world\r\n+5055,world\r\n+5056,world\r\n+5057,world\r\n+5058,world\r\n+5059,world\r\n+5060,world\r\n+5061,world\r\n+5062,world\r\n+5063,world\r\n+5064,world\r\n+5065,world\r\n+5066,world\r\n+5067,world\r\n+5068,world\r\n+5069,world\r\n+5070,world\r\n+5071,world\r\n+5072,world\r\n+5073,world\r\n+5074,world\r\n+5075,world\r\n+5076,world\r\n+5077,world\r\n+5078,world\r\n+5079,world\r\n+5080,world\r\n+5081,world\r\n+5082,world\r\n+5083,world\r\n+5084,world\r\n+5085,world\r\n+5086,world\r\n+5087,world\r\n+5088,world\r\n+5089,world\r\n+5090,world\r\n+5091,world\r\n+5092,world\r\n+5093,world\r\n+5094,world\r\n+5095,world\r\n+5096,world\r\n+5097,world\r\n+5098,world\r\n+5099,world\r\n+5100,world\r\n+5101,world\r\n+5102,world\r\n+5103,world\r\n+5104,world\r\n+5105,world\r\n+5106,world\r\n+5107,world\r\n+5108,world\r\n+5109,world\r\n+5110,world\r\n+5111,world\r\n+5112,world\r\n+5113,world\r\n+5114,world\r\n+5115,world\r\n+5116,world\r\n+5117,world\r\n+5118,world\r\n+5119,world\r\n+5120,world\r\n+5121,world\r\n+5122,world\r\n+5123,world\r\n+5124,world\r\n+5125,world\r\n+5126,world\r\n+5127,world\r\n+5128,world\r\n+5129,world\r\n+5130,world\r\n+5131,world\r\n+5132,world\r\n+5133,world\r\n+5134,world\r\n+5135,world\r\n+5136,world\r\n+5137,world\r\n+5138,world\r\n+5139,world\r\n+5140,world\r\n+5141,world\r\n+5142,world\r\n+5143,world\r\n+5144,world\r\n+5145,world\r\n+5146,world\r\n+5147,world\r\n+5148,world\r\n+5149,world\r\n+5150,world\r\n+5151,world\r\n+5152,world\r\n+5153,world\r\n+5154,world\r\n+5155,world\r\n+5156,world\r\n+5157,world\r\n+5158,world\r\n+5159,world\r\n+5160,world\r\n+5161,world\r\n+5162,world\r\n+5163,world\r\n+5164,world\r\n+5165,world\r\n+5166,world\r\n+5167,world\r\n+5168,world\r\n+5169,world\r\n+5170,world\r\n+5171,world\r\n+5172,world\r\n+5173,world\r\n+5174,world\r\n+5175,world\r\n+5176,world\r\n+5177,world\r\n+5178,world\r\n+5179,world\r\n+5180,world\r\n+5181,world\r\n+5182,world\r\n+5183,world\r\n+5184,world\r\n+5185,world\r\n+5186,world\r\n+5187,world\r\n+5188,world\r\n+5189,world\r\n+5190,world\r\n+5191,world\r\n+5192,world\r\n+5193,world\r\n+5194,world\r\n+5195,world\r\n+5196,world\r\n+5197,world\r\n+5198,world\r\n+5199,world\r\n+5200,world\r\n+5201,world\r\n+5202,world\r\n+5203,world\r\n+5204,world\r\n+5205,world\r\n+5206,world\r\n+5207,world\r\n+5208,world\r\n+5209,world\r\n+5210,world\r\n+5211,world\r\n+5212,world\r\n+5213,world\r\n+5214,world\r\n+5215,world\r\n+5216,world\r\n+5217,world\r\n+5218,world\r\n+5219,world\r\n+5220,world\r\n+5221,world\r\n+5222,world\r\n+5223,world\r\n+5224,world\r\n+5225,world\r\n+5226,world\r\n+5227,world\r\n+5228,world\r\n+5229,world\r\n+5230,world\r\n+5231,world\r\n+5232,world\r\n+5233,world\r\n+5234,world\r\n+5235,world\r\n+5236,world\r\n+5237,world\r\n+5238,world\r\n+5239,world\r\n+5240,world\r\n+5241,world\r\n+5242,world\r\n+5243,world\r\n+5244,world\r\n+5245,world\r\n+5246,world\r\n+5247,world\r\n+5248,world\r\n+5249,world\r\n+5250,world\r\n+5251,world\r\n+5252,world\r\n+5253,world\r\n+5254,world\r\n+5255,world\r\n+5256,world\r\n+5257,world\r\n+5258,world\r\n+5259,world\r\n+5260,world\r\n+5261,world\r\n+5262,world\r\n+5263,world\r\n+5264,world\r\n+5265,world\r\n+5266,world\r\n+5267,world\r\n+5268,world\r\n+5269,world\r\n+5270,world\r\n+5271,world\r\n+5272,world\r\n+5273,world\r\n+5274,world\r\n+5275,world\r\n+5276,world\r\n+5277,world\r\n+5278,world\r\n+5279,world\r\n+5280,world\r\n+5281,world\r\n+5282,world\r\n+5283,world\r\n+5284,world\r\n+5285,world\r\n+5286,world\r\n+5287,world\r\n+5288,world\r\n+5289,world\r\n+5290,world\r\n+5291,world\r\n+5292,world\r\n+5293,world\r\n+5294,world\r\n+5295,world\r\n+5296,world\r\n+5297,world\r\n+5298,world\r\n+5299,world\r\n+5300,world\r\n+5301,world\r\n+5302,world\r\n+5303,world\r\n+5304,world\r\n+5305,world\r\n+5306,world\r\n+5307,world\r\n+5308,world\r\n+5309,world\r\n+5310,world\r\n+5311,world\r\n+5312,world\r\n+5313,world\r\n+5314,world\r\n+5315,world\r\n+5316,world\r\n+5317,world\r\n+5318,world\r\n+5319,world\r\n+5320,world\r\n+5321,world\r\n+5322,world\r\n+5323,world\r\n+5324,world\r\n+5325,world\r\n+5326,world\r\n+5327,world\r\n+5328,world\r\n+5329,world\r\n+5330,world\r\n+5331,world\r\n+5332,world\r\n+5333,world\r\n+5334,world\r\n+5335,world\r\n+5336,world\r\n+5337,world\r\n+5338,world\r\n+5339,world\r\n+5340,world\r\n+5341,world\r\n+5342,world\r\n+5343,world\r\n+5344,world\r\n+5345,world\r\n+5346,world\r\n+5347,world\r\n+5348,world\r\n+5349,world\r\n+5350,world\r\n+5351,world\r\n+5352,world\r\n+5353,world\r\n+5354,world\r\n+5355,world\r\n+5356,world\r\n+5357,world\r\n+5358,world\r\n+5359,world\r\n+5360,world\r\n+5361,world\r\n+5362,world\r\n+5363,world\r\n+5364,world\r\n+5365,world\r\n+5366,world\r\n+5367,world\r\n+5368,world\r\n+5369,world\r\n+5370,world\r\n+5371,world\r\n+5372,world\r\n+5373,world\r\n+5374,world\r\n+5375,world\r\n+5376,world\r\n+5377,world\r\n+5378,world\r\n+5379,world\r\n+5380,world\r\n+5381,world\r\n+5382,world\r\n+5383,world\r\n+5384,world\r\n+5385,world\r\n+5386,world\r\n+5387,world\r\n+5388,world\r\n+5389,world\r\n+5390,world\r\n+5391,world\r\n+5392,world\r\n+5393,world\r\n+5394,world\r\n+5395,world\r\n+5396,world\r\n+5397,world\r\n+5398,world\r\n+5399,world\r\n+5400,world\r\n+5401,world\r\n+5402,world\r\n+5403,world\r\n+5404,world\r\n+5405,world\r\n+5406,world\r\n+5407,world\r\n+5408,world\r\n+5409,world\r\n+5410,world\r\n+5411,world\r\n+5412,world\r\n+5413,world\r\n+5414,world\r\n+5415,world\r\n+5416,world\r\n+5417,world\r\n+5418,world\r\n+5419,world\r\n+5420,world\r\n+5421,world\r\n+5422,world\r\n+5423,world\r\n+5424,world\r\n+5425,world\r\n+5426,world\r\n+5427,world\r\n+5428,world\r\n+5429,world\r\n+5430,world\r\n+5431,world\r\n+5432,world\r\n+5433,world\r\n+5434,world\r\n+5435,world\r\n+5436,world\r\n+5437,world\r\n+5438,world\r\n+5439,world\r\n+5440,world\r\n+5441,world\r\n+5442,world\r\n+5443,world\r\n+5444,world\r\n+5445,world\r\n+5446,world\r\n+5447,world\r\n+5448,world\r\n+5449,world\r\n+5450,world\r\n+5451,world\r\n+5452,world\r\n+5453,world\r\n+5454,world\r\n+5455,world\r\n+5456,world\r\n+5457,world\r\n+5458,world\r\n+5459,world\r\n+5460,world\r\n+5461,world\r\n+5462,world\r\n+5463,world\r\n+5464,world\r\n+5465,world\r\n+5466,world\r\n+5467,world\r\n+5468,world\r\n+5469,world\r\n+5470,world\r\n+5471,world\r\n+5472,world\r\n+5473,world\r\n+5474,world\r\n+5475,world\r\n+5476,world\r\n+5477,world\r\n+5478,world\r\n+5479,world\r\n+5480,world\r\n+5481,world\r\n+5482,world\r\n+5483,world\r\n+5484,world\r\n+5485,world\r\n+5486,world\r\n+5487,world\r\n+5488,world\r\n+5489,world\r\n+5490,world\r\n+5491,world\r\n+5492,world\r\n+5493,world\r\n+5494,world\r\n+5495,world\r\n+5496,world\r\n+5497,world\r\n+5498,world\r\n+5499,world\r\n+5500,world\r\n+5501,world\r\n+5502,world\r\n+5503,world\r\n+5504,world\r\n+5505,world\r\n+5506,world\r\n+5507,world\r\n+5508,world\r\n+5509,world\r\n+5510,world\r\n+5511,world\r\n+5512,world\r\n+5513,world\r\n+5514,world\r\n+5515,world\r\n+5516,world\r\n+5517,world\r\n+5518,world\r\n+5519,world\r\n+5520,world\r\n+5521,world\r\n+5522,world\r\n+5523,world\r\n+5524,world\r\n+5525,world\r\n+5526,world\r\n+5527,world\r\n+5528,world\r\n+5529,world\r\n+5530,world\r\n+5531,world\r\n+5532,world\r\n+5533,world\r\n+5534,world\r\n+5535,world\r\n+5536,world\r\n+5537,world\r\n+5538,world\r\n+5539,world\r\n+5540,world\r\n+5541,world\r\n+5542,world\r\n+5543,world\r\n+5544,world\r\n+5545,world\r\n+5546,world\r\n+5547,world\r\n+5548,world\r\n+5549,world\r\n+5550,world\r\n+5551,world\r\n+5552,world\r\n+5553,world\r\n+5554,world\r\n+5555,world\r\n+5556,world\r\n+5557,world\r\n+5558,world\r\n+5559,world\r\n+5560,world\r\n+5561,world\r\n+5562,world\r\n+5563,world\r\n+5564,world\r\n+5565,world\r\n+5566,world\r\n+5567,world\r\n+5568,world\r\n+5569,world\r\n+5570,world\r\n+5571,world\r\n+5572,world\r\n+5573,world\r\n+5574,world\r\n+5575,world\r\n+5576,world\r\n+5577,world\r\n+5578,world\r\n+5579,world\r\n+5580,world\r\n+5581,world\r\n+5582,world\r\n+5583,world\r\n+5584,world\r\n+5585,world\r\n+5586,world\r\n+5587,world\r\n+5588,world\r\n+5589,world\r\n+5590,world\r\n+5591,world\r\n+5592,world\r\n+5593,world\r\n+5594,world\r\n+5595,world\r\n+5596,world\r\n+5597,world\r\n+5598,world\r\n+5599,world\r\n+5600,world\r\n+5601,world\r\n+5602,world\r\n+5603,world\r\n+5604,world\r\n+5605,world\r\n+5606,world\r\n+5607,world\r\n+5608,world\r\n+5609,world\r\n+5610,world\r\n+5611,world\r\n+5612,world\r\n+5613,world\r\n+5614,world\r\n+5615,world\r\n+5616,world\r\n+5617,world\r\n+5618,world\r\n+5619,world\r\n+5620,world\r\n+5621,world\r\n+5622,world\r\n+5623,world\r\n+5624,world\r\n+5625,world\r\n+5626,world\r\n+5627,world\r\n+5628,world\r\n+5629,world\r\n+5630,world\r\n+5631,world\r\n+5632,world\r\n+5633,world\r\n+5634,world\r\n+5635,world\r\n+5636,world\r\n+5637,world\r\n+5638,world\r\n+5639,world\r\n+5640,world\r\n+5641,world\r\n+5642,world\r\n+5643,world\r\n+5644,world\r\n+5645,world\r\n+5646,world\r\n+5647,world\r\n+5648,world\r\n+5649,world\r\n+5650,world\r\n+5651,world\r\n+5652,world\r\n+5653,world\r\n+5654,world\r\n+5655,world\r\n+5656,world\r\n+5657,world\r\n+5658,world\r\n+5659,world\r\n+5660,world\r\n+5661,world\r\n+5662,world\r\n+5663,world\r\n+5664,world\r\n+5665,world\r\n+5666,world\r\n+5667,world\r\n+5668,world\r\n+5669,world\r\n+5670,world\r\n+5671,world\r\n+5672,world\r\n+5673,world\r\n+5674,world\r\n+5675,world\r\n+5676,world\r\n+5677,world\r\n+5678,world\r\n+5679,world\r\n+5680,world\r\n+5681,world\r\n+5682,world\r\n+5683,world\r\n+5684,world\r\n+5685,world\r\n+5686,world\r\n+5687,world\r\n+5688,world\r\n+5689,world\r\n+5690,world\r\n+5691,world\r\n+5692,world\r\n+5693,world\r\n+5694,world\r\n+5695,world\r\n+5696,world\r\n+5697,world\r\n+5698,world\r\n+5699,world\r\n+5700,world\r\n+5701,world\r\n+5702,world\r\n+5703,world\r\n+5704,world\r\n+5705,world\r\n+5706,world\r\n+5707,world\r\n+5708,world\r\n+5709,world\r\n+5710,world\r\n+5711,world\r\n+5712,world\r\n+5713,world\r\n+5714,world\r\n+5715,world\r\n+5716,world\r\n+5717,world\r\n+5718,world\r\n+5719,world\r\n+5720,world\r\n+5721,world\r\n+5722,world\r\n+5723,world\r\n+5724,world\r\n+5725,world\r\n+5726,world\r\n+5727,world\r\n+5728,world\r\n+5729,world\r\n+5730,world\r\n+5731,world\r\n+5732,world\r\n+5733,world\r\n+5734,world\r\n+5735,world\r\n+5736,world\r\n+5737,world\r\n+5738,world\r\n+5739,world\r\n+5740,world\r\n+5741,world\r\n+5742,world\r\n+5743,world\r\n+5744,world\r\n+5745,world\r\n+5746,world\r\n+5747,world\r\n+5748,world\r\n+5749,world\r\n+5750,world\r\n+5751,world\r\n+5752,world\r\n+5753,world\r\n+5754,world\r\n+5755,world\r\n+5756,world\r\n+5757,world\r\n+5758,world\r\n+5759,world\r\n+5760,world\r\n+5761,world\r\n+5762,world\r\n+5763,world\r\n+5764,world\r\n+5765,world\r\n+5766,world\r\n+5767,world\r\n+5768,world\r\n+5769,world\r\n+5770,world\r\n+5771,world\r\n+5772,world\r\n+5773,world\r\n+5774,world\r\n+5775,world\r\n+5776,world\r\n+5777,world\r\n+5778,world\r\n+5779,world\r\n+5780,world\r\n+5781,world\r\n+5782,world\r\n+5783,world\r\n+5784,world\r\n+5785,world\r\n+5786,world\r\n+5787,world\r\n+5788,world\r\n+5789,world\r\n+5790,world\r\n+5791,world\r\n+5792,world\r\n+5793,world\r\n+5794,world\r\n+5795,world\r\n+5796,world\r\n+5797,world\r\n+5798,world\r\n+5799,world\r\n+5800,world\r\n+5801,world\r\n+5802,world\r\n+5803,world\r\n+5804,world\r\n+5805,world\r\n+5806,world\r\n+5807,world\r\n+5808,world\r\n+5809,world\r\n+5810,world\r\n+5811,world\r\n+5812,world\r\n+5813,world\r\n+5814,world\r\n+5815,world\r\n+5816,world\r\n+5817,world\r\n+5818,world\r\n+5819,world\r\n+5820,world\r\n+5821,world\r\n+5822,world\r\n+5823,world\r\n+5824,world\r\n+5825,world\r\n+5826,world\r\n+5827,world\r\n+5828,world\r\n+5829,world\r\n+5830,world\r\n+5831,world\r\n+5832,world\r\n+5833,world\r\n+5834,world\r\n+5835,world\r\n+5836,world\r\n+5837,world\r\n+5838,world\r\n+5839,world\r\n+5840,world\r\n+5841,world\r\n+5842,world\r\n+5843,world\r\n+5844,world\r\n+5845,world\r\n+5846,world\r\n+5847,world\r\n+5848,world\r\n+5849,world\r\n+5850,world\r\n+5851,world\r\n+5852,world\r\n+5853,world\r\n+5854,world\r\n+5855,world\r\n+5856,world\r\n+5857,world\r\n+5858,world\r\n+5859,world\r\n+5860,world\r\n+5861,world\r\n+5862,world\r\n+5863,world\r\n+5864,world\r\n+5865,world\r\n+5866,world\r\n+5867,world\r\n+5868,world\r\n+5869,world\r\n+5870,world\r\n+5871,world\r\n+5872,world\r\n+5873,world\r\n+5874,world\r\n+5875,world\r\n+5876,world\r\n+5877,world\r\n+5878,world\r\n+5879,world\r\n+5880,world\r\n+5881,world\r\n+5882,world\r\n+5883,world\r\n+5884,world\r\n+5885,world\r\n+5886,world\r\n+5887,world\r\n+5888,world\r\n+5889,world\r\n+5890,world\r\n+5891,world\r\n+5892,world\r\n+5893,world\r\n+5894,world\r\n+5895,world\r\n+5896,world\r\n+5897,world\r\n+5898,world\r\n+5899,world\r\n+5900,world\r\n+5901,world\r\n+5902,world\r\n+5903,world\r\n+5904,world\r\n+5905,world\r\n+5906,world\r\n+5907,world\r\n+5908,world\r\n+5909,world\r\n+5910,world\r\n+5911,world\r\n+5912,world\r\n+5913,world\r\n+5914,world\r\n+5915,world\r\n+5916,world\r\n+5917,world\r\n+5918,world\r\n+5919,world\r\n+5920,world\r\n+5921,world\r\n+5922,world\r\n+5923,world\r\n+5924,world\r\n+5925,world\r\n+5926,world\r\n+5927,world\r\n+5928,world\r\n+5929,world\r\n+5930,world\r\n+5931,world\r\n+5932,world\r\n+5933,world\r\n+5934,world\r\n+5935,world\r\n+5936,world\r\n+5937,world\r\n+5938,world\r\n+5939,world\r\n+5940,world\r\n+5941,world\r\n+5942,world\r\n+5943,world\r\n+5944,world\r\n+5945,world\r\n+5946,world\r\n+5947,world\r\n+5948,world\r\n+5949,world\r\n+5950,world\r\n+5951,world\r\n+5952,world\r\n+5953,world\r\n+5954,world\r\n+5955,world\r\n+5956,world\r\n+5957,world\r\n+5958,world\r\n+5959,world\r\n+5960,world\r\n+5961,world\r\n+5962,world\r\n+5963,world\r\n+5964,world\r\n+5965,world\r\n+5966,world\r\n+5967,world\r\n+5968,world\r\n+5969,world\r\n+5970,world\r\n+5971,world\r\n+5972,world\r\n+5973,world\r\n+5974,world\r\n+5975,world\r\n+5976,world\r\n+5977,world\r\n+5978,world\r\n+5979,world\r\n+5980,world\r\n+5981,world\r\n+5982,world\r\n+5983,world\r\n+5984,world\r\n+5985,world\r\n+5986,world\r\n+5987,world\r\n+5988,world\r\n+5989,world\r\n+5990,world\r\n+5991,world\r\n+5992,world\r\n+5993,world\r\n+5994,world\r\n+5995,world\r\n+5996,world\r\n+5997,world\r\n+5998,world\r\n+5999,world\r\n+6000,world\r\n+6001,world\r\n+6002,world\r\n+6003,world\r\n+6004,world\r\n+6005,world\r\n+6006,world\r\n+6007,world\r\n+6008,world\r\n+6009,world\r\n+6010,world\r\n+6011,world\r\n+6012,world\r\n+6013,world\r\n+6014,world\r\n+6015,world\r\n+6016,world\r\n+6017,world\r\n+6018,world\r\n+6019,world\r\n+6020,world\r\n+6021,world\r\n+6022,world\r\n+6023,world\r\n+6024,world\r\n+6025,world\r\n+6026,world\r\n+6027,world\r\n+6028,world\r\n+6029,world\r\n+6030,world\r\n+6031,world\r\n+6032,world\r\n+6033,world\r\n+6034,world\r\n+6035,world\r\n+6036,world\r\n+6037,world\r\n+6038,world\r\n+6039,world\r\n+6040,world\r\n+6041,world\r\n+6042,world\r\n+6043,world\r\n+6044,world\r\n+6045,world\r\n+6046,world\r\n+6047,world\r\n+6048,world\r\n+6049,world\r\n+6050,world\r\n+6051,world\r\n+6052,world\r\n+6053,world\r\n+6054,world\r\n+6055,world\r\n+6056,world\r\n+6057,world\r\n+6058,world\r\n+6059,world\r\n+6060,world\r\n+6061,world\r\n+6062,world\r\n+6063,world\r\n+6064,world\r\n+6065,world\r\n+6066,world\r\n+6067,world\r\n+6068,world\r\n+6069,world\r\n+6070,world\r\n+6071,world\r\n+6072,world\r\n+6073,world\r\n+6074,world\r\n+6075,world\r\n+6076,world\r\n+6077,world\r\n+6078,world\r\n+6079,world\r\n+6080,world\r\n+6081,world\r\n+6082,world\r\n+6083,world\r\n+6084,world\r\n+6085,world\r\n+6086,world\r\n+6087,world\r\n+6088,world\r\n+6089,world\r\n+6090,world\r\n+6091,world\r\n+6092,world\r\n+6093,world\r\n+6094,world\r\n+6095,world\r\n+6096,world\r\n+6097,world\r\n+6098,world\r\n+6099,world\r\n+6100,world\r\n+6101,world\r\n+6102,world\r\n+6103,world\r\n+6104,world\r\n+6105,world\r\n+6106,world\r\n+6107,world\r\n+6108,world\r\n+6109,world\r\n+6110,world\r\n+6111,world\r\n+6112,world\r\n+6113,world\r\n+6114,world\r\n+6115,world\r\n+6116,world\r\n+6117,world\r\n+6118,world\r\n+6119,world\r\n+6120,world\r\n+6121,world\r\n+6122,world\r\n+6123,world\r\n+6124,world\r\n+6125,world\r\n+6126,world\r\n+6127,world\r\n+6128,world\r\n+6129,world\r\n+6130,world\r\n+6131,world\r\n+6132,world\r\n+6133,world\r\n+6134,world\r\n+6135,world\r\n+6136,world\r\n+6137,world\r\n+6138,world\r\n+6139,world\r\n+6140,world\r\n+6141,world\r\n+6142,world\r\n+6143,world\r\n+6144,world\r\n+6145,world\r\n+6146,world\r\n+6147,world\r\n+6148,world\r\n+6149,world\r\n+6150,world\r\n+6151,world\r\n+6152,world\r\n+6153,world\r\n+6154,world\r\n+6155,world\r\n+6156,world\r\n+6157,world\r\n+6158,world\r\n+6159,world\r\n+6160,world\r\n+6161,world\r\n+6162,world\r\n+6163,world\r\n+6164,world\r\n+6165,world\r\n+6166,world\r\n+6167,world\r\n+6168,world\r\n+6169,world\r\n+6170,world\r\n+6171,world\r\n+6172,world\r\n+6173,world\r\n+6174,world\r\n+6175,world\r\n+6176,world\r\n+6177,world\r\n+6178,world\r\n+6179,world\r\n+6180,world\r\n+6181,world\r\n+6182,world\r\n+6183,world\r\n+6184,world\r\n+6185,world\r\n+6186,world\r\n+6187,world\r\n+6188,world\r\n+6189,world\r\n+6190,world\r\n+6191,world\r\n+6192,world\r\n+6193,world\r\n+6194,world\r\n+6195,world\r\n+6196,world\r\n+6197,world\r\n+6198,world\r\n+6199,world\r\n+6200,world\r\n+6201,world\r\n+6202,world\r\n+6203,world\r\n+6204,world\r\n+6205,world\r\n+6206,world\r\n+6207,world\r\n+6208,world\r\n+6209,world\r\n+6210,world\r\n+6211,world\r\n+6212,world\r\n+6213,world\r\n+6214,world\r\n+6215,world\r\n+6216,world\r\n+6217,world\r\n+6218,world\r\n+6219,world\r\n+6220,world\r\n+6221,world\r\n+6222,world\r\n+6223,world\r\n+6224,world\r\n+6225,world\r\n+6226,world\r\n+6227,world\r\n+6228,world\r\n+6229,world\r\n+6230,world\r\n+6231,world\r\n+6232,world\r\n+6233,world\r\n+6234,world\r\n+6235,world\r\n+6236,world\r\n+6237,world\r\n+6238,world\r\n+6239,world\r\n+6240,world\r\n+6241,world\r\n+6242,world\r\n+6243,world\r\n+6244,world\r\n+6245,world\r\n+6246,world\r\n+6247,world\r\n+6248,world\r\n+6249,world\r\n+6250,world\r\n+6251,world\r\n+6252,world\r\n+6253,world\r\n+6254,world\r\n+6255,world\r\n+6256,world\r\n+6257,world\r\n+6258,world\r\n+6259,world\r\n+6260,world\r\n+6261,world\r\n+6262,world\r\n+6263,world\r\n+6264,world\r\n+6265,world\r\n+6266,world\r\n+6267,world\r\n+6268,world\r\n+6269,world\r\n+6270,world\r\n+6271,world\r\n+6272,world\r\n+6273,world\r\n+6274,world\r\n+6275,world\r\n+6276,world\r\n+6277,world\r\n+6278,world\r\n+6279,world\r\n+6280,world\r\n+6281,world\r\n+6282,world\r\n+6283,world\r\n+6284,world\r\n+6285,world\r\n+6286,world\r\n+6287,world\r\n+6288,world\r\n+6289,world\r\n+6290,world\r\n+6291,world\r\n+6292,world\r\n+6293,world\r\n+6294,world\r\n+6295,world\r\n+6296,world\r\n+6297,world\r\n+6298,world\r\n+6299,world\r\n+6300,world\r\n+6301,world\r\n+6302,world\r\n+6303,world\r\n+6304,world\r\n+6305,world\r\n+6306,world\r\n+6307,world\r\n+6308,world\r\n+6309,world\r\n+6310,world\r\n+6311,world\r\n+6312,world\r\n+6313,world\r\n+6314,world\r\n+6315,world\r\n+6316,world\r\n+6317,world\r\n+6318,world\r\n+6319,world\r\n+6320,world\r\n+6321,world\r\n+6322,world\r\n+6323,world\r\n+6324,world\r\n+6325,world\r\n+6326,world\r\n+6327,world\r\n+6328,world\r\n+6329,world\r\n+6330,world\r\n+6331,world\r\n+6332,world\r\n+6333,world\r\n+6334,world\r\n+6335,world\r\n+6336,world\r\n+6337,world\r\n+6338,world\r\n+6339,world\r\n+6340,world\r\n+6341,world\r\n+6342,world\r\n+6343,world\r\n+6344,world\r\n+6345,world\r\n+6346,world\r\n+6347,world\r\n+6348,world\r\n+6349,world\r\n+6350,world\r\n+6351,world\r\n+6352,world\r\n+6353,world\r\n+6354,world\r\n+6355,world\r\n+6356,world\r\n+6357,world\r\n+6358,world\r\n+6359,world\r\n+6360,world\r\n+6361,world\r\n+6362,world\r\n+6363,world\r\n+6364,world\r\n+6365,world\r\n+6366,world\r\n+6367,world\r\n+6368,world\r\n+6369,world\r\n+6370,world\r\n+6371,world\r\n+6372,world\r\n+6373,world\r\n+6374,world\r\n+6375,world\r\n+6376,world\r\n+6377,world\r\n+6378,world\r\n+6379,world\r\n+6380,world\r\n+6381,world\r\n+6382,world\r\n+6383,world\r\n+6384,world\r\n+6385,world\r\n+6386,world\r\n+6387,world\r\n+6388,world\r\n+6389,world\r\n+6390,world\r\n+6391,world\r\n+6392,world\r\n+6393,world\r\n+6394,world\r\n+6395,world\r\n+6396,world\r\n+6397,world\r\n+6398,world\r\n+6399,world\r\n+6400,world\r\n+6401,world\r\n+6402,world\r\n+6403,world\r\n+6404,world\r\n+6405,world\r\n+6406,world\r\n+6407,world\r\n+6408,world\r\n+6409,world\r\n+6410,world\r\n+6411,world\r\n+6412,world\r\n+6413,world\r\n+6414,world\r\n+6415,world\r\n+6416,world\r\n+6417,world\r\n+6418,world\r\n+6419,world\r\n+6420,world\r\n+6421,world\r\n+6422,world\r\n+6423,world\r\n+6424,world\r\n+6425,world\r\n+6426,world\r\n+6427,world\r\n+6428,world\r\n+6429,world\r\n+6430,world\r\n+6431,world\r\n+6432,world\r\n+6433,world\r\n+6434,world\r\n+6435,world\r\n+6436,world\r\n+6437,world\r\n+6438,world\r\n+6439,world\r\n+6440,world\r\n+6441,world\r\n+6442,world\r\n+6443,world\r\n+6444,world\r\n+6445,world\r\n+6446,world\r\n+6447,world\r\n+6448,world\r\n+6449,world\r\n+6450,world\r\n+6451,world\r\n+6452,world\r\n+6453,world\r\n+6454,world\r\n+6455,world\r\n+6456,world\r\n+6457,world\r\n+6458,world\r\n+6459,world\r\n+6460,world\r\n+6461,world\r\n+6462,world\r\n+6463,world\r\n+6464,world\r\n+6465,world\r\n+6466,world\r\n+6467,world\r\n+6468,world\r\n+6469,world\r\n+6470,world\r\n+6471,world\r\n+6472,world\r\n+6473,world\r\n+6474,world\r\n+6475,world\r\n+6476,world\r\n+6477,world\r\n+6478,world\r\n+6479,world\r\n+6480,world\r\n+6481,world\r\n+6482,world\r\n+6483,world\r\n+6484,world\r\n+6485,world\r\n+6486,world\r\n+6487,world\r\n+6488,world\r\n+6489,world\r\n+6490,world\r\n+6491,world\r\n+6492,world\r\n+6493,world\r\n+6494,world\r\n+6495,world\r\n+6496,world\r\n+6497,world\r\n+6498,world\r\n+6499,world\r\n+6500,world\r\n+6501,world\r\n+6502,world\r\n+6503,world\r\n+6504,world\r\n+6505,world\r\n+6506,world\r\n+6507,world\r\n+6508,world\r\n+6509,world\r\n+6510,world\r\n+6511,world\r\n+6512,world\r\n+6513,world\r\n+6514,world\r\n+6515,world\r\n+6516,world\r\n+6517,world\r\n+6518,world\r\n+6519,world\r\n+6520,world\r\n+6521,world\r\n+6522,world\r\n+6523,world\r\n+6524,world\r\n+6525,world\r\n+6526,world\r\n+6527,world\r\n+6528,world\r\n+6529,world\r\n+6530,world\r\n+6531,world\r\n+6532,world\r\n+6533,world\r\n+6534,world\r\n+6535,world\r\n+6536,world\r\n+6537,world\r\n+6538,world\r\n+6539,world\r\n+6540,world\r\n+6541,world\r\n+6542,world\r\n+6543,world\r\n+6544,world\r\n+6545,world\r\n+6546,world\r\n+6547,world\r\n+6548,world\r\n+6549,world\r\n+6550,world\r\n+6551,world\r\n+6552,world\r\n+6553,world\r\n+6554,world\r\n+6555,world\r\n+6556,world\r\n+6557,world\r\n+6558,world\r\n+6559,world\r\n+6560,world\r\n+6561,world\r\n+6562,world\r\n+6563,world\r\n+6564,world\r\n+6565,world\r\n+6566,world\r\n+6567,world\r\n+6568,world\r\n+6569,world\r\n+6570,world\r\n+6571,world\r\n+6572,world\r\n+6573,world\r\n+6574,world\r\n+6575,world\r\n+6576,world\r\n+6577,world\r\n+6578,world\r\n+6579,world\r\n+6580,world\r\n+6581,world\r\n+6582,world\r\n+6583,world\r\n+6584,world\r\n+6585,world\r\n+6586,world\r\n+6587,world\r\n+6588,world\r\n+6589,world\r\n+6590,world\r\n+6591,world\r\n+6592,world\r\n+6593,world\r\n+6594,world\r\n+6595,world\r\n+6596,world\r\n+6597,world\r\n+6598,world\r\n+6599,world\r\n+6600,world\r\n+6601,world\r\n+6602,world\r\n+6603,world\r\n+6604,world\r\n+6605,world\r\n+6606,world\r\n+6607,world\r\n+6608,world\r\n+6609,world\r\n+6610,world\r\n+6611,world\r\n+6612,world\r\n+6613,world\r\n+6614,world\r\n+6615,world\r\n+6616,world\r\n+6617,world\r\n+6618,world\r\n+6619,world\r\n+6620,world\r\n+6621,world\r\n+6622,world\r\n+6623,world\r\n+6624,world\r\n+6625,world\r\n+6626,world\r\n+6627,world\r\n+6628,world\r\n+6629,world\r\n+6630,world\r\n+6631,world\r\n+6632,world\r\n+6633,world\r\n+6634,world\r\n+6635,world\r\n+6636,world\r\n+6637,world\r\n+6638,world\r\n+6639,world\r\n+6640,world\r\n+6641,world\r\n+6642,world\r\n+6643,world\r\n+6644,world\r\n+6645,world\r\n+6646,world\r\n+6647,world\r\n+6648,world\r\n+6649,world\r\n+6650,world\r\n+6651,world\r\n+6652,world\r\n+6653,world\r\n+6654,world\r\n+6655,world\r\n+6656,world\r\n+6657,world\r\n+6658,world\r\n+6659,world\r\n+6660,world\r\n+6661,world\r\n+6662,world\r\n+6663,world\r\n+6664,world\r\n+6665,world\r\n+6666,world\r\n+6667,world\r\n+6668,world\r\n+6669,world\r\n+6670,world\r\n+6671,world\r\n+6672,world\r\n+6673,world\r\n+6674,world\r\n+6675,world\r\n+6676,world\r\n+6677,world\r\n+6678,world\r\n+6679,world\r\n+6680,world\r\n+6681,world\r\n+6682,world\r\n+6683,world\r\n+6684,world\r\n+6685,world\r\n+6686,world\r\n+6687,world\r\n+6688,world\r\n+6689,world\r\n+6690,world\r\n+6691,world\r\n+6692,world\r\n+6693,world\r\n+6694,world\r\n+6695,world\r\n+6696,world\r\n+6697,world\r\n+6698,world\r\n+6699,world\r\n+6700,world\r\n+6701,world\r\n+6702,world\r\n+6703,world\r\n+6704,world\r\n+6705,world\r\n+6706,world\r\n+6707,world\r\n+6708,world\r\n+6709,world\r\n+6710,world\r\n+6711,world\r\n+6712,world\r\n+6713,world\r\n+6714,world\r\n+6715,world\r\n+6716,world\r\n+6717,world\r\n+6718,world\r\n+6719,world\r\n+6720,world\r\n+6721,world\r\n+6722,world\r\n+6723,world\r\n+6724,world\r\n+6725,world\r\n+6726,world\r\n+6727,world\r\n+6728,world\r\n+6729,world\r\n+6730,world\r\n+6731,world\r\n+6732,world\r\n+6733,world\r\n+6734,world\r\n+6735,world\r\n+6736,world\r\n+6737,world\r\n+6738,world\r\n+6739,world\r\n+6740,world\r\n+6741,world\r\n+6742,world\r\n+6743,world\r\n+6744,world\r\n+6745,world\r\n+6746,world\r\n+6747,world\r\n+6748,world\r\n+6749,world\r\n+6750,world\r\n+6751,world\r\n+6752,world\r\n+6753,world\r\n+6754,world\r\n+6755,world\r\n+6756,world\r\n+6757,world\r\n+6758,world\r\n+6759,world\r\n+6760,world\r\n+6761,world\r\n+6762,world\r\n+6763,world\r\n+6764,world\r\n+6765,world\r\n+6766,world\r\n+6767,world\r\n+6768,world\r\n+6769,world\r\n+6770,world\r\n+6771,world\r\n+6772,world\r\n+6773,world\r\n+6774,world\r\n+6775,world\r\n+6776,world\r\n+6777,world\r\n+6778,world\r\n+6779,world\r\n+6780,world\r\n+6781,world\r\n+6782,world\r\n+6783,world\r\n+6784,world\r\n+6785,world\r\n+6786,world\r\n+6787,world\r\n+6788,world\r\n+6789,world\r\n+6790,world\r\n+6791,world\r\n+6792,world\r\n+6793,world\r\n+6794,world\r\n+6795,world\r\n+6796,world\r\n+6797,world\r\n+6798,world\r\n+6799,world\r\n+6800,world\r\n+6801,world\r\n+6802,world\r\n+6803,world\r\n+6804,world\r\n+6805,world\r\n+6806,world\r\n+6807,world\r\n+6808,world\r\n+6809,world\r\n+6810,world\r\n+6811,world\r\n+6812,world\r\n+6813,world\r\n+6814,world\r\n+6815,world\r\n+6816,world\r\n+6817,world\r\n+6818,world\r\n+6819,world\r\n+6820,world\r\n+6821,world\r\n+6822,world\r\n+6823,world\r\n+6824,world\r\n+6825,world\r\n+6826,world\r\n+6827,world\r\n+6828,world\r\n+6829,world\r\n+6830,world\r\n+6831,world\r\n+6832,world\r\n+6833,world\r\n+6834,world\r\n+6835,world\r\n+6836,world\r\n+6837,world\r\n+6838,world\r\n+6839,world\r\n+6840,world\r\n+6841,world\r\n+6842,world\r\n+6843,world\r\n+6844,world\r\n+6845,world\r\n+6846,world\r\n+6847,world\r\n+6848,world\r\n+6849,world\r\n+6850,world\r\n+6851,world\r\n+6852,world\r\n+6853,world\r\n+6854,world\r\n+6855,world\r\n+6856,world\r\n+6857,world\r\n+6858,world\r\n+6859,world\r\n+6860,world\r\n+6861,world\r\n+6862,world\r\n+6863,world\r\n+6864,world\r\n+6865,world\r\n+6866,world\r\n+6867,world\r\n+6868,world\r\n+6869,world\r\n+6870,world\r\n+6871,world\r\n+6872,world\r\n+6873,world\r\n+6874,world\r\n+6875,world\r\n+6876,world\r\n+6877,world\r\n+6878,world\r\n+6879,world\r\n+6880,world\r\n+6881,world\r\n+6882,world\r\n+6883,world\r\n+6884,world\r\n+6885,world\r\n+6886,world\r\n+6887,world\r\n+6888,world\r\n+6889,world\r\n+6890,world\r\n+6891,world\r\n+6892,world\r\n+6893,world\r\n+6894,world\r\n+6895,world\r\n+6896,world\r\n+6897,world\r\n+6898,world\r\n+6899,world\r\n+6900,world\r\n+6901,world\r\n+6902,world\r\n+6903,world\r\n+6904,world\r\n+6905,world\r\n+6906,world\r\n+6907,world\r\n+6908,world\r\n+6909,world\r\n+6910,world\r\n+6911,world\r\n+6912,world\r\n+6913,world\r\n+6914,world\r\n+6915,world\r\n+6916,world\r\n+6917,world\r\n+6918,world\r\n+6919,world\r\n+6920,world\r\n+6921,world\r\n+6922,world\r\n+6923,world\r\n+6924,world\r\n+6925,world\r\n+6926,world\r\n+6927,world\r\n+6928,world\r\n+6929,world\r\n+6930,world\r\n+6931,world\r\n+6932,world\r\n+6933,world\r\n+6934,world\r\n+6935,world\r\n+6936,world\r\n+6937,world\r\n+6938,world\r\n+6939,world\r\n+6940,world\r\n+6941,world\r\n+6942,world\r\n+6943,world\r\n+6944,world\r\n+6945,world\r\n+6946,world\r\n+6947,world\r\n+6948,world\r\n+6949,world\r\n+6950,world\r\n+6951,world\r\n+6952,world\r\n+6953,world\r\n+6954,world\r\n+6955,world\r\n+6956,world\r\n+6957,world\r\n+6958,world\r\n+6959,world\r\n+6960,world\r\n+6961,world\r\n+6962,world\r\n+6963,world\r\n+6964,world\r\n+6965,world\r\n+6966,world\r\n+6967,world\r\n+6968,world\r\n+6969,world\r\n+6970,world\r\n+6971,world\r\n+6972,world\r\n+6973,world\r\n+6974,world\r\n+6975,world\r\n+6976,world\r\n+6977,world\r\n+6978,world\r\n+6979,world\r\n+6980,world\r\n+6981,world\r\n+6982,world\r\n+6983,world\r\n+6984,world\r\n+6985,world\r\n+6986,world\r\n+6987,world\r\n+6988,world\r\n+6989,world\r\n+6990,world\r\n+6991,world\r\n+6992,world\r\n+6993,world\r\n+6994,world\r\n+6995,world\r\n+6996,world\r\n+6997,world\r\n+6998,world\r\n+6999,world\r\n+7000,world\r\n+7001,world\r\n+7002,world\r\n+7003,world\r\n+7004,world\r\n+7005,world\r\n+7006,world\r\n+7007,world\r\n+7008,world\r\n+7009,world\r\n+7010,world\r\n+7011,world\r\n+7012,world\r\n+7013,world\r\n+7014,world\r\n+7015,world\r\n+7016,world\r\n+7017,world\r\n+7018,world\r\n+7019,world\r\n+7020,world\r\n+7021,world\r\n+7022,world\r\n+7023,world\r\n+7024,world\r\n+7025,world\r\n+7026,world\r\n+7027,world\r\n+7028,world\r\n+7029,world\r\n+7030,world\r\n+7031,world\r\n+7032,world\r\n+7033,world\r\n+7034,world\r\n+7035,world\r\n+7036,world\r\n+7037,world\r\n+7038,world\r\n+7039,world\r\n+7040,world\r\n+7041,world\r\n+7042,world\r\n+7043,world\r\n+7044,world\r\n+7045,world\r\n+7046,world\r\n+7047,world\r\n+7048,world\r\n+7049,world\r\n+7050,world\r\n+7051,world\r\n+7052,world\r\n+7053,world\r\n+7054,world\r\n+7055,world\r\n+7056,world\r\n+7057,world\r\n+7058,world\r\n+7059,world\r\n+7060,world\r\n+7061,world\r\n+7062,world\r\n+7063,world\r\n+7064,world\r\n+7065,world\r\n+7066,world\r\n+7067,world\r\n+7068,world\r\n+7069,world\r\n+7070,world\r\n+7071,world\r\n+7072,world\r\n+7073,world\r\n+7074,world\r\n+7075,world\r\n+7076,world\r\n+7077,world\r\n+7078,world\r\n+7079,world\r\n+7080,world\r\n+7081,world\r\n+7082,world\r\n+7083,world\r\n+7084,world\r\n+7085,world\r\n+7086,world\r\n+7087,world\r\n+7088,world\r\n+7089,world\r\n+7090,world\r\n+7091,world\r\n+7092,world\r\n+7093,world\r\n+7094,world\r\n+7095,world\r\n+7096,world\r\n+7097,world\r\n+7098,world\r\n+7099,world\r\n+7100,world\r\n+7101,world\r\n+7102,world\r\n+7103,world\r\n+7104,world\r\n+7105,world\r\n+7106,world\r\n+7107,world\r\n+7108,world\r\n+7109,world\r\n+7110,world\r\n+7111,world\r\n+7112,world\r\n+7113,world\r\n+7114,world\r\n+7115,world\r\n+7116,world\r\n+7117,world\r\n+7118,world\r\n+7119,world\r\n+7120,world\r\n+7121,world\r\n+7122,world\r\n+7123,world\r\n+7124,world\r\n+7125,world\r\n+7126,world\r\n+7127,world\r\n+7128,world\r\n+7129,world\r\n+7130,world\r\n+7131,world\r\n+7132,world\r\n+7133,world\r\n+7134,world\r\n+7135,world\r\n+7136,world\r\n+7137,world\r\n+7138,world\r\n+7139,world\r\n+7140,world\r\n+7141,world\r\n+7142,world\r\n+7143,world\r\n+7144,world\r\n+7145,world\r\n+7146,world\r\n+7147,world\r\n+7148,world\r\n+7149,world\r\n+7150,world\r\n+7151,world\r\n+7152,world\r\n+7153,world\r\n+7154,world\r\n+7155,world\r\n+7156,world\r\n+7157,world\r\n+7158,world\r\n+7159,world\r\n+7160,world\r\n+7161,world\r\n+7162,world\r\n+7163,world\r\n+7164,world\r\n+7165,world\r\n+7166,world\r\n+7167,world\r\n+7168,world\r\n+7169,world\r\n+7170,world\r\n+7171,world\r\n+7172,world\r\n+7173,world\r\n+7174,world\r\n+7175,world\r\n+7176,world\r\n+7177,world\r\n+7178,world\r\n+7179,world\r\n+7180,world\r\n+7181,world\r\n+7182,world\r\n+7183,world\r\n+7184,world\r\n+7185,world\r\n+7186,world\r\n+7187,world\r\n+7188,world\r\n+7189,world\r\n+7190,world\r\n+7191,world\r\n+7192,world\r\n+7193,world\r\n+7194,world\r\n+7195,world\r\n+7196,world\r\n+7197,world\r\n+7198,world\r\n+7199,world\r\n+7200,world\r\n+7201,world\r\n+7202,world\r\n+7203,world\r\n+7204,world\r\n+7205,world\r\n+7206,world\r\n+7207,world\r\n+7208,world\r\n+7209,world\r\n+7210,world\r\n+7211,world\r\n+7212,world\r\n+7213,world\r\n+7214,world\r\n+7215,world\r\n+7216,world\r\n+7217,world\r\n+7218,world\r\n+7219,world\r\n+7220,world\r\n+7221,world\r\n+7222,world\r\n+7223,world\r\n+7224,world\r\n+7225,world\r\n+7226,world\r\n+7227,world\r\n+7228,world\r\n+7229,world\r\n+7230,world\r\n+7231,world\r\n+7232,world\r\n+7233,world\r\n+7234,world\r\n+7235,world\r\n+7236,world\r\n+7237,world\r\n+7238,world\r\n+7239,world\r\n+7240,world\r\n+7241,world\r\n+7242,world\r\n+7243,world\r\n+7244,world\r\n+7245,world\r\n+7246,world\r\n+7247,world\r\n+7248,world\r\n+7249,world\r\n+7250,world\r\n+7251,world\r\n+7252,world\r\n+7253,world\r\n+7254,world\r\n+7255,world\r\n+7256,world\r\n+7257,world\r\n+7258,world\r\n+7259,world\r\n+7260,world\r\n+7261,world\r\n+7262,world\r\n+7263,world\r\n+7264,world\r\n+7265,world\r\n+7266,world\r\n+7267,world\r\n+7268,world\r\n+7269,world\r\n+7270,world\r\n+7271,world\r\n+7272,world\r\n+7273,world\r\n+7274,world\r\n+7275,world\r\n+7276,world\r\n+7277,world\r\n+7278,world\r\n+7279,world\r\n+7280,world\r\n+7281,world\r\n+7282,world\r\n+7283,world\r\n+7284,world\r\n+7285,world\r\n+7286,world\r\n+7287,world\r\n+7288,world\r\n+7289,world\r\n+7290,world\r\n+7291,world\r\n+7292,world\r\n+7293,world\r\n+7294,world\r\n+7295,world\r\n+7296,world\r\n+7297,world\r\n+7298,world\r\n+7299,world\r\n+7300,world\r\n+7301,world\r\n+7302,world\r\n+7303,world\r\n+7304,world\r\n+7305,world\r\n+7306,world\r\n+7307,world\r\n+7308,world\r\n+7309,world\r\n+7310,world\r\n+7311,world\r\n+7312,world\r\n+7313,world\r\n+7314,world\r\n+7315,world\r\n+7316,world\r\n+7317,world\r\n+7318,world\r\n+7319,world\r\n+7320,world\r\n+7321,world\r\n+7322,world\r\n+7323,world\r\n+7324,world\r\n+7325,world\r\n+7326,world\r\n+7327,world\r\n+7328,world\r\n+7329,world\r\n+7330,world\r\n+7331,world\r\n+7332,world\r\n+7333,world\r\n+7334,world\r\n+7335,world\r\n+7336,world\r\n+7337,world\r\n+7338,world\r\n+7339,world\r\n+7340,world\r\n+7341,world\r\n+7342,world\r\n+7343,world\r\n+7344,world\r\n+7345,world\r\n+7346,world\r\n+7347,world\r\n+7348,world\r\n+7349,world\r\n+7350,world\r\n+7351,world\r\n+7352,world\r\n+7353,world\r\n+7354,world\r\n+7355,world\r\n+7356,world\r\n+7357,world\r\n+7358,world\r\n+7359,world\r\n+7360,world\r\n+7361,world\r\n+7362,world\r\n+7363,world\r\n+7364,world\r\n+7365,world\r\n+7366,world\r\n+7367,world\r\n+7368,world\r\n+7369,world\r\n+7370,world\r\n+7371,world\r\n+7372,world\r\n+7373,world\r\n+7374,world\r\n+7375,world\r\n+7376,world\r\n+7377,world\r\n+7378,world\r\n+7379,world\r\n+7380,world\r\n+7381,world\r\n+7382,world\r\n+7383,world\r\n+7384,world\r\n+7385,world\r\n+7386,world\r\n+7387,world\r\n+7388,world\r\n+7389,world\r\n+7390,world\r\n+7391,world\r\n+7392,world\r\n+7393,world\r\n+7394,world\r\n+7395,world\r\n+7396,world\r\n+7397,world\r\n+7398,world\r\n+7399,world\r\n+7400,world\r\n+7401,world\r\n+7402,world\r\n+7403,world\r\n+7404,world\r\n+7405,world\r\n+7406,world\r\n+7407,world\r\n+7408,world\r\n+7409,world\r\n+7410,world\r\n+7411,world\r\n+7412,world\r\n+7413,world\r\n+7414,world\r\n+7415,world\r\n+7416,world\r\n+7417,world\r\n+7418,world\r\n+7419,world\r\n+7420,world\r\n+7421,world\r\n+7422,world\r\n+7423,world\r\n+7424,world\r\n+7425,world\r\n+7426,world\r\n+7427,world\r\n+7428,world\r\n+7429,world\r\n+7430,world\r\n+7431,world\r\n+7432,world\r\n+7433,world\r\n+7434,world\r\n+7435,world\r\n+7436,world\r\n+7437,world\r\n+7438,world\r\n+7439,world\r\n+7440,world\r\n+7441,world\r\n+7442,world\r\n+7443,world\r\n+7444,world\r\n+7445,world\r\n+7446,world\r\n+7447,world\r\n+7448,world\r\n+7449,world\r\n+7450,world\r\n+7451,world\r\n+7452,world\r\n+7453,world\r\n+7454,world\r\n+7455,world\r\n+7456,world\r\n+7457,world\r\n+7458,world\r\n+7459,world\r\n+7460,world\r\n+7461,world\r\n+7462,world\r\n+7463,world\r\n+7464,world\r\n+7465,world\r\n+7466,world\r\n+7467,world\r\n+7468,world\r\n+7469,world\r\n+7470,world\r\n+7471,world\r\n+7472,world\r\n+7473,world\r\n+7474,world\r\n+7475,world\r\n+7476,world\r\n+7477,world\r\n+7478,world\r\n+7479,world\r\n+7480,world\r\n+7481,world\r\n+7482,world\r\n+7483,world\r\n+7484,world\r\n+7485,world\r\n+7486,world\r\n+7487,world\r\n+7488,world\r\n+7489,world\r\n+7490,world\r\n+7491,world\r\n+7492,world\r\n+7493,world\r\n+7494,world\r\n+7495,world\r\n+7496,world\r\n+7497,world\r\n+7498,world\r\n+7499,world\r\n+7500,world\r\n+7501,world\r\n+7502,world\r\n+7503,world\r\n+7504,world\r\n+7505,world\r\n+7506,world\r\n+7507,world\r\n+7508,world\r\n+7509,world\r\n+7510,world\r\n+7511,world\r\n+7512,world\r\n+7513,world\r\n+7514,world\r\n+7515,world\r\n+7516,world\r\n+7517,world\r\n+7518,world\r\n+7519,world\r\n+7520,world\r\n+7521,world\r\n+7522,world\r\n+7523,world\r\n+7524,world\r\n+7525,world\r\n+7526,world\r\n+7527,world\r\n+7528,world\r\n+7529,world\r\n+7530,world\r\n+7531,world\r\n+7532,world\r\n+7533,world\r\n+7534,world\r\n+7535,world\r\n+7536,world\r\n+7537,world\r\n+7538,world\r\n+7539,world\r\n+7540,world\r\n+7541,world\r\n+7542,world\r\n+7543,world\r\n+7544,world\r\n+7545,world\r\n+7546,world\r\n+7547,world\r\n+7548,world\r\n+7549,world\r\n+7550,world\r\n+7551,world\r\n+7552,world\r\n+7553,world\r\n+7554,world\r\n+7555,world\r\n+7556,world\r\n+7557,world\r\n+7558,world\r\n+7559,world\r\n+7560,world\r\n+7561,world\r\n+7562,world\r\n+7563,world\r\n+7564,world\r\n+7565,world\r\n+7566,world\r\n+7567,world\r\n+7568,world\r\n+7569,world\r\n+7570,world\r\n+7571,world\r\n+7572,world\r\n+7573,world\r\n+7574,world\r\n+7575,world\r\n+7576,world\r\n+7577,world\r\n+7578,world\r\n+7579,world\r\n+7580,world\r\n+7581,world\r\n+7582,world\r\n+7583,world\r\n+7584,world\r\n+7585,world\r\n+7586,world\r\n+7587,world\r\n+7588,world\r\n+7589,world\r\n+7590,world\r\n+7591,world\r\n+7592,world\r\n+7593,world\r\n+7594,world\r\n+7595,world\r\n+7596,world\r\n+7597,world\r\n+7598,world\r\n+7599,world\r\n+7600,world\r\n+7601,world\r\n+7602,world\r\n+7603,world\r\n+7604,world\r\n+7605,world\r\n+7606,world\r\n+7607,world\r\n+7608,world\r\n+7609,world\r\n+7610,world\r\n+7611,world\r\n+7612,world\r\n+7613,world\r\n+7614,world\r\n+7615,world\r\n+7616,world\r\n+7617,world\r\n+7618,world\r\n+7619,world\r\n+7620,world\r\n+7621,world\r\n+7622,world\r\n+7623,world\r\n+7624,world\r\n+7625,world\r\n+7626,world\r\n+7627,world\r\n+7628,world\r\n+7629,world\r\n+7630,world\r\n+7631,world\r\n+7632,world\r\n+7633,world\r\n+7634,world\r\n+7635,world\r\n+7636,world\r\n+7637,world\r\n+7638,world\r\n+7639,world\r\n+7640,world\r\n+7641,world\r\n+7642,world\r\n+7643,world\r\n+7644,world\r\n+7645,world\r\n+7646,world\r\n+7647,world\r\n+7648,world\r\n+7649,world\r\n+7650,world\r\n+7651,world\r\n+7652,world\r\n+7653,world\r\n+7654,world\r\n+7655,world\r\n+7656,world\r\n+7657,world\r\n+7658,world\r\n+7659,world\r\n+7660,world\r\n+7661,world\r\n+7662,world\r\n+7663,world\r\n+7664,world\r\n+7665,world\r\n+7666,world\r\n+7667,world\r\n+7668,world\r\n+7669,world\r\n+7670,world\r\n+7671,world\r\n+7672,world\r\n+7673,world\r\n+7674,world\r\n+7675,world\r\n+7676,world\r\n+7677,world\r\n+7678,world\r\n+7679,world\r\n+7680,world\r\n+7681,world\r\n+7682,world\r\n+7683,world\r\n+7684,world\r\n+7685,world\r\n+7686,world\r\n+7687,world\r\n+7688,world\r\n+7689,world\r\n+7690,world\r\n+7691,world\r\n+7692,world\r\n+7693,world\r\n+7694,world\r\n+7695,world\r\n+7696,world\r\n+7697,world\r\n+7698,world\r\n+7699,world\r\n+7700,world\r\n+7701,world\r\n+7702,world\r\n+7703,world\r\n+7704,world\r\n+7705,world\r\n+7706,world\r\n+7707,world\r\n+7708,world\r\n+7709,world\r\n+7710,world\r\n+7711,world\r\n+7712,world\r\n+7713,world\r\n+7714,world\r\n+7715,world\r\n+7716,world\r\n+7717,world\r\n+7718,world\r\n+7719,world\r\n+7720,world\r\n+7721,world\r\n+7722,world\r\n+7723,world\r\n+7724,world\r\n+7725,world\r\n+7726,world\r\n+7727,world\r\n+7728,world\r\n+7729,world\r\n+7730,world\r\n+7731,world\r\n+7732,world\r\n+7733,world\r\n+7734,world\r\n+7735,world\r\n+7736,world\r\n+7737,world\r\n+7738,world\r\n+7739,world\r\n+7740,world\r\n+7741,world\r\n+7742,world\r\n+7743,world\r\n+7744,world\r\n+7745,world\r\n+7746,world\r\n+7747,world\r\n+7748,world\r\n+7749,world\r\n+7750,world\r\n+7751,world\r\n+7752,world\r\n+7753,world\r\n+7754,world\r\n+7755,world\r\n+7756,world\r\n+7757,world\r\n+7758,world\r\n+7759,world\r\n+7760,world\r\n+7761,world\r\n+7762,world\r\n+7763,world\r\n+7764,world\r\n+7765,world\r\n+7766,world\r\n+7767,world\r\n+7768,world\r\n+7769,world\r\n+7770,world\r\n+7771,world\r\n+7772,world\r\n+7773,world\r\n+7774,world\r\n+7775,world\r\n+7776,world\r\n+7777,world\r\n+7778,world\r\n+7779,world\r\n+7780,world\r\n+7781,world\r\n+7782,world\r\n+7783,world\r\n+7784,world\r\n+7785,world\r\n+7786,world\r\n+7787,world\r\n+7788,world\r\n+7789,world\r\n+7790,world\r\n+7791,world\r\n+7792,world\r\n+7793,world\r\n+7794,world\r\n+7795,world\r\n+7796,world\r\n+7797,world\r\n+7798,world\r\n+7799,world\r\n+7800,world\r\n+7801,world\r\n+7802,world\r\n+7803,world\r\n+7804,world\r\n+7805,world\r\n+7806,world\r\n+7807,world\r\n+7808,world\r\n+7809,world\r\n+7810,world\r\n+7811,world\r\n+7812,world\r\n+7813,world\r\n+7814,world\r\n+7815,world\r\n+7816,world\r\n+7817,world\r\n+7818,world\r\n+7819,world\r\n+7820,world\r\n+7821,world\r\n+7822,world\r\n+7823,world\r\n+7824,world\r\n+7825,world\r\n+7826,world\r\n+7827,world\r\n+7828,world\r\n+7829,world\r\n+7830,world\r\n+7831,world\r\n+7832,world\r\n+7833,world\r\n+7834,world\r\n+7835,world\r\n+7836,world\r\n+7837,world\r\n+7838,world\r\n+7839,world\r\n+7840,world\r\n+7841,world\r\n+7842,world\r\n+7843,world\r\n+7844,world\r\n+7845,world\r\n+7846,world\r\n+7847,world\r\n+7848,world\r\n+7849,world\r\n+7850,world\r\n+7851,world\r\n+7852,world\r\n+7853,world\r\n+7854,world\r\n+7855,world\r\n+7856,world\r\n+7857,world\r\n+7858,world\r\n+7859,world\r\n+7860,world\r\n+7861,world\r\n+7862,world\r\n+7863,world\r\n+7864,world\r\n+7865,world\r\n+7866,world\r\n+7867,world\r\n+7868,world\r\n+7869,world\r\n+7870,world\r\n+7871,world\r\n+7872,world\r\n+7873,world\r\n+7874,world\r\n+7875,world\r\n+7876,world\r\n+7877,world\r\n+7878,world\r\n+7879,world\r\n+7880,world\r\n+7881,world\r\n+7882,world\r\n+7883,world\r\n+7884,world\r\n+7885,world\r\n+7886,world\r\n+7887,world\r\n+7888,world\r\n+7889,world\r\n+7890,world\r\n+7891,world\r\n+7892,world\r\n+7893,world\r\n+7894,world\r\n+7895,world\r\n+7896,world\r\n+7897,world\r\n+7898,world\r\n+7899,world\r\n+7900,world\r\n+7901,world\r\n+7902,world\r\n+7903,world\r\n+7904,world\r\n+7905,world\r\n+7906,world\r\n+7907,world\r\n+7908,world\r\n+7909,world\r\n+7910,world\r\n+7911,world\r\n+7912,world\r\n+7913,world\r\n+7914,world\r\n+7915,world\r\n+7916,world\r\n+7917,world\r\n+7918,world\r\n+7919,world\r\n+7920,world\r\n+7921,world\r\n+7922,world\r\n+7923,world\r\n+7924,world\r\n+7925,world\r\n+7926,world\r\n+7927,world\r\n+7928,world\r\n+7929,world\r\n+7930,world\r\n+7931,world\r\n+7932,world\r\n+7933,world\r\n+7934,world\r\n+7935,world\r\n+7936,world\r\n+7937,world\r\n+7938,world\r\n+7939,world\r\n+7940,world\r\n+7941,world\r\n+7942,world\r\n+7943,world\r\n+7944,world\r\n+7945,world\r\n+7946,world\r\n+7947,world\r\n+7948,world\r\n+7949,world\r\n+7950,world\r\n+7951,world\r\n+7952,world\r\n+7953,world\r\n+7954,world\r\n+7955,world\r\n+7956,world\r\n+7957,world\r\n+7958,world\r\n+7959,world\r\n+7960,world\r\n+7961,world\r\n+7962,world\r\n+7963,world\r\n+7964,world\r\n+7965,world\r\n+7966,world\r\n+7967,world\r\n+7968,world\r\n+7969,world\r\n+7970,world\r\n+7971,world\r\n+7972,world\r\n+7973,world\r\n+7974,world\r\n+7975,world\r\n+7976,world\r\n+7977,world\r\n+7978,world\r\n+7979,world\r\n+7980,world\r\n+7981,world\r\n+7982,world\r\n+7983,world\r\n+7984,world\r\n+7985,world\r\n+7986,world\r\n+7987,world\r\n+7988,world\r\n+7989,world\r\n+7990,world\r\n+7991,world\r\n+7992,world\r\n+7993,world\r\n+7994,world\r\n+7995,world\r\n+7996,world\r\n+7997,world\r\n+7998,world\r\n+7999,world\r\n+8000,world\r\n+8001,world\r\n+8002,world\r\n+8003,world\r\n+8004,world\r\n+8005,world\r\n+8006,world\r\n+8007,world\r\n+8008,world\r\n+8009,world\r\n+8010,world\r\n+8011,world\r\n+8012,world\r\n+8013,world\r\n+8014,world\r\n+8015,world\r\n+8016,world\r\n+8017,world\r\n+8018,world\r\n+8019,world\r\n+8020,world\r\n+8021,world\r\n+8022,world\r\n+8023,world\r\n+8024,world\r\n+8025,world\r\n+8026,world\r\n+8027,world\r\n+8028,world\r\n+8029,world\r\n+8030,world\r\n+8031,world\r\n+8032,world\r\n+8033,world\r\n+8034,world\r\n+8035,world\r\n+8036,world\r\n+8037,world\r\n+8038,world\r\n+8039,world\r\n+8040,world\r\n+8041,world\r\n+8042,world\r\n+8043,world\r\n+8044,world\r\n+8045,world\r\n+8046,world\r\n+8047,world\r\n+8048,world\r\n+8049,world\r\n+8050,world\r\n+8051,world\r\n+8052,world\r\n+8053,world\r\n+8054,world\r\n+8055,world\r\n+8056,world\r\n+8057,world\r\n+8058,world\r\n+8059,world\r\n+8060,world\r\n+8061,world\r\n+8062,world\r\n+8063,world\r\n+8064,world\r\n+8065,world\r\n+8066,world\r\n+8067,world\r\n+8068,world\r\n+8069,world\r\n+8070,world\r\n+8071,world\r\n+8072,world\r\n+8073,world\r\n+8074,world\r\n+8075,world\r\n+8076,world\r\n+8077,world\r\n+8078,world\r\n+8079,world\r\n+8080,world\r\n+8081,world\r\n+8082,world\r\n+8083,world\r\n+8084,world\r\n+8085,world\r\n+8086,world\r\n+8087,world\r\n+8088,world\r\n+8089,world\r\n+8090,world\r\n+8091,world\r\n+8092,world\r\n+8093,world\r\n+8094,world\r\n+8095,world\r\n+8096,world\r\n+8097,world\r\n+8098,world\r\n+8099,world\r\n+8100,world\r\n+8101,world\r\n+8102,world\r\n+8103,world\r\n+8104,world\r\n+8105,world\r\n+8106,world\r\n+8107,world\r\n+8108,world\r\n+8109,world\r\n+8110,world\r\n+8111,world\r\n+8112,world\r\n+8113,world\r\n+8114,world\r\n+8115,world\r\n+8116,world\r\n+8117,world\r\n+8118,world\r\n+8119,world\r\n+8120,world\r\n+8121,world\r\n+8122,world\r\n+8123,world\r\n+8124,world\r\n+8125,world\r\n+8126,world\r\n+8127,world\r\n+8128,world\r\n+8129,world\r\n+8130,world\r\n+8131,world\r\n+8132,world\r\n+8133,world\r\n+8134,world\r\n+8135,world\r\n+8136,world\r\n+8137,world\r\n+8138,world\r\n+8139,world\r\n+8140,world\r\n+8141,world\r\n+8142,world\r\n+8143,world\r\n+8144,world\r\n+8145,world\r\n+8146,world\r\n+8147,world\r\n+8148,world\r\n+8149,world\r\n+8150,world\r\n+8151,world\r\n+8152,world\r\n+8153,world\r\n+8154,world\r\n+8155,world\r\n+8156,world\r\n+8157,world\r\n+8158,world\r\n+8159,world\r\n+8160,world\r\n+8161,world\r\n+8162,world\r\n+8163,world\r\n+8164,world\r\n+8165,world\r\n+8166,world\r\n+8167,world\r\n+8168,world\r\n+8169,world\r\n+8170,world\r\n+8171,world\r\n+8172,world\r\n+8173,world\r\n+8174,world\r\n+8175,world\r\n+8176,world\r\n+8177,world\r\n+8178,world\r\n+8179,world\r\n+8180,world\r\n+8181,world\r\n+8182,world\r\n+8183,world\r\n+8184,world\r\n+8185,world\r\n+8186,world\r\n+8187,world\r\n+8188,world\r\n+8189,world\r\n+8190,world\r\n+8191,world\r\n+8192,world\r\n+8193,world\r\n+8194,world\r\n+8195,world\r\n+8196,world\r\n+8197,world\r\n+8198,world\r\n+8199,world\r\n+8200,world\r\n+8201,world\r\n+8202,world\r\n+8203,world\r\n+8204,world\r\n+8205,world\r\n+8206,world\r\n+8207,world\r\n+8208,world\r\n+8209,world\r\n+8210,world\r\n+8211,world\r\n+8212,world\r\n+8213,world\r\n+8214,world\r\n+8215,world\r\n+8216,world\r\n+8217,world\r\n+8218,world\r\n+8219,world\r\n+8220,world\r\n+8221,world\r\n+8222,world\r\n+8223,world\r\n+8224,world\r\n+8225,world\r\n+8226,world\r\n+8227,world\r\n+8228,world\r\n+8229,world\r\n+8230,world\r\n+8231,world\r\n+8232,world\r\n+8233,world\r\n+8234,world\r\n+8235,world\r\n+8236,world\r\n+8237,world\r\n+8238,world\r\n+8239,world\r\n+8240,world\r\n+8241,world\r\n+8242,world\r\n+8243,world\r\n+8244,world\r\n+8245,world\r\n+8246,world\r\n+8247,world\r\n+8248,world\r\n+8249,world\r\n+8250,world\r\n+8251,world\r\n+8252,world\r\n+8253,world\r\n+8254,world\r\n+8255,world\r\n+8256,world\r\n+8257,world\r\n+8258,world\r\n+8259,world\r\n+8260,world\r\n+8261,world\r\n+8262,world\r\n+8263,world\r\n+8264,world\r\n+8265,world\r\n+8266,world\r\n+8267,world\r\n+8268,world\r\n+8269,world\r\n+8270,world\r\n+8271,world\r\n+8272,world\r\n+8273,world\r\n+8274,world\r\n+8275,world\r\n+8276,world\r\n+8277,world\r\n+8278,world\r\n+8279,world\r\n+8280,world\r\n+8281,world\r\n+8282,world\r\n+8283,world\r\n+8284,world\r\n+8285,world\r\n+8286,world\r\n+8287,world\r\n+8288,world\r\n+8289,world\r\n+8290,world\r\n+8291,world\r\n+8292,world\r\n+8293,world\r\n+8294,world\r\n+8295,world\r\n+8296,world\r\n+8297,world\r\n+8298,world\r\n+8299,world\r\n+8300,world\r\n+8301,world\r\n+8302,world\r\n+8303,world\r\n+8304,world\r\n+8305,world\r\n+8306,world\r\n+8307,world\r\n+8308,world\r\n+8309,world\r\n+8310,world\r\n+8311,world\r\n+8312,world\r\n+8313,world\r\n+8314,world\r\n+8315,world\r\n+8316,world\r\n+8317,world\r\n+8318,world\r\n+8319,world\r\n+8320,world\r\n+8321,world\r\n+8322,world\r\n+8323,world\r\n+8324,world\r\n+8325,world\r\n+8326,world\r\n+8327,world\r\n+8328,world\r\n+8329,world\r\n+8330,world\r\n+8331,world\r\n+8332,world\r\n+8333,world\r\n+8334,world\r\n+8335,world\r\n+8336,world\r\n+8337,world\r\n+8338,world\r\n+8339,world\r\n+8340,world\r\n+8341,world\r\n+8342,world\r\n+8343,world\r\n+8344,world\r\n+8345,world\r\n+8346,world\r\n+8347,world\r\n+8348,world\r\n+8349,world\r\n+8350,world\r\n+8351,world\r\n+8352,world\r\n+8353,world\r\n+8354,world\r\n+8355,world\r\n+8356,world\r\n+8357,world\r\n+8358,world\r\n+8359,world\r\n+8360,world\r\n+8361,world\r\n+8362,world\r\n+8363,world\r\n+8364,world\r\n+8365,world\r\n+8366,world\r\n+8367,world\r\n+8368,world\r\n+8369,world\r\n+8370,world\r\n+8371,world\r\n+8372,world\r\n+8373,world\r\n+8374,world\r\n+8375,world\r\n+8376,world\r\n+8377,world\r\n+8378,world\r\n+8379,world\r\n+8380,world\r\n+8381,world\r\n+8382,world\r\n+8383,world\r\n+8384,world\r\n+8385,world\r\n+8386,world\r\n+8387,world\r\n+8388,world\r\n+8389,world\r\n+8390,world\r\n+8391,world\r\n+8392,world\r\n+8393,world\r\n+8394,world\r\n+8395,world\r\n+8396,world\r\n+8397,world\r\n+8398,world\r\n+8399,world\r\n+8400,world\r\n+8401,world\r\n+8402,world\r\n+8403,world\r\n+8404,world\r\n+8405,world\r\n+8406,world\r\n+8407,world\r\n+8408,world\r\n+8409,world\r\n+8410,world\r\n+8411,world\r\n+8412,world\r\n+8413,world\r\n+8414,world\r\n+8415,world\r\n+8416,world\r\n+8417,world\r\n+8418,world\r\n+8419,world\r\n+8420,world\r\n+8421,world\r\n+8422,world\r\n+8423,world\r\n+8424,world\r\n+8425,world\r\n+8426,world\r\n+8427,world\r\n+8428,world\r\n+8429,world\r\n+8430,world\r\n+8431,world\r\n+8432,world\r\n+8433,world\r\n+8434,world\r\n+8435,world\r\n+8436,world\r\n+8437,world\r\n+8438,world\r\n+8439,world\r\n+8440,world\r\n+8441,world\r\n+8442,world\r\n+8443,world\r\n+8444,world\r\n+8445,world\r\n+8446,world\r\n+8447,world\r\n+8448,world\r\n+8449,world\r\n+8450,world\r\n+8451,world\r\n+8452,world\r\n+8453,world\r\n+8454,world\r\n+8455,world\r\n+8456,world\r\n+8457,world\r\n+8458,world\r\n+8459,world\r\n+8460,world\r\n+8461,world\r\n+8462,world\r\n+8463,world\r\n+8464,world\r\n+8465,world\r\n+8466,world\r\n+8467,world\r\n+8468,world\r\n+8469,world\r\n+8470,world\r\n+8471,world\r\n+8472,world\r\n+8473,world\r\n+8474,world\r\n+8475,world\r\n+8476,world\r\n+8477,world\r\n+8478,world\r\n+8479,world\r\n+8480,world\r\n+8481,world\r\n+8482,world\r\n+8483,world\r\n+8484,world\r\n+8485,world\r\n+8486,world\r\n+8487,world\r\n+8488,world\r\n+8489,world\r\n+8490,world\r\n+8491,world\r\n+8492,world\r\n+8493,world\r\n+8494,world\r\n+8495,world\r\n+8496,world\r\n+8497,world\r\n+8498,world\r\n+8499,world\r\n+8500,world\r\n+8501,world\r\n+8502,world\r\n+8503,world\r\n+8504,world\r\n+8505,world\r\n+8506,world\r\n+8507,world\r\n+8508,world\r\n+8509,world\r\n+8510,world\r\n+8511,world\r\n+8512,world\r\n+8513,world\r\n+8514,world\r\n+8515,world\r\n+8516,world\r\n+8517,world\r\n+8518,world\r\n+8519,world\r\n+8520,world\r\n+8521,world\r\n+8522,world\r\n+8523,world\r\n+8524,world\r\n+8525,world\r\n+8526,world\r\n+8527,world\r\n+8528,world\r\n+8529,world\r\n+8530,world\r\n+8531,world\r\n+8532,world\r\n+8533,world\r\n+8534,world\r\n+8535,world\r\n+8536,world\r\n+8537,world\r\n+8538,world\r\n+8539,world\r\n+8540,world\r\n+8541,world\r\n+8542,world\r\n+8543,world\r\n+8544,world\r\n+8545,world\r\n+8546,world\r\n+8547,world\r\n+8548,world\r\n+8549,world\r\n+8550,world\r\n+8551,world\r\n+8552,world\r\n+8553,world\r\n+8554,world\r\n+8555,world\r\n+8556,world\r\n+8557,world\r\n+8558,world\r\n+8559,world\r\n+8560,world\r\n+8561,world\r\n+8562,world\r\n+8563,world\r\n+8564,world\r\n+8565,world\r\n+8566,world\r\n+8567,world\r\n+8568,world\r\n+8569,world\r\n+8570,world\r\n+8571,world\r\n+8572,world\r\n+8573,world\r\n+8574,world\r\n+8575,world\r\n+8576,world\r\n+8577,world\r\n+8578,world\r\n+8579,world\r\n+8580,world\r\n+8581,world\r\n+8582,world\r\n+8583,world\r\n+8584,world\r\n+8585,world\r\n+8586,world\r\n+8587,world\r\n+8588,world\r\n+8589,world\r\n+8590,world\r\n+8591,world\r\n+8592,world\r\n+8593,world\r\n+8594,world\r\n+8595,world\r\n+8596,world\r\n+8597,world\r\n+8598,world\r\n+8599,world\r\n+8600,world\r\n+8601,world\r\n+8602,world\r\n+8603,world\r\n+8604,world\r\n+8605,world\r\n+8606,world\r\n+8607,world\r\n+8608,world\r\n+8609,world\r\n+8610,world\r\n+8611,world\r\n+8612,world\r\n+8613,world\r\n+8614,world\r\n+8615,world\r\n+8616,world\r\n+8617,world\r\n+8618,world\r\n+8619,world\r\n+8620,world\r\n+8621,world\r\n+8622,world\r\n+8623,world\r\n+8624,world\r\n+8625,world\r\n+8626,world\r\n+8627,world\r\n+8628,world\r\n+8629,world\r\n+8630,world\r\n+8631,world\r\n+8632,world\r\n+8633,world\r\n+8634,world\r\n+8635,world\r\n+8636,world\r\n+8637,world\r\n+8638,world\r\n+8639,world\r\n+8640,world\r\n+8641,world\r\n+8642,world\r\n+8643,world\r\n+8644,world\r\n+8645,world\r\n+8646,world\r\n+8647,world\r\n+8648,world\r\n+8649,world\r\n+8650,world\r\n+8651,world\r\n+8652,world\r\n+8653,world\r\n+8654,world\r\n+8655,world\r\n+8656,world\r\n+8657,world\r\n+8658,world\r\n+8659,world\r\n+8660,world\r\n+8661,world\r\n+8662,world\r\n+8663,world\r\n+8664,world\r\n+8665,world\r\n+8666,world\r\n+8667,world\r\n+8668,world\r\n+8669,world\r\n+8670,world\r\n+8671,world\r\n+8672,world\r\n+8673,world\r\n+8674,world\r\n+8675,world\r\n+8676,world\r\n+8677,world\r\n+8678,world\r\n+8679,world\r\n+8680,world\r\n+8681,world\r\n+8682,world\r\n+8683,world\r\n+8684,world\r\n+8685,world\r\n+8686,world\r\n+8687,world\r\n+8688,world\r\n+8689,world\r\n+8690,world\r\n+8691,world\r\n+8692,world\r\n+8693,world\r\n+8694,world\r\n+8695,world\r\n+8696,world\r\n+8697,world\r\n+8698,world\r\n+8699,world\r\n+8700,world\r\n+8701,world\r\n+8702,world\r\n+8703,world\r\n+8704,world\r\n+8705,world\r\n+8706,world\r\n+8707,world\r\n+8708,world\r\n+8709,world\r\n+8710,world\r\n+8711,world\r\n+8712,world\r\n+8713,world\r\n+8714,world\r\n+8715,world\r\n+8716,world\r\n+8717,world\r\n+8718,world\r\n+8719,world\r\n+8720,world\r\n+8721,world\r\n+8722,world\r\n+8723,world\r\n+8724,world\r\n+8725,world\r\n+8726,world\r\n+8727,world\r\n+8728,world\r\n+8729,world\r\n+8730,world\r\n+8731,world\r\n+8732,world\r\n+8733,world\r\n+8734,world\r\n+8735,world\r\n+8736,world\r\n+8737,world\r\n+8738,world\r\n+8739,world\r\n+8740,world\r\n+8741,world\r\n+8742,world\r\n+8743,world\r\n+8744,world\r\n+8745,world\r\n+8746,world\r\n+8747,world\r\n+8748,world\r\n+8749,world\r\n+8750,world\r\n+8751,world\r\n+8752,world\r\n+8753,world\r\n+8754,world\r\n+8755,world\r\n+8756,world\r\n+8757,world\r\n+8758,world\r\n+8759,world\r\n+8760,world\r\n+8761,world\r\n+8762,world\r\n+8763,world\r\n+8764,world\r\n+8765,world\r\n+8766,world\r\n+8767,world\r\n+8768,world\r\n+8769,world\r\n+8770,world\r\n+8771,world\r\n+8772,world\r\n+8773,world\r\n+8774,world\r\n+8775,world\r\n+8776,world\r\n+8777,world\r\n+8778,world\r\n+8779,world\r\n+8780,world\r\n+8781,world\r\n+8782,world\r\n+8783,world\r\n+8784,world\r\n+8785,world\r\n+8786,world\r\n+8787,world\r\n+8788,world\r\n+8789,world\r\n+8790,world\r\n+8791,world\r\n+8792,world\r\n+8793,world\r\n+8794,world\r\n+8795,world\r\n+8796,world\r\n+8797,world\r\n+8798,world\r\n+8799,world\r\n+8800,world\r\n+8801,world\r\n+8802,world\r\n+8803,world\r\n+8804,world\r\n+8805,world\r\n+8806,world\r\n+8807,world\r\n+8808,world\r\n+8809,world\r\n+8810,world\r\n+8811,world\r\n+8812,world\r\n+8813,world\r\n+8814,world\r\n+8815,world\r\n+8816,world\r\n+8817,world\r\n+8818,world\r\n+8819,world\r\n+8820,world\r\n+8821,world\r\n+8822,world\r\n+8823,world\r\n+8824,world\r\n+8825,world\r\n+8826,world\r\n+8827,world\r\n+8828,world\r\n+8829,world\r\n+8830,world\r\n+8831,world\r\n+8832,world\r\n+8833,world\r\n+8834,world\r\n+8835,world\r\n+8836,world\r\n+8837,world\r\n+8838,world\r\n+8839,world\r\n+8840,world\r\n+8841,world\r\n+8842,world\r\n+8843,world\r\n+8844,world\r\n+8845,world\r\n+8846,world\r\n+8847,world\r\n+8848,world\r\n+8849,world\r\n+8850,world\r\n+8851,world\r\n+8852,world\r\n+8853,world\r\n+8854,world\r\n+8855,world\r\n+8856,world\r\n+8857,world\r\n+8858,world\r\n+8859,world\r\n+8860,world\r\n+8861,world\r\n+8862,world\r\n+8863,world\r\n+8864,world\r\n+8865,world\r\n+8866,world\r\n+8867,world\r\n+8868,world\r\n+8869,world\r\n+8870,world\r\n+8871,world\r\n+8872,world\r\n+8873,world\r\n+8874,world\r\n+8875,world\r\n+8876,world\r\n+8877,world\r\n+8878,world\r\n+8879,world\r\n+8880,world\r\n+8881,world\r\n+8882,world\r\n+8883,world\r\n+8884,world\r\n+8885,world\r\n+8886,world\r\n+8887,world\r\n+8888,world\r\n+8889,world\r\n+8890,world\r\n+8891,world\r\n+8892,world\r\n+8893,world\r\n+8894,world\r\n+8895,world\r\n+8896,world\r\n+8897,world\r\n+8898,world\r\n+8899,world\r\n+8900,world\r\n+8901,world\r\n+8902,world\r\n+8903,world\r\n+8904,world\r\n+8905,world\r\n+8906,world\r\n+8907,world\r\n+8908,world\r\n+8909,world\r\n+8910,world\r\n+8911,world\r\n+8912,world\r\n+8913,world\r\n+8914,world\r\n+8915,world\r\n+8916,world\r\n+8917,world\r\n+8918,world\r\n+8919,world\r\n+8920,world\r\n+8921,world\r\n+8922,world\r\n+8923,world\r\n+8924,world\r\n+8925,world\r\n+8926,world\r\n+8927,world\r\n+8928,world\r\n+8929,world\r\n+8930,world\r\n+8931,world\r\n+8932,world\r\n+8933,world\r\n+8934,world\r\n+8935,world\r\n+8936,world\r\n+8937,world\r\n+8938,world\r\n+8939,world\r\n+8940,world\r\n+8941,world\r\n+8942,world\r\n+8943,world\r\n+8944,world\r\n+8945,world\r\n+8946,world\r\n+8947,world\r\n+8948,world\r\n+8949,world\r\n+8950,world\r\n+8951,world\r\n+8952,world\r\n+8953,world\r\n+8954,world\r\n+8955,world\r\n+8956,world\r\n+8957,world\r\n+8958,world\r\n+8959,world\r\n+8960,world\r\n+8961,world\r\n+8962,world\r\n+8963,world\r\n+8964,world\r\n+8965,world\r\n+8966,world\r\n+8967,world\r\n+8968,world\r\n+8969,world\r\n+8970,world\r\n+8971,world\r\n+8972,world\r\n+8973,world\r\n+8974,world\r\n+8975,world\r\n+8976,world\r\n+8977,world\r\n+8978,world\r\n+8979,world\r\n+8980,world\r\n+8981,world\r\n+8982,world\r\n+8983,world\r\n+8984,world\r\n+8985,world\r\n+8986,world\r\n+8987,world\r\n+8988,world\r\n+8989,world\r\n+8990,world\r\n+8991,world\r\n+8992,world\r\n+8993,world\r\n+8994,world\r\n+8995,world\r\n+8996,world\r\n+8997,world\r\n+8998,world\r\n+8999,world\r\n+9000,world\r\n+9001,world\r\n+9002,world\r\n+9003,world\r\n+9004,world\r\n+9005,world\r\n+9006,world\r\n+9007,world\r\n+9008,world\r\n+9009,world\r\n+9010,world\r\n+9011,world\r\n+9012,world\r\n+9013,world\r\n+9014,world\r\n+9015,world\r\n+9016,world\r\n+9017,world\r\n+9018,world\r\n+9019,world\r\n+9020,world\r\n+9021,world\r\n+9022,world\r\n+9023,world\r\n+9024,world\r\n+9025,world\r\n+9026,world\r\n+9027,world\r\n+9028,world\r\n+9029,world\r\n+9030,world\r\n+9031,world\r\n+9032,world\r\n+9033,world\r\n+9034,world\r\n+9035,world\r\n+9036,world\r\n+9037,world\r\n+9038,world\r\n+9039,world\r\n+9040,world\r\n+9041,world\r\n+9042,world\r\n+9043,world\r\n+9044,world\r\n+9045,world\r\n+9046,world\r\n+9047,world\r\n+9048,world\r\n+9049,world\r\n+9050,world\r\n+9051,world\r\n+9052,world\r\n+9053,world\r\n+9054,world\r\n+9055,world\r\n+9056,world\r\n+9057,world\r\n+9058,world\r\n+9059,world\r\n+9060,world\r\n+9061,world\r\n+9062,world\r\n+9063,world\r\n+9064,world\r\n+9065,world\r\n+9066,world\r\n+9067,world\r\n+9068,world\r\n+9069,world\r\n+9070,world\r\n+9071,world\r\n+9072,world\r\n+9073,world\r\n+9074,world\r\n+9075,world\r\n+9076,world\r\n+9077,world\r\n+9078,world\r\n+9079,world\r\n+9080,world\r\n+9081,world\r\n+9082,world\r\n+9083,world\r\n+9084,world\r\n+9085,world\r\n+9086,world\r\n+9087,world\r\n+9088,world\r\n+9089,world\r\n+9090,world\r\n+9091,world\r\n+9092,world\r\n+9093,world\r\n+9094,world\r\n+9095,world\r\n+9096,world\r\n+9097,world\r\n+9098,world\r\n+9099,world\r\n+9100,world\r\n+9101,world\r\n+9102,world\r\n+9103,world\r\n+9104,world\r\n+9105,world\r\n+9106,world\r\n+9107,world\r\n+9108,world\r\n+9109,world\r\n+9110,world\r\n+9111,world\r\n+9112,world\r\n+9113,world\r\n+9114,world\r\n+9115,world\r\n+9116,world\r\n+9117,world\r\n+9118,world\r\n+9119,world\r\n+9120,world\r\n+9121,world\r\n+9122,world\r\n+9123,world\r\n+9124,world\r\n+9125,world\r\n+9126,world\r\n+9127,world\r\n+9128,world\r\n+9129,world\r\n+9130,world\r\n+9131,world\r\n+9132,world\r\n+9133,world\r\n+9134,world\r\n+9135,world\r\n+9136,world\r\n+9137,world\r\n+9138,world\r\n+9139,world\r\n+9140,world\r\n+9141,world\r\n+9142,world\r\n+9143,world\r\n+9144,world\r\n+9145,world\r\n+9146,world\r\n+9147,world\r\n+9148,world\r\n+9149,world\r\n+9150,world\r\n+9151,world\r\n+9152,world\r\n+9153,world\r\n+9154,world\r\n+9155,world\r\n+9156,world\r\n+9157,world\r\n+9158,world\r\n+9159,world\r\n+9160,world\r\n+9161,world\r\n+9162,world\r\n+9163,world\r\n+9164,world\r\n+9165,world\r\n+9166,world\r\n+9167,world\r\n+9168,world\r\n+9169,world\r\n+9170,world\r\n+9171,world\r\n+9172,world\r\n+9173,world\r\n+9174,world\r\n+9175,world\r\n+9176,world\r\n+9177,world\r\n+9178,world\r\n+9179,world\r\n+9180,world\r\n+9181,world\r\n+9182,world\r\n+9183,world\r\n+9184,world\r\n+9185,world\r\n+9186,world\r\n+9187,world\r\n+9188,world\r\n+9189,world\r\n+9190,world\r\n+9191,world\r\n+9192,world\r\n+9193,world\r\n+9194,world\r\n+9195,world\r\n+9196,world\r\n+9197,world\r\n+9198,world\r\n+9199,world\r\n+9200,world\r\n+9201,world\r\n+9202,world\r\n+9203,world\r\n+9204,world\r\n+9205,world\r\n+9206,world\r\n+9207,world\r\n+9208,world\r\n+9209,world\r\n+9210,world\r\n+9211,world\r\n+9212,world\r\n+9213,world\r\n+9214,world\r\n+9215,world\r\n+9216,world\r\n+9217,world\r\n+9218,world\r\n+9219,world\r\n+9220,world\r\n+9221,world\r\n+9222,world\r\n+9223,world\r\n+9224,world\r\n+9225,world\r\n+9226,world\r\n+9227,world\r\n+9228,world\r\n+9229,world\r\n+9230,world\r\n+9231,world\r\n+9232,world\r\n+9233,world\r\n+9234,world\r\n+9235,world\r\n+9236,world\r\n+9237,world\r\n+9238,world\r\n+9239,world\r\n+9240,world\r\n+9241,world\r\n+9242,world\r\n+9243,world\r\n+9244,world\r\n+9245,world\r\n+9246,world\r\n+9247,world\r\n+9248,world\r\n+9249,world\r\n+9250,world\r\n+9251,world\r\n+9252,world\r\n+9253,world\r\n+9254,world\r\n+9255,world\r\n+9256,world\r\n+9257,world\r\n+9258,world\r\n+9259,world\r\n+9260,world\r\n+9261,world\r\n+9262,world\r\n+9263,world\r\n+9264,world\r\n+9265,world\r\n+9266,world\r\n+9267,world\r\n+9268,world\r\n+9269,world\r\n+9270,world\r\n+9271,world\r\n+9272,world\r\n+9273,world\r\n+9274,world\r\n+9275,world\r\n+9276,world\r\n+9277,world\r\n+9278,world\r\n+9279,world\r\n+9280,world\r\n+9281,world\r\n+9282,world\r\n+9283,world\r\n+9284,world\r\n+9285,world\r\n+9286,world\r\n+9287,world\r\n+9288,world\r\n+9289,world\r\n+9290,world\r\n+9291,world\r\n+9292,world\r\n+9293,world\r\n+9294,world\r\n+9295,world\r\n+9296,world\r\n+9297,world\r\n+9298,world\r\n+9299,world\r\n+9300,world\r\n+9301,world\r\n+9302,world\r\n+9303,world\r\n+9304,world\r\n+9305,world\r\n+9306,world\r\n+9307,world\r\n+9308,world\r\n+9309,world\r\n+9310,world\r\n+9311,world\r\n+9312,world\r\n+9313,world\r\n+9314,world\r\n+9315,world\r\n+9316,world\r\n+9317,world\r\n+9318,world\r\n+9319,world\r\n+9320,world\r\n+9321,world\r\n+9322,world\r\n+9323,world\r\n+9324,world\r\n+9325,world\r\n+9326,world\r\n+9327,world\r\n+9328,world\r\n+9329,world\r\n+9330,world\r\n+9331,world\r\n+9332,world\r\n+9333,world\r\n+9334,world\r\n+9335,world\r\n+9336,world\r\n+9337,world\r\n+9338,world\r\n+9339,world\r\n+9340,world\r\n+9341,world\r\n+9342,world\r\n+9343,world\r\n+9344,world\r\n+9345,world\r\n+9346,world\r\n+9347,world\r\n+9348,world\r\n+9349,world\r\n+9350,world\r\n+9351,world\r\n+9352,world\r\n+9353,world\r\n+9354,world\r\n+9355,world\r\n+9356,world\r\n+9357,world\r\n+9358,world\r\n+9359,world\r\n+9360,world\r\n+9361,world\r\n+9362,world\r\n+9363,world\r\n+9364,world\r\n+9365,world\r\n+9366,world\r\n+9367,world\r\n+9368,world\r\n+9369,world\r\n+9370,world\r\n+9371,world\r\n+9372,world\r\n+9373,world\r\n+9374,world\r\n+9375,world\r\n+9376,world\r\n+9377,world\r\n+9378,world\r\n+9379,world\r\n+9380,world\r\n+9381,world\r\n+9382,world\r\n+9383,world\r\n+9384,world\r\n+9385,world\r\n+9386,world\r\n+9387,world\r\n+9388,world\r\n+9389,world\r\n+9390,world\r\n+9391,world\r\n+9392,world\r\n+9393,world\r\n+9394,world\r\n+9395,world\r\n+9396,world\r\n+9397,world\r\n+9398,world\r\n+9399,world\r\n+9400,world\r\n+9401,world\r\n+9402,world\r\n+9403,world\r\n+9404,world\r\n+9405,world\r\n+9406,world\r\n+9407,world\r\n+9408,world\r\n+9409,world\r\n+9410,world\r\n+9411,world\r\n+9412,world\r\n+9413,world\r\n+9414,world\r\n+9415,world\r\n+9416,world\r\n+9417,world\r\n+9418,world\r\n+9419,world\r\n+9420,world\r\n+9421,world\r\n+9422,world\r\n+9423,world\r\n+9424,world\r\n+9425,world\r\n+9426,world\r\n+9427,world\r\n+9428,world\r\n+9429,world\r\n+9430,world\r\n+9431,world\r\n+9432,world\r\n+9433,world\r\n+9434,world\r\n+9435,world\r\n+9436,world\r\n+9437,world\r\n+9438,world\r\n+9439,world\r\n+9440,world\r\n+9441,world\r\n+9442,world\r\n+9443,world\r\n+9444,world\r\n+9445,world\r\n+9446,world\r\n+9447,world\r\n+9448,world\r\n+9449,world\r\n+9450,world\r\n+9451,world\r\n+9452,world\r\n+9453,world\r\n+9454,world\r\n+9455,world\r\n+9456,world\r\n+9457,world\r\n+9458,world\r\n+9459,world\r\n+9460,world\r\n+9461,world\r\n+9462,world\r\n+9463,world\r\n+9464,world\r\n+9465,world\r\n+9466,world\r\n+9467,world\r\n+9468,world\r\n+9469,world\r\n+9470,world\r\n+9471,world\r\n+9472,world\r\n+9473,world\r\n+9474,world\r\n+9475,world\r\n+9476,world\r\n+9477,world\r\n+9478,world\r\n+9479,world\r\n+9480,world\r\n+9481,world\r\n+9482,world\r\n+9483,world\r\n+9484,world\r\n+9485,world\r\n+9486,world\r\n+9487,world\r\n+9488,world\r\n+9489,world\r\n+9490,world\r\n+9491,world\r\n+9492,world\r\n+9493,world\r\n+9494,world\r\n+9495,world\r\n+9496,world\r\n+9497,world\r\n+9498,world\r\n+9499,world\r\n+9500,world\r\n+9501,world\r\n+9502,world\r\n+9503,world\r\n+9504,world\r\n+9505,world\r\n+9506,world\r\n+9507,world\r\n+9508,world\r\n+9509,world\r\n+9510,world\r\n+9511,world\r\n+9512,world\r\n+9513,world\r\n+9514,world\r\n+9515,world\r\n+9516,world\r\n+9517,world\r\n+9518,world\r\n+9519,world\r\n+9520,world\r\n+9521,world\r\n+9522,world\r\n+9523,world\r\n+9524,world\r\n+9525,world\r\n+9526,world\r\n+9527,world\r\n+9528,world\r\n+9529,world\r\n+9530,world\r\n+9531,world\r\n+9532,world\r\n+9533,world\r\n+9534,world\r\n+9535,world\r\n+9536,world\r\n+9537,world\r\n+9538,world\r\n+9539,world\r\n+9540,world\r\n+9541,world\r\n+9542,world\r\n+9543,world\r\n+9544,world\r\n+9545,world\r\n+9546,world\r\n+9547,world\r\n+9548,world\r\n+9549,world\r\n+9550,world\r\n+9551,world\r\n+9552,world\r\n+9553,world\r\n+9554,world\r\n+9555,world\r\n+9556,world\r\n+9557,world\r\n+9558,world\r\n+9559,world\r\n+9560,world\r\n+9561,world\r\n+9562,world\r\n+9563,world\r\n+9564,world\r\n+9565,world\r\n+9566,world\r\n+9567,world\r\n+9568,world\r\n+9569,world\r\n+9570,world\r\n+9571,world\r\n+9572,world\r\n+9573,world\r\n+9574,world\r\n+9575,world\r\n+9576,world\r\n+9577,world\r\n+9578,world\r\n+9579,world\r\n+9580,world\r\n+9581,world\r\n+9582,world\r\n+9583,world\r\n+9584,world\r\n+9585,world\r\n+9586,world\r\n+9587,world\r\n+9588,world\r\n+9589,world\r\n+9590,world\r\n+9591,world\r\n+9592,world\r\n+9593,world\r\n+9594,world\r\n+9595,world\r\n+9596,world\r\n+9597,world\r\n+9598,world\r\n+9599,world\r\n+9600,world\r\n+9601,world\r\n+9602,world\r\n+9603,world\r\n+9604,world\r\n+9605,world\r\n+9606,world\r\n+9607,world\r\n+9608,world\r\n+9609,world\r\n+9610,world\r\n+9611,world\r\n+9612,world\r\n+9613,world\r\n+9614,world\r\n+9615,world\r\n+9616,world\r\n+9617,world\r\n+9618,world\r\n+9619,world\r\n+9620,world\r\n+9621,world\r\n+9622,world\r\n+9623,world\r\n+9624,world\r\n+9625,world\r\n+9626,world\r\n+9627,world\r\n+9628,world\r\n+9629,world\r\n+9630,world\r\n+9631,world\r\n+9632,world\r\n+9633,world\r\n+9634,world\r\n+9635,world\r\n+9636,world\r\n+9637,world\r\n+9638,world\r\n+9639,world\r\n+9640,world\r\n+9641,world\r\n+9642,world\r\n+9643,world\r\n+9644,world\r\n+9645,world\r\n+9646,world\r\n+9647,world\r\n+9648,world\r\n+9649,world\r\n+9650,world\r\n+9651,world\r\n+9652,world\r\n+9653,world\r\n+9654,world\r\n+9655,world\r\n+9656,world\r\n+9657,world\r\n+9658,world\r\n+9659,world\r\n+9660,world\r\n+9661,world\r\n+9662,world\r\n+9663,world\r\n+9664,world\r\n+9665,world\r\n+9666,world\r\n+9667,world\r\n+9668,world\r\n+9669,world\r\n+9670,world\r\n+9671,world\r\n+9672,world\r\n+9673,world\r\n+9674,world\r\n+9675,world\r\n+9676,world\r\n+9677,world\r\n+9678,world\r\n+9679,world\r\n+9680,world\r\n+9681,world\r\n+9682,world\r\n+9683,world\r\n+9684,world\r\n+9685,world\r\n+9686,world\r\n+9687,world\r\n+9688,world\r\n+9689,world\r\n+9690,world\r\n+9691,world\r\n+9692,world\r\n+9693,world\r\n+9694,world\r\n+9695,world\r\n+9696,world\r\n+9697,world\r\n+9698,world\r\n+9699,world\r\n+9700,world\r\n+9701,world\r\n+9702,world\r\n+9703,world\r\n+9704,world\r\n+9705,world\r\n+9706,world\r\n+9707,world\r\n+9708,world\r\n+9709,world\r\n+9710,world\r\n+9711,world\r\n+9712,world\r\n+9713,world\r\n+9714,world\r\n+9715,world\r\n+9716,world\r\n+9717,world\r\n+9718,world\r\n+9719,world\r\n+9720,world\r\n+9721,world\r\n+9722,world\r\n+9723,world\r\n+9724,world\r\n+9725,world\r\n+9726,world\r\n+9727,world\r\n+9728,world\r\n+9729,world\r\n+9730,world\r\n+9731,world\r\n+9732,world\r\n+9733,world\r\n+9734,world\r\n+9735,world\r\n+9736,world\r\n+9737,world\r\n+9738,world\r\n+9739,world\r\n+9740,world\r\n+9741,world\r\n+9742,world\r\n+9743,world\r\n+9744,world\r\n+9745,world\r\n+9746,world\r\n+9747,world\r\n+9748,world\r\n+9749,world\r\n+9750,world\r\n+9751,world\r\n+9752,world\r\n+9753,world\r\n+9754,world\r\n+9755,world\r\n+9756,world\r\n+9757,world\r\n+9758,world\r\n+9759,world\r\n+9760,world\r\n+9761,world\r\n+9762,world\r\n+9763,world\r\n+9764,world\r\n+9765,world\r\n+9766,world\r\n+9767,world\r\n+9768,world\r\n+9769,world\r\n+9770,world\r\n+9771,world\r\n+9772,world\r\n+9773,world\r\n+9774,world\r\n+9775,world\r\n+9776,world\r\n+9777,world\r\n+9778,world\r\n+9779,world\r\n+9780,world\r\n+9781,world\r\n+9782,world\r\n+9783,world\r\n+9784,world\r\n+9785,world\r\n+9786,world\r\n+9787,world\r\n+9788,world\r\n+9789,world\r\n+9790,world\r\n+9791,world\r\n+9792,world\r\n+9793,world\r\n+9794,world\r\n+9795,world\r\n+9796,world\r\n+9797,world\r\n+9798,world\r\n+9799,world\r\n+9800,world\r\n+9801,world\r\n+9802,world\r\n+9803,world\r\n+9804,world\r\n+9805,world\r\n+9806,world\r\n+9807,world\r\n+9808,world\r\n+9809,world\r\n+9810,world\r\n+9811,world\r\n+9812,world\r\n+9813,world\r\n+9814,world\r\n+9815,world\r\n+9816,world\r\n+9817,world\r\n+9818,world\r\n+9819,world\r\n+9820,world\r\n+9821,world\r\n+9822,world\r\n+9823,world\r\n+9824,world\r\n+9825,world\r\n+9826,world\r\n+9827,world\r\n+9828,world\r\n+9829,world\r\n+9830,world\r\n+9831,world\r\n+9832,world\r\n+9833,world\r\n+9834,world\r\n+9835,world\r\n+9836,world\r\n+9837,world\r\n+9838,world\r\n+9839,world\r\n+9840,world\r\n+9841,world\r\n+9842,world\r\n+9843,world\r\n+9844,world\r\n+9845,world\r\n+9846,world\r\n+9847,world\r\n+9848,world\r\n+9849,world\r\n+9850,world\r\n+9851,world\r\n+9852,world\r\n+9853,world\r\n+9854,world\r\n+9855,world\r\n+9856,world\r\n+9857,world\r\n+9858,world\r\n+9859,world\r\n+9860,world\r\n+9861,world\r\n+9862,world\r\n+9863,world\r\n+9864,world\r\n+9865,world\r\n+9866,world\r\n+9867,world\r\n+9868,world\r\n+9869,world\r\n+9870,world\r\n+9871,world\r\n+9872,world\r\n+9873,world\r\n+9874,world\r\n+9875,world\r\n+9876,world\r\n+9877,world\r\n+9878,world\r\n+9879,world\r\n+9880,world\r\n+9881,world\r\n+9882,world\r\n+9883,world\r\n+9884,world\r\n+9885,world\r\n+9886,world\r\n+9887,world\r\n+9888,world\r\n+9889,world\r\n+9890,world\r\n+9891,world\r\n+9892,world\r\n+9893,world\r\n+9894,world\r\n+9895,world\r\n+9896,world\r\n+9897,world\r\n+9898,world\r\n+9899,world\r\n+9900,world\r\n+9901,world\r\n+9902,world\r\n+9903,world\r\n+9904,world\r\n+9905,world\r\n+9906,world\r\n+9907,world\r\n+9908,world\r\n+9909,world\r\n+9910,world\r\n+9911,world\r\n+9912,world\r\n+9913,world\r\n+9914,world\r\n+9915,world\r\n+9916,world\r\n+9917,world\r\n+9918,world\r\n+9919,world\r\n+9920,world\r\n+9921,world\r\n+9922,world\r\n+9923,world\r\n+9924,world\r\n+9925,world\r\n+9926,world\r\n+9927,world\r\n+9928,world\r\n+9929,world\r\n+9930,world\r\n+9931,world\r\n+9932,world\r\n+9933,world\r\n+9934,world\r\n+9935,world\r\n+9936,world\r\n+9937,world\r\n+9938,world\r\n+9939,world\r\n+9940,world\r\n+9941,world\r\n+9942,world\r\n+9943,world\r\n+9944,world\r\n+9945,world\r\n+9946,world\r\n+9947,world\r\n+9948,world\r\n+9949,world\r\n+9950,world\r\n+9951,world\r\n+9952,world\r\n+9953,world\r\n+9954,world\r\n+9955,world\r\n+9956,world\r\n+9957,world\r\n+9958,world\r\n+9959,world\r\n+9960,world\r\n+9961,world\r\n+9962,world\r\n+9963,world\r\n+9964,world\r\n+9965,world\r\n+9966,world\r\n+9967,world\r\n+9968,world\r\n+9969,world\r\n+9970,world\r\n+9971,world\r\n+9972,world\r\n+9973,world\r\n+9974,world\r\n+9975,world\r\n+9976,world\r\n+9977,world\r\n+9978,world\r\n+9979,world\r\n+9980,world\r\n+9981,world\r\n+9982,world\r\n+9983,world\r\n+9984,world\r\n+9985,world\r\n+9986,world\r\n+9987,world\r\n+9988,world\r\n+9989,world\r\n+9990,world\r\n+9991,world\r\n+9992,world\r\n+9993,world\r\n+9994,world\r\n+9995,world\r\n+9996,world\r\n+9997,world\r\n+9998,world\r\n+9999,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\n+hello,world\r\n+0,world\r\n+1,world\r\n+2,world\r\n+3,world\r\n+4,world\r\n+5,world\r\n+6,world\r\n+7,world\r\n+8,world\r\n+9,world\r\n+10,world\r\n+11,world\r\n+12,world\r\n+13,world\r\n+14,world\r\n+15,world\r\n+16,world\r\n+17,world\r\n+18,world\r\n+19,world\r\n+20,world\r\n+21,world\r\n+22,world\r\n+23,world\r\n+24,world\r\n+25,world\r\n+26,world\r\n+27,world\r\n+28,world\r\n+29,world\r\n+30,world\r\n+31,world\r\n+32,world\r\ndiff --git a/data/csv/error/quotednewlines.csv b/data/csv/error/quotednewlines.csv\nnew file mode 100644\nindex 000000000000..c0e039a2ebf7\n--- /dev/null\n+++ b/data/csv/error/quotednewlines.csv\n@@ -0,0 +1,10501 @@\n+i,'world'\n+0,world\n+1,world\n+2,world\n+3,world\n+4,world\n+5,world\n+6,world\n+7,world\n+8,world\n+9,world\n+10,world\n+11,world\n+12,world\n+13,world\n+14,world\n+15,world\n+16,world\n+17,world\n+18,world\n+19,world\n+20,world\n+21,world\n+22,world\n+23,world\n+24,world\n+25,world\n+26,world\n+27,world\n+28,world\n+29,world\n+30,world\n+31,world\n+32,world\n+33,world\n+34,world\n+35,world\n+36,world\n+37,world\n+38,world\n+39,world\n+40,world\n+41,world\n+42,world\n+43,world\n+44,world\n+45,world\n+46,world\n+47,world\n+48,world\n+49,world\n+50,world\n+51,world\n+52,world\n+53,world\n+54,world\n+55,world\n+56,world\n+57,world\n+58,world\n+59,world\n+60,world\n+61,world\n+62,world\n+63,world\n+64,world\n+65,world\n+66,world\n+67,world\n+68,world\n+69,world\n+70,world\n+71,world\n+72,world\n+73,world\n+74,world\n+75,world\n+76,world\n+77,world\n+78,world\n+79,world\n+80,world\n+81,world\n+82,world\n+83,world\n+84,world\n+85,world\n+86,world\n+87,world\n+88,world\n+89,world\n+90,world\n+91,world\n+92,world\n+93,world\n+94,world\n+95,world\n+96,world\n+97,world\n+98,world\n+99,world\n+100,world\n+101,world\n+102,world\n+103,world\n+104,world\n+105,world\n+106,world\n+107,world\n+108,world\n+109,world\n+110,world\n+111,world\n+112,world\n+113,world\n+114,world\n+115,world\n+116,world\n+117,world\n+118,world\n+119,world\n+120,world\n+121,world\n+122,world\n+123,world\n+124,world\n+125,world\n+126,world\n+127,world\n+128,world\n+129,world\n+130,world\n+131,world\n+132,world\n+133,world\n+134,world\n+135,world\n+136,world\n+137,world\n+138,world\n+139,world\n+140,world\n+141,world\n+142,world\n+143,world\n+144,world\n+145,world\n+146,world\n+147,world\n+148,world\n+149,world\n+150,world\n+151,world\n+152,world\n+153,world\n+154,world\n+155,world\n+156,world\n+157,world\n+158,world\n+159,world\n+160,world\n+161,world\n+162,world\n+163,world\n+164,world\n+165,world\n+166,world\n+167,world\n+168,world\n+169,world\n+170,world\n+171,world\n+172,world\n+173,world\n+174,world\n+175,world\n+176,world\n+177,world\n+178,world\n+179,world\n+180,world\n+181,world\n+182,world\n+183,world\n+184,world\n+185,world\n+186,world\n+187,world\n+188,world\n+189,world\n+190,world\n+191,world\n+192,world\n+193,world\n+194,world\n+195,world\n+196,world\n+197,world\n+198,world\n+199,world\n+200,world\n+201,world\n+202,world\n+203,world\n+204,world\n+205,world\n+206,world\n+207,world\n+208,world\n+209,world\n+210,world\n+211,world\n+212,world\n+213,world\n+214,world\n+215,world\n+216,world\n+217,world\n+218,world\n+219,world\n+220,world\n+221,world\n+222,world\n+223,world\n+224,world\n+225,world\n+226,world\n+227,world\n+228,world\n+229,world\n+230,world\n+231,world\n+232,world\n+233,world\n+234,world\n+235,world\n+236,world\n+237,world\n+238,world\n+239,world\n+240,world\n+241,world\n+242,world\n+243,world\n+244,world\n+245,world\n+246,world\n+247,world\n+248,world\n+249,world\n+250,world\n+251,world\n+252,world\n+253,world\n+254,world\n+255,world\n+256,world\n+257,world\n+258,world\n+259,world\n+260,world\n+261,world\n+262,world\n+263,world\n+264,world\n+265,world\n+266,world\n+267,world\n+268,world\n+269,world\n+270,world\n+271,world\n+272,world\n+273,world\n+274,world\n+275,world\n+276,world\n+277,world\n+278,world\n+279,world\n+280,world\n+281,world\n+282,world\n+283,world\n+284,world\n+285,world\n+286,world\n+287,world\n+288,world\n+289,world\n+290,world\n+291,world\n+292,world\n+293,world\n+294,world\n+295,world\n+296,world\n+297,world\n+298,world\n+299,world\n+300,world\n+301,world\n+302,world\n+303,world\n+304,world\n+305,world\n+306,world\n+307,world\n+308,world\n+309,world\n+310,world\n+311,world\n+312,world\n+313,world\n+314,world\n+315,world\n+316,world\n+317,world\n+318,world\n+319,world\n+320,world\n+321,world\n+322,world\n+323,world\n+324,world\n+325,world\n+326,world\n+327,world\n+328,world\n+329,world\n+330,world\n+331,world\n+332,world\n+333,world\n+334,world\n+335,world\n+336,world\n+337,world\n+338,world\n+339,world\n+340,world\n+341,world\n+342,world\n+343,world\n+344,world\n+345,world\n+346,world\n+347,world\n+348,world\n+349,world\n+350,world\n+351,world\n+352,world\n+353,world\n+354,world\n+355,world\n+356,world\n+357,world\n+358,world\n+359,world\n+360,world\n+361,world\n+362,world\n+363,world\n+364,world\n+365,world\n+366,world\n+367,world\n+368,world\n+369,world\n+370,world\n+371,world\n+372,world\n+373,world\n+374,world\n+375,world\n+376,world\n+377,world\n+378,world\n+379,world\n+380,world\n+381,world\n+382,world\n+383,world\n+384,world\n+385,world\n+386,world\n+387,world\n+388,world\n+389,world\n+390,world\n+391,world\n+392,world\n+393,world\n+394,world\n+395,world\n+396,world\n+397,world\n+398,world\n+399,world\n+400,world\n+401,world\n+402,world\n+403,world\n+404,world\n+405,world\n+406,world\n+407,world\n+408,world\n+409,world\n+410,world\n+411,world\n+412,world\n+413,world\n+414,world\n+415,world\n+416,world\n+417,world\n+418,world\n+419,world\n+420,world\n+421,world\n+422,world\n+423,world\n+424,world\n+425,world\n+426,world\n+427,world\n+428,world\n+429,world\n+430,world\n+431,world\n+432,world\n+433,world\n+434,world\n+435,world\n+436,world\n+437,world\n+438,world\n+439,world\n+440,world\n+441,world\n+442,world\n+443,world\n+444,world\n+445,world\n+446,world\n+447,world\n+448,world\n+449,world\n+450,world\n+451,world\n+452,world\n+453,world\n+454,world\n+455,world\n+456,world\n+457,world\n+458,world\n+459,world\n+460,world\n+461,world\n+462,world\n+463,world\n+464,world\n+465,world\n+466,world\n+467,world\n+468,world\n+469,world\n+470,world\n+471,world\n+472,world\n+473,world\n+474,world\n+475,world\n+476,world\n+477,world\n+478,world\n+479,world\n+480,world\n+481,world\n+482,world\n+483,world\n+484,world\n+485,world\n+486,world\n+487,world\n+488,world\n+489,world\n+490,world\n+491,world\n+492,world\n+493,world\n+494,world\n+495,world\n+496,world\n+497,world\n+498,world\n+499,world\n+500,world\n+501,world\n+502,world\n+503,world\n+504,world\n+505,world\n+506,world\n+507,world\n+508,world\n+509,world\n+510,world\n+511,world\n+512,world\n+513,world\n+514,world\n+515,world\n+516,world\n+517,world\n+518,world\n+519,world\n+520,world\n+521,world\n+522,world\n+523,world\n+524,world\n+525,world\n+526,world\n+527,world\n+528,world\n+529,world\n+530,world\n+531,world\n+532,world\n+533,world\n+534,world\n+535,world\n+536,world\n+537,world\n+538,world\n+539,world\n+540,world\n+541,world\n+542,world\n+543,world\n+544,world\n+545,world\n+546,world\n+547,world\n+548,world\n+549,world\n+550,world\n+551,world\n+552,world\n+553,world\n+554,world\n+555,world\n+556,world\n+557,world\n+558,world\n+559,world\n+560,world\n+561,world\n+562,world\n+563,world\n+564,world\n+565,world\n+566,world\n+567,world\n+568,world\n+569,world\n+570,world\n+571,world\n+572,world\n+573,world\n+574,world\n+575,world\n+576,world\n+577,world\n+578,world\n+579,world\n+580,world\n+581,world\n+582,world\n+583,world\n+584,world\n+585,world\n+586,world\n+587,world\n+588,world\n+589,world\n+590,world\n+591,world\n+592,world\n+593,world\n+594,world\n+595,world\n+596,world\n+597,world\n+598,world\n+599,world\n+600,world\n+601,world\n+602,world\n+603,world\n+604,world\n+605,world\n+606,world\n+607,world\n+608,world\n+609,world\n+610,world\n+611,world\n+612,world\n+613,world\n+614,world\n+615,world\n+616,world\n+617,world\n+618,world\n+619,world\n+620,world\n+621,world\n+622,world\n+623,world\n+624,world\n+625,world\n+626,world\n+627,world\n+628,world\n+629,world\n+630,world\n+631,world\n+632,world\n+633,world\n+634,world\n+635,world\n+636,world\n+637,world\n+638,world\n+639,world\n+640,world\n+641,world\n+642,world\n+643,world\n+644,world\n+645,world\n+646,world\n+647,world\n+648,world\n+649,world\n+650,world\n+651,world\n+652,world\n+653,world\n+654,world\n+655,world\n+656,world\n+657,world\n+658,world\n+659,world\n+660,world\n+661,world\n+662,world\n+663,world\n+664,world\n+665,world\n+666,world\n+667,world\n+668,world\n+669,world\n+670,world\n+671,world\n+672,world\n+673,world\n+674,world\n+675,world\n+676,world\n+677,world\n+678,world\n+679,world\n+680,world\n+681,world\n+682,world\n+683,world\n+684,world\n+685,world\n+686,world\n+687,world\n+688,world\n+689,world\n+690,world\n+691,world\n+692,world\n+693,world\n+694,world\n+695,world\n+696,world\n+697,world\n+698,world\n+699,world\n+700,world\n+701,world\n+702,world\n+703,world\n+704,world\n+705,world\n+706,world\n+707,world\n+708,world\n+709,world\n+710,world\n+711,world\n+712,world\n+713,world\n+714,world\n+715,world\n+716,world\n+717,world\n+718,world\n+719,world\n+720,world\n+721,world\n+722,world\n+723,world\n+724,world\n+725,world\n+726,world\n+727,world\n+728,world\n+729,world\n+730,world\n+731,world\n+732,world\n+733,world\n+734,world\n+735,world\n+736,world\n+737,world\n+738,world\n+739,world\n+740,world\n+741,world\n+742,world\n+743,world\n+744,world\n+745,world\n+746,world\n+747,world\n+748,world\n+749,world\n+750,world\n+751,world\n+752,world\n+753,world\n+754,world\n+755,world\n+756,world\n+757,world\n+758,world\n+759,world\n+760,world\n+761,world\n+762,world\n+763,world\n+764,world\n+765,world\n+766,world\n+767,world\n+768,world\n+769,world\n+770,world\n+771,world\n+772,world\n+773,world\n+774,world\n+775,world\n+776,world\n+777,world\n+778,world\n+779,world\n+780,world\n+781,world\n+782,world\n+783,world\n+784,world\n+785,world\n+786,world\n+787,world\n+788,world\n+789,world\n+790,world\n+791,world\n+792,world\n+793,world\n+794,world\n+795,world\n+796,world\n+797,world\n+798,world\n+799,world\n+800,world\n+801,world\n+802,world\n+803,world\n+804,world\n+805,world\n+806,world\n+807,world\n+808,world\n+809,world\n+810,world\n+811,world\n+812,world\n+813,world\n+814,world\n+815,world\n+816,world\n+817,world\n+818,world\n+819,world\n+820,world\n+821,world\n+822,world\n+823,world\n+824,world\n+825,world\n+826,world\n+827,world\n+828,world\n+829,world\n+830,world\n+831,world\n+832,world\n+833,world\n+834,world\n+835,world\n+836,world\n+837,world\n+838,world\n+839,world\n+840,world\n+841,world\n+842,world\n+843,world\n+844,world\n+845,world\n+846,world\n+847,world\n+848,world\n+849,world\n+850,world\n+851,world\n+852,world\n+853,world\n+854,world\n+855,world\n+856,world\n+857,world\n+858,world\n+859,world\n+860,world\n+861,world\n+862,world\n+863,world\n+864,world\n+865,world\n+866,world\n+867,world\n+868,world\n+869,world\n+870,world\n+871,world\n+872,world\n+873,world\n+874,world\n+875,world\n+876,world\n+877,world\n+878,world\n+879,world\n+880,world\n+881,world\n+882,world\n+883,world\n+884,world\n+885,world\n+886,world\n+887,world\n+888,world\n+889,world\n+890,world\n+891,world\n+892,world\n+893,world\n+894,world\n+895,world\n+896,world\n+897,world\n+898,world\n+899,world\n+900,world\n+901,world\n+902,world\n+903,world\n+904,world\n+905,world\n+906,world\n+907,world\n+908,world\n+909,world\n+910,world\n+911,world\n+912,world\n+913,world\n+914,world\n+915,world\n+916,world\n+917,world\n+918,world\n+919,world\n+920,world\n+921,world\n+922,world\n+923,world\n+924,world\n+925,world\n+926,world\n+927,world\n+928,world\n+929,world\n+930,world\n+931,world\n+932,world\n+933,world\n+934,world\n+935,world\n+936,world\n+937,world\n+938,world\n+939,world\n+940,world\n+941,world\n+942,world\n+943,world\n+944,world\n+945,world\n+946,world\n+947,world\n+948,world\n+949,world\n+950,world\n+951,world\n+952,world\n+953,world\n+954,world\n+955,world\n+956,world\n+957,world\n+958,world\n+959,world\n+960,world\n+961,world\n+962,world\n+963,world\n+964,world\n+965,world\n+966,world\n+967,world\n+968,world\n+969,world\n+970,world\n+971,world\n+972,world\n+973,world\n+974,world\n+975,world\n+976,world\n+977,world\n+978,world\n+979,world\n+980,world\n+981,world\n+982,world\n+983,world\n+984,world\n+985,world\n+986,world\n+987,world\n+988,world\n+989,world\n+990,world\n+991,world\n+992,world\n+993,world\n+994,world\n+995,world\n+996,world\n+997,world\n+998,world\n+999,world\n+1000,world\n+1001,world\n+1002,world\n+1003,world\n+1004,world\n+1005,world\n+1006,world\n+1007,world\n+1008,world\n+1009,world\n+1010,world\n+1011,world\n+1012,world\n+1013,world\n+1014,world\n+1015,world\n+1016,world\n+1017,world\n+1018,world\n+1019,world\n+1020,world\n+1021,world\n+1022,world\n+1023,world\n+1024,world\n+1025,world\n+1026,world\n+1027,world\n+1028,world\n+1029,world\n+1030,world\n+1031,world\n+1032,world\n+1033,world\n+1034,world\n+1035,world\n+1036,world\n+1037,world\n+1038,world\n+1039,world\n+1040,world\n+1041,world\n+1042,world\n+1043,world\n+1044,world\n+1045,world\n+1046,world\n+1047,world\n+1048,world\n+1049,world\n+1050,world\n+1051,world\n+1052,world\n+1053,world\n+1054,world\n+1055,world\n+1056,world\n+1057,world\n+1058,world\n+1059,world\n+1060,world\n+1061,world\n+1062,world\n+1063,world\n+1064,world\n+1065,world\n+1066,world\n+1067,world\n+1068,world\n+1069,world\n+1070,world\n+1071,world\n+1072,world\n+1073,world\n+1074,world\n+1075,world\n+1076,world\n+1077,world\n+1078,world\n+1079,world\n+1080,world\n+1081,world\n+1082,world\n+1083,world\n+1084,world\n+1085,world\n+1086,world\n+1087,world\n+1088,world\n+1089,world\n+1090,world\n+1091,world\n+1092,world\n+1093,world\n+1094,world\n+1095,world\n+1096,world\n+1097,world\n+1098,world\n+1099,world\n+1100,world\n+1101,world\n+1102,world\n+1103,world\n+1104,world\n+1105,world\n+1106,world\n+1107,world\n+1108,world\n+1109,world\n+1110,world\n+1111,world\n+1112,world\n+1113,world\n+1114,world\n+1115,world\n+1116,world\n+1117,world\n+1118,world\n+1119,world\n+1120,world\n+1121,world\n+1122,world\n+1123,world\n+1124,world\n+1125,world\n+1126,world\n+1127,world\n+1128,world\n+1129,world\n+1130,world\n+1131,world\n+1132,world\n+1133,world\n+1134,world\n+1135,world\n+1136,world\n+1137,world\n+1138,world\n+1139,world\n+1140,world\n+1141,world\n+1142,world\n+1143,world\n+1144,world\n+1145,world\n+1146,world\n+1147,world\n+1148,world\n+1149,world\n+1150,world\n+1151,world\n+1152,world\n+1153,world\n+1154,world\n+1155,world\n+1156,world\n+1157,world\n+1158,world\n+1159,world\n+1160,world\n+1161,world\n+1162,world\n+1163,world\n+1164,world\n+1165,world\n+1166,world\n+1167,world\n+1168,world\n+1169,world\n+1170,world\n+1171,world\n+1172,world\n+1173,world\n+1174,world\n+1175,world\n+1176,world\n+1177,world\n+1178,world\n+1179,world\n+1180,world\n+1181,world\n+1182,world\n+1183,world\n+1184,world\n+1185,world\n+1186,world\n+1187,world\n+1188,world\n+1189,world\n+1190,world\n+1191,world\n+1192,world\n+1193,world\n+1194,world\n+1195,world\n+1196,world\n+1197,world\n+1198,world\n+1199,world\n+1200,world\n+1201,world\n+1202,world\n+1203,world\n+1204,world\n+1205,world\n+1206,world\n+1207,world\n+1208,world\n+1209,world\n+1210,world\n+1211,world\n+1212,world\n+1213,world\n+1214,world\n+1215,world\n+1216,world\n+1217,world\n+1218,world\n+1219,world\n+1220,world\n+1221,world\n+1222,world\n+1223,world\n+1224,world\n+1225,world\n+1226,world\n+1227,world\n+1228,world\n+1229,world\n+1230,world\n+1231,world\n+1232,world\n+1233,world\n+1234,world\n+1235,world\n+1236,world\n+1237,world\n+1238,world\n+1239,world\n+1240,world\n+1241,world\n+1242,world\n+1243,world\n+1244,world\n+1245,world\n+1246,world\n+1247,world\n+1248,world\n+1249,world\n+1250,world\n+1251,world\n+1252,world\n+1253,world\n+1254,world\n+1255,world\n+1256,world\n+1257,world\n+1258,world\n+1259,world\n+1260,world\n+1261,world\n+1262,world\n+1263,world\n+1264,world\n+1265,world\n+1266,world\n+1267,world\n+1268,world\n+1269,world\n+1270,world\n+1271,world\n+1272,world\n+1273,world\n+1274,world\n+1275,world\n+1276,world\n+1277,world\n+1278,world\n+1279,world\n+1280,world\n+1281,world\n+1282,world\n+1283,world\n+1284,world\n+1285,world\n+1286,world\n+1287,world\n+1288,world\n+1289,world\n+1290,world\n+1291,world\n+1292,world\n+1293,world\n+1294,world\n+1295,world\n+1296,world\n+1297,world\n+1298,world\n+1299,world\n+1300,world\n+1301,world\n+1302,world\n+1303,world\n+1304,world\n+1305,world\n+1306,world\n+1307,world\n+1308,world\n+1309,world\n+1310,world\n+1311,world\n+1312,world\n+1313,world\n+1314,world\n+1315,world\n+1316,world\n+1317,world\n+1318,world\n+1319,world\n+1320,world\n+1321,world\n+1322,world\n+1323,world\n+1324,world\n+1325,world\n+1326,world\n+1327,world\n+1328,world\n+1329,world\n+1330,world\n+1331,world\n+1332,world\n+1333,world\n+1334,world\n+1335,world\n+1336,world\n+1337,world\n+1338,world\n+1339,world\n+1340,world\n+1341,world\n+1342,world\n+1343,world\n+1344,world\n+1345,world\n+1346,world\n+1347,world\n+1348,world\n+1349,world\n+1350,world\n+1351,world\n+1352,world\n+1353,world\n+1354,world\n+1355,world\n+1356,world\n+1357,world\n+1358,world\n+1359,world\n+1360,world\n+1361,world\n+1362,world\n+1363,world\n+1364,world\n+1365,world\n+1366,world\n+1367,world\n+1368,world\n+1369,world\n+1370,world\n+1371,world\n+1372,world\n+1373,world\n+1374,world\n+1375,world\n+1376,world\n+1377,world\n+1378,world\n+1379,world\n+1380,world\n+1381,world\n+1382,world\n+1383,world\n+1384,world\n+1385,world\n+1386,world\n+1387,world\n+1388,world\n+1389,world\n+1390,world\n+1391,world\n+1392,world\n+1393,world\n+1394,world\n+1395,world\n+1396,world\n+1397,world\n+1398,world\n+1399,world\n+1400,world\n+1401,world\n+1402,world\n+1403,world\n+1404,world\n+1405,world\n+1406,world\n+1407,world\n+1408,world\n+1409,world\n+1410,world\n+1411,world\n+1412,world\n+1413,world\n+1414,world\n+1415,world\n+1416,world\n+1417,world\n+1418,world\n+1419,world\n+1420,world\n+1421,world\n+1422,world\n+1423,world\n+1424,world\n+1425,world\n+1426,world\n+1427,world\n+1428,world\n+1429,world\n+1430,world\n+1431,world\n+1432,world\n+1433,world\n+1434,world\n+1435,world\n+1436,world\n+1437,world\n+1438,world\n+1439,world\n+1440,world\n+1441,world\n+1442,world\n+1443,world\n+1444,world\n+1445,world\n+1446,world\n+1447,world\n+1448,world\n+1449,world\n+1450,world\n+1451,world\n+1452,world\n+1453,world\n+1454,world\n+1455,world\n+1456,world\n+1457,world\n+1458,world\n+1459,world\n+1460,world\n+1461,world\n+1462,world\n+1463,world\n+1464,world\n+1465,world\n+1466,world\n+1467,world\n+1468,world\n+1469,world\n+1470,world\n+1471,world\n+1472,world\n+1473,world\n+1474,world\n+1475,world\n+1476,world\n+1477,world\n+1478,world\n+1479,world\n+1480,world\n+1481,world\n+1482,world\n+1483,world\n+1484,world\n+1485,world\n+1486,world\n+1487,world\n+1488,world\n+1489,world\n+1490,world\n+1491,world\n+1492,world\n+1493,world\n+1494,world\n+1495,world\n+1496,world\n+1497,world\n+1498,world\n+1499,world\n+1500,world\n+1501,world\n+1502,world\n+1503,world\n+1504,world\n+1505,world\n+1506,world\n+1507,world\n+1508,world\n+1509,world\n+1510,world\n+1511,world\n+1512,world\n+1513,world\n+1514,world\n+1515,world\n+1516,world\n+1517,world\n+1518,world\n+1519,world\n+1520,world\n+1521,world\n+1522,world\n+1523,world\n+1524,world\n+1525,world\n+1526,world\n+1527,world\n+1528,world\n+1529,world\n+1530,world\n+1531,world\n+1532,world\n+1533,world\n+1534,world\n+1535,world\n+1536,world\n+1537,world\n+1538,world\n+1539,world\n+1540,world\n+1541,world\n+1542,world\n+1543,world\n+1544,world\n+1545,world\n+1546,world\n+1547,world\n+1548,world\n+1549,world\n+1550,world\n+1551,world\n+1552,world\n+1553,world\n+1554,world\n+1555,world\n+1556,world\n+1557,world\n+1558,world\n+1559,world\n+1560,world\n+1561,world\n+1562,world\n+1563,world\n+1564,world\n+1565,world\n+1566,world\n+1567,world\n+1568,world\n+1569,world\n+1570,world\n+1571,world\n+1572,world\n+1573,world\n+1574,world\n+1575,world\n+1576,world\n+1577,world\n+1578,world\n+1579,world\n+1580,world\n+1581,world\n+1582,world\n+1583,world\n+1584,world\n+1585,world\n+1586,world\n+1587,world\n+1588,world\n+1589,world\n+1590,world\n+1591,world\n+1592,world\n+1593,world\n+1594,world\n+1595,world\n+1596,world\n+1597,world\n+1598,world\n+1599,world\n+1600,world\n+1601,world\n+1602,world\n+1603,world\n+1604,world\n+1605,world\n+1606,world\n+1607,world\n+1608,world\n+1609,world\n+1610,world\n+1611,world\n+1612,world\n+1613,world\n+1614,world\n+1615,world\n+1616,world\n+1617,world\n+1618,world\n+1619,world\n+1620,world\n+1621,world\n+1622,world\n+1623,world\n+1624,world\n+1625,world\n+1626,world\n+1627,world\n+1628,world\n+1629,world\n+1630,world\n+1631,world\n+1632,world\n+1633,world\n+1634,world\n+1635,world\n+1636,world\n+1637,world\n+1638,world\n+1639,world\n+1640,world\n+1641,world\n+1642,world\n+1643,world\n+1644,world\n+1645,world\n+1646,world\n+1647,world\n+1648,world\n+1649,world\n+1650,world\n+1651,world\n+1652,world\n+1653,world\n+1654,world\n+1655,world\n+1656,world\n+1657,world\n+1658,world\n+1659,world\n+1660,world\n+1661,world\n+1662,world\n+1663,world\n+1664,world\n+1665,world\n+1666,world\n+1667,world\n+1668,world\n+1669,world\n+1670,world\n+1671,world\n+1672,world\n+1673,world\n+1674,world\n+1675,world\n+1676,world\n+1677,world\n+1678,world\n+1679,world\n+1680,world\n+1681,world\n+1682,world\n+1683,world\n+1684,world\n+1685,world\n+1686,world\n+1687,world\n+1688,world\n+1689,world\n+1690,world\n+1691,world\n+1692,world\n+1693,world\n+1694,world\n+1695,world\n+1696,world\n+1697,world\n+1698,world\n+1699,world\n+1700,world\n+1701,world\n+1702,world\n+1703,world\n+1704,world\n+1705,world\n+1706,world\n+1707,world\n+1708,world\n+1709,world\n+1710,world\n+1711,world\n+1712,world\n+1713,world\n+1714,world\n+1715,world\n+1716,world\n+1717,world\n+1718,world\n+1719,world\n+1720,world\n+1721,world\n+1722,world\n+1723,world\n+1724,world\n+1725,world\n+1726,world\n+1727,world\n+1728,world\n+1729,world\n+1730,world\n+1731,world\n+1732,world\n+1733,world\n+1734,world\n+1735,world\n+1736,world\n+1737,world\n+1738,world\n+1739,world\n+1740,world\n+1741,world\n+1742,world\n+1743,world\n+1744,world\n+1745,world\n+1746,world\n+1747,world\n+1748,world\n+1749,world\n+1750,world\n+1751,world\n+1752,world\n+1753,world\n+1754,world\n+1755,world\n+1756,world\n+1757,world\n+1758,world\n+1759,world\n+1760,world\n+1761,world\n+1762,world\n+1763,world\n+1764,world\n+1765,world\n+1766,world\n+1767,world\n+1768,world\n+1769,world\n+1770,world\n+1771,world\n+1772,world\n+1773,world\n+1774,world\n+1775,world\n+1776,world\n+1777,world\n+1778,world\n+1779,world\n+1780,world\n+1781,world\n+1782,world\n+1783,world\n+1784,world\n+1785,world\n+1786,world\n+1787,world\n+1788,world\n+1789,world\n+1790,world\n+1791,world\n+1792,world\n+1793,world\n+1794,world\n+1795,world\n+1796,world\n+1797,world\n+1798,world\n+1799,world\n+1800,world\n+1801,world\n+1802,world\n+1803,world\n+1804,world\n+1805,world\n+1806,world\n+1807,world\n+1808,world\n+1809,world\n+1810,world\n+1811,world\n+1812,world\n+1813,world\n+1814,world\n+1815,world\n+1816,world\n+1817,world\n+1818,world\n+1819,world\n+1820,world\n+1821,world\n+1822,world\n+1823,world\n+1824,world\n+1825,world\n+1826,world\n+1827,world\n+1828,world\n+1829,world\n+1830,world\n+1831,world\n+1832,world\n+1833,world\n+1834,world\n+1835,world\n+1836,world\n+1837,world\n+1838,world\n+1839,world\n+1840,world\n+1841,world\n+1842,world\n+1843,world\n+1844,world\n+1845,world\n+1846,world\n+1847,world\n+1848,world\n+1849,world\n+1850,world\n+1851,world\n+1852,world\n+1853,world\n+1854,world\n+1855,world\n+1856,world\n+1857,world\n+1858,world\n+1859,world\n+1860,world\n+1861,world\n+1862,world\n+1863,world\n+1864,world\n+1865,world\n+1866,world\n+1867,world\n+1868,world\n+1869,world\n+1870,world\n+1871,world\n+1872,world\n+1873,world\n+1874,world\n+1875,world\n+1876,world\n+1877,world\n+1878,world\n+1879,world\n+1880,world\n+1881,world\n+1882,world\n+1883,world\n+1884,world\n+1885,world\n+1886,world\n+1887,world\n+1888,world\n+1889,world\n+1890,world\n+1891,world\n+1892,world\n+1893,world\n+1894,world\n+1895,world\n+1896,world\n+1897,world\n+1898,world\n+1899,world\n+1900,world\n+1901,world\n+1902,world\n+1903,world\n+1904,world\n+1905,world\n+1906,world\n+1907,world\n+1908,world\n+1909,world\n+1910,world\n+1911,world\n+1912,world\n+1913,world\n+1914,world\n+1915,world\n+1916,world\n+1917,world\n+1918,world\n+1919,world\n+1920,world\n+1921,world\n+1922,world\n+1923,world\n+1924,world\n+1925,world\n+1926,world\n+1927,world\n+1928,world\n+1929,world\n+1930,world\n+1931,world\n+1932,world\n+1933,world\n+1934,world\n+1935,world\n+1936,world\n+1937,world\n+1938,world\n+1939,world\n+1940,world\n+1941,world\n+1942,world\n+1943,world\n+1944,world\n+1945,world\n+1946,world\n+1947,world\n+1948,world\n+1949,world\n+1950,world\n+1951,world\n+1952,world\n+1953,world\n+1954,world\n+1955,world\n+1956,world\n+1957,world\n+1958,world\n+1959,world\n+1960,world\n+1961,world\n+1962,world\n+1963,world\n+1964,world\n+1965,world\n+1966,world\n+1967,world\n+1968,world\n+1969,world\n+1970,world\n+1971,world\n+1972,world\n+1973,world\n+1974,world\n+1975,world\n+1976,world\n+1977,world\n+1978,world\n+1979,world\n+1980,world\n+1981,world\n+1982,world\n+1983,world\n+1984,world\n+1985,world\n+1986,world\n+1987,world\n+1988,world\n+1989,world\n+1990,world\n+1991,world\n+1992,world\n+1993,world\n+1994,world\n+1995,world\n+1996,world\n+1997,world\n+1998,world\n+1999,world\n+2000,world\n+2001,world\n+2002,world\n+2003,world\n+2004,world\n+2005,world\n+2006,world\n+2007,world\n+2008,world\n+2009,world\n+2010,world\n+2011,world\n+2012,world\n+2013,world\n+2014,world\n+2015,world\n+2016,world\n+2017,world\n+2018,world\n+2019,world\n+2020,world\n+2021,world\n+2022,world\n+2023,world\n+2024,world\n+2025,world\n+2026,world\n+2027,world\n+2028,world\n+2029,world\n+2030,world\n+2031,world\n+2032,world\n+2033,world\n+2034,world\n+2035,world\n+2036,world\n+2037,world\n+2038,world\n+2039,world\n+2040,world\n+2041,world\n+2042,world\n+2043,world\n+2044,world\n+2045,world\n+2046,world\n+2047,world\n+2048,world\n+2049,world\n+2050,world\n+2051,world\n+2052,world\n+2053,world\n+2054,world\n+2055,world\n+2056,world\n+2057,world\n+2058,world\n+2059,world\n+2060,world\n+2061,world\n+2062,world\n+2063,world\n+2064,world\n+2065,world\n+2066,world\n+2067,world\n+2068,world\n+2069,world\n+2070,world\n+2071,world\n+2072,world\n+2073,world\n+2074,world\n+2075,world\n+2076,world\n+2077,world\n+2078,world\n+2079,world\n+2080,world\n+2081,world\n+2082,world\n+2083,world\n+2084,world\n+2085,world\n+2086,world\n+2087,world\n+2088,world\n+2089,world\n+2090,world\n+2091,world\n+2092,world\n+2093,world\n+2094,world\n+2095,world\n+2096,world\n+2097,world\n+2098,world\n+2099,world\n+2100,world\n+2101,world\n+2102,world\n+2103,world\n+2104,world\n+2105,world\n+2106,world\n+2107,world\n+2108,world\n+2109,world\n+2110,world\n+2111,world\n+2112,world\n+2113,world\n+2114,world\n+2115,world\n+2116,world\n+2117,world\n+2118,world\n+2119,world\n+2120,world\n+2121,world\n+2122,world\n+2123,world\n+2124,world\n+2125,world\n+2126,world\n+2127,world\n+2128,world\n+2129,world\n+2130,world\n+2131,world\n+2132,world\n+2133,world\n+2134,world\n+2135,world\n+2136,world\n+2137,world\n+2138,world\n+2139,world\n+2140,world\n+2141,world\n+2142,world\n+2143,world\n+2144,world\n+2145,world\n+2146,world\n+2147,world\n+2148,world\n+2149,world\n+2150,world\n+2151,world\n+2152,world\n+2153,world\n+2154,world\n+2155,world\n+2156,world\n+2157,world\n+2158,world\n+2159,world\n+2160,world\n+2161,world\n+2162,world\n+2163,world\n+2164,world\n+2165,world\n+2166,world\n+2167,world\n+2168,world\n+2169,world\n+2170,world\n+2171,world\n+2172,world\n+2173,world\n+2174,world\n+2175,world\n+2176,world\n+2177,world\n+2178,world\n+2179,world\n+2180,world\n+2181,world\n+2182,world\n+2183,world\n+2184,world\n+2185,world\n+2186,world\n+2187,world\n+2188,world\n+2189,world\n+2190,world\n+2191,world\n+2192,world\n+2193,world\n+2194,world\n+2195,world\n+2196,world\n+2197,world\n+2198,world\n+2199,world\n+2200,world\n+2201,world\n+2202,world\n+2203,world\n+2204,world\n+2205,world\n+2206,world\n+2207,world\n+2208,world\n+2209,world\n+2210,world\n+2211,world\n+2212,world\n+2213,world\n+2214,world\n+2215,world\n+2216,world\n+2217,world\n+2218,world\n+2219,world\n+2220,world\n+2221,world\n+2222,world\n+2223,world\n+2224,world\n+2225,world\n+2226,world\n+2227,world\n+2228,world\n+2229,world\n+2230,world\n+2231,world\n+2232,world\n+2233,world\n+2234,world\n+2235,world\n+2236,world\n+2237,world\n+2238,world\n+2239,world\n+2240,world\n+2241,world\n+2242,world\n+2243,world\n+2244,world\n+2245,world\n+2246,world\n+2247,world\n+2248,world\n+2249,world\n+2250,world\n+2251,world\n+2252,world\n+2253,world\n+2254,world\n+2255,world\n+2256,world\n+2257,world\n+2258,world\n+2259,world\n+2260,world\n+2261,world\n+2262,world\n+2263,world\n+2264,world\n+2265,world\n+2266,world\n+2267,world\n+2268,world\n+2269,world\n+2270,world\n+2271,world\n+2272,world\n+2273,world\n+2274,world\n+2275,world\n+2276,world\n+2277,world\n+2278,world\n+2279,world\n+2280,world\n+2281,world\n+2282,world\n+2283,world\n+2284,world\n+2285,world\n+2286,world\n+2287,world\n+2288,world\n+2289,world\n+2290,world\n+2291,world\n+2292,world\n+2293,world\n+2294,world\n+2295,world\n+2296,world\n+2297,world\n+2298,world\n+2299,world\n+2300,world\n+2301,world\n+2302,world\n+2303,world\n+2304,world\n+2305,world\n+2306,world\n+2307,world\n+2308,world\n+2309,world\n+2310,world\n+2311,world\n+2312,world\n+2313,world\n+2314,world\n+2315,world\n+2316,world\n+2317,world\n+2318,world\n+2319,world\n+2320,world\n+2321,world\n+2322,world\n+2323,world\n+2324,world\n+2325,world\n+2326,world\n+2327,world\n+2328,world\n+2329,world\n+2330,world\n+2331,world\n+2332,world\n+2333,world\n+2334,world\n+2335,world\n+2336,world\n+2337,world\n+2338,world\n+2339,world\n+2340,world\n+2341,world\n+2342,world\n+2343,world\n+2344,world\n+2345,world\n+2346,world\n+2347,world\n+2348,world\n+2349,world\n+2350,world\n+2351,world\n+2352,world\n+2353,world\n+2354,world\n+2355,world\n+2356,world\n+2357,world\n+2358,world\n+2359,world\n+2360,world\n+2361,world\n+2362,world\n+2363,world\n+2364,world\n+2365,world\n+2366,world\n+2367,world\n+2368,world\n+2369,world\n+2370,world\n+2371,world\n+2372,world\n+2373,world\n+2374,world\n+2375,world\n+2376,world\n+2377,world\n+2378,world\n+2379,world\n+2380,world\n+2381,world\n+2382,world\n+2383,world\n+2384,world\n+2385,world\n+2386,world\n+2387,world\n+2388,world\n+2389,world\n+2390,world\n+2391,world\n+2392,world\n+2393,world\n+2394,world\n+2395,world\n+2396,world\n+2397,world\n+2398,world\n+2399,world\n+2400,world\n+2401,world\n+2402,world\n+2403,world\n+2404,world\n+2405,world\n+2406,world\n+2407,world\n+2408,world\n+2409,world\n+2410,world\n+2411,world\n+2412,world\n+2413,world\n+2414,world\n+2415,world\n+2416,world\n+2417,world\n+2418,world\n+2419,world\n+2420,world\n+2421,world\n+2422,world\n+2423,world\n+2424,world\n+2425,world\n+2426,world\n+2427,world\n+2428,world\n+2429,world\n+2430,world\n+2431,world\n+2432,world\n+2433,world\n+2434,world\n+2435,world\n+2436,world\n+2437,world\n+2438,world\n+2439,world\n+2440,world\n+2441,world\n+2442,world\n+2443,world\n+2444,world\n+2445,world\n+2446,world\n+2447,world\n+2448,world\n+2449,world\n+2450,world\n+2451,world\n+2452,world\n+2453,world\n+2454,world\n+2455,world\n+2456,world\n+2457,world\n+2458,world\n+2459,world\n+2460,world\n+2461,world\n+2462,world\n+2463,world\n+2464,world\n+2465,world\n+2466,world\n+2467,world\n+2468,world\n+2469,world\n+2470,world\n+2471,world\n+2472,world\n+2473,world\n+2474,world\n+2475,world\n+2476,world\n+2477,world\n+2478,world\n+2479,world\n+2480,world\n+2481,world\n+2482,world\n+2483,world\n+2484,world\n+2485,world\n+2486,world\n+2487,world\n+2488,world\n+2489,world\n+2490,world\n+2491,world\n+2492,world\n+2493,world\n+2494,world\n+2495,world\n+2496,world\n+2497,world\n+2498,world\n+2499,world\n+2500,world\n+2501,world\n+2502,world\n+2503,world\n+2504,world\n+2505,world\n+2506,world\n+2507,world\n+2508,world\n+2509,world\n+2510,world\n+2511,world\n+2512,world\n+2513,world\n+2514,world\n+2515,world\n+2516,world\n+2517,world\n+2518,world\n+2519,world\n+2520,world\n+2521,world\n+2522,world\n+2523,world\n+2524,world\n+2525,world\n+2526,world\n+2527,world\n+2528,world\n+2529,world\n+2530,world\n+2531,world\n+2532,world\n+2533,world\n+2534,world\n+2535,world\n+2536,world\n+2537,world\n+2538,world\n+2539,world\n+2540,world\n+2541,world\n+2542,world\n+2543,world\n+2544,world\n+2545,world\n+2546,world\n+2547,world\n+2548,world\n+2549,world\n+2550,world\n+2551,world\n+2552,world\n+2553,world\n+2554,world\n+2555,world\n+2556,world\n+2557,world\n+2558,world\n+2559,world\n+2560,world\n+2561,world\n+2562,world\n+2563,world\n+2564,world\n+2565,world\n+2566,world\n+2567,world\n+2568,world\n+2569,world\n+2570,world\n+2571,world\n+2572,world\n+2573,world\n+2574,world\n+2575,world\n+2576,world\n+2577,world\n+2578,world\n+2579,world\n+2580,world\n+2581,world\n+2582,world\n+2583,world\n+2584,world\n+2585,world\n+2586,world\n+2587,world\n+2588,world\n+2589,world\n+2590,world\n+2591,world\n+2592,world\n+2593,world\n+2594,world\n+2595,world\n+2596,world\n+2597,world\n+2598,world\n+2599,world\n+2600,world\n+2601,world\n+2602,world\n+2603,world\n+2604,world\n+2605,world\n+2606,world\n+2607,world\n+2608,world\n+2609,world\n+2610,world\n+2611,world\n+2612,world\n+2613,world\n+2614,world\n+2615,world\n+2616,world\n+2617,world\n+2618,world\n+2619,world\n+2620,world\n+2621,world\n+2622,world\n+2623,world\n+2624,world\n+2625,world\n+2626,world\n+2627,world\n+2628,world\n+2629,world\n+2630,world\n+2631,world\n+2632,world\n+2633,world\n+2634,world\n+2635,world\n+2636,world\n+2637,world\n+2638,world\n+2639,world\n+2640,world\n+2641,world\n+2642,world\n+2643,world\n+2644,world\n+2645,world\n+2646,world\n+2647,world\n+2648,world\n+2649,world\n+2650,world\n+2651,world\n+2652,world\n+2653,world\n+2654,world\n+2655,world\n+2656,world\n+2657,world\n+2658,world\n+2659,world\n+2660,world\n+2661,world\n+2662,world\n+2663,world\n+2664,world\n+2665,world\n+2666,world\n+2667,world\n+2668,world\n+2669,world\n+2670,world\n+2671,world\n+2672,world\n+2673,world\n+2674,world\n+2675,world\n+2676,world\n+2677,world\n+2678,world\n+2679,world\n+2680,world\n+2681,world\n+2682,world\n+2683,world\n+2684,world\n+2685,world\n+2686,world\n+2687,world\n+2688,world\n+2689,world\n+2690,world\n+2691,world\n+2692,world\n+2693,world\n+2694,world\n+2695,world\n+2696,world\n+2697,world\n+2698,world\n+2699,world\n+2700,world\n+2701,world\n+2702,world\n+2703,world\n+2704,world\n+2705,world\n+2706,world\n+2707,world\n+2708,world\n+2709,world\n+2710,world\n+2711,world\n+2712,world\n+2713,world\n+2714,world\n+2715,world\n+2716,world\n+2717,world\n+2718,world\n+2719,world\n+2720,world\n+2721,world\n+2722,world\n+2723,world\n+2724,world\n+2725,world\n+2726,world\n+2727,world\n+2728,world\n+2729,world\n+2730,world\n+2731,world\n+2732,world\n+2733,world\n+2734,world\n+2735,world\n+2736,world\n+2737,world\n+2738,world\n+2739,world\n+2740,world\n+2741,world\n+2742,world\n+2743,world\n+2744,world\n+2745,world\n+2746,world\n+2747,world\n+2748,world\n+2749,world\n+2750,world\n+2751,world\n+2752,world\n+2753,world\n+2754,world\n+2755,world\n+2756,world\n+2757,world\n+2758,world\n+2759,world\n+2760,world\n+2761,world\n+2762,world\n+2763,world\n+2764,world\n+2765,world\n+2766,world\n+2767,world\n+2768,world\n+2769,world\n+2770,world\n+2771,world\n+2772,world\n+2773,world\n+2774,world\n+2775,world\n+2776,world\n+2777,world\n+2778,world\n+2779,world\n+2780,world\n+2781,world\n+2782,world\n+2783,world\n+2784,world\n+2785,world\n+2786,world\n+2787,world\n+2788,world\n+2789,world\n+2790,world\n+2791,world\n+2792,world\n+2793,world\n+2794,world\n+2795,world\n+2796,world\n+2797,world\n+2798,world\n+2799,world\n+2800,world\n+2801,world\n+2802,world\n+2803,world\n+2804,world\n+2805,world\n+2806,world\n+2807,world\n+2808,world\n+2809,world\n+2810,world\n+2811,world\n+2812,world\n+2813,world\n+2814,world\n+2815,world\n+2816,world\n+2817,world\n+2818,world\n+2819,world\n+2820,world\n+2821,world\n+2822,world\n+2823,world\n+2824,world\n+2825,world\n+2826,world\n+2827,world\n+2828,world\n+2829,world\n+2830,world\n+2831,world\n+2832,world\n+2833,world\n+2834,world\n+2835,world\n+2836,world\n+2837,world\n+2838,world\n+2839,world\n+2840,world\n+2841,world\n+2842,world\n+2843,world\n+2844,world\n+2845,world\n+2846,world\n+2847,world\n+2848,world\n+2849,world\n+2850,world\n+2851,world\n+2852,world\n+2853,world\n+2854,world\n+2855,world\n+2856,world\n+2857,world\n+2858,world\n+2859,world\n+2860,world\n+2861,world\n+2862,world\n+2863,world\n+2864,world\n+2865,world\n+2866,world\n+2867,world\n+2868,world\n+2869,world\n+2870,world\n+2871,world\n+2872,world\n+2873,world\n+2874,world\n+2875,world\n+2876,world\n+2877,world\n+2878,world\n+2879,world\n+2880,world\n+2881,world\n+2882,world\n+2883,world\n+2884,world\n+2885,world\n+2886,world\n+2887,world\n+2888,world\n+2889,world\n+2890,world\n+2891,world\n+2892,world\n+2893,world\n+2894,world\n+2895,world\n+2896,world\n+2897,world\n+2898,world\n+2899,world\n+2900,world\n+2901,world\n+2902,world\n+2903,world\n+2904,world\n+2905,world\n+2906,world\n+2907,world\n+2908,world\n+2909,world\n+2910,world\n+2911,world\n+2912,world\n+2913,world\n+2914,world\n+2915,world\n+2916,world\n+2917,world\n+2918,world\n+2919,world\n+2920,world\n+2921,world\n+2922,world\n+2923,world\n+2924,world\n+2925,world\n+2926,world\n+2927,world\n+2928,world\n+2929,world\n+2930,world\n+2931,world\n+2932,world\n+2933,world\n+2934,world\n+2935,world\n+2936,world\n+2937,world\n+2938,world\n+2939,world\n+2940,world\n+2941,world\n+2942,world\n+2943,world\n+2944,world\n+2945,world\n+2946,world\n+2947,world\n+2948,world\n+2949,world\n+2950,world\n+2951,world\n+2952,world\n+2953,world\n+2954,world\n+2955,world\n+2956,world\n+2957,world\n+2958,world\n+2959,world\n+2960,world\n+2961,world\n+2962,world\n+2963,world\n+2964,world\n+2965,world\n+2966,world\n+2967,world\n+2968,world\n+2969,world\n+2970,world\n+2971,world\n+2972,world\n+2973,world\n+2974,world\n+2975,world\n+2976,world\n+2977,world\n+2978,world\n+2979,world\n+2980,world\n+2981,world\n+2982,world\n+2983,world\n+2984,world\n+2985,world\n+2986,world\n+2987,world\n+2988,world\n+2989,world\n+2990,world\n+2991,world\n+2992,world\n+2993,world\n+2994,world\n+2995,world\n+2996,world\n+2997,world\n+2998,world\n+2999,world\n+3000,world\n+3001,world\n+3002,world\n+3003,world\n+3004,world\n+3005,world\n+3006,world\n+3007,world\n+3008,world\n+3009,world\n+3010,world\n+3011,world\n+3012,world\n+3013,world\n+3014,world\n+3015,world\n+3016,world\n+3017,world\n+3018,world\n+3019,world\n+3020,world\n+3021,world\n+3022,world\n+3023,world\n+3024,world\n+3025,world\n+3026,world\n+3027,world\n+3028,world\n+3029,world\n+3030,world\n+3031,world\n+3032,world\n+3033,world\n+3034,world\n+3035,world\n+3036,world\n+3037,world\n+3038,world\n+3039,world\n+3040,world\n+3041,world\n+3042,world\n+3043,world\n+3044,world\n+3045,world\n+3046,world\n+3047,world\n+3048,world\n+3049,world\n+3050,world\n+3051,world\n+3052,world\n+3053,world\n+3054,world\n+3055,world\n+3056,world\n+3057,world\n+3058,world\n+3059,world\n+3060,world\n+3061,world\n+3062,world\n+3063,world\n+3064,world\n+3065,world\n+3066,world\n+3067,world\n+3068,world\n+3069,world\n+3070,world\n+3071,world\n+3072,world\n+3073,world\n+3074,world\n+3075,world\n+3076,world\n+3077,world\n+3078,world\n+3079,world\n+3080,world\n+3081,world\n+3082,world\n+3083,world\n+3084,world\n+3085,world\n+3086,world\n+3087,world\n+3088,world\n+3089,world\n+3090,world\n+3091,world\n+3092,world\n+3093,world\n+3094,world\n+3095,world\n+3096,world\n+3097,world\n+3098,world\n+3099,world\n+3100,world\n+3101,world\n+3102,world\n+3103,world\n+3104,world\n+3105,world\n+3106,world\n+3107,world\n+3108,world\n+3109,world\n+3110,world\n+3111,world\n+3112,world\n+3113,world\n+3114,world\n+3115,world\n+3116,world\n+3117,world\n+3118,world\n+3119,world\n+3120,world\n+3121,world\n+3122,world\n+3123,world\n+3124,world\n+3125,world\n+3126,world\n+3127,world\n+3128,world\n+3129,world\n+3130,world\n+3131,world\n+3132,world\n+3133,world\n+3134,world\n+3135,world\n+3136,world\n+3137,world\n+3138,world\n+3139,world\n+3140,world\n+3141,world\n+3142,world\n+3143,world\n+3144,world\n+3145,world\n+3146,world\n+3147,world\n+3148,world\n+3149,world\n+3150,world\n+3151,world\n+3152,world\n+3153,world\n+3154,world\n+3155,world\n+3156,world\n+3157,world\n+3158,world\n+3159,world\n+3160,world\n+3161,world\n+3162,world\n+3163,world\n+3164,world\n+3165,world\n+3166,world\n+3167,world\n+3168,world\n+3169,world\n+3170,world\n+3171,world\n+3172,world\n+3173,world\n+3174,world\n+3175,world\n+3176,world\n+3177,world\n+3178,world\n+3179,world\n+3180,world\n+3181,world\n+3182,world\n+3183,world\n+3184,world\n+3185,world\n+3186,world\n+3187,world\n+3188,world\n+3189,world\n+3190,world\n+3191,world\n+3192,world\n+3193,world\n+3194,world\n+3195,world\n+3196,world\n+3197,world\n+3198,world\n+3199,world\n+3200,world\n+3201,world\n+3202,world\n+3203,world\n+3204,world\n+3205,world\n+3206,world\n+3207,world\n+3208,world\n+3209,world\n+3210,world\n+3211,world\n+3212,world\n+3213,world\n+3214,world\n+3215,world\n+3216,world\n+3217,world\n+3218,world\n+3219,world\n+3220,world\n+3221,world\n+3222,world\n+3223,world\n+3224,world\n+3225,world\n+3226,world\n+3227,world\n+3228,world\n+3229,world\n+3230,world\n+3231,world\n+3232,world\n+3233,world\n+3234,world\n+3235,world\n+3236,world\n+3237,world\n+3238,world\n+3239,world\n+3240,world\n+3241,world\n+3242,world\n+3243,world\n+3244,world\n+3245,world\n+3246,world\n+3247,world\n+3248,world\n+3249,world\n+3250,world\n+3251,world\n+3252,world\n+3253,world\n+3254,world\n+3255,world\n+3256,world\n+3257,world\n+3258,world\n+3259,world\n+3260,world\n+3261,world\n+3262,world\n+3263,world\n+3264,world\n+3265,world\n+3266,world\n+3267,world\n+3268,world\n+3269,world\n+3270,world\n+3271,world\n+3272,world\n+3273,world\n+3274,world\n+3275,world\n+3276,world\n+3277,world\n+3278,world\n+3279,world\n+3280,world\n+3281,world\n+3282,world\n+3283,world\n+3284,world\n+3285,world\n+3286,world\n+3287,world\n+3288,world\n+3289,world\n+3290,world\n+3291,world\n+3292,world\n+3293,world\n+3294,world\n+3295,world\n+3296,world\n+3297,world\n+3298,world\n+3299,world\n+3300,world\n+3301,world\n+3302,world\n+3303,world\n+3304,world\n+3305,world\n+3306,world\n+3307,world\n+3308,world\n+3309,world\n+3310,world\n+3311,world\n+3312,world\n+3313,world\n+3314,world\n+3315,world\n+3316,world\n+3317,world\n+3318,world\n+3319,world\n+3320,world\n+3321,world\n+3322,world\n+3323,world\n+3324,world\n+3325,world\n+3326,world\n+3327,world\n+3328,world\n+3329,world\n+3330,world\n+3331,world\n+3332,world\n+3333,world\n+3334,world\n+3335,world\n+3336,world\n+3337,world\n+3338,world\n+3339,world\n+3340,world\n+3341,world\n+3342,world\n+3343,world\n+3344,world\n+3345,world\n+3346,world\n+3347,world\n+3348,world\n+3349,world\n+3350,world\n+3351,world\n+3352,world\n+3353,world\n+3354,world\n+3355,world\n+3356,world\n+3357,world\n+3358,world\n+3359,world\n+3360,world\n+3361,world\n+3362,world\n+3363,world\n+3364,world\n+3365,world\n+3366,world\n+3367,world\n+3368,world\n+3369,world\n+3370,world\n+3371,world\n+3372,world\n+3373,world\n+3374,world\n+3375,world\n+3376,world\n+3377,world\n+3378,world\n+3379,world\n+3380,world\n+3381,world\n+3382,world\n+3383,world\n+3384,world\n+3385,world\n+3386,world\n+3387,world\n+3388,world\n+3389,world\n+3390,world\n+3391,world\n+3392,world\n+3393,world\n+3394,world\n+3395,world\n+3396,world\n+3397,world\n+3398,world\n+3399,world\n+3400,world\n+3401,world\n+3402,world\n+3403,world\n+3404,world\n+3405,world\n+3406,world\n+3407,world\n+3408,world\n+3409,world\n+3410,world\n+3411,world\n+3412,world\n+3413,world\n+3414,world\n+3415,world\n+3416,world\n+3417,world\n+3418,world\n+3419,world\n+3420,world\n+3421,world\n+3422,world\n+3423,world\n+3424,world\n+3425,world\n+3426,world\n+3427,world\n+3428,world\n+3429,world\n+3430,world\n+3431,world\n+3432,world\n+3433,world\n+3434,world\n+3435,world\n+3436,world\n+3437,world\n+3438,world\n+3439,world\n+3440,world\n+3441,world\n+3442,world\n+3443,world\n+3444,world\n+3445,world\n+3446,world\n+3447,world\n+3448,world\n+3449,world\n+3450,world\n+3451,world\n+3452,world\n+3453,world\n+3454,world\n+3455,world\n+3456,world\n+3457,world\n+3458,world\n+3459,world\n+3460,world\n+3461,world\n+3462,world\n+3463,world\n+3464,world\n+3465,world\n+3466,world\n+3467,world\n+3468,world\n+3469,world\n+3470,world\n+3471,world\n+3472,world\n+3473,world\n+3474,world\n+3475,world\n+3476,world\n+3477,world\n+3478,world\n+3479,world\n+3480,world\n+3481,world\n+3482,world\n+3483,world\n+3484,world\n+3485,world\n+3486,world\n+3487,world\n+3488,world\n+3489,world\n+3490,world\n+3491,world\n+3492,world\n+3493,world\n+3494,world\n+3495,world\n+3496,world\n+3497,world\n+3498,world\n+3499,world\n+3500,world\n+3501,world\n+3502,world\n+3503,world\n+3504,world\n+3505,world\n+3506,world\n+3507,world\n+3508,world\n+3509,world\n+3510,world\n+3511,world\n+3512,world\n+3513,world\n+3514,world\n+3515,world\n+3516,world\n+3517,world\n+3518,world\n+3519,world\n+3520,world\n+3521,world\n+3522,world\n+3523,world\n+3524,world\n+3525,world\n+3526,world\n+3527,world\n+3528,world\n+3529,world\n+3530,world\n+3531,world\n+3532,world\n+3533,world\n+3534,world\n+3535,world\n+3536,world\n+3537,world\n+3538,world\n+3539,world\n+3540,world\n+3541,world\n+3542,world\n+3543,world\n+3544,world\n+3545,world\n+3546,world\n+3547,world\n+3548,world\n+3549,world\n+3550,world\n+3551,world\n+3552,world\n+3553,world\n+3554,world\n+3555,world\n+3556,world\n+3557,world\n+3558,world\n+3559,world\n+3560,world\n+3561,world\n+3562,world\n+3563,world\n+3564,world\n+3565,world\n+3566,world\n+3567,world\n+3568,world\n+3569,world\n+3570,world\n+3571,world\n+3572,world\n+3573,world\n+3574,world\n+3575,world\n+3576,world\n+3577,world\n+3578,world\n+3579,world\n+3580,world\n+3581,world\n+3582,world\n+3583,world\n+3584,world\n+3585,world\n+3586,world\n+3587,world\n+3588,world\n+3589,world\n+3590,world\n+3591,world\n+3592,world\n+3593,world\n+3594,world\n+3595,world\n+3596,world\n+3597,world\n+3598,world\n+3599,world\n+3600,world\n+3601,world\n+3602,world\n+3603,world\n+3604,world\n+3605,world\n+3606,world\n+3607,world\n+3608,world\n+3609,world\n+3610,world\n+3611,world\n+3612,world\n+3613,world\n+3614,world\n+3615,world\n+3616,world\n+3617,world\n+3618,world\n+3619,world\n+3620,world\n+3621,world\n+3622,world\n+3623,world\n+3624,world\n+3625,world\n+3626,world\n+3627,world\n+3628,world\n+3629,world\n+3630,world\n+3631,world\n+3632,world\n+3633,world\n+3634,world\n+3635,world\n+3636,world\n+3637,world\n+3638,world\n+3639,world\n+3640,world\n+3641,world\n+3642,world\n+3643,world\n+3644,world\n+3645,world\n+3646,world\n+3647,world\n+3648,world\n+3649,world\n+3650,world\n+3651,world\n+3652,world\n+3653,world\n+3654,world\n+3655,world\n+3656,world\n+3657,world\n+3658,world\n+3659,world\n+3660,world\n+3661,world\n+3662,world\n+3663,world\n+3664,world\n+3665,world\n+3666,world\n+3667,world\n+3668,world\n+3669,world\n+3670,world\n+3671,world\n+3672,world\n+3673,world\n+3674,world\n+3675,world\n+3676,world\n+3677,world\n+3678,world\n+3679,world\n+3680,world\n+3681,world\n+3682,world\n+3683,world\n+3684,world\n+3685,world\n+3686,world\n+3687,world\n+3688,world\n+3689,world\n+3690,world\n+3691,world\n+3692,world\n+3693,world\n+3694,world\n+3695,world\n+3696,world\n+3697,world\n+3698,world\n+3699,world\n+3700,world\n+3701,world\n+3702,world\n+3703,world\n+3704,world\n+3705,world\n+3706,world\n+3707,world\n+3708,world\n+3709,world\n+3710,world\n+3711,world\n+3712,world\n+3713,world\n+3714,world\n+3715,world\n+3716,world\n+3717,world\n+3718,world\n+3719,world\n+3720,world\n+3721,world\n+3722,world\n+3723,world\n+3724,world\n+3725,world\n+3726,world\n+3727,world\n+3728,world\n+3729,world\n+3730,world\n+3731,world\n+3732,world\n+3733,world\n+3734,world\n+3735,world\n+3736,world\n+3737,world\n+3738,world\n+3739,world\n+3740,world\n+3741,world\n+3742,world\n+3743,world\n+3744,world\n+3745,world\n+3746,world\n+3747,world\n+3748,world\n+3749,world\n+3750,world\n+3751,world\n+3752,world\n+3753,world\n+3754,world\n+3755,world\n+3756,world\n+3757,world\n+3758,world\n+3759,world\n+3760,world\n+3761,world\n+3762,world\n+3763,world\n+3764,world\n+3765,world\n+3766,world\n+3767,world\n+3768,world\n+3769,world\n+3770,world\n+3771,world\n+3772,world\n+3773,world\n+3774,world\n+3775,world\n+3776,world\n+3777,world\n+3778,world\n+3779,world\n+3780,world\n+3781,world\n+3782,world\n+3783,world\n+3784,world\n+3785,world\n+3786,world\n+3787,world\n+3788,world\n+3789,world\n+3790,world\n+3791,world\n+3792,world\n+3793,world\n+3794,world\n+3795,world\n+3796,world\n+3797,world\n+3798,world\n+3799,world\n+3800,world\n+3801,world\n+3802,world\n+3803,world\n+3804,world\n+3805,world\n+3806,world\n+3807,world\n+3808,world\n+3809,world\n+3810,world\n+3811,world\n+3812,world\n+3813,world\n+3814,world\n+3815,world\n+3816,world\n+3817,world\n+3818,world\n+3819,world\n+3820,world\n+3821,world\n+3822,world\n+3823,world\n+3824,world\n+3825,world\n+3826,world\n+3827,world\n+3828,world\n+3829,world\n+3830,world\n+3831,world\n+3832,world\n+3833,world\n+3834,world\n+3835,world\n+3836,world\n+3837,world\n+3838,world\n+3839,world\n+3840,world\n+3841,world\n+3842,world\n+3843,world\n+3844,world\n+3845,world\n+3846,world\n+3847,world\n+3848,world\n+3849,world\n+3850,world\n+3851,world\n+3852,world\n+3853,world\n+3854,world\n+3855,world\n+3856,world\n+3857,world\n+3858,world\n+3859,world\n+3860,world\n+3861,world\n+3862,world\n+3863,world\n+3864,world\n+3865,world\n+3866,world\n+3867,world\n+3868,world\n+3869,world\n+3870,world\n+3871,world\n+3872,world\n+3873,world\n+3874,world\n+3875,world\n+3876,world\n+3877,world\n+3878,world\n+3879,world\n+3880,world\n+3881,world\n+3882,world\n+3883,world\n+3884,world\n+3885,world\n+3886,world\n+3887,world\n+3888,world\n+3889,world\n+3890,world\n+3891,world\n+3892,world\n+3893,world\n+3894,world\n+3895,world\n+3896,world\n+3897,world\n+3898,world\n+3899,world\n+3900,world\n+3901,world\n+3902,world\n+3903,world\n+3904,world\n+3905,world\n+3906,world\n+3907,world\n+3908,world\n+3909,world\n+3910,world\n+3911,world\n+3912,world\n+3913,world\n+3914,world\n+3915,world\n+3916,world\n+3917,world\n+3918,world\n+3919,world\n+3920,world\n+3921,world\n+3922,world\n+3923,world\n+3924,world\n+3925,world\n+3926,world\n+3927,world\n+3928,world\n+3929,world\n+3930,world\n+3931,world\n+3932,world\n+3933,world\n+3934,world\n+3935,world\n+3936,world\n+3937,world\n+3938,world\n+3939,world\n+3940,world\n+3941,world\n+3942,world\n+3943,world\n+3944,world\n+3945,world\n+3946,world\n+3947,world\n+3948,world\n+3949,world\n+3950,world\n+3951,world\n+3952,world\n+3953,world\n+3954,world\n+3955,world\n+3956,world\n+3957,world\n+3958,world\n+3959,world\n+3960,world\n+3961,world\n+3962,world\n+3963,world\n+3964,world\n+3965,world\n+3966,world\n+3967,world\n+3968,world\n+3969,world\n+3970,world\n+3971,world\n+3972,world\n+3973,world\n+3974,world\n+3975,world\n+3976,world\n+3977,world\n+3978,world\n+3979,world\n+3980,world\n+3981,world\n+3982,world\n+3983,world\n+3984,world\n+3985,world\n+3986,world\n+3987,world\n+3988,world\n+3989,world\n+3990,world\n+3991,world\n+3992,world\n+3993,world\n+3994,world\n+3995,world\n+3996,world\n+3997,world\n+3998,world\n+3999,world\n+4000,world\n+4001,world\n+4002,world\n+4003,world\n+4004,world\n+4005,world\n+4006,world\n+4007,world\n+4008,world\n+4009,world\n+4010,world\n+4011,world\n+4012,world\n+4013,world\n+4014,world\n+4015,world\n+4016,world\n+4017,world\n+4018,world\n+4019,world\n+4020,world\n+4021,world\n+4022,world\n+4023,world\n+4024,world\n+4025,world\n+4026,world\n+4027,world\n+4028,world\n+4029,world\n+4030,world\n+4031,world\n+4032,world\n+4033,world\n+4034,world\n+4035,world\n+4036,world\n+4037,world\n+4038,world\n+4039,world\n+4040,world\n+4041,world\n+4042,world\n+4043,world\n+4044,world\n+4045,world\n+4046,world\n+4047,world\n+4048,world\n+4049,world\n+4050,world\n+4051,world\n+4052,world\n+4053,world\n+4054,world\n+4055,world\n+4056,world\n+4057,world\n+4058,world\n+4059,world\n+4060,world\n+4061,world\n+4062,world\n+4063,world\n+4064,world\n+4065,world\n+4066,world\n+4067,world\n+4068,world\n+4069,world\n+4070,world\n+4071,world\n+4072,world\n+4073,world\n+4074,world\n+4075,world\n+4076,world\n+4077,world\n+4078,world\n+4079,world\n+4080,world\n+4081,world\n+4082,world\n+4083,world\n+4084,world\n+4085,world\n+4086,world\n+4087,world\n+4088,world\n+4089,world\n+4090,world\n+4091,world\n+4092,world\n+4093,world\n+4094,world\n+4095,world\n+4096,world\n+4097,world\n+4098,world\n+4099,world\n+4100,world\n+4101,world\n+4102,world\n+4103,world\n+4104,world\n+4105,world\n+4106,world\n+4107,world\n+4108,world\n+4109,world\n+4110,world\n+4111,world\n+4112,world\n+4113,world\n+4114,world\n+4115,world\n+4116,world\n+4117,world\n+4118,world\n+4119,world\n+4120,world\n+4121,world\n+4122,world\n+4123,world\n+4124,world\n+4125,world\n+4126,world\n+4127,world\n+4128,world\n+4129,world\n+4130,world\n+4131,world\n+4132,world\n+4133,world\n+4134,world\n+4135,world\n+4136,world\n+4137,world\n+4138,world\n+4139,world\n+4140,world\n+4141,world\n+4142,world\n+4143,world\n+4144,world\n+4145,world\n+4146,world\n+4147,world\n+4148,world\n+4149,world\n+4150,world\n+4151,world\n+4152,world\n+4153,world\n+4154,world\n+4155,world\n+4156,world\n+4157,world\n+4158,world\n+4159,world\n+4160,world\n+4161,world\n+4162,world\n+4163,world\n+4164,world\n+4165,world\n+4166,world\n+4167,world\n+4168,world\n+4169,world\n+4170,world\n+4171,world\n+4172,world\n+4173,world\n+4174,world\n+4175,world\n+4176,world\n+4177,world\n+4178,world\n+4179,world\n+4180,world\n+4181,world\n+4182,world\n+4183,world\n+4184,world\n+4185,world\n+4186,world\n+4187,world\n+4188,world\n+4189,world\n+4190,world\n+4191,world\n+4192,world\n+4193,world\n+4194,world\n+4195,world\n+4196,world\n+4197,world\n+4198,world\n+4199,world\n+4200,world\n+4201,world\n+4202,world\n+4203,world\n+4204,world\n+4205,world\n+4206,world\n+4207,world\n+4208,world\n+4209,world\n+4210,world\n+4211,world\n+4212,world\n+4213,world\n+4214,world\n+4215,world\n+4216,world\n+4217,world\n+4218,world\n+4219,world\n+4220,world\n+4221,world\n+4222,world\n+4223,world\n+4224,world\n+4225,world\n+4226,world\n+4227,world\n+4228,world\n+4229,world\n+4230,world\n+4231,world\n+4232,world\n+4233,world\n+4234,world\n+4235,world\n+4236,world\n+4237,world\n+4238,world\n+4239,world\n+4240,world\n+4241,world\n+4242,world\n+4243,world\n+4244,world\n+4245,world\n+4246,world\n+4247,world\n+4248,world\n+4249,world\n+4250,world\n+4251,world\n+4252,world\n+4253,world\n+4254,world\n+4255,world\n+4256,world\n+4257,world\n+4258,world\n+4259,world\n+4260,world\n+4261,world\n+4262,world\n+4263,world\n+4264,world\n+4265,world\n+4266,world\n+4267,world\n+4268,world\n+4269,world\n+4270,world\n+4271,world\n+4272,world\n+4273,world\n+4274,world\n+4275,world\n+4276,world\n+4277,world\n+4278,world\n+4279,world\n+4280,world\n+4281,world\n+4282,world\n+4283,world\n+4284,world\n+4285,world\n+4286,world\n+4287,world\n+4288,world\n+4289,world\n+4290,world\n+4291,world\n+4292,world\n+4293,world\n+4294,world\n+4295,world\n+4296,world\n+4297,world\n+4298,world\n+4299,world\n+4300,world\n+4301,world\n+4302,world\n+4303,world\n+4304,world\n+4305,world\n+4306,world\n+4307,world\n+4308,world\n+4309,world\n+4310,world\n+4311,world\n+4312,world\n+4313,world\n+4314,world\n+4315,world\n+4316,world\n+4317,world\n+4318,world\n+4319,world\n+4320,world\n+4321,world\n+4322,world\n+4323,world\n+4324,world\n+4325,world\n+4326,world\n+4327,world\n+4328,world\n+4329,world\n+4330,world\n+4331,world\n+4332,world\n+4333,world\n+4334,world\n+4335,world\n+4336,world\n+4337,world\n+4338,world\n+4339,world\n+4340,world\n+4341,world\n+4342,world\n+4343,world\n+4344,world\n+4345,world\n+4346,world\n+4347,world\n+4348,world\n+4349,world\n+4350,world\n+4351,world\n+4352,world\n+4353,world\n+4354,world\n+4355,world\n+4356,world\n+4357,world\n+4358,world\n+4359,world\n+4360,world\n+4361,world\n+4362,world\n+4363,world\n+4364,world\n+4365,world\n+4366,world\n+4367,world\n+4368,world\n+4369,world\n+4370,world\n+4371,world\n+4372,world\n+4373,world\n+4374,world\n+4375,world\n+4376,world\n+4377,world\n+4378,world\n+4379,world\n+4380,world\n+4381,world\n+4382,world\n+4383,world\n+4384,world\n+4385,world\n+4386,world\n+4387,world\n+4388,world\n+4389,world\n+4390,world\n+4391,world\n+4392,world\n+4393,world\n+4394,world\n+4395,world\n+4396,world\n+4397,world\n+4398,world\n+4399,world\n+4400,world\n+4401,world\n+4402,world\n+4403,world\n+4404,world\n+4405,world\n+4406,world\n+4407,world\n+4408,world\n+4409,world\n+4410,world\n+4411,world\n+4412,world\n+4413,world\n+4414,world\n+4415,world\n+4416,world\n+4417,world\n+4418,world\n+4419,world\n+4420,world\n+4421,world\n+4422,world\n+4423,world\n+4424,world\n+4425,world\n+4426,world\n+4427,world\n+4428,world\n+4429,world\n+4430,world\n+4431,world\n+4432,world\n+4433,world\n+4434,world\n+4435,world\n+4436,world\n+4437,world\n+4438,world\n+4439,world\n+4440,world\n+4441,world\n+4442,world\n+4443,world\n+4444,world\n+4445,world\n+4446,world\n+4447,world\n+4448,world\n+4449,world\n+4450,world\n+4451,world\n+4452,world\n+4453,world\n+4454,world\n+4455,world\n+4456,world\n+4457,world\n+4458,world\n+4459,world\n+4460,world\n+4461,world\n+4462,world\n+4463,world\n+4464,world\n+4465,world\n+4466,world\n+4467,world\n+4468,world\n+4469,world\n+4470,world\n+4471,world\n+4472,world\n+4473,world\n+4474,world\n+4475,world\n+4476,world\n+4477,world\n+4478,world\n+4479,world\n+4480,world\n+4481,world\n+4482,world\n+4483,world\n+4484,world\n+4485,world\n+4486,world\n+4487,world\n+4488,world\n+4489,world\n+4490,world\n+4491,world\n+4492,world\n+4493,world\n+4494,world\n+4495,world\n+4496,world\n+4497,world\n+4498,world\n+4499,world\n+4500,world\n+4501,world\n+4502,world\n+4503,world\n+4504,world\n+4505,world\n+4506,world\n+4507,world\n+4508,world\n+4509,world\n+4510,world\n+4511,world\n+4512,world\n+4513,world\n+4514,world\n+4515,world\n+4516,world\n+4517,world\n+4518,world\n+4519,world\n+4520,world\n+4521,world\n+4522,world\n+4523,world\n+4524,world\n+4525,world\n+4526,world\n+4527,world\n+4528,world\n+4529,world\n+4530,world\n+4531,world\n+4532,world\n+4533,world\n+4534,world\n+4535,world\n+4536,world\n+4537,world\n+4538,world\n+4539,world\n+4540,world\n+4541,world\n+4542,world\n+4543,world\n+4544,world\n+4545,world\n+4546,world\n+4547,world\n+4548,world\n+4549,world\n+4550,world\n+4551,world\n+4552,world\n+4553,world\n+4554,world\n+4555,world\n+4556,world\n+4557,world\n+4558,world\n+4559,world\n+4560,world\n+4561,world\n+4562,world\n+4563,world\n+4564,world\n+4565,world\n+4566,world\n+4567,world\n+4568,world\n+4569,world\n+4570,world\n+4571,world\n+4572,world\n+4573,world\n+4574,world\n+4575,world\n+4576,world\n+4577,world\n+4578,world\n+4579,world\n+4580,world\n+4581,world\n+4582,world\n+4583,world\n+4584,world\n+4585,world\n+4586,world\n+4587,world\n+4588,world\n+4589,world\n+4590,world\n+4591,world\n+4592,world\n+4593,world\n+4594,world\n+4595,world\n+4596,world\n+4597,world\n+4598,world\n+4599,world\n+4600,world\n+4601,world\n+4602,world\n+4603,world\n+4604,world\n+4605,world\n+4606,world\n+4607,world\n+4608,world\n+4609,world\n+4610,world\n+4611,world\n+4612,world\n+4613,world\n+4614,world\n+4615,world\n+4616,world\n+4617,world\n+4618,world\n+4619,world\n+4620,world\n+4621,world\n+4622,world\n+4623,world\n+4624,world\n+4625,world\n+4626,world\n+4627,world\n+4628,world\n+4629,world\n+4630,world\n+4631,world\n+4632,world\n+4633,world\n+4634,world\n+4635,world\n+4636,world\n+4637,world\n+4638,world\n+4639,world\n+4640,world\n+4641,world\n+4642,world\n+4643,world\n+4644,world\n+4645,world\n+4646,world\n+4647,world\n+4648,world\n+4649,world\n+4650,world\n+4651,world\n+4652,world\n+4653,world\n+4654,world\n+4655,world\n+4656,world\n+4657,world\n+4658,world\n+4659,world\n+4660,world\n+4661,world\n+4662,world\n+4663,world\n+4664,world\n+4665,world\n+4666,world\n+4667,world\n+4668,world\n+4669,world\n+4670,world\n+4671,world\n+4672,world\n+4673,world\n+4674,world\n+4675,world\n+4676,world\n+4677,world\n+4678,world\n+4679,world\n+4680,world\n+4681,world\n+4682,world\n+4683,world\n+4684,world\n+4685,world\n+4686,world\n+4687,world\n+4688,world\n+4689,world\n+4690,world\n+4691,world\n+4692,world\n+4693,world\n+4694,world\n+4695,world\n+4696,world\n+4697,world\n+4698,world\n+4699,world\n+4700,world\n+4701,world\n+4702,world\n+4703,world\n+4704,world\n+4705,world\n+4706,world\n+4707,world\n+4708,world\n+4709,world\n+4710,world\n+4711,world\n+4712,world\n+4713,world\n+4714,world\n+4715,world\n+4716,world\n+4717,world\n+4718,world\n+4719,world\n+4720,world\n+4721,world\n+4722,world\n+4723,world\n+4724,world\n+4725,world\n+4726,world\n+4727,world\n+4728,world\n+4729,world\n+4730,world\n+4731,world\n+4732,world\n+4733,world\n+4734,world\n+4735,world\n+4736,world\n+4737,world\n+4738,world\n+4739,world\n+4740,world\n+4741,world\n+4742,world\n+4743,world\n+4744,world\n+4745,world\n+4746,world\n+4747,world\n+4748,world\n+4749,world\n+4750,world\n+4751,world\n+4752,world\n+4753,world\n+4754,world\n+4755,world\n+4756,world\n+4757,world\n+4758,world\n+4759,world\n+4760,world\n+4761,world\n+4762,world\n+4763,world\n+4764,world\n+4765,world\n+4766,world\n+4767,world\n+4768,world\n+4769,world\n+4770,world\n+4771,world\n+4772,world\n+4773,world\n+4774,world\n+4775,world\n+4776,world\n+4777,world\n+4778,world\n+4779,world\n+4780,world\n+4781,world\n+4782,world\n+4783,world\n+4784,world\n+4785,world\n+4786,world\n+4787,world\n+4788,world\n+4789,world\n+4790,world\n+4791,world\n+4792,world\n+4793,world\n+4794,world\n+4795,world\n+4796,world\n+4797,world\n+4798,world\n+4799,world\n+4800,world\n+4801,world\n+4802,world\n+4803,world\n+4804,world\n+4805,world\n+4806,world\n+4807,world\n+4808,world\n+4809,world\n+4810,world\n+4811,world\n+4812,world\n+4813,world\n+4814,world\n+4815,world\n+4816,world\n+4817,world\n+4818,world\n+4819,world\n+4820,world\n+4821,world\n+4822,world\n+4823,world\n+4824,world\n+4825,world\n+4826,world\n+4827,world\n+4828,world\n+4829,world\n+4830,world\n+4831,world\n+4832,world\n+4833,world\n+4834,world\n+4835,world\n+4836,world\n+4837,world\n+4838,world\n+4839,world\n+4840,world\n+4841,world\n+4842,world\n+4843,world\n+4844,world\n+4845,world\n+4846,world\n+4847,world\n+4848,world\n+4849,world\n+4850,world\n+4851,world\n+4852,world\n+4853,world\n+4854,world\n+4855,world\n+4856,world\n+4857,world\n+4858,world\n+4859,world\n+4860,world\n+4861,world\n+4862,world\n+4863,world\n+4864,world\n+4865,world\n+4866,world\n+4867,world\n+4868,world\n+4869,world\n+4870,world\n+4871,world\n+4872,world\n+4873,world\n+4874,world\n+4875,world\n+4876,world\n+4877,world\n+4878,world\n+4879,world\n+4880,world\n+4881,world\n+4882,world\n+4883,world\n+4884,world\n+4885,world\n+4886,world\n+4887,world\n+4888,world\n+4889,world\n+4890,world\n+4891,world\n+4892,world\n+4893,world\n+4894,world\n+4895,world\n+4896,world\n+4897,world\n+4898,world\n+4899,world\n+4900,world\n+4901,world\n+4902,world\n+4903,world\n+4904,world\n+4905,world\n+4906,world\n+4907,world\n+4908,world\n+4909,world\n+4910,world\n+4911,world\n+4912,world\n+4913,world\n+4914,world\n+4915,world\n+4916,world\n+4917,world\n+4918,world\n+4919,world\n+4920,world\n+4921,world\n+4922,world\n+4923,world\n+4924,world\n+4925,world\n+4926,world\n+4927,world\n+4928,world\n+4929,world\n+4930,world\n+4931,world\n+4932,world\n+4933,world\n+4934,world\n+4935,world\n+4936,world\n+4937,world\n+4938,world\n+4939,world\n+4940,world\n+4941,world\n+4942,world\n+4943,world\n+4944,world\n+4945,world\n+4946,world\n+4947,world\n+4948,world\n+4949,world\n+4950,world\n+4951,world\n+4952,world\n+4953,world\n+4954,world\n+4955,world\n+4956,world\n+4957,world\n+4958,world\n+4959,world\n+4960,world\n+4961,world\n+4962,world\n+4963,world\n+4964,world\n+4965,world\n+4966,world\n+4967,world\n+4968,world\n+4969,world\n+4970,world\n+4971,world\n+4972,world\n+4973,world\n+4974,world\n+4975,world\n+4976,world\n+4977,world\n+4978,world\n+4979,world\n+4980,world\n+4981,world\n+4982,world\n+4983,world\n+4984,world\n+4985,world\n+4986,world\n+4987,world\n+4988,world\n+4989,world\n+4990,world\n+4991,world\n+4992,world\n+4993,world\n+4994,world\n+4995,world\n+4996,world\n+4997,world\n+4998,world\n+4999,world\n+5000,world\n+5001,world\n+5002,world\n+5003,world\n+5004,world\n+5005,world\n+5006,world\n+5007,world\n+5008,world\n+5009,world\n+5010,world\n+5011,world\n+5012,world\n+5013,world\n+5014,world\n+5015,world\n+5016,world\n+5017,world\n+5018,world\n+5019,world\n+5020,world\n+5021,world\n+5022,world\n+5023,world\n+5024,world\n+5025,world\n+5026,world\n+5027,world\n+5028,world\n+5029,world\n+5030,world\n+5031,world\n+5032,world\n+5033,world\n+5034,world\n+5035,world\n+5036,world\n+5037,world\n+5038,world\n+5039,world\n+5040,world\n+5041,world\n+5042,world\n+5043,world\n+5044,world\n+5045,world\n+5046,world\n+5047,world\n+5048,world\n+5049,world\n+5050,world\n+5051,world\n+5052,world\n+5053,world\n+5054,world\n+5055,world\n+5056,world\n+5057,world\n+5058,world\n+5059,world\n+5060,world\n+5061,world\n+5062,world\n+5063,world\n+5064,world\n+5065,world\n+5066,world\n+5067,world\n+5068,world\n+5069,world\n+5070,world\n+5071,world\n+5072,world\n+5073,world\n+5074,world\n+5075,world\n+5076,world\n+5077,world\n+5078,world\n+5079,world\n+5080,world\n+5081,world\n+5082,world\n+5083,world\n+5084,world\n+5085,world\n+5086,world\n+5087,world\n+5088,world\n+5089,world\n+5090,world\n+5091,world\n+5092,world\n+5093,world\n+5094,world\n+5095,world\n+5096,world\n+5097,world\n+5098,world\n+5099,world\n+5100,world\n+5101,world\n+5102,world\n+5103,world\n+5104,world\n+5105,world\n+5106,world\n+5107,world\n+5108,world\n+5109,world\n+5110,world\n+5111,world\n+5112,world\n+5113,world\n+5114,world\n+5115,world\n+5116,world\n+5117,world\n+5118,world\n+5119,world\n+5120,world\n+5121,world\n+5122,world\n+5123,world\n+5124,world\n+5125,world\n+5126,world\n+5127,world\n+5128,world\n+5129,world\n+5130,world\n+5131,world\n+5132,world\n+5133,world\n+5134,world\n+5135,world\n+5136,world\n+5137,world\n+5138,world\n+5139,world\n+5140,world\n+5141,world\n+5142,world\n+5143,world\n+5144,world\n+5145,world\n+5146,world\n+5147,world\n+5148,world\n+5149,world\n+5150,world\n+5151,world\n+5152,world\n+5153,world\n+5154,world\n+5155,world\n+5156,world\n+5157,world\n+5158,world\n+5159,world\n+5160,world\n+5161,world\n+5162,world\n+5163,world\n+5164,world\n+5165,world\n+5166,world\n+5167,world\n+5168,world\n+5169,world\n+5170,world\n+5171,world\n+5172,world\n+5173,world\n+5174,world\n+5175,world\n+5176,world\n+5177,world\n+5178,world\n+5179,world\n+5180,world\n+5181,world\n+5182,world\n+5183,world\n+5184,world\n+5185,world\n+5186,world\n+5187,world\n+5188,world\n+5189,world\n+5190,world\n+5191,world\n+5192,world\n+5193,world\n+5194,world\n+5195,world\n+5196,world\n+5197,world\n+5198,world\n+5199,world\n+5200,world\n+5201,world\n+5202,world\n+5203,world\n+5204,world\n+5205,world\n+5206,world\n+5207,world\n+5208,world\n+5209,world\n+5210,world\n+5211,world\n+5212,world\n+5213,world\n+5214,world\n+5215,world\n+5216,world\n+5217,world\n+5218,world\n+5219,world\n+5220,world\n+5221,world\n+5222,world\n+5223,world\n+5224,world\n+5225,world\n+5226,world\n+5227,world\n+5228,world\n+5229,world\n+5230,world\n+5231,world\n+5232,world\n+5233,world\n+5234,world\n+5235,world\n+5236,world\n+5237,world\n+5238,world\n+5239,world\n+5240,world\n+5241,world\n+5242,world\n+5243,world\n+5244,world\n+5245,world\n+5246,world\n+5247,world\n+5248,world\n+5249,world\n+5250,world\n+5251,world\n+5252,world\n+5253,world\n+5254,world\n+5255,world\n+5256,world\n+5257,world\n+5258,world\n+5259,world\n+5260,world\n+5261,world\n+5262,world\n+5263,world\n+5264,world\n+5265,world\n+5266,world\n+5267,world\n+5268,world\n+5269,world\n+5270,world\n+5271,world\n+5272,world\n+5273,world\n+5274,world\n+5275,world\n+5276,world\n+5277,world\n+5278,world\n+5279,world\n+5280,world\n+5281,world\n+5282,world\n+5283,world\n+5284,world\n+5285,world\n+5286,world\n+5287,world\n+5288,world\n+5289,world\n+5290,world\n+5291,world\n+5292,world\n+5293,world\n+5294,world\n+5295,world\n+5296,world\n+5297,world\n+5298,world\n+5299,world\n+5300,world\n+5301,world\n+5302,world\n+5303,world\n+5304,world\n+5305,world\n+5306,world\n+5307,world\n+5308,world\n+5309,world\n+5310,world\n+5311,world\n+5312,world\n+5313,world\n+5314,world\n+5315,world\n+5316,world\n+5317,world\n+5318,world\n+5319,world\n+5320,world\n+5321,world\n+5322,world\n+5323,world\n+5324,world\n+5325,world\n+5326,world\n+5327,world\n+5328,world\n+5329,world\n+5330,world\n+5331,world\n+5332,world\n+5333,world\n+5334,world\n+5335,world\n+5336,world\n+5337,world\n+5338,world\n+5339,world\n+5340,world\n+5341,world\n+5342,world\n+5343,world\n+5344,world\n+5345,world\n+5346,world\n+5347,world\n+5348,world\n+5349,world\n+5350,world\n+5351,world\n+5352,world\n+5353,world\n+5354,world\n+5355,world\n+5356,world\n+5357,world\n+5358,world\n+5359,world\n+5360,world\n+5361,world\n+5362,world\n+5363,world\n+5364,world\n+5365,world\n+5366,world\n+5367,world\n+5368,world\n+5369,world\n+5370,world\n+5371,world\n+5372,world\n+5373,world\n+5374,world\n+5375,world\n+5376,world\n+5377,world\n+5378,world\n+5379,world\n+5380,world\n+5381,world\n+5382,world\n+5383,world\n+5384,world\n+5385,world\n+5386,world\n+5387,world\n+5388,world\n+5389,world\n+5390,world\n+5391,world\n+5392,world\n+5393,world\n+5394,world\n+5395,world\n+5396,world\n+5397,world\n+5398,world\n+5399,world\n+5400,world\n+5401,world\n+5402,world\n+5403,world\n+5404,world\n+5405,world\n+5406,world\n+5407,world\n+5408,world\n+5409,world\n+5410,world\n+5411,world\n+5412,world\n+5413,world\n+5414,world\n+5415,world\n+5416,world\n+5417,world\n+5418,world\n+5419,world\n+5420,world\n+5421,world\n+5422,world\n+5423,world\n+5424,world\n+5425,world\n+5426,world\n+5427,world\n+5428,world\n+5429,world\n+5430,world\n+5431,world\n+5432,world\n+5433,world\n+5434,world\n+5435,world\n+5436,world\n+5437,world\n+5438,world\n+5439,world\n+5440,world\n+5441,world\n+5442,world\n+5443,world\n+5444,world\n+5445,world\n+5446,world\n+5447,world\n+5448,world\n+5449,world\n+5450,world\n+5451,world\n+5452,world\n+5453,world\n+5454,world\n+5455,world\n+5456,world\n+5457,world\n+5458,world\n+5459,world\n+5460,world\n+5461,world\n+5462,world\n+5463,world\n+5464,world\n+5465,world\n+5466,world\n+5467,world\n+5468,world\n+5469,world\n+5470,world\n+5471,world\n+5472,world\n+5473,world\n+5474,world\n+5475,world\n+5476,world\n+5477,world\n+5478,world\n+5479,world\n+5480,world\n+5481,world\n+5482,world\n+5483,world\n+5484,world\n+5485,world\n+5486,world\n+5487,world\n+5488,world\n+5489,world\n+5490,world\n+5491,world\n+5492,world\n+5493,world\n+5494,world\n+5495,world\n+5496,world\n+5497,world\n+5498,world\n+5499,world\n+5500,world\n+5501,world\n+5502,world\n+5503,world\n+5504,world\n+5505,world\n+5506,world\n+5507,world\n+5508,world\n+5509,world\n+5510,world\n+5511,world\n+5512,world\n+5513,world\n+5514,world\n+5515,world\n+5516,world\n+5517,world\n+5518,world\n+5519,world\n+5520,world\n+5521,world\n+5522,world\n+5523,world\n+5524,world\n+5525,world\n+5526,world\n+5527,world\n+5528,world\n+5529,world\n+5530,world\n+5531,world\n+5532,world\n+5533,world\n+5534,world\n+5535,world\n+5536,world\n+5537,world\n+5538,world\n+5539,world\n+5540,world\n+5541,world\n+5542,world\n+5543,world\n+5544,world\n+5545,world\n+5546,world\n+5547,world\n+5548,world\n+5549,world\n+5550,world\n+5551,world\n+5552,world\n+5553,world\n+5554,world\n+5555,world\n+5556,world\n+5557,world\n+5558,world\n+5559,world\n+5560,world\n+5561,world\n+5562,world\n+5563,world\n+5564,world\n+5565,world\n+5566,world\n+5567,world\n+5568,world\n+5569,world\n+5570,world\n+5571,world\n+5572,world\n+5573,world\n+5574,world\n+5575,world\n+5576,world\n+5577,world\n+5578,world\n+5579,world\n+5580,world\n+5581,world\n+5582,world\n+5583,world\n+5584,world\n+5585,world\n+5586,world\n+5587,world\n+5588,world\n+5589,world\n+5590,world\n+5591,world\n+5592,world\n+5593,world\n+5594,world\n+5595,world\n+5596,world\n+5597,world\n+5598,world\n+5599,world\n+5600,world\n+5601,world\n+5602,world\n+5603,world\n+5604,world\n+5605,world\n+5606,world\n+5607,world\n+5608,world\n+5609,world\n+5610,world\n+5611,world\n+5612,world\n+5613,world\n+5614,world\n+5615,world\n+5616,world\n+5617,world\n+5618,world\n+5619,world\n+5620,world\n+5621,world\n+5622,world\n+5623,world\n+5624,world\n+5625,world\n+5626,world\n+5627,world\n+5628,world\n+5629,world\n+5630,world\n+5631,world\n+5632,world\n+5633,world\n+5634,world\n+5635,world\n+5636,world\n+5637,world\n+5638,world\n+5639,world\n+5640,world\n+5641,world\n+5642,world\n+5643,world\n+5644,world\n+5645,world\n+5646,world\n+5647,world\n+5648,world\n+5649,world\n+5650,world\n+5651,world\n+5652,world\n+5653,world\n+5654,world\n+5655,world\n+5656,world\n+5657,world\n+5658,world\n+5659,world\n+5660,world\n+5661,world\n+5662,world\n+5663,world\n+5664,world\n+5665,world\n+5666,world\n+5667,world\n+5668,world\n+5669,world\n+5670,world\n+5671,world\n+5672,world\n+5673,world\n+5674,world\n+5675,world\n+5676,world\n+5677,world\n+5678,world\n+5679,world\n+5680,world\n+5681,world\n+5682,world\n+5683,world\n+5684,world\n+5685,world\n+5686,world\n+5687,world\n+5688,world\n+5689,world\n+5690,world\n+5691,world\n+5692,world\n+5693,world\n+5694,world\n+5695,world\n+5696,world\n+5697,world\n+5698,world\n+5699,world\n+5700,world\n+5701,world\n+5702,world\n+5703,world\n+5704,world\n+5705,world\n+5706,world\n+5707,world\n+5708,world\n+5709,world\n+5710,world\n+5711,world\n+5712,world\n+5713,world\n+5714,world\n+5715,world\n+5716,world\n+5717,world\n+5718,world\n+5719,world\n+5720,world\n+5721,world\n+5722,world\n+5723,world\n+5724,world\n+5725,world\n+5726,world\n+5727,world\n+5728,world\n+5729,world\n+5730,world\n+5731,world\n+5732,world\n+5733,world\n+5734,world\n+5735,world\n+5736,world\n+5737,world\n+5738,world\n+5739,world\n+5740,world\n+5741,world\n+5742,world\n+5743,world\n+5744,world\n+5745,world\n+5746,world\n+5747,world\n+5748,world\n+5749,world\n+5750,world\n+5751,world\n+5752,world\n+5753,world\n+5754,world\n+5755,world\n+5756,world\n+5757,world\n+5758,world\n+5759,world\n+5760,world\n+5761,world\n+5762,world\n+5763,world\n+5764,world\n+5765,world\n+5766,world\n+5767,world\n+5768,world\n+5769,world\n+5770,world\n+5771,world\n+5772,world\n+5773,world\n+5774,world\n+5775,world\n+5776,world\n+5777,world\n+5778,world\n+5779,world\n+5780,world\n+5781,world\n+5782,world\n+5783,world\n+5784,world\n+5785,world\n+5786,world\n+5787,world\n+5788,world\n+5789,world\n+5790,world\n+5791,world\n+5792,world\n+5793,world\n+5794,world\n+5795,world\n+5796,world\n+5797,world\n+5798,world\n+5799,world\n+5800,world\n+5801,world\n+5802,world\n+5803,world\n+5804,world\n+5805,world\n+5806,world\n+5807,world\n+5808,world\n+5809,world\n+5810,world\n+5811,world\n+5812,world\n+5813,world\n+5814,world\n+5815,world\n+5816,world\n+5817,world\n+5818,world\n+5819,world\n+5820,world\n+5821,world\n+5822,world\n+5823,world\n+5824,world\n+5825,world\n+5826,world\n+5827,world\n+5828,world\n+5829,world\n+5830,world\n+5831,world\n+5832,world\n+5833,world\n+5834,world\n+5835,world\n+5836,world\n+5837,world\n+5838,world\n+5839,world\n+5840,world\n+5841,world\n+5842,world\n+5843,world\n+5844,world\n+5845,world\n+5846,world\n+5847,world\n+5848,world\n+5849,world\n+5850,world\n+5851,world\n+5852,world\n+5853,world\n+5854,world\n+5855,world\n+5856,world\n+5857,world\n+5858,world\n+5859,world\n+5860,world\n+5861,world\n+5862,world\n+5863,world\n+5864,world\n+5865,world\n+5866,world\n+5867,world\n+5868,world\n+5869,world\n+5870,world\n+5871,world\n+5872,world\n+5873,world\n+5874,world\n+5875,world\n+5876,world\n+5877,world\n+5878,world\n+5879,world\n+5880,world\n+5881,world\n+5882,world\n+5883,world\n+5884,world\n+5885,world\n+5886,world\n+5887,world\n+5888,world\n+5889,world\n+5890,world\n+5891,world\n+5892,world\n+5893,world\n+5894,world\n+5895,world\n+5896,world\n+5897,world\n+5898,world\n+5899,world\n+5900,world\n+5901,world\n+5902,world\n+5903,world\n+5904,world\n+5905,world\n+5906,world\n+5907,world\n+5908,world\n+5909,world\n+5910,world\n+5911,world\n+5912,world\n+5913,world\n+5914,world\n+5915,world\n+5916,world\n+5917,world\n+5918,world\n+5919,world\n+5920,world\n+5921,world\n+5922,world\n+5923,world\n+5924,world\n+5925,world\n+5926,world\n+5927,world\n+5928,world\n+5929,world\n+5930,world\n+5931,world\n+5932,world\n+5933,world\n+5934,world\n+5935,world\n+5936,world\n+5937,world\n+5938,world\n+5939,world\n+5940,world\n+5941,world\n+5942,world\n+5943,world\n+5944,world\n+5945,world\n+5946,world\n+5947,world\n+5948,world\n+5949,world\n+5950,world\n+5951,world\n+5952,world\n+5953,world\n+5954,world\n+5955,world\n+5956,world\n+5957,world\n+5958,world\n+5959,world\n+5960,world\n+5961,world\n+5962,world\n+5963,world\n+5964,world\n+5965,world\n+5966,world\n+5967,world\n+5968,world\n+5969,world\n+5970,world\n+5971,world\n+5972,world\n+5973,world\n+5974,world\n+5975,world\n+5976,world\n+5977,world\n+5978,world\n+5979,world\n+5980,world\n+5981,world\n+5982,world\n+5983,world\n+5984,world\n+5985,world\n+5986,world\n+5987,world\n+5988,world\n+5989,world\n+5990,world\n+5991,world\n+5992,world\n+5993,world\n+5994,world\n+5995,world\n+5996,world\n+5997,world\n+5998,world\n+5999,world\n+6000,world\n+6001,world\n+6002,world\n+6003,world\n+6004,world\n+6005,world\n+6006,world\n+6007,world\n+6008,world\n+6009,world\n+6010,world\n+6011,world\n+6012,world\n+6013,world\n+6014,world\n+6015,world\n+6016,world\n+6017,world\n+6018,world\n+6019,world\n+6020,world\n+6021,world\n+6022,world\n+6023,world\n+6024,world\n+6025,world\n+6026,world\n+6027,world\n+6028,world\n+6029,world\n+6030,world\n+6031,world\n+6032,world\n+6033,world\n+6034,world\n+6035,world\n+6036,world\n+6037,world\n+6038,world\n+6039,world\n+6040,world\n+6041,world\n+6042,world\n+6043,world\n+6044,world\n+6045,world\n+6046,world\n+6047,world\n+6048,world\n+6049,world\n+6050,world\n+6051,world\n+6052,world\n+6053,world\n+6054,world\n+6055,world\n+6056,world\n+6057,world\n+6058,world\n+6059,world\n+6060,world\n+6061,world\n+6062,world\n+6063,world\n+6064,world\n+6065,world\n+6066,world\n+6067,world\n+6068,world\n+6069,world\n+6070,world\n+6071,world\n+6072,world\n+6073,world\n+6074,world\n+6075,world\n+6076,world\n+6077,world\n+6078,world\n+6079,world\n+6080,world\n+6081,world\n+6082,world\n+6083,world\n+6084,world\n+6085,world\n+6086,world\n+6087,world\n+6088,world\n+6089,world\n+6090,world\n+6091,world\n+6092,world\n+6093,world\n+6094,world\n+6095,world\n+6096,world\n+6097,world\n+6098,world\n+6099,world\n+6100,world\n+6101,world\n+6102,world\n+6103,world\n+6104,world\n+6105,world\n+6106,world\n+6107,world\n+6108,world\n+6109,world\n+6110,world\n+6111,world\n+6112,world\n+6113,world\n+6114,world\n+6115,world\n+6116,world\n+6117,world\n+6118,world\n+6119,world\n+6120,world\n+6121,world\n+6122,world\n+6123,world\n+6124,world\n+6125,world\n+6126,world\n+6127,world\n+6128,world\n+6129,world\n+6130,world\n+6131,world\n+6132,world\n+6133,world\n+6134,world\n+6135,world\n+6136,world\n+6137,world\n+6138,world\n+6139,world\n+6140,world\n+6141,world\n+6142,world\n+6143,world\n+6144,world\n+6145,world\n+6146,world\n+6147,world\n+6148,world\n+6149,world\n+6150,world\n+6151,world\n+6152,world\n+6153,world\n+6154,world\n+6155,world\n+6156,world\n+6157,world\n+6158,world\n+6159,world\n+6160,world\n+6161,world\n+6162,world\n+6163,world\n+6164,world\n+6165,world\n+6166,world\n+6167,world\n+6168,world\n+6169,world\n+6170,world\n+6171,world\n+6172,world\n+6173,world\n+6174,world\n+6175,world\n+6176,world\n+6177,world\n+6178,world\n+6179,world\n+6180,world\n+6181,world\n+6182,world\n+6183,world\n+6184,world\n+6185,world\n+6186,world\n+6187,world\n+6188,world\n+6189,world\n+6190,world\n+6191,world\n+6192,world\n+6193,world\n+6194,world\n+6195,world\n+6196,world\n+6197,world\n+6198,world\n+6199,world\n+6200,world\n+6201,world\n+6202,world\n+6203,world\n+6204,world\n+6205,world\n+6206,world\n+6207,world\n+6208,world\n+6209,world\n+6210,world\n+6211,world\n+6212,world\n+6213,world\n+6214,world\n+6215,world\n+6216,world\n+6217,world\n+6218,world\n+6219,world\n+6220,world\n+6221,world\n+6222,world\n+6223,world\n+6224,world\n+6225,world\n+6226,world\n+6227,world\n+6228,world\n+6229,world\n+6230,world\n+6231,world\n+6232,world\n+6233,world\n+6234,world\n+6235,world\n+6236,world\n+6237,world\n+6238,world\n+6239,world\n+6240,world\n+6241,world\n+6242,world\n+6243,world\n+6244,world\n+6245,world\n+6246,world\n+6247,world\n+6248,world\n+6249,world\n+6250,world\n+6251,world\n+6252,world\n+6253,world\n+6254,world\n+6255,world\n+6256,world\n+6257,world\n+6258,world\n+6259,world\n+6260,world\n+6261,world\n+6262,world\n+6263,world\n+6264,world\n+6265,world\n+6266,world\n+6267,world\n+6268,world\n+6269,world\n+6270,world\n+6271,world\n+6272,world\n+6273,world\n+6274,world\n+6275,world\n+6276,world\n+6277,world\n+6278,world\n+6279,world\n+6280,world\n+6281,world\n+6282,world\n+6283,world\n+6284,world\n+6285,world\n+6286,world\n+6287,world\n+6288,world\n+6289,world\n+6290,world\n+6291,world\n+6292,world\n+6293,world\n+6294,world\n+6295,world\n+6296,world\n+6297,world\n+6298,world\n+6299,world\n+6300,world\n+6301,world\n+6302,world\n+6303,world\n+6304,world\n+6305,world\n+6306,world\n+6307,world\n+6308,world\n+6309,world\n+6310,world\n+6311,world\n+6312,world\n+6313,world\n+6314,world\n+6315,world\n+6316,world\n+6317,world\n+6318,world\n+6319,world\n+6320,world\n+6321,world\n+6322,world\n+6323,world\n+6324,world\n+6325,world\n+6326,world\n+6327,world\n+6328,world\n+6329,world\n+6330,world\n+6331,world\n+6332,world\n+6333,world\n+6334,world\n+6335,world\n+6336,world\n+6337,world\n+6338,world\n+6339,world\n+6340,world\n+6341,world\n+6342,world\n+6343,world\n+6344,world\n+6345,world\n+6346,world\n+6347,world\n+6348,world\n+6349,world\n+6350,world\n+6351,world\n+6352,world\n+6353,world\n+6354,world\n+6355,world\n+6356,world\n+6357,world\n+6358,world\n+6359,world\n+6360,world\n+6361,world\n+6362,world\n+6363,world\n+6364,world\n+6365,world\n+6366,world\n+6367,world\n+6368,world\n+6369,world\n+6370,world\n+6371,world\n+6372,world\n+6373,world\n+6374,world\n+6375,world\n+6376,world\n+6377,world\n+6378,world\n+6379,world\n+6380,world\n+6381,world\n+6382,world\n+6383,world\n+6384,world\n+6385,world\n+6386,world\n+6387,world\n+6388,world\n+6389,world\n+6390,world\n+6391,world\n+6392,world\n+6393,world\n+6394,world\n+6395,world\n+6396,world\n+6397,world\n+6398,world\n+6399,world\n+6400,world\n+6401,world\n+6402,world\n+6403,world\n+6404,world\n+6405,world\n+6406,world\n+6407,world\n+6408,world\n+6409,world\n+6410,world\n+6411,world\n+6412,world\n+6413,world\n+6414,world\n+6415,world\n+6416,world\n+6417,world\n+6418,world\n+6419,world\n+6420,world\n+6421,world\n+6422,world\n+6423,world\n+6424,world\n+6425,world\n+6426,world\n+6427,world\n+6428,world\n+6429,world\n+6430,world\n+6431,world\n+6432,world\n+6433,world\n+6434,world\n+6435,world\n+6436,world\n+6437,world\n+6438,world\n+6439,world\n+6440,world\n+6441,world\n+6442,world\n+6443,world\n+6444,world\n+6445,world\n+6446,world\n+6447,world\n+6448,world\n+6449,world\n+6450,world\n+6451,world\n+6452,world\n+6453,world\n+6454,world\n+6455,world\n+6456,world\n+6457,world\n+6458,world\n+6459,world\n+6460,world\n+6461,world\n+6462,world\n+6463,world\n+6464,world\n+6465,world\n+6466,world\n+6467,world\n+6468,world\n+6469,world\n+6470,world\n+6471,world\n+6472,world\n+6473,world\n+6474,world\n+6475,world\n+6476,world\n+6477,world\n+6478,world\n+6479,world\n+6480,world\n+6481,world\n+6482,world\n+6483,world\n+6484,world\n+6485,world\n+6486,world\n+6487,world\n+6488,world\n+6489,world\n+6490,world\n+6491,world\n+6492,world\n+6493,world\n+6494,world\n+6495,world\n+6496,world\n+6497,world\n+6498,world\n+6499,world\n+6500,world\n+6501,world\n+6502,world\n+6503,world\n+6504,world\n+6505,world\n+6506,world\n+6507,world\n+6508,world\n+6509,world\n+6510,world\n+6511,world\n+6512,world\n+6513,world\n+6514,world\n+6515,world\n+6516,world\n+6517,world\n+6518,world\n+6519,world\n+6520,world\n+6521,world\n+6522,world\n+6523,world\n+6524,world\n+6525,world\n+6526,world\n+6527,world\n+6528,world\n+6529,world\n+6530,world\n+6531,world\n+6532,world\n+6533,world\n+6534,world\n+6535,world\n+6536,world\n+6537,world\n+6538,world\n+6539,world\n+6540,world\n+6541,world\n+6542,world\n+6543,world\n+6544,world\n+6545,world\n+6546,world\n+6547,world\n+6548,world\n+6549,world\n+6550,world\n+6551,world\n+6552,world\n+6553,world\n+6554,world\n+6555,world\n+6556,world\n+6557,world\n+6558,world\n+6559,world\n+6560,world\n+6561,world\n+6562,world\n+6563,world\n+6564,world\n+6565,world\n+6566,world\n+6567,world\n+6568,world\n+6569,world\n+6570,world\n+6571,world\n+6572,world\n+6573,world\n+6574,world\n+6575,world\n+6576,world\n+6577,world\n+6578,world\n+6579,world\n+6580,world\n+6581,world\n+6582,world\n+6583,world\n+6584,world\n+6585,world\n+6586,world\n+6587,world\n+6588,world\n+6589,world\n+6590,world\n+6591,world\n+6592,world\n+6593,world\n+6594,world\n+6595,world\n+6596,world\n+6597,world\n+6598,world\n+6599,world\n+6600,world\n+6601,world\n+6602,world\n+6603,world\n+6604,world\n+6605,world\n+6606,world\n+6607,world\n+6608,world\n+6609,world\n+6610,world\n+6611,world\n+6612,world\n+6613,world\n+6614,world\n+6615,world\n+6616,world\n+6617,world\n+6618,world\n+6619,world\n+6620,world\n+6621,world\n+6622,world\n+6623,world\n+6624,world\n+6625,world\n+6626,world\n+6627,world\n+6628,world\n+6629,world\n+6630,world\n+6631,world\n+6632,world\n+6633,world\n+6634,world\n+6635,world\n+6636,world\n+6637,world\n+6638,world\n+6639,world\n+6640,world\n+6641,world\n+6642,world\n+6643,world\n+6644,world\n+6645,world\n+6646,world\n+6647,world\n+6648,world\n+6649,world\n+6650,world\n+6651,world\n+6652,world\n+6653,world\n+6654,world\n+6655,world\n+6656,world\n+6657,world\n+6658,world\n+6659,world\n+6660,world\n+6661,world\n+6662,world\n+6663,world\n+6664,world\n+6665,world\n+6666,world\n+6667,world\n+6668,world\n+6669,world\n+6670,world\n+6671,world\n+6672,world\n+6673,world\n+6674,world\n+6675,world\n+6676,world\n+6677,world\n+6678,world\n+6679,world\n+6680,world\n+6681,world\n+6682,world\n+6683,world\n+6684,world\n+6685,world\n+6686,world\n+6687,world\n+6688,world\n+6689,world\n+6690,world\n+6691,world\n+6692,world\n+6693,world\n+6694,world\n+6695,world\n+6696,world\n+6697,world\n+6698,world\n+6699,world\n+6700,world\n+6701,world\n+6702,world\n+6703,world\n+6704,world\n+6705,world\n+6706,world\n+6707,world\n+6708,world\n+6709,world\n+6710,world\n+6711,world\n+6712,world\n+6713,world\n+6714,world\n+6715,world\n+6716,world\n+6717,world\n+6718,world\n+6719,world\n+6720,world\n+6721,world\n+6722,world\n+6723,world\n+6724,world\n+6725,world\n+6726,world\n+6727,world\n+6728,world\n+6729,world\n+6730,world\n+6731,world\n+6732,world\n+6733,world\n+6734,world\n+6735,world\n+6736,world\n+6737,world\n+6738,world\n+6739,world\n+6740,world\n+6741,world\n+6742,world\n+6743,world\n+6744,world\n+6745,world\n+6746,world\n+6747,world\n+6748,world\n+6749,world\n+6750,world\n+6751,world\n+6752,world\n+6753,world\n+6754,world\n+6755,world\n+6756,world\n+6757,world\n+6758,world\n+6759,world\n+6760,world\n+6761,world\n+6762,world\n+6763,world\n+6764,world\n+6765,world\n+6766,world\n+6767,world\n+6768,world\n+6769,world\n+6770,world\n+6771,world\n+6772,world\n+6773,world\n+6774,world\n+6775,world\n+6776,world\n+6777,world\n+6778,world\n+6779,world\n+6780,world\n+6781,world\n+6782,world\n+6783,world\n+6784,world\n+6785,world\n+6786,world\n+6787,world\n+6788,world\n+6789,world\n+6790,world\n+6791,world\n+6792,world\n+6793,world\n+6794,world\n+6795,world\n+6796,world\n+6797,world\n+6798,world\n+6799,world\n+6800,world\n+6801,world\n+6802,world\n+6803,world\n+6804,world\n+6805,world\n+6806,world\n+6807,world\n+6808,world\n+6809,world\n+6810,world\n+6811,world\n+6812,world\n+6813,world\n+6814,world\n+6815,world\n+6816,world\n+6817,world\n+6818,world\n+6819,world\n+6820,world\n+6821,world\n+6822,world\n+6823,world\n+6824,world\n+6825,world\n+6826,world\n+6827,world\n+6828,world\n+6829,world\n+6830,world\n+6831,world\n+6832,world\n+6833,world\n+6834,world\n+6835,world\n+6836,world\n+6837,world\n+6838,world\n+6839,world\n+6840,world\n+6841,world\n+6842,world\n+6843,world\n+6844,world\n+6845,world\n+6846,world\n+6847,world\n+6848,world\n+6849,world\n+6850,world\n+6851,world\n+6852,world\n+6853,world\n+6854,world\n+6855,world\n+6856,world\n+6857,world\n+6858,world\n+6859,world\n+6860,world\n+6861,world\n+6862,world\n+6863,world\n+6864,world\n+6865,world\n+6866,world\n+6867,world\n+6868,world\n+6869,world\n+6870,world\n+6871,world\n+6872,world\n+6873,world\n+6874,world\n+6875,world\n+6876,world\n+6877,world\n+6878,world\n+6879,world\n+6880,world\n+6881,world\n+6882,world\n+6883,world\n+6884,world\n+6885,world\n+6886,world\n+6887,world\n+6888,world\n+6889,world\n+6890,world\n+6891,world\n+6892,world\n+6893,world\n+6894,world\n+6895,world\n+6896,world\n+6897,world\n+6898,world\n+6899,world\n+6900,world\n+6901,world\n+6902,world\n+6903,world\n+6904,world\n+6905,world\n+6906,world\n+6907,world\n+6908,world\n+6909,world\n+6910,world\n+6911,world\n+6912,world\n+6913,world\n+6914,world\n+6915,world\n+6916,world\n+6917,world\n+6918,world\n+6919,world\n+6920,world\n+6921,world\n+6922,world\n+6923,world\n+6924,world\n+6925,world\n+6926,world\n+6927,world\n+6928,world\n+6929,world\n+6930,world\n+6931,world\n+6932,world\n+6933,world\n+6934,world\n+6935,world\n+6936,world\n+6937,world\n+6938,world\n+6939,world\n+6940,world\n+6941,world\n+6942,world\n+6943,world\n+6944,world\n+6945,world\n+6946,world\n+6947,world\n+6948,world\n+6949,world\n+6950,world\n+6951,world\n+6952,world\n+6953,world\n+6954,world\n+6955,world\n+6956,world\n+6957,world\n+6958,world\n+6959,world\n+6960,world\n+6961,world\n+6962,world\n+6963,world\n+6964,world\n+6965,world\n+6966,world\n+6967,world\n+6968,world\n+6969,world\n+6970,world\n+6971,world\n+6972,world\n+6973,world\n+6974,world\n+6975,world\n+6976,world\n+6977,world\n+6978,world\n+6979,world\n+6980,world\n+6981,world\n+6982,world\n+6983,world\n+6984,world\n+6985,world\n+6986,world\n+6987,world\n+6988,world\n+6989,world\n+6990,world\n+6991,world\n+6992,world\n+6993,world\n+6994,world\n+6995,world\n+6996,world\n+6997,world\n+6998,world\n+6999,world\n+7000,world\n+7001,world\n+7002,world\n+7003,world\n+7004,world\n+7005,world\n+7006,world\n+7007,world\n+7008,world\n+7009,world\n+7010,world\n+7011,world\n+7012,world\n+7013,world\n+7014,world\n+7015,world\n+7016,world\n+7017,world\n+7018,world\n+7019,world\n+7020,world\n+7021,world\n+7022,world\n+7023,world\n+7024,world\n+7025,world\n+7026,world\n+7027,world\n+7028,world\n+7029,world\n+7030,world\n+7031,world\n+7032,world\n+7033,world\n+7034,world\n+7035,world\n+7036,world\n+7037,world\n+7038,world\n+7039,world\n+7040,world\n+7041,world\n+7042,world\n+7043,world\n+7044,world\n+7045,world\n+7046,world\n+7047,world\n+7048,world\n+7049,world\n+7050,world\n+7051,world\n+7052,world\n+7053,world\n+7054,world\n+7055,world\n+7056,world\n+7057,world\n+7058,world\n+7059,world\n+7060,world\n+7061,world\n+7062,world\n+7063,world\n+7064,world\n+7065,world\n+7066,world\n+7067,world\n+7068,world\n+7069,world\n+7070,world\n+7071,world\n+7072,world\n+7073,world\n+7074,world\n+7075,world\n+7076,world\n+7077,world\n+7078,world\n+7079,world\n+7080,world\n+7081,world\n+7082,world\n+7083,world\n+7084,world\n+7085,world\n+7086,world\n+7087,world\n+7088,world\n+7089,world\n+7090,world\n+7091,world\n+7092,world\n+7093,world\n+7094,world\n+7095,world\n+7096,world\n+7097,world\n+7098,world\n+7099,world\n+7100,world\n+7101,world\n+7102,world\n+7103,world\n+7104,world\n+7105,world\n+7106,world\n+7107,world\n+7108,world\n+7109,world\n+7110,world\n+7111,world\n+7112,world\n+7113,world\n+7114,world\n+7115,world\n+7116,world\n+7117,world\n+7118,world\n+7119,world\n+7120,world\n+7121,world\n+7122,world\n+7123,world\n+7124,world\n+7125,world\n+7126,world\n+7127,world\n+7128,world\n+7129,world\n+7130,world\n+7131,world\n+7132,world\n+7133,world\n+7134,world\n+7135,world\n+7136,world\n+7137,world\n+7138,world\n+7139,world\n+7140,world\n+7141,world\n+7142,world\n+7143,world\n+7144,world\n+7145,world\n+7146,world\n+7147,world\n+7148,world\n+7149,world\n+7150,world\n+7151,world\n+7152,world\n+7153,world\n+7154,world\n+7155,world\n+7156,world\n+7157,world\n+7158,world\n+7159,world\n+7160,world\n+7161,world\n+7162,world\n+7163,world\n+7164,world\n+7165,world\n+7166,world\n+7167,world\n+7168,world\n+7169,world\n+7170,world\n+7171,world\n+7172,world\n+7173,world\n+7174,world\n+7175,world\n+7176,world\n+7177,world\n+7178,world\n+7179,world\n+7180,world\n+7181,world\n+7182,world\n+7183,world\n+7184,world\n+7185,world\n+7186,world\n+7187,world\n+7188,world\n+7189,world\n+7190,world\n+7191,world\n+7192,world\n+7193,world\n+7194,world\n+7195,world\n+7196,world\n+7197,world\n+7198,world\n+7199,world\n+7200,world\n+7201,world\n+7202,world\n+7203,world\n+7204,world\n+7205,world\n+7206,world\n+7207,world\n+7208,world\n+7209,world\n+7210,world\n+7211,world\n+7212,world\n+7213,world\n+7214,world\n+7215,world\n+7216,world\n+7217,world\n+7218,world\n+7219,world\n+7220,world\n+7221,world\n+7222,world\n+7223,world\n+7224,world\n+7225,world\n+7226,world\n+7227,world\n+7228,world\n+7229,world\n+7230,world\n+7231,world\n+7232,world\n+7233,world\n+7234,world\n+7235,world\n+7236,world\n+7237,world\n+7238,world\n+7239,world\n+7240,world\n+7241,world\n+7242,world\n+7243,world\n+7244,world\n+7245,world\n+7246,world\n+7247,world\n+7248,world\n+7249,world\n+7250,world\n+7251,world\n+7252,world\n+7253,world\n+7254,world\n+7255,world\n+7256,world\n+7257,world\n+7258,world\n+7259,world\n+7260,world\n+7261,world\n+7262,world\n+7263,world\n+7264,world\n+7265,world\n+7266,world\n+7267,world\n+7268,world\n+7269,world\n+7270,world\n+7271,world\n+7272,world\n+7273,world\n+7274,world\n+7275,world\n+7276,world\n+7277,world\n+7278,world\n+7279,world\n+7280,world\n+7281,world\n+7282,world\n+7283,world\n+7284,world\n+7285,world\n+7286,world\n+7287,world\n+7288,world\n+7289,world\n+7290,world\n+7291,world\n+7292,world\n+7293,world\n+7294,world\n+7295,world\n+7296,world\n+7297,world\n+7298,world\n+7299,world\n+7300,world\n+7301,world\n+7302,world\n+7303,world\n+7304,world\n+7305,world\n+7306,world\n+7307,world\n+7308,world\n+7309,world\n+7310,world\n+7311,world\n+7312,world\n+7313,world\n+7314,world\n+7315,world\n+7316,world\n+7317,world\n+7318,world\n+7319,world\n+7320,world\n+7321,world\n+7322,world\n+7323,world\n+7324,world\n+7325,world\n+7326,world\n+7327,world\n+7328,world\n+7329,world\n+7330,world\n+7331,world\n+7332,world\n+7333,world\n+7334,world\n+7335,world\n+7336,world\n+7337,world\n+7338,world\n+7339,world\n+7340,world\n+7341,world\n+7342,world\n+7343,world\n+7344,world\n+7345,world\n+7346,world\n+7347,world\n+7348,world\n+7349,world\n+7350,world\n+7351,world\n+7352,world\n+7353,world\n+7354,world\n+7355,world\n+7356,world\n+7357,world\n+7358,world\n+7359,world\n+7360,world\n+7361,world\n+7362,world\n+7363,world\n+7364,world\n+7365,world\n+7366,world\n+7367,world\n+7368,world\n+7369,world\n+7370,world\n+7371,world\n+7372,world\n+7373,world\n+7374,world\n+7375,world\n+7376,world\n+7377,world\n+7378,world\n+7379,world\n+7380,world\n+7381,world\n+7382,world\n+7383,world\n+7384,world\n+7385,world\n+7386,world\n+7387,world\n+7388,world\n+7389,world\n+7390,world\n+7391,world\n+7392,world\n+7393,world\n+7394,world\n+7395,world\n+7396,world\n+7397,world\n+7398,world\n+7399,world\n+7400,world\n+7401,world\n+7402,world\n+7403,world\n+7404,world\n+7405,world\n+7406,world\n+7407,world\n+7408,world\n+7409,world\n+7410,world\n+7411,world\n+7412,world\n+7413,world\n+7414,world\n+7415,world\n+7416,world\n+7417,world\n+7418,world\n+7419,world\n+7420,world\n+7421,world\n+7422,world\n+7423,world\n+7424,world\n+7425,world\n+7426,world\n+7427,world\n+7428,world\n+7429,world\n+7430,world\n+7431,world\n+7432,world\n+7433,world\n+7434,world\n+7435,world\n+7436,world\n+7437,world\n+7438,world\n+7439,world\n+7440,world\n+7441,world\n+7442,world\n+7443,world\n+7444,world\n+7445,world\n+7446,world\n+7447,world\n+7448,world\n+7449,world\n+7450,world\n+7451,world\n+7452,world\n+7453,world\n+7454,world\n+7455,world\n+7456,world\n+7457,world\n+7458,world\n+7459,world\n+7460,world\n+7461,world\n+7462,world\n+7463,world\n+7464,world\n+7465,world\n+7466,world\n+7467,world\n+7468,world\n+7469,world\n+7470,world\n+7471,world\n+7472,world\n+7473,world\n+7474,world\n+7475,world\n+7476,world\n+7477,world\n+7478,world\n+7479,world\n+7480,world\n+7481,world\n+7482,world\n+7483,world\n+7484,world\n+7485,world\n+7486,world\n+7487,world\n+7488,world\n+7489,world\n+7490,world\n+7491,world\n+7492,world\n+7493,world\n+7494,world\n+7495,world\n+7496,world\n+7497,world\n+7498,world\n+7499,world\n+7500,world\n+7501,world\n+7502,world\n+7503,world\n+7504,world\n+7505,world\n+7506,world\n+7507,world\n+7508,world\n+7509,world\n+7510,world\n+7511,world\n+7512,world\n+7513,world\n+7514,world\n+7515,world\n+7516,world\n+7517,world\n+7518,world\n+7519,world\n+7520,world\n+7521,world\n+7522,world\n+7523,world\n+7524,world\n+7525,world\n+7526,world\n+7527,world\n+7528,world\n+7529,world\n+7530,world\n+7531,world\n+7532,world\n+7533,world\n+7534,world\n+7535,world\n+7536,world\n+7537,world\n+7538,world\n+7539,world\n+7540,world\n+7541,world\n+7542,world\n+7543,world\n+7544,world\n+7545,world\n+7546,world\n+7547,world\n+7548,world\n+7549,world\n+7550,world\n+7551,world\n+7552,world\n+7553,world\n+7554,world\n+7555,world\n+7556,world\n+7557,world\n+7558,world\n+7559,world\n+7560,world\n+7561,world\n+7562,world\n+7563,world\n+7564,world\n+7565,world\n+7566,world\n+7567,world\n+7568,world\n+7569,world\n+7570,world\n+7571,world\n+7572,world\n+7573,world\n+7574,world\n+7575,world\n+7576,world\n+7577,world\n+7578,world\n+7579,world\n+7580,world\n+7581,world\n+7582,world\n+7583,world\n+7584,world\n+7585,world\n+7586,world\n+7587,world\n+7588,world\n+7589,world\n+7590,world\n+7591,world\n+7592,world\n+7593,world\n+7594,world\n+7595,world\n+7596,world\n+7597,world\n+7598,world\n+7599,world\n+7600,world\n+7601,world\n+7602,world\n+7603,world\n+7604,world\n+7605,world\n+7606,world\n+7607,world\n+7608,world\n+7609,world\n+7610,world\n+7611,world\n+7612,world\n+7613,world\n+7614,world\n+7615,world\n+7616,world\n+7617,world\n+7618,world\n+7619,world\n+7620,world\n+7621,world\n+7622,world\n+7623,world\n+7624,world\n+7625,world\n+7626,world\n+7627,world\n+7628,world\n+7629,world\n+7630,world\n+7631,world\n+7632,world\n+7633,world\n+7634,world\n+7635,world\n+7636,world\n+7637,world\n+7638,world\n+7639,world\n+7640,world\n+7641,world\n+7642,world\n+7643,world\n+7644,world\n+7645,world\n+7646,world\n+7647,world\n+7648,world\n+7649,world\n+7650,world\n+7651,world\n+7652,world\n+7653,world\n+7654,world\n+7655,world\n+7656,world\n+7657,world\n+7658,world\n+7659,world\n+7660,world\n+7661,world\n+7662,world\n+7663,world\n+7664,world\n+7665,world\n+7666,world\n+7667,world\n+7668,world\n+7669,world\n+7670,world\n+7671,world\n+7672,world\n+7673,world\n+7674,world\n+7675,world\n+7676,world\n+7677,world\n+7678,world\n+7679,world\n+7680,world\n+7681,world\n+7682,world\n+7683,world\n+7684,world\n+7685,world\n+7686,world\n+7687,world\n+7688,world\n+7689,world\n+7690,world\n+7691,world\n+7692,world\n+7693,world\n+7694,world\n+7695,world\n+7696,world\n+7697,world\n+7698,world\n+7699,world\n+7700,world\n+7701,world\n+7702,world\n+7703,world\n+7704,world\n+7705,world\n+7706,world\n+7707,world\n+7708,world\n+7709,world\n+7710,world\n+7711,world\n+7712,world\n+7713,world\n+7714,world\n+7715,world\n+7716,world\n+7717,world\n+7718,world\n+7719,world\n+7720,world\n+7721,world\n+7722,world\n+7723,world\n+7724,world\n+7725,world\n+7726,world\n+7727,world\n+7728,world\n+7729,world\n+7730,world\n+7731,world\n+7732,world\n+7733,world\n+7734,world\n+7735,world\n+7736,world\n+7737,world\n+7738,world\n+7739,world\n+7740,world\n+7741,world\n+7742,world\n+7743,world\n+7744,world\n+7745,world\n+7746,world\n+7747,world\n+7748,world\n+7749,world\n+7750,world\n+7751,world\n+7752,world\n+7753,world\n+7754,world\n+7755,world\n+7756,world\n+7757,world\n+7758,world\n+7759,world\n+7760,world\n+7761,world\n+7762,world\n+7763,world\n+7764,world\n+7765,world\n+7766,world\n+7767,world\n+7768,world\n+7769,world\n+7770,world\n+7771,world\n+7772,world\n+7773,world\n+7774,world\n+7775,world\n+7776,world\n+7777,world\n+7778,world\n+7779,world\n+7780,world\n+7781,world\n+7782,world\n+7783,world\n+7784,world\n+7785,world\n+7786,world\n+7787,world\n+7788,world\n+7789,world\n+7790,world\n+7791,world\n+7792,world\n+7793,world\n+7794,world\n+7795,world\n+7796,world\n+7797,world\n+7798,world\n+7799,world\n+7800,world\n+7801,world\n+7802,world\n+7803,world\n+7804,world\n+7805,world\n+7806,world\n+7807,world\n+7808,world\n+7809,world\n+7810,world\n+7811,world\n+7812,world\n+7813,world\n+7814,world\n+7815,world\n+7816,world\n+7817,world\n+7818,world\n+7819,world\n+7820,world\n+7821,world\n+7822,world\n+7823,world\n+7824,world\n+7825,world\n+7826,world\n+7827,world\n+7828,world\n+7829,world\n+7830,world\n+7831,world\n+7832,world\n+7833,world\n+7834,world\n+7835,world\n+7836,world\n+7837,world\n+7838,world\n+7839,world\n+7840,world\n+7841,world\n+7842,world\n+7843,world\n+7844,world\n+7845,world\n+7846,world\n+7847,world\n+7848,world\n+7849,world\n+7850,world\n+7851,world\n+7852,world\n+7853,world\n+7854,world\n+7855,world\n+7856,world\n+7857,world\n+7858,world\n+7859,world\n+7860,world\n+7861,world\n+7862,world\n+7863,world\n+7864,world\n+7865,world\n+7866,world\n+7867,world\n+7868,world\n+7869,world\n+7870,world\n+7871,world\n+7872,world\n+7873,world\n+7874,world\n+7875,world\n+7876,world\n+7877,world\n+7878,world\n+7879,world\n+7880,world\n+7881,world\n+7882,world\n+7883,world\n+7884,world\n+7885,world\n+7886,world\n+7887,world\n+7888,world\n+7889,world\n+7890,world\n+7891,world\n+7892,world\n+7893,world\n+7894,world\n+7895,world\n+7896,world\n+7897,world\n+7898,world\n+7899,world\n+7900,world\n+7901,world\n+7902,world\n+7903,world\n+7904,world\n+7905,world\n+7906,world\n+7907,world\n+7908,world\n+7909,world\n+7910,world\n+7911,world\n+7912,world\n+7913,world\n+7914,world\n+7915,world\n+7916,world\n+7917,world\n+7918,world\n+7919,world\n+7920,world\n+7921,world\n+7922,world\n+7923,world\n+7924,world\n+7925,world\n+7926,world\n+7927,world\n+7928,world\n+7929,world\n+7930,world\n+7931,world\n+7932,world\n+7933,world\n+7934,world\n+7935,world\n+7936,world\n+7937,world\n+7938,world\n+7939,world\n+7940,world\n+7941,world\n+7942,world\n+7943,world\n+7944,world\n+7945,world\n+7946,world\n+7947,world\n+7948,world\n+7949,world\n+7950,world\n+7951,world\n+7952,world\n+7953,world\n+7954,world\n+7955,world\n+7956,world\n+7957,world\n+7958,world\n+7959,world\n+7960,world\n+7961,world\n+7962,world\n+7963,world\n+7964,world\n+7965,world\n+7966,world\n+7967,world\n+7968,world\n+7969,world\n+7970,world\n+7971,world\n+7972,world\n+7973,world\n+7974,world\n+7975,world\n+7976,world\n+7977,world\n+7978,world\n+7979,world\n+7980,world\n+7981,world\n+7982,world\n+7983,world\n+7984,world\n+7985,world\n+7986,world\n+7987,world\n+7988,world\n+7989,world\n+7990,world\n+7991,world\n+7992,world\n+7993,world\n+7994,world\n+7995,world\n+7996,world\n+7997,world\n+7998,world\n+7999,world\n+8000,world\n+8001,world\n+8002,world\n+8003,world\n+8004,world\n+8005,world\n+8006,world\n+8007,world\n+8008,world\n+8009,world\n+8010,world\n+8011,world\n+8012,world\n+8013,world\n+8014,world\n+8015,world\n+8016,world\n+8017,world\n+8018,world\n+8019,world\n+8020,world\n+8021,world\n+8022,world\n+8023,world\n+8024,world\n+8025,world\n+8026,world\n+8027,world\n+8028,world\n+8029,world\n+8030,world\n+8031,world\n+8032,world\n+8033,world\n+8034,world\n+8035,world\n+8036,world\n+8037,world\n+8038,world\n+8039,world\n+8040,world\n+8041,world\n+8042,world\n+8043,world\n+8044,world\n+8045,world\n+8046,world\n+8047,world\n+8048,world\n+8049,world\n+8050,world\n+8051,world\n+8052,world\n+8053,world\n+8054,world\n+8055,world\n+8056,world\n+8057,world\n+8058,world\n+8059,world\n+8060,world\n+8061,world\n+8062,world\n+8063,world\n+8064,world\n+8065,world\n+8066,world\n+8067,world\n+8068,world\n+8069,world\n+8070,world\n+8071,world\n+8072,world\n+8073,world\n+8074,world\n+8075,world\n+8076,world\n+8077,world\n+8078,world\n+8079,world\n+8080,world\n+8081,world\n+8082,world\n+8083,world\n+8084,world\n+8085,world\n+8086,world\n+8087,world\n+8088,world\n+8089,world\n+8090,world\n+8091,world\n+8092,world\n+8093,world\n+8094,world\n+8095,world\n+8096,world\n+8097,world\n+8098,world\n+8099,world\n+8100,world\n+8101,world\n+8102,world\n+8103,world\n+8104,world\n+8105,world\n+8106,world\n+8107,world\n+8108,world\n+8109,world\n+8110,world\n+8111,world\n+8112,world\n+8113,world\n+8114,world\n+8115,world\n+8116,world\n+8117,world\n+8118,world\n+8119,world\n+8120,world\n+8121,world\n+8122,world\n+8123,world\n+8124,world\n+8125,world\n+8126,world\n+8127,world\n+8128,world\n+8129,world\n+8130,world\n+8131,world\n+8132,world\n+8133,world\n+8134,world\n+8135,world\n+8136,world\n+8137,world\n+8138,world\n+8139,world\n+8140,world\n+8141,world\n+8142,world\n+8143,world\n+8144,world\n+8145,world\n+8146,world\n+8147,world\n+8148,world\n+8149,world\n+8150,world\n+8151,world\n+8152,world\n+8153,world\n+8154,world\n+8155,world\n+8156,world\n+8157,world\n+8158,world\n+8159,world\n+8160,world\n+8161,world\n+8162,world\n+8163,world\n+8164,world\n+8165,world\n+8166,world\n+8167,world\n+8168,world\n+8169,world\n+8170,world\n+8171,world\n+8172,world\n+8173,world\n+8174,world\n+8175,world\n+8176,world\n+8177,world\n+8178,world\n+8179,world\n+8180,world\n+8181,world\n+8182,world\n+8183,world\n+8184,world\n+8185,world\n+8186,world\n+8187,world\n+8188,world\n+8189,world\n+8190,world\n+8191,world\n+8192,world\n+8193,world\n+8194,world\n+8195,world\n+8196,world\n+8197,world\n+8198,world\n+8199,world\n+8200,world\n+8201,world\n+8202,world\n+8203,world\n+8204,world\n+8205,world\n+8206,world\n+8207,world\n+8208,world\n+8209,world\n+8210,world\n+8211,world\n+8212,world\n+8213,world\n+8214,world\n+8215,world\n+8216,world\n+8217,world\n+8218,world\n+8219,world\n+8220,world\n+8221,world\n+8222,world\n+8223,world\n+8224,world\n+8225,world\n+8226,world\n+8227,world\n+8228,world\n+8229,world\n+8230,world\n+8231,world\n+8232,world\n+8233,world\n+8234,world\n+8235,world\n+8236,world\n+8237,world\n+8238,world\n+8239,world\n+8240,world\n+8241,world\n+8242,world\n+8243,world\n+8244,world\n+8245,world\n+8246,world\n+8247,world\n+8248,world\n+8249,world\n+8250,world\n+8251,world\n+8252,world\n+8253,world\n+8254,world\n+8255,world\n+8256,world\n+8257,world\n+8258,world\n+8259,world\n+8260,world\n+8261,world\n+8262,world\n+8263,world\n+8264,world\n+8265,world\n+8266,world\n+8267,world\n+8268,world\n+8269,world\n+8270,world\n+8271,world\n+8272,world\n+8273,world\n+8274,world\n+8275,world\n+8276,world\n+8277,world\n+8278,world\n+8279,world\n+8280,world\n+8281,world\n+8282,world\n+8283,world\n+8284,world\n+8285,world\n+8286,world\n+8287,world\n+8288,world\n+8289,world\n+8290,world\n+8291,world\n+8292,world\n+8293,world\n+8294,world\n+8295,world\n+8296,world\n+8297,world\n+8298,world\n+8299,world\n+8300,world\n+8301,world\n+8302,world\n+8303,world\n+8304,world\n+8305,world\n+8306,world\n+8307,world\n+8308,world\n+8309,world\n+8310,world\n+8311,world\n+8312,world\n+8313,world\n+8314,world\n+8315,world\n+8316,world\n+8317,world\n+8318,world\n+8319,world\n+8320,world\n+8321,world\n+8322,world\n+8323,world\n+8324,world\n+8325,world\n+8326,world\n+8327,world\n+8328,world\n+8329,world\n+8330,world\n+8331,world\n+8332,world\n+8333,world\n+8334,world\n+8335,world\n+8336,world\n+8337,world\n+8338,world\n+8339,world\n+8340,world\n+8341,world\n+8342,world\n+8343,world\n+8344,world\n+8345,world\n+8346,world\n+8347,world\n+8348,world\n+8349,world\n+8350,world\n+8351,world\n+8352,world\n+8353,world\n+8354,world\n+8355,world\n+8356,world\n+8357,world\n+8358,world\n+8359,world\n+8360,world\n+8361,world\n+8362,world\n+8363,world\n+8364,world\n+8365,world\n+8366,world\n+8367,world\n+8368,world\n+8369,world\n+8370,world\n+8371,world\n+8372,world\n+8373,world\n+8374,world\n+8375,world\n+8376,world\n+8377,world\n+8378,world\n+8379,world\n+8380,world\n+8381,world\n+8382,world\n+8383,world\n+8384,world\n+8385,world\n+8386,world\n+8387,world\n+8388,world\n+8389,world\n+8390,world\n+8391,world\n+8392,world\n+8393,world\n+8394,world\n+8395,world\n+8396,world\n+8397,world\n+8398,world\n+8399,world\n+8400,world\n+8401,world\n+8402,world\n+8403,world\n+8404,world\n+8405,world\n+8406,world\n+8407,world\n+8408,world\n+8409,world\n+8410,world\n+8411,world\n+8412,world\n+8413,world\n+8414,world\n+8415,world\n+8416,world\n+8417,world\n+8418,world\n+8419,world\n+8420,world\n+8421,world\n+8422,world\n+8423,world\n+8424,world\n+8425,world\n+8426,world\n+8427,world\n+8428,world\n+8429,world\n+8430,world\n+8431,world\n+8432,world\n+8433,world\n+8434,world\n+8435,world\n+8436,world\n+8437,world\n+8438,world\n+8439,world\n+8440,world\n+8441,world\n+8442,world\n+8443,world\n+8444,world\n+8445,world\n+8446,world\n+8447,world\n+8448,world\n+8449,world\n+8450,world\n+8451,world\n+8452,world\n+8453,world\n+8454,world\n+8455,world\n+8456,world\n+8457,world\n+8458,world\n+8459,world\n+8460,world\n+8461,world\n+8462,world\n+8463,world\n+8464,world\n+8465,world\n+8466,world\n+8467,world\n+8468,world\n+8469,world\n+8470,world\n+8471,world\n+8472,world\n+8473,world\n+8474,world\n+8475,world\n+8476,world\n+8477,world\n+8478,world\n+8479,world\n+8480,world\n+8481,world\n+8482,world\n+8483,world\n+8484,world\n+8485,world\n+8486,world\n+8487,world\n+8488,world\n+8489,world\n+8490,world\n+8491,world\n+8492,world\n+8493,world\n+8494,world\n+8495,world\n+8496,world\n+8497,world\n+8498,world\n+8499,world\n+8500,world\n+8501,world\n+8502,world\n+8503,world\n+8504,world\n+8505,world\n+8506,world\n+8507,world\n+8508,world\n+8509,world\n+8510,world\n+8511,world\n+8512,world\n+8513,world\n+8514,world\n+8515,world\n+8516,world\n+8517,world\n+8518,world\n+8519,world\n+8520,world\n+8521,world\n+8522,world\n+8523,world\n+8524,world\n+8525,world\n+8526,world\n+8527,world\n+8528,world\n+8529,world\n+8530,world\n+8531,world\n+8532,world\n+8533,world\n+8534,world\n+8535,world\n+8536,world\n+8537,world\n+8538,world\n+8539,world\n+8540,world\n+8541,world\n+8542,world\n+8543,world\n+8544,world\n+8545,world\n+8546,world\n+8547,world\n+8548,world\n+8549,world\n+8550,world\n+8551,world\n+8552,world\n+8553,world\n+8554,world\n+8555,world\n+8556,world\n+8557,world\n+8558,world\n+8559,world\n+8560,world\n+8561,world\n+8562,world\n+8563,world\n+8564,world\n+8565,world\n+8566,world\n+8567,world\n+8568,world\n+8569,world\n+8570,world\n+8571,world\n+8572,world\n+8573,world\n+8574,world\n+8575,world\n+8576,world\n+8577,world\n+8578,world\n+8579,world\n+8580,world\n+8581,world\n+8582,world\n+8583,world\n+8584,world\n+8585,world\n+8586,world\n+8587,world\n+8588,world\n+8589,world\n+8590,world\n+8591,world\n+8592,world\n+8593,world\n+8594,world\n+8595,world\n+8596,world\n+8597,world\n+8598,world\n+8599,world\n+8600,world\n+8601,world\n+8602,world\n+8603,world\n+8604,world\n+8605,world\n+8606,world\n+8607,world\n+8608,world\n+8609,world\n+8610,world\n+8611,world\n+8612,world\n+8613,world\n+8614,world\n+8615,world\n+8616,world\n+8617,world\n+8618,world\n+8619,world\n+8620,world\n+8621,world\n+8622,world\n+8623,world\n+8624,world\n+8625,world\n+8626,world\n+8627,world\n+8628,world\n+8629,world\n+8630,world\n+8631,world\n+8632,world\n+8633,world\n+8634,world\n+8635,world\n+8636,world\n+8637,world\n+8638,world\n+8639,world\n+8640,world\n+8641,world\n+8642,world\n+8643,world\n+8644,world\n+8645,world\n+8646,world\n+8647,world\n+8648,world\n+8649,world\n+8650,world\n+8651,world\n+8652,world\n+8653,world\n+8654,world\n+8655,world\n+8656,world\n+8657,world\n+8658,world\n+8659,world\n+8660,world\n+8661,world\n+8662,world\n+8663,world\n+8664,world\n+8665,world\n+8666,world\n+8667,world\n+8668,world\n+8669,world\n+8670,world\n+8671,world\n+8672,world\n+8673,world\n+8674,world\n+8675,world\n+8676,world\n+8677,world\n+8678,world\n+8679,world\n+8680,world\n+8681,world\n+8682,world\n+8683,world\n+8684,world\n+8685,world\n+8686,world\n+8687,world\n+8688,world\n+8689,world\n+8690,world\n+8691,world\n+8692,world\n+8693,world\n+8694,world\n+8695,world\n+8696,world\n+8697,world\n+8698,world\n+8699,world\n+8700,world\n+8701,world\n+8702,world\n+8703,world\n+8704,world\n+8705,world\n+8706,world\n+8707,world\n+8708,world\n+8709,world\n+8710,world\n+8711,world\n+8712,world\n+8713,world\n+8714,world\n+8715,world\n+8716,world\n+8717,world\n+8718,world\n+8719,world\n+8720,world\n+8721,world\n+8722,world\n+8723,world\n+8724,world\n+8725,world\n+8726,world\n+8727,world\n+8728,world\n+8729,world\n+8730,world\n+8731,world\n+8732,world\n+8733,world\n+8734,world\n+8735,world\n+8736,world\n+8737,world\n+8738,world\n+8739,world\n+8740,world\n+8741,world\n+8742,world\n+8743,world\n+8744,world\n+8745,world\n+8746,world\n+8747,world\n+8748,world\n+8749,world\n+8750,world\n+8751,world\n+8752,world\n+8753,world\n+8754,world\n+8755,world\n+8756,world\n+8757,world\n+8758,world\n+8759,world\n+8760,world\n+8761,world\n+8762,world\n+8763,world\n+8764,world\n+8765,world\n+8766,world\n+8767,world\n+8768,world\n+8769,world\n+8770,world\n+8771,world\n+8772,world\n+8773,world\n+8774,world\n+8775,world\n+8776,world\n+8777,world\n+8778,world\n+8779,world\n+8780,world\n+8781,world\n+8782,world\n+8783,world\n+8784,world\n+8785,world\n+8786,world\n+8787,world\n+8788,world\n+8789,world\n+8790,world\n+8791,world\n+8792,world\n+8793,world\n+8794,world\n+8795,world\n+8796,world\n+8797,world\n+8798,world\n+8799,world\n+8800,world\n+8801,world\n+8802,world\n+8803,world\n+8804,world\n+8805,world\n+8806,world\n+8807,world\n+8808,world\n+8809,world\n+8810,world\n+8811,world\n+8812,world\n+8813,world\n+8814,world\n+8815,world\n+8816,world\n+8817,world\n+8818,world\n+8819,world\n+8820,world\n+8821,world\n+8822,world\n+8823,world\n+8824,world\n+8825,world\n+8826,world\n+8827,world\n+8828,world\n+8829,world\n+8830,world\n+8831,world\n+8832,world\n+8833,world\n+8834,world\n+8835,world\n+8836,world\n+8837,world\n+8838,world\n+8839,world\n+8840,world\n+8841,world\n+8842,world\n+8843,world\n+8844,world\n+8845,world\n+8846,world\n+8847,world\n+8848,world\n+8849,world\n+8850,world\n+8851,world\n+8852,world\n+8853,world\n+8854,world\n+8855,world\n+8856,world\n+8857,world\n+8858,world\n+8859,world\n+8860,world\n+8861,world\n+8862,world\n+8863,world\n+8864,world\n+8865,world\n+8866,world\n+8867,world\n+8868,world\n+8869,world\n+8870,world\n+8871,world\n+8872,world\n+8873,world\n+8874,world\n+8875,world\n+8876,world\n+8877,world\n+8878,world\n+8879,world\n+8880,world\n+8881,world\n+8882,world\n+8883,world\n+8884,world\n+8885,world\n+8886,world\n+8887,world\n+8888,world\n+8889,world\n+8890,world\n+8891,world\n+8892,world\n+8893,world\n+8894,world\n+8895,world\n+8896,world\n+8897,world\n+8898,world\n+8899,world\n+8900,world\n+8901,world\n+8902,world\n+8903,world\n+8904,world\n+8905,world\n+8906,world\n+8907,world\n+8908,world\n+8909,world\n+8910,world\n+8911,world\n+8912,world\n+8913,world\n+8914,world\n+8915,world\n+8916,world\n+8917,world\n+8918,world\n+8919,world\n+8920,world\n+8921,world\n+8922,world\n+8923,world\n+8924,world\n+8925,world\n+8926,world\n+8927,world\n+8928,world\n+8929,world\n+8930,world\n+8931,world\n+8932,world\n+8933,world\n+8934,world\n+8935,world\n+8936,world\n+8937,world\n+8938,world\n+8939,world\n+8940,world\n+8941,world\n+8942,world\n+8943,world\n+8944,world\n+8945,world\n+8946,world\n+8947,world\n+8948,world\n+8949,world\n+8950,world\n+8951,world\n+8952,world\n+8953,world\n+8954,world\n+8955,world\n+8956,world\n+8957,world\n+8958,world\n+8959,world\n+8960,world\n+8961,world\n+8962,world\n+8963,world\n+8964,world\n+8965,world\n+8966,world\n+8967,world\n+8968,world\n+8969,world\n+8970,world\n+8971,world\n+8972,world\n+8973,world\n+8974,world\n+8975,world\n+8976,world\n+8977,world\n+8978,world\n+8979,world\n+8980,world\n+8981,world\n+8982,world\n+8983,world\n+8984,world\n+8985,world\n+8986,world\n+8987,world\n+8988,world\n+8989,world\n+8990,world\n+8991,world\n+8992,world\n+8993,world\n+8994,world\n+8995,world\n+8996,world\n+8997,world\n+8998,world\n+8999,world\n+9000,world\n+9001,world\n+9002,world\n+9003,world\n+9004,world\n+9005,world\n+9006,world\n+9007,world\n+9008,world\n+9009,world\n+9010,world\n+9011,world\n+9012,world\n+9013,world\n+9014,world\n+9015,world\n+9016,world\n+9017,world\n+9018,world\n+9019,world\n+9020,world\n+9021,world\n+9022,world\n+9023,world\n+9024,world\n+9025,world\n+9026,world\n+9027,world\n+9028,world\n+9029,world\n+9030,world\n+9031,world\n+9032,world\n+9033,world\n+9034,world\n+9035,world\n+9036,world\n+9037,world\n+9038,world\n+9039,world\n+9040,world\n+9041,world\n+9042,world\n+9043,world\n+9044,world\n+9045,world\n+9046,world\n+9047,world\n+9048,world\n+9049,world\n+9050,world\n+9051,world\n+9052,world\n+9053,world\n+9054,world\n+9055,world\n+9056,world\n+9057,world\n+9058,world\n+9059,world\n+9060,world\n+9061,world\n+9062,world\n+9063,world\n+9064,world\n+9065,world\n+9066,world\n+9067,world\n+9068,world\n+9069,world\n+9070,world\n+9071,world\n+9072,world\n+9073,world\n+9074,world\n+9075,world\n+9076,world\n+9077,world\n+9078,world\n+9079,world\n+9080,world\n+9081,world\n+9082,world\n+9083,world\n+9084,world\n+9085,world\n+9086,world\n+9087,world\n+9088,world\n+9089,world\n+9090,world\n+9091,world\n+9092,world\n+9093,world\n+9094,world\n+9095,world\n+9096,world\n+9097,world\n+9098,world\n+9099,world\n+9100,world\n+9101,world\n+9102,world\n+9103,world\n+9104,world\n+9105,world\n+9106,world\n+9107,world\n+9108,world\n+9109,world\n+9110,world\n+9111,world\n+9112,world\n+9113,world\n+9114,world\n+9115,world\n+9116,world\n+9117,world\n+9118,world\n+9119,world\n+9120,world\n+9121,world\n+9122,world\n+9123,world\n+9124,world\n+9125,world\n+9126,world\n+9127,world\n+9128,world\n+9129,world\n+9130,world\n+9131,world\n+9132,world\n+9133,world\n+9134,world\n+9135,world\n+9136,world\n+9137,world\n+9138,world\n+9139,world\n+9140,world\n+9141,world\n+9142,world\n+9143,world\n+9144,world\n+9145,world\n+9146,world\n+9147,world\n+9148,world\n+9149,world\n+9150,world\n+9151,world\n+9152,world\n+9153,world\n+9154,world\n+9155,world\n+9156,world\n+9157,world\n+9158,world\n+9159,world\n+9160,world\n+9161,world\n+9162,world\n+9163,world\n+9164,world\n+9165,world\n+9166,world\n+9167,world\n+9168,world\n+9169,world\n+9170,world\n+9171,world\n+9172,world\n+9173,world\n+9174,world\n+9175,world\n+9176,world\n+9177,world\n+9178,world\n+9179,world\n+9180,world\n+9181,world\n+9182,world\n+9183,world\n+9184,world\n+9185,world\n+9186,world\n+9187,world\n+9188,world\n+9189,world\n+9190,world\n+9191,world\n+9192,world\n+9193,world\n+9194,world\n+9195,world\n+9196,world\n+9197,world\n+9198,world\n+9199,world\n+9200,world\n+9201,world\n+9202,world\n+9203,world\n+9204,world\n+9205,world\n+9206,world\n+9207,world\n+9208,world\n+9209,world\n+9210,world\n+9211,world\n+9212,world\n+9213,world\n+9214,world\n+9215,world\n+9216,world\n+9217,world\n+9218,world\n+9219,world\n+9220,world\n+9221,world\n+9222,world\n+9223,world\n+9224,world\n+9225,world\n+9226,world\n+9227,world\n+9228,world\n+9229,world\n+9230,world\n+9231,world\n+9232,world\n+9233,world\n+9234,world\n+9235,world\n+9236,world\n+9237,world\n+9238,world\n+9239,world\n+9240,world\n+9241,world\n+9242,world\n+9243,world\n+9244,world\n+9245,world\n+9246,world\n+9247,world\n+9248,world\n+9249,world\n+9250,world\n+9251,world\n+9252,world\n+9253,world\n+9254,world\n+9255,world\n+9256,world\n+9257,world\n+9258,world\n+9259,world\n+9260,world\n+9261,world\n+9262,world\n+9263,world\n+9264,world\n+9265,world\n+9266,world\n+9267,world\n+9268,world\n+9269,world\n+9270,world\n+9271,world\n+9272,world\n+9273,world\n+9274,world\n+9275,world\n+9276,world\n+9277,world\n+9278,world\n+9279,world\n+9280,world\n+9281,world\n+9282,world\n+9283,world\n+9284,world\n+9285,world\n+9286,world\n+9287,world\n+9288,world\n+9289,world\n+9290,world\n+9291,world\n+9292,world\n+9293,world\n+9294,world\n+9295,world\n+9296,world\n+9297,world\n+9298,world\n+9299,world\n+9300,world\n+9301,world\n+9302,world\n+9303,world\n+9304,world\n+9305,world\n+9306,world\n+9307,world\n+9308,world\n+9309,world\n+9310,world\n+9311,world\n+9312,world\n+9313,world\n+9314,world\n+9315,world\n+9316,world\n+9317,world\n+9318,world\n+9319,world\n+9320,world\n+9321,world\n+9322,world\n+9323,world\n+9324,world\n+9325,world\n+9326,world\n+9327,world\n+9328,world\n+9329,world\n+9330,world\n+9331,world\n+9332,world\n+9333,world\n+9334,world\n+9335,world\n+9336,world\n+9337,world\n+9338,world\n+9339,world\n+9340,world\n+9341,world\n+9342,world\n+9343,world\n+9344,world\n+9345,world\n+9346,world\n+9347,world\n+9348,world\n+9349,world\n+9350,world\n+9351,world\n+9352,world\n+9353,world\n+9354,world\n+9355,world\n+9356,world\n+9357,world\n+9358,world\n+9359,world\n+9360,world\n+9361,world\n+9362,world\n+9363,world\n+9364,world\n+9365,world\n+9366,world\n+9367,world\n+9368,world\n+9369,world\n+9370,world\n+9371,world\n+9372,world\n+9373,world\n+9374,world\n+9375,world\n+9376,world\n+9377,world\n+9378,world\n+9379,world\n+9380,world\n+9381,world\n+9382,world\n+9383,world\n+9384,world\n+9385,world\n+9386,world\n+9387,world\n+9388,world\n+9389,world\n+9390,world\n+9391,world\n+9392,world\n+9393,world\n+9394,world\n+9395,world\n+9396,world\n+9397,world\n+9398,world\n+9399,world\n+9400,world\n+9401,world\n+9402,world\n+9403,world\n+9404,world\n+9405,world\n+9406,world\n+9407,world\n+9408,world\n+9409,world\n+9410,world\n+9411,world\n+9412,world\n+9413,world\n+9414,world\n+9415,world\n+9416,world\n+9417,world\n+9418,world\n+9419,world\n+9420,world\n+9421,world\n+9422,world\n+9423,world\n+9424,world\n+9425,world\n+9426,world\n+9427,world\n+9428,world\n+9429,world\n+9430,world\n+9431,world\n+9432,world\n+9433,world\n+9434,world\n+9435,world\n+9436,world\n+9437,world\n+9438,world\n+9439,world\n+9440,world\n+9441,world\n+9442,world\n+9443,world\n+9444,world\n+9445,world\n+9446,world\n+9447,world\n+9448,world\n+9449,world\n+9450,world\n+9451,world\n+9452,world\n+9453,world\n+9454,world\n+9455,world\n+9456,world\n+9457,world\n+9458,world\n+9459,world\n+9460,world\n+9461,world\n+9462,world\n+9463,world\n+9464,world\n+9465,world\n+9466,world\n+9467,world\n+9468,world\n+9469,world\n+9470,world\n+9471,world\n+9472,world\n+9473,world\n+9474,world\n+9475,world\n+9476,world\n+9477,world\n+9478,world\n+9479,world\n+9480,world\n+9481,world\n+9482,world\n+9483,world\n+9484,world\n+9485,world\n+9486,world\n+9487,world\n+9488,world\n+9489,world\n+9490,world\n+9491,world\n+9492,world\n+9493,world\n+9494,world\n+9495,world\n+9496,world\n+9497,world\n+9498,world\n+9499,world\n+9500,world\n+9501,world\n+9502,world\n+9503,world\n+9504,world\n+9505,world\n+9506,world\n+9507,world\n+9508,world\n+9509,world\n+9510,world\n+9511,world\n+9512,world\n+9513,world\n+9514,world\n+9515,world\n+9516,world\n+9517,world\n+9518,world\n+9519,world\n+9520,world\n+9521,world\n+9522,world\n+9523,world\n+9524,world\n+9525,world\n+9526,world\n+9527,world\n+9528,world\n+9529,world\n+9530,world\n+9531,world\n+9532,world\n+9533,world\n+9534,world\n+9535,world\n+9536,world\n+9537,world\n+9538,world\n+9539,world\n+9540,world\n+9541,world\n+9542,world\n+9543,world\n+9544,world\n+9545,world\n+9546,world\n+9547,world\n+9548,world\n+9549,world\n+9550,world\n+9551,world\n+9552,world\n+9553,world\n+9554,world\n+9555,world\n+9556,world\n+9557,world\n+9558,world\n+9559,world\n+9560,world\n+9561,world\n+9562,world\n+9563,world\n+9564,world\n+9565,world\n+9566,world\n+9567,world\n+9568,world\n+9569,world\n+9570,world\n+9571,world\n+9572,world\n+9573,world\n+9574,world\n+9575,world\n+9576,world\n+9577,world\n+9578,world\n+9579,world\n+9580,world\n+9581,world\n+9582,world\n+9583,world\n+9584,world\n+9585,world\n+9586,world\n+9587,world\n+9588,world\n+9589,world\n+9590,world\n+9591,world\n+9592,world\n+9593,world\n+9594,world\n+9595,world\n+9596,world\n+9597,world\n+9598,world\n+9599,world\n+9600,world\n+9601,world\n+9602,world\n+9603,world\n+9604,world\n+9605,world\n+9606,world\n+9607,world\n+9608,world\n+9609,world\n+9610,world\n+9611,world\n+9612,world\n+9613,world\n+9614,world\n+9615,world\n+9616,world\n+9617,world\n+9618,world\n+9619,world\n+9620,world\n+9621,world\n+9622,world\n+9623,world\n+9624,world\n+9625,world\n+9626,world\n+9627,world\n+9628,world\n+9629,world\n+9630,world\n+9631,world\n+9632,world\n+9633,world\n+9634,world\n+9635,world\n+9636,world\n+9637,world\n+9638,world\n+9639,world\n+9640,world\n+9641,world\n+9642,world\n+9643,world\n+9644,world\n+9645,world\n+9646,world\n+9647,world\n+9648,world\n+9649,world\n+9650,world\n+9651,world\n+9652,world\n+9653,world\n+9654,world\n+9655,world\n+9656,world\n+9657,world\n+9658,world\n+9659,world\n+9660,world\n+9661,world\n+9662,world\n+9663,world\n+9664,world\n+9665,world\n+9666,world\n+9667,world\n+9668,world\n+9669,world\n+9670,world\n+9671,world\n+9672,world\n+9673,world\n+9674,world\n+9675,world\n+9676,world\n+9677,world\n+9678,world\n+9679,world\n+9680,world\n+9681,world\n+9682,world\n+9683,world\n+9684,world\n+9685,world\n+9686,world\n+9687,world\n+9688,world\n+9689,world\n+9690,world\n+9691,world\n+9692,world\n+9693,world\n+9694,world\n+9695,world\n+9696,world\n+9697,world\n+9698,world\n+9699,world\n+9700,world\n+9701,world\n+9702,world\n+9703,world\n+9704,world\n+9705,world\n+9706,world\n+9707,world\n+9708,world\n+9709,world\n+9710,world\n+9711,world\n+9712,world\n+9713,world\n+9714,world\n+9715,world\n+9716,world\n+9717,world\n+9718,world\n+9719,world\n+9720,world\n+9721,world\n+9722,world\n+9723,world\n+9724,world\n+9725,world\n+9726,world\n+9727,world\n+9728,world\n+9729,world\n+9730,world\n+9731,world\n+9732,world\n+9733,world\n+9734,world\n+9735,world\n+9736,world\n+9737,world\n+9738,world\n+9739,world\n+9740,world\n+9741,world\n+9742,world\n+9743,world\n+9744,world\n+9745,world\n+9746,world\n+9747,world\n+9748,world\n+9749,world\n+9750,world\n+9751,world\n+9752,world\n+9753,world\n+9754,world\n+9755,world\n+9756,world\n+9757,world\n+9758,world\n+9759,world\n+9760,world\n+9761,world\n+9762,world\n+9763,world\n+9764,world\n+9765,world\n+9766,world\n+9767,world\n+9768,world\n+9769,world\n+9770,world\n+9771,world\n+9772,world\n+9773,world\n+9774,world\n+9775,world\n+9776,world\n+9777,world\n+9778,world\n+9779,world\n+9780,world\n+9781,world\n+9782,world\n+9783,world\n+9784,world\n+9785,world\n+9786,world\n+9787,world\n+9788,world\n+9789,world\n+9790,world\n+9791,world\n+9792,world\n+9793,world\n+9794,world\n+9795,world\n+9796,world\n+9797,world\n+9798,world\n+9799,world\n+9800,world\n+9801,world\n+9802,world\n+9803,world\n+9804,world\n+9805,world\n+9806,world\n+9807,world\n+9808,world\n+9809,world\n+9810,world\n+9811,world\n+9812,world\n+9813,world\n+9814,world\n+9815,world\n+9816,world\n+9817,world\n+9818,world\n+9819,world\n+9820,world\n+9821,world\n+9822,world\n+9823,world\n+9824,world\n+9825,world\n+9826,world\n+9827,world\n+9828,world\n+9829,world\n+9830,world\n+9831,world\n+9832,world\n+9833,world\n+9834,world\n+9835,world\n+9836,world\n+9837,world\n+9838,world\n+9839,world\n+9840,world\n+9841,world\n+9842,world\n+9843,world\n+9844,world\n+9845,world\n+9846,world\n+9847,world\n+9848,world\n+9849,world\n+9850,world\n+9851,world\n+9852,world\n+9853,world\n+9854,world\n+9855,world\n+9856,world\n+9857,world\n+9858,world\n+9859,world\n+9860,world\n+9861,world\n+9862,world\n+9863,world\n+9864,world\n+9865,world\n+9866,world\n+9867,world\n+9868,world\n+9869,world\n+9870,world\n+9871,world\n+9872,world\n+9873,world\n+9874,world\n+9875,world\n+9876,world\n+9877,world\n+9878,world\n+9879,world\n+9880,world\n+9881,world\n+9882,world\n+9883,world\n+9884,world\n+9885,world\n+9886,world\n+9887,world\n+9888,world\n+9889,world\n+9890,world\n+9891,world\n+9892,world\n+9893,world\n+9894,world\n+9895,world\n+9896,world\n+9897,world\n+9898,world\n+9899,world\n+9900,world\n+9901,world\n+9902,world\n+9903,world\n+9904,world\n+9905,world\n+9906,world\n+9907,world\n+9908,world\n+9909,world\n+9910,world\n+9911,world\n+9912,world\n+9913,world\n+9914,world\n+9915,world\n+9916,world\n+9917,world\n+9918,world\n+9919,world\n+9920,world\n+9921,world\n+9922,world\n+9923,world\n+9924,world\n+9925,world\n+9926,world\n+9927,world\n+9928,world\n+9929,world\n+9930,world\n+9931,world\n+9932,world\n+9933,world\n+9934,world\n+9935,world\n+9936,world\n+9937,world\n+9938,world\n+9939,world\n+9940,world\n+9941,world\n+9942,world\n+9943,world\n+9944,world\n+9945,world\n+9946,world\n+9947,world\n+9948,world\n+9949,world\n+9950,world\n+9951,world\n+9952,world\n+9953,world\n+9954,world\n+9955,world\n+9956,world\n+9957,world\n+9958,world\n+9959,world\n+9960,world\n+9961,world\n+9962,world\n+9963,world\n+9964,world\n+9965,world\n+9966,world\n+9967,world\n+9968,world\n+9969,world\n+9970,world\n+9971,world\n+9972,world\n+9973,world\n+9974,world\n+9975,world\n+9976,world\n+9977,world\n+9978,world\n+9979,world\n+9980,world\n+9981,world\n+9982,world\n+9983,world\n+9984,world\n+9985,world\n+9986,world\n+9987,world\n+9988,world\n+9989,world\n+9990,world\n+9991,world\n+9992,world\n+9993,world\n+9994,world\n+9995,world\n+9996,world\n+9997,world\n+9998,world\n+9999,world\n+0,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+1,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+2,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+3,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+4,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+5,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+6,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+7,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+8,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+9,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+10,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+11,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+12,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+13,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+14,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+15,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+16,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+17,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+18,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+19,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+20,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+21,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+22,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+23,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+24,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+25,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+26,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+27,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+28,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+29,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+30,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+31,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+32,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+33,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+34,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+35,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+36,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+37,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+38,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+39,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+40,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+41,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+42,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+43,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+44,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+45,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+46,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+47,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+48,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+49,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+50,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+51,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+52,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+53,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+54,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+55,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+56,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+57,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+58,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+59,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+60,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+61,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+62,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+63,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+64,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+65,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+66,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+67,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+68,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+69,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+70,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+71,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+72,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+73,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+74,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+75,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+76,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+77,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+78,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+79,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+80,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+81,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+82,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+83,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+84,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+85,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+86,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+87,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+88,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+89,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+90,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+91,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+92,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+93,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+94,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+95,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+96,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+97,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+98,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\n+99,\"h\n+1,e\n+2,l\n+3,l\n+4,o\"\ndiff --git a/data/csv/error/time.csv b/data/csv/error/time.csv\nnew file mode 100644\nindex 000000000000..26dab4164fb9\n--- /dev/null\n+++ b/data/csv/error/time.csv\n@@ -0,0 +1,3102 @@\n+'00:01:01','worlds'\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+bla,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\n+00:01:01,worlds\ndiff --git a/data/csv/error/timestamp.csv b/data/csv/error/timestamp.csv\nnew file mode 100644\nindex 000000000000..49b58def97fb\n--- /dev/null\n+++ b/data/csv/error/timestamp.csv\n@@ -0,0 +1,3102 @@\n+'2020-01-01 00:01:01','worlds'\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+bla,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\n+2020-01-01 00:01:01,worlds\ndiff --git a/data/csv/missing_column.csv b/data/csv/missing_column.csv\nnew file mode 100644\nindex 000000000000..1828a90f06f9\n--- /dev/null\n+++ b/data/csv/missing_column.csv\n@@ -0,0 +1,23 @@\n+h1,h2\n+60,world\n+61,world\n+62,world\n+63,world\n+64,world\n+65\n+66,world\n+67,world\n+68\n+69,world\n+88,abc\n+84,world\n+84,world\n+84,world\n+84,world\n+84\n+84,world\n+84,world\n+84,world\n+84,world\n+84,world\n+84,world\n\\ No newline at end of file\ndiff --git a/data/csv/null_string.csv b/data/csv/null_string.csv\nnew file mode 100644\nindex 000000000000..49e9d02e8220\n--- /dev/null\n+++ b/data/csv/null_string.csv\n@@ -0,0 +1,3 @@\n+\"a\",\"b\"\n+\"1\",\"null\"\n+\"null\",\"2\"\n\\ No newline at end of file\ndiff --git a/data/csv/wrongtype.csv b/data/csv/wrongtype.csv\nnew file mode 100644\nindex 000000000000..a236f94ceccc\n--- /dev/null\n+++ b/data/csv/wrongtype.csv\n@@ -0,0 +1,23 @@\n+h1,h2\n+66,world\n+67,world\n+68,world\n+69,world\n+70,world\n+71,world\n+hi,world\n+72,world\n+73,world\n+84,world\n+88,abc\n+84,world\n+hi,world\n+84,world\n+84,world\n+84,world\n+84,world\n+hi,world\n+84,world\n+84,world\n+84,world\n+84,world\n\\ No newline at end of file\ndiff --git a/data/json/array_of_empty_arrays.json b/data/json/array_of_empty_arrays.json\nnew file mode 100644\nindex 000000000000..31b902502ebc\n--- /dev/null\n+++ b/data/json/array_of_empty_arrays.json\n@@ -0,0 +1,7 @@\n+[\n+  [],\n+  [],\n+  [\n+\n+  ]\n+]\n\\ No newline at end of file\ndiff --git a/data/json/empty_array.json b/data/json/empty_array.json\nnew file mode 100644\nindex 000000000000..2e807efe7f46\n--- /dev/null\n+++ b/data/json/empty_array.json\n@@ -0,0 +1,3 @@\n+[\n+\t\n+]\ndiff --git a/data/json/empty_no_newline.json b/data/json/empty_no_newline.json\nnew file mode 100644\nindex 000000000000..84c3e592dc32\n--- /dev/null\n+++ b/data/json/empty_no_newline.json\n@@ -0,0 +1,3 @@\n+[\n+\t\n+]\n\\ No newline at end of file\ndiff --git a/data/json/issue.json b/data/json/issue.json\nnew file mode 100644\nindex 000000000000..cb5c44c0cc8a\n--- /dev/null\n+++ b/data/json/issue.json\n@@ -0,0 +1,75 @@\n+{\n+  \"event_id\": \"VARCHAR\",\n+  \"user_id\": \"VARCHAR\",\n+  \"action\": \"VARCHAR\",\n+  \"client_time\": \"VARCHAR\",\n+  \"metadata\": {\n+    \"argv\": [\n+      \"VARCHAR\"\n+    ],\n+    \"dag\": {\n+      \"dag_size\": \"VARCHAR\",\n+      \"tasks\": {\n+        \"load_oscar\": {\n+          \"status\": \"VARCHAR\",\n+          \"type\": \"VARCHAR\",\n+          \"upstream\": \"JSON\",\n+          \"products\": {\n+            \"nb\": \"VARCHAR\"\n+          }\n+        },\n+        \"load_weather\": {\n+          \"status\": \"VARCHAR\",\n+          \"type\": \"VARCHAR\",\n+          \"upstream\": \"JSON\",\n+          \"products\": {\n+            \"nb\": \"VARCHAR\"\n+          }\n+        },\n+        \"compress\": {\n+          \"status\": \"VARCHAR\",\n+          \"type\": \"VARCHAR\",\n+          \"upstream\": {\n+            \"load_oscar\": \"VARCHAR\"\n+          },\n+          \"products\": {\n+            \"nb\": \"VARCHAR\"\n+          }\n+        }\n+      }\n+    }\n+  },\n+  \"total_runtime\": \"VARCHAR\",\n+  \"python_version\": \"VARCHAR\",\n+  \"version\": \"VARCHAR\",\n+  \"package_name\": \"VARCHAR\",\n+  \"docker_container\": \"BOOLEAN\",\n+  \"cloud\": \"NULL\",\n+  \"email\": \"NULL\",\n+  \"os\": \"VARCHAR\",\n+  \"environment\": \"VARCHAR\",\n+  \"telemetry_version\": \"VARCHAR\",\n+  \"$lib\": \"VARCHAR\",\n+  \"$lib_version\": \"VARCHAR\",\n+  \"$geoip_city_name\": \"VARCHAR\",\n+  \"$geoip_country_name\": \"VARCHAR\",\n+  \"$geoip_country_code\": \"VARCHAR\",\n+  \"$geoip_continent_name\": \"VARCHAR\",\n+  \"$geoip_continent_code\": \"VARCHAR\",\n+  \"$geoip_postal_code\": \"VARCHAR\",\n+  \"$geoip_latitude\": \"DOUBLE\",\n+  \"$geoip_longitude\": \"DOUBLE\",\n+  \"$geoip_time_zone\": \"VARCHAR\",\n+  \"$geoip_subdivision_1_code\": \"VARCHAR\",\n+  \"$geoip_subdivision_1_name\": \"VARCHAR\",\n+  \"$plugins_succeeded\": [\n+    \"VARCHAR\"\n+  ],\n+  \"$plugins_failed\": [\n+    \"NULL\"\n+  ],\n+  \"$plugins_deferred\": [\n+    \"NULL\"\n+  ],\n+  \"$ip\": \"VARCHAR\"\n+}\ndiff --git a/data/json/malformed/array_comma_malformed.json b/data/json/malformed/array_comma_malformed.json\nnew file mode 100644\nindex 000000000000..fb632c1d6ec4\n--- /dev/null\n+++ b/data/json/malformed/array_comma_malformed.json\n@@ -0,0 +1,3 @@\n+[\n+  ,\n+]\n\\ No newline at end of file\ndiff --git a/data/json/malformed/empty_array_malformed.json b/data/json/malformed/empty_array_malformed.json\nnew file mode 100644\nindex 000000000000..558ed37d93c5\n--- /dev/null\n+++ b/data/json/malformed/empty_array_malformed.json\n@@ -0,0 +1,1 @@\n+[\ndiff --git a/data/json/malformed/empty_array_trailing.json b/data/json/malformed/empty_array_trailing.json\nnew file mode 100644\nindex 000000000000..c2b522dc57bf\n--- /dev/null\n+++ b/data/json/malformed/empty_array_trailing.json\n@@ -0,0 +1,4 @@\n+[\n+\n+]\n+42\n\\ No newline at end of file\ndiff --git a/data/json/simple_timestamp.json b/data/json/simple_timestamp.json\nnew file mode 100644\nindex 000000000000..10968e3bcd93\n--- /dev/null\n+++ b/data/json/simple_timestamp.json\n@@ -0,0 +1,3 @@\n+{\n+    \"ts\": [\"2022-06-01T06:41:58Z\", \"2021-08-21T08:26:55.5Z\", \"2009-11-15T21:58:54.636Z\"]\n+}\ndiff --git a/data/json/whitespace_only.json b/data/json/whitespace_only.json\nnew file mode 100644\nindex 000000000000..139597f9cb07\n--- /dev/null\n+++ b/data/json/whitespace_only.json\n@@ -0,0 +1,2 @@\n+\n+\ndiff --git a/extension/autocomplete/sql_auto_complete-extension.cpp b/extension/autocomplete/sql_auto_complete-extension.cpp\nindex 35f3b4ce3b36..d5b3ffbdf021 100644\n--- a/extension/autocomplete/sql_auto_complete-extension.cpp\n+++ b/extension/autocomplete/sql_auto_complete-extension.cpp\n@@ -179,7 +179,7 @@ static vector<AutoCompleteCandidate> SuggestFileName(ClientContext &context, str\n \tauto &fs = FileSystem::GetFileSystem(context);\n \tstring search_dir;\n \tD_ASSERT(last_pos >= prefix.size());\n-\tauto is_path_absolute = FileSystem::IsPathAbsolute(prefix);\n+\tauto is_path_absolute = fs.IsPathAbsolute(prefix);\n \tfor (idx_t i = prefix.size(); i > 0; i--, last_pos--) {\n \t\tif (prefix[i - 1] == '/' || prefix[i - 1] == '\\\\') {\n \t\t\tsearch_dir = prefix.substr(0, i - 1);\n@@ -190,7 +190,7 @@ static vector<AutoCompleteCandidate> SuggestFileName(ClientContext &context, str\n \tif (search_dir.empty()) {\n \t\tsearch_dir = is_path_absolute ? \"/\" : \".\";\n \t} else {\n-\t\tsearch_dir = fs.ExpandPath(search_dir, FileOpener::Get(context));\n+\t\tsearch_dir = fs.ExpandPath(search_dir);\n \t}\n \tvector<AutoCompleteCandidate> result;\n \tfs.ListFiles(search_dir, [&](const string &fname, bool is_dir) {\ndiff --git a/extension/excel/numformat/nf_calendar.cpp b/extension/excel/numformat/nf_calendar.cpp\nindex cc9f0aefe6bb..5a22690e83bd 100644\n--- a/extension/excel/numformat/nf_calendar.cpp\n+++ b/extension/excel/numformat/nf_calendar.cpp\n@@ -22,8 +22,8 @@\n #include <stdio.h>\n #include <string.h>\n #include <math.h>\n-#ifdef WIN32\n-#include \"windows.h\"\n+#ifdef _WIN32\n+#include <windows.h>\n #else\n #include <sys/time.h>\n #endif\ndiff --git a/extension/httpfs/CMakeLists.txt b/extension/httpfs/CMakeLists.txt\nindex 34c4cc586871..96a6fb436414 100644\n--- a/extension/httpfs/CMakeLists.txt\n+++ b/extension/httpfs/CMakeLists.txt\n@@ -19,6 +19,12 @@ build_loadable_extension(httpfs ${PARAMETERS} s3fs.cpp httpfs.cpp crypto.cpp\n find_package(OpenSSL REQUIRED)\n target_link_libraries(httpfs_loadable_extension duckdb_mbedtls\n                       ${OPENSSL_LIBRARIES})\n+\n+if(MINGW)\n+  find_package(ZLIB)\n+  target_link_libraries(httpfs_loadable_extension ZLIB::ZLIB -lcrypt32)\n+endif()\n+\n install(\n   TARGETS httpfs_extension\n   EXPORT \"${DUCKDB_EXPORT_SET}\"\ndiff --git a/extension/httpfs/httpfs.cpp b/extension/httpfs/httpfs.cpp\nindex 5f74c8812ff8..b8f6e7c19807 100644\n--- a/extension/httpfs/httpfs.cpp\n+++ b/extension/httpfs/httpfs.cpp\n@@ -186,6 +186,7 @@ unique_ptr<duckdb_httplib_openssl::Client> HTTPFileSystem::GetClient(const HTTPP\n \tclient->set_write_timeout(http_params.timeout);\n \tclient->set_read_timeout(http_params.timeout);\n \tclient->set_connection_timeout(http_params.timeout);\n+\tclient->set_decompress(false);\n \treturn client;\n }\n \n@@ -497,7 +498,7 @@ void HTTPFileSystem::Seek(FileHandle &handle, idx_t location) {\n }\n \n // Get either the local, global, or no cache depending on settings\n-static HTTPMetadataCache *TryGetMetadataCache(FileOpener *opener, HTTPFileSystem &httpfs) {\n+static optional_ptr<HTTPMetadataCache> TryGetMetadataCache(FileOpener *opener, HTTPFileSystem &httpfs) {\n \tauto client_context = FileOpener::TryGetClientContext(opener);\n \tif (!client_context) {\n \t\treturn nullptr;\n@@ -530,7 +531,7 @@ void HTTPFileHandle::Initialize(FileOpener *opener) {\n \t\tthrow InternalException(\"State was not defined in this HTTP File Handle\");\n \t}\n \n-\tHTTPMetadataCache *current_cache = TryGetMetadataCache(opener, hfs);\n+\tauto current_cache = TryGetMetadataCache(opener, hfs);\n \n \tbool should_write_cache = false;\n \tif (!http_params.force_download && current_cache && !(flags & FileFlags::FILE_FLAGS_WRITE)) {\n@@ -615,7 +616,7 @@ void HTTPFileHandle::Initialize(FileOpener *opener) {\n \t\t\tthrow IOException(\"Invalid Content-Length header received: %s\", res->headers[\"Content-Length\"]);\n \t\t}\n \t}\n-\tif (length == 0 || http_params.force_download) {\n+\tif (state && (length == 0 || http_params.force_download)) {\n \t\tlock_guard<mutex> lock(state->cached_files_mutex);\n \t\tauto &cached_file = state->cached_files[path];\n \ndiff --git a/extension/httpfs/include/httpfs.hpp b/extension/httpfs/include/httpfs.hpp\nindex 266c49e23d59..0f4a3f1d83a3 100644\n--- a/extension/httpfs/include/httpfs.hpp\n+++ b/extension/httpfs/include/httpfs.hpp\n@@ -73,7 +73,7 @@ class HTTPFileHandle : public FileHandle {\n \tduckdb::unique_ptr<data_t[]> read_buffer;\n \tconstexpr static idx_t READ_BUFFER_LEN = 1000000;\n \n-\tHTTPState *state;\n+\tshared_ptr<HTTPState> state;\n \n public:\n \tvoid Close() override {\ndiff --git a/extension/httpfs/include/s3fs.hpp b/extension/httpfs/include/s3fs.hpp\nindex dc4dd0b331ab..4452c4243ed1 100644\n--- a/extension/httpfs/include/s3fs.hpp\n+++ b/extension/httpfs/include/s3fs.hpp\n@@ -233,7 +233,7 @@ class S3FileSystem : public HTTPFileSystem {\n // Helper class to do s3 ListObjectV2 api call https://docs.aws.amazon.com/AmazonS3/latest/API/API_ListObjectsV2.html\n struct AWSListObjectV2 {\n \tstatic string Request(string &path, HTTPParams &http_params, S3AuthParams &s3_auth_params,\n-\t                      string &continuation_token, HTTPState *state, bool use_delimiter = false);\n+\t                      string &continuation_token, optional_ptr<HTTPState> state, bool use_delimiter = false);\n \tstatic void ParseKey(string &aws_response, vector<string> &result);\n \tstatic vector<string> ParseCommonPrefix(string &aws_response);\n \tstatic string ParseContinuationToken(string &aws_response);\ndiff --git a/extension/httpfs/s3fs.cpp b/extension/httpfs/s3fs.cpp\nindex 396c6720a8fa..1767a79425e0 100644\n--- a/extension/httpfs/s3fs.cpp\n+++ b/extension/httpfs/s3fs.cpp\n@@ -526,8 +526,9 @@ void S3FileSystem::GetQueryParam(const string &key, string &param, duckdb_httpli\n }\n \n void S3FileSystem::ReadQueryParams(const string &url_query_param, S3AuthParams &params) {\n-\tif (url_query_param.empty())\n+\tif (url_query_param.empty()) {\n \t\treturn;\n+\t}\n \n \tduckdb_httplib_openssl::Params query_params;\n \tduckdb_httplib_openssl::detail::parse_query_text(url_query_param, query_params);\n@@ -916,7 +917,7 @@ vector<string> S3FileSystem::Glob(const string &glob_pattern, FileOpener *opener\n \tdo {\n \t\t// main listobject call, may\n \t\tstring response_str = AWSListObjectV2::Request(shared_path, http_params, s3_auth_params,\n-\t\t                                               main_continuation_token, HTTPState::TryGetState(opener));\n+\t\t                                               main_continuation_token, HTTPState::TryGetState(opener).get());\n \t\tmain_continuation_token = AWSListObjectV2::ParseContinuationToken(response_str);\n \t\tAWSListObjectV2::ParseKey(response_str, s3_keys);\n \n@@ -932,7 +933,7 @@ vector<string> S3FileSystem::Glob(const string &glob_pattern, FileOpener *opener\n \t\t\tdo {\n \t\t\t\tauto prefix_res =\n \t\t\t\t    AWSListObjectV2::Request(prefix_path, http_params, s3_auth_params, common_prefix_continuation_token,\n-\t\t\t\t                             HTTPState::TryGetState(opener));\n+\t\t\t\t                             HTTPState::TryGetState(opener).get());\n \t\t\t\tAWSListObjectV2::ParseKey(prefix_res, s3_keys);\n \t\t\t\tauto more_prefixes = AWSListObjectV2::ParseCommonPrefix(prefix_res);\n \t\t\t\tcommon_prefixes.insert(common_prefixes.end(), more_prefixes.begin(), more_prefixes.end());\n@@ -989,7 +990,7 @@ bool S3FileSystem::ListFiles(const string &directory, const std::function<void(c\n }\n \n string AWSListObjectV2::Request(string &path, HTTPParams &http_params, S3AuthParams &s3_auth_params,\n-                                string &continuation_token, HTTPState *state, bool use_delimiter) {\n+                                string &continuation_token, optional_ptr<HTTPState> state, bool use_delimiter) {\n \tauto parsed_url = S3FileSystem::S3UrlParse(path, s3_auth_params);\n \n \t// Construct the ListObjectsV2 call\ndiff --git a/extension/json/buffered_json_reader.cpp b/extension/json/buffered_json_reader.cpp\nindex 83b074a8a522..d2bdfe55d969 100644\n--- a/extension/json/buffered_json_reader.cpp\n+++ b/extension/json/buffered_json_reader.cpp\n@@ -6,30 +6,35 @@\n \n namespace duckdb {\n \n-void BufferedJSONReaderOptions::Serialize(FieldWriter &writer) {\n-\twriter.WriteString(file_path);\n+void BufferedJSONReaderOptions::Serialize(FieldWriter &writer) const {\n \twriter.WriteField<JSONFormat>(format);\n+\twriter.WriteField<JSONRecordType>(record_type);\n \twriter.WriteField<FileCompressionType>(compression);\n+\twriter.WriteSerializable(file_options);\n }\n \n void BufferedJSONReaderOptions::Deserialize(FieldReader &reader) {\n-\tfile_path = reader.ReadRequired<string>();\n \tformat = reader.ReadRequired<JSONFormat>();\n+\trecord_type = reader.ReadRequired<JSONRecordType>();\n \tcompression = reader.ReadRequired<FileCompressionType>();\n+\tfile_options = reader.ReadRequiredSerializable<MultiFileReaderOptions, MultiFileReaderOptions>();\n }\n \n JSONBufferHandle::JSONBufferHandle(idx_t buffer_index_p, idx_t readers_p, AllocatedData &&buffer_p, idx_t buffer_size_p)\n     : buffer_index(buffer_index_p), readers(readers_p), buffer(std::move(buffer_p)), buffer_size(buffer_size_p) {\n }\n \n-JSONFileHandle::JSONFileHandle(duckdb::unique_ptr<FileHandle> file_handle_p, Allocator &allocator_p)\n+JSONFileHandle::JSONFileHandle(unique_ptr<FileHandle> file_handle_p, Allocator &allocator_p)\n     : file_handle(std::move(file_handle_p)), allocator(allocator_p), can_seek(file_handle->CanSeek()),\n       plain_file_source(file_handle->OnDiskFile() && can_seek), file_size(file_handle->GetFileSize()), read_position(0),\n       requested_reads(0), actual_reads(0), cached_size(0) {\n }\n \n void JSONFileHandle::Close() {\n-\tfile_handle->Close();\n+\tif (file_handle) {\n+\t\tfile_handle->Close();\n+\t\tfile_handle = nullptr;\n+\t}\n \tcached_buffers.clear();\n }\n \n@@ -155,16 +160,15 @@ idx_t JSONFileHandle::ReadInternal(const char *pointer, const idx_t requested_si\n \treturn total_read_size;\n }\n \n-BufferedJSONReader::BufferedJSONReader(ClientContext &context, BufferedJSONReaderOptions options_p, string file_path_p)\n-    : file_path(std::move(file_path_p)), context(context), options(std::move(options_p)), buffer_index(0) {\n+BufferedJSONReader::BufferedJSONReader(ClientContext &context, BufferedJSONReaderOptions options_p, string file_name_p)\n+    : context(context), options(options_p), file_name(std::move(file_name_p)), buffer_index(0) {\n }\n \n void BufferedJSONReader::OpenJSONFile() {\n \tlock_guard<mutex> guard(lock);\n \tauto &file_system = FileSystem::GetFileSystem(context);\n-\tauto file_opener = FileOpener::Get(context);\n-\tauto regular_file_handle = file_system.OpenFile(file_path.c_str(), FileFlags::FILE_FLAGS_READ,\n-\t                                                FileLockType::NO_LOCK, options.compression, file_opener);\n+\tauto regular_file_handle =\n+\t    file_system.OpenFile(file_name.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK, options.compression);\n \tfile_handle = make_uniq<JSONFileHandle>(std::move(regular_file_handle), BufferAllocator::Get(context));\n }\n \n@@ -178,7 +182,7 @@ void BufferedJSONReader::CloseJSONFile() {\n \t}\n }\n \n-bool BufferedJSONReader::IsOpen() {\n+bool BufferedJSONReader::IsOpen() const {\n \treturn file_handle != nullptr;\n }\n \n@@ -186,11 +190,41 @@ BufferedJSONReaderOptions &BufferedJSONReader::GetOptions() {\n \treturn options;\n }\n \n+const BufferedJSONReaderOptions &BufferedJSONReader::GetOptions() const {\n+\treturn options;\n+}\n+\n+JSONFormat BufferedJSONReader::GetFormat() const {\n+\treturn options.format;\n+}\n+\n+void BufferedJSONReader::SetFormat(JSONFormat format) {\n+\tD_ASSERT(options.format == JSONFormat::AUTO_DETECT);\n+\toptions.format = format;\n+}\n+\n+JSONRecordType BufferedJSONReader::GetRecordType() const {\n+\treturn options.record_type;\n+}\n+\n+void BufferedJSONReader::SetRecordType(duckdb::JSONRecordType type) {\n+\tD_ASSERT(options.record_type == JSONRecordType::AUTO_DETECT);\n+\toptions.record_type = type;\n+}\n+\n+bool BufferedJSONReader::IsParallel() const {\n+\treturn options.format == JSONFormat::NEWLINE_DELIMITED && file_handle->CanSeek();\n+}\n+\n+const string &BufferedJSONReader::GetFileName() const {\n+\treturn file_name;\n+}\n+\n JSONFileHandle &BufferedJSONReader::GetFileHandle() const {\n \treturn *file_handle;\n }\n \n-void BufferedJSONReader::InsertBuffer(idx_t buffer_idx, duckdb::unique_ptr<JSONBufferHandle> &&buffer) {\n+void BufferedJSONReader::InsertBuffer(idx_t buffer_idx, unique_ptr<JSONBufferHandle> &&buffer) {\n \tlock_guard<mutex> guard(lock);\n \tbuffer_map.insert(make_pair(buffer_idx, std::move(buffer)));\n }\n@@ -221,7 +255,7 @@ void BufferedJSONReader::SetBufferLineOrObjectCount(idx_t index, idx_t count) {\n }\n \n idx_t BufferedJSONReader::GetLineNumber(idx_t buf_index, idx_t line_or_object_in_buf) {\n-\tD_ASSERT(options.format == JSONFormat::UNSTRUCTURED || options.format == JSONFormat::NEWLINE_DELIMITED);\n+\tD_ASSERT(options.format != JSONFormat::AUTO_DETECT);\n \twhile (true) {\n \t\tlock_guard<mutex> guard(lock);\n \t\tidx_t line = line_or_object_in_buf;\n@@ -244,23 +278,23 @@ idx_t BufferedJSONReader::GetLineNumber(idx_t buf_index, idx_t line_or_object_in\n \n void BufferedJSONReader::ThrowParseError(idx_t buf_index, idx_t line_or_object_in_buf, yyjson_read_err &err,\n                                          const string &extra) {\n-\tstring unit = options.format == JSONFormat::NEWLINE_DELIMITED ? \"line\" : \"object\";\n+\tstring unit = options.format == JSONFormat::NEWLINE_DELIMITED ? \"line\" : \"record/value\";\n \tauto line = GetLineNumber(buf_index, line_or_object_in_buf);\n-\tthrow InvalidInputException(\"Malformed JSON in file \\\"%s\\\", at byte %llu in %s %llu: %s. %s\", file_path,\n+\tthrow InvalidInputException(\"Malformed JSON in file \\\"%s\\\", at byte %llu in %s %llu: %s. %s\", file_name,\n \t                            err.pos + 1, unit, line + 1, err.msg, extra);\n }\n \n void BufferedJSONReader::ThrowTransformError(idx_t buf_index, idx_t line_or_object_in_buf,\n                                              const string &error_message) {\n-\tstring unit = options.format == JSONFormat::NEWLINE_DELIMITED ? \"line\" : \"object\";\n+\tstring unit = options.format == JSONFormat::NEWLINE_DELIMITED ? \"line\" : \"record/value\";\n \tauto line = GetLineNumber(buf_index, line_or_object_in_buf);\n-\tthrow InvalidInputException(\"JSON transform error in file \\\"%s\\\", in %s %llu: %s\", file_path, unit, line,\n+\tthrow InvalidInputException(\"JSON transform error in file \\\"%s\\\", in %s %llu: %s.\", file_name, unit, line,\n \t                            error_message);\n }\n \n double BufferedJSONReader::GetProgress() const {\n-\tif (file_handle) {\n-\t\treturn 100.0 * double(file_handle->Remaining()) / double(file_handle->FileSize());\n+\tif (IsOpen()) {\n+\t\treturn 100.0 - 100.0 * double(file_handle->Remaining()) / double(file_handle->FileSize());\n \t} else {\n \t\treturn 0;\n \t}\n@@ -271,6 +305,10 @@ void BufferedJSONReader::Reset() {\n \tbuffer_map.clear();\n \tbuffer_line_or_object_counts.clear();\n \n+\tif (!file_handle) {\n+\t\treturn;\n+\t}\n+\n \tif (file_handle->CanSeek()) {\n \t\tfile_handle->Seek(0);\n \t} else {\ndiff --git a/extension/json/include/buffered_json_reader.hpp b/extension/json/include/buffered_json_reader.hpp\nindex 7c6be8d1d9ff..ac4d103a03c1 100644\n--- a/extension/json/include/buffered_json_reader.hpp\n+++ b/extension/json/include/buffered_json_reader.hpp\n@@ -11,6 +11,7 @@\n #include \"duckdb/common/atomic.hpp\"\n #include \"duckdb/common/enums/file_compression_type.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/common/mutex.hpp\"\n #include \"json_common.hpp\"\n \n@@ -19,23 +20,35 @@ namespace duckdb {\n enum class JSONFormat : uint8_t {\n \t//! Auto-detect format (UNSTRUCTURED / NEWLINE_DELIMITED)\n \tAUTO_DETECT = 0,\n-\t//! One object after another, newlines can be anywhere\n+\t//! One unit after another, newlines can be anywhere\n \tUNSTRUCTURED = 1,\n-\t//! Objects are separated by newlines, newlines do not occur within values (NDJSON)\n+\t//! Units are separated by newlines, newlines do not occur within Units (NDJSON)\n \tNEWLINE_DELIMITED = 2,\n+\t//! File is one big array of units\n+\tARRAY = 3,\n+};\n+\n+enum class JSONRecordType : uint8_t {\n+\tAUTO_DETECT = 0,\n+\t//! Sequential objects that are unpacked\n+\tRECORDS = 1,\n+\t//! Any other JSON type, e.g., ARRAY\n+\tVALUES = 2,\n };\n \n struct BufferedJSONReaderOptions {\n public:\n-\t//! The file path of the JSON file to read\n-\tstring file_path;\n \t//! The format of the JSON\n \tJSONFormat format = JSONFormat::AUTO_DETECT;\n+\t//! Whether record types in the JSON\n+\tJSONRecordType record_type = JSONRecordType::AUTO_DETECT;\n \t//! Whether file is compressed or not, and if so which compression type\n \tFileCompressionType compression = FileCompressionType::AUTO_DETECT;\n+\t//! Multi-file reader options\n+\tMultiFileReaderOptions file_options;\n \n public:\n-\tvoid Serialize(FieldWriter &writer);\n+\tvoid Serialize(FieldWriter &writer) const;\n \tvoid Deserialize(FieldReader &reader);\n };\n \n@@ -57,7 +70,7 @@ struct JSONBufferHandle {\n \n struct JSONFileHandle {\n public:\n-\tJSONFileHandle(duckdb::unique_ptr<FileHandle> file_handle, Allocator &allocator);\n+\tJSONFileHandle(unique_ptr<FileHandle> file_handle, Allocator &allocator);\n \tvoid Close();\n \n \tidx_t FileSize() const;\n@@ -79,7 +92,7 @@ struct JSONFileHandle {\n \n private:\n \t//! The JSON file handle\n-\tduckdb::unique_ptr<FileHandle> file_handle;\n+\tunique_ptr<FileHandle> file_handle;\n \tAllocator &allocator;\n \n \t//! File properties\n@@ -99,17 +112,50 @@ struct JSONFileHandle {\n \n class BufferedJSONReader {\n public:\n-\tBufferedJSONReader(ClientContext &context, BufferedJSONReaderOptions options, string file_path);\n+\tBufferedJSONReader(ClientContext &context, BufferedJSONReaderOptions options, string file_name);\n \n+private:\n+\tClientContext &context;\n+\tBufferedJSONReaderOptions options;\n+\n+\t//! File name\n+\tconst string file_name;\n+\t//! File handle\n+\tunique_ptr<JSONFileHandle> file_handle;\n+\n+\t//! Next buffer index within the file\n+\tidx_t buffer_index;\n+\t//! Mapping from batch index to currently held buffers\n+\tunordered_map<idx_t, unique_ptr<JSONBufferHandle>> buffer_map;\n+\n+\t//! Line count per buffer\n+\tvector<int64_t> buffer_line_or_object_counts;\n+\n+public:\n+\tmutex lock;\n+\tMultiFileReaderData reader_data;\n+\n+public:\n \tvoid OpenJSONFile();\n \tvoid CloseJSONFile();\n-\tbool IsOpen();\n+\tbool IsOpen() const;\n \n \tBufferedJSONReaderOptions &GetOptions();\n+\tconst BufferedJSONReaderOptions &GetOptions() const;\n+\n+\tJSONFormat GetFormat() const;\n+\tvoid SetFormat(JSONFormat format);\n+\tJSONRecordType GetRecordType() const;\n+\tvoid SetRecordType(JSONRecordType type);\n+\n+\tbool IsParallel() const;\n+\n+\tconst string &GetFileName() const;\n \tJSONFileHandle &GetFileHandle() const;\n \n+public:\n \t//! Insert/get/remove buffer (grabs the lock)\n-\tvoid InsertBuffer(idx_t buffer_idx, duckdb::unique_ptr<JSONBufferHandle> &&buffer);\n+\tvoid InsertBuffer(idx_t buffer_idx, unique_ptr<JSONBufferHandle> &&buffer);\n \tJSONBufferHandle *GetBuffer(idx_t buffer_idx);\n \tAllocatedData RemoveBuffer(idx_t buffer_idx);\n \n@@ -127,27 +173,6 @@ class BufferedJSONReader {\n \n private:\n \tidx_t GetLineNumber(idx_t buf_index, idx_t line_or_object_in_buf);\n-\n-public:\n-\tmutex lock;\n-\n-\t//! File path\n-\tconst string file_path;\n-\n-private:\n-\tClientContext &context;\n-\tBufferedJSONReaderOptions options;\n-\n-\t//! File handle\n-\tduckdb::unique_ptr<JSONFileHandle> file_handle;\n-\n-\t//! Next buffer index within the file\n-\tidx_t buffer_index;\n-\t//! Mapping from batch index to currently held buffers\n-\tunordered_map<idx_t, duckdb::unique_ptr<JSONBufferHandle>> buffer_map;\n-\n-\t//! Line count per buffer\n-\tvector<int64_t> buffer_line_or_object_counts;\n };\n \n } // namespace duckdb\ndiff --git a/extension/json/include/json_common.hpp b/extension/json/include/json_common.hpp\nindex c50184d31a12..549a781932b2 100644\n--- a/extension/json/include/json_common.hpp\n+++ b/extension/json/include/json_common.hpp\n@@ -22,7 +22,7 @@ class JSONAllocator {\n \t    : arena_allocator(allocator), yyjson_allocator({Allocate, Reallocate, Free, &arena_allocator}) {\n \t}\n \n-\tinline yyjson_alc *GetYYJSONAllocator() {\n+\tinline yyjson_alc *GetYYAlc() {\n \t\treturn &yyjson_allocator;\n \t}\n \n@@ -62,7 +62,7 @@ struct JSONKeyHash {\n \t\t\tmemcpy(&result, k.ptr + k.len - sizeof(size_t), sizeof(size_t));\n \t\t} else {\n \t\t\tresult = 0;\n-\t\t\tduckdb::FastMemcpy(&result, k.ptr, k.len);\n+\t\t\tFastMemcpy(&result, k.ptr, k.len);\n \t\t}\n \t\treturn result;\n \t}\n@@ -73,7 +73,7 @@ struct JSONKeyEquality {\n \t\tif (a.len != b.len) {\n \t\t\treturn false;\n \t\t}\n-\t\treturn duckdb::FastMemcmp(a.ptr, b.ptr, a.len) == 0;\n+\t\treturn FastMemcmp(a.ptr, b.ptr, a.len) == 0;\n \t}\n };\n \n@@ -98,7 +98,8 @@ struct JSONCommon {\n public:\n \t//! Read/Write flags\n \tstatic constexpr auto READ_FLAG = YYJSON_READ_ALLOW_INF_AND_NAN | YYJSON_READ_ALLOW_TRAILING_COMMAS;\n-\tstatic constexpr auto STOP_READ_FLAG = READ_FLAG | YYJSON_READ_STOP_WHEN_DONE | YYJSON_READ_INSITU;\n+\tstatic constexpr auto READ_STOP_FLAG = READ_FLAG | YYJSON_READ_STOP_WHEN_DONE;\n+\tstatic constexpr auto READ_INSITU_FLAG = READ_STOP_FLAG | YYJSON_READ_INSITU;\n \tstatic constexpr auto WRITE_FLAG = YYJSON_WRITE_ALLOW_INF_AND_NAN;\n \tstatic constexpr auto WRITE_PRETTY_FLAG = YYJSON_WRITE_ALLOW_INF_AND_NAN | YYJSON_WRITE_PRETTY;\n \ndiff --git a/extension/json/include/json_executors.hpp b/extension/json/include/json_executors.hpp\nindex 64c082039d9b..09d196ea8dda 100644\n--- a/extension/json/include/json_executors.hpp\n+++ b/extension/json/include/json_executors.hpp\n@@ -20,7 +20,7 @@ struct JSONExecutors {\n \tstatic void UnaryExecute(DataChunk &args, ExpressionState &state, Vector &result,\n \t                         std::function<T(yyjson_val *, yyjson_alc *, Vector &)> fun) {\n \t\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\t\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\t\tauto alc = lstate.json_allocator.GetYYAlc();\n \n \t\tauto &inputs = args.data[0];\n \t\tUnaryExecutor::Execute<string_t, T>(inputs, result, args.size(), [&](string_t input) {\n@@ -34,36 +34,32 @@ struct JSONExecutors {\n \tstatic void BinaryExecute(DataChunk &args, ExpressionState &state, Vector &result,\n \t                          std::function<T(yyjson_val *, yyjson_alc *, Vector &)> fun) {\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tconst auto &info = (JSONReadFunctionData &)*func_expr.bind_info;\n+\t\tconst auto &info = func_expr.bind_info->Cast<JSONReadFunctionData>();\n \t\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\t\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\t\tauto alc = lstate.json_allocator.GetYYAlc();\n \n \t\tauto &inputs = args.data[0];\n-\t\tif (info.constant) {\n-\t\t\t// Constant path\n+\t\tif (info.constant) { // Constant path\n \t\t\tconst char *ptr = info.ptr;\n \t\t\tconst idx_t &len = info.len;\n \t\t\tUnaryExecutor::ExecuteWithNulls<string_t, T>(\n \t\t\t    inputs, result, args.size(), [&](string_t input, ValidityMask &mask, idx_t idx) {\n-\t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG,\n-\t\t\t\t                                        lstate.json_allocator.GetYYJSONAllocator());\n+\t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\t\t    auto val = JSONCommon::GetPointerUnsafe<yyjson_val>(doc->root, ptr, len);\n-\t\t\t\t    if (!val) {\n+\t\t\t\t    if (!val || unsafe_yyjson_is_null(val)) {\n \t\t\t\t\t    mask.SetInvalid(idx);\n \t\t\t\t\t    return T {};\n \t\t\t\t    } else {\n \t\t\t\t\t    return fun(val, alc, result);\n \t\t\t\t    }\n \t\t\t    });\n-\t\t} else {\n-\t\t\t// Columnref path\n+\t\t} else { // Columnref path\n \t\t\tauto &paths = args.data[1];\n \t\t\tBinaryExecutor::ExecuteWithNulls<string_t, string_t, T>(\n \t\t\t    inputs, paths, result, args.size(), [&](string_t input, string_t path, ValidityMask &mask, idx_t idx) {\n-\t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG,\n-\t\t\t\t                                        lstate.json_allocator.GetYYJSONAllocator());\n+\t\t\t\t    auto doc = JSONCommon::ReadDocument(input, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\t\t    auto val = JSONCommon::GetPointer<yyjson_val>(doc->root, path);\n-\t\t\t\t    if (!val) {\n+\t\t\t\t    if (!val || unsafe_yyjson_is_null(val)) {\n \t\t\t\t\t    mask.SetInvalid(idx);\n \t\t\t\t\t    return T {};\n \t\t\t\t    } else {\n@@ -81,9 +77,9 @@ struct JSONExecutors {\n \tstatic void ExecuteMany(DataChunk &args, ExpressionState &state, Vector &result,\n \t                        std::function<T(yyjson_val *, yyjson_alc *, Vector &)> fun) {\n \t\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\t\tconst auto &info = (JSONReadManyFunctionData &)*func_expr.bind_info;\n+\t\tconst auto &info = func_expr.bind_info->Cast<JSONReadManyFunctionData>();\n \t\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\t\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\t\tauto alc = lstate.json_allocator.GetYYAlc();\n \t\tD_ASSERT(info.ptrs.size() == info.lens.size());\n \n \t\tconst auto count = args.size();\n@@ -112,12 +108,11 @@ struct JSONExecutors {\n \t\t\t\tcontinue;\n \t\t\t}\n \n-\t\t\tauto doc = JSONCommon::ReadDocument(inputs[idx], JSONCommon::READ_FLAG,\n-\t\t\t                                    lstate.json_allocator.GetYYJSONAllocator());\n+\t\t\tauto doc = JSONCommon::ReadDocument(inputs[idx], JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\tfor (idx_t path_i = 0; path_i < num_paths; path_i++) {\n \t\t\t\tauto child_idx = offset + path_i;\n \t\t\t\tval = JSONCommon::GetPointerUnsafe<yyjson_val>(doc->root, info.ptrs[path_i], info.lens[path_i]);\n-\t\t\t\tif (!val) {\n+\t\t\t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\t\t\tchild_validity.SetInvalid(child_idx);\n \t\t\t\t} else {\n \t\t\t\t\tchild_data[child_idx] = fun(val, alc, child);\ndiff --git a/extension/json/include/json_functions.hpp b/extension/json/include/json_functions.hpp\nindex f59f38063e0c..4f78d0c6b4d5 100644\n--- a/extension/json/include/json_functions.hpp\n+++ b/extension/json/include/json_functions.hpp\n@@ -17,6 +17,7 @@ class TableRef;\n struct ReplacementScanData;\n class CastFunctionSet;\n struct CastParameters;\n+struct CastLocalStateParameters;\n struct JSONScanInfo;\n class BuiltinFunctions;\n \n@@ -56,6 +57,7 @@ struct JSONFunctionLocalState : public FunctionLocalState {\n \texplicit JSONFunctionLocalState(ClientContext &context);\n \tstatic unique_ptr<FunctionLocalState> Init(ExpressionState &state, const BoundFunctionExpression &expr,\n \t                                           FunctionData *bind_data);\n+\tstatic unique_ptr<FunctionLocalState> InitCastLocalState(CastLocalStateParameters &parameters);\n \tstatic JSONFunctionLocalState &ResetAndGet(ExpressionState &state);\n \n public:\n@@ -71,7 +73,9 @@ class JSONFunctions {\n \t                                                ReplacementScanData *data);\n \tstatic TableFunction GetReadJSONTableFunction(shared_ptr<JSONScanInfo> function_info);\n \tstatic CopyFunction GetJSONCopyFunction();\n-\tstatic void RegisterCastFunctions(CastFunctionSet &casts);\n+\tstatic void RegisterSimpleCastFunctions(CastFunctionSet &casts);\n+\tstatic void RegisterJSONCreateCastFunctions(CastFunctionSet &casts);\n+\tstatic void RegisterJSONTransformCastFunctions(CastFunctionSet &casts);\n \n private:\n \t// Scalar functions\n@@ -111,10 +115,13 @@ class JSONFunctions {\n \t// Table functions\n \tstatic TableFunctionSet GetReadJSONObjectsFunction();\n \tstatic TableFunctionSet GetReadNDJSONObjectsFunction();\n+\tstatic TableFunctionSet GetReadJSONObjectsAutoFunction();\n+\n \tstatic TableFunctionSet GetReadJSONFunction();\n \tstatic TableFunctionSet GetReadNDJSONFunction();\n \tstatic TableFunctionSet GetReadJSONAutoFunction();\n \tstatic TableFunctionSet GetReadNDJSONAutoFunction();\n+\n \tstatic TableFunctionSet GetExecuteJsonSerializedSqlFunction();\n };\n \ndiff --git a/extension/json/include/json_scan.hpp b/extension/json/include/json_scan.hpp\nindex 16c804f02e45..82b09fa90196 100644\n--- a/extension/json/include/json_scan.hpp\n+++ b/extension/json/include/json_scan.hpp\n@@ -9,7 +9,10 @@\n #pragma once\n \n #include \"buffered_json_reader.hpp\"\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/common/mutex.hpp\"\n+#include \"duckdb/common/pair.hpp\"\n+#include \"duckdb/common/types/type_map.hpp\"\n #include \"duckdb/function/scalar/strftime_format.hpp\"\n #include \"duckdb/function/table_function.hpp\"\n #include \"json_transform.hpp\"\n@@ -26,29 +29,29 @@ enum class JSONScanType : uint8_t {\n \tSAMPLE = 3,\n };\n \n-enum class JSONRecordType : uint8_t {\n-\t//! Sequential values\n-\tRECORDS = 0,\n-\t//! Array of values\n-\tARRAY_OF_RECORDS = 1,\n-\t//! Sequential non-object JSON\n-\tJSON = 2,\n-\t//! Array of non-object JSON\n-\tARRAY_OF_JSON = 3,\n-\t//! Auto-detect\n-\tAUTO = 4,\n-};\n+struct JSONString {\n+public:\n+\tJSONString() {\n+\t}\n+\tJSONString(const char *pointer_p, idx_t size_p) : pointer(pointer_p), size(size_p) {\n+\t}\n+\n+\tconst char *pointer;\n+\tidx_t size;\n+\n+public:\n+\tstring ToString() {\n+\t\treturn string(pointer, size);\n+\t}\n \n-//! Even though LogicalTypeId is just a uint8_t, this is still needed ...\n-struct LogicalTypeIdHash {\n-\tinline std::size_t operator()(const LogicalTypeId &id) const {\n-\t\treturn (size_t)id;\n+\tconst char &operator[](size_t i) const {\n+\t\treturn pointer[i];\n \t}\n };\n \n struct DateFormatMap {\n public:\n-\tvoid Initialize(const unordered_map<LogicalTypeId, vector<const char *>, LogicalTypeIdHash> &format_templates) {\n+\tvoid Initialize(const type_id_map_t<vector<const char *>> &format_templates) {\n \t\tfor (const auto &entry : format_templates) {\n \t\t\tconst auto &type = entry.first;\n \t\t\tfor (const auto &format_string : entry.second) {\n@@ -74,64 +77,79 @@ struct DateFormatMap {\n \t}\n \n \tStrpTimeFormat &GetFormat(LogicalTypeId type) {\n-\t\treturn candidate_formats[type].back();\n+\t\tD_ASSERT(candidate_formats.find(type) != candidate_formats.end());\n+\t\treturn candidate_formats.find(type)->second.back();\n+\t}\n+\n+\tconst StrpTimeFormat &GetFormat(LogicalTypeId type) const {\n+\t\tD_ASSERT(candidate_formats.find(type) != candidate_formats.end());\n+\t\treturn candidate_formats.find(type)->second.back();\n \t}\n \n private:\n-\tunordered_map<LogicalTypeId, vector<StrpTimeFormat>, LogicalTypeIdHash> candidate_formats;\n+\ttype_id_map_t<vector<StrpTimeFormat>> candidate_formats;\n };\n \n struct JSONScanData : public TableFunctionData {\n public:\n \tJSONScanData();\n \n-\tstatic unique_ptr<FunctionData> Bind(ClientContext &context, TableFunctionBindInput &input);\n+\tvoid Bind(ClientContext &context, TableFunctionBindInput &input);\n+\n+\tvoid InitializeReaders(ClientContext &context);\n \tvoid InitializeFormats();\n+\tvoid InitializeFormats(bool auto_detect);\n+\tvoid SetCompression(const string &compression);\n \n-\tvoid Serialize(FieldWriter &writer);\n-\tvoid Deserialize(FieldReader &reader);\n+\tvoid Serialize(FieldWriter &writer) const;\n+\tvoid Deserialize(ClientContext &context, FieldReader &reader);\n \n public:\n \t//! Scan type\n \tJSONScanType type;\n+\n \t//! File-specific options\n \tBufferedJSONReaderOptions options;\n+\n+\t//! Multi-file reader stuff\n+\tMultiFileReaderBindData reader_bind;\n+\n \t//! The files we're reading\n-\tvector<string> file_paths;\n+\tvector<string> files;\n+\t//! Initial file reader\n+\tunique_ptr<BufferedJSONReader> initial_reader;\n+\t//! The readers\n+\tvector<unique_ptr<BufferedJSONReader>> union_readers;\n \n \t//! Whether or not we should ignore malformed JSON (default to NULL)\n \tbool ignore_errors = false;\n-\t//! Maximum JSON object size (defaults to 1MB minimum)\n-\tidx_t maximum_object_size = 1048576;\n-\t//! Options when transforming the JSON to columnar data\n-\tJSONTransformOptions transform_options;\n-\n+\t//! Maximum JSON object size (defaults to 16MB minimum)\n+\tidx_t maximum_object_size = 16777216;\n \t//! Whether we auto-detect a schema\n \tbool auto_detect = false;\n \t//! Sample size for detecting schema\n-\tidx_t sample_size = STANDARD_VECTOR_SIZE;\n-\t//! Column names (in order)\n-\tvector<string> names;\n-\t//! Valid cols (ROW_TYPE cols are considered invalid)\n-\tvector<idx_t> valid_cols;\n+\tidx_t sample_size = idx_t(STANDARD_VECTOR_SIZE) * 10;\n \t//! Max depth we go to detect nested JSON schema (defaults to unlimited)\n \tidx_t max_depth = NumericLimits<idx_t>::Maximum();\n-\t//! Whether we're parsing values (usually), or something else\n-\tJSONRecordType record_type = JSONRecordType::RECORDS;\n+\n+\t//! All column names (in order)\n+\tvector<string> names;\n+\t//! Options when transforming the JSON to columnar data\n+\tJSONTransformOptions transform_options;\n \t//! Forced date/timestamp formats\n \tstring date_format;\n \tstring timestamp_format;\n-\n-\t//! Stored readers for when we're detecting the schema\n-\tvector<duckdb::unique_ptr<BufferedJSONReader>> stored_readers;\n \t//! Candidate date formats\n \tDateFormatMap date_format_map;\n+\n+\t//! The inferred avg tuple size\n+\tidx_t avg_tuple_size = 420;\n };\n \n struct JSONScanInfo : public TableFunctionInfo {\n public:\n \texplicit JSONScanInfo(JSONScanType type_p = JSONScanType::INVALID, JSONFormat format_p = JSONFormat::AUTO_DETECT,\n-\t                      JSONRecordType record_type_p = JSONRecordType::AUTO, bool auto_detect_p = false)\n+\t                      JSONRecordType record_type_p = JSONRecordType::AUTO_DETECT, bool auto_detect_p = false)\n \t    : type(type_p), format(format_p), record_type(record_type_p), auto_detect(auto_detect_p) {\n \t}\n \n@@ -143,11 +161,17 @@ struct JSONScanInfo : public TableFunctionInfo {\n \n struct JSONScanGlobalState {\n public:\n-\tJSONScanGlobalState(ClientContext &context, JSONScanData &bind_data);\n+\tJSONScanGlobalState(ClientContext &context, const JSONScanData &bind_data);\n \n public:\n \t//! Bound data\n-\tJSONScanData &bind_data;\n+\tconst JSONScanData &bind_data;\n+\t//! Options when transforming the JSON to columnar data\n+\tJSONTransformOptions transform_options;\n+\n+\t//! Column names that we're actually reading (after projection pushdown)\n+\tvector<string> names;\n+\tvector<column_t> column_indices;\n \n \t//! Buffer manager allocator\n \tAllocator &allocator;\n@@ -156,7 +180,7 @@ struct JSONScanGlobalState {\n \n \tmutex lock;\n \t//! One JSON reader per file\n-\tvector<duckdb::unique_ptr<BufferedJSONReader>> json_readers;\n+\tvector<optional_ptr<BufferedJSONReader>> json_readers;\n \t//! Current file/batch index\n \tidx_t file_index;\n \tatomic<idx_t> batch_index;\n@@ -165,62 +189,58 @@ struct JSONScanGlobalState {\n \tidx_t system_threads;\n };\n \n-struct JSONLine {\n-public:\n-\tJSONLine() {\n-\t}\n-\tJSONLine(const char *pointer_p, idx_t size_p) : pointer(pointer_p), size(size_p) {\n-\t}\n-\n-\tconst char *pointer;\n-\tidx_t size;\n-\n-public:\n-\tstring ToString() {\n-\t\treturn string(pointer, size);\n-\t}\n-\n-\tconst char &operator[](size_t i) const {\n-\t\treturn pointer[i];\n-\t}\n-};\n-\n struct JSONScanLocalState {\n public:\n \tJSONScanLocalState(ClientContext &context, JSONScanGlobalState &gstate);\n \n public:\n \tidx_t ReadNext(JSONScanGlobalState &gstate);\n-\tyyjson_alc *GetAllocator();\n \tvoid ThrowTransformError(idx_t object_index, const string &error_message);\n \n+\tyyjson_alc *GetAllocator();\n+\tconst MultiFileReaderData &GetReaderData() const;\n+\n+public:\n+\t//! Current scan data\n \tidx_t scan_count;\n-\tJSONLine lines[STANDARD_VECTOR_SIZE];\n+\tJSONString units[STANDARD_VECTOR_SIZE];\n \tyyjson_val *values[STANDARD_VECTOR_SIZE];\n \n-\tidx_t array_idx;\n-\tidx_t array_offset;\n-\tyyjson_val *array_values[STANDARD_VECTOR_SIZE];\n-\n+\t//! Batch index for order-preserving parallelism\n \tidx_t batch_index;\n \n \t//! Options when transforming the JSON to columnar data\n \tDateFormatMap date_format_map;\n \tJSONTransformOptions transform_options;\n \n+\t//! For determining average tuple size\n+\tidx_t total_read_size;\n+\tidx_t total_tuple_count;\n+\n private:\n-\tyyjson_val *ParseLine(char *line_start, idx_t line_size, idx_t remaining, JSONLine &line);\n-\tidx_t GetObjectsFromArray(JSONScanGlobalState &gstate);\n+\tbool ReadNextBuffer(JSONScanGlobalState &gstate);\n+\tvoid ReadNextBufferInternal(JSONScanGlobalState &gstate, idx_t &buffer_index);\n+\tvoid ReadNextBufferSeek(JSONScanGlobalState &gstate, idx_t &buffer_index);\n+\tvoid ReadNextBufferNoSeek(JSONScanGlobalState &gstate, idx_t &buffer_index);\n+\tvoid SkipOverArrayStart();\n+\n+\tbool ReadAndAutoDetect(JSONScanGlobalState &gstate, idx_t &buffer_index, const bool already_incremented_file_idx);\n+\tvoid ReconstructFirstObject(JSONScanGlobalState &gstate);\n+\tvoid ParseNextChunk();\n+\n+\tvoid ParseJSON(char *const json_start, const idx_t json_size, const idx_t remaining);\n+\tvoid ThrowObjectSizeError(const idx_t object_size);\n+\tvoid ThrowInvalidAtEndError();\n \n private:\n \t//! Bind data\n-\tJSONScanData &bind_data;\n+\tconst JSONScanData &bind_data;\n \t//! Thread-local allocator\n-\tJSONAllocator json_allocator;\n+\tJSONAllocator allocator;\n \n \t//! Current reader and buffer handle\n-\tBufferedJSONReader *current_reader;\n-\tJSONBufferHandle *current_buffer_handle;\n+\toptional_ptr<BufferedJSONReader> current_reader;\n+\toptional_ptr<JSONBufferHandle> current_buffer_handle;\n \t//! Whether this is the last batch of the file\n \tbool is_last;\n \n@@ -233,26 +253,12 @@ struct JSONScanLocalState {\n \n \t//! Buffer to reconstruct split values\n \tAllocatedData reconstruct_buffer;\n-\t//! Copy of current buffer for YYJSON_READ_INSITU\n-\tAllocatedData current_buffer_copy;\n-\tconst char *buffer_copy_ptr;\n-\n-private:\n-\tbool ReadNextBuffer(JSONScanGlobalState &gstate);\n-\tvoid ReadNextBuffer(JSONScanGlobalState &gstate, idx_t &buffer_index);\n-\tvoid ReadNextBufferSeek(JSONScanGlobalState &gstate, idx_t &buffer_index);\n-\tvoid ReadNextBufferNoSeek(JSONScanGlobalState &gstate, idx_t &buffer_index);\n-\n-\tvoid ReconstructFirstObject(JSONScanGlobalState &gstate);\n-\n-\tvoid ReadUnstructured(idx_t &count);\n-\tvoid ReadNewlineDelimited(idx_t &count);\n };\n \n struct JSONGlobalTableFunctionState : public GlobalTableFunctionState {\n public:\n \tJSONGlobalTableFunctionState(ClientContext &context, TableFunctionInitInput &input);\n-\tstatic duckdb::unique_ptr<GlobalTableFunctionState> Init(ClientContext &context, TableFunctionInitInput &input);\n+\tstatic unique_ptr<GlobalTableFunctionState> Init(ClientContext &context, TableFunctionInitInput &input);\n \tidx_t MaxThreads() const override;\n \n public:\n@@ -262,8 +268,8 @@ struct JSONGlobalTableFunctionState : public GlobalTableFunctionState {\n struct JSONLocalTableFunctionState : public LocalTableFunctionState {\n public:\n \tJSONLocalTableFunctionState(ClientContext &context, JSONScanGlobalState &gstate);\n-\tstatic duckdb::unique_ptr<LocalTableFunctionState> Init(ExecutionContext &context, TableFunctionInitInput &input,\n-\t                                                        GlobalTableFunctionState *global_state);\n+\tstatic unique_ptr<LocalTableFunctionState> Init(ExecutionContext &context, TableFunctionInitInput &input,\n+\t                                                GlobalTableFunctionState *global_state);\n \tidx_t GetBatchIndex() const;\n \n public:\n@@ -275,70 +281,18 @@ struct JSONScan {\n \tstatic void AutoDetect(ClientContext &context, JSONScanData &bind_data, vector<LogicalType> &return_types,\n \t                       vector<string> &names);\n \n-\tstatic void InitializeBindData(ClientContext &context, JSONScanData &bind_data,\n-\t                               const named_parameter_map_t &named_parameters, vector<string> &names,\n-\t                               vector<LogicalType> &return_types);\n+\tstatic double ScanProgress(ClientContext &context, const FunctionData *bind_data_p,\n+\t                           const GlobalTableFunctionState *global_state);\n+\tstatic idx_t GetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,\n+\t                           LocalTableFunctionState *local_state, GlobalTableFunctionState *global_state);\n+\tstatic unique_ptr<NodeStatistics> Cardinality(ClientContext &context, const FunctionData *bind_data);\n+\tstatic void ComplexFilterPushdown(ClientContext &context, LogicalGet &get, FunctionData *bind_data_p,\n+\t                                  vector<unique_ptr<Expression>> &filters);\n \n-\tstatic double JSONScanProgress(ClientContext &context, const FunctionData *bind_data_p,\n-\t                               const GlobalTableFunctionState *global_state) {\n-\t\tauto &gstate = ((JSONGlobalTableFunctionState &)*global_state).state;\n-\t\tdouble progress = 0;\n-\t\tfor (auto &reader : gstate.json_readers) {\n-\t\t\tprogress += reader->GetProgress();\n-\t\t}\n-\t\treturn progress / double(gstate.json_readers.size());\n-\t}\n+\tstatic void Serialize(FieldWriter &writer, const FunctionData *bind_data_p, const TableFunction &function);\n+\tstatic unique_ptr<FunctionData> Deserialize(ClientContext &context, FieldReader &reader, TableFunction &function);\n \n-\tstatic idx_t JSONScanGetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,\n-\t                                   LocalTableFunctionState *local_state, GlobalTableFunctionState *global_state) {\n-\t\tauto &lstate = (JSONLocalTableFunctionState &)*local_state;\n-\t\treturn lstate.GetBatchIndex();\n-\t}\n-\n-\tstatic unique_ptr<NodeStatistics> JSONScanCardinality(ClientContext &context, const FunctionData *bind_data) {\n-\t\tauto &data = (JSONScanData &)*bind_data;\n-\t\tidx_t per_file_cardinality;\n-\t\tif (data.stored_readers.empty()) {\n-\t\t\t// The cardinality of an unknown JSON file is the almighty number 42 except when it's not\n-\t\t\tper_file_cardinality = 42;\n-\t\t} else {\n-\t\t\t// If we multiply the almighty number 42 by 10, we get the exact average size of a JSON\n-\t\t\t// Not really, but the average size of a lineitem row in JSON is around 360 bytes\n-\t\t\tper_file_cardinality = data.stored_readers[0]->GetFileHandle().FileSize() / 420;\n-\t\t}\n-\t\t// Obviously this can be improved but this is better than defaulting to 0\n-\t\treturn make_uniq<NodeStatistics>(per_file_cardinality * data.file_paths.size());\n-\t}\n-\n-\tstatic void JSONScanSerialize(FieldWriter &writer, const FunctionData *bind_data_p, const TableFunction &function) {\n-\t\tauto &bind_data = (JSONScanData &)*bind_data_p;\n-\t\tbind_data.Serialize(writer);\n-\t}\n-\n-\tstatic duckdb::unique_ptr<FunctionData> JSONScanDeserialize(ClientContext &context, FieldReader &reader,\n-\t                                                            TableFunction &function) {\n-\t\tauto result = make_uniq<JSONScanData>();\n-\t\tresult->Deserialize(reader);\n-\t\treturn std::move(result);\n-\t}\n-\n-\tstatic void TableFunctionDefaults(TableFunction &table_function) {\n-\t\ttable_function.named_parameters[\"maximum_object_size\"] = LogicalType::UINTEGER;\n-\t\ttable_function.named_parameters[\"ignore_errors\"] = LogicalType::BOOLEAN;\n-\t\ttable_function.named_parameters[\"lines\"] = LogicalType::VARCHAR;\n-\t\ttable_function.named_parameters[\"compression\"] = LogicalType::VARCHAR;\n-\n-\t\ttable_function.table_scan_progress = JSONScanProgress;\n-\t\ttable_function.get_batch_index = JSONScanGetBatchIndex;\n-\t\ttable_function.cardinality = JSONScanCardinality;\n-\n-\t\ttable_function.serialize = JSONScanSerialize;\n-\t\ttable_function.deserialize = JSONScanDeserialize;\n-\n-\t\ttable_function.projection_pushdown = false;\n-\t\ttable_function.filter_pushdown = false;\n-\t\ttable_function.filter_prune = false;\n-\t}\n+\tstatic void TableFunctionDefaults(TableFunction &table_function);\n };\n \n } // namespace duckdb\ndiff --git a/extension/json/include/json_transform.hpp b/extension/json/include/json_transform.hpp\nindex 9f92b6506048..68ada36e1683 100644\n--- a/extension/json/include/json_transform.hpp\n+++ b/extension/json/include/json_transform.hpp\n@@ -32,17 +32,17 @@ struct JSONTransformOptions {\n \t//! Throws an error if an object has a key we didn't know about\n \tbool error_unknown_key = false;\n \n-\t//! JSON reader for adding line number information to transform errors (can be NULL)\n-\tbool from_file = false;\n+\t//! Whether to delay the error when transforming (e.g., when non-strict casting or reading from file)\n+\tbool delay_error = false;\n \t//! Date format used for parsing (can be NULL)\n-\tDateFormatMap *date_format_map = nullptr;\n+\toptional_ptr<DateFormatMap> date_format_map = nullptr;\n \t//! String to store errors in\n \tstring error_message;\n \t//! Index of the object where the error occurred\n \tidx_t object_index = DConstants::INVALID_INDEX;\n \n public:\n-\tvoid Serialize(FieldWriter &writer);\n+\tvoid Serialize(FieldWriter &writer) const;\n \tvoid Deserialize(FieldReader &reader);\n };\n \ndiff --git a/extension/json/json-extension.cpp b/extension/json/json-extension.cpp\nindex 5432602b9648..7fb530cb2124 100644\n--- a/extension/json/json-extension.cpp\n+++ b/extension/json/json-extension.cpp\n@@ -3,12 +3,14 @@\n \n #include \"duckdb/catalog/catalog_entry/macro_catalog_entry.hpp\"\n #include \"duckdb/catalog/default/default_functions.hpp\"\n-#include \"duckdb/main/extension_util.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n+#include \"duckdb/function/copy_function.hpp\"\n+#include \"duckdb/main/extension_util.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n #include \"duckdb/parser/expression/function_expression.hpp\"\n+#include \"duckdb/parser/parsed_data/create_pragma_function_info.hpp\"\n+#include \"duckdb/parser/parsed_data/create_type_info.hpp\"\n #include \"duckdb/parser/tableref/table_function_ref.hpp\"\n-#include \"duckdb/function/copy_function.hpp\"\n #include \"json_common.hpp\"\n #include \"json_functions.hpp\"\n \n@@ -28,7 +30,9 @@ void JSONExtension::Load(DuckDB &db) {\n \tExtensionUtil::RegisterType(db_instance, JSONCommon::JSON_TYPE_NAME, std::move(json_type));\n \n \t// JSON casts\n-\tJSONFunctions::RegisterCastFunctions(DBConfig::GetConfig(db_instance).GetCastFunctions());\n+\tJSONFunctions::RegisterSimpleCastFunctions(DBConfig::GetConfig(db_instance).GetCastFunctions());\n+\tJSONFunctions::RegisterJSONCreateCastFunctions(DBConfig::GetConfig(db_instance).GetCastFunctions());\n+\tJSONFunctions::RegisterJSONTransformCastFunctions(DBConfig::GetConfig(db_instance).GetCastFunctions());\n \n \t// JSON scalar functions\n \tfor (auto &fun : JSONFunctions::GetScalarFunctions()) {\ndiff --git a/extension/json/json_common.cpp b/extension/json/json_common.cpp\nindex 1cbcc5ec0a26..0786b22f7509 100644\n--- a/extension/json/json_common.cpp\n+++ b/extension/json/json_common.cpp\n@@ -5,7 +5,7 @@ namespace duckdb {\n string JSONCommon::ValToString(yyjson_val *val, idx_t max_len) {\n \tJSONAllocator json_allocator(Allocator::DefaultAllocator());\n \tidx_t len;\n-\tauto data = JSONCommon::WriteVal<yyjson_val>(val, json_allocator.GetYYJSONAllocator(), len);\n+\tauto data = JSONCommon::WriteVal<yyjson_val>(val, json_allocator.GetYYAlc(), len);\n \tif (max_len < len) {\n \t\treturn string(data, max_len) + \"...\";\n \t} else {\ndiff --git a/extension/json/json_functions.cpp b/extension/json/json_functions.cpp\nindex b471ccea26b7..b30c8f832d52 100644\n--- a/extension/json/json_functions.cpp\n+++ b/extension/json/json_functions.cpp\n@@ -1,13 +1,14 @@\n #include \"json_functions.hpp\"\n \n+#include \"duckdb/common/file_system.hpp\"\n #include \"duckdb/execution/expression_executor.hpp\"\n #include \"duckdb/function/cast/cast_function_set.hpp\"\n #include \"duckdb/function/cast/default_casts.hpp\"\n #include \"duckdb/function/replacement_scan.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n #include \"duckdb/parser/expression/function_expression.hpp\"\n-#include \"duckdb/parser/tableref/table_function_ref.hpp\"\n #include \"duckdb/parser/parsed_data/create_pragma_function_info.hpp\"\n+#include \"duckdb/parser/tableref/table_function_ref.hpp\"\n \n namespace duckdb {\n \n@@ -50,7 +51,7 @@ bool JSONReadFunctionData::Equals(const FunctionData &other_p) const {\n }\n \n unique_ptr<FunctionData> JSONReadFunctionData::Bind(ClientContext &context, ScalarFunction &bound_function,\n-                                                    vector<duckdb::unique_ptr<Expression>> &arguments) {\n+                                                    vector<unique_ptr<Expression>> &arguments) {\n \tD_ASSERT(bound_function.arguments.size() == 2);\n \tbool constant = false;\n \tstring path = \"\";\n@@ -80,7 +81,7 @@ bool JSONReadManyFunctionData::Equals(const FunctionData &other_p) const {\n }\n \n unique_ptr<FunctionData> JSONReadManyFunctionData::Bind(ClientContext &context, ScalarFunction &bound_function,\n-                                                        vector<duckdb::unique_ptr<Expression>> &arguments) {\n+                                                        vector<unique_ptr<Expression>> &arguments) {\n \tD_ASSERT(bound_function.arguments.size() == 2);\n \tif (arguments[1]->HasParameter()) {\n \t\tthrow ParameterNotResolvedException();\n@@ -115,6 +116,14 @@ unique_ptr<FunctionLocalState> JSONFunctionLocalState::Init(ExpressionState &sta\n \treturn make_uniq<JSONFunctionLocalState>(state.GetContext());\n }\n \n+unique_ptr<FunctionLocalState> JSONFunctionLocalState::InitCastLocalState(CastLocalStateParameters &parameters) {\n+\tif (parameters.context) {\n+\t\treturn make_uniq<JSONFunctionLocalState>(*parameters.context);\n+\t} else {\n+\t\treturn make_uniq<JSONFunctionLocalState>(Allocator::DefaultAllocator());\n+\t}\n+}\n+\n JSONFunctionLocalState &JSONFunctionLocalState::ResetAndGet(ExpressionState &state) {\n \tauto &lstate = ExecuteFunctionState::GetFunctionState(state)->Cast<JSONFunctionLocalState>();\n \tlstate.json_allocator.Reset();\n@@ -165,6 +174,7 @@ vector<TableFunctionSet> JSONFunctions::GetTableFunctions() {\n \t// Reads JSON as string\n \tfunctions.push_back(GetReadJSONObjectsFunction());\n \tfunctions.push_back(GetReadNDJSONObjectsFunction());\n+\tfunctions.push_back(GetReadJSONObjectsAutoFunction());\n \n \t// Read JSON as columnar data\n \tfunctions.push_back(GetReadJSONFunction());\n@@ -191,39 +201,38 @@ unique_ptr<TableRef> JSONFunctions::ReadJSONReplacement(ClientContext &context,\n \t\treturn nullptr;\n \t}\n \tauto table_function = make_uniq<TableFunctionRef>();\n-\tvector<duckdb::unique_ptr<ParsedExpression>> children;\n+\tvector<unique_ptr<ParsedExpression>> children;\n \tchildren.push_back(make_uniq<ConstantExpression>(Value(table_name)));\n \ttable_function->function = make_uniq<FunctionExpression>(\"read_json_auto\", std::move(children));\n-\treturn std::move(table_function);\n-}\n \n-static duckdb::unique_ptr<FunctionLocalState> InitJSONCastLocalState(CastLocalStateParameters &parameters) {\n-\tif (parameters.context) {\n-\t\treturn make_uniq<JSONFunctionLocalState>(*parameters.context);\n-\t} else {\n-\t\treturn make_uniq<JSONFunctionLocalState>(Allocator::DefaultAllocator());\n+\tif (!FileSystem::HasGlob(table_name)) {\n+\t\ttable_function->alias = FileSystem::ExtractBaseName(table_name);\n \t}\n+\n+\treturn std::move(table_function);\n }\n \n static bool CastVarcharToJSON(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n \tauto &lstate = parameters.local_state->Cast<JSONFunctionLocalState>();\n \tlstate.json_allocator.Reset();\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n \n \tbool success = true;\n \tUnaryExecutor::ExecuteWithNulls<string_t, string_t>(\n \t    source, result, count, [&](string_t input, ValidityMask &mask, idx_t idx) {\n \t\t    auto data = (char *)(input.GetData());\n \t\t    auto length = input.GetSize();\n-\t\t    yyjson_read_err error;\n \n+\t\t    yyjson_read_err error;\n \t\t    auto doc = JSONCommon::ReadDocumentUnsafe(data, length, JSONCommon::READ_FLAG, alc, &error);\n \n \t\t    if (!doc) {\n-\t\t\t    HandleCastError::AssignError(JSONCommon::FormatParseError(data, length, error),\n-\t\t\t                                 parameters.error_message);\n \t\t\t    mask.SetInvalid(idx);\n-\t\t\t    success = false;\n+\t\t\t    if (success) {\n+\t\t\t\t    HandleCastError::AssignError(JSONCommon::FormatParseError(data, length, error),\n+\t\t\t\t                                 parameters.error_message);\n+\t\t\t\t    success = false;\n+\t\t\t    }\n \t\t    }\n \t\t    return input;\n \t    });\n@@ -231,13 +240,13 @@ static bool CastVarcharToJSON(Vector &source, Vector &result, idx_t count, CastP\n \treturn success;\n }\n \n-void JSONFunctions::RegisterCastFunctions(CastFunctionSet &casts) {\n+void JSONFunctions::RegisterSimpleCastFunctions(CastFunctionSet &casts) {\n \t// JSON to VARCHAR is basically free\n \tcasts.RegisterCastFunction(JSONCommon::JSONType(), LogicalType::VARCHAR, DefaultCasts::ReinterpretCast, 1);\n \n \t// VARCHAR to JSON requires a parse so it's not free. Let's make it 1 more than a cast to STRUCT\n \tauto varchar_to_json_cost = casts.ImplicitCastCost(LogicalType::SQLNULL, LogicalTypeId::STRUCT) + 1;\n-\tBoundCastInfo info(CastVarcharToJSON, nullptr, InitJSONCastLocalState);\n+\tBoundCastInfo info(CastVarcharToJSON, nullptr, JSONFunctionLocalState::InitCastLocalState);\n \tcasts.RegisterCastFunction(LogicalType::VARCHAR, JSONCommon::JSONType(), std::move(info), varchar_to_json_cost);\n \n \t// Register NULL to JSON with a different cost than NULL to VARCHAR so the binder can disambiguate functions\ndiff --git a/extension/json/json_functions/copy_json.cpp b/extension/json/json_functions/copy_json.cpp\nindex 231c5bc65b8d..cdd6ae449e21 100644\n--- a/extension/json/json_functions/copy_json.cpp\n+++ b/extension/json/json_functions/copy_json.cpp\n@@ -11,11 +11,47 @@\n \n namespace duckdb {\n \n+static void ThrowJSONCopyParameterException(const string &loption) {\n+\tthrow BinderException(\"COPY (FORMAT JSON) parameter %s expects a single argument.\");\n+}\n+\n static BoundStatement CopyToJSONPlan(Binder &binder, CopyStatement &stmt) {\n \tauto stmt_copy = stmt.Copy();\n \tauto &copy = stmt_copy->Cast<CopyStatement>();\n \tauto &info = *copy.info;\n \n+\t// Parse the options, creating options for the CSV writer while doing so\n+\tstring date_format;\n+\tstring timestamp_format;\n+\tcase_insensitive_map_t<vector<Value>> csv_copy_options;\n+\tfor (const auto &kv : info.options) {\n+\t\tconst auto &loption = StringUtil::Lower(kv.first);\n+\t\tif (loption == \"dateformat\" || loption == \"date_format\") {\n+\t\t\tif (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\tdate_format = StringValue::Get(kv.second.back());\n+\t\t} else if (loption == \"timestampformat\" || loption == \"timestamp_format\") {\n+\t\t\tif (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\ttimestamp_format = StringValue::Get(kv.second.back());\n+\t\t} else if (loption == \"compression\") {\n+\t\t\tcsv_copy_options.insert(kv);\n+\t\t} else if (loption == \"array\") {\n+\t\t\tif (kv.second.size() > 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\tif (kv.second.empty() || BooleanValue::Get(kv.second.back().DefaultCastAs(LogicalTypeId::BOOLEAN))) {\n+\t\t\t\tcsv_copy_options[\"prefix\"] = {\"[\\n\\t\"};\n+\t\t\t\tcsv_copy_options[\"suffix\"] = {\"\\n]\\n\"};\n+\t\t\t\tcsv_copy_options[\"new_line\"] = {\",\\n\\t\"};\n+\t\t\t}\n+\t\t} else {\n+\t\t\tthrow BinderException(\"Unknown option for COPY ... TO ... (FORMAT JSON): \\\"%s\\\".\", loption);\n+\t\t}\n+\t}\n+\n \t// Bind the select statement of the original to resolve the types\n \tauto dummy_binder = Binder::CreateBinder(binder.context, &binder, true);\n \tauto bound_original = dummy_binder->Bind(*stmt.select_statement);\n@@ -29,26 +65,24 @@ static BoundStatement CopyToJSONPlan(Binder &binder, CopyStatement &stmt) {\n \tnew_select_node.from_table = std::move(subquery_ref);\n \n \t// Create new select list\n-\tvector<duckdb::unique_ptr<ParsedExpression>> select_list;\n+\tvector<unique_ptr<ParsedExpression>> select_list;\n \tselect_list.reserve(bound_original.types.size());\n \n \t// strftime if the user specified a format (loop also gives columns a name, needed for struct_pack)\n \t// TODO: deal with date/timestamp within nested types\n-\tconst auto date_it = info.options.find(\"dateformat\");\n-\tconst auto timestamp_it = info.options.find(\"timestampformat\");\n-\tvector<duckdb::unique_ptr<ParsedExpression>> strftime_children;\n+\tvector<unique_ptr<ParsedExpression>> strftime_children;\n \tfor (idx_t col_idx = 0; col_idx < bound_original.types.size(); col_idx++) {\n \t\tauto column = make_uniq_base<ParsedExpression, PositionalReferenceExpression>(col_idx + 1);\n-\t\tstrftime_children.clear();\n+\t\tstrftime_children = vector<unique_ptr<ParsedExpression>>();\n \t\tconst auto &type = bound_original.types[col_idx];\n \t\tconst auto &name = bound_original.names[col_idx];\n-\t\tif (date_it != info.options.end() && type == LogicalTypeId::DATE) {\n+\t\tif (!date_format.empty() && type == LogicalTypeId::DATE) {\n \t\t\tstrftime_children.emplace_back(std::move(column));\n-\t\t\tstrftime_children.emplace_back(make_uniq<ConstantExpression>(date_it->second.back()));\n+\t\t\tstrftime_children.emplace_back(make_uniq<ConstantExpression>(date_format));\n \t\t\tcolumn = make_uniq<FunctionExpression>(\"strftime\", std::move(strftime_children));\n-\t\t} else if (timestamp_it != info.options.end() && type == LogicalTypeId::TIMESTAMP) {\n+\t\t} else if (!timestamp_format.empty() && type == LogicalTypeId::TIMESTAMP) {\n \t\t\tstrftime_children.emplace_back(std::move(column));\n-\t\t\tstrftime_children.emplace_back(make_uniq<ConstantExpression>(timestamp_it->second.back()));\n+\t\t\tstrftime_children.emplace_back(make_uniq<ConstantExpression>(timestamp_format));\n \t\t\tcolumn = make_uniq<FunctionExpression>(\"strftime\", std::move(strftime_children));\n \t\t}\n \t\tcolumn->alias = name;\n@@ -63,6 +97,7 @@ static BoundStatement CopyToJSONPlan(Binder &binder, CopyStatement &stmt) {\n \n \t// Now we can just use the CSV writer\n \tinfo.format = \"csv\";\n+\tinfo.options = std::move(csv_copy_options);\n \tinfo.options[\"quote\"] = {\"\"};\n \tinfo.options[\"escape\"] = {\"\"};\n \tinfo.options[\"delimiter\"] = {\"\\n\"};\n@@ -71,37 +106,69 @@ static BoundStatement CopyToJSONPlan(Binder &binder, CopyStatement &stmt) {\n \treturn binder.Bind(*stmt_copy);\n }\n \n-static duckdb::unique_ptr<FunctionData> CopyFromJSONBind(ClientContext &context, CopyInfo &info,\n-                                                         vector<string> &expected_names,\n-                                                         vector<LogicalType> &expected_types) {\n+static unique_ptr<FunctionData> CopyFromJSONBind(ClientContext &context, CopyInfo &info, vector<string> &expected_names,\n+                                                 vector<LogicalType> &expected_types) {\n \tauto bind_data = make_uniq<JSONScanData>();\n+\tbind_data->type = JSONScanType::READ_JSON;\n+\tbind_data->options.record_type = JSONRecordType::RECORDS;\n+\tbind_data->options.format = JSONFormat::NEWLINE_DELIMITED;\n \n-\tbind_data->file_paths.emplace_back(info.file_path);\n+\tbind_data->files.emplace_back(info.file_path);\n \tbind_data->names = expected_names;\n-\tfor (idx_t col_idx = 0; col_idx < expected_names.size(); col_idx++) {\n-\t\tbind_data->valid_cols.emplace_back(col_idx);\n-\t}\n \n-\tauto it = info.options.find(\"dateformat\");\n-\tif (it == info.options.end()) {\n-\t\tit = info.options.find(\"date_format\");\n+\tbool auto_detect = false;\n+\tfor (auto &kv : info.options) {\n+\t\tconst auto &loption = StringUtil::Lower(kv.first);\n+\t\tif (loption == \"dateformat\" || loption == \"date_format\") {\n+\t\t\tif (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\tbind_data->date_format = StringValue::Get(kv.second.back());\n+\t\t} else if (loption == \"timestampformat\" || loption == \"timestamp_format\") {\n+\t\t\tif (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\tbind_data->timestamp_format = StringValue::Get(kv.second.back());\n+\t\t} else if (loption == \"auto_detect\") {\n+\t\t\tif (kv.second.empty()) {\n+\t\t\t\tauto_detect = true;\n+\t\t\t} else if (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t} else {\n+\t\t\t\tauto_detect = BooleanValue::Get(kv.second.back().DefaultCastAs(LogicalTypeId::BOOLEAN));\n+\t\t\t}\n+\t\t} else if (loption == \"compression\") {\n+\t\t\tif (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t}\n+\t\t\tbind_data->SetCompression(StringValue::Get(kv.second.back()));\n+\t\t} else if (loption == \"array\") {\n+\t\t\tif (kv.second.empty()) {\n+\t\t\t\tbind_data->options.format = JSONFormat::ARRAY;\n+\t\t\t} else if (kv.second.size() != 1) {\n+\t\t\t\tThrowJSONCopyParameterException(loption);\n+\t\t\t} else if (BooleanValue::Get(kv.second.back().DefaultCastAs(LogicalTypeId::BOOLEAN))) {\n+\t\t\t\tbind_data->options.format = JSONFormat::ARRAY;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tthrow BinderException(\"Unknown option for COPY ... FROM ... (FORMAT JSON): \\\"%s\\\".\", loption);\n+\t\t}\n \t}\n-\tif (it != info.options.end()) {\n-\t\tbind_data->date_format = StringValue::Get(it->second.back());\n+\tbind_data->InitializeFormats(auto_detect);\n+\tif (auto_detect && bind_data->options.format != JSONFormat::ARRAY) {\n+\t\tbind_data->options.format = JSONFormat::AUTO_DETECT;\n \t}\n \n-\tit = info.options.find(\"timestampformat\");\n-\tif (it == info.options.end()) {\n-\t\tit = info.options.find(\"timestamp_format\");\n-\t}\n-\tif (it != info.options.end()) {\n-\t\tbind_data->timestamp_format = StringValue::Get(it->second.back());\n-\t}\n+\tbind_data->transform_options = JSONTransformOptions(true, true, true, true);\n+\tbind_data->transform_options.delay_error = true;\n \n-\tbind_data->InitializeFormats();\n+\tbind_data->InitializeReaders(context);\n+\tif (auto_detect) {\n+\t\tJSONScan::AutoDetect(context, *bind_data, expected_types, expected_names);\n+\t\tbind_data->auto_detect = true;\n+\t}\n \n-\tbind_data->transform_options = JSONTransformOptions(true, true, true, true);\n-\tbind_data->transform_options.from_file = true;\n+\tbind_data->transform_options.date_format_map = &bind_data->date_format_map;\n \n \treturn std::move(bind_data);\n }\n@@ -113,8 +180,8 @@ CopyFunction JSONFunctions::GetJSONCopyFunction() {\n \tfunction.plan = CopyToJSONPlan;\n \n \tfunction.copy_from_bind = CopyFromJSONBind;\n-\tfunction.copy_from_function = JSONFunctions::GetReadJSONTableFunction(\n-\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::AUTO_DETECT, JSONRecordType::RECORDS, false));\n+\tfunction.copy_from_function = JSONFunctions::GetReadJSONTableFunction(make_shared<JSONScanInfo>(\n+\t    JSONScanType::READ_JSON, JSONFormat::NEWLINE_DELIMITED, JSONRecordType::RECORDS, false));\n \n \treturn function;\n }\ndiff --git a/extension/json/json_functions/json_contains.cpp b/extension/json/json_functions/json_contains.cpp\nindex 64cb070a8a06..922e3ad2b1d2 100644\n--- a/extension/json/json_functions/json_contains.cpp\n+++ b/extension/json/json_functions/json_contains.cpp\n@@ -115,20 +115,19 @@ static void JSONContainsFunction(DataChunk &args, ExpressionState &state, Vector\n \n \tif (needles.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n \t\tauto &needle_str = *ConstantVector::GetData<string_t>(needles);\n-\t\tauto needle_doc =\n-\t\t    JSONCommon::ReadDocument(needle_str, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYJSONAllocator());\n+\t\tauto needle_doc = JSONCommon::ReadDocument(needle_str, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\tUnaryExecutor::Execute<string_t, bool>(haystacks, result, args.size(), [&](string_t haystack_str) {\n-\t\t\tauto haystack_doc = JSONCommon::ReadDocument(haystack_str, JSONCommon::READ_FLAG,\n-\t\t\t                                             lstate.json_allocator.GetYYJSONAllocator());\n+\t\t\tauto haystack_doc =\n+\t\t\t    JSONCommon::ReadDocument(haystack_str, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\treturn JSONContains(haystack_doc->root, needle_doc->root);\n \t\t});\n \t} else {\n \t\tBinaryExecutor::Execute<string_t, string_t, bool>(\n \t\t    haystacks, needles, result, args.size(), [&](string_t haystack_str, string_t needle_str) {\n-\t\t\t    auto needle_doc = JSONCommon::ReadDocument(needle_str, JSONCommon::READ_FLAG,\n-\t\t\t                                               lstate.json_allocator.GetYYJSONAllocator());\n-\t\t\t    auto haystack_doc = JSONCommon::ReadDocument(haystack_str, JSONCommon::READ_FLAG,\n-\t\t\t                                                 lstate.json_allocator.GetYYJSONAllocator());\n+\t\t\t    auto needle_doc =\n+\t\t\t        JSONCommon::ReadDocument(needle_str, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n+\t\t\t    auto haystack_doc =\n+\t\t\t        JSONCommon::ReadDocument(haystack_str, JSONCommon::READ_FLAG, lstate.json_allocator.GetYYAlc());\n \t\t\t    return JSONContains(haystack_doc->root, needle_doc->root);\n \t\t    });\n \t}\ndiff --git a/extension/json/json_functions/json_create.cpp b/extension/json/json_functions/json_create.cpp\nindex 73d77cd298bd..e054990b64c1 100644\n--- a/extension/json/json_functions/json_create.cpp\n+++ b/extension/json/json_functions/json_create.cpp\n@@ -1,17 +1,21 @@\n+#include \"duckdb/function/cast/cast_function_set.hpp\"\n+#include \"duckdb/function/cast/default_casts.hpp\"\n #include \"duckdb/planner/expression/bound_parameter_expression.hpp\"\n #include \"json_common.hpp\"\n #include \"json_functions.hpp\"\n \n namespace duckdb {\n \n+using StructNames = unordered_map<string, unique_ptr<Vector>>;\n+\n struct JSONCreateFunctionData : public FunctionData {\n public:\n-\texplicit JSONCreateFunctionData(unordered_map<string, duckdb::unique_ptr<Vector>> const_struct_names)\n+\texplicit JSONCreateFunctionData(unordered_map<string, unique_ptr<Vector>> const_struct_names)\n \t    : const_struct_names(std::move(const_struct_names)) {\n \t}\n-\tduckdb::unique_ptr<FunctionData> Copy() const override {\n+\tunique_ptr<FunctionData> Copy() const override {\n \t\t// Have to do this because we can't implicitly copy Vector\n-\t\tunordered_map<string, duckdb::unique_ptr<Vector>> map_copy;\n+\t\tunordered_map<string, unique_ptr<Vector>> map_copy;\n \t\tfor (const auto &kv : const_struct_names) {\n \t\t\t// The vectors are const vectors of the key value\n \t\t\tmap_copy[kv.first] = make_uniq<Vector>(Value(kv.first));\n@@ -24,11 +28,10 @@ struct JSONCreateFunctionData : public FunctionData {\n \n public:\n \t// Const struct name vectors live here so they don't have to be re-initialized for every DataChunk\n-\tunordered_map<string, duckdb::unique_ptr<Vector>> const_struct_names;\n+\tStructNames const_struct_names;\n };\n \n-static LogicalType GetJSONType(unordered_map<string, duckdb::unique_ptr<Vector>> &const_struct_names,\n-                               const LogicalType &type) {\n+static LogicalType GetJSONType(StructNames &const_struct_names, const LogicalType &type) {\n \tif (JSONCommon::LogicalTypeIsJSON(type)) {\n \t\treturn type;\n \t}\n@@ -86,9 +89,9 @@ static LogicalType GetJSONType(unordered_map<string, duckdb::unique_ptr<Vector>>\n \t}\n }\n \n-static duckdb::unique_ptr<FunctionData>\n-JSONCreateBindParams(ScalarFunction &bound_function, vector<duckdb::unique_ptr<Expression>> &arguments, bool object) {\n-\tunordered_map<string, duckdb::unique_ptr<Vector>> const_struct_names;\n+static unique_ptr<FunctionData> JSONCreateBindParams(ScalarFunction &bound_function,\n+                                                     vector<unique_ptr<Expression>> &arguments, bool object) {\n+\tunordered_map<string, unique_ptr<Vector>> const_struct_names;\n \tfor (idx_t i = 0; i < arguments.size(); i++) {\n \t\tauto &type = arguments[i]->return_type;\n \t\tif (arguments[i]->HasParameter()) {\n@@ -107,29 +110,29 @@ JSONCreateBindParams(ScalarFunction &bound_function, vector<duckdb::unique_ptr<E\n \treturn make_uniq<JSONCreateFunctionData>(std::move(const_struct_names));\n }\n \n-static duckdb::unique_ptr<FunctionData> JSONObjectBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                       vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> JSONObjectBind(ClientContext &context, ScalarFunction &bound_function,\n+                                               vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments.size() % 2 != 0) {\n \t\tthrow InvalidInputException(\"json_object() requires an even number of arguments\");\n \t}\n \treturn JSONCreateBindParams(bound_function, arguments, true);\n }\n \n-static duckdb::unique_ptr<FunctionData> JSONArrayBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                      vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> JSONArrayBind(ClientContext &context, ScalarFunction &bound_function,\n+                                              vector<unique_ptr<Expression>> &arguments) {\n \treturn JSONCreateBindParams(bound_function, arguments, false);\n }\n \n-static duckdb::unique_ptr<FunctionData> ToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                   vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> ToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n+                                           vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments.size() != 1) {\n \t\tthrow InvalidInputException(\"to_json() takes exactly one argument\");\n \t}\n \treturn JSONCreateBindParams(bound_function, arguments, false);\n }\n \n-static duckdb::unique_ptr<FunctionData> ArrayToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                        vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> ArrayToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments.size() != 1) {\n \t\tthrow InvalidInputException(\"array_to_json() takes exactly one argument\");\n \t}\n@@ -143,8 +146,8 @@ static duckdb::unique_ptr<FunctionData> ArrayToJSONBind(ClientContext &context,\n \treturn JSONCreateBindParams(bound_function, arguments, false);\n }\n \n-static duckdb::unique_ptr<FunctionData> RowToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                      vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> RowToJSONBind(ClientContext &context, ScalarFunction &bound_function,\n+                                              vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments.size() != 1) {\n \t\tthrow InvalidInputException(\"row_to_json() takes exactly one argument\");\n \t}\n@@ -158,35 +161,55 @@ static duckdb::unique_ptr<FunctionData> RowToJSONBind(ClientContext &context, Sc\n \treturn JSONCreateBindParams(bound_function, arguments, false);\n }\n \n-template <class T>\n-static inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const T &value) {\n-\tthrow NotImplementedException(\"Unsupported type for CreateJSONValue\");\n-}\n+template <class INPUT_TYPE, class RESULT_TYPE>\n+struct CreateJSONValue {\n+\tstatic inline RESULT_TYPE Operation(const INPUT_TYPE &input) {\n+\t\tthrow NotImplementedException(\"Unsupported type for CreateJSONValue\");\n+\t}\n+};\n \n-template <>\n-inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const bool &value) {\n-\treturn yyjson_mut_bool(doc, value);\n-}\n+template <class INPUT_TYPE>\n+struct CreateJSONValue<INPUT_TYPE, bool> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const INPUT_TYPE &input) {\n+\t\treturn yyjson_mut_bool(doc, input);\n+\t}\n+};\n \n-template <>\n-inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const uint64_t &value) {\n-\treturn yyjson_mut_uint(doc, value);\n-}\n+template <class INPUT_TYPE>\n+struct CreateJSONValue<INPUT_TYPE, uint64_t> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const INPUT_TYPE &input) {\n+\t\treturn yyjson_mut_uint(doc, input);\n+\t}\n+};\n \n-template <>\n-inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const int64_t &value) {\n-\treturn yyjson_mut_sint(doc, value);\n-}\n+template <class INPUT_TYPE>\n+struct CreateJSONValue<INPUT_TYPE, int64_t> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const INPUT_TYPE &input) {\n+\t\treturn yyjson_mut_sint(doc, input);\n+\t}\n+};\n+\n+template <class INPUT_TYPE>\n+struct CreateJSONValue<INPUT_TYPE, double> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const INPUT_TYPE &input) {\n+\t\treturn yyjson_mut_real(doc, input);\n+\t}\n+};\n \n template <>\n-inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const double &value) {\n-\treturn yyjson_mut_real(doc, value);\n-}\n+struct CreateJSONValue<string_t, string_t> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const string_t &input) {\n+\t\treturn yyjson_mut_strncpy(doc, input.GetData(), input.GetSize());\n+\t}\n+};\n \n template <>\n-inline yyjson_mut_val *CreateJSONValue(yyjson_mut_doc *doc, const string_t &value) {\n-\treturn yyjson_mut_strn(doc, value.GetData(), value.GetSize());\n-}\n+struct CreateJSONValue<hugeint_t, string_t> {\n+\tstatic inline yyjson_mut_val *Operation(yyjson_mut_doc *doc, const hugeint_t &input) {\n+\t\tconst auto input_string = input.ToString();\n+\t\treturn yyjson_mut_strncpy(doc, input_string.c_str(), input_string.length());\n+\t}\n+};\n \n inline yyjson_mut_val *CreateJSONValueFromJSON(yyjson_mut_doc *doc, const string_t &value) {\n \tauto value_doc = JSONCommon::ReadDocument(value, JSONCommon::READ_FLAG, &doc->alc);\n@@ -195,8 +218,8 @@ inline yyjson_mut_val *CreateJSONValueFromJSON(yyjson_mut_doc *doc, const string\n }\n \n // Forward declaration so we can recurse for nested types\n-static void CreateValues(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                         Vector &value_v, idx_t count);\n+static void CreateValues(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                         idx_t count);\n \n static void AddKeyValuePairs(yyjson_mut_doc *doc, yyjson_mut_val *objs[], Vector &key_v, yyjson_mut_val *vals[],\n                              idx_t count) {\n@@ -209,14 +232,14 @@ static void AddKeyValuePairs(yyjson_mut_doc *doc, yyjson_mut_val *objs[], Vector\n \t\tif (!key_data.validity.RowIsValid(key_idx)) {\n \t\t\tcontinue;\n \t\t}\n-\t\tauto key = CreateJSONValue<string_t>(doc, keys[key_idx]);\n+\t\tauto key = CreateJSONValue<string_t, string_t>::Operation(doc, keys[key_idx]);\n \t\tyyjson_mut_obj_add(objs[i], key, vals[i]);\n \t}\n }\n \n-static void CreateKeyValuePairs(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *objs[],\n+static void CreateKeyValuePairs(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *objs[],\n                                 yyjson_mut_val *vals[], Vector &key_v, Vector &value_v, idx_t count) {\n-\tCreateValues(info, doc, vals, value_v, count);\n+\tCreateValues(names, doc, vals, value_v, count);\n \tAddKeyValuePairs(doc, objs, key_v, vals, count);\n }\n \n@@ -226,11 +249,11 @@ static void CreateValuesNull(yyjson_mut_doc *doc, yyjson_mut_val *vals[], idx_t\n \t}\n }\n \n-template <class T>\n+template <class INPUT_TYPE, class TARGET_TYPE>\n static void TemplatedCreateValues(yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v, idx_t count) {\n \tUnifiedVectorFormat value_data;\n \tvalue_v.ToUnifiedFormat(count, value_data);\n-\tauto values = (T *)value_data.data;\n+\tauto values = (INPUT_TYPE *)value_data.data;\n \n \tconst auto type_is_json = JSONCommon::LogicalTypeIsJSON(value_v.GetType());\n \tfor (idx_t i = 0; i < count; i++) {\n@@ -240,14 +263,14 @@ static void TemplatedCreateValues(yyjson_mut_doc *doc, yyjson_mut_val *vals[], V\n \t\t} else if (type_is_json) {\n \t\t\tvals[i] = CreateJSONValueFromJSON(doc, (string_t &)values[val_idx]);\n \t\t} else {\n-\t\t\tvals[i] = CreateJSONValue<T>(doc, values[val_idx]);\n+\t\t\tvals[i] = CreateJSONValue<INPUT_TYPE, TARGET_TYPE>::Operation(doc, values[val_idx]);\n \t\t}\n \t\tD_ASSERT(vals[i] != nullptr);\n \t}\n }\n \n-static void CreateValuesStruct(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                               Vector &value_v, idx_t count) {\n+static void CreateValuesStruct(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                               idx_t count) {\n \t// Structs become values, therefore we initialize vals to JSON values\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tvals[i] = yyjson_mut_obj(doc);\n@@ -258,9 +281,9 @@ static void CreateValuesStruct(const JSONCreateFunctionData &info, yyjson_mut_do\n \t// Add the key/value pairs to the values\n \tauto &entries = StructVector::GetEntries(value_v);\n \tfor (idx_t entry_i = 0; entry_i < entries.size(); entry_i++) {\n-\t\tauto &struct_key_v = *info.const_struct_names.at(StructType::GetChildName(value_v.GetType(), entry_i));\n+\t\tauto &struct_key_v = *names.at(StructType::GetChildName(value_v.GetType(), entry_i));\n \t\tauto &struct_val_v = *entries[entry_i];\n-\t\tCreateKeyValuePairs(info, doc, vals, nested_vals, struct_key_v, struct_val_v, count);\n+\t\tCreateKeyValuePairs(names, doc, vals, nested_vals, struct_key_v, struct_val_v, count);\n \t}\n \t// Whole struct can be NULL\n \tUnifiedVectorFormat struct_data;\n@@ -273,18 +296,18 @@ static void CreateValuesStruct(const JSONCreateFunctionData &info, yyjson_mut_do\n \t}\n }\n \n-static void CreateValuesMap(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                            Vector &value_v, idx_t count) {\n+static void CreateValuesMap(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                            idx_t count) {\n \t// Create nested keys\n \tauto &map_key_v = MapVector::GetKeys(value_v);\n \tauto map_key_count = ListVector::GetListSize(value_v);\n \tauto nested_keys = (yyjson_mut_val **)doc->alc.malloc(doc->alc.ctx, sizeof(yyjson_mut_val *) * map_key_count);\n-\tTemplatedCreateValues<string_t>(doc, nested_keys, map_key_v, map_key_count);\n+\tTemplatedCreateValues<string_t, string_t>(doc, nested_keys, map_key_v, map_key_count);\n \t// Create nested values\n \tauto &map_val_v = MapVector::GetValues(value_v);\n \tauto map_val_count = ListVector::GetListSize(value_v);\n \tauto nested_vals = (yyjson_mut_val **)doc->alc.malloc(doc->alc.ctx, sizeof(yyjson_mut_val *) * map_val_count);\n-\tCreateValues(info, doc, nested_vals, map_val_v, map_val_count);\n+\tCreateValues(names, doc, nested_vals, map_val_v, map_val_count);\n \t// Add the key/value pairs to the values\n \tUnifiedVectorFormat map_data;\n \tvalue_v.ToUnifiedFormat(count, map_data);\n@@ -307,8 +330,8 @@ static void CreateValuesMap(const JSONCreateFunctionData &info, yyjson_mut_doc *\n \t}\n }\n \n-static void CreateValuesUnion(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                              Vector &value_v, idx_t count) {\n+static void CreateValuesUnion(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                              idx_t count) {\n \t// Structs become values, therefore we initialize vals to JSON values\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tvals[i] = yyjson_mut_obj(doc);\n@@ -324,12 +347,12 @@ static void CreateValuesUnion(const JSONCreateFunctionData &info, yyjson_mut_doc\n \t// Add the key/value pairs to the values\n \tfor (idx_t member_idx = 0; member_idx < UnionType::GetMemberCount(value_v.GetType()); member_idx++) {\n \t\tauto &member_val_v = UnionVector::GetMember(value_v, member_idx);\n-\t\tauto &member_key_v = *info.const_struct_names.at(UnionType::GetMemberName(value_v.GetType(), member_idx));\n+\t\tauto &member_key_v = *names.at(UnionType::GetMemberName(value_v.GetType(), member_idx));\n \n \t\t// This implementation is not optimal since we convert the entire member vector,\n \t\t// and then skip the rows not matching the tag afterwards.\n \n-\t\tCreateValues(info, doc, nested_vals, member_val_v, count);\n+\t\tCreateValues(names, doc, nested_vals, member_val_v, count);\n \n \t\t// This is a inlined copy of AddKeyValuePairs but we also skip null tags\n \t\t// and the rows where the member is not matching the tag\n@@ -350,20 +373,20 @@ static void CreateValuesUnion(const JSONCreateFunctionData &info, yyjson_mut_doc\n \t\t\tif (!key_data.validity.RowIsValid(key_idx)) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tauto key = CreateJSONValue<string_t>(doc, keys[key_idx]);\n+\t\t\tauto key = CreateJSONValue<string_t, string_t>::Operation(doc, keys[key_idx]);\n \t\t\tyyjson_mut_obj_add(vals[i], key, nested_vals[i]);\n \t\t}\n \t}\n }\n \n-static void CreateValuesList(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                             Vector &value_v, idx_t count) {\n+static void CreateValuesList(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                             idx_t count) {\n \t// Initialize array for the nested values\n \tauto &child_v = ListVector::GetEntry(value_v);\n \tauto child_count = ListVector::GetListSize(value_v);\n \tauto nested_vals = (yyjson_mut_val **)doc->alc.malloc(doc->alc.ctx, sizeof(yyjson_mut_val *) * child_count);\n \t// Fill nested_vals with list values\n-\tCreateValues(info, doc, nested_vals, child_v, child_count);\n+\tCreateValues(names, doc, nested_vals, child_v, child_count);\n \t// Now we add the values to the appropriate JSON arrays\n \tUnifiedVectorFormat list_data;\n \tvalue_v.ToUnifiedFormat(count, list_data);\n@@ -382,39 +405,88 @@ static void CreateValuesList(const JSONCreateFunctionData &info, yyjson_mut_doc\n \t}\n }\n \n-static void CreateValues(const JSONCreateFunctionData &info, yyjson_mut_doc *doc, yyjson_mut_val *vals[],\n-                         Vector &value_v, idx_t count) {\n+static void CreateValues(const StructNames &names, yyjson_mut_doc *doc, yyjson_mut_val *vals[], Vector &value_v,\n+                         idx_t count) {\n \tswitch (value_v.GetType().id()) {\n \tcase LogicalTypeId::SQLNULL:\n \t\tCreateValuesNull(doc, vals, count);\n \t\tbreak;\n \tcase LogicalTypeId::BOOLEAN:\n-\t\tTemplatedCreateValues<bool>(doc, vals, value_v, count);\n+\t\tTemplatedCreateValues<bool, bool>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::TINYINT:\n+\t\tTemplatedCreateValues<int8_t, int64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::SMALLINT:\n+\t\tTemplatedCreateValues<int16_t, int64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::INTEGER:\n+\t\tTemplatedCreateValues<int32_t, int64_t>(doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::BIGINT:\n-\t\tTemplatedCreateValues<int64_t>(doc, vals, value_v, count);\n+\t\tTemplatedCreateValues<int64_t, int64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::HUGEINT:\n+\t\tTemplatedCreateValues<hugeint_t, string_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::UTINYINT:\n+\t\tTemplatedCreateValues<uint8_t, uint64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::USMALLINT:\n+\t\tTemplatedCreateValues<uint16_t, uint64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::UINTEGER:\n+\t\tTemplatedCreateValues<uint32_t, uint64_t>(doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::UBIGINT:\n-\t\tTemplatedCreateValues<uint64_t>(doc, vals, value_v, count);\n+\t\tTemplatedCreateValues<uint64_t, uint64_t>(doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::FLOAT:\n+\t\tTemplatedCreateValues<float, double>(doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::DOUBLE:\n-\t\tTemplatedCreateValues<double>(doc, vals, value_v, count);\n+\t\tTemplatedCreateValues<double, double>(doc, vals, value_v, count);\n \t\tbreak;\n+\tcase LogicalTypeId::BIT:\n+\tcase LogicalTypeId::BLOB:\n \tcase LogicalTypeId::VARCHAR:\n-\t\tTemplatedCreateValues<string_t>(doc, vals, value_v, count);\n+\t\tTemplatedCreateValues<string_t, string_t>(doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::STRUCT:\n-\t\tCreateValuesStruct(info, doc, vals, value_v, count);\n+\t\tCreateValuesStruct(names, doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::MAP:\n-\t\tCreateValuesMap(info, doc, vals, value_v, count);\n+\t\tCreateValuesMap(names, doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::LIST:\n-\t\tCreateValuesList(info, doc, vals, value_v, count);\n+\t\tCreateValuesList(names, doc, vals, value_v, count);\n \t\tbreak;\n \tcase LogicalTypeId::UNION:\n-\t\tCreateValuesUnion(info, doc, vals, value_v, count);\n+\t\tCreateValuesUnion(names, doc, vals, value_v, count);\n+\t\tbreak;\n+\tcase LogicalTypeId::AGGREGATE_STATE:\n+\tcase LogicalTypeId::ENUM:\n+\tcase LogicalTypeId::DATE:\n+\tcase LogicalTypeId::INTERVAL:\n+\tcase LogicalTypeId::TIME:\n+\tcase LogicalTypeId::TIME_TZ:\n+\tcase LogicalTypeId::TIMESTAMP:\n+\tcase LogicalTypeId::TIMESTAMP_TZ:\n+\tcase LogicalTypeId::TIMESTAMP_NS:\n+\tcase LogicalTypeId::TIMESTAMP_MS:\n+\tcase LogicalTypeId::TIMESTAMP_SEC:\n+\tcase LogicalTypeId::UUID: {\n+\t\tVector string_vector(LogicalTypeId::VARCHAR, count);\n+\t\tVectorOperations::DefaultCast(value_v, string_vector, count);\n+\t\tTemplatedCreateValues<string_t, string_t>(doc, vals, string_vector, count);\n+\t\tbreak;\n+\t}\n+\tcase LogicalTypeId::DECIMAL: {\n+\t\tVector double_vector(LogicalType::DOUBLE, count);\n+\t\tVectorOperations::DefaultCast(value_v, double_vector, count);\n+\t\tTemplatedCreateValues<double, double>(doc, vals, double_vector, count);\n \t\tbreak;\n+\t}\n \tdefault:\n \t\tthrow InternalException(\"Unsupported type arrived at JSON create function\");\n \t}\n@@ -422,24 +494,24 @@ static void CreateValues(const JSONCreateFunctionData &info, yyjson_mut_doc *doc\n \n static void ObjectFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\tconst auto &info = (JSONCreateFunctionData &)*func_expr.bind_info;\n+\tconst auto &info = func_expr.bind_info->Cast<JSONCreateFunctionData>();\n \tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n \n \t// Initialize values\n \tconst idx_t count = args.size();\n \tauto doc = JSONCommon::CreateDocument(alc);\n-\tyyjson_mut_val *objs[STANDARD_VECTOR_SIZE];\n+\tauto objs = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tobjs[i] = yyjson_mut_obj(doc);\n \t}\n \t// Initialize a re-usable value array\n-\tyyjson_mut_val *vals[STANDARD_VECTOR_SIZE];\n+\tauto vals = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \t// Loop through key/value pairs\n \tfor (idx_t pair_idx = 0; pair_idx < args.data.size() / 2; pair_idx++) {\n \t\tVector &key_v = args.data[pair_idx * 2];\n \t\tVector &value_v = args.data[pair_idx * 2 + 1];\n-\t\tCreateKeyValuePairs(info, doc, objs, vals, key_v, value_v, count);\n+\t\tCreateKeyValuePairs(info.const_struct_names, doc, objs, vals, key_v, value_v, count);\n \t}\n \t// Write JSON values to string\n \tauto objects = FlatVector::GetData<string_t>(result);\n@@ -454,22 +526,22 @@ static void ObjectFunction(DataChunk &args, ExpressionState &state, Vector &resu\n \n static void ArrayFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\tconst auto &info = (JSONCreateFunctionData &)*func_expr.bind_info;\n+\tconst auto &info = func_expr.bind_info->Cast<JSONCreateFunctionData>();\n \tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n \n \t// Initialize arrays\n \tconst idx_t count = args.size();\n \tauto doc = JSONCommon::CreateDocument(alc);\n-\tyyjson_mut_val *arrs[STANDARD_VECTOR_SIZE];\n+\tauto arrs = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tarrs[i] = yyjson_mut_arr(doc);\n \t}\n \t// Initialize a re-usable value array\n-\tyyjson_mut_val *vals[STANDARD_VECTOR_SIZE];\n+\tauto vals = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \t// Loop through args\n \tfor (auto &v : args.data) {\n-\t\tCreateValues(info, doc, vals, v, count);\n+\t\tCreateValues(info.const_struct_names, doc, vals, v, count);\n \t\tfor (idx_t i = 0; i < count; i++) {\n \t\t\tyyjson_mut_arr_append(arrs[i], vals[i]);\n \t\t}\n@@ -485,22 +557,18 @@ static void ArrayFunction(DataChunk &args, ExpressionState &state, Vector &resul\n \t}\n }\n \n-static void ToJSONFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n-\tconst auto &info = (JSONCreateFunctionData &)*func_expr.bind_info;\n-\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n-\n+static void ToJSONFunctionInternal(const StructNames &names, Vector &input, const idx_t count, Vector &result,\n+                                   yyjson_alc *alc) {\n \t// Initialize array for values\n-\tconst idx_t count = args.size();\n \tauto doc = JSONCommon::CreateDocument(alc);\n-\tyyjson_mut_val *vals[STANDARD_VECTOR_SIZE];\n-\tCreateValues(info, doc, vals, args.data[0], count);\n+\tauto vals = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n+\tCreateValues(names, doc, vals, input, count);\n+\n \t// Write JSON values to string\n \tauto objects = FlatVector::GetData<string_t>(result);\n \tauto &result_validity = FlatVector::Validity(result);\n \tUnifiedVectorFormat input_data;\n-\targs.data[0].ToUnifiedFormat(count, input_data);\n+\tinput.ToUnifiedFormat(count, input_data);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tidx_t idx = input_data.sel->get_index(i);\n \t\tif (input_data.validity.RowIsValid(idx)) {\n@@ -510,11 +578,20 @@ static void ToJSONFunction(DataChunk &args, ExpressionState &state, Vector &resu\n \t\t}\n \t}\n \n-\tif (args.AllConstant()) {\n+\tif (input.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n \t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n \t}\n }\n \n+static void ToJSONFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n+\tconst auto &info = func_expr.bind_info->Cast<JSONCreateFunctionData>();\n+\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n+\n+\tToJSONFunctionInternal(info.const_struct_names, args.data[0], args.size(), result, alc);\n+}\n+\n ScalarFunctionSet JSONFunctions::GetObjectFunction() {\n \tScalarFunction fun(\"json_object\", {}, JSONCommon::JSONType(), ObjectFunction, JSONObjectBind, nullptr, nullptr,\n \t                   JSONFunctionLocalState::Init);\n@@ -552,4 +629,54 @@ ScalarFunctionSet JSONFunctions::GetRowToJSONFunction() {\n \treturn ScalarFunctionSet(fun);\n }\n \n+struct NestedToJSONCastData : public BoundCastData {\n+public:\n+\tNestedToJSONCastData() {\n+\t}\n+\n+\tunique_ptr<BoundCastData> Copy() const override {\n+\t\tauto result = make_uniq<NestedToJSONCastData>();\n+\t\tfor (auto &csn : const_struct_names) {\n+\t\t\tresult->const_struct_names.emplace(csn.first, make_uniq<Vector>(csn.second->GetValue(0)));\n+\t\t}\n+\t\treturn std::move(result);\n+\t}\n+\n+public:\n+\tStructNames const_struct_names;\n+};\n+\n+static bool AnyToJSONCast(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n+\tauto &lstate = parameters.local_state->Cast<JSONFunctionLocalState>();\n+\tlstate.json_allocator.Reset();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n+\tconst auto &names = parameters.cast_data->Cast<NestedToJSONCastData>().const_struct_names;\n+\n+\tToJSONFunctionInternal(names, source, count, result, alc);\n+\treturn true;\n+}\n+\n+BoundCastInfo AnyToJSONCastBind(BindCastInput &input, const LogicalType &source, const LogicalType &target) {\n+\tauto cast_data = make_uniq<NestedToJSONCastData>();\n+\tGetJSONType(cast_data->const_struct_names, source);\n+\treturn BoundCastInfo(AnyToJSONCast, std::move(cast_data), JSONFunctionLocalState::InitCastLocalState);\n+}\n+\n+void JSONFunctions::RegisterJSONCreateCastFunctions(CastFunctionSet &casts) {\n+\tauto json_to_any_cost = casts.ImplicitCastCost(LogicalType::ANY, JSONCommon::JSONType());\n+\tcasts.RegisterCastFunction(LogicalType::ANY, JSONCommon::JSONType(), AnyToJSONCastBind, json_to_any_cost);\n+\n+\tconst auto struct_type = LogicalType::STRUCT({{\"any\", LogicalType::ANY}});\n+\tauto struct_to_json_cost = casts.ImplicitCastCost(struct_type, LogicalType::VARCHAR) - 2;\n+\tcasts.RegisterCastFunction(struct_type, JSONCommon::JSONType(), AnyToJSONCastBind, struct_to_json_cost);\n+\n+\tconst auto list_type = LogicalType::LIST(LogicalType::ANY);\n+\tauto list_to_json_cost = casts.ImplicitCastCost(list_type, LogicalType::VARCHAR) - 2;\n+\tcasts.RegisterCastFunction(list_type, JSONCommon::JSONType(), AnyToJSONCastBind, list_to_json_cost);\n+\n+\tconst auto map_type = LogicalType::MAP(LogicalType::ANY, LogicalType::ANY);\n+\tauto map_to_json_cost = casts.ImplicitCastCost(map_type, LogicalType::VARCHAR) - 2;\n+\tcasts.RegisterCastFunction(map_type, JSONCommon::JSONType(), AnyToJSONCastBind, map_to_json_cost);\n+}\n+\n } // namespace duckdb\ndiff --git a/extension/json/json_functions/json_merge_patch.cpp b/extension/json/json_functions/json_merge_patch.cpp\nindex 80b95bfb0134..67ed31d5f566 100644\n--- a/extension/json/json_functions/json_merge_patch.cpp\n+++ b/extension/json/json_functions/json_merge_patch.cpp\n@@ -3,8 +3,8 @@\n \n namespace duckdb {\n \n-static duckdb::unique_ptr<FunctionData> JSONMergePatchBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                           vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> JSONMergePatchBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                   vector<unique_ptr<Expression>> &arguments) {\n \tif (arguments.size() < 2) {\n \t\tthrow InvalidInputException(\"json_merge_patch requires at least two parameters\");\n \t}\n@@ -53,17 +53,17 @@ static inline void ReadObjects(yyjson_mut_doc *doc, Vector &input, yyjson_mut_va\n //! Follows MySQL behaviour\n static void MergePatchFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n \n-\tauto doc = JSONCommon::CreateDocument(lstate.json_allocator.GetYYJSONAllocator());\n+\tauto doc = JSONCommon::CreateDocument(lstate.json_allocator.GetYYAlc());\n \tconst auto count = args.size();\n \n \t// Read the first json arg\n-\tyyjson_mut_val *origs[STANDARD_VECTOR_SIZE];\n+\tauto origs = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \tReadObjects(doc, args.data[0], origs, count);\n \n \t// Read the next json args one by one and merge them into the first json arg\n-\tyyjson_mut_val *patches[STANDARD_VECTOR_SIZE];\n+\tauto patches = (yyjson_mut_val **)alc->malloc(alc->ctx, sizeof(yyjson_mut_val *) * count);\n \tfor (idx_t arg_idx = 1; arg_idx < args.data.size(); arg_idx++) {\n \t\tReadObjects(doc, args.data[arg_idx], patches, count);\n \t\tfor (idx_t i = 0; i < count; i++) {\ndiff --git a/extension/json/json_functions/json_serialize_sql.cpp b/extension/json/json_functions/json_serialize_sql.cpp\nindex 1117dfcba8db..288833f19642 100644\n--- a/extension/json/json_functions/json_serialize_sql.cpp\n+++ b/extension/json/json_functions/json_serialize_sql.cpp\n@@ -76,7 +76,7 @@ static unique_ptr<FunctionData> JsonSerializeBind(ClientContext &context, Scalar\n \n static void JsonSerializeFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \tauto &local_state = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = local_state.json_allocator.GetYYJSONAllocator();\n+\tauto alc = local_state.json_allocator.GetYYAlc();\n \tauto &inputs = args.data[0];\n \n \tauto &func_expr = state.expr.Cast<BoundFunctionExpression>();\n@@ -193,7 +193,7 @@ static unique_ptr<SelectStatement> DeserializeSelectStatement(string_t input, yy\n static void JsonDeserializeFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \n \tauto &local_state = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = local_state.json_allocator.GetYYJSONAllocator();\n+\tauto alc = local_state.json_allocator.GetYYAlc();\n \tauto &inputs = args.data[0];\n \n \tUnaryExecutor::Execute<string_t, string_t>(inputs, result, args.size(), [&](string_t input) {\n@@ -214,7 +214,7 @@ ScalarFunctionSet JSONFunctions::GetDeserializeSqlFunction() {\n //----------------------------------------------------------------------\n static string ExecuteJsonSerializedSqlPragmaFunction(ClientContext &context, const FunctionParameters &parameters) {\n \tJSONFunctionLocalState local_state(context);\n-\tauto alc = local_state.json_allocator.GetYYJSONAllocator();\n+\tauto alc = local_state.json_allocator.GetYYAlc();\n \n \tauto input = parameters.values[0].GetValueUnsafe<string_t>();\n \tauto stmt = DeserializeSelectStatement(input, alc);\n@@ -239,7 +239,7 @@ struct ExecuteSqlTableFunction {\n \tstatic unique_ptr<FunctionData> Bind(ClientContext &context, TableFunctionBindInput &input,\n \t                                     vector<LogicalType> &return_types, vector<string> &names) {\n \t\tJSONFunctionLocalState local_state(context);\n-\t\tauto alc = local_state.json_allocator.GetYYJSONAllocator();\n+\t\tauto alc = local_state.json_allocator.GetYYAlc();\n \n \t\tauto result = make_uniq<BindData>();\n \ndiff --git a/extension/json/json_functions/json_structure.cpp b/extension/json/json_functions/json_structure.cpp\nindex 938b7f741d94..b9b8df81fe73 100644\n--- a/extension/json/json_functions/json_structure.cpp\n+++ b/extension/json/json_functions/json_structure.cpp\n@@ -1,9 +1,9 @@\n #include \"json_structure.hpp\"\n \n+#include \"duckdb/common/enum_util.hpp\"\n #include \"json_executors.hpp\"\n #include \"json_scan.hpp\"\n #include \"json_transform.hpp\"\n-#include \"duckdb/common/enum_util.hpp\"\n \n namespace duckdb {\n \n@@ -93,7 +93,7 @@ bool JSONStructureNode::ContainsVarchar() const {\n }\n \n void JSONStructureNode::InitializeCandidateTypes(const idx_t max_depth, idx_t depth) {\n-\tif (depth > max_depth) {\n+\tif (depth >= max_depth) {\n \t\treturn;\n \t}\n \tif (descriptions.size() != 1) {\n@@ -521,11 +521,11 @@ static LogicalType StructureToTypeString(const JSONStructureNode &node) {\n \n LogicalType JSONStructure::StructureToType(ClientContext &context, const JSONStructureNode &node, const idx_t max_depth,\n                                            idx_t depth) {\n-\tif (depth > max_depth) {\n+\tif (depth >= max_depth) {\n \t\treturn JSONCommon::JSONType();\n \t}\n \tif (node.descriptions.empty()) {\n-\t\treturn LogicalTypeId::SQLNULL;\n+\t\treturn JSONCommon::JSONType();\n \t}\n \tif (node.descriptions.size() != 1) { // Inconsistent types, so we resort to JSON\n \t\treturn JSONCommon::JSONType();\n@@ -540,7 +540,9 @@ LogicalType JSONStructure::StructureToType(ClientContext &context, const JSONStr\n \tcase LogicalTypeId::VARCHAR:\n \t\treturn StructureToTypeString(node);\n \tcase LogicalTypeId::SQLNULL:\n-\t\treturn LogicalTypeId::INTEGER;\n+\t\treturn JSONCommon::JSONType();\n+\tcase LogicalTypeId::UBIGINT:\n+\t\treturn LogicalTypeId::BIGINT; // We prefer not to return UBIGINT in our type auto-detection\n \tdefault:\n \t\treturn desc.type;\n \t}\ndiff --git a/extension/json/json_functions/json_transform.cpp b/extension/json/json_functions/json_transform.cpp\nindex 84da42cea9fd..3896625afeb7 100644\n--- a/extension/json/json_functions/json_transform.cpp\n+++ b/extension/json/json_functions/json_transform.cpp\n@@ -1,8 +1,10 @@\n #include \"json_transform.hpp\"\n \n-#include \"duckdb/common/types.hpp\"\n #include \"duckdb/common/enum_util.hpp\"\n+#include \"duckdb/common/types.hpp\"\n #include \"duckdb/execution/expression_executor.hpp\"\n+#include \"duckdb/function/cast/cast_function_set.hpp\"\n+#include \"duckdb/function/cast/default_casts.hpp\"\n #include \"duckdb/function/scalar/nested_functions.hpp\"\n #include \"json_functions.hpp\"\n #include \"json_scan.hpp\"\n@@ -18,12 +20,12 @@ JSONTransformOptions::JSONTransformOptions(bool strict_cast_p, bool error_duplic\n       error_unknown_key(error_unkown_key_p) {\n }\n \n-void JSONTransformOptions::Serialize(FieldWriter &writer) {\n+void JSONTransformOptions::Serialize(FieldWriter &writer) const {\n \twriter.WriteField(strict_cast);\n \twriter.WriteField(error_duplicate_key);\n \twriter.WriteField(error_missing_key);\n \twriter.WriteField(error_unknown_key);\n-\twriter.WriteField(from_file);\n+\twriter.WriteField(delay_error);\n }\n \n void JSONTransformOptions::Deserialize(FieldReader &reader) {\n@@ -31,7 +33,7 @@ void JSONTransformOptions::Deserialize(FieldReader &reader) {\n \terror_duplicate_key = reader.ReadRequired<bool>();\n \terror_missing_key = reader.ReadRequired<bool>();\n \terror_unknown_key = reader.ReadRequired<bool>();\n-\tfrom_file = reader.ReadRequired<bool>();\n+\tdelay_error = reader.ReadRequired<bool>();\n }\n \n //! Forward declaration for recursion\n@@ -78,8 +80,8 @@ static LogicalType StructureStringToType(yyjson_val *val, ClientContext &context\n \t}\n }\n \n-static duckdb::unique_ptr<FunctionData> JSONTransformBind(ClientContext &context, ScalarFunction &bound_function,\n-                                                          vector<duckdb::unique_ptr<Expression>> &arguments) {\n+static unique_ptr<FunctionData> JSONTransformBind(ClientContext &context, ScalarFunction &bound_function,\n+                                                  vector<unique_ptr<Expression>> &arguments) {\n \tD_ASSERT(bound_function.arguments.size() == 2);\n \tif (arguments[1]->HasParameter()) {\n \t\tthrow ParameterNotResolvedException();\n@@ -96,8 +98,8 @@ static duckdb::unique_ptr<FunctionData> JSONTransformBind(ClientContext &context\n \t\tauto structure_string = structure_val.GetValueUnsafe<string_t>();\n \t\tJSONAllocator json_allocator(Allocator::DefaultAllocator());\n \t\tyyjson_read_err err;\n-\t\tauto doc = JSONCommon::ReadDocumentUnsafe(structure_string, JSONCommon::READ_FLAG,\n-\t\t                                          json_allocator.GetYYJSONAllocator(), &err);\n+\t\tauto doc =\n+\t\t    JSONCommon::ReadDocumentUnsafe(structure_string, JSONCommon::READ_FLAG, json_allocator.GetYYAlc(), &err);\n \t\tif (err.code != YYJSON_READ_SUCCESS) {\n \t\t\tJSONCommon::ThrowParseError(structure_string.GetData(), structure_string.GetSize(), err);\n \t\t}\n@@ -217,19 +219,20 @@ static bool TransformNumerical(yyjson_val *vals[], Vector &result, const idx_t c\n \tauto data = (T *)FlatVector::GetData(result);\n \tauto &validity = FlatVector::Validity(result);\n \n+\tbool success = true;\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tconst auto &val = vals[i];\n \t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\tvalidity.SetInvalid(i);\n \t\t} else if (!GetValueNumerical<T>(val, data[i], options)) {\n \t\t\tvalidity.SetInvalid(i);\n-\t\t\tif (options.strict_cast) {\n+\t\t\tif (success && options.strict_cast) {\n \t\t\t\toptions.object_index = i;\n-\t\t\t\treturn false;\n+\t\t\t\tsuccess = false;\n \t\t\t}\n \t\t}\n \t}\n-\treturn true;\n+\treturn success;\n }\n \n template <class T>\n@@ -238,19 +241,20 @@ static bool TransformDecimal(yyjson_val *vals[], Vector &result, const idx_t cou\n \tauto data = (T *)FlatVector::GetData(result);\n \tauto &validity = FlatVector::Validity(result);\n \n+\tbool success = true;\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tconst auto &val = vals[i];\n \t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\tvalidity.SetInvalid(i);\n \t\t} else if (!GetValueDecimal<T>(val, data[i], width, scale, options)) {\n \t\t\tvalidity.SetInvalid(i);\n-\t\t\tif (options.strict_cast) {\n+\t\t\tif (success && options.strict_cast) {\n \t\t\t\toptions.object_index = i;\n-\t\t\t\treturn false;\n+\t\t\t\tsuccess = false;\n \t\t\t}\n \t\t}\n \t}\n-\treturn true;\n+\treturn success;\n }\n \n bool JSONTransform::GetStringVector(yyjson_val *vals[], const idx_t count, const LogicalType &target,\n@@ -262,35 +266,46 @@ bool JSONTransform::GetStringVector(yyjson_val *vals[], const idx_t count, const\n \tauto &validity = FlatVector::Validity(string_vector);\n \tvalidity.SetAllValid(count);\n \n+\tbool success = true;\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tconst auto &val = vals[i];\n \t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\tvalidity.SetInvalid(i);\n-\t\t} else if (options.strict_cast && !unsafe_yyjson_is_str(val)) {\n-\t\t\toptions.error_message = StringUtil::Format(\"Unable to cast '%s' to \" + EnumUtil::ToString(target.id()),\n-\t\t\t                                           JSONCommon::ValToString(val, 50));\n-\t\t\toptions.object_index = i;\n-\t\t\treturn false;\n-\t\t} else {\n-\t\t\tdata[i] = GetString(val);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!unsafe_yyjson_is_str(val)) {\n+\t\t\tvalidity.SetInvalid(i);\n+\t\t\tif (success && options.strict_cast && !unsafe_yyjson_is_str(val)) {\n+\t\t\t\toptions.error_message = StringUtil::Format(\"Unable to cast '%s' to \" + EnumUtil::ToString(target.id()),\n+\t\t\t\t                                           JSONCommon::ValToString(val, 50));\n+\t\t\t\toptions.object_index = i;\n+\t\t\t\tsuccess = false;\n+\t\t\t}\n+\t\t\tcontinue;\n \t\t}\n+\n+\t\tdata[i] = GetString(val);\n \t}\n-\treturn true;\n+\treturn success;\n }\n \n static bool TransformFromString(yyjson_val *vals[], Vector &result, const idx_t count, JSONTransformOptions &options) {\n \tVector string_vector(LogicalTypeId::VARCHAR, count);\n+\n+\tbool success = true;\n \tif (!JSONTransform::GetStringVector(vals, count, result.GetType(), string_vector, options)) {\n-\t\treturn false;\n+\t\tsuccess = false;\n \t}\n \n \tif (!VectorOperations::DefaultTryCast(string_vector, result, count, &options.error_message) &&\n \t    options.strict_cast) {\n \t\toptions.object_index = 0; // Can't get line number information here\n-\t\toptions.error_message += \" (line/object number information is approximate)\";\n-\t\treturn false;\n+\t\toptions.error_message +=\n+\t\t    \"\\n If this error occurred during read_json, line/object number information is approximate\";\n+\t\tsuccess = false;\n \t}\n-\treturn true;\n+\treturn success;\n }\n \n template <class OP, class T>\n@@ -302,13 +317,14 @@ static bool TransformStringWithFormat(Vector &string_vector, StrpTimeFormat &for\n \tauto target_vals = FlatVector::GetData<T>(result);\n \tauto &target_validity = FlatVector::Validity(result);\n \n+\tbool success = true;\n \tif (source_validity.AllValid()) {\n \t\tfor (idx_t i = 0; i < count; i++) {\n \t\t\tif (!OP::template Operation<T>(format, source_strings[i], target_vals[i], options.error_message)) {\n \t\t\t\ttarget_validity.SetInvalid(i);\n-\t\t\t\tif (options.strict_cast) {\n+\t\t\t\tif (success && options.strict_cast) {\n \t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\treturn false;\n+\t\t\t\t\tsuccess = false;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n@@ -318,21 +334,22 @@ static bool TransformStringWithFormat(Vector &string_vector, StrpTimeFormat &for\n \t\t\t\ttarget_validity.SetInvalid(i);\n \t\t\t} else if (!OP::template Operation<T>(format, source_strings[i], target_vals[i], options.error_message)) {\n \t\t\t\ttarget_validity.SetInvalid(i);\n-\t\t\t\tif (options.strict_cast) {\n+\t\t\t\tif (success && options.strict_cast) {\n \t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\treturn false;\n+\t\t\t\t\tsuccess = false;\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n-\treturn true;\n+\treturn success;\n }\n \n static bool TransformFromStringWithFormat(yyjson_val *vals[], Vector &result, const idx_t count,\n                                           JSONTransformOptions &options) {\n \tVector string_vector(LogicalTypeId::VARCHAR, count);\n+\tbool success = true;\n \tif (!JSONTransform::GetStringVector(vals, count, result.GetType(), string_vector, options)) {\n-\t\treturn false;\n+\t\tsuccess = false;\n \t}\n \n \tconst auto &result_type = result.GetType().id();\n@@ -340,12 +357,19 @@ static bool TransformFromStringWithFormat(yyjson_val *vals[], Vector &result, co\n \n \tswitch (result_type) {\n \tcase LogicalTypeId::DATE:\n-\t\treturn TransformStringWithFormat<TryParseDate, date_t>(string_vector, format, count, result, options);\n+\t\tif (!TransformStringWithFormat<TryParseDate, date_t>(string_vector, format, count, result, options)) {\n+\t\t\tsuccess = false;\n+\t\t}\n+\t\tbreak;\n \tcase LogicalTypeId::TIMESTAMP:\n-\t\treturn TransformStringWithFormat<TryParseTimeStamp, timestamp_t>(string_vector, format, count, result, options);\n+\t\tif (!TransformStringWithFormat<TryParseTimeStamp, timestamp_t>(string_vector, format, count, result, options)) {\n+\t\t\tsuccess = false;\n+\t\t}\n+\t\tbreak;\n \tdefault:\n \t\tthrow InternalException(\"No date/timestamp formats for %s\", EnumUtil::ToString(result.GetType().id()));\n \t}\n+\treturn success;\n }\n \n static bool TransformToString(yyjson_val *vals[], yyjson_alc *alc, Vector &result, const idx_t count) {\n@@ -387,89 +411,103 @@ bool JSONTransform::TransformObject(yyjson_val *objects[], yyjson_alc *alc, cons\n \tsize_t idx, max;\n \tyyjson_val *key, *val;\n \tfor (idx_t i = 0; i < count; i++) {\n-\t\tif (objects[i] && !unsafe_yyjson_is_null(objects[i])) {\n-\t\t\tif (!unsafe_yyjson_is_obj(objects[i]) && options.strict_cast) {\n+\t\tconst auto &obj = objects[i];\n+\t\tif (!obj || unsafe_yyjson_is_null(obj)) {\n+\t\t\t// Set nested val to null so the recursion doesn't break\n+\t\t\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n+\t\t\t\tnested_vals[col_idx][i] = nullptr;\n+\t\t\t}\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!unsafe_yyjson_is_obj(obj)) {\n+\t\t\t// Set nested val to null so the recursion doesn't break\n+\t\t\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n+\t\t\t\tnested_vals[col_idx][i] = nullptr;\n+\t\t\t}\n+\t\t\tif (success && options.strict_cast && obj) {\n \t\t\t\toptions.error_message =\n-\t\t\t\t    StringUtil::Format(\"Expected OBJECT, but got %s: %s\", JSONCommon::ValTypeToString(objects[i]),\n-\t\t\t\t                       JSONCommon::ValToString(objects[i], 50));\n+\t\t\t\t    StringUtil::Format(\"Expected OBJECT, but got %s: %s\", JSONCommon::ValTypeToString(obj),\n+\t\t\t\t                       JSONCommon::ValToString(obj, 50));\n \t\t\t\toptions.object_index = i;\n \t\t\t\tsuccess = false;\n-\t\t\t\tbreak;\n \t\t\t}\n-\t\t\tfound_key_count = 0;\n-\t\t\tmemset(found_keys, false, column_count);\n-\t\t\tyyjson_obj_foreach(objects[i], idx, max, key, val) {\n-\t\t\t\tauto key_ptr = unsafe_yyjson_get_str(key);\n-\t\t\t\tauto key_len = unsafe_yyjson_get_len(key);\n-\t\t\t\tauto it = key_map.find({key_ptr, key_len});\n-\t\t\t\tif (it != key_map.end()) {\n-\t\t\t\t\tconst auto &col_idx = it->second;\n-\t\t\t\t\tif (options.error_duplicate_key && found_keys[col_idx]) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tfound_key_count = 0;\n+\t\tmemset(found_keys, false, column_count);\n+\t\tyyjson_obj_foreach(objects[i], idx, max, key, val) {\n+\t\t\tauto key_ptr = unsafe_yyjson_get_str(key);\n+\t\t\tauto key_len = unsafe_yyjson_get_len(key);\n+\t\t\tauto it = key_map.find({key_ptr, key_len});\n+\t\t\tif (it != key_map.end()) {\n+\t\t\t\tconst auto &col_idx = it->second;\n+\t\t\t\tif (found_keys[col_idx]) {\n+\t\t\t\t\tif (success && options.error_duplicate_key) {\n \t\t\t\t\t\toptions.error_message =\n \t\t\t\t\t\t    StringUtil::Format(\"Duplicate key \\\"\" + string(key_ptr, key_len) + \"\\\" in object %s\",\n \t\t\t\t\t\t                       JSONCommon::ValToString(objects[i], 50));\n \t\t\t\t\t\toptions.object_index = i;\n \t\t\t\t\t\tsuccess = false;\n-\t\t\t\t\t\tbreak;\n \t\t\t\t\t}\n+\t\t\t\t} else {\n \t\t\t\t\tnested_vals[col_idx][i] = val;\n \t\t\t\t\tfound_keys[col_idx] = true;\n \t\t\t\t\tfound_key_count++;\n-\t\t\t\t} else if (options.error_unknown_key) {\n-\t\t\t\t\toptions.error_message =\n-\t\t\t\t\t    StringUtil::Format(\"Object %s has unknown key \\\"\" + string(key_ptr, key_len) + \"\\\"\",\n-\t\t\t\t\t                       JSONCommon::ValToString(objects[i], 50));\n-\t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\tsuccess = false;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (found_key_count != column_count) {\n-\t\t\t\t// If 'error_missing_key, we throw an error if one of the keys was not found.\n-\t\t\t\t// If not, we set the nested val to null so the recursion doesn't break\n-\t\t\t\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n-\t\t\t\t\tif (!found_keys[col_idx]) {\n-\t\t\t\t\t\tif (options.error_missing_key) {\n-\t\t\t\t\t\t\toptions.error_message =\n-\t\t\t\t\t\t\t    StringUtil::Format(\"Object %s does not have key \\\"\" + names[col_idx] + \"\\\"\",\n-\t\t\t\t\t\t\t                       JSONCommon::ValToString(objects[i], 50));\n-\t\t\t\t\t\t\toptions.object_index = i;\n-\t\t\t\t\t\t\tsuccess = false;\n-\t\t\t\t\t\t} else {\n-\t\t\t\t\t\t\tnested_vals[col_idx][i] = nullptr;\n-\t\t\t\t\t\t}\n-\t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t} else if (success && options.error_unknown_key) {\n+\t\t\t\toptions.error_message =\n+\t\t\t\t    StringUtil::Format(\"Object %s has unknown key \\\"\" + string(key_ptr, key_len) + \"\\\"\",\n+\t\t\t\t                       JSONCommon::ValToString(objects[i], 50));\n+\t\t\t\toptions.object_index = i;\n+\t\t\t\tsuccess = false;\n \t\t\t}\n-\t\t} else {\n-\t\t\t// Set nested val to null so the recursion doesn't break\n+\t\t}\n+\n+\t\tif (found_key_count != column_count) {\n+\t\t\t// If 'error_missing_key, we throw an error if one of the keys was not found.\n+\t\t\t// If not, we set the nested val to null so the recursion doesn't break\n \t\t\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n+\t\t\t\tif (found_keys[col_idx]) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n \t\t\t\tnested_vals[col_idx][i] = nullptr;\n+\n+\t\t\t\tif (success && options.error_missing_key) {\n+\t\t\t\t\toptions.error_message = StringUtil::Format(\"Object %s does not have key \\\"\" + names[col_idx] + \"\\\"\",\n+\t\t\t\t\t                                           JSONCommon::ValToString(objects[i], 50));\n+\t\t\t\t\toptions.object_index = i;\n+\t\t\t\t\tsuccess = false;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n \n-\tif (!success) {\n-\t\tif (!options.from_file) {\n-\t\t\tthrow InvalidInputException(options.error_message);\n+\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n+\t\tif (!JSONTransform::Transform(nested_vals[col_idx], alc, *result_vectors[col_idx], count, options)) {\n+\t\t\tsuccess = false;\n \t\t}\n-\t\treturn false;\n \t}\n \n-\tfor (idx_t col_idx = 0; col_idx < column_count; col_idx++) {\n-\t\tif (JSONTransform::Transform(nested_vals[col_idx], alc, *result_vectors[col_idx], count, options)) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif (!options.from_file) {\n-\t\t\tthrow InvalidInputException(options.error_message);\n-\t\t}\n-\t\treturn false;\n+\tif (!options.delay_error && !success) {\n+\t\tthrow InvalidInputException(options.error_message);\n \t}\n \n \treturn success;\n }\n \n static bool TransformObjectInternal(yyjson_val *objects[], yyjson_alc *alc, Vector &result, const idx_t count,\n-                                    const LogicalType &type, JSONTransformOptions &options) {\n+                                    JSONTransformOptions &options) {\n+\t// Set validity first\n+\tauto &result_validity = FlatVector::Validity(result);\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tconst auto &obj = objects[i];\n+\t\tif (!obj || unsafe_yyjson_is_null(obj)) {\n+\t\t\tresult_validity.SetInvalid(i);\n+\t\t}\n+\t}\n+\n \t// Get child vectors and names\n \tauto &child_vs = StructVector::GetEntries(result);\n \tvector<string> child_names;\n@@ -477,7 +515,7 @@ static bool TransformObjectInternal(yyjson_val *objects[], yyjson_alc *alc, Vect\n \tchild_names.reserve(child_vs.size());\n \tchild_vectors.reserve(child_vs.size());\n \tfor (idx_t child_i = 0; child_i < child_vs.size(); child_i++) {\n-\t\tchild_names.push_back(StructType::GetChildName(type, child_i));\n+\t\tchild_names.push_back(StructType::GetChildName(result.GetType(), child_i));\n \t\tchild_vectors.push_back(child_vs[child_i].get());\n \t}\n \n@@ -486,29 +524,35 @@ static bool TransformObjectInternal(yyjson_val *objects[], yyjson_alc *alc, Vect\n \n static bool TransformArray(yyjson_val *arrays[], yyjson_alc *alc, Vector &result, const idx_t count,\n                            JSONTransformOptions &options) {\n+\tbool success = true;\n+\n \t// Initialize list vector\n \tauto list_entries = FlatVector::GetData<list_entry_t>(result);\n \tauto &list_validity = FlatVector::Validity(result);\n \tidx_t offset = 0;\n \tfor (idx_t i = 0; i < count; i++) {\n-\t\tif (!arrays[i] || unsafe_yyjson_is_null(arrays[i])) {\n+\t\tconst auto &arr = arrays[i];\n+\t\tif (!arr || unsafe_yyjson_is_null(arr)) {\n \t\t\tlist_validity.SetInvalid(i);\n-\t\t} else if (!unsafe_yyjson_is_arr(arrays[i])) {\n-\t\t\tif (options.strict_cast) {\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!unsafe_yyjson_is_arr(arr)) {\n+\t\t\tlist_validity.SetInvalid(i);\n+\t\t\tif (success && options.strict_cast) {\n \t\t\t\toptions.error_message =\n \t\t\t\t    StringUtil::Format(\"Expected ARRAY, but got %s: %s\", JSONCommon::ValTypeToString(arrays[i]),\n \t\t\t\t                       JSONCommon::ValToString(arrays[i], 50));\n \t\t\t\toptions.object_index = i;\n-\t\t\t\treturn false;\n-\t\t\t} else {\n-\t\t\t\tlist_validity.SetInvalid(i);\n+\t\t\t\tsuccess = false;\n \t\t\t}\n-\t\t} else {\n-\t\t\tauto &entry = list_entries[i];\n-\t\t\tentry.offset = offset;\n-\t\t\tentry.length = unsafe_yyjson_get_len(arrays[i]);\n-\t\t\toffset += entry.length;\n+\t\t\tcontinue;\n \t\t}\n+\n+\t\tauto &entry = list_entries[i];\n+\t\tentry.offset = offset;\n+\t\tentry.length = unsafe_yyjson_get_len(arr);\n+\t\toffset += entry.length;\n \t}\n \tListVector::SetListSize(result, offset);\n \tListVector::Reserve(result, offset);\n@@ -522,8 +566,7 @@ static bool TransformArray(yyjson_val *arrays[], yyjson_alc *alc, Vector &result\n \tidx_t list_i = 0;\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tif (!list_validity.RowIsValid(i)) {\n-\t\t\t// We already marked this as invalid\n-\t\t\tcontinue;\n+\t\t\tcontinue; // We already marked this as invalid\n \t\t}\n \t\tyyjson_arr_foreach(arrays[i], idx, max, val) {\n \t\t\tnested_vals[list_i] = val;\n@@ -532,9 +575,7 @@ static bool TransformArray(yyjson_val *arrays[], yyjson_alc *alc, Vector &result\n \t}\n \tD_ASSERT(list_i == offset);\n \n-\t// Transform array values\n-\tauto success = JSONTransform::Transform(nested_vals, alc, ListVector::GetEntry(result), offset, options);\n-\tif (!success && options.from_file) {\n+\tif (!success) {\n \t\t// Set object index in case of error in nested list so we can get accurate line number information\n \t\tfor (idx_t i = 0; i < count; i++) {\n \t\t\tif (!list_validity.RowIsValid(i)) {\n@@ -546,6 +587,90 @@ static bool TransformArray(yyjson_val *arrays[], yyjson_alc *alc, Vector &result\n \t\t\t}\n \t\t}\n \t}\n+\n+\t// Transform array values\n+\tif (!JSONTransform::Transform(nested_vals, alc, ListVector::GetEntry(result), offset, options)) {\n+\t\tsuccess = false;\n+\t}\n+\n+\tif (!options.delay_error && !success) {\n+\t\tthrow InvalidInputException(options.error_message);\n+\t}\n+\n+\treturn success;\n+}\n+\n+static bool TransformObjectToMap(yyjson_val *objects[], yyjson_alc *alc, Vector &result, const idx_t count,\n+                                 JSONTransformOptions &options) {\n+\t// Pre-allocate list vector\n+\tidx_t list_size = 0;\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tconst auto &obj = objects[i];\n+\t\tif (!obj || !unsafe_yyjson_is_obj(obj)) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tlist_size += unsafe_yyjson_get_len(obj);\n+\t}\n+\tListVector::Reserve(result, list_size);\n+\tListVector::SetListSize(result, list_size);\n+\n+\tauto list_entries = FlatVector::GetData<list_entry_t>(result);\n+\tauto &list_validity = FlatVector::Validity(result);\n+\n+\tauto keys = (yyjson_val **)alc->malloc(alc->ctx, sizeof(yyjson_val *) * list_size);\n+\tauto vals = (yyjson_val **)alc->malloc(alc->ctx, sizeof(yyjson_val *) * list_size);\n+\n+\tbool success = true;\n+\tidx_t list_offset = 0;\n+\n+\tsize_t idx, max;\n+\tyyjson_val *key, *val;\n+\tfor (idx_t i = 0; i < count; i++) {\n+\t\tconst auto &obj = objects[i];\n+\t\tif (!obj || unsafe_yyjson_is_null(obj)) {\n+\t\t\tlist_validity.SetInvalid(i);\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (!unsafe_yyjson_is_obj(obj)) {\n+\t\t\tlist_validity.SetInvalid(i);\n+\t\t\tif (success && options.strict_cast && !unsafe_yyjson_is_obj(obj)) {\n+\t\t\t\toptions.error_message =\n+\t\t\t\t    StringUtil::Format(\"Expected OBJECT, but got %s: %s\", JSONCommon::ValTypeToString(obj),\n+\t\t\t\t                       JSONCommon::ValToString(obj, 50));\n+\t\t\t\toptions.object_index = i;\n+\t\t\t\tsuccess = false;\n+\t\t\t}\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tauto &list_entry = list_entries[i];\n+\t\tlist_entry.offset = list_offset;\n+\t\tlist_entry.length = unsafe_yyjson_get_len(obj);\n+\n+\t\tyyjson_obj_foreach(obj, idx, max, key, val) {\n+\t\t\tkeys[list_offset] = key;\n+\t\t\tvals[list_offset] = val;\n+\t\t\tlist_offset++;\n+\t\t}\n+\t}\n+\tD_ASSERT(list_offset == list_size);\n+\n+\t// Transform keys\n+\tif (!JSONTransform::Transform(keys, alc, MapVector::GetKeys(result), list_size, options)) {\n+\t\tthrow ConversionException(\n+\t\t    StringUtil::Format(options.error_message + \". Cannot default to NULL, because map keys cannot be NULL\"));\n+\t}\n+\n+\t// Transform values\n+\tif (!JSONTransform::Transform(vals, alc, MapVector::GetValues(result), list_size, options)) {\n+\t\tsuccess = false;\n+\t}\n+\n+\tif (!options.delay_error && !success) {\n+\t\tthrow InvalidInputException(options.error_message);\n+\t}\n+\n \treturn success;\n }\n \n@@ -554,7 +679,7 @@ bool TransformToJSON(yyjson_val *vals[], yyjson_alc *alc, Vector &result, const\n \tauto &validity = FlatVector::Validity(result);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tconst auto &val = vals[i];\n-\t\tif (!val) {\n+\t\tif (!val || unsafe_yyjson_is_null(val)) {\n \t\t\tvalidity.SetInvalid(i);\n \t\t} else {\n \t\t\tdata[i] = JSONCommon::WriteVal(val, alc);\n@@ -567,7 +692,8 @@ bool TransformToJSON(yyjson_val *vals[], yyjson_alc *alc, Vector &result, const\n bool JSONTransform::Transform(yyjson_val *vals[], yyjson_alc *alc, Vector &result, const idx_t count,\n                               JSONTransformOptions &options) {\n \tauto result_type = result.GetType();\n-\tif ((result_type == LogicalTypeId::TIMESTAMP || result_type == LogicalTypeId::DATE) && options.date_format_map) {\n+\tif ((result_type == LogicalTypeId::TIMESTAMP || result_type == LogicalTypeId::DATE) && options.date_format_map &&\n+\t    options.date_format_map->HasFormats(result_type.id())) {\n \t\t// Auto-detected date/timestamp format during sampling\n \t\treturn TransformFromStringWithFormat(vals, result, count, options);\n \t}\n@@ -636,27 +762,25 @@ bool JSONTransform::Transform(yyjson_val *vals[], yyjson_alc *alc, Vector &resul\n \tcase LogicalTypeId::BLOB:\n \t\treturn TransformToString(vals, alc, result, count);\n \tcase LogicalTypeId::STRUCT:\n-\t\treturn TransformObjectInternal(vals, alc, result, count, result_type, options);\n+\t\treturn TransformObjectInternal(vals, alc, result, count, options);\n \tcase LogicalTypeId::LIST:\n \t\treturn TransformArray(vals, alc, result, count, options);\n+\tcase LogicalTypeId::MAP:\n+\t\treturn TransformObjectToMap(vals, alc, result, count, options);\n \tdefault:\n \t\tthrow InternalException(\"Unexpected type at JSON Transform %s\", result_type.ToString());\n \t}\n }\n \n-template <bool strict>\n-static void TransformFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n-\n-\tconst auto count = args.size();\n-\tauto &input = args.data[0];\n+static bool TransformFunctionInternal(Vector &input, const idx_t count, Vector &result, yyjson_alc *alc,\n+                                      JSONTransformOptions &options) {\n \tUnifiedVectorFormat input_data;\n \tinput.ToUnifiedFormat(count, input_data);\n \tauto inputs = (string_t *)input_data.data;\n+\n \t// Read documents\n-\tyyjson_doc *docs[STANDARD_VECTOR_SIZE];\n-\tyyjson_val *vals[STANDARD_VECTOR_SIZE];\n+\tauto docs = (yyjson_doc **)alc->malloc(alc->ctx, sizeof(yyjson_doc *) * count);\n+\tauto vals = (yyjson_val **)alc->malloc(alc->ctx, sizeof(yyjson_val *) * count);\n \tauto &result_validity = FlatVector::Validity(result);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tauto idx = input_data.sel->get_index(i);\n@@ -670,14 +794,22 @@ static void TransformFunction(DataChunk &args, ExpressionState &state, Vector &r\n \t\t}\n \t}\n \n-\tJSONTransformOptions options(strict, strict, strict, false);\n-\n-\tif (!JSONTransform::Transform(vals, alc, result, count, options)) {\n-\t\tthrow InvalidInputException(options.error_message);\n+\tauto success = JSONTransform::Transform(vals, alc, result, count, options);\n+\tif (input.GetVectorType() == VectorType::CONSTANT_VECTOR) {\n+\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n \t}\n \n-\tif (args.AllConstant()) {\n-\t\tresult.SetVectorType(VectorType::CONSTANT_VECTOR);\n+\treturn success;\n+}\n+\n+template <bool strict>\n+static void TransformFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n+\tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n+\n+\tJSONTransformOptions options(strict, strict, strict, false);\n+\tif (!TransformFunctionInternal(args.data[0], args.size(), result, alc, options)) {\n+\t\tthrow InvalidInputException(options.error_message);\n \t}\n }\n \n@@ -705,4 +837,40 @@ ScalarFunctionSet JSONFunctions::GetTransformStrictFunction() {\n \treturn set;\n }\n \n+static bool JSONToAnyCast(Vector &source, Vector &result, idx_t count, CastParameters &parameters) {\n+\tauto &lstate = parameters.local_state->Cast<JSONFunctionLocalState>();\n+\tlstate.json_allocator.Reset();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n+\n+\tJSONTransformOptions options(true, true, true, true);\n+\toptions.delay_error = true;\n+\n+\tauto success = TransformFunctionInternal(source, count, result, alc, options);\n+\tif (!success) {\n+\t\tHandleCastError::AssignError(options.error_message, parameters.error_message);\n+\t}\n+\treturn success;\n+}\n+\n+BoundCastInfo JSONToAnyCastBind(BindCastInput &input, const LogicalType &source, const LogicalType &target) {\n+\treturn BoundCastInfo(JSONToAnyCast, nullptr, JSONFunctionLocalState::InitCastLocalState);\n+}\n+\n+void JSONFunctions::RegisterJSONTransformCastFunctions(CastFunctionSet &casts) {\n+\tauto json_to_any_cost = casts.ImplicitCastCost(JSONCommon::JSONType(), LogicalType::ANY);\n+\tcasts.RegisterCastFunction(JSONCommon::JSONType(), LogicalType::ANY, JSONToAnyCastBind, json_to_any_cost);\n+\n+\tconst auto struct_type = LogicalType::STRUCT({{\"any\", LogicalType::ANY}});\n+\tauto json_to_struct_cost = casts.ImplicitCastCost(LogicalType::VARCHAR, struct_type) - 2;\n+\tcasts.RegisterCastFunction(JSONCommon::JSONType(), struct_type, JSONToAnyCastBind, json_to_struct_cost);\n+\n+\tconst auto list_type = LogicalType::LIST(LogicalType::ANY);\n+\tauto json_to_list_cost = casts.ImplicitCastCost(LogicalType::VARCHAR, list_type) - 2;\n+\tcasts.RegisterCastFunction(JSONCommon::JSONType(), list_type, JSONToAnyCastBind, json_to_list_cost);\n+\n+\tconst auto map_type = LogicalType::MAP(LogicalType::ANY, LogicalType::ANY);\n+\tauto json_to_map_cost = casts.ImplicitCastCost(LogicalType::VARCHAR, map_type) - 2;\n+\tcasts.RegisterCastFunction(JSONCommon::JSONType(), map_type, JSONToAnyCastBind, json_to_map_cost);\n+}\n+\n } // namespace duckdb\ndiff --git a/extension/json/json_functions/json_valid.cpp b/extension/json/json_functions/json_valid.cpp\nindex a727c595a7b2..bd24a2ebd432 100644\n--- a/extension/json/json_functions/json_valid.cpp\n+++ b/extension/json/json_functions/json_valid.cpp\n@@ -4,7 +4,7 @@ namespace duckdb {\n \n static void ValidFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n \tauto &lstate = JSONFunctionLocalState::ResetAndGet(state);\n-\tauto alc = lstate.json_allocator.GetYYJSONAllocator();\n+\tauto alc = lstate.json_allocator.GetYYAlc();\n \tauto &inputs = args.data[0];\n \tUnaryExecutor::Execute<string_t, bool>(inputs, result, args.size(), [&](string_t input) {\n \t\treturn JSONCommon::ReadDocumentUnsafe(input, JSONCommon::READ_FLAG, alc);\ndiff --git a/extension/json/json_functions/read_json.cpp b/extension/json/json_functions/read_json.cpp\nindex fa7115fee958..0540be7b7d6a 100644\n--- a/extension/json/json_functions/read_json.cpp\n+++ b/extension/json/json_functions/read_json.cpp\n@@ -1,95 +1,90 @@\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"json_functions.hpp\"\n #include \"json_scan.hpp\"\n #include \"json_structure.hpp\"\n #include \"json_transform.hpp\"\n-#include \"duckdb/common/multi_file_reader.hpp\"\n \n namespace duckdb {\n \n void JSONScan::AutoDetect(ClientContext &context, JSONScanData &bind_data, vector<LogicalType> &return_types,\n                           vector<string> &names) {\n-\tauto original_scan_type = bind_data.type;\n-\tbind_data.type = JSONScanType::SAMPLE; // Set scan type to sample for the auto-detect, we restore it later\n-\tJSONScanGlobalState gstate(context, bind_data);\n-\tJSONScanLocalState lstate(context, gstate);\n-\tArenaAllocator allocator(BufferAllocator::Get(context));\n+\t// Change scan type during detection\n+\tbind_data.type = JSONScanType::SAMPLE;\n \n-\t// Read for the specified sample size\n+\t// These are used across files (if union_by_name)\n \tJSONStructureNode node;\n-\tbool more_than_one = false;\n+\tArenaAllocator allocator(BufferAllocator::Get(context));\n \tVector string_vector(LogicalType::VARCHAR);\n-\tidx_t remaining = bind_data.sample_size;\n-\twhile (remaining != 0) {\n-\t\tallocator.Reset();\n \n-\t\tif (gstate.file_index >= 10) {\n-\t\t\t// We really shouldn't open more than 10 files when sampling\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\tauto read_count = lstate.ReadNext(gstate);\n-\t\tif (lstate.scan_count > 1) {\n-\t\t\tmore_than_one = true;\n-\t\t}\n-\t\tif (read_count == 0) {\n-\t\t\tbreak;\n-\t\t}\n-\t\tidx_t next = MinValue<idx_t>(read_count, remaining);\n-\t\tyyjson_val **values;\n-\t\tif (bind_data.record_type == JSONRecordType::ARRAY_OF_RECORDS ||\n-\t\t    bind_data.record_type == JSONRecordType::ARRAY_OF_JSON) {\n-\t\t\tvalues = lstate.array_values;\n+\t// Loop through the files (if union_by_name, else just sample the first file)\n+\tfor (idx_t file_idx = 0; file_idx < bind_data.files.size(); file_idx++) {\n+\t\t// Create global/local state and place the reader in the right field\n+\t\tJSONScanGlobalState gstate(context, bind_data);\n+\t\tJSONScanLocalState lstate(context, gstate);\n+\t\tif (file_idx == 0) {\n+\t\t\tgstate.json_readers.emplace_back(bind_data.initial_reader.get());\n \t\t} else {\n-\t\t\tvalues = lstate.values;\n+\t\t\tgstate.json_readers.emplace_back(bind_data.union_readers[file_idx - 1].get());\n \t\t}\n-\t\tfor (idx_t i = 0; i < next; i++) {\n-\t\t\tif (values[i]) {\n-\t\t\t\tJSONStructure::ExtractStructure(values[i], node);\n+\n+\t\t// Read and detect schema\n+\t\tidx_t remaining = bind_data.sample_size;\n+\t\twhile (remaining != 0) {\n+\t\t\tallocator.Reset();\n+\t\t\tauto read_count = lstate.ReadNext(gstate);\n+\t\t\tif (read_count == 0) {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\n+\t\t\tidx_t next = MinValue<idx_t>(read_count, remaining);\n+\t\t\tfor (idx_t i = 0; i < next; i++) {\n+\t\t\t\tconst auto &val = lstate.values[i];\n+\t\t\t\tif (val) {\n+\t\t\t\t\tJSONStructure::ExtractStructure(val, node);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tif (!node.ContainsVarchar()) { // Can't refine non-VARCHAR types\n+\t\t\t\tcontinue;\n \t\t\t}\n+\t\t\tnode.InitializeCandidateTypes(bind_data.max_depth);\n+\t\t\tnode.RefineCandidateTypes(lstate.values, next, string_vector, allocator, bind_data.date_format_map);\n+\t\t\tremaining -= next;\n \t\t}\n-\t\tif (!node.ContainsVarchar()) { // Can't refine non-VARCHAR types\n-\t\t\tcontinue;\n+\n+\t\tif (file_idx == 0 && lstate.total_tuple_count != 0) {\n+\t\t\tbind_data.avg_tuple_size = lstate.total_read_size / lstate.total_tuple_count;\n+\t\t}\n+\n+\t\t// Close the file and stop detection if not union_by_name\n+\t\tif (!bind_data.options.file_options.union_by_name) {\n+\t\t\tbreak;\n \t\t}\n-\t\tnode.InitializeCandidateTypes(bind_data.max_depth);\n-\t\tnode.RefineCandidateTypes(values, next, string_vector, allocator, bind_data.date_format_map);\n-\t\tremaining -= next;\n \t}\n-\tbind_data.type = original_scan_type;\n+\n+\t// Restore the scan type\n+\tbind_data.type = JSONScanType::READ_JSON;\n \n \t// Convert structure to logical type\n \tauto type = JSONStructure::StructureToType(context, node, bind_data.max_depth);\n \n-\t// Detect record type\n-\tif (bind_data.record_type == JSONRecordType::AUTO) {\n-\t\tswitch (type.id()) {\n-\t\tcase LogicalTypeId::STRUCT:\n-\t\t\tbind_data.record_type = JSONRecordType::RECORDS;\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::LIST: {\n-\t\t\tif (more_than_one) {\n-\t\t\t\tbind_data.record_type = JSONRecordType::JSON;\n-\t\t\t} else {\n-\t\t\t\ttype = ListType::GetChildType(type);\n-\t\t\t\tif (type.id() == LogicalTypeId::STRUCT) {\n-\t\t\t\t\tbind_data.record_type = JSONRecordType::ARRAY_OF_RECORDS;\n-\t\t\t\t} else {\n-\t\t\t\t\tbind_data.record_type = JSONRecordType::ARRAY_OF_JSON;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tbreak;\n-\t\t}\n-\t\tdefault:\n-\t\t\tbind_data.record_type = JSONRecordType::JSON;\n+\t// Auto-detect record type\n+\tif (bind_data.options.record_type == JSONRecordType::AUTO_DETECT) {\n+\t\tif (type.id() == LogicalTypeId::STRUCT) {\n+\t\t\tbind_data.options.record_type = JSONRecordType::RECORDS;\n+\t\t} else {\n+\t\t\tbind_data.options.record_type = JSONRecordType::VALUES;\n \t\t}\n \t}\n \n-\t// Detect return type\n-\tif (bind_data.auto_detect) {\n-\t\tbind_data.transform_options.date_format_map = &bind_data.date_format_map;\n-\t\tif (type.id() != LogicalTypeId::STRUCT) {\n-\t\t\treturn_types.emplace_back(type);\n-\t\t\tnames.emplace_back(\"json\");\n-\t\t} else {\n+\tif (!bind_data.auto_detect) {\n+\t\treturn;\n+\t}\n+\n+\tbind_data.transform_options.date_format_map = &bind_data.date_format_map;\n+\n+\t// Auto-detect columns\n+\tif (bind_data.options.record_type == JSONRecordType::RECORDS) {\n+\t\tif (type.id() == LogicalTypeId::STRUCT) {\n \t\t\tconst auto &child_types = StructType::GetChildTypes(type);\n \t\t\treturn_types.reserve(child_types.size());\n \t\t\tnames.reserve(child_types.size());\n@@ -97,26 +92,29 @@ void JSONScan::AutoDetect(ClientContext &context, JSONScanData &bind_data, vecto\n \t\t\t\treturn_types.emplace_back(child_type.second);\n \t\t\t\tnames.emplace_back(child_type.first);\n \t\t\t}\n+\t\t} else {\n+\t\t\tthrow BinderException(\"json_read expected records, but got non-record JSON instead.\"\n+\t\t\t                      \"\\n Try setting records='auto' or records='false'.\");\n \t\t}\n+\t} else {\n+\t\tD_ASSERT(bind_data.options.record_type == JSONRecordType::VALUES);\n+\t\treturn_types.emplace_back(type);\n+\t\tnames.emplace_back(\"json\");\n \t}\n-\n-\tfor (auto &reader : gstate.json_readers) {\n-\t\tif (reader->IsOpen()) {\n-\t\t\treader->Reset();\n-\t\t}\n-\t}\n-\tbind_data.stored_readers = std::move(gstate.json_readers);\n }\n \n-void JSONScan::InitializeBindData(ClientContext &context, JSONScanData &bind_data,\n-                                  const named_parameter_map_t &named_parameters, vector<string> &names,\n-                                  vector<LogicalType> &return_types) {\n-\tfor (auto &kv : named_parameters) {\n+unique_ptr<FunctionData> ReadJSONBind(ClientContext &context, TableFunctionBindInput &input,\n+                                      vector<LogicalType> &return_types, vector<string> &names) {\n+\t// First bind default params\n+\tauto bind_data = make_uniq<JSONScanData>();\n+\tbind_data->Bind(context, input);\n+\n+\tfor (auto &kv : input.named_parameters) {\n \t\tauto loption = StringUtil::Lower(kv.first);\n \t\tif (loption == \"columns\") {\n \t\t\tauto &child_type = kv.second.type();\n \t\t\tif (child_type.id() != LogicalTypeId::STRUCT) {\n-\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter requires a struct as input\");\n+\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter requires a struct as input.\");\n \t\t\t}\n \t\t\tauto &struct_children = StructValue::GetChildren(kv.second);\n \t\t\tD_ASSERT(StructType::GetChildCount(child_type) == struct_children.size());\n@@ -125,155 +123,158 @@ void JSONScan::InitializeBindData(ClientContext &context, JSONScanData &bind_dat\n \t\t\t\tauto &val = struct_children[i];\n \t\t\t\tnames.push_back(name);\n \t\t\t\tif (val.type().id() != LogicalTypeId::VARCHAR) {\n-\t\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter type specification must be VARCHAR\");\n+\t\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter type specification must be VARCHAR.\");\n \t\t\t\t}\n \t\t\t\treturn_types.emplace_back(TransformStringToLogicalType(StringValue::Get(val), context));\n \t\t\t}\n \t\t\tD_ASSERT(names.size() == return_types.size());\n \t\t\tif (names.empty()) {\n-\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter needs at least one column\");\n+\t\t\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter needs at least one column.\");\n \t\t\t}\n-\t\t\tbind_data.names = names;\n+\t\t\tbind_data->names = names;\n \t\t} else if (loption == \"auto_detect\") {\n-\t\t\tbind_data.auto_detect = BooleanValue::Get(kv.second);\n+\t\t\tbind_data->auto_detect = BooleanValue::Get(kv.second);\n \t\t} else if (loption == \"sample_size\") {\n \t\t\tauto arg = BigIntValue::Get(kv.second);\n \t\t\tif (arg == -1) {\n-\t\t\t\tbind_data.sample_size = NumericLimits<idx_t>::Maximum();\n+\t\t\t\tbind_data->sample_size = NumericLimits<idx_t>::Maximum();\n \t\t\t} else if (arg > 0) {\n-\t\t\t\tbind_data.sample_size = arg;\n+\t\t\t\tbind_data->sample_size = arg;\n \t\t\t} else {\n \t\t\t\tthrow BinderException(\n-\t\t\t\t    \"read_json \\\"sample_size\\\" parameter must be positive, or -1 to sample the entire file\");\n+\t\t\t\t    \"read_json \\\"sample_size\\\" parameter must be positive, or -1 to sample the entire file.\");\n \t\t\t}\n \t\t} else if (loption == \"maximum_depth\") {\n \t\t\tauto arg = BigIntValue::Get(kv.second);\n \t\t\tif (arg == -1) {\n-\t\t\t\tbind_data.max_depth = NumericLimits<idx_t>::Maximum();\n+\t\t\t\tbind_data->max_depth = NumericLimits<idx_t>::Maximum();\n \t\t\t} else {\n-\t\t\t\tbind_data.max_depth = arg;\n+\t\t\t\tbind_data->max_depth = arg;\n \t\t\t}\n \t\t} else if (loption == \"dateformat\" || loption == \"date_format\") {\n \t\t\tauto format_string = StringValue::Get(kv.second);\n \t\t\tif (StringUtil::Lower(format_string) == \"iso\") {\n \t\t\t\tformat_string = \"%Y-%m-%d\";\n \t\t\t}\n-\t\t\tbind_data.date_format = format_string;\n+\t\t\tbind_data->date_format = format_string;\n \n \t\t\tStrpTimeFormat format;\n \t\t\tauto error = StrTimeFormat::ParseFormatSpecifier(format_string, format);\n \t\t\tif (!error.empty()) {\n-\t\t\t\tthrow InvalidInputException(\"Could not parse DATEFORMAT: %s\", error.c_str());\n+\t\t\t\tthrow InvalidInputException(\"read_json could not parse \\\"dateformat\\\": '%s'.\", error.c_str());\n \t\t\t}\n \t\t} else if (loption == \"timestampformat\" || loption == \"timestamp_format\") {\n \t\t\tauto format_string = StringValue::Get(kv.second);\n \t\t\tif (StringUtil::Lower(format_string) == \"iso\") {\n \t\t\t\tformat_string = \"%Y-%m-%dT%H:%M:%S.%fZ\";\n \t\t\t}\n-\t\t\tbind_data.timestamp_format = format_string;\n+\t\t\tbind_data->timestamp_format = format_string;\n \n \t\t\tStrpTimeFormat format;\n \t\t\tauto error = StrTimeFormat::ParseFormatSpecifier(format_string, format);\n \t\t\tif (!error.empty()) {\n-\t\t\t\tthrow InvalidInputException(\"Could not parse TIMESTAMPFORMAT: %s\", error.c_str());\n+\t\t\t\tthrow InvalidInputException(\"read_json could not parse \\\"timestampformat\\\": '%s'.\", error.c_str());\n \t\t\t}\n-\t\t} else if (loption == \"json_format\") {\n+\t\t} else if (loption == \"records\") {\n \t\t\tauto arg = StringValue::Get(kv.second);\n-\t\t\tif (arg == \"records\") {\n-\t\t\t\tbind_data.record_type = JSONRecordType::RECORDS;\n-\t\t\t} else if (arg == \"array_of_records\") {\n-\t\t\t\tbind_data.record_type = JSONRecordType::ARRAY_OF_RECORDS;\n-\t\t\t} else if (arg == \"values\") {\n-\t\t\t\tbind_data.record_type = JSONRecordType::JSON;\n-\t\t\t} else if (arg == \"array_of_values\") {\n-\t\t\t\tbind_data.record_type = JSONRecordType::ARRAY_OF_JSON;\n-\t\t\t} else if (arg == \"auto\") {\n-\t\t\t\tbind_data.record_type = JSONRecordType::AUTO;\n+\t\t\tif (arg == \"auto\") {\n+\t\t\t\tbind_data->options.record_type = JSONRecordType::AUTO_DETECT;\n+\t\t\t} else if (arg == \"true\") {\n+\t\t\t\tbind_data->options.record_type = JSONRecordType::RECORDS;\n+\t\t\t} else if (arg == \"false\") {\n+\t\t\t\tbind_data->options.record_type = JSONRecordType::VALUES;\n \t\t\t} else {\n-\t\t\t\tthrow InvalidInputException(\"\\\"json_format\\\" must be one of ['records', 'array_of_records', 'json', \"\n-\t\t\t\t                            \"'array_of_json', 'auto']\");\n+\t\t\t\tthrow InvalidInputException(\"read_json requires \\\"records\\\" to be one of ['auto', 'true', 'false'].\");\n \t\t\t}\n \t\t}\n \t}\n-}\n \n-unique_ptr<FunctionData> ReadJSONBind(ClientContext &context, TableFunctionBindInput &input,\n-                                      vector<LogicalType> &return_types, vector<string> &names) {\n-\t// First bind default params\n-\tauto result = JSONScanData::Bind(context, input);\n-\tauto &bind_data = (JSONScanData &)*result;\n-\n-\tJSONScan::InitializeBindData(context, bind_data, input.named_parameters, names, return_types);\n+\t// Specifying column names overrides auto-detect\n+\tif (!return_types.empty()) {\n+\t\tbind_data->auto_detect = false;\n+\t}\n \n-\tif (!bind_data.names.empty()) {\n-\t\tbind_data.auto_detect = false; // override auto_detect when columns are specified\n-\t} else if (!bind_data.auto_detect) {\n-\t\tthrow BinderException(\"read_json \\\"columns\\\" parameter is required when auto_detect is false\");\n+\tif (!bind_data->auto_detect) {\n+\t\t// Need to specify columns if RECORDS and not auto-detecting\n+\t\tif (return_types.empty()) {\n+\t\t\tthrow BinderException(\"read_json requires columns to be specified through the \\\"columns\\\" parameter.\"\n+\t\t\t                      \"\\n Use read_json_auto or set auto_detect=true to automatically guess columns.\");\n+\t\t}\n+\t\t// If we are reading VALUES, we can only have one column\n+\t\tif (bind_data->options.record_type == JSONRecordType::VALUES && return_types.size() != 1) {\n+\t\t\tthrow BinderException(\"read_json requires a single column to be specified through the \\\"columns\\\" \"\n+\t\t\t                      \"parameter when \\\"records\\\" is set to 'false'.\");\n+\t\t}\n \t}\n \n-\tbind_data.InitializeFormats();\n+\tbind_data->InitializeFormats();\n \n-\tif (bind_data.auto_detect || bind_data.record_type == JSONRecordType::AUTO) {\n-\t\tJSONScan::AutoDetect(context, bind_data, return_types, names);\n-\t\tbind_data.names = names;\n+\tif (bind_data->auto_detect || bind_data->options.record_type == JSONRecordType::AUTO_DETECT) {\n+\t\tJSONScan::AutoDetect(context, *bind_data, return_types, names);\n+\t\tbind_data->names = names;\n+\t\tD_ASSERT(return_types.size() == names.size());\n \t}\n \n-\tauto &transform_options = bind_data.transform_options;\n-\ttransform_options.strict_cast = !bind_data.ignore_errors;\n-\ttransform_options.error_duplicate_key = !bind_data.ignore_errors;\n+\tbind_data->reader_bind =\n+\t    MultiFileReader::BindOptions(bind_data->options.file_options, bind_data->files, return_types, names);\n+\n+\tauto &transform_options = bind_data->transform_options;\n+\ttransform_options.strict_cast = !bind_data->ignore_errors;\n+\ttransform_options.error_duplicate_key = !bind_data->ignore_errors;\n \ttransform_options.error_missing_key = false;\n-\ttransform_options.error_unknown_key = bind_data.auto_detect && !bind_data.ignore_errors;\n-\ttransform_options.from_file = true;\n+\ttransform_options.error_unknown_key = bind_data->auto_detect && !bind_data->ignore_errors;\n+\ttransform_options.delay_error = true;\n \n-\treturn result;\n+\treturn std::move(bind_data);\n }\n \n static void ReadJSONFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\tauto &gstate = ((JSONGlobalTableFunctionState &)*data_p.global_state).state;\n-\tauto &lstate = ((JSONLocalTableFunctionState &)*data_p.local_state).state;\n+\tauto &gstate = data_p.global_state->Cast<JSONGlobalTableFunctionState>().state;\n+\tauto &lstate = data_p.local_state->Cast<JSONLocalTableFunctionState>().state;\n \n \tconst auto count = lstate.ReadNext(gstate);\n-\tyyjson_val **values;\n-\tif (gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_RECORDS ||\n-\t    gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_JSON) {\n-\t\tvalues = lstate.array_values;\n-\t} else {\n-\t\tD_ASSERT(gstate.bind_data.record_type != JSONRecordType::AUTO);\n-\t\tvalues = lstate.values;\n-\t}\n+\tyyjson_val **values = lstate.values;\n \toutput.SetCardinality(count);\n \n-\tvector<Vector *> result_vectors;\n-\tresult_vectors.reserve(output.ColumnCount());\n-\tfor (auto &valid_col_idx : gstate.bind_data.valid_cols) {\n-\t\tresult_vectors.push_back(&output.data[valid_col_idx]);\n-\t}\n-\tD_ASSERT(result_vectors.size() == gstate.bind_data.names.size());\n-\n-\t// Pass current reader to transform options so we can get line number information if an error occurs\n-\tbool success;\n-\tif (gstate.bind_data.record_type == JSONRecordType::RECORDS ||\n-\t    gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_RECORDS) {\n-\t\tsuccess = JSONTransform::TransformObject(values, lstate.GetAllocator(), count, gstate.bind_data.names,\n-\t\t                                         result_vectors, lstate.transform_options);\n-\t} else {\n-\t\tsuccess = JSONTransform::Transform(values, lstate.GetAllocator(), *result_vectors[0], count,\n-\t\t                                   lstate.transform_options);\n+\tif (!gstate.names.empty()) {\n+\t\tvector<Vector *> result_vectors;\n+\t\tresult_vectors.reserve(gstate.column_indices.size());\n+\t\tfor (const auto &col_idx : gstate.column_indices) {\n+\t\t\tresult_vectors.emplace_back(&output.data[col_idx]);\n+\t\t}\n+\n+\t\tD_ASSERT(gstate.bind_data.options.record_type != JSONRecordType::AUTO_DETECT);\n+\t\tbool success;\n+\t\tif (gstate.bind_data.options.record_type == JSONRecordType::RECORDS) {\n+\t\t\tsuccess = JSONTransform::TransformObject(values, lstate.GetAllocator(), count, gstate.names, result_vectors,\n+\t\t\t                                         lstate.transform_options);\n+\t\t} else {\n+\t\t\tD_ASSERT(gstate.bind_data.options.record_type == JSONRecordType::VALUES);\n+\t\t\tsuccess = JSONTransform::Transform(values, lstate.GetAllocator(), *result_vectors[0], count,\n+\t\t\t                                   lstate.transform_options);\n+\t\t}\n+\n+\t\tif (!success) {\n+\t\t\tstring hint =\n+\t\t\t    gstate.bind_data.auto_detect\n+\t\t\t        ? \"\\nTry increasing 'sample_size', reducing 'maximum_depth', specifying 'columns', 'format' or \"\n+\t\t\t          \"'records' manually, or setting 'ignore_errors' to true.\"\n+\t\t\t        : \"\\nTry setting 'auto_detect' to true, specifying 'format' or 'records' manually, or setting \"\n+\t\t\t          \"'ignore_errors' to true.\";\n+\t\t\tlstate.ThrowTransformError(lstate.transform_options.object_index,\n+\t\t\t                           lstate.transform_options.error_message + hint);\n+\t\t}\n \t}\n \n-\tif (!success) {\n-\t\tstring hint = gstate.bind_data.auto_detect\n-\t\t                  ? \"\\nTry increasing 'sample_size', reducing 'maximum_depth', specifying 'columns' manually, \"\n-\t\t                    \"specifying 'lines' or 'json_format' manually, or setting 'ignore_errors' to true.\"\n-\t\t                  : \"\\n Try specifying 'lines' or 'json_format' manually, or setting 'ignore_errors' to true.\";\n-\t\tlstate.ThrowTransformError(lstate.transform_options.object_index,\n-\t\t                           lstate.transform_options.error_message + hint);\n+\tif (output.size() != 0) {\n+\t\tMultiFileReader::FinalizeChunk(gstate.bind_data.reader_bind, lstate.GetReaderData(), output);\n \t}\n }\n \n TableFunction JSONFunctions::GetReadJSONTableFunction(shared_ptr<JSONScanInfo> function_info) {\n \tTableFunction table_function({LogicalType::VARCHAR}, ReadJSONFunction, ReadJSONBind,\n \t                             JSONGlobalTableFunctionState::Init, JSONLocalTableFunctionState::Init);\n+\ttable_function.name = \"read_json\";\n \n \tJSONScan::TableFunctionDefaults(table_function);\n \ttable_function.named_parameters[\"columns\"] = LogicalType::ANY;\n@@ -283,10 +284,9 @@ TableFunction JSONFunctions::GetReadJSONTableFunction(shared_ptr<JSONScanInfo> f\n \ttable_function.named_parameters[\"date_format\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"timestampformat\"] = LogicalType::VARCHAR;\n \ttable_function.named_parameters[\"timestamp_format\"] = LogicalType::VARCHAR;\n-\ttable_function.named_parameters[\"json_format\"] = LogicalType::VARCHAR;\n+\ttable_function.named_parameters[\"records\"] = LogicalType::VARCHAR;\n \n-\ttable_function.projection_pushdown = true;\n-\t// TODO: might be able to do filter pushdown/prune too\n+\t// TODO: might be able to do filter pushdown/prune ?\n \n \ttable_function.function_info = std::move(function_info);\n \n@@ -303,25 +303,25 @@ TableFunctionSet CreateJSONFunctionInfo(string name, shared_ptr<JSONScanInfo> in\n }\n \n TableFunctionSet JSONFunctions::GetReadJSONFunction() {\n-\tauto info =\n-\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::UNSTRUCTURED, JSONRecordType::RECORDS, false);\n+\tauto info = make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::ARRAY, JSONRecordType::RECORDS);\n \treturn CreateJSONFunctionInfo(\"read_json\", std::move(info));\n }\n \n TableFunctionSet JSONFunctions::GetReadNDJSONFunction() {\n-\tauto info = make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::NEWLINE_DELIMITED,\n-\t                                      JSONRecordType::RECORDS, false);\n+\tauto info =\n+\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::NEWLINE_DELIMITED, JSONRecordType::RECORDS);\n \treturn CreateJSONFunctionInfo(\"read_ndjson\", std::move(info));\n }\n \n TableFunctionSet JSONFunctions::GetReadJSONAutoFunction() {\n-\tauto info = make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::AUTO_DETECT, JSONRecordType::AUTO, true);\n+\tauto info =\n+\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::AUTO_DETECT, JSONRecordType::AUTO_DETECT, true);\n \treturn CreateJSONFunctionInfo(\"read_json_auto\", std::move(info), true);\n }\n \n TableFunctionSet JSONFunctions::GetReadNDJSONAutoFunction() {\n-\tauto info =\n-\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::NEWLINE_DELIMITED, JSONRecordType::AUTO, true);\n+\tauto info = make_shared<JSONScanInfo>(JSONScanType::READ_JSON, JSONFormat::NEWLINE_DELIMITED,\n+\t                                      JSONRecordType::AUTO_DETECT, true);\n \treturn CreateJSONFunctionInfo(\"read_ndjson_auto\", std::move(info), true);\n }\n \ndiff --git a/extension/json/json_functions/read_json_objects.cpp b/extension/json/json_functions/read_json_objects.cpp\nindex fbdff4551489..dab77ddbf209 100644\n--- a/extension/json/json_functions/read_json_objects.cpp\n+++ b/extension/json/json_functions/read_json_objects.cpp\n@@ -6,34 +6,46 @@ namespace duckdb {\n \n unique_ptr<FunctionData> ReadJSONObjectsBind(ClientContext &context, TableFunctionBindInput &input,\n                                              vector<LogicalType> &return_types, vector<string> &names) {\n+\tauto bind_data = make_uniq<JSONScanData>();\n+\tbind_data->Bind(context, input);\n+\n+\tbind_data->names.emplace_back(\"json\");\n \treturn_types.push_back(JSONCommon::JSONType());\n \tnames.emplace_back(\"json\");\n-\treturn JSONScanData::Bind(context, input);\n+\n+\tbind_data->reader_bind =\n+\t    MultiFileReader::BindOptions(bind_data->options.file_options, bind_data->files, return_types, names);\n+\n+\treturn std::move(bind_data);\n }\n \n static void ReadJSONObjectsFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\tD_ASSERT(output.ColumnCount() == 1);\n-\tD_ASSERT(JSONCommon::LogicalTypeIsJSON(output.data[0].GetType()));\n-\tauto &gstate = ((JSONGlobalTableFunctionState &)*data_p.global_state).state;\n-\tauto &lstate = ((JSONLocalTableFunctionState &)*data_p.local_state).state;\n+\tauto &gstate = data_p.global_state->Cast<JSONGlobalTableFunctionState>().state;\n+\tauto &lstate = data_p.local_state->Cast<JSONLocalTableFunctionState>().state;\n \n \t// Fetch next lines\n \tconst auto count = lstate.ReadNext(gstate);\n-\tconst auto lines = lstate.lines;\n+\tconst auto units = lstate.units;\n \tconst auto objects = lstate.values;\n \n-\t// Create the strings without copying them\n-\tauto strings = FlatVector::GetData<string_t>(output.data[0]);\n-\tauto &validity = FlatVector::Validity(output.data[0]);\n-\tfor (idx_t i = 0; i < count; i++) {\n-\t\tif (objects[i]) {\n-\t\t\tstrings[i] = string_t(lines[i].pointer, lines[i].size);\n-\t\t} else {\n-\t\t\tvalidity.SetInvalid(i);\n+\tif (!gstate.names.empty()) {\n+\t\t// Create the strings without copying them\n+\t\tauto strings = FlatVector::GetData<string_t>(output.data[0]);\n+\t\tauto &validity = FlatVector::Validity(output.data[0]);\n+\t\tfor (idx_t i = 0; i < count; i++) {\n+\t\t\tif (objects[i]) {\n+\t\t\t\tstrings[i] = string_t(units[i].pointer, units[i].size);\n+\t\t\t} else {\n+\t\t\t\tvalidity.SetInvalid(i);\n+\t\t\t}\n \t\t}\n \t}\n \n \toutput.SetCardinality(count);\n+\n+\tif (output.size() != 0) {\n+\t\tMultiFileReader::FinalizeChunk(gstate.bind_data.reader_bind, lstate.GetReaderData(), output);\n+\t}\n }\n \n TableFunction GetReadJSONObjectsTableFunction(bool list_parameter, shared_ptr<JSONScanInfo> function_info) {\n@@ -49,7 +61,7 @@ TableFunction GetReadJSONObjectsTableFunction(bool list_parameter, shared_ptr<JS\n TableFunctionSet JSONFunctions::GetReadJSONObjectsFunction() {\n \tTableFunctionSet function_set(\"read_json_objects\");\n \tauto function_info =\n-\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::UNSTRUCTURED, JSONRecordType::JSON);\n+\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::ARRAY, JSONRecordType::RECORDS);\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));\n \treturn function_set;\n@@ -57,8 +69,17 @@ TableFunctionSet JSONFunctions::GetReadJSONObjectsFunction() {\n \n TableFunctionSet JSONFunctions::GetReadNDJSONObjectsFunction() {\n \tTableFunctionSet function_set(\"read_ndjson_objects\");\n+\tauto function_info = make_shared<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::NEWLINE_DELIMITED,\n+\t                                               JSONRecordType::RECORDS);\n+\tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));\n+\tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));\n+\treturn function_set;\n+}\n+\n+TableFunctionSet JSONFunctions::GetReadJSONObjectsAutoFunction() {\n+\tTableFunctionSet function_set(\"read_json_objects_auto\");\n \tauto function_info =\n-\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::NEWLINE_DELIMITED, JSONRecordType::JSON);\n+\t    make_shared<JSONScanInfo>(JSONScanType::READ_JSON_OBJECTS, JSONFormat::AUTO_DETECT, JSONRecordType::RECORDS);\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(false, function_info));\n \tfunction_set.AddFunction(GetReadJSONObjectsTableFunction(true, function_info));\n \treturn function_set;\ndiff --git a/extension/json/json_scan.cpp b/extension/json/json_scan.cpp\nindex 51b01663247a..71fce5abffd3 100644\n--- a/extension/json/json_scan.cpp\n+++ b/extension/json/json_scan.cpp\n@@ -1,72 +1,76 @@\n #include \"json_scan.hpp\"\n \n-#include \"duckdb/main/database.hpp\"\n+#include \"duckdb/common/enum_util.hpp\"\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/main/extension_helper.hpp\"\n #include \"duckdb/parallel/task_scheduler.hpp\"\n #include \"duckdb/storage/buffer_manager.hpp\"\n-#include \"duckdb/common/multi_file_reader.hpp\"\n \n namespace duckdb {\n \n JSONScanData::JSONScanData() {\n }\n \n-unique_ptr<FunctionData> JSONScanData::Bind(ClientContext &context, TableFunctionBindInput &input) {\n-\tauto result = make_uniq<JSONScanData>();\n-\tauto &options = result->options;\n-\n-\tauto &info = (JSONScanInfo &)*input.info;\n-\tresult->type = info.type;\n+void JSONScanData::Bind(ClientContext &context, TableFunctionBindInput &input) {\n+\tauto &info = input.info->Cast<JSONScanInfo>();\n+\ttype = info.type;\n \toptions.format = info.format;\n-\tresult->record_type = info.record_type;\n-\tresult->auto_detect = info.auto_detect;\n-\tresult->file_paths = MultiFileReader::GetFileList(context, input.inputs[0], \"JSON\");\n+\toptions.record_type = info.record_type;\n+\tauto_detect = info.auto_detect;\n \n \tfor (auto &kv : input.named_parameters) {\n+\t\tif (MultiFileReader::ParseOption(kv.first, kv.second, options.file_options)) {\n+\t\t\tcontinue;\n+\t\t}\n \t\tauto loption = StringUtil::Lower(kv.first);\n \t\tif (loption == \"ignore_errors\") {\n-\t\t\tresult->ignore_errors = BooleanValue::Get(kv.second);\n+\t\t\tignore_errors = BooleanValue::Get(kv.second);\n \t\t} else if (loption == \"maximum_object_size\") {\n-\t\t\tresult->maximum_object_size = MaxValue<idx_t>(UIntegerValue::Get(kv.second), result->maximum_object_size);\n-\t\t} else if (loption == \"lines\") {\n-\t\t\tauto format = StringUtil::Lower(StringValue::Get(kv.second));\n-\t\t\tif (format == \"auto\") {\n+\t\t\tmaximum_object_size = MaxValue<idx_t>(UIntegerValue::Get(kv.second), maximum_object_size);\n+\t\t} else if (loption == \"format\") {\n+\t\t\tauto arg = StringValue::Get(kv.second);\n+\t\t\tif (arg == \"auto\") {\n \t\t\t\toptions.format = JSONFormat::AUTO_DETECT;\n-\t\t\t} else if (format == \"false\") {\n+\t\t\t} else if (arg == \"unstructured\") {\n \t\t\t\toptions.format = JSONFormat::UNSTRUCTURED;\n-\t\t\t} else if (format == \"true\") {\n+\t\t\t} else if (arg == \"newline_delimited\" || arg == \"nd\") {\n \t\t\t\toptions.format = JSONFormat::NEWLINE_DELIMITED;\n+\t\t\t} else if (arg == \"array\") {\n+\t\t\t\toptions.format = JSONFormat::ARRAY;\n \t\t\t} else {\n-\t\t\t\tthrow BinderException(\"\\\"lines\\\" must be one of ['auto', 'true', 'false']\");\n+\t\t\t\tthrow InvalidInputException(\n+\t\t\t\t    \"format must be one of ['auto', 'unstructured', 'newline_delimited', 'array']\");\n \t\t\t}\n \t\t} else if (loption == \"compression\") {\n-\t\t\tauto compression = StringUtil::Lower(StringValue::Get(kv.second));\n-\t\t\tif (compression == \"none\") {\n-\t\t\t\toptions.compression = FileCompressionType::UNCOMPRESSED;\n-\t\t\t} else if (compression == \"gzip\") {\n-\t\t\t\toptions.compression = FileCompressionType::GZIP;\n-\t\t\t} else if (compression == \"zstd\") {\n-\t\t\t\toptions.compression = FileCompressionType::ZSTD;\n-\t\t\t} else if (compression == \"auto\") {\n-\t\t\t\toptions.compression = FileCompressionType::AUTO_DETECT;\n-\t\t\t} else {\n-\t\t\t\tthrow BinderException(\"compression must be one of ['none', 'gzip', 'zstd', 'auto']\");\n-\t\t\t}\n+\t\t\tSetCompression(StringUtil::Lower(StringValue::Get(kv.second)));\n \t\t}\n \t}\n \n-\treturn std::move(result);\n-}\n+\tfiles = MultiFileReader::GetFileList(context, input.inputs[0], \"JSON\");\n \n-void JSONScanData::InitializeFormats() {\n-\t// Set defaults for date/timestamp formats if we need to\n-\tif (!auto_detect && date_format.empty()) {\n-\t\tdate_format = \"%Y-%m-%d\";\n+\tif (options.file_options.auto_detect_hive_partitioning) {\n+\t\toptions.file_options.hive_partitioning = MultiFileReaderOptions::AutoDetectHivePartitioning(files);\n \t}\n-\tif (!auto_detect && timestamp_format.empty()) {\n-\t\ttimestamp_format = \"%Y-%m-%dT%H:%M:%S.%fZ\";\n+\n+\tInitializeReaders(context);\n+}\n+\n+void JSONScanData::InitializeReaders(ClientContext &context) {\n+\tunion_readers.resize(files.empty() ? 0 : files.size() - 1);\n+\tfor (idx_t file_idx = 0; file_idx < files.size(); file_idx++) {\n+\t\tif (file_idx == 0) {\n+\t\t\tinitial_reader = make_uniq<BufferedJSONReader>(context, options, files[0]);\n+\t\t} else {\n+\t\t\tunion_readers[file_idx - 1] = make_uniq<BufferedJSONReader>(context, options, files[file_idx]);\n+\t\t}\n \t}\n+}\n \n+void JSONScanData::InitializeFormats() {\n+\tInitializeFormats(auto_detect);\n+}\n+\n+void JSONScanData::InitializeFormats(bool auto_detect_p) {\n \t// Initialize date_format_map if anything was specified\n \tif (!date_format.empty()) {\n \t\tdate_format_map.AddFormat(LogicalTypeId::DATE, date_format);\n@@ -75,8 +79,8 @@ void JSONScanData::InitializeFormats() {\n \t\tdate_format_map.AddFormat(LogicalTypeId::TIMESTAMP, timestamp_format);\n \t}\n \n-\tif (auto_detect) {\n-\t\tstatic const unordered_map<LogicalTypeId, vector<const char *>, LogicalTypeIdHash> FORMAT_TEMPLATES = {\n+\tif (auto_detect_p) {\n+\t\tstatic const type_id_map_t<vector<const char *>> FORMAT_TEMPLATES = {\n \t\t    {LogicalTypeId::DATE, {\"%m-%d-%Y\", \"%m-%d-%y\", \"%d-%m-%Y\", \"%d-%m-%y\", \"%Y-%m-%d\", \"%y-%m-%d\"}},\n \t\t    {LogicalTypeId::TIMESTAMP,\n \t\t     {\"%Y-%m-%d %H:%M:%S.%f\", \"%m-%d-%Y %I:%M:%S %p\", \"%m-%d-%y %I:%M:%S %p\", \"%d-%m-%Y %H:%M:%S\",\n@@ -85,56 +89,73 @@ void JSONScanData::InitializeFormats() {\n \n \t\t// Populate possible date/timestamp formats, assume this is consistent across columns\n \t\tfor (auto &kv : FORMAT_TEMPLATES) {\n-\t\t\tconst auto &type = kv.first;\n-\t\t\tif (date_format_map.HasFormats(type)) {\n+\t\t\tconst auto &logical_type = kv.first;\n+\t\t\tif (date_format_map.HasFormats(logical_type)) {\n \t\t\t\tcontinue; // Already populated\n \t\t\t}\n \t\t\tconst auto &format_strings = kv.second;\n \t\t\tfor (auto &format_string : format_strings) {\n-\t\t\t\tdate_format_map.AddFormat(type, format_string);\n+\t\t\t\tdate_format_map.AddFormat(logical_type, format_string);\n \t\t\t}\n \t\t}\n \t}\n }\n \n-void JSONScanData::Serialize(FieldWriter &writer) {\n+void JSONScanData::SetCompression(const string &compression) {\n+\toptions.compression = EnumUtil::FromString<FileCompressionType>(StringUtil::Upper(compression));\n+}\n+\n+void JSONScanData::Serialize(FieldWriter &writer) const {\n \twriter.WriteField<JSONScanType>(type);\n+\n \toptions.Serialize(writer);\n-\twriter.WriteList<string>(file_paths);\n+\n+\twriter.WriteSerializable(reader_bind);\n+\n+\twriter.WriteList<string>(files);\n+\n \twriter.WriteField<bool>(ignore_errors);\n \twriter.WriteField<idx_t>(maximum_object_size);\n-\ttransform_options.Serialize(writer);\n \twriter.WriteField<bool>(auto_detect);\n \twriter.WriteField<idx_t>(sample_size);\n-\twriter.WriteList<string>(names);\n-\twriter.WriteList<idx_t>(valid_cols);\n \twriter.WriteField<idx_t>(max_depth);\n-\twriter.WriteField<JSONRecordType>(record_type);\n+\n+\ttransform_options.Serialize(writer);\n+\twriter.WriteList<string>(names);\n \tif (!date_format.empty()) {\n \t\twriter.WriteString(date_format);\n-\t} else {\n+\t} else if (date_format_map.HasFormats(LogicalTypeId::DATE)) {\n \t\twriter.WriteString(date_format_map.GetFormat(LogicalTypeId::DATE).format_specifier);\n+\t} else {\n+\t\twriter.WriteString(\"\");\n \t}\n \tif (!timestamp_format.empty()) {\n \t\twriter.WriteString(timestamp_format);\n-\t} else {\n+\t} else if (date_format_map.HasFormats(LogicalTypeId::TIMESTAMP)) {\n \t\twriter.WriteString(date_format_map.GetFormat(LogicalTypeId::TIMESTAMP).format_specifier);\n+\t} else {\n+\t\twriter.WriteString(\"\");\n \t}\n }\n \n-void JSONScanData::Deserialize(FieldReader &reader) {\n+void JSONScanData::Deserialize(ClientContext &context, FieldReader &reader) {\n \ttype = reader.ReadRequired<JSONScanType>();\n+\n \toptions.Deserialize(reader);\n-\tfile_paths = reader.ReadRequiredList<string>();\n+\n+\treader_bind = reader.ReadRequiredSerializable<MultiFileReaderBindData, MultiFileReaderBindData>();\n+\n+\tfiles = reader.ReadRequiredList<string>();\n+\tInitializeReaders(context);\n+\n \tignore_errors = reader.ReadRequired<bool>();\n \tmaximum_object_size = reader.ReadRequired<idx_t>();\n-\ttransform_options.Deserialize(reader);\n \tauto_detect = reader.ReadRequired<bool>();\n \tsample_size = reader.ReadRequired<idx_t>();\n-\tnames = reader.ReadRequiredList<string>();\n-\tvalid_cols = reader.ReadRequiredList<idx_t>();\n \tmax_depth = reader.ReadRequired<idx_t>();\n-\trecord_type = reader.ReadRequired<JSONRecordType>();\n+\n+\ttransform_options.Deserialize(reader);\n+\tnames = reader.ReadRequiredList<string>();\n \tdate_format = reader.ReadRequired<string>();\n \ttimestamp_format = reader.ReadRequired<string>();\n \n@@ -142,86 +163,97 @@ void JSONScanData::Deserialize(FieldReader &reader) {\n \ttransform_options.date_format_map = &date_format_map;\n }\n \n-JSONScanGlobalState::JSONScanGlobalState(ClientContext &context, JSONScanData &bind_data_p)\n-    : bind_data(bind_data_p), allocator(BufferManager::GetBufferManager(context).GetBufferAllocator()),\n+JSONScanGlobalState::JSONScanGlobalState(ClientContext &context, const JSONScanData &bind_data_p)\n+    : bind_data(bind_data_p), transform_options(bind_data.transform_options),\n+      allocator(BufferManager::GetBufferManager(context).GetBufferAllocator()),\n       buffer_capacity(bind_data.maximum_object_size * 2), file_index(0), batch_index(0),\n       system_threads(TaskScheduler::GetScheduler(context).NumberOfThreads()) {\n-\tif (bind_data.stored_readers.empty()) {\n-\t\tjson_readers.reserve(bind_data.file_paths.size());\n-\t\tfor (idx_t i = 0; i < bind_data.file_paths.size(); i++) {\n-\t\t\tjson_readers.push_back(make_uniq<BufferedJSONReader>(context, bind_data.options, bind_data.file_paths[i]));\n-\t\t}\n-\t} else {\n-\t\tjson_readers = std::move(bind_data.stored_readers);\n-\t}\n }\n \n JSONScanLocalState::JSONScanLocalState(ClientContext &context, JSONScanGlobalState &gstate)\n-    : scan_count(0), array_idx(0), array_offset(0), batch_index(DConstants::INVALID_INDEX), bind_data(gstate.bind_data),\n-      json_allocator(BufferAllocator::Get(context)), current_reader(nullptr), current_buffer_handle(nullptr),\n-      is_last(false), buffer_size(0), buffer_offset(0), prev_buffer_remainder(0) {\n+    : scan_count(0), batch_index(DConstants::INVALID_INDEX), total_read_size(0), total_tuple_count(0),\n+      bind_data(gstate.bind_data), allocator(BufferAllocator::Get(context)), current_reader(nullptr),\n+      current_buffer_handle(nullptr), is_last(false), buffer_size(0), buffer_offset(0), prev_buffer_remainder(0) {\n \n \t// Buffer to reconstruct JSON values when they cross a buffer boundary\n-\treconstruct_buffer = gstate.allocator.Allocate(gstate.bind_data.maximum_object_size + YYJSON_PADDING_SIZE);\n-\n-\t// This is needed for JSONFormat::UNSTRUCTURED, to make use of YYJSON_READ_INSITU\n-\tcurrent_buffer_copy = gstate.allocator.Allocate(gstate.buffer_capacity);\n-\tbuffer_copy_ptr = (const char *)current_buffer_copy.get();\n+\treconstruct_buffer = gstate.allocator.Allocate(gstate.buffer_capacity);\n }\n \n JSONGlobalTableFunctionState::JSONGlobalTableFunctionState(ClientContext &context, TableFunctionInitInput &input)\n-    : state(context, (JSONScanData &)*input.bind_data) {\n+    : state(context, input.bind_data->Cast<JSONScanData>()) {\n }\n \n unique_ptr<GlobalTableFunctionState> JSONGlobalTableFunctionState::Init(ClientContext &context,\n                                                                         TableFunctionInitInput &input) {\n-\tauto &bind_data = (JSONScanData &)*input.bind_data;\n+\tauto &bind_data = input.bind_data->Cast<JSONScanData>();\n \tauto result = make_uniq<JSONGlobalTableFunctionState>(context, input);\n+\tauto &gstate = result->state;\n \n \t// Perform projection pushdown\n-\tif (bind_data.type == JSONScanType::READ_JSON) {\n-\t\tD_ASSERT(input.column_ids.size() <= bind_data.names.size()); // Can't project to have more columns\n-\t\tvector<string> names;\n-\t\tnames.reserve(input.column_ids.size());\n-\t\tfor (idx_t i = 0; i < input.column_ids.size(); i++) {\n-\t\t\tconst auto &id = input.column_ids[i];\n-\t\t\tif (IsRowIdColumnId(id)) {\n-\t\t\t\tcontinue;\n+\tfor (idx_t col_idx = 0; col_idx < input.column_ids.size(); col_idx++) {\n+\t\tconst auto &col_id = input.column_ids[col_idx];\n+\n+\t\t// Skip any multi-file reader / row id stuff\n+\t\tif (col_id == bind_data.reader_bind.filename_idx || IsRowIdColumnId(col_id)) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tbool skip = false;\n+\t\tfor (const auto &hive_partitioning_index : bind_data.reader_bind.hive_partitioning_indexes) {\n+\t\t\tif (col_id == hive_partitioning_index.index) {\n+\t\t\t\tskip = true;\n+\t\t\t\tbreak;\n \t\t\t}\n-\t\t\tnames.push_back(std::move(bind_data.names[id]));\n-\t\t\tbind_data.valid_cols.push_back(i);\n \t\t}\n-\t\tif (names.size() < bind_data.names.size()) {\n-\t\t\t// If we are auto-detecting, but don't need all columns present in the file,\n-\t\t\t// then we don't need to throw an error if we encounter an unseen column\n-\t\t\tbind_data.transform_options.error_unknown_key = false;\n+\t\tif (skip) {\n+\t\t\tcontinue;\n \t\t}\n-\t\tbind_data.names = std::move(names);\n+\n+\t\tgstate.column_indices.push_back(col_idx);\n+\t\tgstate.names.push_back(bind_data.names[col_id]);\n+\t}\n+\n+\tif (gstate.names.size() < bind_data.names.size() || bind_data.options.file_options.union_by_name) {\n+\t\t// If we are auto-detecting, but don't need all columns present in the file,\n+\t\t// then we don't need to throw an error if we encounter an unseen column\n+\t\tgstate.transform_options.error_unknown_key = false;\n \t}\n+\n+\t// Place readers where they belong\n+\tif (bind_data.initial_reader) {\n+\t\tbind_data.initial_reader->Reset();\n+\t\tgstate.json_readers.emplace_back(bind_data.initial_reader.get());\n+\t}\n+\tfor (const auto &reader : bind_data.union_readers) {\n+\t\treader->Reset();\n+\t\tgstate.json_readers.emplace_back(reader.get());\n+\t}\n+\n+\tvector<LogicalType> dummy_types(input.column_ids.size(), LogicalType::ANY);\n+\tfor (auto &reader : gstate.json_readers) {\n+\t\tMultiFileReader::FinalizeBind(reader->GetOptions().file_options, gstate.bind_data.reader_bind,\n+\t\t                              reader->GetFileName(), gstate.names, dummy_types, bind_data.names,\n+\t\t                              input.column_ids, reader->reader_data);\n+\t}\n+\n \treturn std::move(result);\n }\n \n idx_t JSONGlobalTableFunctionState::MaxThreads() const {\n \tauto &bind_data = state.bind_data;\n+\tif (bind_data.options.format == JSONFormat::NEWLINE_DELIMITED &&\n+\t    bind_data.options.compression == FileCompressionType::UNCOMPRESSED) {\n+\t\treturn state.system_threads;\n+\t}\n \n-\tauto num_files = bind_data.file_paths.size();\n-\tidx_t readers_per_file;\n-\tif (bind_data.options.format == JSONFormat::UNSTRUCTURED) {\n-\t\t// Unstructured necessitates single thread\n-\t\treaders_per_file = 1;\n-\t} else if (!state.json_readers.empty() && state.json_readers[0]->IsOpen()) {\n+\tif (!state.json_readers.empty() && state.json_readers[0]->IsOpen()) {\n \t\tauto &reader = *state.json_readers[0];\n-\t\tconst auto &options = reader.GetOptions();\n-\t\tif (options.format == JSONFormat::UNSTRUCTURED || options.compression != FileCompressionType::UNCOMPRESSED) {\n-\t\t\t// Auto-detected unstructured - same story, compression also really limits parallelism\n-\t\t\treaders_per_file = 1;\n-\t\t} else {\n+\t\tif (reader.IsParallel()) { // Auto-detected parallel scan\n \t\t\treturn state.system_threads;\n \t\t}\n-\t} else {\n-\t\treturn state.system_threads;\n \t}\n-\treturn num_files * readers_per_file;\n+\n+\t// One reader per file\n+\treturn bind_data.files.size();\n }\n \n JSONLocalTableFunctionState::JSONLocalTableFunctionState(ClientContext &context, JSONScanGlobalState &gstate)\n@@ -231,12 +263,12 @@ JSONLocalTableFunctionState::JSONLocalTableFunctionState(ClientContext &context,\n unique_ptr<LocalTableFunctionState> JSONLocalTableFunctionState::Init(ExecutionContext &context,\n                                                                       TableFunctionInitInput &input,\n                                                                       GlobalTableFunctionState *global_state) {\n-\tauto &gstate = (JSONGlobalTableFunctionState &)*global_state;\n+\tauto &gstate = global_state->Cast<JSONGlobalTableFunctionState>();\n \tauto result = make_uniq<JSONLocalTableFunctionState>(context.client, gstate.state);\n \n \t// Copy the transform options / date format map because we need to do thread-local stuff\n \tresult->state.date_format_map = gstate.state.bind_data.date_format_map;\n-\tresult->state.transform_options = gstate.state.bind_data.transform_options;\n+\tresult->state.transform_options = gstate.state.transform_options;\n \tresult->state.transform_options.date_format_map = &result->state.date_format_map;\n \n \treturn std::move(result);\n@@ -246,7 +278,7 @@ idx_t JSONLocalTableFunctionState::GetBatchIndex() const {\n \treturn state.batch_index;\n }\n \n-static inline void SkipWhitespace(const char *buffer_ptr, idx_t &buffer_offset, idx_t &buffer_size) {\n+static inline void SkipWhitespace(const char *buffer_ptr, idx_t &buffer_offset, const idx_t &buffer_size) {\n \tfor (; buffer_offset != buffer_size; buffer_offset++) {\n \t\tif (!StringUtil::CharacterIsSpace(buffer_ptr[buffer_offset])) {\n \t\t\tbreak;\n@@ -255,50 +287,21 @@ static inline void SkipWhitespace(const char *buffer_ptr, idx_t &buffer_offset,\n }\n \n idx_t JSONScanLocalState::ReadNext(JSONScanGlobalState &gstate) {\n-\tjson_allocator.Reset();\n+\tallocator.Reset();\n \n-\tif ((gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_RECORDS ||\n-\t     gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_JSON) &&\n-\t    array_idx < scan_count) {\n-\t\treturn GetObjectsFromArray(gstate);\n-\t}\n-\n-\tidx_t count = 0;\n+\tscan_count = 0;\n \tif (buffer_offset == buffer_size) {\n \t\tif (!ReadNextBuffer(gstate)) {\n-\t\t\treturn 0;\n+\t\t\treturn scan_count;\n \t\t}\n-\t\tif (current_buffer_handle->buffer_index != 0 &&\n-\t\t    current_reader->GetOptions().format == JSONFormat::NEWLINE_DELIMITED) {\n+\t\tif (current_buffer_handle->buffer_index != 0 && current_reader->GetFormat() == JSONFormat::NEWLINE_DELIMITED) {\n \t\t\tReconstructFirstObject(gstate);\n-\t\t\tcount++;\n+\t\t\tscan_count++;\n \t\t}\n \t}\n+\tParseNextChunk();\n \n-\tauto &options = current_reader->GetOptions();\n-\tswitch (options.format) {\n-\tcase JSONFormat::UNSTRUCTURED:\n-\t\tReadUnstructured(count);\n-\t\tbreak;\n-\tcase JSONFormat::NEWLINE_DELIMITED:\n-\t\tReadNewlineDelimited(count);\n-\t\tbreak;\n-\tdefault:\n-\t\tthrow InternalException(\"Unknown JSON format\");\n-\t}\n-\tscan_count = count;\n-\n-\t// Skip over any remaining whitespace for the next scan\n-\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n-\n-\tif (gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_RECORDS ||\n-\t    gstate.bind_data.record_type == JSONRecordType::ARRAY_OF_JSON) {\n-\t\tarray_idx = 0;\n-\t\tarray_offset = 0;\n-\t\treturn GetObjectsFromArray(gstate);\n-\t}\n-\n-\treturn count;\n+\treturn scan_count;\n }\n \n static inline const char *NextNewline(const char *ptr, idx_t size) {\n@@ -315,7 +318,71 @@ static inline const char *PreviousNewline(const char *ptr) {\n \treturn ptr;\n }\n \n-static inline void TrimWhitespace(JSONLine &line) {\n+static inline const char *NextJSONDefault(const char *ptr, const idx_t size, const char *const end) {\n+\tidx_t parents = 0;\n+\twhile (ptr != end) {\n+\t\tswitch (*ptr++) {\n+\t\tcase '{':\n+\t\tcase '[':\n+\t\t\tparents++;\n+\t\t\tcontinue;\n+\t\tcase '}':\n+\t\tcase ']':\n+\t\t\tparents--;\n+\t\t\tbreak;\n+\t\tcase '\"':\n+\t\t\twhile (ptr != end) {\n+\t\t\t\tauto string_char = *ptr++;\n+\t\t\t\tif (string_char == '\"') {\n+\t\t\t\t\tbreak;\n+\t\t\t\t} else if (string_char == '\\\\') {\n+\t\t\t\t\tif (ptr != end) {\n+\t\t\t\t\t\tptr++; // Skip the escaped char\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tcontinue;\n+\t\t}\n+\n+\t\tif (parents == 0) {\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\treturn ptr;\n+}\n+\n+static inline const char *NextJSON(const char *ptr, const idx_t size) {\n+\tD_ASSERT(!StringUtil::CharacterIsSpace(*ptr)); // Should be handled before\n+\n+\tconst char *const end = ptr + size;\n+\tswitch (*ptr) {\n+\tcase '{':\n+\tcase '[':\n+\tcase '\"':\n+\t\tptr = NextJSONDefault(ptr, size, end);\n+\t\tbreak;\n+\tdefault:\n+\t\t// Special case: JSON array containing JSON without clear \"parents\", i.e., not obj/arr/str\n+\t\twhile (ptr != end) {\n+\t\t\tswitch (*ptr++) {\n+\t\t\tcase ',':\n+\t\t\tcase ']':\n+\t\t\t\tptr--;\n+\t\t\t\tbreak;\n+\t\t\tdefault:\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\n+\treturn ptr == end ? nullptr : ptr;\n+}\n+\n+static inline void TrimWhitespace(JSONString &line) {\n \twhile (line.size != 0 && StringUtil::CharacterIsSpace(line[0])) {\n \t\tline.pointer++;\n \t\tline.size--;\n@@ -325,204 +392,248 @@ static inline void TrimWhitespace(JSONLine &line) {\n \t}\n }\n \n-yyjson_val *JSONScanLocalState::ParseLine(char *line_start, idx_t line_size, idx_t remaining, JSONLine &line) {\n+void JSONScanLocalState::ParseJSON(char *const json_start, const idx_t json_size, const idx_t remaining) {\n \tyyjson_doc *doc;\n-\tif (bind_data.ignore_errors) {\n-\t\tdoc = JSONCommon::ReadDocumentUnsafe(line_start, line_size, JSONCommon::READ_FLAG,\n-\t\t                                     json_allocator.GetYYJSONAllocator());\n+\tyyjson_read_err err;\n+\tif (bind_data.type == JSONScanType::READ_JSON_OBJECTS) { // If we return strings, we cannot parse INSITU\n+\t\tdoc = JSONCommon::ReadDocumentUnsafe(json_start, json_size, JSONCommon::READ_STOP_FLAG, allocator.GetYYAlc(),\n+\t\t                                     &err);\n \t} else {\n-\t\tyyjson_read_err err;\n-\t\tif (bind_data.type != JSONScanType::READ_JSON_OBJECTS) {\n-\t\t\t// Optimization: if we don't ignore errors, and don't need to return strings, we can parse INSITU\n-\t\t\tdoc = JSONCommon::ReadDocumentUnsafe(line_start, remaining, JSONCommon::STOP_READ_FLAG,\n-\t\t\t                                     json_allocator.GetYYJSONAllocator(), &err);\n-\t\t\tidx_t read_size = yyjson_doc_get_read_size(doc);\n-\t\t\tif (read_size > line_size) {\n-\t\t\t\terr.pos = line_size;\n-\t\t\t\terr.code = YYJSON_READ_ERROR_UNEXPECTED_END;\n-\t\t\t\terr.msg = \"unexpected end of data\";\n-\t\t\t} else if (read_size < line_size) {\n-\t\t\t\tidx_t diff = line_size - read_size;\n-\t\t\t\tchar *ptr = line_start + read_size;\n-\t\t\t\tfor (idx_t i = 0; i < diff; i++) {\n-\t\t\t\t\tif (!StringUtil::CharacterIsSpace(ptr[i])) {\n-\t\t\t\t\t\terr.pos = read_size;\n-\t\t\t\t\t\terr.code = YYJSON_READ_ERROR_UNEXPECTED_CONTENT;\n-\t\t\t\t\t\terr.msg = \"unexpected content after document\";\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} else {\n-\t\t\tdoc = JSONCommon::ReadDocumentUnsafe(line_start, line_size, JSONCommon::READ_FLAG,\n-\t\t\t                                     json_allocator.GetYYJSONAllocator(), &err);\n-\t\t}\n-\t\tif (err.code != YYJSON_READ_SUCCESS) {\n-\t\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, err);\n+\t\tdoc = JSONCommon::ReadDocumentUnsafe(json_start, remaining, JSONCommon::READ_INSITU_FLAG, allocator.GetYYAlc(),\n+\t\t                                     &err);\n+\t}\n+\tif (!bind_data.ignore_errors && err.code != YYJSON_READ_SUCCESS) {\n+\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, err);\n+\t}\n+\n+\t// We parse with YYJSON_STOP_WHEN_DONE, so we need to check this by hand\n+\tconst auto read_size = yyjson_doc_get_read_size(doc);\n+\tif (read_size > json_size) {\n+\t\t// Can't go past the boundary, even with ignore_errors\n+\t\terr.code = YYJSON_READ_ERROR_UNEXPECTED_END;\n+\t\terr.msg = \"unexpected end of data\";\n+\t\terr.pos = json_size;\n+\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, err,\n+\t\t                                \"Try auto-detecting the JSON format\");\n+\t} else if (!bind_data.ignore_errors && read_size < json_size) {\n+\t\tidx_t off = read_size;\n+\t\tidx_t rem = json_size;\n+\t\tSkipWhitespace(json_start, off, rem);\n+\t\tif (off != rem) { // Between end of document and boundary should be whitespace only\n+\t\t\terr.code = YYJSON_READ_ERROR_UNEXPECTED_CONTENT;\n+\t\t\terr.msg = \"unexpected content after document\";\n+\t\t\terr.pos = read_size;\n+\t\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, err,\n+\t\t\t                                \"Try auto-detecting the JSON format\");\n \t\t}\n \t}\n-\tlines_or_objects_in_buffer++;\n \n-\tif (doc) {\n-\t\t// Set the JSONLine and trim\n-\t\tline = JSONLine(line_start, line_size);\n-\t\tTrimWhitespace(line);\n-\t\treturn doc->root;\n-\t} else {\n-\t\treturn nullptr;\n+\tlines_or_objects_in_buffer++;\n+\tif (!doc) {\n+\t\tvalues[scan_count] = nullptr;\n+\t\treturn;\n \t}\n+\n+\t// Set the JSONLine and trim\n+\tunits[scan_count] = JSONString(json_start, json_size);\n+\tTrimWhitespace(units[scan_count]);\n+\tvalues[scan_count] = doc->root;\n }\n \n-idx_t JSONScanLocalState::GetObjectsFromArray(JSONScanGlobalState &gstate) {\n-\tidx_t arr_count = 0;\n+void JSONScanLocalState::ThrowObjectSizeError(const idx_t object_size) {\n+\tthrow InvalidInputException(\n+\t    \"\\\"maximum_object_size\\\" of %llu bytes exceeded while reading file \\\"%s\\\" (>%llu bytes).\"\n+\t    \"\\n Try increasing \\\"maximum_object_size\\\".\",\n+\t    bind_data.maximum_object_size, current_reader->GetFileName(), object_size);\n+}\n \n-\tsize_t idx, max;\n-\tyyjson_val *val;\n-\tfor (; array_idx < scan_count; array_idx++, array_offset = 0) {\n-\t\tauto &value = values[array_idx];\n-\t\tif (!value) {\n-\t\t\tcontinue;\n-\t\t}\n-\t\tif (unsafe_yyjson_is_arr(value)) {\n-\t\t\tyyjson_arr_foreach(value, idx, max, val) {\n-\t\t\t\tif (idx < array_offset) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tarray_values[arr_count++] = val;\n-\t\t\t\tif (arr_count == STANDARD_VECTOR_SIZE) {\n-\t\t\t\t\tbreak;\n+void JSONScanLocalState::ThrowInvalidAtEndError() {\n+\tthrow InvalidInputException(\"Invalid JSON detected at the end of file \\\"%s\\\".\", current_reader->GetFileName());\n+}\n+\n+static pair<JSONFormat, JSONRecordType> DetectFormatAndRecordType(const char *const buffer_ptr, const idx_t buffer_size,\n+                                                                  yyjson_alc *alc) {\n+\t// First we do the easy check whether it's NEWLINE_DELIMITED\n+\tauto line_end = NextNewline(buffer_ptr, buffer_size);\n+\tif (line_end != nullptr) {\n+\t\tidx_t line_size = line_end - buffer_ptr;\n+\t\tSkipWhitespace(buffer_ptr, line_size, buffer_size);\n+\n+\t\tyyjson_read_err error;\n+\t\tauto doc = JSONCommon::ReadDocumentUnsafe((char *)buffer_ptr, line_size, JSONCommon::READ_FLAG, alc, &error);\n+\t\tif (error.code == YYJSON_READ_SUCCESS) { // We successfully read the line\n+\t\t\tif (yyjson_is_arr(doc->root) && line_size == buffer_size) {\n+\t\t\t\t// It's just one array, let's actually assume ARRAY, not NEWLINE_DELIMITED\n+\t\t\t\tif (yyjson_arr_size(doc->root) == 0 || yyjson_is_obj(yyjson_arr_get(doc->root, 0))) {\n+\t\t\t\t\t// Either an empty array (assume records), or an array of objects\n+\t\t\t\t\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::RECORDS);\n+\t\t\t\t} else {\n+\t\t\t\t\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::VALUES);\n \t\t\t\t}\n+\t\t\t} else if (yyjson_is_obj(doc->root)) {\n+\t\t\t\treturn make_pair(JSONFormat::NEWLINE_DELIMITED, JSONRecordType::RECORDS);\n+\t\t\t} else {\n+\t\t\t\treturn make_pair(JSONFormat::NEWLINE_DELIMITED, JSONRecordType::VALUES);\n \t\t\t}\n-\t\t\tarray_offset = idx + 1;\n-\t\t\tif (arr_count == STANDARD_VECTOR_SIZE) {\n-\t\t\t\tbreak;\n-\t\t\t}\n-\t\t} else if (!gstate.bind_data.ignore_errors) {\n-\t\t\tThrowTransformError(\n-\t\t\t    array_idx,\n-\t\t\t    StringUtil::Format(\"Expected JSON ARRAY but got %s: %s\\nTry setting json_format to 'records'\",\n-\t\t\t                       JSONCommon::ValTypeToString(value), JSONCommon::ValToString(value, 50)));\n \t\t}\n \t}\n-\treturn arr_count;\n+\n+\t// Skip whitespace\n+\tidx_t buffer_offset = 0;\n+\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n+\tauto remaining = buffer_size - buffer_offset;\n+\n+\t// We know it's not NEWLINE_DELIMITED at this point, if there's a '{', we know it's not ARRAY either\n+\t// Also if it's fully whitespace we just return something because we don't know\n+\tif (remaining == 0 || buffer_ptr[buffer_offset] == '{') {\n+\t\treturn make_pair(JSONFormat::UNSTRUCTURED, JSONRecordType::RECORDS);\n+\t}\n+\n+\t// We know it's not top-level records, if it's not '[', it's not ARRAY either\n+\tif (buffer_ptr[buffer_offset] != '[') {\n+\t\treturn make_pair(JSONFormat::UNSTRUCTURED, JSONRecordType::VALUES);\n+\t}\n+\n+\t// It's definitely an ARRAY, but now we have to figure out if there's more than one top-level array\n+\tyyjson_read_err error;\n+\tauto doc = JSONCommon::ReadDocumentUnsafe((char *)buffer_ptr + buffer_offset, remaining, JSONCommon::READ_STOP_FLAG,\n+\t                                          alc, &error);\n+\tif (error.code == YYJSON_READ_SUCCESS) {\n+\t\tD_ASSERT(yyjson_is_arr(doc->root));\n+\n+\t\t// We successfully read something!\n+\t\tbuffer_offset += yyjson_doc_get_read_size(doc);\n+\t\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n+\t\tremaining = buffer_size - buffer_offset;\n+\n+\t\tif (remaining != 0) { // There's more\n+\t\t\treturn make_pair(JSONFormat::UNSTRUCTURED, JSONRecordType::VALUES);\n+\t\t}\n+\n+\t\t// Just one array, check what's in there\n+\t\tif (yyjson_arr_size(doc->root) == 0 || yyjson_is_obj(yyjson_arr_get(doc->root, 0))) {\n+\t\t\t// Either an empty array (assume records), or an array of objects\n+\t\t\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::RECORDS);\n+\t\t} else {\n+\t\t\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::VALUES);\n+\t\t}\n+\t}\n+\n+\t// We weren't able to parse an array, could be broken or an array larger than our buffer size, let's skip over '['\n+\tSkipWhitespace(buffer_ptr, ++buffer_offset, --remaining);\n+\tremaining = buffer_size - buffer_offset;\n+\n+\t// If it's '{' we know there's RECORDS in the ARRAY, else it's VALUES\n+\tif (remaining == 0 || buffer_ptr[buffer_offset] == '{') {\n+\t\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::RECORDS);\n+\t}\n+\n+\t// It's not RECORDS, so it must be VALUES\n+\treturn make_pair(JSONFormat::ARRAY, JSONRecordType::VALUES);\n }\n \n bool JSONScanLocalState::ReadNextBuffer(JSONScanGlobalState &gstate) {\n+\tAllocatedData buffer;\n \tif (current_reader) {\n-\t\tD_ASSERT(current_buffer_handle);\n+\t\t// Keep track of this for accurate errors\n \t\tcurrent_reader->SetBufferLineOrObjectCount(current_buffer_handle->buffer_index, lines_or_objects_in_buffer);\n-\t\tif (is_last && gstate.bind_data.type != JSONScanType::SAMPLE) {\n-\t\t\t// Close files that are done if we're not sampling\n-\t\t\tcurrent_reader->CloseJSONFile();\n+\n+\t\t// Try to re-use existing buffer\n+\t\tif (current_buffer_handle && --current_buffer_handle->readers == 0) {\n+\t\t\tbuffer = current_reader->RemoveBuffer(current_buffer_handle->buffer_index);\n+\t\t} else {\n+\t\t\tbuffer = gstate.allocator.Allocate(gstate.buffer_capacity);\n \t\t}\n-\t}\n \n-\tAllocatedData buffer;\n-\tif (current_buffer_handle && --current_buffer_handle->readers == 0) {\n-\t\tD_ASSERT(current_reader);\n-\t\t// Take ownership of the last buffer this thread used and remove entry from map\n-\t\tbuffer = current_reader->RemoveBuffer(current_buffer_handle->buffer_index);\n+\t\tif (!is_last) {\n+\t\t\tif (current_reader->GetFormat() != JSONFormat::NEWLINE_DELIMITED) {\n+\t\t\t\tmemcpy(buffer.get(), reconstruct_buffer.get(),\n+\t\t\t\t       prev_buffer_remainder); // Copy last bit of previous buffer\n+\t\t\t}\n+\t\t} else {\n+\t\t\tif (gstate.bind_data.type != JSONScanType::SAMPLE) {\n+\t\t\t\tcurrent_reader->CloseJSONFile(); // Close files that are done if we're not sampling\n+\t\t\t}\n+\t\t\tcurrent_reader = nullptr;\n+\t\t}\n \t} else {\n-\t\t// Allocate a new buffer\n \t\tbuffer = gstate.allocator.Allocate(gstate.buffer_capacity);\n \t}\n \tbuffer_ptr = (const char *)buffer.get();\n \n-\tif (current_reader && current_reader->GetOptions().format == JSONFormat::UNSTRUCTURED) {\n-\t\t// Copy last bit of previous buffer\n-\t\tmemcpy(buffer.get(), reconstruct_buffer.get(), prev_buffer_remainder);\n-\t}\n-\n \tidx_t buffer_index;\n \twhile (true) {\n \t\tif (current_reader) {\n-\t\t\tReadNextBuffer(gstate, buffer_index);\n-\t\t\tif (buffer_size != 0) {\n+\t\t\tReadNextBufferInternal(gstate, buffer_index);\n+\t\t\tif (buffer_size == 0) {\n+\t\t\t\tif (is_last && gstate.bind_data.type != JSONScanType::SAMPLE) {\n+\t\t\t\t\tcurrent_reader->CloseJSONFile();\n+\t\t\t\t}\n+\t\t\t\tif (current_reader->IsParallel()) {\n+\t\t\t\t\t// If this threads' current reader is still the one at gstate.file_index,\n+\t\t\t\t\t// this thread can end the parallel scan\n+\t\t\t\t\tlock_guard<mutex> guard(gstate.lock);\n+\t\t\t\t\tif (gstate.file_index < gstate.json_readers.size() &&\n+\t\t\t\t\t    current_reader == gstate.json_readers[gstate.file_index].get()) {\n+\t\t\t\t\t\tgstate.file_index++; // End parallel scan\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tcurrent_reader = nullptr;\n+\t\t\t} else {\n \t\t\t\tbreak; // We read something!\n \t\t\t}\n \t\t}\n \n-\t\t// No reader, or exhausted current reader\n-\t\tlock_guard<mutex> guard(gstate.lock);\n-\t\tD_ASSERT(gstate.file_index <= gstate.json_readers.size());\n-\t\tif (gstate.file_index == gstate.json_readers.size()) {\n-\t\t\treturn false; // No more files left\n-\t\t}\n-\t\tif (current_reader && current_reader == gstate.json_readers[gstate.file_index].get() &&\n-\t\t    current_reader->GetOptions().format == JSONFormat::NEWLINE_DELIMITED) {\n-\t\t\t// We had a reader, but we didn't read anything, move to the next file\n-\t\t\tgstate.file_index++;\n-\t\t}\n-\t\t// Check again since we may have just updated\n-\t\tif (gstate.file_index == gstate.json_readers.size()) {\n-\t\t\treturn false; // No more files left\n-\t\t}\n-\n-\t\t// Try the next reader\n-\t\tcurrent_reader = gstate.json_readers[gstate.file_index].get();\n-\t\tauto &options = current_reader->GetOptions();\n-\t\tif (current_reader->IsOpen()) {\n-\t\t\tif (options.format == JSONFormat::UNSTRUCTURED ||\n-\t\t\t    (options.compression != FileCompressionType::UNCOMPRESSED &&\n-\t\t\t     gstate.file_index < gstate.json_readers.size())) {\n-\t\t\t\t// Can only be open from schema detection\n-\t\t\t\tbatch_index = gstate.batch_index++;\n-\t\t\t\tgstate.file_index++;\n+\t\t// This thread needs a new reader\n+\t\t{\n+\t\t\tlock_guard<mutex> guard(gstate.lock);\n+\t\t\tif (gstate.file_index == gstate.json_readers.size()) {\n+\t\t\t\treturn false; // No more files left\n \t\t\t}\n-\t\t\tcontinue; // It's open, this thread joins the scan\n-\t\t}\n \n-\t\t// Unopened file\n-\t\tcurrent_reader->OpenJSONFile();\n-\t\tbatch_index = gstate.batch_index++;\n-\t\tif (options.format == JSONFormat::UNSTRUCTURED || (options.format == JSONFormat::NEWLINE_DELIMITED &&\n-\t\t                                                   options.compression != FileCompressionType::UNCOMPRESSED &&\n-\t\t                                                   gstate.file_index < gstate.json_readers.size())) {\n-\t\t\tgstate.file_index++; // UNSTRUCTURED necessitates single-threaded read\n-\t\t}\n-\t\tif (options.format != JSONFormat::AUTO_DETECT) {\n-\t\t\tcontinue; // Re-enter loop to proceed reading\n-\t\t}\n-\n-\t\t// We have to detect whether it's UNSTRUCTURED/NEWLINE_DELIMITED - hold the gstate lock while we do this\n-\t\tReadNextBuffer(gstate, buffer_index);\n-\t\tif (buffer_size == 0) {\n-\t\t\tgstate.file_index++; // Empty file, move to the next one\n-\t\t\tcontinue;\n-\t\t}\n+\t\t\t// Try the next reader\n+\t\t\tcurrent_reader = gstate.json_readers[gstate.file_index].get();\n+\t\t\tif (current_reader->IsOpen()) {\n+\t\t\t\t// Can only be open from auto detection, so these should be known\n+\t\t\t\tif (!current_reader->IsParallel()) {\n+\t\t\t\t\tbatch_index = gstate.batch_index++;\n+\t\t\t\t\tgstate.file_index++;\n+\t\t\t\t}\n+\t\t\t\tcontinue; // Re-enter the loop to start scanning the assigned file\n+\t\t\t}\n \n-\t\tauto line_end = NextNewline(buffer_ptr, buffer_size);\n-\t\tif (line_end == nullptr) {\n-\t\t\toptions.format = JSONFormat::UNSTRUCTURED; // No newlines in buffer at all\n-\t\t\tgstate.file_index++;                       // UNSTRUCTURED necessitates single-threaded read\n-\t\t\tbreak;\n-\t\t}\n-\t\tidx_t line_size = line_end - buffer_ptr;\n+\t\t\tcurrent_reader->OpenJSONFile();\n+\t\t\tbatch_index = gstate.batch_index++;\n+\t\t\tif (current_reader->GetFormat() != JSONFormat::AUTO_DETECT) {\n+\t\t\t\tif (!current_reader->IsParallel()) {\n+\t\t\t\t\tgstate.file_index++;\n+\t\t\t\t}\n+\t\t\t\tcontinue;\n+\t\t\t}\n \n-\t\tyyjson_read_err error;\n-\t\tJSONCommon::ReadDocumentUnsafe((char *)buffer_ptr, line_size, JSONCommon::READ_FLAG,\n-\t\t                               json_allocator.GetYYJSONAllocator(), &error);\n-\t\t// Detected format depends on whether we can successfully read the first line\n-\t\tif (error.code == YYJSON_READ_SUCCESS) {\n-\t\t\toptions.format = JSONFormat::NEWLINE_DELIMITED;\n-\t\t} else {\n-\t\t\toptions.format = JSONFormat::UNSTRUCTURED;\n-\t\t\tgstate.file_index++; // UNSTRUCTURED necessitates single-threaded read\n-\t\t}\n+\t\t\t// If we have a low amount of files, we auto-detect within the lock,\n+\t\t\t// so other threads may join a parallel NDJSON scan\n+\t\t\tif (gstate.json_readers.size() < 100) {\n+\t\t\t\tif (ReadAndAutoDetect(gstate, buffer_index, false)) {\n+\t\t\t\t\tcontinue;\n+\t\t\t\t}\n+\t\t\t\tbreak;\n+\t\t\t}\n \n-\t\t// Optimization: decompression limits parallelism quite a bit\n-\t\tif (options.compression != FileCompressionType::UNCOMPRESSED &&\n-\t\t    gstate.file_index < gstate.json_readers.size()) {\n+\t\t\t// Increment the file index within the lock, then read/auto-detect outside of the lock\n \t\t\tgstate.file_index++;\n \t\t}\n \n+\t\t// High amount of files, just do 1 thread per file\n+\t\tif (ReadAndAutoDetect(gstate, buffer_index, true)) {\n+\t\t\tcontinue;\n+\t\t}\n \t\tbreak;\n \t}\n \tD_ASSERT(buffer_size != 0); // We should have read something if we got here\n \n-\tidx_t readers;\n-\tif (current_reader->GetOptions().format == JSONFormat::UNSTRUCTURED) {\n-\t\treaders = 1;\n-\t} else {\n+\tidx_t readers = 1;\n+\tif (current_reader->IsParallel()) {\n \t\treaders = is_last ? 1 : 2;\n \t}\n \n@@ -531,24 +642,57 @@ bool JSONScanLocalState::ReadNextBuffer(JSONScanGlobalState &gstate) {\n \tcurrent_buffer_handle = json_buffer_handle.get();\n \tcurrent_reader->InsertBuffer(buffer_index, std::move(json_buffer_handle));\n \n-\tbuffer_offset = 0;\n \tprev_buffer_remainder = 0;\n \tlines_or_objects_in_buffer = 0;\n \n+\t// YYJSON needs this\n \tmemset((void *)(buffer_ptr + buffer_size), 0, YYJSON_PADDING_SIZE);\n-\tif (current_reader->GetOptions().format == JSONFormat::UNSTRUCTURED) {\n-\t\tmemcpy((void *)buffer_copy_ptr, buffer_ptr, buffer_size + YYJSON_PADDING_SIZE);\n-\t}\n \n \treturn true;\n }\n \n-void JSONScanLocalState::ReadNextBuffer(JSONScanGlobalState &gstate, idx_t &buffer_index) {\n+bool JSONScanLocalState::ReadAndAutoDetect(JSONScanGlobalState &gstate, idx_t &buffer_index,\n+                                           const bool already_incremented_file_idx) {\n+\t// We have to detect the JSON format - hold the gstate lock while we do this\n+\tReadNextBufferInternal(gstate, buffer_index);\n+\tif (buffer_size == 0) {\n+\t\tif (!already_incremented_file_idx) {\n+\t\t\tgstate.file_index++; // Empty file, move to the next one\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\tauto format_and_record_type = DetectFormatAndRecordType(buffer_ptr, buffer_size, allocator.GetYYAlc());\n+\tcurrent_reader->SetFormat(format_and_record_type.first);\n+\tif (current_reader->GetRecordType() == JSONRecordType::AUTO_DETECT) {\n+\t\tcurrent_reader->SetRecordType(format_and_record_type.second);\n+\t}\n+\tif (current_reader->GetFormat() == JSONFormat::ARRAY) {\n+\t\tSkipOverArrayStart();\n+\t}\n+\n+\tif (bind_data.options.record_type == JSONRecordType::RECORDS &&\n+\t    current_reader->GetRecordType() != JSONRecordType::RECORDS) {\n+\t\tthrow InvalidInputException(\"Expected file \\\"%s\\\" to contain records, detected non-record JSON instead.\",\n+\t\t                            current_reader->GetFileName());\n+\t}\n+\tif (!already_incremented_file_idx && !current_reader->IsParallel()) {\n+\t\tgstate.file_index++;\n+\t}\n+\treturn false;\n+}\n+\n+void JSONScanLocalState::ReadNextBufferInternal(JSONScanGlobalState &gstate, idx_t &buffer_index) {\n \tif (current_reader->GetFileHandle().CanSeek()) {\n \t\tReadNextBufferSeek(gstate, buffer_index);\n \t} else {\n \t\tReadNextBufferNoSeek(gstate, buffer_index);\n \t}\n+\n+\tbuffer_offset = 0;\n+\tif (buffer_index == 0 && current_reader->GetFormat() == JSONFormat::ARRAY) {\n+\t\tSkipOverArrayStart();\n+\t}\n }\n \n void JSONScanLocalState::ReadNextBufferSeek(JSONScanGlobalState &gstate, idx_t &buffer_index) {\n@@ -563,13 +707,13 @@ void JSONScanLocalState::ReadNextBufferSeek(JSONScanGlobalState &gstate, idx_t &\n \t\tbuffer_index = current_reader->GetBufferIndex();\n \n \t\tread_size = file_handle.GetPositionAndSize(read_position, request_size);\n-\t\tis_last = file_handle.Remaining() == 0;\n+\t\tis_last = read_size < request_size;\n \n \t\tif (!gstate.bind_data.ignore_errors && read_size == 0 && prev_buffer_remainder != 0) {\n-\t\t\tthrow InvalidInputException(\"Invalid JSON detected at the end of file %s\", current_reader->file_path);\n+\t\t\tThrowInvalidAtEndError();\n \t\t}\n \n-\t\tif (current_reader->GetOptions().format == JSONFormat::NEWLINE_DELIMITED) {\n+\t\tif (current_reader->GetFormat() == JSONFormat::NEWLINE_DELIMITED) {\n \t\t\tbatch_index = gstate.batch_index++;\n \t\t}\n \t}\n@@ -600,10 +744,10 @@ void JSONScanLocalState::ReadNextBufferNoSeek(JSONScanGlobalState &gstate, idx_t\n \t\tis_last = read_size < request_size;\n \n \t\tif (!gstate.bind_data.ignore_errors && read_size == 0 && prev_buffer_remainder != 0) {\n-\t\t\tthrow InvalidInputException(\"Invalid JSON detected at the end of file %s\", current_reader->file_path);\n+\t\t\tThrowInvalidAtEndError();\n \t\t}\n \n-\t\tif (current_reader->GetOptions().format == JSONFormat::NEWLINE_DELIMITED) {\n+\t\tif (current_reader->GetFormat() == JSONFormat::NEWLINE_DELIMITED) {\n \t\t\tbatch_index = gstate.batch_index++;\n \t\t}\n \t}\n@@ -614,9 +758,38 @@ void JSONScanLocalState::ReadNextBufferNoSeek(JSONScanGlobalState &gstate, idx_t\n \t}\n }\n \n+void JSONScanLocalState::SkipOverArrayStart() {\n+\t// First read of this buffer, check if it's actually an array and skip over the bytes\n+\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n+\tif (buffer_offset == buffer_size) {\n+\t\treturn; // Empty file\n+\t}\n+\tif (buffer_ptr[buffer_offset] != '[') {\n+\t\tthrow InvalidInputException(\n+\t\t    \"Expected top-level JSON array with format='array', but first character is '%c' in file \\\"%s\\\".\"\n+\t\t    \"\\n Try setting format='auto' or format='newline_delimited'.\",\n+\t\t    buffer_ptr[buffer_offset], current_reader->GetFileName());\n+\t}\n+\tSkipWhitespace(buffer_ptr, ++buffer_offset, buffer_size);\n+\tif (buffer_offset >= buffer_size) {\n+\t\tthrow InvalidInputException(\"Missing closing brace ']' in JSON array with format='array' in file \\\"%s\\\"\",\n+\t\t                            current_reader->GetFileName());\n+\t}\n+\tif (buffer_ptr[buffer_offset] == ']') {\n+\t\t// Empty array\n+\t\tSkipWhitespace(buffer_ptr, ++buffer_offset, buffer_size);\n+\t\tif (buffer_offset != buffer_size) {\n+\t\t\tthrow InvalidInputException(\n+\t\t\t    \"Empty array with trailing data when parsing JSON array with format='array' in file \\\"%s\\\"\",\n+\t\t\t    current_reader->GetFileName());\n+\t\t}\n+\t\treturn;\n+\t}\n+}\n+\n void JSONScanLocalState::ReconstructFirstObject(JSONScanGlobalState &gstate) {\n \tD_ASSERT(current_buffer_handle->buffer_index != 0);\n-\tD_ASSERT(current_reader->GetOptions().format == JSONFormat::NEWLINE_DELIMITED);\n+\tD_ASSERT(current_reader->GetFormat() == JSONFormat::NEWLINE_DELIMITED);\n \n \t// Spinlock until the previous batch index has also read its buffer\n \tJSONBufferHandle *previous_buffer_handle = nullptr;\n@@ -634,9 +807,8 @@ void JSONScanLocalState::ReconstructFirstObject(JSONScanGlobalState &gstate) {\n \tmemcpy(reconstruct_ptr, part1_ptr, part1_size);\n \t// Now find the newline in the current block\n \tauto line_end = NextNewline(buffer_ptr, buffer_size);\n-\tif (line_end == nullptr) { // TODO I don't think we can ignore this even with ignore_errors ...\n-\t\tthrow InvalidInputException(\"maximum_object_size of %llu bytes exceeded (>%llu bytes), is the JSON valid?\",\n-\t\t                            bind_data.maximum_object_size, buffer_size - buffer_offset);\n+\tif (line_end == nullptr) {\n+\t\tThrowObjectSizeError(buffer_size - buffer_offset);\n \t} else {\n \t\tline_end++;\n \t}\n@@ -644,8 +816,7 @@ void JSONScanLocalState::ReconstructFirstObject(JSONScanGlobalState &gstate) {\n \n \tidx_t line_size = part1_size + part2_size;\n \tif (line_size > bind_data.maximum_object_size) {\n-\t\tthrow InvalidInputException(\"maximum_object_size of %llu bytes exceeded (%llu bytes), is the JSON valid?\",\n-\t\t                            bind_data.maximum_object_size, line_size);\n+\t\tThrowObjectSizeError(line_size);\n \t}\n \n \t// And copy the remainder of the line to the reconstruct buffer\n@@ -658,85 +829,68 @@ void JSONScanLocalState::ReconstructFirstObject(JSONScanGlobalState &gstate) {\n \t\tcurrent_reader->RemoveBuffer(current_buffer_handle->buffer_index - 1);\n \t}\n \n-\tvalues[0] = ParseLine((char *)reconstruct_ptr, line_size, line_size, lines[0]);\n+\tParseJSON((char *)reconstruct_ptr, line_size, line_size);\n }\n \n-void JSONScanLocalState::ReadUnstructured(idx_t &count) {\n-\t// yyjson does not always return YYJSON_READ_ERROR_UNEXPECTED_END properly\n-\t// if a different error code happens within the last 50 bytes\n-\t// we assume it should be YYJSON_READ_ERROR_UNEXPECTED_END instead\n-\tstatic constexpr idx_t END_BOUND = 50;\n-\n-\tconst auto max_obj_size = reconstruct_buffer.GetSize();\n-\tyyjson_read_err error;\n-\tfor (; count < STANDARD_VECTOR_SIZE; count++) {\n-\t\tconst auto obj_start = buffer_ptr + buffer_offset;\n-\t\tconst auto obj_copy_start = buffer_copy_ptr + buffer_offset;\n-\n-\t\tidx_t remaining = buffer_size - buffer_offset;\n-\t\tif (remaining == 0) {\n-\t\t\tbreak;\n-\t\t}\n-\n-\t\t// Read next JSON doc\n-\t\tauto read_doc = JSONCommon::ReadDocumentUnsafe((char *)obj_start, remaining, JSONCommon::STOP_READ_FLAG,\n-\t\t                                               json_allocator.GetYYJSONAllocator(), &error);\n-\t\tif (error.code == YYJSON_READ_SUCCESS) {\n-\t\t\tidx_t line_size = yyjson_doc_get_read_size(read_doc);\n-\t\t\tlines[count] = JSONLine(obj_copy_start, line_size);\n-\t\t\tTrimWhitespace(lines[count]);\n+void JSONScanLocalState::ParseNextChunk() {\n+\tauto buffer_offset_before = buffer_offset;\n \n-\t\t\tbuffer_offset += line_size;\n-\t\t\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n-\t\t\tlines_or_objects_in_buffer++;\n-\t\t} else if (error.pos > max_obj_size) {\n-\t\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, error,\n-\t\t\t                                \"Try increasing \\\"maximum_object_size\\\".\");\n-\t\t} else if (!is_last && (error.code == YYJSON_READ_ERROR_UNEXPECTED_END || remaining - error.pos < END_BOUND)) {\n-\t\t\t// Copy remaining to reconstruct_buffer\n-\t\t\tconst auto reconstruct_ptr = reconstruct_buffer.get();\n-\t\t\tmemcpy(reconstruct_ptr, obj_copy_start, remaining);\n-\t\t\tprev_buffer_remainder = remaining;\n-\t\t\tbuffer_offset = buffer_size;\n-\t\t\tbreak;\n-\t\t} else {\n-\t\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, error);\n-\t\t}\n-\t\tvalues[count] = read_doc->root;\n-\t}\n-}\n-\n-void JSONScanLocalState::ReadNewlineDelimited(idx_t &count) {\n-\tfor (; count < STANDARD_VECTOR_SIZE; count++) {\n-\t\tauto line_start = buffer_ptr + buffer_offset;\n+\tconst auto format = current_reader->GetFormat();\n+\tfor (; scan_count < STANDARD_VECTOR_SIZE; scan_count++) {\n+\t\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n+\t\tauto json_start = buffer_ptr + buffer_offset;\n \t\tidx_t remaining = buffer_size - buffer_offset;\n \t\tif (remaining == 0) {\n \t\t\tbreak;\n \t\t}\n-\n-\t\t// Search for newline\n-\t\tauto line_end = NextNewline(line_start, remaining);\n-\n-\t\tif (line_end == nullptr) {\n+\t\tconst char *json_end = format == JSONFormat::NEWLINE_DELIMITED ? NextNewline(json_start, remaining)\n+\t\t                                                               : NextJSON(json_start, remaining);\n+\t\tif (json_end == nullptr) {\n \t\t\t// We reached the end of the buffer\n \t\t\tif (!is_last) {\n \t\t\t\t// Last bit of data belongs to the next batch\n+\t\t\t\tif (format != JSONFormat::NEWLINE_DELIMITED) {\n+\t\t\t\t\tif (scan_count == 0) {\n+\t\t\t\t\t\tThrowObjectSizeError(remaining);\n+\t\t\t\t\t}\n+\t\t\t\t\tmemcpy(reconstruct_buffer.get(), json_start, remaining);\n+\t\t\t\t\tprev_buffer_remainder = remaining;\n+\t\t\t\t}\n \t\t\t\tbuffer_offset = buffer_size;\n \t\t\t\tbreak;\n \t\t\t}\n-\t\t\tline_end = line_start + remaining;\n+\t\t\tjson_end = json_start + remaining;\n \t\t}\n-\t\tidx_t line_size = line_end - line_start;\n \n-\t\tvalues[count] = ParseLine((char *)line_start, line_size, remaining, lines[count]);\n+\t\tidx_t json_size = json_end - json_start;\n+\t\tParseJSON((char *)json_start, json_size, remaining);\n+\t\tbuffer_offset += json_size;\n \n-\t\tbuffer_offset += line_size;\n+\t\tif (format == JSONFormat::ARRAY) {\n+\t\t\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n+\t\t\tif (buffer_ptr[buffer_offset] == ',' || buffer_ptr[buffer_offset] == ']') {\n+\t\t\t\tbuffer_offset++;\n+\t\t\t} else { // We can't ignore this error, even with 'ignore_errors'\n+\t\t\t\tyyjson_read_err err;\n+\t\t\t\terr.code = YYJSON_READ_ERROR_UNEXPECTED_CHARACTER;\n+\t\t\t\terr.msg = \"unexpected character\";\n+\t\t\t\terr.pos = json_size;\n+\t\t\t\tcurrent_reader->ThrowParseError(current_buffer_handle->buffer_index, lines_or_objects_in_buffer, err);\n+\t\t\t}\n+\t\t}\n \t\tSkipWhitespace(buffer_ptr, buffer_offset, buffer_size);\n \t}\n+\n+\ttotal_read_size += buffer_offset - buffer_offset_before;\n+\ttotal_tuple_count += scan_count;\n }\n \n yyjson_alc *JSONScanLocalState::GetAllocator() {\n-\treturn json_allocator.GetYYJSONAllocator();\n+\treturn allocator.GetYYAlc();\n+}\n+\n+const MultiFileReaderData &JSONScanLocalState::GetReaderData() const {\n+\treturn current_reader->reader_data;\n }\n \n void JSONScanLocalState::ThrowTransformError(idx_t object_index, const string &error_message) {\n@@ -747,4 +901,73 @@ void JSONScanLocalState::ThrowTransformError(idx_t object_index, const string &e\n \tcurrent_reader->ThrowTransformError(current_buffer_handle->buffer_index, line_or_object_in_buffer, error_message);\n }\n \n+double JSONScan::ScanProgress(ClientContext &context, const FunctionData *bind_data_p,\n+                              const GlobalTableFunctionState *global_state) {\n+\tauto &gstate = global_state->Cast<JSONGlobalTableFunctionState>().state;\n+\tdouble progress = 0;\n+\tfor (auto &reader : gstate.json_readers) {\n+\t\tprogress += reader->GetProgress();\n+\t}\n+\treturn progress / double(gstate.json_readers.size());\n+}\n+\n+idx_t JSONScan::GetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,\n+                              LocalTableFunctionState *local_state, GlobalTableFunctionState *global_state) {\n+\tauto &lstate = local_state->Cast<JSONLocalTableFunctionState>();\n+\treturn lstate.GetBatchIndex();\n+}\n+\n+unique_ptr<NodeStatistics> JSONScan::Cardinality(ClientContext &context, const FunctionData *bind_data) {\n+\tauto &data = bind_data->Cast<JSONScanData>();\n+\tidx_t per_file_cardinality;\n+\tif (data.initial_reader && data.initial_reader->IsOpen()) {\n+\t\tper_file_cardinality = data.initial_reader->GetFileHandle().FileSize() / data.avg_tuple_size;\n+\t} else {\n+\t\tper_file_cardinality = 42; // The cardinality of an unknown JSON file is the almighty number 42\n+\t}\n+\treturn make_uniq<NodeStatistics>(per_file_cardinality * data.files.size());\n+}\n+\n+void JSONScan::ComplexFilterPushdown(ClientContext &context, LogicalGet &get, FunctionData *bind_data_p,\n+                                     vector<unique_ptr<Expression>> &filters) {\n+\tauto &data = bind_data_p->Cast<JSONScanData>();\n+\tauto reset_reader =\n+\t    MultiFileReader::ComplexFilterPushdown(context, data.files, data.options.file_options, get, filters);\n+\tif (reset_reader) {\n+\t\tMultiFileReader::PruneReaders(data);\n+\t}\n+}\n+\n+void JSONScan::Serialize(FieldWriter &writer, const FunctionData *bind_data_p, const TableFunction &function) {\n+\tauto &bind_data = bind_data_p->Cast<JSONScanData>();\n+\tbind_data.Serialize(writer);\n+}\n+\n+unique_ptr<FunctionData> JSONScan::Deserialize(ClientContext &context, FieldReader &reader, TableFunction &function) {\n+\tauto result = make_uniq<JSONScanData>();\n+\tresult->Deserialize(context, reader);\n+\treturn std::move(result);\n+}\n+\n+void JSONScan::TableFunctionDefaults(TableFunction &table_function) {\n+\tMultiFileReader::AddParameters(table_function);\n+\n+\ttable_function.named_parameters[\"maximum_object_size\"] = LogicalType::UINTEGER;\n+\ttable_function.named_parameters[\"ignore_errors\"] = LogicalType::BOOLEAN;\n+\ttable_function.named_parameters[\"format\"] = LogicalType::VARCHAR;\n+\ttable_function.named_parameters[\"compression\"] = LogicalType::VARCHAR;\n+\n+\ttable_function.table_scan_progress = ScanProgress;\n+\ttable_function.get_batch_index = GetBatchIndex;\n+\ttable_function.cardinality = Cardinality;\n+\n+\ttable_function.serialize = Serialize;\n+\ttable_function.deserialize = Deserialize;\n+\n+\ttable_function.projection_pushdown = true;\n+\ttable_function.filter_pushdown = false;\n+\ttable_function.filter_prune = false;\n+\ttable_function.pushdown_complex_filter = ComplexFilterPushdown;\n+}\n+\n } // namespace duckdb\ndiff --git a/extension/parquet/column_reader.cpp b/extension/parquet/column_reader.cpp\nindex 8bdb3ecda775..c0787cf3c005 100644\n--- a/extension/parquet/column_reader.cpp\n+++ b/extension/parquet/column_reader.cpp\n@@ -589,8 +589,8 @@ StringColumnReader::StringColumnReader(ParquetReader &reader, LogicalType type_p\n \t}\n }\n \n-uint32_t StringColumnReader::VerifyString(const char *str_data, uint32_t str_len) {\n-\tif (Type() != LogicalTypeId::VARCHAR) {\n+uint32_t StringColumnReader::VerifyString(const char *str_data, uint32_t str_len, const bool is_varchar) {\n+\tif (!is_varchar) {\n \t\treturn str_len;\n \t}\n \t// verify if a string is actually UTF8, and if there are no null bytes in the middle of the string\n@@ -605,6 +605,10 @@ uint32_t StringColumnReader::VerifyString(const char *str_data, uint32_t str_len\n \treturn str_len;\n }\n \n+uint32_t StringColumnReader::VerifyString(const char *str_data, uint32_t str_len) {\n+\treturn VerifyString(str_data, str_len, Type() == LogicalTypeId::VARCHAR);\n+}\n+\n void StringColumnReader::Dictionary(shared_ptr<ResizeableBuffer> data, idx_t num_entries) {\n \tdict = std::move(data);\n \tdict_strings = duckdb::unique_ptr<string_t[]>(new string_t[num_entries]);\ndiff --git a/extension/parquet/include/parquet_reader.hpp b/extension/parquet/include/parquet_reader.hpp\nindex dc36be439792..b723e4165a41 100644\n--- a/extension/parquet/include/parquet_reader.hpp\n+++ b/extension/parquet/include/parquet_reader.hpp\n@@ -80,15 +80,14 @@ struct ParquetOptions {\n \n class ParquetReader {\n public:\n-\tParquetReader(Allocator &allocator, unique_ptr<FileHandle> file_handle_p);\n \tParquetReader(ClientContext &context, string file_name, ParquetOptions parquet_options);\n \tParquetReader(ClientContext &context, ParquetOptions parquet_options,\n \t              shared_ptr<ParquetFileMetadataCache> metadata);\n \t~ParquetReader();\n \n+\tFileSystem &fs;\n \tAllocator &allocator;\n \tstring file_name;\n-\tFileOpener *file_opener;\n \tvector<LogicalType> return_types;\n \tvector<string> names;\n \tshared_ptr<ParquetFileMetadataCache> metadata;\ndiff --git a/extension/parquet/include/parquet_writer.hpp b/extension/parquet/include/parquet_writer.hpp\nindex daad4994d084..ab66641c022c 100644\n--- a/extension/parquet/include/parquet_writer.hpp\n+++ b/extension/parquet/include/parquet_writer.hpp\n@@ -32,8 +32,8 @@ struct PreparedRowGroup {\n \n class ParquetWriter {\n public:\n-\tParquetWriter(FileSystem &fs, string file_name, FileOpener *file_opener, vector<LogicalType> types,\n-\t              vector<string> names, duckdb_parquet::format::CompressionCodec::type codec);\n+\tParquetWriter(FileSystem &fs, string file_name, vector<LogicalType> types, vector<string> names,\n+\t              duckdb_parquet::format::CompressionCodec::type codec);\n \n public:\n \tvoid PrepareRowGroup(ColumnDataCollection &buffer, PreparedRowGroup &result);\ndiff --git a/extension/parquet/include/string_column_reader.hpp b/extension/parquet/include/string_column_reader.hpp\nindex 6086143fa3f3..40c8515a008d 100644\n--- a/extension/parquet/include/string_column_reader.hpp\n+++ b/extension/parquet/include/string_column_reader.hpp\n@@ -39,6 +39,7 @@ class StringColumnReader : public TemplatedColumnReader<string_t, StringParquetV\n \tvoid PrepareDeltaByteArray(ResizeableBuffer &buffer) override;\n \tvoid DeltaByteArray(uint8_t *defines, idx_t num_values, parquet_filter_t &filter, idx_t result_offset,\n \t                    Vector &result) override;\n+\tstatic uint32_t VerifyString(const char *str_data, uint32_t str_len, const bool isVarchar);\n \tuint32_t VerifyString(const char *str_data, uint32_t str_len);\n \n protected:\ndiff --git a/extension/parquet/include/thrift_tools.hpp b/extension/parquet/include/thrift_tools.hpp\nindex 13e09d9d51b2..2306aa30b882 100644\n--- a/extension/parquet/include/thrift_tools.hpp\n+++ b/extension/parquet/include/thrift_tools.hpp\n@@ -51,8 +51,7 @@ struct ReadHeadComparator {\n // 1: register all ranges that will be read, merging ranges that are consecutive\n // 2: prefetch all registered ranges\n struct ReadAheadBuffer {\n-\tReadAheadBuffer(Allocator &allocator, FileHandle &handle, FileOpener &opener)\n-\t    : allocator(allocator), handle(handle), file_opener(opener) {\n+\tReadAheadBuffer(Allocator &allocator, FileHandle &handle) : allocator(allocator), handle(handle) {\n \t}\n \n \t// The list of read heads\n@@ -62,7 +61,6 @@ struct ReadAheadBuffer {\n \n \tAllocator &allocator;\n \tFileHandle &handle;\n-\tFileOpener &file_opener;\n \n \tidx_t total_size = 0;\n \n@@ -124,8 +122,8 @@ class ThriftFileTransport : public duckdb_apache::thrift::transport::TVirtualTra\n public:\n \tstatic constexpr uint64_t PREFETCH_FALLBACK_BUFFERSIZE = 1000000;\n \n-\tThriftFileTransport(Allocator &allocator, FileHandle &handle_p, FileOpener &opener, bool prefetch_mode_p)\n-\t    : handle(handle_p), location(0), allocator(allocator), ra_buffer(ReadAheadBuffer(allocator, handle_p, opener)),\n+\tThriftFileTransport(Allocator &allocator, FileHandle &handle_p, bool prefetch_mode_p)\n+\t    : handle(handle_p), location(0), allocator(allocator), ra_buffer(ReadAheadBuffer(allocator, handle_p)),\n \t      prefetch_mode(prefetch_mode_p) {\n \t}\n \ndiff --git a/extension/parquet/parquet-extension.cpp b/extension/parquet/parquet-extension.cpp\nindex 7314e1554e18..c1d0152db16e 100644\n--- a/extension/parquet/parquet-extension.cpp\n+++ b/extension/parquet/parquet-extension.cpp\n@@ -239,8 +239,7 @@ class ParquetScanFunction {\n \t\t\t\t\t// missing metadata entry in cache, no usable stats\n \t\t\t\t\treturn nullptr;\n \t\t\t\t}\n-\t\t\t\tauto handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,\n-\t\t\t\t                          FileSystem::DEFAULT_COMPRESSION, FileSystem::GetFileOpener(context));\n+\t\t\t\tauto handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ);\n \t\t\t\t// we need to check if the metadata cache entries are current\n \t\t\t\tif (fs.GetLastModifiedTime(*handle) >= metadata->read_time) {\n \t\t\t\t\t// missing or invalid metadata entry in cache, no usable stats overall\n@@ -627,8 +626,7 @@ unique_ptr<GlobalFunctionData> ParquetWriteInitializeGlobal(ClientContext &conte\n \n \tauto &fs = FileSystem::GetFileSystem(context);\n \tglobal_state->writer =\n-\t    make_uniq<ParquetWriter>(fs, file_path, FileSystem::GetFileOpener(context), parquet_bind.sql_types,\n-\t                             parquet_bind.column_names, parquet_bind.codec);\n+\t    make_uniq<ParquetWriter>(fs, file_path, parquet_bind.sql_types, parquet_bind.column_names, parquet_bind.codec);\n \treturn std::move(global_state);\n }\n \n@@ -726,6 +724,11 @@ unique_ptr<TableRef> ParquetScanReplacement(ClientContext &context, const string\n \tvector<unique_ptr<ParsedExpression>> children;\n \tchildren.push_back(make_uniq<ConstantExpression>(Value(table_name)));\n \ttable_function->function = make_uniq<FunctionExpression>(\"parquet_scan\", std::move(children));\n+\n+\tif (!FileSystem::HasGlob(table_name)) {\n+\t\ttable_function->alias = FileSystem::ExtractBaseName(table_name);\n+\t}\n+\n \treturn std::move(table_function);\n }\n \ndiff --git a/extension/parquet/parquet_reader.cpp b/extension/parquet/parquet_reader.cpp\nindex 39f76984963e..eee9a696ce09 100644\n--- a/extension/parquet/parquet_reader.cpp\n+++ b/extension/parquet/parquet_reader.cpp\n@@ -49,16 +49,15 @@ using duckdb_parquet::format::Statistics;\n using duckdb_parquet::format::Type;\n \n static duckdb::unique_ptr<duckdb_apache::thrift::protocol::TProtocol>\n-CreateThriftProtocol(Allocator &allocator, FileHandle &file_handle, FileOpener &opener, bool prefetch_mode) {\n-\tauto transport = make_shared<ThriftFileTransport>(allocator, file_handle, opener, prefetch_mode);\n+CreateThriftProtocol(Allocator &allocator, FileHandle &file_handle, bool prefetch_mode) {\n+\tauto transport = make_shared<ThriftFileTransport>(allocator, file_handle, prefetch_mode);\n \treturn make_uniq<duckdb_apache::thrift::protocol::TCompactProtocolT<ThriftFileTransport>>(std::move(transport));\n }\n \n-static shared_ptr<ParquetFileMetadataCache> LoadMetadata(Allocator &allocator, FileHandle &file_handle,\n-                                                         FileOpener &opener) {\n+static shared_ptr<ParquetFileMetadataCache> LoadMetadata(Allocator &allocator, FileHandle &file_handle) {\n \tauto current_time = std::chrono::system_clock::to_time_t(std::chrono::system_clock::now());\n \n-\tauto proto = CreateThriftProtocol(allocator, file_handle, opener, false);\n+\tauto proto = CreateThriftProtocol(allocator, file_handle, false);\n \tauto &transport = ((ThriftFileTransport &)*proto->getTransport());\n \tauto file_size = transport.GetSize();\n \tif (file_size < 12) {\n@@ -428,20 +427,11 @@ ParquetOptions::ParquetOptions(ClientContext &context) {\n \t}\n }\n \n-ParquetReader::ParquetReader(Allocator &allocator_p, unique_ptr<FileHandle> file_handle_p) : allocator(allocator_p) {\n-\tfile_name = file_handle_p->path;\n-\tfile_handle = std::move(file_handle_p);\n-\tmetadata = LoadMetadata(allocator, *file_handle, *file_opener);\n-\tInitializeSchema();\n-}\n-\n ParquetReader::ParquetReader(ClientContext &context_p, string file_name_p, ParquetOptions parquet_options_p)\n-    : allocator(BufferAllocator::Get(context_p)), file_opener(FileSystem::GetFileOpener(context_p)),\n+    : fs(FileSystem::GetFileSystem(context_p)), allocator(BufferAllocator::Get(context_p)),\n       parquet_options(parquet_options_p) {\n-\tauto &fs = FileSystem::GetFileSystem(context_p);\n \tfile_name = std::move(file_name_p);\n-\tfile_handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,\n-\t                          FileSystem::DEFAULT_COMPRESSION, file_opener);\n+\tfile_handle = fs.OpenFile(file_name, FileFlags::FILE_FLAGS_READ);\n \tif (!file_handle->CanSeek()) {\n \t\tthrow NotImplementedException(\n \t\t    \"Reading parquet files from a FIFO stream is not supported and cannot be efficiently supported since \"\n@@ -451,12 +441,12 @@ ParquetReader::ParquetReader(ClientContext &context_p, string file_name_p, Parqu\n \t// or if this file has cached metadata\n \t// or if the cached version already expired\n \tif (!ObjectCache::ObjectCacheEnabled(context_p)) {\n-\t\tmetadata = LoadMetadata(allocator, *file_handle, *file_opener);\n+\t\tmetadata = LoadMetadata(allocator, *file_handle);\n \t} else {\n \t\tauto last_modify_time = fs.GetLastModifiedTime(*file_handle);\n \t\tmetadata = ObjectCache::GetObjectCache(context_p).Get<ParquetFileMetadataCache>(file_name);\n \t\tif (!metadata || (last_modify_time + 10 >= metadata->read_time)) {\n-\t\t\tmetadata = LoadMetadata(allocator, *file_handle, *file_opener);\n+\t\t\tmetadata = LoadMetadata(allocator, *file_handle);\n \t\t\tObjectCache::GetObjectCache(context_p).Put(file_name, metadata);\n \t\t}\n \t}\n@@ -466,7 +456,7 @@ ParquetReader::ParquetReader(ClientContext &context_p, string file_name_p, Parqu\n \n ParquetReader::ParquetReader(ClientContext &context_p, ParquetOptions parquet_options_p,\n                              shared_ptr<ParquetFileMetadataCache> metadata_p)\n-    : allocator(BufferAllocator::Get(context_p)), file_opener(FileSystem::GetFileOpener(context_p)),\n+    : fs(FileSystem::GetFileSystem(context_p)), allocator(BufferAllocator::Get(context_p)),\n       metadata(std::move(metadata_p)), parquet_options(parquet_options_p) {\n \tInitializeSchema();\n }\n@@ -634,11 +624,10 @@ void ParquetReader::InitializeScan(ParquetReaderScanState &state, vector<idx_t>\n \t\t\tstate.prefetch_mode = false;\n \t\t}\n \n-\t\tstate.file_handle = file_handle->file_system.OpenFile(file_handle->path, flags, FileSystem::DEFAULT_LOCK,\n-\t\t                                                      FileSystem::DEFAULT_COMPRESSION, file_opener);\n+\t\tstate.file_handle = fs.OpenFile(file_handle->path, flags);\n \t}\n \n-\tstate.thrift_file_proto = CreateThriftProtocol(allocator, *state.file_handle, *file_opener, state.prefetch_mode);\n+\tstate.thrift_file_proto = CreateThriftProtocol(allocator, *state.file_handle, state.prefetch_mode);\n \tstate.root_reader = CreateReader();\n \tstate.define_buf.resize(allocator, STANDARD_VECTOR_SIZE);\n \tstate.repeat_buf.resize(allocator, STANDARD_VECTOR_SIZE);\ndiff --git a/extension/parquet/parquet_statistics.cpp b/extension/parquet/parquet_statistics.cpp\nindex 9a6cebf974d5..178780308da3 100644\n--- a/extension/parquet/parquet_statistics.cpp\n+++ b/extension/parquet/parquet_statistics.cpp\n@@ -1,6 +1,7 @@\n #include \"parquet_statistics.hpp\"\n #include \"parquet_decimal_utils.hpp\"\n #include \"parquet_timestamp.hpp\"\n+#include \"string_column_reader.hpp\"\n #include \"duckdb.hpp\"\n #ifndef DUCKDB_AMALGAMATION\n #include \"duckdb/common/types/blob.hpp\"\n@@ -253,15 +254,19 @@ unique_ptr<BaseStatistics> ParquetStatisticsUtils::TransformColumnStatistics(con\n \tcase LogicalTypeId::VARCHAR: {\n \t\tauto string_stats = StringStats::CreateEmpty(type);\n \t\tif (parquet_stats.__isset.min) {\n+\t\t\tStringColumnReader::VerifyString(parquet_stats.min.c_str(), parquet_stats.min.size(), true);\n \t\t\tStringStats::Update(string_stats, parquet_stats.min);\n \t\t} else if (parquet_stats.__isset.min_value) {\n+\t\t\tStringColumnReader::VerifyString(parquet_stats.min_value.c_str(), parquet_stats.min_value.size(), true);\n \t\t\tStringStats::Update(string_stats, parquet_stats.min_value);\n \t\t} else {\n \t\t\treturn nullptr;\n \t\t}\n \t\tif (parquet_stats.__isset.max) {\n+\t\t\tStringColumnReader::VerifyString(parquet_stats.max.c_str(), parquet_stats.max.size(), true);\n \t\t\tStringStats::Update(string_stats, parquet_stats.max);\n \t\t} else if (parquet_stats.__isset.max_value) {\n+\t\t\tStringColumnReader::VerifyString(parquet_stats.max_value.c_str(), parquet_stats.max_value.size(), true);\n \t\t\tStringStats::Update(string_stats, parquet_stats.max_value);\n \t\t} else {\n \t\t\treturn nullptr;\ndiff --git a/extension/parquet/parquet_writer.cpp b/extension/parquet/parquet_writer.cpp\nindex 54daa7b23645..a3fcc6ddf0d4 100644\n--- a/extension/parquet/parquet_writer.cpp\n+++ b/extension/parquet/parquet_writer.cpp\n@@ -225,12 +225,12 @@ void VerifyUniqueNames(const vector<string> &names) {\n #endif\n }\n \n-ParquetWriter::ParquetWriter(FileSystem &fs, string file_name_p, FileOpener *file_opener_p, vector<LogicalType> types_p,\n-                             vector<string> names_p, CompressionCodec::type codec)\n+ParquetWriter::ParquetWriter(FileSystem &fs, string file_name_p, vector<LogicalType> types_p, vector<string> names_p,\n+                             CompressionCodec::type codec)\n     : file_name(std::move(file_name_p)), sql_types(std::move(types_p)), column_names(std::move(names_p)), codec(codec) {\n \t// initialize the file writer\n-\twriter = make_uniq<BufferedFileWriter>(\n-\t    fs, file_name.c_str(), FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW, file_opener_p);\n+\twriter = make_uniq<BufferedFileWriter>(fs, file_name.c_str(),\n+\t                                       FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW);\n \t// parquet files start with the string \"PAR1\"\n \twriter->WriteData((const_data_ptr_t) \"PAR1\", 4);\n \tTCompactProtocolFactoryT<MyTransport> tproto_factory;\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/build_support.cpp b/extension/tpcds/dsdgen/dsdgen-c/build_support.cpp\nindex eedff32439ec..12a13ca59fba 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/build_support.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/build_support.cpp\n@@ -36,7 +36,7 @@\n #include \"config.h\"\n #include \"porting.h\"\n #include <stdio.h>\n-#ifndef WIN32\n+#if !defined(_WIN32) && !defined(__MSVC32_)\n #include <netinet/in.h>\n #endif\n #include <math.h>\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/decimal.cpp b/extension/tpcds/dsdgen/dsdgen-c/decimal.cpp\nindex be6c2bad0814..0b49a8d8dc64 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/decimal.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/decimal.cpp\n@@ -244,11 +244,11 @@ int dectostr(char *dest, decimal_t *d) {\n int dectoflt(double *dest, decimal_t *d) {\n \tif ((dest == NULL) || (d == NULL))\n \t\treturn (-1);\n-#ifdef WIN32\n+#ifdef _WIN32\n #pragma warning(disable : 4244)\n #endif\n \t*dest = d->number;\n-#ifdef WIN32\n+#ifdef _WIN32\n #pragma warning(default : 4244)\n #endif\n \twhile (--d->precision > 0)\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/dist.cpp b/extension/tpcds/dsdgen/dsdgen-c/dist.cpp\nindex fdc77b514b02..d16a1daacd49 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/dist.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/dist.cpp\n@@ -42,10 +42,11 @@\n #include <fcntl.h>\n #include <stdio.h>\n \n-#ifdef WIN32\n+#ifdef _WIN32\n #include <io.h>\n #include <search.h>\n #include <stdlib.h>\n+#include <winsock.h>\n #else\n #include <netinet/in.h>\n #include <sys/stat.h>\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/genrand.cpp b/extension/tpcds/dsdgen/dsdgen-c/genrand.cpp\nindex 8989dd8440c4..8c64856f1d66 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/genrand.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/genrand.cpp\n@@ -38,7 +38,7 @@\n #include \"porting.h\"\n #include <stdio.h>\n #include <stdlib.h>\n-#ifdef WIN32\n+#ifdef _WIN32\n #include <search.h>\n #include <limits.h>\n #endif\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/misc.cpp b/extension/tpcds/dsdgen/dsdgen-c/misc.cpp\nindex 324ac960d438..24b1d0f2a025 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/misc.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/misc.cpp\n@@ -65,7 +65,7 @@ int print_separator(int sep);\n \n extern long Seed[];\n \n-#ifdef WIN32\n+#ifdef _WIN32\n #define PATH_SEP '\\\\'\n #else\n #define PATH_SEP '/'\ndiff --git a/extension/tpcds/dsdgen/dsdgen-c/r_params.cpp b/extension/tpcds/dsdgen/dsdgen-c/r_params.cpp\nindex 103b53c9e569..47738ec8ec57 100644\n--- a/extension/tpcds/dsdgen/dsdgen-c/r_params.cpp\n+++ b/extension/tpcds/dsdgen/dsdgen-c/r_params.cpp\n@@ -64,7 +64,7 @@ char *params[9];\n #endif\n \n #define MAX_LINE_LEN 120\n-#ifdef WIN32\n+#ifdef _WIN32\n #define OPTION_START '/'\n #else\n #define OPTION_START '-'\ndiff --git a/extension/tpcds/dsdgen/include/dsdgen-c/porting.h b/extension/tpcds/dsdgen/include/dsdgen-c/porting.h\nindex 81f998f9feb6..6923a0f35286 100644\n--- a/extension/tpcds/dsdgen/include/dsdgen-c/porting.h\n+++ b/extension/tpcds/dsdgen/include/dsdgen-c/porting.h\n@@ -55,12 +55,7 @@\n #include <stdlib.h>\n #endif\n \n-#ifndef WIN32\n-#include <sys/types.h>\n-#else\n-#define int32_t __int32\n-#define int64_t __int64\n-#endif\n+#include <stdint.h>\n \n #ifdef WIN32\n #include <sys/timeb.h>\ndiff --git a/scripts/extension-lipo-strip.sh b/scripts/extension-lipo-strip.sh\nnew file mode 100755\nindex 000000000000..6070142591c2\n--- /dev/null\n+++ b/scripts/extension-lipo-strip.sh\n@@ -0,0 +1,22 @@\n+#!/bin/bash\n+\n+if [ \"$#\" -ne 3 ]; then\n+    echo \"Usage: ./extension-lipo-strip.sh <arch_to_strip> <base_dir> <output_dir>\"\n+fi\n+\n+set -e\n+\n+# Ensure we do nothing on failed globs\n+shopt -s nullglob\n+\n+FILES=\"$2/*/*.duckdb_extension\"\n+\n+# Ensure the output dir exists\n+mkdir -p $3\n+\n+# Give dem fat extensions some lipo\n+for f in $FILES\n+do\n+\text=`basename $f .duckdb_extension`\n+\tlipo $f -remove $1 -output $3/$ext.duckdb_extension\n+done\n\\ No newline at end of file\ndiff --git a/scripts/extension-upload.sh b/scripts/extension-upload.sh\nindex 7a6889e47ea6..77214568399d 100755\n--- a/scripts/extension-upload.sh\n+++ b/scripts/extension-upload.sh\n@@ -1,16 +1,24 @@\n #!/bin/bash\n \n-# Usage: ./extension-upload.sh <architecture> <commithash or version_tag>\n+# Usage: ./extension-upload.sh <architecture> <commithash or version_tag> <(optionally) base_dir>\n+\n+if [ -z \"$3\" ]; then\n+    BASE_DIR=\"build/release/extension/*\"\n+else\n+    BASE_DIR=\"$3\"\n+fi\n \n set -e\n \n+# Ensure we do nothing on failed globs\n+shopt -s nullglob\n+\n echo \"$DUCKDB_EXTENSION_SIGNING_PK\" > private.pem\n \n-FILES=\"build/release/extension/*/*.duckdb_extension\"\n+FILES=\"$BASE_DIR/*.duckdb_extension\"\n for f in $FILES\n do\n \text=`basename $f .duckdb_extension`\n-\techo $ext\n \t# calculate SHA256 hash of extension binary\n \tscripts/compute-extension-hash.sh $f > $f.hash\n \t# encrypt hash with extension signing private key to create signature\ndiff --git a/scripts/osx_import_codesign_certificate.sh b/scripts/osx_import_codesign_certificate.sh\nnew file mode 100644\nindex 000000000000..b64b2fa36f2a\n--- /dev/null\n+++ b/scripts/osx_import_codesign_certificate.sh\n@@ -0,0 +1,15 @@\n+# create variables\n+export CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12\n+export KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db\n+\n+# import certificate and provisioning profile from secrets\n+echo -n \"$BUILD_CERTIFICATE_BASE64\" | base64 --decode -o $CERTIFICATE_PATH\n+\n+# create temporary keychain\n+security create-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN_PATH\n+security set-keychain-settings -lut 21600 $KEYCHAIN_PATH\n+security unlock-keychain -p \"$KEYCHAIN_PASSWORD\" $KEYCHAIN_PATH\n+\n+# import certificate to keychain\n+security import $CERTIFICATE_PATH -P \"$P12_PASSWORD\" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH\n+security list-keychain -d user -s $KEYCHAIN_PATH\n\\ No newline at end of file\ndiff --git a/src/CMakeLists.txt b/src/CMakeLists.txt\nindex 533cfbd3e2c0..0200c15f6563 100644\n--- a/src/CMakeLists.txt\n+++ b/src/CMakeLists.txt\n@@ -104,87 +104,6 @@ else()\n \n endif()\n \n-if(BUILD_PYTHON\n-   OR BUILD_R\n-   OR BUILD_NODE\n-   OR CONFIGURE_R)\n-  if(CMAKE_BUILD_TYPE STREQUAL \"Debug\")\n-    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_DEBUG}\")\n-  elseif(CMAKE_BUILD_TYPE STREQUAL \"Release\")\n-    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELEASE}\")\n-  elseif(CMAKE_BUILD_TYPE STREQUAL \"RelWithDebInfo\")\n-    set(ALL_COMPILE_FLAGS\n-        \"${CMAKE_CXX_FLAGS} ${CMAKE_CXX_FLAGS_RELWITHDEBINFO}\")\n-  else()\n-    set(ALL_COMPILE_FLAGS \"${CMAKE_CXX_FLAGS}\")\n-  endif()\n-\n-  get_target_property(duckdb_libs duckdb LINK_LIBRARIES)\n-\n-  if(BUILD_PYTHON)\n-    if(USER_SPACE)\n-      add_custom_target(\n-        duckdb_python ALL\n-        COMMAND\n-          python3 setup.py install --user --binary-dir=${PROJECT_BINARY_DIR}\n-          --compile-flags=${ALL_COMPILE_FLAGS} --libs=\"${duckdb_libs}\"\n-        DEPENDS duckdb\n-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/pythonpkg\n-        COMMENT Build\n-        Python package)\n-    else()\n-      add_custom_target(\n-        duckdb_python ALL\n-        COMMAND python3 setup.py install --binary-dir=${PROJECT_BINARY_DIR}\n-                --compile-flags=${ALL_COMPILE_FLAGS} --libs=\"${duckdb_libs}\"\n-        DEPENDS duckdb\n-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/pythonpkg\n-        COMMENT Build\n-        Python package)\n-    endif()\n-    add_extension_dependencies(duckdb_python)\n-  endif()\n-  if(CONFIGURE_R)\n-    add_custom_target(\n-      duckdb_configure_r ALL\n-      COMMAND\n-        DUCKDB_R_BINDIR=${PROJECT_BINARY_DIR}\n-        DUCKDB_R_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n-        DUCKDB_R_LIBS=\\\"${duckdb_libs}\\\" python3 rconfigure.py\n-      DEPENDS duckdb\n-      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/rpkg\n-      COMMENT Configure\n-      R package)\n-    add_extension_dependencies(duckdb_configure_r)\n-  endif()\n-  if(BUILD_R)\n-    add_custom_target(\n-      duckdb_r ALL\n-      COMMAND\n-        DUCKDB_R_BINDIR=${PROJECT_BINARY_DIR}\n-        DUCKDB_R_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n-        DUCKDB_R_LIBS=\\\"${duckdb_libs}\\\" DUCKDB_R_DEBUG= R CMD INSTALL .\n-      DEPENDS duckdb\n-      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/rpkg\n-      COMMENT Build\n-      R package)\n-    add_extension_dependencies(duckdb_r)\n-  endif()\n-  if(BUILD_NODE)\n-    add_custom_target(\n-      duckdb_node ALL\n-      COMMAND\n-        make complete_build DUCKDB_NODE_BINDIR=${CMAKE_BINARY_DIR}\n-        DUCKDB_NODE_CFLAGS=\\\"${ALL_COMPILE_FLAGS}\\\"\n-        DUCKDB_NODE_LIBS=\\\"${duckdb_libs}\\\"\n-      DEPENDS duckdb\n-      WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/tools/nodejs\n-      COMMENT Build\n-      Node package)\n-    add_extension_dependencies(duckdb_node)\n-  endif()\n-endif()\n-\n install(\n   TARGETS duckdb duckdb_static\n   EXPORT \"${DUCKDB_EXPORT_SET}\"\ndiff --git a/src/catalog/catalog_entry/CMakeLists.txt b/src/catalog/catalog_entry/CMakeLists.txt\nindex fe398cafb18f..95fd030c15ea 100644\n--- a/src/catalog/catalog_entry/CMakeLists.txt\n+++ b/src/catalog/catalog_entry/CMakeLists.txt\n@@ -7,7 +7,7 @@ add_library_unity(\n   duck_table_entry.cpp\n   type_catalog_entry.cpp\n   index_catalog_entry.cpp\n-  scalar_macro_catalog_entry.cpp\n+  macro_catalog_entry.cpp\n   pragma_function_catalog_entry.cpp\n   schema_catalog_entry.cpp\n   sequence_catalog_entry.cpp\ndiff --git a/src/catalog/catalog_entry/duck_table_entry.cpp b/src/catalog/catalog_entry/duck_table_entry.cpp\nindex 347b1f59d2d4..0fb6b79ddc0b 100644\n--- a/src/catalog/catalog_entry/duck_table_entry.cpp\n+++ b/src/catalog/catalog_entry/duck_table_entry.cpp\n@@ -721,9 +721,9 @@ TableStorageInfo DuckTableEntry::GetStorageInfo(ClientContext &context) {\n \tstorage->info->indexes.Scan([&](Index &index) {\n \t\tIndexInfo info;\n \t\tinfo.is_primary = index.IsPrimary();\n-\t\tinfo.is_unique = index.IsUnique();\n+\t\tinfo.is_unique = index.IsUnique() || info.is_primary;\n \t\tinfo.is_foreign = index.IsForeign();\n-\t\tindex.column_id_set = index.column_id_set;\n+\t\tinfo.column_set = index.column_id_set;\n \t\tresult.index_info.push_back(std::move(info));\n \t\treturn false;\n \t});\ndiff --git a/src/catalog/catalog_entry/macro_catalog_entry.cpp b/src/catalog/catalog_entry/macro_catalog_entry.cpp\nnew file mode 100644\nindex 000000000000..a833516d653c\n--- /dev/null\n+++ b/src/catalog/catalog_entry/macro_catalog_entry.cpp\n@@ -0,0 +1,42 @@\n+#include \"duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+#include \"duckdb/function/scalar_macro_function.hpp\"\n+\n+namespace duckdb {\n+\n+MacroCatalogEntry::MacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n+    : FunctionEntry(\n+          (info.function->type == MacroType::SCALAR_MACRO ? CatalogType::MACRO_ENTRY : CatalogType::TABLE_MACRO_ENTRY),\n+          catalog, schema, info),\n+      function(std::move(info.function)) {\n+\tthis->temporary = info.temporary;\n+\tthis->internal = info.internal;\n+}\n+\n+ScalarMacroCatalogEntry::ScalarMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n+    : MacroCatalogEntry(catalog, schema, info) {\n+}\n+\n+TableMacroCatalogEntry::TableMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n+    : MacroCatalogEntry(catalog, schema, info) {\n+}\n+\n+unique_ptr<CreateMacroInfo> MacroCatalogEntry::GetInfoForSerialization() const {\n+\tauto info = make_uniq<CreateMacroInfo>(type);\n+\tinfo->catalog = catalog.GetName();\n+\tinfo->schema = schema.name;\n+\tinfo->name = name;\n+\tinfo->function = function->Copy();\n+\treturn info;\n+}\n+void MacroCatalogEntry::Serialize(Serializer &serializer) const {\n+\tauto info = GetInfoForSerialization();\n+\tinfo->Serialize(serializer);\n+}\n+\n+unique_ptr<CreateMacroInfo> MacroCatalogEntry::Deserialize(Deserializer &main_source, ClientContext &context) {\n+\treturn unique_ptr_cast<CreateInfo, CreateMacroInfo>(CreateInfo::Deserialize(main_source));\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/catalog/catalog_entry/scalar_macro_catalog_entry.cpp b/src/catalog/catalog_entry/scalar_macro_catalog_entry.cpp\ndeleted file mode 100644\nindex 845baa6b4e5c..000000000000\n--- a/src/catalog/catalog_entry/scalar_macro_catalog_entry.cpp\n+++ /dev/null\n@@ -1,104 +0,0 @@\n-#include \"duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\"\n-#include \"duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp\"\n-#include \"duckdb/common/field_writer.hpp\"\n-#include \"duckdb/function/scalar_macro_function.hpp\"\n-#include \"duckdb/function/table_macro_function.hpp\"\n-\n-namespace duckdb {\n-\n-MacroCatalogEntry::MacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n-    : FunctionEntry(\n-          (info.function->type == MacroType::SCALAR_MACRO ? CatalogType::MACRO_ENTRY : CatalogType::TABLE_MACRO_ENTRY),\n-          catalog, schema, info),\n-      function(std::move(info.function)) {\n-\tthis->temporary = info.temporary;\n-\tthis->internal = info.internal;\n-}\n-\n-ScalarMacroCatalogEntry::ScalarMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n-    : MacroCatalogEntry(catalog, schema, info) {\n-}\n-\n-void ScalarMacroCatalogEntry::Serialize(Serializer &main_serializer) const {\n-\tD_ASSERT(!internal);\n-\tauto &scalar_function = function->Cast<ScalarMacroFunction>();\n-\tFieldWriter writer(main_serializer);\n-\twriter.WriteString(schema.name);\n-\twriter.WriteString(name);\n-\twriter.WriteSerializable(*scalar_function.expression);\n-\t// writer.WriteSerializableList(function->parameters);\n-\twriter.WriteSerializableList(function->parameters);\n-\twriter.WriteField<uint32_t>((uint32_t)function->default_parameters.size());\n-\tauto &serializer = writer.GetSerializer();\n-\tfor (auto &kv : function->default_parameters) {\n-\t\tserializer.WriteString(kv.first);\n-\t\tkv.second->Serialize(serializer);\n-\t}\n-\twriter.Finalize();\n-}\n-\n-unique_ptr<CreateMacroInfo> ScalarMacroCatalogEntry::Deserialize(Deserializer &main_source, ClientContext &context) {\n-\tauto info = make_uniq<CreateMacroInfo>(CatalogType::MACRO_ENTRY);\n-\tFieldReader reader(main_source);\n-\tinfo->schema = reader.ReadRequired<string>();\n-\tinfo->name = reader.ReadRequired<string>();\n-\tauto expression = reader.ReadRequiredSerializable<ParsedExpression>();\n-\tauto func = make_uniq<ScalarMacroFunction>(std::move(expression));\n-\tinfo->function = std::move(func);\n-\tinfo->function->parameters = reader.ReadRequiredSerializableList<ParsedExpression>();\n-\tauto default_param_count = reader.ReadRequired<uint32_t>();\n-\tauto &source = reader.GetSource();\n-\tfor (idx_t i = 0; i < default_param_count; i++) {\n-\t\tauto name = source.Read<string>();\n-\t\tinfo->function->default_parameters[name] = ParsedExpression::Deserialize(source);\n-\t}\n-\t// dont like this\n-\t// info->type=CatalogType::MACRO_ENTRY;\n-\treader.Finalize();\n-\treturn info;\n-}\n-\n-TableMacroCatalogEntry::TableMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info)\n-    : MacroCatalogEntry(catalog, schema, info) {\n-}\n-\n-void TableMacroCatalogEntry::Serialize(Serializer &main_serializer) const {\n-\tD_ASSERT(!internal);\n-\tFieldWriter writer(main_serializer);\n-\n-\tauto &table_function = function->Cast<TableMacroFunction>();\n-\twriter.WriteString(schema.name);\n-\twriter.WriteString(name);\n-\twriter.WriteSerializable(*table_function.query_node);\n-\twriter.WriteSerializableList(function->parameters);\n-\twriter.WriteField<uint32_t>((uint32_t)function->default_parameters.size());\n-\tauto &serializer = writer.GetSerializer();\n-\tfor (auto &kv : function->default_parameters) {\n-\t\tserializer.WriteString(kv.first);\n-\t\tkv.second->Serialize(serializer);\n-\t}\n-\twriter.Finalize();\n-}\n-\n-unique_ptr<CreateMacroInfo> TableMacroCatalogEntry::Deserialize(Deserializer &main_source, ClientContext &context) {\n-\tauto info = make_uniq<CreateMacroInfo>(CatalogType::TABLE_MACRO_ENTRY);\n-\tFieldReader reader(main_source);\n-\tinfo->schema = reader.ReadRequired<string>();\n-\tinfo->name = reader.ReadRequired<string>();\n-\tauto query_node = reader.ReadRequiredSerializable<QueryNode>();\n-\tauto table_function = make_uniq<TableMacroFunction>(std::move(query_node));\n-\tinfo->function = std::move(table_function);\n-\tinfo->function->parameters = reader.ReadRequiredSerializableList<ParsedExpression>();\n-\tauto default_param_count = reader.ReadRequired<uint32_t>();\n-\tauto &source = reader.GetSource();\n-\tfor (idx_t i = 0; i < default_param_count; i++) {\n-\t\tauto name = source.Read<string>();\n-\t\tinfo->function->default_parameters[name] = ParsedExpression::Deserialize(source);\n-\t}\n-\n-\treader.Finalize();\n-\n-\treturn info;\n-}\n-\n-} // namespace duckdb\ndiff --git a/src/catalog/catalog_search_path.cpp b/src/catalog/catalog_search_path.cpp\nindex 1ce30a897332..b7c6a882e3df 100644\n--- a/src/catalog/catalog_search_path.cpp\n+++ b/src/catalog/catalog_search_path.cpp\n@@ -145,6 +145,11 @@ void CatalogSearchPath::Set(vector<CatalogSearchEntry> new_paths, bool is_set_sc\n \t\t\t                       is_set_schema ? \"schema\" : \"search_path\", path.ToString());\n \t\t}\n \t}\n+\tif (is_set_schema) {\n+\t\tif (new_paths[0].catalog == TEMP_CATALOG || new_paths[0].catalog == SYSTEM_CATALOG) {\n+\t\t\tthrow CatalogException(\"SET schema cannot be set to internal schema \\\"%s\\\"\", new_paths[0].catalog);\n+\t\t}\n+\t}\n \tthis->set_paths = std::move(new_paths);\n \tSetPaths(set_paths);\n }\ndiff --git a/src/catalog/catalog_set.cpp b/src/catalog/catalog_set.cpp\nindex 009820fe058e..60768df1d6b2 100644\n--- a/src/catalog/catalog_set.cpp\n+++ b/src/catalog/catalog_set.cpp\n@@ -84,7 +84,7 @@ bool CatalogSet::CreateEntry(CatalogTransaction transaction, const string &name,\n \t\t\tthrow InternalException(\"Attempting to create temporary entry \\\"%s\\\" in non-temporary catalog\", name);\n \t\t}\n \t\tif (!value->temporary && catalog.IsTemporaryCatalog() && name != DEFAULT_SCHEMA) {\n-\t\t\tthrow InternalException(\"Attempting to create non-temporary entry \\\"%s\\\" in temporary catalog\", name);\n+\t\t\tthrow InvalidInputException(\"Cannot create non-temporary entry \\\"%s\\\" in temporary catalog\", name);\n \t\t}\n \t}\n \t// lock the catalog for writing\n@@ -621,7 +621,7 @@ void CatalogSet::Undo(CatalogEntry &entry) {\n \t\tauto &dependency_manager = catalog.GetDependencyManager();\n \t\tdependency_manager.EraseObject(to_be_removed_node);\n \t}\n-\tif (entry.name != to_be_removed_node.name) {\n+\tif (!StringUtil::CIEquals(entry.name, to_be_removed_node.name)) {\n \t\t// rename: clean up the new name when the rename is rolled back\n \t\tauto removed_entry = mapping.find(to_be_removed_node.name);\n \t\tif (removed_entry->second->child) {\ndiff --git a/src/catalog/default/default_functions.cpp b/src/catalog/default/default_functions.cpp\nindex 24dc1fd314ee..cc9243dc2194 100644\n--- a/src/catalog/default/default_functions.cpp\n+++ b/src/catalog/default/default_functions.cpp\n@@ -92,6 +92,7 @@ static DefaultMacro internal_macros[] = {\n \t{DEFAULT_SCHEMA, \"array_pop_front\", {\"arr\", nullptr}, \"arr[2:]\"},\n \t{DEFAULT_SCHEMA, \"array_push_back\", {\"arr\", \"e\", nullptr}, \"list_concat(arr, list_value(e))\"},\n \t{DEFAULT_SCHEMA, \"array_push_front\", {\"arr\", \"e\", nullptr}, \"list_concat(list_value(e), arr)\"},\n+\t{DEFAULT_SCHEMA, \"array_to_string\", {\"arr\", \"sep\", nullptr}, \"list_aggr(arr, 'string_agg', sep)\"},\n \t{DEFAULT_SCHEMA, \"generate_subscripts\", {\"arr\", \"dim\", nullptr}, \"unnest(generate_series(1, array_length(arr, dim)))\"},\n \t{DEFAULT_SCHEMA, \"fdiv\", {\"x\", \"y\", nullptr}, \"floor(x/y)\"},\n \t{DEFAULT_SCHEMA, \"fmod\", {\"x\", \"y\", nullptr}, \"(x-y*floor(x/y))\"},\ndiff --git a/src/common/arrow/arrow_converter.cpp b/src/common/arrow/arrow_converter.cpp\nindex 325e008cdd2f..0442026ed48b 100644\n--- a/src/common/arrow/arrow_converter.cpp\n+++ b/src/common/arrow/arrow_converter.cpp\n@@ -33,7 +33,7 @@ struct DuckDBArrowSchemaHolder {\n \tstd::list<vector<ArrowSchema>> nested_children;\n \tstd::list<vector<ArrowSchema *>> nested_children_ptr;\n \t//! This holds strings created to represent decimal types\n-\tvector<unique_ptr<char[]>> owned_type_names;\n+\tvector<unsafe_unique_array<char>> owned_type_names;\n };\n \n static void ReleaseDuckDBArrowSchema(ArrowSchema *schema) {\n@@ -131,7 +131,7 @@ void SetArrowFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, co\n \t\tbreak;\n \tcase LogicalTypeId::TIMESTAMP_TZ: {\n \t\tstring format = \"tsu:\" + config_timezone;\n-\t\tunique_ptr<char[]> format_ptr = unique_ptr<char[]>(new char[format.size() + 1]);\n+\t\tauto format_ptr = make_unsafe_uniq_array<char>(format.size() + 1);\n \t\tfor (size_t i = 0; i < format.size(); i++) {\n \t\t\tformat_ptr[i] = format[i];\n \t\t}\n@@ -156,7 +156,7 @@ void SetArrowFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, co\n \t\tuint8_t width, scale;\n \t\ttype.GetDecimalProperties(width, scale);\n \t\tstring format = \"d:\" + to_string(width) + \",\" + to_string(scale);\n-\t\tunique_ptr<char[]> format_ptr = unique_ptr<char[]>(new char[format.size() + 1]);\n+\t\tauto format_ptr = make_unsafe_uniq_array<char>(format.size() + 1);\n \t\tfor (size_t i = 0; i < format.size(); i++) {\n \t\t\tformat_ptr[i] = format[i];\n \t\t}\n@@ -204,7 +204,7 @@ void SetArrowFormat(DuckDBArrowSchemaHolder &root_holder, ArrowSchema &child, co\n \t\t\tInitializeChild(*child.children[type_idx]);\n \n \t\t\tauto &struct_col_name = child_types[type_idx].first;\n-\t\t\tunique_ptr<char[]> name_ptr = unique_ptr<char[]>(new char[struct_col_name.size() + 1]);\n+\t\t\tauto name_ptr = make_unsafe_uniq_array<char>(struct_col_name.size() + 1);\n \t\t\tfor (size_t i = 0; i < struct_col_name.size(); i++) {\n \t\t\t\tname_ptr[i] = struct_col_name[i];\n \t\t\t}\ndiff --git a/src/common/compressed_file_system.cpp b/src/common/compressed_file_system.cpp\nindex 1bb8d3e8d583..b72080b2bf1b 100644\n--- a/src/common/compressed_file_system.cpp\n+++ b/src/common/compressed_file_system.cpp\n@@ -19,10 +19,10 @@ void CompressedFile::Initialize(bool write) {\n \tthis->write = write;\n \tstream_data.in_buf_size = compressed_fs.InBufferSize();\n \tstream_data.out_buf_size = compressed_fs.OutBufferSize();\n-\tstream_data.in_buff = unique_ptr<data_t[]>(new data_t[stream_data.in_buf_size]);\n+\tstream_data.in_buff = make_unsafe_uniq_array<data_t>(stream_data.in_buf_size);\n \tstream_data.in_buff_start = stream_data.in_buff.get();\n \tstream_data.in_buff_end = stream_data.in_buff.get();\n-\tstream_data.out_buff = unique_ptr<data_t[]>(new data_t[stream_data.out_buf_size]);\n+\tstream_data.out_buff = make_unsafe_uniq_array<data_t>(stream_data.out_buf_size);\n \tstream_data.out_buff_start = stream_data.out_buff.get();\n \tstream_data.out_buff_end = stream_data.out_buff.get();\n \ndiff --git a/src/common/constants.cpp b/src/common/constants.cpp\nindex 69eac31472b7..baa9da908d06 100644\n--- a/src/common/constants.cpp\n+++ b/src/common/constants.cpp\n@@ -2,6 +2,7 @@\n \n #include \"duckdb/common/limits.hpp\"\n #include \"duckdb/common/vector_size.hpp\"\n+#include \"duckdb/common/serializer.hpp\"\n \n namespace duckdb {\n \ndiff --git a/src/common/exception.cpp b/src/common/exception.cpp\nindex 42a0d7154abd..15af4b9e5712 100644\n--- a/src/common/exception.cpp\n+++ b/src/common/exception.cpp\n@@ -59,6 +59,23 @@ string Exception::GetStackTrace(int max_depth) {\n }\n \n string Exception::ConstructMessageRecursive(const string &msg, std::vector<ExceptionFormatValue> &values) {\n+#ifdef DEBUG\n+\t// Verify that we have the required amount of values for the message\n+\tidx_t parameter_count = 0;\n+\tfor (idx_t i = 0; i < msg.size(); i++) {\n+\t\tif (msg[i] != '%') {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tif (i < msg.size() && msg[i + 1] == '%') {\n+\t\t\ti++;\n+\t\t\tcontinue;\n+\t\t}\n+\t\tparameter_count++;\n+\t}\n+\tif (parameter_count != values.size()) {\n+\t\tthrow InternalException(\"Expected %d parameters, received %d\", parameter_count, values.size());\n+\t}\n+#endif\n \treturn ExceptionFormatValue::Format(msg, values);\n }\n \ndiff --git a/src/common/exception_format_value.cpp b/src/common/exception_format_value.cpp\nindex 3f7848bfe4da..e97a36194b39 100644\n--- a/src/common/exception_format_value.cpp\n+++ b/src/common/exception_format_value.cpp\n@@ -3,6 +3,7 @@\n #include \"fmt/format.h\"\n #include \"fmt/printf.h\"\n #include \"duckdb/common/types/hugeint.hpp\"\n+#include \"duckdb/parser/keyword_helper.hpp\"\n \n namespace duckdb {\n \n@@ -40,6 +41,19 @@ template <>\n ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(string value) {\n \treturn ExceptionFormatValue(std::move(value));\n }\n+\n+template <>\n+ExceptionFormatValue\n+ExceptionFormatValue::CreateFormatValue(SQLString value) { // NOLINT: templating requires us to copy value here\n+\treturn KeywordHelper::WriteQuoted(value.raw_string, '\\'');\n+}\n+\n+template <>\n+ExceptionFormatValue\n+ExceptionFormatValue::CreateFormatValue(SQLIdentifier value) { // NOLINT: templating requires us to copy value here\n+\treturn KeywordHelper::WriteOptionallyQuoted(value.raw_string, '\"');\n+}\n+\n template <>\n ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(const char *value) {\n \treturn ExceptionFormatValue(string(value));\ndiff --git a/src/common/file_system.cpp b/src/common/file_system.cpp\nindex 50fecc3f749d..2415a1c23c2d 100644\n--- a/src/common/file_system.cpp\n+++ b/src/common/file_system.cpp\n@@ -11,6 +11,7 @@\n #include \"duckdb/main/client_data.hpp\"\n #include \"duckdb/main/database.hpp\"\n #include \"duckdb/main/extension_helper.hpp\"\n+#include \"duckdb/common/windows_util.hpp\"\n \n #include <cstdint>\n #include <cstdio>\n@@ -40,11 +41,8 @@ FileSystem::~FileSystem() {\n }\n \n FileSystem &FileSystem::GetFileSystem(ClientContext &context) {\n-\treturn FileSystem::GetFileSystem(*context.db);\n-}\n-\n-FileOpener *FileSystem::GetFileOpener(ClientContext &context) {\n-\treturn ClientData::Get(context).file_opener.get();\n+\tauto &client_data = ClientData::Get(context);\n+\treturn *client_data.client_file_system;\n }\n \n bool PathMatched(const string &path, const string &sub_path) {\n@@ -56,6 +54,14 @@ bool PathMatched(const string &path, const string &sub_path) {\n \n #ifndef _WIN32\n \n+string FileSystem::GetEnvVariable(const string &name) {\n+\tconst char *env = getenv(name.c_str());\n+\tif (!env) {\n+\t\treturn string();\n+\t}\n+\treturn env;\n+}\n+\n bool FileSystem::IsPathAbsolute(const string &path) {\n \tauto path_separator = FileSystem::PathSeparator();\n \treturn PathMatched(path, path_separator);\n@@ -81,43 +87,66 @@ idx_t FileSystem::GetAvailableMemory() {\n }\n \n string FileSystem::GetWorkingDirectory() {\n-\tauto buffer = unique_ptr<char[]>(new char[PATH_MAX]);\n+\tauto buffer = make_unsafe_uniq_array<char>(PATH_MAX);\n \tchar *ret = getcwd(buffer.get(), PATH_MAX);\n \tif (!ret) {\n \t\tthrow IOException(\"Could not get working directory!\");\n \t}\n \treturn string(buffer.get());\n }\n+\n+string FileSystem::NormalizeAbsolutePath(const string &path) {\n+\tD_ASSERT(IsPathAbsolute(path));\n+\treturn path;\n+}\n+\n #else\n \n-bool FileSystem::IsPathAbsolute(const string &path) {\n-\t// 1) A single backslash\n-\tauto sub_path = FileSystem::PathSeparator();\n-\tif (PathMatched(path, sub_path)) {\n-\t\treturn true;\n+string FileSystem::GetEnvVariable(const string &env) {\n+\t// first convert the environment variable name to the correct encoding\n+\tauto env_w = WindowsUtil::UTF8ToUnicode(env.c_str());\n+\t// use _wgetenv to get the value\n+\tauto res_w = _wgetenv(env_w.c_str());\n+\tif (!res_w) {\n+\t\t// no environment variable of this name found\n+\t\treturn string();\n \t}\n-\t// 2) check if starts with a double-backslash (i.e., \\\\)\n-\tsub_path += FileSystem::PathSeparator();\n-\tif (PathMatched(path, sub_path)) {\n+\treturn WindowsUtil::UnicodeToUTF8(res_w);\n+}\n+\n+bool FileSystem::IsPathAbsolute(const string &path) {\n+\t// 1) A single backslash or forward-slash\n+\tif (PathMatched(path, \"\\\\\") || PathMatched(path, \"/\")) {\n \t\treturn true;\n \t}\n-\t// 3) A disk designator with a backslash (e.g., C:\\)\n+\t// 2) A disk designator with a backslash (e.g., C:\\ or C:/)\n \tauto path_aux = path;\n \tpath_aux.erase(0, 1);\n-\tsub_path = \":\" + FileSystem::PathSeparator();\n-\tif (PathMatched(path_aux, sub_path)) {\n+\tif (PathMatched(path_aux, \":\\\\\") || PathMatched(path_aux, \":/\")) {\n \t\treturn true;\n \t}\n \treturn false;\n }\n \n+string FileSystem::NormalizeAbsolutePath(const string &path) {\n+\tD_ASSERT(IsPathAbsolute(path));\n+\tauto result = StringUtil::Lower(FileSystem::ConvertSeparators(path));\n+\tif (PathMatched(result, \"\\\\\")) {\n+\t\t// Path starts with a single backslash or forward slash\n+\t\t// prepend drive letter\n+\t\treturn GetWorkingDirectory().substr(0, 2) + result;\n+\t}\n+\treturn result;\n+}\n+\n string FileSystem::PathSeparator() {\n \treturn \"\\\\\";\n }\n \n void FileSystem::SetWorkingDirectory(const string &path) {\n-\tif (!SetCurrentDirectory(path.c_str())) {\n-\t\tthrow IOException(\"Could not change working directory!\");\n+\tauto unicode_path = WindowsUtil::UTF8ToUnicode(path.c_str());\n+\tif (!SetCurrentDirectoryW(unicode_path.c_str())) {\n+\t\tthrow IOException(\"Could not change working directory to \\\"%s\\\"\", path);\n \t}\n }\n \n@@ -137,16 +166,16 @@ idx_t FileSystem::GetAvailableMemory() {\n }\n \n string FileSystem::GetWorkingDirectory() {\n-\tidx_t count = GetCurrentDirectory(0, nullptr);\n+\tidx_t count = GetCurrentDirectoryW(0, nullptr);\n \tif (count == 0) {\n \t\tthrow IOException(\"Could not get working directory!\");\n \t}\n-\tauto buffer = unique_ptr<char[]>(new char[count]);\n-\tidx_t ret = GetCurrentDirectory(count, buffer.get());\n+\tauto buffer = make_unsafe_uniq_array<wchar_t>(count);\n+\tidx_t ret = GetCurrentDirectoryW(count, buffer.get());\n \tif (count != ret + 1) {\n \t\tthrow IOException(\"Could not get working directory!\");\n \t}\n-\treturn string(buffer.get(), ret);\n+\treturn WindowsUtil::UnicodeToUTF8(buffer.get());\n }\n \n #endif\n@@ -164,13 +193,7 @@ string FileSystem::ConvertSeparators(const string &path) {\n \t\treturn path;\n \t}\n \t// on windows-based systems we accept both\n-\tstring result = path;\n-\tfor (idx_t i = 0; i < result.size(); i++) {\n-\t\tif (result[i] == '/') {\n-\t\t\tresult[i] = separator;\n-\t\t}\n-\t}\n-\treturn result;\n+\treturn StringUtil::Replace(path, \"/\", separator_str);\n }\n \n string FileSystem::ExtractName(const string &path) {\n@@ -193,7 +216,7 @@ string FileSystem::ExtractBaseName(const string &path) {\n \treturn vec[0];\n }\n \n-string FileSystem::GetHomeDirectory(FileOpener *opener) {\n+string FileSystem::GetHomeDirectory(optional_ptr<FileOpener> opener) {\n \t// read the home_directory setting first, if it is set\n \tif (opener) {\n \t\tValue result;\n@@ -205,17 +228,17 @@ string FileSystem::GetHomeDirectory(FileOpener *opener) {\n \t}\n \t// fallback to the default home directories for the specified system\n #ifdef DUCKDB_WINDOWS\n-\tconst char *homedir = getenv(\"USERPROFILE\");\n+\treturn FileSystem::GetEnvVariable(\"USERPROFILE\");\n #else\n-\tconst char *homedir = getenv(\"HOME\");\n+\treturn FileSystem::GetEnvVariable(\"HOME\");\n #endif\n-\tif (homedir) {\n-\t\treturn homedir;\n-\t}\n-\treturn string();\n }\n \n-string FileSystem::ExpandPath(const string &path, FileOpener *opener) {\n+string FileSystem::GetHomeDirectory() {\n+\treturn GetHomeDirectory(nullptr);\n+}\n+\n+string FileSystem::ExpandPath(const string &path, optional_ptr<FileOpener> opener) {\n \tif (path.empty()) {\n \t\treturn path;\n \t}\n@@ -225,6 +248,10 @@ string FileSystem::ExpandPath(const string &path, FileOpener *opener) {\n \treturn path;\n }\n \n+string FileSystem::ExpandPath(const string &path) {\n+\treturn FileSystem::ExpandPath(path, nullptr);\n+}\n+\n // LCOV_EXCL_START\n unique_ptr<FileHandle> FileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock,\n                                             FileCompressionType compression, FileOpener *opener) {\n@@ -247,14 +274,6 @@ int64_t FileSystem::Write(FileHandle &handle, void *buffer, int64_t nr_bytes) {\n \tthrow NotImplementedException(\"%s: Write is not implemented!\", GetName());\n }\n \n-string FileSystem::GetFileExtension(FileHandle &handle) {\n-\tauto dot_location = handle.path.rfind('.');\n-\tif (dot_location != std::string::npos) {\n-\t\treturn handle.path.substr(dot_location + 1, std::string::npos);\n-\t}\n-\treturn string();\n-}\n-\n int64_t FileSystem::GetFileSize(FileHandle &handle) {\n \tthrow NotImplementedException(\"%s: GetFileSize is not implemented!\", GetName());\n }\n@@ -308,12 +327,22 @@ void FileSystem::FileSync(FileHandle &handle) {\n \tthrow NotImplementedException(\"%s: FileSync is not implemented!\", GetName());\n }\n \n-vector<string> FileSystem::Glob(const string &path, FileOpener *opener) {\n-\tthrow NotImplementedException(\"%s: Glob is not implemented!\", GetName());\n+bool FileSystem::HasGlob(const string &str) {\n+\tfor (idx_t i = 0; i < str.size(); i++) {\n+\t\tswitch (str[i]) {\n+\t\tcase '*':\n+\t\tcase '?':\n+\t\tcase '[':\n+\t\t\treturn true;\n+\t\tdefault:\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\treturn false;\n }\n \n-vector<string> FileSystem::Glob(const string &path, ClientContext &context) {\n-\treturn Glob(path, GetFileOpener(context));\n+vector<string> FileSystem::Glob(const string &path, FileOpener *opener) {\n+\tthrow NotImplementedException(\"%s: Glob is not implemented!\", GetName());\n }\n \n void FileSystem::RegisterSubSystem(unique_ptr<FileSystem> sub_fs) {\n@@ -337,15 +366,11 @@ bool FileSystem::CanHandleFile(const string &fpath) {\n }\n \n vector<string> FileSystem::GlobFiles(const string &pattern, ClientContext &context, FileGlobOptions options) {\n-\tauto result = Glob(pattern, context);\n+\tauto result = Glob(pattern);\n \tif (result.empty()) {\n \t\tstring required_extension;\n-\t\tconst string prefixes[] = {\"http://\", \"https://\", \"s3://\"};\n-\t\tfor (auto &prefix : prefixes) {\n-\t\t\tif (StringUtil::StartsWith(pattern, prefix)) {\n-\t\t\t\trequired_extension = \"httpfs\";\n-\t\t\t\tbreak;\n-\t\t\t}\n+\t\tif (FileSystem::IsRemoteFile(pattern)) {\n+\t\t\trequired_extension = \"httpfs\";\n \t\t}\n \t\tif (!required_extension.empty() && !context.db->ExtensionIsLoaded(required_extension)) {\n \t\t\t// an extension is required to read this file but it is not loaded - try to load it\n@@ -462,4 +487,14 @@ FileType FileHandle::GetType() {\n \treturn file_system.GetFileType(*this);\n }\n \n+bool FileSystem::IsRemoteFile(const string &path) {\n+\tconst string prefixes[] = {\"http://\", \"https://\", \"s3://\"};\n+\tfor (auto &prefix : prefixes) {\n+\t\tif (StringUtil::StartsWith(path, prefix)) {\n+\t\t\treturn true;\n+\t\t}\n+\t}\n+\treturn false;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/common/local_file_system.cpp b/src/common/local_file_system.cpp\nindex bfa06fb90bdb..958d4c345dbd 100644\n--- a/src/common/local_file_system.cpp\n+++ b/src/common/local_file_system.cpp\n@@ -162,8 +162,9 @@ static FileType GetFileTypeInternal(int fd) { // LCOV_EXCL_START\n \t}\n } // LCOV_EXCL_STOP\n \n-unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock_type,\n+unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path_p, uint8_t flags, FileLockType lock_type,\n                                                  FileCompressionType compression, FileOpener *opener) {\n+\tauto path = FileSystem::ExpandPath(path_p, opener);\n \tif (compression != FileCompressionType::UNCOMPRESSED) {\n \t\tthrow NotImplementedException(\"Unsupported compression type for default file system\");\n \t}\n@@ -506,8 +507,9 @@ struct WindowsFileHandle : public FileHandle {\n \t};\n };\n \n-unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path, uint8_t flags, FileLockType lock_type,\n+unique_ptr<FileHandle> LocalFileSystem::OpenFile(const string &path_p, uint8_t flags, FileLockType lock_type,\n                                                  FileCompressionType compression, FileOpener *opener) {\n+\tauto path = FileSystem::ExpandPath(path_p, opener);\n \tif (compression != FileCompressionType::UNCOMPRESSED) {\n \t\tthrow NotImplementedException(\"Unsupported compression type for default file system\");\n \t}\n@@ -775,7 +777,7 @@ void LocalFileSystem::MoveFile(const string &source, const string &target) {\n \tauto source_unicode = WindowsUtil::UTF8ToUnicode(source.c_str());\n \tauto target_unicode = WindowsUtil::UTF8ToUnicode(target.c_str());\n \tif (!MoveFileW(source_unicode.c_str(), target_unicode.c_str())) {\n-\t\tthrow IOException(\"Could not move file\");\n+\t\tthrow IOException(\"Could not move file: %s\", GetLastErrorAsString());\n \t}\n }\n \n@@ -819,19 +821,6 @@ idx_t LocalFileSystem::SeekPosition(FileHandle &handle) {\n \treturn GetFilePointer(handle);\n }\n \n-static bool HasGlob(const string &str) {\n-\tfor (idx_t i = 0; i < str.size(); i++) {\n-\t\tswitch (str[i]) {\n-\t\tcase '*':\n-\t\tcase '?':\n-\t\tcase '[':\n-\t\t\treturn true;\n-\t\tdefault:\n-\t\t\tbreak;\n-\t\t}\n-\t}\n-\treturn false;\n-}\n static bool IsCrawl(const string &glob) {\n \t// glob must match exactly\n \treturn glob == \"**\";\ndiff --git a/src/common/row_operations/row_gather.cpp b/src/common/row_operations/row_gather.cpp\nindex 22e5513dd056..631c5ffa65ba 100644\n--- a/src/common/row_operations/row_gather.cpp\n+++ b/src/common/row_operations/row_gather.cpp\n@@ -95,8 +95,8 @@ static void GatherNestedVector(Vector &rows, const SelectionVector &row_sel, Vec\n \tauto ptrs = FlatVector::GetData<data_ptr_t>(rows);\n \n \t// Build the gather locations\n-\tauto data_locations = unique_ptr<data_ptr_t[]>(new data_ptr_t[count]);\n-\tauto mask_locations = unique_ptr<data_ptr_t[]>(new data_ptr_t[count]);\n+\tauto data_locations = make_unsafe_uniq_array<data_ptr_t>(count);\n+\tauto mask_locations = make_unsafe_uniq_array<data_ptr_t>(count);\n \tfor (idx_t i = 0; i < count; i++) {\n \t\tauto row_idx = row_sel.get_index(i);\n \t\tauto row = ptrs[row_idx];\ndiff --git a/src/common/serializer.cpp b/src/common/serializer.cpp\nindex 3a93d975d205..b90a0f369f61 100644\n--- a/src/common/serializer.cpp\n+++ b/src/common/serializer.cpp\n@@ -8,7 +8,7 @@ string Deserializer::Read() {\n \tif (size == 0) {\n \t\treturn string();\n \t}\n-\tauto buffer = unique_ptr<data_t[]>(new data_t[size]);\n+\tauto buffer = make_unsafe_uniq_array<data_t>(size);\n \tReadData(buffer.get(), size);\n \treturn string((char *)buffer.get(), size);\n }\ndiff --git a/src/common/serializer/binary_deserializer.cpp b/src/common/serializer/binary_deserializer.cpp\nindex 0e83a63a902b..72a7b9f0bce1 100644\n--- a/src/common/serializer/binary_deserializer.cpp\n+++ b/src/common/serializer/binary_deserializer.cpp\n@@ -123,7 +123,7 @@ string BinaryDeserializer::ReadString() {\n \tif (size == 0) {\n \t\treturn string();\n \t}\n-\tauto buffer = unique_ptr<data_t[]>(new data_t[size]);\n+\tauto buffer = make_unsafe_uniq_array<data_t>(size);\n \tReadData(buffer.get(), size);\n \treturn string((char *)buffer.get(), size);\n }\ndiff --git a/src/common/serializer/buffered_file_reader.cpp b/src/common/serializer/buffered_file_reader.cpp\nindex a3a2c60c2a4e..f4fd1fe00920 100644\n--- a/src/common/serializer/buffered_file_reader.cpp\n+++ b/src/common/serializer/buffered_file_reader.cpp\n@@ -9,7 +9,7 @@ namespace duckdb {\n \n BufferedFileReader::BufferedFileReader(FileSystem &fs, const char *path, optional_ptr<ClientContext> context,\n                                        FileLockType lock_type, optional_ptr<FileOpener> opener)\n-    : fs(fs), data(unique_ptr<data_t[]>(new data_t[FILE_BUFFER_SIZE])), offset(0), read_data(0), total_read(0),\n+    : fs(fs), data(make_unsafe_uniq_array<data_t>(FILE_BUFFER_SIZE)), offset(0), read_data(0), total_read(0),\n       context(context) {\n \thandle = fs.OpenFile(path, FileFlags::FILE_FLAGS_READ, lock_type, FileSystem::DEFAULT_COMPRESSION, opener.get());\n \tfile_size = fs.GetFileSize(*handle);\ndiff --git a/src/common/serializer/buffered_file_writer.cpp b/src/common/serializer/buffered_file_writer.cpp\nindex 9a07b11a213a..663f271ab4dd 100644\n--- a/src/common/serializer/buffered_file_writer.cpp\n+++ b/src/common/serializer/buffered_file_writer.cpp\n@@ -8,9 +8,9 @@ namespace duckdb {\n // Remove this when we switch C++17: https://stackoverflow.com/a/53350948\n constexpr uint8_t BufferedFileWriter::DEFAULT_OPEN_FLAGS;\n \n-BufferedFileWriter::BufferedFileWriter(FileSystem &fs, const string &path_p, uint8_t open_flags, FileOpener *opener)\n-    : fs(fs), path(path_p), data(unique_ptr<data_t[]>(new data_t[FILE_BUFFER_SIZE])), offset(0), total_written(0) {\n-\thandle = fs.OpenFile(path, open_flags, FileLockType::WRITE_LOCK, FileSystem::DEFAULT_COMPRESSION, opener);\n+BufferedFileWriter::BufferedFileWriter(FileSystem &fs, const string &path_p, uint8_t open_flags)\n+    : fs(fs), path(path_p), data(make_unsafe_uniq_array<data_t>(FILE_BUFFER_SIZE)), offset(0), total_written(0) {\n+\thandle = fs.OpenFile(path, open_flags, FileLockType::WRITE_LOCK);\n }\n \n int64_t BufferedFileWriter::GetFileSize() {\ndiff --git a/src/common/serializer/buffered_serializer.cpp b/src/common/serializer/buffered_serializer.cpp\nindex 74ab45504c3e..af2ec931b11f 100644\n--- a/src/common/serializer/buffered_serializer.cpp\n+++ b/src/common/serializer/buffered_serializer.cpp\n@@ -5,10 +5,11 @@\n namespace duckdb {\n \n BufferedSerializer::BufferedSerializer(idx_t maximum_size)\n-    : BufferedSerializer(unique_ptr<data_t[]>(new data_t[maximum_size]), maximum_size) {\n+    : BufferedSerializer(make_unsafe_uniq_array<data_t>(maximum_size), maximum_size) {\n }\n \n-BufferedSerializer::BufferedSerializer(unique_ptr<data_t[]> data, idx_t size) : maximum_size(size), data(data.get()) {\n+BufferedSerializer::BufferedSerializer(unsafe_unique_array<data_t> data, idx_t size)\n+    : maximum_size(size), data(data.get()) {\n \tblob.size = 0;\n \tblob.data = std::move(data);\n }\n@@ -25,7 +26,7 @@ void BufferedSerializer::WriteData(const_data_ptr_t buffer, idx_t write_size) {\n \t\tauto new_data = new data_t[maximum_size];\n \t\tmemcpy(new_data, data, blob.size);\n \t\tdata = new_data;\n-\t\tblob.data = unique_ptr<data_t[]>(new_data);\n+\t\tblob.data = unsafe_unique_array<data_t>(new_data);\n \t}\n \n \tmemcpy(data + blob.size, buffer, write_size);\ndiff --git a/src/common/sort/radix_sort.cpp b/src/common/sort/radix_sort.cpp\nindex a9938daae385..179d5f9d286d 100644\n--- a/src/common/sort/radix_sort.cpp\n+++ b/src/common/sort/radix_sort.cpp\n@@ -17,7 +17,7 @@ static void SortTiedBlobs(BufferManager &buffer_manager, const data_ptr_t datapt\n \t\treturn;\n \t}\n \t// Fill pointer array for sorting\n-\tauto ptr_block = unique_ptr<data_ptr_t[]>(new data_ptr_t[end - start]);\n+\tauto ptr_block = make_unsafe_uniq_array<data_ptr_t>(end - start);\n \tauto entry_ptrs = (data_ptr_t *)ptr_block.get();\n \tfor (idx_t i = start; i < end; i++) {\n \t\tentry_ptrs[i - start] = row_ptr;\n@@ -158,7 +158,7 @@ inline void InsertionSort(const data_ptr_t orig_ptr, const data_ptr_t temp_ptr,\n \tconst data_ptr_t target_ptr = swap ? orig_ptr : temp_ptr;\n \tif (count > 1) {\n \t\tconst idx_t total_offset = col_offset + offset;\n-\t\tauto temp_val = unique_ptr<data_t[]>(new data_t[row_width]);\n+\t\tauto temp_val = make_unsafe_uniq_array<data_t>(row_width);\n \t\tconst data_ptr_t val = temp_val.get();\n \t\tconst auto comp_width = total_comp_width - offset;\n \t\tfor (idx_t i = 1; i < count; i++) {\n@@ -249,7 +249,7 @@ void RadixSort(BufferManager &buffer_manager, const data_ptr_t &dataptr, const i\n \t\tRadixSortLSD(buffer_manager, dataptr, count, col_offset, sort_layout.entry_size, sorting_size);\n \t} else {\n \t\tauto temp_block = buffer_manager.Allocate(MaxValue(count * sort_layout.entry_size, (idx_t)Storage::BLOCK_SIZE));\n-\t\tauto preallocated_array = unique_ptr<idx_t[]>(new idx_t[sorting_size * SortConstants::MSD_RADIX_LOCATIONS]);\n+\t\tauto preallocated_array = make_unsafe_uniq_array<idx_t>(sorting_size * SortConstants::MSD_RADIX_LOCATIONS);\n \t\tRadixSortMSD(dataptr, temp_block.Ptr(), count, col_offset, sort_layout.entry_size, sorting_size, 0,\n \t\t             preallocated_array.get(), false);\n \t}\n@@ -291,7 +291,7 @@ void LocalSortState::SortInMemory() {\n \t// Radix sort and break ties until no more ties, or until all columns are sorted\n \tidx_t sorting_size = 0;\n \tidx_t col_offset = 0;\n-\tunique_ptr<bool[]> ties_ptr;\n+\tunsafe_unique_array<bool> ties_ptr;\n \tbool *ties = nullptr;\n \tbool contains_string = false;\n \tfor (idx_t i = 0; i < sort_layout->column_count; i++) {\n@@ -305,7 +305,7 @@ void LocalSortState::SortInMemory() {\n \t\tif (!ties) {\n \t\t\t// This is the first sort\n \t\t\tRadixSort(*buffer_manager, dataptr, count, col_offset, sorting_size, *sort_layout, contains_string);\n-\t\t\tties_ptr = unique_ptr<bool[]>(new bool[count]);\n+\t\t\tties_ptr = make_unsafe_uniq_array<bool>(count);\n \t\t\tties = ties_ptr.get();\n \t\t\tstd::fill_n(ties, count - 1, true);\n \t\t\tties[count - 1] = false;\ndiff --git a/src/common/string_util.cpp b/src/common/string_util.cpp\nindex 62efd0d3089e..d7f363776cbf 100644\n--- a/src/common/string_util.cpp\n+++ b/src/common/string_util.cpp\n@@ -277,7 +277,7 @@ vector<string> StringUtil::TopNStrings(vector<pair<string, idx_t>> scores, idx_t\n \n struct LevenshteinArray {\n \tLevenshteinArray(idx_t len1, idx_t len2) : len1(len1) {\n-\t\tdist = unique_ptr<idx_t[]>(new idx_t[len1 * len2]);\n+\t\tdist = make_unsafe_uniq_array<idx_t>(len1 * len2);\n \t}\n \n \tidx_t &Score(idx_t i, idx_t j) {\n@@ -286,7 +286,7 @@ struct LevenshteinArray {\n \n private:\n \tidx_t len1;\n-\tunique_ptr<idx_t[]> dist;\n+\tunsafe_unique_array<idx_t> dist;\n \n \tidx_t GetIndex(idx_t i, idx_t j) {\n \t\treturn j * len1 + i;\ndiff --git a/src/common/types.cpp b/src/common/types.cpp\nindex 221ccea966ab..3030cb3be23b 100644\n--- a/src/common/types.cpp\n+++ b/src/common/types.cpp\n@@ -349,7 +349,7 @@ string LogicalType::ToString() const {\n \t\tauto &child_types = StructType::GetChildTypes(*this);\n \t\tstring ret = \"STRUCT(\";\n \t\tfor (size_t i = 0; i < child_types.size(); i++) {\n-\t\t\tret += KeywordHelper::WriteOptionallyQuoted(child_types[i].first) + \" \" + child_types[i].second.ToString();\n+\t\t\tret += StringUtil::Format(\"%s %s\", SQLIdentifier(child_types[i].first), child_types[i].second);\n \t\t\tif (i < child_types.size() - 1) {\n \t\t\t\tret += \", \";\n \t\t\t}\ndiff --git a/src/common/types/bit.cpp b/src/common/types/bit.cpp\nindex 8445e72cc39e..f8ffeb46bea6 100644\n--- a/src/common/types/bit.cpp\n+++ b/src/common/types/bit.cpp\n@@ -78,7 +78,7 @@ void Bit::ToString(string_t bits, char *output) {\n \n string Bit::ToString(string_t str) {\n \tauto len = BitLength(str);\n-\tauto buffer = unique_ptr<char[]>(new char[len]);\n+\tauto buffer = make_unsafe_uniq_array<char>(len);\n \tToString(str, buffer.get());\n \treturn string(buffer.get(), len);\n }\n@@ -140,7 +140,7 @@ void Bit::ToBit(string_t str, string_t &output_str) {\n \n string Bit::ToBit(string_t str) {\n \tauto bit_len = GetBitSize(str);\n-\tauto buffer = unique_ptr<char[]>(new char[bit_len]);\n+\tauto buffer = make_unsafe_uniq_array<char>(bit_len);\n \tstring_t output_str(buffer.get(), bit_len);\n \tBit::ToBit(str, output_str);\n \treturn output_str.GetString();\ndiff --git a/src/common/types/blob.cpp b/src/common/types/blob.cpp\nindex 2e215d7c5e85..bb96ab4fa2dc 100644\n--- a/src/common/types/blob.cpp\n+++ b/src/common/types/blob.cpp\n@@ -64,7 +64,7 @@ void Blob::ToString(string_t blob, char *output) {\n \n string Blob::ToString(string_t blob) {\n \tauto str_len = GetStringSize(blob);\n-\tauto buffer = unique_ptr<char[]>(new char[str_len]);\n+\tauto buffer = make_unsafe_uniq_array<char>(str_len);\n \tBlob::ToString(blob, buffer.get());\n \treturn string(buffer.get(), str_len);\n }\n@@ -136,7 +136,7 @@ void Blob::ToBlob(string_t str, data_ptr_t output) {\n \n string Blob::ToBlob(string_t str) {\n \tauto blob_len = GetBlobSize(str);\n-\tauto buffer = unique_ptr<char[]>(new char[blob_len]);\n+\tauto buffer = make_unsafe_uniq_array<char>(blob_len);\n \tBlob::ToBlob(str, (data_ptr_t)buffer.get());\n \treturn string(buffer.get(), blob_len);\n }\ndiff --git a/src/common/types/data_chunk.cpp b/src/common/types/data_chunk.cpp\nindex 7099419b80c8..c8f734ebb7b5 100644\n--- a/src/common/types/data_chunk.cpp\n+++ b/src/common/types/data_chunk.cpp\n@@ -291,8 +291,8 @@ void DataChunk::Slice(DataChunk &other, const SelectionVector &sel, idx_t count_\n \t}\n }\n \n-unique_ptr<UnifiedVectorFormat[]> DataChunk::ToUnifiedFormat() {\n-\tauto orrified_data = unique_ptr<UnifiedVectorFormat[]>(new UnifiedVectorFormat[ColumnCount()]);\n+unsafe_unique_array<UnifiedVectorFormat> DataChunk::ToUnifiedFormat() {\n+\tauto orrified_data = make_unsafe_uniq_array<UnifiedVectorFormat>(ColumnCount());\n \tfor (idx_t col_idx = 0; col_idx < ColumnCount(); col_idx++) {\n \t\tdata[col_idx].ToUnifiedFormat(size(), orrified_data[col_idx]);\n \t}\ndiff --git a/src/common/types/date.cpp b/src/common/types/date.cpp\nindex 4dd5787d200f..6fdd21d0a799 100644\n--- a/src/common/types/date.cpp\n+++ b/src/common/types/date.cpp\n@@ -362,7 +362,7 @@ string Date::ToString(date_t date) {\n \tDate::Convert(date, date_units[0], date_units[1], date_units[2]);\n \n \tauto length = DateToStringCast::Length(date_units, year_length, add_bc);\n-\tauto buffer = unique_ptr<char[]>(new char[length]);\n+\tauto buffer = make_unsafe_uniq_array<char>(length);\n \tDateToStringCast::Format(buffer.get(), date_units, year_length, add_bc);\n \treturn string(buffer.get(), length);\n }\ndiff --git a/src/common/types/decimal.cpp b/src/common/types/decimal.cpp\nindex 59fb61b2e8dc..323cec4e381d 100644\n--- a/src/common/types/decimal.cpp\n+++ b/src/common/types/decimal.cpp\n@@ -6,7 +6,7 @@ namespace duckdb {\n template <class SIGNED, class UNSIGNED>\n string TemplatedDecimalToString(SIGNED value, uint8_t width, uint8_t scale) {\n \tauto len = DecimalToString::DecimalLength<SIGNED, UNSIGNED>(value, width, scale);\n-\tauto data = unique_ptr<char[]>(new char[len + 1]);\n+\tauto data = make_unsafe_uniq_array<char>(len + 1);\n \tDecimalToString::FormatDecimal<SIGNED, UNSIGNED>(value, width, scale, data.get(), len);\n \treturn string(data.get(), len);\n }\n@@ -25,7 +25,7 @@ string Decimal::ToString(int64_t value, uint8_t width, uint8_t scale) {\n \n string Decimal::ToString(hugeint_t value, uint8_t width, uint8_t scale) {\n \tauto len = HugeintToStringCast::DecimalLength(value, width, scale);\n-\tauto data = unique_ptr<char[]>(new char[len + 1]);\n+\tauto data = make_unsafe_uniq_array<char>(len + 1);\n \tHugeintToStringCast::FormatDecimal(value, width, scale, data.get(), len);\n \treturn string(data.get(), len);\n }\ndiff --git a/src/common/types/row/tuple_data_scatter_gather.cpp b/src/common/types/row/tuple_data_scatter_gather.cpp\nindex f4ec62e6c89b..a3ff8163be5f 100644\n--- a/src/common/types/row/tuple_data_scatter_gather.cpp\n+++ b/src/common/types/row/tuple_data_scatter_gather.cpp\n@@ -1,7 +1,7 @@\n+#include \"duckdb/common/enum_util.hpp\"\n #include \"duckdb/common/fast_mem.hpp\"\n #include \"duckdb/common/types/null_value.hpp\"\n #include \"duckdb/common/types/row/tuple_data_collection.hpp\"\n-#include \"duckdb/common/enum_util.hpp\"\n \n namespace duckdb {\n \n@@ -314,6 +314,19 @@ void TupleDataCollection::ListWithinListComputeHeapSizes(Vector &heap_sizes_v, c\n \tconst auto child_list_entries = (list_entry_t *)child_list_data.data;\n \tconst auto &child_list_validity = child_list_data.validity;\n \n+\t// Figure out actual child list size (differs from ListVector::GetListSize if dict/const vector)\n+\tidx_t child_list_child_count = ListVector::GetListSize(source_v);\n+\tfor (idx_t i = 0; i < append_count; i++) {\n+\t\tconst auto list_idx = list_sel.get_index(append_sel.get_index(i));\n+\t\tif (!list_validity.RowIsValid(list_idx)) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\tconst auto &list_entry = list_entries[list_idx];\n+\t\tconst auto &list_offset = list_entry.offset;\n+\t\tconst auto &list_length = list_entry.length;\n+\t\tchild_list_child_count = MaxValue<idx_t>(child_list_child_count, list_offset + list_length);\n+\t}\n+\n \t// Target\n \tauto heap_sizes = FlatVector::GetData<idx_t>(heap_sizes_v);\n \n@@ -322,7 +335,6 @@ void TupleDataCollection::ListWithinListComputeHeapSizes(Vector &heap_sizes_v, c\n \tchild_format.combined_list_data = make_uniq<CombinedListData>();\n \tauto &combined_list_data = *child_format.combined_list_data;\n \tauto &combined_list_entries = combined_list_data.combined_list_entries;\n-\tconst auto child_list_child_count = ListVector::GetListSize(source_v);\n \tSelectionVector combined_sel(child_list_child_count);\n \tfor (idx_t i = 0; i < child_list_child_count; i++) {\n \t\tcombined_sel.set_index(i, 0);\ndiff --git a/src/common/types/selection_vector.cpp b/src/common/types/selection_vector.cpp\nindex 9a515f2045b5..463cc76dbd88 100644\n--- a/src/common/types/selection_vector.cpp\n+++ b/src/common/types/selection_vector.cpp\n@@ -5,7 +5,7 @@\n namespace duckdb {\n \n SelectionData::SelectionData(idx_t count) {\n-\towned_data = unique_ptr<sel_t[]>(new sel_t[count]);\n+\towned_data = make_unsafe_uniq_array<sel_t>(count);\n #ifdef DEBUG\n \tfor (idx_t i = 0; i < count; i++) {\n \t\towned_data[i] = std::numeric_limits<sel_t>::max();\ndiff --git a/src/common/types/time.cpp b/src/common/types/time.cpp\nindex 8dd5fd0b90a0..d214ece42c01 100644\n--- a/src/common/types/time.cpp\n+++ b/src/common/types/time.cpp\n@@ -158,7 +158,7 @@ string Time::ToString(dtime_t time) {\n \n \tchar micro_buffer[6];\n \tauto length = TimeToStringCast::Length(time_units, micro_buffer);\n-\tauto buffer = unique_ptr<char[]>(new char[length]);\n+\tauto buffer = make_unsafe_uniq_array<char>(length);\n \tTimeToStringCast::Format(buffer.get(), length, time_units, micro_buffer);\n \treturn string(buffer.get(), length);\n }\ndiff --git a/src/common/types/vector.cpp b/src/common/types/vector.cpp\nindex 84267e9acc52..03345c03cfe4 100644\n--- a/src/common/types/vector.cpp\n+++ b/src/common/types/vector.cpp\n@@ -297,7 +297,7 @@ void Vector::Resize(idx_t cur_size, idx_t new_size) {\n \t}\n \tfor (auto &data_to_resize : to_resize) {\n \t\tif (!data_to_resize.is_nested) {\n-\t\t\tauto new_data = unique_ptr<data_t[]>(new data_t[new_size * data_to_resize.type_size]);\n+\t\t\tauto new_data = make_unsafe_uniq_array<data_t>(new_size * data_to_resize.type_size);\n \t\t\tmemcpy(new_data.get(), data_to_resize.data, cur_size * data_to_resize.type_size * sizeof(data_t));\n \t\t\tdata_to_resize.buffer->SetData(std::move(new_data));\n \t\t\tdata_to_resize.vec.data = data_to_resize.buffer->GetData();\n@@ -920,7 +920,7 @@ void Vector::Serialize(idx_t count, Serializer &serializer) {\n \tif (TypeIsConstantSize(type.InternalType())) {\n \t\t// constant size type: simple copy\n \t\tidx_t write_size = GetTypeIdSize(type.InternalType()) * count;\n-\t\tauto ptr = unique_ptr<data_t[]>(new data_t[write_size]);\n+\t\tauto ptr = make_unsafe_uniq_array<data_t>(write_size);\n \t\tVectorOperations::WriteToStorage(*this, count, ptr.get());\n \t\tserializer.WriteData(ptr.get(), write_size);\n \t} else {\n@@ -947,7 +947,7 @@ void Vector::Serialize(idx_t count, Serializer &serializer) {\n \t\t\tauto list_size = ListVector::GetListSize(*this);\n \n \t\t\t// serialize the list entries in a flat array\n-\t\t\tauto data = unique_ptr<list_entry_t[]>(new list_entry_t[count]);\n+\t\t\tauto data = make_unsafe_uniq_array<list_entry_t>(count);\n \t\t\tauto source_array = (list_entry_t *)vdata.data;\n \t\t\tfor (idx_t i = 0; i < count; i++) {\n \t\t\t\tauto idx = vdata.sel->get_index(i);\n@@ -988,7 +988,7 @@ void Vector::FormatSerialize(FormatSerializer &serializer, idx_t count) {\n \tif (TypeIsConstantSize(logical_type.InternalType())) {\n \t\t// constant size type: simple copy\n \t\tidx_t write_size = GetTypeIdSize(logical_type.InternalType()) * count;\n-\t\tauto ptr = unique_ptr<data_t[]>(new data_t[write_size]);\n+\t\tauto ptr = make_unsafe_uniq_array<data_t>(write_size);\n \t\tVectorOperations::WriteToStorage(*this, count, ptr.get());\n \t\tserializer.WriteProperty(\"data\", ptr.get(), write_size);\n \t} else {\n@@ -1027,7 +1027,7 @@ void Vector::FormatSerialize(FormatSerializer &serializer, idx_t count) {\n \t\t\tauto list_size = ListVector::GetListSize(*this);\n \n \t\t\t// serialize the list entries in a flat array\n-\t\t\tauto entries = unique_ptr<list_entry_t[]>(new list_entry_t[count]);\n+\t\t\tauto entries = make_unsafe_uniq_array<list_entry_t>(count);\n \t\t\tauto source_array = (list_entry_t *)vdata.data;\n \t\t\tfor (idx_t i = 0; i < count; i++) {\n \t\t\t\tauto idx = vdata.sel->get_index(i);\n@@ -1071,7 +1071,7 @@ void Vector::FormatDeserialize(FormatDeserializer &deserializer, idx_t count) {\n \tif (TypeIsConstantSize(logical_type.InternalType())) {\n \t\t// constant size type: read fixed amount of data\n \t\tauto column_size = GetTypeIdSize(logical_type.InternalType()) * count;\n-\t\tauto ptr = unique_ptr<data_t[]>(new data_t[column_size]);\n+\t\tauto ptr = make_unsafe_uniq_array<data_t>(column_size);\n \t\tdeserializer.ReadProperty(\"data\", ptr.get(), column_size);\n \n \t\tVectorOperations::ReadFromStorage(ptr.get(), count, *this);\n@@ -1158,7 +1158,7 @@ void Vector::Deserialize(idx_t count, Deserializer &source) {\n \tif (TypeIsConstantSize(type.InternalType())) {\n \t\t// constant size type: read fixed amount of data from\n \t\tauto column_size = GetTypeIdSize(type.InternalType()) * count;\n-\t\tauto ptr = unique_ptr<data_t[]>(new data_t[column_size]);\n+\t\tauto ptr = make_unsafe_uniq_array<data_t>(column_size);\n \t\tsource.ReadData(ptr.get(), column_size);\n \n \t\tVectorOperations::ReadFromStorage(ptr.get(), count, *this);\n@@ -1868,7 +1868,7 @@ idx_t ListVector::GetListSize(const Vector &vec) {\n \t\treturn ListVector::GetListSize(child);\n \t}\n \tD_ASSERT(vec.auxiliary);\n-\treturn ((VectorListBuffer &)*vec.auxiliary).size;\n+\treturn ((VectorListBuffer &)*vec.auxiliary).GetSize();\n }\n \n idx_t ListVector::GetListCapacity(const Vector &vec) {\n@@ -1877,7 +1877,7 @@ idx_t ListVector::GetListCapacity(const Vector &vec) {\n \t\treturn ListVector::GetListSize(child);\n \t}\n \tD_ASSERT(vec.auxiliary);\n-\treturn ((VectorListBuffer &)*vec.auxiliary).capacity;\n+\treturn ((VectorListBuffer &)*vec.auxiliary).GetCapacity();\n }\n \n void ListVector::ReferenceEntry(Vector &vector, Vector &other) {\n@@ -1894,7 +1894,7 @@ void ListVector::SetListSize(Vector &vec, idx_t size) {\n \t\tauto &child = DictionaryVector::Child(vec);\n \t\tListVector::SetListSize(child, size);\n \t}\n-\t((VectorListBuffer &)*vec.auxiliary).size = size;\n+\t((VectorListBuffer &)*vec.auxiliary).SetSize(size);\n }\n \n void ListVector::Append(Vector &target, const Vector &source, idx_t source_size, idx_t source_offset) {\ndiff --git a/src/common/types/vector_buffer.cpp b/src/common/types/vector_buffer.cpp\nindex 7a85046a2646..fcd7066f9d94 100644\n--- a/src/common/types/vector_buffer.cpp\n+++ b/src/common/types/vector_buffer.cpp\n@@ -58,12 +58,12 @@ VectorStructBuffer::~VectorStructBuffer() {\n }\n \n VectorListBuffer::VectorListBuffer(unique_ptr<Vector> vector, idx_t initial_capacity)\n-    : VectorBuffer(VectorBufferType::LIST_BUFFER), capacity(initial_capacity), child(std::move(vector)) {\n+    : VectorBuffer(VectorBufferType::LIST_BUFFER), child(std::move(vector)), capacity(initial_capacity) {\n }\n \n VectorListBuffer::VectorListBuffer(const LogicalType &list_type, idx_t initial_capacity)\n-    : VectorBuffer(VectorBufferType::LIST_BUFFER), capacity(initial_capacity),\n-      child(make_uniq<Vector>(ListType::GetChildType(list_type), initial_capacity)) {\n+    : VectorBuffer(VectorBufferType::LIST_BUFFER),\n+      child(make_uniq<Vector>(ListType::GetChildType(list_type), initial_capacity)), capacity(initial_capacity) {\n }\n \n void VectorListBuffer::Reserve(idx_t to_reserve) {\n@@ -96,6 +96,14 @@ void VectorListBuffer::PushBack(const Value &insert) {\n \tchild->SetValue(size++, insert);\n }\n \n+void VectorListBuffer::SetCapacity(idx_t new_capacity) {\n+\tthis->capacity = new_capacity;\n+}\n+\n+void VectorListBuffer::SetSize(idx_t new_size) {\n+\tthis->size = new_size;\n+}\n+\n VectorListBuffer::~VectorListBuffer() {\n }\n \ndiff --git a/src/common/types/vector_cache.cpp b/src/common/types/vector_cache.cpp\nindex 8ed7c18ddc31..61f66b7a2d8b 100644\n--- a/src/common/types/vector_cache.cpp\n+++ b/src/common/types/vector_cache.cpp\n@@ -16,7 +16,7 @@ class VectorCacheBuffer : public VectorBuffer {\n \t\t\towned_data = allocator.Allocate(capacity * GetTypeIdSize(internal_type));\n \t\t\t// child data of the list\n \t\t\tauto &child_type = ListType::GetChildType(type);\n-\t\t\tchild_caches.push_back(make_buffer<VectorCacheBuffer>(allocator, child_type));\n+\t\t\tchild_caches.push_back(make_buffer<VectorCacheBuffer>(allocator, child_type, capacity));\n \t\t\tauto child_vector = make_uniq<Vector>(child_type, false, false);\n \t\t\tauxiliary = make_shared<VectorListBuffer>(std::move(child_vector));\n \t\t\tbreak;\n@@ -24,7 +24,7 @@ class VectorCacheBuffer : public VectorBuffer {\n \t\tcase PhysicalType::STRUCT: {\n \t\t\tauto &child_types = StructType::GetChildTypes(type);\n \t\t\tfor (auto &child_type : child_types) {\n-\t\t\t\tchild_caches.push_back(make_buffer<VectorCacheBuffer>(allocator, child_type.second));\n+\t\t\t\tchild_caches.push_back(make_buffer<VectorCacheBuffer>(allocator, child_type.second, capacity));\n \t\t\t}\n \t\t\tauto struct_buffer = make_shared<VectorStructBuffer>(type);\n \t\t\tauxiliary = std::move(struct_buffer);\n@@ -48,13 +48,13 @@ class VectorCacheBuffer : public VectorBuffer {\n \t\t\t// reinitialize the VectorListBuffer\n \t\t\tAssignSharedPointer(result.auxiliary, auxiliary);\n \t\t\t// propagate through child\n+\t\t\tauto &child_cache = (VectorCacheBuffer &)*child_caches[0];\n \t\t\tauto &list_buffer = (VectorListBuffer &)*result.auxiliary;\n-\t\t\tlist_buffer.capacity = capacity;\n-\t\t\tlist_buffer.size = 0;\n+\t\t\tlist_buffer.SetCapacity(child_cache.capacity);\n+\t\t\tlist_buffer.SetSize(0);\n \t\t\tlist_buffer.SetAuxiliaryData(nullptr);\n \n \t\t\tauto &list_child = list_buffer.GetChild();\n-\t\t\tauto &child_cache = (VectorCacheBuffer &)*child_caches[0];\n \t\t\tchild_cache.ResetFromCache(list_child, child_caches[0]);\n \t\t\tbreak;\n \t\t}\ndiff --git a/src/common/virtual_file_system.cpp b/src/common/virtual_file_system.cpp\nindex c69abd149ddf..aa7bd837efc7 100644\n--- a/src/common/virtual_file_system.cpp\n+++ b/src/common/virtual_file_system.cpp\n@@ -15,6 +15,10 @@ unique_ptr<FileHandle> VirtualFileSystem::OpenFile(const string &path, uint8_t f\n \tif (compression == FileCompressionType::AUTO_DETECT) {\n \t\t// auto detect compression settings based on file name\n \t\tauto lower_path = StringUtil::Lower(path);\n+\t\tif (StringUtil::EndsWith(lower_path, \".tmp\")) {\n+\t\t\t// strip .tmp\n+\t\t\tlower_path = lower_path.substr(0, lower_path.length() - 4);\n+\t\t}\n \t\tif (StringUtil::EndsWith(lower_path, \".gz\")) {\n \t\t\tcompression = FileCompressionType::GZIP;\n \t\t} else if (StringUtil::EndsWith(lower_path, \".zst\")) {\ndiff --git a/src/common/windows_util.cpp b/src/common/windows_util.cpp\nindex 8855456f4482..8be7a3a044c8 100644\n--- a/src/common/windows_util.cpp\n+++ b/src/common/windows_util.cpp\n@@ -11,7 +11,7 @@ std::wstring WindowsUtil::UTF8ToUnicode(const char *input) {\n \tif (result_size == 0) {\n \t\tthrow IOException(\"Failure in MultiByteToWideChar\");\n \t}\n-\tauto buffer = unique_ptr<wchar_t[]>(new wchar_t[result_size]);\n+\tauto buffer = make_unsafe_uniq_array<wchar_t>(result_size);\n \tresult_size = MultiByteToWideChar(CP_UTF8, 0, input, -1, buffer.get(), result_size);\n \tif (result_size == 0) {\n \t\tthrow IOException(\"Failure in MultiByteToWideChar\");\n@@ -26,7 +26,7 @@ static string WideCharToMultiByteWrapper(LPCWSTR input, uint32_t code_page) {\n \tif (result_size == 0) {\n \t\tthrow IOException(\"Failure in WideCharToMultiByte\");\n \t}\n-\tauto buffer = unique_ptr<char[]>(new char[result_size]);\n+\tauto buffer = make_unsafe_uniq_array<char>(result_size);\n \tresult_size = WideCharToMultiByte(code_page, 0, input, -1, buffer.get(), result_size, 0, 0);\n \tif (result_size == 0) {\n \t\tthrow IOException(\"Failure in WideCharToMultiByte\");\ndiff --git a/src/core_functions/aggregate/distributive/string_agg.cpp b/src/core_functions/aggregate/distributive/string_agg.cpp\nindex f776796ff10d..64a0194e5f80 100644\n--- a/src/core_functions/aggregate/distributive/string_agg.cpp\n+++ b/src/core_functions/aggregate/distributive/string_agg.cpp\n@@ -131,18 +131,21 @@ unique_ptr<FunctionData> StringAggBind(ClientContext &context, AggregateFunction\n \t\tthrow BinderException(\"Separator argument to StringAgg must be a constant\");\n \t}\n \tauto separator_val = ExpressionExecutor::EvaluateScalar(context, *arguments[1]);\n+\tstring separator_string = \",\";\n \tif (separator_val.IsNull()) {\n \t\targuments[0] = make_uniq<BoundConstantExpression>(Value(LogicalType::VARCHAR));\n+\t} else {\n+\t\tseparator_string = separator_val.ToString();\n \t}\n \tFunction::EraseArgument(function, arguments, arguments.size() - 1);\n-\treturn make_uniq<StringAggBindData>(separator_val.ToString());\n+\treturn make_uniq<StringAggBindData>(std::move(separator_string));\n }\n \n static void StringAggSerialize(FieldWriter &writer, const FunctionData *bind_data_p,\n                                const AggregateFunction &function) {\n \tD_ASSERT(bind_data_p);\n-\tauto bind_data = (StringAggBindData *)bind_data_p;\n-\twriter.WriteString(bind_data->sep);\n+\tauto bind_data = bind_data_p->Cast<StringAggBindData>();\n+\twriter.WriteString(bind_data.sep);\n }\n \n unique_ptr<FunctionData> StringAggDeserialize(ClientContext &context, FieldReader &reader,\ndiff --git a/src/core_functions/scalar/list/list_aggregates.cpp b/src/core_functions/scalar/list/list_aggregates.cpp\nindex 5d8d723fcdc3..415db273de16 100644\n--- a/src/core_functions/scalar/list/list_aggregates.cpp\n+++ b/src/core_functions/scalar/list/list_aggregates.cpp\n@@ -179,7 +179,7 @@ static void ListAggregatesFunction(DataChunk &args, ExpressionState &state, Vect\n \n \t// state_buffer holds the state for each list of this chunk\n \tidx_t size = aggr.function.state_size();\n-\tauto state_buffer = unique_ptr<data_t[]>(new data_t[size * count]);\n+\tauto state_buffer = make_unsafe_uniq_array<data_t>(size * count);\n \n \t// state vector for initialize and finalize\n \tStateVector state_vector(count, info.aggr_expr->Copy());\n@@ -344,19 +344,16 @@ static void ListAggregatesFunction(DataChunk &args, ExpressionState &state, Vect\n }\n \n static void ListAggregateFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\n-\tD_ASSERT(args.ColumnCount() == 2);\n+\tD_ASSERT(args.ColumnCount() >= 2);\n \tListAggregatesFunction<AggregateFunctor, true>(args, state, result);\n }\n \n static void ListDistinctFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\n \tD_ASSERT(args.ColumnCount() == 1);\n \tListAggregatesFunction<DistinctFunctor>(args, state, result);\n }\n \n static void ListUniqueFunction(DataChunk &args, ExpressionState &state, Vector &result) {\n-\n \tD_ASSERT(args.ColumnCount() == 1);\n \tListAggregatesFunction<UniqueFunctor>(args, state, result);\n }\ndiff --git a/src/core_functions/scalar/list/list_lambdas.cpp b/src/core_functions/scalar/list/list_lambdas.cpp\nindex 237cf91da661..169c7f4e62ab 100644\n--- a/src/core_functions/scalar/list/list_lambdas.cpp\n+++ b/src/core_functions/scalar/list/list_lambdas.cpp\n@@ -60,11 +60,15 @@ static void AppendFilteredToResult(Vector &lambda_vector, list_entry_t *result_e\n \n \tidx_t true_count = 0;\n \tSelectionVector true_sel(elem_cnt);\n-\tauto lambda_values = FlatVector::GetData<bool>(lambda_vector);\n-\tauto &lambda_validity = FlatVector::Validity(lambda_vector);\n+\tUnifiedVectorFormat lambda_data;\n+\tlambda_vector.ToUnifiedFormat(elem_cnt, lambda_data);\n+\n+\tauto lambda_values = (bool *)lambda_data.data;\n+\tauto &lambda_validity = lambda_data.validity;\n \n \t// compute the new lengths and offsets, and create a selection vector\n \tfor (idx_t i = 0; i < elem_cnt; i++) {\n+\t\tauto entry = lambda_data.sel->get_index(i);\n \n \t\twhile (appended_lists_cnt < lists_len.size() && lists_len[appended_lists_cnt] == 0) {\n \t\t\tresult_entries[appended_lists_cnt].offset = curr_list_offset;\n@@ -73,12 +77,11 @@ static void AppendFilteredToResult(Vector &lambda_vector, list_entry_t *result_e\n \t\t}\n \n \t\t// found a true value\n-\t\tif (lambda_validity.RowIsValid(i)) {\n-\t\t\tif (lambda_values[i] > 0) {\n-\t\t\t\ttrue_sel.set_index(true_count++, i);\n-\t\t\t\tcurr_list_len++;\n-\t\t\t}\n+\t\tif (lambda_validity.RowIsValid(entry) && lambda_values[entry]) {\n+\t\t\ttrue_sel.set_index(true_count++, i);\n+\t\t\tcurr_list_len++;\n \t\t}\n+\n \t\tcurr_original_list_len++;\n \n \t\tif (lists_len[appended_lists_cnt] == curr_original_list_len) {\ndiff --git a/src/core_functions/scalar/string/printf.cpp b/src/core_functions/scalar/string/printf.cpp\nindex 4f85dcda4066..b71bedef066c 100644\n--- a/src/core_functions/scalar/string/printf.cpp\n+++ b/src/core_functions/scalar/string/printf.cpp\n@@ -94,7 +94,7 @@ static void PrintfFunction(DataChunk &args, ExpressionState &state, Vector &resu\n \n \t\t// now gather all the format arguments\n \t\tvector<duckdb_fmt::basic_format_arg<CTX>> format_args;\n-\t\tvector<unique_ptr<data_t[]>> string_args;\n+\t\tvector<unsafe_unique_array<data_t>> string_args;\n \n \t\tfor (idx_t col_idx = 1; col_idx < args.ColumnCount(); col_idx++) {\n \t\t\tauto &col = args.data[col_idx];\ndiff --git a/src/execution/aggregate_hashtable.cpp b/src/execution/aggregate_hashtable.cpp\nindex 2a920339a1c5..ce82151db70f 100644\n--- a/src/execution/aggregate_hashtable.cpp\n+++ b/src/execution/aggregate_hashtable.cpp\n@@ -390,7 +390,7 @@ idx_t GroupedAggregateHashTable::FindOrCreateGroupsInternal(AggregateHTAppendSta\n \t}\n \tTupleDataCollection::ToUnifiedFormat(state.chunk_state, state.group_chunk);\n \tif (!state.group_data) {\n-\t\tstate.group_data = unique_ptr<UnifiedVectorFormat[]>(new UnifiedVectorFormat[state.group_chunk.ColumnCount()]);\n+\t\tstate.group_data = make_unsafe_uniq_array<UnifiedVectorFormat>(state.group_chunk.ColumnCount());\n \t}\n \tTupleDataCollection::GetVectorData(state.chunk_state, state.group_data.get());\n \ndiff --git a/src/execution/expression_executor/execute_between.cpp b/src/execution/expression_executor/execute_between.cpp\nindex ea832b2347b8..1fc618fe7409 100644\n--- a/src/execution/expression_executor/execute_between.cpp\n+++ b/src/execution/expression_executor/execute_between.cpp\n@@ -74,6 +74,9 @@ static idx_t BetweenLoopTypeSwitch(Vector &input, Vector &lower, Vector &upper,\n \tcase PhysicalType::VARCHAR:\n \t\treturn TernaryExecutor::Select<string_t, string_t, string_t, OP>(input, lower, upper, sel, count, true_sel,\n \t\t                                                                 false_sel);\n+\tcase PhysicalType::INTERVAL:\n+\t\treturn TernaryExecutor::Select<interval_t, interval_t, interval_t, OP>(input, lower, upper, sel, count,\n+\t\t                                                                       true_sel, false_sel);\n \tdefault:\n \t\tthrow InvalidTypeException(input.GetType(), \"Invalid type for BETWEEN\");\n \t}\ndiff --git a/src/execution/index/art/art.cpp b/src/execution/index/art/art.cpp\nindex 431e68d18b0f..80a427af1d9a 100644\n--- a/src/execution/index/art/art.cpp\n+++ b/src/execution/index/art/art.cpp\n@@ -130,6 +130,9 @@ static void TemplatedGenerateKeys(ArenaAllocator &allocator, Vector &input, idx_\n \t\tauto idx = idata.sel->get_index(i);\n \t\tif (idata.validity.RowIsValid(idx)) {\n \t\t\tARTKey::CreateARTKey<T>(allocator, input.GetType(), keys[i], input_data[idx]);\n+\t\t} else {\n+\t\t\t// we need to possibly reset the former key value in the keys vector\n+\t\t\tkeys[i] = ARTKey();\n \t\t}\n \t}\n }\n@@ -680,7 +683,6 @@ Node ART::Lookup(Node node, const ARTKey &key, idx_t depth) {\n \t\t\t}\n \t\t\treturn node;\n \t\t}\n-\n \t\tauto &node_prefix = node.GetPrefix(*this);\n \t\tif (node_prefix.count) {\n \t\t\tfor (idx_t pos = 0; pos < node_prefix.count; pos++) {\n@@ -1039,6 +1041,9 @@ void ART::InitializeMerge(ARTFlags &flags) {\n bool ART::MergeIndexes(IndexLock &state, Index &other_index) {\n \n \tauto &other_art = other_index.Cast<ART>();\n+\tif (!other_art.tree->IsSet()) {\n+\t\treturn true;\n+\t}\n \n \tif (tree->IsSet()) {\n \t\t//  fully deserialize other_index, and traverse it to increment its buffer IDs\ndiff --git a/src/execution/index/art/prefix.cpp b/src/execution/index/art/prefix.cpp\nindex 027ed45c2808..96b580d48605 100644\n--- a/src/execution/index/art/prefix.cpp\n+++ b/src/execution/index/art/prefix.cpp\n@@ -159,23 +159,15 @@ void Prefix::Concatenate(ART &art, const uint8_t byte, const Prefix &other) {\n \t\treturn;\n \t}\n \n+\tauto this_inlined = IsInlined();\n \tauto this_count = count;\n \tauto this_data = data;\n \tInitialize();\n \n-\t// append the other prefix\n+\t// append the other prefix and possibly move the data to a segment\n \tAppend(art, other);\n-\n \tif (IsInlined()) {\n-\t\t// move to a segment\n-\t\treference<PrefixSegment> segment(MoveInlinedToSegment(art));\n-\t\t// append the byte\n-\t\tsegment = segment.get().Append(art, count, byte);\n-\t\t// append this prefix\n-\t\tfor (idx_t i = 0; i < this_count; i++) {\n-\t\t\tsegment = segment.get().Append(art, count, this_data.inlined[i]);\n-\t\t}\n-\t\treturn;\n+\t\tMoveInlinedToSegment(art);\n \t}\n \n \t// get the tail\n@@ -183,6 +175,14 @@ void Prefix::Concatenate(ART &art, const uint8_t byte, const Prefix &other) {\n \t// append the byte\n \tsegment = segment.get().Append(art, count, byte);\n \n+\tif (this_inlined) {\n+\t\t// append this prefix\n+\t\tfor (idx_t i = 0; i < this_count; i++) {\n+\t\t\tsegment = segment.get().Append(art, count, this_data.inlined[i]);\n+\t\t}\n+\t\treturn;\n+\t}\n+\n \t// iterate all segments of this prefix, copy their data, and free them\n \tauto this_ptr = this_data.ptr;\n \tauto remaining = this_count;\ndiff --git a/src/execution/join_hashtable.cpp b/src/execution/join_hashtable.cpp\nindex 4578963f1fd6..9bf872dd0db7 100644\n--- a/src/execution/join_hashtable.cpp\n+++ b/src/execution/join_hashtable.cpp\n@@ -142,7 +142,7 @@ static idx_t FilterNullValues(UnifiedVectorFormat &vdata, const SelectionVector\n \treturn result_count;\n }\n \n-idx_t JoinHashTable::PrepareKeys(DataChunk &keys, unique_ptr<UnifiedVectorFormat[]> &key_data,\n+idx_t JoinHashTable::PrepareKeys(DataChunk &keys, unsafe_unique_array<UnifiedVectorFormat> &key_data,\n                                  const SelectionVector *&current_sel, SelectionVector &sel, bool build_side) {\n \tkey_data = keys.ToUnifiedFormat();\n \n@@ -197,7 +197,7 @@ void JoinHashTable::Build(PartitionedTupleDataAppendState &append_state, DataChu\n \t}\n \n \t// prepare the keys for processing\n-\tunique_ptr<UnifiedVectorFormat[]> key_data;\n+\tunsafe_unique_array<UnifiedVectorFormat> key_data;\n \tconst SelectionVector *current_sel;\n \tSelectionVector sel(STANDARD_VECTOR_SIZE);\n \tidx_t added_count = PrepareKeys(keys, key_data, current_sel, sel, true);\n@@ -332,7 +332,7 @@ unique_ptr<ScanStructure> JoinHashTable::InitializeScanStructure(DataChunk &keys\n \tauto ss = make_uniq<ScanStructure>(*this);\n \n \tif (join_type != JoinType::INNER) {\n-\t\tss->found_match = unique_ptr<bool[]>(new bool[STANDARD_VECTOR_SIZE]);\n+\t\tss->found_match = make_unsafe_uniq_array<bool>(STANDARD_VECTOR_SIZE);\n \t\tmemset(ss->found_match.get(), 0, sizeof(bool) * STANDARD_VECTOR_SIZE);\n \t}\n \ndiff --git a/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp b/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\nindex b8422902a86d..6c6bfe1c59c6 100644\n--- a/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\n+++ b/src/execution/operator/aggregate/physical_ungrouped_aggregate.cpp\n@@ -39,7 +39,7 @@ struct AggregateState {\n \t\tfor (auto &aggregate : aggregate_expressions) {\n \t\t\tD_ASSERT(aggregate->GetExpressionClass() == ExpressionClass::BOUND_AGGREGATE);\n \t\t\tauto &aggr = aggregate->Cast<BoundAggregateExpression>();\n-\t\t\tauto state = unique_ptr<data_t[]>(new data_t[aggr.function.state_size()]);\n+\t\t\tauto state = make_unsafe_uniq_array<data_t>(aggr.function.state_size());\n \t\t\taggr.function.initialize(state.get());\n \t\t\taggregates.push_back(std::move(state));\n \t\t\tbind_data.push_back(aggr.bind_info.get());\n@@ -69,7 +69,7 @@ struct AggregateState {\n \t}\n \n \t//! The aggregate values\n-\tvector<unique_ptr<data_t[]>> aggregates;\n+\tvector<unsafe_unique_array<data_t>> aggregates;\n \t//! The bind data\n \tvector<FunctionData *> bind_data;\n \t//! The destructors\ndiff --git a/src/execution/operator/join/outer_join_marker.cpp b/src/execution/operator/join/outer_join_marker.cpp\nindex 25a1dcd50c80..c4aadd6e0b6c 100644\n--- a/src/execution/operator/join/outer_join_marker.cpp\n+++ b/src/execution/operator/join/outer_join_marker.cpp\n@@ -10,7 +10,7 @@ void OuterJoinMarker::Initialize(idx_t count_p) {\n \t\treturn;\n \t}\n \tthis->count = count_p;\n-\tfound_match = unique_ptr<bool[]>(new bool[count]);\n+\tfound_match = make_unsafe_uniq_array<bool>(count);\n \tReset();\n }\n \ndiff --git a/src/execution/operator/join/perfect_hash_join_executor.cpp b/src/execution/operator/join/perfect_hash_join_executor.cpp\nindex dc27d99bc5ac..91f7f408d2e4 100644\n--- a/src/execution/operator/join/perfect_hash_join_executor.cpp\n+++ b/src/execution/operator/join/perfect_hash_join_executor.cpp\n@@ -25,7 +25,7 @@ bool PerfectHashJoinExecutor::BuildPerfectHashTable(LogicalType &key_type) {\n \t}\n \n \t// and for duplicate_checking\n-\tbitmap_build_idx = unique_ptr<bool[]>(new bool[build_size]);\n+\tbitmap_build_idx = make_unsafe_uniq_array<bool>(build_size);\n \tmemset(bitmap_build_idx.get(), 0, sizeof(bool) * build_size); // set false\n \n \t// Now fill columns with build data\ndiff --git a/src/execution/operator/join/physical_index_join.cpp b/src/execution/operator/join/physical_index_join.cpp\nindex 7cfa2e05b5c0..268b28324268 100644\n--- a/src/execution/operator/join/physical_index_join.cpp\n+++ b/src/execution/operator/join/physical_index_join.cpp\n@@ -167,7 +167,6 @@ void PhysicalIndexJoin::GetRHSMatches(ExecutionContext &context, DataChunk &inpu\n \n \tauto &state = state_p.Cast<IndexJoinOperatorState>();\n \tauto &art = index.Cast<ART>();\n-\t;\n \n \t// generate the keys for this chunk\n \tstate.arena_allocator.Reset();\n@@ -214,6 +213,8 @@ OperatorResultType PhysicalIndexJoin::ExecuteInternal(ExecutionContext &context,\n \t\tstate.lhs_idx = 0;\n \t\tstate.rhs_idx = 0;\n \t\tstate.first_fetch = true;\n+\t\t// reset the LHS chunk to reset the validity masks\n+\t\tstate.join_keys.Reset();\n \t\treturn OperatorResultType::NEED_MORE_INPUT;\n \t}\n \t//! Output vectors\ndiff --git a/src/execution/operator/join/physical_range_join.cpp b/src/execution/operator/join/physical_range_join.cpp\nindex 0dc2d7d86ee0..e8ec67a58d16 100644\n--- a/src/execution/operator/join/physical_range_join.cpp\n+++ b/src/execution/operator/join/physical_range_join.cpp\n@@ -72,7 +72,7 @@ void PhysicalRangeJoin::GlobalSortedTable::Combine(LocalSortedTable &ltable) {\n }\n \n void PhysicalRangeJoin::GlobalSortedTable::IntializeMatches() {\n-\tfound_match = unique_ptr<bool[]>(new bool[Count()]);\n+\tfound_match = make_unsafe_uniq_array<bool>(Count());\n \tmemset(found_match.get(), 0, sizeof(bool) * Count());\n }\n \ndiff --git a/src/execution/operator/persistent/CMakeLists.txt b/src/execution/operator/persistent/CMakeLists.txt\nindex a0ecdcadf3cb..d33f348d7ab5 100644\n--- a/src/execution/operator/persistent/CMakeLists.txt\n+++ b/src/execution/operator/persistent/CMakeLists.txt\n@@ -5,6 +5,7 @@ add_library_unity(\n   buffered_csv_reader.cpp\n   parallel_csv_reader.cpp\n   csv_buffer.cpp\n+  csv_file_handle.cpp\n   csv_reader_options.cpp\n   physical_fixed_batch_copy.cpp\n   physical_batch_copy_to_file.cpp\ndiff --git a/src/execution/operator/persistent/base_csv_reader.cpp b/src/execution/operator/persistent/base_csv_reader.cpp\nindex d3568496f0e4..1edd6b497bc8 100644\n--- a/src/execution/operator/persistent/base_csv_reader.cpp\n+++ b/src/execution/operator/persistent/base_csv_reader.cpp\n@@ -17,6 +17,7 @@\n #include \"utf8proc.hpp\"\n #include \"duckdb/parser/keyword_helper.hpp\"\n #include \"duckdb/main/error_manager.hpp\"\n+#include \"duckdb/execution/operator/persistent/parallel_csv_reader.hpp\"\n \n #include <algorithm>\n #include <cctype>\n@@ -25,27 +26,23 @@\n \n namespace duckdb {\n \n-string BaseCSVReader::GetLineNumberStr(idx_t linenr, bool linenr_estimated) {\n-\tstring estimated = (linenr_estimated ? string(\" (estimated)\") : string(\"\"));\n-\treturn to_string(linenr + 1) + estimated;\n+string BaseCSVReader::GetLineNumberStr(idx_t line_error, bool is_line_estimated, idx_t buffer_idx) {\n+\t// If an error happens during auto-detect it is an estimated line\n+\tstring estimated = (is_line_estimated ? string(\" (estimated)\") : string(\"\"));\n+\treturn to_string(GetLineError(line_error, buffer_idx)) + estimated;\n }\n \n BaseCSVReader::BaseCSVReader(ClientContext &context_p, BufferedCSVReaderOptions options_p,\n                              const vector<LogicalType> &requested_types)\n-    : context(context_p), fs(FileSystem::GetFileSystem(context)), allocator(Allocator::Get(context)),\n-      opener(FileSystem::GetFileOpener(context)), options(std::move(options_p)) {\n+    : context(context_p), fs(FileSystem::GetFileSystem(context)), allocator(BufferAllocator::Get(context)),\n+      options(std::move(options_p)) {\n }\n \n BaseCSVReader::~BaseCSVReader() {\n }\n \n unique_ptr<CSVFileHandle> BaseCSVReader::OpenCSV(const BufferedCSVReaderOptions &options_p) {\n-\tauto file_handle = fs.OpenFile(options_p.file_path.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK,\n-\t                               options_p.compression, this->opener);\n-\tif (file_handle->CanSeek()) {\n-\t\tfile_handle->Reset();\n-\t}\n-\treturn make_uniq<CSVFileHandle>(std::move(file_handle));\n+\treturn CSVFileHandle::OpenFile(fs, allocator, options_p.file_path, options_p.compression, true);\n }\n \n void BaseCSVReader::InitParseChunk(idx_t num_cols) {\n@@ -165,40 +162,48 @@ struct TryCastTimestampOperator {\n \n template <class OP, class T>\n static bool TemplatedTryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector,\n-                                       idx_t count, string &error_message) {\n+                                       idx_t count, string &error_message, idx_t &line_error) {\n \tD_ASSERT(input_vector.GetType().id() == LogicalTypeId::VARCHAR);\n \tbool all_converted = true;\n+\tidx_t cur_line = 0;\n \tUnaryExecutor::Execute<string_t, T>(input_vector, result_vector, count, [&](string_t input) {\n \t\tT result;\n \t\tif (!OP::Operation(options, input, result, error_message)) {\n+\t\t\tline_error = cur_line;\n \t\t\tall_converted = false;\n \t\t}\n+\t\tcur_line++;\n \t\treturn result;\n \t});\n \treturn all_converted;\n }\n \n bool TryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,\n-                       string &error_message) {\n+                       string &error_message, idx_t &line_error) {\n \treturn TemplatedTryCastDateVector<TryCastDateOperator, date_t>(options, input_vector, result_vector, count,\n-\t                                                               error_message);\n+\t                                                               error_message, line_error);\n }\n \n bool TryCastTimestampVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,\n                             string &error_message) {\n+\tidx_t line_error;\n \treturn TemplatedTryCastDateVector<TryCastTimestampOperator, timestamp_t>(options, input_vector, result_vector,\n-\t                                                                         count, error_message);\n+\t                                                                         count, error_message, line_error);\n }\n \n template <class OP, class T>\n bool TemplatedTryCastFloatingVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector,\n-                                    idx_t count, string &error_message) {\n+                                    idx_t count, string &error_message, idx_t &line_error) {\n \tD_ASSERT(input_vector.GetType().id() == LogicalTypeId::VARCHAR);\n \tbool all_converted = true;\n+\tidx_t row = 0;\n \tUnaryExecutor::Execute<string_t, T>(input_vector, result_vector, count, [&](string_t input) {\n \t\tT result;\n \t\tif (!OP::Operation(input, result, &error_message)) {\n+\t\t\tline_error = row;\n \t\t\tall_converted = false;\n+\t\t} else {\n+\t\t\trow++;\n \t\t}\n \t\treturn result;\n \t});\n@@ -226,7 +231,8 @@ bool BaseCSVReader::TryCastVector(Vector &parse_chunk_col, idx_t size, const Log\n \tif (options.has_format[LogicalTypeId::DATE] && sql_type == LogicalTypeId::DATE) {\n \t\t// use the date format to cast the chunk\n \t\tstring error_message;\n-\t\treturn TryCastDateVector(options, parse_chunk_col, dummy_result, size, error_message);\n+\t\tidx_t line_error;\n+\t\treturn TryCastDateVector(options, parse_chunk_col, dummy_result, size, error_message, line_error);\n \t} else if (options.has_format[LogicalTypeId::TIMESTAMP] && sql_type == LogicalTypeId::TIMESTAMP) {\n \t\t// use the timestamp format to cast the chunk\n \t\tstring error_message;\n@@ -238,7 +244,8 @@ bool BaseCSVReader::TryCastVector(Vector &parse_chunk_col, idx_t size, const Log\n \t}\n }\n \n-void BaseCSVReader::AddValue(string_t str_val, idx_t &column, vector<idx_t> &escape_positions, bool has_quotes) {\n+void BaseCSVReader::AddValue(string_t str_val, idx_t &column, vector<idx_t> &escape_positions, bool has_quotes,\n+                             idx_t buffer_idx) {\n \tauto length = str_val.GetSize();\n \tif (length == 0 && column == 0) {\n \t\trow_empty = true;\n@@ -260,7 +267,8 @@ void BaseCSVReader::AddValue(string_t str_val, idx_t &column, vector<idx_t> &esc\n \t\t} else {\n \t\t\tthrow InvalidInputException(\n \t\t\t    \"Error in file \\\"%s\\\", on line %s: expected %lld values per row, but got more. (%s)\", options.file_path,\n-\t\t\t    GetLineNumberStr(linenr, linenr_estimated).c_str(), return_types.size(), options.ToString());\n+\t\t\t    GetLineNumberStr(linenr, linenr_estimated, buffer_idx).c_str(), return_types.size(),\n+\t\t\t    options.ToString());\n \t\t}\n \t}\n \n@@ -301,7 +309,7 @@ void BaseCSVReader::AddValue(string_t str_val, idx_t &column, vector<idx_t> &esc\n \tcolumn++;\n }\n \n-bool BaseCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column, string &error_message) {\n+bool BaseCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column, string &error_message, idx_t buffer_idx) {\n \tlinenr++;\n \n \tif (row_empty) {\n@@ -338,8 +346,8 @@ bool BaseCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column, string &error\n \t\t\t} else {\n \t\t\t\tthrow InvalidInputException(\n \t\t\t\t    \"Error in file \\\"%s\\\" on line %s: expected %lld values per row, but got %d.\\nParser options:\\n%s\",\n-\t\t\t\t    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), return_types.size(), column,\n-\t\t\t\t    options.ToString());\n+\t\t\t\t    options.file_path, GetLineNumberStr(linenr, linenr_estimated, buffer_idx).c_str(),\n+\t\t\t\t    return_types.size(), column, options.ToString());\n \t\t\t}\n \t\t}\n \t}\n@@ -363,7 +371,7 @@ bool BaseCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column, string &error\n \t}\n \n \tif (mode == ParserMode::PARSING && parse_chunk.size() == STANDARD_VECTOR_SIZE) {\n-\t\tFlush(insert_chunk);\n+\t\tFlush(insert_chunk, buffer_idx);\n \t\treturn true;\n \t}\n \n@@ -426,20 +434,21 @@ bool TryCastDecimalVectorCommaSeparated(BufferedCSVReaderOptions &options, Vecto\n }\n \n bool TryCastFloatingVectorCommaSeparated(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector,\n-                                         idx_t count, string &error_message, const LogicalType &result_type) {\n+                                         idx_t count, string &error_message, const LogicalType &result_type,\n+                                         idx_t &line_error) {\n \tswitch (result_type.InternalType()) {\n \tcase PhysicalType::DOUBLE:\n \t\treturn TemplatedTryCastFloatingVector<TryCastErrorMessageCommaSeparated, double>(\n-\t\t    options, input_vector, result_vector, count, error_message);\n+\t\t    options, input_vector, result_vector, count, error_message, line_error);\n \tcase PhysicalType::FLOAT:\n \t\treturn TemplatedTryCastFloatingVector<TryCastErrorMessageCommaSeparated, float>(\n-\t\t    options, input_vector, result_vector, count, error_message);\n+\t\t    options, input_vector, result_vector, count, error_message, line_error);\n \tdefault:\n \t\tthrow InternalException(\"Unimplemented physical type for floating\");\n \t}\n }\n \n-bool BaseCSVReader::Flush(DataChunk &insert_chunk, bool try_add_line) {\n+bool BaseCSVReader::Flush(DataChunk &insert_chunk, idx_t buffer_idx, bool try_add_line) {\n \tif (parse_chunk.size() == 0) {\n \t\treturn true;\n \t}\n@@ -468,9 +477,12 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, bool try_add_line) {\n \t\t} else {\n \t\t\tstring error_message;\n \t\t\tbool success;\n+\t\t\tidx_t line_error = 0;\n+\t\t\tbool target_type_not_varchar = false;\n \t\t\tif (options.has_format[LogicalTypeId::DATE] && type.id() == LogicalTypeId::DATE) {\n \t\t\t\t// use the date format to cast the chunk\n-\t\t\t\tsuccess = TryCastDateVector(options, parse_vector, result_vector, parse_chunk.size(), error_message);\n+\t\t\t\tsuccess = TryCastDateVector(options, parse_vector, result_vector, parse_chunk.size(), error_message,\n+\t\t\t\t                            line_error);\n \t\t\t} else if (options.has_format[LogicalTypeId::TIMESTAMP] && type.id() == LogicalTypeId::TIMESTAMP) {\n \t\t\t\t// use the date format to cast the chunk\n \t\t\t\tsuccess =\n@@ -478,12 +490,13 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, bool try_add_line) {\n \t\t\t} else if (options.decimal_separator != \".\" &&\n \t\t\t           (type.id() == LogicalTypeId::FLOAT || type.id() == LogicalTypeId::DOUBLE)) {\n \t\t\t\tsuccess = TryCastFloatingVectorCommaSeparated(options, parse_vector, result_vector, parse_chunk.size(),\n-\t\t\t\t                                              error_message, type);\n+\t\t\t\t                                              error_message, type, line_error);\n \t\t\t} else if (options.decimal_separator != \".\" && type.id() == LogicalTypeId::DECIMAL) {\n \t\t\t\tsuccess = TryCastDecimalVectorCommaSeparated(options, parse_vector, result_vector, parse_chunk.size(),\n \t\t\t\t                                             error_message, type);\n \t\t\t} else {\n \t\t\t\t// target type is not varchar: perform a cast\n+\t\t\t\ttarget_type_not_varchar = true;\n \t\t\t\tsuccess =\n \t\t\t\t    VectorOperations::TryCast(context, parse_vector, result_vector, parse_chunk.size(), &error_message);\n \t\t\t}\n@@ -503,15 +516,25 @@ bool BaseCSVReader::Flush(DataChunk &insert_chunk, bool try_add_line) {\n \t\t\t}\n \n \t\t\t// figure out the exact line number\n-\t\t\tUnifiedVectorFormat inserted_column_data;\n-\t\t\tresult_vector.ToUnifiedFormat(parse_chunk.size(), inserted_column_data);\n-\t\t\tidx_t row_idx;\n-\t\t\tfor (row_idx = 0; row_idx < parse_chunk.size(); row_idx++) {\n-\t\t\t\tif (!inserted_column_data.validity.RowIsValid(row_idx) && !FlatVector::IsNull(parse_vector, row_idx)) {\n-\t\t\t\t\tbreak;\n+\t\t\tif (target_type_not_varchar) {\n+\t\t\t\tUnifiedVectorFormat inserted_column_data;\n+\t\t\t\tresult_vector.ToUnifiedFormat(parse_chunk.size(), inserted_column_data);\n+\t\t\t\tfor (; line_error < parse_chunk.size(); line_error++) {\n+\t\t\t\t\tif (!inserted_column_data.validity.RowIsValid(line_error) &&\n+\t\t\t\t\t    !FlatVector::IsNull(parse_vector, line_error)) {\n+\t\t\t\t\t\tbreak;\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\tauto error_line = linenr - (parse_chunk.size() - row_idx) + 1;\n+\n+\t\t\tidx_t error_line;\n+\t\t\t// The line_error must be summed with linenr (All lines emmited from this batch)\n+\t\t\t// But subtracted from the parse_chunk\n+\t\t\tD_ASSERT(line_error + linenr >= parse_chunk.size());\n+\t\t\tline_error += linenr;\n+\t\t\tline_error -= parse_chunk.size();\n+\n+\t\t\terror_line = GetLineError(line_error, buffer_idx);\n \n \t\t\tif (options.auto_detect) {\n \t\t\t\tthrow InvalidInputException(\"%s in column %s, at line %llu.\\n\\nParser \"\ndiff --git a/src/execution/operator/persistent/buffered_csv_reader.cpp b/src/execution/operator/persistent/buffered_csv_reader.cpp\nindex 8a2b7bfe1f09..125ccc091e36 100644\n--- a/src/execution/operator/persistent/buffered_csv_reader.cpp\n+++ b/src/execution/operator/persistent/buffered_csv_reader.cpp\n@@ -39,9 +39,6 @@ BufferedCSVReader::BufferedCSVReader(ClientContext &context, string filename, Bu\n \tInitialize(requested_types);\n }\n \n-BufferedCSVReader::~BufferedCSVReader() {\n-}\n-\n enum class QuoteRule : uint8_t { QUOTES_RFC = 0, QUOTES_OTHER = 1, NO_QUOTES = 2 };\n \n static bool StartsWithNumericDate(string &separator, const string &value) {\n@@ -242,18 +239,13 @@ void BufferedCSVReader::Initialize(const vector<LogicalType> &requested_types) {\n \t\tif (return_types.empty()) {\n \t\t\tthrow InvalidInputException(\"Failed to detect column types from CSV: is the file a valid CSV file?\");\n \t\t}\n-\t\tif (cached_chunks.empty()) {\n-\t\t\tJumpToBeginning(options.skip_rows, options.header);\n-\t\t}\n+\t\tJumpToBeginning(options.skip_rows, options.header);\n \t} else {\n \t\treturn_types = requested_types;\n \t\tResetBuffer();\n \t\tSkipRowsAndReadHeader(options.skip_rows, options.header);\n \t}\n \tInitParseChunk(return_types.size());\n-\t// we only need reset support during the automatic CSV type detection\n-\t// since reset support might require caching (in the case of streams), we disable it for the remainder\n-\tfile_handle->DisableReset();\n }\n \n void BufferedCSVReader::ResetBuffer() {\n@@ -265,13 +257,7 @@ void BufferedCSVReader::ResetBuffer() {\n }\n \n void BufferedCSVReader::ResetStream() {\n-\tif (!file_handle->CanSeek()) {\n-\t\t// seeking to the beginning appears to not be supported in all compiler/os-scenarios,\n-\t\t// so we have to create a new stream source here for now\n-\t\tfile_handle->Reset();\n-\t} else {\n-\t\tfile_handle->Seek(0);\n-\t}\n+\tfile_handle->Reset();\n \tlinenr = 0;\n \tlinenr_estimated = false;\n \tbytes_per_line_avg = 0;\n@@ -335,7 +321,7 @@ bool BufferedCSVReader::JumpToNextSample() {\n \n \t// if we deal with any other sources than plaintext files, jumping_samples can be tricky. In that case\n \t// we just read x continuous chunks from the stream TODO: make jumps possible for zipfiles.\n-\tif (!file_handle->PlainFileSource() || !jumping_samples) {\n+\tif (!file_handle->OnDiskFile() || !jumping_samples) {\n \t\tsample_chunk_idx++;\n \t\treturn true;\n \t}\n@@ -805,21 +791,6 @@ vector<LogicalType> BufferedCSVReader::RefineTypeDetection(const vector<LogicalT\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\n-\t\t\tif (!jumping_samples) {\n-\t\t\t\tif ((sample_chunk_idx)*options.sample_chunk_size <= options.buffer_size) {\n-\t\t\t\t\t// cache parse chunk\n-\t\t\t\t\t// create a new chunk and fill it with the remainder\n-\t\t\t\t\tauto chunk = make_uniq<DataChunk>();\n-\t\t\t\t\tauto parse_chunk_types = parse_chunk.GetTypes();\n-\t\t\t\t\tchunk->Move(parse_chunk);\n-\t\t\t\t\tcached_chunks.push(std::move(chunk));\n-\t\t\t\t} else {\n-\t\t\t\t\twhile (!cached_chunks.empty()) {\n-\t\t\t\t\t\tcached_chunks.pop();\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n \t\t}\n \n \t\t// set sql types\n@@ -1201,6 +1172,16 @@ void BufferedCSVReader::SkipEmptyLines() {\n \t}\n }\n \n+void UpdateMaxLineLength(ClientContext &context, idx_t line_length) {\n+\tif (!context.client_data->debug_set_max_line_length) {\n+\t\treturn;\n+\t}\n+\tif (line_length < context.client_data->debug_max_line_length) {\n+\t\treturn;\n+\t}\n+\tcontext.client_data->debug_max_line_length = line_length;\n+}\n+\n bool BufferedCSVReader::TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message) {\n \t// used for parsing algorithm\n \tbool finished_chunk = false;\n@@ -1268,9 +1249,7 @@ add_row : {\n \t\treturn false;\n \t}\n \tfinished_chunk = AddRow(insert_chunk, column, error_message);\n-\tif (context.client_data->max_line_length < position - line_start) {\n-\t\tcontext.client_data->max_line_length = position - line_start;\n-\t}\n+\tUpdateMaxLineLength(context, position - line_start);\n \tif (!error_message.empty()) {\n \t\treturn false;\n \t}\n@@ -1408,9 +1387,7 @@ add_row : {\n \t\tAddValue(string_t(buffer.get() + start, position - start - offset), column, escape_positions, has_quotes);\n \t\tfinished_chunk = AddRow(insert_chunk, column, error_message);\n \t\tSkipEmptyLines();\n-\t\tif (context.client_data->max_line_length < position - line_start) {\n-\t\t\tcontext.client_data->max_line_length = position - line_start;\n-\t\t}\n+\t\tUpdateMaxLineLength(context, position - line_start);\n \t\tif (!error_message.empty()) {\n \t\t\treturn false;\n \t\t}\n@@ -1448,7 +1425,7 @@ bool BufferedCSVReader::ReadBuffer(idx_t &start, idx_t &line_start) {\n \t\t                            GetLineNumberStr(linenr, linenr_estimated));\n \t}\n \n-\tbuffer = unique_ptr<char[]>(new char[buffer_read_size + remaining + 1]);\n+\tbuffer = make_unsafe_uniq_array<char>(buffer_read_size + remaining + 1);\n \tbuffer_size = remaining + buffer_read_size;\n \tif (remaining > 0) {\n \t\t// remaining from last buffer: copy it here\n@@ -1477,17 +1454,6 @@ bool BufferedCSVReader::ReadBuffer(idx_t &start, idx_t &line_start) {\n }\n \n void BufferedCSVReader::ParseCSV(DataChunk &insert_chunk) {\n-\t// if no auto-detect or auto-detect with jumping samples, we have nothing cached and start from the beginning\n-\tif (cached_chunks.empty()) {\n-\t\tcached_buffers.clear();\n-\t} else {\n-\t\tauto &chunk = cached_chunks.front();\n-\t\tparse_chunk.Move(*chunk);\n-\t\tcached_chunks.pop();\n-\t\tFlush(insert_chunk);\n-\t\treturn;\n-\t}\n-\n \tstring error_message;\n \tif (!TryParseCSV(ParserMode::PARSING, insert_chunk, error_message)) {\n \t\tthrow InvalidInputException(error_message);\ndiff --git a/src/execution/operator/persistent/csv_file_handle.cpp b/src/execution/operator/persistent/csv_file_handle.cpp\nnew file mode 100644\nindex 000000000000..b319c20bc636\n--- /dev/null\n+++ b/src/execution/operator/persistent/csv_file_handle.cpp\n@@ -0,0 +1,158 @@\n+#include \"duckdb/execution/operator/persistent/csv_file_handle.hpp\"\n+\n+namespace duckdb {\n+\n+CSVFileHandle::CSVFileHandle(FileSystem &fs, Allocator &allocator, unique_ptr<FileHandle> file_handle_p,\n+                             const string &path_p, FileCompressionType compression, bool enable_reset)\n+    : fs(fs), allocator(allocator), file_handle(std::move(file_handle_p)), path(path_p), compression(compression),\n+      reset_enabled(enable_reset) {\n+\tcan_seek = file_handle->CanSeek();\n+\ton_disk_file = file_handle->OnDiskFile();\n+\tfile_size = file_handle->GetFileSize();\n+}\n+\n+unique_ptr<FileHandle> CSVFileHandle::OpenFileHandle(FileSystem &fs, Allocator &allocator, const string &path,\n+                                                     FileCompressionType compression) {\n+\tauto file_handle = fs.OpenFile(path.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK, compression);\n+\tif (file_handle->CanSeek()) {\n+\t\tfile_handle->Reset();\n+\t}\n+\treturn file_handle;\n+}\n+\n+unique_ptr<CSVFileHandle> CSVFileHandle::OpenFile(FileSystem &fs, Allocator &allocator, const string &path,\n+                                                  FileCompressionType compression, bool enable_reset) {\n+\tauto file_handle = CSVFileHandle::OpenFileHandle(fs, allocator, path, compression);\n+\treturn make_uniq<CSVFileHandle>(fs, allocator, std::move(file_handle), path, compression, enable_reset);\n+}\n+\n+bool CSVFileHandle::CanSeek() {\n+\treturn can_seek;\n+}\n+\n+void CSVFileHandle::Seek(idx_t position) {\n+\tif (!can_seek) {\n+\t\tthrow InternalException(\"Cannot seek in this file\");\n+\t}\n+\tfile_handle->Seek(position);\n+}\n+\n+idx_t CSVFileHandle::SeekPosition() {\n+\tif (!can_seek) {\n+\t\tthrow InternalException(\"Cannot seek in this file\");\n+\t}\n+\treturn file_handle->SeekPosition();\n+}\n+\n+void CSVFileHandle::Reset() {\n+\trequested_bytes = 0;\n+\tread_position = 0;\n+\tif (can_seek) {\n+\t\t// we can seek - reset the file handle\n+\t\tfile_handle->Reset();\n+\t} else if (on_disk_file) {\n+\t\t// we cannot seek but it is an on-disk file - re-open the file\n+\t\tfile_handle = CSVFileHandle::OpenFileHandle(fs, allocator, path, compression);\n+\t} else {\n+\t\tif (!reset_enabled) {\n+\t\t\tthrow InternalException(\"Reset called but reset is not enabled for this CSV Handle\");\n+\t\t}\n+\t\tread_position = 0;\n+\t}\n+}\n+bool CSVFileHandle::OnDiskFile() {\n+\treturn on_disk_file;\n+}\n+\n+idx_t CSVFileHandle::FileSize() {\n+\treturn file_size;\n+}\n+\n+bool CSVFileHandle::FinishedReading() {\n+\treturn requested_bytes >= file_size;\n+}\n+\n+idx_t CSVFileHandle::Read(void *buffer, idx_t nr_bytes) {\n+\trequested_bytes += nr_bytes;\n+\tif (on_disk_file || can_seek) {\n+\t\t// if this is a plain file source OR we can seek we are not caching anything\n+\t\treturn file_handle->Read(buffer, nr_bytes);\n+\t}\n+\t// not a plain file source: we need to do some bookkeeping around the reset functionality\n+\tidx_t result_offset = 0;\n+\tif (read_position < buffer_size) {\n+\t\t// we need to read from our cached buffer\n+\t\tauto buffer_read_count = MinValue<idx_t>(nr_bytes, buffer_size - read_position);\n+\t\tmemcpy(buffer, cached_buffer.get() + read_position, buffer_read_count);\n+\t\tresult_offset += buffer_read_count;\n+\t\tread_position += buffer_read_count;\n+\t\tif (result_offset == nr_bytes) {\n+\t\t\treturn nr_bytes;\n+\t\t}\n+\t} else if (!reset_enabled && cached_buffer.IsSet()) {\n+\t\t// reset is disabled, but we still have cached data\n+\t\t// we can remove any cached data\n+\t\tcached_buffer.Reset();\n+\t\tbuffer_size = 0;\n+\t\tbuffer_capacity = 0;\n+\t\tread_position = 0;\n+\t}\n+\t// we have data left to read from the file\n+\t// read directly into the buffer\n+\tauto bytes_read = file_handle->Read((char *)buffer + result_offset, nr_bytes - result_offset);\n+\tfile_size = file_handle->GetFileSize();\n+\tread_position += bytes_read;\n+\tif (reset_enabled) {\n+\t\t// if reset caching is enabled, we need to cache the bytes that we have read\n+\t\tif (buffer_size + bytes_read >= buffer_capacity) {\n+\t\t\t// no space; first enlarge the buffer\n+\t\t\tbuffer_capacity = MaxValue<idx_t>(NextPowerOfTwo(buffer_size + bytes_read), buffer_capacity * 2);\n+\n+\t\t\tauto new_buffer = allocator.Allocate(buffer_capacity);\n+\t\t\tif (buffer_size > 0) {\n+\t\t\t\tmemcpy(new_buffer.get(), cached_buffer.get(), buffer_size);\n+\t\t\t}\n+\t\t\tcached_buffer = std::move(new_buffer);\n+\t\t}\n+\t\tmemcpy(cached_buffer.get() + buffer_size, (char *)buffer + result_offset, bytes_read);\n+\t\tbuffer_size += bytes_read;\n+\t}\n+\n+\treturn result_offset + bytes_read;\n+}\n+\n+string CSVFileHandle::ReadLine() {\n+\tbool carriage_return = false;\n+\tstring result;\n+\tchar buffer[1];\n+\twhile (true) {\n+\t\tidx_t bytes_read = Read(buffer, 1);\n+\t\tif (bytes_read == 0) {\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (carriage_return) {\n+\t\t\tif (buffer[0] != '\\n') {\n+\t\t\t\tif (!file_handle->CanSeek()) {\n+\t\t\t\t\tthrow BinderException(\n+\t\t\t\t\t    \"Carriage return newlines not supported when reading CSV files in which we cannot seek\");\n+\t\t\t\t}\n+\t\t\t\tfile_handle->Seek(file_handle->SeekPosition() - 1);\n+\t\t\t\treturn result;\n+\t\t\t}\n+\t\t}\n+\t\tif (buffer[0] == '\\n') {\n+\t\t\treturn result;\n+\t\t}\n+\t\tif (buffer[0] != '\\r') {\n+\t\t\tresult += buffer[0];\n+\t\t} else {\n+\t\t\tcarriage_return = true;\n+\t\t}\n+\t}\n+}\n+\n+void CSVFileHandle::DisableReset() {\n+\tthis->reset_enabled = false;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/execution/operator/persistent/csv_reader_options.cpp b/src/execution/operator/persistent/csv_reader_options.cpp\nindex 44268608ed98..42184d68bd10 100644\n--- a/src/execution/operator/persistent/csv_reader_options.cpp\n+++ b/src/execution/operator/persistent/csv_reader_options.cpp\n@@ -183,6 +183,12 @@ void BufferedCSVReaderOptions::SetReadOption(const string &loption, const Value\n }\n \n void BufferedCSVReaderOptions::SetWriteOption(const string &loption, const Value &value) {\n+\tif (loption == \"new_line\") {\n+\t\t// Steal this from SetBaseOption so we can write different newlines (e.g., format JSON ARRAY)\n+\t\twrite_newline = ParseString(value, loption);\n+\t\treturn;\n+\t}\n+\n \tif (SetBaseOption(loption, value)) {\n \t\treturn;\n \t}\n@@ -199,6 +205,10 @@ void BufferedCSVReaderOptions::SetWriteOption(const string &loption, const Value\n \t\t}\n \t\tSetDateFormat(LogicalTypeId::TIMESTAMP, format, false);\n \t\tSetDateFormat(LogicalTypeId::TIMESTAMP_TZ, format, false);\n+\t} else if (loption == \"prefix\") {\n+\t\tprefix = ParseString(value, loption);\n+\t} else if (loption == \"suffix\") {\n+\t\tsuffix = ParseString(value, loption);\n \t} else {\n \t\tthrow BinderException(\"Unrecognized option CSV writer \\\"%s\\\"\", loption);\n \t}\ndiff --git a/src/execution/operator/persistent/parallel_csv_reader.cpp b/src/execution/operator/persistent/parallel_csv_reader.cpp\nindex eae60f55cb5a..35f142a4a2cd 100644\n--- a/src/execution/operator/persistent/parallel_csv_reader.cpp\n+++ b/src/execution/operator/persistent/parallel_csv_reader.cpp\n@@ -15,19 +15,20 @@\n #include \"utf8proc.hpp\"\n #include \"duckdb/parser/keyword_helper.hpp\"\n #include \"duckdb/function/table/read_csv.hpp\"\n+#include \"duckdb/execution/operator/persistent/csv_line_info.hpp\"\n \n #include <algorithm>\n #include <cctype>\n #include <cstring>\n #include <fstream>\n-#include <utility>\n \n namespace duckdb {\n \n ParallelCSVReader::ParallelCSVReader(ClientContext &context, BufferedCSVReaderOptions options_p,\n                                      unique_ptr<CSVBufferRead> buffer_p, idx_t first_pos_first_buffer_p,\n-                                     const vector<LogicalType> &requested_types)\n-    : BaseCSVReader(context, std::move(options_p), requested_types), first_pos_first_buffer(first_pos_first_buffer_p) {\n+                                     const vector<LogicalType> &requested_types, idx_t file_idx_p)\n+    : BaseCSVReader(context, std::move(options_p), requested_types), file_idx(file_idx_p),\n+      first_pos_first_buffer(first_pos_first_buffer_p) {\n \tInitialize(requested_types);\n \tSetBufferRead(std::move(buffer_p));\n \tif (options.delimiter.size() > 1 || options.escape.size() > 1 || options.quote.size() > 1) {\n@@ -35,9 +36,6 @@ ParallelCSVReader::ParallelCSVReader(ClientContext &context, BufferedCSVReaderOp\n \t}\n }\n \n-ParallelCSVReader::~ParallelCSVReader() {\n-}\n-\n void ParallelCSVReader::Initialize(const vector<LogicalType> &requested_types) {\n \treturn_types = requested_types;\n \tInitParseChunk(return_types.size());\n@@ -76,7 +74,7 @@ void ParallelCSVReader::SkipEmptyLines() {\n \t}\n }\n \n-bool ParallelCSVReader::SetPosition(DataChunk &insert_chunk) {\n+bool ParallelCSVReader::SetPosition() {\n \tif (buffer->buffer->IsCSVFileFirstBuffer() && start_buffer == position_buffer &&\n \t    start_buffer == first_pos_first_buffer) {\n \t\tstart_buffer = buffer->buffer->GetStart();\n@@ -84,7 +82,7 @@ bool ParallelCSVReader::SetPosition(DataChunk &insert_chunk) {\n \t\tverification_positions.beginning_of_first_line = position_buffer;\n \t\tverification_positions.end_of_last_line = position_buffer;\n \t\t// First buffer doesn't need any setting\n-\t\t// Unless we have a header\n+\n \t\tif (options.header) {\n \t\t\tfor (; position_buffer < end_buffer; position_buffer++) {\n \t\t\t\tif (StringUtil::CharacterIsNewline((*buffer)[position_buffer])) {\n@@ -205,10 +203,8 @@ void ParallelCSVReader::SetBufferRead(unique_ptr<CSVBufferRead> buffer_read_p) {\n \t} else {\n \t\tbuffer_size = buffer_read_p->buffer->GetBufferSize();\n \t}\n-\tlinenr = buffer_read_p->estimated_linenr;\n \tbuffer = std::move(buffer_read_p);\n \n-\tlinenr_estimated = true;\n \treached_remainder_state = false;\n \tverification_positions.beginning_of_first_line = 0;\n \tverification_positions.end_of_last_line = 0;\n@@ -239,10 +235,12 @@ bool ParallelCSVReader::BufferRemainder() {\n \treturn true;\n }\n \n-void VerifyLineLength(idx_t line_size, idx_t max_line_size) {\n-\tif (line_size > max_line_size) {\n-\t\t// FIXME: this should also output the correct estimated linenumber where it broke\n-\t\tthrow InvalidInputException(\"Maximum line size of %llu bytes exceeded!\", max_line_size);\n+void ParallelCSVReader::VerifyLineLength(idx_t line_size) {\n+\tif (line_size > options.maximum_line_size) {\n+\t\tthrow InvalidInputException(\"Error in file \\\"%s\\\" on line %s: Maximum line size of %llu bytes exceeded!\",\n+\t\t                            options.file_path,\n+\t\t                            GetLineNumberStr(parse_chunk.size(), linenr_estimated, buffer->batch_index).c_str(),\n+\t\t                            options.maximum_line_size);\n \t}\n }\n \n@@ -261,6 +259,33 @@ bool AllNewLine(string_t value, idx_t column_amount) {\n }\n \n bool ParallelCSVReader::TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message, bool try_add_line) {\n+\t// If line is not set, we have to figure it out, we assume whatever is in the first line\n+\tif (options.new_line == NewLineIdentifier::NOT_SET) {\n+\t\tidx_t cur_pos = position_buffer;\n+\t\t// we can start in the middle of a new line, so move a bit forward.\n+\t\twhile (cur_pos < end_buffer) {\n+\t\t\tif (StringUtil::CharacterIsNewline((*buffer)[cur_pos])) {\n+\t\t\t\tcur_pos++;\n+\t\t\t} else {\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t\tfor (; cur_pos < end_buffer; cur_pos++) {\n+\t\t\tif (StringUtil::CharacterIsNewline((*buffer)[cur_pos])) {\n+\t\t\t\tbool carriage_return = (*buffer)[cur_pos] == '\\r';\n+\t\t\t\tbool carriage_return_followed = false;\n+\t\t\t\tcur_pos++;\n+\t\t\t\tif (cur_pos < end_buffer) {\n+\t\t\t\t\tif (carriage_return && (*buffer)[cur_pos] == '\\n') {\n+\t\t\t\t\t\tcarriage_return_followed = true;\n+\t\t\t\t\t\tcur_pos++;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tSetNewLineDelimiter(carriage_return, carriage_return_followed);\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t}\n+\t}\n \t// used for parsing algorithm\n \tif (start_buffer == buffer_size) {\n \t\t// Nothing to read\n@@ -276,7 +301,7 @@ bool ParallelCSVReader::TryParseSimpleCSV(DataChunk &insert_chunk, string &error\n \tvector<idx_t> escape_positions;\n \tif ((start_buffer == buffer->buffer_start || start_buffer == buffer->buffer_end) && !try_add_line) {\n \t\t// First time reading this buffer piece\n-\t\tif (!SetPosition(insert_chunk)) {\n+\t\tif (!SetPosition()) {\n \t\t\tfinished = true;\n \t\t\treturn true;\n \t\t}\n@@ -340,7 +365,8 @@ normal : {\n \n add_value : {\n \t/* state: Add value to string vector */\n-\tAddValue(buffer->GetValue(start_buffer, position_buffer, offset), column, escape_positions, has_quotes);\n+\tAddValue(buffer->GetValue(start_buffer, position_buffer, offset), column, escape_positions, has_quotes,\n+\t         buffer->local_batch_index);\n \t// increase position by 1 and move start to the new position\n \toffset = 0;\n \thas_quotes = false;\n@@ -356,20 +382,23 @@ add_row : {\n \t// check type of newline (\\r or \\n)\n \tbool carriage_return = (*buffer)[position_buffer] == '\\r';\n \n-\tAddValue(buffer->GetValue(start_buffer, position_buffer, offset), column, escape_positions, has_quotes);\n+\tAddValue(buffer->GetValue(start_buffer, position_buffer, offset), column, escape_positions, has_quotes,\n+\t         buffer->local_batch_index);\n \tif (try_add_line) {\n \t\tbool success = column == insert_chunk.ColumnCount();\n \t\tif (success) {\n-\t\t\tAddRow(insert_chunk, column, error_message);\n-\t\t\tsuccess = Flush(insert_chunk);\n+\t\t\tidx_t cur_linenr = linenr;\n+\t\t\tAddRow(insert_chunk, column, error_message, buffer->local_batch_index);\n+\t\t\tsuccess = Flush(insert_chunk, buffer->local_batch_index, true);\n+\t\t\tlinenr = cur_linenr;\n \t\t}\n \t\treached_remainder_state = false;\n \t\tparse_chunk.Reset();\n \t\treturn success;\n \t} else {\n-\t\tVerifyLineLength(position_buffer - line_start, options.maximum_line_size);\n+\t\tVerifyLineLength(position_buffer - line_start);\n \t\tline_start = position_buffer;\n-\t\tfinished_chunk = AddRow(insert_chunk, column, error_message);\n+\t\tfinished_chunk = AddRow(insert_chunk, column, error_message, buffer->local_batch_index);\n \t}\n \t// increase position by 1 and move start to the new position\n \toffset = 0;\n@@ -377,15 +406,12 @@ add_row : {\n \tposition_buffer++;\n \tstart_buffer = position_buffer;\n \tverification_positions.end_of_last_line = position_buffer;\n-\tif (reached_remainder_state) {\n-\t\tgoto final_state;\n-\t}\n-\tif (!BufferRemainder()) {\n-\t\tgoto final_state;\n-\t}\n \tif (carriage_return) {\n \t\t// \\r newline, go to special state that parses an optional \\n afterwards\n \t\t// optionally skips a newline (\\n) character, which allows \\r\\n to be interpreted as a single line\n+\t\tif (!BufferRemainder()) {\n+\t\t\tgoto final_state;\n+\t\t}\n \t\tif ((*buffer)[position_buffer] == '\\n') {\n \t\t\tif (options.new_line == NewLineIdentifier::SINGLE) {\n \t\t\t\terror_message = \"Wrong NewLine Identifier. Expecting \\\\r\\\\n\";\n@@ -419,6 +445,12 @@ add_row : {\n \t\t\terror_message = \"Wrong NewLine Identifier. Expecting \\\\r or \\\\n\";\n \t\t\treturn false;\n \t\t}\n+\t\tif (reached_remainder_state) {\n+\t\t\tgoto final_state;\n+\t\t}\n+\t\tif (!BufferRemainder()) {\n+\t\t\tgoto final_state;\n+\t\t}\n \t\tSkipEmptyLines();\n \t\tverification_positions.end_of_last_line = position_buffer;\n \t\tstart_buffer = position_buffer;\n@@ -451,7 +483,8 @@ add_row : {\n \t\t\t}\n \t\t\t// still in quoted state at the end of the file or at the end of a buffer when running multithreaded, error:\n \t\t\tthrow InvalidInputException(\"Error in file \\\"%s\\\" on line %s: unterminated quotes. (%s)\", options.file_path,\n-\t\t\t                            GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());\n+\t\t\t                            GetLineNumberStr(linenr, linenr_estimated, buffer->local_batch_index).c_str(),\n+\t\t\t                            options.ToString());\n \t\t} else {\n \t\t\tgoto final_state;\n \t\t}\n@@ -492,7 +525,8 @@ unquote : {\n \t\terror_message = StringUtil::Format(\n \t\t    \"Error in file \\\"%s\\\" on line %s: quote should be followed by end of value, end of \"\n \t\t    \"row or another quote. (%s). \",\n-\t\t    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());\n+\t\t    options.file_path, GetLineNumberStr(linenr, linenr_estimated, buffer->local_batch_index).c_str(),\n+\t\t    options.ToString());\n \t\treturn false;\n \t}\n }\n@@ -506,13 +540,13 @@ handle_escape : {\n \tif (position_buffer >= buffer_size && buffer->buffer->IsCSVFileLastBuffer()) {\n \t\terror_message = StringUtil::Format(\n \t\t    \"Error in file \\\"%s\\\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)\", options.file_path,\n-\t\t    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());\n+\t\t    GetLineNumberStr(linenr, linenr_estimated, buffer->local_batch_index).c_str(), options.ToString());\n \t\treturn false;\n \t}\n \tif ((*buffer)[position_buffer] != options.quote[0] && (*buffer)[position_buffer] != options.escape[0]) {\n \t\terror_message = StringUtil::Format(\n \t\t    \"Error in file \\\"%s\\\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)\", options.file_path,\n-\t\t    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.ToString());\n+\t\t    GetLineNumberStr(linenr, linenr_estimated, buffer->local_batch_index).c_str(), options.ToString());\n \t\treturn false;\n \t}\n \t// escape was followed by quote or escape, go back to quoted state\n@@ -535,6 +569,7 @@ final_state : {\n \t\t\t\tfinished = true;\n \t\t\t}\n \t\t}\n+\t\tbuffer->lines_read += insert_chunk.size();\n \t\treturn true;\n \t}\n \t// If this is the last buffer, we have to read the last value\n@@ -544,20 +579,22 @@ final_state : {\n \t\t\t// remaining values to be added to the chunk\n \t\t\tauto str_value = buffer->GetValue(start_buffer, position_buffer, offset);\n \t\t\tif (!AllNewLine(str_value, insert_chunk.data.size()) || offset == 0) {\n-\t\t\t\tAddValue(str_value, column, escape_positions, has_quotes);\n+\t\t\t\tAddValue(str_value, column, escape_positions, has_quotes, buffer->local_batch_index);\n \t\t\t\tif (try_add_line) {\n \t\t\t\t\tbool success = column == return_types.size();\n \t\t\t\t\tif (success) {\n-\t\t\t\t\t\tAddRow(insert_chunk, column, error_message);\n-\t\t\t\t\t\tsuccess = Flush(insert_chunk);\n+\t\t\t\t\t\tauto cur_linenr = linenr;\n+\t\t\t\t\t\tAddRow(insert_chunk, column, error_message, buffer->local_batch_index);\n+\t\t\t\t\t\tsuccess = Flush(insert_chunk, buffer->local_batch_index);\n+\t\t\t\t\t\tlinenr = cur_linenr;\n \t\t\t\t\t}\n \t\t\t\t\tparse_chunk.Reset();\n \t\t\t\t\treached_remainder_state = false;\n \t\t\t\t\treturn success;\n \t\t\t\t} else {\n-\t\t\t\t\tVerifyLineLength(position_buffer - line_start, options.maximum_line_size);\n+\t\t\t\t\tVerifyLineLength(position_buffer - line_start);\n \t\t\t\t\tline_start = position_buffer;\n-\t\t\t\t\tAddRow(insert_chunk, column, error_message);\n+\t\t\t\t\tAddRow(insert_chunk, column, error_message, buffer->local_batch_index);\n \t\t\t\t\tverification_positions.end_of_last_line = position_buffer;\n \t\t\t\t}\n \t\t\t}\n@@ -565,7 +602,8 @@ final_state : {\n \t}\n \t// flush the parsed chunk and finalize parsing\n \tif (mode == ParserMode::PARSING) {\n-\t\tFlush(insert_chunk);\n+\t\tFlush(insert_chunk, buffer->local_batch_index);\n+\t\tbuffer->lines_read += insert_chunk.size();\n \t}\n \tif (position_buffer - verification_positions.end_of_last_line > options.buffer_size) {\n \t\terror_message = \"Line does not fit in one buffer. Increase the buffer size.\";\n@@ -597,6 +635,16 @@ void ParallelCSVReader::ParseCSV(DataChunk &insert_chunk) {\n \t}\n }\n \n+idx_t ParallelCSVReader::GetLineError(idx_t line_error, idx_t buffer_idx) {\n+\twhile (true) {\n+\t\tif (buffer->line_info->CanItGetLine(file_idx, buffer_idx)) {\n+\t\t\tauto cur_start = verification_positions.beginning_of_first_line + buffer->buffer->GetCSVGlobalStart();\n+\t\t\t// line errors are 1-indexed\n+\t\t\treturn buffer->line_info->GetLine(buffer_idx, line_error, file_idx, cur_start, false);\n+\t\t}\n+\t}\n+}\n+\n bool ParallelCSVReader::TryParseCSV(ParserMode mode) {\n \tDataChunk dummy_chunk;\n \tstring error_message;\ndiff --git a/src/execution/operator/persistent/physical_copy_to_file.cpp b/src/execution/operator/persistent/physical_copy_to_file.cpp\nindex e451397fc7ec..9887a6fd5551 100644\n--- a/src/execution/operator/persistent/physical_copy_to_file.cpp\n+++ b/src/execution/operator/persistent/physical_copy_to_file.cpp\n@@ -207,8 +207,7 @@ unique_ptr<GlobalSinkState> PhysicalCopyToFile::GetGlobalSinkState(ClientContext\n \t\t\tfs.CreateDirectory(file_path);\n \t\t} else if (!overwrite_or_ignore) {\n \t\t\tidx_t n_files = 0;\n-\t\t\tfs.ListFiles(\n-\t\t\t    file_path, [&n_files](const string &path, bool) { n_files++; }, FileOpener::Get(context));\n+\t\t\tfs.ListFiles(file_path, [&n_files](const string &path, bool) { n_files++; });\n \t\t\tif (n_files > 0) {\n \t\t\t\tthrow IOException(\"Directory %s is not empty! Enable OVERWRITE_OR_IGNORE option to force writing\",\n \t\t\t\t                  file_path);\ndiff --git a/src/execution/operator/persistent/physical_export.cpp b/src/execution/operator/persistent/physical_export.cpp\nindex 81eab43d7109..e836688fec11 100644\n--- a/src/execution/operator/persistent/physical_export.cpp\n+++ b/src/execution/operator/persistent/physical_export.cpp\n@@ -27,10 +27,10 @@ static void WriteCatalogEntries(stringstream &ss, vector<reference<CatalogEntry>\n \tss << std::endl;\n }\n \n-static void WriteStringStreamToFile(FileSystem &fs, FileOpener *opener, stringstream &ss, const string &path) {\n+static void WriteStringStreamToFile(FileSystem &fs, stringstream &ss, const string &path) {\n \tauto ss_string = ss.str();\n \tauto handle = fs.OpenFile(path, FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW,\n-\t                          FileLockType::WRITE_LOCK, FileSystem::DEFAULT_COMPRESSION, opener);\n+\t                          FileLockType::WRITE_LOCK);\n \tfs.Write(*handle, (void *)ss_string.c_str(), ss_string.size());\n \thandle.reset();\n }\n@@ -51,8 +51,8 @@ static void WriteCopyStatement(FileSystem &fs, stringstream &ss, CopyInfo &info,\n \t\tss << KeywordHelper::WriteOptionallyQuoted(exported_table.schema_name) << \".\";\n \t}\n \n-\tss << KeywordHelper::WriteOptionallyQuoted(exported_table.table_name) << \" FROM '\" << exported_table.file_path\n-\t   << \"' (\";\n+\tss << StringUtil::Format(\"%s FROM %s (\", SQLIdentifier(exported_table.table_name),\n+\t                         SQLString(exported_table.file_path));\n \n \t// write the copy options\n \tss << \"FORMAT '\" << info.format << \"'\";\n@@ -70,6 +70,9 @@ static void WriteCopyStatement(FileSystem &fs, stringstream &ss, CopyInfo &info,\n \t\t}\n \t}\n \tfor (auto &copy_option : info.options) {\n+\t\tif (copy_option.first == \"force_quote\") {\n+\t\t\tcontinue;\n+\t\t}\n \t\tss << \", \" << copy_option.first << \" \";\n \t\tif (copy_option.second.size() == 1) {\n \t\t\tWriteValueAsSQL(ss, copy_option.second[0]);\n@@ -105,7 +108,6 @@ SourceResultType PhysicalExport::GetData(ExecutionContext &context, DataChunk &c\n \n \tauto &ccontext = context.client;\n \tauto &fs = FileSystem::GetFileSystem(ccontext);\n-\tauto *opener = FileSystem::GetFileOpener(ccontext);\n \n \t// gather all catalog types to export\n \tvector<reference<CatalogEntry>> schemas;\n@@ -169,7 +171,7 @@ SourceResultType PhysicalExport::GetData(ExecutionContext &context, DataChunk &c\n \tWriteCatalogEntries(ss, indexes);\n \tWriteCatalogEntries(ss, macros);\n \n-\tWriteStringStreamToFile(fs, opener, ss, fs.JoinPath(info->file_path, \"schema.sql\"));\n+\tWriteStringStreamToFile(fs, ss, fs.JoinPath(info->file_path, \"schema.sql\"));\n \n \t// write the load.sql file\n \t// for every table, we write COPY INTO statement with the specified options\n@@ -178,7 +180,7 @@ SourceResultType PhysicalExport::GetData(ExecutionContext &context, DataChunk &c\n \t\tauto exported_table_info = exported_tables.data[i].table_data;\n \t\tWriteCopyStatement(fs, load_ss, *info, exported_table_info, function);\n \t}\n-\tWriteStringStreamToFile(fs, opener, load_ss, fs.JoinPath(info->file_path, \"load.sql\"));\n+\tWriteStringStreamToFile(fs, load_ss, fs.JoinPath(info->file_path, \"load.sql\"));\n \tstate.finished = true;\n \n \treturn SourceResultType::FINISHED;\ndiff --git a/src/execution/operator/projection/physical_pivot.cpp b/src/execution/operator/projection/physical_pivot.cpp\nindex 13a4c36425d7..c0dc7f0cdcfb 100644\n--- a/src/execution/operator/projection/physical_pivot.cpp\n+++ b/src/execution/operator/projection/physical_pivot.cpp\n@@ -19,7 +19,7 @@ PhysicalPivot::PhysicalPivot(vector<LogicalType> types_p, unique_ptr<PhysicalOpe\n \tfor (auto &aggr_expr : bound_pivot.aggregates) {\n \t\tauto &aggr = (BoundAggregateExpression &)*aggr_expr;\n \t\t// for each aggregate, initialize an empty aggregate state and finalize it immediately\n-\t\tauto state = unique_ptr<data_t[]>(new data_t[aggr.function.state_size()]);\n+\t\tauto state = make_unsafe_uniq_array<data_t>(aggr.function.state_size());\n \t\taggr.function.initialize(state.get());\n \t\tVector state_vector(Value::POINTER((uintptr_t)state.get()));\n \t\tVector result_vector(aggr_expr->return_type);\ndiff --git a/src/execution/operator/schema/physical_create_type.cpp b/src/execution/operator/schema/physical_create_type.cpp\nindex 8cab65897c62..483904427f60 100644\n--- a/src/execution/operator/schema/physical_create_type.cpp\n+++ b/src/execution/operator/schema/physical_create_type.cpp\n@@ -7,9 +7,9 @@\n \n namespace duckdb {\n \n-PhysicalCreateType::PhysicalCreateType(unique_ptr<CreateTypeInfo> info, idx_t estimated_cardinality)\n+PhysicalCreateType::PhysicalCreateType(unique_ptr<CreateTypeInfo> info_p, idx_t estimated_cardinality)\n     : PhysicalOperator(PhysicalOperatorType::CREATE_TYPE, {LogicalType::BIGINT}, estimated_cardinality),\n-      info(std::move(info)) {\n+      info(std::move(info_p)) {\n }\n \n //===--------------------------------------------------------------------===//\ndiff --git a/src/execution/perfect_aggregate_hashtable.cpp b/src/execution/perfect_aggregate_hashtable.cpp\nindex 0524791d8837..defa0a93fa6b 100644\n--- a/src/execution/perfect_aggregate_hashtable.cpp\n+++ b/src/execution/perfect_aggregate_hashtable.cpp\n@@ -23,11 +23,11 @@ PerfectAggregateHashTable::PerfectAggregateHashTable(ClientContext &context, All\n \ttuple_size = layout.GetRowWidth();\n \n \t// allocate and null initialize the data\n-\towned_data = unique_ptr<data_t[]>(new data_t[tuple_size * total_groups]);\n+\towned_data = make_unsafe_uniq_array<data_t>(tuple_size * total_groups);\n \tdata = owned_data.get();\n \n \t// set up the empty payloads for every tuple, and initialize the \"occupied\" flag to false\n-\tgroup_is_set = unique_ptr<bool[]>(new bool[total_groups]);\n+\tgroup_is_set = make_unsafe_uniq_array<bool>(total_groups);\n \tmemset(group_is_set.get(), 0, total_groups * sizeof(bool));\n \n \t// initialize the hash table for each entry\ndiff --git a/src/execution/physical_plan/plan_copy_to_file.cpp b/src/execution/physical_plan/plan_copy_to_file.cpp\nindex 6b102972a81d..0fe227512c7f 100644\n--- a/src/execution/physical_plan/plan_copy_to_file.cpp\n+++ b/src/execution/physical_plan/plan_copy_to_file.cpp\n@@ -11,7 +11,7 @@ unique_ptr<PhysicalOperator> PhysicalPlanGenerator::CreatePlan(LogicalCopyToFile\n \tbool preserve_insertion_order = PhysicalPlanGenerator::PreserveInsertionOrder(context, *plan);\n \tbool supports_batch_index = PhysicalPlanGenerator::UseBatchIndex(context, *plan);\n \tauto &fs = FileSystem::GetFileSystem(context);\n-\top.file_path = fs.ExpandPath(op.file_path, FileSystem::GetFileOpener(context));\n+\top.file_path = fs.ExpandPath(op.file_path);\n \tif (op.use_tmp_file) {\n \t\top.file_path += \".tmp\";\n \t}\ndiff --git a/src/execution/radix_partitioned_hashtable.cpp b/src/execution/radix_partitioned_hashtable.cpp\nindex c9ed716d8d19..0a052eab9e83 100644\n--- a/src/execution/radix_partitioned_hashtable.cpp\n+++ b/src/execution/radix_partitioned_hashtable.cpp\n@@ -334,7 +334,7 @@ class RadixHTGlobalSourceState : public GlobalSourceState {\n \t//! The current position to scan the HT for output tuples\n \tidx_t ht_index;\n \t//! The set of aggregate scan states\n-\tunique_ptr<TupleDataParallelScanState[]> ht_scan_states;\n+\tunsafe_unique_array<TupleDataParallelScanState> ht_scan_states;\n \tatomic<bool> initialized;\n \tatomic<bool> finished;\n };\n@@ -404,7 +404,7 @@ SourceResultType RadixPartitionedHashTable::GetData(ExecutionContext &context, D\n \t\tfor (idx_t i = 0; i < op.aggregates.size(); i++) {\n \t\t\tD_ASSERT(op.aggregates[i]->GetExpressionClass() == ExpressionClass::BOUND_AGGREGATE);\n \t\t\tauto &aggr = op.aggregates[i]->Cast<BoundAggregateExpression>();\n-\t\t\tauto aggr_state = unique_ptr<data_t[]>(new data_t[aggr.function.state_size()]);\n+\t\t\tauto aggr_state = make_unsafe_uniq_array<data_t>(aggr.function.state_size());\n \t\t\taggr.function.initialize(aggr_state.get());\n \n \t\t\tAggregateInputData aggr_input_data(aggr.bind_info.get(), Allocator::DefaultAllocator());\n@@ -433,8 +433,7 @@ SourceResultType RadixPartitionedHashTable::GetData(ExecutionContext &context, D\n \t\tlock_guard<mutex> l(state.lock);\n \t\tif (!state.initialized) {\n \t\t\tauto &finalized_hts = gstate.finalized_hts;\n-\t\t\tstate.ht_scan_states =\n-\t\t\t    unique_ptr<TupleDataParallelScanState[]>(new TupleDataParallelScanState[finalized_hts.size()]);\n+\t\t\tstate.ht_scan_states = make_unsafe_uniq_array<TupleDataParallelScanState>(finalized_hts.size());\n \n \t\t\tconst auto &layout = gstate.finalized_hts[0]->GetDataCollection().GetLayout();\n \t\t\tvector<column_t> column_ids;\ndiff --git a/src/execution/window_segment_tree.cpp b/src/execution/window_segment_tree.cpp\nindex 85a49b8fa5b8..02a2577823ed 100644\n--- a/src/execution/window_segment_tree.cpp\n+++ b/src/execution/window_segment_tree.cpp\n@@ -309,7 +309,7 @@ void WindowSegmentTree::ConstructTree() {\n \t\tlevel_nodes = (level_nodes + (TREE_FANOUT - 1)) / TREE_FANOUT;\n \t\tinternal_nodes += level_nodes;\n \t} while (level_nodes > 1);\n-\tlevels_flat_native = unique_ptr<data_t[]>(new data_t[internal_nodes * state.size()]);\n+\tlevels_flat_native = make_unsafe_uniq_array<data_t>(internal_nodes * state.size());\n \tlevels_flat_start.push_back(0);\n \n \tidx_t levels_flat_offset = 0;\ndiff --git a/src/function/cast/cast_function_set.cpp b/src/function/cast/cast_function_set.cpp\nindex 09c6bc058b78..b470dde8efa2 100644\n--- a/src/function/cast/cast_function_set.cpp\n+++ b/src/function/cast/cast_function_set.cpp\n@@ -1,8 +1,9 @@\n #include \"duckdb/function/cast/cast_function_set.hpp\"\n-#include \"duckdb/main/config.hpp\"\n-#include \"duckdb/common/types/type_map.hpp\"\n+\n #include \"duckdb/common/pair.hpp\"\n+#include \"duckdb/common/types/type_map.hpp\"\n #include \"duckdb/function/cast_rules.hpp\"\n+#include \"duckdb/main/config.hpp\"\n \n namespace duckdb {\n \n@@ -65,19 +66,90 @@ struct MapCastNode {\n \tint64_t implicit_cast_cost;\n };\n \n+template <class MAP_VALUE_TYPE>\n+static auto RelaxedTypeMatch(type_map_t<MAP_VALUE_TYPE> &map, const LogicalType &type) -> decltype(map.find(type)) {\n+\tD_ASSERT(map.find(type) == map.end()); // we shouldn't be here\n+\tswitch (type.id()) {\n+\tcase LogicalTypeId::LIST:\n+\t\treturn map.find(LogicalType::LIST(LogicalType::ANY));\n+\tcase LogicalTypeId::STRUCT:\n+\t\treturn map.find(LogicalType::STRUCT({{\"any\", LogicalType::ANY}}));\n+\tcase LogicalTypeId::MAP:\n+\t\tfor (auto it = map.begin(); it != map.end(); it++) {\n+\t\t\tconst auto &entry_type = it->first;\n+\t\t\tif (entry_type.id() != LogicalTypeId::MAP) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tauto &entry_key_type = MapType::KeyType(entry_type);\n+\t\t\tauto &entry_val_type = MapType::ValueType(entry_type);\n+\t\t\tif ((entry_key_type == LogicalType::ANY || entry_key_type == MapType::KeyType(type)) &&\n+\t\t\t    (entry_val_type == LogicalType::ANY || entry_val_type == MapType::ValueType(type))) {\n+\t\t\t\treturn it;\n+\t\t\t}\n+\t\t}\n+\t\treturn map.end();\n+\tcase LogicalTypeId::UNION:\n+\t\treturn map.find(LogicalType::UNION({{\"any\", LogicalType::ANY}}));\n+\tdefault:\n+\t\treturn map.find(LogicalType::ANY);\n+\t}\n+}\n+\n struct MapCastInfo : public BindCastInfo {\n-\ttype_map_t<type_map_t<MapCastNode>> casts;\n+public:\n+\tconst optional_ptr<MapCastNode> GetEntry(const LogicalType &source, const LogicalType &target) {\n+\t\tauto source_type_id_entry = casts.find(source.id());\n+\t\tif (source_type_id_entry == casts.end()) {\n+\t\t\tsource_type_id_entry = casts.find(LogicalTypeId::ANY);\n+\t\t\tif (source_type_id_entry == casts.end()) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t}\n+\n+\t\tauto &source_type_entries = source_type_id_entry->second;\n+\t\tauto source_type_entry = source_type_entries.find(source);\n+\t\tif (source_type_entry == source_type_entries.end()) {\n+\t\t\tsource_type_entry = RelaxedTypeMatch(source_type_entries, source);\n+\t\t\tif (source_type_entry == source_type_entries.end()) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t}\n+\n+\t\tauto &target_type_id_entries = source_type_entry->second;\n+\t\tauto target_type_id_entry = target_type_id_entries.find(target.id());\n+\t\tif (target_type_id_entry == target_type_id_entries.end()) {\n+\t\t\ttarget_type_id_entry = target_type_id_entries.find(LogicalTypeId::ANY);\n+\t\t\tif (target_type_id_entry == target_type_id_entries.end()) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t}\n+\n+\t\tauto &target_type_entries = target_type_id_entry->second;\n+\t\tauto target_type_entry = target_type_entries.find(target);\n+\t\tif (target_type_entry == target_type_entries.end()) {\n+\t\t\ttarget_type_entry = RelaxedTypeMatch(target_type_entries, target);\n+\t\t\tif (target_type_entry == target_type_entries.end()) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn &target_type_entry->second;\n+\t}\n+\n+\tvoid AddEntry(const LogicalType &source, const LogicalType &target, MapCastNode node) {\n+\t\tcasts[source.id()][source][target.id()].insert(make_pair(target, std::move(node)));\n+\t}\n+\n+private:\n+\ttype_id_map_t<type_map_t<type_id_map_t<type_map_t<MapCastNode>>>> casts;\n };\n \n int64_t CastFunctionSet::ImplicitCastCost(const LogicalType &source, const LogicalType &target) {\n \t// check if a cast has been registered\n \tif (map_info) {\n-\t\tauto source_entry = map_info->casts.find(source);\n-\t\tif (source_entry != map_info->casts.end()) {\n-\t\t\tauto target_entry = source_entry->second.find(target);\n-\t\t\tif (target_entry != source_entry->second.end()) {\n-\t\t\t\treturn target_entry->second.implicit_cast_cost;\n-\t\t\t}\n+\t\tauto entry = map_info->GetEntry(source, target);\n+\t\tif (entry) {\n+\t\t\treturn entry->implicit_cast_cost;\n \t\t}\n \t}\n \t// if not, fallback to the default implicit cast rules\n@@ -87,22 +159,14 @@ int64_t CastFunctionSet::ImplicitCastCost(const LogicalType &source, const Logic\n BoundCastInfo MapCastFunction(BindCastInput &input, const LogicalType &source, const LogicalType &target) {\n \tD_ASSERT(input.info);\n \tauto &map_info = (MapCastInfo &)*input.info;\n-\tauto &casts = map_info.casts;\n-\n-\tauto entry = casts.find(source);\n-\tif (entry == casts.end()) {\n-\t\t// source type not found\n-\t\treturn nullptr;\n-\t}\n-\tauto target_entry = entry->second.find(target);\n-\tif (target_entry == entry->second.end()) {\n-\t\t// target type not found\n-\t\treturn nullptr;\n-\t}\n-\tif (target_entry->second.bind_function) {\n-\t\treturn target_entry->second.bind_function(input, source, target);\n+\tauto entry = map_info.GetEntry(source, target);\n+\tif (entry) {\n+\t\tif (entry->bind_function) {\n+\t\t\treturn entry->bind_function(input, source, target);\n+\t\t}\n+\t\treturn entry->cast_info.Copy();\n \t}\n-\treturn target_entry->second.cast_info.Copy();\n+\treturn nullptr;\n }\n \n void CastFunctionSet::RegisterCastFunction(const LogicalType &source, const LogicalType &target, BoundCastInfo function,\n@@ -122,7 +186,7 @@ void CastFunctionSet::RegisterCastFunction(const LogicalType &source, const Logi\n \t\tmap_info = info.get();\n \t\tbind_functions.emplace_back(MapCastFunction, std::move(info));\n \t}\n-\tmap_info->casts[source].insert(make_pair(target, std::move(node)));\n+\tmap_info->AddEntry(source, target, std::move(node));\n }\n \n } // namespace duckdb\ndiff --git a/src/function/macro_function.cpp b/src/function/macro_function.cpp\nindex a899f067d2ad..6af2cae0d306 100644\n--- a/src/function/macro_function.cpp\n+++ b/src/function/macro_function.cpp\n@@ -5,6 +5,7 @@\n #include \"duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/function/scalar_macro_function.hpp\"\n+#include \"duckdb/function/table_macro_function.hpp\"\n #include \"duckdb/parser/expression/columnref_expression.hpp\"\n #include \"duckdb/parser/expression/comparison_expression.hpp\"\n #include \"duckdb/parser/expression/function_expression.hpp\"\n@@ -91,4 +92,46 @@ string MacroFunction::ToSQL(const string &schema, const string &name) const {\n \treturn StringUtil::Format(\"CREATE MACRO %s.%s(%s) AS \", schema, name, StringUtil::Join(param_strings, \", \"));\n }\n \n+void MacroFunction::Serialize(Serializer &main_serializer) const {\n+\tFieldWriter writer(main_serializer);\n+\twriter.WriteField(type);\n+\twriter.WriteSerializableList(parameters);\n+\twriter.WriteField<uint32_t>((uint32_t)default_parameters.size());\n+\tauto &serializer = writer.GetSerializer();\n+\tfor (auto &kv : default_parameters) {\n+\t\tserializer.WriteString(kv.first);\n+\t\tkv.second->Serialize(serializer);\n+\t}\n+\tSerializeInternal(writer);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<MacroFunction> MacroFunction::Deserialize(Deserializer &main_source) {\n+\tFieldReader reader(main_source);\n+\tauto type = reader.ReadRequired<MacroType>();\n+\tauto parameters = reader.ReadRequiredSerializableList<ParsedExpression>();\n+\tauto default_param_count = reader.ReadRequired<uint32_t>();\n+\tunordered_map<string, unique_ptr<ParsedExpression>> default_parameters;\n+\tauto &source = reader.GetSource();\n+\tfor (idx_t i = 0; i < default_param_count; i++) {\n+\t\tauto name = source.Read<string>();\n+\t\tdefault_parameters[name] = ParsedExpression::Deserialize(source);\n+\t}\n+\tunique_ptr<MacroFunction> result;\n+\tswitch (type) {\n+\tcase MacroType::SCALAR_MACRO:\n+\t\tresult = ScalarMacroFunction::Deserialize(reader);\n+\t\tbreak;\n+\tcase MacroType::TABLE_MACRO:\n+\t\tresult = TableMacroFunction::Deserialize(reader);\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow InternalException(\"Cannot deserialize macro type\");\n+\t}\n+\tresult->parameters = std::move(parameters);\n+\tresult->default_parameters = std::move(default_parameters);\n+\treader.Finalize();\n+\treturn result;\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/pragma/pragma_queries.cpp b/src/function/pragma/pragma_queries.cpp\nindex 7f900b7ff294..61a7cf4d1d5b 100644\n--- a/src/function/pragma/pragma_queries.cpp\n+++ b/src/function/pragma/pragma_queries.cpp\n@@ -22,20 +22,26 @@ string PragmaShowTables(ClientContext &context, const FunctionParameters &parame\n \tauto schema = ClientData::Get(context).catalog_search_path->GetDefault().schema;\n \tschema = (schema == INVALID_SCHEMA) ? DEFAULT_SCHEMA : schema; // NOLINT\n \n-\tauto where_clause =\n-\t    StringUtil::Join({\"where database_name = '\", catalog, \"' and schema_name = '\", schema, \"'\"}, \"\");\n+\tauto where_clause = StringUtil::Format(\"where ((database_name = '%s') and (schema_name = '%s'))\", catalog, schema);\n \t// clang-format off\n-\tauto pragma_query = StringUtil::Join(\n-\t    {\"with tables as (\", \n-\t\t\t\t\t\t\"\tSELECT table_name as name FROM duckdb_tables \", where_clause, \n-\t\t\t \"), views as (\",\n-\t\t\t\t\t\t\"\tSELECT view_name as name FROM duckdb_views \", where_clause, \n-\t\t\t \"), indexes as (\",\n-\t\t\t\t\t\t\"\tSELECT index_name as name FROM duckdb_indexes \", where_clause, \n-\t\t\t \"), db_objects as (\",\n-\t\t\t\t\t\t\"\tSELECT name FROM tables UNION ALL SELECT name FROM views UNION ALL SELECT name FROM indexes\",\n-\t     \") SELECT name FROM db_objects ORDER BY name;\"\n-\t\t\t}, \"\");\n+\tauto pragma_query = StringUtil::Format(R\"EOF(\n+\twith \"tables\" as\n+\t(\n+\t\tSELECT table_name as \"name\"\n+\t\tFROM duckdb_tables %s\n+\t), \"views\" as\n+\t(\n+\t\tSELECT view_name as \"name\"\n+\t\tFROM duckdb_views %s\n+\t), db_objects as\n+\t(\n+\t\tSELECT \"name\" FROM \"tables\"\n+\t\tUNION ALL\n+\t\tSELECT \"name\" FROM \"views\"\n+\t)\n+\tSELECT \"name\"\n+\tFROM db_objects\n+\tORDER BY \"name\";)EOF\", where_clause, where_clause);\n \t// clang-format on\n \n \treturn pragma_query;\n@@ -44,15 +50,17 @@ string PragmaShowTables(ClientContext &context, const FunctionParameters &parame\n string PragmaShowTablesExpanded(ClientContext &context, const FunctionParameters &parameters) {\n \treturn R\"(\n \t\t\tSELECT\n+\t\t\t\tt.database_name AS database,\n+\t\t\t\tt.schema_name AS schema,\n \t\t\t\tt.table_name,\n \t\t\t\tLIST(c.column_name order by c.column_index) AS column_names,\n \t\t\t\tLIST(c.data_type order by c.column_index) AS column_types,\n-\t\t\t\tFIRST(t.temporary) AS temporary\n+\t\t\t\tFIRST(t.temporary) AS temporary,\n \t\t\tFROM duckdb_tables t\n \t\t\tJOIN duckdb_columns c\n \t\t\tUSING (table_oid)\n-\t\t\tGROUP BY t.table_name\n-\t\t\tORDER BY t.table_name;\n+\t\t\tGROUP BY t.database_name, t.schema_name, t.table_name\n+\t\t\tORDER BY t.database_name, t.schema_name, t.table_name;\n \t)\";\n }\n \n@@ -124,7 +132,6 @@ string PragmaImportDatabase(ClientContext &context, const FunctionParameters &pa\n \t\tthrow PermissionException(\"Import is disabled through configuration\");\n \t}\n \tauto &fs = FileSystem::GetFileSystem(context);\n-\tauto *opener = FileSystem::GetFileOpener(context);\n \n \tstring final_query;\n \t// read the \"shema.sql\" and \"load.sql\" files\n@@ -132,9 +139,9 @@ string PragmaImportDatabase(ClientContext &context, const FunctionParameters &pa\n \tfor (auto &file : files) {\n \t\tauto file_path = fs.JoinPath(parameters.values[0].ToString(), file);\n \t\tauto handle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_READ, FileSystem::DEFAULT_LOCK,\n-\t\t                          FileSystem::DEFAULT_COMPRESSION, opener);\n+\t\t                          FileSystem::DEFAULT_COMPRESSION);\n \t\tauto fsize = fs.GetFileSize(*handle);\n-\t\tauto buffer = unique_ptr<char[]>(new char[fsize]);\n+\t\tauto buffer = make_unsafe_uniq_array<char>(fsize);\n \t\tfs.Read(*handle, buffer.get(), fsize);\n \t\tauto query = string(buffer.get(), fsize);\n \t\t// Replace the placeholder with the path provided to IMPORT\ndiff --git a/src/function/scalar/strftime_format.cpp b/src/function/scalar/strftime_format.cpp\nindex 54a9fc8d48e9..7245d4ca6707 100644\n--- a/src/function/scalar/strftime_format.cpp\n+++ b/src/function/scalar/strftime_format.cpp\n@@ -408,7 +408,7 @@ string StrfTimeFormat::Format(timestamp_t timestamp, const string &format_str) {\n \tauto time = Timestamp::GetTime(timestamp);\n \n \tauto len = format.GetLength(date, time, 0, nullptr);\n-\tauto result = unique_ptr<char[]>(new char[len]);\n+\tauto result = make_unsafe_uniq_array<char>(len);\n \tformat.FormatString(date, time, result.get());\n \treturn string(result.get(), len);\n }\n@@ -417,6 +417,7 @@ string StrTimeFormat::ParseFormatSpecifier(const string &format_string, StrTimeF\n \tif (format_string.empty()) {\n \t\treturn \"Empty format string\";\n \t}\n+\tformat.format_specifier = format_string;\n \tformat.specifiers.clear();\n \tformat.literals.clear();\n \tformat.numeric_width.clear();\ndiff --git a/src/function/scalar/string/concat.cpp b/src/function/scalar/string/concat.cpp\nindex 01a598c0046f..764e1da7cf47 100644\n--- a/src/function/scalar/string/concat.cpp\n+++ b/src/function/scalar/string/concat.cpp\n@@ -118,7 +118,7 @@ static void TemplatedConcatWS(DataChunk &args, string_t *sep_data, const Selecti\n                               const SelectionVector &rsel, idx_t count, Vector &result) {\n \tvector<idx_t> result_lengths(args.size(), 0);\n \tvector<bool> has_results(args.size(), false);\n-\tauto orrified_data = unique_ptr<UnifiedVectorFormat[]>(new UnifiedVectorFormat[args.ColumnCount() - 1]);\n+\tauto orrified_data = make_unsafe_uniq_array<UnifiedVectorFormat>(args.ColumnCount() - 1);\n \tfor (idx_t col_idx = 1; col_idx < args.ColumnCount(); col_idx++) {\n \t\targs.data[col_idx].ToUnifiedFormat(args.size(), orrified_data[col_idx - 1]);\n \t}\ndiff --git a/src/function/scalar/string/like.cpp b/src/function/scalar/string/like.cpp\nindex cb4f2331ef4f..bb35ad8fd574 100644\n--- a/src/function/scalar/string/like.cpp\n+++ b/src/function/scalar/string/like.cpp\n@@ -395,11 +395,11 @@ bool ILikeOperatorFunction(string_t &str, string_t &pattern, char escape = '\\0')\n \n \t// lowercase both the str and the pattern\n \tidx_t str_llength = LowerFun::LowerLength(str_data, str_size);\n-\tauto str_ldata = unique_ptr<char[]>(new char[str_llength]);\n+\tauto str_ldata = make_unsafe_uniq_array<char>(str_llength);\n \tLowerFun::LowerCase(str_data, str_size, str_ldata.get());\n \n \tidx_t pat_llength = LowerFun::LowerLength(pat_data, pat_size);\n-\tauto pat_ldata = unique_ptr<char[]>(new char[pat_llength]);\n+\tauto pat_ldata = make_unsafe_uniq_array<char>(pat_llength);\n \tLowerFun::LowerCase(pat_data, pat_size, pat_ldata.get());\n \tstring_t str_lcase(str_ldata.get(), str_llength);\n \tstring_t pat_lcase(pat_ldata.get(), pat_llength);\ndiff --git a/src/function/scalar/system/aggregate_export.cpp b/src/function/scalar/system/aggregate_export.cpp\nindex b010a810174b..8e6e00dfe27b 100644\n--- a/src/function/scalar/system/aggregate_export.cpp\n+++ b/src/function/scalar/system/aggregate_export.cpp\n@@ -36,12 +36,12 @@ struct ExportAggregateBindData : public FunctionData {\n struct CombineState : public FunctionLocalState {\n \tidx_t state_size;\n \n-\tunique_ptr<data_t[]> state_buffer0, state_buffer1;\n+\tunsafe_unique_array<data_t> state_buffer0, state_buffer1;\n \tVector state_vector0, state_vector1;\n \n \texplicit CombineState(idx_t state_size_p)\n-\t    : state_size(state_size_p), state_buffer0(unique_ptr<data_t[]>(new data_t[state_size_p])),\n-\t      state_buffer1(unique_ptr<data_t[]>(new data_t[state_size_p])),\n+\t    : state_size(state_size_p), state_buffer0(make_unsafe_uniq_array<data_t>(state_size_p)),\n+\t      state_buffer1(make_unsafe_uniq_array<data_t>(state_size_p)),\n \t      state_vector0(Value::POINTER((uintptr_t)state_buffer0.get())),\n \t      state_vector1(Value::POINTER((uintptr_t)state_buffer1.get())) {\n \t}\n@@ -55,12 +55,12 @@ static unique_ptr<FunctionLocalState> InitCombineState(ExpressionState &state, c\n \n struct FinalizeState : public FunctionLocalState {\n \tidx_t state_size;\n-\tunique_ptr<data_t[]> state_buffer;\n+\tunsafe_unique_array<data_t> state_buffer;\n \tVector addresses;\n \n \texplicit FinalizeState(idx_t state_size_p)\n \t    : state_size(state_size_p),\n-\t      state_buffer(unique_ptr<data_t[]>(new data_t[STANDARD_VECTOR_SIZE * AlignValue(state_size_p)])),\n+\t      state_buffer(make_unsafe_uniq_array<data_t>(STANDARD_VECTOR_SIZE * AlignValue(state_size_p))),\n \t      addresses(LogicalType::POINTER) {\n \t}\n };\ndiff --git a/src/function/scalar_macro_function.cpp b/src/function/scalar_macro_function.cpp\nindex 07f7b788b95e..4303659b273c 100644\n--- a/src/function/scalar_macro_function.cpp\n+++ b/src/function/scalar_macro_function.cpp\n@@ -49,4 +49,14 @@ string ScalarMacroFunction::ToSQL(const string &schema, const string &name) cons\n \treturn MacroFunction::ToSQL(schema, name) + StringUtil::Format(\"(%s);\", expression_copy->ToString());\n }\n \n+void ScalarMacroFunction::SerializeInternal(FieldWriter &writer) const {\n+\twriter.WriteSerializable(*expression);\n+}\n+\n+unique_ptr<MacroFunction> ScalarMacroFunction::Deserialize(FieldReader &reader) {\n+\tauto result = make_uniq<ScalarMacroFunction>();\n+\tresult->expression = reader.ReadRequiredSerializable<ParsedExpression>();\n+\treturn std::move(result);\n+}\n+\n } // namespace duckdb\ndiff --git a/src/function/table/copy_csv.cpp b/src/function/table/copy_csv.cpp\nindex 61f0cc5f2276..7988f534674b 100644\n--- a/src/function/table/copy_csv.cpp\n+++ b/src/function/table/copy_csv.cpp\n@@ -1,15 +1,16 @@\n #include \"duckdb/common/bind_helpers.hpp\"\n #include \"duckdb/common/file_system.hpp\"\n+#include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/common/serializer/buffered_serializer.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n+#include \"duckdb/common/types/column/column_data_collection.hpp\"\n #include \"duckdb/common/types/string_type.hpp\"\n #include \"duckdb/common/vector_operations/vector_operations.hpp\"\n #include \"duckdb/function/copy_function.hpp\"\n #include \"duckdb/function/scalar/string_functions.hpp\"\n #include \"duckdb/function/table/read_csv.hpp\"\n #include \"duckdb/parser/parsed_data/copy_info.hpp\"\n-#include \"duckdb/common/multi_file_reader.hpp\"\n-#include \"duckdb/common/types/column/column_data_collection.hpp\"\n+\n #include <limits>\n \n namespace duckdb {\n@@ -57,6 +58,15 @@ void BaseCSVData::Finalize() {\n \t\t\tSubstringDetection(options.escape, options.null_str, \"ESCAPE\", \"NULL\");\n \t\t}\n \t}\n+\n+\tif (!options.prefix.empty() || !options.suffix.empty()) {\n+\t\tif (options.prefix.empty() || options.suffix.empty()) {\n+\t\t\tthrow BinderException(\"COPY ... (FORMAT CSV) must have both PREFIX and SUFFIX, or none at all\");\n+\t\t}\n+\t\tif (options.header) {\n+\t\t\tthrow BinderException(\"COPY ... (FORMAT CSV)'s HEADER cannot be combined with PREFIX/SUFFIX\");\n+\t\t}\n+\t}\n }\n \n static unique_ptr<FunctionData> WriteCSVBind(ClientContext &context, CopyInfo &info, vector<string> &names,\n@@ -78,13 +88,16 @@ static unique_ptr<FunctionData> WriteCSVBind(ClientContext &context, CopyInfo &i\n \tbind_data->is_simple = bind_data->options.delimiter.size() == 1 && bind_data->options.escape.size() == 1 &&\n \t                       bind_data->options.quote.size() == 1;\n \tif (bind_data->is_simple) {\n-\t\tbind_data->requires_quotes = unique_ptr<bool[]>(new bool[256]);\n+\t\tbind_data->requires_quotes = make_unsafe_uniq_array<bool>(256);\n \t\tmemset(bind_data->requires_quotes.get(), 0, sizeof(bool) * 256);\n \t\tbind_data->requires_quotes['\\n'] = true;\n \t\tbind_data->requires_quotes['\\r'] = true;\n \t\tbind_data->requires_quotes[bind_data->options.delimiter[0]] = true;\n \t\tbind_data->requires_quotes[bind_data->options.quote[0]] = true;\n \t}\n+\tif (!bind_data->options.write_newline.empty()) {\n+\t\tbind_data->newline = bind_data->options.write_newline;\n+\t}\n \treturn std::move(bind_data);\n }\n \n@@ -251,25 +264,41 @@ struct LocalWriteCSVData : public LocalFunctionData {\n \tBufferedSerializer serializer;\n \t//! A chunk with VARCHAR columns to cast intermediates into\n \tDataChunk cast_chunk;\n+\t//! If we've written any rows yet, allows us to prevent a trailing comma when writing JSON ARRAY\n+\tbool written_anything = false;\n };\n \n struct GlobalWriteCSVData : public GlobalFunctionData {\n-\tGlobalWriteCSVData(FileSystem &fs, const string &file_path, FileOpener *opener, FileCompressionType compression)\n-\t    : fs(fs) {\n+\tGlobalWriteCSVData(FileSystem &fs, const string &file_path, FileCompressionType compression)\n+\t    : fs(fs), written_anything(false) {\n \t\thandle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW,\n-\t\t                     FileLockType::WRITE_LOCK, compression, opener);\n+\t\t                     FileLockType::WRITE_LOCK, compression);\n \t}\n \n+\t//! Write generic data, e.g., CSV header\n \tvoid WriteData(const_data_ptr_t data, idx_t size) {\n \t\tlock_guard<mutex> flock(lock);\n \t\thandle->Write((void *)data, size);\n \t}\n \n+\t//! Write rows\n+\tvoid WriteRows(const_data_ptr_t data, idx_t size, const string &newline) {\n+\t\tlock_guard<mutex> flock(lock);\n+\t\tif (written_anything) {\n+\t\t\thandle->Write((void *)newline.c_str(), newline.length());\n+\t\t} else {\n+\t\t\twritten_anything = true;\n+\t\t}\n+\t\thandle->Write((void *)data, size);\n+\t}\n+\n \tFileSystem &fs;\n \t//! The mutex for writing to the physical file\n \tmutex lock;\n \t//! The file handle to write to\n \tunique_ptr<FileHandle> handle;\n+\t//! If we've written any rows yet, allows us to prevent a trailing comma when writing JSON ARRAY\n+\tbool written_anything;\n };\n \n static unique_ptr<LocalFunctionData> WriteCSVInitializeLocal(ExecutionContext &context, FunctionData &bind_data) {\n@@ -288,8 +317,12 @@ static unique_ptr<GlobalFunctionData> WriteCSVInitializeGlobal(ClientContext &co\n                                                                const string &file_path) {\n \tauto &csv_data = bind_data.Cast<WriteCSVData>();\n \tauto &options = csv_data.options;\n-\tauto global_data = make_uniq<GlobalWriteCSVData>(FileSystem::GetFileSystem(context), file_path,\n-\t                                                 FileSystem::GetFileOpener(context), options.compression);\n+\tauto global_data =\n+\t    make_uniq<GlobalWriteCSVData>(FileSystem::GetFileSystem(context), file_path, options.compression);\n+\n+\tif (!options.prefix.empty()) {\n+\t\tglobal_data->WriteData((const_data_ptr_t)options.prefix.c_str(), options.prefix.size());\n+\t}\n \n \tif (options.header) {\n \t\tBufferedSerializer serializer;\n@@ -305,11 +338,12 @@ static unique_ptr<GlobalFunctionData> WriteCSVInitializeGlobal(ClientContext &co\n \n \t\tglobal_data->WriteData(serializer.blob.data.get(), serializer.blob.size);\n \t}\n+\n \treturn std::move(global_data);\n }\n \n static void WriteCSVChunkInternal(ClientContext &context, FunctionData &bind_data, DataChunk &cast_chunk,\n-                                  BufferedSerializer &writer, DataChunk &input) {\n+                                  BufferedSerializer &writer, DataChunk &input, bool &written_anything) {\n \tauto &csv_data = bind_data.Cast<WriteCSVData>();\n \tauto &options = csv_data.options;\n \n@@ -325,15 +359,11 @@ static void WriteCSVChunkInternal(ClientContext &context, FunctionData &bind_dat\n \t\t\tcsv_data.options.write_date_format[LogicalTypeId::DATE].ConvertDateVector(\n \t\t\t    input.data[col_idx], cast_chunk.data[col_idx], input.size());\n \t\t} else if (options.has_format[LogicalTypeId::TIMESTAMP] &&\n-\t\t           csv_data.sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP) {\n+\t\t           (csv_data.sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP ||\n+\t\t            csv_data.sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP_TZ)) {\n \t\t\t// use the timestamp format to cast the chunk\n \t\t\tcsv_data.options.write_date_format[LogicalTypeId::TIMESTAMP].ConvertTimestampVector(\n \t\t\t    input.data[col_idx], cast_chunk.data[col_idx], input.size());\n-\t\t} else if (options.has_format[LogicalTypeId::TIMESTAMP_TZ] &&\n-\t\t           csv_data.sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP_TZ) {\n-\t\t\t// use the timestamp format to cast the chunk\n-\t\t\tcsv_data.options.write_date_format[LogicalTypeId::TIMESTAMP_TZ].ConvertTimestampVector(\n-\t\t\t    input.data[col_idx], cast_chunk.data[col_idx], input.size());\n \t\t} else {\n \t\t\t// non varchar column, perform the cast\n \t\t\tVectorOperations::Cast(context, input.data[col_idx], cast_chunk.data[col_idx], input.size());\n@@ -343,6 +373,11 @@ static void WriteCSVChunkInternal(ClientContext &context, FunctionData &bind_dat\n \tcast_chunk.Flatten();\n \t// now loop over the vectors and output the values\n \tfor (idx_t row_idx = 0; row_idx < cast_chunk.size(); row_idx++) {\n+\t\tif (row_idx == 0 && !written_anything) {\n+\t\t\twritten_anything = true;\n+\t\t} else {\n+\t\t\twriter.WriteBufferData(csv_data.newline);\n+\t\t}\n \t\t// write values\n \t\tfor (idx_t col_idx = 0; col_idx < cast_chunk.ColumnCount(); col_idx++) {\n \t\t\tif (col_idx != 0) {\n@@ -362,7 +397,6 @@ static void WriteCSVChunkInternal(ClientContext &context, FunctionData &bind_dat\n \t\t\tWriteQuotedString(writer, csv_data, str_data[row_idx].GetData(), str_data[row_idx].GetSize(),\n \t\t\t                  csv_data.options.force_quote[col_idx]);\n \t\t}\n-\t\twriter.WriteBufferData(csv_data.newline);\n \t}\n }\n \n@@ -373,13 +407,15 @@ static void WriteCSVSink(ExecutionContext &context, FunctionData &bind_data, Glo\n \tauto &global_state = gstate.Cast<GlobalWriteCSVData>();\n \n \t// write data into the local buffer\n-\tWriteCSVChunkInternal(context.client, bind_data, local_data.cast_chunk, local_data.serializer, input);\n+\tWriteCSVChunkInternal(context.client, bind_data, local_data.cast_chunk, local_data.serializer, input,\n+\t                      local_data.written_anything);\n \n \t// check if we should flush what we have currently written\n \tauto &writer = local_data.serializer;\n \tif (writer.blob.size >= csv_data.flush_size) {\n-\t\tglobal_state.WriteData(writer.blob.data.get(), writer.blob.size);\n+\t\tglobal_state.WriteRows(writer.blob.data.get(), writer.blob.size, csv_data.newline);\n \t\twriter.Reset();\n+\t\tlocal_data.written_anything = false;\n \t}\n }\n \n@@ -390,10 +426,11 @@ static void WriteCSVCombine(ExecutionContext &context, FunctionData &bind_data,\n                             LocalFunctionData &lstate) {\n \tauto &local_data = lstate.Cast<LocalWriteCSVData>();\n \tauto &global_state = gstate.Cast<GlobalWriteCSVData>();\n+\tauto &csv_data = bind_data.Cast<WriteCSVData>();\n \tauto &writer = local_data.serializer;\n \t// flush the local writer\n-\tif (writer.blob.size > 0) {\n-\t\tglobal_state.WriteData(writer.blob.data.get(), writer.blob.size);\n+\tif (local_data.written_anything) {\n+\t\tglobal_state.WriteRows(writer.blob.data.get(), writer.blob.size, csv_data.newline);\n \t\twriter.Reset();\n \t}\n }\n@@ -403,6 +440,16 @@ static void WriteCSVCombine(ExecutionContext &context, FunctionData &bind_data,\n //===--------------------------------------------------------------------===//\n void WriteCSVFinalize(ClientContext &context, FunctionData &bind_data, GlobalFunctionData &gstate) {\n \tauto &global_state = gstate.Cast<GlobalWriteCSVData>();\n+\tauto &csv_data = bind_data.Cast<WriteCSVData>();\n+\tauto &options = csv_data.options;\n+\n+\tBufferedSerializer serializer;\n+\tif (!options.suffix.empty()) {\n+\t\tserializer.WriteBufferData(options.suffix);\n+\t} else if (global_state.written_anything) {\n+\t\tserializer.WriteBufferData(csv_data.newline);\n+\t}\n+\tglobal_state.WriteData(serializer.blob.data.get(), serializer.blob.size);\n \n \tglobal_state.handle->Close();\n \tglobal_state.handle.reset();\n@@ -439,10 +486,11 @@ unique_ptr<PreparedBatchData> WriteCSVPrepareBatch(ClientContext &context, Funct\n \tDataChunk cast_chunk;\n \tcast_chunk.Initialize(Allocator::Get(context), types);\n \n-\tauto batch = make_uniq<WriteCSVBatchData>();\n \t// write CSV chunks to the batch data\n+\tbool written_anything = false;\n+\tauto batch = make_uniq<WriteCSVBatchData>();\n \tfor (auto &chunk : collection->Chunks()) {\n-\t\tWriteCSVChunkInternal(context, bind_data, cast_chunk, batch->serializer, chunk);\n+\t\tWriteCSVChunkInternal(context, bind_data, cast_chunk, batch->serializer, chunk, written_anything);\n \t}\n \treturn std::move(batch);\n }\n@@ -454,8 +502,9 @@ void WriteCSVFlushBatch(ClientContext &context, FunctionData &bind_data, GlobalF\n                         PreparedBatchData &batch) {\n \tauto &csv_batch = batch.Cast<WriteCSVBatchData>();\n \tauto &global_state = gstate.Cast<GlobalWriteCSVData>();\n+\tauto &csv_data = bind_data.Cast<WriteCSVData>();\n \tauto &writer = csv_batch.serializer;\n-\tglobal_state.WriteData(writer.blob.data.get(), writer.blob.size);\n+\tglobal_state.WriteRows(writer.blob.data.get(), writer.blob.size, csv_data.newline);\n \twriter.Reset();\n }\n \ndiff --git a/src/function/table/read_csv.cpp b/src/function/table/read_csv.cpp\nindex d401ad778745..ff4b52643e4e 100644\n--- a/src/function/table/read_csv.cpp\n+++ b/src/function/table/read_csv.cpp\n@@ -4,7 +4,6 @@\n #include \"duckdb/main/database.hpp\"\n #include \"duckdb/common/string_util.hpp\"\n #include \"duckdb/common/enum_util.hpp\"\n-#include \"duckdb/common/hive_partitioning.hpp\"\n #include \"duckdb/common/union_by_name.hpp\"\n #include \"duckdb/main/config.hpp\"\n #include \"duckdb/parser/expression/constant_expression.hpp\"\n@@ -14,7 +13,7 @@\n #include \"duckdb/main/extension_helper.hpp\"\n #include \"duckdb/common/multi_file_reader.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n-\n+#include \"duckdb/execution/operator/persistent/csv_line_info.hpp\"\n #include <limits>\n \n namespace duckdb {\n@@ -22,13 +21,8 @@ namespace duckdb {\n unique_ptr<CSVFileHandle> ReadCSV::OpenCSV(const string &file_path, FileCompressionType compression,\n                                            ClientContext &context) {\n \tauto &fs = FileSystem::GetFileSystem(context);\n-\tauto opener = FileSystem::GetFileOpener(context);\n-\tauto file_handle =\n-\t    fs.OpenFile(file_path.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK, compression, opener);\n-\tif (file_handle->CanSeek()) {\n-\t\tfile_handle->Reset();\n-\t}\n-\treturn make_uniq<CSVFileHandle>(std::move(file_handle), false);\n+\tauto &allocator = BufferAllocator::Get(context);\n+\treturn CSVFileHandle::OpenFile(fs, allocator, file_path, compression, false);\n }\n \n void ReadCSVData::FinalizeRead(ClientContext &context) {\n@@ -39,8 +33,12 @@ void ReadCSVData::FinalizeRead(ClientContext &context) {\n \tbool complex_options = options.delimiter.size() > 1 || options.escape.size() > 1 || options.quote.size() > 1;\n \tbool not_supported_options = options.null_padding;\n \n-\tif (!options.run_parallel || null_or_empty || not_supported_options || complex_options ||\n-\t    options.new_line == NewLineIdentifier::MIX) {\n+\tauto number_of_threads = TaskScheduler::GetScheduler(context).NumberOfThreads();\n+\tif (options.parallel_mode != ParallelMode::PARALLEL && int64_t(files.size() * 2) >= number_of_threads) {\n+\t\tsingle_threaded = true;\n+\t}\n+\tif (options.parallel_mode == ParallelMode::SINGLE_THREADED || null_or_empty || not_supported_options ||\n+\t    complex_options || options.new_line == NewLineIdentifier::MIX) {\n \t\t// not supported for parallel CSV reading\n \t\tsingle_threaded = true;\n \t}\n@@ -179,7 +177,8 @@ static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, TableFunctio\n \t\t} else if (loption == \"normalize_names\") {\n \t\t\toptions.normalize_names = BooleanValue::Get(kv.second);\n \t\t} else if (loption == \"parallel\") {\n-\t\t\toptions.run_parallel = BooleanValue::Get(kv.second);\n+\t\t\toptions.parallel_mode =\n+\t\t\t    BooleanValue::Get(kv.second) ? ParallelMode::PARALLEL : ParallelMode::SINGLE_THREADED;\n \t\t} else {\n \t\t\toptions.SetReadOption(loption, kv.second, names);\n \t\t}\n@@ -239,14 +238,6 @@ static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, TableFunctio\n \t} else {\n \t\tresult->reader_bind = MultiFileReader::BindOptions(options.file_options, result->files, return_types, names);\n \t}\n-\tauto &fs = FileSystem::GetFileSystem(context);\n-\tfor (auto &file : result->files) {\n-\t\tif (fs.IsPipe(file)) {\n-\t\t\tresult->is_pipe = true;\n-\t\t\tresult->single_threaded = true;\n-\t\t\tbreak;\n-\t\t}\n-\t}\n \tresult->return_types = return_types;\n \tresult->return_names = names;\n \tresult->FinalizeRead(context);\n@@ -262,21 +253,24 @@ static unique_ptr<FunctionData> ReadCSVAutoBind(ClientContext &context, TableFun\n //===--------------------------------------------------------------------===//\n // Parallel CSV Reader CSV Global State\n //===--------------------------------------------------------------------===//\n-//===--------------------------------------------------------------------===//\n-// Read CSV Global State\n-//===--------------------------------------------------------------------===//\n+\n struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n public:\n \tParallelCSVGlobalState(ClientContext &context, unique_ptr<CSVFileHandle> file_handle_p,\n-\t                       vector<string> &files_path_p, idx_t system_threads_p, idx_t buffer_size_p,\n-\t                       idx_t rows_to_skip, bool force_parallelism_p, vector<column_t> column_ids_p)\n+\t                       const vector<string> &files_path_p, idx_t system_threads_p, idx_t buffer_size_p,\n+\t                       idx_t rows_to_skip, bool force_parallelism_p, vector<column_t> column_ids_p, bool has_header)\n \t    : file_handle(std::move(file_handle_p)), system_threads(system_threads_p), buffer_size(buffer_size_p),\n-\t      force_parallelism(force_parallelism_p), column_ids(std::move(column_ids_p)) {\n+\t      force_parallelism(force_parallelism_p), column_ids(std::move(column_ids_p)),\n+\t      line_info(main_mutex, batch_to_tuple_end, tuple_start, tuple_end) {\n \t\tfile_handle->DisableReset();\n \t\tcurrent_file_path = files_path_p[0];\n-\t\testimated_linenr = rows_to_skip;\n+\t\tline_info.lines_read[0] = rows_to_skip;\n+\t\tif (has_header) {\n+\t\t\tline_info.lines_read[0]++;\n+\t\t}\n \t\tfile_size = file_handle->FileSize();\n \t\tfirst_file_size = file_size;\n+\t\ton_disk_file = file_handle->OnDiskFile();\n \t\tbytes_read = 0;\n \t\tif (buffer_size < file_size || file_size == 0) {\n \t\t\tbytes_per_local_state = buffer_size / ParallelCSVGlobalState::MaxThreads();\n@@ -296,8 +290,16 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \t\tnext_buffer = shared_ptr<CSVBuffer>(\n \t\t    current_buffer->Next(*file_handle, buffer_size, current_csv_position, file_number).release());\n \t\trunning_threads = MaxThreads();\n+\n+\t\t// Initialize all the book-keeping variables\n+\t\tauto file_count = files_path_p.size();\n+\t\tline_info.current_batches.resize(file_count);\n+\t\ttuple_start.resize(file_count);\n+\t\ttuple_end.resize(file_count);\n+\t\ttuple_end_to_batch.resize(file_count);\n+\t\tbatch_to_tuple_end.resize(file_count);\n \t}\n-\tParallelCSVGlobalState() {\n+\tParallelCSVGlobalState() : line_info(main_mutex, batch_to_tuple_end, tuple_start, tuple_end) {\n \t\trunning_threads = MaxThreads();\n \t}\n \n@@ -316,7 +318,9 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \t//! Verify if the CSV File was read correctly\n \tvoid Verify();\n \n-\tvoid UpdateVerification(VerificationPositions positions, idx_t file_number);\n+\tvoid UpdateVerification(VerificationPositions positions, idx_t file_number, idx_t batch_idx);\n+\n+\tvoid UpdateLinesRead(CSVBufferRead &buffer_read, idx_t file_idx);\n \n \tvoid IncrementThread();\n \n@@ -324,7 +328,7 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \n \tbool Finished();\n \n-\tdouble GetProgress(ReadCSVData &bind_data) const {\n+\tdouble GetProgress(const ReadCSVData &bind_data) const {\n \t\tidx_t total_files = bind_data.files.size();\n \n \t\t// get the progress WITHIN the current file\n@@ -354,18 +358,20 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \tmutex main_mutex;\n \t//! Byte set from for last thread\n \tidx_t next_byte = 0;\n-\t//! The current estimated line number\n-\tidx_t estimated_linenr;\n \t//! How many bytes we should execute per local state\n \tidx_t bytes_per_local_state;\n \t//! Size of first file\n \tidx_t first_file_size;\n+\t//! Whether or not this is an on-disk file\n+\tbool on_disk_file = true;\n \t//! Basically max number of threads in DuckDB\n \tidx_t system_threads;\n \t//! Size of the buffers\n \tidx_t buffer_size;\n \t//! Current batch index\n \tidx_t batch_index = 0;\n+\tidx_t local_batch_index = 0;\n+\n \t//! Forces parallelism for small CSV Files, should only be used for testing.\n \tbool force_parallelism = false;\n \t//! Current (Global) position of CSV\n@@ -379,13 +385,19 @@ struct ParallelCSVGlobalState : public GlobalTableFunctionState {\n \t//! positions where they started reading the first line.\n \tvector<vector<idx_t>> tuple_end;\n \tvector<set<idx_t>> tuple_start;\n+\t//! Tuple end to batch\n+\tvector<unordered_map<idx_t, idx_t>> tuple_end_to_batch;\n+\t//! Batch to Tuple End\n+\tvector<unordered_map<idx_t, idx_t>> batch_to_tuple_end;\n \tidx_t running_threads = 0;\n \t//! The column ids to read\n \tvector<column_t> column_ids;\n+\t//! Line Info used in error messages\n+\tLineInfo line_info;\n };\n \n idx_t ParallelCSVGlobalState::MaxThreads() const {\n-\tif (force_parallelism) {\n+\tif (force_parallelism || !on_disk_file) {\n \t\treturn system_threads;\n \t}\n \tidx_t one_mb = 1000000; // We initialize max one thread per Mb\n@@ -425,32 +437,61 @@ void ParallelCSVGlobalState::Verify() {\n \t\t\t\treturn;\n \t\t\t}\n \t\t\tauto max_value = *max_element(std::begin(current_tuple_end), std::end(current_tuple_end));\n-\t\t\tfor (auto &last_pos : current_tuple_end) {\n+\t\t\tfor (idx_t tpl_idx = 0; tpl_idx < current_tuple_end.size(); tpl_idx++) {\n+\t\t\t\tauto last_pos = current_tuple_end[tpl_idx];\n \t\t\t\tauto first_pos = current_tuple_start.find(last_pos);\n \t\t\t\tif (first_pos == current_tuple_start.end()) {\n \t\t\t\t\t// this might be necessary due to carriage returns outside buffer scopes.\n \t\t\t\t\tfirst_pos = current_tuple_start.find(last_pos + 1);\n \t\t\t\t}\n \t\t\t\tif (first_pos == current_tuple_start.end() && last_pos != max_value) {\n-\t\t\t\t\tstring error =\n-\t\t\t\t\t    \"Not possible to read this CSV File with multithreading. Tuple: \" + to_string(last_pos) +\n-\t\t\t\t\t    \" does not have a match\\n\";\n-\t\t\t\t\terror += \"End Lines: \\n\";\n-\t\t\t\t\tfor (auto &end_line : current_tuple_end) {\n-\t\t\t\t\t\terror += to_string(end_line) + \"\\n\";\n-\t\t\t\t\t}\n-\t\t\t\t\terror += \"Start Lines: \\n\";\n-\t\t\t\t\tfor (auto &start_line : current_tuple_start) {\n-\t\t\t\t\t\terror += to_string(start_line) + \"\\n\";\n-\t\t\t\t\t}\n+\t\t\t\t\tauto batch_idx = tuple_end_to_batch[i][last_pos];\n+\t\t\t\t\tauto problematic_line = line_info.GetLine(batch_idx);\n \t\t\t\t\tthrow InvalidInputException(\n-\t\t\t\t\t    \"CSV File not supported for multithreading. Please run single-threaded CSV Reading\");\n+\t\t\t\t\t    \"CSV File not supported for multithreading. This can be a problematic line in your CSV File or \"\n+\t\t\t\t\t    \"that this CSV can't be read in Parallel. Please, inspect if the line %llu is correct. If so, \"\n+\t\t\t\t\t    \"please run single-threaded CSV Reading by setting parallel=false in the read_csv call.\",\n+\t\t\t\t\t    problematic_line);\n \t\t\t\t}\n \t\t\t}\n \t\t}\n \t}\n }\n \n+void LineInfo::Verify(idx_t file_idx, idx_t batch_idx, idx_t cur_first_pos) {\n+\tauto &tuple_start_set = tuple_start[file_idx];\n+\tauto &processed_batches = batch_to_tuple_end[file_idx];\n+\tauto &tuple_end_vec = tuple_end[file_idx];\n+\tbool has_error = false;\n+\tidx_t problematic_line;\n+\tif (batch_idx == 0 || tuple_start_set.empty()) {\n+\t\treturn;\n+\t}\n+\tfor (idx_t cur_batch = 0; cur_batch < batch_idx - 1; cur_batch++) {\n+\t\tauto cur_end = tuple_end_vec[processed_batches[cur_batch]];\n+\t\tauto first_pos = tuple_start_set.find(cur_end);\n+\t\tif (first_pos == tuple_start_set.end()) {\n+\t\t\thas_error = true;\n+\t\t\tproblematic_line = GetLine(cur_batch);\n+\t\t\tbreak;\n+\t\t}\n+\t}\n+\tif (!has_error) {\n+\t\tauto cur_end = tuple_end_vec[processed_batches[batch_idx - 1]];\n+\t\tif (cur_end != cur_first_pos) {\n+\t\t\thas_error = true;\n+\t\t\tproblematic_line = GetLine(batch_idx);\n+\t\t}\n+\t}\n+\tif (has_error) {\n+\t\tthrow InvalidInputException(\n+\t\t    \"CSV File not supported for multithreading. This can be a problematic line in your CSV File or \"\n+\t\t    \"that this CSV can't be read in Parallel. Please, inspect if the line %llu is correct. If so, \"\n+\t\t    \"please run single-threaded CSV Reading by setting parallel=false in the read_csv call.\",\n+\t\t    problematic_line);\n+\t}\n+}\n+\n bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bind_data,\n                                   unique_ptr<ParallelCSVReader> &reader) {\n \tlock_guard<mutex> parallel_lock(main_mutex);\n@@ -461,6 +502,7 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t\tfile_handle = ReadCSV::OpenCSV(current_file_path, bind_data.options.compression, context);\n \t\t\tcurrent_csv_position = 0;\n \t\t\tfile_number++;\n+\t\t\tlocal_batch_index = 0;\n \t\t\tcurrent_buffer =\n \t\t\t    make_shared<CSVBuffer>(context, buffer_size, *file_handle, current_csv_position, file_number);\n \t\t\tnext_buffer = shared_ptr<CSVBuffer>(\n@@ -472,11 +514,11 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t}\n \t}\n \t// set up the current buffer\n+\tline_info.current_batches.back().insert(local_batch_index);\n \tauto result = make_uniq<CSVBufferRead>(current_buffer, next_buffer, next_byte, next_byte + bytes_per_local_state,\n-\t                                       batch_index++, estimated_linenr);\n+\t                                       batch_index++, local_batch_index++, &line_info);\n \t// move the byte index of the CSV reader to the next buffer\n \tnext_byte += bytes_per_local_state;\n-\testimated_linenr += bytes_per_local_state / (bind_data.csv_types.size() * 5); // estimate 5 bytes per column\n \tif (next_byte >= current_buffer->GetBufferSize()) {\n \t\t// We replace the current buffer with the next buffer\n \t\tnext_byte = 0;\n@@ -495,17 +537,17 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t\t\t// we are doing UNION BY NAME - fetch the options from the union reader for this file\n \t\t\tauto &union_reader = *bind_data.union_readers[file_index - 1];\n \t\t\treader = make_uniq<ParallelCSVReader>(context, union_reader.options, std::move(result), first_position,\n-\t\t\t                                      union_reader.GetTypes());\n+\t\t\t                                      union_reader.GetTypes(), file_index - 1);\n \t\t\treader->names = union_reader.GetNames();\n \t\t} else if (file_index <= bind_data.column_info.size()) {\n \t\t\t// Serialized Union By name\n \t\t\treader = make_uniq<ParallelCSVReader>(context, bind_data.options, std::move(result), first_position,\n-\t\t\t                                      bind_data.column_info[file_index - 1].types);\n+\t\t\t                                      bind_data.column_info[file_index - 1].types, file_index - 1);\n \t\t\treader->names = bind_data.column_info[file_index - 1].names;\n \t\t} else {\n \t\t\t// regular file - use the standard options\n \t\t\treader = make_uniq<ParallelCSVReader>(context, bind_data.options, std::move(result), first_position,\n-\t\t\t                                      bind_data.csv_types);\n+\t\t\t                                      bind_data.csv_types, file_index - 1);\n \t\t\treader->names = bind_data.csv_names;\n \t\t}\n \t\treader->options.file_path = current_file_path;\n@@ -518,26 +560,73 @@ bool ParallelCSVGlobalState::Next(ClientContext &context, const ReadCSVData &bin\n \t}\n \treturn true;\n }\n-void ParallelCSVGlobalState::UpdateVerification(VerificationPositions positions, idx_t file_number_p) {\n+void ParallelCSVGlobalState::UpdateVerification(VerificationPositions positions, idx_t file_number_p, idx_t batch_idx) {\n \tlock_guard<mutex> parallel_lock(main_mutex);\n \tif (positions.beginning_of_first_line < positions.end_of_last_line) {\n \t\tif (positions.end_of_last_line > max_tuple_end) {\n \t\t\tmax_tuple_end = positions.end_of_last_line;\n \t\t}\n-\t\twhile (file_number_p >= tuple_start.size()) {\n-\t\t\tvector<idx_t> empty_tuple_end;\n-\t\t\tset<idx_t> empty_set;\n-\t\t\ttuple_start.emplace_back(empty_set);\n-\t\t\ttuple_end.emplace_back(empty_tuple_end);\n-\t\t}\n+\t\ttuple_end_to_batch[file_number_p][positions.end_of_last_line] = batch_idx;\n+\t\tbatch_to_tuple_end[file_number_p][batch_idx] = tuple_end[file_number_p].size();\n \t\ttuple_start[file_number_p].insert(positions.beginning_of_first_line);\n \t\ttuple_end[file_number_p].push_back(positions.end_of_last_line);\n \t}\n }\n \n+void ParallelCSVGlobalState::UpdateLinesRead(CSVBufferRead &buffer_read, idx_t file_idx) {\n+\tauto batch_idx = buffer_read.local_batch_index;\n+\tauto lines_read = buffer_read.lines_read;\n+\tlock_guard<mutex> parallel_lock(main_mutex);\n+\tline_info.current_batches[file_idx].erase(batch_idx);\n+\tline_info.lines_read[batch_idx] += lines_read;\n+}\n+\n+bool LineInfo::CanItGetLine(idx_t file_idx, idx_t batch_idx) {\n+\tlock_guard<mutex> parallel_lock(main_mutex);\n+\tif (current_batches.empty() || done) {\n+\t\treturn true;\n+\t}\n+\tif (file_idx >= current_batches.size() || current_batches[file_idx].empty()) {\n+\t\treturn true;\n+\t}\n+\tauto min_value = *current_batches[file_idx].begin();\n+\tif (min_value >= batch_idx) {\n+\t\treturn true;\n+\t}\n+\treturn false;\n+}\n+\n+// Returns the 1-indexed line number\n+idx_t LineInfo::GetLine(idx_t batch_idx, idx_t line_error, idx_t file_idx, idx_t cur_start, bool verify) {\n+\tunique_ptr<lock_guard<mutex>> parallel_lock;\n+\tif (!verify) {\n+\t\tparallel_lock = duckdb::make_uniq<lock_guard<mutex>>(main_mutex);\n+\t}\n+\tidx_t line_count = 0;\n+\tif (done) {\n+\t\t// line count is 0-indexed, but we want to return 1-indexed\n+\t\treturn first_line + 1;\n+\t}\n+\tfor (idx_t i = 0; i <= batch_idx; i++) {\n+\t\tif (lines_read.find(i) == lines_read.end() && i != batch_idx) {\n+\t\t\tthrow InternalException(\"Missing batch index on Parallel CSV Reader GetLine\");\n+\t\t}\n+\t\tline_count += lines_read[i];\n+\t}\n+\n+\t// before we are done, if this is not a call in Verify() we must check Verify up to this batch\n+\tif (!verify) {\n+\t\tVerify(file_idx, batch_idx, cur_start);\n+\t}\n+\tdone = true;\n+\tfirst_line = line_count + line_error;\n+\t// line count is 0-indexed, but we want to return 1-indexed\n+\treturn first_line + 1;\n+}\n+\n static unique_ptr<GlobalTableFunctionState> ParallelCSVInitGlobal(ClientContext &context,\n                                                                   TableFunctionInitInput &input) {\n-\tauto &bind_data = (ReadCSVData &)*input.bind_data;\n+\tauto &bind_data = input.bind_data->CastNoConst<ReadCSVData>();\n \tif (bind_data.files.empty()) {\n \t\t// This can happen when a filename based filter pushdown has eliminated all possible files for this scan.\n \t\treturn make_uniq<ParallelCSVGlobalState>();\n@@ -545,10 +634,19 @@ static unique_ptr<GlobalTableFunctionState> ParallelCSVInitGlobal(ClientContext\n \tunique_ptr<CSVFileHandle> file_handle;\n \n \tbind_data.options.file_path = bind_data.files[0];\n-\tfile_handle = ReadCSV::OpenCSV(bind_data.options.file_path, bind_data.options.compression, context);\n+\n+\tif (bind_data.initial_reader) {\n+\t\tfile_handle = std::move(bind_data.initial_reader->file_handle);\n+\t\tfile_handle->Reset();\n+\t\tfile_handle->DisableReset();\n+\t\tbind_data.initial_reader.reset();\n+\t} else {\n+\t\tfile_handle = ReadCSV::OpenCSV(bind_data.options.file_path, bind_data.options.compression, context);\n+\t}\n \treturn make_uniq<ParallelCSVGlobalState>(\n \t    context, std::move(file_handle), bind_data.files, context.db->NumberOfThreads(), bind_data.options.buffer_size,\n-\t    bind_data.options.skip_rows, ClientConfig::GetConfig(context).verify_parallelism, input.column_ids);\n+\t    bind_data.options.skip_rows, ClientConfig::GetConfig(context).verify_parallelism, input.column_ids,\n+\t    bind_data.options.header && bind_data.options.has_header);\n }\n \n //===--------------------------------------------------------------------===//\n@@ -597,9 +695,15 @@ static void ParallelReadCSVFunction(ClientContext &context, TableFunctionInput &\n \t\t\tauto verification_updates = csv_local_state.csv_reader->GetVerificationPositions();\n \t\t\tif (verification_updates.beginning_of_first_line != verification_updates.end_of_last_line) {\n \t\t\t\tcsv_global_state.UpdateVerification(verification_updates,\n-\t\t\t\t                                    csv_local_state.csv_reader->buffer->buffer->GetFileNumber());\n+\t\t\t\t                                    csv_local_state.csv_reader->buffer->buffer->GetFileNumber(),\n+\t\t\t\t                                    csv_local_state.csv_reader->buffer->local_batch_index);\n \t\t\t}\n+\t\t\tcsv_global_state.UpdateLinesRead(*csv_local_state.csv_reader->buffer, csv_local_state.csv_reader->file_idx);\n \t\t\tauto has_next = csv_global_state.Next(context, bind_data, csv_local_state.csv_reader);\n+\t\t\tif (csv_local_state.csv_reader) {\n+\t\t\t\tcsv_local_state.csv_reader->linenr = 0;\n+\t\t\t}\n+\n \t\t\tif (!has_next) {\n \t\t\t\tcsv_global_state.DecrementThread();\n \t\t\t\tbreak;\n@@ -640,7 +744,7 @@ struct SingleThreadedCSVState : public GlobalTableFunctionState {\n \t\treturn total_files;\n \t}\n \n-\tdouble GetProgress(ReadCSVData &bind_data) const {\n+\tdouble GetProgress(const ReadCSVData &bind_data) const {\n \t\tD_ASSERT(total_files == bind_data.files.size());\n \t\tD_ASSERT(progress_in_files <= total_files * 100);\n \t\treturn (double(progress_in_files) / double(total_files));\n@@ -648,6 +752,16 @@ struct SingleThreadedCSVState : public GlobalTableFunctionState {\n \n \tunique_ptr<BufferedCSVReader> GetCSVReader(ClientContext &context, ReadCSVData &bind_data, idx_t &file_index,\n \t                                           idx_t &total_size) {\n+\t\tauto reader = GetCSVReaderInternal(context, bind_data, file_index, total_size);\n+\t\tif (reader) {\n+\t\t\treader->file_handle->DisableReset();\n+\t\t}\n+\t\treturn reader;\n+\t}\n+\n+private:\n+\tunique_ptr<BufferedCSVReader> GetCSVReaderInternal(ClientContext &context, ReadCSVData &bind_data,\n+\t                                                   idx_t &file_index, idx_t &total_size) {\n \t\tBufferedCSVReaderOptions options;\n \t\t{\n \t\t\tlock_guard<mutex> l(csv_lock);\n@@ -701,14 +815,14 @@ struct SingleThreadedCSVLocalState : public LocalTableFunctionState {\n \n static unique_ptr<GlobalTableFunctionState> SingleThreadedCSVInit(ClientContext &context,\n                                                                   TableFunctionInitInput &input) {\n-\tauto &bind_data = (ReadCSVData &)*input.bind_data;\n+\tauto &bind_data = input.bind_data->CastNoConst<ReadCSVData>();\n \tauto result = make_uniq<SingleThreadedCSVState>(bind_data.files.size());\n \tif (bind_data.files.empty()) {\n \t\t// This can happen when a filename based filter pushdown has eliminated all possible files for this scan.\n \t\treturn std::move(result);\n \t} else {\n \t\tbind_data.options.file_path = bind_data.files[0];\n-\t\tif (bind_data.initial_reader && bind_data.is_pipe) {\n+\t\tif (bind_data.initial_reader) {\n \t\t\t// If this is a pipe and an initial reader already exists due to read_csv_auto\n \t\t\t// We must re-use it, since we can't restart the reader due for it being a pipe.\n \t\t\tresult->initial_reader = std::move(bind_data.initial_reader);\n@@ -806,7 +920,7 @@ static void SingleThreadedCSVFunction(ClientContext &context, TableFunctionInput\n // Read CSV Functions\n //===--------------------------------------------------------------------===//\n static unique_ptr<GlobalTableFunctionState> ReadCSVInitGlobal(ClientContext &context, TableFunctionInitInput &input) {\n-\tauto &bind_data = (ReadCSVData &)*input.bind_data;\n+\tauto &bind_data = input.bind_data->Cast<ReadCSVData>();\n \tif (bind_data.single_threaded) {\n \t\treturn SingleThreadedCSVInit(context, input);\n \t} else {\n@@ -816,7 +930,7 @@ static unique_ptr<GlobalTableFunctionState> ReadCSVInitGlobal(ClientContext &con\n \n unique_ptr<LocalTableFunctionState> ReadCSVInitLocal(ExecutionContext &context, TableFunctionInitInput &input,\n                                                      GlobalTableFunctionState *global_state_p) {\n-\tauto &csv_data = (ReadCSVData &)*input.bind_data;\n+\tauto &csv_data = input.bind_data->Cast<ReadCSVData>();\n \tif (csv_data.single_threaded) {\n \t\treturn SingleThreadedReadCSVInitLocal(context, input, global_state_p);\n \t} else {\n@@ -825,7 +939,7 @@ unique_ptr<LocalTableFunctionState> ReadCSVInitLocal(ExecutionContext &context,\n }\n \n static void ReadCSVFunction(ClientContext &context, TableFunctionInput &data_p, DataChunk &output) {\n-\tauto &bind_data = (ReadCSVData &)*data_p.bind_data;\n+\tauto &bind_data = data_p.bind_data->Cast<ReadCSVData>();\n \tif (bind_data.single_threaded) {\n \t\tSingleThreadedCSVFunction(context, data_p, output);\n \t} else {\n@@ -835,7 +949,7 @@ static void ReadCSVFunction(ClientContext &context, TableFunctionInput &data_p,\n \n static idx_t CSVReaderGetBatchIndex(ClientContext &context, const FunctionData *bind_data_p,\n                                     LocalTableFunctionState *local_state, GlobalTableFunctionState *global_state) {\n-\tauto &bind_data = (ReadCSVData &)*bind_data_p;\n+\tauto &bind_data = bind_data_p->Cast<ReadCSVData>();\n \tif (bind_data.single_threaded) {\n \t\tauto &data = local_state->Cast<SingleThreadedCSVLocalState>();\n \t\treturn data.file_index;\n@@ -882,28 +996,28 @@ static void ReadCSVAddNamedParameters(TableFunction &table_function) {\n \n double CSVReaderProgress(ClientContext &context, const FunctionData *bind_data_p,\n                          const GlobalTableFunctionState *global_state) {\n-\tauto &bind_data = (ReadCSVData &)*bind_data_p;\n+\tauto &bind_data = bind_data_p->Cast<ReadCSVData>();\n \tif (bind_data.single_threaded) {\n-\t\tauto &data = (SingleThreadedCSVState &)*global_state;\n+\t\tauto &data = global_state->Cast<SingleThreadedCSVState>();\n \t\treturn data.GetProgress(bind_data);\n \t} else {\n-\t\tauto &data = (const ParallelCSVGlobalState &)*global_state;\n+\t\tauto &data = global_state->Cast<ParallelCSVGlobalState>();\n \t\treturn data.GetProgress(bind_data);\n \t}\n }\n \n void CSVComplexFilterPushdown(ClientContext &context, LogicalGet &get, FunctionData *bind_data_p,\n                               vector<unique_ptr<Expression>> &filters) {\n-\tauto data = (ReadCSVData *)bind_data_p;\n+\tauto &data = bind_data_p->Cast<ReadCSVData>();\n \tauto reset_reader =\n-\t    MultiFileReader::ComplexFilterPushdown(context, data->files, data->options.file_options, get, filters);\n+\t    MultiFileReader::ComplexFilterPushdown(context, data.files, data.options.file_options, get, filters);\n \tif (reset_reader) {\n-\t\tMultiFileReader::PruneReaders(*data);\n+\t\tMultiFileReader::PruneReaders(data);\n \t}\n }\n \n unique_ptr<NodeStatistics> CSVReaderCardinality(ClientContext &context, const FunctionData *bind_data_p) {\n-\tauto &bind_data = (ReadCSVData &)*bind_data_p;\n+\tauto &bind_data = bind_data_p->Cast<ReadCSVData>();\n \tidx_t per_file_cardinality = 0;\n \tif (bind_data.initial_reader && bind_data.initial_reader->file_handle) {\n \t\tauto estimated_row_width = (bind_data.csv_types.size() * 5);\n@@ -945,9 +1059,16 @@ void BufferedCSVReaderOptions::Serialize(FieldWriter &writer) const {\n \twriter.WriteString(file_path);\n \twriter.WriteString(decimal_separator);\n \twriter.WriteField<bool>(null_padding);\n+\twriter.WriteField<idx_t>(buffer_size);\n \twriter.WriteSerializable(file_options);\n \t// write options\n \twriter.WriteListNoReference<bool>(force_quote);\n+\t// FIXME: serialize date_format / has_format\n+\tvector<string> csv_formats;\n+\tfor (auto &format : date_format) {\n+\t\tcsv_formats.push_back(format.second.format_specifier);\n+\t}\n+\twriter.WriteList<string>(csv_formats);\n }\n \n void BufferedCSVReaderOptions::Deserialize(FieldReader &reader) {\n@@ -980,13 +1101,25 @@ void BufferedCSVReaderOptions::Deserialize(FieldReader &reader) {\n \tfile_path = reader.ReadRequired<string>();\n \tdecimal_separator = reader.ReadRequired<string>();\n \tnull_padding = reader.ReadRequired<bool>();\n+\tbuffer_size = reader.ReadRequired<idx_t>();\n \tfile_options = reader.ReadRequiredSerializable<MultiFileReaderOptions, MultiFileReaderOptions>();\n \t// write options\n \tforce_quote = reader.ReadRequiredList<bool>();\n+\tauto formats = reader.ReadRequiredList<string>();\n+\tvector<LogicalTypeId> format_types {LogicalTypeId::DATE, LogicalTypeId::TIMESTAMP};\n+\tfor (idx_t f_idx = 0; f_idx < formats.size(); f_idx++) {\n+\t\tauto &format = formats[f_idx];\n+\t\tauto &type = format_types[f_idx];\n+\t\tif (format.empty()) {\n+\t\t\tcontinue;\n+\t\t}\n+\t\thas_format[type] = true;\n+\t\tStrTimeFormat::ParseFormatSpecifier(format, date_format[type]);\n+\t}\n }\n \n static void CSVReaderSerialize(FieldWriter &writer, const FunctionData *bind_data_p, const TableFunction &function) {\n-\tauto &bind_data = (ReadCSVData &)*bind_data_p;\n+\tauto &bind_data = bind_data_p->Cast<ReadCSVData>();\n \twriter.WriteList<string>(bind_data.files);\n \twriter.WriteRegularSerializableList<LogicalType>(bind_data.csv_types);\n \twriter.WriteList<string>(bind_data.csv_names);\n@@ -1065,6 +1198,11 @@ unique_ptr<TableRef> ReadCSVReplacement(ClientContext &context, const string &ta\n \tvector<unique_ptr<ParsedExpression>> children;\n \tchildren.push_back(make_uniq<ConstantExpression>(Value(table_name)));\n \ttable_function->function = make_uniq<FunctionExpression>(\"read_csv_auto\", std::move(children));\n+\n+\tif (!FileSystem::HasGlob(table_name)) {\n+\t\ttable_function->alias = FileSystem::ExtractBaseName(table_name);\n+\t}\n+\n \treturn std::move(table_function);\n }\n \ndiff --git a/src/function/table/version/pragma_version.cpp b/src/function/table/version/pragma_version.cpp\nindex 6ff290da7569..720514f53fd9 100644\n--- a/src/function/table/version/pragma_version.cpp\n+++ b/src/function/table/version/pragma_version.cpp\n@@ -3,6 +3,8 @@\n \n #include <cstdint>\n \n+#define DUCKDB_STRINGIFY(x) #x\n+\n namespace duckdb {\n \n struct PragmaVersionData : public GlobalTableFunctionState {\n@@ -83,6 +85,10 @@ string DuckDB::Platform() {\n #endif\n #ifdef __MINGW32__\n \tpostfix = \"_mingw\";\n+#endif\n+// this is used for the windows R builds which use a separate build environment\n+#ifdef DUCKDB_OVERRIDE_PLATFORM_POSTFIX\n+\tpostfix = DUCKDB_STRINGIFY(DUCKDB_OVERRIDE_PLATFORM_POSTFIX);\n #endif\n \treturn os + \"_\" + arch + postfix;\n }\ndiff --git a/src/function/table_macro_function.cpp b/src/function/table_macro_function.cpp\nindex 9fbb1792f2a4..d21b7bf338b1 100644\n--- a/src/function/table_macro_function.cpp\n+++ b/src/function/table_macro_function.cpp\n@@ -31,4 +31,14 @@ string TableMacroFunction::ToSQL(const string &schema, const string &name) const\n \treturn MacroFunction::ToSQL(schema, name) + StringUtil::Format(\"TABLE (%s);\", query_node->ToString());\n }\n \n+void TableMacroFunction::SerializeInternal(FieldWriter &writer) const {\n+\twriter.WriteSerializable(*query_node);\n+}\n+\n+unique_ptr<MacroFunction> TableMacroFunction::Deserialize(FieldReader &reader) {\n+\tauto result = make_uniq<TableMacroFunction>();\n+\tresult->query_node = reader.ReadRequiredSerializable<QueryNode>();\n+\treturn std::move(result);\n+}\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/catalog/catalog_entry/column_dependency_manager.hpp b/src/include/duckdb/catalog/catalog_entry/column_dependency_manager.hpp\nindex 3e36d48871f2..51cc82862ed9 100644\n--- a/src/include/duckdb/catalog/catalog_entry/column_dependency_manager.hpp\n+++ b/src/include/duckdb/catalog/catalog_entry/column_dependency_manager.hpp\n@@ -23,7 +23,7 @@ class ColumnDependencyManager {\n public:\n \tDUCKDB_API ColumnDependencyManager();\n \tDUCKDB_API ~ColumnDependencyManager();\n-\tDUCKDB_API ColumnDependencyManager(ColumnDependencyManager &&other) = default;\n+\tColumnDependencyManager(ColumnDependencyManager &&other) = default;\n \tColumnDependencyManager(const ColumnDependencyManager &other) = delete;\n \n public:\ndiff --git a/src/include/duckdb/catalog/catalog_entry/macro_catalog_entry.hpp b/src/include/duckdb/catalog/catalog_entry/macro_catalog_entry.hpp\nindex 49b130af94a4..ea8395c8ee63 100644\n--- a/src/include/duckdb/catalog/catalog_entry/macro_catalog_entry.hpp\n+++ b/src/include/duckdb/catalog/catalog_entry/macro_catalog_entry.hpp\n@@ -24,8 +24,10 @@ class MacroCatalogEntry : public FunctionEntry {\n \tunique_ptr<MacroFunction> function;\n \n public:\n+\tvirtual unique_ptr<CreateMacroInfo> GetInfoForSerialization() const;\n \t//! Serialize the meta information\n-\tvirtual void Serialize(Serializer &serializer) const = 0;\n+\tvirtual void Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<CreateMacroInfo> Deserialize(Deserializer &main_source, ClientContext &context);\n \n \tstring ToSQL() const override {\n \t\treturn function->ToSQL(schema.name, name);\ndiff --git a/src/include/duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp b/src/include/duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\nindex 53a0f0d0d38a..36ec09b70c18 100644\n--- a/src/include/duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\n+++ b/src/include/duckdb/catalog/catalog_entry/scalar_macro_catalog_entry.hpp\n@@ -23,11 +23,5 @@ class ScalarMacroCatalogEntry : public MacroCatalogEntry {\n \n public:\n \tScalarMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info);\n-\n-public:\n-\t//! Serialize the meta information of the ScalarMacroCatalogEntry\n-\tvoid Serialize(Serializer &serializer) const override;\n-\t//! Deserializes to a CreateMacroInfo\n-\tstatic unique_ptr<CreateMacroInfo> Deserialize(Deserializer &source, ClientContext &context);\n };\n } // namespace duckdb\ndiff --git a/src/include/duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp b/src/include/duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp\nindex 9dfcce8421bd..171d14e59d3f 100644\n--- a/src/include/duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp\n+++ b/src/include/duckdb/catalog/catalog_entry/table_macro_catalog_entry.hpp\n@@ -22,12 +22,6 @@ class TableMacroCatalogEntry : public MacroCatalogEntry {\n \n public:\n \tTableMacroCatalogEntry(Catalog &catalog, SchemaCatalogEntry &schema, CreateMacroInfo &info);\n-\n-public:\n-\t//! Serialize the meta information of the ScalarMacroCatalogEntry\n-\tvoid Serialize(Serializer &serializer) const override;\n-\t//! Deserializes to a CreateMacroInfo\n-\tstatic unique_ptr<CreateMacroInfo> Deserialize(Deserializer &source, ClientContext &context);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/catalog/catalog_search_path.hpp b/src/include/duckdb/catalog/catalog_search_path.hpp\nindex f5786eb3becd..9d27f01eda8c 100644\n--- a/src/include/duckdb/catalog/catalog_search_path.hpp\n+++ b/src/include/duckdb/catalog/catalog_search_path.hpp\n@@ -46,7 +46,7 @@ class CatalogSearchPath {\n \tDUCKDB_API void Reset();\n \n \tDUCKDB_API const vector<CatalogSearchEntry> &Get();\n-\tDUCKDB_API const vector<CatalogSearchEntry> &GetSetPaths() {\n+\tconst vector<CatalogSearchEntry> &GetSetPaths() {\n \t\treturn set_paths;\n \t}\n \tDUCKDB_API const CatalogSearchEntry &GetDefault();\ndiff --git a/src/include/duckdb/catalog/similar_catalog_entry.hpp b/src/include/duckdb/catalog/similar_catalog_entry.hpp\nindex f0e01e038d0d..ca371153022d 100644\n--- a/src/include/duckdb/catalog/similar_catalog_entry.hpp\n+++ b/src/include/duckdb/catalog/similar_catalog_entry.hpp\n@@ -23,7 +23,7 @@ struct SimilarCatalogEntry {\n \t//! The schema of the entry.\n \toptional_ptr<SchemaCatalogEntry> schema;\n \n-\tDUCKDB_API bool Found() const {\n+\tbool Found() const {\n \t\treturn !name.empty();\n \t}\n \ndiff --git a/src/include/duckdb/common/allocator.hpp b/src/include/duckdb/common/allocator.hpp\nindex 2b4228b19de1..77edb89826f2 100644\n--- a/src/include/duckdb/common/allocator.hpp\n+++ b/src/include/duckdb/common/allocator.hpp\n@@ -54,6 +54,9 @@ class AllocatedData {\n \tidx_t GetSize() const {\n \t\treturn allocated_size;\n \t}\n+\tbool IsSet() {\n+\t\treturn pointer;\n+\t}\n \tvoid Reset();\n \n private:\ndiff --git a/src/include/duckdb/common/compressed_file_system.hpp b/src/include/duckdb/common/compressed_file_system.hpp\nindex 1e031072ef2c..3cdfb32d6e2b 100644\n--- a/src/include/duckdb/common/compressed_file_system.hpp\n+++ b/src/include/duckdb/common/compressed_file_system.hpp\n@@ -18,8 +18,8 @@ struct StreamData {\n \t// various buffers & pointers\n \tbool write = false;\n \tbool refresh = false;\n-\tunique_ptr<data_t[]> in_buff;\n-\tunique_ptr<data_t[]> out_buff;\n+\tunsafe_unique_array<data_t> in_buff;\n+\tunsafe_unique_array<data_t> out_buff;\n \tdata_ptr_t out_buff_start = nullptr;\n \tdata_ptr_t out_buff_end = nullptr;\n \tdata_ptr_t in_buff_start = nullptr;\n@@ -59,7 +59,7 @@ class CompressedFileSystem : public FileSystem {\n class CompressedFile : public FileHandle {\n public:\n \tDUCKDB_API CompressedFile(CompressedFileSystem &fs, unique_ptr<FileHandle> child_handle_p, const string &path);\n-\tDUCKDB_API virtual ~CompressedFile() override;\n+\tDUCKDB_API ~CompressedFile() override;\n \n \tCompressedFileSystem &compressed_fs;\n \tunique_ptr<FileHandle> child_handle;\ndiff --git a/src/include/duckdb/common/constants.hpp b/src/include/duckdb/common/constants.hpp\nindex 6c1052b47eb5..46fca58a7bc9 100644\n--- a/src/include/duckdb/common/constants.hpp\n+++ b/src/include/duckdb/common/constants.hpp\n@@ -15,17 +15,14 @@\n #include \"duckdb/common/typedefs.hpp\"\n \n namespace duckdb {\n+class Serializer;\n+class Deserializer;\n \n //! inline std directives that we use frequently\n #ifndef DUCKDB_DEBUG_MOVE\n using std::move;\n #endif\n \n-// template <class _Tp, class _Dp = std::default_delete<_Tp>>\n-// class unique_ptr;\n-\n-// using data_ptr = unique_ptr<char[]>;\n-\n // NOTE: there is a copy of this in the Postgres' parser grammar (gram.y)\n #define DEFAULT_SCHEMA  \"main\"\n #define INVALID_SCHEMA  \"\"\ndiff --git a/src/include/duckdb/common/exception.hpp b/src/include/duckdb/common/exception.hpp\nindex a4fa83b56779..8396a067de58 100644\n--- a/src/include/duckdb/common/exception.hpp\n+++ b/src/include/duckdb/common/exception.hpp\n@@ -121,7 +121,7 @@ class Exception : public std::exception {\n \tDUCKDB_API static bool UncaughtException();\n \n \tDUCKDB_API static string GetStackTrace(int max_depth = 120);\n-\tDUCKDB_API static string FormatStackTrace(string message = \"\") {\n+\tstatic string FormatStackTrace(string message = \"\") {\n \t\treturn (message + \"\\n\" + GetStackTrace());\n \t}\n \n@@ -269,7 +269,7 @@ class DependencyException : public Exception {\n class IOException : public Exception {\n public:\n \tDUCKDB_API explicit IOException(const string &msg);\n-\tDUCKDB_API explicit IOException(ExceptionType exception_type, const string &msg) : Exception(exception_type, msg) {\n+\texplicit IOException(ExceptionType exception_type, const string &msg) : Exception(exception_type, msg) {\n \t}\n \n \ttemplate <typename... Args>\n@@ -371,7 +371,7 @@ class InterruptException : public Exception {\n \n class FatalException : public Exception {\n public:\n-\tDUCKDB_API explicit FatalException(const string &msg) : FatalException(ExceptionType::FATAL, msg) {\n+\texplicit FatalException(const string &msg) : FatalException(ExceptionType::FATAL, msg) {\n \t}\n \ttemplate <typename... Args>\n \texplicit FatalException(const string &msg, Args... params) : FatalException(ConstructMessage(msg, params...)) {\ndiff --git a/src/include/duckdb/common/exception_format_value.hpp b/src/include/duckdb/common/exception_format_value.hpp\nindex 6fa683719bd1..1834663e5203 100644\n--- a/src/include/duckdb/common/exception_format_value.hpp\n+++ b/src/include/duckdb/common/exception_format_value.hpp\n@@ -15,6 +15,28 @@\n \n namespace duckdb {\n \n+// Helper class to support custom overloading\n+// Escaping \" and quoting the value with \"\n+class SQLIdentifier {\n+public:\n+\tSQLIdentifier(const string &raw_string) : raw_string(raw_string) {\n+\t}\n+\n+public:\n+\tstring raw_string;\n+};\n+\n+// Helper class to support custom overloading\n+// Escaping ' and quoting the value with '\n+class SQLString {\n+public:\n+\tSQLString(const string &raw_string) : raw_string(raw_string) {\n+\t}\n+\n+public:\n+\tstring raw_string;\n+};\n+\n enum class PhysicalType : uint8_t;\n struct LogicalType;\n \n@@ -47,6 +69,10 @@ struct ExceptionFormatValue {\n template <>\n DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(PhysicalType value);\n template <>\n+DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(SQLString value);\n+template <>\n+DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(SQLIdentifier value);\n+template <>\n DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(LogicalType value);\n template <>\n DUCKDB_API ExceptionFormatValue ExceptionFormatValue::CreateFormatValue(float value);\ndiff --git a/src/include/duckdb/common/field_writer.hpp b/src/include/duckdb/common/field_writer.hpp\nindex cfe06994469c..a15b1ce478d6 100644\n--- a/src/include/duckdb/common/field_writer.hpp\n+++ b/src/include/duckdb/common/field_writer.hpp\n@@ -263,15 +263,15 @@ class FieldReader {\n \t\treturn ReadRequiredGenericList<T, idx_t, IndexReadOperation>();\n \t}\n \n-\ttemplate <class T>\n-\tset<T> ReadRequiredSet() {\n+\ttemplate <class T, class CONTAINER_TYPE = set<T>>\n+\tCONTAINER_TYPE ReadRequiredSet() {\n \t\tif (field_count >= max_field_count) {\n \t\t\t// field is not there, throw an exception\n \t\t\tthrow SerializationException(\"Attempting to read a required field, but field is missing\");\n \t\t}\n \t\tAddField();\n \t\tauto result_count = source.Read<uint32_t>();\n-\t\tset<T> result;\n+\t\tCONTAINER_TYPE result;\n \t\tfor (idx_t i = 0; i < result_count; i++) {\n \t\t\tresult.insert(source.Read<T>());\n \t\t}\ndiff --git a/src/include/duckdb/common/file_opener.hpp b/src/include/duckdb/common/file_opener.hpp\nindex 88485a8cf75b..b7c23090b04d 100644\n--- a/src/include/duckdb/common/file_opener.hpp\n+++ b/src/include/duckdb/common/file_opener.hpp\n@@ -24,7 +24,6 @@ class FileOpener {\n \tvirtual bool TryGetCurrentSetting(const string &key, Value &result) = 0;\n \tvirtual ClientContext *TryGetClientContext() = 0;\n \n-\tDUCKDB_API static FileOpener *Get(ClientContext &context);\n \tDUCKDB_API static ClientContext *TryGetClientContext(FileOpener *opener);\n \tDUCKDB_API static bool TryGetCurrentSetting(FileOpener *opener, const string &key, Value &result);\n };\ndiff --git a/src/include/duckdb/common/file_system.hpp b/src/include/duckdb/common/file_system.hpp\nindex 64f488c3735c..0f3133f06414 100644\n--- a/src/include/duckdb/common/file_system.hpp\n+++ b/src/include/duckdb/common/file_system.hpp\n@@ -15,6 +15,7 @@\n #include \"duckdb/common/unordered_map.hpp\"\n #include \"duckdb/common/vector.hpp\"\n #include \"duckdb/common/enums/file_glob_options.hpp\"\n+#include \"duckdb/common/optional_ptr.hpp\"\n #include <functional>\n \n #undef CreateDirectory\n@@ -109,7 +110,6 @@ class FileSystem {\n \tDUCKDB_API static FileSystem &GetFileSystem(ClientContext &context);\n \tDUCKDB_API static FileSystem &GetFileSystem(DatabaseInstance &db);\n \tDUCKDB_API static FileSystem &Get(AttachedDatabase &db);\n-\tDUCKDB_API static FileOpener *GetFileOpener(ClientContext &context);\n \n \tDUCKDB_API virtual unique_ptr<FileHandle> OpenFile(const string &path, uint8_t flags,\n \t                                                   FileLockType lock = DEFAULT_LOCK,\n@@ -128,8 +128,6 @@ class FileSystem {\n \t//! Write nr_bytes from the buffer into the file, moving the file pointer forward by nr_bytes.\n \tDUCKDB_API virtual int64_t Write(FileHandle &handle, void *buffer, int64_t nr_bytes);\n \n-\t//! Returns the extension of the file, or empty string if no extension was found.\n-\tDUCKDB_API string GetFileExtension(FileHandle &handle);\n \t//! Returns the file size of a file handle, returns -1 on error\n \tDUCKDB_API virtual int64_t GetFileSize(FileHandle &handle);\n \t//! Returns the file last modified time of a file handle, returns timespec with zero on all attributes on error\n@@ -167,15 +165,22 @@ class FileSystem {\n \t//! Gets the working directory\n \tDUCKDB_API static string GetWorkingDirectory();\n \t//! Gets the users home directory\n-\tDUCKDB_API static string GetHomeDirectory(FileOpener *opener);\n+\tDUCKDB_API static string GetHomeDirectory(optional_ptr<FileOpener> opener);\n+\t//! Gets the users home directory\n+\tDUCKDB_API virtual string GetHomeDirectory();\n+\t//! Expands a given path, including e.g. expanding the home directory of the user\n+\tDUCKDB_API static string ExpandPath(const string &path, optional_ptr<FileOpener> opener);\n \t//! Expands a given path, including e.g. expanding the home directory of the user\n-\tDUCKDB_API static string ExpandPath(const string &path, FileOpener *opener);\n+\tDUCKDB_API virtual string ExpandPath(const string &path);\n \t//! Returns the system-available memory in bytes. Returns DConstants::INVALID_INDEX if the system function fails.\n \tDUCKDB_API static idx_t GetAvailableMemory();\n \t//! Path separator for the current file system\n \tDUCKDB_API static string PathSeparator();\n \t//! Checks if path is starts with separator (i.e., '/' on UNIX '\\\\' on Windows)\n \tDUCKDB_API static bool IsPathAbsolute(const string &path);\n+\t//! Normalize an absolute path - the goal of normalizing is converting \"\\test.db\" and \"C:/test.db\" into \"C:\\test.db\"\n+\t//! so that the database system cache can correctly\n+\tDUCKDB_API static string NormalizeAbsolutePath(const string &path);\n \t//! Join two paths together\n \tDUCKDB_API static string JoinPath(const string &a, const string &path);\n \t//! Convert separators in a path to the local separators (e.g. convert \"/\" into \\\\ on windows)\n@@ -185,9 +190,13 @@ class FileSystem {\n \t//! Extract the name of a file (e.g if the input is lib/example.dll the name is 'example.dll')\n \tDUCKDB_API static string ExtractName(const string &path);\n \n+\t//! Returns the value of an environment variable - or the empty string if it is not set\n+\tDUCKDB_API static string GetEnvVariable(const string &name);\n+\n+\t//! Whether there is a glob in the string\n+\tDUCKDB_API static bool HasGlob(const string &str);\n \t//! Runs a glob on the file system, returning a list of matching files\n \tDUCKDB_API virtual vector<string> Glob(const string &path, FileOpener *opener = nullptr);\n-\tDUCKDB_API virtual vector<string> Glob(const string &path, ClientContext &context);\n \tDUCKDB_API vector<string> GlobFiles(const string &path, ClientContext &context,\n \t                                    FileGlobOptions options = FileGlobOptions::DISALLOW_EMPTY);\n \n@@ -223,6 +232,9 @@ class FileSystem {\n \n \t//! Return the name of the filesytem. Used for forming diagnosis messages.\n \tDUCKDB_API virtual std::string GetName() const = 0;\n+\n+\t//! Whether or not a file is remote or local, based only on file path\n+\tDUCKDB_API static bool IsRemoteFile(const string &path);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/helper.hpp b/src/include/duckdb/common/helper.hpp\nindex 89990b028f15..9881e179dfed 100644\n--- a/src/include/duckdb/common/helper.hpp\n+++ b/src/include/duckdb/common/helper.hpp\n@@ -37,10 +37,10 @@ namespace duckdb {\n #define DUCKDB_EXPLICIT_FALLTHROUGH\n #endif\n \n-template<class _Tp>\n+template<class _Tp, bool SAFE = true>\n struct __unique_if\n {\n-    typedef unique_ptr<_Tp> __unique_single;\n+    typedef unique_ptr<_Tp, std::default_delete<_Tp>, SAFE> __unique_single;\n };\n \n template<class _Tp>\n@@ -57,19 +57,32 @@ struct __unique_if<_Tp[_Np]>\n \n template<class _Tp, class... _Args>\n inline \n-typename __unique_if<_Tp>::__unique_single\n+typename __unique_if<_Tp, true>::__unique_single\n make_uniq(_Args&&... __args)\n {\n-    return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...));\n+    return unique_ptr<_Tp, std::default_delete<_Tp>, true>(new _Tp(std::forward<_Args>(__args)...));\n }\n \n-template<class _Tp>\n+template<class _Tp, class... _Args>\n inline \n-typename __unique_if<_Tp>::__unique_array_unknown_bound\n-make_uniq(size_t __n)\n+typename __unique_if<_Tp, false>::__unique_single\n+make_unsafe_uniq(_Args&&... __args)\n+{\n+    return unique_ptr<_Tp, std::default_delete<_Tp>, false>(new _Tp(std::forward<_Args>(__args)...));\n+}\n+\n+template<class _Tp>\n+inline unique_ptr<_Tp[], std::default_delete<_Tp>, true>\n+make_uniq_array(size_t __n)\n+{\n+    return unique_ptr<_Tp[], std::default_delete<_Tp>, true>(new _Tp[__n]());\n+}\n+\n+template<class _Tp>\n+inline unique_ptr<_Tp[], std::default_delete<_Tp>, false>\n+make_unsafe_uniq_array(size_t __n)\n {\n-    typedef typename std::remove_extent<_Tp>::type _Up;\n-    return unique_ptr<_Tp>(new _Up[__n]());\n+    return unique_ptr<_Tp[], std::default_delete<_Tp>, false>(new _Tp[__n]());\n }\n \n template<class _Tp, class... _Args>\ndiff --git a/src/include/duckdb/common/http_state.hpp b/src/include/duckdb/common/http_state.hpp\nindex b6ade8c787ef..3d280098de83 100644\n--- a/src/include/duckdb/common/http_state.hpp\n+++ b/src/include/duckdb/common/http_state.hpp\n@@ -12,6 +12,7 @@\n #include \"duckdb/main/client_context.hpp\"\n #include \"duckdb/main/client_data.hpp\"\n #include \"duckdb/common/atomic.hpp\"\n+#include \"duckdb/common/optional_ptr.hpp\"\n \n namespace duckdb {\n \n@@ -48,10 +49,10 @@ class HTTPState {\n \t}\n \n \t//! helper function to get the HTTP\n-\tstatic HTTPState *TryGetState(FileOpener *opener) {\n+\tstatic shared_ptr<HTTPState> TryGetState(FileOpener *opener) {\n \t\tauto client_context = FileOpener::TryGetClientContext(opener);\n \t\tif (client_context) {\n-\t\t\treturn client_context->client_data->http_state.get();\n+\t\t\treturn client_context->client_data->http_state;\n \t\t}\n \t\treturn nullptr;\n \t}\ndiff --git a/src/include/duckdb/common/hugeint.hpp b/src/include/duckdb/common/hugeint.hpp\nindex 5be73e105744..a530864d9ba8 100644\n--- a/src/include/duckdb/common/hugeint.hpp\n+++ b/src/include/duckdb/common/hugeint.hpp\n@@ -12,14 +12,14 @@ struct hugeint_t {\n \tint64_t upper;\n \n public:\n-\tDUCKDB_API hugeint_t() = default;\n+\thugeint_t() = default;\n \tDUCKDB_API hugeint_t(int64_t value); // NOLINT: Allow implicit conversion from `int64_t`\n-\tDUCKDB_API constexpr hugeint_t(int64_t upper, uint64_t lower) : lower(lower), upper(upper) {\n+\tconstexpr hugeint_t(int64_t upper, uint64_t lower) : lower(lower), upper(upper) {\n \t}\n-\tDUCKDB_API constexpr hugeint_t(const hugeint_t &rhs) = default;\n-\tDUCKDB_API constexpr hugeint_t(hugeint_t &&rhs) = default;\n-\tDUCKDB_API hugeint_t &operator=(const hugeint_t &rhs) = default;\n-\tDUCKDB_API hugeint_t &operator=(hugeint_t &&rhs) = default;\n+\tconstexpr hugeint_t(const hugeint_t &rhs) = default;\n+\tconstexpr hugeint_t(hugeint_t &&rhs) = default;\n+\thugeint_t &operator=(const hugeint_t &rhs) = default;\n+\thugeint_t &operator=(hugeint_t &&rhs) = default;\n \n \tDUCKDB_API string ToString() const;\n \ndiff --git a/src/include/duckdb/common/limits.hpp b/src/include/duckdb/common/limits.hpp\nindex f3db80680aac..3761610da8e9 100644\n--- a/src/include/duckdb/common/limits.hpp\n+++ b/src/include/duckdb/common/limits.hpp\n@@ -19,10 +19,10 @@ namespace duckdb {\n \n template <class T>\n struct NumericLimits {\n-\tDUCKDB_API static constexpr T Minimum() {\n+\tstatic constexpr T Minimum() {\n \t\treturn std::numeric_limits<T>::lowest();\n \t};\n-\tDUCKDB_API static constexpr T Maximum() {\n+\tstatic constexpr T Maximum() {\n \t\treturn std::numeric_limits<T>::max();\n \t};\n \tDUCKDB_API static bool IsSigned();\n@@ -31,169 +31,169 @@ struct NumericLimits {\n \n template <>\n struct NumericLimits<int8_t> {\n-\tDUCKDB_API static constexpr int8_t Minimum() {\n+\tstatic constexpr int8_t Minimum() {\n \t\treturn std::numeric_limits<int8_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr int8_t Maximum() {\n+\tstatic constexpr int8_t Maximum() {\n \t\treturn std::numeric_limits<int8_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 3;\n \t}\n };\n template <>\n struct NumericLimits<int16_t> {\n-\tDUCKDB_API static constexpr int16_t Minimum() {\n+\tstatic constexpr int16_t Minimum() {\n \t\treturn std::numeric_limits<int16_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr int16_t Maximum() {\n+\tstatic constexpr int16_t Maximum() {\n \t\treturn std::numeric_limits<int16_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 5;\n \t}\n };\n template <>\n struct NumericLimits<int32_t> {\n-\tDUCKDB_API static constexpr int32_t Minimum() {\n+\tstatic constexpr int32_t Minimum() {\n \t\treturn std::numeric_limits<int32_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr int32_t Maximum() {\n+\tstatic constexpr int32_t Maximum() {\n \t\treturn std::numeric_limits<int32_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 10;\n \t}\n };\n \n template <>\n struct NumericLimits<int64_t> {\n-\tDUCKDB_API static constexpr int64_t Minimum() {\n+\tstatic constexpr int64_t Minimum() {\n \t\treturn std::numeric_limits<int64_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr int64_t Maximum() {\n+\tstatic constexpr int64_t Maximum() {\n \t\treturn std::numeric_limits<int64_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 19;\n \t}\n };\n template <>\n struct NumericLimits<hugeint_t> {\n-\tDUCKDB_API static constexpr hugeint_t Minimum() {\n+\tstatic constexpr hugeint_t Minimum() {\n \t\treturn {std::numeric_limits<int64_t>::lowest(), 1};\n \t};\n-\tDUCKDB_API static constexpr hugeint_t Maximum() {\n+\tstatic constexpr hugeint_t Maximum() {\n \t\treturn {std::numeric_limits<int64_t>::max(), std::numeric_limits<uint64_t>::max()};\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 39;\n \t}\n };\n \n template <>\n struct NumericLimits<uint8_t> {\n-\tDUCKDB_API static constexpr uint8_t Minimum() {\n+\tstatic constexpr uint8_t Minimum() {\n \t\treturn std::numeric_limits<uint8_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr uint8_t Maximum() {\n+\tstatic constexpr uint8_t Maximum() {\n \t\treturn std::numeric_limits<uint8_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn false;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 3;\n \t}\n };\n \n template <>\n struct NumericLimits<uint16_t> {\n-\tDUCKDB_API static constexpr uint16_t Minimum() {\n+\tstatic constexpr uint16_t Minimum() {\n \t\treturn std::numeric_limits<uint16_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr uint16_t Maximum() {\n+\tstatic constexpr uint16_t Maximum() {\n \t\treturn std::numeric_limits<uint16_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn false;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 5;\n \t}\n };\n template <>\n struct NumericLimits<uint32_t> {\n-\tDUCKDB_API static constexpr uint32_t Minimum() {\n+\tstatic constexpr uint32_t Minimum() {\n \t\treturn std::numeric_limits<uint32_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr uint32_t Maximum() {\n+\tstatic constexpr uint32_t Maximum() {\n \t\treturn std::numeric_limits<uint32_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn false;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 10;\n \t}\n };\n template <>\n struct NumericLimits<uint64_t> {\n-\tDUCKDB_API static constexpr uint64_t Minimum() {\n+\tstatic constexpr uint64_t Minimum() {\n \t\treturn std::numeric_limits<uint64_t>::lowest();\n \t};\n-\tDUCKDB_API static constexpr uint64_t Maximum() {\n+\tstatic constexpr uint64_t Maximum() {\n \t\treturn std::numeric_limits<uint64_t>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn false;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 20;\n \t}\n };\n template <>\n struct NumericLimits<float> {\n-\tDUCKDB_API static constexpr float Minimum() {\n+\tstatic constexpr float Minimum() {\n \t\treturn std::numeric_limits<float>::lowest();\n \t};\n-\tDUCKDB_API static constexpr float Maximum() {\n+\tstatic constexpr float Maximum() {\n \t\treturn std::numeric_limits<float>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 127;\n \t}\n };\n template <>\n struct NumericLimits<double> {\n-\tDUCKDB_API static constexpr double Minimum() {\n+\tstatic constexpr double Minimum() {\n \t\treturn std::numeric_limits<double>::lowest();\n \t};\n-\tDUCKDB_API static constexpr double Maximum() {\n+\tstatic constexpr double Maximum() {\n \t\treturn std::numeric_limits<double>::max();\n \t};\n-\tDUCKDB_API static bool IsSigned() {\n+\tstatic bool IsSigned() {\n \t\treturn true;\n \t}\n-\tDUCKDB_API static idx_t Digits() {\n+\tstatic idx_t Digits() {\n \t\treturn 250;\n \t}\n };\ndiff --git a/src/include/duckdb/common/memory_safety.hpp b/src/include/duckdb/common/memory_safety.hpp\nnew file mode 100644\nindex 000000000000..7d4d5eab5b59\n--- /dev/null\n+++ b/src/include/duckdb/common/memory_safety.hpp\n@@ -0,0 +1,15 @@\n+#pragma once\n+\n+namespace duckdb {\n+\n+template <bool ENABLED>\n+struct MemorySafety {\n+#ifdef DEBUG\n+\t// In DEBUG mode safety is always on\n+\tstatic constexpr bool enabled = true;\n+#else\n+\tstatic constexpr bool enabled = ENABLED;\n+#endif\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/common/opener_file_system.hpp b/src/include/duckdb/common/opener_file_system.hpp\nnew file mode 100644\nindex 000000000000..e6f5db9d5a15\n--- /dev/null\n+++ b/src/include/duckdb/common/opener_file_system.hpp\n@@ -0,0 +1,118 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/common/opener_file_system.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+#include \"duckdb/common/file_system.hpp\"\n+\n+namespace duckdb {\n+\n+// The OpenerFileSystem is wrapper for a file system that pushes an appropriate FileOpener into the various API calls\n+class OpenerFileSystem : public FileSystem {\n+public:\n+\tvirtual FileSystem &GetFileSystem() const = 0;\n+\tvirtual optional_ptr<FileOpener> GetOpener() const = 0;\n+\n+\tunique_ptr<FileHandle> OpenFile(const string &path, uint8_t flags, FileLockType lock = FileLockType::NO_LOCK,\n+\t                                FileCompressionType compression = FileCompressionType::UNCOMPRESSED,\n+\t                                FileOpener *opener = nullptr) override {\n+\t\tif (opener) {\n+\t\t\tthrow InternalException(\"OpenerFileSystem cannot take an opener - the opener is pushed automatically\");\n+\t\t}\n+\t\treturn GetFileSystem().OpenFile(path, flags, lock, compression, GetOpener().get());\n+\t}\n+\n+\tvoid Read(FileHandle &handle, void *buffer, int64_t nr_bytes, idx_t location) override {\n+\t\tGetFileSystem().Read(handle, buffer, nr_bytes, location);\n+\t};\n+\n+\tvoid Write(FileHandle &handle, void *buffer, int64_t nr_bytes, idx_t location) override {\n+\t\tGetFileSystem().Write(handle, buffer, nr_bytes, location);\n+\t}\n+\n+\tint64_t Read(FileHandle &handle, void *buffer, int64_t nr_bytes) override {\n+\t\treturn GetFileSystem().Read(handle, buffer, nr_bytes);\n+\t}\n+\n+\tint64_t Write(FileHandle &handle, void *buffer, int64_t nr_bytes) override {\n+\t\treturn GetFileSystem().Write(handle, buffer, nr_bytes);\n+\t}\n+\n+\tint64_t GetFileSize(FileHandle &handle) override {\n+\t\treturn GetFileSystem().GetFileSize(handle);\n+\t}\n+\ttime_t GetLastModifiedTime(FileHandle &handle) override {\n+\t\treturn GetFileSystem().GetLastModifiedTime(handle);\n+\t}\n+\tFileType GetFileType(FileHandle &handle) override {\n+\t\treturn GetFileSystem().GetFileType(handle);\n+\t}\n+\n+\tvoid Truncate(FileHandle &handle, int64_t new_size) override {\n+\t\tGetFileSystem().Truncate(handle, new_size);\n+\t}\n+\n+\tvoid FileSync(FileHandle &handle) override {\n+\t\tGetFileSystem().FileSync(handle);\n+\t}\n+\n+\tbool DirectoryExists(const string &directory) override {\n+\t\treturn GetFileSystem().DirectoryExists(directory);\n+\t}\n+\tvoid CreateDirectory(const string &directory) override {\n+\t\treturn GetFileSystem().CreateDirectory(directory);\n+\t}\n+\n+\tvoid RemoveDirectory(const string &directory) override {\n+\t\treturn GetFileSystem().RemoveDirectory(directory);\n+\t}\n+\n+\tbool ListFiles(const string &directory, const std::function<void(const string &, bool)> &callback,\n+\t               FileOpener *opener = nullptr) override {\n+\t\tif (opener) {\n+\t\t\tthrow InternalException(\"OpenerFileSystem cannot take an opener - the opener is pushed automatically\");\n+\t\t}\n+\t\treturn GetFileSystem().ListFiles(directory, callback, GetOpener().get());\n+\t}\n+\n+\tvoid MoveFile(const string &source, const string &target) override {\n+\t\tGetFileSystem().MoveFile(source, target);\n+\t}\n+\n+\tstring GetHomeDirectory() override {\n+\t\treturn FileSystem::GetHomeDirectory(GetOpener());\n+\t}\n+\n+\tstring ExpandPath(const string &path) override {\n+\t\treturn FileSystem::ExpandPath(path, GetOpener());\n+\t}\n+\n+\tbool FileExists(const string &filename) override {\n+\t\treturn GetFileSystem().FileExists(filename);\n+\t}\n+\n+\tbool IsPipe(const string &filename) override {\n+\t\treturn GetFileSystem().IsPipe(filename);\n+\t}\n+\tvirtual void RemoveFile(const string &filename) override {\n+\t\tGetFileSystem().RemoveFile(filename);\n+\t}\n+\n+\tvirtual vector<string> Glob(const string &path, FileOpener *opener = nullptr) override {\n+\t\tif (opener) {\n+\t\t\tthrow InternalException(\"OpenerFileSystem cannot take an opener - the opener is pushed automatically\");\n+\t\t}\n+\t\treturn GetFileSystem().Glob(path, GetOpener().get());\n+\t}\n+\n+\tstd::string GetName() const override {\n+\t\treturn \"OpenerFileSystem - \" + GetFileSystem().GetName();\n+\t}\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/common/operator/cast_operators.hpp b/src/include/duckdb/common/operator/cast_operators.hpp\nindex 28a44124b53e..c4d51fa1579a 100644\n--- a/src/include/duckdb/common/operator/cast_operators.hpp\n+++ b/src/include/duckdb/common/operator/cast_operators.hpp\n@@ -22,21 +22,21 @@ class Vector;\n \n struct TryCast {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, bool strict = false) {\n \t\tthrow NotImplementedException(\"Unimplemented type for cast (%s -> %s)\", GetTypeId<SRC>(), GetTypeId<DST>());\n \t}\n };\n \n struct TryCastErrorMessage {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {\n \t\tthrow NotImplementedException(\"Unimplemented type for cast (%s -> %s)\", GetTypeId<SRC>(), GetTypeId<DST>());\n \t}\n };\n \n struct TryCastErrorMessageCommaSeparated {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, string *error_message, bool strict = false) {\n \t\tthrow NotImplementedException(\"Unimplemented type for cast (%s -> %s)\", GetTypeId<SRC>(), GetTypeId<DST>());\n \t}\n };\n@@ -520,21 +520,21 @@ DUCKDB_API bool TryCastErrorMessage::Operation(string_t input, interval_t &resul\n //===--------------------------------------------------------------------===//\n struct TryCastToTimestampNS {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, bool strict = false) {\n \t\tthrow InternalException(\"Unsupported type for try cast to timestamp (ns)\");\n \t}\n };\n \n struct TryCastToTimestampMS {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, bool strict = false) {\n \t\tthrow InternalException(\"Unsupported type for try cast to timestamp (ms)\");\n \t}\n };\n \n struct TryCastToTimestampSec {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, bool strict = false) {\n \t\tthrow InternalException(\"Unsupported type for try cast to timestamp (s)\");\n \t}\n };\n@@ -702,8 +702,8 @@ duckdb::string_t CastFromUUID::Operation(duckdb::hugeint_t input, Vector &vector\n \n struct TryCastToUUID {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, Vector &result_vector, string *error_message,\n-\t                                        bool strict = false) {\n+\tstatic inline bool Operation(SRC input, DST &result, Vector &result_vector, string *error_message,\n+\t                             bool strict = false) {\n \t\tthrow InternalException(\"Unsupported type for try cast to uuid\");\n \t}\n };\ndiff --git a/src/include/duckdb/common/operator/comparison_operators.hpp b/src/include/duckdb/common/operator/comparison_operators.hpp\nindex 6e12765ccd2e..bf4f7b5bf88d 100644\n--- a/src/include/duckdb/common/operator/comparison_operators.hpp\n+++ b/src/include/duckdb/common/operator/comparison_operators.hpp\n@@ -23,41 +23,41 @@ namespace duckdb {\n //===--------------------------------------------------------------------===//\n struct Equals {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn left == right;\n \t}\n };\n struct NotEquals {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn !Equals::Operation(left, right);\n \t}\n };\n \n struct GreaterThan {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn left > right;\n \t}\n };\n \n struct GreaterThanEquals {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn !GreaterThan::Operation(right, left);\n \t}\n };\n \n struct LessThan {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn GreaterThan::Operation(right, left);\n \t}\n };\n \n struct LessThanEquals {\n \ttemplate <class T>\n-\tDUCKDB_API static inline bool Operation(const T &left, const T &right) {\n+\tstatic inline bool Operation(const T &left, const T &right) {\n \t\treturn !GreaterThan::Operation(left, right);\n \t}\n };\ndiff --git a/src/include/duckdb/common/operator/convert_to_string.hpp b/src/include/duckdb/common/operator/convert_to_string.hpp\nindex a41c94548b73..c979265e2a17 100644\n--- a/src/include/duckdb/common/operator/convert_to_string.hpp\n+++ b/src/include/duckdb/common/operator/convert_to_string.hpp\n@@ -17,7 +17,7 @@ namespace duckdb {\n \n struct ConvertToString {\n \ttemplate <class SRC>\n-\tDUCKDB_API static inline string Operation(SRC input) {\n+\tstatic inline string Operation(SRC input) {\n \t\tthrow InternalException(\"Unrecognized type for ConvertToString %s\", GetTypeId<SRC>());\n \t}\n };\ndiff --git a/src/include/duckdb/common/operator/decimal_cast_operators.hpp b/src/include/duckdb/common/operator/decimal_cast_operators.hpp\nindex bed942a1c704..6610ccadbda5 100644\n--- a/src/include/duckdb/common/operator/decimal_cast_operators.hpp\n+++ b/src/include/duckdb/common/operator/decimal_cast_operators.hpp\n@@ -17,16 +17,14 @@ namespace duckdb {\n //===--------------------------------------------------------------------===//\n struct TryCastToDecimal {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, string *error_message, uint8_t width,\n-\t                                        uint8_t scale) {\n+\tstatic inline bool Operation(SRC input, DST &result, string *error_message, uint8_t width, uint8_t scale) {\n \t\tthrow NotImplementedException(\"Unimplemented type for TryCastToDecimal!\");\n \t}\n };\n \n struct TryCastToDecimalCommaSeparated {\n \ttemplate <class SRC, class DST>\n-\tDUCKDB_API static inline bool Operation(SRC input, DST &result, string *error_message, uint8_t width,\n-\t                                        uint8_t scale) {\n+\tstatic inline bool Operation(SRC input, DST &result, string *error_message, uint8_t width, uint8_t scale) {\n \t\tthrow NotImplementedException(\"Unimplemented type for TryCastToDecimal!\");\n \t}\n };\ndiff --git a/src/include/duckdb/common/operator/string_cast.hpp b/src/include/duckdb/common/operator/string_cast.hpp\nindex 10193fd37222..02581088e0f7 100644\n--- a/src/include/duckdb/common/operator/string_cast.hpp\n+++ b/src/include/duckdb/common/operator/string_cast.hpp\n@@ -20,7 +20,7 @@ class Vector;\n \n struct StringCast {\n \ttemplate <class SRC>\n-\tDUCKDB_API static inline string_t Operation(SRC input, Vector &result) {\n+\tstatic inline string_t Operation(SRC input, Vector &result) {\n \t\tthrow NotImplementedException(\"Unimplemented type for string cast!\");\n \t}\n };\ndiff --git a/src/include/duckdb/common/operator/subtract.hpp b/src/include/duckdb/common/operator/subtract.hpp\nindex 5706905f0769..85a3de3f94ea 100644\n--- a/src/include/duckdb/common/operator/subtract.hpp\n+++ b/src/include/duckdb/common/operator/subtract.hpp\n@@ -72,7 +72,7 @@ bool TrySubtractOperator::Operation(hugeint_t left, hugeint_t right, hugeint_t &\n \n struct SubtractOperatorOverflowCheck {\n \ttemplate <class TA, class TB, class TR>\n-\tDUCKDB_API static inline TR Operation(TA left, TB right) {\n+\tstatic inline TR Operation(TA left, TB right) {\n \t\tTR result;\n \t\tif (!TrySubtractOperator::Operation(left, right, result)) {\n \t\t\tthrow OutOfRangeException(\"Overflow in subtraction of %s (%d - %d)!\", TypeIdToString(GetTypeId<TA>()), left,\ndiff --git a/src/include/duckdb/common/optional_ptr.hpp b/src/include/duckdb/common/optional_ptr.hpp\nindex a91e333b229a..82b845a8e34c 100644\n--- a/src/include/duckdb/common/optional_ptr.hpp\n+++ b/src/include/duckdb/common/optional_ptr.hpp\n@@ -9,6 +9,7 @@\n #pragma once\n \n #include \"duckdb/common/exception.hpp\"\n+#include \"duckdb/common/unique_ptr.hpp\"\n \n namespace duckdb {\n \ndiff --git a/src/include/duckdb/common/preserved_error.hpp b/src/include/duckdb/common/preserved_error.hpp\nindex 8fb5be129d70..c95cb78032a5 100644\n--- a/src/include/duckdb/common/preserved_error.hpp\n+++ b/src/include/duckdb/common/preserved_error.hpp\n@@ -39,7 +39,7 @@ class PreservedError {\n \t//! Let's us do things like 'if (error)'\n \tDUCKDB_API operator bool() const;\n \tDUCKDB_API bool operator==(const PreservedError &other) const;\n-\tDUCKDB_API const shared_ptr<Exception> &GetError() {\n+\tconst shared_ptr<Exception> &GetError() {\n \t\treturn exception_instance;\n \t}\n \ndiff --git a/src/include/duckdb/common/re2_regex.hpp b/src/include/duckdb/common/re2_regex.hpp\nindex 03b669a1c29e..3c13179a8b3e 100644\n--- a/src/include/duckdb/common/re2_regex.hpp\n+++ b/src/include/duckdb/common/re2_regex.hpp\n@@ -15,7 +15,7 @@ enum class RegexOptions : uint8_t { NONE, CASE_INSENSITIVE };\n class Regex {\n public:\n \tDUCKDB_API Regex(const std::string &pattern, RegexOptions options = RegexOptions::NONE);\n-\tDUCKDB_API Regex(const char *pattern, RegexOptions options = RegexOptions::NONE) : Regex(std::string(pattern)) {\n+\tRegex(const char *pattern, RegexOptions options = RegexOptions::NONE) : Regex(std::string(pattern)) {\n \t}\n \tconst duckdb_re2::RE2 &GetRegex() const {\n \t\treturn *regex;\ndiff --git a/src/include/duckdb/common/serializer/buffered_file_reader.hpp b/src/include/duckdb/common/serializer/buffered_file_reader.hpp\nindex b3a907155677..aef17a27346d 100644\n--- a/src/include/duckdb/common/serializer/buffered_file_reader.hpp\n+++ b/src/include/duckdb/common/serializer/buffered_file_reader.hpp\n@@ -18,7 +18,7 @@ class BufferedFileReader : public Deserializer {\n \t                   FileLockType lock_type = FileLockType::READ_LOCK, optional_ptr<FileOpener> opener = nullptr);\n \n \tFileSystem &fs;\n-\tunique_ptr<data_t[]> data;\n+\tunsafe_unique_array<data_t> data;\n \tidx_t offset;\n \tidx_t read_data;\n \tunique_ptr<FileHandle> handle;\ndiff --git a/src/include/duckdb/common/serializer/buffered_file_writer.hpp b/src/include/duckdb/common/serializer/buffered_file_writer.hpp\nindex 5518645a152a..00fed187b8bc 100644\n--- a/src/include/duckdb/common/serializer/buffered_file_writer.hpp\n+++ b/src/include/duckdb/common/serializer/buffered_file_writer.hpp\n@@ -21,12 +21,11 @@ class BufferedFileWriter : public Serializer {\n \n \t//! Serializes to a buffer allocated by the serializer, will expand when\n \t//! writing past the initial threshold\n-\tDUCKDB_API BufferedFileWriter(FileSystem &fs, const string &path, uint8_t open_flags = DEFAULT_OPEN_FLAGS,\n-\t                              FileOpener *opener = nullptr);\n+\tDUCKDB_API BufferedFileWriter(FileSystem &fs, const string &path, uint8_t open_flags = DEFAULT_OPEN_FLAGS);\n \n \tFileSystem &fs;\n \tstring path;\n-\tunique_ptr<data_t[]> data;\n+\tunsafe_unique_array<data_t> data;\n \tidx_t offset;\n \tidx_t total_written;\n \tunique_ptr<FileHandle> handle;\ndiff --git a/src/include/duckdb/common/serializer/buffered_serializer.hpp b/src/include/duckdb/common/serializer/buffered_serializer.hpp\nindex d8a24e7b592b..87cb21195b47 100644\n--- a/src/include/duckdb/common/serializer/buffered_serializer.hpp\n+++ b/src/include/duckdb/common/serializer/buffered_serializer.hpp\n@@ -9,13 +9,14 @@\n #pragma once\n \n #include \"duckdb/common/serializer.hpp\"\n+#include \"duckdb/common/unique_ptr.hpp\"\n \n namespace duckdb {\n \n #define SERIALIZER_DEFAULT_SIZE 1024\n \n struct BinaryData {\n-\tunique_ptr<data_t[]> data;\n+\tunsafe_unique_array<data_t> data;\n \tidx_t size;\n };\n \n@@ -25,7 +26,7 @@ class BufferedSerializer : public Serializer {\n \t//! writing past the initial threshold\n \tDUCKDB_API explicit BufferedSerializer(idx_t maximum_size = SERIALIZER_DEFAULT_SIZE);\n \t//! Serializes to a provided (owned) data pointer\n-\tBufferedSerializer(unique_ptr<data_t[]> data, idx_t size);\n+\tBufferedSerializer(unsafe_unique_array<data_t> data, idx_t size);\n \tBufferedSerializer(data_ptr_t data, idx_t size);\n \n \tidx_t maximum_size;\ndiff --git a/src/include/duckdb/common/serializer/serialization_traits.hpp b/src/include/duckdb/common/serializer/serialization_traits.hpp\nindex 851b42b392f8..c5e3ccd49aaa 100644\n--- a/src/include/duckdb/common/serializer/serialization_traits.hpp\n+++ b/src/include/duckdb/common/serializer/serialization_traits.hpp\n@@ -65,10 +65,9 @@ struct is_unordered_map<typename std::unordered_map<Args...>> : std::true_type {\n template <typename T>\n struct is_unique_ptr : std::false_type {};\n \n-template <typename T, typename D>\n-struct is_unique_ptr<unique_ptr<T, D>> : std::true_type {\n+template <typename T>\n+struct is_unique_ptr<unique_ptr<T>> : std::true_type {\n \ttypedef T ELEMENT_TYPE;\n-\ttypedef D DELETER_TYPE;\n };\n \n template <typename T>\ndiff --git a/src/include/duckdb/common/sort/duckdb_pdqsort.hpp b/src/include/duckdb/common/sort/duckdb_pdqsort.hpp\nindex 104332ff52ae..d779511c21db 100644\n--- a/src/include/duckdb/common/sort/duckdb_pdqsort.hpp\n+++ b/src/include/duckdb/common/sort/duckdb_pdqsort.hpp\n@@ -25,6 +25,7 @@ applications, and to alter it and redistribute it freely, subject to the followi\n #include \"duckdb/common/fast_mem.hpp\"\n #include \"duckdb/common/helper.hpp\"\n #include \"duckdb/common/types.hpp\"\n+#include \"duckdb/common/unique_ptr.hpp\"\n \n #include <algorithm>\n #include <cstddef>\n@@ -38,6 +39,10 @@ using duckdb::idx_t;\n using duckdb::data_t;\n using duckdb::data_ptr_t;\n using duckdb::unique_ptr;\n+using duckdb::unique_array;\n+using duckdb::unsafe_unique_array;\n+using duckdb::make_uniq_array;\n+using duckdb::make_unsafe_uniq_array;\n using duckdb::FastMemcpy;\n using duckdb::FastMemcmp;\n \n@@ -73,9 +78,9 @@ inline int log2(T n) {\n struct PDQConstants {\n \tPDQConstants(idx_t entry_size, idx_t comp_offset, idx_t comp_size, data_ptr_t end)\n \t    : entry_size(entry_size), comp_offset(comp_offset), comp_size(comp_size),\n-\t      tmp_buf_ptr(unique_ptr<data_t[]>(new data_t[entry_size])), tmp_buf(tmp_buf_ptr.get()),\n-\t      iter_swap_buf_ptr(unique_ptr<data_t[]>(new data_t[entry_size])), iter_swap_buf(iter_swap_buf_ptr.get()),\n-\t      swap_offsets_buf_ptr(unique_ptr<data_t[]>(new data_t[entry_size])),\n+\t      tmp_buf_ptr(make_unsafe_uniq_array<data_t>(entry_size)), tmp_buf(tmp_buf_ptr.get()),\n+\t      iter_swap_buf_ptr(make_unsafe_uniq_array<data_t>(entry_size)), iter_swap_buf(iter_swap_buf_ptr.get()),\n+\t      swap_offsets_buf_ptr(make_unsafe_uniq_array<data_t>(entry_size)),\n \t      swap_offsets_buf(swap_offsets_buf_ptr.get()), end(end) {\n \t}\n \n@@ -83,13 +88,13 @@ struct PDQConstants {\n \tconst idx_t comp_offset;\n \tconst idx_t comp_size;\n \n-\tunique_ptr<data_t[]> tmp_buf_ptr;\n+\tunsafe_unique_array<data_t> tmp_buf_ptr;\n \tconst data_ptr_t tmp_buf;\n \n-\tunique_ptr<data_t[]> iter_swap_buf_ptr;\n+\tunsafe_unique_array<data_t> iter_swap_buf_ptr;\n \tconst data_ptr_t iter_swap_buf;\n \n-\tunique_ptr<data_t[]> swap_offsets_buf_ptr;\n+\tunsafe_unique_array<data_t> swap_offsets_buf_ptr;\n \tconst data_ptr_t swap_offsets_buf;\n \n \tconst data_ptr_t end;\ndiff --git a/src/include/duckdb/common/string_util.hpp b/src/include/duckdb/common/string_util.hpp\nindex 5112b1df2f6a..0e6509b5dd75 100644\n--- a/src/include/duckdb/common/string_util.hpp\n+++ b/src/include/duckdb/common/string_util.hpp\n@@ -15,6 +15,7 @@\n #include <cstring>\n \n namespace duckdb {\n+\n /**\n  * String Utility Functions\n  * Note that these are not the most efficient implementations (i.e., they copy\n@@ -45,25 +46,25 @@ class StringUtil {\n \t\tthrow InvalidInputException(\"Invalid input for binary digit: %s\", string(c, 1));\n \t}\n \n-\tDUCKDB_API static bool CharacterIsSpace(char c) {\n+\tstatic bool CharacterIsSpace(char c) {\n \t\treturn c == ' ' || c == '\\t' || c == '\\n' || c == '\\v' || c == '\\f' || c == '\\r';\n \t}\n-\tDUCKDB_API static bool CharacterIsNewline(char c) {\n+\tstatic bool CharacterIsNewline(char c) {\n \t\treturn c == '\\n' || c == '\\r';\n \t}\n-\tDUCKDB_API static bool CharacterIsDigit(char c) {\n+\tstatic bool CharacterIsDigit(char c) {\n \t\treturn c >= '0' && c <= '9';\n \t}\n-\tDUCKDB_API static bool CharacterIsHex(char c) {\n+\tstatic bool CharacterIsHex(char c) {\n \t\treturn (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') || (c >= 'A' && c <= 'F');\n \t}\n-\tDUCKDB_API static char CharacterToLower(char c) {\n+\tstatic char CharacterToLower(char c) {\n \t\tif (c >= 'A' && c <= 'Z') {\n \t\t\treturn c - ('A' - 'a');\n \t\t}\n \t\treturn c;\n \t}\n-\tDUCKDB_API static char CharacterIsAlpha(char c) {\n+\tstatic char CharacterIsAlpha(char c) {\n \t\treturn (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z');\n \t}\n \tstatic bool CharacterIsOperator(char c) {\n@@ -85,6 +86,23 @@ class StringUtil {\n \t\treturn false;\n \t}\n \n+\ttemplate <class TO>\n+\tstatic vector<TO> ConvertStrings(const vector<string> &strings) {\n+\t\tvector<TO> result;\n+\t\tfor (auto &string : strings) {\n+\t\t\tresult.emplace_back(string);\n+\t\t}\n+\t\treturn result;\n+\t}\n+\n+\tstatic vector<SQLIdentifier> ConvertToSQLIdentifiers(const vector<string> &strings) {\n+\t\treturn ConvertStrings<SQLIdentifier>(strings);\n+\t}\n+\n+\tstatic vector<SQLString> ConvertToSQLStrings(const vector<string> &strings) {\n+\t\treturn ConvertStrings<SQLString>(strings);\n+\t}\n+\n \t//! Returns true if the needle string exists in the haystack\n \tDUCKDB_API static bool Contains(const string &haystack, const string &needle);\n \n@@ -200,7 +218,7 @@ class StringUtil {\n \n \t//! Returns true if two null-terminated strings are equal or point to the same address.\n \t//! Returns false if only one of the strings is nullptr\n-\tDUCKDB_API static bool Equals(const char *s1, const char *s2) {\n+\tstatic bool Equals(const char *s1, const char *s2) {\n \t\tif (s1 == s2) {\n \t\t\treturn true;\n \t\t}\ndiff --git a/src/include/duckdb/common/types.hpp b/src/include/duckdb/common/types.hpp\nindex 6f97457473f9..f5347c5a8966 100644\n--- a/src/include/duckdb/common/types.hpp\n+++ b/src/include/duckdb/common/types.hpp\n@@ -308,14 +308,14 @@ struct LogicalType {\n \tDUCKDB_API static LogicalType FormatDeserialize(FormatDeserializer &deserializer);\n \n \n-\tDUCKDB_API static bool TypeIsTimestamp(LogicalTypeId id) {\n+\tstatic bool TypeIsTimestamp(LogicalTypeId id) {\n \t\treturn (id == LogicalTypeId::TIMESTAMP ||\n \t\t\t\tid == LogicalTypeId::TIMESTAMP_MS ||\n \t\t\t\tid == LogicalTypeId::TIMESTAMP_NS ||\n \t\t\t\tid == LogicalTypeId::TIMESTAMP_SEC ||\n \t\t\t\tid == LogicalTypeId::TIMESTAMP_TZ);\n \t}\n-\tDUCKDB_API static bool TypeIsTimestamp(const LogicalType& type) {\n+\tstatic bool TypeIsTimestamp(const LogicalType& type) {\n \t\treturn TypeIsTimestamp(type.id());\n \t}\n \tDUCKDB_API string ToString() const;\ndiff --git a/src/include/duckdb/common/types/chunk_collection.hpp b/src/include/duckdb/common/types/chunk_collection.hpp\nindex ff5223b5ae33..e3d1ddaa6506 100644\n--- a/src/include/duckdb/common/types/chunk_collection.hpp\n+++ b/src/include/duckdb/common/types/chunk_collection.hpp\n@@ -30,7 +30,7 @@ class ChunkCollection {\n \texplicit ChunkCollection(ClientContext &context);\n \n \t//! The types of columns in the ChunkCollection\n-\tDUCKDB_API vector<LogicalType> &Types() {\n+\tvector<LogicalType> &Types() {\n \t\treturn types;\n \t}\n \tconst vector<LogicalType> &Types() const {\n@@ -38,12 +38,12 @@ class ChunkCollection {\n \t}\n \n \t//! The amount of rows in the ChunkCollection\n-\tDUCKDB_API const idx_t &Count() const {\n+\tconst idx_t &Count() const {\n \t\treturn count;\n \t}\n \n \t//! The amount of columns in the ChunkCollection\n-\tDUCKDB_API idx_t ColumnCount() const {\n+\tidx_t ColumnCount() const {\n \t\treturn types.size();\n \t}\n \n@@ -76,12 +76,12 @@ class ChunkCollection {\n \tDUCKDB_API void Print() const;\n \n \t//! Gets a reference to the chunk at the given index\n-\tDUCKDB_API DataChunk &GetChunkForRow(idx_t row_index) {\n+\tDataChunk &GetChunkForRow(idx_t row_index) {\n \t\treturn *chunks[LocateChunk(row_index)];\n \t}\n \n \t//! Gets a reference to the chunk at the given index\n-\tDUCKDB_API DataChunk &GetChunk(idx_t chunk_index) {\n+\tDataChunk &GetChunk(idx_t chunk_index) {\n \t\tD_ASSERT(chunk_index < chunks.size());\n \t\treturn *chunks[chunk_index];\n \t}\n@@ -90,21 +90,21 @@ class ChunkCollection {\n \t\treturn *chunks[chunk_index];\n \t}\n \n-\tDUCKDB_API const vector<unique_ptr<DataChunk>> &Chunks() {\n+\tconst vector<unique_ptr<DataChunk>> &Chunks() {\n \t\treturn chunks;\n \t}\n \n-\tDUCKDB_API idx_t ChunkCount() const {\n+\tidx_t ChunkCount() const {\n \t\treturn chunks.size();\n \t}\n \n-\tDUCKDB_API void Reset() {\n+\tvoid Reset() {\n \t\tcount = 0;\n \t\tchunks.clear();\n \t\ttypes.clear();\n \t}\n \n-\tDUCKDB_API unique_ptr<DataChunk> Fetch() {\n+\tunique_ptr<DataChunk> Fetch() {\n \t\tif (ChunkCount() == 0) {\n \t\t\treturn nullptr;\n \t\t}\n@@ -115,7 +115,7 @@ class ChunkCollection {\n \t}\n \n \t//! Locates the chunk that belongs to the specific index\n-\tDUCKDB_API idx_t LocateChunk(idx_t index) {\n+\tidx_t LocateChunk(idx_t index) {\n \t\tidx_t result = index / STANDARD_VECTOR_SIZE;\n \t\tD_ASSERT(result < chunks.size());\n \t\treturn result;\ndiff --git a/src/include/duckdb/common/types/column/column_data_collection.hpp b/src/include/duckdb/common/types/column/column_data_collection.hpp\nindex bf180979c601..fd6b4954bb9e 100644\n--- a/src/include/duckdb/common/types/column/column_data_collection.hpp\n+++ b/src/include/duckdb/common/types/column/column_data_collection.hpp\n@@ -44,20 +44,20 @@ class ColumnDataCollection {\n \n public:\n \t//! The types of columns in the ColumnDataCollection\n-\tDUCKDB_API vector<LogicalType> &Types() {\n+\tvector<LogicalType> &Types() {\n \t\treturn types;\n \t}\n-\tDUCKDB_API const vector<LogicalType> &Types() const {\n+\tconst vector<LogicalType> &Types() const {\n \t\treturn types;\n \t}\n \n \t//! The amount of rows in the ColumnDataCollection\n-\tDUCKDB_API const idx_t &Count() const {\n+\tconst idx_t &Count() const {\n \t\treturn count;\n \t}\n \n \t//! The amount of columns in the ColumnDataCollection\n-\tDUCKDB_API idx_t ColumnCount() const {\n+\tidx_t ColumnCount() const {\n \t\treturn types.size();\n \t}\n \n@@ -177,32 +177,32 @@ class ColumnDataRowCollection {\n \n public:\n \t// container API\n-\tDUCKDB_API bool empty() const {\n+\tbool empty() const {\n \t\treturn rows.empty();\n \t}\n-\tDUCKDB_API idx_t size() const {\n+\tidx_t size() const {\n \t\treturn rows.size();\n \t}\n \n \tDUCKDB_API ColumnDataRow &operator[](idx_t i);\n \tDUCKDB_API const ColumnDataRow &operator[](idx_t i) const;\n \n-\tDUCKDB_API vector<ColumnDataRow>::iterator begin() {\n+\tvector<ColumnDataRow>::iterator begin() {\n \t\treturn rows.begin();\n \t}\n-\tDUCKDB_API vector<ColumnDataRow>::iterator end() {\n+\tvector<ColumnDataRow>::iterator end() {\n \t\treturn rows.end();\n \t}\n-\tDUCKDB_API vector<ColumnDataRow>::const_iterator cbegin() const {\n+\tvector<ColumnDataRow>::const_iterator cbegin() const {\n \t\treturn rows.cbegin();\n \t}\n-\tDUCKDB_API vector<ColumnDataRow>::const_iterator cend() const {\n+\tvector<ColumnDataRow>::const_iterator cend() const {\n \t\treturn rows.cend();\n \t}\n-\tDUCKDB_API vector<ColumnDataRow>::const_iterator begin() const {\n+\tvector<ColumnDataRow>::const_iterator begin() const {\n \t\treturn rows.begin();\n \t}\n-\tDUCKDB_API vector<ColumnDataRow>::const_iterator end() const {\n+\tvector<ColumnDataRow>::const_iterator end() const {\n \t\treturn rows.end();\n \t}\n \ndiff --git a/src/include/duckdb/common/types/column/column_data_collection_iterators.hpp b/src/include/duckdb/common/types/column/column_data_collection_iterators.hpp\nindex 39a1e1b910e0..3ceb700b2037 100644\n--- a/src/include/duckdb/common/types/column/column_data_collection_iterators.hpp\n+++ b/src/include/duckdb/common/types/column/column_data_collection_iterators.hpp\n@@ -43,10 +43,10 @@ class ColumnDataChunkIterationHelper {\n \t};\n \n public:\n-\tDUCKDB_API ColumnDataChunkIterator begin() {\n+\tColumnDataChunkIterator begin() {\n \t\treturn ColumnDataChunkIterator(&collection, column_ids);\n \t}\n-\tDUCKDB_API ColumnDataChunkIterator end() {\n+\tColumnDataChunkIterator end() {\n \t\treturn ColumnDataChunkIterator(nullptr, vector<column_t>());\n \t}\n };\ndiff --git a/src/include/duckdb/common/types/data_chunk.hpp b/src/include/duckdb/common/types/data_chunk.hpp\nindex f6e0cd84b211..1a7e62c32210 100644\n--- a/src/include/duckdb/common/types/data_chunk.hpp\n+++ b/src/include/duckdb/common/types/data_chunk.hpp\n@@ -124,7 +124,8 @@ class DataChunk {\n \t//! Turn all the vectors from the chunk into flat vectors\n \tDUCKDB_API void Flatten();\n \n-\tDUCKDB_API unique_ptr<UnifiedVectorFormat[]> ToUnifiedFormat();\n+\t// FIXME: this is DUCKDB_API, might need conversion back to regular unique ptr?\n+\tDUCKDB_API unsafe_unique_array<UnifiedVectorFormat> ToUnifiedFormat();\n \n \tDUCKDB_API void Slice(const SelectionVector &sel_vector, idx_t count);\n \ndiff --git a/src/include/duckdb/common/types/selection_vector.hpp b/src/include/duckdb/common/types/selection_vector.hpp\nindex 39a163b9cc63..ec403fa20659 100644\n--- a/src/include/duckdb/common/types/selection_vector.hpp\n+++ b/src/include/duckdb/common/types/selection_vector.hpp\n@@ -18,7 +18,7 @@ class VectorBuffer;\n struct SelectionData {\n \tDUCKDB_API explicit SelectionData(idx_t count);\n \n-\tunique_ptr<sel_t[]> owned_data;\n+\tunsafe_unique_array<sel_t> owned_data;\n };\n \n struct SelectionVector {\ndiff --git a/src/include/duckdb/common/types/type_map.hpp b/src/include/duckdb/common/types/type_map.hpp\nindex e4053d2a5898..0d3566fc359a 100644\n--- a/src/include/duckdb/common/types/type_map.hpp\n+++ b/src/include/duckdb/common/types/type_map.hpp\n@@ -8,9 +8,10 @@\n \n #pragma once\n \n+#include \"duckdb/common/types.hpp\"\n+#include \"duckdb/common/types/hash.hpp\"\n #include \"duckdb/common/unordered_map.hpp\"\n #include \"duckdb/common/unordered_set.hpp\"\n-#include \"duckdb/common/types.hpp\"\n \n namespace duckdb {\n \n@@ -31,4 +32,21 @@ using type_map_t = unordered_map<LogicalType, T, LogicalTypeHashFunction, Logica\n \n using type_set_t = unordered_set<LogicalType, LogicalTypeHashFunction, LogicalTypeEquality>;\n \n+struct LogicalTypeIdHashFunction {\n+\tuint64_t operator()(const LogicalTypeId &type_id) const {\n+\t\treturn duckdb::Hash<uint8_t>((uint8_t)type_id);\n+\t}\n+};\n+\n+struct LogicalTypeIdEquality {\n+\tbool operator()(const LogicalTypeId &a, const LogicalTypeId &b) const {\n+\t\treturn a == b;\n+\t}\n+};\n+\n+template <typename T>\n+using type_id_map_t = unordered_map<LogicalTypeId, T, LogicalTypeIdHashFunction, LogicalTypeIdEquality>;\n+\n+using type_id_set_t = unordered_set<LogicalTypeId, LogicalTypeIdHashFunction, LogicalTypeIdEquality>;\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/types/validity_mask.hpp b/src/include/duckdb/common/types/validity_mask.hpp\nindex 566ee1c9fdea..8dd91e6759cb 100644\n--- a/src/include/duckdb/common/types/validity_mask.hpp\n+++ b/src/include/duckdb/common/types/validity_mask.hpp\n@@ -24,7 +24,7 @@ struct TemplatedValidityData {\n public:\n \tinline explicit TemplatedValidityData(idx_t count) {\n \t\tauto entry_count = EntryCount(count);\n-\t\towned_data = unique_ptr<V[]>(new V[entry_count]);\n+\t\towned_data = make_unsafe_uniq_array<V>(entry_count);\n \t\tfor (idx_t entry_idx = 0; entry_idx < entry_count; entry_idx++) {\n \t\t\towned_data[entry_idx] = MAX_ENTRY;\n \t\t}\n@@ -32,13 +32,13 @@ struct TemplatedValidityData {\n \tinline TemplatedValidityData(const V *validity_mask, idx_t count) {\n \t\tD_ASSERT(validity_mask);\n \t\tauto entry_count = EntryCount(count);\n-\t\towned_data = unique_ptr<V[]>(new V[entry_count]);\n+\t\towned_data = make_unsafe_uniq_array<V>(entry_count);\n \t\tfor (idx_t entry_idx = 0; entry_idx < entry_count; entry_idx++) {\n \t\t\towned_data[entry_idx] = validity_mask[entry_idx];\n \t\t}\n \t}\n \n-\tunique_ptr<V[]> owned_data;\n+\tunsafe_unique_array<V> owned_data;\n \n public:\n \tstatic inline idx_t EntryCount(idx_t count) {\ndiff --git a/src/include/duckdb/common/types/value.hpp b/src/include/duckdb/common/types/value.hpp\nindex 6782044e7f73..9c2d17e53fa1 100644\n--- a/src/include/duckdb/common/types/value.hpp\n+++ b/src/include/duckdb/common/types/value.hpp\n@@ -165,7 +165,7 @@ class Value {\n \n \t//! Create a blob Value from a data pointer and a length: no bytes are interpreted\n \tDUCKDB_API static Value BLOB(const_data_ptr_t data, idx_t len);\n-\tDUCKDB_API static Value BLOB_RAW(const string &data) { // NOLINT\n+\tstatic Value BLOB_RAW(const string &data) { // NOLINT\n \t\treturn Value::BLOB((const_data_ptr_t)data.c_str(), data.size());\n \t}\n \t//! Creates a blob by casting a specified string to a blob (i.e. interpreting \\x characters)\ndiff --git a/src/include/duckdb/common/types/vector_buffer.hpp b/src/include/duckdb/common/types/vector_buffer.hpp\nindex d2171fcfc8f2..61cf90bae2f8 100644\n--- a/src/include/duckdb/common/types/vector_buffer.hpp\n+++ b/src/include/duckdb/common/types/vector_buffer.hpp\n@@ -71,10 +71,10 @@ class VectorBuffer {\n \t}\n \texplicit VectorBuffer(idx_t data_size) : buffer_type(VectorBufferType::STANDARD_BUFFER) {\n \t\tif (data_size > 0) {\n-\t\t\tdata = unique_ptr<data_t[]>(new data_t[data_size]);\n+\t\t\tdata = make_unsafe_uniq_array<data_t>(data_size);\n \t\t}\n \t}\n-\texplicit VectorBuffer(unique_ptr<data_t[]> data_p)\n+\texplicit VectorBuffer(unsafe_unique_array<data_t> data_p)\n \t    : buffer_type(VectorBufferType::STANDARD_BUFFER), data(std::move(data_p)) {\n \t}\n \tvirtual ~VectorBuffer() {\n@@ -87,7 +87,7 @@ class VectorBuffer {\n \t\treturn data.get();\n \t}\n \n-\tvoid SetData(unique_ptr<data_t[]> new_data) {\n+\tvoid SetData(unsafe_unique_array<data_t> new_data) {\n \t\tdata = std::move(new_data);\n \t}\n \n@@ -120,7 +120,7 @@ class VectorBuffer {\n protected:\n \tVectorBufferType buffer_type;\n \tunique_ptr<VectorAuxiliaryData> aux_data;\n-\tunique_ptr<data_t[]> data;\n+\tunsafe_unique_array<data_t> data;\n };\n \n //! The DictionaryBuffer holds a selection vector\n@@ -241,12 +241,22 @@ class VectorListBuffer : public VectorBuffer {\n \n \tvoid PushBack(const Value &insert);\n \n-\tidx_t capacity = 0;\n-\tidx_t size = 0;\n+\tidx_t GetSize() {\n+\t\treturn size;\n+\t}\n+\n+\tidx_t GetCapacity() {\n+\t\treturn capacity;\n+\t}\n+\n+\tvoid SetCapacity(idx_t new_capacity);\n+\tvoid SetSize(idx_t new_size);\n \n private:\n \t//! child vectors used for nested data\n \tunique_ptr<Vector> child;\n+\tidx_t capacity = 0;\n+\tidx_t size = 0;\n };\n \n //! The ManagedVectorBuffer holds a buffer handle\ndiff --git a/src/include/duckdb/common/unique_ptr.hpp b/src/include/duckdb/common/unique_ptr.hpp\nindex 8ed11ec37b19..f81270fb1ff7 100644\n--- a/src/include/duckdb/common/unique_ptr.hpp\n+++ b/src/include/duckdb/common/unique_ptr.hpp\n@@ -2,38 +2,45 @@\n \n #include \"duckdb/common/exception.hpp\"\n #include \"duckdb/common/likely.hpp\"\n+#include \"duckdb/common/memory_safety.hpp\"\n \n #include <memory>\n #include <type_traits>\n \n namespace duckdb {\n \n-namespace {\n-struct __unique_ptr_utils {\n-\tstatic inline void AssertNotNull(void *ptr) {\n-#ifdef DEBUG\n-\t\tif (DUCKDB_UNLIKELY(!ptr)) {\n-\t\t\tthrow InternalException(\"Attempted to dereference unique_ptr that is NULL!\");\n-\t\t}\n-#endif\n-\t}\n-};\n-} // namespace\n-\n-template <class _Tp, class _Dp = std::default_delete<_Tp>>\n+template <class _Tp, class _Dp = std::default_delete<_Tp>, bool SAFE = true>\n class unique_ptr : public std::unique_ptr<_Tp, _Dp> {\n public:\n \tusing original = std::unique_ptr<_Tp, _Dp>;\n \tusing original::original;\n \n+private:\n+\tstatic inline void AssertNotNull(const bool null) {\n+#if defined(DUCKDB_DEBUG_NO_SAFETY) || defined(DUCKDB_CLANG_TIDY)\n+\t\treturn;\n+#else\n+\t\tif (DUCKDB_UNLIKELY(null)) {\n+\t\t\tthrow duckdb::InternalException(\"Attempted to dereference unique_ptr that is NULL!\");\n+\t\t}\n+#endif\n+\t}\n+\n+public:\n \ttypename std::add_lvalue_reference<_Tp>::type operator*() const {\n-\t\t__unique_ptr_utils::AssertNotNull((void *)original::get());\n-\t\treturn *(original::get());\n+\t\tconst auto ptr = original::get();\n+\t\tif (MemorySafety<SAFE>::enabled) {\n+\t\t\tAssertNotNull(!ptr);\n+\t\t}\n+\t\treturn *ptr;\n \t}\n \n \ttypename original::pointer operator->() const {\n-\t\t__unique_ptr_utils::AssertNotNull((void *)original::get());\n-\t\treturn original::get();\n+\t\tconst auto ptr = original::get();\n+\t\tif (MemorySafety<SAFE>::enabled) {\n+\t\t\tAssertNotNull(!ptr);\n+\t\t}\n+\t\treturn ptr;\n \t}\n \n #ifdef DUCKDB_CLANG_TIDY\n@@ -46,16 +53,40 @@ class unique_ptr : public std::unique_ptr<_Tp, _Dp> {\n \t}\n };\n \n-template <class _Tp, class _Dp>\n-class unique_ptr<_Tp[], _Dp> : public std::unique_ptr<_Tp[], _Dp> {\n+template <class _Tp, class _Dp, bool SAFE>\n+class unique_ptr<_Tp[], _Dp, SAFE> : public std::unique_ptr<_Tp[], std::default_delete<_Tp[]>> {\n public:\n-\tusing original = std::unique_ptr<_Tp[], _Dp>;\n+\tusing original = std::unique_ptr<_Tp[], std::default_delete<_Tp[]>>;\n \tusing original::original;\n \n+private:\n+\tstatic inline void AssertNotNull(const bool null) {\n+#if defined(DUCKDB_DEBUG_NO_SAFETY) || defined(DUCKDB_CLANG_TIDY)\n+\t\treturn;\n+#else\n+\t\tif (DUCKDB_UNLIKELY(null)) {\n+\t\t\tthrow duckdb::InternalException(\"Attempted to dereference unique_ptr that is NULL!\");\n+\t\t}\n+#endif\n+\t}\n+\n+public:\n \ttypename std::add_lvalue_reference<_Tp>::type operator[](size_t __i) const {\n-\t\t__unique_ptr_utils::AssertNotNull((void *)original::get());\n-\t\treturn (original::get())[__i];\n+\t\tconst auto ptr = original::get();\n+\t\tif (MemorySafety<SAFE>::enabled) {\n+\t\t\tAssertNotNull(!ptr);\n+\t\t}\n+\t\treturn ptr[__i];\n \t}\n };\n \n+template <typename T>\n+using unique_array = unique_ptr<T[], std::default_delete<T>, true>;\n+\n+template <typename T>\n+using unsafe_unique_array = unique_ptr<T[], std::default_delete<T>, false>;\n+\n+template <typename T>\n+using unsafe_unique_ptr = unique_ptr<T, std::default_delete<T>, false>;\n+\n } // namespace duckdb\ndiff --git a/src/include/duckdb/common/vector.hpp b/src/include/duckdb/common/vector.hpp\nindex 8c7de8bba29e..61690173b733 100644\n--- a/src/include/duckdb/common/vector.hpp\n+++ b/src/include/duckdb/common/vector.hpp\n@@ -12,6 +12,7 @@\n #include \"duckdb/common/typedefs.hpp\"\n #include \"duckdb/common/likely.hpp\"\n #include \"duckdb/common/exception.hpp\"\n+#include \"duckdb/common/memory_safety.hpp\"\n #include <vector>\n \n namespace duckdb {\n@@ -25,6 +26,7 @@ class vector : public std::vector<_Tp, std::allocator<_Tp>> {\n \tusing const_reference = typename original::const_reference;\n \tusing reference = typename original::reference;\n \n+private:\n \tstatic inline void AssertIndexInBounds(idx_t index, idx_t size) {\n #if defined(DUCKDB_DEBUG_NO_SAFETY) || defined(DUCKDB_CLANG_TIDY)\n \t\treturn;\n@@ -35,6 +37,7 @@ class vector : public std::vector<_Tp, std::allocator<_Tp>> {\n #endif\n \t}\n \n+public:\n #ifdef DUCKDB_CLANG_TIDY\n \t// This is necessary to tell clang-tidy that it reinitializes the variable after a move\n \t[[clang::reinitializes]]\n@@ -55,7 +58,7 @@ class vector : public std::vector<_Tp, std::allocator<_Tp>> {\n \n \ttemplate <bool _SAFE = false>\n \tinline typename original::reference get(typename original::size_type __n) {\n-\t\tif (_SAFE) {\n+\t\tif (MemorySafety<_SAFE>::enabled) {\n \t\t\tAssertIndexInBounds(__n, original::size());\n \t\t}\n \t\treturn original::operator[](__n);\n@@ -63,7 +66,7 @@ class vector : public std::vector<_Tp, std::allocator<_Tp>> {\n \n \ttemplate <bool _SAFE = false>\n \tinline typename original::const_reference get(typename original::size_type __n) const {\n-\t\tif (_SAFE) {\n+\t\tif (MemorySafety<_SAFE>::enabled) {\n \t\t\tAssertIndexInBounds(__n, original::size());\n \t\t}\n \t\treturn original::operator[](__n);\ndiff --git a/src/include/duckdb/common/winapi.hpp b/src/include/duckdb/common/winapi.hpp\nindex 2cff5d12d486..1b77335ca9a8 100644\n--- a/src/include/duckdb/common/winapi.hpp\n+++ b/src/include/duckdb/common/winapi.hpp\n@@ -9,7 +9,7 @@\n #pragma once\n \n #ifndef DUCKDB_API\n-#ifdef _WIN32\n+#if defined(_WIN32) && !defined(__MINGW32__)\n #if defined(DUCKDB_BUILD_LIBRARY) && !defined(DUCKDB_BUILD_LOADABLE_EXTENSION)\n #define DUCKDB_API __declspec(dllexport)\n #else\ndiff --git a/src/include/duckdb/execution/aggregate_hashtable.hpp b/src/include/duckdb/execution/aggregate_hashtable.hpp\nindex f7548a136d89..57c5eaf99c70 100644\n--- a/src/include/duckdb/execution/aggregate_hashtable.hpp\n+++ b/src/include/duckdb/execution/aggregate_hashtable.hpp\n@@ -73,7 +73,7 @@ struct AggregateHTAppendState {\n \tSelectionVector empty_vector;\n \tSelectionVector new_groups;\n \tVector addresses;\n-\tunique_ptr<UnifiedVectorFormat[]> group_data;\n+\tunsafe_unique_array<UnifiedVectorFormat> group_data;\n \tDataChunk group_chunk;\n \n \tTupleDataChunkState chunk_state;\ndiff --git a/src/include/duckdb/execution/expression_executor_state.hpp b/src/include/duckdb/execution/expression_executor_state.hpp\nindex 9e9ebe2ad2b3..d8c3432d789d 100644\n--- a/src/include/duckdb/execution/expression_executor_state.hpp\n+++ b/src/include/duckdb/execution/expression_executor_state.hpp\n@@ -48,7 +48,7 @@ struct ExecuteFunctionState : public ExpressionState {\n \tunique_ptr<FunctionLocalState> local_state;\n \n public:\n-\tDUCKDB_API static FunctionLocalState *GetFunctionState(ExpressionState &state) {\n+\tstatic FunctionLocalState *GetFunctionState(ExpressionState &state) {\n \t\treturn ((ExecuteFunctionState &)state).local_state.get();\n \t}\n };\ndiff --git a/src/include/duckdb/execution/join_hashtable.hpp b/src/include/duckdb/execution/join_hashtable.hpp\nindex 76bd3ce019a8..c51a26c6935f 100644\n--- a/src/include/duckdb/execution/join_hashtable.hpp\n+++ b/src/include/duckdb/execution/join_hashtable.hpp\n@@ -65,12 +65,12 @@ class JoinHashTable {\n \t//! returned by the JoinHashTable::Scan function and can be used to resume a\n \t//! probe.\n \tstruct ScanStructure {\n-\t\tunique_ptr<UnifiedVectorFormat[]> key_data;\n+\t\tunsafe_unique_array<UnifiedVectorFormat> key_data;\n \t\tVector pointers;\n \t\tidx_t count;\n \t\tSelectionVector sel_vector;\n \t\t// whether or not the given tuple has found a match\n-\t\tunique_ptr<bool[]> found_match;\n+\t\tunsafe_unique_array<bool> found_match;\n \t\tJoinHashTable &ht;\n \t\tbool finished;\n \n@@ -212,8 +212,8 @@ class JoinHashTable {\n \t//! Insert the given set of locations into the HT with the given set of hashes\n \tvoid InsertHashes(Vector &hashes, idx_t count, data_ptr_t key_locations[], bool parallel);\n \n-\tidx_t PrepareKeys(DataChunk &keys, unique_ptr<UnifiedVectorFormat[]> &key_data, const SelectionVector *&current_sel,\n-\t                  SelectionVector &sel, bool build_side);\n+\tidx_t PrepareKeys(DataChunk &keys, unsafe_unique_array<UnifiedVectorFormat> &key_data,\n+\t                  const SelectionVector *&current_sel, SelectionVector &sel, bool build_side);\n \n \t//! Lock for combining data_collection when merging HTs\n \tmutex data_lock;\ndiff --git a/src/include/duckdb/execution/operator/join/outer_join_marker.hpp b/src/include/duckdb/execution/operator/join/outer_join_marker.hpp\nindex 11f801d0799e..b90a26767bc0 100644\n--- a/src/include/duckdb/execution/operator/join/outer_join_marker.hpp\n+++ b/src/include/duckdb/execution/operator/join/outer_join_marker.hpp\n@@ -67,7 +67,7 @@ class OuterJoinMarker {\n \n private:\n \tbool enabled;\n-\tunique_ptr<bool[]> found_match;\n+\tunsafe_unique_array<bool> found_match;\n \tidx_t count;\n };\n \ndiff --git a/src/include/duckdb/execution/operator/join/perfect_hash_join_executor.hpp b/src/include/duckdb/execution/operator/join/perfect_hash_join_executor.hpp\nindex f72952b7eb1f..33fcb6a2fad2 100644\n--- a/src/include/duckdb/execution/operator/join/perfect_hash_join_executor.hpp\n+++ b/src/include/duckdb/execution/operator/join/perfect_hash_join_executor.hpp\n@@ -68,7 +68,7 @@ class PerfectHashJoinExecutor {\n \t//! Build and probe statistics\n \tPerfectHashJoinStats perfect_join_statistics;\n \t//! Stores the occurences of each value in the build side\n-\tunique_ptr<bool[]> bitmap_build_idx;\n+\tunsafe_unique_array<bool> bitmap_build_idx;\n \t//! Stores the number of unique keys in the build side\n \tidx_t unique_keys = 0;\n };\ndiff --git a/src/include/duckdb/execution/operator/join/physical_range_join.hpp b/src/include/duckdb/execution/operator/join/physical_range_join.hpp\nindex 5f83988d37a1..426919d4640a 100644\n--- a/src/include/duckdb/execution/operator/join/physical_range_join.hpp\n+++ b/src/include/duckdb/execution/operator/join/physical_range_join.hpp\n@@ -83,7 +83,7 @@ class PhysicalRangeJoin : public PhysicalComparisonJoin {\n \t\t//! The total number of rows in the RHS\n \t\tatomic<idx_t> count;\n \t\t//! A bool indicating for each tuple in the RHS if they found a match (only used in FULL OUTER JOIN)\n-\t\tunique_ptr<bool[]> found_match;\n+\t\tunsafe_unique_array<bool> found_match;\n \t\t//! Memory usage per thread\n \t\tidx_t memory_per_thread;\n \t};\ndiff --git a/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp b/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\nindex 09f90d779db0..6b06e353b9f3 100644\n--- a/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/base_csv_reader.hpp\n@@ -17,6 +17,8 @@\n #include \"duckdb/common/queue.hpp\"\n #include \"duckdb/execution/operator/persistent/csv_reader_options.hpp\"\n #include \"duckdb/common/multi_file_reader.hpp\"\n+#include \"duckdb/execution/operator/persistent/csv_line_info.hpp\"\n+\n #include <sstream>\n \n namespace duckdb {\n@@ -40,7 +42,6 @@ class BaseCSVReader {\n \tClientContext &context;\n \tFileSystem &fs;\n \tAllocator &allocator;\n-\tFileOpener *opener;\n \tBufferedCSVReaderOptions options;\n \tvector<LogicalType> return_types;\n \tvector<string> names;\n@@ -60,8 +61,6 @@ class BaseCSVReader {\n \n \tDataChunk parse_chunk;\n \n-\tstd::queue<unique_ptr<DataChunk>> cached_chunks;\n-\n \tParserMode mode;\n \n public:\n@@ -74,6 +73,12 @@ class BaseCSVReader {\n \tconst vector<LogicalType> &GetTypes() {\n \t\treturn return_types;\n \t}\n+\n+\t//! Get the 1-indexed global line number for the given local error line\n+\tvirtual idx_t GetLineError(idx_t line_error, idx_t buffer_idx) {\n+\t\treturn line_error + 1;\n+\t};\n+\n \t//! Initialize projection indices to select all columns\n \tvoid InitializeProjection();\n \n@@ -88,17 +93,18 @@ class BaseCSVReader {\n \tbool TryCastVector(Vector &parse_chunk_col, idx_t size, const LogicalType &sql_type);\n \n \t//! Adds a value to the current row\n-\tvoid AddValue(string_t str_val, idx_t &column, vector<idx_t> &escape_positions, bool has_quotes);\n+\tvoid AddValue(string_t str_val, idx_t &column, vector<idx_t> &escape_positions, bool has_quotes,\n+\t              idx_t buffer_idx = 0);\n \t//! Adds a row to the insert_chunk, returns true if the chunk is filled as a result of this row being added\n-\tbool AddRow(DataChunk &insert_chunk, idx_t &column, string &error_message);\n+\tbool AddRow(DataChunk &insert_chunk, idx_t &column, string &error_message, idx_t buffer_idx = 0);\n \t//! Finalizes a chunk, parsing all values that have been added so far and adding them to the insert_chunk\n-\tbool Flush(DataChunk &insert_chunk, bool try_add_line = false);\n+\tbool Flush(DataChunk &insert_chunk, idx_t buffer_idx = 0, bool try_add_line = false);\n \n \tunique_ptr<CSVFileHandle> OpenCSV(const BufferedCSVReaderOptions &options);\n \n \tvoid VerifyUTF8(idx_t col_idx);\n \tvoid VerifyUTF8(idx_t col_idx, idx_t row_idx, DataChunk &chunk, int64_t offset = 0);\n-\tstatic string GetLineNumberStr(idx_t linenr, bool linenr_estimated);\n+\tstring GetLineNumberStr(idx_t linenr, bool linenr_estimated, idx_t buffer_idx = 0);\n \n \t//! Sets the newline delimiter\n \tvoid SetNewLineDelimiter(bool carry = false, bool carry_followed_by_nl = false);\ndiff --git a/src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp b/src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp\nindex 8fdbb5635e47..b2a9ba00d4dd 100644\n--- a/src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp\n@@ -57,14 +57,15 @@ class BufferedCSVReader : public BaseCSVReader {\n \t                  const vector<LogicalType> &requested_types = vector<LogicalType>());\n \tBufferedCSVReader(ClientContext &context, string filename, BufferedCSVReaderOptions options,\n \t                  const vector<LogicalType> &requested_types = vector<LogicalType>());\n-\t~BufferedCSVReader();\n+\tvirtual ~BufferedCSVReader() {\n+\t}\n \n-\tunique_ptr<char[]> buffer;\n+\tunsafe_unique_array<char> buffer;\n \tidx_t buffer_size;\n \tidx_t position;\n \tidx_t start = 0;\n \n-\tvector<unique_ptr<char[]>> cached_buffers;\n+\tvector<unsafe_unique_array<char>> cached_buffers;\n \n \tunique_ptr<CSVFileHandle> file_handle;\n \ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_file_handle.hpp b/src/include/duckdb/execution/operator/persistent/csv_file_handle.hpp\nindex 8bba4923a6f4..d24f491be18b 100644\n--- a/src/include/duckdb/execution/operator/persistent/csv_file_handle.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/csv_file_handle.hpp\n@@ -11,152 +11,52 @@\n #include \"duckdb/common/file_system.hpp\"\n #include \"duckdb/common/mutex.hpp\"\n #include \"duckdb/common/helper.hpp\"\n+#include \"duckdb/common/allocator.hpp\"\n \n namespace duckdb {\n+class Allocator;\n+class FileSystem;\n \n struct CSVFileHandle {\n public:\n-\texplicit CSVFileHandle(unique_ptr<FileHandle> file_handle_p, bool enable_reset = true)\n-\t    : file_handle(std::move(file_handle_p)), reset_enabled(enable_reset) {\n-\t\tcan_seek = file_handle->CanSeek();\n-\t\tplain_file_source = file_handle->OnDiskFile() && can_seek;\n-\t\tfile_size = file_handle->GetFileSize();\n-\t}\n+\tCSVFileHandle(FileSystem &fs, Allocator &allocator, unique_ptr<FileHandle> file_handle_p, const string &path_p,\n+\t              FileCompressionType compression, bool enable_reset = true);\n \n-\tbool CanSeek() {\n-\t\treturn can_seek;\n-\t}\n-\tvoid Seek(idx_t position) {\n-\t\tif (!can_seek) {\n-\t\t\tthrow InternalException(\"Cannot seek in this file\");\n-\t\t}\n-\t\tfile_handle->Seek(position);\n-\t}\n-\tidx_t SeekPosition() {\n-\t\tif (!can_seek) {\n-\t\t\tthrow InternalException(\"Cannot seek in this file\");\n-\t\t}\n-\t\treturn file_handle->SeekPosition();\n-\t}\n-\tvoid Reset() {\n-\t\tif (plain_file_source) {\n-\t\t\tfile_handle->Reset();\n-\t\t} else {\n-\t\t\tif (!reset_enabled) {\n-\t\t\t\tthrow InternalException(\"Reset called but reset is not enabled for this CSV Handle\");\n-\t\t\t}\n-\t\t\tread_position = 0;\n-\t\t}\n-\t}\n-\tbool PlainFileSource() {\n-\t\treturn plain_file_source;\n-\t}\n-\n-\tbool OnDiskFile() {\n-\t\treturn file_handle->OnDiskFile();\n-\t}\n-\n-\tidx_t FileSize() {\n-\t\treturn file_size;\n-\t}\n+\tmutex main_mutex;\n \n-\tbool FinishedReading() {\n-\t\treturn requested_bytes >= file_size;\n-\t}\n+public:\n+\tbool CanSeek();\n+\tvoid Seek(idx_t position);\n+\tidx_t SeekPosition();\n+\tvoid Reset();\n+\tbool OnDiskFile();\n \n-\tidx_t Read(void *buffer, idx_t nr_bytes) {\n-\t\trequested_bytes += nr_bytes;\n-\t\tif (!plain_file_source) {\n-\t\t\t// not a plain file source: we need to do some bookkeeping around the reset functionality\n-\t\t\tidx_t result_offset = 0;\n-\t\t\tif (read_position < buffer_size) {\n-\t\t\t\t// we need to read from our cached buffer\n-\t\t\t\tauto buffer_read_count = MinValue<idx_t>(nr_bytes, buffer_size - read_position);\n-\t\t\t\tmemcpy(buffer, cached_buffer.get() + read_position, buffer_read_count);\n-\t\t\t\tresult_offset += buffer_read_count;\n-\t\t\t\tread_position += buffer_read_count;\n-\t\t\t\tif (result_offset == nr_bytes) {\n-\t\t\t\t\treturn nr_bytes;\n-\t\t\t\t}\n-\t\t\t} else if (!reset_enabled && cached_buffer) {\n-\t\t\t\t// reset is disabled, but we still have cached data\n-\t\t\t\t// we can remove any cached data\n-\t\t\t\tcached_buffer.reset();\n-\t\t\t\tbuffer_size = 0;\n-\t\t\t\tbuffer_capacity = 0;\n-\t\t\t\tread_position = 0;\n-\t\t\t}\n-\t\t\t// we have data left to read from the file\n-\t\t\t// read directly into the buffer\n-\t\t\tauto bytes_read = file_handle->Read((char *)buffer + result_offset, nr_bytes - result_offset);\n-\t\t\tfile_size = file_handle->GetFileSize();\n-\t\t\tread_position += bytes_read;\n-\t\t\tif (reset_enabled) {\n-\t\t\t\t// if reset caching is enabled, we need to cache the bytes that we have read\n-\t\t\t\tif (buffer_size + bytes_read >= buffer_capacity) {\n-\t\t\t\t\t// no space; first enlarge the buffer\n-\t\t\t\t\tbuffer_capacity = MaxValue<idx_t>(NextPowerOfTwo(buffer_size + bytes_read), buffer_capacity * 2);\n+\tidx_t FileSize();\n \n-\t\t\t\t\tauto new_buffer = unique_ptr<data_t[]>(new data_t[buffer_capacity]);\n-\t\t\t\t\tif (buffer_size > 0) {\n-\t\t\t\t\t\tmemcpy(new_buffer.get(), cached_buffer.get(), buffer_size);\n-\t\t\t\t\t}\n-\t\t\t\t\tcached_buffer = std::move(new_buffer);\n-\t\t\t\t}\n-\t\t\t\tmemcpy(cached_buffer.get() + buffer_size, (char *)buffer + result_offset, bytes_read);\n-\t\t\t\tbuffer_size += bytes_read;\n-\t\t\t}\n+\tbool FinishedReading();\n \n-\t\t\treturn result_offset + bytes_read;\n-\t\t} else {\n-\t\t\treturn file_handle->Read(buffer, nr_bytes);\n-\t\t}\n-\t}\n+\tidx_t Read(void *buffer, idx_t nr_bytes);\n \n-\tstring ReadLine() {\n-\t\tbool carriage_return = false;\n-\t\tstring result;\n-\t\tchar buffer[1];\n-\t\twhile (true) {\n-\t\t\tidx_t bytes_read = Read(buffer, 1);\n-\t\t\tif (bytes_read == 0) {\n-\t\t\t\treturn result;\n-\t\t\t}\n-\t\t\tif (carriage_return) {\n-\t\t\t\tif (buffer[0] != '\\n') {\n-\t\t\t\t\tif (!file_handle->CanSeek()) {\n-\t\t\t\t\t\tthrow BinderException(\n-\t\t\t\t\t\t    \"Carriage return newlines not supported when reading CSV files in which we cannot seek\");\n-\t\t\t\t\t}\n-\t\t\t\t\tfile_handle->Seek(file_handle->SeekPosition() - 1);\n-\t\t\t\t\treturn result;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tif (buffer[0] == '\\n') {\n-\t\t\t\treturn result;\n-\t\t\t}\n-\t\t\tif (buffer[0] != '\\r') {\n-\t\t\t\tresult += buffer[0];\n-\t\t\t} else {\n-\t\t\t\tcarriage_return = true;\n-\t\t\t}\n-\t\t}\n-\t}\n+\tstring ReadLine();\n+\tvoid DisableReset();\n \n-\tvoid DisableReset() {\n-\t\tthis->reset_enabled = false;\n-\t}\n-\tmutex main_mutex;\n-\tidx_t count = 0;\n+\tstatic unique_ptr<FileHandle> OpenFileHandle(FileSystem &fs, Allocator &allocator, const string &path,\n+\t                                             FileCompressionType compression);\n+\tstatic unique_ptr<CSVFileHandle> OpenFile(FileSystem &fs, Allocator &allocator, const string &path,\n+\t                                          FileCompressionType compression, bool enable_reset);\n \n private:\n+\tFileSystem &fs;\n+\tAllocator &allocator;\n \tunique_ptr<FileHandle> file_handle;\n+\tstring path;\n+\tFileCompressionType compression;\n \tbool reset_enabled = true;\n \tbool can_seek = false;\n-\tbool plain_file_source = false;\n+\tbool on_disk_file = false;\n \tidx_t file_size = 0;\n \t// reset support\n-\tunique_ptr<data_t[]> cached_buffer;\n+\tAllocatedData cached_buffer;\n \tidx_t read_position = 0;\n \tidx_t buffer_size = 0;\n \tidx_t buffer_capacity = 0;\ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp b/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp\nnew file mode 100644\nindex 000000000000..4d790fe7490f\n--- /dev/null\n+++ b/src/include/duckdb/execution/operator/persistent/csv_line_info.hpp\n@@ -0,0 +1,41 @@\n+//===----------------------------------------------------------------------===//\n+//                         DuckDB\n+//\n+// duckdb/execution/operator/persistent/csv_line_info.hpp\n+//\n+//\n+//===----------------------------------------------------------------------===//\n+\n+#pragma once\n+\n+namespace duckdb {\n+struct LineInfo {\n+public:\n+\texplicit LineInfo(mutex &main_mutex_p, vector<unordered_map<idx_t, idx_t>> &batch_to_tuple_end_p,\n+\t                  vector<set<idx_t>> &tuple_start_p, vector<vector<idx_t>> &tuple_end_p)\n+\t    : main_mutex(main_mutex_p), batch_to_tuple_end(batch_to_tuple_end_p), tuple_start(tuple_start_p),\n+\t      tuple_end(tuple_end_p) {};\n+\tbool CanItGetLine(idx_t file_idx, idx_t batch_idx);\n+\n+\t//! Return the 1-indexed line number\n+\tidx_t GetLine(idx_t batch_idx, idx_t line_error = 0, idx_t file_idx = 0, idx_t cur_start = 0, bool verify = true);\n+\t//! Verify if the CSV File was read correctly from [0,batch_idx] batches.\n+\tvoid Verify(idx_t file_idx, idx_t batch_idx, idx_t cur_first_pos);\n+\t//! Lines read per batch, <batch_index,count>\n+\tunordered_map<idx_t, idx_t> lines_read;\n+\t//! Set of batches that have been initialized but are not yet finished.\n+\tvector<set<idx_t>> current_batches;\n+\t//! Pointer to CSV Reader Mutex\n+\tmutex &main_mutex;\n+\t//! Pointer Batch to Tuple End\n+\tvector<unordered_map<idx_t, idx_t>> &batch_to_tuple_end;\n+\t//! Pointer Batch to Tuple Start\n+\tvector<set<idx_t>> &tuple_start;\n+\t//! Pointer Batch to Tuple End\n+\tvector<vector<idx_t>> &tuple_end;\n+\t//! If we already threw an exception on a previous thread.\n+\tbool done = false;\n+\tidx_t first_line = 0;\n+};\n+\n+} // namespace duckdb\ndiff --git a/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp b/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\nindex d91e09d6a78a..0cf388f66f9f 100644\n--- a/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/csv_reader_options.hpp\n@@ -19,13 +19,15 @@\n \n namespace duckdb {\n \n-enum NewLineIdentifier {\n+enum class NewLineIdentifier : uint8_t {\n \tSINGLE = 1,   // Either \\r or \\n\n \tCARRY_ON = 2, // \\r\\n\n \tMIX = 3,      // Hippie-Land, can't run it multithreaded\n \tNOT_SET = 4\n };\n \n+enum class ParallelMode { AUTOMATIC = 0, PARALLEL = 1, SINGLE_THREADED = 2 };\n+\n struct BufferedCSVReaderOptions {\n \t//===--------------------------------------------------------------------===//\n \t// CommonCSVOptions\n@@ -116,13 +118,16 @@ struct BufferedCSVReaderOptions {\n \t//! If we are running the parallel version of the CSV Reader. In general, the system should always auto-detect\n \t//! When it can't execute a parallel run before execution. However, there are (rather specific) situations where\n \t//! setting up this manually might be important\n-\tbool run_parallel = true;\n+\tParallelMode parallel_mode;\n \t//===--------------------------------------------------------------------===//\n \t// WriteCSVOptions\n \t//===--------------------------------------------------------------------===//\n-\n \t//! True, if column with that index must be quoted\n \tvector<bool> force_quote;\n+\t//! Prefix/suffix/custom newline the entire file once (enables writing of files as JSON arrays)\n+\tstring prefix;\n+\tstring suffix;\n+\tstring write_newline;\n \n \t//! The date format to use (if any is specified)\n \tstd::map<LogicalTypeId, StrpTimeFormat> date_format = {{LogicalTypeId::DATE, {}}, {LogicalTypeId::TIMESTAMP, {}}};\n@@ -130,8 +135,7 @@ struct BufferedCSVReaderOptions {\n \tstd::map<LogicalTypeId, StrfTimeFormat> write_date_format = {{LogicalTypeId::DATE, {}},\n \t                                                             {LogicalTypeId::TIMESTAMP, {}}};\n \t//! Whether or not a type format is specified\n-\tstd::map<LogicalTypeId, bool> has_format = {\n-\t    {LogicalTypeId::DATE, false}, {LogicalTypeId::TIMESTAMP, false}, {LogicalTypeId::TIMESTAMP_TZ, false}};\n+\tstd::map<LogicalTypeId, bool> has_format = {{LogicalTypeId::DATE, false}, {LogicalTypeId::TIMESTAMP, false}};\n \n \tvoid Serialize(FieldWriter &writer) const;\n \tvoid Deserialize(FieldReader &reader);\ndiff --git a/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp b/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\nindex e3261494fb8d..e156e23810af 100644\n--- a/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\n+++ b/src/include/duckdb/execution/operator/persistent/parallel_csv_reader.hpp\n@@ -1,7 +1,7 @@\n //===----------------------------------------------------------------------===//\n //                         DuckDB\n //\n-// duckdb/execution/operator/persistent/buffered_csv_reader.hpp\n+// duckdb/execution/operator/persistent/parallel_csv_reader.hpp\n //\n //\n //===----------------------------------------------------------------------===//\n@@ -12,6 +12,7 @@\n #include \"duckdb/execution/operator/persistent/csv_reader_options.hpp\"\n #include \"duckdb/execution/operator/persistent/csv_file_handle.hpp\"\n #include \"duckdb/execution/operator/persistent/csv_buffer.hpp\"\n+#include \"duckdb/execution/operator/persistent/csv_line_info.hpp\"\n \n #include <sstream>\n #include <utility>\n@@ -20,9 +21,9 @@ namespace duckdb {\n \n struct CSVBufferRead {\n \tCSVBufferRead(shared_ptr<CSVBuffer> buffer_p, idx_t buffer_start_p, idx_t buffer_end_p, idx_t batch_index,\n-\t              idx_t estimated_linenr)\n-\t    : buffer(std::move(buffer_p)), buffer_start(buffer_start_p), buffer_end(buffer_end_p), batch_index(batch_index),\n-\t      estimated_linenr(estimated_linenr) {\n+\t              idx_t local_batch_index_p, optional_ptr<LineInfo> line_info_p)\n+\t    : buffer(std::move(buffer_p)), line_info(line_info_p), buffer_start(buffer_start_p), buffer_end(buffer_end_p),\n+\t      batch_index(batch_index), local_batch_index(local_batch_index_p) {\n \t\tif (buffer) {\n \t\t\tif (buffer_end > buffer->GetBufferSize()) {\n \t\t\t\tbuffer_end = buffer->GetBufferSize();\n@@ -34,8 +35,9 @@ struct CSVBufferRead {\n \t}\n \n \tCSVBufferRead(shared_ptr<CSVBuffer> buffer_p, shared_ptr<CSVBuffer> nxt_buffer_p, idx_t buffer_start_p,\n-\t              idx_t buffer_end_p, idx_t batch_index, idx_t estimated_linenr)\n-\t    : CSVBufferRead(std::move(buffer_p), buffer_start_p, buffer_end_p, batch_index, estimated_linenr) {\n+\t              idx_t buffer_end_p, idx_t batch_index, idx_t local_batch_index, optional_ptr<LineInfo> line_info_p)\n+\t    : CSVBufferRead(std::move(buffer_p), buffer_start_p, buffer_end_p, batch_index, local_batch_index,\n+\t                    line_info_p) {\n \t\tnext_buffer = std::move(nxt_buffer_p);\n \t}\n \n@@ -65,7 +67,7 @@ struct CSVBufferRead {\n \t\t} else {\n \t\t\t// 3) It starts in the current buffer and ends in the next buffer\n \t\t\tD_ASSERT(next_buffer);\n-\t\t\tauto intersection = unique_ptr<char[]>(new char[length]);\n+\t\t\tauto intersection = make_unsafe_uniq_array<char>(length);\n \t\t\tidx_t cur_pos = 0;\n \t\t\tauto buffer_ptr = buffer->Ptr();\n \t\t\tfor (idx_t i = start_buffer; i < buffer->GetBufferSize(); i++) {\n@@ -83,24 +85,28 @@ struct CSVBufferRead {\n \n \tshared_ptr<CSVBuffer> buffer;\n \tshared_ptr<CSVBuffer> next_buffer;\n-\tvector<unique_ptr<char[]>> intersections;\n+\tvector<unsafe_unique_array<char>> intersections;\n+\toptional_ptr<LineInfo> line_info;\n \n \tidx_t buffer_start;\n \tidx_t buffer_end;\n \tidx_t batch_index;\n-\tidx_t estimated_linenr;\n+\tidx_t local_batch_index;\n+\tidx_t lines_read = 0;\n };\n \n struct VerificationPositions {\n \tidx_t beginning_of_first_line = 0;\n \tidx_t end_of_last_line = 0;\n };\n-//! Buffered CSV reader is a class that reads values from a stream and parses them as a CSV file\n+\n+//! CSV Reader for Parallel Reading\n class ParallelCSVReader : public BaseCSVReader {\n public:\n \tParallelCSVReader(ClientContext &context, BufferedCSVReaderOptions options, unique_ptr<CSVBufferRead> buffer,\n-\t                  idx_t first_pos_first_buffer, const vector<LogicalType> &requested_types);\n-\t~ParallelCSVReader();\n+\t                  idx_t first_pos_first_buffer, const vector<LogicalType> &requested_types, idx_t file_idx_p);\n+\tvirtual ~ParallelCSVReader() {\n+\t}\n \n \t//! Current Position (Relative to the Buffer)\n \tidx_t position_buffer = 0;\n@@ -118,13 +124,21 @@ class ParallelCSVReader : public BaseCSVReader {\n \tbool finished = false;\n \n \tunique_ptr<CSVBufferRead> buffer;\n+\n+\tidx_t file_idx;\n+\n \tVerificationPositions GetVerificationPositions();\n \n+\t//! Position of the first read line and last read line for verification purposes\n+\tVerificationPositions verification_positions;\n+\n public:\n \tvoid SetBufferRead(unique_ptr<CSVBufferRead> buffer);\n \t//! Extract a single DataChunk from the CSV file and stores it in insert_chunk\n \tvoid ParseCSV(DataChunk &insert_chunk);\n \n+\tidx_t GetLineError(idx_t line_error, idx_t buffer_idx) override;\n+\n private:\n \t//! Initialize Parser\n \tvoid Initialize(const vector<LogicalType> &requested_types);\n@@ -135,7 +149,7 @@ class ParallelCSVReader : public BaseCSVReader {\n \t//! Extract a single DataChunk from the CSV file and stores it in insert_chunk\n \tbool TryParseCSV(ParserMode mode, DataChunk &insert_chunk, string &error_message);\n \t//! Sets Position depending on the byte_start of this thread\n-\tbool SetPosition(DataChunk &insert_chunk);\n+\tbool SetPosition();\n \t//! Called when scanning the 1st buffer, skips empty lines\n \tvoid SkipEmptyLines();\n \t//! When a buffer finishes reading its piece, it still can try to scan up to the real end of the buffer\n@@ -148,8 +162,9 @@ class ParallelCSVReader : public BaseCSVReader {\n \n \t//! Parses a CSV file with a one-byte delimiter, escape and quote character\n \tbool TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message, bool try_add_line = false);\n-\t//! Position of the first read line and last read line for verification purposes\n-\tVerificationPositions verification_positions;\n+\t//! Verifies that the line length did not go over a pre-defined limit.\n+\tvoid VerifyLineLength(idx_t line_size);\n+\n \t//! First Position of First Buffer\n \tidx_t first_pos_first_buffer = 0;\n };\ndiff --git a/src/include/duckdb/execution/operator/schema/physical_create_type.hpp b/src/include/duckdb/execution/operator/schema/physical_create_type.hpp\nindex e024f7875604..1d5a5036bad5 100644\n--- a/src/include/duckdb/execution/operator/schema/physical_create_type.hpp\n+++ b/src/include/duckdb/execution/operator/schema/physical_create_type.hpp\n@@ -38,7 +38,7 @@ class PhysicalCreateType : public PhysicalOperator {\n \tSinkResultType Sink(ExecutionContext &context, DataChunk &chunk, OperatorSinkInput &input) const override;\n \n \tbool IsSink() const override {\n-\t\treturn info->query != nullptr;\n+\t\treturn !children.empty();\n \t}\n \n \tbool ParallelSink() const override {\ndiff --git a/src/include/duckdb/execution/perfect_aggregate_hashtable.hpp b/src/include/duckdb/execution/perfect_aggregate_hashtable.hpp\nindex 616836c05aa0..9d804850b0d0 100644\n--- a/src/include/duckdb/execution/perfect_aggregate_hashtable.hpp\n+++ b/src/include/duckdb/execution/perfect_aggregate_hashtable.hpp\n@@ -46,9 +46,9 @@ class PerfectAggregateHashTable : public BaseAggregateHashTable {\n \t// The actual pointer to the data\n \tdata_ptr_t data;\n \t//! The owned data of the HT\n-\tunique_ptr<data_t[]> owned_data;\n+\tunsafe_unique_array<data_t> owned_data;\n \t//! Information on whether or not a specific group has any entries\n-\tunique_ptr<bool[]> group_is_set;\n+\tunsafe_unique_array<bool> group_is_set;\n \n \t//! The minimum values for each of the group columns\n \tvector<Value> group_minima;\ndiff --git a/src/include/duckdb/execution/window_segment_tree.hpp b/src/include/duckdb/execution/window_segment_tree.hpp\nindex 287341648ec9..9f13b969258d 100644\n--- a/src/include/duckdb/execution/window_segment_tree.hpp\n+++ b/src/include/duckdb/execution/window_segment_tree.hpp\n@@ -113,7 +113,7 @@ class WindowSegmentTree {\n \tVector statev;\n \n \t//! The actual window segment tree: an array of aggregate states that represent all the intermediate nodes\n-\tunique_ptr<data_t[]> levels_flat_native;\n+\tunsafe_unique_array<data_t> levels_flat_native;\n \t//! For each level, the starting location in the levels_flat_native array\n \tvector<idx_t> levels_flat_start;\n \ndiff --git a/src/include/duckdb/function/aggregate_function.hpp b/src/include/duckdb/function/aggregate_function.hpp\nindex 8090cdfad955..fedb0d67ce02 100644\n--- a/src/include/duckdb/function/aggregate_function.hpp\n+++ b/src/include/duckdb/function/aggregate_function.hpp\n@@ -81,7 +81,6 @@ typedef unique_ptr<FunctionData> (*aggregate_deserialize_t)(ClientContext &conte\n \n class AggregateFunction : public BaseScalarFunction {\n public:\n-\tDUCKDB_API\n \tAggregateFunction(const string &name, const vector<LogicalType> &arguments, const LogicalType &return_type,\n \t                  aggregate_size_t state_size, aggregate_initialize_t initialize, aggregate_update_t update,\n \t                  aggregate_combine_t combine, aggregate_finalize_t finalize,\n@@ -97,7 +96,6 @@ class AggregateFunction : public BaseScalarFunction {\n \t      serialize(serialize), deserialize(deserialize), order_dependent(AggregateOrderDependent::ORDER_DEPENDENT) {\n \t}\n \n-\tDUCKDB_API\n \tAggregateFunction(const string &name, const vector<LogicalType> &arguments, const LogicalType &return_type,\n \t                  aggregate_size_t state_size, aggregate_initialize_t initialize, aggregate_update_t update,\n \t                  aggregate_combine_t combine, aggregate_finalize_t finalize,\n@@ -112,21 +110,19 @@ class AggregateFunction : public BaseScalarFunction {\n \t      serialize(serialize), deserialize(deserialize), order_dependent(AggregateOrderDependent::ORDER_DEPENDENT) {\n \t}\n \n-\tDUCKDB_API AggregateFunction(const vector<LogicalType> &arguments, const LogicalType &return_type,\n-\t                             aggregate_size_t state_size, aggregate_initialize_t initialize,\n-\t                             aggregate_update_t update, aggregate_combine_t combine, aggregate_finalize_t finalize,\n-\t                             FunctionNullHandling null_handling = FunctionNullHandling::DEFAULT_NULL_HANDLING,\n-\t                             aggregate_simple_update_t simple_update = nullptr,\n-\t                             bind_aggregate_function_t bind = nullptr, aggregate_destructor_t destructor = nullptr,\n-\t                             aggregate_statistics_t statistics = nullptr, aggregate_window_t window = nullptr,\n-\t                             aggregate_serialize_t serialize = nullptr,\n-\t                             aggregate_deserialize_t deserialize = nullptr)\n+\tAggregateFunction(const vector<LogicalType> &arguments, const LogicalType &return_type, aggregate_size_t state_size,\n+\t                  aggregate_initialize_t initialize, aggregate_update_t update, aggregate_combine_t combine,\n+\t                  aggregate_finalize_t finalize,\n+\t                  FunctionNullHandling null_handling = FunctionNullHandling::DEFAULT_NULL_HANDLING,\n+\t                  aggregate_simple_update_t simple_update = nullptr, bind_aggregate_function_t bind = nullptr,\n+\t                  aggregate_destructor_t destructor = nullptr, aggregate_statistics_t statistics = nullptr,\n+\t                  aggregate_window_t window = nullptr, aggregate_serialize_t serialize = nullptr,\n+\t                  aggregate_deserialize_t deserialize = nullptr)\n \t    : AggregateFunction(string(), arguments, return_type, state_size, initialize, update, combine, finalize,\n \t                        null_handling, simple_update, bind, destructor, statistics, window, serialize,\n \t                        deserialize) {\n \t}\n \n-\tDUCKDB_API\n \tAggregateFunction(const vector<LogicalType> &arguments, const LogicalType &return_type, aggregate_size_t state_size,\n \t                  aggregate_initialize_t initialize, aggregate_update_t update, aggregate_combine_t combine,\n \t                  aggregate_finalize_t finalize, aggregate_simple_update_t simple_update = nullptr,\n@@ -165,11 +161,11 @@ class AggregateFunction : public BaseScalarFunction {\n \t//! Whether or not the aggregate is order dependent\n \tAggregateOrderDependent order_dependent;\n \n-\tDUCKDB_API bool operator==(const AggregateFunction &rhs) const {\n+\tbool operator==(const AggregateFunction &rhs) const {\n \t\treturn state_size == rhs.state_size && initialize == rhs.initialize && update == rhs.update &&\n \t\t       combine == rhs.combine && finalize == rhs.finalize && window == rhs.window;\n \t}\n-\tDUCKDB_API bool operator!=(const AggregateFunction &rhs) const {\n+\tbool operator!=(const AggregateFunction &rhs) const {\n \t\treturn !(*this == rhs);\n \t}\n \ndiff --git a/src/include/duckdb/function/macro_function.hpp b/src/include/duckdb/function/macro_function.hpp\nindex 5c6a40895d07..29fea6c11ce8 100644\n--- a/src/include/duckdb/function/macro_function.hpp\n+++ b/src/include/duckdb/function/macro_function.hpp\n@@ -21,7 +21,7 @@ enum class MacroType : uint8_t { VOID_MACRO = 0, TABLE_MACRO = 1, SCALAR_MACRO =\n \n class MacroFunction {\n public:\n-\tMacroFunction(MacroType type);\n+\texplicit MacroFunction(MacroType type);\n \n \t//! The type\n \tMacroType type;\n@@ -45,6 +45,12 @@ class MacroFunction {\n \n \tvirtual string ToSQL(const string &schema, const string &name) const;\n \n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<MacroFunction> Deserialize(Deserializer &deserializer);\n+\n+protected:\n+\tvirtual void SerializeInternal(FieldWriter &writer) const = 0;\n+\n public:\n \ttemplate <class TARGET>\n \tTARGET &Cast() {\ndiff --git a/src/include/duckdb/function/scalar/strftime_format.hpp b/src/include/duckdb/function/scalar/strftime_format.hpp\nindex ff0dd954aa5d..1c803090e670 100644\n--- a/src/include/duckdb/function/scalar/strftime_format.hpp\n+++ b/src/include/duckdb/function/scalar/strftime_format.hpp\n@@ -66,6 +66,9 @@ struct StrTimeFormat {\n \t\treturn std::find(specifiers.begin(), specifiers.end(), s) != specifiers.end();\n \t}\n \n+\t//! The full format specifier, for error messages\n+\tstring format_specifier;\n+\n protected:\n \t//! The format specifiers\n \tvector<StrTimeSpecifier> specifiers;\n@@ -134,10 +137,6 @@ struct StrpTimeFormat : public StrTimeFormat {\n \t\tDUCKDB_API string FormatError(string_t input, const string &format_specifier);\n \t};\n \n-public:\n-\t//! The full format specifier, for error messages\n-\tstring format_specifier;\n-\n public:\n \tDUCKDB_API static ParseResult Parse(const string &format, const string &text);\n \ndiff --git a/src/include/duckdb/function/scalar_macro_function.hpp b/src/include/duckdb/function/scalar_macro_function.hpp\nindex eedebdfffcef..dfb6438e071b 100644\n--- a/src/include/duckdb/function/scalar_macro_function.hpp\n+++ b/src/include/duckdb/function/scalar_macro_function.hpp\n@@ -23,9 +23,9 @@ class ScalarMacroFunction : public MacroFunction {\n \tstatic constexpr const MacroType TYPE = MacroType::SCALAR_MACRO;\n \n public:\n-\tScalarMacroFunction(unique_ptr<ParsedExpression> expression);\n-\n+\texplicit ScalarMacroFunction(unique_ptr<ParsedExpression> expression);\n \tScalarMacroFunction(void);\n+\n \t//! The macro expression\n \tunique_ptr<ParsedExpression> expression;\n \n@@ -33,6 +33,11 @@ class ScalarMacroFunction : public MacroFunction {\n \tunique_ptr<MacroFunction> Copy() const override;\n \n \tstring ToSQL(const string &schema, const string &name) const override;\n+\n+\tstatic unique_ptr<MacroFunction> Deserialize(FieldReader &reader);\n+\n+protected:\n+\tvoid SerializeInternal(FieldWriter &writer) const override;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/function/table/read_csv.hpp b/src/include/duckdb/function/table/read_csv.hpp\nindex cf08c4aa87ea..ef40e15d2c53 100644\n--- a/src/include/duckdb/function/table/read_csv.hpp\n+++ b/src/include/duckdb/function/table/read_csv.hpp\n@@ -55,7 +55,7 @@ struct WriteCSVData : public BaseCSVData {\n \t//! The size of the CSV file (in bytes) that we buffer before we flush it to disk\n \tidx_t flush_size = 4096 * 8;\n \t//! For each byte whether or not the CSV file requires quotes when containing the byte\n-\tunique_ptr<bool[]> requires_quotes;\n+\tunsafe_unique_array<bool> requires_quotes;\n };\n \n struct ColumnInfo {\n@@ -65,7 +65,7 @@ struct ColumnInfo {\n \t\tnames = std::move(names_p);\n \t\ttypes = std::move(types_p);\n \t}\n-\tvoid Serialize(FieldWriter &writer) {\n+\tvoid Serialize(FieldWriter &writer) const {\n \t\twriter.WriteList<string>(names);\n \t\twriter.WriteRegularSerializableList<LogicalType>(types);\n \t}\n@@ -99,8 +99,6 @@ struct ReadCSVData : public BaseCSVData {\n \tbool single_threaded = false;\n \t//! Reader bind data\n \tMultiFileReaderBindData reader_bind;\n-\t//! If any file is a pipe\n-\tbool is_pipe = false;\n \tvector<ColumnInfo> column_info;\n \n \tvoid Initialize(unique_ptr<BufferedCSVReader> &reader) {\ndiff --git a/src/include/duckdb/function/table_function.hpp b/src/include/duckdb/function/table_function.hpp\nindex ee7391863b27..83cd99b4aca3 100644\n--- a/src/include/duckdb/function/table_function.hpp\n+++ b/src/include/duckdb/function/table_function.hpp\n@@ -48,7 +48,7 @@ struct GlobalTableFunctionState {\n public:\n \tDUCKDB_API virtual ~GlobalTableFunctionState();\n \n-\tDUCKDB_API virtual idx_t MaxThreads() const {\n+\tvirtual idx_t MaxThreads() const {\n \t\treturn 1;\n \t}\n \ndiff --git a/src/include/duckdb/function/table_macro_function.hpp b/src/include/duckdb/function/table_macro_function.hpp\nindex c7f7af73345f..aadc119cc29e 100644\n--- a/src/include/duckdb/function/table_macro_function.hpp\n+++ b/src/include/duckdb/function/table_macro_function.hpp\n@@ -33,6 +33,11 @@ class TableMacroFunction : public MacroFunction {\n \tunique_ptr<MacroFunction> Copy() const override;\n \n \tstring ToSQL(const string &schema, const string &name) const override;\n+\n+\tstatic unique_ptr<MacroFunction> Deserialize(FieldReader &reader);\n+\n+protected:\n+\tvoid SerializeInternal(FieldWriter &writer) const override;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/function/udf_function.hpp b/src/include/duckdb/function/udf_function.hpp\nindex 8fe92c46b0d5..d3c35e8bc262 100644\n--- a/src/include/duckdb/function/udf_function.hpp\n+++ b/src/include/duckdb/function/udf_function.hpp\n@@ -16,7 +16,7 @@ namespace duckdb {\n struct UDFWrapper {\n public:\n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateScalarFunction(const string &name, TR (*udf_func)(Args...)) {\n+\tinline static scalar_function_t CreateScalarFunction(const string &name, TR (*udf_func)(Args...)) {\n \t\tconst std::size_t num_template_argc = sizeof...(Args);\n \t\tswitch (num_template_argc) {\n \t\tcase 1:\n@@ -31,8 +31,8 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateScalarFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                              TR (*udf_func)(Args...)) {\n+\tinline static scalar_function_t CreateScalarFunction(const string &name, vector<LogicalType> args,\n+\t                                                     LogicalType ret_type, TR (*udf_func)(Args...)) {\n \t\tif (!TypesMatch<TR>(ret_type)) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"Return type doesn't match with the first template type.\");\n \t\t} // LCOV_EXCL_STOP\n@@ -56,8 +56,8 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic void RegisterFunction(const string &name, scalar_function_t udf_function, ClientContext &context,\n-\t                             LogicalType varargs = LogicalType(LogicalTypeId::INVALID)) {\n+\tinline static void RegisterFunction(const string &name, scalar_function_t udf_function, ClientContext &context,\n+\t                                    LogicalType varargs = LogicalType(LogicalTypeId::INVALID)) {\n \t\tvector<LogicalType> arguments;\n \t\tGetArgumentTypesRecursive<Args...>(arguments);\n \n@@ -66,23 +66,24 @@ struct UDFWrapper {\n \t\tRegisterFunction(name, arguments, ret_type, udf_function, context, varargs);\n \t}\n \n-\tDUCKDB_API static void RegisterFunction(string name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                        scalar_function_t udf_function, ClientContext &context,\n-\t                                        LogicalType varargs = LogicalType(LogicalTypeId::INVALID));\n+\tstatic void RegisterFunction(string name, vector<LogicalType> args, LogicalType ret_type,\n+\t                             scalar_function_t udf_function, ClientContext &context,\n+\t                             LogicalType varargs = LogicalType(LogicalTypeId::INVALID));\n \n \t//--------------------------------- Aggregate UDFs ------------------------------------//\n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA>\n-\tstatic AggregateFunction CreateAggregateFunction(const string &name) {\n+\tinline static AggregateFunction CreateAggregateFunction(const string &name) {\n \t\treturn CreateUnaryAggregateFunction<UDF_OP, STATE, TR, TA>(name);\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>\n-\tstatic AggregateFunction CreateAggregateFunction(const string &name) {\n+\tinline static AggregateFunction CreateAggregateFunction(const string &name) {\n \t\treturn CreateBinaryAggregateFunction<UDF_OP, STATE, TR, TA, TB>(name);\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA>\n-\tstatic AggregateFunction CreateAggregateFunction(const string &name, LogicalType ret_type, LogicalType input_type) {\n+\tinline static AggregateFunction CreateAggregateFunction(const string &name, LogicalType ret_type,\n+\t                                                        LogicalType input_type) {\n \t\tif (!TypesMatch<TR>(ret_type)) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"The return argument don't match!\");\n \t\t} // LCOV_EXCL_STOP\n@@ -95,8 +96,8 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>\n-\tstatic AggregateFunction CreateAggregateFunction(const string &name, LogicalType ret_type, LogicalType input_typeA,\n-\t                                                 LogicalType input_typeB) {\n+\tinline static AggregateFunction CreateAggregateFunction(const string &name, LogicalType ret_type,\n+\t                                                        LogicalType input_typeA, LogicalType input_typeB) {\n \t\tif (!TypesMatch<TR>(ret_type)) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"The return argument don't match!\");\n \t\t}\n@@ -113,13 +114,12 @@ struct UDFWrapper {\n \t}\n \n \t//! A generic CreateAggregateFunction ---------------------------------------------------------------------------//\n-\tstatic AggregateFunction CreateAggregateFunction(string name, vector<LogicalType> arguments,\n-\t                                                 LogicalType return_type, aggregate_size_t state_size,\n-\t                                                 aggregate_initialize_t initialize, aggregate_update_t update,\n-\t                                                 aggregate_combine_t combine, aggregate_finalize_t finalize,\n-\t                                                 aggregate_simple_update_t simple_update = nullptr,\n-\t                                                 bind_aggregate_function_t bind = nullptr,\n-\t                                                 aggregate_destructor_t destructor = nullptr) {\n+\tinline static AggregateFunction\n+\tCreateAggregateFunction(string name, vector<LogicalType> arguments, LogicalType return_type,\n+\t                        aggregate_size_t state_size, aggregate_initialize_t initialize, aggregate_update_t update,\n+\t                        aggregate_combine_t combine, aggregate_finalize_t finalize,\n+\t                        aggregate_simple_update_t simple_update = nullptr, bind_aggregate_function_t bind = nullptr,\n+\t                        aggregate_destructor_t destructor = nullptr) {\n \n \t\tAggregateFunction aggr_function(std::move(name), std::move(arguments), std::move(return_type), state_size,\n \t\t                                initialize, update, combine, finalize, simple_update, bind, destructor);\n@@ -127,8 +127,8 @@ struct UDFWrapper {\n \t\treturn aggr_function;\n \t}\n \n-\tDUCKDB_API static void RegisterAggrFunction(AggregateFunction aggr_function, ClientContext &context,\n-\t                                            LogicalType varargs = LogicalType(LogicalTypeId::INVALID));\n+\tstatic void RegisterAggrFunction(AggregateFunction aggr_function, ClientContext &context,\n+\t                                 LogicalType varargs = LogicalType(LogicalTypeId::INVALID));\n \n private:\n \t//-------------------------------- Templated functions --------------------------------//\n@@ -142,7 +142,7 @@ struct UDFWrapper {\n \t};\n \n \ttemplate <typename TR, typename TA>\n-\tstatic scalar_function_t CreateUnaryFunction(const string &name, TR (*udf_func)(TA)) {\n+\tinline static scalar_function_t CreateUnaryFunction(const string &name, TR (*udf_func)(TA)) {\n \t\tscalar_function_t udf_function = [=](DataChunk &input, ExpressionState &state, Vector &result) -> void {\n \t\t\tUnaryExecutor::GenericExecute<TA, TR, UnaryUDFExecutor>(input.data[0], result, input.size(),\n \t\t\t                                                        (void *)udf_func);\n@@ -151,7 +151,7 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename TA, typename TB>\n-\tstatic scalar_function_t CreateBinaryFunction(const string &name, TR (*udf_func)(TA, TB)) {\n+\tinline static scalar_function_t CreateBinaryFunction(const string &name, TR (*udf_func)(TA, TB)) {\n \t\tscalar_function_t udf_function = [=](DataChunk &input, ExpressionState &state, Vector &result) -> void {\n \t\t\tBinaryExecutor::Execute<TA, TB, TR>(input.data[0], input.data[1], result, input.size(), udf_func);\n \t\t};\n@@ -159,7 +159,7 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename TA, typename TB, typename TC>\n-\tstatic scalar_function_t CreateTernaryFunction(const string &name, TR (*udf_func)(TA, TB, TC)) {\n+\tinline static scalar_function_t CreateTernaryFunction(const string &name, TR (*udf_func)(TA, TB, TC)) {\n \t\tscalar_function_t udf_function = [=](DataChunk &input, ExpressionState &state, Vector &result) -> void {\n \t\t\tTernaryExecutor::Execute<TA, TB, TC, TR>(input.data[0], input.data[1], input.data[2], result, input.size(),\n \t\t\t                                         udf_func);\n@@ -168,22 +168,25 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateUnaryFunction(const string &name, TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateUnaryFunction(const string &name,\n+\t                                                    TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for unary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateBinaryFunction(const string &name, TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateBinaryFunction(const string &name,\n+\t                                                     TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for binary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateTernaryFunction(const string &name, TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateTernaryFunction(const string &name,\n+\t                                                      TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for ternary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename T>\n-\tstatic LogicalType GetArgumentType() {\n+\tinline static LogicalType GetArgumentType() {\n \t\tif (std::is_same<T, bool>()) {\n \t\t\treturn LogicalType(LogicalTypeId::BOOLEAN);\n \t\t} else if (std::is_same<T, int8_t>()) {\n@@ -206,13 +209,13 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TA, typename TB, typename... Args>\n-\tstatic void GetArgumentTypesRecursive(vector<LogicalType> &arguments) {\n+\tinline static void GetArgumentTypesRecursive(vector<LogicalType> &arguments) {\n \t\targuments.push_back(GetArgumentType<TA>());\n \t\tGetArgumentTypesRecursive<TB, Args...>(arguments);\n \t}\n \n \ttemplate <typename TA>\n-\tstatic void GetArgumentTypesRecursive(vector<LogicalType> &arguments) {\n+\tinline static void GetArgumentTypesRecursive(vector<LogicalType> &arguments) {\n \t\targuments.push_back(GetArgumentType<TA>());\n \t}\n \n@@ -220,14 +223,15 @@ struct UDFWrapper {\n \t//-------------------------------- Argumented functions --------------------------------//\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateUnaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                             TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateUnaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                    LogicalType ret_type,\n+\t                                                    TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for unary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename TR, typename TA>\n-\tstatic scalar_function_t CreateUnaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                             TR (*udf_func)(TA)) {\n+\tinline static scalar_function_t CreateUnaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                    LogicalType ret_type, TR (*udf_func)(TA)) {\n \t\tif (args.size() != 1) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"The number of LogicalType arguments (\\\"args\\\") should be 1!\");\n \t\t}\n@@ -243,14 +247,15 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateBinaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                              TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateBinaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                     LogicalType ret_type,\n+\t                                                     TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for binary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename TR, typename TA, typename TB>\n-\tstatic scalar_function_t CreateBinaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                              TR (*udf_func)(TA, TB)) {\n+\tinline static scalar_function_t CreateBinaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                     LogicalType ret_type, TR (*udf_func)(TA, TB)) {\n \t\tif (args.size() != 2) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"The number of LogicalType arguments (\\\"args\\\") should be 2!\");\n \t\t}\n@@ -268,14 +273,15 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename TR, typename... Args>\n-\tstatic scalar_function_t CreateTernaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                               TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n+\tinline static scalar_function_t CreateTernaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                      LogicalType ret_type,\n+\t                                                      TR (*udf_func)(Args...)) { // LCOV_EXCL_START\n \t\tthrow std::runtime_error(\"Incorrect number of arguments for ternary function\");\n \t} // LCOV_EXCL_STOP\n \n \ttemplate <typename TR, typename TA, typename TB, typename TC>\n-\tstatic scalar_function_t CreateTernaryFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                               TR (*udf_func)(TA, TB, TC)) {\n+\tinline static scalar_function_t CreateTernaryFunction(const string &name, vector<LogicalType> args,\n+\t                                                      LogicalType ret_type, TR (*udf_func)(TA, TB, TC)) {\n \t\tif (args.size() != 3) { // LCOV_EXCL_START\n \t\t\tthrow std::runtime_error(\"The number of LogicalType arguments (\\\"args\\\") should be 3!\");\n \t\t}\n@@ -297,7 +303,7 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename T>\n-\tstatic bool TypesMatch(const LogicalType &sql_type) {\n+\tinline static bool TypesMatch(const LogicalType &sql_type) {\n \t\tswitch (sql_type.id()) {\n \t\tcase LogicalTypeId::BOOLEAN:\n \t\t\treturn std::is_same<T, bool>();\n@@ -336,15 +342,15 @@ struct UDFWrapper {\n private:\n \t//-------------------------------- Aggregate functions --------------------------------//\n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA>\n-\tstatic AggregateFunction CreateUnaryAggregateFunction(const string &name) {\n+\tinline static AggregateFunction CreateUnaryAggregateFunction(const string &name) {\n \t\tLogicalType return_type = GetArgumentType<TR>();\n \t\tLogicalType input_type = GetArgumentType<TA>();\n \t\treturn CreateUnaryAggregateFunction<UDF_OP, STATE, TR, TA>(name, return_type, input_type);\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA>\n-\tstatic AggregateFunction CreateUnaryAggregateFunction(const string &name, LogicalType ret_type,\n-\t                                                      LogicalType input_type) {\n+\tinline static AggregateFunction CreateUnaryAggregateFunction(const string &name, LogicalType ret_type,\n+\t                                                             LogicalType input_type) {\n \t\tAggregateFunction aggr_function =\n \t\t    AggregateFunction::UnaryAggregate<STATE, TR, TA, UDF_OP>(input_type, ret_type);\n \t\taggr_function.name = name;\n@@ -352,7 +358,7 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>\n-\tstatic AggregateFunction CreateBinaryAggregateFunction(const string &name) {\n+\tinline static AggregateFunction CreateBinaryAggregateFunction(const string &name) {\n \t\tLogicalType return_type = GetArgumentType<TR>();\n \t\tLogicalType input_typeA = GetArgumentType<TA>();\n \t\tLogicalType input_typeB = GetArgumentType<TB>();\n@@ -360,8 +366,8 @@ struct UDFWrapper {\n \t}\n \n \ttemplate <typename UDF_OP, typename STATE, typename TR, typename TA, typename TB>\n-\tstatic AggregateFunction CreateBinaryAggregateFunction(const string &name, LogicalType ret_type,\n-\t                                                       LogicalType input_typeA, LogicalType input_typeB) {\n+\tinline static AggregateFunction CreateBinaryAggregateFunction(const string &name, LogicalType ret_type,\n+\t                                                              LogicalType input_typeA, LogicalType input_typeB) {\n \t\tAggregateFunction aggr_function =\n \t\t    AggregateFunction::BinaryAggregate<STATE, TR, TA, TB, UDF_OP>(input_typeA, input_typeB, ret_type);\n \t\taggr_function.name = name;\ndiff --git a/src/include/duckdb/main/appender.hpp b/src/include/duckdb/main/appender.hpp\nindex 48f77e5b922f..4fa513a7916d 100644\n--- a/src/include/duckdb/main/appender.hpp\n+++ b/src/include/duckdb/main/appender.hpp\n@@ -77,10 +77,10 @@ class BaseAppender {\n \t//! Flush the changes made by the appender and close it. The appender cannot be used after this point\n \tDUCKDB_API void Close();\n \n-\tDUCKDB_API vector<LogicalType> &GetTypes() {\n+\tvector<LogicalType> &GetTypes() {\n \t\treturn types;\n \t}\n-\tDUCKDB_API idx_t CurrentColumn() {\n+\tidx_t CurrentColumn() {\n \t\treturn column;\n \t}\n \tDUCKDB_API void AppendDataChunk(DataChunk &value);\ndiff --git a/src/include/duckdb/main/client_context.hpp b/src/include/duckdb/main/client_context.hpp\nindex 69327fdcfce5..37d2be330f29 100644\n--- a/src/include/duckdb/main/client_context.hpp\n+++ b/src/include/duckdb/main/client_context.hpp\n@@ -86,7 +86,7 @@ class ClientContext : public std::enable_shared_from_this<ClientContext> {\n \tTransactionContext transaction;\n \n public:\n-\tDUCKDB_API MetaTransaction &ActiveTransaction() {\n+\tMetaTransaction &ActiveTransaction() {\n \t\treturn transaction.ActiveTransaction();\n \t}\n \n@@ -276,7 +276,7 @@ class ClientContextLock {\n \n class ClientContextWrapper {\n public:\n-\tDUCKDB_API explicit ClientContextWrapper(const shared_ptr<ClientContext> &context)\n+\texplicit ClientContextWrapper(const shared_ptr<ClientContext> &context)\n \t    : client_context(context) {\n \n \t      };\ndiff --git a/src/include/duckdb/main/client_data.hpp b/src/include/duckdb/main/client_data.hpp\nindex 0730f31b1465..21a89676f4c2 100644\n--- a/src/include/duckdb/main/client_data.hpp\n+++ b/src/include/duckdb/main/client_data.hpp\n@@ -20,6 +20,7 @@ class BufferedFileWriter;\n class ClientContext;\n class CatalogSearchPath;\n class FileOpener;\n+class FileSystem;\n class HTTPState;\n class QueryProfiler;\n class QueryProfilerHistory;\n@@ -53,13 +54,18 @@ struct ClientData {\n \tunique_ptr<FileOpener> file_opener;\n \n \t//! HTTP State in this query\n-\tunique_ptr<HTTPState> http_state;\n+\tshared_ptr<HTTPState> http_state;\n+\n+\t//! The clients' file system wrapper\n+\tunique_ptr<FileSystem> client_file_system;\n \n \t//! The file search path\n \tstring file_search_path;\n \n \t//! The Max Line Length Size of Last Query Executed on a CSV File. (Only used for testing)\n-\tidx_t max_line_length = 0;\n+\t//! FIXME: this should not be done like this\n+\tbool debug_set_max_line_length = false;\n+\tidx_t debug_max_line_length = 0;\n \n public:\n \tDUCKDB_API static ClientData &Get(ClientContext &context);\ndiff --git a/src/include/duckdb/main/connection.hpp b/src/include/duckdb/main/connection.hpp\nindex 940f7676835e..de833e178f88 100644\n--- a/src/include/duckdb/main/connection.hpp\n+++ b/src/include/duckdb/main/connection.hpp\n@@ -180,8 +180,8 @@ class Connection {\n \t\tUDFWrapper::RegisterFunction<TR, Args...>(name, udf_func, *context, std::move(varargs));\n \t}\n \n-\tDUCKDB_API void CreateVectorizedFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n-\t                                         scalar_function_t udf_func, LogicalType varargs = LogicalType::INVALID) {\n+\tvoid CreateVectorizedFunction(const string &name, vector<LogicalType> args, LogicalType ret_type,\n+\t                              scalar_function_t udf_func, LogicalType varargs = LogicalType::INVALID) {\n \t\tUDFWrapper::RegisterFunction(name, std::move(args), std::move(ret_type), udf_func, *context,\n \t\t                             std::move(varargs));\n \t}\n@@ -214,13 +214,12 @@ class Connection {\n \t\tUDFWrapper::RegisterAggrFunction(function, *context);\n \t}\n \n-\tDUCKDB_API void CreateAggregateFunction(const string &name, vector<LogicalType> arguments, LogicalType return_type,\n-\t                                        aggregate_size_t state_size, aggregate_initialize_t initialize,\n-\t                                        aggregate_update_t update, aggregate_combine_t combine,\n-\t                                        aggregate_finalize_t finalize,\n-\t                                        aggregate_simple_update_t simple_update = nullptr,\n-\t                                        bind_aggregate_function_t bind = nullptr,\n-\t                                        aggregate_destructor_t destructor = nullptr) {\n+\tvoid CreateAggregateFunction(const string &name, vector<LogicalType> arguments, LogicalType return_type,\n+\t                             aggregate_size_t state_size, aggregate_initialize_t initialize,\n+\t                             aggregate_update_t update, aggregate_combine_t combine, aggregate_finalize_t finalize,\n+\t                             aggregate_simple_update_t simple_update = nullptr,\n+\t                             bind_aggregate_function_t bind = nullptr,\n+\t                             aggregate_destructor_t destructor = nullptr) {\n \t\tAggregateFunction function =\n \t\t    UDFWrapper::CreateAggregateFunction(name, arguments, return_type, state_size, initialize, update, combine,\n \t\t                                        finalize, simple_update, bind, destructor);\ndiff --git a/src/include/duckdb/main/extension_entries.hpp b/src/include/duckdb/main/extension_entries.hpp\nindex 606e70ad0c34..f301ee195211 100644\n--- a/src/include/duckdb/main/extension_entries.hpp\n+++ b/src/include/duckdb/main/extension_entries.hpp\n@@ -70,6 +70,7 @@ static constexpr ExtensionEntry EXTENSION_FUNCTIONS[] = {\n     {\"read_json\", \"json\"},\n     {\"read_json_auto\", \"json\"},\n     {\"read_json_objects\", \"json\"},\n+    {\"read_json_objects_auto\", \"json\"},\n     {\"read_ndjson\", \"json\"},\n     {\"read_ndjson_auto\", \"json\"},\n     {\"read_ndjson_objects\", \"json\"},\ndiff --git a/src/include/duckdb/main/extension_helper.hpp b/src/include/duckdb/main/extension_helper.hpp\nindex 0f52194be865..92e61a4d9d19 100644\n--- a/src/include/duckdb/main/extension_helper.hpp\n+++ b/src/include/duckdb/main/extension_helper.hpp\n@@ -43,10 +43,10 @@ class ExtensionHelper {\n \tstatic void InstallExtension(ClientContext &context, const string &extension, bool force_install);\n \tstatic void InstallExtension(DBConfig &config, FileSystem &fs, const string &extension, bool force_install);\n \tstatic void LoadExternalExtension(ClientContext &context, const string &extension);\n-\tstatic void LoadExternalExtension(DatabaseInstance &db, FileOpener *opener, const string &extension);\n+\tstatic void LoadExternalExtension(DatabaseInstance &db, FileSystem &fs, const string &extension);\n \n \tstatic string ExtensionDirectory(ClientContext &context);\n-\tstatic string ExtensionDirectory(DBConfig &config, FileSystem &fs, FileOpener *opener);\n+\tstatic string ExtensionDirectory(DBConfig &config, FileSystem &fs);\n \n \tstatic idx_t DefaultExtensionCount();\n \tstatic DefaultExtension GetDefaultExtension(idx_t index);\n@@ -70,9 +70,9 @@ class ExtensionHelper {\n \t                                     const string &local_path, const string &extension, bool force_install);\n \tstatic const vector<string> PathComponents();\n \tstatic bool AllowAutoInstall(const string &extension);\n-\tstatic ExtensionInitResult InitialLoad(DBConfig &config, FileOpener *opener, const string &extension);\n-\tstatic bool TryInitialLoad(DBConfig &config, FileOpener *opener, const string &extension,\n-\t                           ExtensionInitResult &result, string &error);\n+\tstatic ExtensionInitResult InitialLoad(DBConfig &config, FileSystem &fs, const string &extension);\n+\tstatic bool TryInitialLoad(DBConfig &config, FileSystem &fs, const string &extension, ExtensionInitResult &result,\n+\t                           string &error);\n \t//! For tagged releases we use the tag, else we use the git commit hash\n \tstatic const string GetVersionDirectoryName();\n \t//! Version tags occur with and without 'v', tag in extension path is always with 'v'\ndiff --git a/src/include/duckdb/main/query_result.hpp b/src/include/duckdb/main/query_result.hpp\nindex 406878b16294..d38d8ba6dede 100644\n--- a/src/include/duckdb/main/query_result.hpp\n+++ b/src/include/duckdb/main/query_result.hpp\n@@ -108,7 +108,7 @@ class QueryResult : public BaseQueryResult {\n \t//! Fetch() until both results are exhausted. The data in the results will be lost.\n \tDUCKDB_API bool Equals(QueryResult &other);\n \n-\tDUCKDB_API bool TryFetch(unique_ptr<DataChunk> &result, PreservedError &error) {\n+\tbool TryFetch(unique_ptr<DataChunk> &result, PreservedError &error) {\n \t\ttry {\n \t\t\tresult = Fetch();\n \t\t\treturn success;\n@@ -191,10 +191,10 @@ class QueryResult : public BaseQueryResult {\n \t};\n \n public:\n-\tDUCKDB_API QueryResultIterator begin() {\n+\tQueryResultIterator begin() {\n \t\treturn QueryResultIterator(this);\n \t}\n-\tDUCKDB_API QueryResultIterator end() {\n+\tQueryResultIterator end() {\n \t\treturn QueryResultIterator(nullptr);\n \t}\n \ndiff --git a/src/include/duckdb/main/relation.hpp b/src/include/duckdb/main/relation.hpp\nindex 242562f265e5..7eaea4bd5f6f 100644\n--- a/src/include/duckdb/main/relation.hpp\n+++ b/src/include/duckdb/main/relation.hpp\n@@ -32,12 +32,11 @@ class TableRef;\n \n class Relation : public std::enable_shared_from_this<Relation> {\n public:\n-\tDUCKDB_API Relation(const std::shared_ptr<ClientContext> &context, RelationType type)\n-\t    : context(context), type(type) {\n+\tRelation(const std::shared_ptr<ClientContext> &context, RelationType type) : context(context), type(type) {\n \t}\n-\tDUCKDB_API Relation(ClientContextWrapper &context, RelationType type) : context(context.GetContext()), type(type) {\n+\tRelation(ClientContextWrapper &context, RelationType type) : context(context.GetContext()), type(type) {\n \t}\n-\tDUCKDB_API virtual ~Relation() {\n+\tvirtual ~Relation() {\n \t}\n \n \tClientContextWrapper context;\n@@ -70,7 +69,7 @@ class Relation : public std::enable_shared_from_this<Relation> {\n \tDUCKDB_API unique_ptr<QueryResult> Explain(ExplainType type = ExplainType::EXPLAIN_STANDARD);\n \n \tDUCKDB_API virtual unique_ptr<TableRef> GetTableRef();\n-\tDUCKDB_API virtual bool IsReadOnly() {\n+\tvirtual bool IsReadOnly() {\n \t\treturn true;\n \t}\n \n@@ -154,10 +153,10 @@ class Relation : public std::enable_shared_from_this<Relation> {\n \n public:\n \t//! Whether or not the relation inherits column bindings from its child or not, only relevant for binding\n-\tDUCKDB_API virtual bool InheritsColumnBindings() {\n+\tvirtual bool InheritsColumnBindings() {\n \t\treturn false;\n \t}\n-\tDUCKDB_API virtual Relation *ChildRelation() {\n+\tvirtual Relation *ChildRelation() {\n \t\treturn nullptr;\n \t}\n \tDUCKDB_API vector<shared_ptr<ExternalDependency>> GetAllDependencies();\ndiff --git a/src/include/duckdb/optimizer/join_order/join_relation.hpp b/src/include/duckdb/optimizer/join_order/join_relation.hpp\nindex 4a459bccf71c..5e4986fff08e 100644\n--- a/src/include/duckdb/optimizer/join_order/join_relation.hpp\n+++ b/src/include/duckdb/optimizer/join_order/join_relation.hpp\n@@ -27,12 +27,12 @@ struct SingleJoinRelation {\n \n //! Set of relations, used in the join graph.\n struct JoinRelationSet {\n-\tJoinRelationSet(unique_ptr<idx_t[]> relations, idx_t count) : relations(std::move(relations)), count(count) {\n+\tJoinRelationSet(unsafe_unique_array<idx_t> relations, idx_t count) : relations(std::move(relations)), count(count) {\n \t}\n \n \tstring ToString() const;\n \n-\tunique_ptr<idx_t[]> relations;\n+\tunsafe_unique_array<idx_t> relations;\n \tidx_t count;\n \n \tstatic bool IsSubset(JoinRelationSet &super, JoinRelationSet &sub);\n@@ -55,7 +55,7 @@ class JoinRelationSetManager {\n \t//! Create or get a JoinRelationSet from a set of relation bindings\n \tJoinRelationSet &GetJoinRelation(unordered_set<idx_t> &bindings);\n \t//! Create or get a JoinRelationSet from a (sorted, duplicate-free!) list of relations\n-\tJoinRelationSet &GetJoinRelation(unique_ptr<idx_t[]> relations, idx_t count);\n+\tJoinRelationSet &GetJoinRelation(unsafe_unique_array<idx_t> relations, idx_t count);\n \t//! Union two sets of relations together and create a new relation set\n \tJoinRelationSet &Union(JoinRelationSet &left, JoinRelationSet &right);\n \t// //! Create the set difference of left \\ right (i.e. all elements in left that are not in right)\ndiff --git a/src/include/duckdb/optimizer/optimizer_extension.hpp b/src/include/duckdb/optimizer/optimizer_extension.hpp\nindex 8b78c8e101f6..bd2b0c8f7037 100644\n--- a/src/include/duckdb/optimizer/optimizer_extension.hpp\n+++ b/src/include/duckdb/optimizer/optimizer_extension.hpp\n@@ -15,7 +15,7 @@ namespace duckdb {\n \n //! The OptimizerExtensionInfo holds static information relevant to the optimizer extension\n struct OptimizerExtensionInfo {\n-\tDUCKDB_API virtual ~OptimizerExtensionInfo() {\n+\tvirtual ~OptimizerExtensionInfo() {\n \t}\n };\n \ndiff --git a/src/include/duckdb/parser/column_list.hpp b/src/include/duckdb/parser/column_list.hpp\nindex effb19473934..f0990a1c6913 100644\n--- a/src/include/duckdb/parser/column_list.hpp\n+++ b/src/include/duckdb/parser/column_list.hpp\n@@ -76,7 +76,7 @@ class ColumnList {\n \t// logical iterator\n \tclass ColumnListIterator {\n \tpublic:\n-\t\tDUCKDB_API ColumnListIterator(const ColumnList &list, bool physical) : list(list), physical(physical) {\n+\t\tColumnListIterator(const ColumnList &list, bool physical) : list(list), physical(physical) {\n \t\t}\n \n \tprivate:\n@@ -86,7 +86,7 @@ class ColumnList {\n \tprivate:\n \t\tclass ColumnLogicalIteratorInternal {\n \t\tpublic:\n-\t\t\tDUCKDB_API ColumnLogicalIteratorInternal(const ColumnList &list, bool physical, idx_t pos, idx_t end)\n+\t\t\tColumnLogicalIteratorInternal(const ColumnList &list, bool physical, idx_t pos, idx_t end)\n \t\t\t    : list(list), physical(physical), pos(pos), end(end) {\n \t\t\t}\n \n@@ -96,14 +96,14 @@ class ColumnList {\n \t\t\tidx_t end;\n \n \t\tpublic:\n-\t\t\tDUCKDB_API ColumnLogicalIteratorInternal &operator++() {\n+\t\t\tColumnLogicalIteratorInternal &operator++() {\n \t\t\t\tpos++;\n \t\t\t\treturn *this;\n \t\t\t}\n-\t\t\tDUCKDB_API bool operator!=(const ColumnLogicalIteratorInternal &other) const {\n+\t\t\tbool operator!=(const ColumnLogicalIteratorInternal &other) const {\n \t\t\t\treturn pos != other.pos || end != other.end || &list != &other.list;\n \t\t\t}\n-\t\t\tDUCKDB_API const ColumnDefinition &operator*() const {\n+\t\t\tconst ColumnDefinition &operator*() const {\n \t\t\t\tif (physical) {\n \t\t\t\t\treturn list.GetColumn(PhysicalIndex(pos));\n \t\t\t\t} else {\n@@ -117,10 +117,10 @@ class ColumnList {\n \t\t\treturn physical ? list.PhysicalColumnCount() : list.LogicalColumnCount();\n \t\t}\n \n-\t\tDUCKDB_API ColumnLogicalIteratorInternal begin() {\n+\t\tColumnLogicalIteratorInternal begin() {\n \t\t\treturn ColumnLogicalIteratorInternal(list, physical, 0, Size());\n \t\t}\n-\t\tDUCKDB_API ColumnLogicalIteratorInternal end() {\n+\t\tColumnLogicalIteratorInternal end() {\n \t\t\treturn ColumnLogicalIteratorInternal(list, physical, Size(), Size());\n \t\t}\n \t};\ndiff --git a/src/include/duckdb/parser/expression/function_expression.hpp b/src/include/duckdb/parser/expression/function_expression.hpp\nindex 0452cdb8dcc1..0c15bbc13acc 100644\n--- a/src/include/duckdb/parser/expression/function_expression.hpp\n+++ b/src/include/duckdb/parser/expression/function_expression.hpp\n@@ -92,7 +92,7 @@ class FunctionExpression : public ParsedExpression {\n \t\tresult += StringUtil::Join(entry.children, entry.children.size(), \", \", [&](const unique_ptr<BASE> &child) {\n \t\t\treturn child->alias.empty() || !add_alias\n \t\t\t           ? child->ToString()\n-\t\t\t           : KeywordHelper::WriteOptionallyQuoted(child->alias) + \" := \" + child->ToString();\n+\t\t\t           : StringUtil::Format(\"%s := %s\", SQLIdentifier(child->alias), child->ToString());\n \t\t});\n \t\t// ordered aggregate\n \t\tif (order_bys && !order_bys->orders.empty()) {\ndiff --git a/src/include/duckdb/parser/expression/operator_expression.hpp b/src/include/duckdb/parser/expression/operator_expression.hpp\nindex 61ffff30d830..91967875716f 100644\n--- a/src/include/duckdb/parser/expression/operator_expression.hpp\n+++ b/src/include/duckdb/parser/expression/operator_expression.hpp\n@@ -96,8 +96,8 @@ class OperatorExpression : public ParsedExpression {\n \t\t\tauto child_string = entry.children[1]->ToString();\n \t\t\tD_ASSERT(child_string.size() >= 3);\n \t\t\tD_ASSERT(child_string[0] == '\\'' && child_string[child_string.size() - 1] == '\\'');\n-\t\t\treturn \"(\" + entry.children[0]->ToString() + \").\" +\n-\t\t\t       KeywordHelper::WriteOptionallyQuoted(child_string.substr(1, child_string.size() - 2));\n+\t\t\treturn StringUtil::Format(\"(%s).%s\", entry.children[0]->ToString(),\n+\t\t\t                          SQLIdentifier(child_string.substr(1, child_string.size() - 2)));\n \t\t}\n \t\tcase ExpressionType::ARRAY_CONSTRUCTOR: {\n \t\t\tstring result = \"(ARRAY[\";\ndiff --git a/src/include/duckdb/parser/keyword_helper.hpp b/src/include/duckdb/parser/keyword_helper.hpp\nindex 23cef007432e..05c1664fdeb5 100644\n--- a/src/include/duckdb/parser/keyword_helper.hpp\n+++ b/src/include/duckdb/parser/keyword_helper.hpp\n@@ -17,9 +17,14 @@ class KeywordHelper {\n \t//! Returns true if the given text matches a keyword of the parser\n \tstatic bool IsKeyword(const string &text);\n \n+\tstatic string EscapeQuotes(const string &text, char quote = '\"');\n+\n \t//! Returns true if the given string needs to be quoted when written as an identifier\n \tstatic bool RequiresQuotes(const string &text, bool allow_caps = true);\n \n+\t//! Writes a string that is quoted\n+\tstatic string WriteQuoted(const string &text, char quote = '\\'');\n+\n \t//! Writes a string that is optionally quoted + escaped so it can be used as an identifier\n \tstatic string WriteOptionallyQuoted(const string &text, char quote = '\"', bool allow_caps = true);\n };\ndiff --git a/src/include/duckdb/parser/parsed_data/attach_info.hpp b/src/include/duckdb/parser/parsed_data/attach_info.hpp\nindex 4ffc0224014d..fb48e47c7016 100644\n--- a/src/include/duckdb/parser/parsed_data/attach_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/attach_info.hpp\n@@ -27,13 +27,10 @@ struct AttachInfo : public ParseInfo {\n \tunordered_map<string, Value> options;\n \n public:\n-\tunique_ptr<AttachInfo> Copy() const {\n-\t\tauto result = make_uniq<AttachInfo>();\n-\t\tresult->name = name;\n-\t\tresult->path = path;\n-\t\tresult->options = options;\n-\t\treturn result;\n-\t}\n+\tunique_ptr<AttachInfo> Copy() const;\n+\n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/create_macro_info.hpp b/src/include/duckdb/parser/parsed_data/create_macro_info.hpp\nindex 2c2d97b189d2..d3d44dd67ae9 100644\n--- a/src/include/duckdb/parser/parsed_data/create_macro_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/create_macro_info.hpp\n@@ -14,22 +14,18 @@\n namespace duckdb {\n \n struct CreateMacroInfo : public CreateFunctionInfo {\n-\tCreateMacroInfo() : CreateFunctionInfo(CatalogType::MACRO_ENTRY, INVALID_SCHEMA) {\n-\t}\n-\n-\tCreateMacroInfo(CatalogType type) : CreateFunctionInfo(type, INVALID_SCHEMA) {\n-\t}\n+\tCreateMacroInfo();\n+\tCreateMacroInfo(CatalogType type);\n \n \tunique_ptr<MacroFunction> function;\n \n public:\n-\tunique_ptr<CreateInfo> Copy() const override {\n-\t\tauto result = make_uniq<CreateMacroInfo>();\n-\t\tresult->function = function->Copy();\n-\t\tresult->name = name;\n-\t\tCopyProperties(*result);\n-\t\treturn std::move(result);\n-\t}\n+\tunique_ptr<CreateInfo> Copy() const override;\n+\n+\tDUCKDB_API static unique_ptr<CreateMacroInfo> Deserialize(Deserializer &deserializer);\n+\n+protected:\n+\tvoid SerializeInternal(Serializer &) const override;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/create_sequence_info.hpp b/src/include/duckdb/parser/parsed_data/create_sequence_info.hpp\nindex 7758255d3986..8b54296906da 100644\n--- a/src/include/duckdb/parser/parsed_data/create_sequence_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/create_sequence_info.hpp\n@@ -29,10 +29,7 @@ enum class SequenceInfo : uint8_t {\n };\n \n struct CreateSequenceInfo : public CreateInfo {\n-\tCreateSequenceInfo()\n-\t    : CreateInfo(CatalogType::SEQUENCE_ENTRY, INVALID_SCHEMA), name(string()), usage_count(0), increment(1),\n-\t      min_value(1), max_value(NumericLimits<int64_t>::Maximum()), start_value(1), cycle(false) {\n-\t}\n+\tCreateSequenceInfo();\n \n \t//! Sequence name to create\n \tstring name;\n@@ -50,24 +47,13 @@ struct CreateSequenceInfo : public CreateInfo {\n \tbool cycle;\n \n public:\n-\tunique_ptr<CreateInfo> Copy() const override {\n-\t\tauto result = make_uniq<CreateSequenceInfo>();\n-\t\tCopyProperties(*result);\n-\t\tresult->name = name;\n-\t\tresult->schema = schema;\n-\t\tresult->usage_count = usage_count;\n-\t\tresult->increment = increment;\n-\t\tresult->min_value = min_value;\n-\t\tresult->max_value = max_value;\n-\t\tresult->start_value = start_value;\n-\t\tresult->cycle = cycle;\n-\t\treturn std::move(result);\n-\t}\n+\tunique_ptr<CreateInfo> Copy() const override;\n+\n+public:\n+\tDUCKDB_API static unique_ptr<CreateSequenceInfo> Deserialize(Deserializer &deserializer);\n \n protected:\n-\tvoid SerializeInternal(Serializer &) const override {\n-\t\tthrow NotImplementedException(\"Cannot serialize '%s'\", CatalogTypeToString(type));\n-\t}\n+\tvoid SerializeInternal(Serializer &) const override;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/create_type_info.hpp b/src/include/duckdb/parser/parsed_data/create_type_info.hpp\nindex 83e230f6f33a..eb5e40e0c678 100644\n--- a/src/include/duckdb/parser/parsed_data/create_type_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/create_type_info.hpp\n@@ -16,11 +16,8 @@\n namespace duckdb {\n \n struct CreateTypeInfo : public CreateInfo {\n-\tCreateTypeInfo() : CreateInfo(CatalogType::TYPE_ENTRY) {\n-\t}\n-\tCreateTypeInfo(string name_p, LogicalType type_p)\n-\t    : CreateInfo(CatalogType::TYPE_ENTRY), name(std::move(name_p)), type(std::move(type_p)) {\n-\t}\n+\tCreateTypeInfo();\n+\tCreateTypeInfo(string name_p, LogicalType type_p);\n \n \t//! Name of the Type\n \tstring name;\n@@ -30,21 +27,12 @@ struct CreateTypeInfo : public CreateInfo {\n \tunique_ptr<SQLStatement> query;\n \n public:\n-\tunique_ptr<CreateInfo> Copy() const override {\n-\t\tauto result = make_uniq<CreateTypeInfo>();\n-\t\tCopyProperties(*result);\n-\t\tresult->name = name;\n-\t\tresult->type = type;\n-\t\tif (query) {\n-\t\t\tresult->query = query->Copy();\n-\t\t}\n-\t\treturn std::move(result);\n-\t}\n+\tunique_ptr<CreateInfo> Copy() const override;\n+\n+\tDUCKDB_API static unique_ptr<CreateTypeInfo> Deserialize(Deserializer &deserializer);\n \n protected:\n-\tvoid SerializeInternal(Serializer &) const override {\n-\t\tthrow NotImplementedException(\"Cannot serialize '%s'\", CatalogTypeToString(CreateInfo::type));\n-\t}\n+\tvoid SerializeInternal(Serializer &) const override;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/detach_info.hpp b/src/include/duckdb/parser/parsed_data/detach_info.hpp\nindex 8bc43d3cea44..fa2734165109 100644\n--- a/src/include/duckdb/parser/parsed_data/detach_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/detach_info.hpp\n@@ -14,8 +14,7 @@\n namespace duckdb {\n \n struct DetachInfo : public ParseInfo {\n-\tDetachInfo() {\n-\t}\n+\tDetachInfo();\n \n \t//! The alias of the attached database\n \tstring name;\n@@ -23,11 +22,8 @@ struct DetachInfo : public ParseInfo {\n \tOnEntryNotFound if_not_found;\n \n public:\n-\tunique_ptr<DetachInfo> Copy() const {\n-\t\tauto result = make_uniq<DetachInfo>();\n-\t\tresult->name = name;\n-\t\tresult->if_not_found = if_not_found;\n-\t\treturn result;\n-\t}\n+\tunique_ptr<DetachInfo> Copy() const;\n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer);\n };\n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/drop_info.hpp b/src/include/duckdb/parser/parsed_data/drop_info.hpp\nindex 9c59c511ae36..b74d9b87b9fc 100644\n--- a/src/include/duckdb/parser/parsed_data/drop_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/drop_info.hpp\n@@ -15,8 +15,7 @@\n namespace duckdb {\n \n struct DropInfo : public ParseInfo {\n-\tDropInfo() : catalog(INVALID_CATALOG), schema(INVALID_SCHEMA), cascade(false) {\n-\t}\n+\tDropInfo();\n \n \t//! The catalog type to drop\n \tCatalogType type;\n@@ -35,43 +34,10 @@ struct DropInfo : public ParseInfo {\n \tbool allow_drop_internal = false;\n \n public:\n-\tunique_ptr<DropInfo> Copy() const {\n-\t\tauto result = make_uniq<DropInfo>();\n-\t\tresult->type = type;\n-\t\tresult->catalog = catalog;\n-\t\tresult->schema = schema;\n-\t\tresult->name = name;\n-\t\tresult->if_not_found = if_not_found;\n-\t\tresult->cascade = cascade;\n-\t\tresult->allow_drop_internal = allow_drop_internal;\n-\t\treturn result;\n-\t}\n+\tunique_ptr<DropInfo> Copy() const;\n \n-\tvoid Serialize(Serializer &serializer) const {\n-\t\tFieldWriter writer(serializer);\n-\t\twriter.WriteField<CatalogType>(type);\n-\t\twriter.WriteString(catalog);\n-\t\twriter.WriteString(schema);\n-\t\twriter.WriteString(name);\n-\t\twriter.WriteField(if_not_found);\n-\t\twriter.WriteField(cascade);\n-\t\twriter.WriteField(allow_drop_internal);\n-\t\twriter.Finalize();\n-\t}\n-\n-\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer) {\n-\t\tFieldReader reader(deserializer);\n-\t\tauto drop_info = make_uniq<DropInfo>();\n-\t\tdrop_info->type = reader.ReadRequired<CatalogType>();\n-\t\tdrop_info->catalog = reader.ReadRequired<string>();\n-\t\tdrop_info->schema = reader.ReadRequired<string>();\n-\t\tdrop_info->name = reader.ReadRequired<string>();\n-\t\tdrop_info->if_not_found = reader.ReadRequired<OnEntryNotFound>();\n-\t\tdrop_info->cascade = reader.ReadRequired<bool>();\n-\t\tdrop_info->allow_drop_internal = reader.ReadRequired<bool>();\n-\t\treader.Finalize();\n-\t\treturn std::move(drop_info);\n-\t}\n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/transaction_info.hpp b/src/include/duckdb/parser/parsed_data/transaction_info.hpp\nindex 507c53c16455..93bf8f8a92b0 100644\n--- a/src/include/duckdb/parser/parsed_data/transaction_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/transaction_info.hpp\n@@ -15,11 +15,14 @@ namespace duckdb {\n enum class TransactionType : uint8_t { INVALID, BEGIN_TRANSACTION, COMMIT, ROLLBACK };\n \n struct TransactionInfo : public ParseInfo {\n-\texplicit TransactionInfo(TransactionType type) : type(type) {\n-\t}\n+\texplicit TransactionInfo(TransactionType type);\n \n \t//! The type of transaction statement\n \tTransactionType type;\n+\n+public:\n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parsed_data/vacuum_info.hpp b/src/include/duckdb/parser/parsed_data/vacuum_info.hpp\nindex 060446538bed..1841e4af52b1 100644\n--- a/src/include/duckdb/parser/parsed_data/vacuum_info.hpp\n+++ b/src/include/duckdb/parser/parsed_data/vacuum_info.hpp\n@@ -17,22 +17,16 @@\n namespace duckdb {\n \n struct VacuumOptions {\n+\tVacuumOptions() : vacuum(false), analyze(false) {\n+\t}\n+\n \tbool vacuum;\n \tbool analyze;\n };\n \n struct VacuumInfo : public ParseInfo {\n public:\n-\texplicit VacuumInfo(VacuumOptions options) : options(options), has_table(false) {};\n-\n-\tunique_ptr<VacuumInfo> Copy() {\n-\t\tauto result = make_uniq<VacuumInfo>(options);\n-\t\tresult->has_table = has_table;\n-\t\tif (has_table) {\n-\t\t\tresult->ref = ref->Copy();\n-\t\t}\n-\t\treturn result;\n-\t}\n+\texplicit VacuumInfo(VacuumOptions options);\n \n \tconst VacuumOptions options;\n \n@@ -42,6 +36,12 @@ struct VacuumInfo : public ParseInfo {\n \toptional_ptr<TableCatalogEntry> table;\n \tunordered_map<idx_t, idx_t> column_id_map;\n \tvector<string> columns;\n+\n+public:\n+\tunique_ptr<VacuumInfo> Copy();\n+\n+\tvoid Serialize(Serializer &serializer) const;\n+\tstatic unique_ptr<ParseInfo> Deserialize(Deserializer &deserializer);\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/parser/parser_extension.hpp b/src/include/duckdb/parser/parser_extension.hpp\nindex 0f67097d832c..50fec976d9d1 100644\n--- a/src/include/duckdb/parser/parser_extension.hpp\n+++ b/src/include/duckdb/parser/parser_extension.hpp\n@@ -17,7 +17,7 @@ namespace duckdb {\n //! The ParserExtensionInfo holds static information relevant to the parser extension\n //! It is made available in the parse_function, and will be kept alive as long as the database system is kept alive\n struct ParserExtensionInfo {\n-\tDUCKDB_API virtual ~ParserExtensionInfo() {\n+\tvirtual ~ParserExtensionInfo() {\n \t}\n };\n \n@@ -29,7 +29,7 @@ enum class ParserExtensionResultType : uint8_t { PARSE_SUCCESSFUL, DISPLAY_ORIGI\n //! The ParserExtensionParseData holds the result of a successful parse step\n //! It will be passed along to the subsequent plan function\n struct ParserExtensionParseData {\n-\tDUCKDB_API virtual ~ParserExtensionParseData() {\n+\tvirtual ~ParserExtensionParseData() {\n \t}\n \n \tvirtual unique_ptr<ParserExtensionParseData> Copy() const = 0;\ndiff --git a/src/include/duckdb/parser/sql_statement.hpp b/src/include/duckdb/parser/sql_statement.hpp\nindex 233ddd18ca89..825fb1b1f326 100644\n--- a/src/include/duckdb/parser/sql_statement.hpp\n+++ b/src/include/duckdb/parser/sql_statement.hpp\n@@ -41,7 +41,7 @@ class SQLStatement {\n \tSQLStatement(const SQLStatement &other) = default;\n \n public:\n-\tDUCKDB_API virtual string ToString() const {\n+\tvirtual string ToString() const {\n \t\tthrow InternalException(\"ToString not supported for this type of SQLStatement: '%s'\",\n \t\t                        StatementTypeToString(type));\n \t}\ndiff --git a/src/include/duckdb/parser/statement/insert_statement.hpp b/src/include/duckdb/parser/statement/insert_statement.hpp\nindex 9126a7a6759c..0f6a6624df49 100644\n--- a/src/include/duckdb/parser/statement/insert_statement.hpp\n+++ b/src/include/duckdb/parser/statement/insert_statement.hpp\n@@ -24,6 +24,8 @@ enum class OnConflictAction : uint8_t {\n \tREPLACE // Only used in transform/bind step, changed to UPDATE later\n };\n \n+enum class InsertColumnOrder : uint8_t { INSERT_BY_POSITION = 0, INSERT_BY_NAME = 1 };\n+\n class OnConflictInfo {\n public:\n \tOnConflictInfo();\n@@ -75,6 +77,9 @@ class InsertStatement : public SQLStatement {\n \t//! Whether or not this a DEFAULT VALUES\n \tbool default_values = false;\n \n+\t//! INSERT BY POSITION or INSERT BY NAME\n+\tInsertColumnOrder column_order = InsertColumnOrder::INSERT_BY_POSITION;\n+\n protected:\n \tInsertStatement(const InsertStatement &other);\n \ndiff --git a/src/include/duckdb/parser/statement/select_statement.hpp b/src/include/duckdb/parser/statement/select_statement.hpp\nindex d529f924b76f..2a994fb7320e 100644\n--- a/src/include/duckdb/parser/statement/select_statement.hpp\n+++ b/src/include/duckdb/parser/statement/select_statement.hpp\n@@ -26,7 +26,7 @@ class SelectStatement : public SQLStatement {\n \tstatic constexpr const StatementType TYPE = StatementType::SELECT_STATEMENT;\n \n public:\n-\tDUCKDB_API SelectStatement() : SQLStatement(StatementType::SELECT_STATEMENT) {\n+\tSelectStatement() : SQLStatement(StatementType::SELECT_STATEMENT) {\n \t}\n \n \t//! The main query node\ndiff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp\nindex f164cd4046b3..d324d9641603 100644\n--- a/src/include/duckdb/planner/binder.hpp\n+++ b/src/include/duckdb/planner/binder.hpp\n@@ -39,6 +39,7 @@ class LogicalProjection;\n class ColumnList;\n class ExternalDependency;\n class TableFunction;\n+class TableStorageInfo;\n \n struct CreateInfo;\n struct BoundCreateTableInfo;\n@@ -167,8 +168,8 @@ class Binder : public std::enable_shared_from_this<Binder> {\n \tunique_ptr<LogicalOperator> BindUpdateSet(LogicalOperator &op, unique_ptr<LogicalOperator> root,\n \t                                          UpdateSetInfo &set_info, TableCatalogEntry &table,\n \t                                          vector<PhysicalIndex> &columns);\n-\tvoid BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert *insert, UpdateSetInfo &set_info,\n-\t                                TableCatalogEntry &table);\n+\tvoid BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert &insert, UpdateSetInfo &set_info,\n+\t                                TableCatalogEntry &table, TableStorageInfo &storage_info);\n \tvoid BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &table, InsertStatement &stmt);\n \n \tstatic void BindSchemaOrCatalog(ClientContext &context, string &catalog, string &schema);\ndiff --git a/src/include/duckdb/planner/operator_extension.hpp b/src/include/duckdb/planner/operator_extension.hpp\nindex c787b2163b38..fa0fcb3c095a 100644\n--- a/src/include/duckdb/planner/operator_extension.hpp\n+++ b/src/include/duckdb/planner/operator_extension.hpp\n@@ -16,7 +16,7 @@ namespace duckdb {\n \n //! The OperatorExtensionInfo holds static information relevant to the operator extension\n struct OperatorExtensionInfo {\n-\tDUCKDB_API virtual ~OperatorExtensionInfo() {\n+\tvirtual ~OperatorExtensionInfo() {\n \t}\n };\n \n@@ -37,7 +37,7 @@ class OperatorExtension {\n \tvirtual unique_ptr<LogicalExtensionOperator> Deserialize(LogicalDeserializationState &state,\n \t                                                         FieldReader &reader) = 0;\n \n-\tDUCKDB_API virtual ~OperatorExtension() {\n+\tvirtual ~OperatorExtension() {\n \t}\n };\n \ndiff --git a/src/include/duckdb/storage/arena_allocator.hpp b/src/include/duckdb/storage/arena_allocator.hpp\nindex 0a38d29fdba0..17a7a9b4c624 100644\n--- a/src/include/duckdb/storage/arena_allocator.hpp\n+++ b/src/include/duckdb/storage/arena_allocator.hpp\n@@ -20,7 +20,7 @@ struct ArenaChunk {\n \tAllocatedData data;\n \tidx_t current_position;\n \tidx_t maximum_size;\n-\tunique_ptr<ArenaChunk> next;\n+\tunsafe_unique_ptr<ArenaChunk> next;\n \tArenaChunk *prev;\n };\n \n@@ -56,7 +56,7 @@ class ArenaAllocator {\n \t//! Internal allocator that is used by the arena allocator\n \tAllocator &allocator;\n \tidx_t current_capacity;\n-\tunique_ptr<ArenaChunk> head;\n+\tunsafe_unique_ptr<ArenaChunk> head;\n \tArenaChunk *tail;\n \t//! An allocator wrapper using this arena allocator\n \tAllocator arena_allocator;\ndiff --git a/src/include/duckdb/storage/buffer/buffer_handle.hpp b/src/include/duckdb/storage/buffer/buffer_handle.hpp\nindex 56b9537a849d..ed15fce883be 100644\n--- a/src/include/duckdb/storage/buffer/buffer_handle.hpp\n+++ b/src/include/duckdb/storage/buffer/buffer_handle.hpp\n@@ -9,6 +9,7 @@\n #pragma once\n \n #include \"duckdb/storage/storage_info.hpp\"\n+#include \"duckdb/common/file_buffer.hpp\"\n \n namespace duckdb {\n class BlockHandle;\n@@ -30,9 +31,15 @@ class BufferHandle {\n \t//! Returns whether or not the BufferHandle is valid.\n \tDUCKDB_API bool IsValid() const;\n \t//! Returns a pointer to the buffer data. Handle must be valid.\n-\tDUCKDB_API data_ptr_t Ptr() const;\n+\tinline data_ptr_t Ptr() const {\n+\t\tD_ASSERT(IsValid());\n+\t\treturn node->buffer;\n+\t}\n \t//! Returns a pointer to the buffer data. Handle must be valid.\n-\tDUCKDB_API data_ptr_t Ptr();\n+\tinline data_ptr_t Ptr() {\n+\t\tD_ASSERT(IsValid());\n+\t\treturn node->buffer;\n+\t}\n \t//! Gets the underlying file buffer. Handle must be valid.\n \tDUCKDB_API FileBuffer &GetFileBuffer();\n \t//! Destroys the buffer handle\ndiff --git a/src/include/duckdb/storage/statistics/base_statistics.hpp b/src/include/duckdb/storage/statistics/base_statistics.hpp\nindex 514b11884d33..2be977e3393e 100644\n--- a/src/include/duckdb/storage/statistics/base_statistics.hpp\n+++ b/src/include/duckdb/storage/statistics/base_statistics.hpp\n@@ -138,7 +138,7 @@ class BaseStatistics {\n \t\tStringStatsData string_data;\n \t} stats_union;\n \t//! Child stats (for LIST and STRUCT)\n-\tunique_ptr<BaseStatistics[]> child_stats;\n+\tunsafe_unique_array<BaseStatistics> child_stats;\n };\n \n } // namespace duckdb\ndiff --git a/src/include/duckdb/storage/storage_extension.hpp b/src/include/duckdb/storage/storage_extension.hpp\nindex 2d115c71d1e1..0c52bf23bc8d 100644\n--- a/src/include/duckdb/storage/storage_extension.hpp\n+++ b/src/include/duckdb/storage/storage_extension.hpp\n@@ -20,7 +20,7 @@ class TransactionManager;\n \n //! The StorageExtensionInfo holds static information relevant to the storage extension\n struct StorageExtensionInfo {\n-\tDUCKDB_API virtual ~StorageExtensionInfo() {\n+\tvirtual ~StorageExtensionInfo() {\n \t}\n };\n \n@@ -43,7 +43,7 @@ class StorageExtension {\n \t//! Additional info passed to the various storage functions\n \tshared_ptr<StorageExtensionInfo> storage_info;\n \n-\tDUCKDB_API virtual ~StorageExtension() {\n+\tvirtual ~StorageExtension() {\n \t}\n };\n \ndiff --git a/src/include/duckdb/storage/table/append_state.hpp b/src/include/duckdb/storage/table/append_state.hpp\nindex 86b72b7bc198..382f86da5d00 100644\n--- a/src/include/duckdb/storage/table/append_state.hpp\n+++ b/src/include/duckdb/storage/table/append_state.hpp\n@@ -44,7 +44,7 @@ struct RowGroupAppendState {\n \t//! The current row_group we are appending to\n \tRowGroup *row_group;\n \t//! The column append states\n-\tunique_ptr<ColumnAppendState[]> states;\n+\tunsafe_unique_array<ColumnAppendState> states;\n \t//! Offset within the row_group\n \tidx_t offset_in_row_group;\n };\ndiff --git a/src/include/duckdb/storage/table/scan_state.hpp b/src/include/duckdb/storage/table/scan_state.hpp\nindex ed6ffa41f4ac..0a863d7eeaa5 100644\n--- a/src/include/duckdb/storage/table/scan_state.hpp\n+++ b/src/include/duckdb/storage/table/scan_state.hpp\n@@ -99,7 +99,7 @@ class CollectionScanState {\n \t//! The maximum row within the row group\n \tidx_t max_row_group_row;\n \t//! Child column scans\n-\tunique_ptr<ColumnScanState[]> column_scans;\n+\tunsafe_unique_array<ColumnScanState> column_scans;\n \t//! Row group segment tree\n \tRowGroupSegmentTree *row_groups;\n \t//! The total maximum row index\ndiff --git a/src/include/duckdb/storage/table/update_segment.hpp b/src/include/duckdb/storage/table/update_segment.hpp\nindex ad4ad77db129..c604b4b7cc52 100644\n--- a/src/include/duckdb/storage/table/update_segment.hpp\n+++ b/src/include/duckdb/storage/table/update_segment.hpp\n@@ -96,8 +96,8 @@ class UpdateSegment {\n \n struct UpdateNodeData {\n \tunique_ptr<UpdateInfo> info;\n-\tunique_ptr<sel_t[]> tuples;\n-\tunique_ptr<data_t[]> tuple_data;\n+\tunsafe_unique_array<sel_t> tuples;\n+\tunsafe_unique_array<data_t> tuple_data;\n };\n \n struct UpdateNode {\ndiff --git a/src/include/duckdb/storage/table_storage_info.hpp b/src/include/duckdb/storage/table_storage_info.hpp\nindex 1a5acd5348c5..08bf4847f9dc 100644\n--- a/src/include/duckdb/storage/table_storage_info.hpp\n+++ b/src/include/duckdb/storage/table_storage_info.hpp\n@@ -8,7 +8,9 @@\n \n #pragma once\n \n+#include \"duckdb/storage/storage_info.hpp\"\n #include \"duckdb/common/types/value.hpp\"\n+#include \"duckdb/common/unordered_set.hpp\"\n \n namespace duckdb {\n \ndiff --git a/src/main/client_context.cpp b/src/main/client_context.cpp\nindex 68597c894279..d78705b26be9 100644\n--- a/src/main/client_context.cpp\n+++ b/src/main/client_context.cpp\n@@ -209,7 +209,7 @@ PreservedError ClientContext::EndQueryInternal(ClientContextLock &lock, bool suc\n }\n \n void ClientContext::CleanupInternal(ClientContextLock &lock, BaseQueryResult *result, bool invalidate_transaction) {\n-\tclient_data->http_state = make_uniq<HTTPState>();\n+\tclient_data->http_state = make_shared<HTTPState>();\n \tif (!active_query) {\n \t\t// no query currently active\n \t\treturn;\n@@ -233,10 +233,6 @@ Executor &ClientContext::GetExecutor() {\n \treturn *active_query->executor;\n }\n \n-FileOpener *FileOpener::Get(ClientContext &context) {\n-\treturn ClientData::Get(context).file_opener.get();\n-}\n-\n const string &ClientContext::GetCurrentQuery() {\n \tD_ASSERT(active_query);\n \treturn active_query->query;\n@@ -495,7 +491,7 @@ unique_ptr<LogicalOperator> ClientContext::ExtractPlan(const string &query) {\n \t}\n \n \tunique_ptr<LogicalOperator> plan;\n-\tclient_data->http_state = make_uniq<HTTPState>();\n+\tclient_data->http_state = make_shared<HTTPState>();\n \tRunFunctionInTransactionInternal(*lock, [&]() {\n \t\tPlanner planner(*this);\n \t\tplanner.CreatePlan(std::move(statements[0]));\n@@ -1017,6 +1013,7 @@ void ClientContext::TryBindRelation(Relation &relation, vector<ColumnDefinition>\n \tD_ASSERT(!relation.GetAlias().empty());\n \tD_ASSERT(!relation.ToString().empty());\n #endif\n+\tclient_data->http_state = make_shared<HTTPState>();\n \tRunFunctionInTransaction([&]() {\n \t\t// bind the expressions\n \t\tauto binder = Binder::CreateBinder(*this);\ndiff --git a/src/main/client_data.cpp b/src/main/client_data.cpp\nindex a99cb5333377..8553a65ef69d 100644\n--- a/src/main/client_data.cpp\n+++ b/src/main/client_data.cpp\n@@ -11,9 +11,27 @@\n #include \"duckdb/main/database.hpp\"\n #include \"duckdb/main/database_manager.hpp\"\n #include \"duckdb/main/query_profiler.hpp\"\n+#include \"duckdb/common/opener_file_system.hpp\"\n \n namespace duckdb {\n \n+class ClientFileSystem : public OpenerFileSystem {\n+public:\n+\texplicit ClientFileSystem(ClientContext &context_p) : context(context_p) {\n+\t}\n+\n+\tFileSystem &GetFileSystem() const override {\n+\t\tauto &config = DBConfig::GetConfig(context);\n+\t\treturn *config.file_system;\n+\t}\n+\toptional_ptr<FileOpener> GetOpener() const override {\n+\t\treturn ClientData::Get(context).file_opener.get();\n+\t}\n+\n+private:\n+\tClientContext &context;\n+};\n+\n ClientData::ClientData(ClientContext &context) : catalog_search_path(make_uniq<CatalogSearchPath>(context)) {\n \tauto &db = DatabaseInstance::GetDatabase(context);\n \tprofiler = make_shared<QueryProfiler>(context);\n@@ -22,6 +40,7 @@ ClientData::ClientData(ClientContext &context) : catalog_search_path(make_uniq<C\n \ttemporary_objects->oid = DatabaseManager::Get(db).ModifyCatalog();\n \trandom_engine = make_uniq<RandomEngine>();\n \tfile_opener = make_uniq<ClientContextFileOpener>(context);\n+\tclient_file_system = make_uniq<ClientFileSystem>(context);\n \ttemporary_objects->Initialize();\n }\n ClientData::~ClientData() {\ndiff --git a/src/main/database.cpp b/src/main/database.cpp\nindex 70341d8cd0c7..9843e367c33a 100644\n--- a/src/main/database.cpp\n+++ b/src/main/database.cpp\n@@ -230,7 +230,10 @@ void DatabaseInstance::Initialize(const char *database_path, DBConfig *user_conf\n \n \tif (!config.options.database_type.empty()) {\n \t\t// if we are opening an extension database - load the extension\n-\t\tExtensionHelper::LoadExternalExtension(*this, nullptr, config.options.database_type);\n+\t\tif (!config.file_system) {\n+\t\t\tthrow InternalException(\"No file system!?\");\n+\t\t}\n+\t\tExtensionHelper::LoadExternalExtension(*this, *config.file_system, config.options.database_type);\n \t}\n \n \tif (!config.options.unrecognized_options.empty()) {\ndiff --git a/src/main/db_instance_cache.cpp b/src/main/db_instance_cache.cpp\nindex 6306e268cab6..0e7550008f46 100644\n--- a/src/main/db_instance_cache.cpp\n+++ b/src/main/db_instance_cache.cpp\n@@ -1,8 +1,10 @@\n #include \"duckdb/main/db_instance_cache.hpp\"\n #include \"duckdb/main/extension_helper.hpp\"\n+\n namespace duckdb {\n \n-string GetDBAbsolutePath(const string &database) {\n+string GetDBAbsolutePath(const string &database_p) {\n+\tauto database = FileSystem::ExpandPath(database_p, nullptr);\n \tif (database.empty()) {\n \t\treturn \":memory:\";\n \t}\n@@ -15,9 +17,9 @@ string GetDBAbsolutePath(const string &database) {\n \t\treturn database;\n \t}\n \tif (FileSystem::IsPathAbsolute(database)) {\n-\t\treturn database;\n+\t\treturn FileSystem::NormalizeAbsolutePath(database);\n \t}\n-\treturn FileSystem::JoinPath(FileSystem::GetWorkingDirectory(), database);\n+\treturn FileSystem::NormalizeAbsolutePath(FileSystem::JoinPath(FileSystem::GetWorkingDirectory(), database));\n }\n \n shared_ptr<DuckDB> DBInstanceCache::GetInstanceInternal(const string &database, const DBConfig &config) {\ndiff --git a/src/main/extension/extension_install.cpp b/src/main/extension/extension_install.cpp\nindex c6fa6a851c8c..26ea96dff715 100644\n--- a/src/main/extension/extension_install.cpp\n+++ b/src/main/extension/extension_install.cpp\n@@ -38,7 +38,7 @@ const vector<string> ExtensionHelper::PathComponents() {\n \treturn vector<string> {\".duckdb\", \"extensions\", GetVersionDirectoryName(), DuckDB::Platform()};\n }\n \n-string ExtensionHelper::ExtensionDirectory(DBConfig &config, FileSystem &fs, FileOpener *opener) {\n+string ExtensionHelper::ExtensionDirectory(DBConfig &config, FileSystem &fs) {\n #ifdef WASM_LOADABLE_EXTENSIONS\n \tstatic_assertion(0, \"ExtensionDirectory functionality is not supported in duckdb-wasm\");\n #endif\n@@ -49,7 +49,7 @@ string ExtensionHelper::ExtensionDirectory(DBConfig &config, FileSystem &fs, Fil\n \t\t// convert random separators to platform-canonic\n \t\textension_directory = fs.ConvertSeparators(extension_directory);\n \t\t// expand ~ in extension directory\n-\t\textension_directory = fs.ExpandPath(extension_directory, opener);\n+\t\textension_directory = fs.ExpandPath(extension_directory);\n \t\tif (!fs.DirectoryExists(extension_directory)) {\n \t\t\tauto sep = fs.PathSeparator();\n \t\t\tauto splits = StringUtil::Split(extension_directory, sep);\n@@ -66,7 +66,7 @@ string ExtensionHelper::ExtensionDirectory(DBConfig &config, FileSystem &fs, Fil\n \t\t\t}\n \t\t}\n \t} else { // otherwise default to home\n-\t\tstring home_directory = fs.GetHomeDirectory(opener);\n+\t\tstring home_directory = fs.GetHomeDirectory();\n \t\t// exception if the home directory does not exist, don't create whatever we think is home\n \t\tif (!fs.DirectoryExists(home_directory)) {\n \t\t\tthrow IOException(\"Can't find the home directory at '%s'\\nSpecify a home directory using the SET \"\n@@ -90,8 +90,7 @@ string ExtensionHelper::ExtensionDirectory(DBConfig &config, FileSystem &fs, Fil\n string ExtensionHelper::ExtensionDirectory(ClientContext &context) {\n \tauto &config = DBConfig::GetConfig(context);\n \tauto &fs = FileSystem::GetFileSystem(context);\n-\tauto opener = FileSystem::GetFileOpener(context);\n-\treturn ExtensionDirectory(config, fs, opener);\n+\treturn ExtensionDirectory(config, fs);\n }\n \n bool ExtensionHelper::CreateSuggestions(const string &extension_name, string &message) {\n@@ -118,7 +117,7 @@ void ExtensionHelper::InstallExtension(DBConfig &config, FileSystem &fs, const s\n \t// Install is currently a no-op\n \treturn;\n #endif\n-\tstring local_path = ExtensionDirectory(config, fs, nullptr);\n+\tstring local_path = ExtensionDirectory(config, fs);\n \tInstallExtensionInternal(config, nullptr, fs, local_path, extension, force_install);\n }\n \n@@ -134,6 +133,23 @@ void ExtensionHelper::InstallExtension(ClientContext &context, const string &ext\n \tInstallExtensionInternal(config, &client_config, fs, local_path, extension, force_install);\n }\n \n+unsafe_unique_array<data_t> ReadExtensionFileFromDisk(FileSystem &fs, const string &path, idx_t &file_size) {\n+\tauto source_file = fs.OpenFile(path, FileFlags::FILE_FLAGS_READ);\n+\tfile_size = source_file->GetFileSize();\n+\tauto in_buffer = make_unsafe_uniq_array<data_t>(file_size);\n+\tsource_file->Read(in_buffer.get(), file_size);\n+\tsource_file->Close();\n+\treturn in_buffer;\n+}\n+\n+void WriteExtensionFileToDisk(FileSystem &fs, const string &path, void *data, idx_t data_size) {\n+\tauto target_file = fs.OpenFile(path, FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_APPEND |\n+\t                                         FileFlags::FILE_FLAGS_FILE_CREATE_NEW);\n+\ttarget_file->Write(data, data_size);\n+\ttarget_file->Close();\n+\ttarget_file.reset();\n+}\n+\n void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *client_config, FileSystem &fs,\n                                                const string &local_path, const string &extension, bool force_install) {\n \tif (!config.options.enable_external_access) {\n@@ -153,18 +169,9 @@ void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *c\n \t}\n \tauto is_http_url = StringUtil::Contains(extension, \"http://\");\n \tif (fs.FileExists(extension)) {\n-\n-\t\tstd::ifstream in(extension, std::ios::binary);\n-\t\tif (in.bad()) {\n-\t\t\tthrow IOException(\"Failed to read extension from \\\"%s\\\"\", extension);\n-\t\t}\n-\t\tstd::ofstream out(temp_path, std::ios::binary);\n-\t\tout << in.rdbuf();\n-\t\tif (out.bad()) {\n-\t\t\tthrow IOException(\"Failed to write extension to \\\"%s\\\"\", temp_path);\n-\t\t}\n-\t\tin.close();\n-\t\tout.close();\n+\t\tidx_t file_size;\n+\t\tauto in_buffer = ReadExtensionFileFromDisk(fs, extension, file_size);\n+\t\tWriteExtensionFileToDisk(fs, temp_path, in_buffer.get(), file_size);\n \n \t\tfs.MoveFile(temp_path, local_extension_path);\n \t\treturn;\n@@ -226,12 +233,8 @@ void ExtensionHelper::InstallExtensionInternal(DBConfig &config, ClientConfig *c\n \t\t}\n \t}\n \tauto decompressed_body = GZipFileSystem::UncompressGZIPString(res->body);\n-\tstd::ofstream out(temp_path, std::ios::binary);\n-\tout.write(decompressed_body.data(), decompressed_body.size());\n-\tif (out.bad()) {\n-\t\tthrow IOException(\"Failed to write extension to %s\", temp_path);\n-\t}\n-\tout.close();\n+\n+\tWriteExtensionFileToDisk(fs, temp_path, (void *)decompressed_body.data(), decompressed_body.size());\n \tfs.MoveFile(temp_path, local_extension_path);\n #endif\n }\ndiff --git a/src/main/extension/extension_load.cpp b/src/main/extension/extension_load.cpp\nindex fa61c6801fb9..b969aee8ea29 100644\n--- a/src/main/extension/extension_load.cpp\n+++ b/src/main/extension/extension_load.cpp\n@@ -44,24 +44,22 @@ static void ComputeSHA256FileSegment(FileHandle *handle, const idx_t start, cons\n \tComputeSHA256String(file_content, res);\n }\n \n-bool ExtensionHelper::TryInitialLoad(DBConfig &config, FileOpener *opener, const string &extension,\n+bool ExtensionHelper::TryInitialLoad(DBConfig &config, FileSystem &fs, const string &extension,\n                                      ExtensionInitResult &result, string &error) {\n \tif (!config.options.enable_external_access) {\n \t\tthrow PermissionException(\"Loading external extensions is disabled through configuration\");\n \t}\n-\tVirtualFileSystem fallback_file_system; // config may not contain one yet\n-\tauto &fs = config.file_system ? *config.file_system : fallback_file_system;\n \tauto filename = fs.ConvertSeparators(extension);\n \n \t// shorthand case\n \tif (!ExtensionHelper::IsFullPath(extension)) {\n-\t\tstring local_path = !config.options.extension_directory.empty() ? config.options.extension_directory\n-\t\t                                                                : fs.GetHomeDirectory(opener);\n+\t\tstring local_path =\n+\t\t    !config.options.extension_directory.empty() ? config.options.extension_directory : fs.GetHomeDirectory();\n \n \t\t// convert random separators to platform-canonic\n \t\tlocal_path = fs.ConvertSeparators(local_path);\n \t\t// expand ~ in extension directory\n-\t\tlocal_path = fs.ExpandPath(local_path, opener);\n+\t\tlocal_path = fs.ExpandPath(local_path);\n \t\tauto path_components = PathComponents();\n \t\tfor (auto &path_ele : path_components) {\n \t\t\tlocal_path = fs.JoinPath(local_path, path_ele);\n@@ -201,20 +199,17 @@ bool ExtensionHelper::TryInitialLoad(DBConfig &config, FileOpener *opener, const\n \treturn true;\n }\n \n-ExtensionInitResult ExtensionHelper::InitialLoad(DBConfig &config, FileOpener *opener, const string &extension) {\n+ExtensionInitResult ExtensionHelper::InitialLoad(DBConfig &config, FileSystem &fs, const string &extension) {\n \tstring error;\n \tExtensionInitResult result;\n-\tif (!TryInitialLoad(config, opener, extension, result, error)) {\n+\tif (!TryInitialLoad(config, fs, extension, result, error)) {\n \t\tif (!ExtensionHelper::AllowAutoInstall(extension)) {\n \t\t\tthrow IOException(error);\n \t\t}\n \t\t// the extension load failed - try installing the extension\n-\t\tif (!config.file_system) {\n-\t\t\tthrow InternalException(\"Attempting to install an extension without a file system\");\n-\t\t}\n-\t\tExtensionHelper::InstallExtension(config, *config.file_system, extension, false);\n+\t\tExtensionHelper::InstallExtension(config, fs, extension, false);\n \t\t// try loading again\n-\t\tif (!TryInitialLoad(config, nullptr, extension, result, error)) {\n+\t\tif (!TryInitialLoad(config, fs, extension, result, error)) {\n \t\t\tthrow IOException(error);\n \t\t}\n \t}\n@@ -226,27 +221,28 @@ bool ExtensionHelper::IsFullPath(const string &extension) {\n \t       StringUtil::Contains(extension, \"\\\\\");\n }\n \n-string ExtensionHelper::GetExtensionName(const string &extension) {\n+string ExtensionHelper::GetExtensionName(const string &original_name) {\n+\tauto extension = StringUtil::Lower(original_name);\n \tif (!IsFullPath(extension)) {\n-\t\treturn extension;\n+\t\treturn ExtensionHelper::ApplyExtensionAlias(extension);\n \t}\n \tauto splits = StringUtil::Split(StringUtil::Replace(extension, \"\\\\\", \"/\"), '/');\n \tif (splits.empty()) {\n-\t\treturn extension;\n+\t\treturn ExtensionHelper::ApplyExtensionAlias(extension);\n \t}\n \tsplits = StringUtil::Split(splits.back(), '.');\n \tif (splits.empty()) {\n-\t\treturn extension;\n+\t\treturn ExtensionHelper::ApplyExtensionAlias(extension);\n \t}\n-\treturn StringUtil::Lower(splits.front());\n+\treturn ExtensionHelper::ApplyExtensionAlias(splits.front());\n }\n \n-void ExtensionHelper::LoadExternalExtension(DatabaseInstance &db, FileOpener *opener, const string &extension) {\n+void ExtensionHelper::LoadExternalExtension(DatabaseInstance &db, FileSystem &fs, const string &extension) {\n \tif (db.ExtensionIsLoaded(extension)) {\n \t\treturn;\n \t}\n \n-\tauto res = InitialLoad(DBConfig::GetConfig(db), opener, extension);\n+\tauto res = InitialLoad(DBConfig::GetConfig(db), fs, extension);\n \tauto init_fun_name = res.basename + \"_init\";\n \n \text_init_fun_t init_fun;\n@@ -263,7 +259,7 @@ void ExtensionHelper::LoadExternalExtension(DatabaseInstance &db, FileOpener *op\n }\n \n void ExtensionHelper::LoadExternalExtension(ClientContext &context, const string &extension) {\n-\tLoadExternalExtension(DatabaseInstance::GetDatabase(context), FileSystem::GetFileOpener(context), extension);\n+\tLoadExternalExtension(DatabaseInstance::GetDatabase(context), FileSystem::GetFileSystem(context), extension);\n }\n \n string ExtensionHelper::ExtractExtensionPrefixFromPath(const string &path) {\ndiff --git a/src/main/settings/settings.cpp b/src/main/settings/settings.cpp\nindex e22eb6826afe..52e093ac2350 100644\n--- a/src/main/settings/settings.cpp\n+++ b/src/main/settings/settings.cpp\n@@ -735,9 +735,8 @@ void LogQueryPathSetting::SetLocal(ClientContext &context, const Value &input) {\n \t\t// empty path: clean up query writer\n \t\tclient_data.log_query_writer = nullptr;\n \t} else {\n-\t\tclient_data.log_query_writer =\n-\t\t    make_uniq<BufferedFileWriter>(FileSystem::GetFileSystem(context), path,\n-\t\t                                  BufferedFileWriter::DEFAULT_OPEN_FLAGS, client_data.file_opener.get());\n+\t\tclient_data.log_query_writer = make_uniq<BufferedFileWriter>(FileSystem::GetFileSystem(context), path,\n+\t\t                                                             BufferedFileWriter::DEFAULT_OPEN_FLAGS);\n \t}\n }\n \ndiff --git a/src/optimizer/join_order/cardinality_estimator.cpp b/src/optimizer/join_order/cardinality_estimator.cpp\nindex 028ceae52693..6c37b3fb65bd 100644\n--- a/src/optimizer/join_order/cardinality_estimator.cpp\n+++ b/src/optimizer/join_order/cardinality_estimator.cpp\n@@ -574,7 +574,7 @@ void CardinalityEstimator::EstimateBaseTableCardinality(JoinNode &node, LogicalO\n \tD_ASSERT(node.set.count == 1);\n \tauto relation_id = node.set.relations[0];\n \n-\tdouble lowest_card_found = NumericLimits<double>::Maximum();\n+\tdouble lowest_card_found = node.GetBaseTableCardinality();\n \tfor (auto &column : relation_attributes[relation_id].columns) {\n \t\tauto card_after_filters = node.GetBaseTableCardinality();\n \t\tColumnBinding key = ColumnBinding(relation_id, column);\ndiff --git a/src/optimizer/join_order/join_order_optimizer.cpp b/src/optimizer/join_order/join_order_optimizer.cpp\nindex ed1c3e403a18..34164209b566 100644\n--- a/src/optimizer/join_order/join_order_optimizer.cpp\n+++ b/src/optimizer/join_order/join_order_optimizer.cpp\n@@ -147,6 +147,18 @@ bool JoinOrderOptimizer::ExtractJoinRelations(LogicalOperator &input_op,\n \t\t\t}\n \t\t}\n \t}\n+\tif (op->type == LogicalOperatorType::LOGICAL_ANY_JOIN && non_reorderable_operation) {\n+\t\tauto &join = op->Cast<LogicalAnyJoin>();\n+\t\tif (join.join_type == JoinType::LEFT && join.right_projection_map.empty()) {\n+\t\t\tauto lhs_cardinality = join.children[0]->EstimateCardinality(context);\n+\t\t\tauto rhs_cardinality = join.children[1]->EstimateCardinality(context);\n+\t\t\tif (rhs_cardinality > lhs_cardinality * 2) {\n+\t\t\t\tjoin.join_type = JoinType::RIGHT;\n+\t\t\t\tstd::swap(join.children[0], join.children[1]);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n \tif (non_reorderable_operation) {\n \t\t// we encountered a non-reordable operation (setop or non-inner join)\n \t\t// we do not reorder non-inner joins yet, however we do want to expand the potential join graph around them\n@@ -648,7 +660,19 @@ void JoinOrderOptimizer::SolveJoinOrderApproximately() {\n \t\t\t// we have to add a cross product; we add it between the two smallest relations\n \t\t\toptional_ptr<JoinNode> smallest_plans[2];\n \t\t\tidx_t smallest_index[2];\n-\t\t\tfor (idx_t i = 0; i < join_relations.size(); i++) {\n+\t\t\tD_ASSERT(join_relations.size() >= 2);\n+\n+\t\t\t// first just add the first two join relations. It doesn't matter the cost as the JOO\n+\t\t\t// will swap them on estimated cardinality anyway.\n+\t\t\tfor (idx_t i = 0; i < 2; i++) {\n+\t\t\t\tauto current_plan = plans[&join_relations[i].get()].get();\n+\t\t\t\tsmallest_plans[i] = current_plan;\n+\t\t\t\tsmallest_index[i] = i;\n+\t\t\t}\n+\n+\t\t\t// if there are any other join relations that don't have connections\n+\t\t\t// add them if they have lower estimated cardinality.\n+\t\t\tfor (idx_t i = 2; i < join_relations.size(); i++) {\n \t\t\t\t// get the plan for this relation\n \t\t\t\tauto current_plan = plans[&join_relations[i].get()].get();\n \t\t\t\t// check if the cardinality is smaller than the smallest two found so far\ndiff --git a/src/optimizer/join_order/join_relation_set.cpp b/src/optimizer/join_order/join_relation_set.cpp\nindex 9fe81f384894..c09230a39f97 100644\n--- a/src/optimizer/join_order/join_relation_set.cpp\n+++ b/src/optimizer/join_order/join_relation_set.cpp\n@@ -35,7 +35,7 @@ bool JoinRelationSet::IsSubset(JoinRelationSet &super, JoinRelationSet &sub) {\n \treturn false;\n }\n \n-JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unique_ptr<idx_t[]> relations, idx_t count) {\n+JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unsafe_unique_array<idx_t> relations, idx_t count) {\n \t// now look it up in the tree\n \treference<JoinRelationTreeNode> info(root);\n \tfor (idx_t i = 0; i < count; i++) {\n@@ -59,7 +59,7 @@ JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unique_ptr<idx_t[]> rel\n //! Create or get a JoinRelationSet from a single node with the given index\n JoinRelationSet &JoinRelationSetManager::GetJoinRelation(idx_t index) {\n \t// create a sorted vector of the relations\n-\tauto relations = unique_ptr<idx_t[]>(new idx_t[1]);\n+\tauto relations = make_unsafe_uniq_array<idx_t>(1);\n \trelations[0] = index;\n \tidx_t count = 1;\n \treturn GetJoinRelation(std::move(relations), count);\n@@ -67,7 +67,7 @@ JoinRelationSet &JoinRelationSetManager::GetJoinRelation(idx_t index) {\n \n JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unordered_set<idx_t> &bindings) {\n \t// create a sorted vector of the relations\n-\tunique_ptr<idx_t[]> relations = bindings.empty() ? nullptr : unique_ptr<idx_t[]>(new idx_t[bindings.size()]);\n+\tunsafe_unique_array<idx_t> relations = bindings.empty() ? nullptr : make_unsafe_uniq_array<idx_t>(bindings.size());\n \tidx_t count = 0;\n \tfor (auto &entry : bindings) {\n \t\trelations[count++] = entry;\n@@ -77,7 +77,7 @@ JoinRelationSet &JoinRelationSetManager::GetJoinRelation(unordered_set<idx_t> &b\n }\n \n JoinRelationSet &JoinRelationSetManager::Union(JoinRelationSet &left, JoinRelationSet &right) {\n-\tauto relations = unique_ptr<idx_t[]>(new idx_t[left.count + right.count]);\n+\tauto relations = make_unsafe_uniq_array<idx_t>(left.count + right.count);\n \tidx_t count = 0;\n \t// move through the left and right relations, eliminating duplicates\n \tidx_t i = 0, j = 0;\n@@ -113,7 +113,7 @@ JoinRelationSet &JoinRelationSetManager::Union(JoinRelationSet &left, JoinRelati\n }\n \n // JoinRelationSet *JoinRelationSetManager::Difference(JoinRelationSet *left, JoinRelationSet *right) {\n-// \tauto relations = unique_ptr<idx_t[]>(new idx_t[left->count]);\n+// \tauto relations = unsafe_unique_array<idx_t>(new idx_t[left->count]);\n // \tidx_t count = 0;\n // \t// move through the left and right relations\n // \tidx_t i = 0, j = 0;\ndiff --git a/src/optimizer/rule/move_constants.cpp b/src/optimizer/rule/move_constants.cpp\nindex 3b221cb4d264..9704d665a132 100644\n--- a/src/optimizer/rule/move_constants.cpp\n+++ b/src/optimizer/rule/move_constants.cpp\n@@ -55,6 +55,9 @@ unique_ptr<Expression> MoveConstantsRule::Apply(LogicalOperator &op, vector<refe\n \t\t}\n \t\tauto result_value = Value::HUGEINT(outer_value);\n \t\tif (!result_value.DefaultTryCastAs(constant_type)) {\n+\t\t\tif (comparison.type != ExpressionType::COMPARE_EQUAL) {\n+\t\t\t\treturn nullptr;\n+\t\t\t}\n \t\t\t// if the cast is not possible then the comparison is not possible\n \t\t\t// for example, if we have x + 5 = 3, where x is an unsigned number, we will get x = -2\n \t\t\t// since this is not possible we can remove the entire branch here\ndiff --git a/src/optimizer/unnest_rewriter.cpp b/src/optimizer/unnest_rewriter.cpp\nindex 93d46bfbfd65..e14f11019a97 100644\n--- a/src/optimizer/unnest_rewriter.cpp\n+++ b/src/optimizer/unnest_rewriter.cpp\n@@ -195,18 +195,24 @@ void UnnestRewriter::UpdateRHSBindings(unique_ptr<LogicalOperator> *plan_ptr, un\n \t\tupdater.replace_bindings.push_back(replace_binding);\n \t}\n \n-\t// temporarily remove the BOUND_UNNEST and the child of the LOGICAL_UNNEST from the plan\n+\t// temporarily remove the BOUND_UNNESTs and the child of the LOGICAL_UNNEST from the plan\n \tD_ASSERT(curr_op->get()->type == LogicalOperatorType::LOGICAL_UNNEST);\n \tauto &unnest = curr_op->get()->Cast<LogicalUnnest>();\n-\tauto temp_bound_unnest = std::move(unnest.expressions[0]);\n+\tvector<unique_ptr<Expression>> temp_bound_unnests;\n+\tfor (auto &temp_bound_unnest : unnest.expressions) {\n+\t\ttemp_bound_unnests.push_back(std::move(temp_bound_unnest));\n+\t}\n+\tD_ASSERT(unnest.children.size() == 1);\n \tauto temp_unnest_child = std::move(unnest.children[0]);\n \tunnest.expressions.clear();\n \tunnest.children.clear();\n \t// update the bindings of the plan\n \tupdater.VisitOperator(*plan_ptr->get());\n \tupdater.replace_bindings.clear();\n-\t// add the child again\n-\tunnest.expressions.push_back(std::move(temp_bound_unnest));\n+\t// add the children again\n+\tfor (auto &temp_bound_unnest : temp_bound_unnests) {\n+\t\tunnest.expressions.push_back(std::move(temp_bound_unnest));\n+\t}\n \tunnest.children.push_back(std::move(temp_unnest_child));\n \n \t// add the LHS expressions to each LOGICAL_PROJECTION\n@@ -256,6 +262,7 @@ void UnnestRewriter::UpdateBoundUnnestBindings(UnnestRewriterPlanUpdater &update\n \tD_ASSERT(curr_op->get()->type == LogicalOperatorType::LOGICAL_UNNEST);\n \tauto &unnest = curr_op->get()->Cast<LogicalUnnest>();\n \n+\tD_ASSERT(unnest.children.size() == 1);\n \tauto unnest_child_cols = unnest.children[0]->GetColumnBindings();\n \tfor (idx_t delim_col_idx = 0; delim_col_idx < delim_columns.size(); delim_col_idx++) {\n \t\tfor (idx_t child_col_idx = 0; child_col_idx < unnest_child_cols.size(); child_col_idx++) {\n@@ -268,8 +275,9 @@ void UnnestRewriter::UpdateBoundUnnestBindings(UnnestRewriterPlanUpdater &update\n \t}\n \n \t// update bindings\n-\tD_ASSERT(unnest.expressions.size() == 1);\n-\tupdater.VisitExpression(&unnest.expressions[0]);\n+\tfor (auto &unnest_expr : unnest.expressions) {\n+\t\tupdater.VisitExpression(&unnest_expr);\n+\t}\n \tupdater.replace_bindings.clear();\n }\n \ndiff --git a/src/parser/expression/collate_expression.cpp b/src/parser/expression/collate_expression.cpp\nindex e57af4c09eba..863ec09bd8b7 100644\n--- a/src/parser/expression/collate_expression.cpp\n+++ b/src/parser/expression/collate_expression.cpp\n@@ -15,7 +15,7 @@ CollateExpression::CollateExpression(string collation_p, unique_ptr<ParsedExpres\n }\n \n string CollateExpression::ToString() const {\n-\treturn child->ToString() + \" COLLATE \" + KeywordHelper::WriteOptionallyQuoted(collation);\n+\treturn StringUtil::Format(\"%s COLLATE %s\", child->ToString(), SQLIdentifier(collation));\n }\n \n bool CollateExpression::Equal(const CollateExpression *a, const CollateExpression *b) {\ndiff --git a/src/parser/keyword_helper.cpp b/src/parser/keyword_helper.cpp\nindex b0add2e4c7e7..e74b6c748f32 100644\n--- a/src/parser/keyword_helper.cpp\n+++ b/src/parser/keyword_helper.cpp\n@@ -29,11 +29,21 @@ bool KeywordHelper::RequiresQuotes(const string &text, bool allow_caps) {\n \treturn IsKeyword(text);\n }\n \n+string KeywordHelper::EscapeQuotes(const string &text, char quote) {\n+\treturn StringUtil::Replace(text, string(1, quote), string(2, quote));\n+}\n+\n+string KeywordHelper::WriteQuoted(const string &text, char quote) {\n+\t// 1. Escapes all occurences of 'quote' by doubling them (escape in SQL)\n+\t// 2. Adds quotes around the string\n+\treturn string(1, quote) + EscapeQuotes(text) + string(1, quote);\n+}\n+\n string KeywordHelper::WriteOptionallyQuoted(const string &text, char quote, bool allow_caps) {\n \tif (!RequiresQuotes(text, allow_caps)) {\n \t\treturn text;\n \t}\n-\treturn string(1, quote) + StringUtil::Replace(text, string(1, quote), string(2, quote)) + string(1, quote);\n+\treturn WriteQuoted(text, quote);\n }\n \n } // namespace duckdb\ndiff --git a/src/parser/parsed_data/CMakeLists.txt b/src/parser/parsed_data/CMakeLists.txt\nindex 483863ffb168..a821b9cdf584 100644\n--- a/src/parser/parsed_data/CMakeLists.txt\n+++ b/src/parser/parsed_data/CMakeLists.txt\n@@ -5,17 +5,25 @@ add_library_unity(\n   alter_scalar_function_info.cpp\n   alter_table_function_info.cpp\n   alter_table_info.cpp\n+  attach_info.cpp\n   create_info.cpp\n   create_index_info.cpp\n   create_aggregate_function_info.cpp\n   create_collation_info.cpp\n   create_copy_function_info.cpp\n+  create_macro_info.cpp\n   create_pragma_function_info.cpp\n+  create_sequence_info.cpp\n   create_scalar_function_info.cpp\n   create_table_function_info.cpp\n   create_table_info.cpp\n+  create_type_info.cpp\n   create_view_info.cpp\n-  sample_options.cpp)\n+  detach_info.cpp\n+  drop_info.cpp\n+  sample_options.cpp\n+  transaction_info.cpp\n+  vacuum_info.cpp)\n set(ALL_OBJECT_FILES\n     ${ALL_OBJECT_FILES} $<TARGET_OBJECTS:duckdb_parsed_data>\n     PARENT_SCOPE)\ndiff --git a/src/parser/parsed_data/attach_info.cpp b/src/parser/parsed_data/attach_info.cpp\nnew file mode 100644\nindex 000000000000..e11b0a512bc1\n--- /dev/null\n+++ b/src/parser/parsed_data/attach_info.cpp\n@@ -0,0 +1,42 @@\n+#include \"duckdb/parser/parsed_data/attach_info.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+\n+namespace duckdb {\n+\n+unique_ptr<AttachInfo> AttachInfo::Copy() const {\n+\tauto result = make_uniq<AttachInfo>();\n+\tresult->name = name;\n+\tresult->path = path;\n+\tresult->options = options;\n+\treturn result;\n+}\n+\n+void AttachInfo::Serialize(Serializer &main_serializer) const {\n+\tFieldWriter writer(main_serializer);\n+\twriter.WriteString(name);\n+\twriter.WriteString(path);\n+\twriter.WriteField<uint32_t>(options.size());\n+\tauto &serializer = writer.GetSerializer();\n+\tfor (auto &kv : options) {\n+\t\tserializer.WriteString(kv.first);\n+\t\tkv.second.Serialize(serializer);\n+\t}\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<ParseInfo> AttachInfo::Deserialize(Deserializer &deserializer) {\n+\tFieldReader reader(deserializer);\n+\tauto attach_info = make_uniq<AttachInfo>();\n+\tattach_info->name = reader.ReadRequired<string>();\n+\tattach_info->path = reader.ReadRequired<string>();\n+\tauto default_attach_count = reader.ReadRequired<uint32_t>();\n+\tauto &source = reader.GetSource();\n+\tfor (idx_t i = 0; i < default_attach_count; i++) {\n+\t\tauto name = source.Read<string>();\n+\t\tattach_info->options[name] = Value::Deserialize(source);\n+\t}\n+\treader.Finalize();\n+\treturn std::move(attach_info);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/create_index_info.cpp b/src/parser/parsed_data/create_index_info.cpp\nindex 13f2f37b6e9e..b251ddb5d55b 100644\n--- a/src/parser/parsed_data/create_index_info.cpp\n+++ b/src/parser/parsed_data/create_index_info.cpp\n@@ -5,7 +5,6 @@\n namespace duckdb {\n \n unique_ptr<CreateInfo> CreateIndexInfo::Copy() const {\n-\n \tauto result = make_uniq<CreateIndexInfo>();\n \tCopyProperties(*result);\n \n@@ -27,24 +26,20 @@ unique_ptr<CreateInfo> CreateIndexInfo::Copy() const {\n }\n \n void CreateIndexInfo::SerializeInternal(Serializer &serializer) const {\n-\n \tFieldWriter writer(serializer);\n \twriter.WriteField(index_type);\n \twriter.WriteString(index_name);\n \twriter.WriteField(constraint_type);\n \n-\twriter.WriteSerializableList<ParsedExpression>(expressions);\n \twriter.WriteSerializableList<ParsedExpression>(parsed_expressions);\n \n \twriter.WriteRegularSerializableList(scan_types);\n \twriter.WriteList<string>(names);\n \twriter.WriteList<column_t>(column_ids);\n-\n \twriter.Finalize();\n }\n \n unique_ptr<CreateIndexInfo> CreateIndexInfo::Deserialize(Deserializer &deserializer) {\n-\n \tauto result = make_uniq<CreateIndexInfo>();\n \tresult->DeserializeBase(deserializer);\n \n@@ -53,13 +48,11 @@ unique_ptr<CreateIndexInfo> CreateIndexInfo::Deserialize(Deserializer &deseriali\n \tresult->index_name = reader.ReadRequired<string>();\n \tresult->constraint_type = reader.ReadRequired<IndexConstraintType>();\n \n-\tresult->expressions = reader.ReadRequiredSerializableList<ParsedExpression>();\n \tresult->parsed_expressions = reader.ReadRequiredSerializableList<ParsedExpression>();\n \n \tresult->scan_types = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n \tresult->names = reader.ReadRequiredList<string>();\n \tresult->column_ids = reader.ReadRequiredList<column_t>();\n-\n \treader.Finalize();\n \treturn result;\n }\ndiff --git a/src/parser/parsed_data/create_info.cpp b/src/parser/parsed_data/create_info.cpp\nindex f17c00c97f59..629c9e1876de 100644\n--- a/src/parser/parsed_data/create_info.cpp\n+++ b/src/parser/parsed_data/create_info.cpp\n@@ -4,18 +4,13 @@\n #include \"duckdb/parser/parsed_data/create_schema_info.hpp\"\n #include \"duckdb/parser/parsed_data/create_table_info.hpp\"\n #include \"duckdb/parser/parsed_data/create_view_info.hpp\"\n+#include \"duckdb/parser/parsed_data/create_sequence_info.hpp\"\n #include \"duckdb/parser/parsed_data/create_database_info.hpp\"\n+#include \"duckdb/parser/parsed_data/create_type_info.hpp\"\n #include \"duckdb/parser/parsed_data/alter_info.hpp\"\n+#include \"duckdb/parser/parsed_data/create_macro_info.hpp\"\n \n namespace duckdb {\n-void CreateInfo::DeserializeBase(Deserializer &deserializer) {\n-\tthis->catalog = deserializer.Read<string>();\n-\tthis->schema = deserializer.Read<string>();\n-\tthis->on_conflict = deserializer.Read<OnCreateConflict>();\n-\tthis->temporary = deserializer.Read<bool>();\n-\tthis->internal = deserializer.Read<bool>();\n-\tthis->sql = deserializer.Read<string>();\n-}\n \n void CreateInfo::Serialize(Serializer &serializer) const {\n \tserializer.Write(type);\n@@ -28,6 +23,15 @@ void CreateInfo::Serialize(Serializer &serializer) const {\n \tSerializeInternal(serializer);\n }\n \n+void CreateInfo::DeserializeBase(Deserializer &deserializer) {\n+\tthis->catalog = deserializer.Read<string>();\n+\tthis->schema = deserializer.Read<string>();\n+\tthis->on_conflict = deserializer.Read<OnCreateConflict>();\n+\tthis->temporary = deserializer.Read<bool>();\n+\tthis->internal = deserializer.Read<bool>();\n+\tthis->sql = deserializer.Read<string>();\n+}\n+\n unique_ptr<CreateInfo> CreateInfo::Deserialize(Deserializer &deserializer) {\n \tauto type = deserializer.Read<CatalogType>();\n \tswitch (type) {\n@@ -41,6 +45,13 @@ unique_ptr<CreateInfo> CreateInfo::Deserialize(Deserializer &deserializer) {\n \t\treturn CreateViewInfo::Deserialize(deserializer);\n \tcase CatalogType::DATABASE_ENTRY:\n \t\treturn CreateDatabaseInfo::Deserialize(deserializer);\n+\tcase CatalogType::TYPE_ENTRY:\n+\t\treturn CreateTypeInfo::Deserialize(deserializer);\n+\tcase CatalogType::MACRO_ENTRY:\n+\tcase CatalogType::TABLE_MACRO_ENTRY:\n+\t\treturn CreateMacroInfo::Deserialize(deserializer);\n+\tcase CatalogType::SEQUENCE_ENTRY:\n+\t\treturn CreateSequenceInfo::Deserialize(deserializer);\n \tdefault:\n \t\tthrow NotImplementedException(\"Cannot deserialize '%s'\", CatalogTypeToString(type));\n \t}\ndiff --git a/src/parser/parsed_data/create_macro_info.cpp b/src/parser/parsed_data/create_macro_info.cpp\nnew file mode 100644\nindex 000000000000..2da27601fa25\n--- /dev/null\n+++ b/src/parser/parsed_data/create_macro_info.cpp\n@@ -0,0 +1,46 @@\n+#include \"duckdb/parser/parsed_data/create_macro_info.hpp\"\n+#include \"duckdb/catalog/catalog_entry/schema_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog.hpp\"\n+\n+namespace duckdb {\n+\n+CreateMacroInfo::CreateMacroInfo() : CreateFunctionInfo(CatalogType::MACRO_ENTRY, INVALID_SCHEMA) {\n+}\n+\n+CreateMacroInfo::CreateMacroInfo(CatalogType type) : CreateFunctionInfo(type, INVALID_SCHEMA) {\n+}\n+\n+unique_ptr<CreateInfo> CreateMacroInfo::Copy() const {\n+\tauto result = make_uniq<CreateMacroInfo>();\n+\tresult->function = function->Copy();\n+\tresult->name = name;\n+\tCopyProperties(*result);\n+\treturn std::move(result);\n+}\n+\n+void CreateMacroInfo::SerializeInternal(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteString(name);\n+\twriter.WriteSerializable(*function);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<CreateMacroInfo> CreateMacroInfo::Deserialize(Deserializer &deserializer) {\n+\tauto result = make_uniq<CreateMacroInfo>();\n+\tresult->DeserializeBase(deserializer);\n+\n+\tFieldReader reader(deserializer);\n+\tresult->name = reader.ReadRequired<string>();\n+\tresult->function = reader.ReadRequiredSerializable<MacroFunction>();\n+\treader.Finalize();\n+\n+\tif (result->function->type == MacroType::TABLE_MACRO) {\n+\t\tresult->type = CatalogType::TABLE_MACRO_ENTRY;\n+\t} else {\n+\t\tresult->type = CatalogType::MACRO_ENTRY;\n+\t}\n+\treturn result;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/create_sequence_info.cpp b/src/parser/parsed_data/create_sequence_info.cpp\nnew file mode 100644\nindex 000000000000..094ce4325e84\n--- /dev/null\n+++ b/src/parser/parsed_data/create_sequence_info.cpp\n@@ -0,0 +1,56 @@\n+#include \"duckdb/parser/parsed_data/create_sequence_info.hpp\"\n+#include \"duckdb/catalog/catalog_entry/schema_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog.hpp\"\n+\n+namespace duckdb {\n+\n+CreateSequenceInfo::CreateSequenceInfo()\n+    : CreateInfo(CatalogType::SEQUENCE_ENTRY, INVALID_SCHEMA), name(string()), usage_count(0), increment(1),\n+      min_value(1), max_value(NumericLimits<int64_t>::Maximum()), start_value(1), cycle(false) {\n+}\n+\n+unique_ptr<CreateInfo> CreateSequenceInfo::Copy() const {\n+\tauto result = make_uniq<CreateSequenceInfo>();\n+\tCopyProperties(*result);\n+\tresult->name = name;\n+\tresult->schema = schema;\n+\tresult->usage_count = usage_count;\n+\tresult->increment = increment;\n+\tresult->min_value = min_value;\n+\tresult->max_value = max_value;\n+\tresult->start_value = start_value;\n+\tresult->cycle = cycle;\n+\treturn std::move(result);\n+}\n+\n+void CreateSequenceInfo::SerializeInternal(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteString(name);\n+\twriter.WriteField(usage_count);\n+\twriter.WriteField(increment);\n+\twriter.WriteField(min_value);\n+\twriter.WriteField(max_value);\n+\twriter.WriteField(start_value);\n+\twriter.WriteField(cycle);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<CreateSequenceInfo> CreateSequenceInfo::Deserialize(Deserializer &deserializer) {\n+\tauto result = make_uniq<CreateSequenceInfo>();\n+\tresult->DeserializeBase(deserializer);\n+\n+\tFieldReader reader(deserializer);\n+\tresult->name = reader.ReadRequired<string>();\n+\tresult->usage_count = reader.ReadRequired<uint64_t>();\n+\tresult->increment = reader.ReadRequired<int64_t>();\n+\tresult->min_value = reader.ReadRequired<int64_t>();\n+\tresult->max_value = reader.ReadRequired<int64_t>();\n+\tresult->start_value = reader.ReadRequired<int64_t>();\n+\tresult->cycle = reader.ReadRequired<bool>();\n+\treader.Finalize();\n+\n+\treturn result;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/create_type_info.cpp b/src/parser/parsed_data/create_type_info.cpp\nnew file mode 100644\nindex 000000000000..4207c70a5869\n--- /dev/null\n+++ b/src/parser/parsed_data/create_type_info.cpp\n@@ -0,0 +1,47 @@\n+#include \"duckdb/parser/parsed_data/create_type_info.hpp\"\n+#include \"duckdb/catalog/catalog_entry/schema_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog_entry/table_catalog_entry.hpp\"\n+#include \"duckdb/catalog/catalog.hpp\"\n+\n+namespace duckdb {\n+\n+CreateTypeInfo::CreateTypeInfo() : CreateInfo(CatalogType::TYPE_ENTRY) {\n+}\n+CreateTypeInfo::CreateTypeInfo(string name_p, LogicalType type_p)\n+    : CreateInfo(CatalogType::TYPE_ENTRY), name(std::move(name_p)), type(std::move(type_p)) {\n+}\n+\n+unique_ptr<CreateInfo> CreateTypeInfo::Copy() const {\n+\tauto result = make_uniq<CreateTypeInfo>();\n+\tCopyProperties(*result);\n+\tresult->name = name;\n+\tresult->type = type;\n+\tif (query) {\n+\t\tresult->query = query->Copy();\n+\t}\n+\treturn std::move(result);\n+}\n+\n+void CreateTypeInfo::SerializeInternal(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteString(name);\n+\twriter.WriteSerializable(type);\n+\tif (query) {\n+\t\tthrow InternalException(\"Cannot serialize CreateTypeInfo with query\");\n+\t}\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<CreateTypeInfo> CreateTypeInfo::Deserialize(Deserializer &deserializer) {\n+\tauto result = make_uniq<CreateTypeInfo>();\n+\tresult->DeserializeBase(deserializer);\n+\n+\tFieldReader reader(deserializer);\n+\tresult->name = reader.ReadRequired<string>();\n+\tresult->type = reader.ReadRequiredSerializable<LogicalType, LogicalType>();\n+\treader.Finalize();\n+\n+\treturn result;\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/detach_info.cpp b/src/parser/parsed_data/detach_info.cpp\nnew file mode 100644\nindex 000000000000..cae8e40e6354\n--- /dev/null\n+++ b/src/parser/parsed_data/detach_info.cpp\n@@ -0,0 +1,34 @@\n+#include \"duckdb/parser/parsed_data/detach_info.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+\n+namespace duckdb {\n+\n+DetachInfo::DetachInfo() {\n+}\n+\n+unique_ptr<DetachInfo> DetachInfo::Copy() const {\n+\tauto result = make_uniq<DetachInfo>();\n+\tresult->name = name;\n+\tresult->if_not_found = if_not_found;\n+\treturn result;\n+}\n+\n+void DetachInfo::Serialize(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteString(name);\n+\twriter.WriteField(if_not_found);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<ParseInfo> DetachInfo::Deserialize(Deserializer &deserializer) {\n+\tauto result = make_uniq<DetachInfo>();\n+\n+\tFieldReader reader(deserializer);\n+\tresult->name = reader.ReadRequired<string>();\n+\tresult->if_not_found = reader.ReadRequired<OnEntryNotFound>();\n+\treader.Finalize();\n+\n+\treturn std::move(result);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/drop_info.cpp b/src/parser/parsed_data/drop_info.cpp\nnew file mode 100644\nindex 000000000000..4d82bbf7b359\n--- /dev/null\n+++ b/src/parser/parsed_data/drop_info.cpp\n@@ -0,0 +1,46 @@\n+#include \"duckdb/parser/parsed_data/drop_info.hpp\"\n+\n+namespace duckdb {\n+\n+DropInfo::DropInfo() : catalog(INVALID_CATALOG), schema(INVALID_SCHEMA), cascade(false) {\n+}\n+\n+unique_ptr<DropInfo> DropInfo::Copy() const {\n+\tauto result = make_uniq<DropInfo>();\n+\tresult->type = type;\n+\tresult->catalog = catalog;\n+\tresult->schema = schema;\n+\tresult->name = name;\n+\tresult->if_not_found = if_not_found;\n+\tresult->cascade = cascade;\n+\tresult->allow_drop_internal = allow_drop_internal;\n+\treturn result;\n+}\n+\n+void DropInfo::Serialize(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteField<CatalogType>(type);\n+\twriter.WriteString(catalog);\n+\twriter.WriteString(schema);\n+\twriter.WriteString(name);\n+\twriter.WriteField(if_not_found);\n+\twriter.WriteField(cascade);\n+\twriter.WriteField(allow_drop_internal);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<ParseInfo> DropInfo::Deserialize(Deserializer &deserializer) {\n+\tFieldReader reader(deserializer);\n+\tauto drop_info = make_uniq<DropInfo>();\n+\tdrop_info->type = reader.ReadRequired<CatalogType>();\n+\tdrop_info->catalog = reader.ReadRequired<string>();\n+\tdrop_info->schema = reader.ReadRequired<string>();\n+\tdrop_info->name = reader.ReadRequired<string>();\n+\tdrop_info->if_not_found = reader.ReadRequired<OnEntryNotFound>();\n+\tdrop_info->cascade = reader.ReadRequired<bool>();\n+\tdrop_info->allow_drop_internal = reader.ReadRequired<bool>();\n+\treader.Finalize();\n+\treturn std::move(drop_info);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/transaction_info.cpp b/src/parser/parsed_data/transaction_info.cpp\nnew file mode 100644\nindex 000000000000..e534ce8f68b7\n--- /dev/null\n+++ b/src/parser/parsed_data/transaction_info.cpp\n@@ -0,0 +1,24 @@\n+#include \"duckdb/parser/parsed_data/transaction_info.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+\n+namespace duckdb {\n+\n+TransactionInfo::TransactionInfo(TransactionType type) : type(type) {\n+}\n+\n+void TransactionInfo::Serialize(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteField(type);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<ParseInfo> TransactionInfo::Deserialize(Deserializer &deserializer) {\n+\tFieldReader reader(deserializer);\n+\tauto transaction_type = reader.ReadRequired<TransactionType>();\n+\treader.Finalize();\n+\n+\tauto transaction_info = make_uniq<TransactionInfo>(transaction_type);\n+\treturn std::move(transaction_info);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/parsed_data/vacuum_info.cpp b/src/parser/parsed_data/vacuum_info.cpp\nnew file mode 100644\nindex 000000000000..4f167217dec6\n--- /dev/null\n+++ b/src/parser/parsed_data/vacuum_info.cpp\n@@ -0,0 +1,37 @@\n+#include \"duckdb/parser/parsed_data/vacuum_info.hpp\"\n+#include \"duckdb/common/field_writer.hpp\"\n+\n+namespace duckdb {\n+\n+VacuumInfo::VacuumInfo(VacuumOptions options) : options(options), has_table(false) {\n+}\n+\n+unique_ptr<VacuumInfo> VacuumInfo::Copy() {\n+\tauto result = make_uniq<VacuumInfo>(options);\n+\tresult->has_table = has_table;\n+\tif (has_table) {\n+\t\tresult->ref = ref->Copy();\n+\t}\n+\treturn result;\n+}\n+\n+void VacuumInfo::Serialize(Serializer &serializer) const {\n+\tFieldWriter writer(serializer);\n+\twriter.WriteField(options.analyze);\n+\twriter.WriteField(options.vacuum);\n+\twriter.Finalize();\n+}\n+\n+unique_ptr<ParseInfo> VacuumInfo::Deserialize(Deserializer &deserializer) {\n+\n+\tVacuumOptions options;\n+\tFieldReader reader(deserializer);\n+\toptions.analyze = reader.ReadRequired<bool>();\n+\toptions.vacuum = reader.ReadRequired<bool>();\n+\treader.Finalize();\n+\n+\tauto vacuum_info = make_uniq<VacuumInfo>(options);\n+\treturn std::move(vacuum_info);\n+}\n+\n+} // namespace duckdb\ndiff --git a/src/parser/query_node/select_node.cpp b/src/parser/query_node/select_node.cpp\nindex 4f20224248af..635878d2a72c 100644\n--- a/src/parser/query_node/select_node.cpp\n+++ b/src/parser/query_node/select_node.cpp\n@@ -39,7 +39,7 @@ string SelectNode::ToString() const {\n \t\t}\n \t\tresult += select_list[i]->ToString();\n \t\tif (!select_list[i]->alias.empty()) {\n-\t\t\tresult += \" AS \" + KeywordHelper::WriteOptionallyQuoted(select_list[i]->alias);\n+\t\t\tresult += StringUtil::Format(\" AS %s\", SQLIdentifier(select_list[i]->alias));\n \t\t}\n \t}\n \tif (from_table && from_table->type != TableReferenceType::EMPTY) {\ndiff --git a/src/parser/statement/copy_statement.cpp b/src/parser/statement/copy_statement.cpp\nindex 175911031c31..9031de28636e 100644\n--- a/src/parser/statement/copy_statement.cpp\n+++ b/src/parser/statement/copy_statement.cpp\n@@ -86,7 +86,7 @@ string CopyStatement::ToString() const {\n \t\tD_ASSERT(!select_statement);\n \t\tresult += TablePart(*info);\n \t\tresult += \" FROM\";\n-\t\tresult += StringUtil::Format(\" '%s'\", info->file_path);\n+\t\tresult += StringUtil::Format(\" %s\", SQLString(info->file_path));\n \t\tresult += CopyOptionsToString(info->format, info->options);\n \t} else {\n \t\tif (select_statement) {\n@@ -96,7 +96,7 @@ string CopyStatement::ToString() const {\n \t\t\tresult += TablePart(*info);\n \t\t}\n \t\tresult += \" TO \";\n-\t\tresult += StringUtil::Format(\"'%s'\", info->file_path);\n+\t\tresult += StringUtil::Format(\"%s\", SQLString(info->file_path));\n \t\tresult += CopyOptionsToString(info->format, info->options);\n \t}\n \treturn result;\ndiff --git a/src/parser/statement/insert_statement.cpp b/src/parser/statement/insert_statement.cpp\nindex a0e747f04540..4255ebb97b61 100644\n--- a/src/parser/statement/insert_statement.cpp\n+++ b/src/parser/statement/insert_statement.cpp\n@@ -30,7 +30,7 @@ InsertStatement::InsertStatement(const InsertStatement &other)\n     : SQLStatement(other), select_statement(unique_ptr_cast<SQLStatement, SelectStatement>(\n                                other.select_statement ? other.select_statement->Copy() : nullptr)),\n       columns(other.columns), table(other.table), schema(other.schema), catalog(other.catalog),\n-      default_values(other.default_values) {\n+      default_values(other.default_values), column_order(other.column_order) {\n \tcte_map = other.cte_map.Copy();\n \tfor (auto &expr : other.returning_list) {\n \t\treturning_list.emplace_back(expr->Copy());\n@@ -81,6 +81,9 @@ string InsertStatement::ToString() const {\n \tif (table_ref && !table_ref->alias.empty()) {\n \t\tresult += StringUtil::Format(\" AS %s\", KeywordHelper::WriteOptionallyQuoted(table_ref->alias));\n \t}\n+\tif (column_order == InsertColumnOrder::INSERT_BY_NAME) {\n+\t\tresult += \" BY NAME\";\n+\t}\n \tif (!columns.empty()) {\n \t\tresult += \" (\";\n \t\tfor (idx_t i = 0; i < columns.size(); i++) {\ndiff --git a/src/parser/tableref.cpp b/src/parser/tableref.cpp\nindex b5bfd9a6bcbc..0815ee20a1d8 100644\n--- a/src/parser/tableref.cpp\n+++ b/src/parser/tableref.cpp\n@@ -16,7 +16,7 @@ string TableRef::BaseToString(string result) const {\n \n string TableRef::BaseToString(string result, const vector<string> &column_name_alias) const {\n \tif (!alias.empty()) {\n-\t\tresult += \" AS \" + KeywordHelper::WriteOptionallyQuoted(alias);\n+\t\tresult += StringUtil::Format(\" AS %s\", SQLIdentifier(alias));\n \t}\n \tif (!column_name_alias.empty()) {\n \t\tD_ASSERT(!alias.empty());\ndiff --git a/src/parser/transform/statement/transform_insert.cpp b/src/parser/transform/statement/transform_insert.cpp\nindex b9a2b6c71828..2bdfbecc6e3c 100644\n--- a/src/parser/transform/statement/transform_insert.cpp\n+++ b/src/parser/transform/statement/transform_insert.cpp\n@@ -67,6 +67,16 @@ unique_ptr<InsertStatement> Transformer::TransformInsert(duckdb_libpgquery::PGNo\n \t\tresult->on_conflict_info = DummyOnConflictClause(stmt->onConflictAlias, result->schema);\n \t\tresult->table_ref = TransformRangeVar(stmt->relation);\n \t}\n+\tswitch (stmt->insert_column_order) {\n+\tcase duckdb_libpgquery::PG_INSERT_BY_POSITION:\n+\t\tresult->column_order = InsertColumnOrder::INSERT_BY_POSITION;\n+\t\tbreak;\n+\tcase duckdb_libpgquery::PG_INSERT_BY_NAME:\n+\t\tresult->column_order = InsertColumnOrder::INSERT_BY_NAME;\n+\t\tbreak;\n+\tdefault:\n+\t\tthrow InternalException(\"Unrecognized insert column order in TransformInsert\");\n+\t}\n \tresult->catalog = qname.catalog;\n \treturn result;\n }\ndiff --git a/src/planner/binder/expression/bind_star_expression.cpp b/src/planner/binder/expression/bind_star_expression.cpp\nindex 0de28bb0ea97..8674467a3818 100644\n--- a/src/planner/binder/expression/bind_star_expression.cpp\n+++ b/src/planner/binder/expression/bind_star_expression.cpp\n@@ -8,6 +8,15 @@\n \n namespace duckdb {\n \n+string GetColumnsStringValue(ParsedExpression &expr) {\n+\tif (expr.type == ExpressionType::COLUMN_REF) {\n+\t\tauto &colref = expr.Cast<ColumnRefExpression>();\n+\t\treturn colref.GetColumnName();\n+\t} else {\n+\t\treturn expr.ToString();\n+\t}\n+}\n+\n bool Binder::FindStarExpression(unique_ptr<ParsedExpression> &expr, StarExpression **star, bool is_root,\n                                 bool in_columns) {\n \tbool has_star = false;\n@@ -33,7 +42,7 @@ bool Binder::FindStarExpression(unique_ptr<ParsedExpression> &expr, StarExpressi\n \t\t\tvector<Value> values;\n \t\t\tvalues.reserve(star_list.size());\n \t\t\tfor (auto &expr : star_list) {\n-\t\t\t\tvalues.emplace_back(expr->ToString());\n+\t\t\t\tvalues.emplace_back(GetColumnsStringValue(*expr));\n \t\t\t}\n \t\t\tD_ASSERT(!values.empty());\n \n@@ -139,17 +148,26 @@ void Binder::ExpandStarExpression(unique_ptr<ParsedExpression> expr,\n \t\t\t}\n \t\t\tauto &children = ListValue::GetChildren(val);\n \t\t\tvector<unique_ptr<ParsedExpression>> new_list;\n+\t\t\t// scan the list for all selected columns and construct a lookup table\n+\t\t\tcase_insensitive_map_t<bool> selected_set;\n \t\t\tfor (auto &child : children) {\n-\t\t\t\tauto qname = QualifiedName::Parse(StringValue::Get(child));\n-\t\t\t\tvector<string> names;\n-\t\t\t\tif (!qname.catalog.empty()) {\n-\t\t\t\t\tnames.push_back(qname.catalog);\n+\t\t\t\tselected_set.insert(make_pair(StringValue::Get(child), false));\n+\t\t\t}\n+\t\t\t// now check the list of all possible expressions and select which ones make it in\n+\t\t\tfor (auto &expr : star_list) {\n+\t\t\t\tauto str = GetColumnsStringValue(*expr);\n+\t\t\t\tauto entry = selected_set.find(str);\n+\t\t\t\tif (entry != selected_set.end()) {\n+\t\t\t\t\tnew_list.push_back(std::move(expr));\n+\t\t\t\t\tentry->second = true;\n \t\t\t\t}\n-\t\t\t\tif (!qname.schema.empty()) {\n-\t\t\t\t\tnames.push_back(qname.schema);\n+\t\t\t}\n+\t\t\t// check if all expressions found a match\n+\t\t\tfor (auto &entry : selected_set) {\n+\t\t\t\tif (!entry.second) {\n+\t\t\t\t\tthrow BinderException(\"Column \\\"%s\\\" was selected but was not found in the FROM clause\",\n+\t\t\t\t\t                      entry.first);\n \t\t\t\t}\n-\t\t\t\tnames.push_back(qname.name);\n-\t\t\t\tnew_list.push_back(make_uniq<ColumnRefExpression>(std::move(names)));\n \t\t\t}\n \t\t\tstar_list = std::move(new_list);\n \t\t} else {\ndiff --git a/src/planner/binder/statement/bind_copy.cpp b/src/planner/binder/statement/bind_copy.cpp\nindex 39afe1455c14..fc32ffc1a4f2 100644\n--- a/src/planner/binder/statement/bind_copy.cpp\n+++ b/src/planner/binder/statement/bind_copy.cpp\n@@ -129,10 +129,15 @@ BoundStatement Binder::BindCopyTo(CopyStatement &stmt) {\n \tif (per_thread_output && !partition_cols.empty()) {\n \t\tthrow NotImplementedException(\"Can't combine PER_THREAD_OUTPUT and PARTITION_BY for COPY\");\n \t}\n-\tbool is_file_and_exists = config.file_system->FileExists(stmt.info->file_path);\n-\tbool is_stdout = stmt.info->file_path == \"/dev/stdout\";\n-\tif (!user_set_use_tmp_file) {\n-\t\tuse_tmp_file = is_file_and_exists && !per_thread_output && partition_cols.empty() && !is_stdout;\n+\tbool is_remote_file = config.file_system->IsRemoteFile(stmt.info->file_path);\n+\tif (is_remote_file) {\n+\t\tuse_tmp_file = false;\n+\t} else {\n+\t\tbool is_file_and_exists = config.file_system->FileExists(stmt.info->file_path);\n+\t\tbool is_stdout = stmt.info->file_path == \"/dev/stdout\";\n+\t\tif (!user_set_use_tmp_file) {\n+\t\t\tuse_tmp_file = is_file_and_exists && !per_thread_output && partition_cols.empty() && !is_stdout;\n+\t\t}\n \t}\n \n \tauto unique_column_names = GetUniqueNames(select_node.names);\ndiff --git a/src/planner/binder/statement/bind_create.cpp b/src/planner/binder/statement/bind_create.cpp\nindex 11a7ee375524..1f17254ecda8 100644\n--- a/src/planner/binder/statement/bind_create.cpp\n+++ b/src/planner/binder/statement/bind_create.cpp\n@@ -455,7 +455,7 @@ static bool AnyConstraintReferencesGeneratedColumn(CreateTableInfo &table_info)\n unique_ptr<LogicalOperator> DuckCatalog::BindCreateIndex(Binder &binder, CreateStatement &stmt,\n                                                          TableCatalogEntry &table, unique_ptr<LogicalOperator> plan) {\n \tD_ASSERT(plan->type == LogicalOperatorType::LOGICAL_GET);\n-\tauto &base = (CreateIndexInfo &)*stmt.info;\n+\tauto &base = stmt.info->Cast<CreateIndexInfo>();\n \n \tauto &get = plan->Cast<LogicalGet>();\n \t// bind the index expressions\n@@ -614,6 +614,7 @@ BoundStatement Binder::Bind(CreateStatement &stmt) {\n \t\t\t// CREATE TYPE mood AS ENUM (SELECT 'happy')\n \t\t\tauto query_obj = Bind(*create_type_info.query);\n \t\t\tauto query = std::move(query_obj.plan);\n+\t\t\tcreate_type_info.query.reset();\n \n \t\t\tauto &sql_types = query_obj.types;\n \t\t\tif (sql_types.size() != 1) {\ndiff --git a/src/planner/binder/statement/bind_create_table.cpp b/src/planner/binder/statement/bind_create_table.cpp\nindex 29256b87466e..7d2f4250e595 100644\n--- a/src/planner/binder/statement/bind_create_table.cpp\n+++ b/src/planner/binder/statement/bind_create_table.cpp\n@@ -256,6 +256,7 @@ unique_ptr<BoundCreateTableInfo> Binder::BindCreateTableInfo(unique_ptr<CreateIn\n \tif (base.query) {\n \t\t// construct the result object\n \t\tauto query_obj = Bind(*base.query);\n+\t\tbase.query.reset();\n \t\tresult->query = std::move(query_obj.plan);\n \n \t\t// construct the set of columns based on the names and types of the query\ndiff --git a/src/planner/binder/statement/bind_insert.cpp b/src/planner/binder/statement/bind_insert.cpp\nindex dc22a16e6895..0534d80c791f 100644\n--- a/src/planner/binder/statement/bind_insert.cpp\n+++ b/src/planner/binder/statement/bind_insert.cpp\n@@ -25,6 +25,7 @@\n #include \"duckdb/planner/tableref/bound_basetableref.hpp\"\n #include \"duckdb/planner/tableref/bound_dummytableref.hpp\"\n #include \"duckdb/parser/parsed_expression_iterator.hpp\"\n+#include \"duckdb/storage/table_storage_info.hpp\"\n \n namespace duckdb {\n \n@@ -78,10 +79,10 @@ void ReplaceColumnBindings(Expression &expr, idx_t source, idx_t dest) {\n \t    expr, [&](unique_ptr<Expression> &child) { ReplaceColumnBindings(*child, source, dest); });\n }\n \n-void Binder::BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert *insert, UpdateSetInfo &set_info,\n-                                        TableCatalogEntry &table) {\n-\tD_ASSERT(insert->children.size() == 1);\n-\tD_ASSERT(insert->children[0]->type == LogicalOperatorType::LOGICAL_PROJECTION);\n+void Binder::BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert &insert, UpdateSetInfo &set_info,\n+                                        TableCatalogEntry &table, TableStorageInfo &storage_info) {\n+\tD_ASSERT(insert.children.size() == 1);\n+\tD_ASSERT(insert.children[0]->type == LogicalOperatorType::LOGICAL_PROJECTION);\n \n \tvector<column_t> logical_column_ids;\n \tvector<string> column_names;\n@@ -97,13 +98,13 @@ void Binder::BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert\n \t\tif (column.Generated()) {\n \t\t\tthrow BinderException(\"Cant update column \\\"%s\\\" because it is a generated column!\", column.Name());\n \t\t}\n-\t\tif (std::find(insert->set_columns.begin(), insert->set_columns.end(), column.Physical()) !=\n-\t\t    insert->set_columns.end()) {\n+\t\tif (std::find(insert.set_columns.begin(), insert.set_columns.end(), column.Physical()) !=\n+\t\t    insert.set_columns.end()) {\n \t\t\tthrow BinderException(\"Multiple assignments to same column \\\"%s\\\"\", colname);\n \t\t}\n-\t\tinsert->set_columns.push_back(column.Physical());\n+\t\tinsert.set_columns.push_back(column.Physical());\n \t\tlogical_column_ids.push_back(column.Oid());\n-\t\tinsert->set_types.push_back(column.Type());\n+\t\tinsert.set_types.push_back(column.Type());\n \t\tcolumn_names.push_back(colname);\n \t\tif (expr->type == ExpressionType::VALUE_DEFAULT) {\n \t\t\texpr = ExpandDefaultExpression(column);\n@@ -120,14 +121,13 @@ void Binder::BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert\n \t\t\tthrow BinderException(\"Expression in the DO UPDATE SET clause can not be a subquery\");\n \t\t}\n \n-\t\tinsert->expressions.push_back(std::move(bound_expr));\n+\t\tinsert.expressions.push_back(std::move(bound_expr));\n \t}\n \n \t// Figure out which columns are indexed on\n \tunordered_set<column_t> indexed_columns;\n-\tauto &indexes = table.GetStorage().info->indexes.Indexes();\n-\tfor (auto &index : indexes) {\n-\t\tfor (auto &column_id : index->column_id_set) {\n+\tfor (auto &index : storage_info.index_info) {\n+\t\tfor (auto &column_id : index.column_set) {\n \t\t\tindexed_columns.insert(column_id);\n \t\t}\n \t}\n@@ -142,16 +142,16 @@ void Binder::BindDoUpdateSetExpressions(const string &table_alias, LogicalInsert\n \t}\n }\n \n-unique_ptr<UpdateSetInfo> CreateSetInfoForReplace(TableCatalogEntry &table, InsertStatement &insert) {\n+unique_ptr<UpdateSetInfo> CreateSetInfoForReplace(TableCatalogEntry &table, InsertStatement &insert,\n+                                                  TableStorageInfo &storage_info) {\n \tauto set_info = make_uniq<UpdateSetInfo>();\n \n \tauto &columns = set_info->columns;\n \t// Figure out which columns are indexed on\n \n \tunordered_set<column_t> indexed_columns;\n-\tauto &indexes = table.GetStorage().info->indexes.Indexes();\n-\tfor (auto &index : indexes) {\n-\t\tfor (auto &column_id : index->column_id_set) {\n+\tfor (auto &index : storage_info.index_info) {\n+\t\tfor (auto &column_id : index.column_set) {\n \t\t\tindexed_columns.insert(column_id);\n \t\t}\n \t}\n@@ -190,9 +190,6 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \t\tinsert.action_type = OnConflictAction::THROW;\n \t\treturn;\n \t}\n-\tif (!table.IsDuckTable()) {\n-\t\tthrow BinderException(\"ON CONFLICT clause is not yet supported for non-DuckDB tables\");\n-\t}\n \tD_ASSERT(stmt.table_ref->type == TableReferenceType::BASE_TABLE);\n \n \t// visit the table reference\n@@ -208,6 +205,9 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \tD_ASSERT(on_conflict.action_type != OnConflictAction::THROW);\n \tinsert.action_type = on_conflict.action_type;\n \n+\t// obtain the table storage info\n+\tauto storage_info = table.GetStorageInfo(context);\n+\n \tauto &columns = table.GetColumns();\n \tif (!on_conflict.indexed_columns.empty()) {\n \t\t// Bind the ON CONFLICT (<columns>)\n@@ -232,18 +232,17 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \t\t\t\tinsert.on_conflict_filter.insert(col.Oid());\n \t\t\t}\n \t\t}\n-\t\tauto &indexes = table.GetStorage().info->indexes;\n \t\tbool index_references_columns = false;\n-\t\tindexes.Scan([&](Index &index) {\n-\t\t\tif (!index.IsUnique()) {\n-\t\t\t\treturn false;\n+\t\tfor (auto &index : storage_info.index_info) {\n+\t\t\tif (!index.is_unique) {\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tbool index_matches = insert.on_conflict_filter == index.column_id_set;\n+\t\t\tbool index_matches = insert.on_conflict_filter == index.column_set;\n \t\t\tif (index_matches) {\n \t\t\t\tindex_references_columns = true;\n+\t\t\t\tbreak;\n \t\t\t}\n-\t\t\treturn index_matches;\n-\t\t});\n+\t\t}\n \t\tif (!index_references_columns) {\n \t\t\t// Same as before, this is essentially a no-op, turning this into a DO THROW instead\n \t\t\t// But since this makes no logical sense, it's probably better to throw an error\n@@ -254,21 +253,19 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \t\t// When omitting the conflict target, the ON CONFLICT applies to every UNIQUE/PRIMARY KEY on the table\n \n \t\t// We check if there are any constraints on the table, if there aren't we throw an error.\n-\t\tauto &indexes = table.GetStorage().info->indexes;\n \t\tidx_t found_matching_indexes = 0;\n-\t\tindexes.Scan([&](Index &index) {\n-\t\t\tif (!index.IsUnique()) {\n-\t\t\t\treturn false;\n+\t\tfor (auto &index : storage_info.index_info) {\n+\t\t\tif (!index.is_unique) {\n+\t\t\t\tcontinue;\n \t\t\t}\n \t\t\t// does this work with multi-column indexes?\n-\t\t\tauto &indexed_columns = index.column_id_set;\n+\t\t\tauto &indexed_columns = index.column_set;\n \t\t\tfor (auto &column : table.GetColumns().Physical()) {\n \t\t\t\tif (indexed_columns.count(column.Physical().index)) {\n \t\t\t\t\tfound_matching_indexes++;\n \t\t\t\t}\n \t\t\t}\n-\t\t\treturn false;\n-\t\t});\n+\t\t}\n \t\tif (!found_matching_indexes) {\n \t\t\tthrow BinderException(\n \t\t\t    \"There are no UNIQUE/PRIMARY KEY Indexes that refer to this table, ON CONFLICT is a no-op\");\n@@ -338,7 +335,7 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \n \tif (insert.action_type == OnConflictAction::REPLACE) {\n \t\tD_ASSERT(on_conflict.set_info == nullptr);\n-\t\ton_conflict.set_info = CreateSetInfoForReplace(table, stmt);\n+\t\ton_conflict.set_info = CreateSetInfoForReplace(table, stmt, storage_info);\n \t\tinsert.action_type = OnConflictAction::UPDATE;\n \t}\n \tif (on_conflict.set_info && on_conflict.set_info->columns.empty()) {\n@@ -374,7 +371,7 @@ void Binder::BindOnConflictClause(LogicalInsert &insert, TableCatalogEntry &tabl\n \t\tinsert.do_update_condition = std::move(condition);\n \t}\n \n-\tBindDoUpdateSetExpressions(table_alias, &insert, set_info, table);\n+\tBindDoUpdateSetExpressions(table_alias, insert, set_info, table, storage_info);\n \n \t// Get the column_ids we need to fetch later on from the conflicting tuples\n \t// of the original table, to execute the expressions\n@@ -409,6 +406,26 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \t// Add CTEs as bindable\n \tAddCTEMap(stmt.cte_map);\n \n+\tauto values_list = stmt.GetValuesList();\n+\n+\t// bind the root select node (if any)\n+\tBoundStatement root_select;\n+\tif (stmt.column_order == InsertColumnOrder::INSERT_BY_NAME) {\n+\t\tif (values_list) {\n+\t\t\tthrow BinderException(\"INSERT BY NAME can only be used when inserting from a SELECT statement\");\n+\t\t}\n+\t\tif (!stmt.columns.empty()) {\n+\t\t\tthrow BinderException(\"INSERT BY NAME cannot be combined with an explicit column list\");\n+\t\t}\n+\t\tD_ASSERT(stmt.select_statement);\n+\t\t// INSERT BY NAME - generate the columns from the names of the SELECT statement\n+\t\tauto select_binder = Binder::CreateBinder(context, this);\n+\t\troot_select = select_binder->Bind(*stmt.select_statement);\n+\t\tMoveCorrelatedExpressions(*select_binder);\n+\n+\t\tstmt.columns = root_select.names;\n+\t}\n+\n \tvector<LogicalIndex> named_column_map;\n \tif (!stmt.columns.empty() || stmt.default_values) {\n \t\t// insertion statement specifies column list\n@@ -416,6 +433,10 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \t\t// create a mapping of (list index) -> (column index)\n \t\tcase_insensitive_map_t<idx_t> column_name_map;\n \t\tfor (idx_t i = 0; i < stmt.columns.size(); i++) {\n+\t\t\tauto entry = column_name_map.insert(make_pair(stmt.columns[i], i));\n+\t\t\tif (!entry.second) {\n+\t\t\t\tthrow BinderException(\"Duplicate column name \\\"%s\\\" in INSERT\", stmt.columns[i]);\n+\t\t\t}\n \t\t\tcolumn_name_map[stmt.columns[i]] = i;\n \t\t\tauto column_index = table.GetColumnIndex(stmt.columns[i]);\n \t\t\tif (column_index.index == COLUMN_IDENTIFIER_ROW_ID) {\n@@ -439,8 +460,8 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \t\t\t}\n \t\t}\n \t} else {\n-\t\t// No columns specified, assume insertion into all columns\n-\t\t// Intentionally don't populate 'column_index_map' as an indication of this\n+\t\t// insert by position and no columns specified - insertion into all columns of the table\n+\t\t// intentionally don't populate 'column_index_map' as an indication of this\n \t\tfor (auto &col : table.GetColumns().Physical()) {\n \t\t\tnamed_column_map.push_back(col.Logical());\n \t\t\tinsert->expected_types.push_back(col.Type());\n@@ -457,7 +478,6 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \tidx_t expected_columns = stmt.columns.empty() ? table.GetColumns().PhysicalColumnCount() : stmt.columns.size();\n \n \t// special case: check if we are inserting from a VALUES statement\n-\tauto values_list = stmt.GetValuesList();\n \tif (values_list) {\n \t\tauto &expr_list = values_list->Cast<ExpressionListRef>();\n \t\texpr_list.expected_types.resize(expected_columns);\n@@ -490,10 +510,12 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \t// parse select statement and add to logical plan\n \tunique_ptr<LogicalOperator> root;\n \tif (stmt.select_statement) {\n-\t\tauto select_binder = Binder::CreateBinder(context, this);\n-\t\tauto root_select = select_binder->Bind(*stmt.select_statement);\n-\t\tMoveCorrelatedExpressions(*select_binder);\n-\n+\t\tif (stmt.column_order == InsertColumnOrder::INSERT_BY_POSITION) {\n+\t\t\tauto select_binder = Binder::CreateBinder(context, this);\n+\t\t\troot_select = select_binder->Bind(*stmt.select_statement);\n+\t\t\tMoveCorrelatedExpressions(*select_binder);\n+\t\t}\n+\t\t// inserting from a select - check if the column count matches\n \t\tCheckInsertColumnCountMismatch(expected_columns, root_select.types.size(), !stmt.columns.empty(),\n \t\t                               table.name.c_str());\n \ndiff --git a/src/planner/binder/tableref/bind_basetableref.cpp b/src/planner/binder/tableref/bind_basetableref.cpp\nindex 682aaeaec84f..9d010215b60e 100644\n--- a/src/planner/binder/tableref/bind_basetableref.cpp\n+++ b/src/planner/binder/tableref/bind_basetableref.cpp\n@@ -94,7 +94,13 @@ unique_ptr<BoundTableRef> Binder::Bind(BaseTableRef &ref) {\n \t\t\tfor (auto &scan : config.replacement_scans) {\n \t\t\t\tauto replacement_function = scan.function(context, table_name, scan.data.get());\n \t\t\t\tif (replacement_function) {\n-\t\t\t\t\treplacement_function->alias = ref.alias.empty() ? ref.table_name : ref.alias;\n+\t\t\t\t\tif (!ref.alias.empty()) {\n+\t\t\t\t\t\t// user-provided alias overrides the default alias\n+\t\t\t\t\t\treplacement_function->alias = ref.alias;\n+\t\t\t\t\t} else if (replacement_function->alias.empty()) {\n+\t\t\t\t\t\t// if the replacement scan itself did not provide an alias we use the table name\n+\t\t\t\t\t\treplacement_function->alias = ref.table_name;\n+\t\t\t\t\t}\n \t\t\t\t\tif (replacement_function->type == TableReferenceType::TABLE_FUNCTION) {\n \t\t\t\t\t\tauto &table_function = replacement_function->Cast<TableFunctionRef>();\n \t\t\t\t\t\ttable_function.column_name_alias = ref.column_name_alias;\ndiff --git a/src/planner/logical_operator.cpp b/src/planner/logical_operator.cpp\nindex a0eb0f799f7b..ac22f9b3e8c7 100644\n--- a/src/planner/logical_operator.cpp\n+++ b/src/planner/logical_operator.cpp\n@@ -344,10 +344,9 @@ unique_ptr<LogicalOperator> LogicalOperator::Deserialize(Deserializer &deseriali\n \tcase LogicalOperatorType::LOGICAL_ATTACH:\n \tcase LogicalOperatorType::LOGICAL_TRANSACTION:\n \tcase LogicalOperatorType::LOGICAL_DROP:\n+\tcase LogicalOperatorType::LOGICAL_DETACH:\n \t\tresult = LogicalSimple::Deserialize(state, reader);\n \t\tbreak;\n-\tcase LogicalOperatorType::LOGICAL_DETACH:\n-\t\tthrow SerializationException(\"Logical Detach does not support serialization\");\n \tcase LogicalOperatorType::LOGICAL_EXTENSION_OPERATOR:\n \t\tresult = LogicalExtensionOperator::Deserialize(state, reader);\n \t\tbreak;\ndiff --git a/src/planner/operator/logical_create_index.cpp b/src/planner/operator/logical_create_index.cpp\nindex 655afd5965e3..7d879415382e 100644\n--- a/src/planner/operator/logical_create_index.cpp\n+++ b/src/planner/operator/logical_create_index.cpp\n@@ -7,43 +7,34 @@\n namespace duckdb {\n \n void LogicalCreateIndex::Serialize(FieldWriter &writer) const {\n-\n \twriter.WriteOptional(info);\n-\ttable.Serialize(writer.GetSerializer());\n+\twriter.WriteString(table.catalog.GetName());\n+\twriter.WriteString(table.schema.name);\n+\twriter.WriteString(table.name);\n \tFunctionSerializer::SerializeBase<TableFunction>(writer, function, bind_data.get());\n \twriter.WriteSerializableList(unbound_expressions);\n-\n-\twriter.Finalize();\n }\n \n unique_ptr<LogicalOperator> LogicalCreateIndex::Deserialize(LogicalDeserializationState &state, FieldReader &reader) {\n-\n \tauto &context = state.gstate.context;\n-\tauto catalog_info = TableCatalogEntry::Deserialize(reader.GetSource(), context);\n-\n-\tauto &table =\n-\t    Catalog::GetEntry<TableCatalogEntry>(context, catalog_info->catalog, catalog_info->schema, catalog_info->table);\n-\tauto unbound_expressions = reader.ReadRequiredSerializableList<Expression>(state.gstate);\n-\n-\tauto create_info = reader.ReadOptional<CreateInfo>(nullptr);\n-\tif (create_info->type != CatalogType::INDEX_ENTRY) {\n-\t\tthrow InternalException(\"Unexpected type: '%s', expected '%s'\", CatalogTypeToString(create_info->type),\n-\t\t                        CatalogTypeToString(CatalogType::INDEX_ENTRY));\n-\t}\n-\n-\tCreateInfo *raw_create_info_ptr = create_info.release();\n-\tCreateIndexInfo *raw_create_index_info_ptr = static_cast<CreateIndexInfo *>(raw_create_info_ptr);\n-\tunique_ptr<CreateIndexInfo> uptr_create_index_info = unique_ptr<CreateIndexInfo> {raw_create_index_info_ptr};\n-\tauto info = unique_ptr<CreateIndexInfo> {static_cast<CreateIndexInfo *>(create_info.release())};\n \n+\tauto info = reader.ReadOptional<CreateInfo>(nullptr);\n+\tauto catalog = reader.ReadRequired<string>();\n+\tauto schema = reader.ReadRequired<string>();\n+\tauto table_name = reader.ReadRequired<string>();\n \tunique_ptr<FunctionData> bind_data;\n \tbool has_deserialize;\n \tauto function = FunctionSerializer::DeserializeBaseInternal<TableFunction, TableFunctionCatalogEntry>(\n \t    reader, state.gstate, CatalogType::TABLE_FUNCTION_ENTRY, bind_data, has_deserialize);\n-\n-\treader.Finalize();\n-\treturn make_uniq<LogicalCreateIndex>(std::move(bind_data), std::move(info), std::move(unbound_expressions), table,\n-\t                                     std::move(function));\n+\tauto unbound_expressions = reader.ReadRequiredSerializableList<Expression>(state.gstate);\n+\tif (info->type != CatalogType::INDEX_ENTRY) {\n+\t\tthrow InternalException(\"Unexpected type: '%s', expected '%s'\", CatalogTypeToString(info->type),\n+\t\t                        CatalogTypeToString(CatalogType::INDEX_ENTRY));\n+\t}\n+\tauto index_info = unique_ptr_cast<CreateInfo, CreateIndexInfo>(std::move(info));\n+\tauto &table = Catalog::GetEntry<TableCatalogEntry>(context, catalog, schema, table_name);\n+\treturn make_uniq<LogicalCreateIndex>(std::move(bind_data), std::move(index_info), std::move(unbound_expressions),\n+\t                                     table, std::move(function));\n }\n \n } // namespace duckdb\ndiff --git a/src/planner/operator/logical_insert.cpp b/src/planner/operator/logical_insert.cpp\nindex a80fa8427df1..6e3ea5fca760 100644\n--- a/src/planner/operator/logical_insert.cpp\n+++ b/src/planner/operator/logical_insert.cpp\n@@ -25,6 +25,16 @@ void LogicalInsert::Serialize(FieldWriter &writer) const {\n \twriter.WriteField(return_chunk);\n \twriter.WriteSerializableList(bound_defaults);\n \twriter.WriteField(action_type);\n+\twriter.WriteRegularSerializableList(expected_set_types);\n+\twriter.WriteList<column_t>(on_conflict_filter);\n+\twriter.WriteOptional(on_conflict_condition);\n+\twriter.WriteOptional(do_update_condition);\n+\twriter.WriteIndexList(set_columns);\n+\twriter.WriteRegularSerializableList(set_types);\n+\twriter.WriteField(excluded_table_index);\n+\twriter.WriteList<column_t>(columns_to_fetch);\n+\twriter.WriteList<column_t>(source_columns);\n+\twriter.WriteSerializableList<Expression>(expressions);\n }\n \n unique_ptr<LogicalOperator> LogicalInsert::Deserialize(LogicalDeserializationState &state, FieldReader &reader) {\n@@ -42,6 +52,16 @@ unique_ptr<LogicalOperator> LogicalInsert::Deserialize(LogicalDeserializationSta\n \tauto return_chunk = reader.ReadRequired<bool>();\n \tauto bound_defaults = reader.ReadRequiredSerializableList<Expression>(state.gstate);\n \tauto action_type = reader.ReadRequired<OnConflictAction>();\n+\tauto expected_set_types = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n+\tauto on_conflict_filter = reader.ReadRequiredSet<column_t, unordered_set<column_t>>();\n+\tauto on_conflict_condition = reader.ReadOptional<Expression>(nullptr, state.gstate);\n+\tauto do_update_condition = reader.ReadOptional<Expression>(nullptr, state.gstate);\n+\tauto set_columns = reader.ReadRequiredIndexList<PhysicalIndex>();\n+\tauto set_types = reader.ReadRequiredSerializableList<LogicalType, LogicalType>();\n+\tauto excluded_table_index = reader.ReadRequired<idx_t>();\n+\tauto columns_to_fetch = reader.ReadRequiredList<column_t>();\n+\tauto source_columns = reader.ReadRequiredList<column_t>();\n+\tauto expressions = reader.ReadRequiredSerializableList<Expression>(state.gstate);\n \n \tauto &catalog = Catalog::GetCatalog(context, info->catalog);\n \n@@ -54,6 +74,16 @@ unique_ptr<LogicalOperator> LogicalInsert::Deserialize(LogicalDeserializationSta\n \tresult->expected_types = expected_types;\n \tresult->bound_defaults = std::move(bound_defaults);\n \tresult->action_type = action_type;\n+\tresult->expected_set_types = std::move(expected_set_types);\n+\tresult->on_conflict_filter = std::move(on_conflict_filter);\n+\tresult->on_conflict_condition = std::move(on_conflict_condition);\n+\tresult->do_update_condition = std::move(do_update_condition);\n+\tresult->set_columns = std::move(set_columns);\n+\tresult->set_types = std::move(set_types);\n+\tresult->excluded_table_index = excluded_table_index;\n+\tresult->columns_to_fetch = std::move(columns_to_fetch);\n+\tresult->source_columns = std::move(source_columns);\n+\tresult->expressions = std::move(expressions);\n \treturn std::move(result);\n }\n \ndiff --git a/src/planner/operator/logical_simple.cpp b/src/planner/operator/logical_simple.cpp\nindex 2fb4e7c221a2..40dee57e34f9 100644\n--- a/src/planner/operator/logical_simple.cpp\n+++ b/src/planner/operator/logical_simple.cpp\n@@ -1,7 +1,11 @@\n #include \"duckdb/planner/operator/logical_simple.hpp\"\n #include \"duckdb/parser/parsed_data/alter_info.hpp\"\n+#include \"duckdb/parser/parsed_data/attach_info.hpp\"\n #include \"duckdb/parser/parsed_data/drop_info.hpp\"\n #include \"duckdb/parser/parsed_data/load_info.hpp\"\n+#include \"duckdb/parser/parsed_data/transaction_info.hpp\"\n+#include \"duckdb/parser/parsed_data/vacuum_info.hpp\"\n+#include \"duckdb/parser/parsed_data/detach_info.hpp\"\n \n namespace duckdb {\n \n@@ -9,16 +13,28 @@ void LogicalSimple::Serialize(FieldWriter &writer) const {\n \twriter.WriteField<LogicalOperatorType>(type);\n \tswitch (type) {\n \tcase LogicalOperatorType::LOGICAL_ALTER:\n-\t\tstatic_cast<const AlterInfo &>(*info).Serialize(writer.GetSerializer());\n+\t\tinfo->Cast<AlterInfo>().Serialize(writer.GetSerializer());\n \t\tbreak;\n \tcase LogicalOperatorType::LOGICAL_DROP:\n-\t\tstatic_cast<const DropInfo &>(*info).Serialize(writer.GetSerializer());\n+\t\tinfo->Cast<DropInfo>().Serialize(writer.GetSerializer());\n \t\tbreak;\n \tcase LogicalOperatorType::LOGICAL_LOAD:\n-\t\tstatic_cast<const LoadInfo &>(*info).Serialize(writer.GetSerializer());\n+\t\tinfo->Cast<LoadInfo>().Serialize(writer.GetSerializer());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_VACUUM:\n+\t\tinfo->Cast<VacuumInfo>().Serialize(writer.GetSerializer());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_ATTACH:\n+\t\tinfo->Cast<AttachInfo>().Serialize(writer.GetSerializer());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_DETACH:\n+\t\tinfo->Cast<DetachInfo>().Serialize(writer.GetSerializer());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_TRANSACTION:\n+\t\tinfo->Cast<TransactionInfo>().Serialize(writer.GetSerializer());\n \t\tbreak;\n \tdefault:\n-\t\tthrow NotImplementedException(LogicalOperatorToString(type));\n+\t\tthrow InternalException(LogicalOperatorToString(type));\n \t}\n }\n \n@@ -35,8 +51,20 @@ unique_ptr<LogicalOperator> LogicalSimple::Deserialize(LogicalDeserializationSta\n \tcase LogicalOperatorType::LOGICAL_LOAD:\n \t\tparse_info = LoadInfo::Deserialize(reader.GetSource());\n \t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_VACUUM:\n+\t\tparse_info = VacuumInfo::Deserialize(reader.GetSource());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_ATTACH:\n+\t\tparse_info = AttachInfo::Deserialize(reader.GetSource());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_DETACH:\n+\t\tparse_info = DetachInfo::Deserialize(reader.GetSource());\n+\t\tbreak;\n+\tcase LogicalOperatorType::LOGICAL_TRANSACTION:\n+\t\tparse_info = TransactionInfo::Deserialize(reader.GetSource());\n+\t\tbreak;\n \tdefault:\n-\t\tthrow NotImplementedException(LogicalOperatorToString(state.type));\n+\t\tthrow InternalException(LogicalOperatorToString(state.type));\n \t}\n \treturn make_uniq<LogicalSimple>(type, std::move(parse_info));\n }\ndiff --git a/src/planner/parsed_data/bound_create_table_info.cpp b/src/planner/parsed_data/bound_create_table_info.cpp\nindex 5d5d9bf899c5..c605214f2b03 100644\n--- a/src/planner/parsed_data/bound_create_table_info.cpp\n+++ b/src/planner/parsed_data/bound_create_table_info.cpp\n@@ -6,25 +6,15 @@\n namespace duckdb {\n void BoundCreateTableInfo::Serialize(Serializer &serializer) const {\n \tserializer.WriteOptional(base);\n-\tserializer.WriteList(constraints);\n-\tserializer.WriteList(bound_constraints);\n-\tserializer.WriteList(bound_defaults);\n-\tserializer.WriteOptional(query);\n }\n \n unique_ptr<BoundCreateTableInfo> BoundCreateTableInfo::Deserialize(Deserializer &source,\n                                                                    PlanDeserializationState &state) {\n-\tauto create_info_base = source.ReadOptional<CreateInfo>();\n-\t// Get schema from the catalog to create BoundCreateTableInfo\n-\tauto schema_name = create_info_base->schema;\n-\tauto catalog = create_info_base->catalog;\n-\tauto &schema_catalog_entry = Catalog::GetSchema(state.context, catalog, schema_name);\n-\n-\tauto result = make_uniq<BoundCreateTableInfo>(schema_catalog_entry, std::move(create_info_base));\n-\tsource.ReadList<Constraint>(result->constraints);\n-\tsource.ReadList<BoundConstraint>(result->bound_constraints);\n-\tsource.ReadList<Expression>(result->bound_defaults, state);\n-\tresult->query = source.ReadOptional<LogicalOperator>(state);\n-\treturn result;\n+\tauto info = source.ReadOptional<CreateInfo>();\n+\tauto schema_name = info->schema;\n+\tauto catalog = info->catalog;\n+\tauto binder = Binder::CreateBinder(state.context);\n+\tauto bound_info = binder->BindCreateTableInfo(std::move(info));\n+\treturn bound_info;\n }\n } // namespace duckdb\ndiff --git a/src/planner/planner.cpp b/src/planner/planner.cpp\nindex 588f527148ca..3bf3f8336ff0 100644\n--- a/src/planner/planner.cpp\n+++ b/src/planner/planner.cpp\n@@ -143,24 +143,11 @@ void Planner::CreatePlan(unique_ptr<SQLStatement> statement) {\n \n static bool OperatorSupportsSerialization(LogicalOperator &op) {\n \tswitch (op.type) {\n-\tcase LogicalOperatorType::LOGICAL_INSERT:\n-\tcase LogicalOperatorType::LOGICAL_UPDATE:\n-\tcase LogicalOperatorType::LOGICAL_DELETE:\n \tcase LogicalOperatorType::LOGICAL_PREPARE:\n \tcase LogicalOperatorType::LOGICAL_EXECUTE:\n-\tcase LogicalOperatorType::LOGICAL_ALTER:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_TABLE:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_INDEX:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_SEQUENCE:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_VIEW:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_SCHEMA:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_MACRO:\n \tcase LogicalOperatorType::LOGICAL_PRAGMA:\n-\tcase LogicalOperatorType::LOGICAL_TRANSACTION:\n-\tcase LogicalOperatorType::LOGICAL_CREATE_TYPE:\n \tcase LogicalOperatorType::LOGICAL_EXPLAIN:\n \tcase LogicalOperatorType::LOGICAL_COPY_TO_FILE:\n-\tcase LogicalOperatorType::LOGICAL_VACUUM:\n \t\t// unsupported (for now)\n \t\treturn false;\n \tdefault:\n@@ -175,6 +162,10 @@ static bool OperatorSupportsSerialization(LogicalOperator &op) {\n }\n \n void Planner::VerifyPlan(ClientContext &context, unique_ptr<LogicalOperator> &op, bound_parameter_map_t *map) {\n+#ifdef DUCKDB_ALTERNATIVE_VERIFY\n+\t// if alternate verification is enabled we run the original operator\n+\treturn;\n+#endif\n \tif (!op || !ClientConfig::GetConfig(context).verify_serializer) {\n \t\treturn;\n \t}\ndiff --git a/src/storage/arena_allocator.cpp b/src/storage/arena_allocator.cpp\nindex ab793870997a..1dbb3c6dc53f 100644\n--- a/src/storage/arena_allocator.cpp\n+++ b/src/storage/arena_allocator.cpp\n@@ -64,7 +64,7 @@ data_ptr_t ArenaAllocator::Allocate(idx_t len) {\n \t\tdo {\n \t\t\tcurrent_capacity *= 2;\n \t\t} while (current_capacity < len);\n-\t\tauto new_chunk = make_uniq<ArenaChunk>(allocator, current_capacity);\n+\t\tauto new_chunk = make_unsafe_uniq<ArenaChunk>(allocator, current_capacity);\n \t\tif (head) {\n \t\t\thead->prev = new_chunk.get();\n \t\t\tnew_chunk->next = std::move(head);\ndiff --git a/src/storage/buffer/buffer_handle.cpp b/src/storage/buffer/buffer_handle.cpp\nindex 43f57e1974c1..dc3be3f28445 100644\n--- a/src/storage/buffer/buffer_handle.cpp\n+++ b/src/storage/buffer/buffer_handle.cpp\n@@ -7,7 +7,8 @@ namespace duckdb {\n BufferHandle::BufferHandle() : handle(nullptr), node(nullptr) {\n }\n \n-BufferHandle::BufferHandle(shared_ptr<BlockHandle> handle, FileBuffer *node) : handle(std::move(handle)), node(node) {\n+BufferHandle::BufferHandle(shared_ptr<BlockHandle> handle_p, FileBuffer *node_p)\n+    : handle(std::move(handle_p)), node(node_p) {\n }\n \n BufferHandle::BufferHandle(BufferHandle &&other) noexcept {\n@@ -29,16 +30,6 @@ bool BufferHandle::IsValid() const {\n \treturn node != nullptr;\n }\n \n-data_ptr_t BufferHandle::Ptr() const {\n-\tD_ASSERT(IsValid());\n-\treturn node->buffer;\n-}\n-\n-data_ptr_t BufferHandle::Ptr() {\n-\tD_ASSERT(IsValid());\n-\treturn node->buffer;\n-}\n-\n void BufferHandle::Destroy() {\n \tif (!handle || !IsValid()) {\n \t\treturn;\ndiff --git a/src/storage/checkpoint/write_overflow_strings_to_disk.cpp b/src/storage/checkpoint/write_overflow_strings_to_disk.cpp\nindex 7e19fc4352c6..e4aae2b8f997 100644\n--- a/src/storage/checkpoint/write_overflow_strings_to_disk.cpp\n+++ b/src/storage/checkpoint/write_overflow_strings_to_disk.cpp\n@@ -32,7 +32,7 @@ void WriteOverflowStringsToDisk::WriteString(string_t string, block_id_t &result\n \tMiniZStream s;\n \tsize_t compressed_size = 0;\n \tcompressed_size = s.MaxCompressedLength(uncompressed_size);\n-\tauto compressed_buf = unique_ptr<data_t[]>(new data_t[compressed_size]);\n+\tauto compressed_buf = make_unsafe_uniq_array<data_t>(compressed_size);\n \ts.Compress((const char *)string.GetData(), uncompressed_size, (char *)compressed_buf.get(), &compressed_size);\n \tstring_t compressed_string((const char *)compressed_buf.get(), compressed_size);\n \ndiff --git a/src/storage/checkpoint_manager.cpp b/src/storage/checkpoint_manager.cpp\nindex ecd520f5ddc5..3fc2589d128f 100644\n--- a/src/storage/checkpoint_manager.cpp\n+++ b/src/storage/checkpoint_manager.cpp\n@@ -337,7 +337,6 @@ void CheckpointWriter::WriteIndex(IndexCatalogEntry &index_catalog) {\n }\n \n void CheckpointReader::ReadIndex(ClientContext &context, MetaBlockReader &reader) {\n-\n \t// deserialize the index metadata\n \tauto info = IndexCatalogEntry::Deserialize(reader, context);\n \n@@ -361,10 +360,17 @@ void CheckpointReader::ReadIndex(ClientContext &context, MetaBlockReader &reader\n \t}\n \n \t// bind the parsed expressions\n+\t// add the table to the bind context\n \tauto binder = Binder::CreateBinder(context);\n-\tauto &table_ref = info->table->Cast<TableRef>();\n-\tauto bound_table = binder->Bind(table_ref);\n-\tD_ASSERT(bound_table->type == TableReferenceType::BASE_TABLE);\n+\tvector<LogicalType> column_types;\n+\tvector<string> column_names;\n+\tfor (auto &col : table_catalog.GetColumns().Logical()) {\n+\t\tcolumn_types.push_back(col.Type());\n+\t\tcolumn_names.push_back(col.Name());\n+\t}\n+\tvector<column_t> column_ids;\n+\tbinder->bind_context.AddBaseTable(0, info->table->table_name, column_names, column_types, column_ids,\n+\t                                  &table_catalog);\n \tIndexBinder idx_binder(*binder, context);\n \tunbound_expressions.reserve(parsed_expressions.size());\n \tfor (auto &expr : parsed_expressions) {\n@@ -419,7 +425,7 @@ void CheckpointWriter::WriteMacro(ScalarMacroCatalogEntry &macro) {\n }\n \n void CheckpointReader::ReadMacro(ClientContext &context, MetaBlockReader &reader) {\n-\tauto info = ScalarMacroCatalogEntry::Deserialize(reader, context);\n+\tauto info = MacroCatalogEntry::Deserialize(reader, context);\n \tcatalog.CreateFunction(context, *info);\n }\n \n@@ -428,7 +434,7 @@ void CheckpointWriter::WriteTableMacro(TableMacroCatalogEntry &macro) {\n }\n \n void CheckpointReader::ReadTableMacro(ClientContext &context, MetaBlockReader &reader) {\n-\tauto info = TableMacroCatalogEntry::Deserialize(reader, context);\n+\tauto info = MacroCatalogEntry::Deserialize(reader, context);\n \tcatalog.CreateFunction(context, *info);\n }\n \ndiff --git a/src/storage/compression/string_uncompressed.cpp b/src/storage/compression/string_uncompressed.cpp\nindex b9bd88b4e266..2aed65bd858f 100644\n--- a/src/storage/compression/string_uncompressed.cpp\n+++ b/src/storage/compression/string_uncompressed.cpp\n@@ -292,13 +292,13 @@ string_t UncompressedStringStorage::ReadOverflowString(ColumnSegment &segment, V\n \t\toffset += 2 * sizeof(uint32_t);\n \n \t\tdata_ptr_t decompression_ptr;\n-\t\tunique_ptr<data_t[]> decompression_buffer;\n+\t\tunsafe_unique_array<data_t> decompression_buffer;\n \n \t\t// If string is in single block we decompress straight from it, else we copy first\n \t\tif (remaining <= Storage::BLOCK_SIZE - sizeof(block_id_t) - offset) {\n \t\t\tdecompression_ptr = handle.Ptr() + offset;\n \t\t} else {\n-\t\t\tdecompression_buffer = unique_ptr<data_t[]>(new data_t[compressed_size]);\n+\t\t\tdecompression_buffer = make_unsafe_uniq_array<data_t>(compressed_size);\n \t\t\tauto target_ptr = decompression_buffer.get();\n \n \t\t\t// now append the string to the single buffer\ndiff --git a/src/storage/single_file_block_manager.cpp b/src/storage/single_file_block_manager.cpp\nindex 7863c1907908..0d43ad3f0eb5 100644\n--- a/src/storage/single_file_block_manager.cpp\n+++ b/src/storage/single_file_block_manager.cpp\n@@ -241,10 +241,6 @@ void SingleFileBlockManager::Initialize(DatabaseHeader &header) {\n }\n \n void SingleFileBlockManager::LoadFreeList() {\n-\tif (options.read_only) {\n-\t\t// no need to load free list for read only db\n-\t\treturn;\n-\t}\n \tif (free_list_id == INVALID_BLOCK) {\n \t\t// no free list\n \t\treturn;\ndiff --git a/src/storage/statistics/list_stats.cpp b/src/storage/statistics/list_stats.cpp\nindex c1364f2b5283..3ffbdecddb80 100644\n--- a/src/storage/statistics/list_stats.cpp\n+++ b/src/storage/statistics/list_stats.cpp\n@@ -7,7 +7,7 @@\n namespace duckdb {\n \n void ListStats::Construct(BaseStatistics &stats) {\n-\tstats.child_stats = unique_ptr<BaseStatistics[]>(new BaseStatistics[1]);\n+\tstats.child_stats = unsafe_unique_array<BaseStatistics>(new BaseStatistics[1]);\n \tBaseStatistics::Construct(stats.child_stats[0], ListType::GetChildType(stats.GetType()));\n }\n \ndiff --git a/src/storage/statistics/string_stats.cpp b/src/storage/statistics/string_stats.cpp\nindex b1a9254560ed..5a8b9b9f6e28 100644\n--- a/src/storage/statistics/string_stats.cpp\n+++ b/src/storage/statistics/string_stats.cpp\n@@ -140,7 +140,7 @@ void StringStats::Update(BaseStatistics &stats, const string_t &value) {\n \t\tif (unicode == UnicodeType::UNICODE) {\n \t\t\tstring_data.has_unicode = true;\n \t\t} else if (unicode == UnicodeType::INVALID) {\n-\t\t\tthrow InternalException(\n+\t\t\tthrow InvalidInputException(\n \t\t\t    ErrorManager::InvalidUnicodeError(string((char *)data, size), \"segment statistics update\"));\n \t\t}\n \t}\ndiff --git a/src/storage/statistics/struct_stats.cpp b/src/storage/statistics/struct_stats.cpp\nindex 53e548c699ea..7c13df2cfe04 100644\n--- a/src/storage/statistics/struct_stats.cpp\n+++ b/src/storage/statistics/struct_stats.cpp\n@@ -7,7 +7,7 @@ namespace duckdb {\n \n void StructStats::Construct(BaseStatistics &stats) {\n \tauto &child_types = StructType::GetChildTypes(stats.GetType());\n-\tstats.child_stats = unique_ptr<BaseStatistics[]>(new BaseStatistics[child_types.size()]);\n+\tstats.child_stats = unsafe_unique_array<BaseStatistics>(new BaseStatistics[child_types.size()]);\n \tfor (idx_t i = 0; i < child_types.size(); i++) {\n \t\tBaseStatistics::Construct(stats.child_stats[i], child_types[i].second);\n \t}\ndiff --git a/src/storage/storage_info.cpp b/src/storage/storage_info.cpp\nindex dbd116be3228..5d2af68d6175 100644\n--- a/src/storage/storage_info.cpp\n+++ b/src/storage/storage_info.cpp\n@@ -2,7 +2,7 @@\n \n namespace duckdb {\n \n-const uint64_t VERSION_NUMBER = 50;\n+const uint64_t VERSION_NUMBER = 51;\n \n struct StorageVersionInfo {\n \tconst char *version_name;\ndiff --git a/src/storage/storage_manager.cpp b/src/storage/storage_manager.cpp\nindex 1837888c6858..96adf1fd8d21 100644\n--- a/src/storage/storage_manager.cpp\n+++ b/src/storage/storage_manager.cpp\n@@ -19,6 +19,9 @@ StorageManager::StorageManager(AttachedDatabase &db, string path_p, bool read_on\n     : db(db), path(std::move(path_p)), read_only(read_only) {\n \tif (path.empty()) {\n \t\tpath = \":memory:\";\n+\t} else {\n+\t\tauto &fs = FileSystem::Get(db);\n+\t\tthis->path = fs.ExpandPath(path);\n \t}\n }\n \ndiff --git a/src/storage/table/row_group.cpp b/src/storage/table/row_group.cpp\nindex 1362669222e9..becb2a2bcb8a 100644\n--- a/src/storage/table/row_group.cpp\n+++ b/src/storage/table/row_group.cpp\n@@ -155,7 +155,7 @@ void ColumnScanState::Initialize(const LogicalType &type) {\n \n void CollectionScanState::Initialize(const vector<LogicalType> &types) {\n \tauto &column_ids = GetColumnIds();\n-\tcolumn_scans = unique_ptr<ColumnScanState[]>(new ColumnScanState[column_ids.size()]);\n+\tcolumn_scans = make_unsafe_uniq_array<ColumnScanState>(column_ids.size());\n \tfor (idx_t i = 0; i < column_ids.size(); i++) {\n \t\tif (column_ids[i] == COLUMN_IDENTIFIER_ROW_ID) {\n \t\t\tcontinue;\n@@ -695,7 +695,7 @@ void RowGroup::InitializeAppend(RowGroupAppendState &append_state) {\n \tappend_state.row_group = this;\n \tappend_state.offset_in_row_group = this->count;\n \t// for each column, initialize the append state\n-\tappend_state.states = unique_ptr<ColumnAppendState[]>(new ColumnAppendState[GetColumnCount()]);\n+\tappend_state.states = make_unsafe_uniq_array<ColumnAppendState>(GetColumnCount());\n \tfor (idx_t i = 0; i < GetColumnCount(); i++) {\n \t\tauto &col_data = GetColumn(i);\n \t\tcol_data.InitializeAppend(append_state.states[i]);\ndiff --git a/src/storage/table/row_group_collection.cpp b/src/storage/table/row_group_collection.cpp\nindex 852413cf10f4..34147e74913f 100644\n--- a/src/storage/table/row_group_collection.cpp\n+++ b/src/storage/table/row_group_collection.cpp\n@@ -526,43 +526,59 @@ void RowGroupCollection::Update(TransactionData transaction, row_t *ids, const v\n void RowGroupCollection::RemoveFromIndexes(TableIndexList &indexes, Vector &row_identifiers, idx_t count) {\n \tauto row_ids = FlatVector::GetData<row_t>(row_identifiers);\n \n-\t// figure out which row_group to fetch from\n-\tauto row_group = row_groups->GetSegment(row_ids[0]);\n-\tauto row_group_vector_idx = (row_ids[0] - row_group->start) / STANDARD_VECTOR_SIZE;\n-\tauto base_row_id = row_group_vector_idx * STANDARD_VECTOR_SIZE + row_group->start;\n-\n-\t// create a selection vector from the row_ids\n-\tSelectionVector sel(STANDARD_VECTOR_SIZE);\n-\tfor (idx_t i = 0; i < count; i++) {\n-\t\tauto row_in_vector = row_ids[i] - base_row_id;\n-\t\tD_ASSERT(row_in_vector < STANDARD_VECTOR_SIZE);\n-\t\tsel.set_index(i, row_in_vector);\n-\t}\n-\n-\t// now fetch the columns from that row_group\n-\tTableScanState state;\n-\tstate.table_state.max_row = row_start + total_rows;\n-\n+\t// initialize the fetch state\n \t// FIXME: we do not need to fetch all columns, only the columns required by the indices!\n+\tTableScanState state;\n \tvector<column_t> column_ids;\n \tcolumn_ids.reserve(types.size());\n \tfor (idx_t i = 0; i < types.size(); i++) {\n \t\tcolumn_ids.push_back(i);\n \t}\n \tstate.Initialize(std::move(column_ids));\n+\tstate.table_state.max_row = row_start + total_rows;\n \n+\t// initialize the fetch chunk\n \tDataChunk result;\n \tresult.Initialize(GetAllocator(), types);\n \n-\tstate.table_state.Initialize(GetTypes());\n-\trow_group->InitializeScanWithOffset(state.table_state, row_group_vector_idx);\n-\trow_group->ScanCommitted(state.table_state, result, TableScanType::TABLE_SCAN_COMMITTED_ROWS);\n-\tresult.Slice(sel, count);\n+\tSelectionVector sel(STANDARD_VECTOR_SIZE);\n+\t// now iterate over the row ids\n+\tfor (idx_t r = 0; r < count;) {\n+\t\tresult.Reset();\n+\t\t// figure out which row_group to fetch from\n+\t\tauto row_id = row_ids[r];\n+\t\tauto row_group = row_groups->GetSegment(row_id);\n+\t\tauto row_group_vector_idx = (row_id - row_group->start) / STANDARD_VECTOR_SIZE;\n+\t\tauto base_row_id = row_group_vector_idx * STANDARD_VECTOR_SIZE + row_group->start;\n+\n+\t\t// fetch the current vector\n+\t\tstate.table_state.Initialize(GetTypes());\n+\t\trow_group->InitializeScanWithOffset(state.table_state, row_group_vector_idx);\n+\t\trow_group->ScanCommitted(state.table_state, result, TableScanType::TABLE_SCAN_COMMITTED_ROWS);\n+\t\tresult.Verify();\n+\n+\t\t// check for any remaining row ids if they also fall into this vector\n+\t\t// we try to fetch handle as many rows as possible at the same time\n+\t\tidx_t sel_count = 0;\n+\t\tfor (; r < count; r++) {\n+\t\t\tidx_t current_row = idx_t(row_ids[r]);\n+\t\t\tif (current_row < base_row_id || current_row >= base_row_id + result.size()) {\n+\t\t\t\t// this row-id does not fall into the current chunk - break\n+\t\t\t\tbreak;\n+\t\t\t}\n+\t\t\tauto row_in_vector = current_row - base_row_id;\n+\t\t\tD_ASSERT(row_in_vector < result.size());\n+\t\t\tsel.set_index(sel_count++, row_in_vector);\n+\t\t}\n+\t\tD_ASSERT(sel_count > 0);\n+\t\t// slice the vector with all rows that are present in this vector and erase from the index\n+\t\tresult.Slice(sel, sel_count);\n \n-\tindexes.Scan([&](Index &index) {\n-\t\tindex.Delete(result, row_identifiers);\n-\t\treturn false;\n-\t});\n+\t\tindexes.Scan([&](Index &index) {\n+\t\t\tindex.Delete(result, row_identifiers);\n+\t\t\treturn false;\n+\t\t});\n+\t}\n }\n \n void RowGroupCollection::UpdateColumn(TransactionData transaction, Vector &row_ids, const vector<column_t> &column_path,\ndiff --git a/src/storage/table/update_segment.cpp b/src/storage/table/update_segment.cpp\nindex e29752e0dacf..81304d40e68d 100644\n--- a/src/storage/table/update_segment.cpp\n+++ b/src/storage/table/update_segment.cpp\n@@ -1042,8 +1042,9 @@ static idx_t SortSelectionVector(SelectionVector &sel, idx_t count, row_t *ids)\n \treturn pos;\n }\n \n-UpdateInfo *CreateEmptyUpdateInfo(TransactionData transaction, idx_t type_size, idx_t count, unique_ptr<char[]> &data) {\n-\tdata = unique_ptr<char[]>(new char[sizeof(UpdateInfo) + (sizeof(sel_t) + type_size) * STANDARD_VECTOR_SIZE]);\n+UpdateInfo *CreateEmptyUpdateInfo(TransactionData transaction, idx_t type_size, idx_t count,\n+                                  unsafe_unique_array<char> &data) {\n+\tdata = make_unsafe_uniq_array<char>(sizeof(UpdateInfo) + (sizeof(sel_t) + type_size) * STANDARD_VECTOR_SIZE);\n \tauto update_info = (UpdateInfo *)data.get();\n \tupdate_info->max = STANDARD_VECTOR_SIZE;\n \tupdate_info->tuples = (sel_t *)(((data_ptr_t)update_info) + sizeof(UpdateInfo));\n@@ -1109,7 +1110,7 @@ void UpdateSegment::Update(TransactionData transaction, idx_t column_index, Vect\n \t\t\t}\n \t\t\tnode = node->next;\n \t\t}\n-\t\tunique_ptr<char[]> update_info_data;\n+\t\tunsafe_unique_array<char> update_info_data;\n \t\tif (!node) {\n \t\t\t// no updates made yet by this transaction: initially the update info to empty\n \t\t\tif (transaction.transaction) {\n@@ -1144,8 +1145,8 @@ void UpdateSegment::Update(TransactionData transaction, idx_t column_index, Vect\n \t\tauto result = make_uniq<UpdateNodeData>();\n \n \t\tresult->info = make_uniq<UpdateInfo>();\n-\t\tresult->tuples = unique_ptr<sel_t[]>(new sel_t[STANDARD_VECTOR_SIZE]);\n-\t\tresult->tuple_data = unique_ptr<data_t[]>(new data_t[STANDARD_VECTOR_SIZE * type_size]);\n+\t\tresult->tuples = make_unsafe_uniq_array<sel_t>(STANDARD_VECTOR_SIZE);\n+\t\tresult->tuple_data = make_unsafe_uniq_array<data_t>(STANDARD_VECTOR_SIZE * type_size);\n \t\tresult->info->tuples = result->tuples.get();\n \t\tresult->info->tuple_data = result->tuple_data.get();\n \t\tresult->info->version_number = TRANSACTION_ID_START - 1;\n@@ -1153,7 +1154,7 @@ void UpdateSegment::Update(TransactionData transaction, idx_t column_index, Vect\n \t\tInitializeUpdateInfo(*result->info, ids, sel, count, vector_index, vector_offset);\n \n \t\t// now create the transaction level update info in the undo log\n-\t\tunique_ptr<char[]> update_info_data;\n+\t\tunsafe_unique_array<char> update_info_data;\n \t\tUpdateInfo *transaction_node;\n \t\tif (transaction.transaction) {\n \t\t\ttransaction_node = transaction.transaction->CreateUpdateInfo(type_size, count);\ndiff --git a/src/transaction/duck_transaction.cpp b/src/transaction/duck_transaction.cpp\nindex 9e2ae977550f..c313e80c42b9 100644\n--- a/src/transaction/duck_transaction.cpp\n+++ b/src/transaction/duck_transaction.cpp\n@@ -138,7 +138,6 @@ string DuckTransaction::Commit(AttachedDatabase &db, transaction_t commit_id, bo\n \t\t}\n \t\treturn string();\n \t} catch (std::exception &ex) {\n-\t\tundo_buffer.RevertCommit(iterator_state, transaction_id);\n \t\treturn ex.what();\n \t}\n }\ndiff --git a/third_party/fsst/libfsst.cpp b/third_party/fsst/libfsst.cpp\nindex 96a53437fccf..38f9a7eb5e7a 100644\n--- a/third_party/fsst/libfsst.cpp\n+++ b/third_party/fsst/libfsst.cpp\n@@ -381,8 +381,7 @@ static inline size_t compressBulk(SymbolTable &symbolTable, size_t nlines, size_\n \tsize_t curLine, suffixLim = symbolTable.suffixLim;\n \tu8 byteLim = symbolTable.nSymbols + symbolTable.zeroTerminated - symbolTable.lenHisto[0];\n \n-\tu8 buf[512+7]; /* +7 sentinel is to avoid 8-byte unaligned-loads going beyond 511 out-of-bounds */\n-\tmemset(buf+511, 0, 8); /* and initialize the sentinal bytes */\n+\tu8 buf[512+7] = {}; /* +7 sentinel is to avoid 8-byte unaligned-loads going beyond 511 out-of-bounds */\n \n \t// three variants are possible. dead code falls away since the bool arguments are constants\n \tauto compressVariant = [&](bool noSuffixOpt, bool avoidBranch) {\ndiff --git a/third_party/libpg_query/grammar/grammar.y b/third_party/libpg_query/grammar/grammar.y\nindex a4bd1cdbd809..55457ff72029 100644\n--- a/third_party/libpg_query/grammar/grammar.y\n+++ b/third_party/libpg_query/grammar/grammar.y\n@@ -55,6 +55,7 @@\n \tPGLockWaitPolicy lockwaitpolicy;\n \tPGSubLinkType subquerytype;\n \tPGViewCheckOption viewcheckoption;\n+\tPGInsertColumnOrder bynameorposition;\n }\n \n %type <node> stmt\ndiff --git a/third_party/libpg_query/grammar/statements/insert.y b/third_party/libpg_query/grammar/statements/insert.y\nindex a6218bf99b64..30b30f08f6e9 100644\n--- a/third_party/libpg_query/grammar/statements/insert.y\n+++ b/third_party/libpg_query/grammar/statements/insert.y\n@@ -6,19 +6,19 @@\n  *****************************************************************************/\n \n InsertStmt:\n-\t\t\topt_with_clause INSERT opt_or_action INTO insert_target insert_rest\n+\t\t\topt_with_clause INSERT opt_or_action INTO insert_target opt_by_name_or_position insert_rest\n \t\t\topt_on_conflict returning_clause\n \t\t\t\t{\n-\t\t\t\t\t$6->relation = $5;\n-\t\t\t\t\t$6->onConflictAlias = $3;\n-\t\t\t\t\t$6->onConflictClause = $7;\n-\t\t\t\t\t$6->returningList = $8;\n-\t\t\t\t\t$6->withClause = $1;\n-\t\t\t\t\t$$ = (PGNode *) $6;\n+\t\t\t\t\t$7->relation = $5;\n+\t\t\t\t\t$7->onConflictAlias = $3;\n+\t\t\t\t\t$7->onConflictClause = $8;\n+\t\t\t\t\t$7->returningList = $9;\n+\t\t\t\t\t$7->withClause = $1;\n+\t\t\t\t\t$7->insert_column_order = $6;\n+\t\t\t\t\t$$ = (PGNode *) $7;\n \t\t\t\t}\n \t\t;\n \n-\n insert_rest:\n \t\t\tSelectStmt\n \t\t\t\t{\n@@ -67,6 +67,11 @@ insert_target:\n \t\t\t\t}\n \t\t;\n \n+opt_by_name_or_position:\n+\t\tBY NAME_P\t\t\t\t{ $$ = PG_INSERT_BY_NAME; }\n+\t\t| BY POSITION\t\t\t{ $$ = PG_INSERT_BY_POSITION; }\n+\t\t| /* empty */\t\t\t{ $$ = PG_INSERT_BY_POSITION; }\n+\t;\n \n opt_conf_expr:\n \t\t\t'(' index_params ')' where_clause\ndiff --git a/third_party/libpg_query/grammar/statements/prepare.y b/third_party/libpg_query/grammar/statements/prepare.y\nindex ffeb6d98758f..7a6a64f8119e 100644\n--- a/third_party/libpg_query/grammar/statements/prepare.y\n+++ b/third_party/libpg_query/grammar/statements/prepare.y\n@@ -23,5 +23,6 @@ PreparableStmt:\n \t\t\tSelectStmt\n \t\t\t| InsertStmt\n \t\t\t| UpdateStmt\n+\t\t\t| CopyStmt\n \t\t\t| DeleteStmt\t\t\t\t\t/* by default all are $$=$1 */\n \t\t;\ndiff --git a/third_party/libpg_query/grammar/statements/select.y b/third_party/libpg_query/grammar/statements/select.y\nindex a98932bb14ad..a8b9b3acf7d6 100644\n--- a/third_party/libpg_query/grammar/statements/select.y\n+++ b/third_party/libpg_query/grammar/statements/select.y\n@@ -2738,6 +2738,23 @@ indirection_expr:\t\t'?'\n \t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), $2, @2);\n \t\t\t\t\t$$ = (PGNode *) f;\n \t\t\t\t}\n+\t\t\t| MAP '{' opt_map_arguments_opt_comma '}'\n+\t\t\t\t{\n+\t\t\t\t\tPGList *key_list = NULL;\n+\t\t\t\t\tPGList *value_list = NULL;\n+\t\t\t\t\tPGListCell *lc;\n+\t\t\t\t\tPGList *entry_list = $3;\n+\t\t\t\t\tforeach(lc, entry_list)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPGList *l = (PGList *) lc->data.ptr_value;\n+\t\t\t\t\t\tkey_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);\n+\t\t\t\t\t\tvalue_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);\n+\t\t\t\t\t}\n+\t\t\t\t\tPGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName(\"list_value\"), key_list, @3);\n+\t\t\t\t\tPGNode *values = (PGNode *) makeFuncCall(SystemFuncName(\"list_value\"), value_list, @3);\n+\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"map\"), list_make2(keys, values), @3);\n+\t\t\t\t\t$$ = (PGNode *) f;\n+\t\t\t\t}\n \t\t\t| func_expr\n \t\t\t\t{\n \t\t\t\t\t$$ = $1;\n@@ -3236,6 +3253,29 @@ dict_arguments_opt_comma:\n \t\t\t| dict_arguments ','\t\t\t\t\t\t\t{ $$ = $1; }\n \t\t;\n \n+map_arg:\n+\t\t\ta_expr ':' a_expr\n+\t\t\t{\n+\t\t\t\t$$ = list_make2($1, $3);\n+\t\t\t}\n+\t;\n+\n+map_arguments:\n+\t\t\tmap_arg\t\t\t\t\t\t\t\t\t{ $$ = list_make1($1); }\n+\t\t\t| map_arguments ',' map_arg\t\t\t\t{ $$ = lappend($1, $3); }\n+\t;\n+\n+\n+map_arguments_opt_comma:\n+\t\t\tmap_arguments\t\t\t\t\t\t\t{ $$ = $1; }\n+\t\t\t| map_arguments ','\t\t\t\t\t\t{ $$ = $1; }\n+\t\t;\n+\n+\n+opt_map_arguments_opt_comma:\n+\t\t\tmap_arguments_opt_comma\t\t\t\t\t{ $$ = $1; }\n+\t\t\t| /* empty */\t\t\t\t\t\t\t{ $$ = NULL; }\n+\t\t;\n \n sub_type:\tANY\t\t\t\t\t\t\t\t\t\t{ $$ = PG_ANY_SUBLINK; }\n \t\t\t| SOME\t\t\t\t\t\t\t\t\t{ $$ = PG_ANY_SUBLINK; }\ndiff --git a/third_party/libpg_query/grammar/statements/variable_show.y b/third_party/libpg_query/grammar/statements/variable_show.y\nindex c65f5f0c1412..3d04b044bebe 100644\n--- a/third_party/libpg_query/grammar/statements/variable_show.y\n+++ b/third_party/libpg_query/grammar/statements/variable_show.y\n@@ -42,7 +42,7 @@ VariableShowStmt:\n \t\t\t\tn->is_summary = 0;\n \t\t\t\t$$ = (PGNode *) n;\n \t\t\t}\n-\t\t| show_or_describe ALL\n+\t\t| show_or_describe ALL opt_tables\n \t\t\t{\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n \t\t\t\tn->name = (char*) \"__show_tables_expanded\";\n@@ -60,6 +60,8 @@ VariableShowStmt:\n \n show_or_describe: SHOW | DESCRIBE\n \n+opt_tables: TABLES | /* empty */\n+\n var_name:\tColId\t\t\t\t\t\t\t\t{ $$ = $1; }\n \t\t\t| var_name '.' ColId\n \t\t\t\t{ $$ = psprintf(\"%s.%s\", $1, $3); }\ndiff --git a/third_party/libpg_query/grammar/types/insert.yh b/third_party/libpg_query/grammar/types/insert.yh\nindex 6e247ebcb1ad..db09e7cfdd98 100644\n--- a/third_party/libpg_query/grammar/types/insert.yh\n+++ b/third_party/libpg_query/grammar/types/insert.yh\n@@ -6,6 +6,7 @@\n %type <list> set_clause\n %type <onconflict> opt_on_conflict\n %type <onconflictshorthand> opt_or_action\n+%type <bynameorposition> opt_by_name_or_position\n %type <ielem> index_elem\n %type <list> returning_clause\n %type <override> override_kind\ndiff --git a/third_party/libpg_query/grammar/types/select.yh b/third_party/libpg_query/grammar/types/select.yh\nindex 11488e2c7d1f..0c90669a9232 100644\n--- a/third_party/libpg_query/grammar/types/select.yh\n+++ b/third_party/libpg_query/grammar/types/select.yh\n@@ -75,6 +75,8 @@\n %type <node>\tdict_arg\n %type <list>\tdict_arguments dict_arguments_opt_comma\n \n+%type <list>\tmap_arg map_arguments map_arguments_opt_comma opt_map_arguments_opt_comma\n+\n %type <alias>\talias_clause opt_alias_clause\n %type <list>\tfunc_alias_clause\n %type <sortby>\tsortby\ndiff --git a/third_party/libpg_query/include/nodes/nodes.hpp b/third_party/libpg_query/include/nodes/nodes.hpp\nindex fcd935910435..36cddfbe3326 100755\n--- a/third_party/libpg_query/include/nodes/nodes.hpp\n+++ b/third_party/libpg_query/include/nodes/nodes.hpp\n@@ -814,4 +814,13 @@ typedef enum PGOnConflictActionAlias {\n \tPG_ONCONFLICT_ALIAS_IGNORE   /* INSERT OR IGNORE */\n } PGOnConflictActionAlias;\n \n+/*\n+ * PGInsertByNameOrPosition\n+ *    \"INSERT BY [POSITION|NAME]\n+ */\n+typedef enum PGInsertColumnOrder {\n+\tPG_INSERT_BY_POSITION,    /* INSERT BY POSITION (default behavior) */\n+\tPG_INSERT_BY_NAME,        /* INSERT BY NAME */\n+} PGInsertColumnOrder;\n+\n }\ndiff --git a/third_party/libpg_query/include/nodes/parsenodes.hpp b/third_party/libpg_query/include/nodes/parsenodes.hpp\nindex 33ed4d70cdab..dc85eff354df 100755\n--- a/third_party/libpg_query/include/nodes/parsenodes.hpp\n+++ b/third_party/libpg_query/include/nodes/parsenodes.hpp\n@@ -1045,11 +1045,11 @@ typedef struct PGInferClause {\n  */\n typedef struct PGOnConflictClause {\n \tPGNodeTag type;\n-\tPGOnConflictAction action; /* DO NOTHING or UPDATE? */\n-\tPGInferClause *infer;      /* Optional index inference clause */\n-\tPGList *targetList;        /* the target list (of PGResTarget) */\n-\tPGNode *whereClause;       /* qualifications */\n-\tint location;              /* token location, or -1 if unknown */\n+\tPGOnConflictAction action;               /* DO NOTHING or UPDATE? */\n+\tPGInferClause *infer;                    /* Optional index inference clause */\n+\tPGList *targetList;                      /* the target list (of PGResTarget) */\n+\tPGNode *whereClause;                     /* qualifications */\n+\tint location;                            /* token location, or -1 if unknown */\n } PGOnConflictClause;\n \n /*\n@@ -1125,14 +1125,15 @@ typedef struct PGRawStmt {\n  */\n typedef struct PGInsertStmt {\n \tPGNodeTag type;\n-\tPGRangeVar *relation;                 /* relation to insert into */\n-\tPGList *cols;                         /* optional: names of the target columns */\n-\tPGNode *selectStmt;                   /* the source SELECT/VALUES, or NULL */\n+\tPGRangeVar *relation;                    /* relation to insert into */\n+\tPGList *cols;                            /* optional: names of the target columns */\n+\tPGNode *selectStmt;                      /* the source SELECT/VALUES, or NULL */\n \tPGOnConflictActionAlias onConflictAlias; /* the (optional) shorthand provided for the onConflictClause */\n-\tPGOnConflictClause *onConflictClause; /* ON CONFLICT clause */\n-\tPGList *returningList;                /* list of expressions to return */\n-\tPGWithClause *withClause;             /* WITH clause */\n-\tPGOverridingKind override;            /* OVERRIDING clause */\n+\tPGOnConflictClause *onConflictClause;    /* ON CONFLICT clause */\n+\tPGList *returningList;                   /* list of expressions to return */\n+\tPGWithClause *withClause;                /* WITH clause */\n+\tPGOverridingKind override;               /* OVERRIDING clause */\n+\tPGInsertColumnOrder insert_column_order; /* INSERT BY NAME or INSERT BY POSITION */\n } PGInsertStmt;\n \n /* ----------------------\ndiff --git a/third_party/libpg_query/include/parser/gram.hpp b/third_party/libpg_query/include/parser/gram.hpp\nindex 700f6e1a5a9d..e0bf2afd273c 100644\n--- a/third_party/libpg_query/include/parser/gram.hpp\n+++ b/third_party/libpg_query/include/parser/gram.hpp\n@@ -1065,9 +1065,10 @@ typedef union YYSTYPE\n \tPGLockWaitPolicy lockwaitpolicy;\n \tPGSubLinkType subquerytype;\n \tPGViewCheckOption viewcheckoption;\n+\tPGInsertColumnOrder bynameorposition;\n }\n /* Line 1529 of yacc.c.  */\n-#line 1071 \"third_party/libpg_query/grammar/grammar_out.hpp\"\n+#line 1072 \"third_party/libpg_query/grammar/grammar_out.hpp\"\n \tYYSTYPE;\n # define yystype YYSTYPE /* obsolescent; will be withdrawn */\n # define YYSTYPE_IS_DECLARED 1\ndiff --git a/third_party/libpg_query/src_backend_parser_gram.cpp b/third_party/libpg_query/src_backend_parser_gram.cpp\nindex 133b6b8e9444..4b6abfc4b570 100644\n--- a/third_party/libpg_query/src_backend_parser_gram.cpp\n+++ b/third_party/libpg_query/src_backend_parser_gram.cpp\n@@ -1285,9 +1285,10 @@ typedef union YYSTYPE\n \tPGLockWaitPolicy lockwaitpolicy;\n \tPGSubLinkType subquerytype;\n \tPGViewCheckOption viewcheckoption;\n+\tPGInsertColumnOrder bynameorposition;\n }\n /* Line 193 of yacc.c.  */\n-#line 1291 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 1292 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n \tYYSTYPE;\n # define yystype YYSTYPE /* obsolescent; will be withdrawn */\n # define YYSTYPE_IS_DECLARED 1\n@@ -1312,7 +1313,7 @@ typedef struct YYLTYPE\n \n \n /* Line 216 of yacc.c.  */\n-#line 1316 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 1317 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n \n #ifdef short\n # undef short\n@@ -1529,16 +1530,16 @@ union yyalloc\n /* YYFINAL -- State number of the termination state.  */\n #define YYFINAL  683\n /* YYLAST -- Last index in YYTABLE.  */\n-#define YYLAST   66720\n+#define YYLAST   67100\n \n /* YYNTOKENS -- Number of terminals.  */\n #define YYNTOKENS  511\n /* YYNNTS -- Number of nonterminals.  */\n-#define YYNNTS  434\n+#define YYNNTS  440\n /* YYNRULES -- Number of rules.  */\n-#define YYNRULES  2016\n+#define YYNRULES  2030\n /* YYNRULES -- Number of states.  */\n-#define YYNSTATES  3365\n+#define YYNSTATES  3384\n \n /* YYTRANSLATE(YYLEX) -- Bison symbol number corresponding to YYLEX.  */\n #define YYUNDEFTOK  2\n@@ -1644,820 +1645,825 @@ static const yytype_uint16 yyprhs[] =\n      323,   325,   328,   329,   331,   334,   337,   340,   342,   346,\n      351,   354,   356,   357,   360,   364,   367,   371,   378,   385,\n      394,   401,   410,   417,   426,   433,   442,   451,   462,   471,\n-     482,   484,   485,   494,   496,   501,   506,   514,   517,   519,\n-     523,   528,   532,   533,   535,   536,   539,   543,   549,   552,\n-     555,   556,   565,   571,   572,   578,   584,   592,   595,   596,\n-     598,   600,   602,   606,   609,   610,   612,   613,   615,   619,\n-     621,   625,   627,   630,   632,   636,   639,   646,   655,   661,\n-     663,   664,   666,   670,   673,   678,   684,   688,   693,   700,\n-     706,   712,   721,   729,   731,   737,   746,   754,   756,   757,\n-     761,   771,   784,   788,   789,   794,   801,   803,   806,   808,\n-     810,   811,   813,   816,   819,   821,   824,   827,   829,   832,\n-     836,   839,   842,   845,   848,   852,   856,   860,   862,   866,\n-     868,   869,   871,   874,   877,   880,   883,   886,   889,   892,\n-     895,   897,   899,   900,   903,   913,   926,   938,   939,   942,\n-     944,   946,   948,   950,   952,   954,   958,   959,   961,   964,\n-     966,   968,   971,   974,   978,   980,   982,   985,   988,   990,\n-     993,   997,  1003,  1007,  1010,  1016,  1018,  1020,  1022,  1023,\n-    1029,  1037,  1043,  1046,  1050,  1052,  1054,  1057,  1060,  1061,\n-    1065,  1070,  1075,  1076,  1080,  1083,  1084,  1088,  1090,  1092,\n-    1094,  1096,  1098,  1100,  1102,  1104,  1106,  1108,  1112,  1116,\n-    1118,  1121,  1124,  1127,  1130,  1133,  1136,  1137,  1141,  1145,\n-    1149,  1150,  1152,  1155,  1157,  1160,  1163,  1166,  1169,  1173,\n-    1178,  1180,  1184,  1186,  1188,  1190,  1192,  1196,  1198,  1201,\n-    1202,  1204,  1207,  1208,  1210,  1214,  1215,  1218,  1219,  1223,\n-    1227,  1229,  1235,  1239,  1241,  1245,  1247,  1250,  1252,  1257,\n-    1263,  1269,  1276,  1280,  1288,  1293,  1305,  1307,  1311,  1314,\n-    1317,  1320,  1321,  1325,  1327,  1329,  1332,  1335,  1338,  1341,\n-    1343,  1344,  1346,  1349,  1356,  1361,  1368,  1373,  1380,  1389,\n-    1394,  1401,  1403,  1405,  1407,  1409,  1411,  1414,  1416,  1419,\n-    1421,  1424,  1426,  1428,  1430,  1432,  1436,  1440,  1444,  1448,\n-    1451,  1454,  1456,  1460,  1462,  1464,  1466,  1470,  1472,  1474,\n-    1475,  1477,  1479,  1481,  1483,  1487,  1496,  1508,  1519,  1527,\n-    1538,  1548,  1550,  1552,  1555,  1559,  1568,  1580,  1590,  1592,\n-    1594,  1598,  1599,  1601,  1605,  1607,  1608,  1610,  1611,  1613,\n-    1614,  1616,  1620,  1622,  1624,  1626,  1630,  1631,  1634,  1637,\n-    1638,  1641,  1642,  1644,  1645,  1647,  1649,  1651,  1655,  1659,\n-    1661,  1663,  1667,  1671,  1675,  1679,  1683,  1687,  1692,  1696,\n-    1699,  1701,  1703,  1705,  1707,  1709,  1713,  1715,  1717,  1721,\n-    1725,  1727,  1730,  1735,  1740,  1743,  1747,  1753,  1759,  1761,\n-    1763,  1767,  1768,  1780,  1792,  1803,  1816,  1818,  1821,  1827,\n-    1832,  1837,  1842,  1847,  1855,  1861,  1866,  1874,  1881,  1891,\n-    1901,  1906,  1908,  1910,  1912,  1914,  1916,  1918,  1920,  1926,\n-    1928,  1930,  1934,  1936,  1939,  1942,  1945,  1949,  1951,  1955,\n-    1962,  1965,  1966,  1970,  1974,  1979,  1984,  1989,  1994,  1998,\n-    2001,  2003,  2005,  2006,  2008,  2010,  2011,  2014,  2016,  2022,\n-    2024,  2025,  2028,  2031,  2032,  2034,  2035,  2039,  2045,  2047,\n-    2051,  2056,  2060,  2062,  2064,  2065,  2068,  2071,  2072,  2075,\n-    2078,  2080,  2082,  2084,  2085,  2088,  2093,  2099,  2104,  2107,\n-    2111,  2114,  2117,  2120,  2123,  2125,  2128,  2132,  2133,  2135,\n-    2136,  2142,  2144,  2149,  2156,  2159,  2161,  2162,  2167,  2168,\n-    2170,  2172,  2175,  2178,  2181,  2183,  2185,  2188,  2191,  2193,\n-    2195,  2197,  2199,  2201,  2203,  2207,  2211,  2212,  2214,  2218,\n-    2220,  2223,  2225,  2227,  2229,  2231,  2233,  2236,  2241,  2246,\n-    2252,  2254,  2256,  2259,  2260,  2263,  2264,  2266,  2270,  2272,\n-    2273,  2275,  2278,  2282,  2285,  2290,  2293,  2297,  2300,  2301,\n-    2303,  2306,  2307,  2312,  2318,  2320,  2323,  2326,  2327,  2329,\n-    2333,  2335,  2338,  2342,  2346,  2350,  2354,  2358,  2362,  2364,\n-    2369,  2379,  2389,  2393,  2394,  2397,  2400,  2401,  2407,  2411,\n-    2413,  2417,  2423,  2427,  2429,  2432,  2434,  2438,  2444,  2446,\n-    2449,  2453,  2458,  2464,  2469,  2475,  2480,  2487,  2493,  2498,\n-    2504,  2510,  2516,  2519,  2524,  2526,  2528,  2529,  2531,  2536,\n-    2542,  2547,  2548,  2551,  2554,  2557,  2559,  2561,  2563,  2565,\n-    2566,  2571,  2574,  2576,  2579,  2582,  2587,  2590,  2597,  2600,\n-    2602,  2606,  2611,  2612,  2615,  2616,  2619,  2620,  2622,  2626,\n-    2630,  2633,  2634,  2637,  2642,  2644,  2646,  2648,  2649,  2652,\n-    2656,  2662,  2669,  2672,  2676,  2682,  2688,  2694,  2698,  2703,\n-    2704,  2706,  2708,  2710,  2712,  2714,  2717,  2722,  2724,  2726,\n-    2728,  2730,  2733,  2737,  2738,  2740,  2742,  2744,  2746,  2748,\n-    2751,  2754,  2757,  2760,  2763,  2765,  2769,  2770,  2772,  2774,\n-    2776,  2778,  2784,  2787,  2789,  2791,  2793,  2795,  2800,  2802,\n-    2805,  2808,  2810,  2814,  2818,  2821,  2823,  2824,  2830,  2833,\n-    2839,  2842,  2844,  2848,  2852,  2853,  2855,  2857,  2859,  2861,\n-    2863,  2865,  2867,  2869,  2871,  2873,  2875,  2877,  2879,  2881,\n-    2883,  2885,  2887,  2889,  2891,  2893,  2895,  2897,  2899,  2901,\n-    2905,  2909,  2913,  2917,  2921,  2925,  2929,  2930,  2932,  2936,\n-    2940,  2946,  2949,  2952,  2956,  2960,  2964,  2968,  2972,  2976,\n-    2980,  2984,  2988,  2992,  2996,  3000,  3004,  3008,  3012,  3015,\n-    3018,  3022,  3026,  3029,  3032,  3036,  3040,  3046,  3051,  3058,\n-    3062,  3068,  3073,  3080,  3085,  3092,  3098,  3106,  3110,  3113,\n-    3118,  3122,  3125,  3129,  3133,  3137,  3141,  3146,  3150,  3155,\n-    3159,  3164,  3170,  3177,  3184,  3192,  3199,  3207,  3214,  3222,\n-    3226,  3231,  3236,  3243,  3245,  3250,  3254,  3260,  3262,  3266,\n-    3269,  3272,  3276,  3280,  3284,  3288,  3292,  3296,  3300,  3304,\n-    3308,  3312,  3316,  3320,  3324,  3328,  3332,  3335,  3338,  3344,\n-    3351,  3358,  3366,  3368,  3370,  3373,  3375,  3377,  3380,  3383,\n-    3387,  3389,  3392,  3397,  3399,  3401,  3404,  3407,  3412,  3414,\n-    3416,  3420,  3424,  3426,  3430,  3437,  3445,  3455,  3463,  3471,\n-    3477,  3479,  3481,  3483,  3489,  3496,  3503,  3508,  3513,  3518,\n-    3523,  3530,  3536,  3542,  3548,  3553,  3560,  3565,  3573,  3583,\n-    3589,  3590,  3596,  3601,  3602,  3604,  3605,  3608,  3609,  3611,\n-    3615,  3619,  3622,  3625,  3626,  3633,  3635,  3636,  3640,  3641,\n-    3644,  3647,  3648,  3650,  3655,  3658,  3661,  3664,  3667,  3670,\n-    3675,  3679,  3681,  3687,  3691,  3693,  3697,  3699,  3702,  3704,\n-    3706,  3708,  3710,  3712,  3714,  3716,  3718,  3720,  3722,  3724,\n-    3726,  3728,  3730,  3732,  3734,  3736,  3738,  3740,  3742,  3747,\n-    3749,  3754,  3756,  3761,  3763,  3766,  3768,  3771,  3773,  3776,\n-    3778,  3782,  3784,  3788,  3790,  3793,  3795,  3799,  3801,  3804,\n-    3806,  3807,  3809,  3813,  3815,  3819,  3823,  3825,  3829,  3833,\n-    3834,  3836,  3838,  3840,  3842,  3844,  3846,  3848,  3850,  3852,\n-    3854,  3859,  3863,  3866,  3870,  3871,  3875,  3879,  3882,  3885,\n-    3887,  3888,  3891,  3894,  3898,  3901,  3903,  3905,  3909,  3915,\n-    3917,  3920,  3925,  3928,  3929,  3931,  3932,  3934,  3937,  3940,\n-    3944,  3950,  3952,  3953,  3955,  3958,  3959,  3962,  3963,  3966,\n-    3970,  3974,  3978,  3984,  3985,  3988,  3990,  3991,  3993,  3994,\n-    3996,  4000,  4002,  4005,  4009,  4012,  4014,  4019,  4022,  4024,\n-    4025,  4029,  4031,  4035,  4037,  4040,  4045,  4048,  4049,  4051,\n-    4055,  4057,  4060,  4062,  4066,  4068,  4071,  4073,  4077,  4079,\n-    4081,  4083,  4086,  4088,  4090,  4093,  4095,  4097,  4100,  4108,\n-    4111,  4117,  4121,  4125,  4127,  4129,  4131,  4133,  4135,  4137,\n-    4139,  4141,  4143,  4145,  4147,  4149,  4151,  4153,  4155,  4157,\n-    4159,  4161,  4163,  4165,  4168,  4171,  4175,  4179,  4180,  4182,\n-    4184,  4186,  4188,  4190,  4192,  4194,  4196,  4202,  4206,  4207,\n-    4209,  4211,  4213,  4215,  4220,  4228,  4235,  4238,  4239,  4241,\n-    4243,  4245,  4247,  4261,  4278,  4280,  4283,  4284,  4286,  4287,\n-    4289,  4290,  4293,  4294,  4296,  4297,  4304,  4313,  4320,  4329,\n-    4336,  4345,  4349,  4352,  4354,  4355,  4360,  4367,  4371,  4374,\n-    4379,  4383,  4389,  4391,  4392,  4394,  4396,  4397,  4399,  4401,\n-    4403,  4405,  4407,  4409,  4411,  4413,  4415,  4417,  4419,  4421,\n-    4423,  4425,  4427,  4429,  4431,  4433,  4435,  4437,  4439,  4441,\n-    4443,  4445,  4447,  4449,  4451,  4453,  4455,  4457,  4459,  4461,\n-    4463,  4465,  4467,  4469,  4473,  4475,  4477,  4479,  4481,  4483,\n-    4485,  4488,  4490,  4492,  4495,  4499,  4503,  4507,  4509,  4513,\n-    4517,  4520,  4524,  4528,  4532,  4536,  4538,  4540,  4542,  4544,\n-    4548,  4554,  4556,  4558,  4560,  4562,  4566,  4569,  4572,  4576,\n-    4578,  4580,  4585,  4592,  4598,  4603,  4610,  4612,  4614,  4616,\n-    4618,  4620,  4622,  4623,  4625,  4629,  4631,  4632,  4640,  4644,\n-    4646,  4649,  4653,  4656,  4657,  4660,  4661,  4664,  4669,  4675,\n-    4679,  4685,  4687,  4688,  4691,  4692,  4695,  4697,  4699,  4701,\n-    4704,  4708,  4711,  4714,  4717,  4720,  4724,  4729,  4732,  4734,\n-    4736,  4738,  4740,  4744,  4746,  4750,  4753,  4763,  4776,  4788,\n-    4801,  4816,  4820,  4825,  4830,  4831,  4839,  4850,  4860,  4863,\n-    4867,  4868,  4873,  4875,  4877,  4879,  4881,  4883,  4885,  4887,\n-    4889,  4891,  4893,  4895,  4897,  4899,  4901,  4903,  4905,  4907,\n-    4909,  4911,  4913,  4915,  4917,  4919,  4921,  4923,  4925,  4927,\n-    4929,  4931,  4933,  4935,  4937,  4939,  4941,  4943,  4945,  4947,\n-    4949,  4951,  4953,  4955,  4957,  4959,  4961,  4963,  4965,  4967,\n-    4969,  4971,  4973,  4975,  4977,  4979,  4981,  4983,  4985,  4987,\n-    4989,  4991,  4993,  4995,  4997,  4999,  5001,  5003,  5005,  5007,\n-    5009,  5011,  5013,  5015,  5017,  5019,  5021,  5023,  5025,  5027,\n-    5029,  5031,  5033,  5035,  5037,  5039,  5041,  5043,  5045,  5047,\n-    5049,  5051,  5053,  5055,  5057,  5059,  5061,  5063,  5065,  5067,\n-    5069,  5071,  5073,  5075,  5077,  5079,  5081,  5083,  5085,  5087,\n-    5089,  5091,  5093,  5095,  5097,  5099,  5101,  5103,  5105,  5107,\n-    5109,  5111,  5113,  5115,  5117,  5119,  5121,  5123,  5125,  5127,\n-    5129,  5131,  5133,  5135,  5137,  5139,  5141,  5143,  5145,  5147,\n-    5149,  5151,  5153,  5155,  5157,  5159,  5161,  5163,  5165,  5167,\n-    5169,  5171,  5173,  5175,  5177,  5179,  5181,  5183,  5185,  5187,\n-    5189,  5191,  5193,  5195,  5197,  5199,  5201,  5203,  5205,  5207,\n-    5209,  5211,  5213,  5215,  5217,  5219,  5221,  5223,  5225,  5227,\n-    5229,  5231,  5233,  5235,  5237,  5239,  5241,  5243,  5245,  5247,\n-    5249,  5251,  5253,  5255,  5257,  5259,  5261,  5263,  5265,  5267,\n-    5269,  5271,  5273,  5275,  5277,  5279,  5281,  5283,  5285,  5287,\n-    5289,  5291,  5293,  5295,  5297,  5299,  5301,  5303,  5305,  5307,\n-    5309,  5311,  5313,  5315,  5317,  5319,  5321,  5323,  5325,  5327,\n-    5329,  5331,  5333,  5335,  5337,  5339,  5341,  5343,  5345,  5347,\n-    5349,  5351,  5353,  5355,  5357,  5359,  5361,  5363,  5365,  5367,\n-    5369,  5371,  5373,  5375,  5377,  5379,  5381,  5383,  5385,  5387,\n-    5389,  5391,  5393,  5395,  5397,  5399,  5401,  5403,  5405,  5407,\n-    5409,  5411,  5413,  5415,  5417,  5419,  5421,  5423,  5425,  5427,\n-    5429,  5431,  5433,  5435,  5437,  5439,  5441,  5443,  5445,  5447,\n-    5449,  5451,  5453,  5455,  5457,  5459,  5461,  5463,  5465,  5467,\n-    5469,  5471,  5473,  5475,  5477,  5479,  5481,  5483,  5485,  5487,\n-    5489,  5491,  5493,  5495,  5497,  5499,  5501,  5503,  5505,  5507,\n-    5509,  5511,  5513,  5515,  5517,  5519,  5521,  5523,  5525,  5527,\n-    5529,  5531,  5533,  5535,  5537,  5539,  5541,  5543,  5545,  5547,\n-    5549,  5551,  5553,  5555,  5557,  5559,  5561,  5563,  5565,  5567,\n-    5569,  5571,  5573,  5575,  5577,  5579,  5581,  5583,  5585,  5587,\n-    5589,  5591,  5593,  5595,  5597,  5599,  5601,  5603,  5605,  5607,\n-    5609,  5611,  5613,  5615,  5617,  5619,  5621,  5623,  5625,  5627,\n-    5629,  5631,  5633,  5635,  5637,  5639,  5641,  5643,  5645,  5647,\n-    5649,  5651,  5653,  5655,  5657,  5659,  5661,  5663,  5665,  5667,\n-    5669,  5671,  5673,  5675,  5677,  5679,  5681,  5683,  5685,  5687,\n-    5689,  5691,  5693,  5695,  5697,  5699,  5701,  5703,  5705,  5707,\n-    5709,  5711,  5713,  5715,  5717,  5719,  5721,  5723,  5725,  5727,\n-    5729,  5731,  5733,  5735,  5737,  5739,  5741,  5743,  5745,  5747,\n-    5749,  5751,  5753,  5755,  5757,  5759,  5761,  5763,  5765,  5767,\n-    5769,  5771,  5773,  5775,  5777,  5779,  5781,  5783,  5785,  5787,\n-    5789,  5791,  5793,  5795,  5797,  5799,  5801,  5803,  5805,  5807,\n-    5809,  5811,  5813,  5815,  5817,  5819,  5821,  5823,  5825,  5827,\n-    5829,  5831,  5833,  5835,  5837,  5839,  5841,  5843,  5845,  5847,\n-    5849,  5851,  5853,  5855,  5857,  5859,  5861,  5863,  5865,  5867,\n-    5869,  5871,  5873,  5875,  5877,  5879,  5881,  5883,  5885,  5887,\n-    5889,  5891,  5893,  5895,  5897,  5899,  5901,  5903,  5905,  5907,\n-    5909,  5911,  5913,  5915,  5917,  5919,  5921,  5923,  5925,  5927,\n-    5929,  5931,  5933,  5935,  5937,  5939,  5941,  5943,  5945,  5947,\n-    5949,  5951,  5953,  5955,  5957,  5959,  5961,  5963,  5965,  5967,\n-    5969,  5971,  5973,  5975,  5977,  5979,  5981,  5983,  5985,  5987,\n-    5989,  5991,  5993,  5995,  5997,  5999,  6001,  6003,  6005,  6007,\n-    6009,  6011,  6013,  6015,  6017,  6019,  6021,  6023,  6025,  6027,\n-    6029,  6031,  6033,  6035,  6037,  6039,  6041,  6043,  6045,  6047,\n-    6049,  6051,  6053,  6055,  6057,  6059,  6061,  6063,  6065,  6067,\n-    6069,  6071,  6073,  6075,  6077,  6079,  6081\n+     482,   484,   485,   495,   497,   502,   507,   515,   518,   520,\n+     524,   527,   530,   531,   536,   540,   541,   543,   544,   547,\n+     551,   557,   560,   563,   564,   573,   579,   580,   586,   592,\n+     600,   603,   604,   606,   608,   610,   614,   617,   618,   620,\n+     621,   623,   627,   629,   633,   635,   638,   640,   644,   647,\n+     654,   663,   669,   671,   672,   674,   678,   681,   686,   692,\n+     696,   701,   708,   714,   720,   729,   737,   739,   745,   754,\n+     762,   764,   765,   769,   779,   792,   796,   797,   802,   809,\n+     811,   814,   816,   818,   819,   821,   824,   827,   829,   832,\n+     835,   837,   840,   844,   847,   850,   853,   856,   860,   864,\n+     868,   870,   874,   876,   877,   879,   882,   885,   888,   891,\n+     894,   897,   900,   903,   905,   907,   908,   911,   921,   934,\n+     946,   947,   950,   952,   954,   956,   958,   960,   962,   966,\n+     967,   969,   972,   974,   976,   979,   982,   986,   988,   990,\n+     993,   996,   998,  1001,  1005,  1011,  1015,  1018,  1024,  1026,\n+    1028,  1030,  1031,  1037,  1045,  1051,  1054,  1058,  1060,  1062,\n+    1065,  1068,  1069,  1073,  1078,  1083,  1084,  1088,  1091,  1092,\n+    1096,  1098,  1100,  1102,  1104,  1106,  1108,  1110,  1112,  1114,\n+    1116,  1120,  1124,  1126,  1129,  1132,  1135,  1138,  1141,  1144,\n+    1145,  1149,  1153,  1157,  1158,  1160,  1163,  1165,  1168,  1171,\n+    1174,  1177,  1181,  1186,  1188,  1192,  1194,  1196,  1198,  1200,\n+    1204,  1206,  1209,  1210,  1212,  1215,  1216,  1218,  1222,  1223,\n+    1226,  1227,  1231,  1235,  1237,  1243,  1247,  1249,  1253,  1255,\n+    1258,  1260,  1265,  1271,  1277,  1284,  1288,  1296,  1301,  1313,\n+    1315,  1319,  1322,  1325,  1328,  1329,  1333,  1335,  1337,  1340,\n+    1343,  1346,  1349,  1351,  1352,  1354,  1357,  1364,  1369,  1376,\n+    1381,  1388,  1397,  1402,  1409,  1411,  1413,  1415,  1417,  1419,\n+    1422,  1424,  1427,  1429,  1432,  1434,  1436,  1438,  1440,  1444,\n+    1448,  1452,  1456,  1459,  1462,  1464,  1468,  1470,  1472,  1474,\n+    1478,  1480,  1482,  1483,  1485,  1487,  1489,  1491,  1495,  1504,\n+    1516,  1527,  1535,  1546,  1556,  1558,  1560,  1563,  1567,  1576,\n+    1588,  1598,  1600,  1602,  1606,  1607,  1609,  1613,  1615,  1616,\n+    1618,  1619,  1621,  1622,  1624,  1628,  1630,  1632,  1634,  1638,\n+    1639,  1642,  1645,  1646,  1649,  1650,  1652,  1653,  1655,  1657,\n+    1659,  1663,  1667,  1669,  1671,  1675,  1679,  1683,  1687,  1691,\n+    1695,  1700,  1704,  1707,  1709,  1711,  1713,  1715,  1717,  1721,\n+    1723,  1725,  1729,  1733,  1735,  1738,  1743,  1748,  1751,  1755,\n+    1761,  1767,  1769,  1771,  1775,  1776,  1788,  1800,  1811,  1824,\n+    1826,  1829,  1835,  1840,  1845,  1850,  1855,  1863,  1869,  1874,\n+    1882,  1889,  1899,  1909,  1914,  1916,  1918,  1920,  1922,  1924,\n+    1926,  1928,  1934,  1936,  1938,  1942,  1944,  1947,  1950,  1953,\n+    1957,  1959,  1963,  1970,  1973,  1974,  1978,  1982,  1987,  1992,\n+    1997,  2002,  2006,  2009,  2011,  2013,  2014,  2016,  2018,  2019,\n+    2022,  2024,  2030,  2032,  2033,  2036,  2039,  2040,  2042,  2043,\n+    2047,  2053,  2055,  2059,  2064,  2068,  2070,  2072,  2073,  2076,\n+    2079,  2080,  2083,  2086,  2088,  2090,  2092,  2093,  2096,  2101,\n+    2107,  2112,  2115,  2119,  2122,  2125,  2128,  2131,  2133,  2136,\n+    2140,  2141,  2143,  2144,  2150,  2152,  2157,  2164,  2167,  2169,\n+    2170,  2175,  2176,  2178,  2180,  2183,  2186,  2189,  2191,  2193,\n+    2196,  2199,  2201,  2203,  2205,  2207,  2209,  2211,  2215,  2219,\n+    2220,  2222,  2226,  2228,  2231,  2233,  2235,  2237,  2239,  2241,\n+    2244,  2249,  2254,  2260,  2262,  2264,  2267,  2268,  2271,  2272,\n+    2274,  2278,  2280,  2281,  2283,  2286,  2290,  2293,  2298,  2301,\n+    2305,  2308,  2309,  2311,  2314,  2315,  2320,  2326,  2328,  2331,\n+    2334,  2335,  2337,  2341,  2343,  2346,  2350,  2354,  2358,  2362,\n+    2366,  2370,  2372,  2377,  2387,  2397,  2401,  2402,  2405,  2408,\n+    2409,  2415,  2419,  2421,  2425,  2431,  2435,  2437,  2440,  2442,\n+    2446,  2452,  2454,  2457,  2461,  2466,  2472,  2477,  2483,  2488,\n+    2495,  2501,  2506,  2512,  2518,  2524,  2527,  2532,  2534,  2536,\n+    2537,  2539,  2544,  2550,  2555,  2556,  2559,  2562,  2565,  2567,\n+    2569,  2571,  2573,  2574,  2579,  2582,  2584,  2587,  2590,  2595,\n+    2598,  2605,  2608,  2610,  2614,  2619,  2620,  2623,  2624,  2627,\n+    2628,  2630,  2634,  2638,  2641,  2642,  2645,  2650,  2652,  2654,\n+    2656,  2657,  2660,  2664,  2670,  2677,  2680,  2684,  2690,  2696,\n+    2702,  2706,  2711,  2712,  2714,  2716,  2718,  2720,  2722,  2725,\n+    2730,  2732,  2734,  2736,  2738,  2741,  2745,  2746,  2748,  2750,\n+    2752,  2754,  2756,  2759,  2762,  2765,  2768,  2771,  2773,  2777,\n+    2778,  2780,  2782,  2784,  2786,  2792,  2795,  2797,  2799,  2801,\n+    2803,  2808,  2810,  2813,  2816,  2818,  2822,  2826,  2829,  2831,\n+    2832,  2838,  2841,  2847,  2850,  2852,  2856,  2860,  2861,  2863,\n+    2865,  2867,  2869,  2871,  2873,  2875,  2877,  2879,  2881,  2883,\n+    2885,  2887,  2889,  2891,  2893,  2895,  2897,  2899,  2901,  2903,\n+    2905,  2907,  2909,  2913,  2917,  2921,  2925,  2929,  2933,  2937,\n+    2938,  2940,  2944,  2948,  2954,  2957,  2960,  2964,  2968,  2972,\n+    2976,  2980,  2984,  2988,  2992,  2996,  3000,  3004,  3008,  3012,\n+    3016,  3020,  3023,  3026,  3030,  3034,  3037,  3040,  3044,  3048,\n+    3054,  3059,  3066,  3070,  3076,  3081,  3088,  3093,  3100,  3106,\n+    3114,  3118,  3121,  3126,  3130,  3133,  3137,  3141,  3145,  3149,\n+    3154,  3158,  3163,  3167,  3172,  3178,  3185,  3192,  3200,  3207,\n+    3215,  3222,  3230,  3234,  3239,  3244,  3251,  3253,  3258,  3262,\n+    3268,  3270,  3274,  3277,  3280,  3284,  3288,  3292,  3296,  3300,\n+    3304,  3308,  3312,  3316,  3320,  3324,  3328,  3332,  3336,  3340,\n+    3343,  3346,  3352,  3359,  3366,  3374,  3376,  3378,  3381,  3383,\n+    3385,  3388,  3391,  3395,  3397,  3400,  3405,  3407,  3409,  3412,\n+    3415,  3420,  3422,  3424,  3428,  3432,  3437,  3439,  3443,  3450,\n+    3458,  3468,  3476,  3484,  3490,  3492,  3494,  3496,  3502,  3509,\n+    3516,  3521,  3526,  3531,  3536,  3543,  3549,  3555,  3561,  3566,\n+    3573,  3578,  3586,  3596,  3602,  3603,  3609,  3614,  3615,  3617,\n+    3618,  3621,  3622,  3624,  3628,  3632,  3635,  3638,  3639,  3646,\n+    3648,  3649,  3653,  3654,  3657,  3660,  3661,  3663,  3668,  3671,\n+    3674,  3677,  3680,  3683,  3688,  3692,  3694,  3700,  3704,  3706,\n+    3710,  3712,  3715,  3719,  3721,  3725,  3727,  3730,  3732,  3733,\n+    3735,  3737,  3739,  3741,  3743,  3745,  3747,  3749,  3751,  3753,\n+    3755,  3757,  3759,  3761,  3763,  3765,  3767,  3769,  3771,  3773,\n+    3778,  3780,  3785,  3787,  3792,  3794,  3797,  3799,  3802,  3804,\n+    3807,  3809,  3813,  3815,  3819,  3821,  3824,  3826,  3830,  3832,\n+    3835,  3837,  3838,  3840,  3844,  3846,  3850,  3854,  3856,  3860,\n+    3864,  3865,  3867,  3869,  3871,  3873,  3875,  3877,  3879,  3881,\n+    3883,  3885,  3890,  3894,  3897,  3901,  3902,  3906,  3910,  3913,\n+    3916,  3918,  3919,  3922,  3925,  3929,  3932,  3934,  3936,  3940,\n+    3946,  3948,  3951,  3956,  3959,  3960,  3962,  3963,  3965,  3968,\n+    3971,  3975,  3981,  3983,  3984,  3986,  3989,  3990,  3993,  3994,\n+    3997,  4001,  4005,  4009,  4015,  4016,  4019,  4021,  4022,  4024,\n+    4025,  4027,  4031,  4033,  4036,  4040,  4043,  4045,  4050,  4053,\n+    4055,  4056,  4060,  4062,  4066,  4068,  4071,  4076,  4079,  4080,\n+    4082,  4086,  4088,  4091,  4093,  4097,  4099,  4102,  4104,  4108,\n+    4110,  4112,  4114,  4117,  4119,  4121,  4124,  4126,  4128,  4131,\n+    4139,  4142,  4148,  4152,  4156,  4158,  4160,  4162,  4164,  4166,\n+    4168,  4170,  4172,  4174,  4176,  4178,  4180,  4182,  4184,  4186,\n+    4188,  4190,  4192,  4194,  4196,  4199,  4202,  4206,  4210,  4211,\n+    4213,  4215,  4217,  4219,  4221,  4223,  4225,  4227,  4233,  4237,\n+    4238,  4240,  4242,  4244,  4246,  4248,  4253,  4261,  4268,  4271,\n+    4272,  4274,  4276,  4278,  4280,  4294,  4311,  4313,  4316,  4317,\n+    4319,  4320,  4322,  4323,  4326,  4327,  4329,  4330,  4337,  4346,\n+    4353,  4362,  4369,  4378,  4382,  4385,  4387,  4388,  4393,  4400,\n+    4404,  4407,  4412,  4416,  4422,  4424,  4425,  4427,  4429,  4430,\n+    4432,  4434,  4436,  4438,  4440,  4442,  4444,  4446,  4448,  4450,\n+    4452,  4454,  4456,  4458,  4460,  4462,  4464,  4466,  4468,  4470,\n+    4472,  4474,  4476,  4478,  4480,  4482,  4484,  4486,  4488,  4490,\n+    4492,  4494,  4496,  4498,  4500,  4502,  4506,  4508,  4510,  4512,\n+    4514,  4516,  4518,  4521,  4523,  4525,  4528,  4532,  4536,  4540,\n+    4542,  4546,  4550,  4553,  4557,  4561,  4565,  4569,  4571,  4573,\n+    4575,  4577,  4581,  4587,  4589,  4591,  4593,  4595,  4599,  4602,\n+    4605,  4609,  4611,  4613,  4618,  4625,  4631,  4636,  4643,  4645,\n+    4647,  4649,  4651,  4653,  4655,  4656,  4658,  4662,  4664,  4665,\n+    4673,  4677,  4679,  4682,  4686,  4689,  4690,  4693,  4694,  4697,\n+    4702,  4708,  4712,  4718,  4720,  4721,  4724,  4725,  4728,  4730,\n+    4732,  4734,  4737,  4741,  4744,  4747,  4750,  4753,  4757,  4762,\n+    4766,  4768,  4770,  4772,  4774,  4775,  4777,  4781,  4783,  4787,\n+    4790,  4800,  4813,  4825,  4838,  4853,  4857,  4862,  4867,  4868,\n+    4876,  4887,  4897,  4900,  4904,  4905,  4910,  4912,  4914,  4916,\n+    4918,  4920,  4922,  4924,  4926,  4928,  4930,  4932,  4934,  4936,\n+    4938,  4940,  4942,  4944,  4946,  4948,  4950,  4952,  4954,  4956,\n+    4958,  4960,  4962,  4964,  4966,  4968,  4970,  4972,  4974,  4976,\n+    4978,  4980,  4982,  4984,  4986,  4988,  4990,  4992,  4994,  4996,\n+    4998,  5000,  5002,  5004,  5006,  5008,  5010,  5012,  5014,  5016,\n+    5018,  5020,  5022,  5024,  5026,  5028,  5030,  5032,  5034,  5036,\n+    5038,  5040,  5042,  5044,  5046,  5048,  5050,  5052,  5054,  5056,\n+    5058,  5060,  5062,  5064,  5066,  5068,  5070,  5072,  5074,  5076,\n+    5078,  5080,  5082,  5084,  5086,  5088,  5090,  5092,  5094,  5096,\n+    5098,  5100,  5102,  5104,  5106,  5108,  5110,  5112,  5114,  5116,\n+    5118,  5120,  5122,  5124,  5126,  5128,  5130,  5132,  5134,  5136,\n+    5138,  5140,  5142,  5144,  5146,  5148,  5150,  5152,  5154,  5156,\n+    5158,  5160,  5162,  5164,  5166,  5168,  5170,  5172,  5174,  5176,\n+    5178,  5180,  5182,  5184,  5186,  5188,  5190,  5192,  5194,  5196,\n+    5198,  5200,  5202,  5204,  5206,  5208,  5210,  5212,  5214,  5216,\n+    5218,  5220,  5222,  5224,  5226,  5228,  5230,  5232,  5234,  5236,\n+    5238,  5240,  5242,  5244,  5246,  5248,  5250,  5252,  5254,  5256,\n+    5258,  5260,  5262,  5264,  5266,  5268,  5270,  5272,  5274,  5276,\n+    5278,  5280,  5282,  5284,  5286,  5288,  5290,  5292,  5294,  5296,\n+    5298,  5300,  5302,  5304,  5306,  5308,  5310,  5312,  5314,  5316,\n+    5318,  5320,  5322,  5324,  5326,  5328,  5330,  5332,  5334,  5336,\n+    5338,  5340,  5342,  5344,  5346,  5348,  5350,  5352,  5354,  5356,\n+    5358,  5360,  5362,  5364,  5366,  5368,  5370,  5372,  5374,  5376,\n+    5378,  5380,  5382,  5384,  5386,  5388,  5390,  5392,  5394,  5396,\n+    5398,  5400,  5402,  5404,  5406,  5408,  5410,  5412,  5414,  5416,\n+    5418,  5420,  5422,  5424,  5426,  5428,  5430,  5432,  5434,  5436,\n+    5438,  5440,  5442,  5444,  5446,  5448,  5450,  5452,  5454,  5456,\n+    5458,  5460,  5462,  5464,  5466,  5468,  5470,  5472,  5474,  5476,\n+    5478,  5480,  5482,  5484,  5486,  5488,  5490,  5492,  5494,  5496,\n+    5498,  5500,  5502,  5504,  5506,  5508,  5510,  5512,  5514,  5516,\n+    5518,  5520,  5522,  5524,  5526,  5528,  5530,  5532,  5534,  5536,\n+    5538,  5540,  5542,  5544,  5546,  5548,  5550,  5552,  5554,  5556,\n+    5558,  5560,  5562,  5564,  5566,  5568,  5570,  5572,  5574,  5576,\n+    5578,  5580,  5582,  5584,  5586,  5588,  5590,  5592,  5594,  5596,\n+    5598,  5600,  5602,  5604,  5606,  5608,  5610,  5612,  5614,  5616,\n+    5618,  5620,  5622,  5624,  5626,  5628,  5630,  5632,  5634,  5636,\n+    5638,  5640,  5642,  5644,  5646,  5648,  5650,  5652,  5654,  5656,\n+    5658,  5660,  5662,  5664,  5666,  5668,  5670,  5672,  5674,  5676,\n+    5678,  5680,  5682,  5684,  5686,  5688,  5690,  5692,  5694,  5696,\n+    5698,  5700,  5702,  5704,  5706,  5708,  5710,  5712,  5714,  5716,\n+    5718,  5720,  5722,  5724,  5726,  5728,  5730,  5732,  5734,  5736,\n+    5738,  5740,  5742,  5744,  5746,  5748,  5750,  5752,  5754,  5756,\n+    5758,  5760,  5762,  5764,  5766,  5768,  5770,  5772,  5774,  5776,\n+    5778,  5780,  5782,  5784,  5786,  5788,  5790,  5792,  5794,  5796,\n+    5798,  5800,  5802,  5804,  5806,  5808,  5810,  5812,  5814,  5816,\n+    5818,  5820,  5822,  5824,  5826,  5828,  5830,  5832,  5834,  5836,\n+    5838,  5840,  5842,  5844,  5846,  5848,  5850,  5852,  5854,  5856,\n+    5858,  5860,  5862,  5864,  5866,  5868,  5870,  5872,  5874,  5876,\n+    5878,  5880,  5882,  5884,  5886,  5888,  5890,  5892,  5894,  5896,\n+    5898,  5900,  5902,  5904,  5906,  5908,  5910,  5912,  5914,  5916,\n+    5918,  5920,  5922,  5924,  5926,  5928,  5930,  5932,  5934,  5936,\n+    5938,  5940,  5942,  5944,  5946,  5948,  5950,  5952,  5954,  5956,\n+    5958,  5960,  5962,  5964,  5966,  5968,  5970,  5972,  5974,  5976,\n+    5978,  5980,  5982,  5984,  5986,  5988,  5990,  5992,  5994,  5996,\n+    5998,  6000,  6002,  6004,  6006,  6008,  6010,  6012,  6014,  6016,\n+    6018,  6020,  6022,  6024,  6026,  6028,  6030,  6032,  6034,  6036,\n+    6038,  6040,  6042,  6044,  6046,  6048,  6050,  6052,  6054,  6056,\n+    6058,  6060,  6062,  6064,  6066,  6068,  6070,  6072,  6074,  6076,\n+    6078,  6080,  6082,  6084,  6086,  6088,  6090,  6092,  6094,  6096,\n+    6098,  6100,  6102,  6104,  6106,  6108,  6110,  6112,  6114,  6116,\n+    6118\n };\n \n /* YYRHS -- A `-1'-separated list of the rules' RHS.  */\n static const yytype_int16 yyrhs[] =\n {\n      512,     0,    -1,   513,    -1,   513,   503,   514,    -1,   514,\n-      -1,   887,    -1,   559,    -1,   515,    -1,   920,    -1,   921,\n-      -1,   932,    -1,   888,    -1,   628,    -1,   935,    -1,   553,\n-      -1,   624,    -1,   877,    -1,   555,    -1,   569,    -1,   549,\n-      -1,   526,    -1,   916,    -1,   922,    -1,   617,    -1,   557,\n-      -1,   892,    -1,   890,    -1,   891,    -1,   880,    -1,   529,\n-      -1,   909,    -1,   552,    -1,   874,    -1,   527,    -1,   645,\n-      -1,   566,    -1,   627,    -1,   568,    -1,   911,    -1,   925,\n-      -1,   903,    -1,   928,    -1,   933,    -1,    -1,    32,   405,\n-     731,   523,    -1,    32,   405,   186,   148,   731,   523,    -1,\n-      32,   197,   852,   523,    -1,    32,   197,   186,   148,   852,\n-     523,    -1,    32,   370,   852,   523,    -1,    32,   370,   186,\n-     148,   852,   523,    -1,    32,   454,   852,   523,    -1,    32,\n-     454,   186,   148,   852,   523,    -1,   518,    -1,   516,   518,\n-      -1,   375,   113,   774,    -1,   133,   113,    -1,   347,    -1,\n-     347,   561,   562,    -1,   375,   563,    -1,   375,   171,   616,\n-      -1,   522,    -1,   519,   504,   522,    -1,    26,   596,    -1,\n-      26,   186,   267,   148,   596,    -1,    26,    80,   596,    -1,\n-      26,    80,   186,   267,   148,   596,    -1,    32,   528,   862,\n-     517,    -1,    32,   528,   862,   133,   267,   272,    -1,    32,\n-     528,   862,   375,   267,   272,    -1,    32,   528,   862,   375,\n-     391,   565,    -1,    32,   528,   862,   375,   584,    -1,    32,\n-     528,   862,   345,   584,    -1,    32,   528,   862,   375,   394,\n-     862,    -1,    32,   528,   862,    26,   171,   616,    40,   185,\n-     572,    -1,    32,   528,   862,   516,    -1,    32,   528,   862,\n-     133,   185,    -1,    32,   528,   862,   133,   185,   186,   148,\n-      -1,   133,   528,   186,   148,   862,   621,    -1,   133,   528,\n-     862,   621,    -1,    32,   528,   862,   525,   427,   744,   740,\n-     521,    -1,    32,   528,   862,   524,    -1,    26,   586,    -1,\n-      32,    91,   856,   570,    -1,   445,    91,   856,    -1,   133,\n-      91,   186,   148,   856,   621,    -1,   133,    91,   856,   621,\n-      -1,   375,   239,    -1,   375,   436,    -1,   375,   584,    -1,\n-     345,   584,    -1,   524,    -1,   442,   774,    -1,    -1,   580,\n-      -1,   375,   580,    -1,    26,   580,    -1,   133,   594,    -1,\n+      -1,   892,    -1,   560,    -1,   515,    -1,   925,    -1,   926,\n+      -1,   938,    -1,   893,    -1,   629,    -1,   941,    -1,   554,\n+      -1,   625,    -1,   882,    -1,   556,    -1,   570,    -1,   550,\n+      -1,   526,    -1,   921,    -1,   927,    -1,   618,    -1,   558,\n+      -1,   897,    -1,   895,    -1,   896,    -1,   885,    -1,   529,\n+      -1,   914,    -1,   553,    -1,   879,    -1,   527,    -1,   646,\n+      -1,   567,    -1,   628,    -1,   569,    -1,   916,    -1,   930,\n+      -1,   908,    -1,   933,    -1,   939,    -1,    -1,    32,   405,\n+     732,   523,    -1,    32,   405,   186,   148,   732,   523,    -1,\n+      32,   197,   857,   523,    -1,    32,   197,   186,   148,   857,\n+     523,    -1,    32,   370,   857,   523,    -1,    32,   370,   186,\n+     148,   857,   523,    -1,    32,   454,   857,   523,    -1,    32,\n+     454,   186,   148,   857,   523,    -1,   518,    -1,   516,   518,\n+      -1,   375,   113,   775,    -1,   133,   113,    -1,   347,    -1,\n+     347,   562,   563,    -1,   375,   564,    -1,   375,   171,   617,\n+      -1,   522,    -1,   519,   504,   522,    -1,    26,   597,    -1,\n+      26,   186,   267,   148,   597,    -1,    26,    80,   597,    -1,\n+      26,    80,   186,   267,   148,   597,    -1,    32,   528,   867,\n+     517,    -1,    32,   528,   867,   133,   267,   272,    -1,    32,\n+     528,   867,   375,   267,   272,    -1,    32,   528,   867,   375,\n+     391,   566,    -1,    32,   528,   867,   375,   585,    -1,    32,\n+     528,   867,   345,   585,    -1,    32,   528,   867,   375,   394,\n+     867,    -1,    32,   528,   867,    26,   171,   617,    40,   185,\n+     573,    -1,    32,   528,   867,   516,    -1,    32,   528,   867,\n+     133,   185,    -1,    32,   528,   867,   133,   185,   186,   148,\n+      -1,   133,   528,   186,   148,   867,   622,    -1,   133,   528,\n+     867,   622,    -1,    32,   528,   867,   525,   427,   745,   741,\n+     521,    -1,    32,   528,   867,   524,    -1,    26,   587,    -1,\n+      32,    91,   861,   571,    -1,   445,    91,   861,    -1,   133,\n+      91,   186,   148,   861,   622,    -1,   133,    91,   861,   622,\n+      -1,   375,   239,    -1,   375,   436,    -1,   375,   585,    -1,\n+     345,   585,    -1,   524,    -1,   442,   775,    -1,    -1,   581,\n+      -1,   375,   581,    -1,    26,   581,    -1,   133,   595,    -1,\n      520,    -1,   523,   504,   520,    -1,   286,   500,   519,   501,\n-      -1,   375,   105,    -1,   375,    -1,    -1,   109,   856,    -1,\n-     109,   316,   856,    -1,   109,    30,    -1,   109,   316,    30,\n-      -1,    32,   361,   856,   341,   416,   856,    -1,    32,   405,\n-     731,   341,   416,   856,    -1,    32,   405,   186,   148,   731,\n-     341,   416,   856,    -1,    32,   370,   852,   341,   416,   856,\n-      -1,    32,   370,   186,   148,   852,   341,   416,   856,    -1,\n-      32,   454,   852,   341,   416,   856,    -1,    32,   454,   186,\n-     148,   852,   341,   416,   856,    -1,    32,   197,   852,   341,\n-     416,   856,    -1,    32,   197,   186,   148,   852,   341,   416,\n-     856,    -1,    32,   405,   731,   341,   528,   856,   416,   856,\n-      -1,    32,   405,   186,   148,   731,   341,   528,   856,   416,\n-     856,    -1,    32,   405,   731,   341,    91,   856,   416,   856,\n-      -1,    32,   405,   186,   148,   731,   341,    91,   856,   416,\n-     856,    -1,    80,    -1,    -1,   533,   207,   536,   214,   531,\n-     530,   537,   539,    -1,   645,    -1,   295,   540,   447,   645,\n-      -1,   500,   544,   501,   645,    -1,   500,   544,   501,   295,\n-     540,   447,   645,    -1,   113,   448,    -1,   852,    -1,   852,\n-      40,   862,    -1,   500,   547,   501,   737,    -1,   282,    91,\n-     856,    -1,    -1,   657,    -1,    -1,   862,   836,    -1,   548,\n-     489,   774,    -1,   500,   541,   501,   489,   774,    -1,   287,\n-     343,    -1,   287,   187,    -1,    -1,   282,    89,   532,   129,\n-     439,   375,   546,   737,    -1,   282,    89,   532,   129,   268,\n-      -1,    -1,   862,   542,   543,   672,   673,    -1,   781,   542,\n-     543,   672,   673,    -1,   500,   774,   501,   542,   543,   672,\n-     673,    -1,   349,   842,    -1,    -1,   441,    -1,   404,    -1,\n-     548,    -1,   541,   504,   548,    -1,    78,   867,    -1,    -1,\n-     867,    -1,    -1,   534,    -1,   544,   504,   534,    -1,   535,\n-      -1,   545,   504,   535,    -1,   545,    -1,   545,   504,    -1,\n-     538,    -1,   547,   504,   538,    -1,   862,   836,    -1,    98,\n-     427,   852,    40,   140,   646,    -1,    98,   427,   852,    40,\n-     140,   500,   550,   501,    -1,    98,   427,   852,    40,   744,\n-      -1,   551,    -1,    -1,   861,    -1,   551,   504,   861,    -1,\n-     313,   862,    -1,   313,   862,   489,   908,    -1,   313,   862,\n-     500,   814,   501,    -1,    98,   106,   852,    -1,    98,   554,\n-     106,   852,    -1,    98,   106,   186,   267,   148,   852,    -1,\n-      98,   287,   343,   106,   852,    -1,    98,   106,   852,   167,\n-     861,    -1,    98,   106,   186,   267,   148,   852,   167,   861,\n-      -1,    98,   287,   343,   106,   852,   167,   861,    -1,   861,\n-      -1,    98,   615,   370,   852,   556,    -1,    98,   615,   370,\n-     186,   267,   148,   852,   556,    -1,    98,   287,   343,   615,\n-     370,   852,   556,    -1,   560,    -1,    -1,   147,   856,   558,\n-      -1,    98,   615,   405,   937,    40,   147,   856,   558,   936,\n-      -1,    98,   615,   405,   186,   267,   148,   937,    40,   147,\n-     856,   558,   936,    -1,   500,   812,   501,    -1,    -1,    32,\n-     370,   852,   560,    -1,    32,   370,   186,   148,   852,   560,\n-      -1,   563,    -1,   560,   563,    -1,   462,    -1,   486,    -1,\n-      -1,     4,    -1,   491,     4,    -1,   492,     4,    -1,   565,\n-      -1,    40,   746,    -1,    60,   562,    -1,   104,    -1,   265,\n-     104,    -1,   196,   564,   562,    -1,   245,   562,    -1,   253,\n-     562,    -1,   265,   245,    -1,   265,   253,    -1,   296,    59,\n-     867,    -1,   370,   258,   867,    -1,   389,   561,   562,    -1,\n-     347,    -1,   347,   561,   562,    -1,    59,    -1,    -1,   860,\n-      -1,   491,   860,    -1,   492,   860,    -1,    22,   567,    -1,\n-      52,   567,    -1,   389,   567,    -1,    84,   567,    -1,   139,\n-     567,    -1,   354,   567,    -1,   465,    -1,   418,    -1,    -1,\n-     440,   852,    -1,    98,   615,   405,   852,   500,   602,   501,\n-     591,   583,    -1,    98,   615,   405,   186,   267,   148,   852,\n-     500,   602,   501,   591,   583,    -1,    98,   287,   343,   615,\n-     405,   852,   500,   602,   501,   591,   583,    -1,    -1,   570,\n-     595,    -1,   610,    -1,   944,    -1,   806,    -1,   562,    -1,\n-     861,    -1,   266,    -1,   500,   560,   501,    -1,    -1,   861,\n-      -1,   265,    25,    -1,   348,    -1,    63,    -1,   375,   272,\n-      -1,   375,   113,    -1,    91,   856,   576,    -1,   576,    -1,\n-     590,    -1,    78,   867,    -1,   267,   272,    -1,   272,    -1,\n-     433,   601,    -1,   319,   221,   601,    -1,    72,   500,   774,\n-     501,   585,    -1,   442,    86,   856,    -1,   113,   775,    -1,\n-     335,   852,   604,   613,   582,    -1,   456,    -1,   395,    -1,\n-     577,    -1,    -1,   171,   616,    40,   185,   572,    -1,   171,\n-     616,    40,   500,   774,   501,   578,    -1,    40,   500,   774,\n-     501,   578,    -1,   594,   573,    -1,   282,   439,   574,    -1,\n-     581,    -1,   606,    -1,   581,   606,    -1,   606,   581,    -1,\n-      -1,   282,    84,   133,    -1,   282,    84,   118,   357,    -1,\n-     282,    84,   318,   357,    -1,    -1,   500,   588,   501,    -1,\n-     265,   199,    -1,    -1,    91,   856,   611,    -1,   611,    -1,\n-      83,    -1,    92,    -1,   114,    -1,   185,    -1,   198,    -1,\n-     391,    -1,   394,    -1,    30,    -1,   607,    -1,   588,   504,\n-     607,    -1,   442,   197,   598,    -1,   115,    -1,   267,   115,\n-      -1,   201,   116,    -1,   201,   189,    -1,   462,   584,    -1,\n-     462,   280,    -1,   464,   280,    -1,    -1,   500,   597,   501,\n-      -1,   593,   195,   587,    -1,   593,   145,   587,    -1,    -1,\n-     871,    -1,   267,   115,    -1,   115,    -1,   201,   189,    -1,\n-     201,   116,    -1,   267,   444,    -1,   265,   199,    -1,   862,\n-     744,   605,    -1,   862,   743,   579,   605,    -1,   600,    -1,\n-     597,   504,   600,    -1,   862,    -1,   596,    -1,   614,    -1,\n-     586,    -1,   871,   489,   571,    -1,   871,    -1,   462,   592,\n-      -1,    -1,   612,    -1,   612,   504,    -1,    -1,   862,    -1,\n-     500,   608,   501,    -1,    -1,   605,   575,    -1,    -1,   282,\n-     118,   574,    -1,   871,   489,   571,    -1,   871,    -1,   871,\n-     502,   871,   489,   571,    -1,   871,   502,   871,    -1,   603,\n-      -1,   608,   504,   603,    -1,   608,    -1,   608,   504,    -1,\n-     744,    -1,   864,   868,   495,   427,    -1,   376,   864,   868,\n-     495,   427,    -1,    72,   500,   774,   501,   570,    -1,   433,\n-     500,   609,   501,   601,   570,    -1,   433,   589,   570,    -1,\n-     319,   221,   500,   609,   501,   601,   570,    -1,   319,   221,\n-     589,   570,    -1,   164,   221,   500,   609,   501,   335,   852,\n-     604,   613,   582,   570,    -1,   599,    -1,   612,   504,   599,\n-      -1,   243,   168,    -1,   243,   300,    -1,   243,   381,    -1,\n-      -1,   231,   852,   593,    -1,   411,    -1,   409,    -1,   235,\n-     411,    -1,   235,   409,    -1,   173,   411,    -1,   173,   409,\n-      -1,   436,    -1,    -1,    33,    -1,    59,   113,    -1,   133,\n-     618,   186,   148,   620,   621,    -1,   133,   618,   620,   621,\n-      -1,   133,   619,   186,   148,   853,   621,    -1,   133,   619,\n-     853,   621,    -1,   133,   622,   856,   282,   867,   621,    -1,\n-     133,   622,   186,   148,   856,   282,   867,   621,    -1,   133,\n-     427,   623,   621,    -1,   133,   427,   186,   148,   623,   621,\n-      -1,   405,    -1,   106,    -1,   370,    -1,   169,    -1,   240,\n-      -1,   240,   405,    -1,   454,    -1,   244,   454,    -1,   197,\n-      -1,   164,   405,    -1,    79,    -1,    95,    -1,   361,    -1,\n-     391,    -1,   412,   364,   299,    -1,   412,   364,   125,    -1,\n-     412,   364,   410,    -1,   412,   364,    88,    -1,    24,   246,\n-      -1,   142,   421,    -1,   152,    -1,   164,   105,   466,    -1,\n-     325,    -1,   373,    -1,   867,    -1,   620,   504,   867,    -1,\n-      63,    -1,   348,    -1,    -1,   310,    -1,   358,    -1,   421,\n-      -1,   744,    -1,   623,   504,   744,    -1,    98,   615,   625,\n-     852,   626,    40,   405,   645,    -1,    98,   615,   625,   186,\n-     267,   148,   852,   626,    40,   405,   645,    -1,    98,   287,\n-     343,   615,   625,   852,   626,    40,   405,   645,    -1,    98,\n-     615,   625,   852,   626,    40,   774,    -1,    98,   615,   625,\n-     186,   267,   148,   852,   626,    40,   774,    -1,    98,   287,\n-     343,   615,   625,   852,   626,    40,   774,    -1,   169,    -1,\n-     240,    -1,   500,   501,    -1,   500,   814,   501,    -1,   533,\n-     439,   917,   375,   546,   711,   918,   539,    -1,    96,   640,\n-     852,   604,   638,   629,   634,   643,   630,   561,   635,    -1,\n-      96,   500,   645,   501,   416,   634,   643,   561,   635,    -1,\n-     167,    -1,   416,    -1,   632,   120,   861,    -1,    -1,   642,\n-      -1,   631,   504,   642,    -1,   442,    -1,    -1,    40,    -1,\n-      -1,   324,    -1,    -1,   639,    -1,   500,   644,   501,    -1,\n-     900,    -1,   562,    -1,   493,    -1,   500,   631,   501,    -1,\n-      -1,   871,   636,    -1,   462,   280,    -1,    -1,   639,   641,\n-      -1,    -1,    55,    -1,    -1,    55,    -1,   280,    -1,   166,\n-      -1,   119,   633,   861,    -1,   272,   633,   861,    -1,   100,\n-      -1,   181,    -1,   327,   633,   861,    -1,   141,   633,   861,\n-      -1,   163,   327,   608,    -1,   163,   327,   493,    -1,   301,\n-      59,   608,    -1,   301,    59,   493,    -1,   163,   267,   272,\n-     608,    -1,   163,   272,   608,    -1,   137,   861,    -1,   900,\n-      -1,   861,    -1,   392,    -1,   393,    -1,   637,    -1,   644,\n-     504,   637,    -1,   647,    -1,   646,    -1,   500,   647,   501,\n-      -1,   500,   646,   501,    -1,   650,    -1,   648,   669,    -1,\n-     648,   668,   702,   675,    -1,   648,   668,   674,   703,    -1,\n-     657,   648,    -1,   657,   648,   669,    -1,   657,   648,   668,\n-     702,   675,    -1,   657,   648,   668,   674,   703,    -1,   650,\n-      -1,   646,    -1,   368,   666,   841,    -1,    -1,   368,   666,\n-     841,   660,   711,   737,   691,   700,   787,   701,   679,    -1,\n-     368,   665,   843,   660,   711,   737,   691,   700,   787,   701,\n-     679,    -1,   167,   712,   649,   660,   737,   691,   700,   787,\n-     701,   679,    -1,   167,   712,   368,   665,   843,   660,   737,\n-     691,   700,   787,   701,   679,    -1,   710,    -1,   405,   731,\n-      -1,   648,   432,   663,   664,   648,    -1,   648,   432,   663,\n-     648,    -1,   648,   212,   663,   648,    -1,   648,   143,   663,\n-     648,    -1,   652,   714,   442,   843,    -1,   652,   714,   442,\n-     843,   176,    59,   855,    -1,   652,   714,   176,    59,   855,\n-      -1,   652,   714,   282,   656,    -1,   652,   714,   282,   656,\n-     176,    59,   855,    -1,   652,   714,   282,   656,   442,   843,\n-      -1,   652,   714,   282,   656,   442,   843,   176,    59,   855,\n-      -1,   653,   714,   282,   843,   214,   258,   856,   651,   855,\n-      -1,   653,   714,   282,   843,    -1,   447,    -1,   448,    -1,\n-     305,    -1,   307,    -1,   437,    -1,   306,    -1,   775,    -1,\n-     775,   193,   500,   647,   501,    -1,   717,    -1,   654,    -1,\n-     655,   504,   654,    -1,   655,    -1,   655,   504,    -1,   462,\n-     658,    -1,   486,   658,    -1,   462,   333,   658,    -1,   659,\n-      -1,   658,   504,   659,    -1,   856,   869,    40,   500,   876,\n-     501,    -1,   214,   661,    -1,    -1,   411,   662,   852,    -1,\n-     409,   662,   852,    -1,   235,   411,   662,   852,    -1,   235,\n-     409,   662,   852,    -1,   173,   411,   662,   852,    -1,   173,\n-     409,   662,   852,    -1,   436,   662,   852,    -1,   405,   852,\n-      -1,   852,    -1,   405,    -1,    -1,    30,    -1,   128,    -1,\n-      -1,    59,   258,    -1,   128,    -1,   128,   282,   500,   812,\n-     501,    -1,    30,    -1,    -1,   187,   274,    -1,   346,   274,\n-      -1,    -1,   669,    -1,    -1,   288,    59,   670,    -1,   288,\n-      59,    30,   672,   673,    -1,   671,    -1,   670,   504,   671,\n-      -1,   774,   442,   806,   673,    -1,   774,   672,   673,    -1,\n-      41,    -1,   122,    -1,    -1,   485,   159,    -1,   485,   225,\n-      -1,    -1,   676,   677,    -1,   677,   676,    -1,   676,    -1,\n-     677,    -1,   674,    -1,    -1,   232,   685,    -1,   232,   685,\n-     504,   686,    -1,   157,   690,   687,   689,   283,    -1,   157,\n-     690,   689,   283,    -1,   279,   686,    -1,   279,   687,   689,\n-      -1,     4,   495,    -1,     9,   495,    -1,     4,   304,    -1,\n-       9,   304,    -1,     9,    -1,     9,   357,    -1,   442,   359,\n-     681,    -1,    -1,   862,    -1,    -1,   680,   500,   678,   501,\n-     684,    -1,   678,    -1,   678,   500,   862,   501,    -1,   678,\n-     500,   862,   504,     9,   501,    -1,   407,   681,    -1,   682,\n-      -1,    -1,   342,   500,     9,   501,    -1,    -1,   774,    -1,\n-      30,    -1,   774,   495,    -1,     4,   304,    -1,     9,   304,\n-      -1,   774,    -1,   776,    -1,   491,   688,    -1,   492,   688,\n-      -1,   860,    -1,     4,    -1,   356,    -1,   357,    -1,   159,\n-      -1,   264,    -1,   176,    59,   693,    -1,   176,    59,    30,\n-      -1,    -1,   694,    -1,   692,   504,   694,    -1,   692,    -1,\n-     692,   504,    -1,   774,    -1,   695,    -1,   697,    -1,   696,\n-      -1,   698,    -1,   500,   501,    -1,   355,   500,   812,   501,\n-      -1,   101,   500,   812,   501,    -1,   177,   377,   500,   693,\n-     501,    -1,   177,    -1,   178,    -1,   180,   774,    -1,    -1,\n-     326,   774,    -1,    -1,   704,    -1,   162,   329,   283,    -1,\n-     702,    -1,    -1,   705,    -1,   704,   705,    -1,   706,   707,\n-     708,    -1,   162,   439,    -1,   162,   265,   221,   439,    -1,\n-     162,   378,    -1,   162,   221,   378,    -1,   277,   851,    -1,\n-      -1,   271,    -1,   382,   238,    -1,    -1,   448,   500,   812,\n-     501,    -1,   709,   504,   500,   812,   501,    -1,   709,    -1,\n-     709,   504,    -1,   167,   713,    -1,    -1,   714,    -1,   712,\n-     504,   714,    -1,   712,    -1,   712,   504,    -1,   731,   726,\n-     683,    -1,   732,   727,   683,    -1,   710,   725,   683,    -1,\n-     226,   732,   727,    -1,   646,   726,   683,    -1,   226,   646,\n-     726,    -1,   724,    -1,   500,   724,   501,   725,    -1,   714,\n-     305,   500,   843,   162,   720,   715,   501,   726,    -1,   714,\n-     437,   716,   500,   721,   162,   723,   501,   726,    -1,   176,\n-      59,   854,    -1,    -1,   194,   274,    -1,   144,   274,    -1,\n-      -1,   775,   193,   500,   843,   501,    -1,   775,   193,   863,\n-      -1,   777,    -1,   500,   810,   501,    -1,   718,   193,   500,\n-     843,   501,    -1,   718,   193,   863,    -1,   719,    -1,   720,\n-     719,    -1,   863,    -1,   500,   854,   501,    -1,   721,   193,\n-     500,   843,   501,    -1,   722,    -1,   723,   722,    -1,   500,\n-     724,   501,    -1,   714,    99,   219,   714,    -1,   714,   728,\n-     219,   714,   730,    -1,   714,   219,   714,   730,    -1,   714,\n-     261,   728,   219,   714,    -1,   714,   261,   219,   714,    -1,\n-     714,    42,   728,   219,   714,   730,    -1,   714,    42,   219,\n-     714,   730,    -1,   714,   312,   219,   714,    -1,   714,    37,\n-     219,   714,   730,    -1,   714,   369,   219,   714,   730,    -1,\n-      40,   863,   500,   854,   501,    -1,    40,   863,    -1,   862,\n-     500,   854,   501,    -1,   862,    -1,   725,    -1,    -1,   725,\n-      -1,    40,   500,   738,   501,    -1,    40,   863,   500,   738,\n-     501,    -1,   862,   500,   738,   501,    -1,    -1,   168,   729,\n-      -1,   229,   729,    -1,   352,   729,    -1,   369,    -1,    37,\n-      -1,   203,    -1,   291,    -1,    -1,   442,   500,   854,   501,\n-      -1,   282,   774,    -1,   852,    -1,   852,   493,    -1,   283,\n-     852,    -1,   283,   500,   852,   501,    -1,   781,   736,    -1,\n-     357,   167,   500,   734,   501,   736,    -1,   781,   735,    -1,\n-     733,    -1,   734,   504,   733,    -1,    40,   500,   738,   501,\n-      -1,    -1,   486,   289,    -1,    -1,   459,   774,    -1,    -1,\n-     739,    -1,   738,   504,   739,    -1,   863,   744,   740,    -1,\n-      78,   867,    -1,    -1,   862,   744,    -1,   741,   504,   862,\n-     744,    -1,   356,    -1,   398,    -1,   744,    -1,    -1,   746,\n-     745,    -1,   376,   746,   745,    -1,   746,    39,   498,   860,\n-     499,    -1,   376,   746,    39,   498,   860,   499,    -1,   746,\n-      39,    -1,   376,   746,    39,    -1,   742,   500,   741,   501,\n-     745,    -1,   241,   500,   816,   501,   745,    -1,   432,   500,\n-     741,   501,   745,    -1,   745,   498,   499,    -1,   745,   498,\n-     860,   499,    -1,    -1,   748,    -1,   750,    -1,   752,    -1,\n-     756,    -1,   762,    -1,   763,   773,    -1,   763,   500,   860,\n-     501,    -1,   750,    -1,   753,    -1,   757,    -1,   762,    -1,\n-     866,   749,    -1,   500,   813,   501,    -1,    -1,   210,    -1,\n-     211,    -1,   383,    -1,    54,    -1,   330,    -1,   160,   751,\n-      -1,   132,   315,    -1,   111,   749,    -1,   110,   749,    -1,\n-     275,   749,    -1,    57,    -1,   500,   860,   501,    -1,    -1,\n-     754,    -1,   755,    -1,   754,    -1,   755,    -1,    56,   761,\n-     500,   812,   501,    -1,    56,   761,    -1,   758,    -1,   759,\n-      -1,   758,    -1,   759,    -1,   760,   500,   860,   501,    -1,\n-     760,    -1,    70,   761,    -1,    69,   761,    -1,   449,    -1,\n-     260,    70,   761,    -1,   260,    69,   761,    -1,   262,   761,\n-      -1,   451,    -1,    -1,   415,   500,   860,   501,   764,    -1,\n-     415,   764,    -1,   414,   500,   860,   501,   764,    -1,   414,\n-     764,    -1,   213,    -1,   486,   414,   483,    -1,   464,   414,\n-     483,    -1,    -1,   480,    -1,   481,    -1,   255,    -1,   256,\n-      -1,   107,    -1,   108,    -1,   183,    -1,   184,    -1,   251,\n-      -1,   252,    -1,   365,    -1,   366,    -1,   249,    -1,   250,\n-      -1,   247,    -1,   248,    -1,   765,    -1,   766,    -1,   767,\n+      -1,   375,   105,    -1,   375,    -1,    -1,   109,   861,    -1,\n+     109,   316,   861,    -1,   109,    30,    -1,   109,   316,    30,\n+      -1,    32,   361,   861,   341,   416,   861,    -1,    32,   405,\n+     732,   341,   416,   861,    -1,    32,   405,   186,   148,   732,\n+     341,   416,   861,    -1,    32,   370,   857,   341,   416,   861,\n+      -1,    32,   370,   186,   148,   857,   341,   416,   861,    -1,\n+      32,   454,   857,   341,   416,   861,    -1,    32,   454,   186,\n+     148,   857,   341,   416,   861,    -1,    32,   197,   857,   341,\n+     416,   861,    -1,    32,   197,   186,   148,   857,   341,   416,\n+     861,    -1,    32,   405,   732,   341,   528,   861,   416,   861,\n+      -1,    32,   405,   186,   148,   732,   341,   528,   861,   416,\n+     861,    -1,    32,   405,   732,   341,    91,   861,   416,   861,\n+      -1,    32,   405,   186,   148,   732,   341,    91,   861,   416,\n+     861,    -1,    80,    -1,    -1,   534,   207,   537,   214,   531,\n+     532,   530,   538,   540,    -1,   646,    -1,   295,   541,   447,\n+     646,    -1,   500,   545,   501,   646,    -1,   500,   545,   501,\n+     295,   541,   447,   646,    -1,   113,   448,    -1,   857,    -1,\n+     857,    40,   867,    -1,    59,   258,    -1,    59,   311,    -1,\n+      -1,   500,   548,   501,   738,    -1,   282,    91,   861,    -1,\n+      -1,   658,    -1,    -1,   867,   841,    -1,   549,   489,   775,\n+      -1,   500,   542,   501,   489,   775,    -1,   287,   343,    -1,\n+     287,   187,    -1,    -1,   282,    89,   533,   129,   439,   375,\n+     547,   738,    -1,   282,    89,   533,   129,   268,    -1,    -1,\n+     867,   543,   544,   673,   674,    -1,   782,   543,   544,   673,\n+     674,    -1,   500,   775,   501,   543,   544,   673,   674,    -1,\n+     349,   847,    -1,    -1,   441,    -1,   404,    -1,   549,    -1,\n+     542,   504,   549,    -1,    78,   872,    -1,    -1,   872,    -1,\n+      -1,   535,    -1,   545,   504,   535,    -1,   536,    -1,   546,\n+     504,   536,    -1,   546,    -1,   546,   504,    -1,   539,    -1,\n+     548,   504,   539,    -1,   867,   841,    -1,    98,   427,   857,\n+      40,   140,   647,    -1,    98,   427,   857,    40,   140,   500,\n+     551,   501,    -1,    98,   427,   857,    40,   745,    -1,   552,\n+      -1,    -1,   866,    -1,   552,   504,   866,    -1,   313,   867,\n+      -1,   313,   867,   489,   913,    -1,   313,   867,   500,   819,\n+     501,    -1,    98,   106,   857,    -1,    98,   555,   106,   857,\n+      -1,    98,   106,   186,   267,   148,   857,    -1,    98,   287,\n+     343,   106,   857,    -1,    98,   106,   857,   167,   866,    -1,\n+      98,   106,   186,   267,   148,   857,   167,   866,    -1,    98,\n+     287,   343,   106,   857,   167,   866,    -1,   866,    -1,    98,\n+     616,   370,   857,   557,    -1,    98,   616,   370,   186,   267,\n+     148,   857,   557,    -1,    98,   287,   343,   616,   370,   857,\n+     557,    -1,   561,    -1,    -1,   147,   861,   559,    -1,    98,\n+     616,   405,   943,    40,   147,   861,   559,   942,    -1,    98,\n+     616,   405,   186,   267,   148,   943,    40,   147,   861,   559,\n+     942,    -1,   500,   817,   501,    -1,    -1,    32,   370,   857,\n+     561,    -1,    32,   370,   186,   148,   857,   561,    -1,   564,\n+      -1,   561,   564,    -1,   462,    -1,   486,    -1,    -1,     4,\n+      -1,   491,     4,    -1,   492,     4,    -1,   566,    -1,    40,\n+     747,    -1,    60,   563,    -1,   104,    -1,   265,   104,    -1,\n+     196,   565,   563,    -1,   245,   563,    -1,   253,   563,    -1,\n+     265,   245,    -1,   265,   253,    -1,   296,    59,   872,    -1,\n+     370,   258,   872,    -1,   389,   562,   563,    -1,   347,    -1,\n+     347,   562,   563,    -1,    59,    -1,    -1,   865,    -1,   491,\n+     865,    -1,   492,   865,    -1,    22,   568,    -1,    52,   568,\n+      -1,   389,   568,    -1,    84,   568,    -1,   139,   568,    -1,\n+     354,   568,    -1,   465,    -1,   418,    -1,    -1,   440,   857,\n+      -1,    98,   616,   405,   857,   500,   603,   501,   592,   584,\n+      -1,    98,   616,   405,   186,   267,   148,   857,   500,   603,\n+     501,   592,   584,    -1,    98,   287,   343,   616,   405,   857,\n+     500,   603,   501,   592,   584,    -1,    -1,   571,   596,    -1,\n+     611,    -1,   950,    -1,   811,    -1,   563,    -1,   866,    -1,\n+     266,    -1,   500,   561,   501,    -1,    -1,   866,    -1,   265,\n+      25,    -1,   348,    -1,    63,    -1,   375,   272,    -1,   375,\n+     113,    -1,    91,   861,   577,    -1,   577,    -1,   591,    -1,\n+      78,   872,    -1,   267,   272,    -1,   272,    -1,   433,   602,\n+      -1,   319,   221,   602,    -1,    72,   500,   775,   501,   586,\n+      -1,   442,    86,   861,    -1,   113,   776,    -1,   335,   857,\n+     605,   614,   583,    -1,   456,    -1,   395,    -1,   578,    -1,\n+      -1,   171,   617,    40,   185,   573,    -1,   171,   617,    40,\n+     500,   775,   501,   579,    -1,    40,   500,   775,   501,   579,\n+      -1,   595,   574,    -1,   282,   439,   575,    -1,   582,    -1,\n+     607,    -1,   582,   607,    -1,   607,   582,    -1,    -1,   282,\n+      84,   133,    -1,   282,    84,   118,   357,    -1,   282,    84,\n+     318,   357,    -1,    -1,   500,   589,   501,    -1,   265,   199,\n+      -1,    -1,    91,   861,   612,    -1,   612,    -1,    83,    -1,\n+      92,    -1,   114,    -1,   185,    -1,   198,    -1,   391,    -1,\n+     394,    -1,    30,    -1,   608,    -1,   589,   504,   608,    -1,\n+     442,   197,   599,    -1,   115,    -1,   267,   115,    -1,   201,\n+     116,    -1,   201,   189,    -1,   462,   585,    -1,   462,   280,\n+      -1,   464,   280,    -1,    -1,   500,   598,   501,    -1,   594,\n+     195,   588,    -1,   594,   145,   588,    -1,    -1,   876,    -1,\n+     267,   115,    -1,   115,    -1,   201,   189,    -1,   201,   116,\n+      -1,   267,   444,    -1,   265,   199,    -1,   867,   745,   606,\n+      -1,   867,   744,   580,   606,    -1,   601,    -1,   598,   504,\n+     601,    -1,   867,    -1,   597,    -1,   615,    -1,   587,    -1,\n+     876,   489,   572,    -1,   876,    -1,   462,   593,    -1,    -1,\n+     613,    -1,   613,   504,    -1,    -1,   867,    -1,   500,   609,\n+     501,    -1,    -1,   606,   576,    -1,    -1,   282,   118,   575,\n+      -1,   876,   489,   572,    -1,   876,    -1,   876,   502,   876,\n+     489,   572,    -1,   876,   502,   876,    -1,   604,    -1,   609,\n+     504,   604,    -1,   609,    -1,   609,   504,    -1,   745,    -1,\n+     869,   873,   495,   427,    -1,   376,   869,   873,   495,   427,\n+      -1,    72,   500,   775,   501,   571,    -1,   433,   500,   610,\n+     501,   602,   571,    -1,   433,   590,   571,    -1,   319,   221,\n+     500,   610,   501,   602,   571,    -1,   319,   221,   590,   571,\n+      -1,   164,   221,   500,   610,   501,   335,   857,   605,   614,\n+     583,   571,    -1,   600,    -1,   613,   504,   600,    -1,   243,\n+     168,    -1,   243,   300,    -1,   243,   381,    -1,    -1,   231,\n+     857,   594,    -1,   411,    -1,   409,    -1,   235,   411,    -1,\n+     235,   409,    -1,   173,   411,    -1,   173,   409,    -1,   436,\n+      -1,    -1,    33,    -1,    59,   113,    -1,   133,   619,   186,\n+     148,   621,   622,    -1,   133,   619,   621,   622,    -1,   133,\n+     620,   186,   148,   858,   622,    -1,   133,   620,   858,   622,\n+      -1,   133,   623,   861,   282,   872,   622,    -1,   133,   623,\n+     186,   148,   861,   282,   872,   622,    -1,   133,   427,   624,\n+     622,    -1,   133,   427,   186,   148,   624,   622,    -1,   405,\n+      -1,   106,    -1,   370,    -1,   169,    -1,   240,    -1,   240,\n+     405,    -1,   454,    -1,   244,   454,    -1,   197,    -1,   164,\n+     405,    -1,    79,    -1,    95,    -1,   361,    -1,   391,    -1,\n+     412,   364,   299,    -1,   412,   364,   125,    -1,   412,   364,\n+     410,    -1,   412,   364,    88,    -1,    24,   246,    -1,   142,\n+     421,    -1,   152,    -1,   164,   105,   466,    -1,   325,    -1,\n+     373,    -1,   872,    -1,   621,   504,   872,    -1,    63,    -1,\n+     348,    -1,    -1,   310,    -1,   358,    -1,   421,    -1,   745,\n+      -1,   624,   504,   745,    -1,    98,   616,   626,   857,   627,\n+      40,   405,   646,    -1,    98,   616,   626,   186,   267,   148,\n+     857,   627,    40,   405,   646,    -1,    98,   287,   343,   616,\n+     626,   857,   627,    40,   405,   646,    -1,    98,   616,   626,\n+     857,   627,    40,   775,    -1,    98,   616,   626,   186,   267,\n+     148,   857,   627,    40,   775,    -1,    98,   287,   343,   616,\n+     626,   857,   627,    40,   775,    -1,   169,    -1,   240,    -1,\n+     500,   501,    -1,   500,   819,   501,    -1,   534,   439,   922,\n+     375,   547,   712,   923,   540,    -1,    96,   641,   857,   605,\n+     639,   630,   635,   644,   631,   562,   636,    -1,    96,   500,\n+     646,   501,   416,   635,   644,   562,   636,    -1,   167,    -1,\n+     416,    -1,   633,   120,   866,    -1,    -1,   643,    -1,   632,\n+     504,   643,    -1,   442,    -1,    -1,    40,    -1,    -1,   324,\n+      -1,    -1,   640,    -1,   500,   645,   501,    -1,   905,    -1,\n+     563,    -1,   493,    -1,   500,   632,   501,    -1,    -1,   876,\n+     637,    -1,   462,   280,    -1,    -1,   640,   642,    -1,    -1,\n+      55,    -1,    -1,    55,    -1,   280,    -1,   166,    -1,   119,\n+     634,   866,    -1,   272,   634,   866,    -1,   100,    -1,   181,\n+      -1,   327,   634,   866,    -1,   141,   634,   866,    -1,   163,\n+     327,   609,    -1,   163,   327,   493,    -1,   301,    59,   609,\n+      -1,   301,    59,   493,    -1,   163,   267,   272,   609,    -1,\n+     163,   272,   609,    -1,   137,   866,    -1,   905,    -1,   866,\n+      -1,   392,    -1,   393,    -1,   638,    -1,   645,   504,   638,\n+      -1,   648,    -1,   647,    -1,   500,   648,   501,    -1,   500,\n+     647,   501,    -1,   651,    -1,   649,   670,    -1,   649,   669,\n+     703,   676,    -1,   649,   669,   675,   704,    -1,   658,   649,\n+      -1,   658,   649,   670,    -1,   658,   649,   669,   703,   676,\n+      -1,   658,   649,   669,   675,   704,    -1,   651,    -1,   647,\n+      -1,   368,   667,   846,    -1,    -1,   368,   667,   846,   661,\n+     712,   738,   692,   701,   788,   702,   680,    -1,   368,   666,\n+     848,   661,   712,   738,   692,   701,   788,   702,   680,    -1,\n+     167,   713,   650,   661,   738,   692,   701,   788,   702,   680,\n+      -1,   167,   713,   368,   666,   848,   661,   738,   692,   701,\n+     788,   702,   680,    -1,   711,    -1,   405,   732,    -1,   649,\n+     432,   664,   665,   649,    -1,   649,   432,   664,   649,    -1,\n+     649,   212,   664,   649,    -1,   649,   143,   664,   649,    -1,\n+     653,   715,   442,   848,    -1,   653,   715,   442,   848,   176,\n+      59,   860,    -1,   653,   715,   176,    59,   860,    -1,   653,\n+     715,   282,   657,    -1,   653,   715,   282,   657,   176,    59,\n+     860,    -1,   653,   715,   282,   657,   442,   848,    -1,   653,\n+     715,   282,   657,   442,   848,   176,    59,   860,    -1,   654,\n+     715,   282,   848,   214,   258,   861,   652,   860,    -1,   654,\n+     715,   282,   848,    -1,   447,    -1,   448,    -1,   305,    -1,\n+     307,    -1,   437,    -1,   306,    -1,   776,    -1,   776,   193,\n+     500,   648,   501,    -1,   718,    -1,   655,    -1,   656,   504,\n+     655,    -1,   656,    -1,   656,   504,    -1,   462,   659,    -1,\n+     486,   659,    -1,   462,   333,   659,    -1,   660,    -1,   659,\n+     504,   660,    -1,   861,   874,    40,   500,   881,   501,    -1,\n+     214,   662,    -1,    -1,   411,   663,   857,    -1,   409,   663,\n+     857,    -1,   235,   411,   663,   857,    -1,   235,   409,   663,\n+     857,    -1,   173,   411,   663,   857,    -1,   173,   409,   663,\n+     857,    -1,   436,   663,   857,    -1,   405,   857,    -1,   857,\n+      -1,   405,    -1,    -1,    30,    -1,   128,    -1,    -1,    59,\n+     258,    -1,   128,    -1,   128,   282,   500,   817,   501,    -1,\n+      30,    -1,    -1,   187,   274,    -1,   346,   274,    -1,    -1,\n+     670,    -1,    -1,   288,    59,   671,    -1,   288,    59,    30,\n+     673,   674,    -1,   672,    -1,   671,   504,   672,    -1,   775,\n+     442,   811,   674,    -1,   775,   673,   674,    -1,    41,    -1,\n+     122,    -1,    -1,   485,   159,    -1,   485,   225,    -1,    -1,\n+     677,   678,    -1,   678,   677,    -1,   677,    -1,   678,    -1,\n+     675,    -1,    -1,   232,   686,    -1,   232,   686,   504,   687,\n+      -1,   157,   691,   688,   690,   283,    -1,   157,   691,   690,\n+     283,    -1,   279,   687,    -1,   279,   688,   690,    -1,     4,\n+     495,    -1,     9,   495,    -1,     4,   304,    -1,     9,   304,\n+      -1,     9,    -1,     9,   357,    -1,   442,   359,   682,    -1,\n+      -1,   867,    -1,    -1,   681,   500,   679,   501,   685,    -1,\n+     679,    -1,   679,   500,   867,   501,    -1,   679,   500,   867,\n+     504,     9,   501,    -1,   407,   682,    -1,   683,    -1,    -1,\n+     342,   500,     9,   501,    -1,    -1,   775,    -1,    30,    -1,\n+     775,   495,    -1,     4,   304,    -1,     9,   304,    -1,   775,\n+      -1,   777,    -1,   491,   689,    -1,   492,   689,    -1,   865,\n+      -1,     4,    -1,   356,    -1,   357,    -1,   159,    -1,   264,\n+      -1,   176,    59,   694,    -1,   176,    59,    30,    -1,    -1,\n+     695,    -1,   693,   504,   695,    -1,   693,    -1,   693,   504,\n+      -1,   775,    -1,   696,    -1,   698,    -1,   697,    -1,   699,\n+      -1,   500,   501,    -1,   355,   500,   817,   501,    -1,   101,\n+     500,   817,   501,    -1,   177,   377,   500,   694,   501,    -1,\n+     177,    -1,   178,    -1,   180,   775,    -1,    -1,   326,   775,\n+      -1,    -1,   705,    -1,   162,   329,   283,    -1,   703,    -1,\n+      -1,   706,    -1,   705,   706,    -1,   707,   708,   709,    -1,\n+     162,   439,    -1,   162,   265,   221,   439,    -1,   162,   378,\n+      -1,   162,   221,   378,    -1,   277,   856,    -1,    -1,   271,\n+      -1,   382,   238,    -1,    -1,   448,   500,   817,   501,    -1,\n+     710,   504,   500,   817,   501,    -1,   710,    -1,   710,   504,\n+      -1,   167,   714,    -1,    -1,   715,    -1,   713,   504,   715,\n+      -1,   713,    -1,   713,   504,    -1,   732,   727,   684,    -1,\n+     733,   728,   684,    -1,   711,   726,   684,    -1,   226,   733,\n+     728,    -1,   647,   727,   684,    -1,   226,   647,   727,    -1,\n+     725,    -1,   500,   725,   501,   726,    -1,   715,   305,   500,\n+     848,   162,   721,   716,   501,   727,    -1,   715,   437,   717,\n+     500,   722,   162,   724,   501,   727,    -1,   176,    59,   859,\n+      -1,    -1,   194,   274,    -1,   144,   274,    -1,    -1,   776,\n+     193,   500,   848,   501,    -1,   776,   193,   868,    -1,   778,\n+      -1,   500,   815,   501,    -1,   719,   193,   500,   848,   501,\n+      -1,   719,   193,   868,    -1,   720,    -1,   721,   720,    -1,\n+     868,    -1,   500,   859,   501,    -1,   722,   193,   500,   848,\n+     501,    -1,   723,    -1,   724,   723,    -1,   500,   725,   501,\n+      -1,   715,    99,   219,   715,    -1,   715,   729,   219,   715,\n+     731,    -1,   715,   219,   715,   731,    -1,   715,   261,   729,\n+     219,   715,    -1,   715,   261,   219,   715,    -1,   715,    42,\n+     729,   219,   715,   731,    -1,   715,    42,   219,   715,   731,\n+      -1,   715,   312,   219,   715,    -1,   715,    37,   219,   715,\n+     731,    -1,   715,   369,   219,   715,   731,    -1,    40,   868,\n+     500,   859,   501,    -1,    40,   868,    -1,   867,   500,   859,\n+     501,    -1,   867,    -1,   726,    -1,    -1,   726,    -1,    40,\n+     500,   739,   501,    -1,    40,   868,   500,   739,   501,    -1,\n+     867,   500,   739,   501,    -1,    -1,   168,   730,    -1,   229,\n+     730,    -1,   352,   730,    -1,   369,    -1,    37,    -1,   203,\n+      -1,   291,    -1,    -1,   442,   500,   859,   501,    -1,   282,\n+     775,    -1,   857,    -1,   857,   493,    -1,   283,   857,    -1,\n+     283,   500,   857,   501,    -1,   782,   737,    -1,   357,   167,\n+     500,   735,   501,   737,    -1,   782,   736,    -1,   734,    -1,\n+     735,   504,   734,    -1,    40,   500,   739,   501,    -1,    -1,\n+     486,   289,    -1,    -1,   459,   775,    -1,    -1,   740,    -1,\n+     739,   504,   740,    -1,   868,   745,   741,    -1,    78,   872,\n+      -1,    -1,   867,   745,    -1,   742,   504,   867,   745,    -1,\n+     356,    -1,   398,    -1,   745,    -1,    -1,   747,   746,    -1,\n+     376,   747,   746,    -1,   747,    39,   498,   865,   499,    -1,\n+     376,   747,    39,   498,   865,   499,    -1,   747,    39,    -1,\n+     376,   747,    39,    -1,   743,   500,   742,   501,   746,    -1,\n+     241,   500,   821,   501,   746,    -1,   432,   500,   742,   501,\n+     746,    -1,   746,   498,   499,    -1,   746,   498,   865,   499,\n+      -1,    -1,   749,    -1,   751,    -1,   753,    -1,   757,    -1,\n+     763,    -1,   764,   774,    -1,   764,   500,   865,   501,    -1,\n+     751,    -1,   754,    -1,   758,    -1,   763,    -1,   871,   750,\n+      -1,   500,   818,   501,    -1,    -1,   210,    -1,   211,    -1,\n+     383,    -1,    54,    -1,   330,    -1,   160,   752,    -1,   132,\n+     315,    -1,   111,   750,    -1,   110,   750,    -1,   275,   750,\n+      -1,    57,    -1,   500,   865,   501,    -1,    -1,   755,    -1,\n+     756,    -1,   755,    -1,   756,    -1,    56,   762,   500,   817,\n+     501,    -1,    56,   762,    -1,   759,    -1,   760,    -1,   759,\n+      -1,   760,    -1,   761,   500,   865,   501,    -1,   761,    -1,\n+      70,   762,    -1,    69,   762,    -1,   449,    -1,   260,    70,\n+     762,    -1,   260,    69,   762,    -1,   262,   762,    -1,   451,\n+      -1,    -1,   415,   500,   865,   501,   765,    -1,   415,   765,\n+      -1,   414,   500,   865,   501,   765,    -1,   414,   765,    -1,\n+     213,    -1,   486,   414,   483,    -1,   464,   414,   483,    -1,\n+      -1,   480,    -1,   481,    -1,   255,    -1,   256,    -1,   107,\n+      -1,   108,    -1,   183,    -1,   184,    -1,   251,    -1,   252,\n+      -1,   365,    -1,   366,    -1,   249,    -1,   250,    -1,   247,\n+      -1,   248,    -1,   766,    -1,   767,    -1,   768,    -1,   769,\n+      -1,   770,    -1,   771,    -1,   772,    -1,   773,    -1,   766,\n+     416,   767,    -1,   768,   416,   769,    -1,   768,   416,   770,\n+      -1,   768,   416,   771,    -1,   769,   416,   770,    -1,   769,\n+     416,   771,    -1,   770,   416,   771,    -1,    -1,   777,    -1,\n+     775,    11,   745,    -1,   775,    78,   872,    -1,   775,    46,\n+     414,   483,   775,    -1,   491,   775,    -1,   492,   775,    -1,\n+     775,   491,   775,    -1,   775,   492,   775,    -1,   775,   493,\n+     775,    -1,   775,   494,   775,    -1,   775,    15,   775,    -1,\n+     775,   495,   775,    -1,   775,   496,   775,    -1,   775,    16,\n+     775,    -1,   775,   487,   775,    -1,   775,   488,   775,    -1,\n+     775,   489,   775,    -1,   775,    19,   775,    -1,   775,    20,\n+     775,    -1,   775,    21,   775,    -1,   775,   810,   775,    -1,\n+     810,   775,    -1,   775,   810,    -1,   775,    36,   775,    -1,\n+     775,   287,   775,    -1,   267,   775,    -1,   484,   775,    -1,\n+     775,   172,   775,    -1,   775,   231,   775,    -1,   775,   231,\n+     775,   141,   775,    -1,   775,   484,   231,   775,    -1,   775,\n+     484,   231,   775,   141,   775,    -1,   775,   188,   775,    -1,\n+     775,   188,   775,   141,   775,    -1,   775,   484,   188,   775,\n+      -1,   775,   484,   188,   775,   141,   775,    -1,   775,   380,\n+     416,   775,    -1,   775,   380,   416,   775,   141,   775,    -1,\n+     775,   484,   380,   416,   775,    -1,   775,   484,   380,   416,\n+     775,   141,   775,    -1,   775,   216,   272,    -1,   775,   217,\n+      -1,   775,   216,   267,   272,    -1,   775,   267,   272,    -1,\n+     775,   270,    -1,   775,    17,   775,    -1,   775,    18,   775,\n+      -1,   799,   293,   799,    -1,   775,   216,   423,    -1,   775,\n+     216,   267,   423,    -1,   775,   216,   155,    -1,   775,   216,\n+     267,   155,    -1,   775,   216,   434,    -1,   775,   216,   267,\n+     434,    -1,   775,   216,   128,   167,   775,    -1,   775,   216,\n+     267,   128,   167,   775,    -1,   775,   216,   277,   500,   821,\n+     501,    -1,   775,   216,   267,   277,   500,   821,   501,    -1,\n+     775,    53,   845,   776,    36,   775,    -1,   775,   484,    53,\n+     845,   776,    36,   775,    -1,   775,    53,   402,   776,    36,\n+     775,    -1,   775,   484,    53,   402,   776,    36,   775,    -1,\n+     775,   193,   831,    -1,   775,   484,   193,   831,    -1,   775,\n+     812,   807,   647,    -1,   775,   812,   807,   500,   775,   501,\n+      -1,   113,    -1,    81,   500,   775,   501,    -1,   493,   851,\n+     855,    -1,   867,   502,   493,   851,   855,    -1,   777,    -1,\n+     776,    11,   745,    -1,   491,   776,    -1,   492,   776,    -1,\n+     776,   491,   776,    -1,   776,   492,   776,    -1,   776,   493,\n+     776,    -1,   776,   494,   776,    -1,   776,    15,   776,    -1,\n+     776,   495,   776,    -1,   776,   496,   776,    -1,   776,    16,\n+     776,    -1,   776,   487,   776,    -1,   776,   488,   776,    -1,\n+     776,   489,   776,    -1,   776,    19,   776,    -1,   776,    20,\n+     776,    -1,   776,    21,   776,    -1,   776,   810,   776,    -1,\n+     810,   776,    -1,   776,   810,    -1,   776,   216,   128,   167,\n+     776,    -1,   776,   216,   267,   128,   167,   776,    -1,   776,\n+     216,   277,   500,   821,   501,    -1,   776,   216,   267,   277,\n+     500,   821,   501,    -1,   778,    -1,   799,    -1,   779,   844,\n+      -1,   837,    -1,   864,    -1,   505,     9,    -1,   506,   878,\n+      -1,   498,   818,   499,    -1,   784,    -1,    39,   647,    -1,\n+      39,   498,   818,   499,    -1,   832,    -1,   647,    -1,   647,\n+     840,    -1,   148,   647,    -1,   700,   500,   817,   501,    -1,\n+     507,    -1,    10,    -1,   500,   775,   501,    -1,   508,   802,\n+     509,    -1,   241,   508,   806,   509,    -1,   781,    -1,   863,\n+     500,   501,    -1,   863,   500,   819,   669,   668,   501,    -1,\n+     863,   500,   450,   820,   669,   668,   501,    -1,   863,   500,\n+     819,   504,   450,   820,   669,   668,   501,    -1,   863,   500,\n+      30,   819,   669,   668,   501,    -1,   863,   500,   128,   819,\n+     669,   668,   501,    -1,   780,   785,   786,   787,   791,    -1,\n+     783,    -1,   780,    -1,   783,    -1,    79,   162,   500,   775,\n+     501,    -1,    66,   500,   775,    40,   745,   501,    -1,   426,\n+     500,   775,    40,   745,   501,    -1,   154,   500,   822,   501,\n+      -1,   294,   500,   824,   501,    -1,   311,   500,   826,   501,\n+      -1,   400,   500,   827,   501,    -1,   420,   500,   775,    40,\n+     745,   501,    -1,   422,   500,    58,   830,   501,    -1,   422,\n+     500,   227,   830,   501,    -1,   422,   500,   417,   830,   501,\n+      -1,   422,   500,   830,   501,    -1,   273,   500,   775,   504,\n+     775,   501,    -1,    77,   500,   817,   501,    -1,   498,   775,\n+     162,   867,   193,   775,   499,    -1,   498,   775,   162,   867,\n+     193,   777,   186,   775,   499,    -1,   463,   176,   500,   670,\n+     501,    -1,    -1,   158,   500,   459,   775,   501,    -1,   158,\n+     500,   775,   501,    -1,    -1,   151,    -1,    -1,   461,   789,\n+      -1,    -1,   790,    -1,   789,   504,   790,    -1,   867,    40,\n+     792,    -1,   292,   792,    -1,   292,   867,    -1,    -1,   500,\n+     793,   794,   669,   795,   501,    -1,   867,    -1,    -1,   301,\n+      59,   816,    -1,    -1,   328,   796,    -1,   357,   796,    -1,\n+      -1,   797,    -1,    53,   797,    36,   797,    -1,   429,   314,\n+      -1,   429,   161,    -1,   102,   356,    -1,   775,   314,    -1,\n+     775,   161,    -1,   356,   500,   817,   501,    -1,   356,   500,\n+     501,    -1,   798,    -1,   500,   816,   504,   775,   501,    -1,\n+     868,   510,   775,    -1,   800,    -1,   801,   504,   800,    -1,\n+     801,    -1,   801,   504,    -1,   775,   510,   775,    -1,   803,\n+      -1,   804,   504,   803,    -1,   804,    -1,   804,   504,    -1,\n+     805,    -1,    -1,    38,    -1,   385,    -1,    30,    -1,     8,\n+      -1,   809,    -1,   491,    -1,   492,    -1,   493,    -1,   494,\n+      -1,    15,    -1,   495,    -1,   496,    -1,    16,    -1,   487,\n+      -1,   488,    -1,   489,    -1,    19,    -1,    20,    -1,    21,\n+      -1,     8,    -1,   284,   500,   813,   501,    -1,   808,    -1,\n+     284,   500,   813,   501,    -1,   808,    -1,   284,   500,   813,\n+     501,    -1,   231,    -1,   484,   231,    -1,   172,    -1,   484,\n+     172,    -1,   188,    -1,   484,   188,    -1,   808,    -1,   867,\n+     502,   813,    -1,   777,    -1,   814,   504,   777,    -1,   814,\n+      -1,   814,   504,    -1,   775,    -1,   816,   504,   775,    -1,\n+     816,    -1,   816,   504,    -1,   817,    -1,    -1,   820,    -1,\n+     819,   504,   820,    -1,   775,    -1,   875,    13,   775,    -1,\n+     875,    14,   775,    -1,   745,    -1,   821,   504,   745,    -1,\n+     823,   167,   775,    -1,    -1,     3,    -1,   766,    -1,   767,\n       -1,   768,    -1,   769,    -1,   770,    -1,   771,    -1,   772,\n-      -1,   765,   416,   766,    -1,   767,   416,   768,    -1,   767,\n-     416,   769,    -1,   767,   416,   770,    -1,   768,   416,   769,\n-      -1,   768,   416,   770,    -1,   769,   416,   770,    -1,    -1,\n-     776,    -1,   774,    11,   744,    -1,   774,    78,   867,    -1,\n-     774,    46,   414,   483,   774,    -1,   491,   774,    -1,   492,\n-     774,    -1,   774,   491,   774,    -1,   774,   492,   774,    -1,\n-     774,   493,   774,    -1,   774,   494,   774,    -1,   774,    15,\n-     774,    -1,   774,   495,   774,    -1,   774,   496,   774,    -1,\n-     774,    16,   774,    -1,   774,   487,   774,    -1,   774,   488,\n-     774,    -1,   774,   489,   774,    -1,   774,    19,   774,    -1,\n-     774,    20,   774,    -1,   774,    21,   774,    -1,   774,   805,\n-     774,    -1,   805,   774,    -1,   774,   805,    -1,   774,    36,\n-     774,    -1,   774,   287,   774,    -1,   267,   774,    -1,   484,\n-     774,    -1,   774,   172,   774,    -1,   774,   231,   774,    -1,\n-     774,   231,   774,   141,   774,    -1,   774,   484,   231,   774,\n-      -1,   774,   484,   231,   774,   141,   774,    -1,   774,   188,\n-     774,    -1,   774,   188,   774,   141,   774,    -1,   774,   484,\n-     188,   774,    -1,   774,   484,   188,   774,   141,   774,    -1,\n-     774,   380,   416,   774,    -1,   774,   380,   416,   774,   141,\n-     774,    -1,   774,   484,   380,   416,   774,    -1,   774,   484,\n-     380,   416,   774,   141,   774,    -1,   774,   216,   272,    -1,\n-     774,   217,    -1,   774,   216,   267,   272,    -1,   774,   267,\n-     272,    -1,   774,   270,    -1,   774,    17,   774,    -1,   774,\n-      18,   774,    -1,   798,   293,   798,    -1,   774,   216,   423,\n-      -1,   774,   216,   267,   423,    -1,   774,   216,   155,    -1,\n-     774,   216,   267,   155,    -1,   774,   216,   434,    -1,   774,\n-     216,   267,   434,    -1,   774,   216,   128,   167,   774,    -1,\n-     774,   216,   267,   128,   167,   774,    -1,   774,   216,   277,\n-     500,   816,   501,    -1,   774,   216,   267,   277,   500,   816,\n-     501,    -1,   774,    53,   840,   775,    36,   774,    -1,   774,\n-     484,    53,   840,   775,    36,   774,    -1,   774,    53,   402,\n-     775,    36,   774,    -1,   774,   484,    53,   402,   775,    36,\n-     774,    -1,   774,   193,   826,    -1,   774,   484,   193,   826,\n-      -1,   774,   807,   802,   646,    -1,   774,   807,   802,   500,\n-     774,   501,    -1,   113,    -1,    81,   500,   774,   501,    -1,\n-     493,   846,   850,    -1,   862,   502,   493,   846,   850,    -1,\n-     776,    -1,   775,    11,   744,    -1,   491,   775,    -1,   492,\n-     775,    -1,   775,   491,   775,    -1,   775,   492,   775,    -1,\n-     775,   493,   775,    -1,   775,   494,   775,    -1,   775,    15,\n-     775,    -1,   775,   495,   775,    -1,   775,   496,   775,    -1,\n-     775,    16,   775,    -1,   775,   487,   775,    -1,   775,   488,\n-     775,    -1,   775,   489,   775,    -1,   775,    19,   775,    -1,\n-     775,    20,   775,    -1,   775,    21,   775,    -1,   775,   805,\n-     775,    -1,   805,   775,    -1,   775,   805,    -1,   775,   216,\n-     128,   167,   775,    -1,   775,   216,   267,   128,   167,   775,\n-      -1,   775,   216,   277,   500,   816,   501,    -1,   775,   216,\n-     267,   277,   500,   816,   501,    -1,   777,    -1,   798,    -1,\n-     778,   839,    -1,   832,    -1,   859,    -1,   505,     9,    -1,\n-     506,   873,    -1,   498,   813,   499,    -1,   783,    -1,    39,\n-     646,    -1,    39,   498,   813,   499,    -1,   827,    -1,   646,\n-      -1,   646,   835,    -1,   148,   646,    -1,   699,   500,   812,\n-     501,    -1,   507,    -1,    10,    -1,   500,   774,   501,    -1,\n-     508,   801,   509,    -1,   780,    -1,   858,   500,   501,    -1,\n-     858,   500,   814,   668,   667,   501,    -1,   858,   500,   450,\n-     815,   668,   667,   501,    -1,   858,   500,   814,   504,   450,\n-     815,   668,   667,   501,    -1,   858,   500,    30,   814,   668,\n-     667,   501,    -1,   858,   500,   128,   814,   668,   667,   501,\n-      -1,   779,   784,   785,   786,   790,    -1,   782,    -1,   779,\n-      -1,   782,    -1,    79,   162,   500,   774,   501,    -1,    66,\n-     500,   774,    40,   744,   501,    -1,   426,   500,   774,    40,\n-     744,   501,    -1,   154,   500,   817,   501,    -1,   294,   500,\n-     819,   501,    -1,   311,   500,   821,   501,    -1,   400,   500,\n-     822,   501,    -1,   420,   500,   774,    40,   744,   501,    -1,\n-     422,   500,    58,   825,   501,    -1,   422,   500,   227,   825,\n-     501,    -1,   422,   500,   417,   825,   501,    -1,   422,   500,\n-     825,   501,    -1,   273,   500,   774,   504,   774,   501,    -1,\n-      77,   500,   812,   501,    -1,   498,   774,   162,   862,   193,\n-     774,   499,    -1,   498,   774,   162,   862,   193,   776,   186,\n-     774,   499,    -1,   463,   176,   500,   669,   501,    -1,    -1,\n-     158,   500,   459,   774,   501,    -1,   158,   500,   774,   501,\n-      -1,    -1,   151,    -1,    -1,   461,   788,    -1,    -1,   789,\n-      -1,   788,   504,   789,    -1,   862,    40,   791,    -1,   292,\n-     791,    -1,   292,   862,    -1,    -1,   500,   792,   793,   668,\n-     794,   501,    -1,   862,    -1,    -1,   301,    59,   811,    -1,\n-      -1,   328,   795,    -1,   357,   795,    -1,    -1,   796,    -1,\n-      53,   796,    36,   796,    -1,   429,   314,    -1,   429,   161,\n-      -1,   102,   356,    -1,   774,   314,    -1,   774,   161,    -1,\n-     356,   500,   812,   501,    -1,   356,   500,   501,    -1,   797,\n-      -1,   500,   811,   504,   774,   501,    -1,   863,   510,   774,\n-      -1,   799,    -1,   800,   504,   799,    -1,   800,    -1,   800,\n-     504,    -1,    38,    -1,   385,    -1,    30,    -1,     8,    -1,\n-     804,    -1,   491,    -1,   492,    -1,   493,    -1,   494,    -1,\n-      15,    -1,   495,    -1,   496,    -1,    16,    -1,   487,    -1,\n-     488,    -1,   489,    -1,    19,    -1,    20,    -1,    21,    -1,\n-       8,    -1,   284,   500,   808,   501,    -1,   803,    -1,   284,\n-     500,   808,   501,    -1,   803,    -1,   284,   500,   808,   501,\n-      -1,   231,    -1,   484,   231,    -1,   172,    -1,   484,   172,\n-      -1,   188,    -1,   484,   188,    -1,   803,    -1,   862,   502,\n-     808,    -1,   776,    -1,   809,   504,   776,    -1,   809,    -1,\n-     809,   504,    -1,   774,    -1,   811,   504,   774,    -1,   811,\n-      -1,   811,   504,    -1,   812,    -1,    -1,   815,    -1,   814,\n-     504,   815,    -1,   774,    -1,   870,    13,   774,    -1,   870,\n-      14,   774,    -1,   744,    -1,   816,   504,   744,    -1,   818,\n-     167,   774,    -1,    -1,     3,    -1,   765,    -1,   766,    -1,\n-     767,    -1,   768,    -1,   769,    -1,   770,    -1,   771,    -1,\n-     772,    -1,   861,    -1,   774,   820,   823,   824,    -1,   774,\n-     820,   823,    -1,   308,   774,    -1,   775,   193,   775,    -1,\n-      -1,   774,   823,   824,    -1,   774,   824,   823,    -1,   774,\n-     823,    -1,   774,   824,    -1,   811,    -1,    -1,   167,   774,\n-      -1,   162,   774,    -1,   774,   167,   812,    -1,   167,   812,\n-      -1,   812,    -1,   646,    -1,   500,   812,   501,    -1,    65,\n-     831,   828,   830,   139,    -1,   829,    -1,   828,   829,    -1,\n-     458,   774,   413,   774,    -1,   135,   774,    -1,    -1,   774,\n-      -1,    -1,   862,    -1,   862,   835,    -1,   502,   857,    -1,\n-     498,   774,   499,    -1,   498,   834,   510,   834,   499,    -1,\n-     774,    -1,    -1,   833,    -1,   835,   833,    -1,    -1,   836,\n-     833,    -1,    -1,   500,   501,    -1,   500,   814,   501,    -1,\n-     502,   857,   837,    -1,   498,   774,   499,    -1,   498,   834,\n-     510,   834,   499,    -1,    -1,   839,   838,    -1,    45,    -1,\n-      -1,   843,    -1,    -1,   844,    -1,   842,   504,   844,    -1,\n-     842,    -1,   842,   504,    -1,   774,    40,   872,    -1,   774,\n-       3,    -1,   774,    -1,   144,   500,   854,   501,    -1,   144,\n-     862,    -1,   845,    -1,    -1,   774,    40,   862,    -1,   847,\n-      -1,   848,   504,   847,    -1,   848,    -1,   848,   504,    -1,\n-     343,   500,   849,   501,    -1,   343,   847,    -1,    -1,   852,\n-      -1,   851,   504,   852,    -1,   863,    -1,   862,   835,    -1,\n-     856,    -1,   853,   504,   856,    -1,   853,    -1,   853,   504,\n-      -1,   854,    -1,   500,   854,   501,    -1,   863,    -1,   871,\n-      -1,   865,    -1,   862,   835,    -1,   860,    -1,     4,    -1,\n-     861,   836,    -1,     6,    -1,     7,    -1,   858,   861,    -1,\n-     858,   500,   814,   668,   667,   501,   861,    -1,   747,   861,\n-      -1,   763,   500,   774,   501,   773,    -1,   763,   860,   773,\n-      -1,   763,   861,   773,    -1,   423,    -1,   155,    -1,   272,\n-      -1,     9,    -1,     5,    -1,     3,    -1,   938,    -1,   939,\n-      -1,   862,    -1,     5,    -1,     3,    -1,   938,    -1,   943,\n-      -1,     3,    -1,   938,    -1,   940,    -1,     3,    -1,   938,\n-      -1,   941,    -1,   862,    -1,   862,   868,    -1,   502,   857,\n-      -1,   868,   502,   857,    -1,   500,   854,   501,    -1,    -1,\n-     864,    -1,     3,    -1,   942,    -1,   938,    -1,   944,    -1,\n-     871,    -1,     5,    -1,     3,    -1,   316,   856,   875,    40,\n-     876,    -1,   500,   816,   501,    -1,    -1,   645,    -1,   529,\n-      -1,   627,    -1,   916,    -1,    98,   361,   852,   878,    -1,\n-      98,   361,   186,   267,   148,   852,   878,    -1,    98,   287,\n-     343,   361,   852,   878,    -1,   878,   879,    -1,    -1,   569,\n-      -1,   880,    -1,   555,    -1,   933,    -1,    98,   886,   197,\n-     883,   884,   282,   852,   882,   500,   547,   501,   885,   737,\n-      -1,    98,   886,   197,   883,   186,   267,   148,   598,   282,\n-     852,   882,   500,   547,   501,   885,   737,    -1,   862,    -1,\n-     442,   881,    -1,    -1,    87,    -1,    -1,   598,    -1,    -1,\n-     462,   584,    -1,    -1,   433,    -1,    -1,    32,   405,   731,\n-     375,   361,   856,    -1,    32,   405,   186,   148,   731,   375,\n-     361,   856,    -1,    32,   370,   852,   375,   361,   856,    -1,\n-      32,   370,   186,   148,   852,   375,   361,   856,    -1,    32,\n-     454,   852,   375,   361,   856,    -1,    32,   454,   186,   148,\n-     852,   375,   361,   856,    -1,   163,    73,   889,    -1,    73,\n-     889,    -1,   862,    -1,    -1,   150,   106,   861,   635,    -1,\n-     150,   106,   862,   416,   861,   635,    -1,   192,   106,   861,\n-      -1,   149,   895,    -1,   149,   899,   893,   895,    -1,   149,\n-     452,   895,    -1,   149,   500,   898,   501,   895,    -1,   452,\n-      -1,    -1,   900,    -1,   562,    -1,    -1,   887,    -1,   559,\n-      -1,   515,    -1,   932,    -1,   888,    -1,   628,    -1,   935,\n-      -1,   624,    -1,   877,    -1,   555,    -1,   569,    -1,   549,\n-      -1,   526,    -1,   916,    -1,   617,    -1,   557,    -1,   880,\n-      -1,   529,    -1,   909,    -1,   552,    -1,   874,    -1,   527,\n-      -1,   645,    -1,   566,    -1,   627,    -1,   911,    -1,   925,\n-      -1,   903,    -1,   928,    -1,   933,    -1,     3,    -1,   938,\n-      -1,   942,    -1,   896,    -1,   861,    -1,   901,    -1,   898,\n-     504,   901,    -1,    35,    -1,    34,    -1,   423,    -1,   155,\n-      -1,   282,    -1,   897,    -1,   902,   894,    -1,   896,    -1,\n-     899,    -1,   375,   904,    -1,   375,   235,   904,    -1,   375,\n-     374,   904,    -1,   375,   173,   904,    -1,   905,    -1,   930,\n-     167,   102,    -1,   414,   483,   907,    -1,   361,   861,    -1,\n-     930,   416,   908,    -1,   930,   489,   908,    -1,   930,   416,\n-     113,    -1,   930,   489,   113,    -1,   900,    -1,   562,    -1,\n-     861,    -1,     3,    -1,   763,   861,   773,    -1,   763,   500,\n-     860,   501,   861,    -1,   562,    -1,   113,    -1,   235,    -1,\n-     906,    -1,   908,   504,   906,    -1,   234,   910,    -1,   208,\n-     910,    -1,   163,   208,   910,    -1,   861,    -1,   862,    -1,\n-     443,   913,   915,   893,    -1,   443,   913,   915,   893,   852,\n-     869,    -1,   443,   913,   915,   893,   920,    -1,   443,   500,\n-     914,   501,    -1,   443,   500,   914,   501,   852,   869,    -1,\n-     899,    -1,   452,    -1,   166,    -1,   168,    -1,     3,    -1,\n-     168,    -1,    -1,   912,    -1,   914,   504,   912,    -1,   166,\n-      -1,    -1,   533,   118,   167,   917,   919,   918,   539,    -1,\n-     424,   662,   917,    -1,   731,    -1,   731,   862,    -1,   731,\n-      40,   862,    -1,   459,   774,    -1,    -1,   442,   713,    -1,\n-      -1,   899,   893,    -1,   899,   893,   852,   869,    -1,    47,\n-     923,   861,   924,   635,    -1,   124,   923,     3,    -1,   124,\n-     106,   186,   148,     3,    -1,   106,    -1,    -1,    40,   862,\n-      -1,    -1,   345,   927,    -1,   930,    -1,    30,    -1,   926,\n-      -1,   414,   483,    -1,   418,   218,   230,    -1,   929,   645,\n-      -1,   401,   645,    -1,   401,   931,    -1,   929,   931,    -1,\n-     929,   414,   483,    -1,   929,   418,   218,   230,    -1,   929,\n-      30,    -1,   929,    -1,   379,    -1,   123,    -1,   862,    -1,\n-     930,   502,   862,    -1,   862,    -1,   931,   502,   862,    -1,\n-      61,   779,    -1,    98,   615,   454,   852,   604,   885,    40,\n-     645,   934,    -1,    98,   615,   454,   186,   267,   148,   852,\n-     604,   885,    40,   645,   934,    -1,    98,   287,   343,   615,\n-     454,   852,   604,   885,    40,   645,   934,    -1,    98,   615,\n-     333,   454,   852,   500,   608,   501,   885,    40,   645,   934,\n-      -1,    98,   287,   343,   615,   333,   454,   852,   500,   608,\n-     501,   885,    40,   645,   934,    -1,   462,    72,   285,    -1,\n-     462,    64,    72,   285,    -1,   462,   235,    72,   285,    -1,\n-      -1,    98,   615,   405,   937,    40,   645,   936,    -1,    98,\n-     615,   405,   186,   267,   148,   937,    40,   645,   936,    -1,\n-      98,   287,   343,   615,   405,   937,    40,   645,   936,    -1,\n-     462,   105,    -1,   462,   265,   105,    -1,    -1,   852,   604,\n-     591,   583,    -1,    22,    -1,    23,    -1,    24,    -1,    25,\n-      -1,    26,    -1,    27,    -1,    28,    -1,    29,    -1,    31,\n-      -1,    32,    -1,    33,    -1,    43,    -1,    44,    -1,    46,\n-      -1,    47,    -1,    48,    -1,    50,    -1,    51,    -1,    52,\n-      -1,    59,    -1,    60,    -1,    61,    -1,    62,    -1,    63,\n-      -1,    64,    -1,    67,    -1,    68,    -1,    71,    -1,    73,\n-      -1,    74,    -1,    75,    -1,    76,    -1,    82,    -1,    83,\n-      -1,    84,    -1,    85,    -1,    86,    -1,    88,    -1,    89,\n-      -1,    90,    -1,    92,    -1,    93,    -1,    94,    -1,    95,\n-      -1,    96,    -1,    97,    -1,   100,    -1,   101,    -1,   102,\n-      -1,   103,    -1,   104,    -1,   105,    -1,   106,    -1,   107,\n-      -1,   108,    -1,   109,    -1,   112,    -1,   114,    -1,   116,\n-      -1,   117,    -1,   118,    -1,   119,    -1,   120,    -1,   121,\n-      -1,   123,    -1,   124,    -1,   125,    -1,   126,    -1,   127,\n-      -1,   130,    -1,   131,    -1,   132,    -1,   133,    -1,   134,\n-      -1,   136,    -1,   137,    -1,   138,    -1,   140,    -1,   141,\n-      -1,   142,    -1,   144,    -1,   145,    -1,   146,    -1,   147,\n-      -1,   149,    -1,   150,    -1,   151,    -1,   152,    -1,   153,\n-      -1,   156,    -1,   158,    -1,   159,    -1,   161,    -1,   163,\n-      -1,   165,    -1,   169,    -1,   170,    -1,   173,    -1,   175,\n-      -1,   179,    -1,   181,    -1,   182,    -1,   183,    -1,   184,\n-      -1,   185,    -1,   186,    -1,   187,    -1,   189,    -1,   190,\n-      -1,   191,    -1,   192,    -1,   194,    -1,   195,    -1,   196,\n-      -1,   197,    -1,   198,    -1,   199,    -1,   200,    -1,   202,\n-      -1,   205,    -1,   206,    -1,   207,    -1,   208,    -1,   209,\n-      -1,   215,    -1,   218,    -1,   220,    -1,   221,    -1,   222,\n-      -1,   223,    -1,   224,    -1,   225,    -1,   228,    -1,   230,\n-      -1,   233,    -1,   234,    -1,   235,    -1,   236,    -1,   237,\n-      -1,   238,    -1,   239,    -1,   240,    -1,   242,    -1,   243,\n-      -1,   244,    -1,   245,    -1,   246,    -1,   247,    -1,   248,\n-      -1,   249,    -1,   250,    -1,   251,    -1,   252,    -1,   253,\n-      -1,   254,    -1,   255,    -1,   256,    -1,   257,    -1,   258,\n-      -1,   259,    -1,   263,    -1,   264,    -1,   265,    -1,   268,\n-      -1,   269,    -1,   271,    -1,   274,    -1,   276,    -1,   277,\n-      -1,   278,    -1,   280,    -1,   281,    -1,   284,    -1,   285,\n-      -1,   286,    -1,   289,    -1,   292,    -1,   295,    -1,   296,\n-      -1,   297,    -1,   298,    -1,   299,    -1,   300,    -1,   301,\n-      -1,   302,    -1,   303,    -1,   304,    -1,   309,    -1,   310,\n-      -1,   313,    -1,   314,    -1,   316,    -1,   317,    -1,   318,\n-      -1,   320,    -1,   321,    -1,   322,    -1,   323,    -1,   324,\n-      -1,   325,    -1,   327,    -1,   328,    -1,   329,    -1,   331,\n-      -1,   332,    -1,   333,    -1,   334,    -1,   336,    -1,   337,\n-      -1,   338,    -1,   339,    -1,   340,    -1,   341,    -1,   342,\n-      -1,   343,    -1,   344,    -1,   345,    -1,   346,    -1,   347,\n-      -1,   348,    -1,   350,    -1,   351,    -1,   353,    -1,   354,\n-      -1,   355,    -1,   357,    -1,   358,    -1,   359,    -1,   360,\n-      -1,   361,    -1,   362,    -1,   363,    -1,   364,    -1,   365,\n-      -1,   366,    -1,   367,    -1,   370,    -1,   371,    -1,   372,\n-      -1,   373,    -1,   374,    -1,   375,    -1,   377,    -1,   378,\n-      -1,   379,    -1,   381,    -1,   382,    -1,   384,    -1,   386,\n-      -1,   387,    -1,   388,    -1,   389,    -1,   390,    -1,   391,\n-      -1,   392,    -1,   393,    -1,   394,    -1,   395,    -1,   396,\n-      -1,   397,    -1,   399,    -1,   401,    -1,   403,    -1,   404,\n-      -1,   406,    -1,   408,    -1,   409,    -1,   410,    -1,   411,\n-      -1,   412,    -1,   418,    -1,   419,    -1,   421,    -1,   424,\n-      -1,   425,    -1,   427,    -1,   428,    -1,   429,    -1,   430,\n-      -1,   431,    -1,   434,    -1,   435,    -1,   436,    -1,   438,\n-      -1,   439,    -1,   440,    -1,   441,    -1,   443,    -1,   444,\n-      -1,   445,    -1,   446,    -1,   447,    -1,   451,    -1,   453,\n-      -1,   454,    -1,   455,    -1,   456,    -1,   457,    -1,   460,\n-      -1,   463,    -1,   464,    -1,   465,    -1,   466,    -1,   467,\n-      -1,   468,    -1,   480,    -1,   481,    -1,   482,    -1,   483,\n-      -1,    53,    -1,    54,    -1,    56,    -1,    57,    -1,    69,\n-      -1,    70,    -1,    77,    -1,    81,    -1,   110,    -1,   111,\n-      -1,   148,    -1,   154,    -1,   160,    -1,   171,    -1,   177,\n-      -1,   178,    -1,   204,    -1,   210,    -1,   211,    -1,   213,\n-      -1,   241,    -1,   260,    -1,   262,    -1,   266,    -1,   273,\n-      -1,   275,    -1,   290,    -1,   294,    -1,   311,    -1,   315,\n-      -1,   330,    -1,   356,    -1,   376,    -1,   383,    -1,   398,\n-      -1,   400,    -1,   414,    -1,   415,    -1,   420,    -1,   422,\n-      -1,   426,    -1,   448,    -1,   449,    -1,   469,    -1,   470,\n-      -1,   471,    -1,   472,    -1,   473,    -1,   474,    -1,   475,\n-      -1,   476,    -1,   477,    -1,   478,    -1,   479,    -1,    42,\n-      -1,    49,    -1,    55,    -1,    79,    -1,    87,    -1,    99,\n-      -1,   166,    -1,   168,    -1,   171,    -1,   172,    -1,   188,\n-      -1,   203,    -1,   216,    -1,   217,    -1,   219,    -1,   229,\n-      -1,   231,    -1,   241,    -1,   261,    -1,   270,    -1,   291,\n-      -1,   293,    -1,   312,    -1,   352,    -1,   380,    -1,   398,\n-      -1,   407,    -1,   452,    -1,    37,    -1,    42,    -1,    49,\n-      -1,    55,    -1,    79,    -1,    81,    -1,    87,    -1,    99,\n-      -1,   166,    -1,   168,    -1,   172,    -1,   188,    -1,   203,\n-      -1,   216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,\n-      -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,   312,\n-      -1,   352,    -1,   369,    -1,   380,    -1,   407,    -1,   426,\n-      -1,   452,    -1,    37,    -1,    42,    -1,    49,    -1,    53,\n-      -1,    54,    -1,    55,    -1,    56,    -1,    57,    -1,    70,\n-      -1,    69,    -1,    77,    -1,    79,    -1,    81,    -1,    87,\n-      -1,    99,    -1,   110,    -1,   111,    -1,   148,    -1,   154,\n-      -1,   160,    -1,   166,    -1,   168,    -1,   171,    -1,   172,\n-      -1,   177,    -1,   178,    -1,   188,    -1,   203,    -1,   204,\n-      -1,   211,    -1,   213,    -1,   210,    -1,   216,    -1,   217,\n-      -1,   219,    -1,   229,    -1,   231,    -1,   241,    -1,   260,\n-      -1,   261,    -1,   262,    -1,   266,    -1,   270,    -1,   273,\n-      -1,   275,    -1,   291,    -1,   290,    -1,   293,    -1,   294,\n-      -1,   311,    -1,   312,    -1,   315,    -1,   330,    -1,   352,\n-      -1,   356,    -1,   369,    -1,   376,    -1,   380,    -1,   383,\n-      -1,   398,    -1,   400,    -1,   407,    -1,   414,    -1,   415,\n-      -1,   420,    -1,   422,    -1,   426,    -1,   448,    -1,   449,\n-      -1,   452,    -1,   469,    -1,   470,    -1,   471,    -1,   472,\n-      -1,   473,    -1,   474,    -1,   475,    -1,   476,    -1,   477,\n-      -1,   478,    -1,   479,    -1,    37,    -1,    42,    -1,    49,\n-      -1,    55,    -1,    79,    -1,    81,    -1,    87,    -1,    99,\n-      -1,   166,    -1,   168,    -1,   171,    -1,   172,    -1,   188,\n-      -1,   203,    -1,   216,    -1,   217,    -1,   219,    -1,   229,\n-      -1,   231,    -1,   241,    -1,   261,    -1,   270,    -1,   291,\n-      -1,   293,    -1,   312,    -1,   352,    -1,   369,    -1,   380,\n-      -1,   398,    -1,   407,    -1,   426,    -1,   452,    -1,    30,\n-      -1,    34,    -1,    35,    -1,    36,    -1,    38,    -1,    39,\n-      -1,    40,    -1,    41,    -1,    45,    -1,    58,    -1,    65,\n-      -1,    66,    -1,    72,    -1,    78,    -1,    80,    -1,    91,\n-      -1,    98,    -1,   113,    -1,   115,    -1,   122,    -1,   128,\n-      -1,   129,    -1,   135,    -1,   139,    -1,   143,    -1,   155,\n-      -1,   157,    -1,   162,    -1,   164,    -1,   167,    -1,   174,\n-      -1,   176,    -1,   180,    -1,   193,    -1,   201,    -1,   212,\n-      -1,   214,    -1,   226,    -1,   227,    -1,   232,    -1,   267,\n-      -1,   272,    -1,   279,    -1,   282,    -1,   283,    -1,   287,\n-      -1,   288,    -1,   305,    -1,   306,    -1,   307,    -1,   308,\n-      -1,   319,    -1,   326,    -1,   335,    -1,   349,    -1,   368,\n-      -1,   385,    -1,   402,    -1,   405,    -1,   413,    -1,   416,\n-      -1,   417,    -1,   423,    -1,   432,    -1,   433,    -1,   437,\n-      -1,   442,    -1,   450,    -1,   458,    -1,   459,    -1,   461,\n-      -1,   462,    -1\n+      -1,   773,    -1,   866,    -1,   775,   825,   828,   829,    -1,\n+     775,   825,   828,    -1,   308,   775,    -1,   776,   193,   776,\n+      -1,    -1,   775,   828,   829,    -1,   775,   829,   828,    -1,\n+     775,   828,    -1,   775,   829,    -1,   816,    -1,    -1,   167,\n+     775,    -1,   162,   775,    -1,   775,   167,   817,    -1,   167,\n+     817,    -1,   817,    -1,   647,    -1,   500,   817,   501,    -1,\n+      65,   836,   833,   835,   139,    -1,   834,    -1,   833,   834,\n+      -1,   458,   775,   413,   775,    -1,   135,   775,    -1,    -1,\n+     775,    -1,    -1,   867,    -1,   867,   840,    -1,   502,   862,\n+      -1,   498,   775,   499,    -1,   498,   839,   510,   839,   499,\n+      -1,   775,    -1,    -1,   838,    -1,   840,   838,    -1,    -1,\n+     841,   838,    -1,    -1,   500,   501,    -1,   500,   819,   501,\n+      -1,   502,   862,   842,    -1,   498,   775,   499,    -1,   498,\n+     839,   510,   839,   499,    -1,    -1,   844,   843,    -1,    45,\n+      -1,    -1,   848,    -1,    -1,   849,    -1,   847,   504,   849,\n+      -1,   847,    -1,   847,   504,    -1,   775,    40,   877,    -1,\n+     775,     3,    -1,   775,    -1,   144,   500,   859,   501,    -1,\n+     144,   867,    -1,   850,    -1,    -1,   775,    40,   867,    -1,\n+     852,    -1,   853,   504,   852,    -1,   853,    -1,   853,   504,\n+      -1,   343,   500,   854,   501,    -1,   343,   852,    -1,    -1,\n+     857,    -1,   856,   504,   857,    -1,   868,    -1,   867,   840,\n+      -1,   861,    -1,   858,   504,   861,    -1,   858,    -1,   858,\n+     504,    -1,   859,    -1,   500,   859,   501,    -1,   868,    -1,\n+     876,    -1,   870,    -1,   867,   840,    -1,   865,    -1,     4,\n+      -1,   866,   841,    -1,     6,    -1,     7,    -1,   863,   866,\n+      -1,   863,   500,   819,   669,   668,   501,   866,    -1,   748,\n+     866,    -1,   764,   500,   775,   501,   774,    -1,   764,   865,\n+     774,    -1,   764,   866,   774,    -1,   423,    -1,   155,    -1,\n+     272,    -1,     9,    -1,     5,    -1,     3,    -1,   944,    -1,\n+     945,    -1,   867,    -1,     5,    -1,     3,    -1,   944,    -1,\n+     949,    -1,     3,    -1,   944,    -1,   946,    -1,     3,    -1,\n+     944,    -1,   947,    -1,   867,    -1,   867,   873,    -1,   502,\n+     862,    -1,   873,   502,   862,    -1,   500,   859,   501,    -1,\n+      -1,   869,    -1,     3,    -1,   948,    -1,   944,    -1,   950,\n+      -1,   876,    -1,     5,    -1,     3,    -1,   316,   861,   880,\n+      40,   881,    -1,   500,   821,   501,    -1,    -1,   646,    -1,\n+     529,    -1,   628,    -1,   629,    -1,   921,    -1,    98,   361,\n+     857,   883,    -1,    98,   361,   186,   267,   148,   857,   883,\n+      -1,    98,   287,   343,   361,   857,   883,    -1,   883,   884,\n+      -1,    -1,   570,    -1,   885,    -1,   556,    -1,   939,    -1,\n+      98,   891,   197,   888,   889,   282,   857,   887,   500,   548,\n+     501,   890,   738,    -1,    98,   891,   197,   888,   186,   267,\n+     148,   599,   282,   857,   887,   500,   548,   501,   890,   738,\n+      -1,   867,    -1,   442,   886,    -1,    -1,    87,    -1,    -1,\n+     599,    -1,    -1,   462,   585,    -1,    -1,   433,    -1,    -1,\n+      32,   405,   732,   375,   361,   861,    -1,    32,   405,   186,\n+     148,   732,   375,   361,   861,    -1,    32,   370,   857,   375,\n+     361,   861,    -1,    32,   370,   186,   148,   857,   375,   361,\n+     861,    -1,    32,   454,   857,   375,   361,   861,    -1,    32,\n+     454,   186,   148,   857,   375,   361,   861,    -1,   163,    73,\n+     894,    -1,    73,   894,    -1,   867,    -1,    -1,   150,   106,\n+     866,   636,    -1,   150,   106,   867,   416,   866,   636,    -1,\n+     192,   106,   866,    -1,   149,   900,    -1,   149,   904,   898,\n+     900,    -1,   149,   452,   900,    -1,   149,   500,   903,   501,\n+     900,    -1,   452,    -1,    -1,   905,    -1,   563,    -1,    -1,\n+     892,    -1,   560,    -1,   515,    -1,   938,    -1,   893,    -1,\n+     629,    -1,   941,    -1,   625,    -1,   882,    -1,   556,    -1,\n+     570,    -1,   550,    -1,   526,    -1,   921,    -1,   618,    -1,\n+     558,    -1,   885,    -1,   529,    -1,   914,    -1,   553,    -1,\n+     879,    -1,   527,    -1,   646,    -1,   567,    -1,   628,    -1,\n+     916,    -1,   930,    -1,   908,    -1,   933,    -1,   939,    -1,\n+       3,    -1,   944,    -1,   948,    -1,   901,    -1,   866,    -1,\n+     906,    -1,   903,   504,   906,    -1,    35,    -1,    34,    -1,\n+     423,    -1,   155,    -1,   282,    -1,   902,    -1,   907,   899,\n+      -1,   901,    -1,   904,    -1,   375,   909,    -1,   375,   235,\n+     909,    -1,   375,   374,   909,    -1,   375,   173,   909,    -1,\n+     910,    -1,   936,   167,   102,    -1,   414,   483,   912,    -1,\n+     361,   866,    -1,   936,   416,   913,    -1,   936,   489,   913,\n+      -1,   936,   416,   113,    -1,   936,   489,   113,    -1,   905,\n+      -1,   563,    -1,   866,    -1,     3,    -1,   764,   866,   774,\n+      -1,   764,   500,   865,   501,   866,    -1,   563,    -1,   113,\n+      -1,   235,    -1,   911,    -1,   913,   504,   911,    -1,   234,\n+     915,    -1,   208,   915,    -1,   163,   208,   915,    -1,   866,\n+      -1,   867,    -1,   443,   918,   920,   898,    -1,   443,   918,\n+     920,   898,   857,   874,    -1,   443,   918,   920,   898,   925,\n+      -1,   443,   500,   919,   501,    -1,   443,   500,   919,   501,\n+     857,   874,    -1,   904,    -1,   452,    -1,   166,    -1,   168,\n+      -1,     3,    -1,   168,    -1,    -1,   917,    -1,   919,   504,\n+     917,    -1,   166,    -1,    -1,   534,   118,   167,   922,   924,\n+     923,   540,    -1,   424,   663,   922,    -1,   732,    -1,   732,\n+     867,    -1,   732,    40,   867,    -1,   459,   775,    -1,    -1,\n+     442,   714,    -1,    -1,   904,   898,    -1,   904,   898,   857,\n+     874,    -1,    47,   928,   866,   929,   636,    -1,   124,   928,\n+       3,    -1,   124,   106,   186,   148,     3,    -1,   106,    -1,\n+      -1,    40,   867,    -1,    -1,   345,   932,    -1,   936,    -1,\n+      30,    -1,   931,    -1,   414,   483,    -1,   418,   218,   230,\n+      -1,   934,   646,    -1,   401,   646,    -1,   401,   937,    -1,\n+     934,   937,    -1,   934,   414,   483,    -1,   934,   418,   218,\n+     230,    -1,   934,    30,   935,    -1,   934,    -1,   379,    -1,\n+     123,    -1,   406,    -1,    -1,   867,    -1,   936,   502,   867,\n+      -1,   867,    -1,   937,   502,   867,    -1,    61,   780,    -1,\n+      98,   616,   454,   857,   605,   890,    40,   646,   940,    -1,\n+      98,   616,   454,   186,   267,   148,   857,   605,   890,    40,\n+     646,   940,    -1,    98,   287,   343,   616,   454,   857,   605,\n+     890,    40,   646,   940,    -1,    98,   616,   333,   454,   857,\n+     500,   609,   501,   890,    40,   646,   940,    -1,    98,   287,\n+     343,   616,   333,   454,   857,   500,   609,   501,   890,    40,\n+     646,   940,    -1,   462,    72,   285,    -1,   462,    64,    72,\n+     285,    -1,   462,   235,    72,   285,    -1,    -1,    98,   616,\n+     405,   943,    40,   646,   942,    -1,    98,   616,   405,   186,\n+     267,   148,   943,    40,   646,   942,    -1,    98,   287,   343,\n+     616,   405,   943,    40,   646,   942,    -1,   462,   105,    -1,\n+     462,   265,   105,    -1,    -1,   857,   605,   592,   584,    -1,\n+      22,    -1,    23,    -1,    24,    -1,    25,    -1,    26,    -1,\n+      27,    -1,    28,    -1,    29,    -1,    31,    -1,    32,    -1,\n+      33,    -1,    43,    -1,    44,    -1,    46,    -1,    47,    -1,\n+      48,    -1,    50,    -1,    51,    -1,    52,    -1,    59,    -1,\n+      60,    -1,    61,    -1,    62,    -1,    63,    -1,    64,    -1,\n+      67,    -1,    68,    -1,    71,    -1,    73,    -1,    74,    -1,\n+      75,    -1,    76,    -1,    82,    -1,    83,    -1,    84,    -1,\n+      85,    -1,    86,    -1,    88,    -1,    89,    -1,    90,    -1,\n+      92,    -1,    93,    -1,    94,    -1,    95,    -1,    96,    -1,\n+      97,    -1,   100,    -1,   101,    -1,   102,    -1,   103,    -1,\n+     104,    -1,   105,    -1,   106,    -1,   107,    -1,   108,    -1,\n+     109,    -1,   112,    -1,   114,    -1,   116,    -1,   117,    -1,\n+     118,    -1,   119,    -1,   120,    -1,   121,    -1,   123,    -1,\n+     124,    -1,   125,    -1,   126,    -1,   127,    -1,   130,    -1,\n+     131,    -1,   132,    -1,   133,    -1,   134,    -1,   136,    -1,\n+     137,    -1,   138,    -1,   140,    -1,   141,    -1,   142,    -1,\n+     144,    -1,   145,    -1,   146,    -1,   147,    -1,   149,    -1,\n+     150,    -1,   151,    -1,   152,    -1,   153,    -1,   156,    -1,\n+     158,    -1,   159,    -1,   161,    -1,   163,    -1,   165,    -1,\n+     169,    -1,   170,    -1,   173,    -1,   175,    -1,   179,    -1,\n+     181,    -1,   182,    -1,   183,    -1,   184,    -1,   185,    -1,\n+     186,    -1,   187,    -1,   189,    -1,   190,    -1,   191,    -1,\n+     192,    -1,   194,    -1,   195,    -1,   196,    -1,   197,    -1,\n+     198,    -1,   199,    -1,   200,    -1,   202,    -1,   205,    -1,\n+     206,    -1,   207,    -1,   208,    -1,   209,    -1,   215,    -1,\n+     218,    -1,   220,    -1,   221,    -1,   222,    -1,   223,    -1,\n+     224,    -1,   225,    -1,   228,    -1,   230,    -1,   233,    -1,\n+     234,    -1,   235,    -1,   236,    -1,   237,    -1,   238,    -1,\n+     239,    -1,   240,    -1,   242,    -1,   243,    -1,   244,    -1,\n+     245,    -1,   246,    -1,   247,    -1,   248,    -1,   249,    -1,\n+     250,    -1,   251,    -1,   252,    -1,   253,    -1,   254,    -1,\n+     255,    -1,   256,    -1,   257,    -1,   258,    -1,   259,    -1,\n+     263,    -1,   264,    -1,   265,    -1,   268,    -1,   269,    -1,\n+     271,    -1,   274,    -1,   276,    -1,   277,    -1,   278,    -1,\n+     280,    -1,   281,    -1,   284,    -1,   285,    -1,   286,    -1,\n+     289,    -1,   292,    -1,   295,    -1,   296,    -1,   297,    -1,\n+     298,    -1,   299,    -1,   300,    -1,   301,    -1,   302,    -1,\n+     303,    -1,   304,    -1,   309,    -1,   310,    -1,   313,    -1,\n+     314,    -1,   316,    -1,   317,    -1,   318,    -1,   320,    -1,\n+     321,    -1,   322,    -1,   323,    -1,   324,    -1,   325,    -1,\n+     327,    -1,   328,    -1,   329,    -1,   331,    -1,   332,    -1,\n+     333,    -1,   334,    -1,   336,    -1,   337,    -1,   338,    -1,\n+     339,    -1,   340,    -1,   341,    -1,   342,    -1,   343,    -1,\n+     344,    -1,   345,    -1,   346,    -1,   347,    -1,   348,    -1,\n+     350,    -1,   351,    -1,   353,    -1,   354,    -1,   355,    -1,\n+     357,    -1,   358,    -1,   359,    -1,   360,    -1,   361,    -1,\n+     362,    -1,   363,    -1,   364,    -1,   365,    -1,   366,    -1,\n+     367,    -1,   370,    -1,   371,    -1,   372,    -1,   373,    -1,\n+     374,    -1,   375,    -1,   377,    -1,   378,    -1,   379,    -1,\n+     381,    -1,   382,    -1,   384,    -1,   386,    -1,   387,    -1,\n+     388,    -1,   389,    -1,   390,    -1,   391,    -1,   392,    -1,\n+     393,    -1,   394,    -1,   395,    -1,   396,    -1,   397,    -1,\n+     399,    -1,   401,    -1,   403,    -1,   404,    -1,   406,    -1,\n+     408,    -1,   409,    -1,   410,    -1,   411,    -1,   412,    -1,\n+     418,    -1,   419,    -1,   421,    -1,   424,    -1,   425,    -1,\n+     427,    -1,   428,    -1,   429,    -1,   430,    -1,   431,    -1,\n+     434,    -1,   435,    -1,   436,    -1,   438,    -1,   439,    -1,\n+     440,    -1,   441,    -1,   443,    -1,   444,    -1,   445,    -1,\n+     446,    -1,   447,    -1,   451,    -1,   453,    -1,   454,    -1,\n+     455,    -1,   456,    -1,   457,    -1,   460,    -1,   463,    -1,\n+     464,    -1,   465,    -1,   466,    -1,   467,    -1,   468,    -1,\n+     480,    -1,   481,    -1,   482,    -1,   483,    -1,    53,    -1,\n+      54,    -1,    56,    -1,    57,    -1,    69,    -1,    70,    -1,\n+      77,    -1,    81,    -1,   110,    -1,   111,    -1,   148,    -1,\n+     154,    -1,   160,    -1,   171,    -1,   177,    -1,   178,    -1,\n+     204,    -1,   210,    -1,   211,    -1,   213,    -1,   241,    -1,\n+     260,    -1,   262,    -1,   266,    -1,   273,    -1,   275,    -1,\n+     290,    -1,   294,    -1,   311,    -1,   315,    -1,   330,    -1,\n+     356,    -1,   376,    -1,   383,    -1,   398,    -1,   400,    -1,\n+     414,    -1,   415,    -1,   420,    -1,   422,    -1,   426,    -1,\n+     448,    -1,   449,    -1,   469,    -1,   470,    -1,   471,    -1,\n+     472,    -1,   473,    -1,   474,    -1,   475,    -1,   476,    -1,\n+     477,    -1,   478,    -1,   479,    -1,    42,    -1,    49,    -1,\n+      55,    -1,    79,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,\n+     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,\n+     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,\n+     312,    -1,   352,    -1,   380,    -1,   398,    -1,   407,    -1,\n+     452,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,\n+      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   172,    -1,   188,    -1,   203,    -1,   216,    -1,\n+     217,    -1,   219,    -1,   229,    -1,   231,    -1,   261,    -1,\n+     270,    -1,   291,    -1,   293,    -1,   312,    -1,   352,    -1,\n+     369,    -1,   380,    -1,   407,    -1,   426,    -1,   452,    -1,\n+      37,    -1,    42,    -1,    49,    -1,    53,    -1,    54,    -1,\n+      55,    -1,    56,    -1,    57,    -1,    70,    -1,    69,    -1,\n+      77,    -1,    79,    -1,    81,    -1,    87,    -1,    99,    -1,\n+     110,    -1,   111,    -1,   148,    -1,   154,    -1,   160,    -1,\n+     166,    -1,   168,    -1,   171,    -1,   172,    -1,   177,    -1,\n+     178,    -1,   188,    -1,   203,    -1,   204,    -1,   211,    -1,\n+     213,    -1,   210,    -1,   216,    -1,   217,    -1,   219,    -1,\n+     229,    -1,   231,    -1,   241,    -1,   260,    -1,   261,    -1,\n+     262,    -1,   266,    -1,   270,    -1,   273,    -1,   275,    -1,\n+     291,    -1,   290,    -1,   293,    -1,   294,    -1,   311,    -1,\n+     312,    -1,   315,    -1,   330,    -1,   352,    -1,   356,    -1,\n+     369,    -1,   376,    -1,   380,    -1,   383,    -1,   398,    -1,\n+     400,    -1,   407,    -1,   414,    -1,   415,    -1,   420,    -1,\n+     422,    -1,   426,    -1,   448,    -1,   449,    -1,   452,    -1,\n+     469,    -1,   470,    -1,   471,    -1,   472,    -1,   473,    -1,\n+     474,    -1,   475,    -1,   476,    -1,   477,    -1,   478,    -1,\n+     479,    -1,    37,    -1,    42,    -1,    49,    -1,    55,    -1,\n+      79,    -1,    81,    -1,    87,    -1,    99,    -1,   166,    -1,\n+     168,    -1,   171,    -1,   172,    -1,   188,    -1,   203,    -1,\n+     216,    -1,   217,    -1,   219,    -1,   229,    -1,   231,    -1,\n+     241,    -1,   261,    -1,   270,    -1,   291,    -1,   293,    -1,\n+     312,    -1,   352,    -1,   369,    -1,   380,    -1,   398,    -1,\n+     407,    -1,   426,    -1,   452,    -1,    30,    -1,    34,    -1,\n+      35,    -1,    36,    -1,    38,    -1,    39,    -1,    40,    -1,\n+      41,    -1,    45,    -1,    58,    -1,    65,    -1,    66,    -1,\n+      72,    -1,    78,    -1,    80,    -1,    91,    -1,    98,    -1,\n+     113,    -1,   115,    -1,   122,    -1,   128,    -1,   129,    -1,\n+     135,    -1,   139,    -1,   143,    -1,   155,    -1,   157,    -1,\n+     162,    -1,   164,    -1,   167,    -1,   174,    -1,   176,    -1,\n+     180,    -1,   193,    -1,   201,    -1,   212,    -1,   214,    -1,\n+     226,    -1,   227,    -1,   232,    -1,   267,    -1,   272,    -1,\n+     279,    -1,   282,    -1,   283,    -1,   287,    -1,   288,    -1,\n+     305,    -1,   306,    -1,   307,    -1,   308,    -1,   319,    -1,\n+     326,    -1,   335,    -1,   349,    -1,   368,    -1,   385,    -1,\n+     402,    -1,   405,    -1,   413,    -1,   416,    -1,   417,    -1,\n+     423,    -1,   432,    -1,   433,    -1,   437,    -1,   442,    -1,\n+     450,    -1,   458,    -1,   459,    -1,   461,    -1,   462,    -1\n };\n \n /* YYRLINE[YYN] -- source line where rule number YYN was defined.  */\n static const yytype_uint16 yyrline[] =\n {\n-       0,   486,   486,   502,   514,   523,   524,   525,   526,   527,\n-     528,   529,   530,   531,   532,   533,   534,   535,   536,   537,\n-     538,   539,   540,   541,   542,   543,   544,   545,   546,   547,\n-     548,   549,   550,   551,   552,   553,   554,   555,   556,   557,\n-     558,   559,   560,   562,     9,    18,    27,    36,    45,    54,\n+       0,   490,   490,   506,   518,   527,   528,   529,   530,   531,\n+     532,   533,   534,   535,   536,   537,   538,   539,   540,   541,\n+     542,   543,   544,   545,   546,   547,   548,   549,   550,   551,\n+     552,   553,   554,   555,   556,   557,   558,   559,   560,   561,\n+     562,   563,   564,   566,     9,    18,    27,    36,    45,    54,\n       63,    72,    85,    87,    93,    94,    99,   103,   107,   118,\n      126,   130,   139,   148,   157,   166,   175,   184,   192,   200,\n      209,   218,   227,   236,   253,   262,   271,   280,   290,   303,\n@@ -2466,135 +2472,136 @@ static const yytype_uint16 yyrline[] =\n      456,   457,   458,     7,    13,    19,    25,     6,    15,    25,\n       35,    45,    55,    65,    75,    85,    95,   106,   117,   127,\n      140,   141,     9,    23,    29,    36,    42,    49,    59,    63,\n-      72,    81,    90,    97,    98,   103,   115,   120,   145,   150,\n-     155,   161,   171,   181,   187,   198,   209,   224,   225,   231,\n-     232,   237,   238,   244,   245,   249,   250,   255,   257,   263,\n-     264,   268,   269,   272,   273,   278,     7,    16,    25,    46,\n-      47,    50,    54,     7,    14,    22,     9,    15,    22,    28,\n-      34,    41,    48,    59,     9,    19,    29,    42,    43,     7,\n-      14,    31,    51,    52,     9,    17,    29,    30,    34,    35,\n-      36,    41,    42,    43,    48,    52,    56,    60,    64,    68,\n-      72,    76,    80,    84,    88,    92,    97,   101,   105,   112,\n-     113,   117,   118,   119,     2,     9,    15,    21,    28,    35,\n-      45,    46,    47,     2,     7,    21,    36,    56,    57,    84,\n-      85,    86,    87,    88,    89,    93,    94,    99,   104,   105,\n-     106,   107,   108,   113,   120,   121,   122,   139,   146,   153,\n-     163,   173,   185,   193,   202,   220,   221,   225,   226,   230,\n-     239,   262,   276,   283,   288,   290,   292,   294,   297,   300,\n-     301,   302,   303,   308,   312,   313,   318,   325,   330,   331,\n-     332,   333,   334,   335,   336,   337,   343,   344,   348,   353,\n-     360,   367,   374,   386,   387,   388,   389,   393,   398,   399,\n-     400,   405,   410,   411,   412,   413,   414,   415,   420,   440,\n-     469,   470,   474,   478,   479,   480,   484,   488,   496,   497,\n-     502,   503,   504,   508,   516,   517,   522,   523,   527,   532,\n-     536,   540,   545,   553,   554,   558,   559,   563,   564,   570,\n-     581,   594,   608,   622,   636,   650,   673,   677,   684,   688,\n-     696,   701,   708,   718,   719,   720,   721,   722,   729,   736,\n-     737,   742,   743,     9,    19,    29,    39,    49,    59,    69,\n-      79,    93,    94,    95,    96,    97,    98,    99,   100,   101,\n-     102,   103,   104,   105,   106,   107,   108,   109,   110,   115,\n-     116,   117,   118,   119,   120,   125,   126,   131,   132,   133,\n-     138,   139,   140,   143,   144,     8,    20,    33,    46,    58,\n-      70,    86,    87,    91,    95,     7,     1,    30,    53,    54,\n-      59,    63,    68,    72,    80,    81,    85,    86,    91,    92,\n-      96,    97,   102,   103,   104,   105,   106,   111,   119,   123,\n-     128,   129,   134,   138,   143,   147,   151,   155,   159,   163,\n-     167,   171,   175,   179,   183,   187,   191,   195,   199,   203,\n-     211,   217,   218,   219,   224,   228,    47,    48,    52,    53,\n-      68,    69,    76,    84,    92,   100,   108,   116,   127,   128,\n-     155,   160,   168,   184,   201,   218,   235,   236,   255,   259,\n-     263,   267,   271,   280,   290,   299,   308,   318,   328,   339,\n-     353,   370,   370,   374,   374,   378,   378,   382,   388,   395,\n-     399,   400,   404,   405,   419,   426,   433,   443,   444,   447,\n-     459,   470,   478,   483,   488,   493,   498,   506,   514,   519,\n-     524,   531,   532,   536,   537,   538,   542,   549,   550,   554,\n-     555,   559,   560,   561,   565,   566,   570,   571,   587,   588,\n-     591,   600,   611,   612,   613,   616,   617,   618,   622,   623,\n-     624,   625,   629,   630,   634,   636,   652,   654,   659,   662,\n-     670,   674,   678,   682,   686,   690,   697,   702,   709,   710,\n-     714,   719,   723,   727,   735,   742,   743,   748,   749,   753,\n-     754,   759,   761,   763,   768,   788,   789,   791,   796,   797,\n-     801,   802,   805,   806,   831,   832,   837,   841,   842,   846,\n-     847,   851,   852,   853,   854,   855,   859,   872,   879,   886,\n-     893,   894,   898,   899,   903,   904,   908,   909,   913,   914,\n-     918,   919,   923,   934,   935,   936,   937,   941,   942,   947,\n-     948,   949,   958,   964,   973,   974,   987,   988,   992,   993,\n-     997,   998,  1004,  1010,  1018,  1027,  1035,  1044,  1053,  1057,\n-    1062,  1072,  1085,  1086,  1089,  1090,  1091,  1094,  1102,  1112,\n-    1113,  1116,  1124,  1133,  1137,  1144,  1145,  1149,  1158,  1162,\n-    1187,  1191,  1204,  1218,  1233,  1245,  1258,  1272,  1286,  1299,\n-    1314,  1333,  1339,  1344,  1350,  1357,  1358,  1366,  1370,  1374,\n-    1380,  1387,  1392,  1393,  1394,  1395,  1396,  1397,  1401,  1402,\n-    1414,  1415,  1420,  1427,  1434,  1441,  1473,  1484,  1497,  1502,\n-    1503,  1506,  1507,  1510,  1511,  1516,  1517,  1522,  1526,  1532,\n-    1553,  1561,  1574,  1577,  1581,  1581,  1584,  1585,  1587,  1592,\n-    1599,  1604,  1610,  1615,  1621,  1627,  1633,  1642,  1644,  1647,\n-    1651,  1652,  1653,  1654,  1655,  1656,  1661,  1681,  1682,  1683,\n-    1684,  1695,  1709,  1710,  1716,  1721,  1726,  1731,  1736,  1741,\n-    1746,  1751,  1757,  1763,  1769,  1776,  1798,  1807,  1811,  1819,\n-    1823,  1831,  1843,  1864,  1868,  1874,  1878,  1891,  1899,  1909,\n-    1911,  1913,  1915,  1917,  1919,  1924,  1925,  1932,  1941,  1949,\n-    1958,  1969,  1977,  1978,  1979,  1983,  1983,  1986,  1986,  1989,\n-    1989,  1992,  1992,  1995,  1995,  1998,  1998,  2001,  2001,  2004,\n-    2004,  2007,  2009,  2011,  2013,  2015,  2017,  2019,  2021,  2023,\n-    2028,  2033,  2039,  2046,  2051,  2057,  2063,  2094,  2096,  2098,\n-    2106,  2121,  2123,  2125,  2127,  2129,  2131,  2133,  2135,  2137,\n-    2139,  2141,  2143,  2145,  2147,  2149,  2151,  2154,  2156,  2158,\n-    2161,  2163,  2165,  2167,  2169,  2174,  2179,  2186,  2191,  2198,\n-    2203,  2210,  2215,  2223,  2231,  2239,  2247,  2265,  2273,  2281,\n-    2289,  2297,  2305,  2313,  2317,  2333,  2341,  2349,  2357,  2365,\n-    2373,  2381,  2385,  2389,  2393,  2397,  2405,  2413,  2421,  2429,\n-    2449,  2471,  2482,  2489,  2503,  2511,  2519,  2539,  2541,  2543,\n-    2545,  2547,  2549,  2551,  2553,  2555,  2557,  2559,  2561,  2563,\n-    2565,  2567,  2569,  2571,  2573,  2575,  2577,  2579,  2581,  2585,\n-    2589,  2593,  2607,  2608,  2612,  2626,  2627,  2628,  2635,  2639,\n-    2643,  2646,  2657,  2662,  2664,  2675,  2699,  2710,  2721,  2725,\n-    2732,  2736,  2741,  2747,  2751,  2758,  2766,  2774,  2785,  2805,\n-    2841,  2852,  2853,  2860,  2866,  2868,  2870,  2874,  2883,  2888,\n-    2895,  2910,  2917,  2921,  2925,  2929,  2933,  2943,  2952,  2974,\n-    2975,  2979,  2980,  2981,  2985,  2986,  2993,  2994,  2998,  2999,\n-    3004,  3012,  3014,  3028,  3031,  3058,  3059,  3062,  3063,  3074,\n-    3080,  3087,  3096,  3113,  3158,  3166,  3174,  3182,  3190,  3211,\n-    3212,  3215,  3216,  3220,  3230,  3231,  3235,  3236,  3240,  3241,\n-    3242,  3245,  3246,  3249,  3250,  3251,  3252,  3253,  3254,  3255,\n-    3256,  3257,  3258,  3259,  3260,  3261,  3262,  3265,  3267,  3272,\n-    3274,  3279,  3281,  3283,  3285,  3287,  3289,  3291,  3293,  3307,\n-    3309,  3314,  3318,  3325,  3330,  3336,  3340,  3347,  3352,  3359,\n-    3364,  3372,  3376,  3382,  3386,  3395,  3406,  3407,  3411,  3415,\n-    3422,  3423,  3424,  3425,  3426,  3427,  3428,  3429,  3430,  3431,\n-    3441,  3445,  3452,  3459,  3460,  3476,  3480,  3485,  3489,  3504,\n-    3509,  3513,  3516,  3519,  3520,  3521,  3524,  3531,  3541,  3555,\n-    3556,  3560,  3571,  3572,  3575,  3576,  3579,  3583,  3590,  3594,\n-    3602,  3613,  3614,  3618,  3619,  3623,  3624,  3628,  3629,  3630,\n-    3634,  3643,  3651,  3667,  3668,  3673,  3674,  3684,  3685,  3689,\n-    3690,  3694,  3695,  3698,  3714,  3722,  3732,  3733,  3736,  3737,\n-    3740,  3744,  3745,  3749,  3750,  3753,  3754,  3755,  3765,  3766,\n-    3777,  3781,  3809,  3811,  3817,  3818,  3822,  3823,  3826,  3828,\n-    3838,  3841,  3852,  3856,  3860,  3872,  3876,  3885,  3892,  3930,\n-    3934,  3938,  3942,  3946,  3950,  3954,  3960,  3961,  3977,  3978,\n-    3979,  3982,  3983,  3989,  3990,  3991,  3994,  3995,  3996,  3999,\n-    4000,  4001,  4004,  4005,  4008,  4010,  4015,  4016,  4019,  4027,\n-    4028,  4029,  4030,  4033,  4034,  4037,     7,    18,    19,    23,\n-      24,    25,    26,     7,    26,    50,    73,    80,    85,    86,\n-      87,    88,     8,    33,    62,    66,    67,    72,    73,    78,\n-      79,    83,    84,    89,    90,     7,    16,    25,    34,    43,\n-      52,     5,    12,    22,    23,     7,    19,    33,     9,    16,\n-      26,    33,    44,    45,    50,    51,    52,    57,    58,    59,\n-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n-      70,    71,    72,    73,    74,    75,    76,    77,    78,    79,\n-      80,    81,    82,    83,    84,    85,    86,    90,    91,    92,\n-      97,    98,   103,   107,   115,   116,   121,   122,   123,   129,\n-     134,   142,   143,    10,    16,    22,    28,    38,    39,    47,\n-      58,    70,    78,    86,    93,   103,   105,   111,   115,   119,\n-     134,   141,   142,   143,   147,   148,     7,    14,    20,    28,\n-      29,     8,    22,    36,    48,    56,    70,    71,    72,    73,\n-      74,    87,    88,    93,    94,    98,    99,     7,    18,    31,\n-      35,    42,    53,    54,    60,    61,     9,    19,     7,    18,\n-      25,    34,    35,    39,    40,     2,     7,    15,    26,    27,\n-      34,     3,    10,    17,    24,    31,    38,    45,    52,    61,\n-      61,    63,    64,    68,    69,     6,     8,    21,    34,    47,\n-      65,    87,    88,    89,    90,    11,    24,    37,    54,    55,\n-      56,    61,    74,    74,    74,    74,    74,    74,    74,    74,\n+      71,    72,    73,    77,    86,    95,   102,   103,   108,   120,\n+     125,   150,   155,   160,   166,   176,   186,   192,   203,   214,\n+     229,   230,   236,   237,   242,   243,   249,   250,   254,   255,\n+     260,   262,   268,   269,   273,   274,   277,   278,   283,     7,\n+      16,    25,    46,    47,    50,    54,     7,    14,    22,     9,\n+      15,    22,    28,    34,    41,    48,    59,     9,    19,    29,\n+      42,    43,     7,    14,    31,    51,    52,     9,    17,    29,\n+      30,    34,    35,    36,    41,    42,    43,    48,    52,    56,\n+      60,    64,    68,    72,    76,    80,    84,    88,    92,    97,\n+     101,   105,   112,   113,   117,   118,   119,     2,     9,    15,\n+      21,    28,    35,    45,    46,    47,     2,     7,    21,    36,\n+      56,    57,    84,    85,    86,    87,    88,    89,    93,    94,\n+      99,   104,   105,   106,   107,   108,   113,   120,   121,   122,\n+     139,   146,   153,   163,   173,   185,   193,   202,   220,   221,\n+     225,   226,   230,   239,   262,   276,   283,   288,   290,   292,\n+     294,   297,   300,   301,   302,   303,   308,   312,   313,   318,\n+     325,   330,   331,   332,   333,   334,   335,   336,   337,   343,\n+     344,   348,   353,   360,   367,   374,   386,   387,   388,   389,\n+     393,   398,   399,   400,   405,   410,   411,   412,   413,   414,\n+     415,   420,   440,   469,   470,   474,   478,   479,   480,   484,\n+     488,   496,   497,   502,   503,   504,   508,   516,   517,   522,\n+     523,   527,   532,   536,   540,   545,   553,   554,   558,   559,\n+     563,   564,   570,   581,   594,   608,   622,   636,   650,   673,\n+     677,   684,   688,   696,   701,   708,   718,   719,   720,   721,\n+     722,   729,   736,   737,   742,   743,     9,    19,    29,    39,\n+      49,    59,    69,    79,    93,    94,    95,    96,    97,    98,\n+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   115,   116,   117,   118,   119,   120,   125,   126,\n+     131,   132,   133,   138,   139,   140,   143,   144,     8,    20,\n+      33,    46,    58,    70,    86,    87,    91,    95,     7,     1,\n+      30,    53,    54,    59,    63,    68,    72,    80,    81,    85,\n+      86,    91,    92,    96,    97,   102,   103,   104,   105,   106,\n+     111,   119,   123,   128,   129,   134,   138,   143,   147,   151,\n+     155,   159,   163,   167,   171,   175,   179,   183,   187,   191,\n+     195,   199,   203,   211,   217,   218,   219,   224,   228,    47,\n+      48,    52,    53,    68,    69,    76,    84,    92,   100,   108,\n+     116,   127,   128,   155,   160,   168,   184,   201,   218,   235,\n+     236,   255,   259,   263,   267,   271,   280,   290,   299,   308,\n+     318,   328,   339,   353,   370,   370,   374,   374,   378,   378,\n+     382,   388,   395,   399,   400,   404,   405,   419,   426,   433,\n+     443,   444,   447,   459,   470,   478,   483,   488,   493,   498,\n+     506,   514,   519,   524,   531,   532,   536,   537,   538,   542,\n+     549,   550,   554,   555,   559,   560,   561,   565,   566,   570,\n+     571,   587,   588,   591,   600,   611,   612,   613,   616,   617,\n+     618,   622,   623,   624,   625,   629,   630,   634,   636,   652,\n+     654,   659,   662,   670,   674,   678,   682,   686,   690,   697,\n+     702,   709,   710,   714,   719,   723,   727,   735,   742,   743,\n+     748,   749,   753,   754,   759,   761,   763,   768,   788,   789,\n+     791,   796,   797,   801,   802,   805,   806,   831,   832,   837,\n+     841,   842,   846,   847,   851,   852,   853,   854,   855,   859,\n+     872,   879,   886,   893,   894,   898,   899,   903,   904,   908,\n+     909,   913,   914,   918,   919,   923,   934,   935,   936,   937,\n+     941,   942,   947,   948,   949,   958,   964,   973,   974,   987,\n+     988,   992,   993,   997,   998,  1004,  1010,  1018,  1027,  1035,\n+    1044,  1053,  1057,  1062,  1072,  1085,  1086,  1089,  1090,  1091,\n+    1094,  1102,  1112,  1113,  1116,  1124,  1133,  1137,  1144,  1145,\n+    1149,  1158,  1162,  1187,  1191,  1204,  1218,  1233,  1245,  1258,\n+    1272,  1286,  1299,  1314,  1333,  1339,  1344,  1350,  1357,  1358,\n+    1366,  1370,  1374,  1380,  1387,  1392,  1393,  1394,  1395,  1396,\n+    1397,  1401,  1402,  1414,  1415,  1420,  1427,  1434,  1441,  1473,\n+    1484,  1497,  1502,  1503,  1506,  1507,  1510,  1511,  1516,  1517,\n+    1522,  1526,  1532,  1553,  1561,  1574,  1577,  1581,  1581,  1584,\n+    1585,  1587,  1592,  1599,  1604,  1610,  1615,  1621,  1627,  1633,\n+    1642,  1644,  1647,  1651,  1652,  1653,  1654,  1655,  1656,  1661,\n+    1681,  1682,  1683,  1684,  1695,  1709,  1710,  1716,  1721,  1726,\n+    1731,  1736,  1741,  1746,  1751,  1757,  1763,  1769,  1776,  1798,\n+    1807,  1811,  1819,  1823,  1831,  1843,  1864,  1868,  1874,  1878,\n+    1891,  1899,  1909,  1911,  1913,  1915,  1917,  1919,  1924,  1925,\n+    1932,  1941,  1949,  1958,  1969,  1977,  1978,  1979,  1983,  1983,\n+    1986,  1986,  1989,  1989,  1992,  1992,  1995,  1995,  1998,  1998,\n+    2001,  2001,  2004,  2004,  2007,  2009,  2011,  2013,  2015,  2017,\n+    2019,  2021,  2023,  2028,  2033,  2039,  2046,  2051,  2057,  2063,\n+    2094,  2096,  2098,  2106,  2121,  2123,  2125,  2127,  2129,  2131,\n+    2133,  2135,  2137,  2139,  2141,  2143,  2145,  2147,  2149,  2151,\n+    2154,  2156,  2158,  2161,  2163,  2165,  2167,  2169,  2174,  2179,\n+    2186,  2191,  2198,  2203,  2210,  2215,  2223,  2231,  2239,  2247,\n+    2265,  2273,  2281,  2289,  2297,  2305,  2313,  2317,  2333,  2341,\n+    2349,  2357,  2365,  2373,  2381,  2385,  2389,  2393,  2397,  2405,\n+    2413,  2421,  2429,  2449,  2471,  2482,  2489,  2503,  2511,  2519,\n+    2539,  2541,  2543,  2545,  2547,  2549,  2551,  2553,  2555,  2557,\n+    2559,  2561,  2563,  2565,  2567,  2569,  2571,  2573,  2575,  2577,\n+    2579,  2581,  2585,  2589,  2593,  2607,  2608,  2612,  2626,  2627,\n+    2628,  2635,  2639,  2643,  2646,  2657,  2662,  2664,  2675,  2699,\n+    2710,  2721,  2725,  2732,  2736,  2741,  2758,  2764,  2768,  2775,\n+    2783,  2791,  2802,  2822,  2858,  2869,  2870,  2877,  2883,  2885,\n+    2887,  2891,  2900,  2905,  2912,  2927,  2934,  2938,  2942,  2946,\n+    2950,  2960,  2969,  2991,  2992,  2996,  2997,  2998,  3002,  3003,\n+    3010,  3011,  3015,  3016,  3021,  3029,  3031,  3045,  3048,  3075,\n+    3076,  3079,  3080,  3091,  3097,  3104,  3113,  3130,  3175,  3183,\n+    3191,  3199,  3207,  3228,  3229,  3232,  3233,  3237,  3247,  3248,\n+    3252,  3253,  3257,  3264,  3265,  3270,  3271,  3276,  3277,  3280,\n+    3281,  3282,  3285,  3286,  3289,  3290,  3291,  3292,  3293,  3294,\n+    3295,  3296,  3297,  3298,  3299,  3300,  3301,  3302,  3305,  3307,\n+    3312,  3314,  3319,  3321,  3323,  3325,  3327,  3329,  3331,  3333,\n+    3347,  3349,  3354,  3358,  3365,  3370,  3376,  3380,  3387,  3392,\n+    3399,  3404,  3412,  3416,  3422,  3426,  3435,  3446,  3447,  3451,\n+    3455,  3462,  3463,  3464,  3465,  3466,  3467,  3468,  3469,  3470,\n+    3471,  3481,  3485,  3492,  3499,  3500,  3516,  3520,  3525,  3529,\n+    3544,  3549,  3553,  3556,  3559,  3560,  3561,  3564,  3571,  3581,\n+    3595,  3596,  3600,  3611,  3612,  3615,  3616,  3619,  3623,  3630,\n+    3634,  3642,  3653,  3654,  3658,  3659,  3663,  3664,  3668,  3669,\n+    3670,  3674,  3683,  3691,  3707,  3708,  3713,  3714,  3724,  3725,\n+    3729,  3730,  3734,  3735,  3738,  3754,  3762,  3772,  3773,  3776,\n+    3777,  3780,  3784,  3785,  3789,  3790,  3793,  3794,  3795,  3805,\n+    3806,  3817,  3821,  3849,  3851,  3857,  3858,  3862,  3863,  3866,\n+    3868,  3878,  3881,  3892,  3896,  3900,  3912,  3916,  3925,  3932,\n+    3970,  3974,  3978,  3982,  3986,  3990,  3994,  4000,  4001,  4017,\n+    4018,  4019,  4022,  4023,  4029,  4030,  4031,  4034,  4035,  4036,\n+    4039,  4040,  4041,  4044,  4045,  4048,  4050,  4055,  4056,  4059,\n+    4067,  4068,  4069,  4070,  4073,  4074,  4077,     7,    18,    19,\n+      23,    24,    25,    26,    27,     7,    26,    50,    73,    80,\n+      85,    86,    87,    88,     8,    33,    62,    66,    67,    72,\n+      73,    78,    79,    83,    84,    89,    90,     7,    16,    25,\n+      34,    43,    52,     5,    12,    22,    23,     7,    19,    33,\n+       9,    16,    26,    33,    44,    45,    50,    51,    52,    57,\n+      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n+      68,    69,    70,    71,    72,    73,    74,    75,    76,    77,\n+      78,    79,    80,    81,    82,    83,    84,    85,    86,    90,\n+      91,    92,    97,    98,   103,   107,   115,   116,   121,   122,\n+     123,   129,   134,   142,   143,    10,    16,    22,    28,    38,\n+      39,    47,    58,    70,    78,    86,    93,   103,   105,   111,\n+     115,   119,   134,   141,   142,   143,   147,   148,     7,    14,\n+      20,    28,    29,     8,    22,    36,    48,    56,    70,    71,\n+      72,    73,    74,    87,    88,    93,    94,    98,    99,     7,\n+      18,    31,    35,    42,    53,    54,    60,    61,     9,    19,\n+       7,    18,    25,    34,    35,    39,    40,     2,     7,    15,\n+      26,    27,    34,     3,    10,    17,    24,    31,    38,    45,\n+      52,    61,    61,    63,    63,    65,    66,    70,    71,     6,\n+       8,    21,    34,    47,    65,    87,    88,    89,    90,    11,\n+      24,    37,    54,    55,    56,    61,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n@@ -2625,18 +2632,18 @@ static const yytype_uint16 yyrline[] =\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n       74,    74,    74,    74,    74,    74,    74,    74,    74,    74,\n-      74,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n+      74,    74,    74,    74,    74,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n       75,    75,    75,    75,    75,    75,    75,    75,    75,    75,\n-      75,    75,    75,    75,    75,    76,    76,    76,    76,    76,\n+      75,    75,    75,    75,    75,    75,    75,    75,    75,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n       76,    76,    76,    76,    76,    76,    76,    76,    76,    76,\n-      76,    76,    76,    77,    77,    77,    77,    77,    77,    77,\n+      76,    76,    76,    76,    76,    76,    76,    77,    77,    77,\n       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,\n       77,    77,    77,    77,    77,    77,    77,    77,    77,    77,\n-      77,    77,    78,    78,    78,    78,    78,    78,    78,    78,\n+      77,    77,    77,    77,    77,    77,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n@@ -2644,17 +2651,18 @@ static const yytype_uint16 yyrline[] =\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n       78,    78,    78,    78,    78,    78,    78,    78,    78,    78,\n-      78,    78,    78,    79,    79,    79,    79,    79,    79,    79,\n+      78,    78,    78,    78,    78,    78,    78,    79,    79,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n       79,    79,    79,    79,    79,    79,    79,    79,    79,    79,\n-      79,    79,    79,    79,    79,    80,    80,    80,    80,    80,\n+      79,    79,    79,    79,    79,    79,    79,    79,    79,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n       80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n-      80,    80,    80,    80,    80,    80,    80\n+      80,    80,    80,    80,    80,    80,    80,    80,    80,    80,\n+      80\n };\n #endif\n \n@@ -2749,37 +2757,38 @@ static const char *const yytname[] =\n   \"alter_table_cmd\", \"alter_using\", \"alter_generic_option_elem\",\n   \"alter_table_cmds\", \"alter_generic_options\", \"opt_set_data\",\n   \"DeallocateStmt\", \"RenameStmt\", \"opt_column\", \"InsertStmt\",\n-  \"insert_rest\", \"insert_target\", \"opt_conf_expr\", \"opt_with_clause\",\n-  \"insert_column_item\", \"set_clause\", \"opt_or_action\", \"opt_on_conflict\",\n-  \"index_elem\", \"returning_clause\", \"override_kind\", \"set_target_list\",\n-  \"opt_collate\", \"opt_class\", \"insert_column_list\", \"set_clause_list\",\n-  \"set_clause_list_opt_comma\", \"index_params\", \"set_target\",\n-  \"CreateTypeStmt\", \"opt_enum_val_list\", \"enum_val_list\", \"PragmaStmt\",\n-  \"CreateDatabaseStmt\", \"opt_extension_name\", \"CreateSeqStmt\",\n-  \"OptSeqOptList\", \"ExecuteStmt\", \"execute_param_clause\", \"AlterSeqStmt\",\n-  \"SeqOptList\", \"opt_with\", \"NumericOnly\", \"SeqOptElem\", \"opt_by\",\n-  \"SignedIconst\", \"TransactionStmt\", \"opt_transaction\", \"UseStmt\",\n-  \"CreateStmt\", \"ConstraintAttributeSpec\", \"def_arg\",\n-  \"OptParenthesizedSeqOptList\", \"generic_option_arg\", \"key_action\",\n-  \"ColConstraint\", \"ColConstraintElem\", \"GeneratedColumnType\",\n-  \"opt_GeneratedColumnType\", \"GeneratedConstraintElem\",\n-  \"generic_option_elem\", \"key_update\", \"key_actions\", \"OnCommitOption\",\n-  \"reloptions\", \"opt_no_inherit\", \"TableConstraint\", \"TableLikeOption\",\n-  \"reloption_list\", \"ExistingIndex\", \"ConstraintAttr\", \"OptWith\",\n-  \"definition\", \"TableLikeOptionList\", \"generic_option_name\",\n-  \"ConstraintAttributeElem\", \"columnDef\", \"def_list\", \"index_name\",\n-  \"TableElement\", \"def_elem\", \"opt_definition\", \"OptTableElementList\",\n-  \"columnElem\", \"opt_column_list\", \"ColQualList\", \"key_delete\",\n-  \"reloption_elem\", \"columnList\", \"columnList_opt_comma\", \"func_type\",\n-  \"ConstraintElem\", \"TableElementList\", \"key_match\", \"TableLikeClause\",\n-  \"OptTemp\", \"generated_when\", \"DropStmt\", \"drop_type_any_name\",\n-  \"drop_type_name\", \"any_name_list\", \"opt_drop_behavior\",\n-  \"drop_type_name_on_any_name\", \"type_name_list\", \"CreateFunctionStmt\",\n-  \"macro_alias\", \"param_list\", \"UpdateStmt\", \"CopyStmt\", \"copy_from\",\n-  \"copy_delimiter\", \"copy_generic_opt_arg_list\", \"opt_using\", \"opt_as\",\n-  \"opt_program\", \"copy_options\", \"copy_generic_opt_arg\",\n-  \"copy_generic_opt_elem\", \"opt_oids\", \"copy_opt_list\", \"opt_binary\",\n-  \"copy_opt_item\", \"copy_generic_opt_arg_list_item\", \"copy_file_name\",\n+  \"insert_rest\", \"insert_target\", \"opt_by_name_or_position\",\n+  \"opt_conf_expr\", \"opt_with_clause\", \"insert_column_item\", \"set_clause\",\n+  \"opt_or_action\", \"opt_on_conflict\", \"index_elem\", \"returning_clause\",\n+  \"override_kind\", \"set_target_list\", \"opt_collate\", \"opt_class\",\n+  \"insert_column_list\", \"set_clause_list\", \"set_clause_list_opt_comma\",\n+  \"index_params\", \"set_target\", \"CreateTypeStmt\", \"opt_enum_val_list\",\n+  \"enum_val_list\", \"PragmaStmt\", \"CreateDatabaseStmt\",\n+  \"opt_extension_name\", \"CreateSeqStmt\", \"OptSeqOptList\", \"ExecuteStmt\",\n+  \"execute_param_clause\", \"AlterSeqStmt\", \"SeqOptList\", \"opt_with\",\n+  \"NumericOnly\", \"SeqOptElem\", \"opt_by\", \"SignedIconst\", \"TransactionStmt\",\n+  \"opt_transaction\", \"UseStmt\", \"CreateStmt\", \"ConstraintAttributeSpec\",\n+  \"def_arg\", \"OptParenthesizedSeqOptList\", \"generic_option_arg\",\n+  \"key_action\", \"ColConstraint\", \"ColConstraintElem\",\n+  \"GeneratedColumnType\", \"opt_GeneratedColumnType\",\n+  \"GeneratedConstraintElem\", \"generic_option_elem\", \"key_update\",\n+  \"key_actions\", \"OnCommitOption\", \"reloptions\", \"opt_no_inherit\",\n+  \"TableConstraint\", \"TableLikeOption\", \"reloption_list\", \"ExistingIndex\",\n+  \"ConstraintAttr\", \"OptWith\", \"definition\", \"TableLikeOptionList\",\n+  \"generic_option_name\", \"ConstraintAttributeElem\", \"columnDef\",\n+  \"def_list\", \"index_name\", \"TableElement\", \"def_elem\", \"opt_definition\",\n+  \"OptTableElementList\", \"columnElem\", \"opt_column_list\", \"ColQualList\",\n+  \"key_delete\", \"reloption_elem\", \"columnList\", \"columnList_opt_comma\",\n+  \"func_type\", \"ConstraintElem\", \"TableElementList\", \"key_match\",\n+  \"TableLikeClause\", \"OptTemp\", \"generated_when\", \"DropStmt\",\n+  \"drop_type_any_name\", \"drop_type_name\", \"any_name_list\",\n+  \"opt_drop_behavior\", \"drop_type_name_on_any_name\", \"type_name_list\",\n+  \"CreateFunctionStmt\", \"macro_alias\", \"param_list\", \"UpdateStmt\",\n+  \"CopyStmt\", \"copy_from\", \"copy_delimiter\", \"copy_generic_opt_arg_list\",\n+  \"opt_using\", \"opt_as\", \"opt_program\", \"copy_options\",\n+  \"copy_generic_opt_arg\", \"copy_generic_opt_elem\", \"opt_oids\",\n+  \"copy_opt_list\", \"opt_binary\", \"copy_opt_item\",\n+  \"copy_generic_opt_arg_list_item\", \"copy_file_name\",\n   \"copy_generic_opt_list\", \"SelectStmt\", \"select_with_parens\",\n   \"select_no_parens\", \"select_clause\", \"opt_select\", \"simple_select\",\n   \"value_or_values\", \"pivot_keyword\", \"unpivot_keyword\",\n@@ -2824,16 +2833,17 @@ static const char *const yytname[] =\n   \"window_specification\", \"opt_existing_window_name\",\n   \"opt_partition_clause\", \"opt_frame_clause\", \"frame_extent\",\n   \"frame_bound\", \"qualified_row\", \"row\", \"dict_arg\", \"dict_arguments\",\n-  \"dict_arguments_opt_comma\", \"sub_type\", \"all_Op\", \"MathOp\", \"qual_Op\",\n-  \"qual_all_Op\", \"subquery_Op\", \"any_operator\", \"c_expr_list\",\n-  \"c_expr_list_opt_comma\", \"expr_list\", \"expr_list_opt_comma\",\n-  \"opt_expr_list_opt_comma\", \"func_arg_list\", \"func_arg_expr\", \"type_list\",\n-  \"extract_list\", \"extract_arg\", \"overlay_list\", \"overlay_placing\",\n-  \"position_list\", \"substr_list\", \"substr_from\", \"substr_for\", \"trim_list\",\n-  \"in_expr\", \"case_expr\", \"when_clause_list\", \"when_clause\",\n-  \"case_default\", \"case_arg\", \"columnref\", \"indirection_el\",\n-  \"opt_slice_bound\", \"indirection\", \"opt_indirection\",\n-  \"opt_func_arguments\", \"extended_indirection_el\",\n+  \"dict_arguments_opt_comma\", \"map_arg\", \"map_arguments\",\n+  \"map_arguments_opt_comma\", \"opt_map_arguments_opt_comma\", \"sub_type\",\n+  \"all_Op\", \"MathOp\", \"qual_Op\", \"qual_all_Op\", \"subquery_Op\",\n+  \"any_operator\", \"c_expr_list\", \"c_expr_list_opt_comma\", \"expr_list\",\n+  \"expr_list_opt_comma\", \"opt_expr_list_opt_comma\", \"func_arg_list\",\n+  \"func_arg_expr\", \"type_list\", \"extract_list\", \"extract_arg\",\n+  \"overlay_list\", \"overlay_placing\", \"position_list\", \"substr_list\",\n+  \"substr_from\", \"substr_for\", \"trim_list\", \"in_expr\", \"case_expr\",\n+  \"when_clause_list\", \"when_clause\", \"case_default\", \"case_arg\",\n+  \"columnref\", \"indirection_el\", \"opt_slice_bound\", \"indirection\",\n+  \"opt_indirection\", \"opt_func_arguments\", \"extended_indirection_el\",\n   \"opt_extended_indirection\", \"opt_asymmetric\",\n   \"opt_target_list_opt_comma\", \"target_list\", \"target_list_opt_comma\",\n   \"target_el\", \"except_list\", \"opt_except_list\", \"replace_list_el\",\n@@ -2859,8 +2869,8 @@ static const char *const yytname[] =\n   \"where_or_current_clause\", \"using_clause\", \"AnalyzeStmt\", \"AttachStmt\",\n   \"DetachStmt\", \"opt_database\", \"opt_database_alias\", \"VariableResetStmt\",\n   \"generic_reset\", \"reset_rest\", \"VariableShowStmt\", \"show_or_describe\",\n-  \"var_name\", \"table_id\", \"CallStmt\", \"ViewStmt\", \"opt_check_option\",\n-  \"CreateAsStmt\", \"opt_with_data\", \"create_as_target\",\n+  \"opt_tables\", \"var_name\", \"table_id\", \"CallStmt\", \"ViewStmt\",\n+  \"opt_check_option\", \"CreateAsStmt\", \"opt_with_data\", \"create_as_target\",\n   \"unreserved_keyword\", \"col_name_keyword\", \"func_name_keyword\",\n   \"type_name_keyword\", \"other_keyword\", \"type_func_name_keyword\",\n   \"reserved_keyword\", 0\n@@ -2943,195 +2953,197 @@ static const yytype_uint16 yyr1[] =\n      525,   525,   525,   526,   526,   526,   526,   527,   527,   527,\n      527,   527,   527,   527,   527,   527,   527,   527,   527,   527,\n      528,   528,   529,   530,   530,   530,   530,   530,   531,   531,\n-     532,   532,   532,   533,   533,   534,   535,   535,   536,   536,\n-     536,   537,   537,   537,   538,   538,   538,   539,   539,   540,\n-     540,   541,   541,   542,   542,   543,   543,   544,   544,   545,\n-     545,   546,   546,   547,   547,   548,   549,   549,   549,   550,\n-     550,   551,   551,   552,   552,   552,   553,   553,   553,   553,\n-     553,   553,   553,   554,   555,   555,   555,   556,   556,   557,\n-     557,   557,   558,   558,   559,   559,   560,   560,   561,   561,\n-     561,   562,   562,   562,   562,   563,   563,   563,   563,   563,\n-     563,   563,   563,   563,   563,   563,   563,   563,   563,   564,\n-     564,   565,   565,   565,   566,   566,   566,   566,   566,   566,\n-     567,   567,   567,   568,   569,   569,   569,   570,   570,   571,\n-     571,   571,   571,   571,   571,   572,   572,   573,   574,   574,\n-     574,   574,   574,   575,   575,   575,   575,   576,   576,   576,\n-     576,   576,   576,   576,   576,   577,   577,   578,   578,   579,\n-     579,   579,   580,   581,   582,   582,   582,   582,   582,   583,\n-     583,   583,   583,   584,   585,   585,   586,   586,   587,   587,\n-     587,   587,   587,   587,   587,   587,   588,   588,   589,   590,\n-     590,   590,   590,   591,   591,   591,   591,   592,   593,   593,\n-     593,   594,   595,   595,   595,   595,   595,   595,   596,   596,\n-     597,   597,   598,   599,   599,   599,   600,   600,   601,   601,\n-     602,   602,   602,   603,   604,   604,   605,   605,   606,   607,\n-     607,   607,   607,   608,   608,   609,   609,   610,   610,   610,\n-     611,   611,   611,   611,   611,   611,   612,   612,   613,   613,\n-     613,   613,   614,   615,   615,   615,   615,   615,   615,   615,\n-     615,   616,   616,   617,   617,   617,   617,   617,   617,   617,\n-     617,   618,   618,   618,   618,   618,   618,   618,   618,   618,\n-     618,   618,   618,   618,   618,   618,   618,   618,   618,   619,\n-     619,   619,   619,   619,   619,   620,   620,   621,   621,   621,\n-     622,   622,   622,   623,   623,   624,   624,   624,   624,   624,\n-     624,   625,   625,   626,   626,   627,   628,   628,   629,   629,\n-     630,   630,   631,   631,   632,   632,   633,   633,   634,   634,\n-     635,   635,   636,   636,   636,   636,   636,   637,   638,   638,\n-     639,   639,   640,   640,   641,   641,   641,   641,   641,   641,\n-     641,   641,   641,   641,   641,   641,   641,   641,   641,   641,\n-     642,   643,   643,   643,   644,   644,   645,   645,   646,   646,\n-     647,   647,   647,   647,   647,   647,   647,   647,   648,   648,\n-     649,   649,   650,   650,   650,   650,   650,   650,   650,   650,\n-     650,   650,   650,   650,   650,   650,   650,   650,   650,   650,\n-     650,   651,   651,   652,   652,   653,   653,   654,   654,   654,\n-     655,   655,   656,   656,   657,   657,   657,   658,   658,   659,\n-     660,   660,   661,   661,   661,   661,   661,   661,   661,   661,\n-     661,   662,   662,   663,   663,   663,   664,   665,   665,   666,\n-     666,   667,   667,   667,   668,   668,   669,   669,   670,   670,\n-     671,   671,   672,   672,   672,   673,   673,   673,   674,   674,\n-     674,   674,   675,   675,   676,   676,   676,   676,   677,   677,\n-     678,   678,   678,   678,   678,   678,   679,   679,   680,   680,\n-     681,   681,   681,   681,   682,   683,   683,   684,   684,   685,\n-     685,   685,   685,   685,   686,   687,   687,   687,   688,   688,\n-     689,   689,   690,   690,   691,   691,   691,   692,   692,   693,\n-     693,   694,   694,   694,   694,   694,   695,   696,   697,   698,\n-     699,   699,   700,   700,   701,   701,   702,   702,   703,   703,\n-     704,   704,   705,   706,   706,   706,   706,   707,   707,   708,\n-     708,   708,   709,   709,   710,   710,   711,   711,   712,   712,\n-     713,   713,   714,   714,   714,   714,   714,   714,   714,   714,\n-     714,   714,   715,   715,   716,   716,   716,   717,   717,   718,\n-     718,   719,   719,   720,   720,   721,   721,   722,   723,   723,\n-     724,   724,   724,   724,   724,   724,   724,   724,   724,   724,\n-     724,   725,   725,   725,   725,   726,   726,   727,   727,   727,\n-     727,   727,   728,   728,   728,   728,   728,   728,   729,   729,\n-     730,   730,   731,   731,   731,   731,   732,   732,   733,   734,\n-     734,   735,   735,   736,   736,   737,   737,   738,   738,   739,\n-     740,   740,   741,   741,   742,   742,   743,   743,   744,   744,\n-     744,   744,   744,   744,   744,   744,   744,   745,   745,   745,\n-     746,   746,   746,   746,   746,   746,   746,   747,   747,   747,\n-     747,   748,   749,   749,   750,   750,   750,   750,   750,   750,\n-     750,   750,   750,   750,   750,   751,   751,   752,   752,   753,\n-     753,   754,   755,   756,   756,   757,   757,   758,   759,   760,\n-     760,   760,   760,   760,   760,   761,   761,   762,   762,   762,\n-     762,   763,   764,   764,   764,   765,   765,   766,   766,   767,\n-     767,   768,   768,   769,   769,   770,   770,   771,   771,   772,\n-     772,   773,   773,   773,   773,   773,   773,   773,   773,   773,\n-     773,   773,   773,   773,   773,   773,   773,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n+     532,   532,   532,   533,   533,   533,   534,   534,   535,   536,\n+     536,   537,   537,   537,   538,   538,   538,   539,   539,   539,\n+     540,   540,   541,   541,   542,   542,   543,   543,   544,   544,\n+     545,   545,   546,   546,   547,   547,   548,   548,   549,   550,\n+     550,   550,   551,   551,   552,   552,   553,   553,   553,   554,\n+     554,   554,   554,   554,   554,   554,   555,   556,   556,   556,\n+     557,   557,   558,   558,   558,   559,   559,   560,   560,   561,\n+     561,   562,   562,   562,   563,   563,   563,   563,   564,   564,\n+     564,   564,   564,   564,   564,   564,   564,   564,   564,   564,\n+     564,   564,   565,   565,   566,   566,   566,   567,   567,   567,\n+     567,   567,   567,   568,   568,   568,   569,   570,   570,   570,\n+     571,   571,   572,   572,   572,   572,   572,   572,   573,   573,\n+     574,   575,   575,   575,   575,   575,   576,   576,   576,   576,\n+     577,   577,   577,   577,   577,   577,   577,   577,   578,   578,\n+     579,   579,   580,   580,   580,   581,   582,   583,   583,   583,\n+     583,   583,   584,   584,   584,   584,   585,   586,   586,   587,\n+     587,   588,   588,   588,   588,   588,   588,   588,   588,   589,\n+     589,   590,   591,   591,   591,   591,   592,   592,   592,   592,\n+     593,   594,   594,   594,   595,   596,   596,   596,   596,   596,\n+     596,   597,   597,   598,   598,   599,   600,   600,   600,   601,\n+     601,   602,   602,   603,   603,   603,   604,   605,   605,   606,\n+     606,   607,   608,   608,   608,   608,   609,   609,   610,   610,\n+     611,   611,   611,   612,   612,   612,   612,   612,   612,   613,\n+     613,   614,   614,   614,   614,   615,   616,   616,   616,   616,\n+     616,   616,   616,   616,   617,   617,   618,   618,   618,   618,\n+     618,   618,   618,   618,   619,   619,   619,   619,   619,   619,\n+     619,   619,   619,   619,   619,   619,   619,   619,   619,   619,\n+     619,   619,   620,   620,   620,   620,   620,   620,   621,   621,\n+     622,   622,   622,   623,   623,   623,   624,   624,   625,   625,\n+     625,   625,   625,   625,   626,   626,   627,   627,   628,   629,\n+     629,   630,   630,   631,   631,   632,   632,   633,   633,   634,\n+     634,   635,   635,   636,   636,   637,   637,   637,   637,   637,\n+     638,   639,   639,   640,   640,   641,   641,   642,   642,   642,\n+     642,   642,   642,   642,   642,   642,   642,   642,   642,   642,\n+     642,   642,   642,   643,   644,   644,   644,   645,   645,   646,\n+     646,   647,   647,   648,   648,   648,   648,   648,   648,   648,\n+     648,   649,   649,   650,   650,   651,   651,   651,   651,   651,\n+     651,   651,   651,   651,   651,   651,   651,   651,   651,   651,\n+     651,   651,   651,   651,   652,   652,   653,   653,   654,   654,\n+     655,   655,   655,   656,   656,   657,   657,   658,   658,   658,\n+     659,   659,   660,   661,   661,   662,   662,   662,   662,   662,\n+     662,   662,   662,   662,   663,   663,   664,   664,   664,   665,\n+     666,   666,   667,   667,   668,   668,   668,   669,   669,   670,\n+     670,   671,   671,   672,   672,   673,   673,   673,   674,   674,\n+     674,   675,   675,   675,   675,   676,   676,   677,   677,   677,\n+     677,   678,   678,   679,   679,   679,   679,   679,   679,   680,\n+     680,   681,   681,   682,   682,   682,   682,   683,   684,   684,\n+     685,   685,   686,   686,   686,   686,   686,   687,   688,   688,\n+     688,   689,   689,   690,   690,   691,   691,   692,   692,   692,\n+     693,   693,   694,   694,   695,   695,   695,   695,   695,   696,\n+     697,   698,   699,   700,   700,   701,   701,   702,   702,   703,\n+     703,   704,   704,   705,   705,   706,   707,   707,   707,   707,\n+     708,   708,   709,   709,   709,   710,   710,   711,   711,   712,\n+     712,   713,   713,   714,   714,   715,   715,   715,   715,   715,\n+     715,   715,   715,   715,   715,   716,   716,   717,   717,   717,\n+     718,   718,   719,   719,   720,   720,   721,   721,   722,   722,\n+     723,   724,   724,   725,   725,   725,   725,   725,   725,   725,\n+     725,   725,   725,   725,   726,   726,   726,   726,   727,   727,\n+     728,   728,   728,   728,   728,   729,   729,   729,   729,   729,\n+     729,   730,   730,   731,   731,   732,   732,   732,   732,   733,\n+     733,   734,   735,   735,   736,   736,   737,   737,   738,   738,\n+     739,   739,   740,   741,   741,   742,   742,   743,   743,   744,\n+     744,   745,   745,   745,   745,   745,   745,   745,   745,   745,\n+     746,   746,   746,   747,   747,   747,   747,   747,   747,   747,\n+     748,   748,   748,   748,   749,   750,   750,   751,   751,   751,\n+     751,   751,   751,   751,   751,   751,   751,   751,   752,   752,\n+     753,   753,   754,   754,   755,   756,   757,   757,   758,   758,\n+     759,   760,   761,   761,   761,   761,   761,   761,   762,   762,\n+     763,   763,   763,   763,   764,   765,   765,   765,   766,   766,\n+     767,   767,   768,   768,   769,   769,   770,   770,   771,   771,\n+     772,   772,   773,   773,   774,   774,   774,   774,   774,   774,\n      774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,   774,   774,   775,   775,   775,\n      775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n      775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n-     775,   775,   776,   776,   776,   777,   777,   777,   777,   777,\n-     777,   777,   777,   777,   777,   777,   777,   777,   778,   778,\n-     778,   778,   778,   779,   779,   779,   779,   779,   779,   780,\n-     780,   781,   781,   782,   782,   782,   782,   782,   782,   782,\n-     782,   782,   782,   782,   782,   782,   782,   783,   783,   784,\n-     784,   785,   785,   785,   786,   786,   787,   787,   788,   788,\n-     789,   790,   790,   790,   791,   792,   792,   793,   793,   794,\n-     794,   794,   795,   795,   796,   796,   796,   796,   796,   797,\n-     797,   798,   798,   799,   800,   800,   801,   801,   802,   802,\n-     802,   803,   803,   804,   804,   804,   804,   804,   804,   804,\n-     804,   804,   804,   804,   804,   804,   804,   805,   805,   806,\n-     806,   807,   807,   807,   807,   807,   807,   807,   807,   808,\n-     808,   809,   809,   810,   810,   811,   811,   812,   812,   813,\n-     813,   814,   814,   815,   815,   815,   816,   816,   817,   817,\n-     818,   818,   818,   818,   818,   818,   818,   818,   818,   818,\n-     819,   819,   820,   821,   821,   822,   822,   822,   822,   822,\n-     822,   823,   824,   825,   825,   825,   826,   826,   827,   828,\n-     828,   829,   830,   830,   831,   831,   832,   832,   833,   833,\n-     833,   834,   834,   835,   835,   836,   836,   837,   837,   837,\n-     838,   838,   838,   839,   839,   840,   840,   841,   841,   842,\n-     842,   843,   843,   844,   844,   844,   845,   845,   846,   846,\n-     847,   848,   848,   849,   849,   850,   850,   850,   851,   851,\n-     852,   852,   853,   853,   854,   854,   855,   855,   856,   857,\n-     858,   858,   859,   859,   859,   859,   859,   859,   859,   859,\n-     859,   859,   859,   859,   859,   859,   860,   861,   862,   862,\n-     862,   863,   863,   864,   864,   864,   865,   865,   865,   866,\n-     866,   866,   867,   867,   868,   868,   869,   869,   870,   871,\n-     871,   871,   871,   872,   872,   873,   874,   875,   875,   876,\n-     876,   876,   876,   877,   877,   877,   878,   878,   879,   879,\n-     879,   879,   880,   880,   881,   882,   882,   883,   883,   884,\n-     884,   885,   885,   886,   886,   887,   887,   887,   887,   887,\n-     887,   888,   888,   889,   889,   890,   890,   891,   892,   892,\n-     892,   892,   893,   893,   894,   894,   894,   895,   895,   895,\n-     895,   895,   895,   895,   895,   895,   895,   895,   895,   895,\n-     895,   895,   895,   895,   895,   895,   895,   895,   895,   895,\n-     895,   895,   895,   895,   895,   895,   895,   896,   896,   896,\n-     897,   897,   898,   898,   899,   899,   900,   900,   900,   900,\n-     901,   902,   902,   903,   903,   903,   903,   904,   904,   904,\n-     904,   905,   905,   905,   905,   906,   906,   907,   907,   907,\n-     907,   907,   907,   907,   908,   908,   909,   909,   909,   910,\n-     910,   911,   911,   911,   911,   911,   912,   912,   912,   912,\n-     912,   913,   913,   914,   914,   915,   915,   916,   916,   917,\n-     917,   917,   918,   918,   919,   919,   920,   920,   921,   922,\n-     922,   923,   923,   924,   924,   925,   926,   926,   927,   927,\n-     927,   928,   928,   928,   928,   928,   928,   928,   928,   929,\n-     929,   930,   930,   931,   931,   932,   933,   933,   933,   933,\n-     933,   934,   934,   934,   934,   935,   935,   935,   936,   936,\n-     936,   937,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   938,   938,   938,   938,   938,   938,   938,   938,   938,\n-     938,   939,   939,   939,   939,   939,   939,   939,   939,   939,\n-     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,\n-     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,\n-     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,\n-     939,   939,   939,   939,   939,   939,   939,   939,   939,   939,\n-     939,   939,   939,   939,   939,   940,   940,   940,   940,   940,\n-     940,   940,   940,   940,   940,   940,   940,   940,   940,   940,\n-     940,   940,   940,   940,   940,   940,   940,   940,   940,   940,\n-     940,   940,   940,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   941,   941,   941,   941,   941,   941,   941,   941,\n-     941,   941,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   942,   942,   942,   942,   942,   942,   942,\n-     942,   942,   942,   943,   943,   943,   943,   943,   943,   943,\n-     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n-     943,   943,   943,   943,   943,   943,   943,   943,   943,   943,\n-     943,   943,   943,   943,   943,   944,   944,   944,   944,   944,\n+     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n+     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n+     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n+     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n+     775,   775,   775,   775,   775,   775,   775,   775,   775,   775,\n+     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,\n+     776,   776,   776,   776,   776,   776,   776,   776,   776,   776,\n+     776,   776,   776,   776,   776,   777,   777,   777,   778,   778,\n+     778,   778,   778,   778,   778,   778,   778,   778,   778,   778,\n+     778,   779,   779,   779,   779,   779,   779,   780,   780,   780,\n+     780,   780,   780,   781,   781,   782,   782,   783,   783,   783,\n+     783,   783,   783,   783,   783,   783,   783,   783,   783,   783,\n+     783,   784,   784,   785,   785,   786,   786,   786,   787,   787,\n+     788,   788,   789,   789,   790,   791,   791,   791,   792,   793,\n+     793,   794,   794,   795,   795,   795,   796,   796,   797,   797,\n+     797,   797,   797,   798,   798,   799,   799,   800,   801,   801,\n+     802,   802,   803,   804,   804,   805,   805,   806,   806,   807,\n+     807,   807,   808,   808,   809,   809,   809,   809,   809,   809,\n+     809,   809,   809,   809,   809,   809,   809,   809,   810,   810,\n+     811,   811,   812,   812,   812,   812,   812,   812,   812,   812,\n+     813,   813,   814,   814,   815,   815,   816,   816,   817,   817,\n+     818,   818,   819,   819,   820,   820,   820,   821,   821,   822,\n+     822,   823,   823,   823,   823,   823,   823,   823,   823,   823,\n+     823,   824,   824,   825,   826,   826,   827,   827,   827,   827,\n+     827,   827,   828,   829,   830,   830,   830,   831,   831,   832,\n+     833,   833,   834,   835,   835,   836,   836,   837,   837,   838,\n+     838,   838,   839,   839,   840,   840,   841,   841,   842,   842,\n+     842,   843,   843,   843,   844,   844,   845,   845,   846,   846,\n+     847,   847,   848,   848,   849,   849,   849,   850,   850,   851,\n+     851,   852,   853,   853,   854,   854,   855,   855,   855,   856,\n+     856,   857,   857,   858,   858,   859,   859,   860,   860,   861,\n+     862,   863,   863,   864,   864,   864,   864,   864,   864,   864,\n+     864,   864,   864,   864,   864,   864,   864,   865,   866,   867,\n+     867,   867,   868,   868,   869,   869,   869,   870,   870,   870,\n+     871,   871,   871,   872,   872,   873,   873,   874,   874,   875,\n+     876,   876,   876,   876,   877,   877,   878,   879,   880,   880,\n+     881,   881,   881,   881,   881,   882,   882,   882,   883,   883,\n+     884,   884,   884,   884,   885,   885,   886,   887,   887,   888,\n+     888,   889,   889,   890,   890,   891,   891,   892,   892,   892,\n+     892,   892,   892,   893,   893,   894,   894,   895,   895,   896,\n+     897,   897,   897,   897,   898,   898,   899,   899,   899,   900,\n+     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,\n+     900,   900,   900,   900,   900,   900,   900,   900,   900,   900,\n+     900,   900,   900,   900,   900,   900,   900,   900,   900,   901,\n+     901,   901,   902,   902,   903,   903,   904,   904,   905,   905,\n+     905,   905,   906,   907,   907,   908,   908,   908,   908,   909,\n+     909,   909,   909,   910,   910,   910,   910,   911,   911,   912,\n+     912,   912,   912,   912,   912,   912,   913,   913,   914,   914,\n+     914,   915,   915,   916,   916,   916,   916,   916,   917,   917,\n+     917,   917,   917,   918,   918,   919,   919,   920,   920,   921,\n+     921,   922,   922,   922,   923,   923,   924,   924,   925,   925,\n+     926,   927,   927,   928,   928,   929,   929,   930,   931,   931,\n+     932,   932,   932,   933,   933,   933,   933,   933,   933,   933,\n+     933,   934,   934,   935,   935,   936,   936,   937,   937,   938,\n+     939,   939,   939,   939,   939,   940,   940,   940,   940,   941,\n+     941,   941,   942,   942,   942,   943,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n      944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n-     944,   944,   944,   944,   944,   944,   944\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   944,   944,   944,   944,   944,\n+     944,   944,   944,   944,   944,   945,   945,   945,   945,   945,\n+     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n+     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n+     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n+     945,   945,   945,   945,   945,   945,   945,   945,   945,   945,\n+     945,   945,   945,   945,   945,   945,   945,   945,   945,   946,\n+     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,\n+     946,   946,   946,   946,   946,   946,   946,   946,   946,   946,\n+     946,   946,   946,   946,   946,   946,   946,   947,   947,   947,\n+     947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n+     947,   947,   947,   947,   947,   947,   947,   947,   947,   947,\n+     947,   947,   947,   947,   947,   947,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   948,   948,   948,\n+     948,   948,   948,   948,   948,   948,   948,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   949,\n+     949,   949,   949,   949,   949,   949,   949,   949,   949,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950,   950,   950,   950,   950,   950,   950,   950,   950,   950,\n+     950\n };\n \n /* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN.  */\n@@ -3149,136 +3161,137 @@ static const yytype_uint8 yyr2[] =\n        1,     2,     0,     1,     2,     2,     2,     1,     3,     4,\n        2,     1,     0,     2,     3,     2,     3,     6,     6,     8,\n        6,     8,     6,     8,     6,     8,     8,    10,     8,    10,\n-       1,     0,     8,     1,     4,     4,     7,     2,     1,     3,\n-       4,     3,     0,     1,     0,     2,     3,     5,     2,     2,\n-       0,     8,     5,     0,     5,     5,     7,     2,     0,     1,\n-       1,     1,     3,     2,     0,     1,     0,     1,     3,     1,\n-       3,     1,     2,     1,     3,     2,     6,     8,     5,     1,\n-       0,     1,     3,     2,     4,     5,     3,     4,     6,     5,\n-       5,     8,     7,     1,     5,     8,     7,     1,     0,     3,\n-       9,    12,     3,     0,     4,     6,     1,     2,     1,     1,\n-       0,     1,     2,     2,     1,     2,     2,     1,     2,     3,\n-       2,     2,     2,     2,     3,     3,     3,     1,     3,     1,\n-       0,     1,     2,     2,     2,     2,     2,     2,     2,     2,\n-       1,     1,     0,     2,     9,    12,    11,     0,     2,     1,\n-       1,     1,     1,     1,     1,     3,     0,     1,     2,     1,\n-       1,     2,     2,     3,     1,     1,     2,     2,     1,     2,\n-       3,     5,     3,     2,     5,     1,     1,     1,     0,     5,\n-       7,     5,     2,     3,     1,     1,     2,     2,     0,     3,\n-       4,     4,     0,     3,     2,     0,     3,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     3,     3,     1,\n-       2,     2,     2,     2,     2,     2,     0,     3,     3,     3,\n-       0,     1,     2,     1,     2,     2,     2,     2,     3,     4,\n-       1,     3,     1,     1,     1,     1,     3,     1,     2,     0,\n-       1,     2,     0,     1,     3,     0,     2,     0,     3,     3,\n-       1,     5,     3,     1,     3,     1,     2,     1,     4,     5,\n-       5,     6,     3,     7,     4,    11,     1,     3,     2,     2,\n-       2,     0,     3,     1,     1,     2,     2,     2,     2,     1,\n-       0,     1,     2,     6,     4,     6,     4,     6,     8,     4,\n-       6,     1,     1,     1,     1,     1,     2,     1,     2,     1,\n-       2,     1,     1,     1,     1,     3,     3,     3,     3,     2,\n-       2,     1,     3,     1,     1,     1,     3,     1,     1,     0,\n-       1,     1,     1,     1,     3,     8,    11,    10,     7,    10,\n-       9,     1,     1,     2,     3,     8,    11,     9,     1,     1,\n-       3,     0,     1,     3,     1,     0,     1,     0,     1,     0,\n-       1,     3,     1,     1,     1,     3,     0,     2,     2,     0,\n-       2,     0,     1,     0,     1,     1,     1,     3,     3,     1,\n-       1,     3,     3,     3,     3,     3,     3,     4,     3,     2,\n-       1,     1,     1,     1,     1,     3,     1,     1,     3,     3,\n-       1,     2,     4,     4,     2,     3,     5,     5,     1,     1,\n-       3,     0,    11,    11,    10,    12,     1,     2,     5,     4,\n-       4,     4,     4,     7,     5,     4,     7,     6,     9,     9,\n-       4,     1,     1,     1,     1,     1,     1,     1,     5,     1,\n-       1,     3,     1,     2,     2,     2,     3,     1,     3,     6,\n-       2,     0,     3,     3,     4,     4,     4,     4,     3,     2,\n-       1,     1,     0,     1,     1,     0,     2,     1,     5,     1,\n-       0,     2,     2,     0,     1,     0,     3,     5,     1,     3,\n-       4,     3,     1,     1,     0,     2,     2,     0,     2,     2,\n-       1,     1,     1,     0,     2,     4,     5,     4,     2,     3,\n-       2,     2,     2,     2,     1,     2,     3,     0,     1,     0,\n-       5,     1,     4,     6,     2,     1,     0,     4,     0,     1,\n-       1,     2,     2,     2,     1,     1,     2,     2,     1,     1,\n-       1,     1,     1,     1,     3,     3,     0,     1,     3,     1,\n-       2,     1,     1,     1,     1,     1,     2,     4,     4,     5,\n-       1,     1,     2,     0,     2,     0,     1,     3,     1,     0,\n-       1,     2,     3,     2,     4,     2,     3,     2,     0,     1,\n-       2,     0,     4,     5,     1,     2,     2,     0,     1,     3,\n-       1,     2,     3,     3,     3,     3,     3,     3,     1,     4,\n-       9,     9,     3,     0,     2,     2,     0,     5,     3,     1,\n-       3,     5,     3,     1,     2,     1,     3,     5,     1,     2,\n-       3,     4,     5,     4,     5,     4,     6,     5,     4,     5,\n-       5,     5,     2,     4,     1,     1,     0,     1,     4,     5,\n-       4,     0,     2,     2,     2,     1,     1,     1,     1,     0,\n-       4,     2,     1,     2,     2,     4,     2,     6,     2,     1,\n-       3,     4,     0,     2,     0,     2,     0,     1,     3,     3,\n-       2,     0,     2,     4,     1,     1,     1,     0,     2,     3,\n-       5,     6,     2,     3,     5,     5,     5,     3,     4,     0,\n-       1,     1,     1,     1,     1,     2,     4,     1,     1,     1,\n-       1,     2,     3,     0,     1,     1,     1,     1,     1,     2,\n-       2,     2,     2,     2,     1,     3,     0,     1,     1,     1,\n-       1,     5,     2,     1,     1,     1,     1,     4,     1,     2,\n-       2,     1,     3,     3,     2,     1,     0,     5,     2,     5,\n-       2,     1,     3,     3,     0,     1,     1,     1,     1,     1,\n+       1,     0,     9,     1,     4,     4,     7,     2,     1,     3,\n+       2,     2,     0,     4,     3,     0,     1,     0,     2,     3,\n+       5,     2,     2,     0,     8,     5,     0,     5,     5,     7,\n+       2,     0,     1,     1,     1,     3,     2,     0,     1,     0,\n+       1,     3,     1,     3,     1,     2,     1,     3,     2,     6,\n+       8,     5,     1,     0,     1,     3,     2,     4,     5,     3,\n+       4,     6,     5,     5,     8,     7,     1,     5,     8,     7,\n+       1,     0,     3,     9,    12,     3,     0,     4,     6,     1,\n+       2,     1,     1,     0,     1,     2,     2,     1,     2,     2,\n+       1,     2,     3,     2,     2,     2,     2,     3,     3,     3,\n+       1,     3,     1,     0,     1,     2,     2,     2,     2,     2,\n+       2,     2,     2,     1,     1,     0,     2,     9,    12,    11,\n+       0,     2,     1,     1,     1,     1,     1,     1,     3,     0,\n+       1,     2,     1,     1,     2,     2,     3,     1,     1,     2,\n+       2,     1,     2,     3,     5,     3,     2,     5,     1,     1,\n+       1,     0,     5,     7,     5,     2,     3,     1,     1,     2,\n+       2,     0,     3,     4,     4,     0,     3,     2,     0,     3,\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n+       3,     3,     1,     2,     2,     2,     2,     2,     2,     0,\n+       3,     3,     3,     0,     1,     2,     1,     2,     2,     2,\n+       2,     3,     4,     1,     3,     1,     1,     1,     1,     3,\n+       1,     2,     0,     1,     2,     0,     1,     3,     0,     2,\n+       0,     3,     3,     1,     5,     3,     1,     3,     1,     2,\n+       1,     4,     5,     5,     6,     3,     7,     4,    11,     1,\n+       3,     2,     2,     2,     0,     3,     1,     1,     2,     2,\n+       2,     2,     1,     0,     1,     2,     6,     4,     6,     4,\n+       6,     8,     4,     6,     1,     1,     1,     1,     1,     2,\n+       1,     2,     1,     2,     1,     1,     1,     1,     3,     3,\n+       3,     3,     2,     2,     1,     3,     1,     1,     1,     3,\n+       1,     1,     0,     1,     1,     1,     1,     3,     8,    11,\n+      10,     7,    10,     9,     1,     1,     2,     3,     8,    11,\n+       9,     1,     1,     3,     0,     1,     3,     1,     0,     1,\n+       0,     1,     0,     1,     3,     1,     1,     1,     3,     0,\n+       2,     2,     0,     2,     0,     1,     0,     1,     1,     1,\n+       3,     3,     1,     1,     3,     3,     3,     3,     3,     3,\n+       4,     3,     2,     1,     1,     1,     1,     1,     3,     1,\n+       1,     3,     3,     1,     2,     4,     4,     2,     3,     5,\n+       5,     1,     1,     3,     0,    11,    11,    10,    12,     1,\n+       2,     5,     4,     4,     4,     4,     7,     5,     4,     7,\n+       6,     9,     9,     4,     1,     1,     1,     1,     1,     1,\n+       1,     5,     1,     1,     3,     1,     2,     2,     2,     3,\n+       1,     3,     6,     2,     0,     3,     3,     4,     4,     4,\n+       4,     3,     2,     1,     1,     0,     1,     1,     0,     2,\n+       1,     5,     1,     0,     2,     2,     0,     1,     0,     3,\n+       5,     1,     3,     4,     3,     1,     1,     0,     2,     2,\n+       0,     2,     2,     1,     1,     1,     0,     2,     4,     5,\n+       4,     2,     3,     2,     2,     2,     2,     1,     2,     3,\n+       0,     1,     0,     5,     1,     4,     6,     2,     1,     0,\n+       4,     0,     1,     1,     2,     2,     2,     1,     1,     2,\n+       2,     1,     1,     1,     1,     1,     1,     3,     3,     0,\n+       1,     3,     1,     2,     1,     1,     1,     1,     1,     2,\n+       4,     4,     5,     1,     1,     2,     0,     2,     0,     1,\n+       3,     1,     0,     1,     2,     3,     2,     4,     2,     3,\n+       2,     0,     1,     2,     0,     4,     5,     1,     2,     2,\n+       0,     1,     3,     1,     2,     3,     3,     3,     3,     3,\n+       3,     1,     4,     9,     9,     3,     0,     2,     2,     0,\n+       5,     3,     1,     3,     5,     3,     1,     2,     1,     3,\n+       5,     1,     2,     3,     4,     5,     4,     5,     4,     6,\n+       5,     4,     5,     5,     5,     2,     4,     1,     1,     0,\n+       1,     4,     5,     4,     0,     2,     2,     2,     1,     1,\n+       1,     1,     0,     4,     2,     1,     2,     2,     4,     2,\n+       6,     2,     1,     3,     4,     0,     2,     0,     2,     0,\n+       1,     3,     3,     2,     0,     2,     4,     1,     1,     1,\n+       0,     2,     3,     5,     6,     2,     3,     5,     5,     5,\n+       3,     4,     0,     1,     1,     1,     1,     1,     2,     4,\n+       1,     1,     1,     1,     2,     3,     0,     1,     1,     1,\n+       1,     1,     2,     2,     2,     2,     2,     1,     3,     0,\n+       1,     1,     1,     1,     5,     2,     1,     1,     1,     1,\n+       4,     1,     2,     2,     1,     3,     3,     2,     1,     0,\n+       5,     2,     5,     2,     1,     3,     3,     0,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,\n-       3,     3,     3,     3,     3,     3,     0,     1,     3,     3,\n-       5,     2,     2,     3,     3,     3,     3,     3,     3,     3,\n-       3,     3,     3,     3,     3,     3,     3,     3,     2,     2,\n-       3,     3,     2,     2,     3,     3,     5,     4,     6,     3,\n-       5,     4,     6,     4,     6,     5,     7,     3,     2,     4,\n-       3,     2,     3,     3,     3,     3,     4,     3,     4,     3,\n-       4,     5,     6,     6,     7,     6,     7,     6,     7,     3,\n-       4,     4,     6,     1,     4,     3,     5,     1,     3,     2,\n-       2,     3,     3,     3,     3,     3,     3,     3,     3,     3,\n-       3,     3,     3,     3,     3,     3,     2,     2,     5,     6,\n-       6,     7,     1,     1,     2,     1,     1,     2,     2,     3,\n-       1,     2,     4,     1,     1,     2,     2,     4,     1,     1,\n-       3,     3,     1,     3,     6,     7,     9,     7,     7,     5,\n-       1,     1,     1,     5,     6,     6,     4,     4,     4,     4,\n-       6,     5,     5,     5,     4,     6,     4,     7,     9,     5,\n-       0,     5,     4,     0,     1,     0,     2,     0,     1,     3,\n-       3,     2,     2,     0,     6,     1,     0,     3,     0,     2,\n-       2,     0,     1,     4,     2,     2,     2,     2,     2,     4,\n-       3,     1,     5,     3,     1,     3,     1,     2,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1,     1,     4,     1,\n-       4,     1,     4,     1,     2,     1,     2,     1,     2,     1,\n-       3,     1,     3,     1,     2,     1,     3,     1,     2,     1,\n-       0,     1,     3,     1,     3,     3,     1,     3,     3,     0,\n+       1,     1,     3,     3,     3,     3,     3,     3,     3,     0,\n+       1,     3,     3,     5,     2,     2,     3,     3,     3,     3,\n+       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,\n+       3,     2,     2,     3,     3,     2,     2,     3,     3,     5,\n+       4,     6,     3,     5,     4,     6,     4,     6,     5,     7,\n+       3,     2,     4,     3,     2,     3,     3,     3,     3,     4,\n+       3,     4,     3,     4,     5,     6,     6,     7,     6,     7,\n+       6,     7,     3,     4,     4,     6,     1,     4,     3,     5,\n+       1,     3,     2,     2,     3,     3,     3,     3,     3,     3,\n+       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,\n+       2,     5,     6,     6,     7,     1,     1,     2,     1,     1,\n+       2,     2,     3,     1,     2,     4,     1,     1,     2,     2,\n+       4,     1,     1,     3,     3,     4,     1,     3,     6,     7,\n+       9,     7,     7,     5,     1,     1,     1,     5,     6,     6,\n+       4,     4,     4,     4,     6,     5,     5,     5,     4,     6,\n+       4,     7,     9,     5,     0,     5,     4,     0,     1,     0,\n+       2,     0,     1,     3,     3,     2,     2,     0,     6,     1,\n+       0,     3,     0,     2,     2,     0,     1,     4,     2,     2,\n+       2,     2,     2,     4,     3,     1,     5,     3,     1,     3,\n+       1,     2,     3,     1,     3,     1,     2,     1,     0,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       4,     3,     2,     3,     0,     3,     3,     2,     2,     1,\n-       0,     2,     2,     3,     2,     1,     1,     3,     5,     1,\n-       2,     4,     2,     0,     1,     0,     1,     2,     2,     3,\n-       5,     1,     0,     1,     2,     0,     2,     0,     2,     3,\n-       3,     3,     5,     0,     2,     1,     0,     1,     0,     1,\n-       3,     1,     2,     3,     2,     1,     4,     2,     1,     0,\n-       3,     1,     3,     1,     2,     4,     2,     0,     1,     3,\n-       1,     2,     1,     3,     1,     2,     1,     3,     1,     1,\n-       1,     2,     1,     1,     2,     1,     1,     2,     7,     2,\n-       5,     3,     3,     1,     1,     1,     1,     1,     1,     1,\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     4,\n+       1,     4,     1,     4,     1,     2,     1,     2,     1,     2,\n+       1,     3,     1,     3,     1,     2,     1,     3,     1,     2,\n+       1,     0,     1,     3,     1,     3,     3,     1,     3,     3,\n+       0,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1,     4,     3,     2,     3,     0,     3,     3,     2,     2,\n+       1,     0,     2,     2,     3,     2,     1,     1,     3,     5,\n+       1,     2,     4,     2,     0,     1,     0,     1,     2,     2,\n+       3,     5,     1,     0,     1,     2,     0,     2,     0,     2,\n+       3,     3,     3,     5,     0,     2,     1,     0,     1,     0,\n+       1,     3,     1,     2,     3,     2,     1,     4,     2,     1,\n+       0,     3,     1,     3,     1,     2,     4,     2,     0,     1,\n+       3,     1,     2,     1,     3,     1,     2,     1,     3,     1,\n+       1,     1,     2,     1,     1,     2,     1,     1,     2,     7,\n+       2,     5,     3,     3,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     2,     2,     3,     3,     0,     1,     1,\n-       1,     1,     1,     1,     1,     1,     5,     3,     0,     1,\n-       1,     1,     1,     4,     7,     6,     2,     0,     1,     1,\n-       1,     1,    13,    16,     1,     2,     0,     1,     0,     1,\n-       0,     2,     0,     1,     0,     6,     8,     6,     8,     6,\n-       8,     3,     2,     1,     0,     4,     6,     3,     2,     4,\n-       3,     5,     1,     0,     1,     1,     0,     1,     1,     1,\n+       1,     1,     1,     1,     2,     2,     3,     3,     0,     1,\n+       1,     1,     1,     1,     1,     1,     1,     5,     3,     0,\n+       1,     1,     1,     1,     1,     4,     7,     6,     2,     0,\n+       1,     1,     1,     1,    13,    16,     1,     2,     0,     1,\n+       0,     1,     0,     2,     0,     1,     0,     6,     8,     6,\n+       8,     6,     8,     3,     2,     1,     0,     4,     6,     3,\n+       2,     4,     3,     5,     1,     0,     1,     1,     0,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     3,     1,     1,     1,     1,     1,     1,\n-       2,     1,     1,     2,     3,     3,     3,     1,     3,     3,\n-       2,     3,     3,     3,     3,     1,     1,     1,     1,     3,\n-       5,     1,     1,     1,     1,     3,     2,     2,     3,     1,\n-       1,     4,     6,     5,     4,     6,     1,     1,     1,     1,\n-       1,     1,     0,     1,     3,     1,     0,     7,     3,     1,\n-       2,     3,     2,     0,     2,     0,     2,     4,     5,     3,\n-       5,     1,     0,     2,     0,     2,     1,     1,     1,     2,\n-       3,     2,     2,     2,     2,     3,     4,     2,     1,     1,\n-       1,     1,     3,     1,     3,     2,     9,    12,    11,    12,\n-      14,     3,     4,     4,     0,     7,    10,     9,     2,     3,\n-       0,     4,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1,     1,     1,     1,     1,     3,     1,     1,     1,     1,\n+       1,     1,     2,     1,     1,     2,     3,     3,     3,     1,\n+       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,\n+       1,     3,     5,     1,     1,     1,     1,     3,     2,     2,\n+       3,     1,     1,     4,     6,     5,     4,     6,     1,     1,\n+       1,     1,     1,     1,     0,     1,     3,     1,     0,     7,\n+       3,     1,     2,     3,     2,     0,     2,     0,     2,     4,\n+       5,     3,     5,     1,     0,     2,     0,     2,     1,     1,\n+       1,     2,     3,     2,     2,     2,     2,     3,     4,     3,\n+       1,     1,     1,     1,     0,     1,     3,     1,     3,     2,\n+       9,    12,    11,    12,    14,     3,     4,     4,     0,     7,\n+      10,     9,     2,     3,     0,     4,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n@@ -3338,7 +3351,8 @@ static const yytype_uint8 yyr2[] =\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n        1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n-       1,     1,     1,     1,     1,     1,     1\n+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,\n+       1\n };\n \n /* YYDEFACT[STATE-NAME] -- Default rule to reduce with in state\n@@ -3346,1754 +3360,1702 @@ static const yytype_uint8 yyr2[] =\n    means the default is an error.  */\n static const yytype_uint16 yydefact[] =\n {\n-     134,   232,     0,  1305,  1304,  1372,   232,     0,  1254,   232,\n-     453,   370,     0,  1390,  1372,     0,   232,     0,   134,     0,\n-       0,     0,     0,     0,     0,   513,   516,   514,     0,     0,\n-       0,   232,   550,     0,  1389,   232,     0,     0,   542,   515,\n-       0,  1352,     0,     0,     0,     0,     0,     2,     4,     7,\n+     137,   235,     0,  1317,  1316,  1384,   235,     0,  1266,   235,\n+     456,   373,     0,  1402,  1384,     0,   235,     0,   137,     0,\n+       0,     0,     0,     0,     0,   516,   519,   517,     0,     0,\n+       0,   235,   553,     0,  1401,   235,     0,     0,   545,   518,\n+       0,  1364,     0,     0,     0,     0,     0,     2,     4,     7,\n       20,    33,    29,     0,    19,    31,    14,    17,    24,     6,\n-      35,    37,    18,    23,    15,    36,    12,    34,   489,   476,\n-     555,   488,     0,     0,   133,   654,   496,    32,    16,    28,\n-       5,    11,    26,    27,    25,  1263,    40,    30,    38,    21,\n-       8,     9,    22,    39,    41,  1388,    10,    42,    13,   231,\n-     230,   224,     0,     0,     0,     0,     0,  1371,     0,   225,\n-    1188,  1412,  1413,  1414,  1415,  1416,  1417,  1418,  1419,  1420,\n-    1421,  1422,  1775,  1423,  1424,  1425,  1426,  1427,  1776,  1428,\n-    1429,  1430,  1721,  1722,  1777,  1723,  1724,  1431,  1432,  1433,\n-    1434,  1435,  1436,  1437,  1438,  1725,  1726,  1439,  1440,  1441,\n-    1442,  1443,  1727,  1778,  1728,  1444,  1445,  1446,  1447,  1448,\n-    1779,  1449,  1450,  1451,  1452,  1453,  1454,  1455,  1456,  1457,\n-    1780,  1458,  1459,  1460,  1461,  1462,  1463,  1464,  1465,  1466,\n-    1467,  1729,  1730,  1468,  1469,  1470,  1471,  1472,  1473,  1474,\n-    1475,  1476,  1477,  1478,  1479,  1480,  1481,  1482,  1483,  1484,\n-    1485,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,\n-    1495,  1731,  1496,  1497,  1498,  1499,  1500,  1732,  1501,  1502,\n-    1503,  1733,  1504,  1505,  1506,  1781,  1782,  1507,  1508,  1734,\n-    1784,  1509,  1510,  1735,  1736,  1511,  1512,  1513,  1514,  1515,\n-    1516,  1517,  1518,  1785,  1519,  1520,  1521,  1522,  1523,  1524,\n-    1525,  1526,  1527,  1528,  1529,  1530,  1786,  1737,  1531,  1532,\n-    1533,  1534,  1535,  1738,  1739,  1740,  1536,  1787,  1788,  1537,\n-    1789,  1538,  1539,  1540,  1541,  1542,  1543,  1544,  1790,  1545,\n-    1791,  1546,  1547,  1548,  1549,  1550,  1551,  1552,  1553,  1741,\n-    1554,  1555,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,\n-    1564,  1565,  1566,  1567,  1568,  1569,  1570,  1571,  1742,  1793,\n-    1743,  1572,  1573,  1574,  1744,  1575,  1576,  1794,  1577,  1745,\n-    1578,  1746,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1586,\n-    1587,  1747,  1795,  1588,  1796,  1748,  1589,  1590,  1591,  1592,\n-    1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1749,  1797,\n-    1601,  1602,  1750,  1603,  1604,  1605,  1606,  1607,  1608,  1609,\n-    1610,  1611,  1612,  1613,  1614,  1751,  1615,  1616,  1617,  1618,\n-    1619,  1620,  1621,  1622,  1623,  1624,  1625,  1626,  1627,  1628,\n-    1629,  1630,  1631,  1632,  1633,  1798,  1634,  1635,  1636,  1752,\n-    1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,\n-    1647,  1648,  1649,  1650,  1651,  1652,  1653,  1753,  1654,  1655,\n-    1656,  1799,  1657,  1658,  1754,  1659,  1660,  1661,  1662,  1663,\n-    1664,  1665,  1666,  1667,  1668,  1669,  1670,  1671,  1755,  1672,\n-    1756,  1673,  1674,  1675,  1676,  1801,  1677,  1678,  1679,  1680,\n-    1681,  1757,  1758,  1682,  1683,  1759,  1684,  1760,  1685,  1686,\n-    1761,  1687,  1688,  1689,  1690,  1691,  1692,  1693,  1694,  1695,\n-    1696,  1697,  1698,  1699,  1700,  1701,  1702,  1703,  1762,  1763,\n-    1704,  1802,  1705,  1706,  1707,  1708,  1709,  1710,  1711,  1712,\n-    1713,  1714,  1715,  1716,  1764,  1765,  1766,  1767,  1768,  1769,\n-    1770,  1771,  1772,  1773,  1774,  1717,  1718,  1719,  1720,  1395,\n-       0,     0,  1170,  1189,  1190,  1198,  1188,  1734,  1741,  1755,\n-    1253,  1252,  1189,   227,   452,     0,     0,  1187,     0,     0,\n-       0,     0,     0,   364,   363,     0,  1243,   369,     0,     0,\n-     183,     0,  1192,   105,  1603,   103,  1191,  1168,  1371,     0,\n-       0,   391,   392,   382,     0,   401,     0,   384,   389,   385,\n-       0,   410,   403,   411,   393,   383,   404,   394,   381,     0,\n-     412,     0,   387,     0,     0,     0,   228,   193,   370,   134,\n-       0,  1269,  1279,  1288,  1284,  1278,  1286,  1276,  1282,  1268,\n-    1290,  1277,  1281,  1274,  1291,  1272,  1289,  1287,  1275,  1283,\n-    1267,  1271,  1258,  1263,  1294,  1285,  1292,  1280,  1293,  1295,\n-    1270,  1296,  1273,     0,  1254,     0,     0,  1727,  1778,  1732,\n-       0,  1745,     0,  1748,  1749,  1637,  1756,  1759,  1760,  1761,\n-    1762,     0,   706,     0,   491,   658,   668,   706,   711,   971,\n-     734,   972,   722,  1191,  1160,     0,  1339,  1340,  1337,  1336,\n-     173,  1218,  1377,  1757,  1682,  1391,  1378,  1375,  1376,   229,\n-     549,   547,     0,  1138,  1509,  1548,  1641,  1652,  1757,  1313,\n-    1317,     0,   226,  1382,     0,  1393,  1383,   497,  1191,   541,\n-       0,   233,  1351,     0,  1356,     0,  1617,   524,   527,  1207,\n-     525,   489,     0,     1,   134,     0,   140,     0,   545,   545,\n-       0,   545,     0,   481,     0,     0,   489,   484,   488,   655,\n-    1262,  1366,  1387,  1757,  1682,  1381,  1384,  1517,     0,     0,\n-    1517,     0,  1517,     0,  1517,     0,  1374,     0,  1122,     0,\n-    1123,  1171,     0,   335,  1517,   176,   368,   367,   366,   365,\n-     370,  1517,  1227,     0,     0,   421,   422,     0,     0,     0,\n-       0,     0,  1238,   106,   104,     0,  1369,   399,   400,     0,\n-     390,   386,   388,     0,  1199,  1803,  1804,  1805,   777,  1806,\n-     806,   784,   806,   806,  1807,  1808,  1809,  1810,   773,   773,\n-    1483,   786,  1811,  1812,  1813,  1517,  1814,  1815,   774,   775,\n-     811,  1816,  1817,  1818,  1819,  1820,     0,     0,  1821,   806,\n-    1822,   773,  1823,  1824,  1825,   778,  1826,   744,  1827,     0,\n-    1828,   776,   745,  1829,   814,   814,  1830,     0,   801,  1831,\n-     409,     0,   413,   759,   760,   761,   762,   787,   788,   763,\n-     793,   794,   798,   764,   846,   773,  1200,  1201,  1517,   409,\n-    1202,   405,  1517,   409,  1162,  1517,     0,     0,   189,     0,\n-    1260,  1297,  1832,  1833,  1834,  1835,  1836,  1837,  1838,  1839,\n-    1841,  1840,  1842,  1843,  1844,  1845,  1846,  1847,  1848,  1849,\n-    1850,  1851,  1852,  1853,  1854,  1855,  1856,  1857,  1858,  1859,\n-    1860,  1863,  1861,  1862,  1864,  1865,  1866,  1867,  1868,  1869,\n-    1870,  1871,  1872,  1873,  1874,  1875,  1876,  1878,  1877,  1879,\n-    1880,  1881,  1882,  1883,  1884,  1885,  1886,  1887,  1888,  1889,\n-    1890,  1891,  1892,  1893,  1894,  1895,  1896,  1897,  1898,  1899,\n-    1900,  1901,  1902,  1903,  1904,  1905,  1906,  1907,  1908,  1909,\n-    1910,  1911,  1912,  1311,     0,  1312,  1302,  1266,  1298,  1299,\n-     134,   451,     0,  1251,  1338,     0,     0,     0,  1079,   706,\n-     711,     0,     0,   724,     0,  1094,     0,  1100,     0,     0,\n-       0,   706,   496,     0,   668,     0,   705,   596,   704,   596,\n-     550,     0,   531,   716,     0,     0,   719,   717,     0,   719,\n-       0,     0,     0,   719,   715,   676,     0,   596,     0,   707,\n-     596,   704,     0,   726,   723,  1161,  1257,     0,     0,     0,\n-       0,  1379,     0,     0,     0,  1173,  1175,  1176,  1047,  1186,\n-     959,     0,  1722,  1723,  1724,  1115,  1725,  1726,  1728,  1729,\n-    1730,   913,  1731,  1184,  1733,  1735,  1736,  1738,  1739,  1740,\n-    1742,  1743,     0,  1185,  1746,  1584,  1751,  1752,  1754,  1757,\n-    1758,  1183,  1763,     0,     0,     0,  1149,  1070,     0,     0,\n-       0,   958,     0,   954,     0,     0,   767,   768,   789,   790,\n-     769,   795,   796,   770,     0,  1145,   847,   942,  1133,   990,\n-     962,   970,   950,  1021,   943,     0,   953,   945,  1141,   531,\n-    1139,     0,   946,  1172,  1125,  1116,   531,  1137,  1316,  1314,\n-    1320,  1315,     0,     0,     0,     0,     0,  1161,  1359,  1358,\n-    1350,  1348,  1349,  1347,  1346,  1353,     0,  1355,  1263,  1065,\n-    1067,     0,   526,     0,     0,     0,   479,   478,     3,     0,\n-       0,     0,     0,   543,   544,     0,     0,     0,     0,     0,\n-       0,     0,     0,   639,   570,   571,   573,   636,   640,   648,\n-       0,     0,     0,     0,     0,   485,     0,  1207,  1385,     0,\n-       0,     0,   121,   121,     0,     0,     0,     0,     0,    97,\n-      46,    90,     0,     0,     0,     0,   207,   220,     0,     0,\n-       0,     0,     0,   217,     0,     0,   200,    48,   194,   196,\n-       0,   121,     0,    44,     0,     0,     0,    50,     0,   451,\n-    1188,     0,  1913,  1775,  1776,  1777,  1778,  1728,  1779,  1780,\n-       0,  1781,  1782,  1734,  1784,  1785,  1786,  1787,  1788,  1789,\n-    1790,  1791,  1741,  1793,  1794,  1795,  1796,  1797,  1798,  1939,\n-    1799,  1755,  1801,  1761,     0,  1802,   963,  1073,   555,  1071,\n-    1208,     0,  1189,  1195,  1121,     0,  1209,  1945,  1946,  1947,\n-    1948,  1949,  1950,  1951,  1952,  1953,  1954,  1955,  1956,  1957,\n-    1958,  1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,  1967,\n-    1968,  1969,  1970,  1971,  1972,  1973,  1974,  1975,  1976,  1977,\n-    1978,  1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,\n-    1988,  1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,\n-    1998,  1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,\n-    2008,  2009,  2010,  2011,  1899,  2012,  2013,  2014,  2015,  2016,\n-    1118,  1169,  1211,  1210,  1212,  1124,     0,     0,   449,     0,\n-       0,     0,     0,     0,     0,  1223,     0,   177,     0,  1517,\n-     188,  1517,   335,     0,  1517,   335,  1517,     0,  1237,  1240,\n-       0,   402,   398,   396,   395,   397,   805,   792,   800,   799,\n-    1070,   782,   781,   780,     0,   779,     0,     0,   806,   806,\n-     804,   783,   759,     0,     0,     0,   810,     0,   808,     0,\n-     407,   408,     0,   379,     0,   752,   748,     0,   819,   820,\n-     821,   822,   829,   830,   827,   828,   823,   824,   817,   818,\n-     825,   826,   815,   816,     0,   831,   832,   833,   834,   835,\n-     836,   837,   838,   765,   771,     0,     0,   374,     0,  1203,\n-       0,     0,   376,     0,     0,     0,   370,   134,     0,   201,\n-    1307,  1308,  1306,     0,     0,  1265,   204,   221,  1301,  1310,\n-    1300,  1309,  1264,  1259,     0,  1255,   440,     0,     0,     0,\n-       0,  1080,  1081,  1082,  1083,  1084,  1085,  1086,  1087,  1088,\n-       0,     0,  1089,   667,   665,     0,     0,     0,     0,     0,\n-       0,     0,   917,   943,     0,     0,  1116,     0,  1065,  1099,\n-       0,     0,     0,     0,     0,     0,  1065,  1105,     0,     0,\n-     690,   702,   589,   595,   666,     0,   664,     0,  1138,   659,\n-       0,   736,     0,   716,     0,   715,     0,     0,   718,   712,\n-       0,   713,     0,     0,     0,     0,   714,     0,     0,     0,\n-       0,     0,   662,     0,   702,   663,     0,   733,  1326,  1325,\n-    1334,   174,     0,  1076,     0,   134,  1380,  1392,     0,  1070,\n-     951,  1114,     0,     0,   956,   872,     0,     0,   873,   851,\n-     852,     0,  1148,  1157,  1065,  1069,     0,   954,  1065,     0,\n-     947,  1215,   948,  1024,  1026,     0,     0,   955,     0,  1179,\n-       0,   846,   846,  1144,  1047,     0,  1037,  1040,     0,     0,\n-    1044,  1045,  1046,     0,     0,     0,  1136,     0,  1055,  1057,\n-       0,     0,   888,  1053,     0,   891,     0,     0,     0,     0,\n-    1041,  1042,  1043,  1033,  1034,  1035,  1036,  1038,  1039,  1051,\n-    1032,   869,     0,   944,     0,   993,     0,   868,  1142,   657,\n-       0,  1177,  1174,     0,  1117,   657,  1328,  1332,  1333,  1331,\n-       0,  1327,  1319,  1318,  1323,  1321,  1324,  1322,  1394,     0,\n-    1360,  1344,     0,  1341,  1068,   652,   528,  1164,     0,     0,\n-    1365,   139,   138,     0,     0,   501,   500,   564,   556,   558,\n-     564,     0,   499,     0,   612,   613,     0,     0,     0,     0,\n-     645,   643,  1173,  1186,   600,   574,   599,     0,     0,   578,\n-       0,   604,   847,   638,   483,   568,   569,   572,   482,     0,\n-     641,     0,   651,     0,   520,   522,   505,   519,   517,   502,\n-     510,   639,   573,     0,  1367,  1386,     0,     0,     0,     0,\n-       0,  1517,     0,     0,    81,    62,   287,   747,   120,     0,\n-       0,     0,     0,     0,     0,     0,    89,    86,    87,    88,\n-       0,     0,     0,     0,   205,   206,   219,     0,   210,   211,\n-     208,   212,   213,     0,     0,   198,   199,     0,     0,     0,\n-       0,   197,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1373,  1368,   555,   555,   555,     0,   553,   554,     0,     0,\n-    1119,  1122,   439,   343,     0,   333,     0,     0,     0,   180,\n-     179,  1227,     0,     0,     0,     0,     0,     0,   370,  1230,\n-    1228,  1226,  1229,  1231,  1489,   168,     0,     0,   184,   187,\n-       0,   332,   306,     0,     0,  1242,     0,     0,     0,  1517,\n-    1239,   322,     0,  1370,     0,     0,     0,   409,     0,   803,\n-     802,   753,   749,     0,     0,     0,     0,     0,     0,   414,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   409,\n-     406,  1204,     0,   409,  1163,     0,   409,   192,  1261,  1303,\n-     202,   222,   203,   223,   474,     0,   446,   454,   459,   437,\n-       0,   437,     0,   456,   460,   437,   455,     0,   437,   450,\n-     451,     0,   986,     0,   976,     0,     0,   725,     0,     0,\n-     977,   919,   920,     0,     0,     0,     0,     0,     0,     0,\n+      35,    37,    18,    23,    15,    36,    12,    34,   492,   479,\n+     558,   491,     0,     0,   136,   657,   499,    32,    16,    28,\n+       5,    11,    26,    27,    25,  1275,    40,    30,    38,    21,\n+       8,     9,    22,    39,    41,  1400,    10,    42,    13,   234,\n+     233,   227,     0,     0,     0,     0,     0,  1383,     0,   228,\n+    1199,  1426,  1427,  1428,  1429,  1430,  1431,  1432,  1433,  1434,\n+    1435,  1436,  1789,  1437,  1438,  1439,  1440,  1441,  1790,  1442,\n+    1443,  1444,  1735,  1736,  1791,  1737,  1738,  1445,  1446,  1447,\n+    1448,  1449,  1450,  1451,  1452,  1739,  1740,  1453,  1454,  1455,\n+    1456,  1457,  1741,  1792,  1742,  1458,  1459,  1460,  1461,  1462,\n+    1793,  1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,\n+    1794,  1472,  1473,  1474,  1475,  1476,  1477,  1478,  1479,  1480,\n+    1481,  1743,  1744,  1482,  1483,  1484,  1485,  1486,  1487,  1488,\n+    1489,  1490,  1491,  1492,  1493,  1494,  1495,  1496,  1497,  1498,\n+    1499,  1500,  1501,  1502,  1503,  1504,  1505,  1506,  1507,  1508,\n+    1509,  1745,  1510,  1511,  1512,  1513,  1514,  1746,  1515,  1516,\n+    1517,  1747,  1518,  1519,  1520,  1795,  1796,  1521,  1522,  1748,\n+    1798,  1523,  1524,  1749,  1750,  1525,  1526,  1527,  1528,  1529,\n+    1530,  1531,  1532,  1799,  1533,  1534,  1535,  1536,  1537,  1538,\n+    1539,  1540,  1541,  1542,  1543,  1544,  1800,  1751,  1545,  1546,\n+    1547,  1548,  1549,  1752,  1753,  1754,  1550,  1801,  1802,  1551,\n+    1803,  1552,  1553,  1554,  1555,  1556,  1557,  1558,  1804,  1559,\n+    1805,  1560,  1561,  1562,  1563,  1564,  1565,  1566,  1567,  1755,\n+    1568,  1569,  1570,  1571,  1572,  1573,  1574,  1575,  1576,  1577,\n+    1578,  1579,  1580,  1581,  1582,  1583,  1584,  1585,  1756,  1807,\n+    1757,  1586,  1587,  1588,  1758,  1589,  1590,  1808,  1591,  1759,\n+    1592,  1760,  1593,  1594,  1595,  1596,  1597,  1598,  1599,  1600,\n+    1601,  1761,  1809,  1602,  1810,  1762,  1603,  1604,  1605,  1606,\n+    1607,  1608,  1609,  1610,  1611,  1612,  1613,  1614,  1763,  1811,\n+    1615,  1616,  1764,  1617,  1618,  1619,  1620,  1621,  1622,  1623,\n+    1624,  1625,  1626,  1627,  1628,  1765,  1629,  1630,  1631,  1632,\n+    1633,  1634,  1635,  1636,  1637,  1638,  1639,  1640,  1641,  1642,\n+    1643,  1644,  1645,  1646,  1647,  1812,  1648,  1649,  1650,  1766,\n+    1651,  1652,  1653,  1654,  1655,  1656,  1657,  1658,  1659,  1660,\n+    1661,  1662,  1663,  1664,  1665,  1666,  1667,  1767,  1668,  1669,\n+    1670,  1813,  1671,  1672,  1768,  1673,  1674,  1675,  1676,  1677,\n+    1678,  1679,  1680,  1681,  1682,  1683,  1684,  1685,  1769,  1686,\n+    1770,  1687,  1688,  1689,  1690,  1815,  1691,  1692,  1693,  1694,\n+    1695,  1771,  1772,  1696,  1697,  1773,  1698,  1774,  1699,  1700,\n+    1775,  1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,\n+    1710,  1711,  1712,  1713,  1714,  1715,  1716,  1717,  1776,  1777,\n+    1718,  1816,  1719,  1720,  1721,  1722,  1723,  1724,  1725,  1726,\n+    1727,  1728,  1729,  1730,  1778,  1779,  1780,  1781,  1782,  1783,\n+    1784,  1785,  1786,  1787,  1788,  1731,  1732,  1733,  1734,  1409,\n+       0,     0,  1181,  1200,  1201,  1209,  1199,  1748,  1755,  1769,\n+    1265,  1264,  1200,   230,   455,     0,     0,  1198,     0,     0,\n+       0,     0,     0,   367,   366,     0,  1255,   372,     0,     0,\n+     186,     0,  1203,   105,  1617,   103,  1202,  1179,  1383,     0,\n+       0,   394,   395,   385,     0,   404,     0,   387,   392,   388,\n+       0,   413,   406,   414,   396,   386,   407,   397,   384,     0,\n+     415,     0,   390,     0,     0,     0,   231,   196,   373,   137,\n+       0,  1281,  1291,  1300,  1296,  1290,  1298,  1288,  1294,  1280,\n+    1302,  1289,  1293,  1286,  1303,  1284,  1301,  1299,  1287,  1295,\n+    1279,  1283,  1270,  1275,  1306,  1297,  1304,  1292,  1305,  1307,\n+    1282,  1308,  1285,     0,  1266,     0,     0,  1741,  1792,  1746,\n+       0,  1759,     0,  1762,  1763,  1651,  1770,  1773,  1774,  1775,\n+    1776,     0,   709,     0,   494,   661,   671,   709,   714,   975,\n+     737,   976,   725,  1202,  1171,     0,  1351,  1352,  1349,  1348,\n+     176,  1229,  1389,  1771,  1696,  1405,  1390,  1387,  1388,   232,\n+     552,   550,     0,  1149,  1523,  1562,  1655,  1666,  1771,  1325,\n+    1329,     0,   229,  1394,     0,  1407,  1395,   500,  1202,   544,\n+       0,   236,  1363,     0,  1368,     0,  1631,   527,   530,  1218,\n+     528,   492,     0,     1,   137,     0,   143,     0,   548,   548,\n+       0,   548,     0,   484,     0,     0,   492,   487,   491,   658,\n+    1274,  1378,  1404,  1771,  1696,  1393,  1396,  1531,     0,     0,\n+    1531,     0,  1531,     0,  1531,     0,  1386,     0,  1133,     0,\n+    1134,  1182,     0,   338,  1531,   179,   371,   370,   369,   368,\n+     373,  1531,  1239,     0,     0,   424,   425,     0,     0,     0,\n+       0,     0,  1250,   106,   104,     0,  1381,   402,   403,     0,\n+     393,   389,   391,     0,  1210,  1817,  1818,  1819,   780,  1820,\n+     809,   787,   809,   809,  1821,  1822,  1823,  1824,   776,   776,\n+    1497,   789,  1825,  1826,  1827,  1531,  1828,  1829,   777,   778,\n+     814,  1830,  1831,  1832,  1833,  1834,     0,     0,  1835,   809,\n+    1836,   776,  1837,  1838,  1839,   781,  1840,   747,  1841,     0,\n+    1842,   779,   748,  1843,   817,   817,  1844,     0,   804,  1845,\n+     412,     0,   416,   762,   763,   764,   765,   790,   791,   766,\n+     796,   797,   801,   767,   849,   776,  1211,  1212,  1531,   412,\n+    1213,   408,  1531,   412,  1173,  1531,     0,     0,   192,     0,\n+    1272,  1309,  1846,  1847,  1848,  1849,  1850,  1851,  1852,  1853,\n+    1855,  1854,  1856,  1857,  1858,  1859,  1860,  1861,  1862,  1863,\n+    1864,  1865,  1866,  1867,  1868,  1869,  1870,  1871,  1872,  1873,\n+    1874,  1877,  1875,  1876,  1878,  1879,  1880,  1881,  1882,  1883,\n+    1884,  1885,  1886,  1887,  1888,  1889,  1890,  1892,  1891,  1893,\n+    1894,  1895,  1896,  1897,  1898,  1899,  1900,  1901,  1902,  1903,\n+    1904,  1905,  1906,  1907,  1908,  1909,  1910,  1911,  1912,  1913,\n+    1914,  1915,  1916,  1917,  1918,  1919,  1920,  1921,  1922,  1923,\n+    1924,  1925,  1926,  1323,     0,  1324,  1314,  1278,  1310,  1311,\n+     137,   454,     0,  1263,  1350,     0,     0,     0,  1090,   709,\n+     714,     0,     0,   727,     0,  1105,     0,  1111,     0,     0,\n+       0,   709,   499,     0,   671,     0,   708,   599,   707,   599,\n+     553,     0,   534,   719,     0,     0,   722,   720,     0,   722,\n+       0,     0,     0,   722,   718,   679,     0,   599,     0,   710,\n+     599,   707,     0,   729,   726,  1172,  1269,     0,     0,     0,\n+       0,  1391,     0,     0,     0,  1184,  1186,  1187,  1058,  1197,\n+     962,     0,  1736,  1737,  1738,  1126,  1739,  1740,  1742,  1743,\n+    1744,   916,  1745,  1195,  1747,  1749,  1750,  1752,  1753,  1754,\n+    1755,  1756,  1757,     0,  1196,  1760,  1598,  1765,  1766,  1768,\n+    1771,  1772,  1194,  1777,     0,     0,     0,  1160,  1081,     0,\n+       0,     0,   961,     0,   957,     0,     0,   770,   771,   792,\n+     793,   772,   798,   799,   773,     0,  1156,   850,   945,  1144,\n+     994,   966,   974,   953,  1025,   946,     0,   956,   948,  1152,\n+     534,  1150,     0,   949,  1183,  1136,  1127,   534,  1148,  1328,\n+    1326,  1332,  1327,     0,     0,     0,     0,     0,  1172,  1371,\n+    1370,  1362,  1360,  1361,  1359,  1358,  1365,     0,  1367,  1275,\n+    1076,  1078,     0,   529,     0,     0,     0,   482,   481,     3,\n+       0,     0,     0,     0,   546,   547,     0,     0,     0,     0,\n+       0,     0,     0,     0,   642,   573,   574,   576,   639,   643,\n+     651,     0,     0,     0,     0,     0,   488,     0,  1218,  1403,\n+    1399,  1397,     0,     0,     0,   121,   121,     0,     0,     0,\n+       0,     0,    97,    46,    90,     0,     0,     0,     0,   210,\n+     223,     0,     0,     0,     0,     0,   220,     0,     0,   203,\n+      48,   197,   199,     0,   121,     0,    44,     0,     0,     0,\n+      50,     0,   454,  1199,     0,  1927,  1789,  1790,  1791,  1792,\n+    1742,  1793,  1794,     0,  1795,  1796,  1748,  1798,  1799,  1800,\n+    1801,  1802,  1803,  1804,  1805,  1755,  1807,  1808,  1809,  1810,\n+    1811,  1812,  1953,  1813,  1769,  1815,  1775,     0,  1816,   967,\n+    1084,   558,  1082,  1219,     0,  1200,  1206,  1132,     0,  1220,\n+    1959,  1960,  1961,  1962,  1963,  1964,  1965,  1966,  1967,  1968,\n+    1969,  1970,  1971,  1972,  1973,  1974,  1975,  1976,  1977,  1978,\n+    1979,  1980,  1981,  1982,  1983,  1984,  1985,  1986,  1987,  1988,\n+    1989,  1990,  1991,  1992,  1993,  1994,  1995,  1996,  1997,  1998,\n+    1999,  2000,  2001,  2002,  2003,  2004,  2005,  2006,  2007,  2008,\n+    2009,  2010,  2011,  2012,  2013,  2014,  2015,  2016,  2017,  2018,\n+    2019,  2020,  2021,  2022,  2023,  2024,  2025,  1913,  2026,  2027,\n+    2028,  2029,  2030,  1129,  1180,  1222,  1221,  1223,  1135,     0,\n+       0,   452,     0,     0,     0,     0,     0,     0,  1235,     0,\n+     180,     0,  1531,   191,  1531,   338,     0,  1531,   338,  1531,\n+       0,  1249,  1252,     0,   405,   401,   399,   398,   400,   808,\n+     795,   803,   802,  1081,   785,   784,   783,     0,   782,     0,\n+       0,   809,   809,   807,   786,   762,     0,     0,     0,   813,\n+       0,   811,     0,   410,   411,     0,   382,     0,   755,   751,\n+       0,   822,   823,   824,   825,   832,   833,   830,   831,   826,\n+     827,   820,   821,   828,   829,   818,   819,     0,   834,   835,\n+     836,   837,   838,   839,   840,   841,   768,   774,     0,     0,\n+     377,     0,  1214,     0,     0,   379,     0,     0,     0,   373,\n+     137,     0,   204,  1319,  1320,  1318,     0,     0,  1277,   207,\n+     224,  1313,  1322,  1312,  1321,  1276,  1271,     0,  1267,   443,\n+       0,     0,     0,     0,  1091,  1092,  1093,  1094,  1095,  1096,\n+    1097,  1098,  1099,     0,     0,  1100,   670,   668,     0,     0,\n+       0,     0,     0,     0,     0,   920,   946,     0,     0,  1127,\n+       0,  1076,  1110,     0,     0,     0,     0,     0,     0,  1076,\n+    1116,     0,     0,   693,   705,   592,   598,   669,     0,   667,\n+       0,  1149,   662,     0,   739,     0,   719,     0,   718,     0,\n+       0,   721,   715,     0,   716,     0,     0,     0,     0,   717,\n+       0,     0,     0,     0,     0,   665,     0,   705,   666,     0,\n+     736,  1338,  1337,  1346,   177,     0,  1087,     0,   137,  1392,\n+    1406,     0,  1081,   954,  1125,     0,     0,   959,  1038,   875,\n+       0,     0,   876,   854,   855,     0,  1159,  1168,  1076,  1080,\n+       0,   957,  1076,     0,   950,  1226,   951,  1028,  1030,     0,\n+       0,   958,     0,  1190,     0,   849,   849,  1155,  1058,     0,\n+    1048,  1051,     0,     0,  1055,  1056,  1057,     0,     0,     0,\n+    1147,     0,  1066,  1068,     0,     0,   891,  1064,     0,   894,\n+       0,     0,     0,     0,  1052,  1053,  1054,  1044,  1045,  1046,\n+    1047,  1049,  1050,  1062,  1043,   872,     0,   947,     0,   997,\n+       0,   871,  1153,   660,     0,  1188,  1185,     0,  1128,   660,\n+    1340,  1344,  1345,  1343,     0,  1339,  1331,  1330,  1335,  1333,\n+    1336,  1334,  1408,     0,  1372,  1356,     0,  1353,  1079,   655,\n+     531,  1175,     0,     0,  1377,   142,   141,     0,     0,   504,\n+     503,   567,   559,   561,   567,     0,   502,     0,   615,   616,\n+       0,     0,     0,     0,   648,   646,  1184,  1197,   603,   577,\n+     602,     0,     0,   581,     0,   607,   850,   641,   486,   571,\n+     572,   575,   485,     0,   644,     0,   654,     0,   523,   525,\n+     508,   522,   520,   505,   513,   642,   576,     0,  1379,  1398,\n+       0,     0,     0,     0,     0,  1531,     0,     0,    81,    62,\n+     290,   750,   120,     0,     0,     0,     0,     0,     0,     0,\n+      89,    86,    87,    88,     0,     0,     0,     0,   208,   209,\n+     222,     0,   213,   214,   211,   215,   216,     0,     0,   201,\n+     202,     0,     0,     0,     0,   200,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1385,  1380,   558,   558,   558,     0,\n+     556,   557,     0,     0,  1130,  1133,   442,   346,     0,   336,\n+       0,     0,     0,   183,   182,  1239,     0,     0,     0,     0,\n+       0,     0,   373,  1242,  1240,  1238,  1241,  1243,  1503,   171,\n+       0,     0,   187,   190,     0,   335,   309,     0,     0,  1254,\n+       0,     0,     0,  1531,  1251,   325,     0,  1382,     0,     0,\n+       0,   412,     0,   806,   805,   756,   752,     0,     0,     0,\n+       0,     0,     0,   417,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   412,   409,  1215,     0,   412,  1174,     0,\n+     412,   195,  1273,  1315,   205,   225,   206,   226,   477,     0,\n+     449,   457,   462,   440,     0,   440,     0,   459,   463,   440,\n+     458,     0,   440,   453,   454,     0,   990,     0,   980,     0,\n+       0,   728,     0,     0,   981,   922,   923,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   937,   936,   978,   729,     0,   732,     0,     0,  1097,\n-    1098,     0,   979,     0,     0,  1104,     0,     0,     0,   984,\n-       0,   669,     0,     0,   584,   591,     0,   594,   588,     0,\n-     531,   490,  1509,  1548,     0,   542,   542,   542,   530,   540,\n-       0,   616,     0,     0,     0,   691,     0,     0,   693,   695,\n-       0,     0,   698,     0,   675,   674,     0,     0,     0,   737,\n-       0,     0,     0,  1168,     0,   175,     0,  1217,     0,  1220,\n-    1221,  1219,  1216,  1222,     0,     0,     0,  1113,  1109,     0,\n-    1031,  1037,  1040,  1044,  1045,  1046,  1041,  1042,  1043,  1033,\n-    1034,  1035,  1036,  1038,  1039,  1059,     0,     0,  1020,     0,\n-       0,  1147,     0,   915,     0,   949,   960,     0,  1027,   961,\n-       0,     0,     0,  1181,  1182,   848,   857,   860,   892,   893,\n-     864,   865,   866,   870,  1214,  1213,  1143,     0,  1135,     0,\n-       0,   849,   874,   879,     0,  1106,   909,     0,   897,     0,\n-     887,     0,   895,   899,   875,   890,     0,   871,     0,  1136,\n-    1056,  1058,     0,  1054,     0,   861,   862,   863,   853,   854,\n-     855,   856,   858,   859,   867,  1030,  1028,  1029,     0,  1122,\n-       0,  1134,     0,     0,   995,     0,     0,   894,  1140,     0,\n-     736,   555,  1126,  1149,   736,     0,   846,  1361,  1207,  1354,\n-    1207,  1343,  1066,  1165,  1206,   134,     0,  1363,     0,   128,\n-       0,   159,   161,   657,     0,  1125,   562,   563,   567,     0,\n-       0,   567,   546,   498,  1752,  1637,     0,     0,     0,     0,\n-     605,   646,     0,   637,   602,   603,     0,   601,  1173,   606,\n-    1172,   607,   610,   611,   579,   647,  1158,   649,     0,   642,\n-       0,  1166,   504,   523,     0,     0,     0,     0,     0,   487,\n-     486,   653,     0,    47,     0,  1517,    64,     0,     0,     0,\n-       0,     0,     0,   237,     0,   337,   237,   102,  1517,   409,\n-    1517,   409,  1416,  1484,  1653,     0,    60,    93,     0,   311,\n-     114,     0,   296,   340,    83,    98,   107,     0,     0,    49,\n-     195,   209,   214,   110,   218,   215,  1247,   216,   121,     0,\n-      45,     0,   108,     0,  1245,     0,     0,    51,   112,  1249,\n-     553,   553,   553,     0,  1072,     0,     0,     0,  1074,  1075,\n-    1121,     0,   438,     0,   334,     0,   448,   428,   429,   439,\n-     178,     0,  1225,     0,   188,   335,     0,   335,     0,  1227,\n-       0,     0,   170,   166,     0,     0,     0,     0,   325,   323,\n-     356,     0,   330,   324,   333,     0,     0,   282,     0,  1410,\n-       0,     0,     0,     0,   423,     0,     0,     0,     0,     0,\n-     772,   785,   380,   759,     0,   813,   812,   814,   814,   759,\n-       0,   742,   759,     0,   757,     0,   797,   766,   839,   840,\n-     841,   842,   843,   844,   845,   373,  1205,   375,     0,   377,\n-     441,     0,   444,     0,   443,   447,   442,   436,     0,   469,\n-       0,     0,     0,     0,     0,     0,     0,  1256,     0,   973,\n-    1078,     0,  1092,  1091,   918,   925,   928,   932,   933,   934,\n-    1093,     0,     0,     0,   929,   930,   931,   921,   922,   923,\n-     924,   926,   927,   935,   734,     0,     0,   728,  1102,  1101,\n-    1095,  1096,     0,   981,   982,   983,  1103,     0,     0,   582,\n-     580,   583,   585,   581,     0,     0,   703,   736,   542,   542,\n-     542,   542,   539,     0,     0,     0,   735,     0,   633,   699,\n-     697,     0,   721,     0,   694,     0,   700,     0,     0,   685,\n-     692,   708,     0,   741,     0,   710,  1335,  1077,   548,   952,\n-       0,     0,  1110,     0,   914,  1048,     0,  1019,     0,     0,\n-       0,  1156,     0,  1066,  1025,  1023,   957,   846,     0,     0,\n-       0,     0,     0,     0,     0,   898,   889,     0,   896,   900,\n-       0,     0,     0,   883,     0,     0,   881,   910,   877,     0,\n-       0,   911,  1121,     0,  1127,     0,     0,   994,  1003,   660,\n-     656,   616,   553,  1157,   616,     0,  1329,  1345,  1342,     0,\n-    1364,     0,   148,     0,     0,     0,   143,   123,     0,     0,\n-     151,   162,  1363,     0,   165,     0,   557,   559,     0,  1049,\n-     567,   561,   609,   608,     0,   577,   644,   575,     0,   650,\n-       0,   521,     0,   507,     0,   678,     0,     0,     0,     0,\n-       0,   286,     0,     0,     0,   237,     0,   345,     0,   352,\n-       0,     0,   337,   318,    82,     0,     0,     0,    56,   101,\n+       0,     0,     0,     0,     0,   940,   939,   982,   732,     0,\n+     735,     0,     0,  1108,  1109,     0,   983,     0,     0,  1115,\n+       0,     0,     0,   988,     0,   672,     0,     0,   587,   594,\n+       0,   597,   591,     0,   534,   493,  1523,  1562,     0,   545,\n+     545,   545,   533,   543,     0,   619,     0,     0,     0,   694,\n+       0,     0,   696,   698,     0,     0,   701,     0,   678,   677,\n+       0,     0,     0,   740,     0,     0,     0,  1179,     0,   178,\n+       0,  1228,     0,  1231,  1232,  1233,  1230,  1227,  1234,     0,\n+       0,     0,  1124,  1120,     0,     0,  1033,  1035,  1037,     0,\n+    1042,  1048,  1051,  1055,  1056,  1057,  1052,  1053,  1054,  1044,\n+    1045,  1046,  1047,  1049,  1050,  1070,     0,     0,  1024,     0,\n+       0,  1158,     0,   918,     0,   952,   963,     0,  1031,   964,\n+       0,     0,     0,  1192,  1193,   851,   860,   863,   895,   896,\n+     867,   868,   869,   873,  1225,  1224,  1154,     0,  1146,     0,\n+       0,   852,   877,   882,     0,  1117,   912,     0,   900,     0,\n+     890,     0,   898,   902,   878,   893,     0,   874,     0,  1147,\n+    1067,  1069,     0,  1065,     0,   864,   865,   866,   856,   857,\n+     858,   859,   861,   862,   870,  1041,  1039,  1040,     0,  1133,\n+       0,  1145,     0,     0,   999,     0,     0,   897,  1151,     0,\n+     739,   558,  1137,  1160,   739,     0,   849,  1373,  1218,  1366,\n+    1218,  1355,  1077,  1176,  1217,   137,     0,  1375,   132,   128,\n+       0,   162,   164,   660,     0,  1136,   565,   566,   570,     0,\n+       0,   570,   549,   501,  1766,  1651,     0,     0,     0,     0,\n+     608,   649,     0,   640,   605,   606,     0,   604,  1184,   609,\n+    1183,   610,   613,   614,   582,   650,  1169,   652,     0,   645,\n+       0,  1177,   507,   526,     0,     0,     0,     0,     0,   490,\n+     489,   656,     0,    47,     0,  1531,    64,     0,     0,     0,\n+       0,     0,     0,   240,     0,   340,   240,   102,  1531,   412,\n+    1531,   412,  1430,  1498,  1667,     0,    60,    93,     0,   314,\n+     114,     0,   299,   343,    83,    98,   107,     0,     0,    49,\n+     198,   212,   217,   110,   221,   218,  1259,   219,   121,     0,\n+      45,     0,   108,     0,  1257,     0,     0,    51,   112,  1261,\n+     556,   556,   556,     0,  1083,     0,     0,     0,  1085,  1086,\n+    1132,     0,   441,     0,   337,     0,   451,   431,   432,   442,\n+     181,     0,  1237,     0,   191,   338,     0,   338,     0,  1239,\n+       0,     0,   173,   169,     0,     0,     0,     0,   328,   326,\n+     359,     0,   333,   327,   336,     0,     0,   285,     0,  1424,\n+       0,     0,     0,     0,   426,     0,     0,     0,     0,     0,\n+     775,   788,   383,   762,     0,   816,   815,   817,   817,   762,\n+       0,   745,   762,     0,   760,     0,   800,   769,   842,   843,\n+     844,   845,   846,   847,   848,   376,  1216,   378,     0,   380,\n+     444,     0,   447,     0,   446,   450,   445,   439,     0,   472,\n+       0,     0,     0,     0,     0,     0,     0,  1268,     0,   977,\n+    1089,     0,  1103,  1102,   921,   928,   931,   935,   936,   937,\n+    1104,     0,     0,     0,   932,   933,   934,   924,   925,   926,\n+     927,   929,   930,   938,   737,     0,     0,   731,  1113,  1112,\n+    1106,  1107,     0,   985,   986,   987,  1114,     0,     0,   585,\n+     583,   586,   588,   584,     0,     0,   706,   739,   545,   545,\n+     545,   545,   542,     0,     0,     0,   738,     0,   636,   702,\n+     700,     0,   724,     0,   697,     0,   703,     0,     0,   688,\n+     695,   711,     0,   744,     0,   713,  1347,  1088,   551,   955,\n+       0,     0,  1121,     0,   917,     0,  1036,   965,  1059,     0,\n+    1023,     0,     0,     0,  1167,     0,  1077,  1029,  1027,   960,\n+     849,     0,     0,     0,     0,     0,     0,     0,   901,   892,\n+       0,   899,   903,     0,     0,     0,   886,     0,     0,   884,\n+     913,   880,     0,     0,   914,  1132,     0,  1138,     0,     0,\n+     998,  1007,   663,   659,   619,   556,  1168,   619,     0,  1341,\n+    1357,  1354,     0,  1376,     0,   151,     0,     0,     0,     0,\n+     154,   165,  1375,     0,   168,     0,   560,   562,     0,  1060,\n+     570,   564,   612,   611,     0,   580,   647,   578,     0,   653,\n+       0,   524,     0,   510,     0,   681,     0,     0,     0,     0,\n+       0,   289,     0,     0,     0,   240,     0,   348,     0,   355,\n+       0,     0,   340,   321,    82,     0,     0,     0,    56,   101,\n       74,    66,    52,    80,     0,     0,    85,     0,    78,    95,\n-      96,    94,    99,     0,   272,   247,   283,     0,     0,     0,\n+      96,    94,    99,     0,   275,   250,   286,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   555,   551,   552,   964,  1120,   472,   473,\n-     200,   471,   344,     0,     0,   182,     0,   186,   332,     0,\n-    1242,     0,  1224,   370,     0,     0,   169,   171,     0,   188,\n-     335,     0,   310,   306,   331,   304,   303,   305,     0,  1411,\n-     193,     0,  1405,   335,  1241,     0,     0,   424,     0,   418,\n-       0,  1236,   791,   755,     0,   809,   807,   756,     0,   754,\n-     750,   758,   409,   475,     0,   432,   470,   457,   462,     0,\n-     468,   464,   463,   458,   466,   465,   461,   974,   985,  1090,\n-       0,     0,     0,     0,   727,   730,     0,   980,   975,   701,\n-       0,     0,   616,     0,     0,     0,     0,   533,   532,   538,\n-       0,     0,   997,   696,     0,     0,     0,   683,   673,   679,\n-       0,     0,     0,   738,     0,   739,   709,     0,  1112,  1108,\n-    1060,  1146,  1065,  1151,  1153,     0,     0,     0,  1022,  1180,\n-     850,     0,     0,   880,  1107,   901,     0,     0,     0,   876,\n-    1048,     0,     0,     0,     0,     0,   885,     0,  1131,  1122,\n-       0,  1130,     0,     0,     0,     0,   969,   661,   633,     0,\n-     916,   633,     0,   529,  1362,     0,  1357,   127,   150,   149,\n-       0,   157,     0,  1125,     0,   148,   129,     0,     0,   160,\n-     148,   136,   565,   566,     0,   560,   576,  1159,  1167,   506,\n-       0,   954,     0,     0,   503,     0,   115,   237,     0,     0,\n-      63,     0,   354,   298,   346,   329,   313,     0,     0,     0,\n-     238,     0,   371,     0,     0,   319,     0,     0,     0,     0,\n-     299,     0,     0,   258,     0,     0,   329,     0,   336,   254,\n-     255,     0,    55,    75,     0,    71,     0,   100,     0,     0,\n-       0,     0,     0,    58,    70,     0,    53,     0,   409,   409,\n-      61,   297,  1199,  1803,  1804,  1805,  1806,  1807,  1808,  1809,\n-    1810,  1811,  1812,  1923,  1813,  1814,  1815,  1816,  1817,  1818,\n-    1819,  1820,  1932,  1821,   244,  1822,  1584,  1823,  1824,  1825,\n-    1826,  1827,     0,  1828,   745,  1829,  1830,  2008,  1831,  1033,\n-    1034,   242,   339,   239,   347,   241,   243,     0,  1200,   240,\n-     342,   111,  1248,     0,   109,     0,  1246,   118,   116,   113,\n-    1250,   967,   968,   965,   553,   451,   431,   181,     0,     0,\n-    1410,     0,     0,     0,  1517,     0,   167,     0,  1242,   185,\n-     332,     0,   362,   282,   357,     0,  1410,  1408,     0,  1242,\n-    1404,     0,   415,     0,     0,     0,   751,   743,   378,   445,\n-       0,   467,   938,     0,     0,     0,     0,   592,     0,   598,\n-     633,   537,   536,   535,   534,   615,  1459,  1735,  1636,     0,\n-     619,   614,   617,   622,   624,   623,   625,   621,   632,     0,\n-     635,   720,  1061,  1063,     0,     0,     0,     0,   684,     0,\n-     686,     0,   688,     0,   740,  1111,  1154,  1155,  1150,     0,\n-     847,   907,   905,   902,     0,   903,   884,     0,     0,   882,\n-     878,     0,   912,     0,  1128,     0,   989,     0,   992,  1006,\n-    1001,  1002,   997,   964,   997,  1330,   147,     0,     0,     0,\n-     135,   132,   122,     0,   152,   425,     0,     0,   518,   677,\n-     511,   512,     0,   350,    65,     0,   329,     0,   237,   315,\n-     314,   317,   312,   316,     0,   372,     0,     0,   256,     0,\n-     263,   301,   302,   300,   257,   329,   335,   259,     0,     0,\n-       0,    67,    57,    54,    59,    68,     0,     0,    69,    72,\n-     741,    84,    77,  1932,  1941,     0,     0,     0,     0,     0,\n-       0,   427,   434,   200,     0,     0,   306,  1407,     0,     0,\n-     420,     0,     0,   332,   172,     0,     0,     0,  1410,     0,\n-       0,   234,     0,   279,     0,   190,  1409,     0,     0,  1396,\n-       0,     0,  1234,  1235,     0,   433,   939,     0,   940,   731,\n-       0,     0,   590,   997,     0,     0,     0,   626,   620,   996,\n-     998,     0,     0,   587,  1064,   680,     0,   682,     0,   706,\n-     555,     0,   706,   689,  1152,   987,     0,   904,   908,   906,\n-     886,  1132,  1129,   991,  1008,  1005,   635,  1178,   635,     0,\n-     124,     0,   125,   158,     0,     0,     0,   137,  1050,   508,\n-     509,     0,   237,     0,   328,   351,   268,   246,     0,     0,\n-       0,   253,   260,   361,   262,     0,    76,    92,     0,     0,\n-     341,   119,   117,   966,   451,     0,  1242,   282,  1404,   417,\n-       0,     0,     0,   306,   193,  1406,   295,   288,   289,   290,\n-     291,   292,   293,   294,   309,   308,   280,   281,     0,     0,\n-       0,     0,     0,   419,  1236,     0,   163,     0,   154,   154,\n-     941,   593,     0,   635,     0,     0,     0,   618,     0,     0,\n-     634,     0,   494,  1062,     0,   672,   670,   553,     0,   671,\n-       0,     0,   555,   587,   587,     0,     0,     0,     0,   335,\n-     353,     0,   320,   327,   266,   265,   267,   271,     0,   269,\n-       0,   285,     0,   278,   246,     0,    79,     0,   348,   426,\n-     430,     0,   236,  1398,   332,     0,  1404,   282,  1410,  1404,\n-       0,  1401,     0,   416,     0,     0,  1242,     0,     0,   156,\n-     156,     0,   587,   628,     0,   627,   999,  1000,   589,   681,\n-       0,     0,   988,     0,  1011,   493,   492,     0,   131,   736,\n-     142,     0,   361,   307,     0,     0,     0,   268,     0,   261,\n-     358,   359,   360,     0,   274,   264,   275,    73,    91,   349,\n-       0,   332,  1399,   235,   191,  1397,  1402,  1403,     0,   154,\n-     736,   164,   153,   564,   155,   564,   597,   495,   629,   586,\n-       0,   687,  1007,     0,     0,     0,   126,   130,     0,   278,\n-     321,   326,   245,   270,   284,     0,     0,     0,   276,     0,\n-     277,  1404,     0,   156,  1232,   567,   567,  1721,  1460,  1689,\n-       0,  1009,  1012,  1010,  1004,   736,   237,   250,     0,   249,\n-       0,   338,   273,  1400,  1242,   564,   145,   144,     0,  1016,\n-    1015,  1014,  1018,  1017,   141,   355,   248,   252,   251,   736,\n-     567,     0,  1233,   146,  1013\n+       0,     0,     0,   558,   554,   555,   968,  1131,   475,   476,\n+     203,   474,   347,     0,     0,   185,     0,   189,   335,     0,\n+    1254,     0,  1236,   373,     0,     0,   172,   174,     0,   191,\n+     338,     0,   313,   309,   334,   307,   306,   308,     0,  1425,\n+     196,     0,  1419,   338,  1253,     0,     0,   427,     0,   421,\n+       0,  1248,   794,   758,     0,   812,   810,   759,     0,   757,\n+     753,   761,   412,   478,     0,   435,   473,   460,   465,     0,\n+     471,   467,   466,   461,   469,   468,   464,   978,   989,  1101,\n+       0,     0,     0,     0,   730,   733,     0,   984,   979,   704,\n+       0,     0,   619,     0,     0,     0,     0,   536,   535,   541,\n+       0,     0,  1001,   699,     0,     0,     0,   686,   676,   682,\n+       0,     0,     0,   741,     0,   742,   712,     0,  1123,  1119,\n+    1032,  1034,  1071,  1157,  1076,  1162,  1164,     0,     0,     0,\n+    1026,  1191,   853,     0,     0,   883,  1118,   904,     0,     0,\n+       0,   879,  1059,     0,     0,     0,     0,     0,   888,     0,\n+    1142,  1133,     0,  1141,     0,     0,     0,     0,   973,   664,\n+     636,     0,   919,   636,     0,   532,  1374,     0,  1369,   130,\n+     131,     0,     0,     0,   146,   123,   129,     0,     0,   163,\n+     151,   139,   568,   569,     0,   563,   579,  1170,  1178,   509,\n+       0,   957,     0,     0,   506,     0,   115,   240,     0,     0,\n+      63,     0,   357,   301,   349,   332,   316,     0,     0,     0,\n+     241,     0,   374,     0,     0,   322,     0,     0,     0,     0,\n+     302,     0,     0,   261,     0,     0,   332,     0,   339,   257,\n+     258,     0,    55,    75,     0,    71,     0,   100,     0,     0,\n+       0,     0,     0,    58,    70,     0,    53,     0,   412,   412,\n+      61,   300,  1210,  1817,  1818,  1819,  1820,  1821,  1822,  1823,\n+    1824,  1825,  1826,  1937,  1827,  1828,  1829,  1830,  1831,  1832,\n+    1833,  1834,  1946,  1835,   247,  1836,  1598,  1837,  1838,  1839,\n+    1840,  1841,     0,  1842,   748,  1843,  1844,  2022,  1845,  1044,\n+    1045,   245,   342,   242,   350,   244,   246,     0,  1211,   243,\n+     345,   111,  1260,     0,   109,     0,  1258,   118,   116,   113,\n+    1262,   971,   972,   969,   556,   454,   434,   184,     0,     0,\n+    1424,     0,     0,     0,  1531,     0,   170,     0,  1254,   188,\n+     335,     0,   365,   285,   360,     0,  1424,  1422,     0,  1254,\n+    1418,     0,   418,     0,     0,     0,   754,   746,   381,   448,\n+       0,   470,   941,     0,     0,     0,     0,   595,     0,   601,\n+     636,   540,   539,   538,   537,   618,  1473,  1749,  1650,     0,\n+     622,   617,   620,   625,   627,   626,   628,   624,   635,     0,\n+     638,   723,  1072,  1074,     0,     0,     0,     0,   687,     0,\n+     689,     0,   691,     0,   743,  1122,  1165,  1166,  1161,     0,\n+     850,   910,   908,   905,     0,   906,   887,     0,     0,   885,\n+     881,     0,   915,     0,  1139,     0,   993,     0,   996,  1010,\n+    1005,  1006,  1001,   968,  1001,  1342,   150,   127,   153,   152,\n+       0,   160,     0,  1136,     0,   151,     0,   155,   428,     0,\n+       0,   521,   680,   514,   515,     0,   353,    65,     0,   332,\n+       0,   240,   318,   317,   320,   315,   319,     0,   375,     0,\n+       0,   259,     0,   266,   304,   305,   303,   260,   332,   338,\n+     262,     0,     0,     0,    67,    57,    54,    59,    68,     0,\n+       0,    69,    72,   744,    84,    77,  1946,  1955,     0,     0,\n+       0,     0,     0,     0,   430,   437,   203,     0,     0,   309,\n+    1421,     0,     0,   423,     0,     0,   335,   175,     0,     0,\n+       0,  1424,     0,     0,   237,     0,   282,     0,   193,  1423,\n+       0,     0,  1410,     0,     0,  1246,  1247,     0,   436,   942,\n+       0,   943,   734,     0,     0,   593,  1001,     0,     0,     0,\n+     629,   623,  1000,  1002,     0,     0,   590,  1075,   683,     0,\n+     685,     0,   709,   558,     0,   709,   692,  1163,   991,     0,\n+     907,   911,   909,   889,  1143,  1140,   995,  1012,  1009,   638,\n+    1189,   638,     0,     0,     0,     0,   138,   135,   122,   140,\n+    1061,   511,   512,     0,   240,     0,   331,   354,   271,   249,\n+       0,     0,     0,   256,   263,   364,   265,     0,    76,    92,\n+       0,     0,   344,   119,   117,   970,   454,     0,  1254,   285,\n+    1418,   420,     0,     0,     0,   309,   196,  1420,   298,   291,\n+     292,   293,   294,   295,   296,   297,   312,   311,   283,   284,\n+       0,     0,     0,     0,     0,   422,  1248,     0,   166,     0,\n+     157,   157,   944,   596,     0,   638,     0,     0,     0,   621,\n+       0,     0,   637,     0,   497,  1073,     0,   675,   673,   556,\n+       0,   674,     0,     0,   558,   590,   590,   124,     0,   125,\n+     161,     0,     0,     0,   338,   356,     0,   323,   330,   269,\n+     268,   270,   274,     0,   272,     0,   288,     0,   281,   249,\n+       0,    79,     0,   351,   429,   433,     0,   239,  1412,   335,\n+       0,  1418,   285,  1424,  1418,     0,  1415,     0,   419,     0,\n+       0,  1254,     0,     0,   159,   159,     0,   590,   631,     0,\n+     630,  1003,  1004,   592,   684,     0,     0,   992,     0,  1015,\n+     496,   495,     0,     0,     0,     0,   364,   310,     0,     0,\n+       0,   271,     0,   264,   361,   362,   363,     0,   277,   267,\n+     278,    73,    91,   352,     0,   335,  1413,   238,   194,  1411,\n+    1416,  1417,     0,   157,   739,   167,   156,   567,   158,   567,\n+     600,   498,   632,   589,     0,   690,  1011,     0,     0,     0,\n+       0,   134,   739,   145,     0,   281,   324,   329,   248,   273,\n+     287,     0,     0,     0,   279,     0,   280,  1418,     0,   159,\n+    1244,   570,   570,  1735,  1474,  1703,     0,  1013,  1016,  1014,\n+    1008,   126,   133,     0,   240,   253,     0,   252,     0,   341,\n+     276,  1414,  1254,   567,   148,   147,     0,  1020,  1019,  1018,\n+    1022,  1021,   739,   358,   251,   255,   254,   739,   570,     0,\n+     144,  1245,   149,  1017\n };\n \n /* YYDEFGOTO[NTERM-NUM].  */\n static const yytype_int16 yydefgoto[] =\n {\n-      -1,    46,    47,    48,   571,  2500,  2501,  2502,  2155,  1149,\n-    3216,  2156,  1150,  1151,  2504,   572,   573,  1700,   574,  2446,\n-    2078,  3106,    53,  2701,  2081,  1111,  2705,  3166,  2696,  2700,\n-    2449,  3239,  3293,  2702,  2082,  2083,  3167,  2084,   575,  2555,\n-    2556,   576,    56,   528,   577,  1778,   578,   838,   579,  1779,\n-    1727,  1508,  1169,  1717,  1416,   580,   101,    61,   581,  2489,\n-    2822,  3209,  2514,  3341,  2758,  2759,  3206,  3207,  2492,  2157,\n-    3274,  3275,  2569,  1709,  3269,  2228,  3154,  2161,  2143,  2760,\n-    2237,  3114,  2862,  2158,  2740,  2229,  3201,  1790,  2230,  3202,\n-    2978,  2231,  1753,  1782,  2493,  3276,  2162,  1754,  2488,  2823,\n-    1696,  2232,  3213,  2233,   529,  2744,   582,   563,   564,   829,\n-    1363,   565,   810,   583,   741,  1788,   584,   585,  2209,  3023,\n-    2594,  3024,  2288,  2203,  1425,  2285,  1834,  1757,  1426,   516,\n-    1849,  2595,  2540,  1835,   586,  1043,    69,    70,   962,    71,\n-    2972,    72,    73,  1674,  1675,  1676,   664,   677,   678,  1481,\n-    1918,   670,  1115,  1643,   652,   653,  2197,   692,  1747,  1638,\n-    1639,  2088,  2456,  1667,  1668,  1124,  1125,  1905,  3182,  1906,\n-    1907,  1473,  1474,  3062,  1655,  1659,  1660,  2109,  2099,  1646,\n-    2358,  2900,  2901,  2902,  2903,  2904,  2905,  2906,  1044,  2632,\n-    3073,  1663,  1664,  1127,  1128,  1129,  1672,  2119,    75,    76,\n-    2060,  2429,  2430,   625,  2917,  1500,  1677,  2636,  2637,  2638,\n-    2921,  2922,  2923,   626,   956,   957,   980,   976,  1489,  1928,\n-     627,   628,  1884,  1885,  2327,   983,  1921,  1938,  1939,  2645,\n-    1807,   811,  2144,  1513,  1366,   813,  1045,   814,  1341,  1046,\n-    1345,   816,  1047,  1048,  1049,   819,  1050,  1051,  1052,   822,\n-    1337,  1053,  1054,  1356,  1385,  1386,  1387,  1388,  1389,  1390,\n-    1391,  1392,  1393,  1099,  1678,  1056,  1057,  1058,  1059,  1060,\n-     630,  1061,  1062,  1595,  2054,  2428,  2910,  3069,  3070,  2686,\n-    2950,  3094,  3192,  3305,  3331,  3332,  1063,  1064,  1543,  1544,\n-    1545,  2048,  1589,  1590,  1065,  2825,  1592,  1976,  2913,  2914,\n-    1100,  1467,  1536,  1218,  1219,  1514,  1440,  1441,  1448,  1859,\n-    1455,  1460,  1889,  1890,  1468,  2016,  1066,  1957,  1958,  2383,\n-    1522,  1067,   720,  1225,  1547,  1602,  2681,  2051,  1593,  2010,\n-    1076,  1068,  1077,  1070,  1532,  1533,  2391,  2654,  2655,  1983,\n-    2115,   632,  1627,  2121,  2122,   834,  1300,  1071,  1072,  1073,\n-    1074,  1075,   634,  1220,   502,   825,  3294,  1399,  1105,  1221,\n-    1301,  2006,  1542,   587,   990,  1952,   588,  1315,  1771,   589,\n-    3053,  2875,  1329,  1792,  2242,   531,   590,   591,   511,    82,\n-      83,    84,   701,  1419,   592,  1420,  1421,   924,    85,  1509,\n-     926,   927,   594,   659,   660,  1510,  1612,  1511,   595,   638,\n-     596,  1095,   674,  1096,  1098,   597,  1089,  2442,  2077,    90,\n-      91,    92,   108,  1179,   598,   646,   647,   599,    95,   661,\n-     666,   600,   601,  3049,   602,  2572,  1323,   512,   504,   505,\n-     827,  1303,  1223,  1304\n+      -1,    46,    47,    48,   571,  2510,  2511,  2512,  2165,  1152,\n+    3231,  2166,  1153,  1154,  2514,   572,   573,  1704,   574,  2714,\n+    2088,  2457,  3213,    53,  2971,  2091,  1112,  2975,  3178,  2708,\n+    2970,  2459,  3254,  3307,  2972,  2092,  2093,  3179,  2094,   575,\n+    2565,  2566,   576,    56,   528,   577,  1782,   578,   838,   579,\n+    1783,  1731,  1511,  1172,  1721,  1419,   580,   101,    61,   581,\n+    2499,  2832,  3224,  2524,  3359,  2768,  2769,  3221,  3222,  2502,\n+    2167,  3288,  3289,  2579,  1713,  3283,  2238,  3166,  2171,  2153,\n+    2770,  2247,  3126,  2872,  2168,  2750,  2239,  3216,  1794,  2240,\n+    3217,  2991,  2241,  1757,  1786,  2503,  3290,  2172,  1758,  2498,\n+    2833,  1700,  2242,  3228,  2243,   529,  2754,   582,   563,   564,\n+     829,  1366,   565,   810,   583,   741,  1792,   584,   585,  2219,\n+    3036,  2604,  3037,  2298,  2213,  1428,  2295,  1838,  1761,  1429,\n+     516,  1853,  2605,  2550,  1839,   586,  1044,    69,    70,   962,\n+      71,  2985,    72,    73,  1678,  1679,  1680,   664,   677,   678,\n+    1484,  1922,   670,  1116,  1647,   652,   653,  2207,   692,  1751,\n+    1642,  1643,  2098,  2466,  1671,  1672,  1125,  1126,  1909,  3194,\n+    1910,  1911,  1476,  1477,  3075,  1659,  1663,  1664,  2119,  2109,\n+    1650,  2368,  2910,  2911,  2912,  2913,  2914,  2915,  2916,  1045,\n+    2642,  3086,  1667,  1668,  1128,  1129,  1130,  1676,  2129,    75,\n+      76,  2070,  2442,  2443,   625,  2927,  1503,  1681,  2646,  2647,\n+    2648,  2931,  2932,  2933,   626,   956,   957,   980,   976,  1492,\n+    1932,   627,   628,  1888,  1889,  2337,   983,  1925,  1942,  1943,\n+    2655,  1811,   811,  2154,  1516,  1369,   813,  1046,   814,  1344,\n+    1047,  1348,   816,  1048,  1049,  1050,   819,  1051,  1052,  1053,\n+     822,  1340,  1054,  1055,  1359,  1388,  1389,  1390,  1391,  1392,\n+    1393,  1394,  1395,  1396,  1100,  1682,  1057,  1058,  1059,  1060,\n+    1061,   630,  1062,  1063,  1599,  2064,  2441,  2920,  3082,  3083,\n+    2698,  2960,  3107,  3204,  3319,  3347,  3348,  1064,  1065,  1547,\n+    1548,  1549,  1966,  1967,  1968,  1969,  2058,  1593,  1594,  1066,\n+    2835,  1596,  1986,  2923,  2924,  1101,  1470,  1540,  1221,  1222,\n+    1517,  1443,  1444,  1451,  1863,  1458,  1463,  1893,  1894,  1471,\n+    2026,  1067,  1962,  1963,  2393,  1525,  1068,   720,  1228,  1551,\n+    1606,  2693,  2061,  1597,  2020,  1077,  1069,  1078,  1071,  1536,\n+    1537,  2404,  2666,  2667,  1993,  2125,   632,  1631,  2131,  2132,\n+     834,  1303,  1072,  1073,  1074,  1075,  1076,   634,  1223,   502,\n+     825,  3308,  1402,  1106,  1224,  1304,  2016,  1546,   587,   990,\n+    1957,   588,  1318,  1775,   589,  3066,  2885,  1332,  1796,  2252,\n+     531,   590,   591,   511,    82,    83,    84,   701,  1422,   592,\n+    1423,  1424,   924,    85,  1512,   926,   927,   594,   659,   660,\n+    1513,  1616,  1514,   595,   638,   596,  1096,   674,  1097,  1099,\n+     597,  1090,  2455,  2087,    90,    91,    92,   108,  1182,   598,\n+     646,   647,   599,    95,  1140,   661,   666,   600,   601,  3062,\n+     602,  2582,  1326,   512,   504,   505,   827,  1306,  1226,  1307\n };\n \n /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n    STATE-NUM.  */\n-#define YYPACT_NINF -2872\n+#define YYPACT_NINF -2907\n static const int yypact[] =\n {\n-    5738,   -39,   540, -2872, -2872,   284,   -39, 45158, 59573,   -39,\n-      81,  1837, 47082, -2872,   316,  7933,   -39, 49968, 66203,   336,\n-     264, 28534,   364, 50449, 50449, -2872, -2872, -2872, 59573, 49968,\n-   50930,   -39,   320, 60054, -2872,   -39, 30458, 47563,   128, -2872,\n-   49968,    51,   217, 51411, 49968,  3271,   669,   204, -2872, -2872,\n-   -2872, -2872, -2872,   289, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   122, -2872,\n-     232,   148, 28534, 28534,  1659,   236, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872,   338, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, 29977, -2872, -2872, -2872, -2872,\n-   -2872, -2872, 51892, 49968, 52373, 48044, 52854, -2872,   868, -2872,\n-     155, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   156,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   161,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   167, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-     409,  -124, -2872,   179, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872,  3271, 49968, -2872, 53335,   753,\n-     767,   572, 53816, -2872, -2872, 49968, -2872, -2872,   818,    80,\n-   -2872,   735, -2872, -2872, 48525, -2872, -2872, -2872,   783,   990,\n-     768, -2872, -2872, -2872,   579, -2872,   153, -2872, -2872,   617,\n-     612, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   715,\n-   -2872, 63421, -2872, 60535, 54297, 54778, -2872,   585,  1485, 66220,\n-   27087, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872,   338, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, 50449, 59573, 50449,   604,   630,   955,   643,\n-   29015,   677, 30940,   698,   706,  1069,   752,   760,   766,   790,\n-     217, 27569, 55259, 55259,   -53,  1404, -2872, 55259, 55740, -2872,\n-     785, -2872,   789,  -124, -2872,   868, -2872, -2872, -2872, -2872,\n-     370,   795, -2872,   820,  1119, -2872, -2872, -2872,   841, -2872,\n-   -2872,  1040, 18596, 18596, 61016, 61016,   868, 61016,   866, -2872,\n-   -2872,    43, -2872, -2872,  1659, -2872,   851, -2872,  -124, -2872,\n-   47563, -2872, -2872,   225,  1191, 18596, 49968,   865, -2872,   913,\n-     865,   919,   923, -2872,  5738,  1277,  1166, 47563,   326,   326,\n-    1408,   326,   746,   900,  2536,  4230, -2872,  1356, -2872,   969,\n-   -2872, 49968, -2872,   991,  1260, -2872,   851,  1334,   747,  1143,\n-    1343,  5142,  1345,  1219,  1354,  1645,  1468, 10013, 18596, 42753,\n-   -2872,  -124,  1009,  1015,  1255,  1363, -2872, -2872, -2872, -2872,\n-     861,  1266, -2872,  1496, 49968, -2872, -2872,  1086, 56221, 56702,\n-   57183, 57664,  1455, -2872, -2872,  1399, -2872, -2872, -2872,  1097,\n-   -2872, -2872, -2872,   310, -2872, -2872, -2872, -2872, -2872, -2872,\n-    1116, -2872,  1116,  1116, -2872, -2872, -2872, -2872,  1071,  1071,\n-    1254,  1082, -2872, -2872, -2872,  1437, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872,  1087,   708, -2872,  1116,\n-   -2872,  1071, -2872, -2872, -2872, -2872, -2872, -2872, -2872, 65766,\n-   -2872, -2872, -2872, -2872,   549,   619, -2872,  1089, -2872, -2872,\n-     136,  1099, -2872,  1567, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872,  1108, -2872,  3419,  1071, -2872, -2872,  1462,   166,\n-    1118, -2872,  1477,   226, -2872,  1486,  1359, 18596, -2872,  1295,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   217,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872,   550, -2872, -2872, 40101, -2872, -2872,\n-   66220,  1149,  1227, -2872, -2872, 18596, 18596,  1157,  2502, 55259,\n-   55740, 18596, 49968, -2872, 18596, 22138,  1160, 18596, 18596, 10519,\n-   18596, 26125, 55259,  1404,  1171, 49968, -2872,  1267,  1184,  1267,\n-     320, 28534,  1473, -2872,   170,  1493,  1428, -2872, 28534,  1428,\n-     776,  1223,  1505,  1428, -2872,   411,  1507,  1267, 31421, -2872,\n-    1267,  1228,  1441, -2872, -2872,   334, -2872, 40101, 13049, 63887,\n-    1693, -2872,  1502, 59573,  1235, -2872, -2872, -2872, -2872, -2872,\n-   -2872,   699,  1732,   144,  1734, 18596,   144,   144,  1240,   181,\n-     181, -2872,  1243, -2872,   183,  1246,  1247,  1743,  1744,   173,\n-     708,   144, 18596, -2872,   181,  1250,  1746,  1253,  1749,   130,\n-     172, -2872,   185, 18596, 18596, 18596,  1611, 18596,  9507,  1750,\n-    1758, -2872, 49968,  -124,  1262,   868, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872,   178,  6549, -2872, -2872, -2872,  1301,\n-   -2872, -2872, -2872, -2872,  1470, 18596, -2872, -2872,  1261,  1473,\n-   -2872,   186, -2872, -2872, -2872,   656,  1473, -2872, -2872, -2872,\n-   -2872, -2872,   230,  1666, 39139, 39620, 59573,  -124, 61497, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872,   763, -2872,   338, 41654,\n-    1265,  1270,   865, 49968, 49968,  1735, -2872, -2872, -2872, 47563,\n-     158,  1562,  1406, -2872, -2872,  1659,  1659, 14042,   951,   319,\n-     743, 14548, 19102,  1617,  1504,   189,   395,  1622, -2872,  1508,\n-    1730, 22138, 18596, 18596,   746,   900, 18596,   913, -2872,  1561,\n-   49968, 45639,   791,  1032,  1293,  1379,  1296,    64,  1706, -2872,\n-    1298, -2872,  1382, 49968, 65766,   244, -2872,  1740,   244,   244,\n-     498,  1745,  1387,   262,  1547,   381,  -105,  1298,  2398, -2872,\n-   47563,   163,   499,  1298, 49968,  1390,   516,  1298, 59573,  1149,\n-     139, 13049, -2872,  1028,  1124,  1142,   757,   203,  1177,  1294,\n-   13049,  1300,  1304,   150,  1317,  1350,  1373,  1426,  1435,  1459,\n-    1525,  1545,   157,  1584,  1588,  1605,  1615,  1618,  1623, -2872,\n-    1632,   160,  1634,   209, 13049,  1639, -2872, 41654,    -1, -2872,\n-   -2872,  1641,   162, -2872, 36933,  1308, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872,  1392, 59573,  1348,  1663,\n-     868, 49968, 49968,  1591,  1671,  1716, 64353, -2872, 49968,  1556,\n-    2398,  1557,  1325,  1788,  1568,  1015,  1570,  1338, -2872, 61978,\n-    1831, -2872, -2872, -2872, -2872, -2872, -2872,  1340, -2872, -2872,\n-   18596, -2872, -2872, -2872,  1834, -2872, 63887, 63887,  1116,  1116,\n-   -2872, -2872,  1814,  1465,  1474,  1834, -2872,  1834, -2872, 59573,\n-   -2872, -2872, 63887, -2872, 59573,  1378,  1389,  1834, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872,  1834,  1481, -2872,  1482,  1490,  1494,\n-   -2872, -2872, -2872, -2872, -2872, 59573, 59573, -2872, 42753,  1400,\n-   49968, 49968, -2872, 49968, 59573,  1413,   100, 66220, 44196, -2872,\n-   -2872, -2872, -2872,   557,   966, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, 42753, -2872,  3057,   868, 40699,  1415,\n-   18596, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-    1419,  1742, -2872, -2872, -2872,  6055,  1425, 40739,  1427, 22138,\n-   22138,  1801, -2872, -2872, 22138,  1434,  -124, 44677, 40619,  1397,\n-    1443, 41080, 15054, 18596, 15054, 15054, 41120, -2872,  1444, 41160,\n-   55259,  1429, 49006, -2872, -2872, 49968, -2872, 18596, 18596,  1404,\n-   49487,  1456, 28534, -2872, 28534, -2872,  1723, 28534, -2872, -2872,\n-    2679, -2872, 28534,  1728, 18596, 28534, -2872, 28534,  1674,  1676,\n-    1451, 28534, -2872, 49968,  1454, -2872, 49968, -2872, -2872, -2872,\n-   -2872,  1452,   782, -2872,   787,  3211, -2872, -2872, 18596, 18596,\n-   -2872, 41654,  1497, 18596, -2872,  4063, 35752, 15560,  4063,  1946,\n-    1946, 33826, -2872,  1616, 41200, -2872,  1464,  1027,  6953,  1463,\n-   -2872, -2872, -2872, -2872,  1469,  1449,  1458,  -124, 18596, -2872,\n-   18596,  3674,  3674, -2872,   268, 63887, 18596, 18596, 18596, 18596,\n-   18596, 18596, 18596, 18596, 42272,  1555,   169, 59573, 18596, 18596,\n-    1472,   719, -2872, 18596,  1702, -2872,  1476, 18596,  1565,   286,\n-   18596, 18596, 18596, 18596, 18596, 18596, 18596, 18596, 18596, -2872,\n-   -2872, 24649,   278,   671,  1802,  1819,   -45,   399, 18596,  1815,\n-   10013, -2872,  -124, 37696,   113,  1815, -2872, -2872, -2872, -2872,\n-     187, -2872, -2872, -2872, -2872,  1452, -2872,  1452, -2872, 59573,\n-   -2872, 49968,   225, 46601, 18596, -2872, -2872,  1480,  1487,  1489,\n-    1559, -2872, -2872, 49968, 34307,  1775, -2872,   325,  1500, -2872,\n-   40579,  1739,  1775,  1659, -2872, -2872, 23150,  1620,  1784,  1725,\n-   -2872, -2872,  1705,  1707, -2872,  1509, 41797, 19608, 19608, -2872,\n-    1306, 41654,  1311, -2872, -2872, -2872, -2872, -2872, -2872,    71,\n-   -2872, 49968,    94, 31902, -2872,  1510,    66, -2872,  2931,  1830,\n-    1798,  1617,   395,  1514, -2872, -2872,  1699,  1516, 62459, 49968,\n-    1797,  1752,  1804,   -94, -2872, -2872, -2872, 63887, -2872, 49968,\n-   59573, 58145, 62940, 43234, 49968, 42753, -2872, -2872, -2872, -2872,\n-   49968,   720, 49968,  6769, -2872, -2872, -2872,   244, -2872, -2872,\n-   -2872, -2872, -2872, 59573, 49968, -2872, -2872,   244, 59573, 49968,\n-     244, -2872,  1906, 49968, 49968, 49968, 49968,  1908, 49968, 49968,\n-   -2872, -2872,     3,     3,  1747, 11025,   175, -2872, 18596, 18596,\n-   -2872, 18596,  1698, -2872,   800, -2872,  1748,   111, 49968, -2872,\n-    1856, -2872,  1577, 49968, 49968, 49968, 49968, 49968,   804, -2872,\n-   -2872, -2872, -2872, -2872,  1533, -2872,  1536,  1889, -2872,  2398,\n-    1898, 46120,   780,  2327,  1899,  1586,  1902, 11531,  2011,  1787,\n-   -2872, -2872,  1774, -2872, 18596,  1564,  1566,   136,   822, -2872,\n-   -2872,  1560,  1389,  1574,  1579,  1572,  1576,   837, 63887, -2872,\n-     844,  1834,   200,  1578,  1582,  1414,   897,   600,  1315,   166,\n-   -2872, -2872, 42753,   226, -2872,  1778,   182, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872,   846, 28053, -2872, -2872,  2026,\n-     868,  2026,   740, -2872, -2872,  2026, -2872,  2012,  2026, -2872,\n-    1149, 63887, -2872,  7505, -2872, 18596, 18596, -2872, 18596,  1911,\n-   -2872,  2073,  2073, 63887, 22138, 22138, 22138, 22138, 22138, 22138,\n-     480,  1250, 22138, 22138, 22138, 22138, 22138, 22138, 22138, 22138,\n-   22138, 23656,   371, -2872, -2872,   850,  2047, 18596, 18596,  1929,\n-    1911, 18596, -2872, 63887,  1592, -2872,  1593,  1596, 18596, -2872,\n-   63887, -2872, 49968,   -14,    -4,  1602,  1603, -2872, -2872,  1607,\n-    1473, -2872,   885,   891, 49968,  2943,  4719,  5073, -2872, -2872,\n-   18596,  1928,  2679,  2679, 28534, -2872, 18596,  1610, -2872, -2872,\n-   28534,  1949, -2872,  2679, -2872, -2872, 32383,  2679,   864, -2872,\n-   63887, 49968,   873, 63887, 40101, -2872, 13049, -2872, 63887, -2872,\n-   -2872, -2872, -2872, -2872,  1621,  1624, 18596,    61, -2872,  7623,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872,  1625,  1626, -2872,  1628,\n-   49968, -2872, 20114, -2872, 59573, -2872, -2872, 18596, 49968, -2872,\n-   18596,  1633,  8168, -2872, -2872, -2872,   184,   974,  3461,   399,\n-    5958,  5958,  5958,  4063, -2872, -2872, -2872,  1636, -2872, 22138,\n-   22138, -2872,  6191,  4124,  9507, -2872, -2872,  1950, -2872,   771,\n-   -2872,  1635, -2872, -2872,  4648, -2872, 35752,  6878, 18596,   205,\n-   -2872, 18596,  1472, 18596,  1709,  5958,  5958,  5958,   266,   266,\n-     184,   184,   184,   974,   399, -2872, -2872, -2872,  1638, 18596,\n-   42753, -2872,  1642,  1643,  1982,  1253, 18596, -2872, -2872, 28534,\n-    1456,    -1, -2872,  1611,  1456,  1834,  3674, -2872,   913, -2872,\n-     913, -2872, 41654, 49968, -2872,  3211, 28534,  1677,  2474,  2099,\n-   59573, -2872,  1644,  1815,  1660, -2872, -2872, -2872,  1668, 18596,\n-    2315,  1668, -2872,  1775,     2,  1868,  1020,  1020,  1306,  1872,\n-   -2872, -2872,  1717, -2872, -2872, -2872, 18596, 12037,  1344, -2872,\n-    1349, -2872, -2872, -2872, -2872,  1653, -2872, -2872,  1920, -2872,\n-   49968, -2872, -2872, 22138,  2101, 18596, 32864,  2102,  1904, -2872,\n-   -2872, -2872,  1753,  1298, 18596,  1897, -2872,   154,  1665,  2018,\n-     159,  1973, 59573, -2872,   369,   388, -2872,   723,  2023,   182,\n-    2024,   182, 42753, 42753, 42753,   874, -2872, -2872,   868, -2872,\n-   -2872,   875, -2872,   415, -2872, -2872, -2872,  1757,   799,  1298,\n-    2398, -2872, -2872, -2872, -2872, -2872, -2872, -2872,   208,   825,\n-    1298,  1759, -2872,  1760, -2872,  1761,   832,  1298, -2872, -2872,\n-     175,   175,   175, 13049, -2872,  1900,  1905,  1679, 41654, 41654,\n-   41654,  1682, -2872,   199, -2872, 59573, -2872, -2872, -2872,  1698,\n-    2015,   868,  1716, 49968,  2398,  1678,  2143,  1015,  1338, -2872,\n-    1842,   833,   968, -2872, 59573, 49968, 49968, 49968, -2872, -2872,\n-   -2872,  1688,  1686, -2872, 58626,   -13,  1913,  1914, 49968,  1733,\n-   49968,  1296,  2159, 49968, -2872,   879, 16066,  2052, 49968,  1700,\n-   -2872, -2872, -2872, -2872,  1834, -2872, -2872,   393,   393, -2872,\n-   59573, -2872, -2872,  1703, -2872,  1704, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872, 59573, -2872,\n-   -2872, 42753, -2872, 43715, -2872, -2872, -2872, -2872,   868, -2872,\n-     868,  1932, 59573, 38177,   868, 38658,   868, -2872,  1708, -2872,\n-   41654,  8209, 41654,  1929, -2872,   202,  2073,  1884,  1884,  1884,\n-    5913,  2041,   248,  1710,  1884,  1884,  1884,   348,   348,   202,\n-     202,   202,  2073,   371,   785, 44677,  1711, -2872, 41654, 41654,\n-   -2872, -2872,  1712, -2872, -2872, -2872, -2872,  1714,  1719, -2872,\n-   -2872, -2872, -2872, -2872, 59573,  1104, -2872,  1456,   128,   128,\n-     128,   128, -2872, 49968, 49968, 49968, 41654,  2153,  2042, -2872,\n-   -2872,  2679, 41654, 49968, -2872, 25640, -2872, 49968,  2061, -2872,\n-   -2872, -2872, 49968,  2147,   880, -2872, -2872, -2872, -2872, -2872,\n-   41488, 18596, -2872,  2087, -2872, -2872, 35752, -2872,  1727,  9507,\n-   41510, -2872,  2036,  8256, -2872, 41654, -2872,  3674, 18596,  2998,\n-    3372, 18596,  1729, 18596,  2064, -2872, -2872,  1736, -2872, -2872,\n-   63887, 18596,  1731,  4834, 22138, 22138,  5114, -2872,  5147, 18596,\n-    9507, -2872, 36988,  1724,  1741,  1747, 16572, -2872,  1941,  1738,\n-   -2872,  1928,   175,  1616,  1928,  1754, -2872, -2872, -2872,  1756,\n-   -2872, 18596,  1891,  1795,   224, 30458,  1963, -2872, 59573,   892,\n-   -2872, 34307,  1677, 18596,  -124,   273, -2872, -2872,  1762, -2872,\n-    1668, -2872, -2872, -2872,  1976, -2872, -2872, -2872, 49968, -2872,\n-    1764, -2872, 31902,  2085,  9507, -2872, 31902, 49968, 49968,  8297,\n-    2115, -2872, 59573, 59573, 59573, -2872, 59573,  1768,  1765,   754,\n-    1777,   813, -2872,  3566,   754,  2104,   722,  1296,   262,   171,\n-     366, -2872, -2872, -2872,  1851, 49968, -2872, 59573, -2872, -2872,\n-   -2872, -2872, -2872, 43234, -2872, -2872, -2872, 42753, 35270, 42753,\n-   49968, 49968, 49968, 49968, 49968, 49968, 49968, 49968, 49968, 49968,\n-    1779,  1781,  1785,  1747, -2872, -2872, -2872, -2872, -2872, -2872,\n-    -105, -2872, -2872,   199,   868, -2872,  1791, -2872, 46120,  3271,\n-    1586,  2239,  1716,    95, 59092,  1786,  1794, -2872,   894,  2398,\n-    1799,  2245, -2872,   780, 46120, -2872, -2872, -2872,  2217, -2872,\n-     585,   197, -2872,  1015, -2872,  3271,  1338, -2872,  3271, 41654,\n-   59573,  1860, -2872,  1389,  1805, -2872, -2872,  1389, 63887,  1389,\n-   -2872, -2872,   182, -2872,   905, -2872, -2872, -2872, -2872, 59573,\n-    1803, -2872,  1803, -2872, -2872,  1803, -2872, -2872, -2872, -2872,\n-   22138,  2136,  1806, 63887, -2872, -2872, 49968, -2872, -2872, -2872,\n-     906,  1807,  1928, 49968, 49968, 49968, 49968, -2872, -2872, -2872,\n-   17078, 18596,  1844, -2872,  1808, 13555,  2117, -2872, 25155, -2872,\n-     188,  1810, 32383, -2872, 59573, -2872, -2872, 18596, 41654, -2872,\n-   -2872, -2872,  6596, -2872,  1809,  1811, 59573, 18596, -2872, -2872,\n-     359, 18596, 18596,  6191, -2872, 37077, 18596, 63887,   907,  6191,\n-     291, 18596,  3873,  4948, 18596, 18596,  5804, 36241, -2872, 18596,\n-   12543, -2872,  1813, 18596, 36263, 34788, -2872, 28534,  2042,  1818,\n-   -2872,  2042,   868, -2872, 41654, 18596, -2872, -2872, -2872, -2872,\n-    1869, -2872,   917, -2872,  2226,  1891, -2872,  1832, 59573, -2872,\n-    1891, 41654, -2872, -2872, 35752, -2872, -2872, -2872, -2872, -2872,\n-    2261,  1918,  1821,  1824, -2872,  1263, -2872, -2872, 59573,  1826,\n-   -2872,  1827,   754, -2872, 59573,  1876, -2872,   252,  2141,   106,\n-   -2872, 18596, -2872,  2228,  2302,  3566,  1846, 59573, 49968, 22138,\n-   -2872,   303,   240, -2872,  2123, 49968,  1876,  2262, -2872, -2872,\n-   -2872,   813, -2872,  2163,  2083, -2872,   244, -2872, 18596,   813,\n-    2084,   235, 59573, -2872, -2872,  4148, -2872, 63887,   182,   182,\n-   -2872, -2872,  1855,  1858,  1859,  1861,  1862,  1863,  1864,  1865,\n-    1879,  1881,  1882, -2872,  1885,  1886,  1887,  1888,  1893,  1895,\n-    1896,  1903,  1087,  1907, -2872,  1912,  1762,  1915,  1916,  1922,\n-    1924,  1925, 64819,  1926,  1927,  1933,  1934,  1089,  1935,   557,\n-     966, -2872, -2872, -2872, -2872, -2872, -2872,  1118,  1939, -2872,\n-    1880, -2872, -2872,  1954, -2872,  1970, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872,   175,  1149,   105, -2872, 59573,  1892,\n-    1733,  2359, 17584,   838,  2133,  1901, -2872,   868,  1586, -2872,\n-   46120,  2550,   206,  1914, -2872,   168,  1733, -2872,  2297,  1586,\n-    1944,  2390, -2872,  2149, 59573,  1942, -2872, -2872, -2872, -2872,\n-   43715,  1803,  6152, 22138, 63887,   918,   924, -2872,  2434,  2103,\n-    2042, -2872, -2872, -2872, -2872, -2872,  1948,   -43,  1951,  9001,\n-    1940, -2872, -2872, -2872, -2872, -2872, -2872, 41654, 41654, 59573,\n-    2127, -2872, -2872,  1945,  1955, 33345,  2401,  1956, -2872, 13049,\n-   -2872,  2269, -2872, 26606, -2872, 41654, 18596, -2872, -2872, 37178,\n-    2278,  6191,  6191, 37077,   928, -2872,  6191, 18596, 18596,  6191,\n-    6191, 18596, -2872,  1967, -2872,   930, -2872, 36310, -2872, 65285,\n-   -2872, -2872,  1844,   868,  1844, -2872,  1965,  3271,  3856, 59573,\n-    -124,   -17, -2872, 18596, -2872, -2872,  1969, 31902, -2872, -2872,\n-   -2872, -2872, 31902,   754, -2872,  2137,  1876,  1971, -2872, -2872,\n-   -2872, -2872, -2872, -2872, 36365, -2872,    42, 18596, -2872,  1394,\n-    5913, -2872, -2872, -2872, -2872,  1876,  1015, -2872, 49968,  2436,\n-    2330, -2872, -2872, 41654, -2872, -2872,  1834,  1834, -2872, -2872,\n-    2147, -2872, -2872, -2872, -2872,  1118,   383, 35270, 49968, 49968,\n-    1978, -2872, -2872,  -105,  2361,   932,   780, -2872,  3271,  3271,\n-   41654, 49968,  2334, 46120, -2872,  2443,  1987, 49968,  1733,   227,\n-     227, -2872,  2134, -2872,  2135, -2872, -2872,  2453,   288, -2872,\n-   18090, 49968, -2872, -2872, 29496, -2872,  6152,   934, -2872, -2872,\n-    1995,  1997, -2872,  1844, 18596,  1998, 18596, -2872, 20620,  2000,\n-   -2872,  2468, 18596,  2067, 24162, -2872, 18596, -2872, 49968, 55259,\n-       3,  2013, 55259, -2872, -2872, -2872, 18596, -2872,  6191,  6191,\n-    6191, -2872, -2872, -2872,  2213, -2872,  2127, -2872,  2127, 18596,\n-   -2872,   224, -2872, -2872,  2424, 29496,  2387, 41654, -2872, -2872,\n-   -2872, 49968, -2872, 42753, -2872,   754,   -23,  2019, 18596, 36555,\n-    2249, -2872, -2872,  2281, -2872,  2340, -2872,  2086,   428,  2105,\n-   -2872, -2872, -2872, -2872,  1149,   868,  1586,  1914,  1944, -2872,\n-    2029, 49968,  3271,   780,   585, -2872, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -2872, -2872, -2872, -2872, -2872, -2872,  3271,  2454,\n-    2250,  2458,  3271, 41654,  1860, 18596, -2872,   960,  2459,    78,\n-   -2872, -2872,  2527,  2127,  2040, 20620,  2044, -2872, 59573,  2048,\n-   41654,  2183, -2872, -2872,  2050, -2872, -2872,   175, 18596, -2872,\n-   37218,  2490,  1747,  2067,  2067,  2108, 49968,   985,    60,  1015,\n-     754,   997, -2872,  2063, -2872, -2872, -2872, -2872,  2398, -2872,\n-   36864,  2291,    83,  2277,  2019, 18596, -2872,  2138, -2872, -2872,\n-   -2872,  2522, -2872, -2872, 46120,  2066,  1944,  1914,  1733,  1944,\n-    2283, -2872,  2286, -2872,  2072, 36886,  1586, 29496, 59573, 59573,\n-   59573,  2062,  2067, -2872,  2074, -2872, -2872, -2872, 49006, -2872,\n-    2075,  2076, -2872, 18596,   635, -2872, -2872,  3271, -2872,  1456,\n-   -2872,  2204,  2281, -2872, 42753, 35270,  1867,   -23,  2381, -2872,\n-   -2872, -2872, -2872,   118,  2303, -2872,  2306, -2872, 41654, -2872,\n-    3271, 46120, -2872, -2872, -2872, -2872, -2872, -2872, 29496,  2459,\n-    1456, -2872, -2872,   325, -2872,   325, -2872, -2872, -2872, -2872,\n-     868, -2872,  1397, 21126, 21126,  2089, -2872, -2872, 34307,  2277,\n-   -2872, -2872, -2872, -2872, -2872,   198,   198,  2466, -2872,  2152,\n-   -2872,  1944,  1023, 59573, -2872,  1668,  1668, 22644,  2241,   152,\n-   40659, -2872, -2872, -2872, -2872,  1456, -2872, -2872,  2573, -2872,\n-     210, -2872, -2872, -2872,  1586,   325, -2872, -2872,  2565, -2872,\n-   -2872, -2872, -2872, -2872, -2872,   754, -2872, -2872, -2872,  1456,\n-    1668, 21632, -2872, -2872, -2872\n+    6509,   499,   841, -2907, -2907,   306,   499, 45538, 59953,   499,\n+      77,   871, 47462, -2907,   320,  5804,   499, 50348, 66583,   371,\n+     334, 28480,   496, 50829, 50829, -2907, -2907, -2907, 59953, 50348,\n+   51310,   499,   315, 60434, -2907,   499, 30404, 47943,   173, -2907,\n+   50348,    41,   234, 51791, 50348,  2145,   673,   246, -2907, -2907,\n+   -2907, -2907, -2907,   132, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   147, -2907,\n+     224,   156, 28480, 28480,  1064,   289, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907,   327, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, 29923, -2907, -2907, -2907, -2907,\n+   -2907, -2907, 52272, 50348, 52753, 48424, 53234, -2907,   822, -2907,\n+     143, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   165,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   167,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   169, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+     356,   676, -2907,   180, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907,  2145, 50348, -2907, 53715,   593,\n+     615,   503, 54196, -2907, -2907, 50348, -2907, -2907,   766,    70,\n+   -2907,   684, -2907, -2907, 48905, -2907, -2907, -2907,   740,   903,\n+     747, -2907, -2907, -2907,   549, -2907,   150, -2907, -2907,   598,\n+     559, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   768,\n+   -2907, 63801, -2907, 60915, 54677, 55158, -2907,   525,  1030, 66600,\n+   27033, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907,   327, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, 50829, 59953, 50829,   537,   642,   993,   679,\n+   28961,   692, 30886,   705,   725,  1045,   728,   734,   748,   756,\n+     234, 27515, 55639, 55639,   -57,  4160, -2907, 55639, 56120, -2907,\n+     754, -2907,   794,   676, -2907,   822, -2907, -2907, -2907, -2907,\n+      67,   801, -2907,   811,  1096, -2907, -2907, -2907,   816, -2907,\n+   -2907,  1066, 18542, 18542, 61396, 61396,   822, 61396,   863, -2907,\n+   -2907,    46, -2907, -2907,  1064, -2907,   865, -2907,   676, -2907,\n+   47943, -2907, -2907,   225,  1158, 18542, 50348,   869, -2907,   879,\n+     869,   876,   888, -2907,  6509,  1245,  1134, 47943,   360,   360,\n+    1366,   360,   974,   991,  3467,  3731, -2907,  1756, -2907,   931,\n+   -2907, 50348,  1023,   966,  1238, -2907,   865,  1320,   390,  1129,\n+    1327,  5130,  1329,   964,  1331,   989,  1425,  9959, 18542, 43133,\n+   -2907,   676,   980,   985,  1220,  1342, -2907, -2907, -2907, -2907,\n+     784,  1244, -2907,  1489, 50348, -2907, -2907,  1090, 56601, 57082,\n+   57563, 58044,  1452, -2907, -2907,  1402, -2907, -2907, -2907,  1101,\n+   -2907, -2907, -2907,   191, -2907, -2907, -2907, -2907, -2907, -2907,\n+    1121, -2907,  1121,  1121, -2907, -2907, -2907, -2907,  1087,  1087,\n+    1283,  1103, -2907, -2907, -2907,  1453, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907,  1108,  1174, -2907,  1121,\n+   -2907,  1087, -2907, -2907, -2907, -2907, -2907, -2907, -2907, 66146,\n+   -2907, -2907, -2907, -2907,   411,   505, -2907,  1116, -2907, -2907,\n+     108,  1119, -2907,  1566, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907,  1126, -2907,  2104,  1087, -2907, -2907,  1485,   204,\n+    1140, -2907,  1496,   205, -2907,  1498,  1381, 18542, -2907,  1322,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   234,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907,   601, -2907, -2907, 40440, -2907, -2907,\n+   66600,  1167,  1262, -2907, -2907, 18542, 18542,  1180,  3198, 55639,\n+   56120, 18542, 50348, -2907, 18542, 22084,  1182, 18542, 18542, 10465,\n+   18542, 26071, 55639,  4160,  1183, 50348, -2907,  1281,  1199,  1281,\n+     315, 28480,  1477, -2907,   212,  1490,  1423, -2907, 28480,  1423,\n+     514,  1226,  1501,  1423, -2907,   238,  1509,  1281, 31367, -2907,\n+    1281,  1231,  1450, -2907, -2907,   661, -2907, 40440, 12995, 64267,\n+    1707, -2907,  1513, 59953,  1251, -2907, -2907, -2907, -2907, -2907,\n+   -2907,   643,  1748,   123,  1752, 18542,   123,   123,  1266,   185,\n+     185, -2907,  1268, -2907,   186,  1270,  1287,  1758,  1776,   137,\n+     158,  1174,   123, 18542, -2907,   185,  1288,  1784,  1292,  1788,\n+     124,   133, -2907,   187, 18542, 18542, 18542,  1650, 18542,  9453,\n+    1786,  1796, -2907, 50348,   676,  1300,   822, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907,   149,  7423, -2907, -2907, -2907,\n+    1338, -2907, -2907, -2907, -2907,  1511, 18542, -2907, -2907,  1303,\n+    1477, -2907,   190, -2907, -2907, -2907,   682,  1477, -2907, -2907,\n+   -2907, -2907, -2907,   229,  1706, 39478, 39959, 59953,   676, 61877,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907,   620, -2907,   327,\n+   41993,  1305,  1309,   869, 50348, 50348,  1772, -2907, -2907, -2907,\n+   47943,   157,  1599,  1441, -2907, -2907,  1064,  1064, 13988,   152,\n+     209,    94, 14494, 19048,  1656,  1541,   217,   600,  1660, -2907,\n+    1546,  1767, 22084, 18542, 18542,   974,   991, 18542,   879, -2907,\n+   -2907, -2907,  1597, 50348, 46019,   774,   808,  1328,  1413,  1332,\n+       9,  1740, -2907,  1333, -2907,  1418, 50348, 66146,   214, -2907,\n+    1777,   214,   214,   268,  1779,  1424,   253,  1581,    43,   474,\n+    1333,  1436, -2907, 47943,   267,    44,  1333, 50348,  1426,   458,\n+    1333, 59953,  1167,   139, 12995, -2907,  1248,  1263,  1341,   324,\n+     122,  1383,  1388, 12995,  1481,  1503,   162,  1521,  1549,  1579,\n+    1622,  1635,  1639,  1643,  1646,   136,  1648,  1657,  1659,  1662,\n+    1673,  1691, -2907,  1703,   164,  1705,   170, 12995,  1710, -2907,\n+   41993,   -15, -2907, -2907,  1720,   174, -2907, 37433,  1335, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,  1427,\n+   59953,  1379,  1699,   822, 50348, 50348,  1242,  1702,  1753, 64733,\n+   -2907, 50348,  1587,  1436,  1589,  1357,  1828,  1612,   985,  1615,\n+    1386, -2907, 62358,  1880, -2907, -2907, -2907, -2907, -2907, -2907,\n+    1392, -2907, -2907, 18542, -2907, -2907, -2907,  1889, -2907, 64267,\n+   64267,  1121,  1121, -2907, -2907,  1861,  1487,  1488,  1889, -2907,\n+    1889, -2907, 59953, -2907, -2907, 64267, -2907, 59953,  1405,  1406,\n+    1889, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907,  1889,  1492, -2907,\n+    1493,  1494,  1504, -2907, -2907, -2907, -2907, -2907, 59953, 59953,\n+   -2907, 43133,  1403, 50348, 50348, -2907, 50348, 59953,  1411,   639,\n+   66600, 44576, -2907, -2907, -2907, -2907,  1037,  1105, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, 43133, -2907,  2138,\n+     822, 41038,  1415, 18542, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907,  1430,  1747, -2907, -2907, -2907,  6920,  1431,\n+   41078,  1433, 22084, 22084,  2302, -2907, -2907, 22084,  1435,   676,\n+   45057, 40958,  1422,  1443, 41419, 15000, 18542, 15000, 15000, 41459,\n+   -2907,  1445, 41499, 55639,  1407, 49386, -2907, -2907, 50348, -2907,\n+   18542, 18542,  4160, 49867,  1460, 28480, -2907, 28480, -2907,  1723,\n+   28480, -2907, -2907,  1887, -2907, 28480,  1728, 18542, 28480, -2907,\n+   28480,  1674,  1675,  1451, 28480, -2907, 50348,  1455, -2907, 50348,\n+   -2907, -2907, -2907, -2907,  1446,   713, -2907,   741,  1317, -2907,\n+   -2907, 18542, 18542, -2907, 41993,  1505, 18542, -2907, 18542, 42177,\n+   35698, 15506, 42177,  1941,  1941, 33772, -2907,  1613, 41539, -2907,\n+    1459,   950,  7913,  1458, -2907, -2907, -2907, -2907,  1461,  1462,\n+    1449,   676, 18542, -2907, 18542,  4482,  4482, -2907,   296, 64267,\n+   18542, 18542, 18542, 18542, 18542, 18542, 18542, 18542, 42652,  1550,\n+     211, 59953, 18542, 18542,  1469,   982, -2907, 18542,  1698, -2907,\n+    1472, 18542,  1557,   920, 18542, 18542, 18542, 18542, 18542, 18542,\n+   18542, 18542, 18542, -2907, -2907, 24595,   318,   683,  1798,  1817,\n+     -61,   346, 18542,  1812,  9959, -2907,   676, 38035,   140,  1812,\n+   -2907, -2907, -2907, -2907,   193, -2907, -2907, -2907, -2907,  1446,\n+   -2907,  1446, -2907, 59953, -2907, 50348,   225, 46981, 18542, -2907,\n+   -2907,  1499,  1497,  1506,  1555, -2907, -2907, 50348, 34253,  1780,\n+   -2907,   359,  1507, -2907, 40918,  1746,  1780,  1064, -2907, -2907,\n+   23096,  1627,  1787,  1726, -2907, -2907,  1711,  1712, -2907,  1510,\n+   42136, 19554, 19554, -2907,  1380, 41993,  1393, -2907, -2907, -2907,\n+   -2907, -2907, -2907,    76, -2907, 50348,    52, 31848, -2907,  1515,\n+     128, -2907,  2726,  1844,  1807,  1656,   600,  1522, -2907, -2907,\n+    1097,  1525, 62839, 50348,  1801,  1757,  1805,    69, -2907, -2907,\n+   -2907, 64267, -2907, 50348, 59953, 58525, 63320, 43614, 50348, 43133,\n+   -2907, -2907, -2907, -2907, 50348,   720, 50348,  6141, -2907, -2907,\n+   -2907,   214, -2907, -2907, -2907, -2907, -2907, 59953, 50348, -2907,\n+   -2907,   214, 59953, 50348,   214, -2907,  1157, 50348, 50348, 50348,\n+   50348,  1265, 50348, 50348, -2907, -2907,   -10,   -10,  1741, 10971,\n+     146, -2907, 18542, 18542, -2907, 18542,  1704, -2907,   762, -2907,\n+    1750,   163, 50348, -2907,  1865, -2907,  1586, 50348, 50348, 50348,\n+   50348, 50348,  1524, -2907, -2907, -2907, -2907, -2907,  1533, -2907,\n+    1548,  1893, -2907,  1436,  1901, 46500,   793,  1491,  1902,  1592,\n+    1909, 11477,  2020,  1800, -2907, -2907,  1783, -2907, 18542,  1567,\n+    1569,   108,   767, -2907, -2907,  1573,  1406,  1590,  1593,  1574,\n+    1576,   777, 64267, -2907,   798,  1889,   116,  1577,  1580,  1500,\n+    1089,   502,  1395,   204, -2907, -2907, 43133,   205, -2907,  1802,\n+     153, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   809,\n+   27999, -2907, -2907,  2040,   822,  2040,   588, -2907, -2907,  2040,\n+   -2907,  2024,  2040, -2907,  1167, 64267, -2907,  8231, -2907, 18542,\n+   18542, -2907, 18542,  1918, -2907,  2076,  2076, 64267, 22084, 22084,\n+   22084, 22084, 22084, 22084,   619,  1288, 22084, 22084, 22084, 22084,\n+   22084, 22084, 22084, 22084, 22084, 23602,   492, -2907, -2907,   815,\n+    2048, 18542, 18542,  1937,  1918, 18542, -2907, 64267,  1603, -2907,\n+    1610,  1619, 18542, -2907, 64267, -2907, 50348,    27,    24,  1623,\n+    1624, -2907, -2907,  1626,  1477, -2907,   858,   897, 50348,  3884,\n+    4141,  5553, -2907, -2907, 18542,  1953,  1887,  1887, 28480, -2907,\n+   18542,  1630, -2907, -2907, 28480,  1970, -2907,  1887, -2907, -2907,\n+   32329,  1887,   843, -2907, 64267, 50348,   877, 64267, 40440, -2907,\n+   12995, -2907, 64267, -2907, -2907, -2907, -2907, -2907, -2907,  1632,\n+    1636, 18542,    80, -2907,  8271,  6678, -2907,  1634, -2907,  1625,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907,  1640,  1638, -2907,  1644,\n+   50348, -2907, 20060, -2907, 59953, -2907, -2907, 18542, 50348, -2907,\n+   18542,  1645,  8312, -2907, -2907, -2907,   220,   847, 42158,   346,\n+    4481,  4481,  4481, 42177, -2907, -2907, -2907,  1661, -2907, 22084,\n+   22084, -2907,  6082,  2481,  9453, -2907, -2907,  1980, -2907,   775,\n+   -2907,  1649, -2907, -2907,  3387, -2907, 35698,  6132, 18542,   219,\n+   -2907, 18542,  1469, 18542,  1736,  4481,  4481,  4481,   231,   231,\n+     220,   220,   220,   847,   346, -2907, -2907, -2907,  1653, 18542,\n+   43133, -2907,  1654,  1658,  2008,  1292, 18542, -2907, -2907, 28480,\n+    1460,   -15, -2907,  1650,  1460,  1889,  4482, -2907,   879, -2907,\n+     879, -2907, 41993, 50348, -2907,  1317, 28480,  1701,  2102,  2122,\n+   59953, -2907,  1666,  1812,  1676, -2907, -2907, -2907,  1679, 18542,\n+    4784,  1679, -2907,  1780,     6,  1883,  1124,  1124,  1380,  1888,\n+   -2907, -2907,  1733, -2907, -2907, -2907, 18542, 11983,  1417, -2907,\n+    1419, -2907, -2907, -2907, -2907,  1671, -2907, -2907,  1938, -2907,\n+   50348, -2907, -2907, 22084,  2120, 18542, 32810,  2121,  1925, -2907,\n+   -2907, -2907,  1769,  1333, 18542,  1917, -2907,   172,  1687,  2041,\n+     280,  1993, 59953, -2907,   333,   339, -2907,   184,  2043,   153,\n+    2046,   153, 43133, 43133, 43133,   884, -2907, -2907,   822, -2907,\n+   -2907,   886, -2907,   521, -2907, -2907, -2907,  1782,   618,  1333,\n+    1436, -2907, -2907, -2907, -2907, -2907, -2907, -2907,   285,   724,\n+    1333,  1785, -2907,  1790, -2907,  1793,   739,  1333, -2907, -2907,\n+     146,   146,   146, 12995, -2907,  1929,  1939,  1713, 41993, 41993,\n+   41993,  1717, -2907,   168, -2907, 59953, -2907, -2907, -2907,  1704,\n+    2050,   822,  1753, 50348,  1436,  1715,  2178,   985,  1386, -2907,\n+    1876,   712,   751, -2907, 59953, 50348, 50348, 50348, -2907, -2907,\n+   -2907,  1719,  1718, -2907, 59006,   -45,  1943,  1942, 50348,  1765,\n+   50348,  1332,  2188, 50348, -2907,   902, 16012,  2082, 50348,  1730,\n+   -2907, -2907, -2907, -2907,  1889, -2907, -2907,   -18,   -18, -2907,\n+   59953, -2907, -2907,  1735, -2907,  1737, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, 59953, -2907,\n+   -2907, 43133, -2907, 44095, -2907, -2907, -2907, -2907,   822, -2907,\n+     822,  1968, 59953, 38516,   822, 38997,   822, -2907,  1743, -2907,\n+   41993, 36187, 41993,  1937, -2907,   183,  2076,  4192,  4192,  4192,\n+    2855,  2074,   222,  1745,  4192,  4192,  4192,   275,   275,   183,\n+     183,   183,  2076,   492,   754, 45057,  1751, -2907, 41993, 41993,\n+   -2907, -2907,  1749, -2907, -2907, -2907, -2907,  1754,  1759, -2907,\n+   -2907, -2907, -2907, -2907, 59953,  1130, -2907,  1460,   173,   173,\n+     173,   173, -2907, 50348, 50348, 50348, 41993,  2183,  2066, -2907,\n+   -2907,  1887, 41993, 50348, -2907, 25586, -2907, 50348,  2085, -2907,\n+   -2907, -2907, 50348,  2174,   913, -2907, -2907, -2907, -2907, -2907,\n+   41827, 18542, -2907,  2114, -2907, 18542, 18542, -2907, -2907, 35698,\n+   -2907,  1760,  9453, 41849, -2907,  2061, 36209, -2907, 41993, -2907,\n+    4482, 18542,  2695,  4614, 18542,  1761, 18542,  2092, -2907, -2907,\n+    1763, -2907, -2907, 64267, 18542,  1766,  3630, 22084, 22084,  4226,\n+   -2907,  5421, 18542,  9453, -2907, 37455,  1762,  1771,  1741, 16518,\n+   -2907,  1976,  1770, -2907,  1953,   146,  1613,  1953,  1775, -2907,\n+   -2907, -2907,  1789, -2907, 18542,  1920,   506,  3508, 59953,   918,\n+   -2907, 34253,  1701, 18542,   676,   312, -2907, -2907,  1773, -2907,\n+    1679, -2907, -2907, -2907,  1995, -2907, -2907, -2907, 50348, -2907,\n+    1791, -2907, 31848,  2105,  9453, -2907, 31848, 50348, 50348, 36256,\n+    2132, -2907, 59953, 59953, 59953, -2907, 59953,  1781,  1794,   807,\n+    1797,   717, -2907,  2095,   807,  2112,   265,  1332,   253,  3653,\n+     624, -2907, -2907, -2907,  1862, 50348, -2907, 59953, -2907, -2907,\n+   -2907, -2907, -2907, 43614, -2907, -2907, -2907, 43133, 35216, 43133,\n+   50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348, 50348,\n+    1799,  1804,  1810,  1741, -2907, -2907, -2907, -2907, -2907, -2907,\n+     474, -2907, -2907,   168,   822, -2907,  1803, -2907, 46500,  2145,\n+    1592,  2251,  1753,   660, 59472,  1813,  1795, -2907,   923,  1436,\n+    1806,  2262, -2907,   793, 46500, -2907, -2907, -2907,  2224, -2907,\n+     525,   201, -2907,   985, -2907,  2145,  1386, -2907,  2145, 41993,\n+   59953,  1873, -2907,  1406,  1821, -2907, -2907,  1406, 64267,  1406,\n+   -2907, -2907,   153, -2907,   929, -2907, -2907, -2907, -2907, 59953,\n+    1823, -2907,  1823, -2907, -2907,  1823, -2907, -2907, -2907, -2907,\n+   22084,  2149,  1830, 64267, -2907, -2907, 50348, -2907, -2907, -2907,\n+     936,  1831,  1953, 50348, 50348, 50348, 50348, -2907, -2907, -2907,\n+   17024, 18542,  1870, -2907,  1833, 13501,  2142, -2907, 25101, -2907,\n+     196,  1835, 32329, -2907, 59953, -2907, -2907, 18542, 41993, -2907,\n+   41993, -2907, -2907, -2907,  7582, -2907,  1834,  1838, 59953, 18542,\n+   -2907, -2907,   341, 18542, 18542,  6082, -2907,  7026, 18542, 64267,\n+     943,  6082,   387, 18542,  4855,  4918, 18542, 18542,  5617, 36311,\n+   -2907, 18542, 12489, -2907,  1839, 18542, 36501, 34734, -2907, 28480,\n+    2066,  1840, -2907,  2066,   822, -2907, 41993, 18542, -2907, -2907,\n+   -2907,  1894,   469, 30404,  2064, -2907, -2907,  1858, 59953, -2907,\n+    1920, 41993, -2907, -2907, 35698, -2907, -2907, -2907, -2907, -2907,\n+    2289,  1768,  1848,  1849, -2907,  1330, -2907, -2907, 59953,  1856,\n+   -2907,  1857,   807, -2907, 59953,  1899, -2907,   248,  2164,   102,\n+   -2907, 18542, -2907,  2253,  2324,  2095,  1871, 59953, 50348, 22084,\n+   -2907,   626,   181, -2907,  2152, 50348,  1899,  2288, -2907, -2907,\n+   -2907,   717, -2907,  2189,  2106, -2907,   214, -2907, 18542,   717,\n+    2107,   125, 59953, -2907, -2907,  2761, -2907, 64267,   153,   153,\n+   -2907, -2907,  1874,  1878,  1879,  1881,  1884,  1885,  1891,  1892,\n+    1895,  1896,  1900, -2907,  1903,  1910,  1911,  1921,  1926,  1927,\n+    1932,  1934,  1108,  1935, -2907,  1936,  1773,  1940,  1944,  1946,\n+    1947,  1951, 65199,  1955,  1956,  1957,  1958,  1116,  1959,  1037,\n+    1105, -2907, -2907, -2907, -2907, -2907, -2907,  1140,  1960, -2907,\n+    1907, -2907, -2907,  1966, -2907,  1969, -2907, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907,   146,  1167,    88, -2907, 59953,  1930,\n+    1765,  2350, 17530,   733,  2134,  1919, -2907,   822,  1592, -2907,\n+   46500,  1677,   621,  1942, -2907,   207,  1765, -2907,  2306,  1592,\n+    1965,  2382, -2907,  2173, 59953,  1963, -2907, -2907, -2907, -2907,\n+   44095,  1823,  3228, 22084, 64267,   963,   988, -2907,  2455,  2124,\n+    2066, -2907, -2907, -2907, -2907, -2907,  1967,   -70,  1973,  8947,\n+    1964, -2907, -2907, -2907, -2907, -2907, -2907, 41993, 41993, 59953,\n+    2150, -2907, -2907,  1975,  1979, 33291,  2422,  1981, -2907, 12995,\n+   -2907,  2290, -2907, 26552, -2907, 41993, 18542, -2907, -2907, 37502,\n+    2299,  6082,  6082,  7026,  1002, -2907,  6082, 18542, 18542,  6082,\n+    6082, 18542, -2907,  1988, -2907,  1003, -2907, 36810, -2907, 65665,\n+   -2907, -2907,  1870,   822,  1870, -2907,  1984, -2907, -2907, -2907,\n+    2044, -2907,  1004, -2907,  2404,  1920, 18542, -2907, -2907,  1998,\n+   31848, -2907, -2907, -2907, -2907, 31848,   807, -2907,  2159,  1899,\n+    2002, -2907, -2907, -2907, -2907, -2907, -2907, 36832, -2907,    58,\n+   18542, -2907,   230,  2855, -2907, -2907, -2907, -2907,  1899,   985,\n+   -2907, 50348,  2463,  2356, -2907, -2907, 41993, -2907, -2907,  1889,\n+    1889, -2907, -2907,  2174, -2907, -2907, -2907, -2907,  1140,   460,\n+   35216, 50348, 50348,  2004, -2907, -2907,   474,  2386,  1009,   793,\n+   -2907,  2145,  2145, 41993, 50348,  2359, 46500, -2907,  2468,  2010,\n+   50348,  1765,   959,   959, -2907,  2158, -2907,  2166, -2907, -2907,\n+    2485,   299, -2907, 18036, 50348, -2907, -2907, 29442, -2907,  3228,\n+    1026, -2907, -2907,  2025,  2029, -2907,  1870, 18542,  2030, 18542,\n+   -2907, 20566,  2031, -2907,  2499, 18542,  2098, 24108, -2907, 18542,\n+   -2907, 50348, 55639,   -10,  2042, 55639, -2907, -2907, -2907, 18542,\n+   -2907,  6082,  6082,  6082, -2907, -2907, -2907,  2243, -2907,  2150,\n+   -2907,  2150, 18542,  2145,  2038, 59953,   676,   -17, -2907, 41993,\n+   -2907, -2907, -2907, 50348, -2907, 43133, -2907,   807,    13,  2049,\n+   18542, 36879,  2274, -2907, -2907,  2312, -2907,  2371, -2907,  2116,\n+     472,  2135, -2907, -2907, -2907, -2907,  1167,   822,  1592,  1942,\n+    1965, -2907,  2063, 50348,  2145,   793,   525, -2907, -2907, -2907,\n+   -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907, -2907,\n+    2145,  2493,  2286,  2502,  2145, 41993,  1873, 18542, -2907,  1042,\n+    2500,    82, -2907, -2907,  2570,  2150,  2079, 20566,  2086, -2907,\n+   59953,  2088, 41993,  2230, -2907, -2907,  2089, -2907, -2907,   146,\n+   18542, -2907, 37557,  2533,  1741,  2098,  2098, -2907,   469, -2907,\n+   -2907,  2503, 29442,  2466,   985,   807,  1067, -2907,  2109, -2907,\n+   -2907, -2907, -2907,  1436, -2907, 36934,  2334,   135,  2318,  2049,\n+   18542, -2907,  2175, -2907, -2907, -2907,  2561, -2907, -2907, 46500,\n+    2103,  1965,  1942,  1765,  1965,  2323, -2907,  2325, -2907,  2111,\n+   37124,  1592, 29442, 59953, 59953, 59953,  2113,  2098, -2907,  2117,\n+   -2907, -2907, -2907, 49386, -2907,  2119,  2123, -2907, 18542,   254,\n+   -2907, -2907,  2165, 50348,  1072,    26,  2312, -2907, 43133, 35216,\n+    1742,    13,  2418, -2907, -2907, -2907, -2907,   106,  2339, -2907,\n+    2341, -2907, 41993, -2907,  2145, 46500, -2907, -2907, -2907, -2907,\n+   -2907, -2907, 29442,  2500,  1460, -2907, -2907,   359, -2907,   359,\n+   -2907, -2907, -2907, -2907,   822, -2907,  1422, 21072, 21072,  2131,\n+    2145, -2907,  1460, -2907,  2250,  2318, -2907, -2907, -2907, -2907,\n+   -2907,   476,   476,  2517, -2907,  2197, -2907,  1965,  1085, 59953,\n+   -2907,  1679,  1679, 22590,  2281,   138, 40998, -2907, -2907, -2907,\n+   -2907, -2907, -2907, 34253, -2907, -2907,  2614, -2907,   195, -2907,\n+   -2907, -2907,  1592,   359, -2907, -2907,  2604, -2907, -2907, -2907,\n+   -2907, -2907,  1460,   807, -2907, -2907, -2907,  1460,  1679, 21578,\n+   -2907, -2907, -2907, -2907\n };\n \n /* YYPGOTO[NTERM-NUM].  */\n static const yytype_int16 yypgoto[] =\n {\n-   -2872, -2872, -2872,  1923,    92, -2872, -2872,   104, -2872,   909,\n-   -2872,    89,  -631,   461, -2872,    98,    99, -1094,    17, -2872,\n-   -2872, -2872, -2872,  -342,   174, -2872, -2872,  -619, -1594,  -480,\n-   -2872, -2843, -2871, -2872, -2872,  -686, -2798, -1983,   101, -2872,\n-   -2872,   102, -2872, -2872,     5, -2011,   103, -2462,   107,  -709,\n-   -1140,  -903, -1153, -2872,  -145,   116,  1179, -2872,     6, -2089,\n-   -2770,  -587, -2872,  -687, -2872,  -359, -2872,  -629, -2872,  -906,\n-    -640,  -670, -2657, -1095, -2872,  1501,  -396, -2872,   505, -2872,\n-   -2449, -2872, -2872,   494, -2872, -1116, -2872, -2146,    84,  -612,\n-   -2482, -2455, -2093,  -696,   164,  -617,   149, -2055, -1070, -2872,\n-     521, -2872,  -601, -2872,  -675, -2157,   119, -2872, -2872,  1275,\n-    -779, -2872,  1316,   121,  1352, -2020,    20,   123, -2872, -2872,\n-   -2872, -2872,  -785,   462, -1142, -2872,   394, -2872, -2872, -2872,\n-   -2872,  -206,   135, -2872,    11,  3191,   -35,   -29, -2872,   -16,\n-   -2872, -2872, -2872,   554, -2872, -2872,    30,    56,  1580,  -988,\n-   -2872, -1584,   774, -2872,  1721,  1751, -2128,  -669,   -66, -2872,\n-     590, -1600, -2049,  -549,  1005,  1571,  1569,   345, -2306, -2872,\n-    -557, -2872,    73, -2872, -2872,   586,  1052, -1528, -1520, -2872,\n-   -2107, -2872,  -475,  -369, -2872, -2872, -2872, -2872, -2872, -2374,\n-   -2324,  -541,  1021, -2872,  1581, -2872, -2872, -2872, -2872,   191,\n-   -1477,  2680,   627,   207, -2872, -2872, -2872, -2872,    67, -2872,\n-     770,  -213, -2872,  2092,  -552,  -614,  1780,   -58,   231, -1628,\n-      32,  2112,   389, -2872, -2872,   391, -2025, -1472,   351,  -286,\n-    1361, -2872, -2872,  -448, -1300,  -783, -2872, -2872,   177,  -166,\n-   -2872, -2872, -2872,   -93,   -18, -2872, -2872,   922,  1854, -2872,\n-    -604,  2035,  -558,  -761,  1789,  -864,  1790,  -877,  -859,  -868,\n-    1793,  1800, -1466,  4905,  -648,  1692, -2133, -2872,    22, -2872,\n-   -1398,   129, -2872, -2872, -2872, -2872, -2534, -2872,  -452, -2872,\n-    -450, -2872, -2872, -2872,  -571, -2627, -2872,  2180,   748, -2872,\n-   -2872, -2872, -1473, -2872,  5743,   645, -2872, -1930, -2872, -2872,\n-    -929,  -643, -1044,  -966, -1147, -1301, -2872, -2872, -2872, -2872,\n-   -2872, -2872, -1004, -1735,  -253,   705, -2872, -2872,   786, -2872,\n-   -2872, -2872,  -702, -1695,  -500, -1980, -2872, -2872, -2872,   711,\n-    1269,    53,  -644, -1565, -2872,   681, -2279, -2872, -2872,   323,\n-   -2872,  3329,  -489, -1083, -2330,   751, -1294,   108, -2872,  2944,\n-      49,  2510,  3787, -2428, -2872, -2872,  -556, -2555, -1096, -2872,\n-   -1356, -2872, -2872,   124, -2872,   685,   125, -1622, -2872,     9,\n-   -2872,  -402, -2872, -2872, -2461, -2872,   126,   127,  2162, -2872,\n-   -2872, -2872,  -476, -2872,  -491,  -487, -2872, -2872,    18,  -889,\n-    1355, -2872,   131,   624, -2872,   823, -2872,   633,   132,    87,\n-     134,  1150, -2872, -2872, -2872,    31,  -490,   322, -2872,  1148,\n-   -2872, -2872,  2762, -2872,   138, -2872, -2872,   141, -2872,  2747,\n-    2687,   145,    12, -2868,   147, -2661, -1644,    -7, -2872, -2872,\n-   -2872,  -547, -2872, -2427\n+   -2907, -2907, -2907,  1962,    79, -2907, -2907,   141, -2907,   928,\n+   -2907,   126,  -637,   490, -2907,    90,    93, -1094,     8, -2907,\n+   -2907, -2907, -2907, -2907,  -463,   194, -2907, -2907,  -604, -2448,\n+    -554, -2907, -2876, -2906, -2907, -2907,  -697, -2858, -1981,    97,\n+   -2907, -2907,    98, -2907, -2907,     4, -2019,    99, -2456,   100,\n+    -706, -1143,  -887, -1158, -2907,  -124,   101,  1191, -2907,     7,\n+   -2107, -2761,  -571, -2907,  -673, -2907,  -342, -2907,  -618, -2907,\n+    -831,  -626,  -657, -2667, -1099, -2907,  1526,  -378, -2907,   527,\n+   -2907, -2471, -2907, -2907,   519, -2907, -1109, -2907, -2172,   131,\n+    -592, -2513, -2481, -2093,  -702,   188,  -599,   166, -2083, -1206,\n+   -2907,   544, -2907,  -582, -2907,  -696, -2181,   103, -2907, -2907,\n+    1297,  -787, -2907,  1347,   104,  1382, -2024,    20,    23, -2907,\n+   -2907, -2907, -2907,  -785,   482, -1165, -2907,   417, -2907, -2907,\n+   -2907, -2907,  -188,   160, -2907,   119,   240,   -30,   -33, -2907,\n+     -29, -2907, -2907, -2907,   576, -2907, -2907,    18,    47,  1614,\n+    -982, -2907, -1599,   646, -2907,  1778,  1808, -2118,  -685,   -68,\n+   -2907,   622, -1596, -2057,  -549,  1033,  1594,  1598,   367, -2336,\n+   -2907,  -538, -2907,   -12, -2907, -2907,   610,  1078, -1503, -1502,\n+   -2907, -2115, -2907,  -457,  -346, -2907, -2907, -2907, -2907, -2907,\n+   -2334, -2209,  -527,  1054, -2907,  1621, -2907, -2907, -2907, -2907,\n+      33, -1486,  2719,   657,   130, -2907, -2907, -2907, -2907,   105,\n+   -2907,   814,  -178, -2907,  2137,  -542,  -621,  1816,    48,   221,\n+   -1700,    -9,  2156,   424, -2907, -2907,   426, -2011, -1458,   380,\n+    -256,  1408, -2907, -2907,  -552, -1297,  -780, -2907, -2907,   264,\n+    -529, -2907, -2907, -2907,  1050,  1949, -2907, -2907,  2576,  3012,\n+   -2907,  -623,  3437,   832,  -768,  1832,  -863,  1836,  -868,  -876,\n+    -871,  1843,  1845, -1483,  4859,  1716,  2685, -2150, -2907,   179,\n+   -2907, -1422,   208, -2907, -2907, -2907, -2907, -2224, -2907,  -421,\n+   -2907,  -419, -2907, -2907, -2907,  -545, -2494, -2907,  3872,   779,\n+   -2907, -2907,   382, -2907, -2907, -2907, -2907, -1508, -2907,  5692,\n+     685, -2907, -1951, -2907, -2907,  -931,  -644, -1059,  -963, -1164,\n+   -1303, -2907, -2907, -2907, -2907, -2907, -2907, -1443, -1686,  -232,\n+     744, -2907, -2907,   820, -2907, -2907, -2907,  -692, -1699,  -500,\n+   -2034, -2907, -2907, -2907,   749,  1306,    85,  -649, -1563, -2907,\n+     727, -2289, -2907, -2907,   357, -2907,  3449,  -496, -1081, -2325,\n+     358, -1312,   109, -2907,  1678,   277,  2524,  3748, -2436, -2907,\n+   -2907,  -536, -2550, -1083, -2907, -1356, -2907, -2907,   107, -2907,\n+     719,   110, -1576, -2907,    10, -2907,  -374, -2907, -2907, -2473,\n+   -2907,   111,   112,  2202, -2907, -2907, -2907,  -467, -2907,  -509,\n+    -506, -2907, -2907,    25,  -894,  1396, -2907,   114,   564, -2907,\n+     861, -2907,   700,   115,   113,   117,  1184, -2907, -2907, -2907,\n+      30,  -490,   349, -2907,  1185, -2907, -2907,  2799, -2907,   118,\n+   -2907, -2907,   120, -2907, -2907,  2784,  2721,   121,    11, -2418,\n+     127, -2696, -1637,    -7, -2907, -2907, -2907,  -513, -2907, -2434\n };\n \n /* YYTABLE[YYPACT[STATE-NUM]].  What to do in state STATE-NUM.  If\n    positive, shift that token.  If negative, reduce the rule which\n    number is the opposite.  If zero, do what YYDEFACT says.\n    If YYTABLE_NINF, syntax error.  */\n-#define YYTABLE_NINF -1945\n+#define YYTABLE_NINF -1959\n static const yytype_int16 yytable[] =\n {\n-     503,   721,  1168,   824,   693,    57,    62,   831,  1069,    79,\n-     682,    67,    97,   977,   503,  1731,  1352,    52,  1459,  1305,\n-      65,  1628,  1512,   929,  1415,  1695,  1730,  1308,  1134,   499,\n-      74,    89,  1101,  2058,  1942,  2431,   593,  1741,  1422,  2434,\n-    2091,  1684,  2461,   629,  1358,   697,  1798,   663,    74,  1702,\n-    1397,  1706,  1802,  1975,  1402,  1313,  2201,  2494,   698,  1886,\n-     530,  1435,  2530,  2531,  2532,   503,   503,  1744,  1836,   667,\n-    1437,   959,   636,   636,  1433,   833,   979,  1735,   840,  1436,\n-    1167,  1599,  1173,   923,  1177,  1993,  1994,  2487,  1605,  2851,\n-    2827,  2829,    49,  2849,   629,   629,  2412,  2450,    50,    51,\n-     680,    54,    55,    58,  1821,  2454,   705,    59,  2866,  1539,\n-    2653,   639,  2542,   812,  2863,   500,    60,   930, -1171,    63,\n-    2216,    64,  -477,    66,    77,    78,    80,    81,  2064,   500,\n-    2111,    86,    87,   985,    88,  -814,   514,   713,    93,  2212,\n-    2114,    94,  2719,  1123, -1196,    96,  2724,    98,  -480,  -806,\n-     631,  1126, -1193, -1193,  2330, -1783,  3238,   716,  1338,  1339,\n-   -1196, -1783, -1792, -1923, -1923, -1800, -1792, -1197,  1087,  2558,\n-   -1932, -1932, -1800, -1941, -1941, -1194, -1194,  -814,  -811,  1609,\n-     500,   500,  -811,   517, -1197,  1350,  -773,   999,  -786,  3027,\n-    -801,   517,   517,   517,  1405,  1555,  2381,  1112,  2551,  1360,\n-    1557,   631,   631,  2547,   517,  3045,  3041,  1483,  2005,   999,\n-    1083,  1154,   623,  1863,  2008,  1742, -1918, -1918,  1865,   672,\n-    -477,  2982, -1943, -1943,  1743,  -435,  1687,  3117,  1090,  1360,\n-    1565,  1155,  2639,  1606,  1409,   517,  3315,  2600,  2602,   999,\n-    2605,   824,  2124,  1698,   999,  1360,  -480,  3130,  1409,   735,\n-    2008,  3270,  1715,   999,  1733,  1718,  1719,  3146,   749,     3,\n-       4,  3337,  1567,   623,   623,  3104,  -200,  2565,   519,  1358,\n-    3223,  -200,  3016,   519,  2997,  1156,  2767,  1555,  2207,   694,\n-     695,  1556,  1557,  1305,  2768,  -610,  3042,   690,  1698,  1360,\n-    2339,   690,  1647,  1429,  2359,  2360,  1795,  1451, -1031,  2522,\n-    2341,  3043,  2867,  1707,  2689,  2366, -1031,  3197,  2045,  2370,\n-    3147,  2055,  1565,  3350,  2952,   960,  2046,  2954,  1690,  3148,\n-     736, -1052,  2622,  3357,  2688,  1443,  3240,  2691,  3260, -1052,\n-     520,  2353,  2354,  2355,  3065,   520,  1648,   604,   966,  2029,\n-    2733,  3149,  2769,  1607,  1567,  1631,  1119,  2159,  2141,  2163,\n-     650,  3039,  3159,  2342,  2423,  2993,  1113,  1725,  3282,  1863,\n-    3160,  3285,  2195,  1864,  1865,  2117,  2086,  1157,  2979,  3295,\n-    1555,  1714,  3204,   967,   718,   688,  2611,  3145,   719,    99,\n-     929,  1726,  1863,  3271,  3015,  1305,  1864,  1865,   979,  1484,\n-     107,  1091,  1909,  1092,  1535,   815,  2732,  3035,  1332,   969,\n-     959,  3040,  1338,  1339,  -477,  3036,  2142,   685,  3047,  2490,\n-    1555,  2715,  3150,   737,  1556,  1557,  1158,  1350,  3096,  2991,\n-    3098,  1121,   538,  1909,  1159,  3151,   100,  2487,  -746,  2487,\n-    -480,   824,  2712,  3205,  2873,  1333,  1160,  1567,  2770,  1423,\n-     929,  2980,   603,   780,   689,  1565,  3323,  2087,   651,  1650,\n-     738,   961,  3345,  3343,  1114,  2056,  2650,  -630,  2030,  1084,\n-    3128,  1312,  2868,  3338,  3272,  1608,  3351,  1161,   817,  2374,\n-     635,  -477,   605,  1692,  2031,  1955,  2118,  1567,  1644,  2032,\n-    3222,  2340,  3358,  3105,  1361,   739,  3044,  1705,  1679,  1680,\n-    3322,  2343,  2992,  1683,  3112,  3311,   686,  -480,  2713,  3261,\n-    1708,  1632,  1527,  1745,   523,  2639,   524,  1946,  2125,   523,\n-    1651,   524,  2994,  3122,  1361,  2890,  3063,  2033,  1163,  1956,\n-     690,  2196,   973,  3161,  1610,  2612,   722,  2208,  2276,  3173,\n-    1361,   527,  1085,   669,   740,   682,   527,   929,   929,  1485,\n-    2491,  1164,  3118,   818,  2881,   993,  3339,  3022,  2859,  1746,\n-    2983,   673,  1119,  1975,   826,  1498,  2871,  3316,   750,  -746,\n-    1166,  1830,  2771,   928,  1705,  2772,   999,  3284,  2609,  2111,\n-    3283,  2009,  2136,  3340,  1361,  1604,   718,  3137,  2464,  1734,\n-     719,   515,  2561,  1645,  -477,  1681,   682,  1693,   925,  2827,\n-    2829,  2538,  2539,  1682,  1353,  1336,   824,  2552,  2194,    74,\n-    2436,  2141,  1720,   503,  2999,  1499,  2452,  2414,  2311,  1334,\n-    -480,   718,  3004, -1171,   503,   719,  1354,  2459,  3152,  1630,\n-    1707,  3153,  1623,  -477,  2523,  -477,  1731,  1121,  2698,  1785,\n-    1355,  1135,   629,   815,  2061,   697,  1353,  3109,  2973, -1196,\n-    1362,  2542,  3110,   629,  -806,   503,   503,  3084,   698,  -480,\n-   -1783,  -480,   931, -1031,   636, -1196, -1783, -1792,  1354,  2484,\n-   -1800, -1792, -1197,  2047,   691,  2699,  2034, -1800,   503,   683,\n-    1396,  1705,  1357,  -811,  1122,  3221, -1052,  1093,  1550, -1197,\n-    1588,  1340,  3228,  1344,   986,  -801,  1600,  2065,  2919,    57,\n-      62,  1094,   934,    79,  3227,    67,    97,  1535,  1880,  2264,\n-    3348,    52,  1088,  1523,    65,  1080,   817,   684,  2297,   950,\n-    1222,   503,  1302,  2498,    74,    89,  3020,   675,   500,  1088,\n-    1335,  1413,  1414,  2960,  1725,  2964,  3006,  3007,   687,   500,\n-    1401,  1313,  1102,  2633,  3364,  1413,  1414,   102,  1707,   631,\n-     699,  2775,  1729,  1721,  1799,  1800,  1141,  2312,  1726,  2495,\n-     631,  1722,  1142,  -200,  -200,  1707,  2424,  2313,   824,  1585,\n-    1586,  1587,  1588,   535,  2623,  2624,  2625,  2626,   567,  2849,\n-   -1917, -1917,  3193,  1141,  3194,  3290,    49,  1348,  1349,  1142,\n-     641,   818,    50,    51,  2966,    54,    55,    58,   824,   824,\n-     700,    59,   826,  3025,   679,   679,  2159,  2159,  2159,  2194,\n-      60,  1861,  1862,    63,   824,    64,  1882,    66,    77,    78,\n-      80,    81,   952,  1483,  2171,    86,    87,  1708,    88,  2338,\n-    1895,  2245,    93,   815,  2174,    94,  3036,  2177,   953,    96,\n-     503,    98,   718,  1910, -1171,  2762,   719,  2827,  2829,   831,\n-    1820,  1877,  1878,  1879,  1880,  1305,  2742,  2017,  1826,  3242,\n-    1931,  1376,  1377,  1143,   709,  2303,  2496,  1353,  2338,   987,\n-    1736,   929,  1875,  1876,  1877,  1878,  1879,  1880,  1775,  2736,\n-     988,  1698,  2743,   517,  2018,  1954,  1535,  1739,  3129,  1354,\n-    1143,  1705,  1699,  3359,  1979,  1822,  2331,  3255,  3256,  3115,\n-    1583,  1584,  1585,  1586,  1587,  1588,   817,  2388,   812,  2404,\n-    2062,   103,  1305,  1119,  2518,  1991,  1486,  2763,  1120,   717,\n-     104,  1823,  1493,  1975,  1809,   730,  1828,  2519,  1901,   937,\n-     928,   923,  2347,  3217,   734,  1836,  2405,  1886,   503,   503,\n-    1822,  2659,   742,  2284,   503,  1708,  3297,   503,   503,  2269,\n-     503,   503,   503,   503,   966,   105,  1342,  2286,  2271,  2273,\n-    2274,  2268,  1708,  2583,   503,  2737,  1604,  2270,  2272,  2587,\n-      74,   503,  2589,  3303,  1647,  1380,  1381,  1311,  1351,   745,\n-    1832,   818,  2437,   517,  2438,   999,  1418,   519,  1121,   967,\n-     928,  1222,   826,   629,  2943,  1555,  2019,  1442,   815,  2764,\n-     629,  2020,  3304,   746,   106,  1492,  2021,   824,   503,  1705,\n-     748, -1244,  1394,   682,  2170,   969,  1144,  2291,  1648,  1144,\n-    1641,  2011,  2292,  1353,   747,   503,  1705,  1731,  2252,  2738,\n-    1565,  2739,   751,  3200,  2462,  1122,   503,   503,   503,   999,\n-     503,   503,  1476,  1144,   519,  1354,  1418,  2470,  1707,   520,\n-    2275, -1914, -1914,  2406,  2277,  2459,  2533,  2279,  2407,  1355,\n-    1502,  1407,  1567,  1505,  1408,  2133,  2290,  -554,   503,  3250,\n-    2294,   817,  -554,  2296,  1707,  1146,   752,  2293,  2497,   500,\n-    2498,  1707,  1649,  2190,  2191,  2192,   500,   928,   928,   753,\n-    1370,  1371,  2169,  1353,  2524,   837,  1635,  1636,  1145,  1642,\n-     631,  2220,  1146,  2221,  1549,  1147,   520,   631,  2499,   698,\n-     698,  2180,   698,  1552,   935,  1354,  2187,  1995,  1903,  2668,\n-     503,  2962,  1698,  1904,   503,   503,  2965,   937,    21,  1357,\n-    1601,  1650,  1147,  1701,   503,   503,   503,  1539,   973,   503,\n-     936,  1611,  -554,  1418,  1418,    21,   818, -1915, -1915,   824,\n-    2566,  1088,  2022,   938,  2886,  1485,  2574,   826,  1376,  1377,\n-     815,  2249,   623,  2023,   718, -1916, -1916,  2159,  1603,   623,\n-    2521,  2163,   726,  2830,   727,  1148,   737,  2172,  1479,  2049,\n-    -489,  1762,  2175,  2050,  1222,  1490,   728,   941,   729,  -554,\n-     815,   815,  1651,  1222,  -489,   109,  2525,  1342,   513,  -489,\n-   -1919, -1919,  1148,  2529,  2408,   566,   815,  1519,   944,    45,\n-    1491,  1351,  1732,   738,  1496,  2409,   945,  1222,  1763,  1894,\n-     649,  1896,  1897,   523,   662,   524,  2305,  2306,  2307,  2308,\n-    2309,  2310,  1312,   817,  2314,  2315,  2316,  2317,  2318,  2319,\n-    2320,  2321,  2322,  2323,  3307,  1708,   946,   526,  2554,  -489,\n-     527,  1975,  2235,  3031,  2236,  1141,  2509,  3355,  2511,  2145,\n-     824,  1142,   947,   817,   817,  2336,    25,    26,    27,  -489,\n-     948,  1708,  1380,  1381,  1621,  3324,   949,  1622,  1708,   817,\n-     523,   982,   524,    25,    26,    27,  3346,  3347,  1078,  1079,\n-    2634,  1081,   984,  1945,  2641,   744,  1946,   740,  1947,   929,\n-     950,  1948,  1765,   824,  2348,   989,  2349,   527,   818,  1705,\n-    2350,  2204,  2351,   991,  2205,   824,  -489, -1920, -1920,   826,\n-    3354,  3363,  2885, -1921, -1921,  -489,   836, -1922, -1922,    32,\n-    1769,  1770,   994,  2253,  1772,  1705,  1948,  1773,   818,   818,\n-   -1924, -1924,  1705,   503,  3362,   824,    32,   992,  2259,   826,\n-     826,  2260,   824,   993,   818,  2262,  2773,  2280,  2260,  1082,\n-    2281,  2324,  1143,  1086,  2325,   826,    37,  1097,  2766,  1759,\n-    2261,  2399,  2400, -1925, -1925,  2371,  2934,  2730,  2372,  1103,\n-    2506,  2402,  2508,    37,  2375,  2512,  2516,  2372,  2513,  2517,\n-    2577,  2646,   824,  1946,  2372,   824, -1926, -1926,    39,   815,\n-     824,  1302,  2432,  2707,  2596,  2858,  2708,   929,  2205,    42,\n-    2845,   928,  2765,  2298,  2774,    39,  2879,  2887,  2935,  2880,\n-    2888,  1948,  2729,  1104,  2731,  2304,    42,  1302,  2958,  3058,\n-    1106,  2959,  1948,   503,  1107,  3059,   925,   679,  2372,  3087,\n-      43,  3092,  1948,  3136,  1946,  3170,  2205,    74,  1948, -1927,\n-   -1927,   963,   503,   503,  1109,  2332,   964,   503, -1928, -1928,\n-     503,    45,  2337,  1110,    44,   503,   503,   503,   503,  -489,\n-    1539,  3236,   817,  1116,  3237,  1118,  2746,  1117,    45,  1136,\n-     503,   503, -1929, -1929,  1138,   503,  1850,   503,  1139,   629,\n-     503,  2473,  1140,   820,  1152,   503,  3259,   503,   503,  3237,\n-     503,  1153,  2373,  1170,   503,  2373,  2585,  2586,  3263,   688,\n-    2377,  3264,  1174,   965,   629,  1144,   629,  2749,  1178,   629,\n-    1306,   503,   503,  -555,   629,  1307,   503,   629,  -555,   629,\n-     503,  2550,  1309,   629,  3344,   718,  1951,  3237,  1106,   719,\n-    1310,   815,  1949,  1314,  2058,  1950,  1316,   818, -1930, -1930,\n-    1318,   503,  1328,   503,  2459,    74,  1953,  1330,   826,   503,\n-     503,   503,   503,   503,   503,   503,   503,  1302, -1931, -1931,\n-    1171,   503,   503,  1331,  1146,   500,   503,  1336,   689,  1343,\n-     503,  1340,   966,   503,   503,   503,   503,   503,   503,   503,\n-     503,   503,  1344,  3057,   503,  1346,   631,  1347,  -555,  1359,\n-     500,   503,   500,  1222,  1172,   500,  1302, -1933, -1933,  1364,\n-     500, -1934, -1934,   500,   817,   500,  1365,   967,  1367,   500,\n-    1395,   631,  2974,   631,  2093,  2821,   631,   503, -1935, -1935,\n-    1398,   631,  2773,   968,   631,  1400,   631,   698, -1936, -1936,\n-     631, -1937, -1937,   969,  1403,  -555, -1938, -1938,  1406,   503,\n-    1094,  1404,   815,  1427,   690, -1940, -1940, -1942, -1942,  1424,\n-     503,   503, -1944, -1944,  1748,  1749,  3168,  1430,   519,  2066,\n-    1457,  3120,  2112,  2113,  1148,   970,  2753,  -605,  -605,  1378,\n-    1379,  1141,  1470,   623,  1472,   623,   824,  1142,   623,   818,\n-    1380,  1381, -1244,   623,  1475,   815,   623,  1480,   623,  1922,\n-     826,  1923,   623,  3325,  1925,  3326,  1302,   815,  1302,  1929,\n-    -609,  -609,  1932,  3021,  1933,  -608,  -608,  3168,  1937,   971,\n-    2970,  2971,  1487,  2754,  2945,   817,   972,  1615,  1617,  1488,\n-     520,   820,  2592,  1494,  1495,  1141,  1501,   815,  1506,  2755,\n-    1507,  1142,  1516,  1515,   815,  1518,   929,  -777,  1222,  -784,\n-    1523,   503,   503,    45,   503,  3360,  -630,  -631,  -774,  -775,\n-    1526,  -778,  2062,  1527,  -776,  1531,   973,  3203,   817,  1540,\n-     735,  1541,  1548,  1596,  1594,  1598,  2672,  2673,  1613,  1624,\n-     817,  1625,   839,   974,   815,  1629,  1633,   815,  1143,  1120,\n-    1222,  1634,   815,  1122,  1669,  1671,  2145,   503,   691,  1673,\n-     818,  1685,  2459,  1703,  2239,  1704,  1705,  1710,  1712,  1716,\n-     817,   826,  1711,  1724,  1723,  1728,  1738,   817,  1752,   998,\n-    1756,  1758,  1863,  2878,  1768,  1302,  1864,  1865,  1751,  1767,\n-    1866,  1867,  1868,  1777,  1780,  1781,    21,  2756,  1783,   928,\n-    2723,   736,  1143,   818,  1793,  1784,  2757,  1786,  1787,  3168,\n-    1794,   975,   517,   999,   826,   818,   522,   817,   503,   503,\n-     817,   503,   824,  1801,   679,   817,   826,   503,   503,   503,\n-     503,   503,   503,  3002,  2844,   503,   503,   503,   503,   503,\n-     503,   503,   503,   503,   503,   818,  1811,  2869,  2853,  1803,\n-     503,   503,   818,  3134,   503,  1418,   826,  1812,  1804,  2289,\n-    3168,   503,   998,   826,   523,  1863,   524,  1815,  1816,  1864,\n-    1865,  1891,  1822, -1945, -1945, -1945,  1817,  1154,  3203,  1855,\n-    1818,   820,   525,   503,  1827,  1920,  1852,   503,   526,   503,\n-    1854,   527,   818,   503,  1762,   818,  1857,  1155,  1860,  1902,\n-     818,  1144,  1141,   826,  1141,  1883,   826,   928,  1142,  1222,\n-    1142,   826,  1924,   518,  1892,  1899,   629,  1930,  1934,   503,\n-    1935,  1936,   629,  3080,  1941,  1956,  1944,  1555,  1989,  1982,\n-     824,  1763,  2882,  1985,    25,    26,    27,  1987,  1990,  2007,\n-    1539,  1156,  2014,  1988,  2025,   503,  2026,  2053,  2052,   682,\n-     503,  2028,  2059,   503,  2073,  1144,  1175,   689,  2074,  2075,\n-    1146,  2596,  3219,  1418,  1869,  3185,  1764,  2092,  2101,  3011,\n-    3012,  2076,   503,   503,  2089,  2102,  2127,   503,  2103,  2104,\n-     519,  2105,  2128,  2106,  2123,  2131,  2134,  1870,  2138,  2139,\n-    1176,   503,  2202,  2211,   503,  2140,   503,    32,  2206,  1352,\n-     824,  2213,   500,  2222, -1244,   690,  2224,  2225,   500,  1143,\n-    2132,  1143,   503,  1302,  1146,  1765,  2226,  2240,  2241,   503,\n-    2243,  2246,   503,   631,  2247,   824,  2248,  2255,  2254,   631,\n-    2278,  -489,  2256,  1157,    37,  2250,  2287,  2251,   815,   503,\n-    2824,  2295,   520,  2257,  1147,  -489,   820,  2258,  1888,  2266,\n-    -489,   629,   503,  2267,  1863,  1871,  1951,  2326,  2924,  2447,\n-    1148,  1887,  1949,  2333,  2334,  1950,    39,  2335,   629,   503,\n-     503,  2990,  2344,  2345,  2357,    74,  1953,    42,  2346,   824,\n-    2363,  2365,  1158,  1731,  2821,   623,   503,  2403,   503,  2398,\n-    1159,   623,  2378,  2379,   521,  2419,  2385,   503,  2386,  2387,\n-    -489,  2361,  1160,  2427,  2396,  2410,  2441,  2364,  2420,  2448,\n-    2877,   817,  2425,  2426,  1148,  1302,  1302,  1302,  2451,  2453,\n-    -489,  -611,  1824,  2455,  1825,  2465,  2466,  2468,  2469,    45,\n-    2472,  2476,  2477,  1161,  2480,  2482,  2483,   500,  1871,  2478,\n-    2486,  2505,  2507,  2520,  2534,  2526,  2527,  2528,  2548,  2535,\n-    2536,  2537,  2544,  2549,   500,  2553,  1222,   682,   631,  2563,\n-    2564,  2988,  1144,  2567,  1144,  2571,  2568,  -489,   522,  2575,\n-    2580,  2582,  2590,  2591,  2599,   631,  -489,  2515,  2610,  2607,\n-    2613,  2616,  2630,  2617,  1163,  2618,   818,  1769,  1770,   824,\n-    2619,  1772,  2631,  2642,  1773,  2644,  2649,   826,  2651,  2657,\n-    2664,  2666,  2670,  2685,  2679,  3056,  2667,  1164,   820,   503,\n-    2695,  2680,  2687,  2697,   815,  2704,   523,  2178,   524,  2185,\n-     623,  1146,  2541,  1146,   824,  2692,  1166,  2693,  2062,  2716,\n-    2545,  2720,  2714,  2728,   525,  2718,  2735,   623,   820,   820,\n-     526,  2557,  2734,   527,  1302,  2761,   928,  2741,  2777,  2852,\n-    2841,  2179,  2842,  2186,   820,  2861,  2843,  2856,  1872,  1873,\n-    1874,  2848,  1875,  1876,  1877,  1878,  1879,  1880,  2857,  2860,\n-    3123,  2865,  2874,  2883,  2876,  2909,  2884,  2205,  2889,  2911,\n-    2915,  2920,  2927,  2926,  2946,  2961,  2957,   817,   503,  2953,\n-    2967,  2963,  2968,  1960,  3302,  2969,   824,  2975,  2976,  3010,\n-    1961,  1962,  1418,   929,  1963,  1964,  1965,  2597,  2977,  2598,\n-    2981,  2985,  2986,  2603,  2995,  2606,  2987,   629,  2998,  3000,\n-    -489,  1148,   815,  1148,   682,  3001,  3005, -1193,   503,  2682,\n-   -1913, -1914,  2821, -1915, -1916, -1917, -1918, -1919,  3312,  3017,\n-    3018, -1945, -1945, -1945,   503,  1875,  1876,  1877,  1878,  1879,\n-    1880, -1920,   503, -1921, -1922,   682,  3019, -1924, -1925, -1926,\n-   -1927,   503,   818,  3026,   503, -1928,   503, -1929, -1930,  3028,\n-    3032,  3033,  3046,   826,   503, -1931,  3048,   503,   503, -1933,\n-     682,  3187,   503,   503, -1934,   821,   718, -1935, -1936,   503,\n-     719,  3174,   815,  3176, -1937,   817, -1938, -1939, -1940, -1941,\n-    3050,  3051,  3184,   500,   503, -1942, -1943, -1944,  1154,  2722,\n-    2137, -1194,  3054,  3060,  3068,  3061,   503,   815,  3064,  3074,\n-    2146,  3066,  2149,  3072,   631,  2160,  3075,  3079,  1155,   824,\n-    3078,  2164,  3081,  2166,  3086,  3186,  3091,   503,  3189,  3099,\n-    3108,  3113,  3111,  2640,  2238,  2173,  3125,   820,  3126,  3133,\n-    2176,  3135,  3141,  3142,  2181,  2182,  2183,  2184,  3143,  2188,\n-    2189,  3156,  3157,  3158,    21,   817,  3171,  3172,  3175,  3266,\n-     818,   815,  1156,  3262,  3178,  1431,  1302,   517,  3179,  3181,\n-    1302,  2828,  1302,  3188,  3191,  3196,  3198,   501,   510,  3208,\n-     817,  2994,   536,  3254,  3212,  3214,  3230,   536,  3215,  3224,\n-    3232,   633,  3218,   637,   637,  3231,  3241,  3238,   640,   536,\n-     645,  3243,  3248,   645,  3251,  3245,   665,   668,  2949,  3253,\n-     668,  3249,  3265,   536,   536,  3257,  3268,  1769,  1770,  3273,\n-    2850,  1772,  3280,  3296,  1773,  3279,  3281,  2826,  3286,  2824,\n-     818,  3287,  3288,   963,   817,  3298,  3300,  3301,   964,  3308,\n-    3314,   826,   633,   633,  3315,  3317,  2870,  2443,  3319,  2872,\n-    3334,  3316,  2541,  2847,  1157,   818,   823,  3349,  3356,  2458,\n-     682,  3361,  2780,   503,  2776,   665,   826,  1108,  2503,  1368,\n-    1369,   815,   668,   536,   668,   668,   668,  3103,  3291,   820,\n-    2165,  3195,  3335,   503,   503,  2709,  3008,  3277,   503,  3342,\n-    3121,   503,    25,    26,    27,   965,  3320,  1452,  3313,  3336,\n-     503,    21,  1694,  1158,  3155,  2485,   815,  2510,  2864,   818,\n-     503,  1159,  3310,   821,   503,   503,  2745,  3318,  2481,   503,\n-     826,  3309,  1797,  1160,   503,  1766,  2781,   503,   503,   721,\n-    1819,  2543,   503,  1222,  3055,  2593,   503,  2471,  2846,  2457,\n-     503,  1477,  3292,  1626,   817,  1370,  1371,  2130,   503,  1601,\n-    2621,  3299,  2467,  1665,  1161,    32,  1666,  3037,  2098,  3177,\n-    3244,   624,  2129,  2440,   966,  2918,  2368,   824,  1670,   629,\n-    3083,  1478,  1130,   954,  2615,  2614,   963,    21,   815,   817,\n-    1444,   964,   940,  2643,  3127,  1810,  3246,  1432,  1434,  3247,\n-     820,  1438,    37,  3333,   503,  2460,  2394,  2417,  1439,   967,\n-    2415,  2955,   503,  2382,  2433,  1163,  2640,  1911,  2956,  1372,\n-    1373,  1374,  1375,  1376,  1377,   968,  2690,  1378,  1379,   818,\n-    2439,   503,  3234,  1829,    39,   969,   933,  2376,  1164,  2444,\n-     826,  2071,  2069,   820,  2710,    42,   539,   648,   965,    25,\n-      26,    27,   706,     0,     0,   820,     0,  1166,     0,    43,\n-       0,   817,     0,     0,   818,   500,     0,   970,     0,     0,\n-       0,     0,  1966,  1967,  1968,  2828,  1969,  1970,  1971,  1972,\n-    1973,  1974,     0,    44,  1662,   820,   631,  2824,  1131,     0,\n-       0,     0,   820,  1452,  1824,     0,     0,    45,     0,     0,\n-       0,     0,     0,     0,   823,     0,     0,     0,     0,     0,\n-       0,   971,    32,   821,     0,   503,     0,   966,   972,     0,\n-       0,   815,     0,     0,     0,    25,    26,    27,     0,     0,\n-       0,     0,   820,     0,   682,   820,   818,  1380,  1381,     0,\n-     820,     0,  3038,   928,     0,     0,   503,   826,   623,    37,\n-       0,     0,   967,     0,     0,     0,     0,     0,   973,     0,\n-       0,     0,   503,     0,  1479,     0,     0,     0,   968,     0,\n-       0,     0,     0,     0,     0,   974,  3034,     0,   969,     0,\n-       0,    39,  1222,     0,     0,     0,     0,     0,    32,   503,\n-       0,     0,    42,     0,   817,     0,     0,     0,     0,  1418,\n-     503,   503,     0,     0,   503,     0,    43,     0,     0,   998,\n-     970,     0,  1863, -1678,     0,     0,  1864,  1865,     0,     0,\n-    1866,  1867,  1868,     0,     0,    37,   503,     0,     0,     0,\n-      44,  1926,     0,     0,     0,     0,     0,     0,  3100,  3102,\n-       0,     0,     0,   975,  2445,     0,     0,     0,  1132,     0,\n-     503,     0,  1382,  1383,   971,     0,     0,    39,     0,  2570,\n-       0,   972,     0,     0,     0,     0,     0,     0,    42,   818,\n-       0,     0,  3097,     0,     0,     0,   998,     0,   821,  1863,\n-    2828,     0,    43,  1864,  1865,     0,     0,  1866,  1867,  1868,\n-       0,     0,     0,     0,   823,     0,   668,     0,   668,     0,\n-       0,   973,   668,     0,  2661,   668,    44,     0,     0,  3138,\n-    3139, -1678,     0,   503,   536,     0,     0,   503,   974,     0,\n-      45,     0,     0,     0,     0,     0,     0,   503,     0,   503,\n-       0,   503,     0,     0,     0,   503,  2826,   503,     0,   503,\n-       0,     0,     0,   830,   536,   536,   629,     0,     0,   503,\n-       0,     0,     0,     0,     0,     0, -1678,     0,     0,     0,\n-       0,     0,   503,     0,     0,     0,     0,     0,   503,   815,\n-   -1678,     0,     0,     0,     0, -1678,  1302,     0,     0,     0,\n-   -1678,   503,  1837,   932,   510,   637,   975,     0,     0, -1678,\n-     501,  1927,   668, -1678,  2126,  1453,     0,   629,     0,     0,\n-       0,   633,   958,   958,     0,     0,     0,   958,   981,     0,\n-       0,  1452,  1452,     0,     0,     0,  1452,  1870,     0,     0,\n-       0,     0,     0,  3226,     0, -1678,   820,  1838,   503,     0,\n-       0,     0,   500,     0,   645,   645,     0,   645,   503,  3229,\n-     821,     0,   817,  3233,     0, -1678,  1839,     0,     0,     0,\n-     668,   503,     0,   631,  3220,     0,   536,     0,     0,   823,\n-       0,    68,     0,     0,  1840,     0,     0,   668,  1841,     0,\n-     821,   821,     0,     0,     0,     0,     0,     0,   503,    68,\n-       0,   668,   622,   500,  1870,  1871,   821,     0,     0,     0,\n-    1842,     0, -1678,  1843,     0, -1678,     0,    68,  2725,  2726,\n-     503, -1678,     0,     0,   631,     0,   681,     0,  1844,     0,\n-       0,     0,     0,     0,   668,     0,   503,   818,   668,   668,\n-     668,   668,     0,     0,     0,     0,  2778,  1302,  2828,   629,\n-       0,     0,     0,   622,   622,   696,     0,     0,  3306, -1678,\n-       0,  2831,  2832,  2833,  2834,  2835,  2836,  2837,  2838,  2839,\n-    2840,   503,  1871,     0,     0,     0,    68,     0,     0,     0,\n-       0,  3321, -1678,     0,     0,     0,   503,   503,     0,     0,\n+     503,   721,   693,  1070,    57,  1171,   977,    62,    52,   812,\n+      79,    97,  1135,  1735,   503,   682,  1462,  1745,    74,  1355,\n+      65,  1311,  1985,    66,  1632,  1515,  1734,   831,   667,  1308,\n+      89,  1102,   815,  1425,  1316,  1699,    74,  1361,  1890,  2068,\n+    1418,   697,  1400,   593,  2471,   698,  1405,  1802,  2101,  2504,\n+    1710,  1946,  1706,  1748,   623,  1688,  2211,   929,  1806,  2444,\n+     840,  2464,  1439,  2447,   923,   503,   503,  1440,   833,  2497,\n+    1438,  1840,  2003,  2004,  1170,  1436,  1176,  2859,  1180,    49,\n+    1739,   959,  2540,  2541,  2542,  2425,   979,  2861,  1603,  1825,\n+      50,   680,  2837,    51,  2839,  1609,   713,    54,    55,    58,\n+      59,    60,  2873,    63,    64,   623,   623,    77,  1543,  2460,\n+      78,    80,    81,  2665,    86,    87,   500,    88,    93,    67,\n+      94,    96,  2552,  2074,  2876,   999,   930,    98,  -809,  -817,\n+     500,  2226,   514,   985,   999, -1932, -1932,   639,  -817,  1341,\n+    1342, -1806,  -814,  1124, -1207, -1182,  -814,  -480, -1207, -1946,\n+   -1946,  2568, -1204, -1204,   517,   663,  -483,  2729,   999,  2121,\n+    3253,  2734,  2124, -1806,  3040,  1127,  1353, -1797,  1088, -1814,\n+   -1797,  1363, -1806,   517, -1814, -1937, -1937, -1955, -1955, -1208,\n+    3058,   500,   500, -1957, -1957, -1208,   499, -1205, -1205,  2222,\n+    -776,  -789,  -804,  1408,  1867,   517,  1613,  1113,   517,  1869,\n+     629,   517,   694,   695,  2561,  2557,  3054,  2340,  -438,   672,\n+    2505,  1645,  2015,  1084,   705,  2391,  1363,  2995,  1412,  2610,\n+    2612,  1746,  2615,   999,  3331,  2649,  2369,  2370,  1091,   631,\n+    1747,  1559,  1610,  1412,   517,  2575,  1561,  2376,   999,   735,\n+      68,  2380,  1559,  3129,  1691,  -480,  1560,  1561,  1711,  1486,\n+     685,   629,   629,  3010,  -483,   749,  2018,  -203,    68,     3,\n+       4,   622,  -203,  1361,  2018,  3211,  1569,  1363,  1363,  3142,\n+     815,  1719,  2978,   690,  1722,  1723,    68,  1569,   690,  1335,\n+     631,   631,  1711,  1711,  1799,   681,  1867,  3029,   530,  -613,\n+    1868,  1869,  1432,  1308,  3323,  2065,  3006,  1651,  1571,  3368,\n+     636,   636,  2756,  3284,  2134,  3255,  2877,  3078,  3375,  1571,\n+     736,   960,   622,   622,   696,  1651,  1336,  2506,  1446,    21,\n+    2363,  2364,  2365,  2127,  2743,  3055, -1042,  2701,  2351,  2700,\n+    2217,  2349,  2703,  2205, -1042,    68,  1694, -1931, -1931,   686,\n+    3056,  1652,  1611,  2759,  1635,   650,  2632,  1702,  2055,  3309,\n+    2621,  2169,  1559,  2173,  3274,  3157,  2056,  1559,  1737,  1652,\n+    2436,  1560,  1561,  3171,  2992,  1702,  2962,   688,  1648,  2964,\n+     535,  3172,  1724,  2500,  1120,   567,  2532,  1718,  2772,  -749,\n+     966,  2352,  1501,  1341,  1342,   716,  3028,   641,  2742,  3049,\n+    1114,  1092,  1569,  1093,  1539,  3048,  1308,  1913,   979,  1353,\n+    2096,   679,   679,   737,  1733,  1740,  3060,   604,  3219,  2497,\n+     959,  2497,   107,  2725,   929,   967,  1144, -1063,  2883,  1571,\n+    2313,  1426,  1145,  1653,  1571, -1063,   538,  3339,  1913,  -480,\n+    -633,  1487,  1502,  3363,  2128,  3285,   689,  2993,  -483,  2066,\n+     738,   969,   780,   651,  3338,  1712,  1356,   961,  2662,  1122,\n+    2773,  2341,  3369,  3007,  1654,  1709,  1364,    25,    26,    27,\n+     815,   709,  1085,  1960,  1612,  3324,  2878,  3376,  1357,  3220,\n+    1147,  2722,  1654,  1649,   929,   739,  3124,   603,  3140,  1712,\n+    1712,  2097,  3237,  3212,  1683,  1684,   937,  2384,  1115,  1749,\n+    1337,  1696,  2206,  1687,  1950,  3134,  -480,  3132,  2649,  2622,\n+    1636,  1364,  2763,  1867,  2501,  -483,  1531,  1868,  1869,  1709,\n+    -749,  2151,   690,  1725,  2286,  1655,  3286,  2900,  3327,  2353,\n+      32,  1726,  2350,  1146,   740,  3057,  2891,  3118,  1985,  2507,\n+    3035,  2508,  2774,  1655,  3173,  1086,  1750,  2723,  1961,  3355,\n+     682,   673,   605,  1709,  1709,  3332,  2996,  3298,   993,  2764,\n+    2869,  1486,  1364,  1364,   826,   750,   987,    37,  3130,  2509,\n+    2548,  2549,  2881,   928,   973,  2765,  3076,   988,  3149,  2152,\n+    2135,   687,   929,   929,  1339,  3297,  1608,   515,   669,  2218,\n+     718,  1488,  3317,  2146,   719,  2204,  1685,    74,  1356,    39,\n+    3012,   682,  2469,  2449,  2837,   925,  2839,  1356,  3017,  2571,\n+      42,  1338,   635,   503,  2121,  1697,  2474,  2462,  1686,  -480,\n+    1357,  3318,  1365,  2019,   503,  2274,  3019,  3020,  -483,  1357,\n+    1634,  2427,  1526,  -809,  1358,  1735,  1789,  2619,   815,  1136,\n+    2986,   697,  1627,  1360,   722,   698, -1806,  -814,   718, -1207,\n+   -1182,  2071,   719, -1207,  1528,   503,   503,  3097,  -480,  1554,\n+    -480,  2552,    45,  2562,   952,  3121,   691,  -483, -1806,  -483,\n+    3122,  1089, -1797,  2766, -1814, -1797,  1528, -1806,   503, -1814,\n+     950,  2643,  2767,   683, -1208,  3236,  1147,  1094,  1089,  1884,\n+   -1208, -1042,   966,  1738,  3242,  1343,  1347,  -804,    57,  2307,\n+    1604,    62,    52,  2075,    79,    97,  2929,  1711,  1095,  1539,\n+    3243,  2533,    74,  2057,    65,  1416,  1417,    66,  1399,  1404,\n+    1225,   503,  1305,  1316,    89,  1729,  1592,   967,   934,   500,\n+    1416,  1417,  2151,  1103,  1589,  1590,  1591,  1592,  1803,  1804,\n+     500,  1148,  3238,  1495,   675,  1149,  3033,  2977,  3109,  1730,\n+    3111,  3356,  3004,   969,  -203,  -203,  1144,  2321,  2437,   684,\n+    2752,   953,  1145,  1379,  1380,    68,   517,  1120,  2859,  2633,\n+    2634,  2635,  2636,    49,  2709,  1150,  3052,  1779,  1881,  1882,\n+    1883,  1884, -1063,  2979,    50,  3038,  2753,    51,  3304,   700,\n+    2494,    54,    55,    58,    59,    60,  2204,    63,    64,   629,\n+     815,    77,   826,   699,    78,    80,    81,   812,    86,    87,\n+     629,    88,    93,    67,    94,    96,  2169,  2169,  2169,    68,\n+     681,    98,   519,  1813,  3049,  3005,  3053,  2710,   631,  1743,\n+     815,   815,  1899,  3296,  3357,  2348,  3299,   517,  2255,   631,\n+     503,  1914,  1122,   519,  2181,  1151,   815,  1587,  1588,  1589,\n+    1590,  1591,  1592,  2837,  2184,  2839,   730,  2187,  1935,  3366,\n+     939,  3358,  3185,  1146,  1702,  2301,   717,  1711,  1559,  1308,\n+    2302,   951,   831,  1824,  2348,  1703,   973,  1383,  1384,  3270,\n+    3271,  1830,   734,  2968,   520,  1356,   517,  1959,  1539,  1123,\n+     931,   742,   636,  1488,  3127,  3383,  2322,  1989,  1702,  3377,\n+    1314,  1985,   744,  1569,  1712,   520,  2323,  1357,   929,  1705,\n+    3205,  1832,  3206,  2417,   696,   923,   746,  1827,  2001,  2401,\n+    2969,  1358,   986,  1890,  2072,  2303,  1308,    99,    21,  3361,\n+     928,  3311,  2746,   836,    68,  1571,   745,  2671,   503,   503,\n+    2418,  1905,  2357,  1081,   503,  1840,  1729,   503,   503,  3116,\n+     503,   503,   503,   503,  2280,  2282,  2296,  1479,    74,  2281,\n+    2283,  2284,  2279,  2294,   503,  3141,  2278,   519,  1709,  1608,\n+    1730,   503,  1826,  1711,   100,  1505,  2593,  3232,  1508,  1356,\n+     748,  2508,  2597,  2039,  1826,  2599,  3257,   518,  1711,  2531,\n+     928,  1225,   826,  1879,  1880,  1881,  1882,  1883,  1884,  3158,\n+    1144,  1357,  2953,   747,   623,  2450,  1145,  2451,   503,  2785,\n+    1315,   623,   726,   751,   727,  1360,  1147,  2005,  2747,   682,\n+    2528,  2180,  1489,   752,  2262,  1144,   503,  3215,  1496,   520,\n+    2469,  1145,  1735,  2529,   728,   837,   729,   503,   503,   503,\n+     815,   503,   503,  1345,   679,  2021,  2285,   935,   102,  2543,\n+    2287,  1834,  3159,  2289,   519,   737,   999,  2419,   523,  2480,\n+     524,  3160,  2420,  2143,  1712,  1354,    25,    26,    27,   503,\n+    2300,  2200,  2201,  2202,  2304,  1149,  1766,  2306, -1256,   523,\n+     500,   524,  2748,  3161,  2749,   527,  2231,   500,   928,   928,\n+    2179,  3265,   738,  1639,  1640,  2535,  1646,   698,   698,  1397,\n+     698,  1482,  2040,  -492,  2534,  1150,   527,  1146,  1493,  2190,\n+    2539,  1089,  1410,  1767,  2197,  1411,   520,  -492,  2041,  1836,\n+    2027,   503,  -492,  2042,   999,   503,   503,  2564,  1709,    32,\n+    2680,  1625,  1146,  1144,  1626,   503,   503,   503,  2472,  1145,\n+     503,  1120,   753,   999,  1907,  1543,  1121,  2028,  3044,  1908,\n+     629,  1522,   936,    45,  3162,  1315,  2576,   629,  -557,  2155,\n+     826,  2043,  2584,  -557,  2259,   937,    37,  3163,   521,   718,\n+    1712, -1182,  -492,   719,  1736,  1151,   740,  2169,  2896,   631,\n+      68,  2173,   815,  2840,   718,  1712,   631,  1225,   719,   938,\n+     718,  2059,  -492,  1144,  1607,  2060,  1225,  1769,    39,  1145,\n+    1494,  2182,   941,   523,  1499,   524,  2185,   109,  2421,    42,\n+     513,   622,   103,   519,  1421,   944,  1122,   566,   622,  2422,\n+    1225,   104,   946,    43,  1949,  1445,  1985,  1950,  1079,  1080,\n+     527,  1082,   649,  -557,  1709,   945,   662, -1256,   947,  -492,\n+    1146,    21,   522,  1898,   948,  1900,  1901,    44,  -492,  1709,\n+     982,  1523,  1951,  1351,  1352,  1952,   105,  3373,   949,  2029,\n+    1147,    45,  1527,  1123,  2030,  2245,   950,  2246,  2346,  2031,\n+    2271, -1928, -1928,  2214,  1421,   520,  2215,  2358,  2263,  2359,\n+    -557,  1952,  1373,  1374,  1345,  1147, -1929, -1929,  2269,  1541,\n+     523,  2270,   524,   815,  3364,  3365,  2739,   984,  2741,  1354,\n+    1146,  1144,  2644,  3340,   991,   106,  2651,  1145,   525,  2272,\n+    2044,   989,  2270,  2308,   526,  1174,  2360,   527,  2361,  1149,\n+    2290,  3352,   826,  2291,   992,  2314,  2334,   839,   993,  2335,\n+    2895,  3382,  1773,  1553,  1098,  1774,   815,   929,  1776,  1777,\n+    1178,  2519,  1556,  2521,  1149,  1117,   503,  1119,   815,  1175,\n+    1379,  1380,   826,   826,  2381,  2342,  1083,  2382,   994,  1605,\n+    3164,  2783,  2347,  3165, -1930, -1930,   696,   696,   826,   696,\n+    1615,  3380,  1421,  1421,  1179,  2776,  3381,  1087,   815,    25,\n+      26,    27,  2516,  1104,  2518,   815,  2944,  1107,  2385,  1105,\n+    2415,  2382,  -492,  1147,  2740,  2522,  2445,  2526,  2523,  1108,\n+    2527,   522,  2383,   824,  1305,  2383, -1933, -1933,  1146,  2606,\n+    2387, -1934, -1934,  2587,   928,  2032,  1950,  2855,  2775,  1151,\n+    2784,   735,  1110,    10,  2656,   815,  2033,  2382,   815,  2717,\n+    1305,  1111,  2718,   815,  2868,  1118,   503,  2215,    74,  1139,\n+    2889,  1137,    32,  2890,  1151,   929,   925,  2897,  2142,   523,\n+    2898,   524,  1149,  1147,  2945,   503,   503,  1952,   718,  1141,\n+     503,  1107,   719,   503,  1383,  1384,  1142,   525,   503,   503,\n+     503,   503,   679,   526,  3071,  1181,   527,  1952,  1143,    37,\n+    1155,  1543,  1150,   503,   503,  1156,  1157,  1173,   503,  1177,\n+     503,  1309,   736,   503,    21,  1310,  2483,  1312,   503,  3072,\n+     503,   503,  2382,   503, -1935, -1935,  1158,   503,  2188,  2595,\n+    2596,    39,  1149,  3100,  3105,  3114,  1952,  1950,  3115,  1313,\n+    3148,  1317,    42,  2215,   503,   503, -1936, -1936,   623,   503,\n+     623,   503,  2469,   623,   503,  2560,  1953,  3182,   623,  1319,\n+    1952,   623,  2189,   623, -1938, -1938,    74,   623,  1954,  1331,\n+    1159,  1955,  1151,  3251,  1321,   503,  3252,   503,  1958,  2068,\n+    1333,  1147,   826,   503,   503,   503,   503,   503,   503,   503,\n+     503,  1305, -1939, -1939,    45,   503,   503,  1334,  3277,   500,\n+     503,  3278,  1339,  3322,   503,  1766,  3252,   503,   503,   503,\n+     503,   503,   503,   503,   503,   503,  3362,  1343,   503,  3252,\n+    1763,  3070, -1940, -1940,   500,   503,   500,  1225,  1346,   500,\n+    1305,  1349,  1151,  1347,   500,  1368,  2195,   500,  1350,   500,\n+    1149,   817,  1767,   500,  2103,  1926,  1362,  1927,   698,  1367,\n+    1929,   503,    25,    26,    27,  1933,  1370,  2783,  1936,  2987,\n+    1937,   824,  1160,  1398,  1941, -1941, -1941,  1956,  2248,   629,\n+    2196,  2831,  1401,   503,  1403,  3180,  1406,  1768, -1942, -1942,\n+      68,  1095, -1943, -1943,   503,   503, -1944, -1944,    21, -1945,\n+   -1945, -1947, -1947,  1407,   629,  1409,   629,  1427,   631,   629,\n+   -1948, -1948, -1949, -1949,   629, -1950, -1950,   629,  1430,   629,\n+    1433,  1161,  1460,   629,  1473,    32, -1951, -1951,  1475,  1162,\n+    3034,  1483,  2155,   631,   826,   631,  1769,   519,   631,  1478,\n+    1305,  1163,  1305,   631, -1952, -1952,   631,  1854,   631,  1490,\n+    1151,  3341,   631,  3342,  1491,   815, -1954, -1954, -1956, -1956,\n+    1498, -1256,    37, -1958, -1958,   622,  1497,   622,  1504,  2955,\n+     622,  1509,  1164,  1752,  1753,   622,  2122,  2123,   622,  1510,\n+     622,    38,  1225,  1519,   622,   503,   503,  1518,   503,  -608,\n+    -608,  1521,  2602,  -780,    39,  1381,  1382,  -787,    68,   520,\n+    1383,  1384,  1828,  -777,  1829,    42,  1526,  3378,    45,  3218,\n+    -633,  2469,  2072,  -612,  -612,  -611,  -611,  2983,  2984,    43,\n+     929,  -778,  1157,  1166,  1225,  1619,  1621,  -634,  1530,  -781,\n+    3180,   503,  1531,  -779,  1535,  1544,    25,    26,    27,  1545,\n+    1552,  1598,  1158,    44,  1600,   826,  1167,  1602,  1617,  1628,\n+    1629,  2230,  1633,  1637,  2025,  2888,  1638,    45,  1121,  1305,\n+    1123,   824,  1673,  1675,  3050,  1169,  1677,  1689,  1707,  1708,\n+    3180,  1714,  1709,   928,  1716,  2733,  1720,  1715,  1727,  1732,\n+    1728,  1760,  1742,  1756,    21,  1755,  1159,  1762,   826,   817,\n+    1771,  1772,   503,   503,  1781,   503,  1784,  1785,  2854,    32,\n+     826,   503,   503,   503,   503,   503,   503,  2863,  1787,   503,\n+     503,   503,   503,   503,   503,   503,   503,   503,   503,  1788,\n+    3180,  2879,  1790,  1797,   503,   503,  1791,   696,   503,  3015,\n+     826,  2076,  1798,  3146,   815,   503,    37,   826,   999,   688,\n+    1805,  1807,  1808,  1815,  1816,  1826,  2249,  1906,  1819,  1820,\n+    1821,  -492,  1831,  -558,  1859,  1614,  1856,   503,  -558,  1924,\n+    1822,   503,  3218,   503,   963,  -492,  1895,   503,    39,   964,\n+    -492,  1858,  1861,   523,  1864,   524,  1887,   826,  1160,    42,\n+     826,   928,  1928,  1225,  1896,   826,  1903,  1934,  1938,  1939,\n+    1948,  1940,  1559,    43,   503,  1945,  1992,   526,  1995,  2000,\n+     527,   623,  1997,  1961,  2017,  1998,  3093,   623,   689,  2024,\n+    2035,  1999,  2036,  2038,  2062,  2063,  2834,    44,  1543,  2069,\n+    -492,  3234,    25,    26,    27,   503,   965,  1161,  -558,   824,\n+     503,    45,   689,   503,   682,  1162,  2606,  2086,  2084,   815,\n+    -492,  3024,  3025,  2083,  2102,  2111,  2085,  1163,  2112,  2113,\n+    3197,  2099,   503,   503,  2116,  2114,  2115,   503,  2233,  2133,\n+    2137,  2138,  2148,  2141,  2149,  2144,  2150,    68,  2212,   690,\n+    2216,   503,  2221,  2232,   503,  -558,   503,   500,  1164,   817,\n+    2223,  2235,  1355,   500,   690,    32,  2887,  -492,  2234,  2236,\n+    2250,  2147,   503,  1305,  2251,   966,  -492,  2253,  2371,   503,\n+    2256,  2156,   503,  2159,  2374,  2258,  2170,  2257,  2260,   815,\n+    2261,  2264,  2174,  2265,  2176,  2267,  2266,  2268,  2276,   503,\n+    2297,  2277,    37,  2305,  2288,  1892,  2183,  1867,  2336,  1166,\n+     967,  2186,   503,  1953,   815,  2191,  2192,  2193,  2194,  1891,\n+    2198,  2199,   623,    74,  2343,  1954,   968,   629,  1955,   503,\n+     503,  2344,  1167,   629,    39,  1958,   969,  1421,  2934,   623,\n+    2345,  2299,  1735,  2354,  2355,    42,   503,  2356,   503,  2367,\n+    2373,  1169,  2375,  2388,  2397,  2389,   631,   503,  2396,    43,\n+    2399,  2398,   631,  2831,  2411,  2400,  2409,  2416,   970,  2423,\n+     815,   824,  2432,  2433,  2438,  1305,  1305,  1305,  2439,  2440,\n+    2454,  2456,  2458,    44,  2465,  2463,  -614,  2756,   622,  1930,\n+    2461,  2475,  2476,  2757,   622,  2478,  2479,    45,   500,  2482,\n+    2486,   824,   824,  2487,  2490,  2488,  2758,  2492,   691,  2493,\n+    2496,  2515,   971,  1841,  2517,   500,  1225,   824,  2530,   972,\n+    -492,  2536,   682,  2544,  1956,    21,  2537,   817,  2759,  2538,\n+    2760,  1371,  1372,  2545,  2546,  2558,  2547,  2554,  2559,  2563,\n+    2573,  3001,  2574,  2577,  2578,  1421,  1773,  2581,  2585,  1774,\n+    2590,  2592,  1776,  1777,  2600,  3023,  2601,   826,  1842,   973,\n+    2609,  2620,  2640,  3328,  2617,  2623,  2641,  2652,   629,   503,\n+    2627,  2626,  2654,  2659,  2669,  2628,   974,  1843,   815,  2678,\n+    2629,  2663,  2676,  2679,  1541,   629,   718,  2682,  2697,  2707,\n+     719,  2692,  2691,  2724,  2699,  1844,  2704,   631,  2726,  1845,\n+    2738,  2730,  2025,  2771,  1305,  2744,   928,  1373,  1374,  2787,\n+    2705,  2862,  2728,   815,   631,  2745,  2761,  2751,  2434,  2867,\n+    2851,  1846,  2871,  2858,  1847,  2852,  2870,  3135,  2875,   622,\n+     998,  2853,    21,  1867,  2866,  2884,  2893,  1868,  1869,  1848,\n+    2886,  1870,  1871,  1872,   975,    68,   622,  2215,   503,  1931,\n+    2894,  2919,  2899,  3208,  2921,  2925,  2930,  3316,  2936,  2937,\n+    2956,  2963,  2967,    25,    26,    27,  2974,  2976,  2980,  2981,\n+    2982,  1375,  1376,  1377,  1378,  1379,  1380,  2988,  2989,  1381,\n+    1382,  2990,  2762,  2994,  2999,   815,  2998,  2763,   503,   817,\n+    2694,  3000,   682,  3008,  3011,  3013, -1204,   929,  3014,  3018,\n+   -1927, -1928,  3031, -1929,   503,  3032, -1930, -1931,   503,   503,\n+    3041,   824,  2831, -1932, -1933,   503,  3030, -1934, -1935,   817,\n+     817,  3045, -1936,   682,   503, -1938,    32,   503,  3199,   503,\n+    1849,  3059, -1939, -1940,  2764,   817,   826,   503,  1850,  3046,\n+     503,   503,  3063, -1941,  2072,   503,   503,  3061, -1942, -1943,\n+    2765,  3039,   503,  3186, -1944,  3188, -1945, -1947, -1948,  1851,\n+    3196,  1828, -1949,    37,   500,  2525, -1950,   503, -1951, -1952,\n+      25,    26,    27, -1953,  2732,  3064,   503, -1954, -1955, -1956,\n+   -1957, -1958, -1205,  3067,  3073,  1852,  3074,  3077,  3081,  1383,\n+    1384,  3198,   681,  3079,  3201,    39,  3085,   503,  2834,  3087,\n+    3088,  3091,  3092,  3094,  2650,  3099,    42,  3104,  3112,  1558,\n+    2551,  3113,  1559,  3117,  3123,  1873,  1560,  1561,  2555,  3120,\n+      43,   815,  3125,  3137,  3138,  3145,  3147,  3153,  3154,  2567,\n+     818,  3155,  3276,    32,   629,  3168,  1305,  3280,  1874,  3269,\n+    1305,  2838,  1305,  3169,    44,  3170,  3183,  1569,  2766,  3184,\n+    3187,   501,   510,   824, -1959,  3190,   536,  2767,    45,  3191,\n+    3193,   536,  3200,   631,  3203,   633,  3007,   637,   637,  3223,\n+      37,  3266,   640,   536,   645,  3227,  3229,   645,  3230,  1571,\n+     665,   668,  3233,  3239,   668,  3245,  1773,   536,   536,  1774,\n+    1421,  3246,  1776,  1777,  3247,  2607,  2715,  2608,  3253,  3256,\n+    3258,  2613,    39,  2616,  1385,  1386,  1875,  3260,  2959,  3263,\n+    3264,   826,  3268,    42,  3273,  3275,   633,   633,  3279,  3282,\n+    3287,  3294,  3293,  3295,  1387,  1420,  2580,    43,  3300,   817,\n+    3301,  3302,  3320,   503,  3310,   682,   826,  3330,  3312,   665,\n+    3314,  3333,  2414,  3335,  3315,  3353,   668,   536,   668,   668,\n+     668,    44,  3350,   503,   503,  3331,  3332,  3367,   503,  3374,\n+    3379,   503,  1541,  2175,   824,    45,  1109,  2513,  3305,  2790,\n+     503,  2786,  3210, -1959,  3272,  2719,  3372,  3021,  3291,  3360,\n+    3133,  1454,   503,  3329,  3336,  1420,   503,   503,  3354, -1959,\n+    1698,   503,   826,  1541, -1959,  3167,   503,  2495,  2860,   503,\n+     503,   721,  2520,   682,   503,  1225,  3326,   824,   503,  3334,\n+    2755,  2491,   503,  2791,  3325,  1823,  1801,    68,  1770,   824,\n+     503,  2553,  3068,   998,  2880,  2874,  1867,  2882,  2603,  2481,\n+    1868,  1869, -1959,  2856,  1870,  1871,  1872,  3306,  1630,  2140,\n+    1670,  2467,  2631,  1669,  2731,  3313,  2477,  2834,  2108,   824,\n+    3259,  2673,   623,  1555,   998,  3189,   824,  1867,  1480,  2139,\n+     624,  1868,  1869,  2453,   503,  1870,  1871,  1872,   818,  1674,\n+     815,   817,   503,  2928,  2378,  3096,  1447,  2650,   954,  2625,\n+    2624,  1420,  2653,  1420,  1420,  1580,   940,  3139,  1481,  3261,\n+    1435,   503,  3262,  3349,  1437,  1814,   824,  2407,  2661,   824,\n+     826,  1441,  2392,  1442,   824,  2470,  2430,  1915,  2428,  1876,\n+    1877,  1878,  2966,  1879,  1880,  1881,  1882,  1883,  1884,    68,\n+    2446,  1157,  3249,  2702,  2452,  2836,   933,  1833,   500,  2386,\n+    2079,  2720,  2081,   539,   648,  2838,   706,     0,     0,     0,\n+       0,  1158,     0,     0,     0,    68,     0,     0,    68,  1482,\n+    2551,  2857,     0,     0,     0,     0,  1420,     0,     0,  1420,\n+    1420,     0,     0,     0,     0,  2735,  2736,     0,     0,     0,\n+       0,     0,     0,     0,     0,   503,     0,     0,     0,     0,\n+       0, -1959,   817,   998,     0,  1159,  1867,     0,     0,     0,\n+    1868,  1869,     0,  2788,  1870,  1871,  1872,     0,   629,   682,\n+       0,     0,     0,   928,     0,  1541,   503,   826,  2841,  2842,\n+    2843,  2844,  2845,  2846,  2847,  2848,  2849,  2850,     0,     0,\n+       0,     0,   503,     0,     0,   817,     0,   631,     0,     0,\n+       0,  1874,     0,     0,     0,     0,     0,   817,     0,  2136,\n+       0,     0,  1225,     0,     0,     0,     0,  1605,     0,   503,\n+       0,     0,  2779,     0,     0,     0,     0,     0,   818,   622,\n+     503,   503,  1874,     0,   503,     0,     0,   817,     0,     0,\n+       0,     0,     0,   681,   817,     0,     0,  1160,     0,     0,\n+       0,     0,     0,     0,     0, -1959,     0,     0,     0,   503,\n+       0,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,  1875,\n+       0,  2965,     0,     0,     0,     0,     0,     0,     0,     0,\n+    3051,     0,     0,   503,   817,     0,     0,   817,     0,     0,\n+       0,     0,   817,     0,     0,     0,  1161,     0,     0,     0,\n+    1875,     0,     0,     0,  1162,     0,     0,     0,     0,     0,\n+       0,     0,     0,  2838,     0,  1800,  1163,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1809,     0,  1810,     0,\n+     668,     0,   668,     0,     0,     0,   668,     0,  1817,   668,\n+       0,     0,     0,     0,     0,     0,   503,  1164,   536,     0,\n+     503,     0,     0,     0,     0,  1818,     0,     0,     0,     0,\n+     503,  1874,   503,     0,   503,     0,   824,     0,   503,     0,\n+     503,     0,   503,     0,     0,     0,     0,   830,   536,   536,\n+       0,     0,   503,     0,  1835,  1837,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   503,   818,     0,  1166,     0,\n+       0,    68,     0,     0,     0,     0,  3002,     0,  1305,     0,\n+       0,     0,     0,   503,     0,     0,     0,   932,   510,   637,\n+       0,  1167,     0,     0,   501,     0,   668,   820,     0,  1875,\n+       0,     0,     0,     0,  3047,   633,   958,   958,     0,  1541,\n+    1169,   958,   981,     0,     0,     0,     0,     0,     0,     0,\n+    3150,  3151,     0,     0,     0,     0,     0,  1421,  1865,  1866,\n+     503,     0,     0,  1886,     0,     0,   500,     0,   645,   645,\n+     503,   645,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,\n+    1883,  1884,     0,   503,   668,     0,     0,     0,     0,     0,\n+     536,  1434,     0,   517,     0,   503,     0,     0,     0,     0,\n+       0,   668,     0,  1876,  1877,  1878,     0,  1879,  1880,  1881,\n+    1882,  1883,  1884,   503,     0,   668,     0,     0,     0,     0,\n+       0,     0,  3207,  3209,     0,     0,   998,     0,     0,  1867,\n+    3110,     0,     0,  1868,  1869,   503,   629,  1870,  1871,  1872,\n+       0,     0,     0,     0,     0,   824,     0,     0,   668,     0,\n+       0,   503,   668,   668,   668,   668,     0,     0,   818,     0,\n+       0,  1305,  2838,  3241,     0,   631,     0,     0,     0,     0,\n+       0,    68,    68,     0,     0,     0,     0,     0,     0,  3244,\n+       0,     0,     0,  3248,   817,   503,     0,     0,   818,   818,\n+       0,     0,     0,     0,     0,  1371,  1372,  2836,     0,     0,\n+     503,   503,     0,     0,   818,     0,     0,     0,     0,     0,\n+       0,   500,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   503,     0,     0,  2120,\n+    2120,     0,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,\n+    1883,  1884,     0,    68,    68,     0,     0,     0,     0,     0,\n+     824,   500,     0,     0,     0,     0,     0,     0,     0,  3136,\n+       0,     0,   503,     0,     0,   820,     0,     0,     0,     0,\n+       0,  1373,  1374,     0,     0,     0,     0,     0,     0,  3143,\n+    3144,   629,     0,     0,    68,  1558,     0,     0,  1559,  1420,\n+       0,     0,  1560,  1561,     0,     0,     0,     0,  3156,  1420,\n+      68,   500,  1420,  3337,    68,     0,     0,     0,     0,     0,\n+     631,     0,     0,     0,  3235,     0,     0,     0,     0,     0,\n+     824,   629,     0,  1569,     0,     0,     0,     0,     0,  3351,\n+   -1959,     0,     0,     0, -1959,  1375,  1376,  1377,  1378,  1379,\n+    1380,     0,     0,  1381,  1382,   824,     0,     0,     0,     0,\n+     631,     0,     0,   958,   981,  1571,   668,     0,     0,  1459,\n+       0,     0,     0,   817,     0,   958,   958,     0,     0,   536,\n+       0,   629,     0,     0,     0,   633,     0,     0,     0,   671,\n+       0,     0,   633,  2273,  2275,     0,     0,     0,     0,     0,\n+       0,     0,   536,     0,   963,     0,     0,     0,   818,   964,\n+     631,   824,  1875,     0,     0,     0,     0,  1520,  1420,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  2424,     0,\n+       0,     0,     0,     0,    68,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     629,  1453,     0,     0,  2826,     0,     0,     0,     0,     0,\n-     503,     0,     0,     0,     0,     0,     0,     0,     0,  1845,\n-       0,     0,   820,     0,     0,     0,     0,  1846,  2100,     0,\n-       0,     0,     0,     0,     0,   500,     0,     0,   669,  3097,\n-       0,   823,     0,     0,   503,     0,     0,     0,  1847,     0,\n-       0,     0,     0,     0,     0,     0,   631,     0,     0,   671,\n-       0,     0,     0,     0,     0, -1678,     0,     0,    21,     0,\n-     998,   823,   823,  1863,  1848, -1678,     0,  1864,  1865,     0,\n-       0,  1866,  1867,  1868,     0,     0,   500,   823,     0,     0,\n-       0,     0, -1678,     0, -1678, -1678,     0,     0,  2662,   821,\n-       0,     0,     0,     0,     0,     0,     0,   631,  1872,  1873,\n-    1874,     0,  1875,  1876,  1877,  1878,  1879,  1880,     0,     0,\n-       0,   708,     0,   711,     0,   715,     0,     0,    21,     0,\n-     820, -1678,     0,     0, -1678, -1678, -1678,     0,     0,   958,\n-     981,     0,   668,     0,     0,  1456,     0,     0,     0,     0,\n-       0,   958,   958,     0,     0,   536,     0,     0,     0,  1554,\n-       0,   633,  1555,     0,     0,     0,  1556,  1557,   633,     0,\n-    1560,  1561,  1562,     0,     0,  1872,  1873,  1874,   536,  1875,\n-    1876,  1877,  1878,  1879,  1880,     0,     0,  1563,     0,  2989,\n-       0,     0,     0,  1517,     0,     0,     0,  1565,     0,     0,\n-     820,     0,     0,     0,  1566,     0,    25,    26,    27,     0,\n-       0,     0,     0,     0,     0,     0,  1368,  1369,     0,     0,\n-       0,     0,     0,     0,     0,   820,     0,     0,     0,  1567,\n+       0,   708,     0,   711,     0,   715,  2836,     0,     0, -1959,\n+      68,     0,     0,  1383,  1384,   820,   965,   536,     0,     0,\n+       0,     0,     0,   821,     0, -1959,     0,     0,   817,     0,\n+   -1959,     0,     0,     0,  2315,  2316,  2317,  2318,  2319,  2320,\n+       0,  3110,  2324,  2325,  2326,  2327,  2328,  2329,  2330,  2331,\n+    2332,  2333,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1622,     0,  1624,     0,     0,     0,     0, -1959,   824,\n+       0,  2711,     0,     0,     0,     0,  1420,     0,   536,   536,\n+    1455,  3321,     0,     0,   668,   966,     0,     0,  1558,     0,\n+       0,  1559,     0,  1131,     0,  1560,  1561,     0,   817,     0,\n+     818,     0,     0,     0,   824,     0,  1459,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   668,  1701,     0,\n+     967,  1580,     0,   817,     0,    21,  1569,     0,  1385,  1386,\n+     668,     0,     0, -1959,     0,     0,   968,     0,     0,     0,\n+       0,     0,     0,  1157,     0,     0,   969,   668,     0,     0,\n+       0,   668,     0,     0,     0,  1744,     0,     0,  1571,     0,\n+       0,     0,     0,  1158,     0,  1876,  1877,  1878,     0,  1879,\n+    1880,  1881,  1882,  1883,  1884,     0,   824,     0,   970,   817,\n+       0,     0,     0,   820,     0,  2412,  2413,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1132,\n+       0,     0,     0,  2448,     0,     0,     0,  1159,  2777,     0,\n+     537,   818,     0,     0,     0,   537,  2778, -1959,   963,     0,\n+       0,  2683,   971,   964,     0,     0,     0,   537,     0,   972,\n+       0,     0,     0,     0,  2473,  2473,     0,     0,     0,     0,\n+       0,   537,   537,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0, -1959,  2712,   818,     0,     0,     0,  1666,     0,\n+       0,   821,     0,    25,    26,    27,   818,  1455, -1959,   973,\n+       0,     0,     0, -1959,  2779,     0,     0,     0,     0,     0,\n+     965,     0,     0,     0,  1759,     0,   974,   817,   668,   668,\n+       0,     0,     0,     0,     0,   668,   818,     0,     0,  1160,\n+       0,   537,     0,   818,     0,     0,  1795,     0,     0,     0,\n+       0, -1959,   824,     0,     0,     0,     0,     0,     0,     0,\n+       0, -1959,   817,     0,     0,     0,    32,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592, -1692,     0,  1812,     0,     0,     0,\n+       0,  1812,     0,   818,     0,   820,   818,     0,  1161,   966,\n+       0,   818,     0,     0,   975,     0,  1162,     0,     0,  1133,\n+       0,     0,     0,    37,  1580,     0,     0,     0,  1163,     0,\n+    2780,     0,   830,   830,     0,   820,   820,   536,   536,     0,\n+     536,   830,     0,     0,   967,     0,     0,     0,     0,     0,\n+       0,   820,  2594,     0,   817,    39,     0,     0,     0,  1164,\n+     968,     0,     0,     0,     0,     0,    42,     0,     0,     0,\n+     969,     0,     0,     0,     0,   723,     0,   725,     0,     0,\n+      43,   732,     0,     0,   733,     0,  1459,  1459,     0,     0,\n+       0,  1459, -1692,     0,   501,     0,     0,     0,     0,     0,\n+       0,     0,   970,     0,    44,     0,     0,   958,   823,  1912,\n+    1166,   821,   536,     0,     0,     0,     0,   668,  2713,   633,\n+   -1959,   633,     0,  1134,   633,     0,     0,     0,     0,   633,\n+       0,     0,   633,  1167,   633,     0,     0, -1692,   633,     0,\n+     536,     0,     0,   536,     0,     0,   971,     0,     0,     0,\n+       0, -1692,  1169,   972,  2781,     0, -1692,  2782,     0,     0,\n+       0, -1692,     0,     0,  1987,     0,     0,     0,     0,  1991,\n+   -1692,   943,     0,     0, -1692,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   821,   536,     0,     0,     0,  1452,  1452,  1452,  1452,\n-    1452,  1452,     0,     0,  1452,  1452,  1452,  1452,  1452,  1452,\n-    1452,  1452,  1452,  1452,     0,     0,    25,    26,    27,    32,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1870,   820,\n-     823,     0,     0,     0,     0,     0,  1618,     0,  1620,     0,\n-       0,     0,  1370,  1371,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   536,   536,     0,    37,     0,     0,   668,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1453,\n-    1453,     0,     0,  1568,  1453,    38,     0,     0,  2746,    32,\n-       0,  1456,     0,     0,  2747,     0,     0,     0,    39,  1569,\n-     668,  1697,     0,     0,  1570,     0,  1871,  2748,     0,    42,\n-       0,     0,   821,   668,     0,     0,  1372,  1373,  1374,  1375,\n-    1376,  1377,     0,    43,  1378,  1379,    37,  1571,  1572,  2749,\n-     668,  2750,     0,     0,   668,     0,     0,     0,  1740,     0,\n-       0,     0,  1573,     0,     0,     0,     0,    44,     0,   820,\n-       0,  1452,  1452,     0,     0,   821,    68,     0,    39,     0,\n-       0,    45,     0,     0,     0,     0,     0,   821,     0,    42,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1574,     0,\n-       0,  1575,   823,    43,   820,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1576,     0,   821,  1577,  3124,\n-       0,     0,     0,     0,   821,     0,     0,    44,     0,     0,\n-      68,   681,     0,     0,     0,     0,     0,  2751,     0,  3131,\n-    3132,    45,     0,     0,     0,     0,  2057,     0,     0,     0,\n-       0,  1368,  1369,     0,  1380,  1381,     0,     0,  3144,     0,\n-       0,     0,     0,     0,   821,     0,     0,   821,     0,   537,\n-       0,   939,   821,     0,   537,     0,   820,     0,     0,     0,\n-       0,     0,   951,     0,     0,  1452,   537,  1755,     0,     0,\n-       0,   668,   668,     0,     0,     0,  1453,     0,   668,     0,\n-     537,   537,     0,  2752,     0,     0,     0,     0,  2753,  1791,\n-       0,  1578,     0,   823,     0,   723,     0,   725,     0,     0,\n-       0,   732,     0,     0,   733,   696,     0,  1370,  1371,  1872,\n-    1873,  1874,     0,  1875,  1876,  1877,  1878,  1879,  1880,  1808,\n-       0,  1417,     0,     0,  1808,    68,     0,     0,     0,     0,\n-       0,   998,     0,     0,  1863,  2754,   823,     0,  1864,  1865,\n-     537,     0,  1866,  1867,  1868,     0,     0,     0,   823,  1382,\n-    1383,  2755,     0,     0,     0,   830,   830,     0,     0,  2937,\n-     536,   536,     0,   536,   830,     0,     0,     0,     0,  1384,\n-       0,  1372,  1373,  1374,  1375,  1376,  1377,     0,   823,  1378,\n-    1379,  1417,     0,     0,     0,   823,     0,     0,     0,   820,\n-       0,   943,     0,     0,     0,  1579,     0,  3258,  1580,  1581,\n-    1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,     0,  1456,\n-    1456,     0,     0,     0,  1456,     0,     0,   501,     0,     0,\n-       0,     0,     0,     0,     0,   823,     0,     0,   823,     0,\n-     958,     0,  1908,   823,     0,   536,     0,     0,     0,     0,\n-     668,     0,   633,     0,   633,     0,     0,   633,  1551,  2756,\n-       0,     0,   633,     0,     0,   633,     0,   633,  2757,     0,\n-       0,   633,     0,   536,     0,     0,   536,     0,     0,     0,\n-       0,     0,     0,    21,     0,     0,  1417,     0,  1417,  1417,\n-    1137,     0,     0,     0,     0,     0,  1977,     0,     0,  1380,\n-    1381,  1981,     0,     0,  1453,  1453,  1453,  1453,  1453,  1453,\n-       0,     0,  1453,  1453,  1453,  1453,  1453,  1453,  1453,  1453,\n-    1453,  1453,     0,  1317,     0,     0,     0,  1320,  1322,  1325,\n-    1327,  1554,     0,     0,  1555,     0,     0,   830,  1556,  1557,\n-       0,     0,  1560,  1561,  1562,     0,     0,     0,   821,  1870,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1417,\n-       0,     0,  1417,  1417,     0,     0,  1452,  1452,     0,  1565,\n-       0,     0,     0,     0,     0,     0,  1566,     0,     0,     0,\n-       0,    68,     0,     0,     0,     0,     0,     0,     0,  2067,\n-       0,   668,  1554,   668,     0,  1555,     0,     0,     0,  1556,\n-    1557,  1567,     0,   668,  2085,     0,     0,     0,     0,     0,\n-       0,  3101,   622,     0,  1382,  1383,  1456,  1871,     0,   622,\n-       0,    25,    26,    27,     0,     0,     0,     0,     0,     0,\n-    1565,     0,     0,     0,     0,     0,     0, -1945,     0,     0,\n-       0,   668,     0,   536,     0,     0,     0,   820,  1154,  1453,\n-    1453,     0,  1520,     0,     0,     0,     0,     0,  1697,   536,\n-       0,     0,  1567,  1524,     0,     0,     0,     0,  1155,   536,\n-    2147,   536,  2151,     0,   536,     0,     0,     0,     0,     0,\n-     536,     0,   536,     0,    32,     0,     0,     0,     0,  1537,\n-       0,     0,     0,   830,   536,  1568,     0,     0,   830,   536,\n-       0,     0,     0,   536,   536,   536,   536,     0,   536,   536,\n-       0,  1569,  1156,     0,     0,     0,  1570,     0,     0,     0,\n-       0,    37,     0,     0,   821,  2401,     0,   963,   668,   823,\n-       0,  1446,   964,   668,   668,   668,   668,   668,     0,  1571,\n-    1572,     0,     0,     0,     0,     0,     0,     0,  1796,     0,\n-       0,  2234,     0,    39,  1573,     0, -1945,     0,     0,  1805,\n-       0,  1806,  1452,  1453,    42,     0,   696,   696,     0,   696,\n-       0,  1813, -1945,     0,     0,     0,     0, -1945,    43,  2769,\n-       0,   537,     0,     0,     0,     0,     0,  2912,  1814,   965,\n-    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n-       0,     0,    44,     0,  1157,     0,     0,  1576,     0,  2930,\n-       0,   537,   537,     0,     0, -1945,    45,  1831,  1833,     0,\n-    1872,  1873,  1874,     0,  1875,  1876,  1877,  1878,  1879,  1880,\n-       0,     0,   821,     0,  1456,  1456,  1456,  1456,  1456,  1456,\n-       0,     0,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,\n-    1456,  1456,     0,  1158,     0,     0,     0,     0,   966,     0,\n-       0,  1159,     0,     0,     0,     0,     0,     0,  1576,     0,\n-       0,     0,   536,  1160,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   668,     0,     0,     0,     0,     0,\n-       0,     0,     0,   967,   633,     0,     0,     0,     0,     0,\n-     633,  1452,   821,  1578,  1161,   823,   536,     0,     0,   968,\n-       0,   536,     0,     0,     0,     0,     0,     0,     0,   969,\n-       0,     0,     0,   537,     0,     0,     0,   821,     0,  1686,\n+     817,     0,     0,   973,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   830, -1692,     0,     0,     0,\n+     974,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   824,     0,     0, -1959,     0, -1692,     0,     0,     0,\n+       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,\n+       0,     0,     0,     0,     0,   820,     0,  1455,  1455,     0,\n+       0, -1694,  1455,  2684,  2685,     0,     0,  2077,     0,   668,\n+    1138,   668,     0,  1709,     0,     0,     0,     0,     0,     0,\n+       0,   668,  2095, -1692,     0,     0, -1692,     0,   975,   821,\n+       0,     0, -1692,     0,  1459,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1320,     0,     0,     0,  1323,  1325,  1328,\n+    1330,     0,     0,   818,     0,     0,     0,   963,     0,   668,\n+     998,   536,   964,  1867,     0,     0,  1420,  1868,  1869,     0,\n+   -1692, -1959, -1959, -1959,     0,     0,  1701,   536,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   536,  2157,   536,\n+    2161,     0,   536, -1692,  1558,     0,   823,  1559,   536, -1694,\n+     536,  1560,  1561,     0,     0,     0,     0,     0,     0,     0,\n+       0,   830,   536,     0,     0,     0,   830,   536,     0,   965,\n+       0,   536,   536,   536,   536,     0,   536,   536,     0,     0,\n+       0,     0,  1569,     0,     0,     0,     0,   820,     0, -1959,\n+       0,     0,   537,     0, -1694,     0,   668,     0,     0,   669,\n+       0,   668,   668,   668,   668,   668,     0,     0, -1694,     0,\n+       0,     0,     0, -1694,  1571,     0,     0,     0, -1694,  2244,\n+       0,     0,   537,   537,     0,     0, -1692, -1694,     0,     0,\n+       0, -1694,     0,     0,     0,     0, -1692,     0,   966,   817,\n+       0,   821,     0,     0,     0,  2110,  2892,     0,     0,     0,\n+       0,     0,     0, -1692,     0, -1692, -1692,     0,     0,     0,\n+       0,     0,     0, -1694,     0,     0,     0,     0,     0,     0,\n+       0,   821,   821,   967,     0,     0,     0,  2686,     0,     0,\n+       0,     0,   818, -1694,     0,     0,     0,   821,     0,   968,\n+       0,     0, -1692,     0,     0, -1692, -1692, -1692,   820,   969,\n+       0,  1449,  1459,  1459,  1459,  1459,  1459,  1459, -1959,     0,\n+    1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,  1459,\n+       0,     0,     0,     0, -1959,     0,     0,     0,     0, -1959,\n+   -1694,   970,     0, -1694,   537,     0,   823,     0,     0, -1694,\n+     536,   820,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   668,   820,     0,     0,     0,     0,     0,     0,\n+       0,     0,   633,     0,  1420,     0,     0, -1959,   633,  1420,\n+       0,     0,     0,     0,   536,   971,     0, -1694,     0,   536,\n+       0,     0,   972,   820,     0,  3003,  1875,   818,     0,     0,\n+     820,     0,     0,     0,     0,     0,     0,     0,     0,  1558,\n+   -1694,     0,  1559,     0,     0,     0,  1560,  1561,     0,     0,\n+   -1959, -1959, -1959,     0,     0,     0,     0,  1835,  1837,     0,\n+    1580,     0,   973,     0,   536,     0,     0,     0,  2405,     0,\n+     820,     0,   536,   820,     0,     0,     0,  1569,   820,   974,\n+       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1459,  1459,     0,   669,   818,     0,     0,\n+       0,     0,     0,  1455,  1455,  1455,  1455,  1455,  1455,  1571,\n+    1987,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,  1455,\n+    1455,   821,   818, -1694,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1694,     0,     0,     0,     0,     0,  1371,\n+    1372,     0,  1690,   633,   823,     0,     0,   975,     0,     0,\n+   -1694,     0, -1694, -1694,     0,  1717, -1959,   536,     0,  3069,\n+     633,     0,     0,     0,  2095,     0,     0,     0,     0,     0,\n+       0,     0,   998,     0,     0,  1867,  1741,     0,   818,  1868,\n+    1869,     0,     0,  1870,  1871,  1872,     0,     0,     0, -1694,\n+       0,     0, -1694, -1694, -1694,     0,     0,     0,     0,     0,\n+    2674,     0,     0,  1572,   536,     0,     0,  1459,     0,     0,\n+     536,     0,     0,     0,     0,  1373,  1374,     0,     0,  1573,\n+       0,     0,     0,     0,  1574,     0,  1759,     0,     0, -1959,\n+   -1959, -1959,     0,  1879,  1880,  1881,  1882,  1883,  1884,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1835,  1837,     0,\n+       0,     0,     0,  1474,  1455,  1455,     0,     0,  1420,     0,\n+   -1959,     0,  1577,   821,     0,     0,     0,  1587,  1588,  1589,\n+    1590,  1591,  1592,     0,     0,     0,  1507,     0,     0,  1375,\n+    1376,  1377,  1378,  1379,  1380,     0,   818,  1381,  1382,  1759,\n+       0,     0,     0,     0,     0,     0,     0,   668,     0,     0,\n+       0,     0,     0,     0,     0,     0,   823,     0,  1759,   668,\n+     668,   668,     0,  1764,  1765,  1580,     0,     0,     0,     0,\n+    1780,   818,   536,     0,   668,     0,     0,   668,     0,     0,\n+       0,     0,   668,     0,     0,     0,   823,   823,     0,     0,\n+       0,  1550,  1970,     0,  2598,     0,     0,     0,     0,  1971,\n+    1972,     0,   823,  1973,  1974,  1975,     0,     0,     0,     0,\n+       0,     0,   830,     0,     0,     0,     0,  1456,  1455,     0,\n+     820,     0,     0,     0,   821,     0,  1759,  1759,     0,  1759,\n+    1874,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   818,     0,     0,     0,  1383,  1384,     0,\n+       0,     0,   537,   537,     0,     0,     0,     0,     0,   501,\n+       0,  1582,     0,   998,     0,     0,  1867,   821,     0,     0,\n+    1868,  1869,     0,     0,  1870,  1871,  1872,     0,  2630,   821,\n+       0,     0,     0,     0,     0,     0,     0,   668,   668,   668,\n+       0,  2947,     0,     0,     0,     0,     0,   536,  1875,  1459,\n+       0,   536,     0,     0,     0,     0,   536,     0,     0,   821,\n+       0,     0,     0,     0,     0,     0,   821,     0,     0,     0,\n+       0,     0,     0,  1987,     0,     0,   998,     0,     0,  1867,\n+       0,     0,  1923,  1868,  1869,     0,     0,  1870,  1871,  1872,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1713,     0,     0,     0,     0,     0,     0,     0,\n-     536,   970,     0,     0,  2392,  1163,     0,     0,   536,     0,\n-       0,     0,     0,  1737, -1945,     0,     0,     0,     0,     0,\n-       0,     0,  1133,     0,     0,     0,     0,     0,  1164,  1456,\n-    1456,   821,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   971,  1977,  1166,     0,     0,\n-       0,     0,   972,     0,     0,     0,     0,  1579,     0,     0,\n-    1580,  1581,  1582,   823,  1583,  1584,  1585,  1586,  1587,  1588,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   633,\n-       0,     0,     0,     0,     0,  1452,     0,     0,     0,     0,\n-       0,     0,   973,   536,     0,     0,   633,     0,     0,     0,\n-    2085,     0,     0,     0,  1453,  1453,     0,     0,    68,   974,\n-       0,  2110,  2110,     0,     0,     0,     0,     0, -1945,     0,\n-       0,     0,     0,     0,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,     0,     0,   823,     0,     0,     0,     0,     0,     0,\n-     536,   821,     0,  1456,     0,     0,   536,     0,     0,     0,\n-    1760,  1761,     0,     0,     0,     0,     0,  1776,   823,     0,\n-       0,     0,  1755,     0,     0,     0,  1554,     0,     0,  1555,\n-       0,  1417,     0,  1556,  1557,     0,   821,   975,     0,     0,\n-       0,  1417,     0,   622,  1417,   622,     0,     0,   622,     0,\n-       0,     0,     0,   622,     0,     0,   622,     0,   622,     0,\n-       0,     0,   622,     0,  1565,     0,     0,     0,     0,     0,\n-       0, -1945,   823,     0,     0,     0,    68,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1755,     0,     0,     0, -1680,\n-       0,     0,     0,   668,     0,     0,  1567,     0,     0,     0,\n-       0,     0,     0,     0,  1755,   668,   668,   668,   821,     0,\n-       0,     0,  1471,     0,     0,     0,     0,     0,   536,     0,\n-     668,     0,     0,   668,     0,  2263,  2265,     0,   668,     0,\n-       0,  2015,     0,     0,     0,  1504,  3183,     0,     0,     0,\n-    2588,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1417,     0,     0,     0,     0,     0,     0,     0,   830,  2411,\n-    1453,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1755,  1755,     0,  1755,     0,     0,     0,  1919,\n-       0,     0,   823,     0,     0,  1453,     0, -1680,     0,     0,\n-   -1945,     0,     0,     0,     0,     0,     0,     0,     0,  1546,\n-       0,     0,     0,     0,   696,   501, -1945,     0,     0,     0,\n-       0, -1945,  1554,     0,     0,  1555,     0,   823,     0,  1556,\n-    1557,     0,     0,     0,  2620,     0,     0,     0,     0,     0,\n-       0,     0, -1680,   668,   668,   668,     0,     0,     0,     0,\n-       0,   821,     0,   536,     0,  1456, -1680,   536,     0, -1945,\n-    1565, -1680,   536,     0,     0,     0, -1680, -1945,  1417,     0,\n-     537,   537,     0,     0,     0, -1680,  1977,     0,     0, -1680,\n+       0,  1459,  1459,     0,  2948,     0,   821,  1420,     0,   821,\n+       0,     0,  1385,  1386,   821,  1583,     0,     0, -1959, -1959,\n+   -1959,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,   818,\n+       0,     0,  2716,     0,     0,  2095,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   823,     0,     0,   820,\n+       0,     0,   668,     0,  1456,     0,   536,     0,     0,     0,\n+     536,   536,   536,     0,     0,     0,  1759,  1701,  1759,     0,\n+    1795,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   536,\n+       0,  2789,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   536,   536,   536,   536,   536,   536,\n+     536,   536,   536,   536,     0,     0,     0,     0,  2468,     0,\n+       0,  1874,     0,     0,  2078,     0,  2080,     0,     0,     0,\n+       0,     0,  2244,     0,     0,     0,  2089,     0,   668,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1701,     0,\n+       0,  1876,  1877,  1878,   820,  1879,  1880,  1881,  1882,  1883,\n+    1884,     0,  1455,  1455,  1795,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  2126,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1759,  1874,     0,     0,     0,   823,  1875,\n+       0,     0,     0,     0,  1459,     0,     0,     0,     0,     0,\n+     536,   537,   537,     0,   537,     0,  1144,   668,   668,   668,\n+     668,     0,  1145,     0,     0,     0,     0,     0,     0,  1459,\n+    1157,     0,  1459,     0,   820,     0,   536,     0,   830,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1567,     0,     0,     0,     0,     0,     0,   823,\n-       0,     0,     0,     0,  1456,  1456,     0,     0,     0,  1453,\n-       0, -1680,  1576,     0,     0,     0,     0,     0,     0,     0,\n+    1158,     0,  2938,     0,     0,     0,     0,     0,     0,   820,\n+       0,     0,  1875,     0,     0,     0,     0,     0,     0,     0,\n+       0,  2220,     0,     0,     0,     0,  2224,  2225,  2227,  2228,\n+    2229,  2961,     0,   633,     0,     0,   537,     0,   818,     0,\n+       0,     0,     0,     0,  1159,     0,     0,  2973,     0,     0,\n+       0,     0,  2095,     0,     0,     0,     0,     0,  1987,   823,\n+       0,     0,     0,     0,  1944,   820,   821,  1947,     0,     0,\n+       0,     0,  1701,  1146,     0,     0,     0,     0,  1759,     0,\n+       0,  1976,  1977,  1978,     0,  1979,  1980,  1981,  1982,  1983,\n+    1984,   830,   536,  1459,     0,     0,     0,     0,     0,   668,\n+       0,     0,   823,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,   823,  1455,  3022,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    2068, -1680,  2070,     0,     0,  2703,   998,     0,  2706,  1863,\n-       0,  2085,  2079,  1864,  1865,  2223,     0,  1866,  1867,  1868,\n-       0,     0,     0,     0,    68,  2671,     0,     0,   668,     0,\n-       0,     0,   536,     0,  2938,     0,   536,   536,   536,     0,\n-       0,     0,  1755,  1697,  1755,     0,  1791,     0, -1680,     0,\n-    2116, -1680,     0,     0,     0,     0, -1945, -1680,     0,  2435,\n-       0,     0,     0,     0,     0,   536,     0,  2779,     0,     0,\n-       0,     0, -1945,     0,     0,     0,     0, -1945, -1945,     0,\n-     536,   536,   536,   536,   536,   536,   536,   536,   536,   536,\n-    2463,  2463,     0,     0,     0, -1680,     0,     0,     0,     0,\n-       0,     0,   823,     0,     0,     0,     0,     0,  2234,     0,\n-       0,     0,     0,  1453,   668, -1945,     0,     0, -1680,     0,\n-       0,     0,     0, -1694,  1697,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  2210,     0,     0,\n-    1791,     0,  2214,  2215,  2217,  2218,  2219,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1755,\n-       0,     0,     0,     0,     0,   622,     0,     0,  1576,   821,\n-    1456,   622,  1554,     0,   669,  1555,   536,     0,     0,  1556,\n-    1557,     0, -1945,   668,   668,   668,   668,     0,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,  1456,     0,     0,  1456,     0,\n-       0, -1680,   536,     0,   830,  1554,     0,     0,  1555,     0,\n-    1565, -1680,  1556,  1557,  1870,     0,  2928, -1945,  1141,     0,\n-       0, -1694,     0,     0,  1142,     0,     0,     0, -1680,     0,\n-   -1680, -1680,  1154,     0,     0,     0,     0,   537,   537,     0,\n-     537,     0,  1567,  1565,     0,  2951,     0,   633,  2584,     0,\n-   -1945,     0,  1155,     0,     0,  1537,     0,     0,     0,     0,\n-       0,     0,     0,     0, -1945,     0, -1694, -1680,  2085,     0,\n-   -1680, -1680, -1680,  2015,  1977,  1567,     0,     0,     0,     0,\n-   -1694,     0,  1871,     0,     0, -1694,     0,     0,  1697,  2421,\n-   -1694,     0,     0,  2352,  1755,     0,  1156,     0,     0, -1694,\n-     622,     0,     0, -1694,  1453,  2674,     0,   830,   536,  1456,\n-       0,     0,   537,     0,     0,   668,    68,   622,     0,    68,\n-       0,     0,     0,     0,     0,  1143,     0,     0,     0,     0,\n-       0,     0,  3009,     0,     0, -1694, -1945,     0,  2675,     0,\n-    1940,     0,     0,  1943,     0,     0,     0,     0,     0,     0,\n-     823,     0, -1945,     0,     0, -1694,     0, -1945,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0, -1945, -1945,\n-       0,     0,     0,     0,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,     0,     0,     0,     0, -1945,     0,     0,  1157,     0,\n-   -1945,     0,     0,     0,     0, -1945,     0,     0,     0,     0,\n-       0,     0, -1694,     0,     0, -1694,     0,     0,  1755,     0,\n-       0, -1694,     0,     0,     0,     0,     0,     0,     0,     0,\n-    2234,     0,     0,     0,     0,     0,     0,     0, -1945,     0,\n-       0,     0,     0,     0,  3052,     0,     0,  1158,     0,     0,\n-       0,     0,     0,  1456,     0,  1159,     0,     0,  1576, -1694,\n-       0,     0,     0,     0,     0,     0,     0,  1160,     0,     0,\n-       0,     0,     0,   681,     0,     0,     0,     0,     0,  3071,\n-       0,     0, -1694,     0,     0,   536,     0,     0,  1144,     0,\n-       0,  1576,     0,   536,     0,  1872,  1873,  1874,  1161,  1875,\n-    1876,  1877,  1878,  1879,  1880,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  3095,\n-     537,     0,  1417,     0,     0,     0,     0,     0,     0,  2703,\n-       0,     0,     0,     0,     0,     0,   537,   536,   669,     0,\n-       0,     0,   536,  1162,     0,     0,   537,  1146,   537,  1163,\n-       0,   537,     0,     0, -1945,     0,     0,   537,     0,   537,\n-       0,     0,     0,     0,     0, -1694,     0,     0,   536,     0,\n-       0,   537,  1164,     0,     0, -1694,   537,  1165,     0,     0,\n-     537,   537,   537,   537,     0,   537,   537, -1945,   536,   536,\n-       0,  1166, -1694,     0, -1694, -1694,     0,     0,     0,     0,\n-       0,   668,  2546,  1697,     0,     0,     0,   536,     0,     0,\n-       0,     0,     0,     0,  2559,  2560,  2562,  1055,  1055,     0,\n-       0,   668,     0,     0,  3169,     0,     0,     0,     0,  2573,\n-       0, -1694,  2576,     0, -1694, -1694, -1694,  2581,     0,     0,\n-    1537,     0,     0,     0,  1456,     0,     0,  1148,   536,   958,\n-       0,     0,   958,     0,     0,     0,     0,     0, -1945,     0,\n-       0,     0,     0,     0,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,  1537,     0,     0,     0,  3169,     0,     0,     0,     0,\n-       0,   668,  1217,  1224,     0,     0,     0,     0,     0,     0,\n-       0, -1945,     0,     0,     0,     0,   681,     0,  1583,  1584,\n-    1585,  1586,  1587,  1588,     0,     0,     0,     0,     0,     0,\n-       0,   668,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2721,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1456,  1456,  1160,     0,     0,  1456,\n+    2922,     0,     0,     0,   823,     0,     0,     0,     0,     0,\n+       0,   823,  1876,  1877,  1878,     0,  1879,  1880,  1881,  1882,\n+    1883,  1884,     0,     0,  2940,     0,     0,     0,     0,     0,\n+       0,     0,     0,   820,     0,     0,     0,  2362,     0,     0,\n+       0,     0,     0,     0,     0,  1161,     0,     0,     0,     0,\n+       0,   823,  1759,  1162,   823,     0,     0,     0,     0,   823,\n+       0,     0,     0,     0,  2244,  1163,     0,     0,   820,     0,\n+       0,     0,     0,     0,     0,  1876,  1877,  1878,  3065,  1879,\n+    1880,  1881,  1882,  1883,  1884,     0,  1147,  1459,     0,     0,\n+       0,     0,     0,     0,     0,   537,  1164,     0,     0,  1558,\n+       0,     0,  1559,     0,     0,   821,  1560,  1561,     0,     0,\n+       0,   537,     0,  3084,  1455,     0,     0,     0,     0,   536,\n+       0,   537,     0,   537,     0,     0,   537,   536,     0,     0,\n+       0,     0,   537,     0,   537,     0,     0,  1569,     0,     0,\n+     820,  1165,  2067,     0, -1959,  1149,   537,  1166,     0,     0,\n+       0,   537,     0,  3108,     0,   537,   537,   537,   537,     0,\n+     537,   537,     0,     0,     0,     0,     0,     0,     0,  1571,\n+    1167,     0,     0,     0,   536,  1168,     0,     0,     0,   536,\n+       0,  1056,  1056,     0,     0,     0,     0,     0,     0,  1169,\n+       0,     0,  1456,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   536,     0,     0,     0,     0,\n+     821,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1708,     0,   536,   536,     0,     0,     0,\n+       0,     0,  2687,     0,     0,     0,     0,     0,   668,     0,\n+    1701,     0,     0,     0,   536,  1151,  1220,  1227,  1455,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   668,     0,\n+       0,  3181,     0, -1959,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   820,     0,     0, -1959,\n+     821,  1459,     0,     0, -1959,   536,   958,     0,     0,   958,\n+       0,     0,     0,     0,     0,  1558,     0,     0,  1559,     0,\n+       0,     0,  1560,  1561,     0,   821,     0,     0,     0,  2973,\n+       0,     0,     0,     0,     0,     0,     0,   668,     0,     0,\n+       0, -1708, -1959,     0,   537,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n+   -1959,     0,  2556,     0,     0,     0,     0,   668,     0,     0,\n+       0,   823,     0,     0,  2569,  2570,  2572,     0,  2379,     0,\n+       0,   821,     0,  1947,     0,  1571, -1708,     0,     0,  2583,\n+       0,     0,  2586,     0,     0,  1580,     0,  2591,     0,     0,\n+   -1708,     0,     0,     0,  3084, -1708,     0,     0,     0,     0,\n+   -1708,     0,     0,     0,     0,     0,     0,     0,     0, -1708,\n+       0,     0,     0, -1708,     0,     0,  3181,     0,   537,     0,\n+    1456,  1456,  1456,  1456,  1456,  1456,  1550,     0,  1456,  1456,\n+    1456,  1456,  1456,  1456,  1456,  1456,  1456,  1456,  2951,     0,\n+       0,     0,     0,  1701,     0, -1708,     0,     0,     0,     0,\n+       0,     0,  3195,     0,     0,     0,  3181,   830,   830,   830,\n+       0,     0,     0,     0,     0, -1708,     0,  1912,     0, -1959,\n+       0,     0,     0,     0,  1431,     0,     0,   536,     0,   821,\n+    1448, -1959,     0,  1450,     0, -1959,  1461,  1464,  1469,  1472,\n+   -1959,     0,  2637,  2638,  2639,     0,     0,     0,     0,  1701,\n+       0,     0,     0,     0,     0,     0,  3181,     0,   540,     0,\n+       0,   537, -1708,     0,   821, -1708,     0,     0,     0,     0,\n+       0, -1708,     0,     0,     0,     0,     0,  1220, -1959,     0,\n+       0,     0,     0,     0,     0,   820,     0,     0,     0,     0,\n+     823,     0,     0,   830,  1524,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  2095,   537, -1708,\n+       0,     0,  1529,   541,  2485,     0,     0,     0,     0,     0,\n+       0,  1456,  1456,  1532,  1533,  1534,     0,  1538,  1542,   542,\n+       0,  1580, -1708,     0,     0, -1959,   821,     0,     0,     0,\n+     543,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,\n+       0,     0,     0,     0,     0,  1601,     0,  2727,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  2627,  2628,  2629,     0,     0,     0,  3071,   537,\n+       0,     0,     0,     0,     0,     0,   544,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   545,     0,   669,     0,\n+       0,     0,     0,     0,     0,   823,     0,     0,   546,     0,\n+       0,     0,     0,   547,     0,     0,     0,  1644,     0,     0,\n+       0,  1660,  1665,     0,     0, -1708,     0,     0,     0,     0,\n+       0,     0,  1056,  1056,     0, -1708,   537, -1959,     0,     0,\n+       0,   548,     0,     0,     0,  1456,     0,     0,     0,     0,\n+       0,     0, -1708,  2865, -1708, -1708,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   536,     0,     0,     0,\n-    1417,     0,     0,     0,     0,  1417,     0,     0,     0,     0,\n-       0,     0,     0,  2369,     0,     0,     0,     0,  1943,     0,\n-       0,     0,     0,     0,  1697,     0,     0,     0,   -43,     0,\n-      68,     0,     0,     0,     0,     0,     0,  3169,   830,   830,\n-     830,     0,     0,     0,     0,     0,     0,     0,  1908,     0,\n-       1,     0,     0,  1831,  1833,     0,    68,   537,     0,    68,\n-       2,     0,     3,     4,     0,  1546,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     5,     0,     0,     0,     0,\n-       6,  1697,     0,     0,     0,     0,     0,  2717,  3169,     7,\n+       0,     0,     0,     0,     0,   823,     0,     0,     0,     0,\n+       0,     0,   821,  1220,   549,     0,     0,     0,   550,     0,\n+       0, -1708,  1220,     0, -1708, -1708, -1708,     0,     0,     0,\n+     823,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1220,     0,     0,     0,\n+       0,     0,  2901,  2902,  2903,  2904,     0,     0,     0,     0,\n+    1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,     0,\n+       0, -1959,     0,     0,     0,     0,     0,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592,   551,     0,   823,     0,     0,     0,\n+       0,   537,     0,     0,     0,   537,     0,     0,  1569,   552,\n+    1944,     0,     0,     0,     0, -1959,     0,     0,     0,     0,\n+    1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,     0,\n+       0,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,\n+    1571,     0,   553,     0,     0,   554,     0,  1144,  1567,     0,\n+       0,     0,     0,  1145,   555,     0,     0,   556,  1569,     0,\n+       0,  1157,     0,     0,     0,  1570,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   557,     0,     0,     0,     0,\n+       0,  1158,     0,     0,     0,     0,     0,     0,     0,   558,\n+    1571,     0,     0,     0,  3009,     0,   559,     0,     0,     0,\n+       0,     0,     0,     0,   823,   560,     0,     0,     0,     0,\n+     537,   561,     0,     0,   537,   537,   537,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1159,     0,     0,     0,     0,\n+       0,     0,     0,     0, -1959,     0,     0,     0,   562,   823,\n+       0,     0,     0,   537,     0,     0,     0,     0,     0,     0,\n+   -1959,     0,     0,     0,  1146, -1959,     0,     0,   537,   537,\n+     537,   537,   537,   537,   537,   537,   537,   537,     0,     0,\n+       0,   821,  1857,     0,     0,     0,     0,     0,     0,  1456,\n+    1456,     0,     0,     0,  1572,     0,     0,     0,     0,     0,\n+       0,     0,     0, -1959,     0,     0,     0,     0,     0,     0,\n+    1573,     0,     0,     0,  1469,  1574,  1469,  1469,     0,     0,\n+       0,   823,     0,     0,     0,     0,     0,  1160,     0,  1056,\n+    1056,     0,     0,     0,     0,     0,     0,     0,  1575,  1576,\n+       0,     0,     0,     0,     0,     0,  1056,     0,     0,     0,\n+       0,     0,     0,  1577,     0,     0,  1580,     0,     0,     0,\n+       0,     0,     0,     0,  1944,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1964,  1161,  1965,     0,     0,\n+       0,     0,     0,     0,  1162,     0,     0,     0,     0,  1578,\n+    2379,     0,  1579,     0,     0,     0,  1163,     0,     0,     0,\n+       0,     0,     0,  2002,     0,     0,  1580,     0,     0,  2006,\n+    2007,  2008,  2009,  2010,  2011,  2012,  2013,  1147,     0,     0,\n+       0,  2022,  2023,     0,     0,     0,  2034,  1164,     0,     0,\n+    2037,     0,     0,  2045,  2046,  2047,  2048,  2049,  2050,  2051,\n+    2052,  2053,     0,     0,  2054,     0,     0,     0,     0,     0,\n+       0,  1056, -1959,  1220,     0,     0,     0,   823,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     8,  1554,     0,     0,  1555,     0,     0,  2085,  1556,\n-    1557,     0,     9,     0,     0,     0,  1537,     0,     0,     0,\n-       0,     0,     0,   830,    10,     0,    11,     0,     0,     0,\n-    1428,     0,     0,     0,     0,     0,  1445,    12,     0,  1447,\n-    1565,     0,  1458,  1461,  1466,  1469,     0, -1945,     0,     0,\n-     537,    13,    14,     0,     0,     0,     0,     0,     0,     0,\n-       0,    15,     0,     0,     0,     0,     0,    16,   622,     0,\n-       0,     0,  1567,  2855,     0,    17,     0,    18,    19,     0,\n-       0,     0,     0,  1217,     0,     0,     0,     0,     0,     0,\n-       0,    20,     0,     0,     0,    21,     0,   537,     0,     0,\n-    1521,     0,     0,  2475,     0,     0,     0,     0,     0,     0,\n-       0,   998,     0,     0,  1863,     0,     0,  1525,  1864,  1865,\n-      22,     0,  1866,  1867,  1868,     0,     0,     0,  1528,  1529,\n-    1530,     0,  1534,  1538,     0,  2941,    23,     0,     0,     0,\n-    1831,  1833,  2891,  2892,  2893,  2894,     0,     0,     0,     0,\n-       0,  1417,     0,     0,     0,     0,  1554,     0,     0,  1555,\n-    1597,     0,    24,  1556,  1557,     0, -1945, -1945, -1945, -1945,\n+       0,     0,  2177,     0,     0,     0,  1149,  2082,  1166,     0,\n+       0,     0,  1456,  3152,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   537,     0,     0,   -43,\n+       0,  1167,  1582,  3176,     0,     0,  2178,  1456,     0,     0,\n+    1533,  1534,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1169,     1,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     2,     0,     3,     4,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     5,     0,     0,     0,\n+       0,     6,     0,     0,     0,     0, -1959,     0,     0,     0,\n+       7,     0,  3214,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,     0,     8,     0,     0,     0,  1151,     0,     0,     0,\n+       0,     0,     0,     9,     0,     0,     0,     0,     0,     0,\n+       0,     0,  3240,     0,     0,    10,     0,    11,  1220,     0,\n+       0,  2208,  2209,     0,  2210,     0,  1583,     0,    12,  1584,\n+    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,  1456,    13,    14,     0,     0,     0,  1457,     0,     0,\n+       0,     0,    15,     0,     0,     0,     0,     0,    16,     0,\n+    1220,     0,     0,     0,     0,     0,    17,     0,    18,    19,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0, -1945,     0,     0,     0,     0, -1945,     0,     0,\n-       0,     0,     0,     0,  1565,     0,     0,     0,     0,     0,\n-       0,  1566,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1640,     0,     0,   537,  1656,  1661,     0,     0,\n-       0,     0,     0,     0,     0, -1945,  1567,  1055,  1055,     0,\n-       0,     0,     0,    25,    26,    27,     0,     0,     0,     0,\n-       0,    28,    68,     0,    29,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1554,     0,     0,  1555,     0,     0,     0,\n-    1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,     0,     0,\n-       0,     0,     0,    30,  2996,     0,  1217,     0,  1576,     0,\n-    1537,  1563,    31,     0,     0,  1217,     0,     0,     0,     0,\n-       0,  1565,     0,     0,     0,     0,    32,     0,  1566,     0,\n-       0,     0,     0,    33,     0,     0,     0,    34,     0,  1217,\n-       0,     0,     0,     0,     0,     0,     0,    35,     0,  1870,\n-    1568,     0,     0,  1567,     0,     0,     0,     0,     0,    36,\n-       0,     0,     0,    37,     0,     0,  1569,     0,    68,    68,\n-     537,  1570,     0,     0,   537,     0,     0,     0,     0,  1940,\n-     998,     0,    38,  1863,     0,     0,     0,  1864,  1865,     0,\n-       0,  1866,  1867,  1868,     0,    39,     0,     0,    40,     0,\n-       0,    41,     0,     0, -1945,     0,    42,     0,     0,  1573,\n-       0,     0,     0,     0,     0,     0,     0,  1871,     0,  1554,\n-      43,     0,  1555,     0,     0,     0,  1556,  1557,     0,  1417,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,    68,\n-      68,     0,     0,     0,    44,     0,     0,  1568,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1565,    45,     0,\n-       0,   -43,  1576,  1569, -1945,     0,     0,     0,  1570,     0,\n+       0,     0,    20,  3090,     0,     0,    21,     0,     0,     0,\n+       0,  2379,     0,     0,     0,     0,  1558,     0,     0,  1559,\n+       0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n+       0,    22,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,   823,    23,  2310,  2311,\n+       0,  2312,     0,     0,  1569,     0,     0,     0,   537,     0,\n+       0,  1570,     0,   537,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    24,     0,     0,     0,     0,  1595,     0,\n+    2338,  2339,     0,     0,  2082,     0,  1571,     0,     0,   537,\n+       0,     0,     0,     0,     0,  1456,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   537,\n+     537,     0,     0,  2366,     0,     0,     0,     0,     0,  2372,\n+       0,     0,  1595,     0,     0,     0,     0,     0,   537,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1220,\n+       0,     0,     0,     0,    25,    26,    27,     0,     0,     0,\n+    2390,     0,    28,     0,  1457,    29,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   537,\n-       0,     0,     0,   537,   537,   537,     0,     0,     0,  1567,\n-       0,  1571,  1572,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1573,     0, -1945,     0,\n-       0,     0,   537,     0,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,     0,     0,     0,     0,     0,     0,   537,   537,   537,\n-     537,   537,   537,   537,   537,   537,   537,     0,     0,     0,\n-       0,     0,  1574,     0,     0,  1575,     0,     0,     0,     0,\n-       0,     0,     0,    68,     0,  1853,     0,     0,  1578,  1576,\n-       0,     0,  1577,     0,     0,     0,     0,     0,     0,    68,\n-       0,     0,     0,    68,     0,     0,     0,     0,     0,     0,\n-    3140,     0,     0, -1945,     0,     0,     0,  1466, -1945,  1466,\n-    1466,     0,     0,     0,     0,     0,     0,     0,     0, -1945,\n-    3164,     0,  1055,  1055, -1945,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1055,\n-    1872,  1873,  1874,  1940,  1875,  1876,  1877,  1878,  1879,  1880,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0, -1945,     0,     0,     0,     0,     0,  1959,  2369,\n-       0,     0,     0,     0,     0,  1578,  1871,     0,     0,     0,\n-    3199,     0,  1579,     0,     0, -1945, -1945, -1945,    68,  1583,\n-    1584,  1585,  1586,  1587,  1588,  1992,     0,     0,     0,     0,\n-       0,  1996,  1997,  1998,  1999,  2000,  2001,  2002,  2003,     0,\n-    3225,    68,     0,  2012,  2013,  1576,     0,     0,  2024,     0,\n-       0,     0,  2027,     0,     0,  2035,  2036,  2037,  2038,  2039,\n-    2040,  2041,  2042,  2043,     0,     0,  2044,     0,     0,     0,\n-       0,     0,     0,  1055,     0,  1217,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  2072,\n-       0,     0,     0,     0,     0,   537,     0,     0,     0,  1579,\n-       0,     0,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,\n-    1587,  1588,  1553,     0,     0,     0,     0,  1554,     0,  1856,\n-    1555,     0,  1529,  1530,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562, -1945,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1563,     0,     0,     0,  1564,\n-       0,     0,     0,     0,     0,  1565,     0,     0,     0,     0,\n-       0,     0,  1566,     0,  1554,     0,     0,  1555,     0,     0,\n-       0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-       0,     0,  1563,     0,     0,     0,  2656,     0,     0,  1872,\n-    1873,  1874,  1565,  1875,  1876,  1877,  1878,  1879,  1880,  1566,\n-    1217,     0,     0,  2198,  2199,     0,  2200,     0,     0,     0,\n+    1572,  2403,     0,     0,    30,     0,  2406,     0,     0,  2408,\n+       0,     0,     0,    31,     0,     0,  1573,     0,     0,     0,\n+       0,  1574,     0,     0,     0,     0,     0,    32,     0,     0,\n+       0,     0,     0,     0,    33,     0,     0,     0,    34,     0,\n+       0,     0,     0,     0,  1575,  1576,     0,  2426,    35,     0,\n+    2429,     0,  2431,     0,     0,     0,     0,     0,     0,  1577,\n+      36,     0,  1595,     0,    37,     0,     0,     0,  2435,  1595,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1558,     0,\n+       0,  1559,     0,    38,     0,  1560,  1561,  1562,  1563,  1564,\n+    1565,  1566,     0,     0,     0,  1578,    39,     0,  1579,    40,\n+       0,     0,    41,     0,     0,     0,  1567,    42,  1644,  1456,\n+       0,     0,  1580,     0,     0,  1581,  1569,     0,     0,     0,\n+       0,    43,     0,  1570,     0,  1665,  2052,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1567, -1945,     0,     0,     0,     0,\n-       0,     0,  1583,  1584,  1585,  1586,  1587,  1588,  1454,     0,\n-       0,     0,  1217,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  3077,     0,     0,     0,     0,     0,     0,     0,\n-    2369,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1568,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-       0,     0,  1570,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   537,     0,     0,     0,     0,   537,\n-    2300,  2301,     0,  2302,     0,  1571,  1572,     0,  1568,     0,\n+       0,     0,     0,     0,  1056,    44,     0,     0,  1571,     0,\n+       0,     0,     0,  2489,     0,     0,     0,     0,     0,    45,\n+       0,     0,   -43,     0,     0,     0,     0,     0,     0,     0,\n+       0,   537,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1558,     0,     0,  1559,     0,     0,\n+       0,  1560,  1561,     0,     0,  1564,  1565,  1566,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,\n+       0,     0,  1220,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1569,     0,     0,     0,     0,     0,     0,  1570,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1573,     0,     0,     0,  1569,   537,     0,     0,     0,  1570,\n-       0,     0,  2328,  2329,     0,  1141,  2072,     0,  1591,     0,\n-       0,  1142,     0,     0,     0,   537,   537,     0,     0,  1154,\n-       0,     0,  1571,  1572,     0,     0,  1574,     0,     0,  1575,\n-       0,     0,     0,     0,   537,  2356,     0,  1573,     0,  1155,\n-       0,  2362,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,     0,  1591,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1217,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  2380,     0,  1574,     0,   537,  1575,     0,     0,     0,\n-       0,     0,     0,  1156,  1454,     0,     0,     0,     0,     0,\n-    1576,     0,     0,  1577,     0,     0,  1554,  2390,     0,  1555,\n-       0,     0,  2393,  1556,  1557,  2395,     0,  1560,  1561,  1562,\n-       0,     0,  1143,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1563,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1565,     0,     0,     0,     0,  1578,\n-       0,  1566,     0,  2413,     0,     0,  2416,     0,  2418,     0,\n+       0,     0,  1572,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1571,     0,     0,     0,  1573,     0,\n+       0,     0,     0,  1574,     0,  2589,     0,     0,     0,     0,\n+       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1575,  1576,     0,     0,\n+    1595,     0,  1595,     0,  1457,  1457,  1885,     0,     0,  1457,\n+       0,  1577,     0,  1595,     0,     0,  1595,     0,     0,     0,\n+       0,  1595,  1583,     0,  1595,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1578,  2395,     0,\n+    1579,     0,     0,     0,     0,     0,     0,     0,  1572,     0,\n+       0,     0,     0,     0,  1580,     0,     0,  1581,     0,     0,\n+       0,     0,     0,     0,  1573,     0,  1595,     0,     0,  1574,\n+       0,  1595,     0,     0,  1595,  1595,  1595,     0,     0,     0,\n+    1595,     0,     0,     0,  1595,     0,     0,     0,     0,     0,\n+       0,     0, -1959, -1959,     0,     0,     0,     0,     0,     0,\n+    2658,     0,     0,     0,  2660,  1965,     0,  1577,     0,     0,\n+       0,  2664,     0,     0,     0,     0,     0,     0,     0,     0,\n+    2672,     0,     0,  2675,     0,  2677,     0,     0,     0,     0,\n+       0,     0,     0,  2681,     0,     0,     0,     0,     0,     0,\n+       0,  2688,  2689,  1595,     0,     0, -1959,     0,  2696,     0,\n+    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1580,     0,     0,  2706,     0,     0,     0,     0,     0,     0,\n+       0,     0,  2721,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1595,     0,     0,     0,\n+       0,     0,     0,  1056,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1595,     0,     0,     0,     0,  1595,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2422,     0,  1567,     0,     0,     0,\n-    1591,  1554,     0,     0,  1555,  1157,     0,  1591,  1556,  1557,\n-    1558,  1559,  1560,  1561,  1562,     0,  1578,     0,     0,     0,\n-       0,     0,     0,   537,     0,     0,     0,     0,     0,  1563,\n-       0,     0,     0,     0,  1640,     0,     0,     0,     0,  1565,\n-       0,     0,     0,     0,     0,     0,  1566,     0,     0,     0,\n-       0,  1661,  2042,     0,  1158,     0,     0,     0,     0,     0,\n-       0,     0,  1159,     0,     0,     0,     0,     0,     0,     0,\n-    1055,  1567,     0,  1579,  1160,     0,  1580,  1581,  1582,  2479,\n-    1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,     0,\n-    1568,     0,     0,     0,     0,  1144,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1161,  1569,     0,     0,     0,\n-       0,  1570,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1579,     0,     0,  1580,  1581,  1582,     0,  1583,  1584,  1585,\n-    1586,  1587,  1588,     0,  1571,  1572,     0,  1986,  1217,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,\n-    2167,     0,     0,     0,  1146,     0,  1163,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1568,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1164,\n-       0,  1569,     0,     0,  2168,  1574,  1570,     0,  1575,     0,\n-       0,  2579,     0,     0,     0,     0,     0,     0,  1166,     0,\n-       0,     0,  1576,     0,     0,     0,     0,     0,     0,  1571,\n-    1572,  1591,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1573,     0,     0,     0,  1591,     0,\n-    1591,     0,  1454,  1454,  1881,     0,     0,  1454,     0,     0,\n-       0,  1591,     0,     0,  1591,     0,     0,     0,     0,  1591,\n-       0,     0,  1591,     0,  1148,     0,     0,     0,     0,     0,\n-    1574,     0,     0,  1575,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1576,     0,     0,\n-    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n-       0,     0,     0,     0,  1591,     0,     0,     0,  1591,     0,\n-       0,  1591,  1591,  1591,     0,     0,     0,  1591,     0,     0,\n-       0,  1591,     0,     0,     0,     0,  2648,     0,     0,     0,\n-       0,     0,     0,     0,  2652,     0,     0,     0,     0,     0,\n-       0,     0,     0,  2660,     0,     0,  2663,     0,  2665,     0,\n-       0,     0,     0,     0,     0,     0,  2669,     0,     0,     0,\n-       0,     0,     0,     0,  2676,  2677,     0,     0,     0,     0,\n-       0,  2684,     0,  1578,     0,     0,     0,     0,     0,     0,\n-    1591,     0,     0,     0,     0,     0,  2694,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  2711,     0,\n-       0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,     0,     0,     0,     0,  1055,\n-       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1591,\n-       0,     0,     0,     0,  1591,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1885,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1881,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1579,     0,     0,\n-    1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,\n-       0,     0,     0,     0,  1986,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1583,     0,  1582,  1584,  1585,  1586,\n+       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,\n+       0,     0,     0,     0,  1860,     0,  1557,     0,     0,     0,\n+       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,\n+    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1567,\n+       0,     0,     0,  1568,     0,     0,     0,     0,     0,  1569,\n+       0,     0,     0,     0,     0,     0,  1570,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2917,\n+    2918,  1571,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1583,     0,     0,  1584,  1585,  1586,  2935,  1587,  1588,  1589,\n+    1590,  1591,  1592,     0,     0,     0,     0,     0,  2939,     0,\n+       0,     0,  2941,  2942,     0,     0,     0,  2943,     0,     0,\n+       0,     0,  2946,     0,     0,  2949,  2950,     0,     0,  1595,\n+    2210,  1220,     0,     0,  2957,     0,     0,  1885,  1885,     0,\n+    1457,  1457,  1457,  1457,  1457,  1457,  1056,     0,  1457,  1457,\n+    1457,  1457,  1457,  1457,  1457,  1457,  1457,  1457,  1885,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1558,     0,     0,  1559,     0,  1572,     0,  1560,  1561,  1562,\n+    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,\n+    2997,  1573,     0,     0,     0,     0,  1574,     0,  1567,     0,\n+       0,     0,  2668,     0,     0,     0,     0,     0,  1569,     0,\n+       0,     0,     0,     0,     0,  1570,     0,  3016,     0,  1575,\n+    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1577,     0,  1595,  1595,     0,     0,\n+    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1554,     0,     0,  1555,     0,     0,     0,\n-    1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,     0,     0,\n-       0,     0,     0,     0,     0,  2907,  2908,     0,     0,     0,\n-       0,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1565,  2925,     0,     0,     0,     0,     0,  1566,     0,\n-       0,     0,  2929,     0,     0,     0,  2931,  2932,     0,     0,\n-       0,  2933,     0,     0,     0,     0,  2936,     0,     0,  2939,\n-    2940,     0,     0,  1567,  2200,  1217,     0,     0,  2947,     0,\n-       0,     0,     0,     0,     0,     0,  1591,     0,     0,     0,\n-    1055,     0,     0,     0,  1881,  1881,     0,  1454,  1454,  1454,\n-    1454,  1454,  1454,     0,     0,  1454,  1454,  1454,  1454,  1454,\n-    1454,  1454,  1454,  1454,  1454,  1881,     0,     0,     0,     0,\n-       0,  1554,     0,     0,  1555,     0,     0,     0,  1556,  1557,\n-    1558,  1559,  1560,  1561,  1562,     0,  2984,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1563,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,     0,  3003,     0,     0,  1566,  1568,     0,     0,\n+    1578,     0,     0,  1579,  1595,     0,     0,     0,  1595,  1595,\n+    1595,  1595,  1595,  1595,  1595,  1595,     0,  1580,     0,     0,\n+    1581,  1457,  1457,     0,  1595,  1595,     0,     0,     0,     0,\n+       0,  3043,     0,     0,     0,     0,  1595,     0,     0,  1595,\n+       0,     0,     0,     0,     0,     0,     0,  1595,  1595,  1595,\n+    1595,  1595,  1595,  1595,  1595,  1595,  1595,     0,     0,     0,\n+       0,     0,     0,     0,  1572,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1542,     0,\n+    1573,     0,     0,     0,  1595,  1574,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1220,     0,\n+       0,     0,     0,     0,     0,  2403,     0,     0,  1575,  1576,\n+       0,     0,     0,  1582,     0,     0,  3101,  3102,     0,     0,\n+    3103,     0,     0,  1577,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1457,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  3119,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,\n+       0,     0,  1579,     0,     0,     0,     0,     0,     0,  3131,\n+       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1569,     0,     0,     0,     0,  1570,     0,\n-       0,  1567,  1591,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1571,  1572,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1591,  1573,     0,     0,  1591,\n-    1591,  1591,  1591,  1591,  1591,  1591,  1591,     0,     0,     0,\n-       0,     0,  1454,  1454,     0,  1591,  1591,  3030,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1591,     0,     0,\n-    1591,     0,  1574,     0,     0,  1575,     0,     0,  1591,  1591,\n-    1591,  1591,  1591,  1591,  1591,  1591,  1591,  1591,     0,  1576,\n-       0,     0,  1577,     0,     0,  1568,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1538,     0,     0,     0,     0,     0,\n-       0,  1569,     0,     0,     0,  1591,  1570,     0,     0,     0,\n-       0,     0,     0,     0,  1217,     0,     0,     0,     0,     0,\n-       0,  2390,     0,     0,     0,     0,     0,     0,     0,  1571,\n-    1572,     0,  3088,  3089,     0,     0,  3090,     0,     0,     0,\n-       0,     0,     0,     0,  1573,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1454,     0,  3107,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1578,     0,     0,     0,     0,\n-    1574,     0,  3119,  1575,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1576,     0,     0,\n-    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1595,  1595,  1595,     0,     0,     0,     0,  1583,     0,     0,\n+    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,\n+       0,  1558,  3175,     0,  1559,     0,     0,     0,  1560,  1561,\n+    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,\n+    2917,     0,     0,     0,  3192,     0,     0,     0,  1056,  1567,\n+       0,     0,     0,     0,     0,     0,     0,     0,  3202,  1569,\n+       0,     0,  1582,     0,     0,     0,  1570,     0,     0,     0,\n+       0,  1056,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  3225,\n+       0,  1571,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1595,  1595,  1595,     0,     0,  1885,  1885,  1885,\n+    1885,  1885,  1885,     0,     0,     0,  1885,  1885,  1885,  1885,\n+    1885,  1885,  1885,  1885,  1885,  1885,     0,     0,     0,     0,\n+    1595,  1595,     0,     0,     0,     0,  3250,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  2917,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1595,  1056,\n+       0,     0,     0,     0,  1595,     0,  1583,     0,     0,  1584,\n+    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,     0,  1595,  1996,     0,  1572,     0,     0,     0,  3292,\n+       0,     0,     0,     0,     0,  1595,     0,     0,  1595,     0,\n+    1595,  1573,     0,     0,  1885,  1885,  1574,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1595,  1457,\n+    1457,  1595,     0,  1595,     0,     0,     0,  1595,     0,  1575,\n+    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1591,  1591,  1591,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  3163,     0,   540,     0,     0,\n+       0,     0,     0,     0,     0,     0,  3346,  3346,     0,     0,\n+    1578,  1595,     0,  1579,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,\n+    1581,     0,  3346,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  2907,     0,     0,     0,  3180,     0,     0,\n-       0,  1055,     0,     0,     0,     0,     0,     0,     0,  1579,\n-       0,  3190,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,\n-    1587,  1588,     0,  1578,  1055,     0,  2299,     0,     0,     0,\n-       0,     0,   541,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  3210,     0,     0,     0,     0,   542,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   543,\n-       0,     0,     0,  1591,  1591,  1591,     0,     0,  1881,  1881,\n-    1881,  1881,  1881,  1881,     0,     0,     0,  1881,  1881,  1881,\n-    1881,  1881,  1881,  1881,  1881,  1881,  1881,     0,     0,     0,\n-    3235,  1591,  1591,     0,     0,   544,     0,     0,     0,     0,\n-    2907,     0,     0,     0,     0,   545,     0,     0,     0,     0,\n-       0,     0,     0,  1055,     0,     0,     0,   546,     0,  1591,\n-       0,     0,   547,     0,     0,  1591,     0,  1579,     0,     0,\n-    1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,\n-    3278,     0,     0,  1591,  2384,     0,     0,     0,     0,     0,\n-     548,     0,     0,  1591,     0,     0,  1591,     0,  1591,     0,\n-       0,     0,  1881,  1881,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1591,  1454,  1454,  1591,\n-       0,  1591,     0,     0,     0,  1591,     0,     0,     0,     0,\n-       0,     0,     0,   549,     0,     0,  1554,   550,     0,  1555,\n-       0,     0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1563,     0,     0,     0,  3330,  3330,\n-       0,     0,     0,     0,  1565,     0,     0,  1554,     0,     0,\n-    1555,  1566,  1591,     0,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,  3330,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   551,     0,  1563,  1567,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1565,     0,     0,   552,     0,\n-       0,     0,  1566,     0,  1554,     0,  3330,  1555,     0,     0,\n-       0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  3346,  1558,\n+       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,\n+    1564,  1565,  1566,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n-       0,   553,  1563,     0,   554,     0,     0,     0,     0,     0,\n-       0,     0,  1565,   555,     0,  1554,   556,     0,  1555,  1566,\n-       0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,\n-       0,     0,  1591,     0,   557,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1563,  1567,     0,     0,     0,   558,     0,\n-    1568,     0,     0,  1565,     0,   559,     0,     0,     0,     0,\n-    1566,     0,     0,  1454,   560,     0,  1569,     0,     0,     0,\n-     561,  1570,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1567,     0,     0,     0,     0,\n-       0,  1568,     0,     0,  1571,  1572,     0,   562,     0,     0,\n-       0,  1591,     0,     0,     0,  1591,     0,  1569,     0,  1573,\n-       0,     0,  1570,  1591,     0,     0,  1591,     0,  1591,     0,\n-       0,     0,  1591,     0,     0,  1881,  1881,     0,     0,  1591,\n-    1591,     0,     0,     0,     0,  1571,  1572,  1591,  1568,     0,\n-       0,     0,     0,     0,     0,  1574,     0,  1591,  1575,     0,\n-    1573,     0,     0,     0,  1569,     0,     0,     0,     0,  1570,\n-       0,     0,  1576,     0,  1591,  1577,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1568,\n-       0,     0,  1571,  1572,     0,     0,  1574,     0,     0,  1575,\n-       0,     0,     0,     0,     0,  1569,     0,  1573,     0,     0,\n-    1570,     0,  1454,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1571,  1572,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1574,     0,     0,  1575,     0,  1573,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1576,     0,     0,  1577,     0,     0,     0,     0,  1578,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1574,     0,     0,  1575,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1576,     0,     0,  1577,     0,     0,     0,     0,  1578,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1881,  1454,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1578,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1569,     0,  1558,\n+       0,  1595,  1559,     0,  1570,     0,  1560,  1561,  1562,  1563,\n+    1564,  1565,  1566,  1582,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1567,     0,  1571,\n+       0,     0,  1457,     0,     0,     0,     0,  1569,     0,     0,\n+    1558,     0,     0,  1559,  1570,     0,     0,  1560,  1561,  1562,\n+    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1567,  1571,\n+    1595,     0,  1595,     0,     0,     0,  1595,     0,  1569,     0,\n+       0,     0,     0,     0,  1595,  1570,     0,  1595,     0,  1595,\n+       0,     0,     0,  1595,     0,     0,  1885,  1885,     0,     0,\n+    1595,  1595,     0,     0,     0,     0,     0,     0,  1595,     0,\n+    1571,     0,     0,     0,     0,     0,     0,  1583,  1595,     0,\n+    1584,  1585,  1586,  1572,  1587,  1588,  1589,  1590,  1591,  1592,\n+       0,     0,     0,  1595,  1996,     0,     0,     0,     0,  1573,\n+       0,     0,     0,     0,  1574,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1591,  1591,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,     0,     0,     0,  1591,  2397,\n-       0,     0,  1591,     0,  1591,  1591,  1591,  1578,     0,  1591,\n-       0,     0,  1591,  1591,     0,     0,     0,     0,     0,     0,\n-    1591,     0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,     0,\n-    2608,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1591,     0,     0,\n-       0,     0,     0,  1881,     0,     0,     0,     0,     0,     0,\n-    1579,     0,     0,  1580,  1581,  1582,  1591,  1583,  1584,  1585,\n-    1586,  1587,  1588,     0,     0,     0,     0,  2658,     0,     0,\n+       0,     0,     0,  1572,     0,     0,     0,  1575,  1576,     0,\n+       0,  1457,     0,     0,     0,     0,     0,     0,     0,  1573,\n+       0,     0,  1577,     0,  1574,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,\n-       0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,  1584,\n-    1585,  1586,  1587,  1588,     0,     0,     0,     0,  2727,  1881,\n+       0,     0,     0,     0,  1572,     0,     0,  1575,  1576,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n+    1573,  1579,  1577,     0,     0,  1574,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1575,  1576,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n+       0,  1579,     0,  1577,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,\n+       0,     0,  1579,     0,  1885,  1457,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,\n+    1595,  1582,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,\n+       0,  1595,     0,  1595,  1595,  1595,     0,     0,  1595,     0,\n+       0,  1595,  1595,     0,     0,     0,     0,     0,     0,  1595,\n+       0,  1582,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1591,  1591,  1591,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1595,\n+       0,     0,  1582,     0,     0,  1885,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1595,     0,\n+       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,\n+    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,\n+       0,     0,  2309,     0,     0,  1595,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1591,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1591,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,\n+    1586,  1885,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,\n+       0,     0,  2394,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1595,  1595,  1595,  1583,     0,     0,  1584,\n+    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,  1595,     0,  2410,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1595,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1591,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1591,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1595,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1595,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1591,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1595,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   110,   995,   517,   996,   997,   998,\n-     999,  1000,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1591,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n-    1001,     0,     0,   122,   123,   124,     0,   125,   126,   127,\n-     128,   129,   130,   131,   132,  1002,   134,  1003,  1004,     0,\n-     137,   138,   139,   140,   141,   142,  1005,   606,   143,   144,\n-    1006,  1007,   147,  1591,   148,   149,   150,   151,   607,     0,\n-     608,     0,  1008,   155,   156,   157,   158,   159,   160,   161,\n-     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n-     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,  1009,  1010,   183,  1011,   184,     0,   185,   186,   187,\n-     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n-       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n-       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,\n-     212,   213,   214,   215,   216,   609,  1013,   218,     0,   219,\n-     220,  1014,   222,     0,   223,     0,   224,   225,    21,   226,\n-     227,   228,   229,   230,   231,     0,   232,     0,  1015,  1016,\n-     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,\n-     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n-     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,\n-     262,  1017,  1018,     0,  1019,     0,   266,   267,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n-     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,\n-     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,  1020,   309,  1021,   311,   312,   313,   314,  1022,   315,\n-     316,   317,   318,  1023,   611,   320,  1024,   322,   323,   324,\n-       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,\n-     330,   331,   332,   333,   334,   613,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,    25,    26,    27,     0,\n-     346,   347,   614,   349,   350,   351,   352,   353,   354,   355,\n-       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,  1026,   366,   367,   368,   369,     0,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-       0,   383,   384,   385,   386,   387,   388,  1027,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,    32,\n-       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,   411,   412,   413,  1028,   415,     0,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   616,   431,     0,   432,   433,    37,   434,   435,   436,\n-     437,   438,   439,   440,     0,  1029,  1030,     0,     0,   443,\n-     444,   617,   446,   618,  1031,   448,   449,   619,   451,   452,\n-     453,   454,   455,     0,     0,   456,   457,   458,    39,   459,\n-     460,   461,   462,     0,   463,   464,   465,   466,   467,   620,\n-    1032,     0,   470,   471,   472,   473,   474,   475,   476,     0,\n-       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,\n-     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,   498,  1033,     0,    44,     0,     0,\n-       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,\n-       0,  1038,  3067,     0,     0,     0,  1039,  1040,  1041,  1042,\n+       0,     0,  1595,     0,     0,     0,     0,     0,     0,     0,\n      110,   995,   517,   996,   997,   998,   999,  1000,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,     0,     0,  1001,     0,     0,   122,\n+     121,     0,     0,     0,  1595,     0,  1001,     0,     0,   122,\n      123,   124,     0,   125,   126,   127,   128,   129,   130,   131,\n      132,  1002,   134,  1003,  1004,     0,   137,   138,   139,   140,\n      141,   142,  1005,   606,   143,   144,  1006,  1007,   147,     0,\n      148,   149,   150,   151,   607,     0,   608,     0,  1008,   155,\n-     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,\n+     156,   157,   158,   159,   160,   161,   162,   163,  1595,   164,\n      165,   166,   167,   168,   169,     0,   170,   171,   172,   173,\n      174,   175,   176,   177,   178,   179,   180,  1009,  1010,   183,\n     1011,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n@@ -5108,490 +5070,490 @@ static const yytype_int16 yytable[] =\n      256,   257,   258,   259,   260,   261,   262,  1017,  1018,     0,\n     1019,     0,   266,   267,   268,   269,   270,   271,   272,   273,\n      274,   275,   276,     0,     0,   277,   278,   279,   280,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n+     281,   282,   283,   284,   285,   286,   287,   288,  1020,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,\n-     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,\n-     611,   320,  1024,   322,   323,   324,     0,   325,   326,     0,\n-       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,\n+     301,   302,   303,   304,   305,   306,   307,  1021,   309,  1022,\n+     311,   312,   313,   314,  1023,   315,   316,   317,   318,  1024,\n+     611,   320,  1025,   322,   323,   324,     0,   325,   326,     0,\n+       0,  1026,   328,   329,     0,     0,   330,   331,   332,   333,\n      334,   613,   336,   337,   338,   339,   340,   341,   342,   343,\n      344,   345,    25,    26,    27,     0,   346,   347,   614,   349,\n      350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n-     359,   360,   361,     0,   362,   363,   364,  1026,   366,   367,\n+     359,   360,   361,     0,   362,   363,   364,  1027,   366,   367,\n      368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,   382,     0,   383,   384,   385,\n-     386,   387,   388,  1027,   390,   391,   392,   393,   394,   395,\n+     386,   387,   388,  1028,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,    32,     0,   401,   402,   403,\n      404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n-    1028,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n+    1029,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   428,   429,   616,   431,     0,\n      432,   433,    37,   434,   435,   436,   437,   438,   439,   440,\n-       0,  1029,  1030,     0,     0,   443,   444,   617,   446,   618,\n-    1031,   448,   449,   619,   451,   452,   453,   454,   455,     0,\n+       0,  1030,  1031,     0,     0,   443,   444,   617,   446,   618,\n+    1032,   448,   449,   619,   451,   452,   453,   454,   455,     0,\n        0,   456,   457,   458,    39,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   620,  1032,     0,   470,   471,\n+     463,   464,   465,   466,   467,   620,  1033,     0,   470,   471,\n      472,   473,   474,   475,   476,     0,     0,   477,     0,    43,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,  1033,     0,    44,     0,     0,     0,     0,  1034,  1035,\n-    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,\n-       0,     0,  1039,  1040,  1041,  1042,  1180,   995,   517,   996,\n+     498,  1034,     0,    44,     0,     0,     0,     0,  1035,  1036,\n+    1037,     0,     0,     0,     0,  1038,     0,  1039,  3080,     0,\n+       0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,\n      997,   998,   999,  1000,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,  1181,   119,   120,   121,     0,     0,     0,\n-    1182,     0,  1001,     0,     0,  1183,   123,   124,     0,   125,\n-     126,   127,  1184,   129,   130,   131,   132,  1002,  1185,  1003,\n+     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n+       0,     0,  1001,     0,     0,   122,   123,   124,     0,   125,\n+     126,   127,   128,   129,   130,   131,   132,  1002,   134,  1003,\n     1004,     0,   137,   138,   139,   140,   141,   142,  1005,   606,\n      143,   144,  1006,  1007,   147,     0,   148,   149,   150,   151,\n-     607,     0,  1186,     0,  1187,   155,   156,   157,   158,   159,\n-    1188,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n-     169,     0,  1189,   171,   172,   173,   174,   175,   176,   177,\n+     607,     0,   608,     0,  1008,   155,   156,   157,   158,   159,\n+     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n      178,   179,   180,  1009,  1010,   183,  1011,   184,     0,   185,\n      186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n-     195,  1190,     0,   196,   197,   770,   199,   200,     0,   201,\n+     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,\n      202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n      210,  1012,   212,   213,   214,   215,   216,   609,  1013,   218,\n-       0,   219,   220,  1014,   222,     0,   223,     0,   224,  1191,\n-       0,  1192,   227,   228,  1193,  1194,   231,     0,   232,     0,\n+       0,   219,   220,  1014,   222,     0,   223,     0,   224,   225,\n+      21,   226,   227,   228,   229,   230,   231,     0,   232,     0,\n     1015,  1016,   235,     0,   236,   237,   238,   239,   240,   241,\n-     242,  1195,   244,   245,   246,   247,     0,   248,   249,   250,\n-     251,   252,   253,   254,     0,   255,  1196,   257,   258,   259,\n-     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,  1197,\n-    1198,   269,  1199,   271,   272,   273,   274,   275,   276,     0,\n-       0,   277,  1200,   279,  1201,     0,   281,   282,   283,   284,\n-     285,   286,   287,   288,  1202,   290,   291,   292,   293,   294,\n+     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,\n+     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,  1020,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,  1020,  1203,  1021,   311,   312,   313,   314,\n-    1022,   315,   316,  1204,   318,  1023,   611,   320,  1024,   322,\n-     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,\n-       0,     0,   330,   331,  1205,   333,  1206,   613,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,   614,  1207,   350,   351,   352,   353,\n+     305,   306,   307,  1021,   309,  1022,   311,   312,   313,   314,\n+    1023,   315,   316,   317,   318,  1024,   611,   320,  1025,   322,\n+     323,   324,     0,   325,   326,     0,     0,  1026,   328,   329,\n+       0,     0,   330,   331,   332,   333,   334,   613,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,\n+      27,     0,   346,   347,   614,   349,   350,   351,   352,   353,\n      354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n-     362,   363,   364,  1026,   366,   367,   368,   369,     0,   370,\n+     362,   363,   364,  1027,   366,   367,   368,   369,     0,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,     0,   383,   384,  1208,   386,   387,   388,  1027,\n+     381,   382,     0,   383,   384,   385,   386,   387,   388,  1028,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,  1209,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,  1210,   412,   413,  1028,   415,     0,   416,\n+     400,    32,     0,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,   413,  1029,   415,     0,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,  1211,   429,   616,   431,     0,   432,   433,     0,   434,\n-    1212,   436,   437,   438,   439,   440,     0,  1029,  1030,     0,\n-       0,   443,   444,   617,   446,   618,  1031,   448,   449,  1213,\n+     427,   428,   429,   616,   431,     0,   432,   433,    37,   434,\n+     435,   436,   437,   438,   439,   440,     0,  1030,  1031,     0,\n+       0,   443,   444,   617,   446,   618,  1032,   448,   449,   619,\n      451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n-       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,   468,  1032,  1214,   470,  1215,   472,   473,   474,   475,\n-     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n+      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n+     467,   620,  1033,     0,   470,   471,   472,   473,   474,   475,\n+     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   498,  1033,     0,     0,\n-       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,\n-       0,  1037,     0,  1038,  1216,     0,     0,     0,  1039,  1040,\n-    1041,  1042,   110,   995,   517,   996,   997,   998,   999,  1000,\n+     492,   493,   494,   495,   496,   497,   498,  1034,     0,    44,\n+       0,     0,     0,     0,  1035,  1036,  1037,     0,     0,     0,\n+       0,  1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,\n+    1042,  1043,  1183,   995,   517,   996,   997,   998,   999,  1000,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,  1001,     0,\n-       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,\n-     130,   131,   132,  1002,   134,  1003,  1004,  1462,   137,   138,\n+       0,   111,   112,   113,   114,   115,   116,   117,   118,  1184,\n+     119,   120,   121,     0,     0,     0,  1185,     0,  1001,     0,\n+       0,  1186,   123,   124,     0,   125,   126,   127,  1187,   129,\n+     130,   131,   132,  1002,  1188,  1003,  1004,     0,   137,   138,\n      139,   140,   141,   142,  1005,   606,   143,   144,  1006,  1007,\n-     147,     0,   148,   149,   150,   151,   607,     0,   608,     0,\n-    1008,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,\n+     147,     0,   148,   149,   150,   151,   607,     0,  1189,     0,\n+    1190,   155,   156,   157,   158,   159,  1191,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,  1192,   171,\n      172,   173,   174,   175,   176,   177,   178,   179,   180,  1009,\n     1010,   183,  1011,   184,     0,   185,   186,   187,   188,   189,\n-     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n+     190,     0,   191,   192,   193,   194,   195,  1193,     0,   196,\n      197,   770,   199,   200,     0,   201,   202,   203,     0,   204,\n      205,   206,     0,   207,   208,   209,   210,  1012,   212,   213,\n      214,   215,   216,   609,  1013,   218,     0,   219,   220,  1014,\n-     222,     0,   223,     0,   224,   225,  1463,   226,   227,   228,\n-     229,   230,   231,     0,   232,     0,  1015,  1016,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     222,     0,   223,     0,   224,  1194,     0,  1195,   227,   228,\n+    1196,  1197,   231,     0,   232,     0,  1015,  1016,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,  1198,   244,   245,\n      246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,   256,   257,   258,   259,   260,   261,   262,  1017,\n-    1018,     0,  1019,     0,   266,   267,   268,   269,   270,   271,\n-     272,   273,   274,   275,   276,     0,  1464,   277,   278,   279,\n-     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,\n-     309,  1021,   311,   312,   313,   314,  1022,   315,   316,   317,\n-     318,  1023,   611,   320,  1024,   322,   323,   324,     0,   325,\n-     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,\n-     332,   333,   334,   613,   336,   337,   338,   339,   340,   341,\n+       0,   255,  1199,   257,   258,   259,   260,   261,   262,  1017,\n+    1018,     0,  1019,     0,   266,  1200,  1201,   269,  1202,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,  1203,   279,\n+    1204,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+    1205,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,  1021,\n+    1206,  1022,   311,   312,   313,   314,  1023,   315,   316,  1207,\n+     318,  1024,   611,   320,  1025,   322,   323,   324,     0,   325,\n+     326,     0,     0,  1026,   328,   329,     0,     0,   330,   331,\n+    1208,   333,  1209,   613,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     614,   349,   350,   351,   352,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,  1026,\n+     614,  1210,   350,   351,   352,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,  1027,\n      366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,   385,   386,   387,   388,  1027,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,   413,  1028,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   616,\n-     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,\n-     439,   440,     0,  1029,  1030,     0,  1465,   443,   444,   617,\n-     446,   618,  1031,   448,   449,   619,   451,   452,   453,   454,\n+     384,  1211,   386,   387,   388,  1028,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,  1212,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,  1213,\n+     412,   413,  1029,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,  1214,   429,   616,\n+     431,     0,   432,   433,     0,   434,  1215,   436,   437,   438,\n+     439,   440,     0,  1030,  1031,     0,     0,   443,   444,   617,\n+     446,   618,  1032,   448,   449,  1216,   451,   452,   453,   454,\n      455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,   468,  1032,     0,\n-     470,   471,   472,   473,   474,   475,   476,     0,     0,   477,\n+     462,     0,   463,   464,   465,   466,   467,   468,  1033,  1217,\n+     470,  1218,   472,   473,   474,   475,   476,     0,     0,   477,\n        0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   498,  1033,     0,     0,     0,     0,     0,     0,\n-    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,\n-       0,     0,     0,     0,  1039,  1040,  1041,  1042,  1180,   995,\n+     496,   497,   498,  1034,     0,     0,     0,     0,     0,     0,\n+    1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,\n+    1219,     0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,\n      517,   996,   997,   998,   999,  1000,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n      114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,  1182,     0,  1001,     0,     0,  1183,   123,   124,\n-       0,   125,   126,   127,  1184,   129,   130,   131,   132,  1002,\n-    1185,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,\n+       0,     0,     0,     0,  1001,     0,     0,   122,   123,   124,\n+       0,   125,   126,   127,   128,   129,   130,   131,   132,  1002,\n+     134,  1003,  1004,  1465,   137,   138,   139,   140,   141,   142,\n     1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,\n-     150,   151,   607,     0,  1186,     0,  1187,   155,   156,   157,\n-     158,   159,  1188,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,  1189,   171,   172,   173,   174,   175,\n+     150,   151,   607,     0,   608,     0,  1008,   155,   156,   157,\n+     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,\n+     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,\n      176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,\n        0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n      193,   194,   195,     0,     0,   196,   197,   770,   199,   200,\n        0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n      208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,\n     1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,\n-     224,  1191,     0,  1192,   227,   228,  1193,  1194,   231,     0,\n+     224,   225,  1466,   226,   227,   228,   229,   230,   231,     0,\n      232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,  1195,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,  1196,   257,\n+     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,\n+     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,\n      258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,\n-     266,  1197,  1198,   269,  1199,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,  1200,   279,  1201,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,  1202,   290,   291,   292,\n+     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n+     276,     0,  1467,   277,   278,   279,   280,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,  1020,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,  1020,  1203,  1021,   311,   312,\n-     313,   314,  1022,   315,   316,  1204,   318,  1023,   611,   320,\n-    1024,   322,   323,   324,     0,   325,   326,     0,     0,  1025,\n-     328,   329,     0,     0,   330,   331,  1205,   333,  1206,   613,\n+     303,   304,   305,   306,   307,  1021,   309,  1022,   311,   312,\n+     313,   314,  1023,   315,   316,   317,   318,  1024,   611,   320,\n+    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,\n+     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   614,  1207,   350,   351,\n+       0,     0,     0,     0,   346,   347,   614,   349,   350,   351,\n      352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,  1026,   366,   367,   368,   369,\n+     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,  1208,   386,   387,\n-     388,  1027,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,  1209,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,  1210,   412,   413,  1028,   415,\n+     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,\n+     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,   411,   412,   413,  1029,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,  1211,   429,   616,   431,     0,   432,   433,\n-       0,   434,  1212,   436,   437,   438,   439,   440,     0,  1029,\n-    1030,     0,     0,   443,   444,   617,   446,   618,  1031,   448,\n-     449,  1213,   451,   452,   453,   454,   455,     0,     0,   456,\n+     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,\n+       0,   434,   435,   436,   437,   438,   439,   440,     0,  1030,\n+    1031,     0,  1468,   443,   444,   617,   446,   618,  1032,   448,\n+     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,\n      457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,  1032,  2193,   470,  1215,   472,   473,\n+     465,   466,   467,   468,  1033,     0,   470,   471,   472,   473,\n      474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,  1033,\n-       0,     0,     0,     0,     0,     0,  1034,  1035,  1036,     0,\n-       0,     0,     0,  1037,     0,  1038,     0,     0,     0,     0,\n-    1039,  1040,  1041,  1042,  1180,   995,   517,   996,   997,   998,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,  1034,\n+       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,\n+       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,\n+    1040,  1041,  1042,  1043,  1183,   995,   517,   996,   997,   998,\n      999,  1000,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     0,     0,     0,  1182,     0,\n-    1001,     0,     0,  1183,   123,   124,     0,   125,   126,   127,\n-    1184,   129,   130,   131,   132,  1002,  1185,  1003,  1004,     0,\n+     118,     0,   119,   120,   121,     0,     0,     0,  1185,     0,\n+    1001,     0,     0,  1186,   123,   124,     0,   125,   126,   127,\n+    1187,   129,   130,   131,   132,  1002,  1188,  1003,  1004,     0,\n      137,   138,   139,   140,   141,   142,  1005,   606,   143,   144,\n     1006,  1007,   147,     0,   148,   149,   150,   151,   607,     0,\n-    1186,     0,  1187,   155,   156,   157,   158,   159,  1188,   161,\n+    1189,     0,  1190,   155,   156,   157,   158,   159,  1191,   161,\n      162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n-    1189,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+    1192,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n      180,  1009,  1010,   183,  1011,   184,     0,   185,   186,   187,\n      188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n        0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n        0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,\n      212,   213,   214,   215,   216,   609,  1013,   218,     0,   219,\n-     220,  1014,   222,     0,   223,     0,   224,  1191,     0,  1192,\n-     227,   228,  1193,  1194,   231,     0,   232,     0,  1015,  1016,\n-     235,     0,   236,   237,   238,   239,   240,   241,   242,  1195,\n+     220,  1014,   222,     0,   223,     0,   224,  1194,     0,  1195,\n+     227,   228,  1196,  1197,   231,     0,   232,     0,  1015,  1016,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,  1198,\n      244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n-     253,   254,     0,   255,  1196,   257,   258,   259,   260,   261,\n-     262,  1017,  1018,     0,  1019,     0,   266,  1197,  1198,   269,\n-    1199,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n-    1200,   279,  1201,     0,   281,   282,   283,   284,   285,   286,\n-     287,   288,  1202,   290,   291,   292,   293,   294,   295,   296,\n+     253,   254,     0,   255,  1199,   257,   258,   259,   260,   261,\n+     262,  1017,  1018,     0,  1019,     0,   266,  1200,  1201,   269,\n+    1202,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+    1203,   279,  1204,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,  1205,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,  1020,  1203,  1021,   311,   312,   313,   314,  1022,   315,\n-     316,  1204,   318,  1023,   611,   320,  1024,   322,   323,   324,\n-       0,   325,   326,     0,     0,  1025,   328,   329,     0,     0,\n-     330,   331,  1205,   333,  1206,   613,   336,   337,   338,   339,\n+     307,  1021,  1206,  1022,   311,   312,   313,   314,  1023,   315,\n+     316,  1207,   318,  1024,   611,   320,  1025,   322,   323,   324,\n+       0,   325,   326,     0,     0,  1026,   328,   329,     0,     0,\n+     330,   331,  1208,   333,  1209,   613,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n-     346,   347,   614,  1207,   350,   351,   352,   353,   354,   355,\n+     346,   347,   614,  1210,   350,   351,   352,   353,   354,   355,\n        0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,  1026,   366,   367,   368,   369,     0,   370,   371,   372,\n+     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-       0,   383,   384,  1208,   386,   387,   388,  1027,   390,   391,\n+       0,   383,   384,  1211,   386,   387,   388,  1028,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n-    1209,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,  1210,   412,   413,  1028,   415,     0,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,  1211,\n-     429,   616,   431,     0,   432,   433,     0,   434,  1212,   436,\n-     437,   438,   439,   440,     0,  1029,  1030,     0,     0,   443,\n-     444,   617,   446,   618,  1031,   448,   449,  1213,   451,   452,\n+    1212,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,  1213,   412,   413,  1029,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,  1214,\n+     429,   616,   431,     0,   432,   433,     0,   434,  1215,   436,\n+     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,\n+     444,   617,   446,   618,  1032,   448,   449,  1216,   451,   452,\n      453,   454,   455,     0,     0,   456,   457,   458,     0,   459,\n      460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n-    1032,     0,   470,  1215,   472,   473,   474,   475,   476,     0,\n+    1033,  2203,   470,  1218,   472,   473,   474,   475,   476,     0,\n        0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n      484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,   498,  1033,     0,     0,     0,     0,\n-       0,     0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,\n-       0,  1038,  2244,     0,     0,     0,  1039,  1040,  1041,  1042,\n-     110,   995,   517,   996,   997,   998,   999,  1000,     0,     0,\n+     494,   495,   496,   497,   498,  1034,     0,     0,     0,     0,\n+       0,     0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,\n+       0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,\n+    1183,   995,   517,   996,   997,   998,   999,  1000,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n-     112,   113,   114,   115,   116,   117,   118, -1038,   119,   120,\n-     121,     0,     0,     0,     0, -1038,  1001,     0,     0,   122,\n-     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,\n-     132,  1002,   134,  1003,  1004,     0,   137,   138,   139,   140,\n+     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n+     121,     0,     0,     0,  1185,     0,  1001,     0,     0,  1186,\n+     123,   124,     0,   125,   126,   127,  1187,   129,   130,   131,\n+     132,  1002,  1188,  1003,  1004,     0,   137,   138,   139,   140,\n      141,   142,  1005,   606,   143,   144,  1006,  1007,   147,     0,\n-     148,   149,   150,   151,   607,     0,   608,     0,  1008,   155,\n-     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,\n+     148,   149,   150,   151,   607,     0,  1189,     0,  1190,   155,\n+     156,   157,   158,   159,  1191,   161,   162,   163,     0,   164,\n+     165,   166,   167,   168,   169,     0,  1192,   171,   172,   173,\n      174,   175,   176,   177,   178,   179,   180,  1009,  1010,   183,\n     1011,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n      191,   192,   193,   194,   195,     0,     0,   196,   197,   770,\n      199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n        0,   207,   208,   209,   210,  1012,   212,   213,   214,   215,\n      216,   609,  1013,   218,     0,   219,   220,  1014,   222,     0,\n-     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,\n+     223,     0,   224,  1194,     0,  1195,   227,   228,  1196,  1197,\n      231,     0,   232,     0,  1015,  1016,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     238,   239,   240,   241,   242,  1198,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-     256,   257,   258,   259,   260,   261,   262,  1017,  1018,     0,\n-    1019,     0,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n+    1199,   257,   258,   259,   260,   261,   262,  1017,  1018,     0,\n+    1019,     0,   266,  1200,  1201,   269,  1202,   271,   272,   273,\n+     274,   275,   276,     0,     0,   277,  1203,   279,  1204,     0,\n+     281,   282,   283,   284,   285,   286,   287,   288,  1205,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,  1020,   309,  1021,\n-     311,   312,   313,   314,  1022,   315,   316,   317,   318,  1023,\n-     611,   320,  1024,   322,   323,   324,     0,   325,   326,     0,\n-       0,  1025,   328,   329,     0,     0,   330,   331,   332,   333,\n-     334,   613,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,     0,     0,     0,     0,   346,   347,   614,   349,\n+     301,   302,   303,   304,   305,   306,   307,  1021,  1206,  1022,\n+     311,   312,   313,   314,  1023,   315,   316,  1207,   318,  1024,\n+     611,   320,  1025,   322,   323,   324,     0,   325,   326,     0,\n+       0,  1026,   328,   329,     0,     0,   330,   331,  1208,   333,\n+    1209,   613,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,     0,     0,     0,     0,   346,   347,   614,  1210,\n      350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n-     359,   360,   361,     0,   362,   363,   364,  1026,   366,   367,\n+     359,   360,   361,     0,   362,   363,   364,  1027,   366,   367,\n      368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,\n-     386,   387,   388,  1027,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n-    1028,   415, -1038,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   616,   431,     0,\n-     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,\n-       0,  1029,  1030,     0,     0,   443,   444,   617,   446,   618,\n-    1031,   448,   449,   619,   451,   452,   453,   454,   455,     0,\n+     377,   378,   379,   380,   381,   382,     0,   383,   384,  1211,\n+     386,   387,   388,  1028,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,     0,  1212,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,  1213,   412,   413,\n+    1029,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   427,  1214,   429,   616,   431,     0,\n+     432,   433,     0,   434,  1215,   436,   437,   438,   439,   440,\n+       0,  1030,  1031,     0,     0,   443,   444,   617,   446,   618,\n+    1032,   448,   449,  1216,   451,   452,   453,   454,   455,     0,\n        0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   468,  1032,     0,   470,   471,\n+     463,   464,   465,   466,   467,   468,  1033,     0,   470,  1218,\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,  1033,     0,     0,     0,     0,     0,     0,  1034,  1035,\n-    1036,     0,     0,     0,     0,  1037,     0,  1038,     0,     0,\n-       0,     0,  1039,  1040,  1041,  1042,  1180,   995,   517,   996,\n+     498,  1034,     0,     0,     0,     0,     0,     0,  1035,  1036,\n+    1037,     0,     0,     0,     0,  1038,     0,  1039,  2254,     0,\n+       0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,\n      997,   998,   999,  1000,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n-    1182,     0,  1001,     0,     0,  1183,   123,   124,     0,   125,\n-     126,   127,  1184,   129,   130,   131,   132,  1002,  1185,  1003,\n+     116,   117,   118, -1049,   119,   120,   121,     0,     0,     0,\n+       0, -1049,  1001,     0,     0,   122,   123,   124,     0,   125,\n+     126,   127,   128,   129,   130,   131,   132,  1002,   134,  1003,\n     1004,     0,   137,   138,   139,   140,   141,   142,  1005,   606,\n      143,   144,  1006,  1007,   147,     0,   148,   149,   150,   151,\n-     607,     0,  1186,     0,  1187,   155,   156,   157,   158,   159,\n-    1188,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n-     169,     0,  1189,   171,   172,   173,   174,   175,   176,   177,\n+     607,     0,   608,     0,  1008,   155,   156,   157,   158,   159,\n+     160,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,   170,   171,   172,   173,   174,   175,   176,   177,\n      178,   179,   180,  1009,  1010,   183,  1011,   184,     0,   185,\n      186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n      195,     0,     0,   196,   197,   770,   199,   200,     0,   201,\n      202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n      210,  1012,   212,   213,   214,   215,   216,   609,  1013,   218,\n-       0,   219,   220,  1014,   222,     0,   223,     0,   224,  1191,\n-       0,  1192,   227,   228,  1193,  1194,   231,     0,   232,     0,\n+       0,   219,   220,  1014,   222,     0,   223,     0,   224,   225,\n+       0,   226,   227,   228,   229,   230,   231,     0,   232,     0,\n     1015,  1016,   235,     0,   236,   237,   238,   239,   240,   241,\n-     242,  1195,   244,   245,   246,   247,     0,   248,   249,   250,\n-     251,   252,   253,   254,     0,   255,  1196,   257,   258,   259,\n-     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,  1197,\n-    1198,   269,  1199,   271,   272,   273,   274,   275,   276,     0,\n-       0,   277,  1200,   279,  1201,     0,   281,   282,   283,   284,\n-     285,   286,   287,   288,  1202,   290,   291,   292,   293,   294,\n+     242,   243,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,   256,   257,   258,   259,\n+     260,   261,   262,  1017,  1018,     0,  1019,     0,   266,   267,\n+     268,   269,   270,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,   278,   279,   280,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,  1020,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,  1020,  1203,  1021,   311,   312,   313,   314,\n-    1022,   315,   316,  1204,   318,  1023,   611,   320,  1024,   322,\n-     323,   324,     0,   325,   326,     0,     0,  1025,   328,   329,\n-       0,     0,   330,   331,  1205,   333,  1206,   613,   336,   337,\n+     305,   306,   307,  1021,   309,  1022,   311,   312,   313,   314,\n+    1023,   315,   316,   317,   318,  1024,   611,   320,  1025,   322,\n+     323,   324,     0,   325,   326,     0,     0,  1026,   328,   329,\n+       0,     0,   330,   331,   332,   333,   334,   613,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,   614,  1207,   350,   351,   352,   353,\n+       0,     0,   346,   347,   614,   349,   350,   351,   352,   353,\n      354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n-     362,   363,   364,  1026,   366,   367,   368,   369,     0,   370,\n+     362,   363,   364,  1027,   366,   367,   368,   369,     0,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,     0,   383,   384,  1208,   386,   387,   388,  1027,\n+     381,   382,     0,   383,   384,   385,   386,   387,   388,  1028,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,  1209,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,  1210,   412,   413,  1028,   415,     0,   416,\n+     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,   411,   412,   413,  1029,   415, -1049,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,  1211,   429,   616,   431,     0,   432,   433,     0,   434,\n-    1212,   436,   437,   438,   439,   440,     0,  1029,  1030,     0,\n-       0,   443,   444,   617,   446,   618,  1031,   448,   449,  1213,\n+     427,   428,   429,   616,   431,     0,   432,   433,     0,   434,\n+     435,   436,   437,   438,   439,   440,     0,  1030,  1031,     0,\n+       0,   443,   444,   617,   446,   618,  1032,   448,   449,   619,\n      451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n        0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,   468,  1032,     0,   470,  1215,   472,   473,   474,   475,\n+     467,   468,  1033,     0,   470,   471,   472,   473,   474,   475,\n      476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   498,  1033,     0,     0,\n-       0,     0,     0,     0,  1034,  1035,  1036,     0,     0,     0,\n-       0,  1037,     0,  1038,  2944,     0,     0,     0,  1039,  1040,\n-    1041,  1042,  1180,   995,   517,   996,   997,   998,   999,  1000,\n+     492,   493,   494,   495,   496,   497,   498,  1034,     0,     0,\n+       0,     0,     0,     0,  1035,  1036,  1037,     0,     0,     0,\n+       0,  1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,\n+    1042,  1043,  1183,   995,   517,   996,   997,   998,   999,  1000,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,  1182,     0,  1001,     0,\n-       0,  1183,   123,   124,     0,   125,   126,   127,  1184,   129,\n-     130,   131,   132,  1002,  1185,  1003,  1004,     0,   137,   138,\n+     119,   120,   121,     0,     0,     0,  1185,     0,  1001,     0,\n+       0,  1186,   123,   124,     0,   125,   126,   127,  1187,   129,\n+     130,   131,   132,  1002,  1188,  1003,  1004,     0,   137,   138,\n      139,   140,   141,   142,  1005,   606,   143,   144,  1006,  1007,\n-     147,     0,   148,   149,   150,   151,   607,     0,  1186,     0,\n-    1187,   155,   156,   157,   158,   159,  1188,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,  1189,   171,\n+     147,     0,   148,   149,   150,   151,   607,     0,  1189,     0,\n+    1190,   155,   156,   157,   158,   159,  1191,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,  1192,   171,\n      172,   173,   174,   175,   176,   177,   178,   179,   180,  1009,\n     1010,   183,  1011,   184,     0,   185,   186,   187,   188,   189,\n      190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n      197,   770,   199,   200,     0,   201,   202,   203,     0,   204,\n      205,   206,     0,   207,   208,   209,   210,  1012,   212,   213,\n      214,   215,   216,   609,  1013,   218,     0,   219,   220,  1014,\n-     222,     0,   223,     0,   224,  1191,     0,  1192,   227,   228,\n-    1193,  1194,   231,     0,   232,     0,  1015,  1016,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,  1195,   244,   245,\n+     222,     0,   223,     0,   224,  1194,     0,  1195,   227,   228,\n+    1196,  1197,   231,     0,   232,     0,  1015,  1016,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,  1198,   244,   245,\n      246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,  1196,   257,   258,   259,   260,   261,   262,  1017,\n-    1018,     0,  1019,     0,   266,  1197,  1198,   269,  1199,   271,\n-     272,   273,   274,   275,   276,     0,     0,   277,  1200,   279,\n-    1201,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-    1202,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,\n-    1203,  1021,   311,   312,   313,   314,  1022,   315,   316,  1204,\n-     318,  1023,   611,   320,  1024,   322,   323,   324,     0,   325,\n-     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,\n-    1205,   333,  1206,   613,   336,   337,   338,   339,   340,   341,\n+       0,   255,  1199,   257,   258,   259,   260,   261,   262,  1017,\n+    1018,     0,  1019,     0,   266,  1200,  1201,   269,  1202,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,  1203,   279,\n+    1204,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+    1205,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,  1021,\n+    1206,  1022,   311,   312,   313,   314,  1023,   315,   316,  1207,\n+     318,  1024,   611,   320,  1025,   322,   323,   324,     0,   325,\n+     326,     0,     0,  1026,   328,   329,     0,     0,   330,   331,\n+    1208,   333,  1209,   613,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     614,  1207,   350,   351,   352,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,  1026,\n+     614,  1210,   350,   351,   352,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,  1027,\n      366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,  1208,   386,   387,   388,  1027,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,  1209,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,  1210,\n-     412,   413,  1028,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,  1211,   429,   616,\n-     431,     0,   432,   433,     0,   434,  1212,   436,   437,   438,\n-     439,   440,     0,  1029,  1030,     0,     0,   443,   444,   617,\n-     446,   618,  1031,   448,   449,  1213,   451,   452,   453,   454,\n+     384,  1211,   386,   387,   388,  1028,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,  1212,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,  1213,\n+     412,   413,  1029,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,  1214,   429,   616,\n+     431,     0,   432,   433,     0,   434,  1215,   436,   437,   438,\n+     439,   440,     0,  1030,  1031,     0,     0,   443,   444,   617,\n+     446,   618,  1032,   448,   449,  1216,   451,   452,   453,   454,\n      455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,   468,  1032,     0,\n-     470,  1215,   472,   473,   474,   475,   476,     0,     0,   477,\n+     462,     0,   463,   464,   465,   466,   467,   468,  1033,     0,\n+     470,  1218,   472,   473,   474,   475,   476,     0,     0,   477,\n        0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n      486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   498,  1033,     0,     0,     0,     0,     0,     0,\n-    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,\n-       0,     0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,\n-     517,   996,   997,     0,   999,  1000,     0,     0,     0,     0,\n+     496,   497,   498,  1034,     0,     0,     0,     0,     0,     0,\n+    1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,\n+    2954,     0,     0,     0,  1040,  1041,  1042,  1043,  1183,   995,\n+     517,   996,   997,   998,   999,  1000,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n      114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,     0,     0,  1001,     0,     0,   122,   123,   124,\n-       0,   125,   126,   127,   128,   129,   130,   131,   132,  1002,\n-     134,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,\n+       0,     0,  1185,     0,  1001,     0,     0,  1186,   123,   124,\n+       0,   125,   126,   127,  1187,   129,   130,   131,   132,  1002,\n+    1188,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,\n     1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,\n-     150,   151,   607,     0,   608,     0,   154,   155,   156,   157,\n-     158,   159,   160,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,  1009,  1010,   183,     0,   184,\n+     150,   151,   607,     0,  1189,     0,  1190,   155,   156,   157,\n+     158,   159,  1191,   161,   162,   163,     0,   164,   165,   166,\n+     167,   168,   169,     0,  1192,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,\n        0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n      193,   194,   195,     0,     0,   196,   197,   770,   199,   200,\n        0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n      208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,\n     1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,\n-     224,   225,    21,   226,   227,   228,   229,   230,   231,     0,\n+     224,  1194,     0,  1195,   227,   228,  1196,  1197,   231,     0,\n      232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,   256,   257,\n+     240,   241,   242,  1198,   244,   245,   246,   247,     0,   248,\n+     249,   250,   251,   252,   253,   254,     0,   255,  1199,   257,\n      258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,\n-     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,\n+     266,  1200,  1201,   269,  1202,   271,   272,   273,   274,   275,\n+     276,     0,     0,   277,  1203,   279,  1204,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,  1205,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,\n-     313,   314,     0,   315,   316,   317,   318,  1023,   611,   320,\n-    1024,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n-     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,\n+     303,   304,   305,   306,   307,  1021,  1206,  1022,   311,   312,\n+     313,   314,  1023,   315,   316,  1207,   318,  1024,   611,   320,\n+    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,\n+     328,   329,     0,     0,   330,   331,  1208,   333,  1209,   613,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-      25,    26,    27,     0,   346,   347,   614,   349,   350,   351,\n+       0,     0,     0,     0,   346,   347,   614,  1210,   350,   351,\n      352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,  1026,   366,   367,   368,   369,\n+     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,   385,   386,   387,\n-     388,  1027,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,    32,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,   411,   412,   413,  1028,   415,\n+     379,   380,   381,   382,     0,   383,   384,  1211,   386,   387,\n+     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,     0,  1212,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,  1213,   412,   413,  1029,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,\n-      37,   434,   435,   436,   437,   438,   439,   440,     0,  1029,\n-    1030,     0,     0,   443,   444,   617,   446,   618,  1031,   448,\n-     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,\n-     457,   458,    39,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   620,  1032,     0,   470,   471,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,    43,   478,   479,\n+     425,   426,   427,  1214,   429,   616,   431,     0,   432,   433,\n+       0,   434,  1215,   436,   437,   438,   439,   440,     0,  1030,\n+    1031,     0,     0,   443,   444,   617,   446,   618,  1032,   448,\n+     449,  1216,   451,   452,   453,   454,   455,     0,     0,   456,\n+     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n+     465,   466,   467,   468,  1033,     0,   470,  1218,   472,   473,\n+     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,\n-       0,    44,     0,     0,     0,   110,   995,   517,   996,   997,\n-     998,   999,  1000,  1037,     0,  1038,     0,     0,     0,     0,\n-    1039,  1040,  1041,  1042,   111,   112,   113,   114,   115,   116,\n-     117,   118,  1637,   119,   120,   121,     0,     0,     0,     0,\n-       0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,\n-     127,   128,   129,   130,   131,   132,  1002,   134,  1003,  1004,\n-       0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,\n-     144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,\n-       0,   608,     0,  1008,   155,   156,   157,   158,   159,   160,\n-     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n-       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,  1009,  1010,   183,  1011,   184,     0,   185,   186,\n-     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n-       0,     0,   196,   197,   770,   199,   200,     0,   201,   202,\n-     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n-    1012,   212,   213,   214,   215,   216,   609,  1013,   218,     0,\n-     219,   220,  1014,   222,     0,   223,     0,   224,   225,     0,\n-     226,   227,   228,   229,   230,   231,     0,   232,     0,  1015,\n-    1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n-     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,\n-     261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n-     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,\n-     315,   316,   317,   318,  1023,   611,   320,  1024,   322,   323,\n-     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,\n-       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n-       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n-     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,  1026,   366,   367,   368,   369,     0,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,   385,   386,   387,   388,  1027,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,  1028,   415,     0,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n-     436,   437,   438,   439,   440,     0,  1029,  1030,     0,     0,\n-     443,   444,   617,   446,   618,  1031,   448,   449,   619,   451,\n-     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n-     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,  1032,     0,   470,   471,   472,   473,   474,   475,   476,\n-       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,  1033,     0,     0,     0,\n-       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,\n-    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,\n-    1042,   110,  1652,   517,   996,   997,   998,  1653,  1000,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     111,   112,   113,   114,   115,   116,   117,   118,  1654,   119,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,  1034,\n+       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,\n+       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,\n+    1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,     0,\n+     999,  1000,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n+     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n+    1001,     0,     0,   122,   123,   124,     0,   125,   126,   127,\n+     128,   129,   130,   131,   132,  1002,   134,  1003,  1004,     0,\n+     137,   138,   139,   140,   141,   142,  1005,   606,   143,   144,\n+    1006,  1007,   147,     0,   148,   149,   150,   151,   607,     0,\n+     608,     0,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,  1009,  1010,   183,     0,   184,     0,   185,   186,   187,\n+     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n+       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n+       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,\n+     212,   213,   214,   215,   216,   609,  1013,   218,     0,   219,\n+     220,  1014,   222,     0,   223,     0,   224,   225,    21,   226,\n+     227,   228,   229,   230,   231,     0,   232,     0,  1015,  1016,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n+     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,\n+     262,  1017,  1018,     0,  1019,     0,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,  1020,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,  1021,   309,  1022,   311,   312,   313,   314,     0,   315,\n+     316,   317,   318,  1024,   611,   320,  1025,   322,   323,   324,\n+       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n+     330,   331,   332,   333,   334,   613,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,    25,    26,    27,     0,\n+     346,   347,   614,   349,   350,   351,   352,   353,   354,   355,\n+       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n+     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+       0,   383,   384,   385,   386,   387,   388,  1028,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,    32,\n+       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,   413,  1029,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   616,   431,     0,   432,   433,    37,   434,   435,   436,\n+     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,\n+     444,   617,   446,   618,  1032,   448,   449,   619,   451,   452,\n+     453,   454,   455,     0,     0,   456,   457,   458,    39,   459,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,   620,\n+    1033,     0,   470,   471,   472,   473,   474,   475,   476,     0,\n+       0,   477,     0,    43,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   498,     0,     0,    44,     0,     0,\n+       0,   110,   995,   517,   996,   997,   998,   999,  1000,  1038,\n+       0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,\n+     111,   112,   113,   114,   115,   116,   117,   118,  1641,   119,\n      120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,\n      122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n      131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,\n@@ -5612,37 +5574,37 @@ static const yytype_int16 yytable[] =\n      255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,\n        0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,\n      273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,\n-    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,\n-    1023,   611,   320,  1024,   322,   323,   324,     0,   325,   326,\n-       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,\n+     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,\n+    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,\n+    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,\n+       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,\n      333,   334,   613,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   614,\n      349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,  1026,   366,\n+     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-     385,   386,   387,   388,  1027,   390,   391,   392,   393,   394,\n+     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-     413,  1028,   415,     0,   416,   417,   418,   419,   420,   421,\n+     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   428,   429,   616,   431,\n        0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n-     440,     0,  1029,  1030,     0,     0,   443,   444,   617,   446,\n-     618,  1031,   448,   449,   619,   451,   452,   453,   454,   455,\n+     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,\n+     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,  1032,     0,   470,\n+       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,\n      471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,  1033,     0,     0,     0,     0,     0,     0,  1034,\n-    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,\n-       0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,   517,\n-     996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,\n+     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,\n+    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,\n+       0,     0,     0,  1040,  1041,  1042,  1043,   110,  1656,   517,\n+     996,   997,   998,  1657,  1000,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n-     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n+     115,   116,   117,   118,  1658,   119,   120,   121,     0,     0,\n        0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,\n      125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,\n     1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,\n@@ -5656,41 +5618,41 @@ static const yytype_int16 yytable[] =\n      201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n      209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,\n      218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,\n-     225,  1463,   226,   227,   228,   229,   230,   231,     0,   232,\n+     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,\n        0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,     0,   248,   249,\n      250,   251,   252,   253,   254,     0,   255,   256,   257,   258,\n      259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,\n      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n        0,     0,   277,   278,   279,   280,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n+     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,\n-     314,  1022,   315,   316,   317,   318,  1023,   611,   320,  1024,\n-     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,\n+     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,\n+     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,\n+     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,\n      329,     0,     0,   330,   331,   332,   333,   334,   613,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n        0,     0,     0,   346,   347,   614,   349,   350,   351,   352,\n      353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,  1026,   366,   367,   368,   369,     0,\n+       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n      380,   381,   382,     0,   383,   384,   385,   386,   387,   388,\n-    1027,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,   413,  1028,   415,     0,\n+     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n      426,   427,   428,   429,   616,   431,     0,   432,   433,     0,\n-     434,   435,   436,   437,   438,   439,   440,     0,  1029,  1030,\n-       0,     0,   443,   444,   617,   446,   618,  1031,   448,   449,\n+     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,\n+       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,\n      619,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n      458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,  1032,     0,   470,   471,   472,   473,   474,\n+     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,\n      475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,  1033,     0,\n-       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,\n-       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,\n-    1040,  1041,  1042,   110,   995,   517,   996,   997,   998,   999,\n+     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,\n+       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,\n+       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,\n+    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,\n     1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,\n@@ -5706,7 +5668,7 @@ static const yytype_int16 yytable[] =\n      196,   197,   770,   199,   200,     0,   201,   202,   203,     0,\n      204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,\n      213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,\n-    1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,\n+    1014,   222,     0,   223,     0,   224,   225,  1466,   226,   227,\n      228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,\n        0,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n@@ -5714,33 +5676,33 @@ static const yytype_int16 yytable[] =\n     1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,\n      271,   272,   273,   274,   275,   276,     0,     0,   277,   278,\n      279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,\n-     317,   318,  1023,   611,   320,  1024,   322,   323,   324,     0,\n-     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,\n+    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,\n+     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,\n+     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,\n      331,   332,   333,   334,   613,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n      347,   614,   349,   350,   351,   352,   353,   354,   355,     0,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-    1026,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   385,   386,   387,   388,  1027,   390,   391,   392,\n+     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,   413,  1028,   415,     0,   416,   417,   418,   419,\n+     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n      616,   431,     0,   432,   433,     0,   434,   435,   436,   437,\n-     438,   439,   440,     0,  1029,  1030,     0,     0,   443,   444,\n-     617,   446,   618,  1031,   448,   449,   619,   451,   452,   453,\n+     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,\n+     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,\n      454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,  1032,\n+     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,\n        0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,  1033,     0,     0,     0,     0,     0,\n-       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,\n-    1038,  1978,     0,     0,     0,  1039,  1040,  1041,  1042,   110,\n+     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,\n+       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,\n+    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,\n      995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n@@ -5764,34 +5726,34 @@ static const yytype_int16 yytable[] =\n      257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,\n        0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,\n-     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   611,\n-     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,\n-    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n+     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,\n+     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,\n+     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,\n+    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n      613,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,     0,     0,     0,     0,   346,   347,   614,   349,   350,\n      351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,  1026,   366,   367,   368,\n+     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n-     387,   388,  1027,   390,   391,   392,   393,   394,   395,   396,\n+     387,   388,  1028,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,  1028,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   616,   431,     0,   432,\n-     433,  2578,   434,   435,   436,   437,   438,   439,   440,     0,\n-    1029,  1030,     0,     0,   443,   444,   617,   446,   618,  1031,\n+     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n+    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,\n      448,   449,   619,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,  1032,     0,   470,   471,   472,\n+     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,\n-       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,\n-       0,  1039,  1040,  1041,  1042,   110,   995,   517,   996,   997,\n+    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,\n+       0,     0,     0,     0,  1038,     0,  1039,  1988,     0,     0,\n+       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,\n      998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n      117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n@@ -5815,43 +5777,43 @@ static const yytype_int16 yytable[] =\n      261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,\n      269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n      277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,\n-     315,   316,   317,   318,  1023,   611,   320,  1024,   322,   323,\n-     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,\n+     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,\n+     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,\n+     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,\n        0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n        0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n      355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,  1026,   366,   367,   368,   369,     0,   370,   371,\n+     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,   385,   386,   387,   388,  1027,   390,\n+     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n        0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,  1028,   415,     0,   416,   417,\n+     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n-     436,   437,   438,   439,   440,     0,  1029,  1030,     0,     0,\n-     443,   444,   617,   446,   618,  1031,   448,   449,   619,   451,\n+     428,   429,   616,   431,     0,   432,   433,  2588,   434,   435,\n+     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,\n+     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,\n      452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n      459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,  1032,     0,   470,   471,   472,   473,   474,   475,   476,\n-       0,  2683,   477,     0,     0,   478,   479,   480,   481,   482,\n+     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,\n+       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,  1033,     0,     0,     0,\n-       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,\n-    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,\n-    1042,   110,   995,   517,   996,   997,   998,   999,  1000,     0,\n+     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,\n+       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,\n+    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,\n+    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     111,   112,   113,   114,   115,   116,   117,   118,  2895,   119,\n+     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,\n      122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n      131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,\n      140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,\n        0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,\n      155,   156,   157,   158,   159,   160,   161,   162,   163,     0,\n-     164,   165,   166,   167,   168,   169,     0,   170,   171,  2896,\n+     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,\n      173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,\n      183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,\n        0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n@@ -5859,50 +5821,50 @@ static const yytype_int16 yytable[] =\n      206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,\n      215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,\n        0,   223,     0,   224,   225,     0,   226,   227,   228,   229,\n-     230,   231,     0,   232,     0,  2897,  1016,   235,     0,   236,\n+     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n      255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,\n        0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,\n      273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,\n-    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,\n-    1023,   611,   320,  1024,   322,   323,   324,     0,   325,   326,\n-       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,\n+     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,\n+    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,\n+    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,\n+       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,\n      333,   334,   613,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   614,\n      349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,  1026,   366,\n+     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-     385,   386,   387,  2898,  1027,   390,   391,   392,   393,   394,\n+     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-     413,  1028,   415,     0,   416,   417,   418,   419,   420,   421,\n+     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   428,   429,   616,   431,\n        0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n-     440,     0,  1029,  1030,     0,     0,   443,   444,   617,   446,\n-     618,  1031,   448,   449,   619,   451,   452,   453,   454,   455,\n+     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,\n+     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,  1032,     0,   470,\n-     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,\n+     471,   472,   473,   474,   475,   476,     0,  2695,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,  1033,     0,     0,     0,     0,     0,     0,  1034,\n-    1035,  1036,     0,     0,     0,     0,  1037,     0,  2899,     0,\n-       0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,   517,\n+     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,\n+    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,\n+       0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,\n      996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n-     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n+     115,   116,   117,   118,  2905,   119,   120,   121,     0,     0,\n        0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,\n      125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,\n     1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,\n      606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,\n      151,   607,     0,   608,     0,  1008,   155,   156,   157,   158,\n      159,   160,   161,   162,   163,     0,   164,   165,   166,   167,\n-     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,\n+     168,   169,     0,   170,   171,  2906,   173,   174,   175,   176,\n      177,   178,   179,   180,  1009,  1010,   183,  1011,   184,     0,\n      185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n      194,   195,     0,     0,   196,   197,   770,   199,   200,     0,\n@@ -5910,40 +5872,40 @@ static const yytype_int16 yytable[] =\n      209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,\n      218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,\n      225,     0,   226,   227,   228,   229,   230,   231,     0,   232,\n-       0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,\n+       0,  2907,  1016,   235,     0,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,     0,   248,   249,\n      250,   251,   252,   253,   254,     0,   255,   256,   257,   258,\n      259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,\n      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n        0,     0,   277,   278,   279,   280,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n+     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,\n-     314,  1022,   315,   316,   317,   318,  1023,   611,   320,  1024,\n-     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,\n+     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,\n+     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,\n+     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,\n      329,     0,     0,   330,   331,   332,   333,   334,   613,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n        0,     0,     0,   346,   347,   614,   349,   350,   351,   352,\n      353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,  1026,   366,   367,   368,   369,     0,\n+       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,\n-    1027,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     380,   381,   382,     0,   383,   384,   385,   386,   387,  2908,\n+    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,   413,  1028,   415,     0,\n+     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   429,   616,   431,     0,   432,   433,  3029,\n-     434,   435,   436,   437,   438,   439,   440,     0,  1029,  1030,\n-       0,     0,   443,   444,   617,   446,   618,  1031,   448,   449,\n+     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,\n+     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,\n+       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,\n      619,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n      458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,  1032,     0,   470,   471,   472,   473,   474,\n+     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,\n      475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,  1033,     0,\n-       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,\n-       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,\n-    1040,  1041,  1042,   110,   995,   517,   996,   997,   998,   999,\n+     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,\n+       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,\n+       0,     0,  1038,     0,  2909,     0,     0,     0,     0,  1040,\n+    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,\n     1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,\n@@ -5967,33 +5929,33 @@ static const yytype_int16 yytable[] =\n     1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,\n      271,   272,   273,   274,   275,   276,     0,     0,   277,   278,\n      279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,\n-     317,   318,  1023,   611,   320,  1024,   322,   323,   324,     0,\n-     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,\n+    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,\n+     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,\n+     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,\n      331,   332,   333,   334,   613,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n      347,   614,   349,   350,   351,   352,   353,   354,   355,     0,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-    1026,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   385,   386,   387,   388,  1027,   390,   391,   392,\n+     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,   413,  1028,   415,     0,   416,   417,   418,   419,\n+     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     616,   431,     0,   432,   433,  3162,   434,   435,   436,   437,\n-     438,   439,   440,     0,  1029,  1030,     0,     0,   443,   444,\n-     617,   446,   618,  1031,   448,   449,   619,   451,   452,   453,\n+     616,   431,     0,   432,   433,  3042,   434,   435,   436,   437,\n+     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,\n+     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,\n      454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,  1032,\n+     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,\n        0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,  1033,     0,     0,     0,     0,     0,\n-       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,\n-    1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   110,\n+     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,\n+       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,\n+    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,\n      995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n@@ -6017,34 +5979,34 @@ static const yytype_int16 yytable[] =\n      257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,\n        0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,\n-     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   611,\n-     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,\n-    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n+     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,\n+     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,\n+     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,\n+    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n      613,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,     0,     0,     0,     0,   346,   347,   614,   349,   350,\n      351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,  1026,   366,   367,   368,\n+     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n-     387,   388,  1027,   390,   391,   392,   393,   394,   395,   396,\n+     387,   388,  1028,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,  1028,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   616,   431,     0,   432,\n-     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n-    1029,  1030,     0,     0,   443,   444,   617,   446,   618,  1031,\n+     433,  3174,   434,   435,   436,   437,   438,   439,   440,     0,\n+    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,\n      448,   449,   619,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,  1032,     0,   470,   471,   472,\n+     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,\n-       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,\n-       0,  1039,  1040,  1041,  1042,   110,   995,   517,   996,   997,\n+    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,\n+       0,     0,     0,     0,  1038,     0,  1039,     0,     0,     0,\n+       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,\n      998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n      117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n@@ -6068,34 +6030,34 @@ static const yytype_int16 yytable[] =\n      261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,\n      269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n      277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,\n-     315,   316,   317,   318,  1023,   611,   320,  1024,   322,   323,\n-     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,\n+     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,\n+     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,\n+     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,\n        0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n        0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n      355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,  1026,   366,   367,   368,   369,     0,   370,   371,\n+     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,   385,   386,   387,   388,  1027,   390,\n+     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n        0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,  1028,   415,     0,   416,   417,\n+     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n      428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n-     436,   437,   438,   439,   440,     0,  1029,  1030,     0,     0,\n-     443,   444,   617,   446,   618,  1031,   448,   449,   619,   451,\n+     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,\n+     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,\n      452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n      459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,  1032,     0,   470,   471,   472,   473,   474,   475,   476,\n+     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,\n        0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,  1033,     0,     0,     0,\n-       0,     0,     0,  1657,  1658,  1036,     0,     0,     0,     0,\n-    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,\n-    1042,   110,  2108,   517,   996,   997,   998,   999,  1000,     0,\n+     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,\n+       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,\n+    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,\n+    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,\n@@ -6118,34 +6080,34 @@ static const yytype_int16 yytable[] =\n      255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,\n        0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,\n      273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,\n-    1021,   311,   312,   313,   314,  1022,   315,   316,   317,   318,\n-    1023,   611,   320,  1024,   322,   323,   324,     0,   325,   326,\n-       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,\n+     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,\n+    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,\n+    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,\n+       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,\n      333,   334,   613,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   614,\n      349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,  1026,   366,\n+     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-     385,   386,   387,   388,  1027,   390,   391,   392,   393,   394,\n+     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-     413,  1028,   415,     0,   416,   417,   418,   419,   420,   421,\n+     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   428,   429,   616,   431,\n        0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n-     440,     0,  1029,  1030,     0,     0,   443,   444,   617,   446,\n-     618,  1031,   448,   449,   619,   451,   452,   453,   454,   455,\n+     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,\n+     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,  1032,     0,   470,\n+       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,\n      471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,  1033,     0,     0,     0,     0,     0,     0,  1034,\n-    1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,     0,\n-       0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,   517,\n+     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1661,\n+    1662,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,\n+       0,     0,     0,  1040,  1041,  1042,  1043,   110,  2118,   517,\n      996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n      115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n@@ -6169,34 +6131,34 @@ static const yytype_int16 yytable[] =\n      259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,\n      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n        0,     0,   277,   278,   279,   280,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n+     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,\n-     314,  1022,   315,   316,   317,   318,  1023,   611,   320,  1024,\n-     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,\n+     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,\n+     314,  1023,   315,   316,   317,   318,  1024,   611,   320,  1025,\n+     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,\n      329,     0,     0,   330,   331,   332,   333,   334,   613,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n        0,     0,     0,   346,   347,   614,   349,   350,   351,   352,\n      353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,  1026,   366,   367,   368,   369,     0,\n+       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n      380,   381,   382,     0,   383,   384,   385,   386,   387,   388,\n-    1027,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,   413,  1028,   415,     0,\n+     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n      426,   427,   428,   429,   616,   431,     0,   432,   433,     0,\n-     434,   435,   436,   437,   438,   439,   440,     0,  1029,  1030,\n-       0,     0,   443,   444,   617,   446,   618,  1031,   448,   449,\n+     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,\n+       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,\n      619,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n      458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,  1032,     0,   470,   471,   472,   473,   474,\n+     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,\n      475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,  1033,     0,\n-       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,\n-       0,     0,  1037,     0,  2389,     0,     0,     0,     0,  1039,\n-    1040,  1041,  1042,   110,   995,   517,   996,   997,   998,   999,\n+     491,   492,   493,   494,   495,   496,   497,   498,  1034,     0,\n+       0,     0,     0,     0,     0,  1035,  1036,  1037,     0,     0,\n+       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,\n+    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,\n     1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,\n@@ -6206,57 +6168,57 @@ static const yytype_int16 yytable[] =\n     1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,\n        0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,\n      163,     0,   164,   165,   166,   167,   168,   169,     0,   170,\n-     171,  2896,   173,   174,   175,   176,   177,   178,   179,   180,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n     1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,\n      189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n      196,   197,   770,   199,   200,     0,   201,   202,   203,     0,\n      204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,\n      213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,\n     1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,\n-     228,   229,   230,   231,     0,   232,     0,  2897,  1016,   235,\n+     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,\n        0,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n      254,     0,   255,   256,   257,   258,   259,   260,   261,   262,\n     1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,\n      271,   272,   273,   274,   275,   276,     0,     0,   277,   278,\n      279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-    1020,   309,  1021,   311,   312,   313,   314,  1022,   315,   316,\n-     317,   318,  1023,   611,   320,  1024,   322,   323,   324,     0,\n-     325,   326,     0,     0,  1025,   328,   329,     0,     0,   330,\n+    1021,   309,  1022,   311,   312,   313,   314,  1023,   315,   316,\n+     317,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,\n+     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,\n      331,   332,   333,   334,   613,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n      347,   614,   349,   350,   351,   352,   353,   354,   355,     0,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-    1026,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   385,   386,   387,  2898,  1027,   390,   391,   392,\n+     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,   413,  1028,   415,     0,   416,   417,   418,   419,\n+     411,   412,   413,  1029,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n      616,   431,     0,   432,   433,     0,   434,   435,   436,   437,\n-     438,   439,   440,     0,  1029,  1030,     0,     0,   443,   444,\n-     617,   446,   618,  1031,   448,   449,   619,   451,   452,   453,\n+     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,\n+     617,   446,   618,  1032,   448,   449,   619,   451,   452,   453,\n      454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,  1032,\n+     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,\n        0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,  1033,     0,     0,     0,     0,     0,\n-       0,  1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,\n-    2899,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   110,\n+     495,   496,   497,   498,  1034,     0,     0,     0,     0,     0,\n+       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,\n+    2402,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,\n      995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n        0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,\n-     124,     0,   125,   126,   127,   128,   129,   130,   131,  3327,\n+     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,\n     1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,\n      142,  1005,   606,   143,   144,  1006,  1007,   147,     0,   148,\n      149,   150,   151,   607,     0,   608,     0,  1008,   155,   156,\n      157,   158,   159,   160,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,   170,   171,   172,  3328,   174,\n+     166,   167,   168,   169,     0,   170,   171,  2906,   173,   174,\n      175,   176,   177,   178,   179,   180,  1009,  1010,   183,  1011,\n      184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n      192,   193,   194,   195,     0,     0,   196,   197,   770,   199,\n@@ -6264,50 +6226,50 @@ static const yytype_int16 yytable[] =\n      207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,\n      609,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,\n        0,   224,   225,     0,   226,   227,   228,   229,   230,   231,\n-       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,\n+       0,   232,     0,  2907,  1016,   235,     0,   236,   237,   238,\n      239,   240,   241,   242,   243,   244,   245,   246,   247,     0,\n      248,   249,   250,   251,   252,   253,   254,     0,   255,   256,\n      257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,\n        0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,\n-     312,   313,   314,  1022,   315,   316,   317,   318,  1023,   611,\n-     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,\n-    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n+     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,\n+     312,   313,   314,  1023,   315,   316,   317,   318,  1024,   611,\n+     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,\n+    1026,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n      613,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,     0,     0,     0,     0,   346,   347,   614,   349,   350,\n      351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,  1026,   366,   367,   368,\n+     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n-     387,   388,  1027,   390,   391,   392,   393,   394,   395,   396,\n+     387,  2908,  1028,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,  1028,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   616,   431,     0,   432,\n      433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n-    1029,  1030,     0,     0,   443,   444,   617,   446,   618,  1031,\n-     448,   449,   619,   451,   452,  3329,   454,   455,     0,     0,\n+    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,\n+     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,  1032,     0,   470,   471,   472,\n+     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-    1033,     0,     0,     0,     0,     0,     0,  1034,  1035,  1036,\n-       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,\n-       0,  1039,  1040,  1041,  1042,   110,   995,   517,   996,   997,\n+    1034,     0,     0,     0,     0,     0,     0,  1035,  1036,  1037,\n+       0,     0,     0,     0,  1038,     0,  2909,     0,     0,     0,\n+       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,\n      998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n      117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n        0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,\n-     127,   128,   129,   130,   131,   132,  1002,   134,  1003,  1004,\n+     127,   128,   129,   130,   131,  3343,  1002,   134,  1003,  1004,\n        0,   137,   138,   139,   140,   141,   142,  1005,   606,   143,\n      144,  1006,  1007,   147,     0,   148,   149,   150,   151,   607,\n        0,   608,     0,  1008,   155,   156,   157,   158,   159,   160,\n      161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n-       0,   170,   171,   172,  3328,   174,   175,   176,   177,   178,\n+       0,   170,   171,   172,  3344,   174,   175,   176,   177,   178,\n      179,   180,  1009,  1010,   183,  1011,   184,     0,   185,   186,\n      187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n        0,     0,   196,   197,   770,   199,   200,     0,   201,   202,\n@@ -6321,45 +6283,45 @@ static const yytype_int16 yytable[] =\n      261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,\n      269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n      277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,  1020,   309,  1021,   311,   312,   313,   314,  1022,\n-     315,   316,   317,   318,  1023,   611,   320,  1024,   322,   323,\n-     324,     0,   325,   326,     0,     0,  1025,   328,   329,     0,\n+     306,   307,  1021,   309,  1022,   311,   312,   313,   314,  1023,\n+     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,\n+     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,\n        0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n        0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n      355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,  1026,   366,   367,   368,   369,     0,   370,   371,\n+     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,   385,   386,   387,   388,  1027,   390,\n+     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n        0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,  1028,   415,     0,   416,   417,\n+     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n      428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n-     436,   437,   438,   439,   440,     0,  1029,  1030,     0,     0,\n-     443,   444,   617,   446,   618,  1031,   448,   449,   619,   451,\n-     452,  3329,   454,   455,     0,     0,   456,   457,   458,     0,\n+     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,\n+     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,\n+     452,  3345,   454,   455,     0,     0,   456,   457,   458,     0,\n      459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,  1032,     0,   470,   471,   472,   473,   474,   475,   476,\n+     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,\n        0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,  1033,     0,     0,     0,\n-       0,     0,     0,  1034,  1035,  1036,     0,     0,     0,     0,\n-    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,\n-    1042,   110,   995,   517,   996,   997,   998,   999,  1000,     0,\n+     493,   494,   495,   496,   497,   498,  1034,     0,     0,     0,\n+       0,     0,     0,  1035,  1036,  1037,     0,     0,     0,     0,\n+    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,\n+    1043,   110,   995,   517,   996,   997,   998,   999,  1000,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,\n      122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n      131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,\n      140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,\n-       0,   148,   149,   150,   151,   607,     0,   608,     0,   154,\n+       0,   148,   149,   150,   151,   607,     0,   608,     0,  1008,\n      155,   156,   157,   158,   159,   160,   161,   162,   163,     0,\n      164,   165,   166,   167,   168,   169,     0,   170,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,\n-     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n+    3344,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,\n+     183,  1011,   184,     0,   185,   186,   187,   188,   189,   190,\n        0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n      770,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n      206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,\n@@ -6371,136 +6333,136 @@ static const yytype_int16 yytable[] =\n      255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,\n        0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,\n      273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,  1020,   309,\n-    1021,   311,   312,   313,   314,     0,   315,   316,   317,   318,\n-    1023,   611,   320,  1024,   322,   323,   324,     0,   325,   326,\n-       0,     0,  1025,   328,   329,     0,     0,   330,   331,   332,\n+     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,\n+    1022,   311,   312,   313,   314,  1023,   315,   316,   317,   318,\n+    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,\n+       0,     0,  1026,   328,   329,     0,     0,   330,   331,   332,\n      333,   334,   613,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   614,\n      349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,  1026,   366,\n+     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-     385,   386,   387,   388,  1027,   390,   391,   392,   393,   394,\n+     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-     413,  1028,   415,     0,   416,   417,   418,   419,   420,   421,\n+     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   428,   429,   616,   431,\n        0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n-     440,     0,  1029,  1030,     0,     0,   443,   444,   617,   446,\n-     618,  1031,   448,   449,   619,   451,   452,   453,   454,   455,\n+     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,\n+     618,  1032,   448,   449,   619,   451,   452,  3345,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,  1032,     0,   470,\n+       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,\n      471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,     0,     0,     0,     0,     0,     0,     0,  1449,\n-    1450,     0,     0,     0,     0,     0,  1037,     0,  1038,     0,\n-       0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,   517,\n+     497,   498,  1034,     0,     0,     0,     0,     0,     0,  1035,\n+    1036,  1037,     0,     0,     0,     0,  1038,     0,  1039,     0,\n+       0,     0,     0,  1040,  1041,  1042,  1043,   110,   995,   517,\n      996,   997,   998,   999,  1000,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n      115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n        0,     0,     0,  1001,     0,     0,   122,   123,   124,     0,\n-     125,   126,   127,   128,   129,   130,   131, -1945,  1002,   134,\n+     125,   126,   127,   128,   129,   130,   131,   132,  1002,   134,\n     1003,  1004,     0,   137,   138,   139,   140,   141,   142,  1005,\n      606,   143,   144,  1006,  1007,   147,     0,   148,   149,   150,\n-     151,   607,     0,   608,     0,  1008,   155,   156,   157,   158,\n+     151,   607,     0,   608,     0,   154,   155,   156,   157,   158,\n      159,   160,   161,   162,   163,     0,   164,   165,   166,   167,\n-     168,   169,     0,   170,   171,   172,  3328,   174,   175,   176,\n-     177,   178,   179,   180,  1009,  1010,   183,  1011,   184,     0,\n+     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,  1009,  1010,   183,     0,   184,     0,\n      185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n      194,   195,     0,     0,   196,   197,   770,   199,   200,     0,\n      201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n      209,   210,  1012,   212,   213,   214,   215,   216,   609,  1013,\n      218,     0,   219,   220,  1014,   222,     0,   223,     0,   224,\n-     225,     0,   226,   227,   228,   229, -1945,   231,     0,   232,\n+     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,\n        0,  1015,  1016,   235,     0,   236,   237,   238,   239,   240,\n-     241,   242, -1945,   244,   245,   246,   247,     0,   248,   249,\n+     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,\n      250,   251,   252,   253,   254,     0,   255,   256,   257,   258,\n      259,   260,   261,   262,  1017,  1018,     0,  1019,     0,   266,\n-       0,     0,   269,   270,   271,   272,   273,   274,   275,   276,\n-       0,     0,   277,   278,   279, -1945,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n+     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n+       0,     0,   277,   278,   279,   280,     0,   281,   282,   283,\n+     284,   285,   286,   287,   288,  1020,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,  1020,   309,  1021,   311,   312,   313,\n-     314,     0,   315,   316,     0,   318,  1023,   611,   320,  1024,\n-     322,   323,   324,     0,   325,   326,     0,     0,  1025,   328,\n+     304,   305,   306,   307,  1021,   309,  1022,   311,   312,   313,\n+     314,     0,   315,   316,   317,   318,  1024,   611,   320,  1025,\n+     322,   323,   324,     0,   325,   326,     0,     0,  1026,   328,\n      329,     0,     0,   330,   331,   332,   333,   334,   613,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n        0,     0,     0,   346,   347,   614,   349,   350,   351,   352,\n      353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,  1026,   366,   367,   368,   369,     0,\n+       0,   362,   363,   364,  1027,   366,   367,   368,   369,     0,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n      380,   381,   382,     0,   383,   384,   385,   386,   387,   388,\n-    1027,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+    1028,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n      399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410, -1945,   412,   413,  1028,   415,     0,\n+     407,   408,   409,   410,   411,   412,   413,  1029,   415,     0,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n      426,   427,   428,   429,   616,   431,     0,   432,   433,     0,\n-     434,   435,   436,   437,   438,   439,   440,     0,  1029,  1030,\n-       0,     0,   443,   444,   617,   446,   618,  1031,   448,   449,\n-     619,   451,   452,  3329,   454,   455,     0,     0,   456,   457,\n+     434,   435,   436,   437,   438,   439,   440,     0,  1030,  1031,\n+       0,     0,   443,   444,   617,   446,   618,  1032,   448,   449,\n+     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n      458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,  1032,     0,   470,   471,   472,   473,   474,\n+     466,   467,   468,  1033,     0,   470,   471,   472,   473,   474,\n      475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498, -1945,     0,\n-       0,     0,     0,     0,     0,  1034,  1035,  1036,     0,     0,\n-       0,     0,  1037,     0,  1038,     0,     0,     0,     0,  1039,\n-    1040,  1041,  1042,   110,   995,   517,   996,   997,     0,   999,\n+     491,   492,   493,   494,   495,   496,   497,   498,     0,     0,\n+       0,     0,     0,     0,     0,  1452,  1453,     0,     0,     0,\n+       0,     0,  1038,     0,  1039,     0,     0,     0,     0,  1040,\n+    1041,  1042,  1043,   110,   995,   517,   996,   997,   998,   999,\n     1000,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,\n        0,     0,   122,   123,   124,     0,   125,   126,   127,   128,\n-     129,   130,   131,   132,  1002,   134,  1003,  1004,     0,   137,\n+     129,   130,   131, -1959,  1002,   134,  1003,  1004,     0,   137,\n      138,   139,   140,   141,   142,  1005,   606,   143,   144,  1006,\n     1007,   147,     0,   148,   149,   150,   151,   607,     0,   608,\n-       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n+       0,  1008,   155,   156,   157,   158,   159,   160,   161,   162,\n      163,     0,   164,   165,   166,   167,   168,   169,     0,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-    1009,  1010,   183,     0,   184,     0,   185,   186,   187,   188,\n+     171,   172,  3344,   174,   175,   176,   177,   178,   179,   180,\n+    1009,  1010,   183,  1011,   184,     0,   185,   186,   187,   188,\n      189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n      196,   197,   770,   199,   200,     0,   201,   202,   203,     0,\n      204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,\n      213,   214,   215,   216,   609,  1013,   218,     0,   219,   220,\n     1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,\n-     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,\n-       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     228,   229, -1959,   231,     0,   232,     0,  1015,  1016,   235,\n+       0,   236,   237,   238,   239,   240,   241,   242, -1959,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n      254,     0,   255,   256,   257,   258,   259,   260,   261,   262,\n-    1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,\n+    1017,  1018,     0,  1019,     0,   266,     0,     0,   269,   270,\n      271,   272,   273,   274,   275,   276,     0,     0,   277,   278,\n-     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     279, -1959,     0,   281,   282,   283,   284,   285,   286,   287,\n+     288,  1020,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,\n-     317,   318,  1023,   611,   320,  1024,   322,   323,   324,     0,\n-     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,\n+    1021,   309,  1022,   311,   312,   313,   314,     0,   315,   316,\n+       0,   318,  1024,   611,   320,  1025,   322,   323,   324,     0,\n+     325,   326,     0,     0,  1026,   328,   329,     0,     0,   330,\n      331,   332,   333,   334,   613,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n      347,   614,   349,   350,   351,   352,   353,   354,   355,     0,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-    1026,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+    1027,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   385,   386,   387,   388,  2094,  2095,   391,   392,\n+     383,   384,   385,   386,   387,   388,  1028,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n      401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,   413,  1028,   415,     0,   416,   417,   418,   419,\n+   -1959,   412,   413,  1029,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n      616,   431,     0,   432,   433,     0,   434,   435,   436,   437,\n-     438,   439,   440,     0,  1029,  1030,     0,     0,   443,   444,\n-     617,   446,   618,  1031,   448,   449,   619,   451,   452,   453,\n+     438,   439,   440,     0,  1030,  1031,     0,     0,   443,   444,\n+     617,   446,   618,  1032,   448,   449,   619,   451,   452,  3345,\n      454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,  1032,\n+     461,   462,     0,   463,   464,   465,   466,   467,   468,  1033,\n        0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,     0,     0,     0,     0,     0,     0,\n-       0,  2096,  2097,     0,     0,     0,     0,     0,  1037,     0,\n-    1038,     0,     0,     0,     0,  1039,  1040,  1041,  1042,   110,\n-     995,   517,   996,   997,   998,   999,  1000,     0,     0,     0,\n+     495,   496,   497,   498, -1959,     0,     0,     0,     0,     0,\n+       0,  1035,  1036,  1037,     0,     0,     0,     0,  1038,     0,\n+    1039,     0,     0,     0,     0,  1040,  1041,  1042,  1043,   110,\n+     995,   517,   996,   997,     0,   999,  1000,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n        0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,\n@@ -6521,37 +6483,37 @@ static const yytype_int16 yytable[] =\n      239,   240,   241,   242,   243,   244,   245,   246,   247,     0,\n      248,   249,   250,   251,   252,   253,   254,     0,   255,   256,\n      257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,\n-       0,   266,     0,   268,   269,   270,   271,   272,   273,   274,\n+       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     282,   283,   284,   285,   286,   287,   288,  1020,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,  1020,   309,  1021,   311,\n-     312,   313,   314,     0,   315,   316,   317,   318,  1023,   611,\n-     320,  1024,   322,   323,   324,     0,   325,   326,     0,     0,\n-    1025,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n+     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,\n+     312,   313,   314,     0,   315,   316,   317,   318,  1024,   611,\n+     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n      613,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,     0,     0,     0,     0,   346,   347,   614,   349,   350,\n      351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,  1026,   366,   367,   368,\n+     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n-     387,   388,  1027,   390,   391,   392,   393,   394,   395,   396,\n+     387,   388,  2104,  2105,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,  1028,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   616,   431,     0,   432,\n      433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n-    1029,  1030,     0,     0,   443,   444,   617,   446,   618,  1031,\n+    1030,  1031,     0,     0,   443,   444,   617,   446,   618,  1032,\n      448,   449,   619,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,  1032,     0,   470,   471,   472,\n+     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-       0,     0,     0,     0,     0,     0,     0,  1449,  1450,     0,\n-       0,     0,     0,     0,  1037,     0,  1038,     0,     0,     0,\n-       0,  1039,  1040,  1041,  1042,   110,   995,   517,   996,   997,\n-       0,   999,  1000,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  2106,  2107,     0,\n+       0,     0,     0,     0,  1038,     0,  1039,     0,     0,     0,\n+       0,  1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,\n+     998,   999,  1000,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n      117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n        0,  1001,     0,     0,   122,   123,   124,     0,   125,   126,\n@@ -6571,378 +6533,332 @@ static const yytype_int16 yytable[] =\n     1016,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n      243,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n      252,   253,   254,     0,   255,   256,   257,   258,   259,   260,\n-     261,   262,  1017,  1018,     0,  1019,     0,   266,   267,   268,\n+     261,   262,  1017,  1018,     0,  1019,     0,   266,     0,   268,\n      269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n      277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     286,   287,   288,  1020,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,  1020,   309,  1021,   311,   312,   313,   314,     0,\n-     315,   316,   317,   318,  1023,   611,   320,  1024,   322,   323,\n-     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n+     306,   307,  1021,   309,  1022,   311,   312,   313,   314,     0,\n+     315,   316,   317,   318,  1024,   611,   320,  1025,   322,   323,\n+     324,     0,   325,   326,     0,     0,  1026,   328,   329,     0,\n        0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n        0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n      355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,  1026,   366,   367,   368,   369,     0,   370,   371,\n+     363,   364,  1027,   366,   367,   368,   369,     0,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,   385,   386,   387,   388,  1027,   390,\n+     382,     0,   383,   384,   385,   386,   387,   388,  1028,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n        0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,   413,  1028,   415,     0,   416,   417,\n+     409,   410,   411,   412,   413,  1029,   415,     0,   416,   417,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n      428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n-     436,   437,   438,   439,   440,     0,  1029,  1030,     0,     0,\n-     443,   444,   617,   446,   618,  1031,   448,   449,   619,   451,\n+     436,   437,   438,   439,   440,     0,  1030,  1031,     0,     0,\n+     443,   444,   617,   446,   618,  1032,   448,   449,   619,   451,\n      452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n      459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,  1032,     0,   470,   471,   472,   473,   474,   475,   476,\n+     468,  1033,     0,   470,   471,   472,   473,   474,   475,   476,\n        0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n      493,   494,   495,   496,   497,   498,     0,     0,     0,     0,\n-       0,     0,   110,   995,   517,   996,   997,   998,   999,  1000,\n-    1037,     0,  1038,     0,     0,     0,     0,  1039,  1040,  1041,\n-    1042,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,  1001,     0,\n-       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,\n-     130,   131,     0,  1002,   134,  1003,  1004,     0,   137,   138,\n-     139,   140,   141,   142,  1005,   606,   143,   144,  1006,  1007,\n-     147,     0,   148,   149,   150,   151,   607,     0,   608,     0,\n-    1008,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,  1009,\n-    1010,   183,  1011,   184,     0,   185,   186,   187,   188,   189,\n-     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n-     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,\n-       0,   206,     0,   207,   208,   209,   210,  1012,   212,   213,\n-     214,   215,   216,   609,  1013,   218,     0,   219,   220,  1014,\n-     222,     0,   223,     0,   224,   225,     0,   226,   227,   228,\n-     229,     0,   231,     0,   232,     0,  1015,  1016,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,\n-     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,   256,   257,   258,   259,   260,   261,   262,  1017,\n-    1018,     0,  1019,     0,   266,     0,     0,   269,   270,   271,\n-     272,   273,   274,   275,   276,     0,     0,   277,   278,   279,\n-       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,  1020,\n-     309,  1021,   311,   312,   313,   314,     0,   315,   316,     0,\n-     318,  1023,   611,   320,  1024,   322,   323,   324,     0,   325,\n-     326,     0,     0,  1025,   328,   329,     0,     0,   330,   331,\n-     332,   333,   334,   613,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     614,   349,   350,   351,   352,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,  1026,\n-     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,   385,   386,   387,   388,  1027,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,\n-     412,   413,  1028,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   616,\n-     431,     0,   432,   433,     0,   434,   435,   436,   437,   438,\n-     439,   440,     0,  1029,  1030,     0,     0,   443,   444,   617,\n-     446,   618,  1031,   448,   449,   619,   451,   452,   453,   454,\n-     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,   468,  1032,     0,\n-     470,   471,   472,   473,   474,   475,   476,     0,     0,   477,\n-       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   498,     0,     0,     0,     0,     0,     0,     0,\n-    1034,  1035,  1036,     0,     0,     0,     0,  1037,     0,  1038,\n-       0,     0,     0,     0,  1039,  1040,  1041,  1042,   110,   995,\n-     517,   996,   997,     0,   999,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n+       0,     0,     0,  1452,  1453,     0,     0,     0,     0,     0,\n+    1038,     0,  1039,     0,     0,     0,     0,  1040,  1041,  1042,\n+    1043,   110,   995,   517,   996,   997,     0,   999,  1000,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n+     120,   121,     0,     0,     0,     0,     0,  1001,     0,     0,\n+     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n+     131,   132,  1002,   134,  1003,  1004,     0,   137,   138,   139,\n+     140,   141,   142,  1005,   606,   143,   144,  1006,  1007,   147,\n+       0,   148,   149,   150,   151,   607,     0,   608,     0,   154,\n+     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,\n+     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   180,  1009,  1010,\n+     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n+       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n+     770,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n+     206,     0,   207,   208,   209,   210,  1012,   212,   213,   214,\n+     215,   216,   609,  1013,   218,     0,   219,   220,  1014,   222,\n+       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,\n+     230,   231,     0,   232,     0,  1015,  1016,   235,     0,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n+     255,   256,   257,   258,   259,   260,   261,   262,  1017,  1018,\n+       0,  1019,     0,   266,   267,   268,   269,   270,   271,   272,\n+     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,  1020,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,   305,   306,   307,  1021,   309,\n+    1022,   311,   312,   313,   314,     0,   315,   316,   317,   318,\n+    1024,   611,   320,  1025,   322,   323,   324,     0,   325,   326,\n+       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,\n+     333,   334,   613,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,     0,     0,     0,     0,   346,   347,   614,\n+     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n+     358,   359,   360,   361,     0,   362,   363,   364,  1027,   366,\n+     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n+     385,   386,   387,   388,  1028,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+     413,  1029,   415,     0,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   616,   431,\n+       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n+     440,     0,  1030,  1031,     0,     0,   443,   444,   617,   446,\n+     618,  1032,   448,   449,   619,   451,   452,   453,   454,   455,\n+       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n+       0,   463,   464,   465,   466,   467,   468,  1033,     0,   470,\n+     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n+     497,   498,     0,     0,     0,     0,     0,     0,   110,   995,\n+     517,   996,   997,   998,   999,  1000,  1038,     0,  1039,     0,\n+       0,     0,     0,  1040,  1041,  1042,  1043,   111,   112,   113,\n      114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n        0,     0,     0,     0,  1001,     0,     0,   122,   123,   124,\n-       0,   125,   126,   127,   128,   129,   130,   131,   132,  1002,\n+       0,   125,   126,   127,   128,   129,   130,   131,     0,  1002,\n      134,  1003,  1004,     0,   137,   138,   139,   140,   141,   142,\n-    1005,     0,   143,   144,  1006,  1007,   147,     0,   148,   149,\n-     150,   151,   152,     0,   153,     0,   154,   155,   156,   157,\n+    1005,   606,   143,   144,  1006,  1007,   147,     0,   148,   149,\n+     150,   151,   607,     0,   608,     0,  1008,   155,   156,   157,\n      158,   159,   160,   161,   162,   163,     0,   164,   165,   166,\n      167,   168,   169,     0,   170,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,  1009,  1010,   183,     0,   184,\n+     176,   177,   178,   179,   180,  1009,  1010,   183,  1011,   184,\n        0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n      193,   194,   195,     0,     0,   196,   197,   770,   199,   200,\n-       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n-     208,   209,   210,  1012,   212,   213,   214,   215,   216,   217,\n+       0,   201,   202,   203,     0,   204,     0,   206,     0,   207,\n+     208,   209,   210,  1012,   212,   213,   214,   215,   216,   609,\n     1013,   218,     0,   219,   220,  1014,   222,     0,   223,     0,\n-     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,\n-     232,  2916,  1015,  1016,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,     0,   248,\n+     224,   225,     0,   226,   227,   228,   229,     0,   231,     0,\n+     232,     0,  1015,  1016,   235,     0,   236,   237,   238,   239,\n+     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n      249,   250,   251,   252,   253,   254,     0,   255,   256,   257,\n      258,   259,   260,   261,   262,  1017,  1018,     0,  1019,     0,\n-     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   289,   290,   291,   292,\n+     266,     0,     0,   269,   270,   271,   272,   273,   274,   275,\n+     276,     0,     0,   277,   278,   279,     0,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,  1020,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,  1020,   309,  1021,   311,   312,\n-     313,   314,     0,   315,   316,   317,   318,  1023,   319,   320,\n-    1024,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n-     328,   329,     0,     0,   330,   331,   332,   333,   334,   335,\n+     303,   304,   305,   306,   307,  1021,   309,  1022,   311,   312,\n+     313,   314,     0,   315,   316,     0,   318,  1024,   611,   320,\n+    1025,   322,   323,   324,     0,   325,   326,     0,     0,  1026,\n+     328,   329,     0,     0,   330,   331,   332,   333,   334,   613,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   348,   349,   350,   351,\n+       0,     0,     0,     0,   346,   347,   614,   349,   350,   351,\n      352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,  1026,   366,   367,   368,   369,\n+     361,     0,   362,   363,   364,  1027,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,   382,     0,   383,   384,   385,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     388,  1028,   390,   391,   392,   393,   394,   395,   396,   397,\n      398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,   411,   412,   413,  1028,   415,\n+     406,   407,   408,   409,   410,     0,   412,   413,  1029,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   428,   429,   430,   431,     0,   432,   433,\n-       0,   434,   435,   436,   437,   438,   439,   440,     0,  1029,\n-    1030,     0,     0,   443,   444,   445,   446,   447,  1031,   448,\n-     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n+     425,   426,   427,   428,   429,   616,   431,     0,   432,   433,\n+       0,   434,   435,   436,   437,   438,   439,   440,     0,  1030,\n+    1031,     0,     0,   443,   444,   617,   446,   618,  1032,   448,\n+     449,   619,   451,   452,   453,   454,   455,     0,     0,   456,\n      457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,  1032,     0,   470,   471,   472,   473,\n+     465,   466,   467,   468,  1033,     0,   470,   471,   472,   473,\n      474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n      490,   491,   492,   493,   494,   495,   496,   497,   498,     0,\n-       0,     0,     0,   110,   995,   517,   996,   997,     0,   999,\n-       0,     0,     0,  1037,     0,  2635,     0,     0,     0,     0,\n-    1039,  1040,   111,   112,   113,   114,   115,   116,   117,   118,\n-       0,   119,   120,   121,     0,     0,     0,     0,     0,  1001,\n-       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,\n-     129,   130,   131,   132,  1002,   134,  1003,  1004,     0,   137,\n-     138,   139,   140,   141,   142,  1005,     0,   143,   144,  1006,\n-    1007,   147,     0,   148,   149,   150,   151,   152,     0,   153,\n-       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n-     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-    1009,  1010,   183,     0,   184,     0,   185,   186,   187,   188,\n-     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n-     196,   197,   770,   199,   200,     0,   201,   202,   203,     0,\n-     204,   205,   206,     0,   207,   208,   209,   210,  1012,   212,\n-     213,   214,   215,   216,   217,  1013,   218,     0,   219,   220,\n-    1014,   222,     0,   223,     0,   224,   225,     0,   226,   227,\n-     228,   229,   230,   231,     0,   232,     0,  1015,  1016,   235,\n-       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n-     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,\n-    1017,  1018,     0,  1019,     0,   266,   267,   268,   269,   270,\n-     271,   272,   273,   274,   275,   276,     0,     0,   277,   278,\n-     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-    1020,   309,  1021,   311,   312,   313,   314,     0,   315,   316,\n-     317,   318,  1023,   319,   320,  1024,   322,   323,   324,     0,\n-     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,\n-     331,   332,   333,   334,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n-     347,   348,   349,   350,   351,   352,   353,   354,   355,     0,\n-     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-    1026,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-     411,   412,   413,  1028,   415,     0,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,     0,   432,   433,     0,   434,   435,   436,   437,\n-     438,   439,   440,     0,  1029,  1030,     0,     0,   443,   444,\n-     445,   446,   447,  1031,   448,   449,   450,   451,   452,   453,\n-     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,  1032,\n-       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n-     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,     0,     0,     0,     0,   506,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1037,     0,\n-    2635,     0,     0,     0,     0,  1039,  1040,   111,   112,   113,\n-     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,     0,     0,     0,   955,     0,     0,   123,   124,\n-       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n-       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n-       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n-     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n-     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n-       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n-     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n-       0,   201,   202,   203,     0,   204,   205,   206,  -489,   207,\n-     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n-       0,   218,  -489,   219,   220,   221,   222,  -489,   223,     0,\n-     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n-     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n-     258,   259,   260,   261,   262,   263,   264,  -489,   265,     0,\n-     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,     0,   279,     0,  -489,   281,   282,\n-     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n-     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n-     321,   322,   323,   324,  -489,   325,   326,     0,     0,   327,\n-     328,   329,     0,  -489,   330,   331,     0,   333,     0,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n-     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n-       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n-       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n-       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n-     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n-     449,   450,   451,   452,   453,   454,   455,  -489,     0,   456,\n-     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n-     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n-       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1106,     0,   111,   112,\n+       0,     0,     0,     0,     0,     0,  1035,  1036,  1037,     0,\n+       0,     0,     0,  1038,     0,  1039,     0,     0,     0,     0,\n+    1040,  1041,  1042,  1043,   110,   995,   517,   996,   997,     0,\n+     999,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n+     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n+    1001,     0,     0,   122,   123,   124,     0,   125,   126,   127,\n+     128,   129,   130,   131,   132,  1002,   134,  1003,  1004,     0,\n+     137,   138,   139,   140,   141,   142,  1005,     0,   143,   144,\n+    1006,  1007,   147,     0,   148,   149,   150,   151,   152,     0,\n+     153,     0,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,  1009,  1010,   183,     0,   184,     0,   185,   186,   187,\n+     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n+       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n+       0,   204,   205,   206,     0,   207,   208,   209,   210,  1012,\n+     212,   213,   214,   215,   216,   217,  1013,   218,     0,   219,\n+     220,  1014,   222,     0,   223,     0,   224,   225,     0,   226,\n+     227,   228,   229,   230,   231,     0,   232,  2926,  1015,  1016,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n+     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,\n+     262,  1017,  1018,     0,  1019,     0,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,  1021,   309,  1022,   311,   312,   313,   314,     0,   315,\n+     316,   317,   318,  1024,   319,   320,  1025,   322,   323,   324,\n+       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n+     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n+     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,\n+       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n+     364,  1027,   366,   367,   368,   369,     0,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+       0,   383,   384,   385,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n+       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,   413,  1029,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   430,   431,     0,   432,   433,     0,   434,   435,   436,\n+     437,   438,   439,   440,     0,  1030,  1031,     0,     0,   443,\n+     444,   445,   446,   447,  1032,   448,   449,   450,   451,   452,\n+     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n+    1033,     0,   470,   471,   472,   473,   474,   475,   476,     0,\n+       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   498,     0,     0,     0,     0,   110,\n+     995,   517,   996,   997,     0,   999,     0,     0,     0,  1038,\n+       0,  2645,     0,     0,     0,     0,  1040,  1041,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n-     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n-     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n-     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n-     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n-     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n+       0,     0,     0,     0,     0,  1001,     0,     0,   122,   123,\n+     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,\n+    1002,   134,  1003,  1004,     0,   137,   138,   139,   140,   141,\n+     142,  1005,     0,   143,   144,  1006,  1007,   147,     0,   148,\n+     149,   150,   151,   152,     0,   153,     0,   154,   155,   156,\n+     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,  1009,  1010,   183,     0,\n      184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n-     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n+     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,\n      200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n-       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n-       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n-     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n-       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n-     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n-     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n-     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n+     207,   208,   209,   210,  1012,   212,   213,   214,   215,   216,\n+     217,  1013,   218,     0,   219,   220,  1014,   222,     0,   223,\n+       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,\n+       0,   232,     0,  1015,  1016,   235,     0,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,\n+     257,   258,   259,   260,   261,   262,  1017,  1018,     0,  1019,\n+       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n+     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,   307,  1021,   309,  1022,   311,\n+     312,   313,   314,     0,   315,   316,   317,   318,  1024,   319,\n+     320,  1025,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,     0,     0,     0,     0,   346,   347,   348,   349,   350,\n+     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n+     360,   361,     0,   362,   363,   364,  1027,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n+     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,  1029,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n-     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,\n-     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n+     424,   425,   426,   427,   428,   429,   430,   431,     0,   432,\n+     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n+    1030,  1031,     0,     0,   443,   444,   445,   446,   447,  1032,\n      448,   449,   450,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,\n+     464,   465,   466,   467,   468,  1033,     0,   470,   471,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-     841,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  2367,  3082,     0,   111,\n-     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     3,     4,     0,   842,     0,     0,     0,     0,   843,\n-     123,   124,     0,   125,   126,   127,   844,   129,   130,   131,\n-     845,   846,   847,   848,   849,     0,   137,   138,   139,   140,\n-     141,   142,     0,     0,   143,   144,   850,   851,   147,     0,\n-     148,   149,   150,   151,   852,     0,   853,     0,   854,   155,\n-     156,   157,   158,   159,   855,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,   856,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   857,   858,   183,\n-       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n-     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,\n-     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n-       0,   207,   208,   209,   210,   859,   212,   213,   214,   215,\n-     216,   860,     0,   218,     0,   219,   220,   861,   222,     0,\n-     223,     0,   224,   862,    21,   863,   227,   228,   864,   865,\n-     231,     0,   232,     0,   866,   867,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,   868,   244,   245,   246,   247,\n-       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-     869,   870,   258,   259,   260,   261,   262,   871,   872,     0,\n-     873,     0,   266,   874,   875,   269,   876,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,   877,   279,   878,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   879,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   880,   881,   882,\n-     311,   312,   313,   883,     0,   315,   316,   884,   318,     0,\n-     885,   320,   886,   322,   323,   324,     0,   325,   326,     0,\n-       0,   327,   328,   329,     0,     0,   330,   887,   888,   333,\n-     889,   890,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,    25,    26,    27,     0,   346,   347,   891,   892,\n-     350,   351,   893,   353,   354,   355,     0,   356,   357,   358,\n-     359,   360,   361,     0,   362,   363,   364,   894,   366,   367,\n-     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,   895,\n-     386,   387,   388,   896,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,    32,   897,   401,   402,   403,\n-     404,   405,   406,   898,   408,   409,   410,   899,   412,   413,\n-     900,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   901,   429,   902,   431,     0,\n-     432,   433,    37,   434,   903,   436,   437,   438,   439,   440,\n-       0,   904,   905,     0,     0,   443,   444,   906,   446,   907,\n-       0,   448,   449,   908,   451,   452,   453,   454,   455,     0,\n-       0,   456,   457,   458,    39,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   909,   910,     0,   470,   911,\n-     472,   473,   474,   475,   476,     0,     0,   477,     0,    43,\n-     478,   479,   480,   481,   482,   483,   912,   913,   914,   915,\n-     916,   917,   918,   919,   920,   921,   922,   495,   496,   497,\n-     498,     0,   110,    44,   532,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,\n-       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n-       0,   122,   123,   124,     0,   125,   126,   127,   128,   129,\n-     130,   131,   132,   133,   134,   135,   136,     0,   137,   138,\n-     139,   140,   141,   142,     0,   606,   143,   144,   145,   146,\n-     147,     0,   148,   149,   150,   151,   607,     0,   608,     0,\n-     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,   170,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n-     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n-     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n-     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,   609,     0,   218,     0,   219,   220,   221,\n-     222,     0,   223,     0,   224,   225,    21,   226,   227,   228,\n-     229,   230,   231,     0,   232,     0,   233,   234,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,     0,   265,     0,   266,   267,   268,   269,   270,   271,\n-     272,   273,   274,   275,   276,   610,     0,   277,   278,   279,\n-     280,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n-     309,   310,   311,   312,   313,   314,     0,   315,   316,   317,\n-     318,     0,   611,   320,   321,   322,   323,   324,     0,   325,\n-     326,     0,   612,   327,   328,   329,     0,     0,   330,   331,\n-     332,   333,   334,   613,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,    25,    26,    27,     0,   346,   347,\n-     614,   349,   350,   351,   352,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,\n-     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,   385,   386,   387,   388,   389,   615,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,    32,     0,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,   411,\n-     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   616,\n-     431,     0,   432,   433,    37,   434,   435,   436,   437,   438,\n-     439,   440,     0,   441,   442,     0,     0,   443,   444,   617,\n-     446,   618,     0,   448,   449,   619,   451,   452,   453,   454,\n-     455,     0,     0,   456,   457,   458,    39,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,   620,   469,     0,\n-     470,   471,   472,   473,   474,   475,   476,     0,     0,   477,\n-       0,    43,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   498,     0,     0,    44,   841,  1409,   517,     0,\n-       0,     0,   999,     0,     0,     0,     0,     0,     0,   621,\n-       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n+       0,     0,     0,     0,   506,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1038,     0,  2645,     0,     0,     0,\n+       0,  1040,  1041,   111,   112,   113,   114,   115,   116,   117,\n+     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n+       0,   955,     0,     0,   123,   124,     0,   125,   126,   127,\n+       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,\n+     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,\n+     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,\n+       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,\n+     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n+       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,\n+     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n+       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,\n+       0,   204,   205,   206,  -492,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,   217,     0,   218,  -492,   219,\n+     220,   221,   222,  -492,   223,     0,   224,     0,     0,     0,\n+     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,\n+     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n+     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,\n+     262,   263,   264,  -492,   265,     0,   266,     0,     0,   269,\n+       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+       0,   279,     0,  -492,   281,   282,   283,   284,   285,   286,\n+     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,\n+     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,\n+    -492,   325,   326,     0,     0,   327,   328,   329,     0,  -492,\n+     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n+     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,\n+       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n+     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n+       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,\n+     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,\n+     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,\n+     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,\n+     453,   454,   455,  -492,     0,   456,   457,   458,     0,   459,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n+     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,\n+       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1107,     0,   111,   112,   113,   114,   115,   116,\n+     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n+     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n+       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n+     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n+       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n+     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n+       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n+     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n+       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n+     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n+     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n+       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n+     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n+       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n+     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n+     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n+     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n+     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n+     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n+     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n+     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n+       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n+       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n+     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n+     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n+     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n+     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n+     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n+     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n+     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n+       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,   498,   841,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  2377,  3095,     0,   111,   112,   113,   114,   115,\n+     116,   117,   118,     0,   119,   120,   121,     3,     4,     0,\n      842,     0,     0,     0,     0,   843,   123,   124,     0,   125,\n      126,   127,   844,   129,   130,   131,   845,   846,   847,   848,\n      849,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n@@ -6954,9 +6870,9 @@ static const yytype_int16 yytable[] =\n      186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n      195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n      202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n-     210,   859,   212,   213,   214,   215,   216,   860,  1410,   218,\n+     210,   859,   212,   213,   214,   215,   216,   860,     0,   218,\n        0,   219,   220,   861,   222,     0,   223,     0,   224,   862,\n-       0,   863,   227,   228,   864,   865,   231,     0,   232,     0,\n+      21,   863,   227,   228,   864,   865,   231,     0,   232,     0,\n      866,   867,   235,     0,   236,   237,   238,   239,   240,   241,\n      242,   868,   244,   245,   246,   247,     0,   248,   249,   250,\n      251,   252,   253,   254,     0,   255,   869,   870,   258,   259,\n@@ -6967,77 +6883,29 @@ static const yytype_int16 yytable[] =\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n      305,   306,   307,   880,   881,   882,   311,   312,   313,   883,\n        0,   315,   316,   884,   318,     0,   885,   320,   886,   322,\n-     323,   324,     0,   325,   326,  1411,     0,   327,   328,   329,\n+     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n        0,     0,   330,   887,   888,   333,   889,   890,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,   891,   892,   350,   351,   893,   353,\n+     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,\n+      27,     0,   346,   347,   891,   892,   350,   351,   893,   353,\n      354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n      362,   363,   364,   894,   366,   367,   368,   369,     0,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n      381,   382,     0,   383,   384,   895,   386,   387,   388,   896,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,   897,   401,   402,   403,   404,   405,   406,   898,\n+     400,    32,   897,   401,   402,   403,   404,   405,   406,   898,\n      408,   409,   410,   899,   412,   413,   900,   415,     0,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   901,   429,   902,   431,     0,   432,   433,     0,   434,\n+     427,   901,   429,   902,   431,     0,   432,   433,    37,   434,\n      903,   436,   437,   438,   439,   440,     0,   904,   905,     0,\n-       0,   443,   444,   906,   446,   907,  1412,   448,   449,   908,\n+       0,   443,   444,   906,   446,   907,     0,   448,   449,   908,\n      451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n-       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,  1294,   910,     0,   470,   911,   472,   473,   474,   475,\n-     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n+      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n+     467,   909,   910,     0,   470,   911,   472,   473,   474,   475,\n+     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,\n      482,   483,   912,   913,   914,   915,   916,   917,   918,   919,\n-     920,   921,   922,   495,   496,   497,   498,   110,     0,   532,\n-       0,     0,     0,     0,  1413,  1414,  2282,     0,     0,     0,\n-       0,     0,     0,  2283,     0,     0,   111,   112,   113,   114,\n-     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n-       0,     0,     0,     0,     0,     0,   122,   123,   124,     0,\n-     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,\n-     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n-     606,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n-     151,   607,     0,   608,     0,   154,   155,   156,   157,   158,\n-     159,   160,   161,   162,   163,     0,   164,   165,   166,   167,\n-     168,   169,     0,   170,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n-     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n-     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n-     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,   609,     0,\n-     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n-     225,     0,   226,   227,   228,   229,   230,   231,     0,   232,\n-       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,     0,   248,   249,\n-     250,   251,   252,   253,   254,     0,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n-     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n-     610,     0,   277,   278,   279,   280,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,\n-     314,     0,   315,   316,   317,   318,     0,   611,   320,   321,\n-     322,   323,   324,     0,   325,   326,     0,   612,   327,   328,\n-     329,     0,     0,   330,   331,   332,   333,   334,   613,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n-       0,     0,     0,   346,   347,   614,   349,   350,   351,   352,\n-     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,     0,   383,   384,   385,   386,   387,   388,\n-     389,   615,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,   411,   412,   413,   414,   415,     0,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   428,   429,   616,   431,     0,   432,   433,     0,\n-     434,   435,   436,   437,   438,   439,   440,     0,   441,   442,\n-       0,     0,   443,   444,   617,   446,   618,     0,   448,   449,\n-     619,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n-     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   620,   469,     0,   470,   471,   472,   473,   474,\n-     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,   110,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   621,     0,     0,   111,   112,   113,\n+     920,   921,   922,   495,   496,   497,   498,     0,   110,    44,\n+     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    45,     0,     0,     0,   111,   112,   113,\n      114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n        0,     0,     0,     0,     0,     0,     0,   122,   123,   124,\n        0,   125,   126,   127,   128,   129,   130,   131,   132,   133,\n@@ -7052,89 +6920,378 @@ static const yytype_int16 yytable[] =\n        0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n      208,   209,   210,   211,   212,   213,   214,   215,   216,   609,\n        0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n-     224,   225,     0,   226,   227,   228,   229,   230,   231,     0,\n+     224,   225,    21,   226,   227,   228,   229,   230,   231,     0,\n      232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n      240,   241,   242,   243,   244,   245,   246,   247,     0,   248,\n      249,   250,   251,   252,   253,   254,     0,   255,   256,   257,\n      258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n      266,   267,   268,   269,   270,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,   278,   279,   280,     0,   281,   282,\n+     276,   610,     0,   277,   278,   279,   280,     0,   281,   282,\n      283,   284,   285,   286,   287,   288,   289,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n      303,   304,   305,   306,   307,   308,   309,   310,   311,   312,\n      313,   314,     0,   315,   316,   317,   318,     0,   611,   320,\n-     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n+     321,   322,   323,   324,     0,   325,   326,     0,   612,   327,\n      328,   329,     0,     0,   330,   331,   332,   333,   334,   613,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   614,   349,   350,   351,\n+      25,    26,    27,     0,   346,   347,   614,   349,   350,   351,\n      352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n      361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,   382,     0,   383,   384,   385,   386,   387,\n      388,   389,   615,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n+     398,   399,   400,    32,     0,   401,   402,   403,   404,   405,\n      406,   407,   408,   409,   410,   411,   412,   413,   414,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   427,   428,   429,   616,   431,     0,   432,   433,\n-       0,   434,   435,   436,   437,   438,   439,   440,     0,   441,\n+      37,   434,   435,   436,   437,   438,   439,   440,     0,   441,\n      442,     0,     0,   443,   444,   617,   446,   618,     0,   448,\n      449,   619,   451,   452,   453,   454,   455,     0,     0,   456,\n-     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,   469,     0,   470,   471,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n+     457,   458,    39,   459,   460,   461,   462,     0,   463,   464,\n+     465,   466,   467,   620,   469,     0,   470,   471,   472,   473,\n+     474,   475,   476,     0,     0,   477,     0,    43,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   110,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,     0,\n+       0,    44,   841,  1412,   517,     0,     0,     0,   999,     0,\n+       0,     0,     0,     0,     0,   621,     0,     0,     0,     0,\n+       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n+     119,   120,   121,     0,     0,     0,   842,     0,     0,     0,\n+       0,   843,   123,   124,     0,   125,   126,   127,   844,   129,\n+     130,   131,   845,   846,   847,   848,   849,     0,   137,   138,\n+     139,   140,   141,   142,     0,     0,   143,   144,   850,   851,\n+     147,     0,   148,   149,   150,   151,   852,     0,   853,     0,\n+     854,   155,   156,   157,   158,   159,   855,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,   856,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   857,\n+     858,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n+     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n+     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n+     205,   206,     0,   207,   208,   209,   210,   859,   212,   213,\n+     214,   215,   216,   860,  1413,   218,     0,   219,   220,   861,\n+     222,     0,   223,     0,   224,   862,     0,   863,   227,   228,\n+     864,   865,   231,     0,   232,     0,   866,   867,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,   868,   244,   245,\n+     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n+       0,   255,   869,   870,   258,   259,   260,   261,   262,   871,\n+     872,     0,   873,     0,   266,   874,   875,   269,   876,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,   877,   279,\n+     878,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+     879,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   880,\n+     881,   882,   311,   312,   313,   883,     0,   315,   316,   884,\n+     318,     0,   885,   320,   886,   322,   323,   324,     0,   325,\n+     326,  1414,     0,   327,   328,   329,     0,     0,   330,   887,\n+     888,   333,   889,   890,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n+     891,   892,   350,   351,   893,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,   894,\n+     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n+     384,   895,   386,   387,   388,   896,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,   897,   401,\n+     402,   403,   404,   405,   406,   898,   408,   409,   410,   899,\n+     412,   413,   900,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   901,   429,   902,\n+     431,     0,   432,   433,     0,   434,   903,   436,   437,   438,\n+     439,   440,     0,   904,   905,     0,     0,   443,   444,   906,\n+     446,   907,  1415,   448,   449,   908,   451,   452,   453,   454,\n+     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n+     462,     0,   463,   464,   465,   466,   467,  1297,   910,     0,\n+     470,   911,   472,   473,   474,   475,   476,     0,     0,   477,\n+       0,     0,   478,   479,   480,   481,   482,   483,   912,   913,\n+     914,   915,   916,   917,   918,   919,   920,   921,   922,   495,\n+     496,   497,   498,   110,     0,   532,     0,     0,     0,     0,\n+    1416,  1417,  2292,     0,     0,     0,     0,     0,     0,  2293,\n+       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n+       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n+       0,     0,   122,   123,   124,     0,   125,   126,   127,   128,\n+     129,   130,   131,   132,   133,   134,   135,   136,     0,   137,\n+     138,   139,   140,   141,   142,     0,   606,   143,   144,   145,\n+     146,   147,     0,   148,   149,   150,   151,   607,     0,   608,\n+       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,\n+     163,     0,   164,   165,   166,   167,   168,   169,     0,   170,\n+     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n+     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,\n+     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n+     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,\n+     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,\n+     213,   214,   215,   216,   609,     0,   218,     0,   219,   220,\n+     221,   222,     0,   223,     0,   224,   225,     0,   226,   227,\n+     228,   229,   230,   231,     0,   232,     0,   233,   234,   235,\n+       0,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n+     254,     0,   255,   256,   257,   258,   259,   260,   261,   262,\n+     263,   264,     0,   265,     0,   266,   267,   268,   269,   270,\n+     271,   272,   273,   274,   275,   276,   610,     0,   277,   278,\n+     279,   280,     0,   281,   282,   283,   284,   285,   286,   287,\n+     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n+     308,   309,   310,   311,   312,   313,   314,     0,   315,   316,\n+     317,   318,     0,   611,   320,   321,   322,   323,   324,     0,\n+     325,   326,     0,   612,   327,   328,   329,     0,     0,   330,\n+     331,   332,   333,   334,   613,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n+     347,   614,   349,   350,   351,   352,   353,   354,   355,     0,\n+     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n+     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n+     383,   384,   385,   386,   387,   388,   389,   615,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n+     411,   412,   413,   414,   415,     0,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n+     616,   431,     0,   432,   433,     0,   434,   435,   436,   437,\n+     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,\n+     617,   446,   618,     0,   448,   449,   619,   451,   452,   453,\n+     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n+     461,   462,     0,   463,   464,   465,   466,   467,   620,   469,\n+       0,   470,   471,   472,   473,   474,   475,   476,     0,     0,\n+     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,   498,   110,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,    45,     0,     0,   111,   112,\n+     621,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n+     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n+       0,     0,     0,   122,   123,   124,     0,   125,   126,   127,\n+     128,   129,   130,   131,   132,   133,   134,   135,   136,     0,\n+     137,   138,   139,   140,   141,   142,     0,   606,   143,   144,\n+     145,   146,   147,     0,   148,   149,   150,   151,   607,     0,\n+     608,     0,   154,   155,   156,   157,   158,   159,   160,   161,\n+     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n+     170,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,\n+     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n+       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,\n+       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,   609,     0,   218,     0,   219,\n+     220,   221,   222,     0,   223,     0,   224,   225,     0,   226,\n+     227,   228,   229,   230,   231,     0,   232,     0,   233,   234,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,   243,\n+     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n+     253,   254,     0,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,     0,   265,     0,   266,   267,   268,   269,\n+     270,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+     278,   279,   280,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,   308,   309,   310,   311,   312,   313,   314,     0,   315,\n+     316,   317,   318,     0,   611,   320,   321,   322,   323,   324,\n+       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n+     330,   331,   332,   333,   334,   613,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n+     346,   347,   614,   349,   350,   351,   352,   353,   354,   355,\n+       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n+     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n+     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n+       0,   383,   384,   385,   386,   387,   388,   389,   615,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n+       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,   411,   412,   413,   414,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   616,   431,     0,   432,   433,     0,   434,   435,   436,\n+     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,\n+     444,   617,   446,   618,     0,   448,   449,   619,   451,   452,\n+     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n+     469,     0,   470,   471,   472,   473,   474,   475,   476,     0,\n+       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   498,   110,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,    45,     0,     0,   111,   112,   113,   114,   115,   116,\n+     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n+       0,     0,     0,     0,   122,   123,   124,     0,   125,   126,\n+     127,   128,   129,   130,   131,   132,   133,   134,   135,   136,\n+       0,   137,   138,   139,   140,   141,   142,     0,   606,   143,\n+     144,   145,   146,   147,     0,   148,   149,   150,   151,   607,\n+       0,   608,     0,   154,   155,   156,   157,   158,   159,   160,\n+     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n+       0,   170,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n+     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n+       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n+     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,   609,     0,   218,     0,\n+     219,   220,   221,   222,     0,   223,     0,   224,   225,     0,\n+     226,   227,   228,   229,   230,   231,     0,   232,     0,   233,\n+     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n+     243,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n+     252,   253,   254,     0,   255,   256,   257,   258,   259,   260,\n+     261,   262,   263,   264,     0,   265,     0,   266,   267,   268,\n+     269,   270,   271,   272,   273,   274,   275,   276,     0,     0,\n+     277,   278,   279,   280,     0,   281,   282,   283,   284,   285,\n+     286,   287,   288,   289,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,   308,   309,   310,   311,   312,   313,   314,     0,\n+     315,   316,   317,   318,     0,   611,   320,   321,   322,   323,\n+     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n+       0,   330,   331,   332,   333,   334,   613,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n+       0,   346,   347,   614,   349,   350,   351,   352,   353,   354,\n+     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n+     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,     0,   383,   384,   385,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,   411,   412,   413,   414,   415,     0,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     428,   429,   616,   431,     0,   432,   433,     0,   434,   435,\n+     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n+     443,   444,   617,   446,   618,     0,   448,   449,   619,   451,\n+     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n+     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n+     468,   469,     0,   470,   471,   472,   473,   474,   475,   476,\n+       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  3177,     0,     0,   111,   112,   113,   114,   115,\n+     116,   117,   118,   702,   119,   120,   121,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n+     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n+     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n+     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,\n+     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,\n+       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,\n+     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n+     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n+     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n+       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n+      21,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n+     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,\n+     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n+     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n+       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n+       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n+     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n+       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,    25,    26,\n+      27,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n+     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n+     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,    32,     0,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   509,   429,   430,   431,     0,   432,   433,    37,   434,\n+       0,   436,   437,   438,   439,   440,     0,   703,   442,     0,\n+       0,   704,   444,   445,   446,   447,     0,   448,   449,   450,\n+     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n+      39,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n+     467,   620,   469,     0,   470,     0,   472,   473,   474,   475,\n+     476,     0,     0,   477,     0,    43,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   498,   506,     0,    44,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    45,     0,     0,   111,   112,   113,   114,\n+     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n+     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n+     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n+       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n+     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,\n+     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,\n+     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n+     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n+     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n+     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,\n+     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n+       0,    21,     0,   227,   228,   507,     0,   231,     0,   232,\n+       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n+     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n+     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n+     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n+       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n+       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,\n+     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n+     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n+     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,\n+     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,    25,\n+      26,    27,     0,   346,   347,   348,     0,   350,   351,   352,\n+     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n+       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,    32,     0,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   509,   429,   430,   431,     0,   432,   433,    37,\n+     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,\n+       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,\n+     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n+     458,    39,   459,   460,   461,   462,     0,   463,   464,   465,\n+     466,   467,   620,   469,     0,   470,     0,   472,   473,   474,\n+     475,   476,     0,     0,   477,     0,    43,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,   498,     0,   506,\n+      44,   532,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,    45,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,     0,     0,     0,     0,     0,   122,   123,\n-     124,     0,   125,   126,   127,   128,   129,   130,   131,   132,\n-     133,   134,   135,   136,     0,   137,   138,   139,   140,   141,\n-     142,     0,   606,   143,   144,   145,   146,   147,     0,   148,\n-     149,   150,   151,   607,     0,   608,     0,   154,   155,   156,\n-     157,   158,   159,   160,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,   170,   171,   172,   173,   174,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n+     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n+     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n+     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n+     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n+     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n      175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n      184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n      192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n      200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n      207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-     609,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n-       0,   224,   225,     0,   226,   227,   228,   229,   230,   231,\n+     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n+       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n        0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,   256,\n+     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n      257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n-       0,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,   278,   279,   280,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   289,   290,   291,\n+       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n+     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,   309,   310,   311,\n-     312,   313,   314,     0,   315,   316,   317,   318,     0,   611,\n+     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n+     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n      320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,   331,   332,   333,   334,\n-     613,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,   614,   349,   350,\n+     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n      351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n      360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,   385,   386,\n+     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,\n+     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   429,   616,   431,     0,   432,\n-     433,     0,   434,   435,   436,   437,   438,   439,   440,     0,\n-     441,   442,     0,     0,   443,   444,   617,   446,   618,     0,\n-     448,   449,   619,   451,   452,   453,   454,   455,     0,     0,\n+     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n+     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,\n+     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n+     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,   469,     0,   470,   471,   472,\n+     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  3165,     0,     0,   111,\n-     112,   113,   114,   115,   116,   117,   118,   702,   119,   120,\n+     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   942,     0,     0,   111,\n+     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n      121,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n      132,   133,     0,   135,   136,     0,   137,   138,   139,   140,\n@@ -7148,7 +7305,7 @@ static const yytype_int16 yytable[] =\n      199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n        0,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n      216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n-     223,     0,   224,     0,    21,     0,   227,   228,   507,     0,\n+     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n      231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n      238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n@@ -7162,26 +7319,26 @@ static const yytype_int16 yytable[] =\n      319,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n        0,   327,   328,   329,     0,     0,   330,   331,     0,   333,\n        0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,    25,    26,    27,     0,   346,   347,   348,     0,\n+     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,\n      350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n      359,   360,   361,     0,   362,   363,   364,   365,   366,   367,\n      368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,   382,     0,   383,   384,     0,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,    32,     0,   401,   402,   403,\n+     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n      404,   405,   406,   407,   408,   409,   410,     0,   412,   413,\n      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n-     432,   433,    37,   434,     0,   436,   437,   438,   439,   440,\n-       0,   703,   442,     0,     0,   704,   444,   445,   446,   447,\n+     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,\n+       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,\n        0,   448,   449,   450,   451,   452,   453,   454,   455,     0,\n-       0,   456,   457,   458,    39,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   620,   469,     0,   470,     0,\n-     472,   473,   474,   475,   476,     0,     0,   477,     0,    43,\n+       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n+     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,\n+     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   506,     0,    44,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,    45,     0,     0,\n+     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1506,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n@@ -7196,7 +7353,7 @@ static const yytype_int16 yytable[] =\n      198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n      206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n      215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n-       0,   223,     0,   224,     0,    21,     0,   227,   228,   507,\n+       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n        0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n      237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n@@ -7210,26 +7367,74 @@ static const yytype_int16 yytable[] =\n        0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n        0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n      333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,    25,    26,    27,     0,   346,   347,   348,\n+     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n        0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n      358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n        0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,    32,     0,   401,   402,\n+     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n      403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n      422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n-       0,   432,   433,    37,   434,     0,   436,   437,   438,   439,\n+       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n      440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n      447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n-       0,     0,   456,   457,   458,    39,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   620,   469,     0,   470,\n+       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n+       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n        0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n-      43,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,     0,   506,    44,   532,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,    45,     0,\n+     497,   498,   506,     0,   532,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  2130,     0,\n+       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n+     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n+     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n+     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n+     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,\n+     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n+     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n+     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n+     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n+     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,\n+     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,\n+     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,\n+     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,\n+     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n+       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,\n+     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,\n+       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n+       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,\n+     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,\n+     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,\n+       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n+     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,\n+     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n+     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,\n+     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,\n+     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,\n+     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,\n+     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,\n+     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n+     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,\n+     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,\n+       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,   498,   506,     0,   532,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  2377,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n@@ -7278,7 +7483,7 @@ static const yytype_int16 yytable[] =\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n      495,   496,   497,   498,   506,     0,   532,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     942,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n+    2484,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n      118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   123,   124,     0,   125,   126,   127,\n        0,   129,   130,   131,   132,   133,     0,   135,   136,     0,\n@@ -7324,9 +7529,9 @@ static const yytype_int16 yytable[] =\n      469,     0,   470,     0,   472,   473,   474,   475,   476,     0,\n        0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n      484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,\n+     494,   495,   496,   497,   498,   506,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1503,     0,     0,   111,   112,   113,   114,   115,   116,\n+       0,  3089,     0,     0,   111,   112,   113,   114,   115,   116,\n      117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n      127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n@@ -7372,9 +7577,9 @@ static const yytype_int16 yytable[] =\n      468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n        0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n      483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,\n+     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  2120,     0,     0,   111,   112,   113,   114,   115,\n+       0,     0,  1990,     0,     0,   111,   112,   113,   114,   115,\n      116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n      126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n@@ -7420,9 +7625,9 @@ static const yytype_int16 yytable[] =\n      467,   468,   469,     0,   470,     0,   472,   473,   474,   475,\n      476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n      482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,\n+     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  2367,     0,     0,   111,   112,   113,   114,\n+       0,     0,     0,  2090,     0,     0,   111,   112,   113,   114,\n      115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n      125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n@@ -7468,57 +7673,339 @@ static const yytype_int16 yytable[] =\n      466,   467,   468,   469,     0,   470,     0,   472,   473,   474,\n      475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n      481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n-     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  2474,     0,     0,   111,   112,   113,\n-     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n-       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n-       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n-       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n-     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n-     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n-       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n-     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n-       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n-     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n-       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n-     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n-     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n-     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n-     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n+     491,   492,   493,   494,   495,   496,   497,   498,     0,  2792,\n+    1412,   517,     0,     0,  1970,   999,     0,     0,     0,     0,\n+       0,  1971,  1972,     0,  2959,  1973,  1974,  1975,   111,   112,\n+     113,   114,   115,   116,   117,   118,  1230,   119,   120,   121,\n+    1231,  1232,  1233,  2793,  1234,  1235,  1236,  1237,  2794,   123,\n+     124,  1238,   125,   126,   127,  2795,   129,   130,   131,     0,\n+     758,  2796,   760,   761,  1239,   137,   138,   139,   140,   141,\n+     142,  1240,  1241,   143,   144,   762,   763,   147,  1242,   148,\n+     149,   150,   151,     0,  1243,  2797,  1244,  2798,   155,   156,\n+     157,   158,   159,  2799,   161,   162,   163,  1245,   164,   165,\n+     166,   167,   168,   169,  1246,  2800,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   768,   769,   183,  1247,\n+     184,  1248,   185,   186,   187,   188,   189,   190,  1249,   191,\n+     192,   193,   194,   195,  1250,  1251,   196,   197,   770,   199,\n+     200,  1252,   201,   202,   203,  1253,   204,   205,   206,  1254,\n+     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,\n+       0,  1255,   218,  1256,   219,   220,   771,   222,  1257,   223,\n+    1258,   224,  2801,  1259,  2802,   227,   228,  2803,  2804,   231,\n+    1260,   232,  1261,     0,     0,   235,  1262,   236,   237,   238,\n+     239,   240,   241,   242,  2805,   244,   245,   246,   247,  1263,\n+     248,   249,   250,   251,   252,   253,   254,  1264,   255,  2806,\n+       0,   258,   259,   260,   261,   262,   778,   779,  1265,   780,\n+    1266,   266,  2807,  2808,   269,  2809,   271,   272,   273,   274,\n+     275,   276,  1267,  1268,   277,  2810,   279,  2811,  1269,   281,\n+     282,   283,   284,   285,   286,   287,   288,  2812,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,   307,   787,  2813,   789,   311,\n+     312,   313,  2814,  1270,   315,   316,  2815,   318,  1271,     0,\n+     320,   791,   322,   323,   324,  1272,   325,   326,  1273,  1274,\n+    2816,   328,   329,  1275,  1276,   330,     0,  2817,   333,  2818,\n+       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,  1277,  1278,  1279,  1280,   346,   347,     0,  2819,   350,\n+     351,     0,   353,   354,   355,  1281,   356,   357,   358,   359,\n+     360,   361,  1282,   362,   363,   364,   795,   366,   367,   368,\n+     369,  1283,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,  1284,   383,   384,  2820,   386,\n+     387,   388,   797,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,  1285,  2821,   401,   402,   403,   404,\n+     405,   406,  2822,   408,   409,   410,  2823,   412,   413,   801,\n+     415,  1286,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,  2824,   429,     0,   431,  1287,   432,\n+     433,  1288,   434,  2825,   436,   437,   438,   439,   440,  1289,\n+     804,   805,  1290,  1291,   443,   444,     0,   446,     0,  1292,\n+     448,   449,  2826,   451,   452,   453,   454,   455,  2827,  1294,\n+     456,   457,   458,  1295,   459,   460,   461,   462,  1296,   463,\n+     464,   465,   466,   467,     0,   808,  1298,   470,  2828,   472,\n+     473,   474,   475,   476,  1299,  1300,   477,  1301,  1302,   478,\n+     479,   480,   481,   482,   483,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   495,   496,   497,   498,\n+       0,   506,     0,  1976,  1977,  1978,  1970,  2829,  2830,  1981,\n+    1982,  1983,  1984,  1971,  1972,     0,     0,  1973,  1974,  1975,\n+     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n+     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n+     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,\n+     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,\n+       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,\n+     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,\n+     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n+     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n+       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n+     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n+     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n+     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n+       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n+       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n+     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n+     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n+     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n+       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n+     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,\n+     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,\n+       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n+       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n+     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n+       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n+     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n+     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n+       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n+     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n+     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n+       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n+     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n+     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n+       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n+       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n+       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n+     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n+     497,   498,     0,     0,     0,  1976,  1977,  1978,     0,  1979,\n+    1980,  1981,  1982,  1983,  1984,  1558,     0,     0,  1559,     0,\n+       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,\n+    1559,     0,     0,  1567,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,     0,  1569,     0,     0,     0,     0,     0,     0,\n+    1570,     0,     0,     0,     0,  1567,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n+       0,     0,  1570,     0,  1558,  1571,     0,  1559,     0,     0,\n+       0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,\n+       0,     0,  1567,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1569,     0,     0,     0,     0,     0,     0,  1570,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1558,\n+       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,\n+    1564,  1565,  1566,     0,  1571,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1569,     0,  1572,\n+       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1573,     0,     0,     0,     0,\n+    1574,  1572,     0,     0,     0,     0,     0,     0,     0,  1571,\n+       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,\n+       0,     0,  1574,  1575,  1576,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1577,     0,\n+       0,     0,     0,     0,     0,  1575,  1576,     0,  1572,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1577,     0,     0,     0,  1573,     0,     0,     0,     0,  1574,\n+       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1580,  1575,  1576,  1581,     0,  1578,     0,     0,  1579,\n+       0,     0,     0,  1572,     0,     0,     0,  1577,     0,     0,\n+       0,     0,     0,  1580,     0,     0,  1581,     0,     0,  1573,\n+       0,     0,     0,     0,  1574,     0,     0,     0,     0,  1558,\n+       0,     0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,\n+    1564,  1565,  1566,  1578,     0,     0,  1579,  1575,  1576,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1567,     0,     0,\n+    1580,     0,  1577,  1581,     0,     0,     0,  1569,     0,     0,\n+       0,     0,     0,     0,  1570,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1578,  1571,\n+       0,  1579,     0,     0,     0,     0,     0,     0,     0,  1582,\n+       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1583,     0,  1572,  1584,  1585,  1586,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592,     0,     0,     0,     0,  2618,  1573,\n+       0,  1582,     0,  1583,  1574,     0,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,\n+    2670,     0,     0,     0,     0,     0,     0,  1575,  1576,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1577,     0,     0,     0,     0,     0,     0,     0,\n+    1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,\n+    1590,  1591,  1592,     0,     0,     0,     0,  2737,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n+       0,  1579,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1580,     0,     0,  1581,     0,\n+       0,     0,     0,     0,     0,  1583,     0,     0,  1584,  1585,\n+    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,\n+       0,     0,  2952,     0,     0,     0,     0,     0,  1558,     0,\n+       0,  1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,\n+    1565,  1566,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1558,     0,     0,  1559,     0,     0,  1567,  1560,  1561,  1562,\n+    1563,  1564,  1565,  1566,     0,     0,  1569,     0,     0,     0,\n+       0,     0,     0,  1570,     0,     0,     0,     0,  1567,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,\n+       0,  1582,     0,     0,     0,  1570,     0,  1558,  1571,     0,\n+    1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1571,     0,     0,     0,     0,  1567,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n+       0,     0,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1558,     0,     0,  1559,     0,     0,     0,  1560,\n+    1561,  1562,  1563,  1564,  1565,  1566,     0,  1571,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1567,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1569,     0,  1572,     0,     0,  1583,     0,  1570,  1584,  1585,\n+    1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,  1573,     0,\n+       0,     0,  2958,  1574,  1572,     0,     0,     0,     0,     0,\n+       0,     0,  1571,     0,     0,     0,     0,     0,     0,     0,\n+    1573,     0,     0,     0,     0,  1574,  1575,  1576,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1577,     0,     0,     0,     0,     0,     0,  1575,  1576,\n+       0,  1572,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1577,     0,     0,     0,  1573,     0,     0,\n+       0,     0,  1574,     0,     0,     0,     0,  1578,     0,     0,\n+    1579,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1580,  1575,  1576,  1581,     0,  1578,\n+       0,     0,  1579,     0,     0,     0,  1572,     0,     0,     0,\n+    1577,     0,     0,     0,     0,     0,  1580,     0,     0,  1581,\n+       0,     0,  1573,     0,     0,     0,     0,  1574,     0,     0,\n+       0,     0,  1558,     0,     0,  1559,     0,     0,     0,  1560,\n+    1561,  1562,  1563,  1564,  1565,  1566,  1578,     0,     0,  1579,\n+    1575,  1576,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1567,     0,     0,  1580,     0,  1577,  1581,     0,     0,     0,\n+    1569,     0,     0,     0,     0,     0,     0,  1570,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1582,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1578,  1571,     0,  1579,     0,     0,     0,     0,     0,\n+       0,     0,  1582,     0,     0,     0,     0,     0,  1580,     0,\n+       0,  1581,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1583,     0,  1572,  1584,  1585,  1586,\n+       0,  1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,\n+       0,  3106,  1573,     0,  1582,     0,  1583,  1574,     0,  1584,\n+    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,     0,     0,  3128,     0,     0,     0,     0,     0,     0,\n+    1575,  1576,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1577,     0,     0,     0,     0,\n+       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,\n+    3226,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1578,     0,     0,  1579,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1580,     0,\n+       0,  1581,     0,     0,     0,     0,     0,     0,  1583,     0,\n+       0,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,\n+    1592,     0,     0,     0,     0,  3281,     0,     0,     0,     0,\n+       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,\n+    1562,  1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1558,     0,     0,  1559,     0,     0,  1567,\n+    1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,  1569,\n+       0,     0,     0,     0,     0,     0,  1570,     0,     0,     0,\n+       0,  1567,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1569,     0,     0,  1582,     0,     0,     0,  1570,     0,\n+    1558,  1571,     0,  1559,     0,     0,     0,  1560,  1561,  1562,\n+    1563,  1564,  1565,  1566,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1571,     0,     0,     0,     0,  1567,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,\n+       0,     0,     0,     0,     0,  1570,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1558,     0,     0,  1559,     0,\n+       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,\n+    1571,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1569,     0,  1572,     0,     0,  1583,     0,\n+    1570,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,\n+    1592,  1573,     0,     0,     0,  3303,  1574,  1572,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,\n+       0,     0,     0,  1573,     0,     0,     0,     0,  1574,  1575,\n+    1576,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1577,     0,     0,     0,     0,     0,\n+       0,  1575,  1576,     0,  1572,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1577,     0,     0,     0,\n+    1573,     0,     0,     0,     0,  1574,     0,     0,     0,     0,\n+    1578,     0,     0,  1579,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1580,  1575,  1576,\n+    1581,     0,  1578,     0,     0,  1579,     0,     0,     0,  1572,\n+       0,     0,     0,  1577,     0,     0,     0,     0,     0,  1580,\n+       0,     0,  1581,     0,     0,  1573,     0,     0,     0,     0,\n+    1574,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,\n+       0,     0,  1579,  1575,  1576,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1580,     0,  1577,  1581,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1582,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,\n+       0,     0,     0,     0,     0,  1582,     0,     0,     0,     0,\n+       0,  1580,     0,     0,  1581,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1582,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,\n+    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,\n+       0,     0,  1754,     0,     0,     0,     0,  1582,     0,  1583,\n+       0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,\n+    1591,  1592,     0,     0,  2690,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1583,     0,     0,  1584,\n+    1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,     0,\n+       0,  3098,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1229,     0,\n+       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592,     0,     0,  3267,   111,   112,   113,\n+     114,   115,   116,   117,   118,  1230,   119,   120,   121,  1231,\n+    1232,  1233,   842,  1234,  1235,  1236,  1237,   843,   123,   124,\n+    1238,   125,   126,   127,   844,   129,   130,   131,   845,   846,\n+     847,   848,   849,  1239,   137,   138,   139,   140,   141,   142,\n+    1240,  1241,   143,   144,   850,   851,   147,  1242,   148,   149,\n+     150,   151,   852,  1243,   853,  1244,   854,   155,   156,   157,\n+     158,   159,   855,   161,   162,   163,  1245,   164,   165,   166,\n+     167,   168,   169,  1246,   856,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   857,   858,   183,  1247,   184,\n+    1248,   185,   186,   187,   188,   189,   190,  1249,   191,   192,\n+     193,   194,   195,  1250,  1251,   196,   197,   198,   199,   200,\n+    1252,   201,   202,   203,  1253,   204,   205,   206,  1254,   207,\n+     208,   209,   210,   859,   212,   213,   214,   215,   216,   860,\n+    1255,   218,  1256,   219,   220,   861,   222,  1257,   223,  1258,\n+     224,   862,  1259,   863,   227,   228,   864,   865,   231,  1260,\n+     232,  1261,   866,   867,   235,  1262,   236,   237,   238,   239,\n+     240,   241,   242,   868,   244,   245,   246,   247,  1263,   248,\n+     249,   250,   251,   252,   253,   254,  1264,   255,   869,   870,\n+     258,   259,   260,   261,   262,   871,   872,  1265,   873,  1266,\n+     266,   874,   875,   269,   876,   271,   272,   273,   274,   275,\n+     276,  1267,  1268,   277,   877,   279,   878,  1269,   281,   282,\n+     283,   284,   285,   286,   287,   288,   879,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n-     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n-     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n-     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n+     303,   304,   305,   306,   307,   880,   881,   882,   311,   312,\n+     313,   883,  1270,   315,   316,   884,   318,  1271,   885,   320,\n+     886,   322,   323,   324,  1272,   325,   326,  1273,  1274,   327,\n+     328,   329,  1275,  1276,   330,   887,   888,   333,   889,   890,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n-     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n-       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n-       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n-       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n-     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n-     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n-     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n-     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  3076,     0,     0,   111,   112,\n+    1277,  1278,  1279,  1280,   346,   347,   891,   892,   350,   351,\n+     893,   353,   354,   355,  1281,   356,   357,   358,   359,   360,\n+     361,  1282,   362,   363,   364,   894,   366,   367,   368,   369,\n+    1283,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,  1284,   383,   384,   895,   386,   387,\n+     388,   896,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,  1285,   897,   401,   402,   403,   404,   405,\n+     406,   898,   408,   409,   410,   899,   412,   413,   900,   415,\n+    1286,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   901,   429,   902,   431,  1287,   432,   433,\n+    1288,   434,   903,   436,   437,   438,   439,   440,  1289,   904,\n+     905,  1290,  1291,   443,   444,   906,   446,   907,  1292,   448,\n+     449,   908,   451,   452,   453,   454,   455,  1293,  1294,   456,\n+     457,   458,  1295,   459,   460,   461,   462,  1296,   463,   464,\n+     465,   466,   467,  1297,   910,  1298,   470,   911,   472,   473,\n+     474,   475,   476,  1299,  1300,   477,  1301,  1302,   478,   479,\n+     480,   481,   482,   483,   912,   913,   914,   915,   916,   917,\n+     918,   919,   920,   921,   922,   495,   496,   497,   498,   506,\n+       0,     0,     0,     0,     0,     0,     0,     0,  2073,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n      124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n@@ -7565,8 +8052,8 @@ static const yytype_int16 yytable[] =\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1980,     0,     0,   111,\n+     506,     0,     0,     0,     0,     0,     0,     0,     0,  2611,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n      121,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n@@ -7613,1110 +8100,1160 @@ static const yytype_int16 yytable[] =\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  2080,     0,     0,\n+     498,   841,  1412,   517,     0,     0,     0,   999,     0,     0,\n+    2614,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n-     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n-     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,\n-     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,\n-       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,\n-     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,\n-     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n-     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n+     120,   121,     0,     0,     0,   842,     0,     0,     0,     0,\n+     843,   123,   124,     0,   125,   126,   127,   844,   129,   130,\n+     131,   845,   846,   847,   848,   849,     0,   137,   138,   139,\n+     140,   141,   142,     0,     0,   143,   144,   850,   851,   147,\n+       0,   148,   149,   150,   151,   852,     0,   853,     0,   854,\n+     155,   156,   157,   158,   159,   855,   161,   162,   163,     0,\n+     164,   165,   166,   167,   168,   169,     0,   856,   171,   172,\n+     173,   174,   175,   176,   177,   178,   179,   180,   857,   858,\n+     183,  1618,   184,     0,   185,   186,   187,   188,   189,   190,\n        0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n      198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n-     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n-     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n-       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n-       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n+     206,     0,   207,   208,   209,   210,   859,   212,   213,   214,\n+     215,   216,   860,  1413,   218,     0,   219,   220,   861,   222,\n+       0,   223,     0,   224,   862,     0,   863,   227,   228,   864,\n+     865,   231,     0,   232,     0,   866,   867,   235,     0,   236,\n+     237,   238,   239,   240,   241,   242,   868,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n-     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n-       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n-     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,\n+     255,   869,   870,   258,   259,   260,   261,   262,   871,   872,\n+       0,   873,     0,   266,   874,   875,   269,   876,   271,   272,\n+     273,   274,   275,   276,     0,     0,   277,   877,   279,   878,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,   879,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,\n-     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,\n-       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n-       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n-     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n-       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n+     300,   301,   302,   303,   304,   305,   306,   307,   880,   881,\n+     882,   311,   312,   313,   883,     0,   315,   316,   884,   318,\n+       0,   885,   320,   886,   322,   323,   324,     0,   325,   326,\n+    1414,     0,   327,   328,   329,     0,     0,   330,   887,   888,\n+     333,   889,   890,   336,   337,   338,   339,   340,   341,   342,\n+     343,   344,   345,     0,     0,     0,     0,   346,   347,   891,\n+     892,   350,   351,   893,   353,   354,   355,     0,   356,   357,\n+     358,   359,   360,   361,     0,   362,   363,   364,   894,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n-     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n-       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n-     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n-     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n+     895,   386,   387,   388,   896,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,     0,   897,   401,   402,\n+     403,   404,   405,   406,   898,   408,   409,   410,   899,   412,\n+     413,   900,   415,     0,   416,   417,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   901,   429,   902,   431,\n+       0,   432,   433,     0,   434,   903,   436,   437,   438,   439,\n+     440,     0,   904,   905,     0,     0,   443,   444,   906,   446,\n+     907,  1415,   448,   449,   908,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n-       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n-       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,     0,  2782,  1409,   517,     0,     0,  1960,   999,\n-       0,     0,     0,     0,     0,  1961,  1962,     0,  2949,  1963,\n-    1964,  1965,   111,   112,   113,   114,   115,   116,   117,   118,\n-    1227,   119,   120,   121,  1228,  1229,  1230,  2783,  1231,  1232,\n-    1233,  1234,  2784,   123,   124,  1235,   125,   126,   127,  2785,\n-     129,   130,   131,     0,   758,  2786,   760,   761,  1236,   137,\n-     138,   139,   140,   141,   142,  1237,  1238,   143,   144,   762,\n-     763,   147,  1239,   148,   149,   150,   151,     0,  1240,  2787,\n-    1241,  2788,   155,   156,   157,   158,   159,  2789,   161,   162,\n-     163,  1242,   164,   165,   166,   167,   168,   169,  1243,  2790,\n+       0,   463,   464,   465,   466,   467,  1297,   910,     0,   470,\n+     911,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+       0,   478,   479,   480,   481,   482,   483,   912,   913,   914,\n+     915,   916,   917,   918,   919,   920,   921,   922,   495,   496,\n+     497,   498,   841,  1412,   517,     0,     0,     0,   999,  1416,\n+    1417,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n+     119,   120,   121,     0,     0,     0,   842,     0,     0,     0,\n+       0,   843,   123,   124,     0,   125,   126,   127,   844,   129,\n+     130,   131,   845,   846,   847,   848,   849,     0,   137,   138,\n+     139,   140,   141,   142,     0,     0,   143,   144,   850,   851,\n+     147,     0,   148,   149,   150,   151,   852,     0,   853,     0,\n+     854,   155,   156,   157,   158,   159,   855,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,   856,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   857,\n+     858,   183,  1620,   184,     0,   185,   186,   187,   188,   189,\n+     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n+     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n+     205,   206,     0,   207,   208,   209,   210,   859,   212,   213,\n+     214,   215,   216,   860,  1413,   218,     0,   219,   220,   861,\n+     222,     0,   223,     0,   224,   862,     0,   863,   227,   228,\n+     864,   865,   231,     0,   232,     0,   866,   867,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,   868,   244,   245,\n+     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n+       0,   255,   869,   870,   258,   259,   260,   261,   262,   871,\n+     872,     0,   873,     0,   266,   874,   875,   269,   876,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,   877,   279,\n+     878,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+     879,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   880,\n+     881,   882,   311,   312,   313,   883,     0,   315,   316,   884,\n+     318,     0,   885,   320,   886,   322,   323,   324,     0,   325,\n+     326,  1414,     0,   327,   328,   329,     0,     0,   330,   887,\n+     888,   333,   889,   890,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n+     891,   892,   350,   351,   893,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,   894,\n+     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n+     384,   895,   386,   387,   388,   896,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,   897,   401,\n+     402,   403,   404,   405,   406,   898,   408,   409,   410,   899,\n+     412,   413,   900,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   901,   429,   902,\n+     431,     0,   432,   433,     0,   434,   903,   436,   437,   438,\n+     439,   440,     0,   904,   905,     0,     0,   443,   444,   906,\n+     446,   907,  1415,   448,   449,   908,   451,   452,   453,   454,\n+     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n+     462,     0,   463,   464,   465,   466,   467,  1297,   910,     0,\n+     470,   911,   472,   473,   474,   475,   476,     0,     0,   477,\n+       0,     0,   478,   479,   480,   481,   482,   483,   912,   913,\n+     914,   915,   916,   917,   918,   919,   920,   921,   922,   495,\n+     496,   497,   498,   841,  1412,   517,     0,     0,     0,   999,\n+    1416,  1417,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n+       0,   119,   120,   121,     0,     0,     0,   842,     0,     0,\n+       0,     0,   843,   123,   124,     0,   125,   126,   127,   844,\n+     129,   130,   131,   845,   846,   847,   848,   849,     0,   137,\n+     138,   139,   140,   141,   142,     0,     0,   143,   144,   850,\n+     851,   147,     0,   148,   149,   150,   151,   852,     0,   853,\n+       0,   854,   155,   156,   157,   158,   159,   855,   161,   162,\n+     163,     0,   164,   165,   166,   167,   168,   169,     0,   856,\n      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-     768,   769,   183,  1244,   184,  1245,   185,   186,   187,   188,\n-     189,   190,  1246,   191,   192,   193,   194,   195,  1247,  1248,\n-     196,   197,   770,   199,   200,  1249,   201,   202,   203,  1250,\n-     204,   205,   206,  1251,   207,   208,   209,   210,     0,   212,\n-     213,   214,   215,   216,     0,  1252,   218,  1253,   219,   220,\n-     771,   222,  1254,   223,  1255,   224,  2791,  1256,  2792,   227,\n-     228,  2793,  2794,   231,  1257,   232,  1258,     0,     0,   235,\n-    1259,   236,   237,   238,   239,   240,   241,   242,  2795,   244,\n-     245,   246,   247,  1260,   248,   249,   250,   251,   252,   253,\n-     254,  1261,   255,  2796,     0,   258,   259,   260,   261,   262,\n-     778,   779,  1262,   780,  1263,   266,  2797,  2798,   269,  2799,\n-     271,   272,   273,   274,   275,   276,  1264,  1265,   277,  2800,\n-     279,  2801,  1266,   281,   282,   283,   284,   285,   286,   287,\n-     288,  2802,   290,   291,   292,   293,   294,   295,   296,   297,\n+     857,   858,   183,     0,   184,     0,   185,   186,   187,   188,\n+     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n+     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,\n+     204,   205,   206,     0,   207,   208,   209,   210,   859,   212,\n+     213,   214,   215,   216,   860,  1413,   218,     0,   219,   220,\n+     861,   222,     0,   223,     0,   224,   862,     0,   863,   227,\n+     228,   864,   865,   231,     0,   232,     0,   866,   867,   235,\n+       0,   236,   237,   238,   239,   240,   241,   242,   868,   244,\n+     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n+     254,     0,   255,   869,   870,   258,   259,   260,   261,   262,\n+     871,   872,     0,   873,     0,   266,   874,   875,   269,   876,\n+     271,   272,   273,   274,   275,   276,     0,     0,   277,   877,\n+     279,   878,     0,   281,   282,   283,   284,   285,   286,   287,\n+     288,   879,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-     787,  2803,   789,   311,   312,   313,  2804,  1267,   315,   316,\n-    2805,   318,  1268,     0,   320,   791,   322,   323,   324,  1269,\n-     325,   326,  1270,  1271,  2806,   328,   329,  1272,  1273,   330,\n-       0,  2807,   333,  2808,     0,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,  1274,  1275,  1276,  1277,   346,\n-     347,     0,  2809,   350,   351,     0,   353,   354,   355,  1278,\n-     356,   357,   358,   359,   360,   361,  1279,   362,   363,   364,\n-     795,   366,   367,   368,   369,  1280,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,  1281,\n-     383,   384,  2810,   386,   387,   388,   797,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,  1282,  2811,\n-     401,   402,   403,   404,   405,   406,  2812,   408,   409,   410,\n-    2813,   412,   413,   801,   415,  1283,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,  2814,   429,\n-       0,   431,  1284,   432,   433,  1285,   434,  2815,   436,   437,\n-     438,   439,   440,  1286,   804,   805,  1287,  1288,   443,   444,\n-       0,   446,     0,  1289,   448,   449,  2816,   451,   452,   453,\n-     454,   455,  2817,  1291,   456,   457,   458,  1292,   459,   460,\n-     461,   462,  1293,   463,   464,   465,   466,   467,     0,   808,\n-    1295,   470,  2818,   472,   473,   474,   475,   476,  1296,  1297,\n-     477,  1298,  1299,   478,   479,   480,   481,   482,   483,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     495,   496,   497,   498,     0,   506,     0,  1966,  1967,  1968,\n-    1960,  2819,  2820,  1971,  1972,  1973,  1974,  1961,  1962,     0,\n-       0,  1963,  1964,  1965,   111,   112,   113,   114,   115,   116,\n-     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n-     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n-       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n-     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n-       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n-     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n-       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n-     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n-       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n-     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n-     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n-       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n-     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n-       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n-     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n-     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n-     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n-     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n-     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n-     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n-       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n-       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n-     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n-     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n-     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n-     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n-     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n-       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,     0,     0,     0,  1966,\n-    1967,  1968,     0,  1969,  1970,  1971,  1972,  1973,  1974,  1554,\n-       0,     0,  1555,     0,     0,     0,  1556,  1557,  1558,  1559,\n-    1560,  1561,  1562,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1554,     0,     0,  1555,     0,     0,  1563,  1556,  1557,\n-    1558,  1559,  1560,  1561,  1562,     0,     0,  1565,     0,     0,\n-       0,     0,     0,     0,  1566,     0,     0,     0,     0,  1563,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,     0,     0,     0,     0,  1566,     0,  1554,  1567,\n-       0,  1555,     0,     0,     0,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1567,     0,     0,     0,     0,  1563,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,\n-       0,     0,     0,  1566,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1554,     0,     0,  1555,     0,     0,     0,\n-    1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,  1567,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1563,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1565,     0,  1568,     0,     0,     0,     0,  1566,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1569,\n-       0,     0,     0,     0,  1570,  1568,     0,     0,     0,     0,\n-       0,     0,     0,  1567,     0,     0,     0,     0,     0,     0,\n-       0,  1569,     0,     0,     0,     0,  1570,  1571,  1572,     0,\n+     880,   881,   882,   311,   312,   313,   883,     0,   315,   316,\n+     884,   318,     0,   885,   320,   886,   322,   323,   324,     0,\n+     325,   326,  1414,     0,   327,   328,   329,     0,     0,   330,\n+     887,   888,   333,   889,   890,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n+     347,   891,   892,   350,   351,   893,   353,   354,   355,     0,\n+     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n+     894,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n+     383,   384,   895,   386,   387,   388,   896,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,     0,   897,\n+     401,   402,   403,   404,   405,   406,   898,   408,   409,   410,\n+     899,   412,   413,   900,   415,     0,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   901,   429,\n+     902,   431,     0,   432,   433,     0,   434,   903,   436,   437,\n+     438,   439,   440,     0,   904,   905,     0,     0,   443,   444,\n+     906,   446,   907,  1415,   448,   449,   908,   451,   452,   453,\n+     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n+     461,   462,     0,   463,   464,   465,   466,   467,  1297,   910,\n+       0,   470,   911,   472,   473,   474,   475,   476,     0,     0,\n+     477,     0,     0,   478,   479,   480,   481,   482,   483,   912,\n+     913,   914,   915,   916,   917,   918,   919,   920,   921,   922,\n+     495,   496,   497,   498,     0,     0,  1558,     0,     0,  1559,\n+       0,  1416,  1417,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1573,     0,     0,     0,     0,     0,     0,  1571,\n-    1572,     0,  1568,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1573,     0,     0,     0,  1569,     0,\n-       0,     0,     0,  1570,     0,     0,     0,     0,  1574,     0,\n-       0,  1575,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1576,  1571,  1572,  1577,     0,\n-    1574,     0,     0,  1575,     0,     0,     0,  1568,     0,     0,\n-       0,  1573,     0,     0,     0,     0,     0,  1576,     0,     0,\n-    1577,     0,     0,  1569,     0,     0,     0,     0,  1570,     0,\n-       0,     0,     0,  1554,     0,     0,  1555,     0,     0,     0,\n-    1556,  1557,  1558,  1559,  1560,  1561,  1562,  1574,     0,     0,\n-    1575,  1571,  1572,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1563,     0,     0,  1576,     0,  1573,  1577,     0,     0,\n-       0,  1565,     0,     0,     0,     0,     0,     0,  1566,     0,\n+       0,     0,     0,     0,  1567,     0,     0,     0,     0,  2096,\n+       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,\n+       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1578,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1574,  1567,     0,  1575,     0,     0,     0,     0,\n-       0,     0,     0,  1578,     0,     0,     0,     0,     0,  1576,\n-       0,     0,  1577,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,  1571,     0,     0,     0,\n+       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,\n+       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,  1571,     0,     0,     0,\n+    2097,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,\n+       0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1567,     0,  1571,     0,  1855,     0,\n+       0,     0,     0,     0,  1569,     0,  1558,     0,     0,  1559,\n+    1572,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n+       0,     0,     0,     0,     0,     0,  1573,     0,     0,     0,\n+       0,  1574,     0,     0,  1567,     0,  1571,     0,     0,     0,\n+    1891,     0,     0,     0,  1569,  1892,     0,     0,     0,     0,\n+    1572,  1570,     0,     0,  1575,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1573,     0,     0,  1577,\n+       0,  1574,     0,     0,     0,     0,  1571,     0,     0,  3370,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1578,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,\n+       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,\n+    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,\n+       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,\n+    1572,     0,     0,     0,  1575,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1578,  1573,     0,  1579,  1577,\n+       0,  1574,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1575,  1576,     0,     0,  1582,     0,\n+       0,     0,     0,     0,     0,  1578,     0,     0,  1579,  1577,\n+       0,     0,  3371,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,\n+       0,     0,     0,     0,     0,  1578,     0,     0,  1579,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    2100,     0,  1580,     0,     0,  1581,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,\n+       0,     0,     0,     0,     0,     0,  1862,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1579,     0,  1568,  1580,  1581,\n-    1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,\n-       0,     0,  2942,  1569,     0,  1578,     0,  1579,  1570,     0,\n-    1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,\n-       0,     0,     0,     0,  2948,     0,     0,     0,     0,     0,\n-       0,  1571,  1572,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1573,     0,     0,     0,\n-       0,     0,     0,     0,  1579,     0,     0,  1580,  1581,  1582,\n-       0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,\n-       0,  3093,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1574,     0,     0,  1575,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1576,\n-       0,     0,  1577,     0,     0,     0,     0,     0,     0,  1579,\n-       0,     0,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,\n-    1587,  1588,     0,     0,     0,     0,  3116,     0,     0,     0,\n-       0,     0,  1554,     0,     0,  1555,     0,     0,     0,  1556,\n-    1557,  1558,  1559,  1560,  1561,  1562,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1554,     0,     0,  1555,     0,     0,\n-    1563,  1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,     0,\n-    1565,     0,     0,     0,     0,     0,     0,  1566,     0,     0,\n-       0,     0,  1563,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1565,     0,     0,  1578,     0,     0,     0,  1566,\n-       0,  1554,  1567,     0,  1555,     0,     0,     0,  1556,  1557,\n-    1558,  1559,  1560,  1561,  1562,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1567,     0,     0,     0,     0,  1563,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1565,\n-       0,     0,     0,     0,     0,     0,  1566,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1554,     0,     0,  1555,\n-       0,     0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,\n-       0,  1567,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1563,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1565,     0,  1568,     0,     0,  1579,\n-       0,  1566,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,\n-    1587,  1588,  1569,     0,     0,     0,  3211,  1570,  1568,     0,\n-       0,     0,     0,     0,     0,     0,  1567,     0,     0,     0,\n-       0,     0,     0,     0,  1569,     0,     0,     0,     0,  1570,\n-    1571,  1572,     0,     0,     0,  1554,     0,     0,  1555,     0,\n-       0,     0,  1556,  1557,     0,  1573,  1560,  1561,  1562,     0,\n-       0,     0,  1571,  1572,     0,  1568,     0,     0,     0,     0,\n+       0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1582,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,\n+    1559,     0,     0,     0,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,  1567,     0,     0,  1582,  1897,\n+       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,\n+    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,     0,\n+       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,\n+    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,  1904,\n+       0,     0,     0,     0,     0,  1569,     0,  1558,     0,     0,\n+    1559,     0,  1570,     0,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,  1567,     0,  1571,     0,     0,\n+       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n+       0,  1572,  1570,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,\n+       0,     0,  1574,     0,     0,     0,     0,  1571,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1902,     0,     0,     0,\n+       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,  1573,     0,     0,\n-       0,  1569,     0,  1565,     0,     0,  1570,     0,     0,     0,\n-    1566,  1574,     0,     0,  1575,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1576,  1571,\n-    1572,  1577,     0,  1574,     0,  1567,  1575,     0,     0,     0,\n-    1568,     0,     0,     0,  1573,     0,     0,     0,     0,     0,\n-    1576,     0,     0,  1577,     0,     0,  1569,     0,     0,     0,\n-       0,  1570,     0,     0,     0,     0,  1554,     0,     0,  1555,\n-       0,     0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,\n-    1574,     0,     0,  1575,  1571,  1572,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1563,     0,     0,  1576,     0,  1573,\n-    1577,     0,     0,     0,  1565,     0,  1554,     0,     0,  1555,\n-       0,  1566,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,\n-       0,     0,     0,     0,  1578,     0,     0,     0,     0,  1568,\n-       0,     0,     0,     0,  1563,  1574,  1567,     0,  1575,     0,\n-       0,     0,     0,     0,  1565,  1569,  1578,     0,     0,     0,\n-    1570,  1566,  1576,     0,     0,  1577,     0,     0,     0,     0,\n+    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0, -1945, -1945,     0,  1567,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,\n-       0,     0,     0,  1578,     0,     0,     0,     0,     0,     0,\n+       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1578,  1573,     0,  1579,\n+    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1994,     0,  1580,     0,     0,  1581,     0,     0,     0,\n+       0,  1572,     0,     0,     0,  1575,  1576,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1578,  1573,     0,  1579,\n+    1577,     0,  1574,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1575,  1576,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,\n+    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1582,\n+       0,     0,     0,     0,     0,     0,  1578,     0,     0,  1579,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1558,     0,     0,  1559,  1582,\n+       0,     0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1558,     0,     0,\n+    1559,     0,     0,  1567,  1560,  1561,  1562,  1563,  1564,  1565,\n+    1566,     0,     0,  1569,     0,     0,     0,     0,     0,  1582,\n+    1570,     0,     0,     0,     0,  1567,     0,     0,     0,  2668,\n+       0,     0,     0,     0,     0,  1569,     0,     0,     0,     0,\n+       0,     0,  1570,  1583,     0,  1571,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1582,\n+       0,     0,     0,     0,     0,     0,     0,  1571,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0, -1945,  1579,     0,\n-    1568,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,  1576,     0,     0,     0,  3267,  1569,     0,  1578,     0,\n-    1579,  1570,     0,  1580,  1581,  1582,     0,  1583,  1584,  1585,\n-    1586,  1587,  1588,     0,     0,     0,     0,  3289,     0,     0,\n-    1568,     0,     0,     0,  1571,  1572,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1569,     0,     0,  1573,\n-       0,  1570,     0,     0,     0,     0,     0,  1579,     0,     0,\n-    1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,  1588,\n-       0,     0,  1750,     0,  1571,  1572,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1574,     0,     0,  1575,  1573,\n-       0,     0,     0,     0,     0,     0,     0,  1578,     0,     0,\n-       0,     0,  1576,     0,     0,  1577,     0,     0,     0,     0,\n-       0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,  1574,     0,  2678,  1575,     0,\n+       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1576,     0,     0,  1577,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,     0,     0,  1572,\n+       0,  1558,     0,     0,  1559,     0,     0,     0,  1560,  1561,\n+    1562,  1563,  1564,  1565,  1566,  1573,     0,     0,     0,     0,\n+    1574,  1572,     0,  1583,     0,     0,  1584,  1585,  1586,  1567,\n+    1587,  1588,  1589,  1590,  1591,  1592,     0,  1573,     0,  1569,\n+       0,     0,  1574,  1575,  1576,     0,  1570,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1577,     0,\n+       0,     0,     0,     0,     0,  1575,  1576,     0,     0,     0,\n+       0,  1571,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1577,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,  1578,     0,     0,  1579,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1580,     0,     0,  1581,     0,  1578,     0,     0,  1579,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1580,     0,     0,  1581,     0,     0,     0,\n+       0,     0,     0,     0,  1558,     0,     0,  1559,     0,     0,\n+       0,  1560,  1561,  1562,  1563,  1564,  1565,  1566,     0,     0,\n+       0,     0,     0,     0,     0,  1572,  1558,     0,     0,  1559,\n+       0,     0,  1567,  1560,  1561,     0,     0,  1564,  1565,  1566,\n+       0,  1573,  1569,     0,     0,  1558,  1574,     0,  1559,  1570,\n+       0,     0,  1560,  1561,  1567,     0,  1564,  1565,  1566,     0,\n+       0,     0,     0,     0,  1569,     0,     0,  1582,     0,  1575,\n+    1576,  1570,     0,     0,  1571,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1569,  1577,     0,     0,     0,     0,  1582,\n+    1570,     0,     0,     0,     0,     0,  1571,     0,     0,     0,\n+    2657,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1571,     0,     0,     0,     0,\n+    1578,     0,     0,  1579,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1580,     0,     0,\n+    1581,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n-       0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,  1584,\n-    1585,  1586,  1587,  1588,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1572,     0,\n+       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592,  1573,     0,     0,     0,     0,  1574,\n+    1572,     0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,\n+    1587,  1588,  1589,  1590,  1591,  1592,  1573,     0,     0,  1572,\n+       0,  1574,  1575,  1576,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,  1573,     0,  1577,     0,     0,\n+    1574,     0,     0,  1582,  1575,  1576,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,  1577,\n+       0,     0,     0,  1575,  1576,     0,     0,     0,     0,     0,\n+       0,     0,     0,  1578,     0,     0,  1579,     0,  1577,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n+    1580,     0,     0,  1581,     0,  1578,     0,     0,  1579,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1580,     0,  1578,  1581,     0,  1579,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,  1580,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1583,     0,     0,\n+    1584,  1585,  1586,     0,  1587,  1588,  1589,  1590,  1591,  1592,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,  1582,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,  1582,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,  1582,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,     0,     0,  3085,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1226,\n-       0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,     0,     0,  3252,   111,   112,\n-     113,   114,   115,   116,   117,   118,  1227,   119,   120,   121,\n-    1228,  1229,  1230,   842,  1231,  1232,  1233,  1234,   843,   123,\n-     124,  1235,   125,   126,   127,   844,   129,   130,   131,   845,\n-     846,   847,   848,   849,  1236,   137,   138,   139,   140,   141,\n-     142,  1237,  1238,   143,   144,   850,   851,   147,  1239,   148,\n-     149,   150,   151,   852,  1240,   853,  1241,   854,   155,   156,\n-     157,   158,   159,   855,   161,   162,   163,  1242,   164,   165,\n-     166,   167,   168,   169,  1243,   856,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   857,   858,   183,  1244,\n-     184,  1245,   185,   186,   187,   188,   189,   190,  1246,   191,\n-     192,   193,   194,   195,  1247,  1248,   196,   197,   198,   199,\n-     200,  1249,   201,   202,   203,  1250,   204,   205,   206,  1251,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+    1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,  1589,\n+    1590,  2117,  1592,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,\n+    1588,  1589,  1590,  1591,  1592,  1229,     0,  2014,     0,     0,\n+       0,  1583,     0,     0,  1584,  1585,  1586,     0,  1587,  1588,\n+    1589,  1590,  1591,  1592,   111,   112,   113,   114,   115,   116,\n+     117,   118,  1230,   119,   120,   121,  1231,  1232,  1233,   842,\n+    1234,  1235,  1236,  1237,   843,   123,   124,  1238,   125,   126,\n+     127,   844,   129,   130,   131,   845,   846,   847,   848,   849,\n+    1239,   137,   138,   139,   140,   141,   142,  1240,  1241,   143,\n+     144,   850,   851,   147,  1242,   148,   149,   150,   151,   852,\n+    1243,   853,  1244,   854,   155,   156,   157,   158,   159,   855,\n+     161,   162,   163,  1245,   164,   165,   166,   167,   168,   169,\n+    1246,   856,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   857,   858,   183,  1247,   184,  1248,   185,   186,\n+     187,   188,   189,   190,  1249,   191,   192,   193,   194,   195,\n+    1250,  1251,   196,   197,   198,   199,   200,  1252,   201,   202,\n+     203,  1253,   204,   205,   206,  1254,   207,   208,   209,   210,\n+     859,   212,   213,   214,   215,   216,   860,  1255,   218,  1256,\n+     219,   220,   861,   222,  1257,   223,  1258,   224,   862,  1259,\n+     863,   227,   228,   864,   865,   231,  1260,   232,  1261,   866,\n+     867,   235,  1262,   236,   237,   238,   239,   240,   241,   242,\n+     868,   244,   245,   246,   247,  1263,   248,   249,   250,   251,\n+     252,   253,   254,  1264,   255,   869,   870,   258,   259,   260,\n+     261,   262,   871,   872,  1265,   873,  1266,   266,   874,   875,\n+     269,   876,   271,   272,   273,   274,   275,   276,  1267,  1268,\n+     277,   877,   279,   878,  1269,   281,   282,   283,   284,   285,\n+     286,   287,   288,   879,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,   880,   881,   882,   311,   312,   313,   883,  1270,\n+     315,   316,   884,   318,  1271,   885,   320,   886,   322,   323,\n+     324,  1272,   325,   326,  1273,  1274,   327,   328,   329,  1275,\n+    1276,   330,   887,   888,   333,   889,   890,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,  1277,  1278,  1279,\n+    1280,   346,   347,   891,   892,   350,   351,   893,   353,   354,\n+     355,  1281,   356,   357,   358,   359,   360,   361,  1282,   362,\n+     363,   364,   894,   366,   367,   368,   369,  1283,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,  1284,   383,   384,   895,   386,   387,   388,   896,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+    1285,   897,   401,   402,   403,   404,   405,   406,   898,   408,\n+     409,   410,   899,   412,   413,   900,   415,  1286,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     901,   429,   902,   431,  1287,   432,   433,  1288,   434,   903,\n+     436,   437,   438,   439,   440,  1289,   904,   905,  1290,  1291,\n+     443,   444,   906,   446,   907,  1292,   448,   449,   908,   451,\n+     452,   453,   454,   455,  1293,  1294,   456,   457,   458,  1295,\n+     459,   460,   461,   462,  1296,   463,   464,   465,   466,   467,\n+    1297,   910,  1298,   470,   911,   472,   473,   474,   475,   476,\n+    1299,  1300,   477,  1301,  1302,   478,   479,   480,   481,   482,\n+     483,   912,   913,   914,   915,   916,   917,   918,   919,   920,\n+     921,   922,   495,   496,   497,   498,  1229,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n+     116,   117,   118,  1230,   119,   120,   121,  1231,  1232,  1233,\n+     842,  1234,  1235,  1236,  1237,   843,   123,   124,  1238,   125,\n+     126,   127,   844,   129,   130,   131,   845,   846,   847,   848,\n+     849,  1239,   137,   138,   139,   140,   141,   142,  1240,  1241,\n+     143,   144,   850,   851,   147,  1242,   148,   149,   150,   151,\n+     852,  1243,   853,  1244,   854,   155,   156,   157,   158,   159,\n+     855,   161,   162,   163,  1245,   164,   165,   166,   167,   168,\n+     169,  1246,   856,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   857,   858,   183,  1247,   184,  1248,   185,\n+     186,   187,   188,   189,   190,  1249,   191,   192,   193,   194,\n+     195,  1250,  1251,   196,   197,   198,   199,   200,  1252,   201,\n+     202,   203,  1253,   204,   205,   206,  1254,   207,   208,   209,\n+     210,   859,   212,   213,   214,   215,   216,   860,  1255,   218,\n+    1256,   219,   220,   861,   222,  1257,   223,  1258,   224,   862,\n+    1259,   863,   227,   228,   864,   865,   231,  1260,   232,  1261,\n+     866,   867,   235,  1262,   236,   237,   238,   239,   240,   241,\n+     242,   868,   244,   245,   246,   247,  1263,   248,   249,   250,\n+     251,   252,   253,   254,  1264,   255,   869,   870,   258,   259,\n+     260,   261,   262,   871,   872,  1265,   873,  1266,   266,   874,\n+     875,   269,   876,   271,   272,   273,   274,   275,   276,  1267,\n+    1268,   277,   877,   279,   878,  1269,   281,   282,   283,   284,\n+     285,   286,   287,   288,   879,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,   880,   881,   882,   311,   312,   313,   883,\n+    1270,   315,   316,   884,   318,  1271,   885,   320,   886,   322,\n+     323,   324,  1272,   325,   326,  1273,  1274,   327,   328,   329,\n+    1275,  1276,   330,   887,   888,   333,   889,   890,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,  1277,  1278,\n+    1279,  1280,   346,   347,   891,   892,   350,   351,   893,   353,\n+     354,   355,  1281,   356,   357,   358,   359,   360,   361,  1282,\n+     362,   363,   364,   894,   366,   367,   368,   369,  1283,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,   382,  1284,   383,   384,   895,   386,   387,   388,   896,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,  1285,   897,   401,   402,   403,   404,   405,   406,   898,\n+     408,   409,   410,   899,   412,   413,   900,   415,  1286,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   901,   429,   902,   431,  1287,   432,   433,  1288,   434,\n+     903,   436,   437,   438,   439,   440,  1289,   904,   905,  1290,\n+    1291,   443,   444,   906,   446,   907,  1292,   448,   449,   908,\n+     451,   452,   453,   454,   455,  1293,  1294,   456,   457,   458,\n+    1295,   459,   460,   461,   462,  1296,   463,   464,   465,   466,\n+     467,  1297,   910,  1298,   470,   911,   472,   473,   474,   475,\n+     476,  1299,  1300,   477,  1301,  1302,   478,   479,   480,   481,\n+     482,   483,   912,   913,   914,   915,   916,   917,   918,   919,\n+     920,   921,   922,   495,   496,   497,   498,  1229,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n+    2162,   116,   117,   118,  1230,   119,   120,   121,  1231,  1232,\n+    1233,   842,  1234,  1235,  1236,  1237,   843,   123,   124,  1238,\n+     125,   126,   127,   844,   129,   130,   131,   845,   846,   847,\n+     848,   849,  1239,   137,   138,   139,   140,   141,   142,  1240,\n+    1241,   143,   144,   850,   851,   147,  1242,   148,   149,   150,\n+     151,   852,  1243,   853,  1244,   854,   155,   156,   157,   158,\n+     159,   855,   161,   162,   163,  1245,   164,   165,   166,   167,\n+     168,   169,  1246,   856,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   857,   858,   183,  1247,   184,  1248,\n+     185,   186,   187,   188,   189,   190,  1249,   191,   192,   193,\n+     194,   195,  1250,  1251,   196,   197,   198,  2163,   200,  1252,\n+     201,   202,   203,  1253,   204,   205,   206,  1254,   207,   208,\n+     209,   210,   859,   212,   213,   214,   215,   216,   860,  1255,\n+     218,  1256,   219,   220,   861,   222,  1257,   223,  1258,   224,\n+     862,  1259,   863,   227,   228,   864,   865,   231,  1260,   232,\n+    1261,   866,   867,   235,  1262,   236,   237,   238,   239,   240,\n+     241,   242,   868,   244,   245,   246,   247,  1263,   248,   249,\n+     250,   251,   252,   253,   254,  1264,   255,   869,   870,   258,\n+     259,   260,   261,   262,   871,   872,  1265,   873,  1266,   266,\n+     874,   875,   269,   876,   271,   272,   273,   274,   275,   276,\n+    1267,  1268,   277,   877,   279,   878,  1269,   281,   282,   283,\n+     284,   285,   286,   287,   288,   879,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,   880,   881,   882,   311,   312,   313,\n+     883,  1270,   315,   316,   884,   318,  1271,   885,   320,   886,\n+     322,   323,   324,  1272,   325,   326,  1273,  1274,   327,   328,\n+     329,  1275,  1276,   330,   887,   888,   333,   889,   890,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,  1277,\n+    1278,  1279,  1280,   346,   347,   891,   892,   350,   351,   893,\n+     353,   354,   355,  1281,   356,   357,   358,   359,   360,   361,\n+    1282,   362,   363,   364,   894,   366,   367,   368,   369,  1283,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,  1284,   383,   384,   895,   386,   387,   388,\n+     896,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,  1285,   897,   401,   402,   403,   404,   405,  2164,\n+     898,   408,   409,   410,   899,   412,   413,   900,   415,  1286,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   901,   429,   902,   431,  1287,   432,   433,  1288,\n+     434,   903,   436,   437,   438,   439,   440,  1289,   904,   905,\n+    1290,  1291,   443,   444,   906,   446,   907,  1292,   448,   449,\n+     908,   451,   452,   453,   454,   455,  1293,  1294,   456,   457,\n+     458,  1295,   459,   460,   461,   462,  1296,   463,   464,   465,\n+     466,   467,  1297,   910,  1298,   470,   911,   472,   473,   474,\n+     475,   476,  1299,  1300,   477,  1301,  1302,   478,   479,   480,\n+     481,   482,   483,   912,   913,   914,   915,   916,   917,   918,\n+     919,   920,   921,   922,   495,   496,   497,   498,   841,     0,\n+     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n+     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n+       0,     0,   842,     0,     0,     0,     0,   843,   123,   124,\n+       0,   125,   126,   127,   844,   129,   130,   131,   845,   846,\n+     847,   848,   849,     0,   137,   138,   139,   140,   141,   142,\n+       0,     0,   143,   144,   850,   851,   147,     0,   148,   149,\n+     150,   151,   852,     0,   853,     0,   854,   155,   156,   157,\n+     158,   159,   855,   161,   162,   163,     0,   164,   165,   166,\n+     167,   168,   169,     0,   856,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   857,   858,   183,     0,   184,\n+       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n+     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n+       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n+     208,   209,   210,   859,   212,   213,   214,   215,   216,   860,\n+    1413,   218,     0,   219,   220,   861,   222,     0,   223,     0,\n+     224,   862,     0,   863,   227,   228,   864,   865,   231,     0,\n+     232,     0,   866,   867,   235,     0,   236,   237,   238,   239,\n+     240,   241,   242,   868,   244,   245,   246,   247,     0,   248,\n+     249,   250,   251,   252,   253,   254,     0,   255,   869,   870,\n+     258,   259,   260,   261,   262,   871,   872,     0,   873,     0,\n+     266,   874,   875,   269,   876,   271,   272,   273,   274,   275,\n+     276,     0,     0,   277,   877,   279,   878,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,   879,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   307,   880,   881,   882,   311,   312,\n+     313,   883,     0,   315,   316,   884,   318,     0,   885,   320,\n+     886,   322,   323,   324,     0,   325,   326,  1414,     0,   327,\n+     328,   329,     0,     0,   330,   887,   888,   333,   889,   890,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+       0,     0,     0,     0,   346,   347,   891,   892,   350,   351,\n+     893,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n+     361,     0,   362,   363,   364,   894,   366,   367,   368,   369,\n+       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,     0,   383,   384,   895,   386,   387,\n+     388,   896,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,     0,   897,   401,   402,   403,   404,   405,\n+     406,   898,   408,   409,   410,   899,   412,   413,   900,   415,\n+       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   901,   429,   902,   431,     0,   432,   433,\n+       0,   434,   903,   436,   437,   438,   439,   440,     0,   904,\n+     905,     0,     0,   443,   444,   906,   446,   907,  1415,   448,\n+     449,   908,   451,   452,   453,   454,   455,     0,     0,   456,\n+     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n+     465,   466,   467,  1297,   910,     0,   470,   911,   472,   473,\n+     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n+     480,   481,   482,   483,   912,   913,   914,   915,   916,   917,\n+     918,   919,   920,   921,   922,   495,   496,   497,   498,   841,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n+     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n+       3,     4,     0,   842,     0,     0,     0,     0,   843,   123,\n+     124,     0,   125,   126,   127,   844,   129,   130,   131,   845,\n+     846,   847,   848,   849,     0,   137,   138,   139,   140,   141,\n+     142,     0,     0,   143,   144,   850,   851,   147,     0,   148,\n+     149,   150,   151,   852,     0,   853,     0,   854,   155,   156,\n+     157,   158,   159,   855,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,   856,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   857,   858,   183,     0,\n+     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n+     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n+     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n      207,   208,   209,   210,   859,   212,   213,   214,   215,   216,\n-     860,  1252,   218,  1253,   219,   220,   861,   222,  1254,   223,\n-    1255,   224,   862,  1256,   863,   227,   228,   864,   865,   231,\n-    1257,   232,  1258,   866,   867,   235,  1259,   236,   237,   238,\n-     239,   240,   241,   242,   868,   244,   245,   246,   247,  1260,\n-     248,   249,   250,   251,   252,   253,   254,  1261,   255,   869,\n-     870,   258,   259,   260,   261,   262,   871,   872,  1262,   873,\n-    1263,   266,   874,   875,   269,   876,   271,   272,   273,   274,\n-     275,   276,  1264,  1265,   277,   877,   279,   878,  1266,   281,\n+     860,     0,   218,     0,   219,   220,   861,   222,     0,   223,\n+       0,   224,   862,     0,   863,   227,   228,   864,   865,   231,\n+       0,   232,     0,   866,   867,   235,     0,   236,   237,   238,\n+     239,   240,   241,   242,   868,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,   869,\n+     870,   258,   259,   260,   261,   262,   871,   872,     0,   873,\n+       0,   266,   874,   875,   269,   876,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,   877,   279,   878,     0,   281,\n      282,   283,   284,   285,   286,   287,   288,   879,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n      302,   303,   304,   305,   306,   307,   880,   881,   882,   311,\n-     312,   313,   883,  1267,   315,   316,   884,   318,  1268,   885,\n-     320,   886,   322,   323,   324,  1269,   325,   326,  1270,  1271,\n-     327,   328,   329,  1272,  1273,   330,   887,   888,   333,   889,\n+     312,   313,   883,     0,   315,   316,   884,   318,     0,   885,\n+     320,   886,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,   887,   888,   333,   889,\n      890,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,  1274,  1275,  1276,  1277,   346,   347,   891,   892,   350,\n-     351,   893,   353,   354,   355,  1278,   356,   357,   358,   359,\n-     360,   361,  1279,   362,   363,   364,   894,   366,   367,   368,\n-     369,  1280,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,  1281,   383,   384,   895,   386,\n+     345,     0,     0,     0,     0,   346,   347,   891,   892,   350,\n+     351,   893,   353,   354,   355,     0,   356,   357,   358,   359,\n+     360,   361,     0,   362,   363,   364,   894,   366,   367,   368,\n+     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,     0,   383,   384,   895,   386,\n      387,   388,   896,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,  1282,   897,   401,   402,   403,   404,\n+     397,   398,   399,   400,     0,   897,   401,   402,   403,   404,\n      405,   406,   898,   408,   409,   410,   899,   412,   413,   900,\n-     415,  1283,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   901,   429,   902,   431,  1284,   432,\n-     433,  1285,   434,   903,   436,   437,   438,   439,   440,  1286,\n-     904,   905,  1287,  1288,   443,   444,   906,   446,   907,  1289,\n-     448,   449,   908,   451,   452,   453,   454,   455,  1290,  1291,\n-     456,   457,   458,  1292,   459,   460,   461,   462,  1293,   463,\n-     464,   465,   466,   467,  1294,   910,  1295,   470,   911,   472,\n-     473,   474,   475,   476,  1296,  1297,   477,  1298,  1299,   478,\n+     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   901,   429,   902,   431,     0,   432,\n+     433,     0,   434,   903,   436,   437,   438,   439,   440,     0,\n+     904,   905,     0,     0,   443,   444,   906,   446,   907,     0,\n+     448,   449,   908,   451,   452,   453,   454,   455,     0,     0,\n+     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n+     464,   465,   466,   467,  1297,   910,     0,   470,   911,   472,\n+     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   912,   913,   914,   915,   916,\n      917,   918,   919,   920,   921,   922,   495,   496,   497,   498,\n-     506,     0,     0,     0,     0,     0,     0,     0,     0,  2063,\n+     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n-     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,\n-     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,\n-     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,\n-     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,\n+     121,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n+     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,\n+     132,   133,   134,   135,   136,     0,   137,   138,   139,   140,\n+     141,   142,     0,   606,   143,   144,   145,   146,   147,     0,\n+     148,   149,   150,   151,   607,     0,   608,     0,   154,   155,\n+     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,\n+     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,\n      174,   175,   176,   177,   178,   179,   180,   181,   182,   183,\n        0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n      191,   192,   193,   194,   195,     0,     0,   196,   197,   198,\n      199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n        0,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n-     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n+     216,   609,     0,   218,     0,   219,   220,   221,   222,     0,\n+     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,\n      231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n-     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,\n+     256,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n+     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,\n+     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,\n+     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,\n-     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,\n-     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n-       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,\n-       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,\n+     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,\n+     311,   312,   313,   314,     0,   315,   316,   317,   318,     0,\n+     611,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n+       0,   327,   328,   329,     0,     0,   330,   331,   332,   333,\n+     334,   613,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,     0,     0,     0,     0,   346,   347,   614,   349,\n      350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n      359,   360,   361,     0,   362,   363,   364,   365,   366,   367,\n      368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,\n+     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n-     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,\n-       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,\n-       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,\n+     423,   424,   425,   426,   427,   428,   429,   616,   431,     0,\n+     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,\n+       0,   441,   442,     0,     0,   443,   444,   617,   446,   618,\n+       0,   448,   449,   619,   451,   452,   453,   454,   455,     0,\n        0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,\n+     463,   464,   465,   466,   467,   468,   469,     0,   470,   471,\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,\n-    2601,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     498,   110,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n-     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,\n+     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n+     131,   132,   133,   134,   135,   136,     0,   137,   138,   139,\n      140,   141,   142,     0,     0,   143,   144,   145,   146,   147,\n-       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,\n-     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,\n-     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,\n+       0,   148,   149,   150,   151,   152,     0,   153,     0,   154,\n+     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,\n+     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,\n      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n      183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n        0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n      198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n      206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n      215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n-       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n-       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n-     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n-     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n-       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n-     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,\n+       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,\n+     230,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,\n+     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,\n-     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,\n+     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n+     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,\n        0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n-       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n-     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n+       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,\n+     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n-       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n+     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n      358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n+     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n-       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n      440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n      447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n        0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n-       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,   841,  1409,   517,     0,     0,     0,   999,     0,\n-       0,  2604,     0,     0,     0,     0,     0,     0,     0,     0,\n+     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,   842,     0,     0,     0,\n-       0,   843,   123,   124,     0,   125,   126,   127,   844,   129,\n-     130,   131,   845,   846,   847,   848,   849,     0,   137,   138,\n-     139,   140,   141,   142,     0,     0,   143,   144,   850,   851,\n-     147,     0,   148,   149,   150,   151,   852,     0,   853,     0,\n-     854,   155,   156,   157,   158,   159,   855,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,   856,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   857,\n-     858,   183,  1614,   184,     0,   185,   186,   187,   188,   189,\n+     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n+     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n+     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n+     147,  1691,   148,   149,   150,   151,   152,     0,     0,  1692,\n+     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,\n+    1693,   164,   165,   166,   167,   168,   169,     0,     0,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n+     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n      190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n      197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n-     205,   206,     0,   207,   208,   209,   210,   859,   212,   213,\n-     214,   215,   216,   860,  1410,   218,     0,   219,   220,   861,\n-     222,     0,   223,     0,   224,   862,     0,   863,   227,   228,\n-     864,   865,   231,     0,   232,     0,   866,   867,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,   868,   244,   245,\n+     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,\n+     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,\n+     222,     0,   223,  1694,   224,     0,     0,     0,   227,   228,\n+     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,\n+     236,   237,   238,   239,   240,  1695,   242,     0,   244,   245,\n      246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,   869,   870,   258,   259,   260,   261,   262,   871,\n-     872,     0,   873,     0,   266,   874,   875,   269,   876,   271,\n-     272,   273,   274,   275,   276,     0,     0,   277,   877,   279,\n-     878,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-     879,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,   880,\n-     881,   882,   311,   312,   313,   883,     0,   315,   316,   884,\n-     318,     0,   885,   320,   886,   322,   323,   324,     0,   325,\n-     326,  1411,     0,   327,   328,   329,     0,     0,   330,   887,\n-     888,   333,   889,   890,   336,   337,   338,   339,   340,   341,\n+       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,\n+     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,\n+       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n+       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,\n+     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,\n+     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,\n+       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     891,   892,   350,   351,   893,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,   894,\n+     348,     0,   350,   351,   352,   353,   354,   355,  1696,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,\n      366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,   895,   386,   387,   388,   896,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,   897,   401,\n-     402,   403,   404,   405,   406,   898,   408,   409,   410,   899,\n-     412,   413,   900,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   901,   429,   902,\n-     431,     0,   432,   433,     0,   434,   903,   436,   437,   438,\n-     439,   440,     0,   904,   905,     0,     0,   443,   444,   906,\n-     446,   907,  1412,   448,   449,   908,   451,   452,   453,   454,\n-     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,  1294,   910,     0,\n-     470,   911,   472,   473,   474,   475,   476,     0,     0,   477,\n-       0,     0,   478,   479,   480,   481,   482,   483,   912,   913,\n-     914,   915,   916,   917,   918,   919,   920,   921,   922,   495,\n-     496,   497,   498,   841,  1409,   517,     0,     0,     0,   999,\n-    1413,  1414,     0,     0,     0,     0,     0,     0,     0,     0,\n+     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,\n+     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,\n+     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,\n+     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,\n+     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,\n+     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,\n+     455,     0,  1697,   456,   457,   458,     0,   459,   460,   461,\n+     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,\n+     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,\n+       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n+     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n+     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n-       0,   119,   120,   121,     0,     0,     0,   842,     0,     0,\n-       0,     0,   843,   123,   124,     0,   125,   126,   127,   844,\n-     129,   130,   131,   845,   846,   847,   848,   849,     0,   137,\n-     138,   139,   140,   141,   142,     0,     0,   143,   144,   850,\n-     851,   147,     0,   148,   149,   150,   151,   852,     0,   853,\n-       0,   854,   155,   156,   157,   158,   159,   855,   161,   162,\n-     163,     0,   164,   165,   166,   167,   168,   169,     0,   856,\n+       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n+     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,\n+     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,\n+     146,   147,  1691,   148,   149,   150,   151,   152,     0,     0,\n+       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,\n+     163,  1693,   164,   165,   166,   167,   168,   169,     0,     0,\n      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-     857,   858,   183,  1616,   184,     0,   185,   186,   187,   188,\n+     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,\n      189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n      196,   197,   198,   199,   200,     0,   201,   202,   203,     0,\n-     204,   205,   206,     0,   207,   208,   209,   210,   859,   212,\n-     213,   214,   215,   216,   860,  1410,   218,     0,   219,   220,\n-     861,   222,     0,   223,     0,   224,   862,     0,   863,   227,\n-     228,   864,   865,   231,     0,   232,     0,   866,   867,   235,\n-       0,   236,   237,   238,   239,   240,   241,   242,   868,   244,\n+     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,\n+     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,\n+     221,   222,     0,   223,  1694,   224,     0,     0,     0,   227,\n+     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,\n+       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n-     254,     0,   255,   869,   870,   258,   259,   260,   261,   262,\n-     871,   872,     0,   873,     0,   266,   874,   875,   269,   876,\n-     271,   272,   273,   274,   275,   276,     0,     0,   277,   877,\n-     279,   878,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   879,   290,   291,   292,   293,   294,   295,   296,   297,\n+     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,\n+     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,\n+     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,\n+     279,  2237,     0,   281,   282,   283,   284,   285,   286,   287,\n+     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-     880,   881,   882,   311,   312,   313,   883,     0,   315,   316,\n-     884,   318,     0,   885,   320,   886,   322,   323,   324,     0,\n-     325,   326,  1411,     0,   327,   328,   329,     0,     0,   330,\n-     887,   888,   333,   889,   890,   336,   337,   338,   339,   340,\n+     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,\n+       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,\n+     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,\n+     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n-     347,   891,   892,   350,   351,   893,   353,   354,   355,     0,\n+     347,   348,     0,   350,   351,   352,   353,   354,   355,  1696,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-     894,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n+     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,   895,   386,   387,   388,   896,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,     0,   897,\n-     401,   402,   403,   404,   405,   406,   898,   408,   409,   410,\n-     899,   412,   413,   900,   415,     0,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   901,   429,\n-     902,   431,     0,   432,   433,     0,   434,   903,   436,   437,\n-     438,   439,   440,     0,   904,   905,     0,     0,   443,   444,\n-     906,   446,   907,  1412,   448,   449,   908,   451,   452,   453,\n-     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,  1294,   910,\n-       0,   470,   911,   472,   473,   474,   475,   476,     0,     0,\n-     477,     0,     0,   478,   479,   480,   481,   482,   483,   912,\n-     913,   914,   915,   916,   917,   918,   919,   920,   921,   922,\n-     495,   496,   497,   498,   841,  1409,   517,     0,     0,     0,\n-     999,  1413,  1414,     0,     0,     0,     0,     0,     0,     0,\n+     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,\n+     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n+     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n+       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,\n+     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,\n+     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,\n+     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,\n+     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,\n+     454,   455,     0,  1697,   456,   457,   458,     0,   459,   460,\n+     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,\n+       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,\n+     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n+     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n+     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     0,     0,     0,   842,     0,\n-       0,     0,     0,   843,   123,   124,     0,   125,   126,   127,\n-     844,   129,   130,   131,   845,   846,   847,   848,   849,     0,\n+     118,     0,   119,   120,   121,     3,     4,     0,     0,     0,\n+       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,\n+       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,\n      137,   138,   139,   140,   141,   142,     0,     0,   143,   144,\n-     850,   851,   147,     0,   148,   149,   150,   151,   852,     0,\n-     853,     0,   854,   155,   156,   157,   158,   159,   855,   161,\n+     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,\n+       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,\n      162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n-     856,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   857,   858,   183,     0,   184,     0,   185,   186,   187,\n+       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,\n      188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n        0,   196,   197,   198,   199,   200,     0,   201,   202,   203,\n-       0,   204,   205,   206,     0,   207,   208,   209,   210,   859,\n-     212,   213,   214,   215,   216,   860,  1410,   218,     0,   219,\n-     220,   861,   222,     0,   223,     0,   224,   862,     0,   863,\n-     227,   228,   864,   865,   231,     0,   232,     0,   866,   867,\n-     235,     0,   236,   237,   238,   239,   240,   241,   242,   868,\n+       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,\n+     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,\n+     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,\n+     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,\n+     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,\n      244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n-     253,   254,     0,   255,   869,   870,   258,   259,   260,   261,\n-     262,   871,   872,     0,   873,     0,   266,   874,   875,   269,\n-     876,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n-     877,   279,   878,     0,   281,   282,   283,   284,   285,   286,\n-     287,   288,   879,   290,   291,   292,   293,   294,   295,   296,\n+     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,\n+     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,\n+       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,   880,   881,   882,   311,   312,   313,   883,     0,   315,\n-     316,   884,   318,     0,   885,   320,   886,   322,   323,   324,\n-       0,   325,   326,  1411,     0,   327,   328,   329,     0,     0,\n-     330,   887,   888,   333,   889,   890,   336,   337,   338,   339,\n+     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,\n+     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,\n+       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n+     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n-     346,   347,   891,   892,   350,   351,   893,   353,   354,   355,\n+     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,\n        0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,   894,   366,   367,   368,   369,     0,   370,   371,   372,\n+     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-       0,   383,   384,   895,   386,   387,   388,   896,   390,   391,\n+       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n-     897,   401,   402,   403,   404,   405,   406,   898,   408,   409,\n-     410,   899,   412,   413,   900,   415,     0,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   901,\n-     429,   902,   431,     0,   432,   433,     0,   434,   903,   436,\n-     437,   438,   439,   440,     0,   904,   905,     0,     0,   443,\n-     444,   906,   446,   907,  1412,   448,   449,   908,   451,   452,\n+       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n+     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,\n+     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,\n+     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,\n+     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,\n      453,   454,   455,     0,     0,   456,   457,   458,     0,   459,\n-     460,   461,   462,     0,   463,   464,   465,   466,   467,  1294,\n-     910,     0,   470,   911,   472,   473,   474,   475,   476,     0,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n+     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,\n        0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n-     912,   913,   914,   915,   916,   917,   918,   919,   920,   921,\n-     922,   495,   496,   497,   498,     0,     0,  1554,     0,     0,\n-    1555,     0,  1413,  1414,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1563,     0,     0,     0,     0,\n-    2086,     0,     0,     0,     0,  1565,     0,  1554,     0,     0,\n-    1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1563,     0,  1567,     0,     0,\n-       0,     0,     0,     0,     0,  1565,     0,  1554,     0,     0,\n-    1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1563,     0,  1567,     0,     0,\n-       0,  2087,     0,     0,     0,  1565,     0,  1554,     0,     0,\n-    1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1563,     0,  1567,     0,  1851,\n-       0,     0,     0,     0,     0,  1565,     0,  1554,     0,     0,\n-    1555,  1568,  1566,     0,  1556,  1557,  1558,  1559,  1560,  1561,\n-    1562,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-       0,     0,  1570,     0,     0,  1563,     0,  1567,     0,     0,\n-       0,  1887,     0,     0,     0,  1565,  1888,     0,     0,     0,\n-       0,  1568,  1566,     0,     0,  1571,  1572,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1569,     0,     0,\n-    1573,     0,  1570,     0,     0,     0,     0,  1567,     0,     0,\n-    3352,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1568,     0,     0,     0,  1571,  1572,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1574,  1569,     0,  1575,\n-    1573,     0,  1570,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,  1568,     0,     0,     0,  1571,  1572,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1574,  1569,     0,  1575,\n-    1573,     0,  1570,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,  1568,     0,     0,     0,  1571,  1572,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1574,  1569,     0,  1575,\n-    1573,     0,  1570,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1571,  1572,     0,     0,  1578,\n-       0,     0,     0,     0,     0,     0,  1574,     0,     0,  1575,\n-    1573,     0,     0,  3353,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,\n-       0,     0,     0,     0,     0,     0,  1574,     0,     0,  1575,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  2090,     0,  1576,     0,     0,  1577,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1578,\n-       0,     0,     0,     0,     0,     0,     0,  1858,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,  1578,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1554,     0,\n-       0,  1555,     0,     0,     0,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,  1563,     0,     0,  1578,\n-    1893,     0,     0,     0,     0,     0,  1565,     0,  1554,     0,\n-       0,  1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,  1563,     0,  1567,     0,\n-       0,     0,     0,     0,     0,     0,  1565,     0,  1554,     0,\n-       0,  1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,  1563,     0,  1567,     0,\n-    1900,     0,     0,     0,     0,     0,  1565,     0,  1554,     0,\n-       0,  1555,     0,  1566,     0,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,  1579,     0,     0,  1580,  1581,  1582,     0,\n-    1583,  1584,  1585,  1586,  1587,  1588,  1563,     0,  1567,     0,\n-       0,     0,     0,     0,     0,     0,  1565,     0,     0,     0,\n-       0,     0,  1568,  1566,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,\n-       0,     0,     0,  1570,     0,     0,     0,     0,  1567,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1898,     0,     0,\n-       0,     0,  1568,     0,     0,     0,  1571,  1572,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1569,     0,\n-       0,  1573,     0,  1570,     0,     0,     0,     0,     0,     0,\n+     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n+     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1568,     0,     0,     0,  1571,  1572,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1574,  1569,     0,\n-    1575,  1573,     0,  1570,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1984,     0,  1576,     0,     0,  1577,     0,     0,\n-       0,     0,  1568,     0,     0,     0,  1571,  1572,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1574,  1569,     0,\n-    1575,  1573,     0,  1570,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1576,     0,     0,  1577,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1571,  1572,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1574,     0,     0,\n-    1575,  1573,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1576,     0,     0,  1577,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-    1578,     0,     0,     0,     0,     0,     0,  1574,     0,     0,\n-    1575,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1576,     0,     0,  1577,     0,     0,\n-       0,     0,     0,     0,     0,     0,  1554,     0,     0,  1555,\n-    1578,     0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1554,     0,\n-       0,  1555,     0,     0,  1563,  1556,  1557,  1558,  1559,  1560,\n-    1561,  1562,     0,     0,  1565,     0,     0,     0,     0,     0,\n-    1578,  1566,     0,     0,     0,     0,  1563,     0,     0,     0,\n-    2656,     0,     0,     0,     0,     0,  1565,     0,     0,     0,\n-       0,     0,     0,  1566,  1579,     0,  1567,  1580,  1581,  1582,\n-       0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,\n-    1578,     0,     0,     0,     0,     0,     0,     0,  1567,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1579,     0,     0,  1580,  1581,  1582,\n-       0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1579,     0,     0,  1580,  1581,  1582,\n-       0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,\n-    1568,     0,  1554,     0,     0,  1555,     0,     0,     0,  1556,\n-    1557,  1558,  1559,  1560,  1561,  1562,  1569,     0,     0,     0,\n-       0,  1570,  1568,     0,  1579,     0,     0,  1580,  1581,  1582,\n-    1563,  1583,  1584,  1585,  1586,  1587,  1588,     0,  1569,     0,\n-    1565,     0,     0,  1570,  1571,  1572,     0,  1566,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1573,\n-       0,     0,     0,     0,     0,     0,  1571,  1572,     0,     0,\n-       0,     0,  1567,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1573,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1574,     0,     0,  1575,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1576,     0,     0,  1577,     0,  1574,     0,     0,\n-    1575,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1576,     0,     0,  1577,     0,     0,\n-       0,     0,     0,     0,     0,  1554,     0,     0,  1555,     0,\n-       0,     0,  1556,  1557,  1558,  1559,  1560,  1561,  1562,     0,\n-       0,     0,     0,     0,     0,     0,  1568,     0,     0,     0,\n-       0,     0,     0,  1563,     0,     0,     0,     0,     0,     0,\n-       0,     0,  1569,  1565,     0,     0,     0,  1570,     0,     0,\n-    1566,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1578,     0,\n-    1571,  1572,     0,     0,     0,  1567,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1573,     0,     0,     0,     0,\n-    1578,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  2647,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1574,     0,     0,  1575,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1576,     0,\n-       0,  1577,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,  1568,\n-       0,     0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,\n-    1584,  1585,  1586,  1587,  1588,  1569,     0,     0,     0,     0,\n-    1570,     0,     0,     0,  1579,     0,     0,  1580,  1581,  1582,\n-       0,  1583,  1584,  1585,  1586,  1587,  1588,     0,     0,     0,\n-       0,     0,     0,  1571,  1572,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1573,     0,\n-       0,     0,     0,     0,  1578,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,  1574,     0,     0,  1575,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,  1576,     0,     0,  1577,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,  1579,     0,\n-       0,  1580,  1581,  1582,     0,  1583,  1584,  1585,  1586,  1587,\n-    1588,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,  1578,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,  1226,     0,  2004,     0,     0,\n-       0,  1579,     0,     0,  1580,  1581,  1582,     0,  1583,  1584,\n-    1585,  1586,  2107,  1588,   111,   112,   113,   114,   115,   116,\n-     117,   118,  1227,   119,   120,   121,  1228,  1229,  1230,   842,\n-    1231,  1232,  1233,  1234,   843,   123,   124,  1235,   125,   126,\n-     127,   844,   129,   130,   131,   845,   846,   847,   848,   849,\n-    1236,   137,   138,   139,   140,   141,   142,  1237,  1238,   143,\n-     144,   850,   851,   147,  1239,   148,   149,   150,   151,   852,\n-    1240,   853,  1241,   854,   155,   156,   157,   158,   159,   855,\n-     161,   162,   163,  1242,   164,   165,   166,   167,   168,   169,\n-    1243,   856,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   857,   858,   183,  1244,   184,  1245,   185,   186,\n-     187,   188,   189,   190,  1246,   191,   192,   193,   194,   195,\n-    1247,  1248,   196,   197,   198,   199,   200,  1249,   201,   202,\n-     203,  1250,   204,   205,   206,  1251,   207,   208,   209,   210,\n-     859,   212,   213,   214,   215,   216,   860,  1252,   218,  1253,\n-     219,   220,   861,   222,  1254,   223,  1255,   224,   862,  1256,\n-     863,   227,   228,   864,   865,   231,  1257,   232,  1258,   866,\n-     867,   235,  1259,   236,   237,   238,   239,   240,   241,   242,\n-     868,   244,   245,   246,   247,  1260,   248,   249,   250,   251,\n-     252,   253,   254,  1261,   255,   869,   870,   258,   259,   260,\n-     261,   262,   871,   872,  1262,   873,  1263,   266,   874,   875,\n-     269,   876,   271,   272,   273,   274,   275,   276,  1264,  1265,\n-     277,   877,   279,   878,  1266,   281,   282,   283,   284,   285,\n-     286,   287,   288,   879,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,   880,   881,   882,   311,   312,   313,   883,  1267,\n-     315,   316,   884,   318,  1268,   885,   320,   886,   322,   323,\n-     324,  1269,   325,   326,  1270,  1271,   327,   328,   329,  1272,\n-    1273,   330,   887,   888,   333,   889,   890,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,  1274,  1275,  1276,\n-    1277,   346,   347,   891,   892,   350,   351,   893,   353,   354,\n-     355,  1278,   356,   357,   358,   359,   360,   361,  1279,   362,\n-     363,   364,   894,   366,   367,   368,   369,  1280,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,  1281,   383,   384,   895,   386,   387,   388,   896,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-    1282,   897,   401,   402,   403,   404,   405,   406,   898,   408,\n-     409,   410,   899,   412,   413,   900,   415,  1283,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     901,   429,   902,   431,  1284,   432,   433,  1285,   434,   903,\n-     436,   437,   438,   439,   440,  1286,   904,   905,  1287,  1288,\n-     443,   444,   906,   446,   907,  1289,   448,   449,   908,   451,\n-     452,   453,   454,   455,  1290,  1291,   456,   457,   458,  1292,\n-     459,   460,   461,   462,  1293,   463,   464,   465,   466,   467,\n-    1294,   910,  1295,   470,   911,   472,   473,   474,   475,   476,\n-    1296,  1297,   477,  1298,  1299,   478,   479,   480,   481,   482,\n-     483,   912,   913,   914,   915,   916,   917,   918,   919,   920,\n-     921,   922,   495,   496,   497,   498,  1226,     0,     0,     0,\n+       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n+     117,   118,   533,   119,   120,   121,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n+     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n+       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n+     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n+       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n+     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n+       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n+     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n+       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n+     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n+     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n+       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n+     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n+       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n+     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n+     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n+     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n+     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n+     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n+     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n+     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n+       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n+       0,   346,   347,   348,     0,   350,   351,   352,   534,   354,\n+     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n+     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n+     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n+     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n+     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n+     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n+     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n+       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,  1227,   119,   120,   121,  1228,  1229,  1230,\n-     842,  1231,  1232,  1233,  1234,   843,   123,   124,  1235,   125,\n-     126,   127,   844,   129,   130,   131,   845,   846,   847,   848,\n-     849,  1236,   137,   138,   139,   140,   141,   142,  1237,  1238,\n-     143,   144,   850,   851,   147,  1239,   148,   149,   150,   151,\n-     852,  1240,   853,  1241,   854,   155,   156,   157,   158,   159,\n-     855,   161,   162,   163,  1242,   164,   165,   166,   167,   168,\n-     169,  1243,   856,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   857,   858,   183,  1244,   184,  1245,   185,\n-     186,   187,   188,   189,   190,  1246,   191,   192,   193,   194,\n-     195,  1247,  1248,   196,   197,   198,   199,   200,  1249,   201,\n-     202,   203,  1250,   204,   205,   206,  1251,   207,   208,   209,\n-     210,   859,   212,   213,   214,   215,   216,   860,  1252,   218,\n-    1253,   219,   220,   861,   222,  1254,   223,  1255,   224,   862,\n-    1256,   863,   227,   228,   864,   865,   231,  1257,   232,  1258,\n-     866,   867,   235,  1259,   236,   237,   238,   239,   240,   241,\n-     242,   868,   244,   245,   246,   247,  1260,   248,   249,   250,\n-     251,   252,   253,   254,  1261,   255,   869,   870,   258,   259,\n-     260,   261,   262,   871,   872,  1262,   873,  1263,   266,   874,\n-     875,   269,   876,   271,   272,   273,   274,   275,   276,  1264,\n-    1265,   277,   877,   279,   878,  1266,   281,   282,   283,   284,\n-     285,   286,   287,   288,   879,   290,   291,   292,   293,   294,\n+     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n+     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n+     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n+     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,\n+     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,\n+       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,\n+     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n+     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n+     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n+       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n+       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n+     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,\n+     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n+     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n+       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,   880,   881,   882,   311,   312,   313,   883,\n-    1267,   315,   316,   884,   318,  1268,   885,   320,   886,   322,\n-     323,   324,  1269,   325,   326,  1270,  1271,   327,   328,   329,\n-    1272,  1273,   330,   887,   888,   333,   889,   890,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,  1274,  1275,\n-    1276,  1277,   346,   347,   891,   892,   350,   351,   893,   353,\n-     354,   355,  1278,   356,   357,   358,   359,   360,   361,  1279,\n-     362,   363,   364,   894,   366,   367,   368,   369,  1280,   370,\n+     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n+       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n+     323,   324,     0,   325,   326,     0,   612,   327,   328,   329,\n+       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n+       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n+     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n+     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,  1281,   383,   384,   895,   386,   387,   388,   896,\n+     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,  1282,   897,   401,   402,   403,   404,   405,   406,   898,\n-     408,   409,   410,   899,   412,   413,   900,   415,  1283,   416,\n+     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   901,   429,   902,   431,  1284,   432,   433,  1285,   434,\n-     903,   436,   437,   438,   439,   440,  1286,   904,   905,  1287,\n-    1288,   443,   444,   906,   446,   907,  1289,   448,   449,   908,\n-     451,   452,   453,   454,   455,  1290,  1291,   456,   457,   458,\n-    1292,   459,   460,   461,   462,  1293,   463,   464,   465,   466,\n-     467,  1294,   910,  1295,   470,   911,   472,   473,   474,   475,\n-     476,  1296,  1297,   477,  1298,  1299,   478,   479,   480,   481,\n-     482,   483,   912,   913,   914,   915,   916,   917,   918,   919,\n-     920,   921,   922,   495,   496,   497,   498,  1226,     0,     0,\n+     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,\n+       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,\n+       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,\n+     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n+       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n+     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,\n+     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n-    2152,   116,   117,   118,  1227,   119,   120,   121,  1228,  1229,\n-    1230,   842,  1231,  1232,  1233,  1234,   843,   123,   124,  1235,\n-     125,   126,   127,   844,   129,   130,   131,   845,   846,   847,\n-     848,   849,  1236,   137,   138,   139,   140,   141,   142,  1237,\n-    1238,   143,   144,   850,   851,   147,  1239,   148,   149,   150,\n-     151,   852,  1240,   853,  1241,   854,   155,   156,   157,   158,\n-     159,   855,   161,   162,   163,  1242,   164,   165,   166,   167,\n-     168,   169,  1243,   856,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   857,   858,   183,  1244,   184,  1245,\n-     185,   186,   187,   188,   189,   190,  1246,   191,   192,   193,\n-     194,   195,  1247,  1248,   196,   197,   198,  2153,   200,  1249,\n-     201,   202,   203,  1250,   204,   205,   206,  1251,   207,   208,\n-     209,   210,   859,   212,   213,   214,   215,   216,   860,  1252,\n-     218,  1253,   219,   220,   861,   222,  1254,   223,  1255,   224,\n-     862,  1256,   863,   227,   228,   864,   865,   231,  1257,   232,\n-    1258,   866,   867,   235,  1259,   236,   237,   238,   239,   240,\n-     241,   242,   868,   244,   245,   246,   247,  1260,   248,   249,\n-     250,   251,   252,   253,   254,  1261,   255,   869,   870,   258,\n-     259,   260,   261,   262,   871,   872,  1262,   873,  1263,   266,\n-     874,   875,   269,   876,   271,   272,   273,   274,   275,   276,\n-    1264,  1265,   277,   877,   279,   878,  1266,   281,   282,   283,\n-     284,   285,   286,   287,   288,   879,   290,   291,   292,   293,\n+     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n+     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n+     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n+       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n+     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,\n+     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,\n+     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n+     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n+     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n+     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,\n+     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n+       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,\n+       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n+     712,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n+     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n+     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n+       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n+       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,\n+     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   880,   881,   882,   311,   312,   313,\n-     883,  1267,   315,   316,   884,   318,  1268,   885,   320,   886,\n-     322,   323,   324,  1269,   325,   326,  1270,  1271,   327,   328,\n-     329,  1272,  1273,   330,   887,   888,   333,   889,   890,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,  1274,\n-    1275,  1276,  1277,   346,   347,   891,   892,   350,   351,   893,\n-     353,   354,   355,  1278,   356,   357,   358,   359,   360,   361,\n-    1279,   362,   363,   364,   894,   366,   367,   368,   369,  1280,\n+     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n+     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n+     322,   323,   324,     0,   325,   326,     0,   612,   327,   328,\n+     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n+       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,\n+     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n+       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n      370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,  1281,   383,   384,   895,   386,   387,   388,\n-     896,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,  1282,   897,   401,   402,   403,   404,   405,  2154,\n-     898,   408,   409,   410,   899,   412,   413,   900,   415,  1283,\n+     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n+     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,\n      416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   901,   429,   902,   431,  1284,   432,   433,  1285,\n-     434,   903,   436,   437,   438,   439,   440,  1286,   904,   905,\n-    1287,  1288,   443,   444,   906,   446,   907,  1289,   448,   449,\n-     908,   451,   452,   453,   454,   455,  1290,  1291,   456,   457,\n-     458,  1292,   459,   460,   461,   462,  1293,   463,   464,   465,\n-     466,   467,  1294,   910,  1295,   470,   911,   472,   473,   474,\n-     475,   476,  1296,  1297,   477,  1298,  1299,   478,   479,   480,\n-     481,   482,   483,   912,   913,   914,   915,   916,   917,   918,\n-     919,   920,   921,   922,   495,   496,   497,   498,   841,     0,\n-     517,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,\n+     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,\n+       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,\n+     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n+     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n+     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,\n+     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n+     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n-     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,   842,     0,     0,     0,     0,   843,   123,   124,\n-       0,   125,   126,   127,   844,   129,   130,   131,   845,   846,\n-     847,   848,   849,     0,   137,   138,   139,   140,   141,   142,\n-       0,     0,   143,   144,   850,   851,   147,     0,   148,   149,\n-     150,   151,   852,     0,   853,     0,   854,   155,   156,   157,\n-     158,   159,   855,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,   856,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   857,   858,   183,     0,   184,\n+     114,   115,   116,   117,   118,   743,   119,   120,   121,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n+       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n+       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n+       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n+     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n+     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n+     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n        0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n      193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n        0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n-     208,   209,   210,   859,   212,   213,   214,   215,   216,   860,\n-    1410,   218,     0,   219,   220,   861,   222,     0,   223,     0,\n-     224,   862,     0,   863,   227,   228,   864,   865,   231,     0,\n-     232,     0,   866,   867,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,   868,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,   869,   870,\n-     258,   259,   260,   261,   262,   871,   872,     0,   873,     0,\n-     266,   874,   875,   269,   876,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,   877,   279,   878,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   879,   290,   291,   292,\n+     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n+       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n+     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n+     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n+     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n+     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n+     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n+     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n+     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n      293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   880,   881,   882,   311,   312,\n-     313,   883,     0,   315,   316,   884,   318,     0,   885,   320,\n-     886,   322,   323,   324,     0,   325,   326,  1411,     0,   327,\n-     328,   329,     0,     0,   330,   887,   888,   333,   889,   890,\n+     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n+     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n+     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n+     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   891,   892,   350,   351,\n-     893,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,   894,   366,   367,   368,   369,\n+       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n+     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n+     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,   895,   386,   387,\n-     388,   896,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,   897,   401,   402,   403,   404,   405,\n-     406,   898,   408,   409,   410,   899,   412,   413,   900,   415,\n+     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   901,   429,   902,   431,     0,   432,   433,\n-       0,   434,   903,   436,   437,   438,   439,   440,     0,   904,\n-     905,     0,     0,   443,   444,   906,   446,   907,  1412,   448,\n-     449,   908,   451,   452,   453,   454,   455,     0,     0,   456,\n+     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n+       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n+     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n+     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n      457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,  1294,   910,     0,   470,   911,   472,   473,\n+     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n      474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n-     480,   481,   482,   483,   912,   913,   914,   915,   916,   917,\n-     918,   919,   920,   921,   922,   495,   496,   497,   498,   841,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n+    1907,     0,     0,     0,     0,  1908,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       3,     4,     0,   842,     0,     0,     0,     0,   843,   123,\n-     124,     0,   125,   126,   127,   844,   129,   130,   131,   845,\n-     846,   847,   848,   849,     0,   137,   138,   139,   140,   141,\n-     142,     0,     0,   143,   144,   850,   851,   147,     0,   148,\n-     149,   150,   151,   852,     0,   853,     0,   854,   155,   156,\n-     157,   158,   159,   855,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,   856,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   857,   858,   183,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n+     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n+     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n+     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n+     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n+     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n      184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n      192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n      200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n-     207,   208,   209,   210,   859,   212,   213,   214,   215,   216,\n-     860,     0,   218,     0,   219,   220,   861,   222,     0,   223,\n-       0,   224,   862,     0,   863,   227,   228,   864,   865,   231,\n-       0,   232,     0,   866,   867,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,   868,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,   869,\n-     870,   258,   259,   260,   261,   262,   871,   872,     0,   873,\n-       0,   266,   874,   875,   269,   876,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,   877,   279,   878,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   879,   290,   291,\n+     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n+     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n+       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n+       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n+     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n+     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n+       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n+     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   880,   881,   882,   311,\n-     312,   313,   883,     0,   315,   316,   884,   318,     0,   885,\n-     320,   886,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,   887,   888,   333,   889,\n-     890,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,   891,   892,   350,\n-     351,   893,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,   894,   366,   367,   368,\n+     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n+     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n+     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n+     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n+     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,   895,   386,\n-     387,   388,   896,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,     0,   897,   401,   402,   403,   404,\n-     405,   406,   898,   408,   409,   410,   899,   412,   413,   900,\n+     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   901,   429,   902,   431,     0,   432,\n-     433,     0,   434,   903,   436,   437,   438,   439,   440,     0,\n-     904,   905,     0,     0,   443,   444,   906,   446,   907,     0,\n-     448,   449,   908,   451,   452,   453,   454,   455,     0,     0,\n+     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n+     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,\n+     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n+     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,  1294,   910,     0,   470,   911,   472,\n+     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n-     479,   480,   481,   482,   483,   912,   913,   914,   915,   916,\n-     917,   918,   919,   920,   921,   922,   495,   496,   497,   498,\n-     110,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n+     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n+     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,     0,     0,     0,     0,     0,   122,\n-     123,   124,     0,   125,   126,   127,   128,   129,   130,   131,\n-     132,   133,   134,   135,   136,     0,   137,   138,   139,   140,\n-     141,   142,     0,   606,   143,   144,   145,   146,   147,     0,\n-     148,   149,   150,   151,   607,     0,   608,     0,   154,   155,\n-     156,   157,   158,   159,   160,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,   170,   171,   172,   173,\n+     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n+     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,\n+     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,\n+     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,\n+     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,\n+     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,\n      174,   175,   176,   177,   178,   179,   180,   181,   182,   183,\n        0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n      191,   192,   193,   194,   195,     0,     0,   196,   197,   198,\n      199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n        0,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,   609,     0,   218,     0,   219,   220,   221,   222,     0,\n-     223,     0,   224,   225,     0,   226,   227,   228,   229,   230,\n-     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n+     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n+    1916,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n+     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n-     265,     0,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,   278,   279,   280,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   289,   290,\n+       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n+     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,\n+     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,\n+     281,   282,  1917,   284,   285,   286,   287,   288,   508,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   308,   309,   310,\n-     311,   312,   313,   314,     0,   315,   316,   317,   318,     0,\n-     611,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n-       0,   327,   328,   329,     0,     0,   330,   331,   332,   333,\n-     334,   613,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,     0,     0,     0,     0,   346,   347,   614,   349,\n+     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,\n+     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,\n+     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n+       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,\n+       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,\n      350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n      359,   360,   361,     0,   362,   363,   364,   365,   366,   367,\n      368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,   385,\n+     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n+     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,\n      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   428,   429,   616,   431,     0,\n-     432,   433,     0,   434,   435,   436,   437,   438,   439,   440,\n-       0,   441,   442,     0,     0,   443,   444,   617,   446,   618,\n-       0,   448,   449,   619,   451,   452,   453,   454,   455,     0,\n-       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   468,   469,     0,   470,   471,\n+     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n+     432,   433,  1918,   434,     0,   436,  1919,   438,  1920,   440,\n+       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,\n+       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,\n+       0,   456,   457,  1921,     0,   459,   460,   461,   462,     0,\n+     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   110,     0,     0,     0,     0,     0,     0,     0,     0,\n+     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n-     122,   123,   124,     0,   125,   126,   127,   128,   129,   130,\n-     131,   132,   133,   134,   135,   136,     0,   137,   138,   139,\n+       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n+     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,\n      140,   141,   142,     0,     0,   143,   144,   145,   146,   147,\n-       0,   148,   149,   150,   151,   152,     0,   153,     0,   154,\n-     155,   156,   157,   158,   159,   160,   161,   162,   163,     0,\n-     164,   165,   166,   167,   168,   169,     0,   170,   171,   172,\n+       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,\n+     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,\n+     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,\n      173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n      183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n        0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n      198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n      206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n      215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n-       0,   223,     0,   224,   225,     0,   226,   227,   228,   229,\n-     230,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n+       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n+     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-       0,   265,     0,   266,   267,   268,   269,   270,   271,   272,\n-     273,   274,   275,   276,     0,     0,   277,   278,   279,   280,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n+     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n+       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n+     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,\n+       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n-     310,   311,   312,   313,   314,     0,   315,   316,   317,   318,\n+     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,\n+     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,\n        0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n-       0,     0,   327,   328,   329,     0,     0,   330,   331,   332,\n-     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,\n+       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n+     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n-     349,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n+       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n      358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n      367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n+     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n      413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n-       0,   432,   433,     0,   434,   435,   436,   437,   438,   439,\n+     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n+       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n      440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n      447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n        0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n        0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n-     471,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n+       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,\n+     497,   498,   506,     0,   517,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n      119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n      130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n      139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n-     147,  1687,   148,   149,   150,   151,   152,     0,     0,  1688,\n+     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,\n      154,   155,   156,   157,   158,   159,     0,   161,   162,   163,\n-    1689,   164,   165,   166,   167,   168,   169,     0,     0,   171,\n+       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,\n      172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n      182,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n      190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n      197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n      205,   206,     0,   207,   208,   209,   210,   211,   212,   213,\n      214,   215,   216,   217,     0,   218,     0,   219,   220,   221,\n-     222,     0,   223,  1690,   224,     0,     0,     0,   227,   228,\n+     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,\n      507,     0,   231,     0,   232,     0,   233,   234,   235,     0,\n-     236,   237,   238,   239,   240,  1691,   242,     0,   244,   245,\n+     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,\n      246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n        0,   255,     0,   257,   258,   259,   260,   261,   262,   263,\n      264,     0,   265,     0,   266,     0,     0,   269,     0,   271,\n@@ -8729,7 +9266,7 @@ static const yytype_int16 yytable[] =\n      326,     0,     0,   327,   328,   329,     0,     0,   330,   331,\n        0,   333,     0,   335,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     348,     0,   350,   351,   352,   353,   354,   355,  1692,   356,\n+     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,\n      357,   358,   359,   360,   361,     0,   362,   363,   364,   365,\n      366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n@@ -8741,7 +9278,7 @@ static const yytype_int16 yytable[] =\n      431,     0,   432,   433,     0,   434,     0,   436,   437,   438,\n      439,   440,     0,   441,   442,     0,     0,   443,   444,   445,\n      446,   447,     0,   448,   449,   450,   451,   452,   453,   454,\n-     455,     0,  1693,   456,   457,   458,     0,   459,   460,   461,\n+     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n      462,     0,   463,   464,   465,   466,   467,   468,   469,     0,\n      470,     0,   472,   473,   474,   475,   476,     0,     0,   477,\n        0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n@@ -8749,27 +9286,27 @@ static const yytype_int16 yytable[] =\n      496,   497,   498,   506,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n-       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n+     642,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n      129,   130,   131,   132,   133,     0,   135,   136,     0,   137,\n      138,   139,   140,   141,   142,     0,     0,   143,   144,   145,\n-     146,   147,  1687,   148,   149,   150,   151,   152,     0,     0,\n+     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,\n        0,   154,   155,   156,   157,   158,   159,     0,   161,   162,\n-     163,  1689,   164,   165,   166,   167,   168,   169,     0,     0,\n+     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,\n      171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n      181,   182,   183,     0,   184,     0,   185,   186,   187,   188,\n      189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n      196,   197,   198,   199,   200,     0,   201,   202,   203,     0,\n      204,   205,   206,     0,   207,   208,   209,   210,   211,   212,\n      213,   214,   215,   216,   217,     0,   218,     0,   219,   220,\n-     221,   222,     0,   223,  1690,   224,     0,     0,     0,   227,\n+     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,\n      228,   507,     0,   231,     0,   232,     0,   233,   234,   235,\n        0,   236,   237,   238,   239,   240,   241,   242,     0,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n      254,     0,   255,     0,   257,   258,   259,   260,   261,   262,\n      263,   264,     0,   265,     0,   266,     0,     0,   269,     0,\n      271,   272,   273,   274,   275,   276,     0,     0,   277,     0,\n-     279,  2227,     0,   281,   282,   283,   284,   285,   286,   287,\n+     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,\n      288,   508,   290,   291,   292,   293,   294,   295,   296,   297,\n      298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n      308,     0,   310,   311,   312,   313,   314,     0,   315,   316,\n@@ -8777,7 +9314,7 @@ static const yytype_int16 yytable[] =\n      325,   326,     0,     0,   327,   328,   329,     0,     0,   330,\n      331,     0,   333,     0,   335,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n-     347,   348,     0,   350,   351,   352,   353,   354,   355,  1692,\n+     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,\n      356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n      365,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n      374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n@@ -8787,9 +9324,9 @@ static const yytype_int16 yytable[] =\n        0,   412,   413,   414,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   509,   429,\n      430,   431,     0,   432,   433,     0,   434,     0,   436,   437,\n-     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,\n+     438,   439,   440,     0,   643,   442,     0,     0,   644,   444,\n      445,   446,   447,     0,   448,   449,   450,   451,   452,   453,\n-     454,   455,     0,  1693,   456,   457,   458,     0,   459,   460,\n+     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n      461,   462,     0,   463,   464,   465,   466,   467,   468,   469,\n        0,   470,     0,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n@@ -8797,7 +9334,7 @@ static const yytype_int16 yytable[] =\n      495,   496,   497,   498,   506,     0,   532,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     3,     4,     0,     0,     0,\n+     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   123,   124,     0,   125,   126,   127,\n        0,   129,   130,   131,   132,   133,     0,   135,   136,     0,\n      137,   138,   139,   140,   141,   142,     0,     0,   143,   144,\n@@ -8827,7 +9364,7 @@ static const yytype_int16 yytable[] =\n      340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n      346,   347,   348,     0,   350,   351,   352,   353,   354,   355,\n        0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n+     364,   365,   366,   367,   676,   369,     0,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n        0,   383,   384,     0,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n@@ -8845,7 +9382,7 @@ static const yytype_int16 yytable[] =\n      494,   495,   496,   497,   498,   506,     0,   532,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n-     117,   118,   533,   119,   120,   121,     0,     0,     0,     0,\n+     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n      127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n        0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n@@ -8860,7 +9397,7 @@ static const yytype_int16 yytable[] =\n      211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n      219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n        0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n-     234,   235,     0,   236,   237,   238,   239,   240,   241,   242,\n+     234,   235,     0,   236,   237,   238,   239,   240,   707,   242,\n        0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n      252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n      261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n@@ -8873,7 +9410,7 @@ static const yytype_int16 yytable[] =\n      324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n        0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n      339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n-       0,   346,   347,   348,     0,   350,   351,   352,   534,   354,\n+       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n      355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n      363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n@@ -8908,7 +9445,7 @@ static const yytype_int16 yytable[] =\n      210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n        0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n        0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n-     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,\n+     233,   234,   235,     0,   236,   237,   238,   239,   240,   710,\n      242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n      251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n      260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n@@ -8918,7 +9455,7 @@ static const yytype_int16 yytable[] =\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n      305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n        0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n-     323,   324,     0,   325,   326,     0,   612,   327,   328,   329,\n+     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n        0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n        0,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n@@ -8957,7 +9494,7 @@ static const yytype_int16 yytable[] =\n      218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n        0,     0,     0,   227,   228,   507,     0,   231,     0,   232,\n        0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n-     712,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n+     714,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n      250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n      259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n        0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n@@ -8966,7 +9503,7 @@ static const yytype_int16 yytable[] =\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n      304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n      314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n-     322,   323,   324,     0,   325,   326,     0,   612,   327,   328,\n+     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,\n      329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n        0,     0,     0,   346,   347,   348,     0,   350,   351,   352,\n@@ -8989,7 +9526,7 @@ static const yytype_int16 yytable[] =\n      491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n      532,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n-     114,   115,   116,   117,   118,   743,   119,   120,   121,     0,\n+     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n        0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n        0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n@@ -9005,7 +9542,7 @@ static const yytype_int16 yytable[] =\n        0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n      224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n      232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n+     240,   724,   242,     0,   244,   245,   246,   247,     0,   248,\n      249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n      258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n      266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n@@ -9035,7 +9572,7 @@ static const yytype_int16 yytable[] =\n      474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n      490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n-    1903,     0,     0,     0,     0,  1904,     0,     0,     0,     0,\n+       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n@@ -9053,7 +9590,7 @@ static const yytype_int16 yytable[] =\n      217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n        0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n        0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n+     239,   240,   731,   242,     0,   244,   245,   246,   247,     0,\n      248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n      257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n        0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n@@ -9100,13 +9637,13 @@ static const yytype_int16 yytable[] =\n        0,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n      216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n      223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n-    1912,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n+     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n+     238,   239,   240,   832,   242,     0,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n        0,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n      265,     0,   266,     0,     0,   269,     0,   271,   272,   273,\n      274,   275,   276,     0,     0,   277,     0,   279,     0,     0,\n-     281,   282,  1913,   284,   285,   286,   287,   288,   508,   290,\n+     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n      301,   302,   303,   304,   305,   306,   307,   308,     0,   310,\n      311,   312,   313,   314,     0,   315,   316,     0,   318,     0,\n@@ -9123,10 +9660,10 @@ static const yytype_int16 yytable[] =\n      404,   405,   406,   407,   408,   409,   410,     0,   412,   413,\n      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n-     432,   433,  1914,   434,     0,   436,  1915,   438,  1916,   440,\n+     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,\n        0,   441,   442,     0,     0,   443,   444,   445,   446,   447,\n        0,   448,   449,   450,   451,   452,   453,   454,   455,     0,\n-       0,   456,   457,  1917,     0,   459,   460,   461,   462,     0,\n+       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n      463,   464,   465,   466,   467,   468,   469,     0,   470,     0,\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n@@ -9149,7 +9686,7 @@ static const yytype_int16 yytable[] =\n      215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n        0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n        0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,   241,   242,     0,   244,   245,   246,\n+     237,   238,   239,   240,   835,   242,     0,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n      255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n        0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n@@ -9179,10 +9716,10 @@ static const yytype_int16 yytable[] =\n        0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n        0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n      487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,   506,     0,   517,     0,     0,     0,     0,     0,\n+     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n+     119,   120,   121,     0,     0,     0,     0,     0,     0,   955,\n        0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n      130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n      139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n@@ -9230,8 +9767,8 @@ static const yytype_int16 yytable[] =\n      496,   497,   498,   506,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n-     642,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n+       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n+     978,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n      129,   130,   131,   132,   133,     0,   135,   136,     0,   137,\n      138,   139,   140,   141,   142,     0,     0,   143,   144,   145,\n      146,   147,     0,   148,   149,   150,   151,   152,     0,     0,\n@@ -9268,7 +9805,7 @@ static const yytype_int16 yytable[] =\n        0,   412,   413,   414,   415,     0,   416,   417,   418,   419,\n      420,   421,   422,   423,   424,   425,   426,   427,   509,   429,\n      430,   431,     0,   432,   433,     0,   434,     0,   436,   437,\n-     438,   439,   440,     0,   643,   442,     0,     0,   644,   444,\n+     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,\n      445,   446,   447,     0,   448,   449,   450,   451,   452,   453,\n      454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n      461,   462,     0,   463,   464,   465,   466,   467,   468,   469,\n@@ -9293,7 +9830,7 @@ static const yytype_int16 yytable[] =\n      212,   213,   214,   215,   216,   217,     0,   218,     0,   219,\n      220,   221,   222,     0,   223,     0,   224,     0,     0,     0,\n      227,   228,   507,     0,   231,     0,   232,     0,   233,   234,\n-     235,     0,   236,   237,   238,   239,   240,   241,   242,     0,\n+     235,     0,   236,   237,   238,   239,   240,  1322,   242,     0,\n      244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n      253,   254,     0,   255,     0,   257,   258,   259,   260,   261,\n      262,   263,   264,     0,   265,     0,   266,     0,     0,   269,\n@@ -9308,7 +9845,7 @@ static const yytype_int16 yytable[] =\n      340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n      346,   347,   348,     0,   350,   351,   352,   353,   354,   355,\n        0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,   365,   366,   367,   676,   369,     0,   370,   371,   372,\n+     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n        0,   383,   384,     0,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n@@ -9341,7 +9878,7 @@ static const yytype_int16 yytable[] =\n      211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n      219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n        0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n-     234,   235,     0,   236,   237,   238,   239,   240,   707,   242,\n+     234,   235,     0,   236,   237,   238,   239,   240,  1324,   242,\n        0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n      252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n      261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n@@ -9389,7 +9926,7 @@ static const yytype_int16 yytable[] =\n      210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n        0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n        0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n-     233,   234,   235,     0,   236,   237,   238,   239,   240,   710,\n+     233,   234,   235,     0,   236,   237,   238,   239,   240,  1327,\n      242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n      251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n      260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n@@ -9438,7 +9975,7 @@ static const yytype_int16 yytable[] =\n      218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n        0,     0,     0,   227,   228,   507,     0,   231,     0,   232,\n        0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n-     714,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n+    1329,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n      250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n      259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n        0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n@@ -9486,7 +10023,7 @@ static const yytype_int16 yytable[] =\n        0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n      224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n      232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   724,   242,     0,   244,   245,   246,   247,     0,   248,\n+     240,  2158,   242,     0,   244,   245,   246,   247,     0,   248,\n      249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n      258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n      266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n@@ -9515,59 +10052,298 @@ static const yytype_int16 yytable[] =\n      465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n      474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n      480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n-       0,   532,     0,     0,     0,     0,     0,     0,     0,     0,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,   754,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n-     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n-     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n-     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n-     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n-     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n+       0,     0,     0,   755,     0,     0,  -750,     0,   756,   123,\n+     124,     0,   125,   126,   127,   757,   129,   130,   131,     0,\n+     758,   759,   760,   761,     0,   137,   138,   139,   140,   141,\n+     142,     0,     0,   143,   144,   762,   763,   147,     0,   148,\n+     149,   150,   151,     0,     0,   764,     0,   765,   155,   156,\n+     157,   158,   159,   766,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,   767,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   768,   769,   183,     0,\n      184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n-     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n+     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,\n      200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n-       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n-       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n-     239,   240,   731,   242,     0,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n-     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n-       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n+     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,\n+       0,     0,   218,     0,   219,   220,   771,   222,     0,   223,\n+       0,   224,   772,     0,   773,   227,   228,  -750,   774,   231,\n+       0,   232,     0,     0,     0,   235,     0,   236,   237,   238,\n+     239,   240,   241,   242,   776,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,   777,\n+       0,   258,   259,   260,   261,   262,   778,   779,     0,   780,\n+       0,   266,   781,   782,   269,   783,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,   784,   279,   785,     0,   281,\n+     282,   283,   284,   285,   286,   287,   288,   786,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n-     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n-     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n-     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n+     302,   303,   304,   305,   306,   307,   787,   788,   789,   311,\n+     312,   313,     0,     0,   315,   316,   790,   318,     0,     0,\n+     320,   791,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,     0,   792,   333,   793,\n+       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,     0,     0,     0,     0,   346,   347,     0,   794,   350,\n+     351,     0,   353,   354,   355,     0,   356,   357,   358,   359,\n+     360,   361,     0,   362,   363,   364,   795,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n-     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n+     378,   379,   380,   381,   382,     0,   383,   384,   796,   386,\n+     387,   388,   797,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,     0,   798,   401,   402,   403,   404,\n+     405,   406,   799,   408,   409,   410,   800,   412,   413,   801,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n+     424,   425,   426,   427,   802,   429,     0,   431,     0,   432,\n+     433,     0,   434,   803,   436,   437,   438,   439,   440,     0,\n+     804,   805,     0,     0,   443,   444,     0,   446,     0,     0,\n+     448,   449,   806,   451,   452,   453,   454,   455,   807,     0,\n+     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n+     464,   465,   466,   467,     0,   808,     0,   470,   809,   472,\n+     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n+     479,   480,   481,   482,   483,   506,     0,   532,     0,     0,\n+       0,     0,     0,     0,     0,     0,   495,   496,   497,   498,\n+       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n+     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n+     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n+       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n+     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n+       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n+     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n+       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n+     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n+     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n+       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n+     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n+     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n+     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n+       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n+     234,   235,     0,   236,   237,   238,   239,   240,  2864,   242,\n+       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n+     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n+     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n+     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n+     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n+     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n+     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n+     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n+       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n+       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n+     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n+     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n+     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n+     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n+     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n+     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n+     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n+     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n+     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n+     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n+       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n+     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n+     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n+     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n+     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n+     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n+     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,\n+     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,\n+       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,\n+     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n+     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n+     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n+     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n+       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n+       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n+     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,\n+     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n+     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n+       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n+       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n+     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n+       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n+       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n+     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n+     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n+     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,\n+     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,\n+     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,\n+       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,\n+       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,\n+     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n+       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n+     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,\n+     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n+     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n+     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n+     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n+     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n+     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n+       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n+     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,\n+     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,\n+     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,\n+     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n+     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n+     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n+     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n+     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,\n+     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n+       0,     0,     0,   227,   228,   507,     0,   654,     0,   232,\n+       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n+     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n+     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n+     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n+       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n+       0,     0,   277,     0,   279,     0,     0,   281,   282,   655,\n+     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,\n+     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n+     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n+     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,\n+     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n+       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,\n+     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n+       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,\n+     389,   390,   391,   392,   393,   656,   395,   396,   397,   398,\n+     399,   400,     0,     0,   401,   402,   403,   404,   657,   406,\n+     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,\n+     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n+     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,\n+     434,     0,   436,   437,   438,   439,   440,     0,   658,   442,\n+       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,\n+     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n+     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n+     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,\n+     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n+     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n+     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n+     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n+       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n+       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n+       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n+     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n+     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n+     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n+     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n+       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n+     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n+       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n+     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n+       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n+     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n+     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n+     240,   828,   242,     0,   244,   245,   246,   247,     0,   248,\n+     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n+     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n+     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n+     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,\n+     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n+     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n+     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n+     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n+     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n+     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n+     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n+     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n+     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n+       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n+     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n+       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n+       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n+     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n+     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n+     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n+     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n+     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n+     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n+     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n+     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n+     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n+     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n+     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n+     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n+     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n+     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n+     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n+     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n+     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n+     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n+     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n+       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n+       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n+     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n+     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n+     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n+       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n+     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n+     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n+     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n+     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n+     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n+     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n+     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n+     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n+     387,   388,   389,   390,   391,   392,   393,   656,   395,   396,\n+     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n+     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n+     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n      433,     0,   434,     0,   436,   437,   438,   439,   440,     0,\n-     441,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n+     658,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n      448,   449,   450,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n      464,   465,   466,   467,   468,   469,     0,   470,     0,   472,\n      473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n      479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n      489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-     506,     0,   532,     0,     0,     0,     0,     0,     0,     0,\n+     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n      112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+     121,     0,     0,     0,     0,     0,     0,  1623,     0,     0,\n      123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n      132,   133,     0,   135,   136,     0,   137,   138,   139,   140,\n      141,   142,     0,     0,   143,   144,   145,   146,   147,     0,\n@@ -9582,7 +10358,7 @@ static const yytype_int16 yytable[] =\n      216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n      223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n      231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n-     238,   239,   240,   832,   242,     0,   244,   245,   246,   247,\n+     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n        0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n        0,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n      265,     0,   266,     0,     0,   269,     0,   271,   272,   273,\n@@ -9601,7 +10377,7 @@ static const yytype_int16 yytable[] =\n      377,   378,   379,   380,   381,   382,     0,   383,   384,     0,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,     0,   412,   413,\n+     404,   405,     0,   407,   408,   409,   410,     0,   412,   413,\n      414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n      423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n      432,   433,     0,   434,     0,   436,   437,   438,   439,   440,\n@@ -9612,7 +10388,7 @@ static const yytype_int16 yytable[] =\n      472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n      478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n      488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   506,     0,   532,     0,     0,     0,     0,     0,     0,\n+     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n      111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n      120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n@@ -9630,7 +10406,7 @@ static const yytype_int16 yytable[] =\n      215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n        0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n        0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,   835,   242,     0,   244,   245,   246,\n+     237,   238,   239,   240,  1793,   242,     0,   244,   245,   246,\n      247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n      255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n        0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n@@ -9663,7 +10439,7 @@ static const yytype_int16 yytable[] =\n      497,   498,   506,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,     0,   955,\n+     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n      130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n      139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n@@ -9678,7 +10454,7 @@ static const yytype_int16 yytable[] =\n      214,   215,   216,   217,     0,   218,     0,   219,   220,   221,\n      222,     0,   223,     0,   224,     0,     0,     0,   227,   228,\n      507,     0,   231,     0,   232,     0,   233,   234,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,     0,   244,   245,\n+     236,   237,   238,   239,   240,  2145,   242,     0,   244,   245,\n      246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n        0,   255,     0,   257,   258,   259,   260,   261,   262,   263,\n      264,     0,   265,     0,   266,     0,     0,   269,     0,   271,\n@@ -9712,7 +10488,7 @@ static const yytype_int16 yytable[] =\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n        0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n-     978,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n+       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n      129,   130,   131,   132,   133,     0,   135,   136,     0,   137,\n      138,   139,   140,   141,   142,     0,     0,   143,   144,   145,\n      146,   147,     0,   148,   149,   150,   151,   152,     0,     0,\n@@ -9726,7 +10502,7 @@ static const yytype_int16 yytable[] =\n      213,   214,   215,   216,   217,     0,   218,     0,   219,   220,\n      221,   222,     0,   223,     0,   224,     0,     0,     0,   227,\n      228,   507,     0,   231,     0,   232,     0,   233,   234,   235,\n-       0,   236,   237,   238,   239,   240,   241,   242,     0,   244,\n+       0,   236,   237,   238,   239,   240,  2160,   242,     0,   244,\n      245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n      254,     0,   255,     0,   257,   258,   259,   260,   261,   262,\n      263,   264,     0,   265,     0,   266,     0,     0,   269,     0,\n@@ -9756,201 +10532,195 @@ static const yytype_int16 yytable[] =\n        0,   470,     0,   472,   473,   474,   475,   476,     0,     0,\n      477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n      485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,   506,     0,   532,     0,     0,     0,\n+     495,   496,   497,   498,   754,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   123,   124,     0,   125,   126,   127,\n-       0,   129,   130,   131,   132,   133,     0,   135,   136,     0,\n+     118,     0,   119,   120,   121,     0,     0,     0,   755,     0,\n+       0,     0,     0,   756,   123,   124,     0,   125,   126,   127,\n+     757,   129,   130,   131,     0,   758,   759,   760,   761,     0,\n      137,   138,   139,   140,   141,   142,     0,     0,   143,   144,\n-     145,   146,   147,     0,   148,   149,   150,   151,   152,     0,\n-       0,     0,   154,   155,   156,   157,   158,   159,     0,   161,\n+     762,   763,   147,     0,   148,   149,   150,   151,     0,     0,\n+     764,     0,   765,   155,   156,   157,   158,   159,   766,   161,\n      162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n-       0,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   181,   182,   183,     0,   184,     0,   185,   186,   187,\n+     767,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n+     180,   768,   769,   183,     0,   184,     0,   185,   186,   187,\n      188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n-       0,   196,   197,   198,   199,   200,     0,   201,   202,   203,\n-       0,   204,   205,   206,     0,   207,   208,   209,   210,   211,\n-     212,   213,   214,   215,   216,   217,     0,   218,     0,   219,\n-     220,   221,   222,     0,   223,     0,   224,     0,     0,     0,\n-     227,   228,   507,     0,   231,     0,   232,     0,   233,   234,\n-     235,     0,   236,   237,   238,   239,   240,  1319,   242,     0,\n+       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n+       0,   204,   205,   206,     0,   207,   208,   209,   210,     0,\n+     212,   213,   214,   215,   216,     0,     0,   218,     0,   219,\n+     220,   771,   222,     0,   223,     0,   224,   772,     0,   773,\n+     227,   228,     0,   774,   231,     0,   232,     0,     0,     0,\n+     235,     0,   236,   237,   238,   239,   240,   775,   242,   776,\n      244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n-     253,   254,     0,   255,     0,   257,   258,   259,   260,   261,\n-     262,   263,   264,     0,   265,     0,   266,     0,     0,   269,\n-       0,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n-       0,   279,     0,     0,   281,   282,   283,   284,   285,   286,\n-     287,   288,   508,   290,   291,   292,   293,   294,   295,   296,\n+     253,   254,     0,   255,   777,     0,   258,   259,   260,   261,\n+     262,   778,   779,     0,   780,     0,   266,   781,   782,   269,\n+     783,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n+     784,   279,   785,     0,   281,   282,   283,   284,   285,   286,\n+     287,   288,   786,   290,   291,   292,   293,   294,   295,   296,\n      297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,   308,     0,   310,   311,   312,   313,   314,     0,   315,\n-     316,     0,   318,     0,   319,   320,   321,   322,   323,   324,\n+     307,   787,   788,   789,   311,   312,   313,     0,     0,   315,\n+     316,   790,   318,     0,     0,   320,   791,   322,   323,   324,\n        0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n-     330,   331,     0,   333,     0,   335,   336,   337,   338,   339,\n+     330,     0,   792,   333,   793,     0,   336,   337,   338,   339,\n      340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n-     346,   347,   348,     0,   350,   351,   352,   353,   354,   355,\n+     346,   347,     0,   794,   350,   351,     0,   353,   354,   355,\n        0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,   365,   366,   367,   368,   369,     0,   370,   371,   372,\n+     364,   795,   366,   367,   368,   369,     0,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-       0,   383,   384,     0,   386,   387,   388,   389,   390,   391,\n+       0,   383,   384,   796,   386,   387,   388,   797,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n-       0,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,     0,   412,   413,   414,   415,     0,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   509,\n-     429,   430,   431,     0,   432,   433,     0,   434,     0,   436,\n-     437,   438,   439,   440,     0,   441,   442,     0,     0,   443,\n-     444,   445,   446,   447,     0,   448,   449,   450,   451,   452,\n-     453,   454,   455,     0,     0,   456,   457,   458,     0,   459,\n-     460,   461,   462,     0,   463,   464,   465,   466,   467,   468,\n-     469,     0,   470,     0,   472,   473,   474,   475,   476,     0,\n+     798,   401,   402,   403,   404,   405,   406,   799,   408,   409,\n+     410,   800,   412,   413,   801,   415,     0,   416,   417,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   802,\n+     429,     0,   431,     0,   432,   433,     0,   434,   803,   436,\n+     437,   438,   439,   440,     0,   804,   805,     0,     0,   443,\n+     444,     0,   446,     0,     0,   448,   449,   806,   451,   452,\n+     453,   454,   455,   807,     0,   456,   457,   458,     0,   459,\n+     460,   461,   462,     0,   463,   464,   465,   466,   467,     0,\n+     808,     0,   470,   809,   472,   473,   474,   475,   476,     0,\n        0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n-     484,   485,   486,   487,   488,   489,   490,   491,   492,   493,\n-     494,   495,   496,   497,   498,   506,     0,   532,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n-     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n-     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n-       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n-     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n-       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n-     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n-       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n-     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n-       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n-     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n-     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n-       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n-     234,   235,     0,   236,   237,   238,   239,   240,  1321,   242,\n-       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n-     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n-     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n-     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n-     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n-     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n-     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n-       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n-       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n-     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n-     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n-     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n-     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n-     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n-       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,   506,     0,   532,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n+     754,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,   495,   496,   497,   498,     0,     0,     0,     0,   111,\n+     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n+     121,     0,     0,     0,   755,     0,     0,     0,     0,   756,\n+     123,   124,     0,   125,   126,   127,   757,   129,   130,   131,\n+       0,   758,   759,   760,   761,     0,   137,   138,   139,   140,\n+     141,   142,     0,     0,   143,   144,   762,   763,   147,     0,\n+     148,   149,   150,   151,     0,     0,   764,     0,   765,   155,\n+     156,   157,   158,   159,   766,   161,   162,   163,     0,   164,\n+     165,   166,   167,   168,   169,     0,   767,   171,   172,   173,\n+     174,   175,   176,   177,   178,   179,   180,   768,   769,   183,\n+       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n+     191,   192,   193,   194,   195,     0,     0,   196,   197,   770,\n+     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n+       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,\n+     216,     0,     0,   218,     0,   219,   220,   771,   222,     0,\n+     223,     0,   224,   772,     0,   773,   227,   228,     0,   774,\n+     231,     0,   232,     0,     0,     0,   235,     0,   236,   237,\n+     238,   239,   240,   241,   242,   776,   244,   245,   246,   247,\n+       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n+     777,     0,   258,   259,   260,   261,   262,   778,   779,     0,\n+     780,     0,   266,   781,   782,   269,   783,   271,   272,   273,\n+     274,   275,   276,     0,     0,   277,   784,   279,   785,     0,\n+     281,   282,   283,   284,   285,   286,   287,   288,   786,   290,\n+     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,   305,   306,   307,   787,   788,   789,\n+     311,   312,   313,     0,     0,   315,   316,   790,   318,     0,\n+       0,   320,   791,   322,   323,   324,     0,   325,   326,     0,\n+       0,   327,   328,   329,     0,     0,   330,     0,   792,   333,\n+     793,     0,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,     0,     0,     0,     0,   346,   347,     0,   794,\n+     350,   351,     0,   353,   354,   355,     0,   356,   357,   358,\n+     359,   360,   361,     0,   362,   363,   364,   795,   366,   367,\n+     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,     0,   383,   384,   796,\n+     386,   387,   388,   797,   390,   391,   392,   393,   394,   395,\n+     396,   397,   398,   399,   400,     0,   798,   401,   402,   403,\n+     404,   405,   406,   799,   408,   409,   410,   800,   412,   413,\n+     801,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n+     423,   424,   425,   426,   427,   802,   429,     0,   431,     0,\n+     432,   433,     0,   434,   803,   436,   437,   438,   439,   440,\n+       0,   804,   805,     0,     0,   443,   444,     0,   446,     0,\n+       0,   448,   449,   806,   451,   452,   453,   454,   455,   807,\n+       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n+     463,   464,   465,   466,   467,     0,   808,     0,   470,   809,\n+     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n+     478,   479,   480,   481,   482,   483,   754,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,   495,   496,   497,\n+     498,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n      116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n-     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n-     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n-     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,\n-     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,\n-       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n-     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,\n+     755,     0,     0,     0,     0,   756,   123,   124,     0,   125,\n+     126,   127,   757,   129,   130,   131,     0,   758,   759,   760,\n+     761,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n+     143,   144,   762,   763,   147,     0,   148,   149,   150,   151,\n+       0,     0,   764,     0,   765,   155,   156,   157,   158,   159,\n+     766,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n+     169,     0,   767,   171,   172,   173,   174,   175,   176,   177,\n+     178,   179,   180,   768,   769,   183,     0,   184,     0,   185,\n      186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n-     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n-     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n-       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n-       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n-     233,   234,   235,     0,   236,   237,   238,   239,   240,  1324,\n-     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n-     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n-     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n-       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,\n-       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,\n-     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,\n+     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,\n+     202,   203,     0,  1778,   205,   206,     0,   207,   208,   209,\n+     210,     0,   212,   213,   214,   215,   216,     0,     0,   218,\n+       0,   219,   220,   771,   222,     0,   223,     0,   224,   772,\n+       0,   773,   227,   228,     0,   774,   231,     0,   232,     0,\n+       0,     0,   235,     0,   236,   237,   238,   239,   240,   241,\n+     242,   776,   244,   245,   246,   247,     0,   248,   249,   250,\n+     251,   252,   253,   254,     0,   255,   777,     0,   258,   259,\n+     260,   261,   262,   778,   779,     0,   780,     0,   266,   781,\n+     782,   269,   783,   271,   272,   273,   274,   275,   276,     0,\n+       0,   277,   784,   279,   785,     0,   281,   282,   283,   284,\n+     285,   286,   287,   288,   786,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n-       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n+     305,   306,   307,   787,   788,   789,   311,   312,   313,     0,\n+       0,   315,   316,   790,   318,     0,     0,   320,   791,   322,\n      323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n-       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n+       0,     0,   330,     0,   792,   333,   793,     0,   336,   337,\n      338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n+       0,     0,   346,   347,     0,   794,   350,   351,     0,   353,\n      354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n-     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,\n+     362,   363,   364,   795,   366,   367,   368,   369,     0,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,\n+     381,   382,     0,   383,   384,   796,   386,   387,   388,   797,\n      390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,\n+     400,     0,   798,   401,   402,   403,   404,   405,   406,   799,\n+     408,   409,   410,   800,   412,   413,   801,   415,     0,   416,\n      417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,\n-       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,\n-       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,\n-     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n+     427,   802,   429,     0,   431,     0,   432,   433,     0,   434,\n+     803,   436,   437,   438,   439,   440,     0,   804,   805,     0,\n+       0,   443,   444,     0,   446,     0,     0,   448,   449,   806,\n+     451,   452,   453,   454,   455,   807,     0,   456,   457,   458,\n        0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,\n+     467,     0,   808,     0,   470,   809,   472,   473,   474,   475,\n      476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n-     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   498,   506,     0,   532,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n-     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n-     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n-     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n-       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n-     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,\n-     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,\n-     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n-     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n-     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n-     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,\n-     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n-       0,     0,     0,   227,   228,   507,     0,   231,     0,   232,\n-       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n-    1326,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n-     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n-     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n-       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n-       0,     0,   277,     0,   279,     0,     0,   281,   282,   283,\n-     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n-     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n-     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,\n-     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n-       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,\n-     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,     0,     0,   401,   402,   403,   404,   405,   406,\n-     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,\n-     434,     0,   436,   437,   438,   439,   440,     0,   441,   442,\n-       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,\n-     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n-     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,\n-     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n-     532,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n+     482,   483,  2792,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,   495,   496,   497,   498,     0,     0,     0,\n+       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n+     119,   120,   121,     0,     0,     0,  2793,     0,     0,     0,\n+       0,  2794,   123,   124,     0,   125,   126,   127,  2795,   129,\n+     130,   131,     0,   758,  2796,   760,   761,     0,   137,   138,\n+     139,   140,   141,   142,     0,     0,   143,   144,   762,   763,\n+     147,     0,   148,   149,   150,   151,     0,     0,  2797,     0,\n+    2798,   155,   156,   157,   158,   159,  2799,   161,   162,   163,\n+       0,   164,   165,   166,   167,   168,   169,     0,  2800,   171,\n+     172,   173,   174,   175,   176,   177,   178,   179,   180,   768,\n+     769,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n+     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n+     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,\n+     205,   206,     0,   207,   208,   209,   210,     0,   212,   213,\n+     214,   215,   216,     0,     0,   218,     0,   219,   220,   771,\n+     222,     0,   223,     0,   224,  2801,     0,  2802,   227,   228,\n+    2803,  2804,   231,     0,   232,     0,     0,     0,   235,     0,\n+     236,   237,   238,   239,   240,   241,   242,  2805,   244,   245,\n+     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n+       0,   255,  2806,     0,   258,   259,   260,   261,   262,   778,\n+     779,     0,   780,     0,   266,  2807,  2808,   269,  2809,   271,\n+     272,   273,   274,   275,   276,     0,     0,   277,  2810,   279,\n+    2811,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n+    3026,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,   787,\n+    2813,   789,   311,   312,   313,     0,     0,   315,   316,  2815,\n+     318,     0,     0,   320,   791,   322,   323,   324,     0,   325,\n+     326,     0,     0,   327,   328,   329,     0,     0,   330,     0,\n+    2817,   333,  2818,     0,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n+       0,  2819,   350,   351,     0,   353,   354,   355,     0,   356,\n+     357,   358,   359,   360,   361,     0,   362,   363,   364,   795,\n+     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n+     384,  2820,   386,   387,   388,     0,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,     0,  2821,   401,\n+     402,   403,   404,   405,   406,     0,   408,   409,   410,  2823,\n+     412,   413,   801,   415,     0,   416,   417,   418,   419,   420,\n+     421,   422,   423,   424,   425,   426,   427,  3027,   429,     0,\n+     431,     0,   432,   433,     0,   434,  2825,   436,   437,   438,\n+     439,   440,     0,   804,   805,     0,     0,   443,   444,     0,\n+     446,     0,     0,   448,   449,  2826,   451,   452,   453,   454,\n+     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n+     462,     0,   463,   464,   465,   466,   467,     0,   808,     0,\n+     470,  2828,   472,   473,   474,   475,   476,     0,     0,   477,\n+       0,     0,   478,   479,   480,   481,   482,   483,   506,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,     0,   495,\n+     496,   497,   498,     0,     0,     0,     0,   111,   112,   113,\n      114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n        0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n@@ -9967,7 +10737,7 @@ static const yytype_int16 yytable[] =\n        0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n      224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n      232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,  2148,   242,     0,   244,   245,   246,   247,     0,   248,\n+     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n      249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n      258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n      266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n@@ -9978,13 +10748,13 @@ static const yytype_int16 yytable[] =\n      313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n      321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n      328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n+     336,   337,   338,   339,   340,   341,     0,   343,   344,   345,\n        0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n      352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n+     361,     0,   362,     0,   364,   365,   366,   367,   368,   369,\n        0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n      379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,\n      398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n      406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n        0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n@@ -10000,7 +10770,7 @@ static const yytype_int16 yytable[] =\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n      113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,   755,     0,     0,  -747,     0,   756,   123,\n+       0,     0,     0,   755,     0,     0,     0,     0,   756,   123,\n      124,     0,   125,   126,   127,   757,   129,   130,   131,     0,\n      758,   759,   760,   761,     0,   137,   138,   139,   140,   141,\n      142,     0,     0,   143,   144,   762,   763,   147,     0,   148,\n@@ -10013,14 +10783,14 @@ static const yytype_int16 yytable[] =\n      200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n      207,   208,   209,   210,     0,   212,   213,   214,   215,   216,\n        0,     0,   218,     0,   219,   220,   771,   222,     0,   223,\n-       0,   224,   772,     0,   773,   227,   228,  -747,   774,   231,\n+       0,   224,   772,     0,   773,   227,   228,     0,   774,   231,\n        0,   232,     0,     0,     0,   235,     0,   236,   237,   238,\n      239,   240,   241,   242,   776,   244,   245,   246,   247,     0,\n      248,   249,   250,   251,   252,   253,   254,     0,   255,   777,\n        0,   258,   259,   260,   261,   262,   778,   779,     0,   780,\n        0,   266,   781,   782,   269,   783,   271,   272,   273,   274,\n      275,   276,     0,     0,   277,   784,   279,   785,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   786,   290,   291,\n+     282,   283,   284,   285,   286,   287,   288,     0,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n      302,   303,   304,   305,   306,   307,   787,   788,   789,   311,\n      312,   313,     0,     0,   315,   316,   790,   318,     0,     0,\n@@ -10032,752 +10802,38 @@ static const yytype_int16 yytable[] =\n      360,   361,     0,   362,   363,   364,   795,   366,   367,   368,\n      369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,     0,   383,   384,   796,   386,\n-     387,   388,   797,   390,   391,   392,   393,   394,   395,   396,\n+     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,     0,   798,   401,   402,   403,   404,\n-     405,   406,   799,   408,   409,   410,   800,   412,   413,   801,\n+     405,   406,     0,   408,   409,   410,   800,   412,   413,   801,\n      415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   802,   429,     0,   431,     0,   432,\n+     424,   425,   426,   427,     0,   429,     0,   431,     0,   432,\n      433,     0,   434,   803,   436,   437,   438,   439,   440,     0,\n      804,   805,     0,     0,   443,   444,     0,   446,     0,     0,\n-     448,   449,   806,   451,   452,   453,   454,   455,   807,     0,\n+     448,   449,   806,   451,   452,   453,   454,   455,     0,     0,\n      456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n      464,   465,   466,   467,     0,   808,     0,   470,   809,   472,\n-     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n-     479,   480,   481,   482,   483,   506,     0,   532,     0,     0,\n-       0,     0,     0,     0,     0,     0,   495,   496,   497,   498,\n-       0,     0,     0,     0,   111,   112,   113,   114,   115,   116,\n-     117,   118,     0,   119,   120,   121,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   123,   124,     0,   125,   126,\n-     127,     0,   129,   130,   131,   132,   133,     0,   135,   136,\n-       0,   137,   138,   139,   140,   141,   142,     0,     0,   143,\n-     144,   145,   146,   147,     0,   148,   149,   150,   151,   152,\n-       0,     0,     0,   154,   155,   156,   157,   158,   159,     0,\n-     161,   162,   163,     0,   164,   165,   166,   167,   168,   169,\n-       0,     0,   171,   172,   173,   174,   175,   176,   177,   178,\n-     179,   180,   181,   182,   183,     0,   184,     0,   185,   186,\n-     187,   188,   189,   190,     0,   191,   192,   193,   194,   195,\n-       0,     0,   196,   197,   198,   199,   200,     0,   201,   202,\n-     203,     0,   204,   205,   206,     0,   207,   208,   209,   210,\n-     211,   212,   213,   214,   215,   216,   217,     0,   218,     0,\n-     219,   220,   221,   222,     0,   223,     0,   224,     0,     0,\n-       0,   227,   228,   507,     0,   231,     0,   232,     0,   233,\n-     234,   235,     0,   236,   237,   238,   239,   240,  2854,   242,\n-       0,   244,   245,   246,   247,     0,   248,   249,   250,   251,\n-     252,   253,   254,     0,   255,     0,   257,   258,   259,   260,\n-     261,   262,   263,   264,     0,   265,     0,   266,     0,     0,\n-     269,     0,   271,   272,   273,   274,   275,   276,     0,     0,\n-     277,     0,   279,     0,     0,   281,   282,   283,   284,   285,\n-     286,   287,   288,   508,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n-     306,   307,   308,     0,   310,   311,   312,   313,   314,     0,\n-     315,   316,     0,   318,     0,   319,   320,   321,   322,   323,\n-     324,     0,   325,   326,     0,     0,   327,   328,   329,     0,\n-       0,   330,   331,     0,   333,     0,   335,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,     0,     0,     0,\n-       0,   346,   347,   348,     0,   350,   351,   352,   353,   354,\n-     355,     0,   356,   357,   358,   359,   360,   361,     0,   362,\n-     363,   364,   365,   366,   367,   368,   369,     0,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n-     382,     0,   383,   384,     0,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-       0,     0,   401,   402,   403,   404,   405,   406,   407,   408,\n-     409,   410,     0,   412,   413,   414,   415,     0,   416,   417,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     509,   429,   430,   431,     0,   432,   433,     0,   434,     0,\n-     436,   437,   438,   439,   440,     0,   441,   442,     0,     0,\n-     443,   444,   445,   446,   447,     0,   448,   449,   450,   451,\n-     452,   453,   454,   455,     0,     0,   456,   457,   458,     0,\n-     459,   460,   461,   462,     0,   463,   464,   465,   466,   467,\n-     468,   469,     0,   470,     0,   472,   473,   474,   475,   476,\n-       0,     0,   477,     0,     0,   478,   479,   480,   481,   482,\n-     483,   484,   485,   486,   487,   488,   489,   490,   491,   492,\n-     493,   494,   495,   496,   497,   498,   506,     0,     0,     0,\n+     473,   474,   475,   476,     0,     1,   477,     0,     0,   478,\n+     479,   480,   481,   482,   483,     2,     0,     3,     4,     0,\n+       0,     0,     1,     0,     0,     0,   495,   496,   497,   498,\n+       0,     0,     2,     0,     0,     6,     0,     0,     0,     0,\n+       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,\n+       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,\n+       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,\n+       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,\n+       0,   568,     0,     0,     9,     0,     0,     0,     0,     0,\n+       0,     0,    12,     0,     0,     0,    10,     0,   568,     0,\n+       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,\n+       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,\n+       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,\n+      17,     0,     0,    15,     0,     0,     0,     0,     0,    16,\n+       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,\n+      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   123,   124,     0,   125,\n-     126,   127,     0,   129,   130,   131,   132,   133,     0,   135,\n-     136,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n-     143,   144,   145,   146,   147,     0,   148,   149,   150,   151,\n-     152,     0,     0,     0,   154,   155,   156,   157,   158,   159,\n-       0,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n-     169,     0,     0,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   181,   182,   183,     0,   184,     0,   185,\n-     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n-     195,     0,     0,   196,   197,   198,   199,   200,     0,   201,\n-     202,   203,     0,   204,   205,   206,     0,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,   217,     0,   218,\n-       0,   219,   220,   221,   222,     0,   223,     0,   224,     0,\n-       0,     0,   227,   228,   507,     0,   231,     0,   232,     0,\n-     233,   234,   235,     0,   236,   237,   238,   239,   240,   241,\n-     242,     0,   244,   245,   246,   247,     0,   248,   249,   250,\n-     251,   252,   253,   254,     0,   255,     0,   257,   258,   259,\n-     260,   261,   262,   263,   264,     0,   265,     0,   266,     0,\n-       0,   269,     0,   271,   272,   273,   274,   275,   276,     0,\n-       0,   277,     0,   279,     0,     0,   281,   282,   283,   284,\n-     285,   286,   287,   288,   508,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,   308,     0,   310,   311,   312,   313,   314,\n-       0,   315,   316,     0,   318,     0,   319,   320,   321,   322,\n-     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n-       0,     0,   330,   331,     0,   333,     0,   335,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,   348,     0,   350,   351,   352,   353,\n-     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n-     362,   363,   364,   365,   366,   367,   368,   369,     0,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,     0,   383,   384,     0,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,     0,   401,   402,   403,   404,   405,   406,   407,\n-     408,   409,   410,     0,   412,   413,   414,   415,     0,   416,\n-     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   509,   429,   430,   431,     0,   432,   433,     0,   434,\n-       0,   436,   437,   438,   439,   440,     0,   441,   442,     0,\n-       0,   443,   444,   445,   446,   447,     0,   448,   449,   450,\n-     451,   452,   453,   454,   455,     0,     0,   456,   457,   458,\n-       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,   468,   469,     0,   470,     0,   472,   473,   474,   475,\n-     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n-     482,   483,   484,   485,   486,   487,   488,   489,   490,   491,\n-     492,   493,   494,   495,   496,   497,   498,   506,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,   111,   112,   113,   114,\n-     115,   116,   117,   118,     0,   119,   120,   121,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   123,   124,     0,\n-     125,   126,   127,     0,   129,   130,   131,   132,   133,     0,\n-     135,   136,     0,   137,   138,   139,   140,   141,   142,     0,\n-       0,   143,   144,   145,   146,   147,     0,   148,   149,   150,\n-     151,   152,     0,     0,     0,   154,   155,   156,   157,   158,\n-     159,     0,   161,   162,   163,     0,   164,   165,   166,   167,\n-     168,   169,     0,     0,   171,   172,   173,   174,   175,   176,\n-     177,   178,   179,   180,   181,   182,   183,     0,   184,     0,\n-     185,   186,   187,   188,   189,   190,     0,   191,   192,   193,\n-     194,   195,     0,     0,   196,   197,   198,   199,   200,     0,\n-     201,   202,   203,     0,   204,   205,   206,     0,   207,   208,\n-     209,   210,   211,   212,   213,   214,   215,   216,   217,     0,\n-     218,     0,   219,   220,   221,   222,     0,   223,     0,   224,\n-       0,     0,     0,   227,   228,   507,     0,   654,     0,   232,\n-       0,   233,   234,   235,     0,   236,   237,   238,   239,   240,\n-     241,   242,     0,   244,   245,   246,   247,     0,   248,   249,\n-     250,   251,   252,   253,   254,     0,   255,     0,   257,   258,\n-     259,   260,   261,   262,   263,   264,     0,   265,     0,   266,\n-       0,     0,   269,     0,   271,   272,   273,   274,   275,   276,\n-       0,     0,   277,     0,   279,     0,     0,   281,   282,   655,\n-     284,   285,   286,   287,   288,   508,   290,   291,   292,   293,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   308,     0,   310,   311,   312,   313,\n-     314,     0,   315,   316,     0,   318,     0,   319,   320,   321,\n-     322,   323,   324,     0,   325,   326,     0,     0,   327,   328,\n-     329,     0,     0,   330,   331,     0,   333,     0,   335,   336,\n-     337,   338,   339,   340,   341,   342,   343,   344,   345,     0,\n-       0,     0,     0,   346,   347,   348,     0,   350,   351,   352,\n-     353,   354,   355,     0,   356,   357,   358,   359,   360,   361,\n-       0,   362,   363,   364,   365,   366,   367,   368,   369,     0,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,     0,   383,   384,     0,   386,   387,   388,\n-     389,   390,   391,   392,   393,   656,   395,   396,   397,   398,\n-     399,   400,     0,     0,   401,   402,   403,   404,   657,   406,\n-     407,   408,   409,   410,     0,   412,   413,   414,   415,     0,\n-     416,   417,   418,   419,   420,   421,   422,   423,   424,   425,\n-     426,   427,   509,   429,   430,   431,     0,   432,   433,     0,\n-     434,     0,   436,   437,   438,   439,   440,     0,   658,   442,\n-       0,     0,   443,   444,   445,   446,   447,     0,   448,   449,\n-     450,   451,   452,   453,   454,   455,     0,     0,   456,   457,\n-     458,     0,   459,   460,   461,   462,     0,   463,   464,   465,\n-     466,   467,   468,   469,     0,   470,     0,   472,   473,   474,\n-     475,   476,     0,     0,   477,     0,     0,   478,   479,   480,\n-     481,   482,   483,   484,   485,   486,   487,   488,   489,   490,\n-     491,   492,   493,   494,   495,   496,   497,   498,   506,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   111,   112,   113,\n-     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n-       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n-       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n-       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n-     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n-     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n-       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n-     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n-       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n-     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n-       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n-     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n-     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   828,   242,     0,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n-     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n-     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n-     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n-     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n-     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n-     336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n-     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,   363,   364,   365,   366,   367,   368,   369,\n-       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n-       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n-       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n-     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n-     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n-     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n-     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   506,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n-     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   123,\n-     124,     0,   125,   126,   127,     0,   129,   130,   131,   132,\n-     133,     0,   135,   136,     0,   137,   138,   139,   140,   141,\n-     142,     0,     0,   143,   144,   145,   146,   147,     0,   148,\n-     149,   150,   151,   152,     0,     0,     0,   154,   155,   156,\n-     157,   158,   159,     0,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,     0,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   181,   182,   183,     0,\n-     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n-     192,   193,   194,   195,     0,     0,   196,   197,   198,   199,\n-     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n-     207,   208,   209,   210,   211,   212,   213,   214,   215,   216,\n-     217,     0,   218,     0,   219,   220,   221,   222,     0,   223,\n-       0,   224,     0,     0,     0,   227,   228,   507,     0,   231,\n-       0,   232,     0,   233,   234,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,     0,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,     0,\n-     257,   258,   259,   260,   261,   262,   263,   264,     0,   265,\n-       0,   266,     0,     0,   269,     0,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,     0,   279,     0,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,   508,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   308,     0,   310,   311,\n-     312,   313,   314,     0,   315,   316,     0,   318,     0,   319,\n-     320,   321,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,   331,     0,   333,     0,\n-     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,   348,     0,   350,\n-     351,   352,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,   365,   366,   367,   368,\n-     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,     0,   386,\n-     387,   388,   389,   390,   391,   392,   393,   656,   395,   396,\n-     397,   398,   399,   400,     0,     0,   401,   402,   403,   404,\n-     405,   406,   407,   408,   409,   410,     0,   412,   413,   414,\n-     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   509,   429,   430,   431,     0,   432,\n-     433,     0,   434,     0,   436,   437,   438,   439,   440,     0,\n-     658,   442,     0,     0,   443,   444,   445,   446,   447,     0,\n-     448,   449,   450,   451,   452,   453,   454,   455,     0,     0,\n-     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,   468,   469,     0,   470,     0,   472,\n-     473,   474,   475,   476,     0,     0,   477,     0,     0,   478,\n-     479,   480,   481,   482,   483,   484,   485,   486,   487,   488,\n-     489,   490,   491,   492,   493,   494,   495,   496,   497,   498,\n-     506,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   111,\n-     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,     0,     0,     0,  1619,     0,     0,\n-     123,   124,     0,   125,   126,   127,     0,   129,   130,   131,\n-     132,   133,     0,   135,   136,     0,   137,   138,   139,   140,\n-     141,   142,     0,     0,   143,   144,   145,   146,   147,     0,\n-     148,   149,   150,   151,   152,     0,     0,     0,   154,   155,\n-     156,   157,   158,   159,     0,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,     0,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,\n-       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n-     191,   192,   193,   194,   195,     0,     0,   196,   197,   198,\n-     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n-       0,   207,   208,   209,   210,   211,   212,   213,   214,   215,\n-     216,   217,     0,   218,     0,   219,   220,   221,   222,     0,\n-     223,     0,   224,     0,     0,     0,   227,   228,   507,     0,\n-     231,     0,   232,     0,   233,   234,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,     0,   244,   245,   246,   247,\n-       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-       0,   257,   258,   259,   260,   261,   262,   263,   264,     0,\n-     265,     0,   266,     0,     0,   269,     0,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,     0,   279,     0,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   508,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   308,     0,   310,\n-     311,   312,   313,   314,     0,   315,   316,     0,   318,     0,\n-     319,   320,   321,   322,   323,   324,     0,   325,   326,     0,\n-       0,   327,   328,   329,     0,     0,   330,   331,     0,   333,\n-       0,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,     0,     0,     0,     0,   346,   347,   348,     0,\n-     350,   351,   352,   353,   354,   355,     0,   356,   357,   358,\n-     359,   360,   361,     0,   362,   363,   364,   365,   366,   367,\n-     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,     0,\n-     386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,     0,     0,   401,   402,   403,\n-     404,   405,     0,   407,   408,   409,   410,     0,   412,   413,\n-     414,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   509,   429,   430,   431,     0,\n-     432,   433,     0,   434,     0,   436,   437,   438,   439,   440,\n-       0,   441,   442,     0,     0,   443,   444,   445,   446,   447,\n-       0,   448,   449,   450,   451,   452,   453,   454,   455,     0,\n-       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,   468,   469,     0,   470,     0,\n-     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n-     478,   479,   480,   481,   482,   483,   484,   485,   486,   487,\n-     488,   489,   490,   491,   492,   493,   494,   495,   496,   497,\n-     498,   506,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-     111,   112,   113,   114,   115,   116,   117,   118,     0,   119,\n-     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   123,   124,     0,   125,   126,   127,     0,   129,   130,\n-     131,   132,   133,     0,   135,   136,     0,   137,   138,   139,\n-     140,   141,   142,     0,     0,   143,   144,   145,   146,   147,\n-       0,   148,   149,   150,   151,   152,     0,     0,     0,   154,\n-     155,   156,   157,   158,   159,     0,   161,   162,   163,     0,\n-     164,   165,   166,   167,   168,   169,     0,     0,   171,   172,\n-     173,   174,   175,   176,   177,   178,   179,   180,   181,   182,\n-     183,     0,   184,     0,   185,   186,   187,   188,   189,   190,\n-       0,   191,   192,   193,   194,   195,     0,     0,   196,   197,\n-     198,   199,   200,     0,   201,   202,   203,     0,   204,   205,\n-     206,     0,   207,   208,   209,   210,   211,   212,   213,   214,\n-     215,   216,   217,     0,   218,     0,   219,   220,   221,   222,\n-       0,   223,     0,   224,     0,     0,     0,   227,   228,   507,\n-       0,   231,     0,   232,     0,   233,   234,   235,     0,   236,\n-     237,   238,   239,   240,  1789,   242,     0,   244,   245,   246,\n-     247,     0,   248,   249,   250,   251,   252,   253,   254,     0,\n-     255,     0,   257,   258,   259,   260,   261,   262,   263,   264,\n-       0,   265,     0,   266,     0,     0,   269,     0,   271,   272,\n-     273,   274,   275,   276,     0,     0,   277,     0,   279,     0,\n-       0,   281,   282,   283,   284,   285,   286,   287,   288,   508,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,     0,\n-     310,   311,   312,   313,   314,     0,   315,   316,     0,   318,\n-       0,   319,   320,   321,   322,   323,   324,     0,   325,   326,\n-       0,     0,   327,   328,   329,     0,     0,   330,   331,     0,\n-     333,     0,   335,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,     0,     0,     0,     0,   346,   347,   348,\n-       0,   350,   351,   352,   353,   354,   355,     0,   356,   357,\n-     358,   359,   360,   361,     0,   362,   363,   364,   365,   366,\n-     367,   368,   369,     0,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,     0,   383,   384,\n-       0,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,     0,     0,   401,   402,\n-     403,   404,   405,   406,   407,   408,   409,   410,     0,   412,\n-     413,   414,   415,     0,   416,   417,   418,   419,   420,   421,\n-     422,   423,   424,   425,   426,   427,   509,   429,   430,   431,\n-       0,   432,   433,     0,   434,     0,   436,   437,   438,   439,\n-     440,     0,   441,   442,     0,     0,   443,   444,   445,   446,\n-     447,     0,   448,   449,   450,   451,   452,   453,   454,   455,\n-       0,     0,   456,   457,   458,     0,   459,   460,   461,   462,\n-       0,   463,   464,   465,   466,   467,   468,   469,     0,   470,\n-       0,   472,   473,   474,   475,   476,     0,     0,   477,     0,\n-       0,   478,   479,   480,   481,   482,   483,   484,   485,   486,\n-     487,   488,   489,   490,   491,   492,   493,   494,   495,   496,\n-     497,   498,   506,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   123,   124,     0,   125,   126,   127,     0,   129,\n-     130,   131,   132,   133,     0,   135,   136,     0,   137,   138,\n-     139,   140,   141,   142,     0,     0,   143,   144,   145,   146,\n-     147,     0,   148,   149,   150,   151,   152,     0,     0,     0,\n-     154,   155,   156,   157,   158,   159,     0,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,     0,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   181,\n-     182,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n-     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n-     197,   198,   199,   200,     0,   201,   202,   203,     0,   204,\n-     205,   206,     0,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,   217,     0,   218,     0,   219,   220,   221,\n-     222,     0,   223,     0,   224,     0,     0,     0,   227,   228,\n-     507,     0,   231,     0,   232,     0,   233,   234,   235,     0,\n-     236,   237,   238,   239,   240,  2135,   242,     0,   244,   245,\n-     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,     0,   257,   258,   259,   260,   261,   262,   263,\n-     264,     0,   265,     0,   266,     0,     0,   269,     0,   271,\n-     272,   273,   274,   275,   276,     0,     0,   277,     0,   279,\n-       0,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-     508,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,\n-       0,   310,   311,   312,   313,   314,     0,   315,   316,     0,\n-     318,     0,   319,   320,   321,   322,   323,   324,     0,   325,\n-     326,     0,     0,   327,   328,   329,     0,     0,   330,   331,\n-       0,   333,     0,   335,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-     348,     0,   350,   351,   352,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,   365,\n-     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,     0,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,     0,   401,\n-     402,   403,   404,   405,   406,   407,   408,   409,   410,     0,\n-     412,   413,   414,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   509,   429,   430,\n-     431,     0,   432,   433,     0,   434,     0,   436,   437,   438,\n-     439,   440,     0,   441,   442,     0,     0,   443,   444,   445,\n-     446,   447,     0,   448,   449,   450,   451,   452,   453,   454,\n-     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,   468,   469,     0,\n-     470,     0,   472,   473,   474,   475,   476,     0,     0,   477,\n-       0,     0,   478,   479,   480,   481,   482,   483,   484,   485,\n-     486,   487,   488,   489,   490,   491,   492,   493,   494,   495,\n-     496,   497,   498,   506,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,   111,   112,   113,   114,   115,   116,   117,   118,\n-       0,   119,   120,   121,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   123,   124,     0,   125,   126,   127,     0,\n-     129,   130,   131,   132,   133,     0,   135,   136,     0,   137,\n-     138,   139,   140,   141,   142,     0,     0,   143,   144,   145,\n-     146,   147,     0,   148,   149,   150,   151,   152,     0,     0,\n-       0,   154,   155,   156,   157,   158,   159,     0,   161,   162,\n-     163,     0,   164,   165,   166,   167,   168,   169,     0,     0,\n-     171,   172,   173,   174,   175,   176,   177,   178,   179,   180,\n-     181,   182,   183,     0,   184,     0,   185,   186,   187,   188,\n-     189,   190,     0,   191,   192,   193,   194,   195,     0,     0,\n-     196,   197,   198,   199,   200,     0,   201,   202,   203,     0,\n-     204,   205,   206,     0,   207,   208,   209,   210,   211,   212,\n-     213,   214,   215,   216,   217,     0,   218,     0,   219,   220,\n-     221,   222,     0,   223,     0,   224,     0,     0,     0,   227,\n-     228,   507,     0,   231,     0,   232,     0,   233,   234,   235,\n-       0,   236,   237,   238,   239,   240,  2150,   242,     0,   244,\n-     245,   246,   247,     0,   248,   249,   250,   251,   252,   253,\n-     254,     0,   255,     0,   257,   258,   259,   260,   261,   262,\n-     263,   264,     0,   265,     0,   266,     0,     0,   269,     0,\n-     271,   272,   273,   274,   275,   276,     0,     0,   277,     0,\n-     279,     0,     0,   281,   282,   283,   284,   285,   286,   287,\n-     288,   508,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,   305,   306,   307,\n-     308,     0,   310,   311,   312,   313,   314,     0,   315,   316,\n-       0,   318,     0,   319,   320,   321,   322,   323,   324,     0,\n-     325,   326,     0,     0,   327,   328,   329,     0,     0,   330,\n-     331,     0,   333,     0,   335,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,     0,     0,     0,     0,   346,\n-     347,   348,     0,   350,   351,   352,   353,   354,   355,     0,\n-     356,   357,   358,   359,   360,   361,     0,   362,   363,   364,\n-     365,   366,   367,   368,   369,     0,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,     0,\n-     383,   384,     0,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,     0,     0,\n-     401,   402,   403,   404,   405,   406,   407,   408,   409,   410,\n-       0,   412,   413,   414,   415,     0,   416,   417,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   509,   429,\n-     430,   431,     0,   432,   433,     0,   434,     0,   436,   437,\n-     438,   439,   440,     0,   441,   442,     0,     0,   443,   444,\n-     445,   446,   447,     0,   448,   449,   450,   451,   452,   453,\n-     454,   455,     0,     0,   456,   457,   458,     0,   459,   460,\n-     461,   462,     0,   463,   464,   465,   466,   467,   468,   469,\n-       0,   470,     0,   472,   473,   474,   475,   476,     0,     0,\n-     477,     0,     0,   478,   479,   480,   481,   482,   483,   484,\n-     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,\n-     495,   496,   497,   498,   754,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   111,   112,   113,   114,   115,   116,   117,\n-     118,     0,   119,   120,   121,     0,     0,     0,   755,     0,\n-       0,     0,     0,   756,   123,   124,     0,   125,   126,   127,\n-     757,   129,   130,   131,     0,   758,   759,   760,   761,     0,\n-     137,   138,   139,   140,   141,   142,     0,     0,   143,   144,\n-     762,   763,   147,     0,   148,   149,   150,   151,     0,     0,\n-     764,     0,   765,   155,   156,   157,   158,   159,   766,   161,\n-     162,   163,     0,   164,   165,   166,   167,   168,   169,     0,\n-     767,   171,   172,   173,   174,   175,   176,   177,   178,   179,\n-     180,   768,   769,   183,     0,   184,     0,   185,   186,   187,\n-     188,   189,   190,     0,   191,   192,   193,   194,   195,     0,\n-       0,   196,   197,   770,   199,   200,     0,   201,   202,   203,\n-       0,   204,   205,   206,     0,   207,   208,   209,   210,     0,\n-     212,   213,   214,   215,   216,     0,     0,   218,     0,   219,\n-     220,   771,   222,     0,   223,     0,   224,   772,     0,   773,\n-     227,   228,     0,   774,   231,     0,   232,     0,     0,     0,\n-     235,     0,   236,   237,   238,   239,   240,   775,   242,   776,\n-     244,   245,   246,   247,     0,   248,   249,   250,   251,   252,\n-     253,   254,     0,   255,   777,     0,   258,   259,   260,   261,\n-     262,   778,   779,     0,   780,     0,   266,   781,   782,   269,\n-     783,   271,   272,   273,   274,   275,   276,     0,     0,   277,\n-     784,   279,   785,     0,   281,   282,   283,   284,   285,   286,\n-     287,   288,   786,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n-     307,   787,   788,   789,   311,   312,   313,     0,     0,   315,\n-     316,   790,   318,     0,     0,   320,   791,   322,   323,   324,\n-       0,   325,   326,     0,     0,   327,   328,   329,     0,     0,\n-     330,     0,   792,   333,   793,     0,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,     0,     0,     0,     0,\n-     346,   347,     0,   794,   350,   351,     0,   353,   354,   355,\n-       0,   356,   357,   358,   359,   360,   361,     0,   362,   363,\n-     364,   795,   366,   367,   368,   369,     0,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-       0,   383,   384,   796,   386,   387,   388,   797,   390,   391,\n-     392,   393,   394,   395,   396,   397,   398,   399,   400,     0,\n-     798,   401,   402,   403,   404,   405,   406,   799,   408,   409,\n-     410,   800,   412,   413,   801,   415,     0,   416,   417,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   802,\n-     429,     0,   431,     0,   432,   433,     0,   434,   803,   436,\n-     437,   438,   439,   440,     0,   804,   805,     0,     0,   443,\n-     444,     0,   446,     0,     0,   448,   449,   806,   451,   452,\n-     453,   454,   455,   807,     0,   456,   457,   458,     0,   459,\n-     460,   461,   462,     0,   463,   464,   465,   466,   467,     0,\n-     808,     0,   470,   809,   472,   473,   474,   475,   476,     0,\n-       0,   477,     0,     0,   478,   479,   480,   481,   482,   483,\n-     754,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,   495,   496,   497,   498,     0,     0,     0,     0,   111,\n-     112,   113,   114,   115,   116,   117,   118,     0,   119,   120,\n-     121,     0,     0,     0,   755,     0,     0,     0,     0,   756,\n-     123,   124,     0,   125,   126,   127,   757,   129,   130,   131,\n-       0,   758,   759,   760,   761,     0,   137,   138,   139,   140,\n-     141,   142,     0,     0,   143,   144,   762,   763,   147,     0,\n-     148,   149,   150,   151,     0,     0,   764,     0,   765,   155,\n-     156,   157,   158,   159,   766,   161,   162,   163,     0,   164,\n-     165,   166,   167,   168,   169,     0,   767,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   768,   769,   183,\n-       0,   184,     0,   185,   186,   187,   188,   189,   190,     0,\n-     191,   192,   193,   194,   195,     0,     0,   196,   197,   770,\n-     199,   200,     0,   201,   202,   203,     0,   204,   205,   206,\n-       0,   207,   208,   209,   210,     0,   212,   213,   214,   215,\n-     216,     0,     0,   218,     0,   219,   220,   771,   222,     0,\n-     223,     0,   224,   772,     0,   773,   227,   228,     0,   774,\n-     231,     0,   232,     0,     0,     0,   235,     0,   236,   237,\n-     238,   239,   240,   241,   242,   776,   244,   245,   246,   247,\n-       0,   248,   249,   250,   251,   252,   253,   254,     0,   255,\n-     777,     0,   258,   259,   260,   261,   262,   778,   779,     0,\n-     780,     0,   266,   781,   782,   269,   783,   271,   272,   273,\n-     274,   275,   276,     0,     0,   277,   784,   279,   785,     0,\n-     281,   282,   283,   284,   285,   286,   287,   288,   786,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,   787,   788,   789,\n-     311,   312,   313,     0,     0,   315,   316,   790,   318,     0,\n-       0,   320,   791,   322,   323,   324,     0,   325,   326,     0,\n-       0,   327,   328,   329,     0,     0,   330,     0,   792,   333,\n-     793,     0,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,     0,     0,     0,     0,   346,   347,     0,   794,\n-     350,   351,     0,   353,   354,   355,     0,   356,   357,   358,\n-     359,   360,   361,     0,   362,   363,   364,   795,   366,   367,\n-     368,   369,     0,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,     0,   383,   384,   796,\n-     386,   387,   388,   797,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,     0,   798,   401,   402,   403,\n-     404,   405,   406,   799,   408,   409,   410,   800,   412,   413,\n-     801,   415,     0,   416,   417,   418,   419,   420,   421,   422,\n-     423,   424,   425,   426,   427,   802,   429,     0,   431,     0,\n-     432,   433,     0,   434,   803,   436,   437,   438,   439,   440,\n-       0,   804,   805,     0,     0,   443,   444,     0,   446,     0,\n-       0,   448,   449,   806,   451,   452,   453,   454,   455,   807,\n-       0,   456,   457,   458,     0,   459,   460,   461,   462,     0,\n-     463,   464,   465,   466,   467,     0,   808,     0,   470,   809,\n-     472,   473,   474,   475,   476,     0,     0,   477,     0,     0,\n-     478,   479,   480,   481,   482,   483,   754,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,   495,   496,   497,\n-     498,     0,     0,     0,     0,   111,   112,   113,   114,   115,\n-     116,   117,   118,     0,   119,   120,   121,     0,     0,     0,\n-     755,     0,     0,     0,     0,   756,   123,   124,     0,   125,\n-     126,   127,   757,   129,   130,   131,     0,   758,   759,   760,\n-     761,     0,   137,   138,   139,   140,   141,   142,     0,     0,\n-     143,   144,   762,   763,   147,     0,   148,   149,   150,   151,\n-       0,     0,   764,     0,   765,   155,   156,   157,   158,   159,\n-     766,   161,   162,   163,     0,   164,   165,   166,   167,   168,\n-     169,     0,   767,   171,   172,   173,   174,   175,   176,   177,\n-     178,   179,   180,   768,   769,   183,     0,   184,     0,   185,\n-     186,   187,   188,   189,   190,     0,   191,   192,   193,   194,\n-     195,     0,     0,   196,   197,   770,   199,   200,     0,   201,\n-     202,   203,     0,  1774,   205,   206,     0,   207,   208,   209,\n-     210,     0,   212,   213,   214,   215,   216,     0,     0,   218,\n-       0,   219,   220,   771,   222,     0,   223,     0,   224,   772,\n-       0,   773,   227,   228,     0,   774,   231,     0,   232,     0,\n-       0,     0,   235,     0,   236,   237,   238,   239,   240,   241,\n-     242,   776,   244,   245,   246,   247,     0,   248,   249,   250,\n-     251,   252,   253,   254,     0,   255,   777,     0,   258,   259,\n-     260,   261,   262,   778,   779,     0,   780,     0,   266,   781,\n-     782,   269,   783,   271,   272,   273,   274,   275,   276,     0,\n-       0,   277,   784,   279,   785,     0,   281,   282,   283,   284,\n-     285,   286,   287,   288,   786,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,   787,   788,   789,   311,   312,   313,     0,\n-       0,   315,   316,   790,   318,     0,     0,   320,   791,   322,\n-     323,   324,     0,   325,   326,     0,     0,   327,   328,   329,\n-       0,     0,   330,     0,   792,   333,   793,     0,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,     0,     0,\n-       0,     0,   346,   347,     0,   794,   350,   351,     0,   353,\n-     354,   355,     0,   356,   357,   358,   359,   360,   361,     0,\n-     362,   363,   364,   795,   366,   367,   368,   369,     0,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n-     381,   382,     0,   383,   384,   796,   386,   387,   388,   797,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,     0,   798,   401,   402,   403,   404,   405,   406,   799,\n-     408,   409,   410,   800,   412,   413,   801,   415,     0,   416,\n-     417,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n-     427,   802,   429,     0,   431,     0,   432,   433,     0,   434,\n-     803,   436,   437,   438,   439,   440,     0,   804,   805,     0,\n-       0,   443,   444,     0,   446,     0,     0,   448,   449,   806,\n-     451,   452,   453,   454,   455,   807,     0,   456,   457,   458,\n-       0,   459,   460,   461,   462,     0,   463,   464,   465,   466,\n-     467,     0,   808,     0,   470,   809,   472,   473,   474,   475,\n-     476,     0,     0,   477,     0,     0,   478,   479,   480,   481,\n-     482,   483,  2782,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,   495,   496,   497,   498,     0,     0,     0,\n-       0,   111,   112,   113,   114,   115,   116,   117,   118,     0,\n-     119,   120,   121,     0,     0,     0,  2783,     0,     0,     0,\n-       0,  2784,   123,   124,     0,   125,   126,   127,  2785,   129,\n-     130,   131,     0,   758,  2786,   760,   761,     0,   137,   138,\n-     139,   140,   141,   142,     0,     0,   143,   144,   762,   763,\n-     147,     0,   148,   149,   150,   151,     0,     0,  2787,     0,\n-    2788,   155,   156,   157,   158,   159,  2789,   161,   162,   163,\n-       0,   164,   165,   166,   167,   168,   169,     0,  2790,   171,\n-     172,   173,   174,   175,   176,   177,   178,   179,   180,   768,\n-     769,   183,     0,   184,     0,   185,   186,   187,   188,   189,\n-     190,     0,   191,   192,   193,   194,   195,     0,     0,   196,\n-     197,   770,   199,   200,     0,   201,   202,   203,     0,   204,\n-     205,   206,     0,   207,   208,   209,   210,     0,   212,   213,\n-     214,   215,   216,     0,     0,   218,     0,   219,   220,   771,\n-     222,     0,   223,     0,   224,  2791,     0,  2792,   227,   228,\n-    2793,  2794,   231,     0,   232,     0,     0,     0,   235,     0,\n-     236,   237,   238,   239,   240,   241,   242,  2795,   244,   245,\n-     246,   247,     0,   248,   249,   250,   251,   252,   253,   254,\n-       0,   255,  2796,     0,   258,   259,   260,   261,   262,   778,\n-     779,     0,   780,     0,   266,  2797,  2798,   269,  2799,   271,\n-     272,   273,   274,   275,   276,     0,     0,   277,  2800,   279,\n-    2801,     0,   281,   282,   283,   284,   285,   286,   287,   288,\n-    3013,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,   787,\n-    2803,   789,   311,   312,   313,     0,     0,   315,   316,  2805,\n-     318,     0,     0,   320,   791,   322,   323,   324,     0,   325,\n-     326,     0,     0,   327,   328,   329,     0,     0,   330,     0,\n-    2807,   333,  2808,     0,   336,   337,   338,   339,   340,   341,\n-     342,   343,   344,   345,     0,     0,     0,     0,   346,   347,\n-       0,  2809,   350,   351,     0,   353,   354,   355,     0,   356,\n-     357,   358,   359,   360,   361,     0,   362,   363,   364,   795,\n-     366,   367,   368,   369,     0,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,     0,   383,\n-     384,  2810,   386,   387,   388,     0,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,     0,  2811,   401,\n-     402,   403,   404,   405,   406,     0,   408,   409,   410,  2813,\n-     412,   413,   801,   415,     0,   416,   417,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,  3014,   429,     0,\n-     431,     0,   432,   433,     0,   434,  2815,   436,   437,   438,\n-     439,   440,     0,   804,   805,     0,     0,   443,   444,     0,\n-     446,     0,     0,   448,   449,  2816,   451,   452,   453,   454,\n-     455,     0,     0,   456,   457,   458,     0,   459,   460,   461,\n-     462,     0,   463,   464,   465,   466,   467,     0,   808,     0,\n-     470,  2818,   472,   473,   474,   475,   476,     0,     0,   477,\n-       0,     0,   478,   479,   480,   481,   482,   483,   506,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,   495,\n-     496,   497,   498,     0,     0,     0,     0,   111,   112,   113,\n-     114,   115,   116,   117,   118,     0,   119,   120,   121,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   123,   124,\n-       0,   125,   126,   127,     0,   129,   130,   131,   132,   133,\n-       0,   135,   136,     0,   137,   138,   139,   140,   141,   142,\n-       0,     0,   143,   144,   145,   146,   147,     0,   148,   149,\n-     150,   151,   152,     0,     0,     0,   154,   155,   156,   157,\n-     158,   159,     0,   161,   162,   163,     0,   164,   165,   166,\n-     167,   168,   169,     0,     0,   171,   172,   173,   174,   175,\n-     176,   177,   178,   179,   180,   181,   182,   183,     0,   184,\n-       0,   185,   186,   187,   188,   189,   190,     0,   191,   192,\n-     193,   194,   195,     0,     0,   196,   197,   198,   199,   200,\n-       0,   201,   202,   203,     0,   204,   205,   206,     0,   207,\n-     208,   209,   210,   211,   212,   213,   214,   215,   216,   217,\n-       0,   218,     0,   219,   220,   221,   222,     0,   223,     0,\n-     224,     0,     0,     0,   227,   228,   507,     0,   231,     0,\n-     232,     0,   233,   234,   235,     0,   236,   237,   238,   239,\n-     240,   241,   242,     0,   244,   245,   246,   247,     0,   248,\n-     249,   250,   251,   252,   253,   254,     0,   255,     0,   257,\n-     258,   259,   260,   261,   262,   263,   264,     0,   265,     0,\n-     266,     0,     0,   269,     0,   271,   272,   273,   274,   275,\n-     276,     0,     0,   277,     0,   279,     0,     0,   281,   282,\n-     283,   284,   285,   286,   287,   288,   508,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,   308,     0,   310,   311,   312,\n-     313,   314,     0,   315,   316,     0,   318,     0,   319,   320,\n-     321,   322,   323,   324,     0,   325,   326,     0,     0,   327,\n-     328,   329,     0,     0,   330,   331,     0,   333,     0,   335,\n-     336,   337,   338,   339,   340,   341,     0,   343,   344,   345,\n-       0,     0,     0,     0,   346,   347,   348,     0,   350,   351,\n-     352,   353,   354,   355,     0,   356,   357,   358,   359,   360,\n-     361,     0,   362,     0,   364,   365,   366,   367,   368,   369,\n-       0,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,     0,   383,   384,     0,   386,   387,\n-     388,   389,     0,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,     0,     0,   401,   402,   403,   404,   405,\n-     406,   407,   408,   409,   410,     0,   412,   413,   414,   415,\n-       0,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n-     425,   426,   427,   509,   429,   430,   431,     0,   432,   433,\n-       0,   434,     0,   436,   437,   438,   439,   440,     0,   441,\n-     442,     0,     0,   443,   444,   445,   446,   447,     0,   448,\n-     449,   450,   451,   452,   453,   454,   455,     0,     0,   456,\n-     457,   458,     0,   459,   460,   461,   462,     0,   463,   464,\n-     465,   466,   467,   468,   469,     0,   470,     0,   472,   473,\n-     474,   475,   476,     0,     0,   477,     0,     0,   478,   479,\n-     480,   481,   482,   483,   484,   485,   486,   487,   488,   489,\n-     490,   491,   492,   493,   494,   495,   496,   497,   498,   754,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,   111,   112,\n-     113,   114,   115,   116,   117,   118,     0,   119,   120,   121,\n-       0,     0,     0,   755,     0,     0,     0,     0,   756,   123,\n-     124,     0,   125,   126,   127,   757,   129,   130,   131,     0,\n-     758,   759,   760,   761,     0,   137,   138,   139,   140,   141,\n-     142,     0,     0,   143,   144,   762,   763,   147,     0,   148,\n-     149,   150,   151,     0,     0,   764,     0,   765,   155,   156,\n-     157,   158,   159,   766,   161,   162,   163,     0,   164,   165,\n-     166,   167,   168,   169,     0,   767,   171,   172,   173,   174,\n-     175,   176,   177,   178,   179,   180,   768,   769,   183,     0,\n-     184,     0,   185,   186,   187,   188,   189,   190,     0,   191,\n-     192,   193,   194,   195,     0,     0,   196,   197,   770,   199,\n-     200,     0,   201,   202,   203,     0,   204,   205,   206,     0,\n-     207,   208,   209,   210,     0,   212,   213,   214,   215,   216,\n-       0,     0,   218,     0,   219,   220,   771,   222,     0,   223,\n-       0,   224,   772,     0,   773,   227,   228,     0,   774,   231,\n-       0,   232,     0,     0,     0,   235,     0,   236,   237,   238,\n-     239,   240,   241,   242,   776,   244,   245,   246,   247,     0,\n-     248,   249,   250,   251,   252,   253,   254,     0,   255,   777,\n-       0,   258,   259,   260,   261,   262,   778,   779,     0,   780,\n-       0,   266,   781,   782,   269,   783,   271,   272,   273,   274,\n-     275,   276,     0,     0,   277,   784,   279,   785,     0,   281,\n-     282,   283,   284,   285,   286,   287,   288,     0,   290,   291,\n-     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,   787,   788,   789,   311,\n-     312,   313,     0,     0,   315,   316,   790,   318,     0,     0,\n-     320,   791,   322,   323,   324,     0,   325,   326,     0,     0,\n-     327,   328,   329,     0,     0,   330,     0,   792,   333,   793,\n-       0,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,     0,     0,     0,     0,   346,   347,     0,   794,   350,\n-     351,     0,   353,   354,   355,     0,   356,   357,   358,   359,\n-     360,   361,     0,   362,   363,   364,   795,   366,   367,   368,\n-     369,     0,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,     0,   383,   384,   796,   386,\n-     387,   388,     0,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,     0,   798,   401,   402,   403,   404,\n-     405,   406,     0,   408,   409,   410,   800,   412,   413,   801,\n-     415,     0,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,     0,   429,     0,   431,     0,   432,\n-     433,     0,   434,   803,   436,   437,   438,   439,   440,     0,\n-     804,   805,     0,     0,   443,   444,     0,   446,     0,     0,\n-     448,   449,   806,   451,   452,   453,   454,   455,     0,     0,\n-     456,   457,   458,     0,   459,   460,   461,   462,     0,   463,\n-     464,   465,   466,   467,     0,   808,     0,   470,   809,   472,\n-     473,   474,   475,   476,     0,     1,   477,     0,     0,   478,\n-     479,   480,   481,   482,   483,     2,     0,     3,     4,     0,\n-       0,     0,     1,     0,     0,     0,   495,   496,   497,   498,\n-       0,     0,     2,     0,     0,     6,     0,     0,     0,     0,\n-       0,     0,     0,     0,     7,     0,     0,     0,     0,     0,\n-       0,     0,     6,     0,     0,     0,     8,     0,     0,     0,\n-       0,     7,     0,     0,     0,     0,     0,     9,     0,     0,\n-       0,     0,     0,     8,     0,     0,     0,     0,     0,    10,\n-       0,   568,     0,     0,     9,     0,     0,     0,     0,     0,\n-       0,     0,    12,     0,     0,     0,    10,     0,   568,     0,\n-       0,     0,     0,     0,     0,     0,    13,     0,     0,    12,\n-       0,     0,     0,     0,     0,     0,    15,     0,     0,     0,\n-       0,     0,    16,    13,     0,     0,     0,     0,     0,     0,\n-      17,     0,     0,    15,     0,     0,     0,     0,     0,    16,\n-       0,     0,     0,     0,     0,     0,    20,    17,     0,     0,\n-      21,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,    20,     0,     0,     0,    21,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,\n-       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,\n-       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,\n+       0,    23,     0,     0,     0,     0,     0,     0,     0,     0,\n+       0,     0,     0,     0,     0,     0,     0,     0,    23,     0,\n+       0,     0,     0,     0,     0,     0,     0,    24,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,    24,     0,     0,     0,     0,     0,\n        0,     0,     0,     0,     0,     0,     0,     0,     0,     0,\n@@ -10811,966 +10867,910 @@ static const yytype_int16 yytable[] =\n \n static const yytype_int16 yycheck[] =\n {\n-       7,   501,   711,   561,    70,     0,     0,   563,   652,     0,\n-      45,     0,     0,   627,    21,  1168,   799,     0,   947,   721,\n-       0,  1104,   988,   570,   927,  1141,  1166,   723,   697,     7,\n-       0,     0,   675,  1598,  1506,  2060,    18,  1179,   927,  2064,\n-    1640,  1137,  2091,    21,   805,    74,  1347,    36,    18,  1143,\n-     829,  1146,  1352,  1526,   833,   730,  1751,  2146,    74,  1457,\n-      11,   938,  2190,  2191,  2192,    72,    73,  1214,  1424,    37,\n-     938,   623,    23,    24,   938,   564,   628,  1171,   569,   938,\n-     711,  1069,   713,   570,   715,  1551,  1552,  2142,  1076,  2550,\n-    2518,  2518,     0,  2548,    72,    73,  2026,  2080,     0,     0,\n-      44,     0,     0,     0,  1398,  2085,    95,     0,  2570,  1038,\n-    2389,    24,  2205,   561,  2563,     7,     0,   593,     5,     0,\n-    1764,     0,     0,     0,     0,     0,     0,     0,  1605,    21,\n-    1658,     0,     0,   633,     0,     5,    55,   105,     0,  1761,\n-    1660,     0,  2472,   692,     5,     0,  2476,     0,     0,     5,\n-      21,   692,    13,    14,  1889,     5,    78,   108,   762,   763,\n-       5,     5,     5,    13,    14,     5,     5,     5,   668,  2224,\n-      13,    14,     5,    13,    14,    13,    14,     5,     5,  1082,\n-      72,    73,     9,     5,     5,   789,     5,     9,     5,  2850,\n-       5,     5,     5,     5,   837,    11,   135,   687,  2218,    63,\n-      16,    72,    73,  2214,     5,  2866,  2863,    37,  1564,     9,\n-     167,    40,    21,    11,    45,  1181,    13,    14,    16,   168,\n-      98,   115,    13,    14,  1190,   120,    72,   185,     3,    63,\n-      46,    60,  2365,     3,     4,     5,   118,  2292,  2293,     9,\n-    2295,   799,   176,    80,     9,    63,    98,  3017,     4,   169,\n-      45,   168,  1155,     9,    91,  1158,  1159,    30,   105,    34,\n-      35,    63,    78,    72,    73,   282,     4,   280,   173,  1030,\n-    3138,     9,  2827,   173,  2756,   104,   105,    11,   167,    72,\n-      73,    15,    16,   985,   113,   283,   118,   288,    80,    63,\n-     304,   288,   221,   936,  1922,  1923,  1340,   945,    30,    91,\n-     304,   133,   105,   239,  2432,  1933,    38,  3105,    30,  1937,\n-      83,   356,    46,   161,  2688,   368,    38,  2691,   164,    92,\n-     240,    30,  2347,   113,  2431,   939,  3169,  2434,   268,    38,\n-     235,  1915,  1916,  1917,   377,   235,   265,    73,   168,    53,\n-    2486,   114,   171,   113,    78,   187,   157,  1703,   442,  1705,\n-      30,   145,    64,   357,  2049,   115,    30,   462,  3226,    11,\n-      72,  3229,   187,    15,    16,   271,    41,   196,   116,  3240,\n-      11,  1154,   395,   203,   498,   143,   128,  3038,   502,   418,\n-     927,   486,    11,   300,  2812,  1087,    15,    16,   940,   219,\n-     106,   166,  1475,   168,  1037,   561,  2485,  2858,    88,   229,\n-     952,   195,  1006,  1007,   282,  2860,   500,   118,  2869,    40,\n-      11,  2460,   185,   333,    15,    16,   245,  1021,  2952,   116,\n-    2954,   232,   106,  1506,   253,   198,   465,  2482,    40,  2484,\n-     282,   989,   159,   456,  2580,   125,   265,    78,   267,   930,\n-     987,   189,   106,   213,   212,    46,  3289,   122,   128,   378,\n-     370,   504,  3323,  3321,   128,   500,  2386,   500,   172,   416,\n-    3015,   361,   265,   265,   381,   235,   314,   296,   561,  1941,\n-     106,   349,   208,   319,   188,  1519,   382,    78,   159,   193,\n-    3137,   495,   272,   500,   348,   405,   318,   500,  1132,  1133,\n-    3288,   495,   189,  1136,  2976,  3265,   207,   349,   225,   439,\n-     436,   343,   500,   504,   409,  2638,   411,   504,   442,   409,\n-     439,   411,   272,  2995,   348,  2622,  2890,   231,   347,   458,\n-     288,   346,   352,   235,  1082,   277,   515,   416,  1822,  3063,\n-     348,   436,   489,   405,   454,   570,   436,  1084,  1085,   369,\n-     171,   370,   500,   561,  2599,   502,   348,   442,  2559,  1218,\n-     444,   500,   157,  2026,   561,   144,  2576,   439,   405,   171,\n-     389,     4,   391,   570,   500,   394,     9,  3228,  2303,  2097,\n-    3227,   402,  1688,   375,   348,  1075,   498,  3026,  2098,   416,\n-     502,   500,  2226,   264,   462,  1134,   621,   433,   570,  3017,\n-    3017,   392,   393,  1134,   464,   451,  1154,  2219,  1745,   569,\n-    2066,   442,   104,   610,  2761,   194,  2083,   402,   128,   299,\n-     462,   498,  2769,   500,   621,   502,   486,  2090,   391,  1109,\n-     239,   394,  1098,   501,   416,   503,  1779,   232,   404,  1325,\n-     500,   697,   610,   799,  1600,   664,   464,  2967,  2727,   500,\n-     504,  2734,  2972,   621,   500,   652,   653,  2926,   664,   501,\n-     500,   503,   603,   385,   605,   500,   500,   500,   486,   500,\n-     500,   500,   500,   385,   432,   441,   380,   500,   675,     0,\n-     504,   500,   500,   500,   279,  3136,   385,   452,   500,   500,\n-     496,   500,  3144,   500,   635,   500,   500,   500,   500,   684,\n-     684,   673,   605,   684,  3143,   684,   684,  1340,   496,   499,\n-    3327,   684,   670,   500,   684,   656,   799,   503,  1850,   500,\n-     717,   718,   719,   347,   684,   684,  2844,   500,   610,   687,\n-     410,   491,   492,  2703,   462,  2708,   491,   492,   439,   621,\n-     504,  1406,   676,  2361,  3361,   491,   492,   197,   239,   610,\n-     504,   375,   361,   245,  1348,  1349,    26,   267,   486,    26,\n-     621,   253,    32,   491,   492,   239,  2050,   277,  1316,   493,\n-     494,   495,   496,    12,  2348,  2349,  2350,  2351,    17,  3224,\n-      13,    14,  3096,    26,  3098,  3236,   684,    69,    70,    32,\n-      29,   799,   684,   684,  2714,   684,   684,   684,  1346,  1347,\n-     452,   684,   799,  2848,    43,    44,  2152,  2153,  2154,  1946,\n-     684,  1449,  1450,   684,  1362,   684,  1454,   684,   684,   684,\n-     684,   684,   621,    37,  1717,   684,   684,   436,   684,  1902,\n-    1463,  1787,   684,   989,  1727,   684,  3281,  1730,   621,   684,\n-     837,   684,   498,  1477,   500,   113,   502,  3265,  3265,  1395,\n-    1396,   493,   494,   495,   496,  1547,    33,   128,  1404,  3173,\n-    1494,   251,   252,   133,   103,  1859,   133,   464,  1941,   489,\n-     361,  1408,   491,   492,   493,   494,   495,   496,  1316,   115,\n-     500,    80,    59,     5,   155,  1518,  1519,   361,   495,   486,\n-     133,   500,    91,  3344,  1527,   502,  1890,  3193,  3194,  2978,\n-     491,   492,   493,   494,   495,   496,   989,  1980,  1346,   128,\n-    1602,   361,  1604,   157,   489,  1548,   964,   185,   162,   500,\n-     370,  1400,   970,  2386,  1362,   343,  1407,   502,  1470,   162,\n-     927,  1408,  1910,   495,   106,  2281,   155,  2325,   935,   936,\n-     502,  2397,   197,  1836,   941,   436,  3242,   944,   945,  1816,\n-     947,   948,   949,   950,   168,   405,   769,  1836,  1816,  1817,\n-    1818,  1815,   436,  2253,   961,   201,  1456,  1816,  1817,  2259,\n-     930,   968,  2262,   328,   221,   365,   366,   106,   791,   186,\n-       4,   989,  2068,     5,  2070,     9,   927,   173,   232,   203,\n-     987,   988,   989,   961,  2679,    11,   267,   938,  1154,   267,\n-     968,   272,   357,     3,   454,   219,   277,  1555,  1005,   500,\n-     421,   197,   825,  1038,  1713,   229,   286,   267,   265,   286,\n-      59,  1567,   272,   464,   246,  1022,   500,  2170,  1797,   265,\n-      46,   267,   405,  3112,     4,   279,  1033,  1034,  1035,     9,\n-    1037,  1038,   959,   286,   173,   486,   987,  2120,   239,   235,\n-    1819,    13,    14,   272,  1823,  2518,  2193,  1826,   277,   500,\n-     977,   501,    78,   980,   504,  1686,  1841,   157,  1065,  3187,\n-    1845,  1154,   162,  1848,   239,   345,   454,   327,   345,   961,\n-     347,   239,   329,  1742,  1743,  1744,   968,  1084,  1085,   364,\n-     183,   184,  1713,   464,  2178,   500,  1115,  1116,   341,  1118,\n-     961,   287,   345,  1768,  1045,   375,   235,   968,   375,  1115,\n-    1116,  1732,  1118,  1054,   500,   486,  1737,  1555,     4,  2410,\n-    1117,  2705,    80,     9,  1121,  1122,  2710,   162,   167,   500,\n-    1071,   378,   375,    91,  1131,  1132,  1133,  2056,   352,  1136,\n-     500,  1082,   232,  1084,  1085,   167,  1154,    13,    14,  1697,\n-    2235,  1109,   423,   500,  2616,   369,  2241,  1154,   251,   252,\n-    1316,  1794,   961,   434,   498,    13,    14,  2513,   502,   968,\n-     361,  2517,   409,  2519,   411,   445,   333,  1723,   961,   498,\n-     143,   333,  1728,   502,  1181,   968,   409,   500,   411,   279,\n-    1346,  1347,   439,  1190,   157,     6,   361,  1010,     9,   162,\n-      13,    14,   445,   361,   423,    16,  1362,   498,   500,   500,\n-     969,  1024,  1170,   370,   973,   434,   500,  1214,   370,  1462,\n-      31,  1464,  1465,   409,    35,   411,  1864,  1865,  1866,  1867,\n-    1868,  1869,   361,  1316,  1872,  1873,  1874,  1875,  1876,  1877,\n-    1878,  1879,  1880,  1881,  3259,   436,   167,   433,   405,   212,\n-     436,  2714,   462,   405,   464,    26,  2152,  3336,  2154,  1697,\n-    1808,    32,   500,  1346,  1347,  1898,   305,   306,   307,   232,\n-     500,   436,   365,   366,   501,  3290,   500,   504,   436,  1362,\n-     409,   486,   411,   305,   306,   307,  3325,  3326,   654,   655,\n-    2363,   657,   493,   501,  2367,   534,   504,   454,   501,  1836,\n-     500,   504,   454,  1851,   409,   500,   411,   436,  1316,   500,\n-     409,   501,   411,   483,   504,  1863,   279,    13,    14,  1316,\n-    3335,  3360,  2613,    13,    14,   288,   565,    13,    14,   368,\n-    1315,  1315,   282,   501,  1315,   500,   504,  1315,  1346,  1347,\n-      13,    14,   500,  1340,  3359,  1893,   368,   218,   501,  1346,\n-    1347,   504,  1900,   502,  1362,   501,  2499,   501,   504,   483,\n-     504,   501,   133,   502,   504,  1362,   405,   166,  2498,  1310,\n-    1808,  2009,  2010,    13,    14,   501,  2667,  2483,   504,   504,\n-    2149,  2014,  2151,   405,   501,   501,   501,   504,   504,   504,\n-     501,   501,  1940,   504,   504,  1943,    13,    14,   437,  1555,\n-    1948,  1398,  2061,   501,  2283,   501,   504,  1944,   504,   448,\n-    2540,  1408,  2497,  1851,  2499,   437,   501,   501,   501,   504,\n-     504,   504,  2482,   500,  2484,  1863,   448,  1424,   501,   501,\n-     501,   504,   504,  1430,   501,   501,  1408,   676,   504,   501,\n-     462,   501,   504,   501,   504,   501,   504,  1407,   504,    13,\n-      14,    37,  1449,  1450,   167,  1893,    42,  1454,    13,    14,\n-    1457,   500,  1900,   287,   486,  1462,  1463,  1464,  1465,   432,\n-    2389,   501,  1555,   689,   504,   691,    72,    59,   500,   500,\n-    1477,  1478,    13,    14,   483,  1482,  1427,  1484,   218,  1457,\n-    1487,  2125,   148,   561,   341,  1492,   501,  1494,  1495,   504,\n-    1497,   148,  1940,   148,  1501,  1943,  2257,  2258,   501,   143,\n-    1948,   504,   148,    99,  1482,   286,  1484,   113,    40,  1487,\n-     501,  1518,  1519,   157,  1492,   500,  1523,  1495,   162,  1497,\n-    1527,  2217,   267,  1501,   501,   498,  1515,   504,   501,   502,\n-     167,  1697,  1515,   267,  3099,  1515,    40,  1555,    13,    14,\n-     454,  1548,    87,  1550,  3017,  1515,  1515,   148,  1555,  1556,\n-    1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,    13,    14,\n-     341,  1568,  1569,   466,   345,  1457,  1573,   451,   212,   315,\n-    1577,   500,   168,  1580,  1581,  1582,  1583,  1584,  1585,  1586,\n-    1587,  1588,   500,  2884,  1591,   148,  1457,   500,   232,   500,\n-    1482,  1598,  1484,  1600,   375,  1487,  1603,    13,    14,   500,\n-    1492,    13,    14,  1495,  1697,  1497,    39,   203,   500,  1501,\n-     148,  1482,  2728,  1484,  1643,  2518,  1487,  1624,    13,    14,\n-     502,  1492,  2775,   219,  1495,   148,  1497,  1643,    13,    14,\n-    1501,    13,    14,   229,   148,   279,    13,    14,   343,  1646,\n-    1622,   282,  1808,   416,   288,    13,    14,    13,    14,   500,\n-    1657,  1658,    13,    14,    13,    14,  3054,   500,   173,  1610,\n-     500,   267,   356,   357,   445,   261,   272,   356,   357,   255,\n-     256,    26,   501,  1482,   407,  1484,  2234,    32,  1487,  1697,\n-     365,   366,   197,  1492,   500,  1851,  1495,   214,  1497,  1482,\n-    1697,  1484,  1501,  3293,  1487,  3295,  1703,  1863,  1705,  1492,\n-     356,   357,  1495,  2845,  1497,   356,   357,  3105,  1501,   305,\n-     447,   448,   219,   319,  2680,  1808,   312,  1084,  1085,   291,\n-     235,   799,  2278,   500,   219,    26,   219,  1893,   500,   335,\n-     289,    32,   230,    40,  1900,   500,  2283,     5,  1745,     5,\n-     500,  1748,  1749,   500,  1751,  3345,   500,   500,     5,     5,\n-     500,     5,  2454,   500,     5,   144,   352,  3113,  1851,     9,\n-     169,     3,   500,   293,   463,   504,  2414,  2415,   102,   504,\n-    1863,   501,   287,   369,  1940,    40,   214,  1943,   133,   162,\n-    1787,   375,  1948,   279,   162,   277,  2234,  1794,   432,    59,\n-    1808,   230,  3265,   500,  1783,   416,   500,    91,   416,    59,\n-    1893,  1808,   504,   416,    59,   258,   416,  1900,   416,     8,\n-     462,   148,    11,  2592,    98,  1822,    15,    16,   510,   148,\n-      19,    20,    21,   267,   267,   500,   167,   433,    40,  1836,\n-    2474,   240,   133,  1851,     3,   267,   442,   267,   500,  3237,\n-     500,   437,     5,     9,  1851,  1863,   361,  1940,  1855,  1856,\n-    1943,  1858,  2410,    39,  1103,  1948,  1863,  1864,  1865,  1866,\n-    1867,  1868,  1869,  2766,  2533,  1872,  1873,  1874,  1875,  1876,\n-    1877,  1878,  1879,  1880,  1881,  1893,   498,  2573,  2553,   414,\n-    1887,  1888,  1900,  3023,  1891,  1836,  1893,   498,   414,  1840,\n-    3288,  1898,     8,  1900,   409,    11,   411,   416,   416,    15,\n-      16,   504,   502,    19,    20,    21,   416,    40,  3264,   167,\n-     416,   989,   427,  1920,   501,   459,   501,  1924,   433,  1926,\n-     501,   436,  1940,  1930,   333,  1943,   501,    60,   501,   500,\n-    1948,   286,    26,  1940,    26,   501,  1943,  1944,    32,  1946,\n-      32,  1948,   219,   106,   501,   501,  1924,   219,   274,  1956,\n-     274,   500,  1930,  2919,   500,   458,   504,    11,   509,   343,\n-    2518,   370,  2610,   499,   305,   306,   307,   504,   510,   414,\n-    2899,   104,   500,   504,   272,  1982,   500,   158,   176,  2014,\n-    1987,   416,   167,  1990,   504,   286,   341,   212,   501,   500,\n-     345,  2880,  3134,  1944,   193,  3078,   405,   258,   378,  2778,\n-    2779,   442,  2009,  2010,   504,   221,   176,  2014,   283,   304,\n-     173,   304,   214,   504,   504,   501,   500,   216,   221,   267,\n-     375,  2028,   324,   167,  2031,   221,  2033,   368,   280,  2812,\n-    2588,   454,  1924,   500,   197,   288,   500,   148,  1930,   133,\n-     341,   133,  2049,  2050,   345,   454,   148,   148,   462,  2056,\n-     148,    40,  2059,  1924,   267,  2613,   282,   483,   498,  1930,\n-     282,   143,   483,   196,   405,   501,    40,   501,  2234,  2076,\n-    2518,    59,   235,   501,   375,   157,  1154,   501,   167,   501,\n-     162,  2059,  2089,   501,    11,   284,  2075,    40,  2644,  2078,\n-     445,   162,  2075,   501,   501,  2075,   437,   501,  2076,  2106,\n-    2107,  2749,   500,   500,   176,  2075,  2075,   448,   501,  2667,\n-     500,   162,   245,  3266,  3017,  1924,  2123,   167,  2125,   483,\n-     253,  1930,   501,   499,   287,   416,   501,  2134,   502,   501,\n-     212,  1924,   265,   151,   501,   500,   459,  1930,   500,    40,\n-    2588,  2234,   500,   500,   445,  2152,  2153,  2154,   504,   489,\n-     232,   283,  1401,   485,  1403,   283,   439,   504,   238,   500,\n-      59,    59,   258,   296,   267,   500,   148,  2059,   284,   416,\n-     197,   148,   148,   416,   274,   416,   416,   416,   500,   274,\n-     501,   499,   167,    40,  2076,   343,  2193,  2222,  2059,   501,\n-     504,  2747,   286,   280,   286,   462,   282,   279,   361,    40,\n-     148,   501,   499,   499,   272,  2076,   288,  2158,   167,   501,\n-     500,   500,    59,   501,   347,   501,  2234,  2212,  2212,  2777,\n-     501,  2212,   180,   162,  2212,    78,   139,  2234,   501,   193,\n-     501,   167,   501,   292,   510,  2883,   500,   370,  1316,  2246,\n-     349,   500,   504,   448,  2410,   282,   409,   341,   411,   341,\n-    2059,   345,  2203,   345,  2812,   501,   389,   501,  2960,   283,\n-    2211,   176,   500,   148,   427,   501,   501,  2076,  1346,  1347,\n-     433,  2222,   504,   436,  2281,   171,  2283,   500,   427,    40,\n-     501,   375,   501,   375,  1362,    40,   501,   501,   487,   488,\n-     489,   500,   491,   492,   493,   494,   495,   496,   504,   500,\n-    2996,    84,   442,   167,   499,   461,   500,   504,   501,   501,\n-     193,   501,   501,   504,   501,    89,   447,  2410,  2325,   501,\n-      59,   489,   501,     8,  3253,   501,  2884,   501,   501,  2777,\n-      15,    16,  2283,  2880,    19,    20,    21,  2288,   462,  2290,\n-     199,   113,    40,  2294,   221,  2296,   500,  2325,    86,   186,\n-     432,   445,  2518,   445,  2389,   272,   272,   502,  2365,  2425,\n-     502,   502,  3265,   502,   502,   502,   502,   502,   501,   489,\n-     416,   487,   488,   489,  2381,   491,   492,   493,   494,   495,\n-     496,   502,  2389,   502,   502,  2420,   416,   502,   502,   502,\n-     502,  2398,  2410,   501,  2401,   502,  2403,   502,   502,    40,\n-     267,   500,   105,  2410,  2411,   502,   462,  2414,  2415,   502,\n-    2445,  3080,  2419,  2420,   502,   561,   498,   502,   502,  2426,\n-     502,  3064,  2588,  3066,   502,  2518,   502,   502,   502,   502,\n-      40,   282,  3076,  2325,  2441,   502,   502,   502,    40,  2474,\n-    1689,   502,   500,     9,   504,   342,  2453,  2613,   500,   504,\n-    1699,   500,  1701,   326,  2325,  1704,   501,   501,    60,  3017,\n-      59,  1710,   193,  1712,   186,  3079,   499,  2474,  3082,   504,\n-     501,   500,   335,  2365,   147,  1724,    40,  1555,   148,   501,\n-    1729,   120,   148,    40,  1733,  1734,  1735,  1736,   501,  1738,\n-    1739,   357,   357,    40,   167,  2588,   501,   500,   500,  3208,\n-    2518,  2667,   104,  3199,   504,     3,  2513,     5,    40,   442,\n-    2517,  2518,  2519,   500,   301,    91,   129,     7,     8,   500,\n-    2613,   272,    12,  3192,   243,   185,    72,    17,   442,   500,\n-      72,    21,   427,    23,    24,   285,     9,    78,    28,    29,\n-      30,   501,   359,    33,  3188,   501,    36,    37,   500,    59,\n-      40,   501,   489,    43,    44,   447,   265,  2552,  2552,   282,\n-    2549,  2552,    40,   501,  2552,   427,   500,  2518,   285,  3017,\n-    2588,   285,   500,    37,  2667,   501,   501,   501,    42,   375,\n-     199,  2588,    72,    73,   118,   282,  2575,   113,   282,  2578,\n-     501,   439,  2543,  2544,   196,  2613,   561,   356,    25,   284,\n-    2635,    36,  2513,  2610,  2500,    95,  2613,   684,  2147,   107,\n-     108,  2777,   102,   103,   104,   105,   106,  2959,  3237,  1697,\n-    1711,  3101,  3308,  2630,  2631,  2451,  2771,  3214,  2635,  3316,\n-    2989,  2638,   305,   306,   307,    99,  3276,   945,  3267,  3309,\n-    2647,   167,  1141,   245,  3040,  2140,  2812,  2153,  2564,  2667,\n-    2657,   253,  3264,   799,  2661,  2662,  2492,  3274,  2137,  2666,\n-    2667,  3262,  1346,   265,  2671,  1313,  2517,  2674,  2675,  3169,\n-    1395,  2209,  2679,  2680,  2880,  2281,  2683,  2123,  2543,  2089,\n-    2687,   960,  3238,  1103,  2777,   183,   184,  1682,  2695,  2640,\n-    2345,  3248,  2106,  1124,   296,   368,  1125,   147,  1646,  3068,\n-    3175,    21,  1681,  2076,   168,  2638,  1936,  3265,  1127,  2687,\n-    2923,   960,   176,   621,  2325,  2324,    37,   167,  2884,  2812,\n-     940,    42,   610,  2372,  3010,  1364,  3178,   938,   938,  3179,\n-    1808,   938,   405,  3304,  2741,  2090,  1988,  2032,   938,   203,\n-    2029,  2692,  2749,  1957,  2063,   347,  2638,  1478,  2695,   247,\n-     248,   249,   250,   251,   252,   219,  2433,   255,   256,  2777,\n-    2075,  2768,  3164,  1408,   437,   229,   604,  1944,   370,   295,\n-    2777,  1623,  1622,  1851,  2452,   448,    14,    30,    99,   305,\n-     306,   307,    95,    -1,    -1,  1863,    -1,   389,    -1,   462,\n-      -1,  2884,    -1,    -1,  2812,  2687,    -1,   261,    -1,    -1,\n-      -1,    -1,   487,   488,   489,  2812,   491,   492,   493,   494,\n-     495,   496,    -1,   486,  1122,  1893,  2687,  3265,   282,    -1,\n-      -1,    -1,  1900,  1131,  2073,    -1,    -1,   500,    -1,    -1,\n-      -1,    -1,    -1,    -1,   799,    -1,    -1,    -1,    -1,    -1,\n-      -1,   305,   368,   989,    -1,  2852,    -1,   168,   312,    -1,\n-      -1,  3017,    -1,    -1,    -1,   305,   306,   307,    -1,    -1,\n-      -1,    -1,  1940,    -1,  2899,  1943,  2884,   365,   366,    -1,\n-    1948,    -1,  2861,  2880,    -1,    -1,  2883,  2884,  2687,   405,\n-      -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,   352,    -1,\n-      -1,    -1,  2899,    -1,  2687,    -1,    -1,    -1,   219,    -1,\n-      -1,    -1,    -1,    -1,    -1,   369,  2857,    -1,   229,    -1,\n-      -1,   437,  2919,    -1,    -1,    -1,    -1,    -1,   368,  2926,\n-      -1,    -1,   448,    -1,  3017,    -1,    -1,    -1,    -1,  2880,\n-    2937,  2938,    -1,    -1,  2941,    -1,   462,    -1,    -1,     8,\n-     261,    -1,    11,     0,    -1,    -1,    15,    16,    -1,    -1,\n-      19,    20,    21,    -1,    -1,   405,  2963,    -1,    -1,    -1,\n-     486,   282,    -1,    -1,    -1,    -1,    -1,    -1,  2957,  2958,\n-      -1,    -1,    -1,   437,   500,    -1,    -1,    -1,   442,    -1,\n-    2987,    -1,   480,   481,   305,    -1,    -1,   437,    -1,  2238,\n-      -1,   312,    -1,    -1,    -1,    -1,    -1,    -1,   448,  3017,\n-      -1,    -1,  2953,    -1,    -1,    -1,     8,    -1,  1154,    11,\n-    3017,    -1,   462,    15,    16,    -1,    -1,    19,    20,    21,\n-      -1,    -1,    -1,    -1,   989,    -1,   516,    -1,   518,    -1,\n-      -1,   352,   522,    -1,    36,   525,   486,    -1,    -1,  3028,\n-    3029,    98,    -1,  3050,   534,    -1,    -1,  3054,   369,    -1,\n-     500,    -1,    -1,    -1,    -1,    -1,    -1,  3064,    -1,  3066,\n-      -1,  3068,    -1,    -1,    -1,  3072,  3017,  3074,    -1,  3076,\n-      -1,    -1,    -1,   563,   564,   565,  3054,    -1,    -1,  3086,\n-      -1,    -1,    -1,    -1,    -1,    -1,   143,    -1,    -1,    -1,\n-      -1,    -1,  3099,    -1,    -1,    -1,    -1,    -1,  3105,  3265,\n-     157,    -1,    -1,    -1,    -1,   162,  3113,    -1,    -1,    -1,\n-     167,  3118,    55,   603,   604,   605,   437,    -1,    -1,   176,\n-     610,   442,   612,   180,   193,   945,    -1,  3105,    -1,    -1,\n-      -1,   621,   622,   623,    -1,    -1,    -1,   627,   628,    -1,\n-      -1,  1449,  1450,    -1,    -1,    -1,  1454,   216,    -1,    -1,\n-      -1,    -1,    -1,  3142,    -1,   212,  2234,   100,  3165,    -1,\n-      -1,    -1,  3054,    -1,   654,   655,    -1,   657,  3175,  3158,\n-    1316,    -1,  3265,  3162,    -1,   232,   119,    -1,    -1,    -1,\n-     670,  3188,    -1,  3054,  3135,    -1,   676,    -1,    -1,  1154,\n-      -1,     0,    -1,    -1,   137,    -1,    -1,   687,   141,    -1,\n-    1346,  1347,    -1,    -1,    -1,    -1,    -1,    -1,  3215,    18,\n-      -1,   701,    21,  3105,   216,   284,  1362,    -1,    -1,    -1,\n-     163,    -1,   279,   166,    -1,   282,    -1,    36,  2477,  2478,\n-    3237,   288,    -1,    -1,  3105,    -1,    45,    -1,   181,    -1,\n-      -1,    -1,    -1,    -1,   734,    -1,  3253,  3265,   738,   739,\n-     740,   741,    -1,    -1,    -1,    -1,  2505,  3264,  3265,  3237,\n-      -1,    -1,    -1,    72,    73,    74,    -1,    -1,  3257,   326,\n-      -1,  2520,  2521,  2522,  2523,  2524,  2525,  2526,  2527,  2528,\n-    2529,  3288,   284,    -1,    -1,    -1,    95,    -1,    -1,    -1,\n-      -1,  3280,   349,    -1,    -1,    -1,  3303,  3304,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    3288,  1131,    -1,    -1,  3265,    -1,    -1,    -1,    -1,    -1,\n-    3327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   272,\n-      -1,    -1,  2410,    -1,    -1,    -1,    -1,   280,  1646,    -1,\n-      -1,    -1,    -1,    -1,    -1,  3237,    -1,    -1,   405,  3300,\n-      -1,  1316,    -1,    -1,  3361,    -1,    -1,    -1,   301,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  3237,    -1,    -1,    40,\n-      -1,    -1,    -1,    -1,    -1,   432,    -1,    -1,   167,    -1,\n-       8,  1346,  1347,    11,   327,   442,    -1,    15,    16,    -1,\n-      -1,    19,    20,    21,    -1,    -1,  3288,  1362,    -1,    -1,\n-      -1,    -1,   459,    -1,   461,   462,    -1,    -1,    36,  1555,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3288,   487,   488,\n-     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n-      -1,   102,    -1,   104,    -1,   106,    -1,    -1,   167,    -1,\n-    2518,   498,    -1,    -1,   501,   502,   503,    -1,    -1,   939,\n-     940,    -1,   942,    -1,    -1,   945,    -1,    -1,    -1,    -1,\n-      -1,   951,   952,    -1,    -1,   955,    -1,    -1,    -1,     8,\n-      -1,   961,    11,    -1,    -1,    -1,    15,    16,   968,    -1,\n-      19,    20,    21,    -1,    -1,   487,   488,   489,   978,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    36,    -1,  2748,\n-      -1,    -1,    -1,   993,    -1,    -1,    -1,    46,    -1,    -1,\n-    2588,    -1,    -1,    -1,    53,    -1,   305,   306,   307,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   107,   108,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2613,    -1,    -1,    -1,    78,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  1697,  1042,    -1,    -1,    -1,  1864,  1865,  1866,  1867,\n-    1868,  1869,    -1,    -1,  1872,  1873,  1874,  1875,  1876,  1877,\n-    1878,  1879,  1880,  1881,    -1,    -1,   305,   306,   307,   368,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,  2667,\n-    1555,    -1,    -1,    -1,    -1,    -1,  1086,    -1,  1088,    -1,\n-      -1,    -1,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1103,  1104,    -1,   405,    -1,    -1,  1109,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1449,\n-    1450,    -1,    -1,   172,  1454,   424,    -1,    -1,    72,   368,\n-      -1,  1131,    -1,    -1,    78,    -1,    -1,    -1,   437,   188,\n-    1140,  1141,    -1,    -1,   193,    -1,   284,    91,    -1,   448,\n-      -1,    -1,  1808,  1153,    -1,    -1,   247,   248,   249,   250,\n-     251,   252,    -1,   462,   255,   256,   405,   216,   217,   113,\n-    1170,   115,    -1,    -1,  1174,    -1,    -1,    -1,  1178,    -1,\n-      -1,    -1,   231,    -1,    -1,    -1,    -1,   486,    -1,  2777,\n-      -1,  2009,  2010,    -1,    -1,  1851,   515,    -1,   437,    -1,\n-      -1,   500,    -1,    -1,    -1,    -1,    -1,  1863,    -1,   448,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n-      -1,   270,  1697,   462,  2812,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   284,    -1,  1893,   287,  2998,\n-      -1,    -1,    -1,    -1,  1900,    -1,    -1,   486,    -1,    -1,\n-     569,   570,    -1,    -1,    -1,    -1,    -1,   201,    -1,  3018,\n-    3019,   500,    -1,    -1,    -1,    -1,  1596,    -1,    -1,    -1,\n-      -1,   107,   108,    -1,   365,   366,    -1,    -1,  3037,    -1,\n-      -1,    -1,    -1,    -1,  1940,    -1,    -1,  1943,    -1,    12,\n-      -1,   610,  1948,    -1,    17,    -1,  2884,    -1,    -1,    -1,\n-      -1,    -1,   621,    -1,    -1,  2123,    29,  1307,    -1,    -1,\n-      -1,  1311,  1312,    -1,    -1,    -1,  1646,    -1,  1318,    -1,\n-      43,    44,    -1,   267,    -1,    -1,    -1,    -1,   272,  1329,\n-      -1,   380,    -1,  1808,    -1,   516,    -1,   518,    -1,    -1,\n-      -1,   522,    -1,    -1,   525,   664,    -1,   183,   184,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,  1359,\n-      -1,   927,    -1,    -1,  1364,   684,    -1,    -1,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,   319,  1851,    -1,    15,    16,\n-     103,    -1,    19,    20,    21,    -1,    -1,    -1,  1863,   480,\n-     481,   335,    -1,    -1,    -1,  1395,  1396,    -1,    -1,    36,\n-    1400,  1401,    -1,  1403,  1404,    -1,    -1,    -1,    -1,   500,\n-      -1,   247,   248,   249,   250,   251,   252,    -1,  1893,   255,\n-     256,   987,    -1,    -1,    -1,  1900,    -1,    -1,    -1,  3017,\n-      -1,   612,    -1,    -1,    -1,   484,    -1,  3196,   487,   488,\n-     489,    -1,   491,   492,   493,   494,   495,   496,    -1,  1449,\n-    1450,    -1,    -1,    -1,  1454,    -1,    -1,  1457,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  1940,    -1,    -1,  1943,    -1,\n-    1470,    -1,  1472,  1948,    -1,  1475,    -1,    -1,    -1,    -1,\n-    1480,    -1,  1482,    -1,  1484,    -1,    -1,  1487,  1054,   433,\n-      -1,    -1,  1492,    -1,    -1,  1495,    -1,  1497,   442,    -1,\n-      -1,  1501,    -1,  1503,    -1,    -1,  1506,    -1,    -1,    -1,\n-      -1,    -1,    -1,   167,    -1,    -1,  1082,    -1,  1084,  1085,\n-     701,    -1,    -1,    -1,    -1,    -1,  1526,    -1,    -1,   365,\n-     366,  1531,    -1,    -1,  1864,  1865,  1866,  1867,  1868,  1869,\n-      -1,    -1,  1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,\n-    1880,  1881,    -1,   734,    -1,    -1,    -1,   738,   739,   740,\n-     741,     8,    -1,    -1,    11,    -1,    -1,  1567,    15,    16,\n-      -1,    -1,    19,    20,    21,    -1,    -1,    -1,  2234,   216,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1155,\n-      -1,    -1,  1158,  1159,    -1,    -1,  2414,  2415,    -1,    46,\n-      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n-      -1,   930,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1619,\n-      -1,  1621,     8,  1623,    -1,    11,    -1,    -1,    -1,    15,\n-      16,    78,    -1,  1633,  1634,    -1,    -1,    -1,    -1,    -1,\n-      -1,   295,   961,    -1,   480,   481,  1646,   284,    -1,   968,\n-      -1,   305,   306,   307,    -1,    -1,    -1,    -1,    -1,    -1,\n-      46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n-      -1,  1671,    -1,  1673,    -1,    -1,    -1,  3265,    40,  2009,\n-    2010,    -1,  1001,    -1,    -1,    -1,    -1,    -1,  1688,  1689,\n-      -1,    -1,    78,  1012,    -1,    -1,    -1,    -1,    60,  1699,\n-    1700,  1701,  1702,    -1,  1704,    -1,    -1,    -1,    -1,    -1,\n-    1710,    -1,  1712,    -1,   368,    -1,    -1,    -1,    -1,  1038,\n-      -1,    -1,    -1,  1723,  1724,   172,    -1,    -1,  1728,  1729,\n-      -1,    -1,    -1,  1733,  1734,  1735,  1736,    -1,  1738,  1739,\n-      -1,   188,   104,    -1,    -1,    -1,   193,    -1,    -1,    -1,\n-      -1,   405,    -1,    -1,  2410,   141,    -1,    37,  1758,  2234,\n-      -1,   942,    42,  1763,  1764,  1765,  1766,  1767,    -1,   216,\n-     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1344,    -1,\n-      -1,  1781,    -1,   437,   231,    -1,   172,    -1,    -1,  1355,\n-      -1,  1357,  2610,  2123,   448,    -1,  1115,  1116,    -1,  1118,\n-      -1,  1367,   188,    -1,    -1,    -1,    -1,   193,   462,   171,\n-      -1,   534,    -1,    -1,    -1,    -1,    -1,  2635,  1384,    99,\n-     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   486,    -1,   196,    -1,    -1,   284,    -1,  2657,\n-      -1,   564,   565,    -1,    -1,   231,   500,  1413,  1414,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,  2518,    -1,  1864,  1865,  1866,  1867,  1868,  1869,\n-      -1,    -1,  1872,  1873,  1874,  1875,  1876,  1877,  1878,  1879,\n-    1880,  1881,    -1,   245,    -1,    -1,    -1,    -1,   168,    -1,\n-      -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,    -1,  1902,   265,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  1914,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   203,  1924,    -1,    -1,    -1,    -1,    -1,\n-    1930,  2749,  2588,   380,   296,  2410,  1936,    -1,    -1,   219,\n-      -1,  1941,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   229,\n-      -1,    -1,    -1,   676,    -1,    -1,    -1,  2613,    -1,  1140,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  1153,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    1980,   261,    -1,    -1,  1984,   347,    -1,    -1,  1988,    -1,\n-      -1,    -1,    -1,  1174,   380,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   282,    -1,    -1,    -1,    -1,    -1,   370,  2009,\n-    2010,  2667,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   305,  2026,   389,    -1,    -1,\n-      -1,    -1,   312,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-     487,   488,   489,  2518,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2059,\n-      -1,    -1,    -1,    -1,    -1,  2883,    -1,    -1,    -1,    -1,\n-      -1,    -1,   352,  2073,    -1,    -1,  2076,    -1,    -1,    -1,\n-    2080,    -1,    -1,    -1,  2414,  2415,    -1,    -1,  1407,   369,\n-      -1,  1657,  1658,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,  2588,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2120,  2777,    -1,  2123,    -1,    -1,  2126,    -1,    -1,    -1,\n-    1311,  1312,    -1,    -1,    -1,    -1,    -1,  1318,  2613,    -1,\n-      -1,    -1,  2142,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-      -1,  1717,    -1,    15,    16,    -1,  2812,   437,    -1,    -1,\n-      -1,  1727,    -1,  1482,  1730,  1484,    -1,    -1,  1487,    -1,\n-      -1,    -1,    -1,  1492,    -1,    -1,  1495,    -1,  1497,    -1,\n-      -1,    -1,  1501,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n-      -1,    53,  2667,    -1,    -1,    -1,  1515,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2205,    -1,    -1,    -1,     0,\n-      -1,    -1,    -1,  2213,    -1,    -1,    78,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2224,  2225,  2226,  2227,  2884,    -1,\n-      -1,    -1,   955,    -1,    -1,    -1,    -1,    -1,  2238,    -1,\n-    2240,    -1,    -1,  2243,    -1,  1811,  1812,    -1,  2248,    -1,\n-      -1,  1570,    -1,    -1,    -1,   978,  3074,    -1,    -1,    -1,\n-    2260,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    1836,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2278,   141,\n-    2610,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2292,  2293,    -1,  2295,    -1,    -1,    -1,  1480,\n-      -1,    -1,  2777,    -1,    -1,  2635,    -1,    98,    -1,    -1,\n-     172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1042,\n-      -1,    -1,    -1,    -1,  1643,  2325,   188,    -1,    -1,    -1,\n-      -1,   193,     8,    -1,    -1,    11,    -1,  2812,    -1,    15,\n-      16,    -1,    -1,    -1,  2344,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   143,  2353,  2354,  2355,    -1,    -1,    -1,    -1,\n-      -1,  3017,    -1,  2363,    -1,  2365,   157,  2367,    -1,   231,\n-      46,   162,  2372,    -1,    -1,    -1,   167,    53,  1944,    -1,\n-    1103,  1104,    -1,    -1,    -1,   176,  2386,    -1,    -1,   180,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,  2884,\n-      -1,    -1,    -1,    -1,  2414,  2415,    -1,    -1,    -1,  2749,\n-      -1,   212,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    1621,   232,  1623,    -1,    -1,  2445,     8,    -1,  2448,    11,\n-      -1,  2451,  1633,    15,    16,  1774,    -1,    19,    20,    21,\n-      -1,    -1,    -1,    -1,  1783,   141,    -1,    -1,  2468,    -1,\n-      -1,    -1,  2472,    -1,    36,    -1,  2476,  2477,  2478,    -1,\n-      -1,    -1,  2482,  2483,  2484,    -1,  2486,    -1,   279,    -1,\n-    1671,   282,    -1,    -1,    -1,    -1,   172,   288,    -1,  2065,\n-      -1,    -1,    -1,    -1,    -1,  2505,    -1,  2507,    -1,    -1,\n-      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,   380,    -1,\n-    2520,  2521,  2522,  2523,  2524,  2525,  2526,  2527,  2528,  2529,\n-    2096,  2097,    -1,    -1,    -1,   326,    -1,    -1,    -1,    -1,\n-      -1,    -1,  3017,    -1,    -1,    -1,    -1,    -1,  2548,    -1,\n-      -1,    -1,    -1,  2883,  2554,   231,    -1,    -1,   349,    -1,\n-      -1,    -1,    -1,     0,  2564,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1758,    -1,    -1,\n-    2580,    -1,  1763,  1764,  1765,  1766,  1767,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2599,\n-      -1,    -1,    -1,    -1,    -1,  1924,    -1,    -1,   284,  3265,\n-    2610,  1930,     8,    -1,   405,    11,  2616,    -1,    -1,    15,\n-      16,    -1,   484,  2623,  2624,  2625,  2626,    -1,    -1,   491,\n-     492,   493,   494,   495,   496,  2635,    -1,    -1,  2638,    -1,\n-      -1,   432,  2642,    -1,  2644,     8,    -1,    -1,    11,    -1,\n-      46,   442,    15,    16,   216,    -1,  2656,    53,    26,    -1,\n-      -1,    98,    -1,    -1,    32,    -1,    -1,    -1,   459,    -1,\n-     461,   462,    40,    -1,    -1,    -1,    -1,  1400,  1401,    -1,\n-    1403,    -1,    78,    46,    -1,  2685,    -1,  2687,  2254,    -1,\n-      53,    -1,    60,    -1,    -1,  2014,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   380,    -1,   143,   498,  2708,    -1,\n-     501,   502,   503,  2032,  2714,    78,    -1,    -1,    -1,    -1,\n-     157,    -1,   284,    -1,    -1,   162,    -1,    -1,  2728,  2048,\n-     167,    -1,    -1,  1914,  2734,    -1,   104,    -1,    -1,   176,\n-    2059,    -1,    -1,   180,  3074,   141,    -1,  2747,  2748,  2749,\n-      -1,    -1,  1475,    -1,    -1,  2755,  2075,  2076,    -1,  2078,\n-      -1,    -1,    -1,    -1,    -1,   133,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2772,    -1,    -1,   212,   172,    -1,   141,    -1,\n-    1503,    -1,    -1,  1506,    -1,    -1,    -1,    -1,    -1,    -1,\n-    3265,    -1,   188,    -1,    -1,   232,    -1,   193,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,   172,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,   188,    -1,    -1,   196,    -1,\n-     193,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n-      -1,    -1,   279,    -1,    -1,   282,    -1,    -1,  2848,    -1,\n-      -1,   288,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2860,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n-      -1,    -1,    -1,    -1,  2874,    -1,    -1,   245,    -1,    -1,\n-      -1,    -1,    -1,  2883,    -1,   253,    -1,    -1,   284,   326,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   265,    -1,    -1,\n-      -1,    -1,    -1,  2222,    -1,    -1,    -1,    -1,    -1,  2909,\n-      -1,    -1,   349,    -1,    -1,  2915,    -1,    -1,   286,    -1,\n-      -1,   284,    -1,  2923,    -1,   487,   488,   489,   296,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2949,\n-    1673,    -1,  2518,    -1,    -1,    -1,    -1,    -1,    -1,  2959,\n-      -1,    -1,    -1,    -1,    -1,    -1,  1689,  2967,   405,    -1,\n-      -1,    -1,  2972,   341,    -1,    -1,  1699,   345,  1701,   347,\n-      -1,  1704,    -1,    -1,   380,    -1,    -1,  1710,    -1,  1712,\n-      -1,    -1,    -1,    -1,    -1,   432,    -1,    -1,  2998,    -1,\n-      -1,  1724,   370,    -1,    -1,   442,  1729,   375,    -1,    -1,\n-    1733,  1734,  1735,  1736,    -1,  1738,  1739,   380,  3018,  3019,\n-      -1,   389,   459,    -1,   461,   462,    -1,    -1,    -1,    -1,\n-      -1,  3031,  2213,  3033,    -1,    -1,    -1,  3037,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2225,  2226,  2227,   652,   653,    -1,\n-      -1,  3051,    -1,    -1,  3054,    -1,    -1,    -1,    -1,  2240,\n-      -1,   498,  2243,    -1,   501,   502,   503,  2248,    -1,    -1,\n-    2389,    -1,    -1,    -1,  3074,    -1,    -1,   445,  3078,  3079,\n-      -1,    -1,  3082,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,   494,   495,\n-     496,  2420,    -1,    -1,    -1,  3105,    -1,    -1,    -1,    -1,\n-      -1,  3111,   717,   718,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   484,    -1,    -1,    -1,    -1,  2445,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3141,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2474,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2353,  2354,  2355,    -1,    -1,    -1,  3178,  1902,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  3196,    -1,    -1,    -1,\n-    2766,    -1,    -1,    -1,    -1,  2771,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1936,    -1,    -1,    -1,    -1,  1941,    -1,\n-      -1,    -1,    -1,    -1,  3224,    -1,    -1,    -1,     0,    -1,\n-    2549,    -1,    -1,    -1,    -1,    -1,    -1,  3237,  3238,  3239,\n-    3240,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3248,    -1,\n-      22,    -1,    -1,  2819,  2820,    -1,  2575,  1980,    -1,  2578,\n-      32,    -1,    34,    35,    -1,  1988,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,    -1,\n-      52,  3281,    -1,    -1,    -1,    -1,    -1,  2468,  3288,    61,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    73,     8,    -1,    -1,    11,    -1,    -1,  3308,    15,\n-      16,    -1,    84,    -1,    -1,    -1,  2635,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3323,    96,    -1,    98,    -1,    -1,    -1,\n-     935,    -1,    -1,    -1,    -1,    -1,   941,   109,    -1,   944,\n-      46,    -1,   947,   948,   949,   950,    -1,    53,    -1,    -1,\n-    2073,   123,   124,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   133,    -1,    -1,    -1,    -1,    -1,   139,  2687,    -1,\n-      -1,    -1,    78,  2554,    -1,   147,    -1,   149,   150,    -1,\n-      -1,    -1,    -1,   988,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   163,    -1,    -1,    -1,   167,    -1,  2120,    -1,    -1,\n-    1005,    -1,    -1,  2126,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,    -1,  1022,    15,    16,\n-     192,    -1,    19,    20,    21,    -1,    -1,    -1,  1033,  1034,\n-    1035,    -1,  1037,  1038,    -1,   141,   208,    -1,    -1,    -1,\n-    3006,  3007,  2623,  2624,  2625,  2626,    -1,    -1,    -1,    -1,\n-      -1,  3017,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-    1065,    -1,   234,    15,    16,    -1,   172,    19,    20,    21,\n+       7,   501,    70,   652,     0,   711,   627,     0,     0,   561,\n+       0,     0,   697,  1171,    21,    45,   947,  1182,     0,   799,\n+       0,   723,  1530,     0,  1105,   988,  1169,   563,    37,   721,\n+       0,   675,   561,   927,   730,  1144,    18,   805,  1460,  1602,\n+     927,    74,   829,    18,  2101,    74,   833,  1350,  1644,  2156,\n+    1149,  1509,  1146,  1217,    21,  1138,  1755,   570,  1355,  2070,\n+     569,  2095,   938,  2074,   570,    72,    73,   938,   564,  2152,\n+     938,  1427,  1555,  1556,   711,   938,   713,  2558,   715,     0,\n+    1174,   623,  2200,  2201,  2202,  2036,   628,  2560,  1070,  1401,\n+       0,    44,  2528,     0,  2528,  1077,   105,     0,     0,     0,\n+       0,     0,  2573,     0,     0,    72,    73,     0,  1039,  2090,\n+       0,     0,     0,  2402,     0,     0,     7,     0,     0,     0,\n+       0,     0,  2215,  1609,  2580,     9,   593,     0,     5,     5,\n+      21,  1768,    55,   633,     9,    13,    14,    24,     5,   762,\n+     763,     5,     5,   692,     5,     5,     9,     0,     5,    13,\n+      14,  2234,    13,    14,     5,    36,     0,  2482,     9,  1662,\n+      78,  2486,  1664,     5,  2860,   692,   789,     5,   668,     5,\n+       5,    63,     5,     5,     5,    13,    14,    13,    14,     5,\n+    2876,    72,    73,    13,    14,     5,     7,    13,    14,  1765,\n+       5,     5,     5,   837,    11,     5,  1083,   687,     5,    16,\n+      21,     5,    72,    73,  2228,  2224,  2873,  1893,   120,   168,\n+      26,    59,  1568,   167,    95,   135,    63,   115,     4,  2302,\n+    2303,  1184,  2305,     9,   118,  2375,  1926,  1927,     3,    21,\n+    1193,    11,     3,     4,     5,   280,    16,  1937,     9,   169,\n+       0,  1941,    11,   185,    72,    98,    15,    16,   239,    37,\n+     118,    72,    73,  2766,    98,   105,    45,     4,    18,    34,\n+      35,    21,     9,  1031,    45,   282,    46,    63,    63,  3030,\n+     799,  1158,  2720,   288,  1161,  1162,    36,    46,   288,    88,\n+      72,    73,   239,   239,  1343,    45,    11,  2837,    11,   283,\n+      15,    16,   936,   985,   268,   356,   115,   221,    78,   161,\n+      23,    24,    72,   168,   176,  3181,   105,   377,   113,    78,\n+     240,   368,    72,    73,    74,   221,   125,   133,   939,   167,\n+    1919,  1920,  1921,   271,  2496,   118,    30,  2445,   304,  2444,\n+     167,   304,  2447,   187,    38,    95,   164,    13,    14,   207,\n+     133,   265,   113,   113,   187,    30,  2357,    80,    30,  3255,\n+     128,  1707,    11,  1709,  3212,  3051,    38,    11,    91,   265,\n+    2059,    15,    16,    64,   116,    80,  2700,   143,   159,  2703,\n+      12,    72,   104,    40,   157,    17,    91,  1157,   113,    40,\n+     168,   357,   144,  1006,  1007,   108,  2822,    29,  2495,  2870,\n+      30,   166,    46,   168,  1038,  2868,  1088,  1478,   940,  1022,\n+      41,    43,    44,   333,   361,   361,  2879,    73,   395,  2492,\n+     952,  2494,   106,  2470,   927,   203,    26,    30,  2590,    78,\n+    1863,   930,    32,   329,    78,    38,   106,  3303,  1509,   282,\n+     500,   219,   194,  3339,   382,   300,   212,   189,   282,   500,\n+     370,   229,   213,   128,  3302,   436,   464,   504,  2399,   232,\n+     185,  1894,   314,   272,   378,   500,   348,   305,   306,   307,\n+     989,   103,   416,  1522,   235,   439,   265,   272,   486,   456,\n+     286,   159,   378,   264,   987,   405,  2989,   106,  3028,   436,\n+     436,   122,  3149,   500,  1133,  1134,   162,  1945,   128,   504,\n+     299,   319,   346,  1137,   504,  3008,   349,   267,  2648,   277,\n+     343,   348,   272,    11,   171,   349,   500,    15,    16,   500,\n+     171,   442,   288,   245,  1826,   439,   381,  2632,  3279,   495,\n+     368,   253,   495,   133,   454,   318,  2609,  2975,  2036,   345,\n+     442,   347,   267,   439,   235,   489,  1221,   225,   458,    63,\n+     570,   500,   208,   500,   500,   439,   444,  3243,   502,   319,\n+    2569,    37,   348,   348,   561,   405,   489,   405,   500,   375,\n+     392,   393,  2586,   570,   352,   335,  2900,   500,  3039,   500,\n+     442,   439,  1085,  1086,   451,  3242,  1076,   500,   405,   416,\n+     498,   369,   328,  1692,   502,  1749,  1135,   569,   464,   437,\n+    2771,   621,  2100,  2076,  3030,   570,  3030,   464,  2779,  2236,\n+     448,   410,   106,   610,  2107,   433,  2108,  2093,  1135,   462,\n+     486,   357,   504,   402,   621,   499,   491,   492,   462,   486,\n+    1110,   402,   500,   500,   500,  1783,  1328,  2313,  1157,   697,\n+    2737,   664,  1099,   500,   515,   664,   500,   500,   498,   500,\n+     500,  1604,   502,   500,   508,   652,   653,  2936,   501,   500,\n+     503,  2744,   500,  2229,   621,  2980,   432,   501,   500,   503,\n+    2985,   670,   500,   433,   500,   500,   508,   500,   675,   500,\n+     500,  2371,   442,     0,   500,  3148,   286,   452,   687,   496,\n+     500,   385,   168,   416,  3155,   500,   500,   500,   684,  1854,\n+     500,   684,   684,   500,   684,   684,   500,   239,   673,  1343,\n+    3156,   416,   684,   385,   684,   491,   492,   684,   504,   504,\n+     717,   718,   719,  1409,   684,   462,   496,   203,   605,   610,\n+     491,   492,   442,   676,   493,   494,   495,   496,  1351,  1352,\n+     621,   341,  3150,   219,   500,   345,  2854,  2718,  2962,   486,\n+    2964,   265,   116,   229,   491,   492,    26,   128,  2060,   503,\n+      33,   621,    32,   251,   252,   515,     5,   157,  3239,  2358,\n+    2359,  2360,  2361,   684,   258,   375,   145,  1319,   493,   494,\n+     495,   496,   385,  2724,   684,  2858,    59,   684,  3251,   452,\n+     500,   684,   684,   684,   684,   684,  1950,   684,   684,   610,\n+    1319,   684,   799,   504,   684,   684,   684,  1349,   684,   684,\n+     621,   684,   684,   684,   684,   684,  2162,  2163,  2164,   569,\n+     570,   684,   173,  1365,  3295,   189,   195,   311,   610,   361,\n+    1349,  1350,  1466,  3241,   348,  1906,  3244,     5,  1791,   621,\n+     837,  1480,   232,   173,  1721,   445,  1365,   491,   492,   493,\n+     494,   495,   496,  3279,  1731,  3279,   343,  1734,  1497,  3343,\n+     610,   375,  3076,   133,    80,   267,   500,   239,    11,  1551,\n+     272,   621,  1398,  1399,  1945,    91,   352,   365,   366,  3205,\n+    3206,  1407,   106,   404,   235,   464,     5,  1521,  1522,   279,\n+     603,   197,   605,   369,  2991,  3379,   267,  1531,    80,  3362,\n+     106,  2399,   534,    46,   436,   235,   277,   486,  1411,    91,\n+    3109,  1410,  3111,   128,   664,  1411,     3,  1403,  1552,  1990,\n+     441,   500,   635,  2335,  1606,   327,  1608,   418,   167,  3337,\n+     927,  3257,   115,   565,   684,    78,   186,  2410,   935,   936,\n+     155,  1473,  1914,   656,   941,  2291,   462,   944,   945,  2973,\n+     947,   948,   949,   950,  1820,  1821,  1840,   959,   930,  1820,\n+    1821,  1822,  1820,  1840,   961,   495,  1819,   173,   500,  1459,\n+     486,   968,   502,   239,   465,   977,  2263,   495,   980,   464,\n+     421,   347,  2269,    53,   502,  2272,  3185,   106,   239,   361,\n+     987,   988,   989,   491,   492,   493,   494,   495,   496,    30,\n+      26,   486,  2691,   246,   961,  2078,    32,  2080,  1005,   375,\n+     361,   968,   409,   405,   411,   500,   286,  1559,   201,  1039,\n+     489,  1717,   964,   454,  1801,    26,  1023,  3124,   970,   235,\n+    2528,    32,  2180,   502,   409,   500,   411,  1034,  1035,  1036,\n+    1559,  1038,  1039,   769,   676,  1571,  1823,   500,   197,  2203,\n+    1827,     4,    83,  1830,   173,   333,     9,   272,   409,  2130,\n+     411,    92,   277,  1690,   436,   791,   305,   306,   307,  1066,\n+    1845,  1746,  1747,  1748,  1849,   345,   333,  1852,   197,   409,\n+     961,   411,   265,   114,   267,   436,  1772,   968,  1085,  1086,\n+    1717,  3199,   370,  1116,  1117,   361,  1119,  1116,  1117,   825,\n+    1119,   961,   172,   143,  2188,   375,   436,   133,   968,  1736,\n+     361,  1110,   501,   370,  1741,   504,   235,   157,   188,     4,\n+     128,  1118,   162,   193,     9,  1122,  1123,   405,   500,   368,\n+    2423,   501,   133,    26,   504,  1132,  1133,  1134,     4,    32,\n+    1137,   157,   364,     9,     4,  2066,   162,   155,   405,     9,\n+     961,   498,   500,   500,   185,   361,  2245,   968,   157,  1701,\n+    1157,   231,  2251,   162,  1798,   162,   405,   198,   287,   498,\n+     436,   500,   212,   502,  1173,   445,   454,  2523,  2626,   961,\n+     930,  2527,  1701,  2529,   498,   436,   968,  1184,   502,   500,\n+     498,   498,   232,    26,   502,   502,  1193,   454,   437,    32,\n+     969,  1727,   500,   409,   973,   411,  1732,     6,   423,   448,\n+       9,   961,   361,   173,   927,   500,   232,    16,   968,   434,\n+    1217,   370,   167,   462,   501,   938,  2724,   504,   654,   655,\n+     436,   657,    31,   232,   500,   500,    35,   197,   500,   279,\n+     133,   167,   361,  1465,   500,  1467,  1468,   486,   288,   500,\n+     486,  1001,   501,    69,    70,   504,   405,  3354,   500,   267,\n+     286,   500,  1012,   279,   272,   462,   500,   464,  1902,   277,\n+    1812,    13,    14,   501,   987,   235,   504,   409,   501,   411,\n+     279,   504,   183,   184,  1010,   286,    13,    14,   501,  1039,\n+     409,   504,   411,  1812,  3341,  3342,  2492,   493,  2494,  1025,\n+     133,    26,  2373,  3304,   483,   454,  2377,    32,   427,   501,\n+     380,   500,   504,  1855,   433,   341,   409,   436,   411,   345,\n+     501,  3322,  1319,   504,   218,  1867,   501,   287,   502,   504,\n+    2623,  3378,  1318,  1046,   166,  1318,  1855,  1840,  1318,  1318,\n+     341,  2162,  1055,  2164,   345,   689,  1343,   691,  1867,   375,\n+     251,   252,  1349,  1350,   501,  1897,   483,   504,   282,  1072,\n+     391,  2509,  1904,   394,    13,    14,  1116,  1117,  1365,  1119,\n+    1083,  3372,  1085,  1086,   375,  2508,  3377,   502,  1897,   305,\n+     306,   307,  2159,   504,  2161,  1904,  2679,   501,   501,   500,\n+    2024,   504,   432,   286,  2493,   501,  2071,   501,   504,   501,\n+     504,   361,  1944,   561,  1401,  1947,    13,    14,   133,  2293,\n+    1952,    13,    14,   501,  1411,   423,   504,  2550,  2507,   445,\n+    2509,   169,   167,    96,   501,  1944,   434,   504,  1947,   501,\n+    1427,   287,   504,  1952,   501,    59,  1433,   504,  1410,   406,\n+     501,   500,   368,   504,   445,  1948,  1411,   501,   341,   409,\n+     504,   411,   345,   286,   501,  1452,  1453,   504,   498,   483,\n+    1457,   501,   502,  1460,   365,   366,   218,   427,  1465,  1466,\n+    1467,  1468,  1104,   433,   501,    40,   436,   504,   148,   405,\n+     341,  2402,   375,  1480,  1481,   148,    40,   148,  1485,   148,\n+    1487,   501,   240,  1490,   167,   500,  2135,   267,  1495,   501,\n+    1497,  1498,   504,  1500,    13,    14,    60,  1504,   341,  2267,\n+    2268,   437,   345,   501,   501,   501,   504,   504,   504,   167,\n+     501,   267,   448,   504,  1521,  1522,    13,    14,  1485,  1526,\n+    1487,  1528,  3030,  1490,  1531,  2227,  1518,   501,  1495,    40,\n+     504,  1498,   375,  1500,    13,    14,  1518,  1504,  1518,    87,\n+     104,  1518,   445,   501,   454,  1552,   504,  1554,  1518,  3112,\n+     148,   286,  1559,  1560,  1561,  1562,  1563,  1564,  1565,  1566,\n+    1567,  1568,    13,    14,   500,  1572,  1573,   466,   501,  1460,\n+    1577,   504,   451,   501,  1581,   333,   504,  1584,  1585,  1586,\n+    1587,  1588,  1589,  1590,  1591,  1592,   501,   500,  1595,   504,\n+    1313,  2894,    13,    14,  1485,  1602,  1487,  1604,   315,  1490,\n+    1607,   148,   445,   500,  1495,    39,   341,  1498,   500,  1500,\n+     345,   561,   370,  1504,  1647,  1485,   500,  1487,  1647,   500,\n+    1490,  1628,   305,   306,   307,  1495,   500,  2785,  1498,  2738,\n+    1500,   799,   196,   148,  1504,    13,    14,  1518,   147,  1460,\n+     375,  2528,   502,  1650,   148,  3067,   148,   405,    13,    14,\n+    1410,  1626,    13,    14,  1661,  1662,    13,    14,   167,    13,\n+      14,    13,    14,   282,  1485,   343,  1487,   500,  1460,  1490,\n+      13,    14,    13,    14,  1495,    13,    14,  1498,   416,  1500,\n+     500,   245,   500,  1504,   501,   368,    13,    14,   407,   253,\n+    2855,   214,  2244,  1485,  1701,  1487,   454,   173,  1490,   500,\n+    1707,   265,  1709,  1495,    13,    14,  1498,  1430,  1500,   219,\n+     445,  3307,  1504,  3309,   291,  2244,    13,    14,    13,    14,\n+     219,   197,   405,    13,    14,  1485,   500,  1487,   219,  2692,\n+    1490,   500,   296,    13,    14,  1495,   356,   357,  1498,   289,\n+    1500,   424,  1749,   230,  1504,  1752,  1753,    40,  1755,   356,\n+     357,   500,  2288,     5,   437,   255,   256,     5,  1518,   235,\n+     365,   366,  1404,     5,  1406,   448,   500,  3363,   500,  3125,\n+     500,  3279,  2464,   356,   357,   356,   357,   447,   448,   462,\n+    2293,     5,    40,   347,  1791,  1085,  1086,   500,   500,     5,\n+    3212,  1798,   500,     5,   144,     9,   305,   306,   307,     3,\n+     500,   463,    60,   486,   293,  1812,   370,   504,   102,   504,\n+     501,   287,    40,   214,  1574,  2602,   375,   500,   162,  1826,\n+     279,   989,   162,   277,   147,   389,    59,   230,   500,   416,\n+    3252,    91,   500,  1840,   416,  2484,    59,   504,    59,   258,\n+     416,   462,   416,   416,   167,   510,   104,   148,  1855,   799,\n+     148,    98,  1859,  1860,   267,  1862,   267,   500,  2543,   368,\n+    1867,  1868,  1869,  1870,  1871,  1872,  1873,  2563,    40,  1876,\n+    1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,   267,\n+    3302,  2583,   267,     3,  1891,  1892,   500,  1647,  1895,  2776,\n+    1897,  1614,   500,  3036,  2423,  1902,   405,  1904,     9,   143,\n+      39,   414,   414,   498,   498,   502,  1787,   500,   416,   416,\n+     416,   143,   501,   157,   167,  1083,   501,  1924,   162,   459,\n+     416,  1928,  3278,  1930,    37,   157,   504,  1934,   437,    42,\n+     162,   501,   501,   409,   501,   411,   501,  1944,   196,   448,\n+    1947,  1948,   219,  1950,   501,  1952,   501,   219,   274,   274,\n+     504,   500,    11,   462,  1961,   500,   343,   433,   499,   510,\n+     436,  1928,   504,   458,   414,   504,  2929,  1934,   212,   500,\n+     272,   509,   500,   416,   176,   158,  2528,   486,  2909,   167,\n+     212,  3146,   305,   306,   307,  1992,    99,   245,   232,  1157,\n+    1997,   500,   212,  2000,  2024,   253,  2890,   442,   501,  2528,\n+     232,  2788,  2789,   504,   258,   378,   500,   265,   221,   283,\n+    3091,   504,  2019,  2020,   504,   304,   304,  2024,  1778,   504,\n+     176,   214,   221,   501,   267,   500,   221,  1787,   324,   288,\n+     280,  2038,   167,   500,  2041,   279,  2043,  1928,   296,   989,\n+     454,   148,  2822,  1934,   288,   368,  2598,   279,   500,   148,\n+     148,  1693,  2059,  2060,   462,   168,   288,   148,  1928,  2066,\n+      40,  1703,  2069,  1705,  1934,   282,  1708,   267,   501,  2598,\n+     501,   498,  1714,   483,  1716,   501,   483,   501,   501,  2086,\n+      40,   501,   405,    59,   282,   167,  1728,    11,    40,   347,\n+     203,  1733,  2099,  2085,  2623,  1737,  1738,  1739,  1740,   162,\n+    1742,  1743,  2069,  2085,   501,  2085,   219,  1928,  2085,  2116,\n+    2117,   501,   370,  1934,   437,  2085,   229,  1840,  2654,  2086,\n+     501,  1844,  3280,   500,   500,   448,  2133,   501,  2135,   176,\n+     500,   389,   162,   501,   509,   499,  1928,  2144,   504,   462,\n+     502,   501,  1934,  3030,   483,   501,   501,   167,   261,   500,\n+    2679,  1319,   416,   500,   500,  2162,  2163,  2164,   500,   151,\n+     459,    59,    40,   486,   485,   489,   283,    72,  1928,   282,\n+     504,   283,   439,    78,  1934,   504,   238,   500,  2069,    59,\n+      59,  1349,  1350,   258,   267,   416,    91,   500,   432,   148,\n+     197,   148,   305,    55,   148,  2086,  2203,  1365,   416,   312,\n+     432,   416,  2232,   274,  2085,   167,   416,  1157,   113,   416,\n+     115,   107,   108,   274,   501,   500,   499,   167,    40,   343,\n+     501,  2757,   504,   280,   282,  1948,  2222,   462,    40,  2222,\n+     148,   501,  2222,  2222,   499,  2787,   499,  2244,   100,   352,\n+     272,   167,    59,   501,   501,   500,   180,   162,  2069,  2256,\n+     501,   500,    78,   139,   193,   501,   369,   119,  2787,   167,\n+     501,   501,   501,   500,  2024,  2086,   498,   501,   292,   349,\n+     502,   500,   510,   500,   504,   137,   501,  2069,   283,   141,\n+     148,   176,  2042,   171,  2291,   504,  2293,   183,   184,   427,\n+     501,    40,   501,  2822,  2086,   501,   201,   500,  2058,   504,\n+     501,   163,    40,   500,   166,   501,   500,  3009,    84,  2069,\n+       8,   501,   167,    11,   501,   442,   167,    15,    16,   181,\n+     499,    19,    20,    21,   437,  2085,  2086,   504,  2335,   442,\n+     500,   461,   501,   295,   501,   193,   501,  3268,   504,   501,\n+     501,   501,   448,   305,   306,   307,   282,   489,    59,   501,\n+     501,   247,   248,   249,   250,   251,   252,   501,   501,   255,\n+     256,   462,   267,   199,    40,  2894,   113,   272,  2375,  1319,\n+    2438,   500,  2402,   221,    86,   186,   502,  2890,   272,   272,\n+     502,   502,   416,   502,  2391,   416,   502,   502,  2395,  2396,\n+      40,  1559,  3279,   502,   502,  2402,   489,   502,   502,  1349,\n+    1350,   267,   502,  2433,  2411,   502,   368,  2414,  3093,  2416,\n+     272,   105,   502,   502,   319,  1365,  2423,  2424,   280,   500,\n+    2427,  2428,    40,   502,  3116,  2432,  2433,   462,   502,   502,\n+     335,   501,  2439,  3077,   502,  3079,   502,   502,   502,   301,\n+    3089,  2083,   502,   405,  2335,  2168,   502,  2454,   502,   502,\n+     305,   306,   307,   502,  2484,   282,  2463,   502,   502,   502,\n+     502,   502,   502,   500,     9,   327,   342,   500,   504,   365,\n+     366,  3092,  2232,   500,  3095,   437,   326,  2484,  3030,   504,\n+     501,    59,   501,   193,  2375,   186,   448,   499,   504,     8,\n+    2213,   447,    11,    89,   335,   193,    15,    16,  2221,   501,\n+     462,  3030,   500,    40,   148,   501,   120,   148,    40,  2232,\n+     561,   501,  3214,   368,  2335,   357,  2523,  3223,   216,  3204,\n+    2527,  2528,  2529,   357,   486,    40,   501,    46,   433,   500,\n+     500,     7,     8,  1701,    53,   504,    12,   442,   500,    40,\n+     442,    17,   500,  2335,   301,    21,   272,    23,    24,   500,\n+     405,  3200,    28,    29,    30,   243,   185,    33,   442,    78,\n+      36,    37,   427,   500,    40,    72,  2562,    43,    44,  2562,\n+    2293,   285,  2562,  2562,    72,  2298,  2457,  2300,    78,     9,\n+     501,  2304,   437,  2306,   480,   481,   284,   501,   500,   359,\n+     501,  2598,    59,   448,    91,   129,    72,    73,   489,   265,\n+     282,    40,   427,   500,   500,   927,  2248,   462,   285,  1559,\n+     285,   500,   447,  2620,   501,  2645,  2623,   199,   501,    95,\n+     501,   282,   141,   282,   501,   375,   102,   103,   104,   105,\n+     106,   486,   501,  2640,  2641,   118,   439,   356,  2645,    25,\n+      36,  2648,  2402,  1715,  1812,   500,   684,  2157,  3252,  2523,\n+    2657,  2510,  3115,   172,  3208,  2461,  3353,  2781,  3229,  3332,\n+    3002,   945,  2669,  3281,  3290,   987,  2673,  2674,  3325,   188,\n+    1144,  2678,  2679,  2433,   193,  3053,  2683,  2150,  2559,  2686,\n+    2687,  3181,  2163,  2713,  2691,  2692,  3278,  1855,  2695,  3288,\n+    2502,  2147,  2699,  2527,  3276,  1398,  1349,  2457,  1316,  1867,\n+    2707,  2219,  2890,     8,  2585,  2574,    11,  2588,  2291,  2133,\n+      15,    16,   231,  2553,    19,    20,    21,  3253,  1104,  1686,\n+    1126,  2099,  2355,  1125,  2484,  3263,  2116,  3279,  1650,  1897,\n+    3187,    36,  2699,  1055,     8,  3081,  1904,    11,   960,  1685,\n+      21,    15,    16,  2086,  2751,    19,    20,    21,   799,  1128,\n+    3279,  1701,  2759,  2648,  1940,  2933,   940,  2648,   621,  2335,\n+    2334,  1083,  2382,  1085,  1086,   284,   610,  3023,   960,  3190,\n+     938,  2778,  3191,  3318,   938,  1367,  1944,  1998,  2396,  1947,\n+    2787,   938,  1962,   938,  1952,  2100,  2042,  1481,  2039,   487,\n+     488,   489,  2707,   491,   492,   493,   494,   495,   496,  2559,\n+    2073,    40,  3176,  2446,  2085,  2528,   604,  1411,  2699,  1948,\n+    1626,  2462,  1627,    14,    30,  2822,    95,    -1,    -1,    -1,\n+      -1,    60,    -1,    -1,    -1,  2585,    -1,    -1,  2588,  2699,\n+    2553,  2554,    -1,    -1,    -1,    -1,  1158,    -1,    -1,  1161,\n+    1162,    -1,    -1,    -1,    -1,  2487,  2488,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2862,    -1,    -1,    -1,    -1,\n+      -1,   380,  1812,     8,    -1,   104,    11,    -1,    -1,    -1,\n+      15,    16,    -1,  2515,    19,    20,    21,    -1,  2699,  2909,\n+      -1,    -1,    -1,  2890,    -1,  2645,  2893,  2894,  2530,  2531,\n+    2532,  2533,  2534,  2535,  2536,  2537,  2538,  2539,    -1,    -1,\n+      -1,    -1,  2909,    -1,    -1,  1855,    -1,  2699,    -1,    -1,\n+      -1,   216,    -1,    -1,    -1,    -1,    -1,  1867,    -1,   193,\n+      -1,    -1,  2929,    -1,    -1,    -1,    -1,  2650,    -1,  2936,\n+      -1,    -1,   171,    -1,    -1,    -1,    -1,    -1,   989,  2699,\n+    2947,  2948,   216,    -1,  2951,    -1,    -1,  1897,    -1,    -1,\n+      -1,    -1,    -1,  2713,  1904,    -1,    -1,   196,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,  2976,\n+      -1,    -1,   491,   492,   493,   494,   495,   496,    -1,   284,\n+      -1,  2704,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2871,    -1,    -1,  3000,  1944,    -1,    -1,  1947,    -1,    -1,\n+      -1,    -1,  1952,    -1,    -1,    -1,   245,    -1,    -1,    -1,\n+     284,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3030,    -1,  1347,   265,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1358,    -1,  1360,    -1,\n+     516,    -1,   518,    -1,    -1,    -1,   522,    -1,  1370,   525,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3063,   296,   534,    -1,\n+    3067,    -1,    -1,    -1,    -1,  1387,    -1,    -1,    -1,    -1,\n+    3077,   216,  3079,    -1,  3081,    -1,  2244,    -1,  3085,    -1,\n+    3087,    -1,  3089,    -1,    -1,    -1,    -1,   563,   564,   565,\n+      -1,    -1,  3099,    -1,  1416,  1417,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  3112,  1157,    -1,   347,    -1,\n+      -1,  2871,    -1,    -1,    -1,    -1,  2758,    -1,  3125,    -1,\n+      -1,    -1,    -1,  3130,    -1,    -1,    -1,   603,   604,   605,\n+      -1,   370,    -1,    -1,   610,    -1,   612,   561,    -1,   284,\n+      -1,    -1,    -1,    -1,  2867,   621,   622,   623,    -1,  2909,\n+     389,   627,   628,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    3041,  3042,    -1,    -1,    -1,    -1,    -1,  2890,  1452,  1453,\n+    3177,    -1,    -1,  1457,    -1,    -1,  3067,    -1,   654,   655,\n+    3187,   657,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,  3200,   670,    -1,    -1,    -1,    -1,    -1,\n+     676,     3,    -1,     5,    -1,  3212,    -1,    -1,    -1,    -1,\n+      -1,   687,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,  3230,    -1,   701,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3113,  3114,    -1,    -1,     8,    -1,    -1,    11,\n+    2963,    -1,    -1,    15,    16,  3252,  3067,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,  2423,    -1,    -1,   734,    -1,\n+      -1,  3268,   738,   739,   740,   741,    -1,    -1,  1319,    -1,\n+      -1,  3278,  3279,  3154,    -1,  3067,    -1,    -1,    -1,    -1,\n+      -1,  3041,  3042,    -1,    -1,    -1,    -1,    -1,    -1,  3170,\n+      -1,    -1,    -1,  3174,  2244,  3302,    -1,    -1,  1349,  1350,\n+      -1,    -1,    -1,    -1,    -1,   107,   108,  3030,    -1,    -1,\n+    3317,  3318,    -1,    -1,  1365,    -1,    -1,    -1,    -1,    -1,\n+      -1,  3212,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3343,    -1,    -1,  1661,\n+    1662,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,  3113,  3114,    -1,    -1,    -1,    -1,    -1,\n+    2528,  3252,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3011,\n+      -1,    -1,  3379,    -1,    -1,   799,    -1,    -1,    -1,    -1,\n+      -1,   183,   184,    -1,    -1,    -1,    -1,    -1,    -1,  3031,\n+    3032,  3212,    -1,    -1,  3154,     8,    -1,    -1,    11,  1721,\n+      -1,    -1,    15,    16,    -1,    -1,    -1,    -1,  3050,  1731,\n+    3170,  3302,  1734,  3294,  3174,    -1,    -1,    -1,    -1,    -1,\n+    3212,    -1,    -1,    -1,  3147,    -1,    -1,    -1,    -1,    -1,\n+    2598,  3252,    -1,    46,    -1,    -1,    -1,    -1,    -1,  3320,\n+      53,    -1,    -1,    -1,   216,   247,   248,   249,   250,   251,\n+     252,    -1,    -1,   255,   256,  2623,    -1,    -1,    -1,    -1,\n+    3252,    -1,    -1,   939,   940,    78,   942,    -1,    -1,   945,\n+      -1,    -1,    -1,  2423,    -1,   951,   952,    -1,    -1,   955,\n+      -1,  3302,    -1,    -1,    -1,   961,    -1,    -1,    -1,    40,\n+      -1,    -1,   968,  1815,  1816,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   978,    -1,    37,    -1,    -1,    -1,  1559,    42,\n+    3302,  2679,   284,    -1,    -1,    -1,    -1,   993,  1840,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   141,    -1,\n+      -1,    -1,    -1,    -1,  3294,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,\n-      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n-      -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  1117,    -1,    -1,  2238,  1121,  1122,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   231,    78,  1132,  1133,    -1,\n-      -1,    -1,    -1,   305,   306,   307,    -1,    -1,    -1,    -1,\n-      -1,   313,  2861,    -1,   316,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n-      -1,    -1,    -1,   345,  2755,    -1,  1181,    -1,   284,    -1,\n-    2899,    36,   354,    -1,    -1,  1190,    -1,    -1,    -1,    -1,\n-      -1,    46,    -1,    -1,    -1,    -1,   368,    -1,    53,    -1,\n-      -1,    -1,    -1,   375,    -1,    -1,    -1,   379,    -1,  1214,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,   216,\n-     172,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,   401,\n-      -1,    -1,    -1,   405,    -1,    -1,   188,    -1,  2957,  2958,\n-    2363,   193,    -1,    -1,  2367,    -1,    -1,    -1,    -1,  2372,\n-       8,    -1,   424,    11,    -1,    -1,    -1,    15,    16,    -1,\n-      -1,    19,    20,    21,    -1,   437,    -1,    -1,   440,    -1,\n-      -1,   443,    -1,    -1,   380,    -1,   448,    -1,    -1,   231,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,     8,\n-     462,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,  3265,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3028,\n-    3029,    -1,    -1,    -1,   486,    -1,    -1,   172,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,   500,    -1,\n-      -1,   503,   284,   188,    53,    -1,    -1,    -1,   193,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2472,\n-      -1,    -1,    -1,  2476,  2477,  2478,    -1,    -1,    -1,    78,\n-      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,   484,    -1,\n-      -1,    -1,  2505,    -1,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,    -1,    -1,  2520,  2521,  2522,\n-    2523,  2524,  2525,  2526,  2527,  2528,  2529,    -1,    -1,    -1,\n-      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3142,    -1,  1430,    -1,    -1,   380,   284,\n-      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,  3158,\n-      -1,    -1,    -1,  3162,    -1,    -1,    -1,    -1,    -1,    -1,\n-    3031,    -1,    -1,   172,    -1,    -1,    -1,  1462,   216,  1464,\n-    1465,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,\n-    3051,    -1,  1477,  1478,   193,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1494,\n-     487,   488,   489,  2616,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,  1523,  2642,\n-      -1,    -1,    -1,    -1,    -1,   380,   284,    -1,    -1,    -1,\n-    3111,    -1,   484,    -1,    -1,   487,   488,   489,  3257,   491,\n-     492,   493,   494,   495,   496,  1550,    -1,    -1,    -1,    -1,\n-      -1,  1556,  1557,  1558,  1559,  1560,  1561,  1562,  1563,    -1,\n-    3141,  3280,    -1,  1568,  1569,   284,    -1,    -1,  1573,    -1,\n-      -1,    -1,  1577,    -1,    -1,  1580,  1581,  1582,  1583,  1584,\n-    1585,  1586,  1587,  1588,    -1,    -1,  1591,    -1,    -1,    -1,\n-      -1,    -1,    -1,  1598,    -1,  1600,    -1,    -1,    -1,    -1,\n+      -1,   102,    -1,   104,    -1,   106,  3279,    -1,    -1,   172,\n+    3320,    -1,    -1,   365,   366,   989,    99,  1043,    -1,    -1,\n+      -1,    -1,    -1,   561,    -1,   188,    -1,    -1,  2528,    -1,\n+     193,    -1,    -1,    -1,  1868,  1869,  1870,  1871,  1872,  1873,\n+      -1,  3314,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,\n+    1884,  1885,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1087,    -1,  1089,    -1,    -1,    -1,    -1,   231,  2787,\n+      -1,   113,    -1,    -1,    -1,    -1,  1948,    -1,  1104,  1105,\n+     945,  3273,    -1,    -1,  1110,   168,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,   176,    -1,    15,    16,    -1,  2598,    -1,\n+    1701,    -1,    -1,    -1,  2822,    -1,  1132,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1143,  1144,    -1,\n+     203,   284,    -1,  2623,    -1,   167,    46,    -1,   480,   481,\n+    1156,    -1,    -1,    53,    -1,    -1,   219,    -1,    -1,    -1,\n+      -1,    -1,    -1,    40,    -1,    -1,   229,  1173,    -1,    -1,\n+      -1,  1177,    -1,    -1,    -1,  1181,    -1,    -1,    78,    -1,\n+      -1,    -1,    -1,    60,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,  2894,    -1,   261,  2679,\n+      -1,    -1,    -1,  1157,    -1,  2019,  2020,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   282,\n+      -1,    -1,    -1,  2075,    -1,    -1,    -1,   104,   105,    -1,\n+      12,  1812,    -1,    -1,    -1,    17,   113,   380,    37,    -1,\n+      -1,   141,   305,    42,    -1,    -1,    -1,    29,    -1,   312,\n+      -1,    -1,    -1,    -1,  2106,  2107,    -1,    -1,    -1,    -1,\n+      -1,    43,    44,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   172,   295,  1855,    -1,    -1,    -1,  1123,    -1,\n+      -1,   799,    -1,   305,   306,   307,  1867,  1132,   188,   352,\n+      -1,    -1,    -1,   193,   171,    -1,    -1,    -1,    -1,    -1,\n+      99,    -1,    -1,    -1,  1310,    -1,   369,  2787,  1314,  1315,\n+      -1,    -1,    -1,    -1,    -1,  1321,  1897,    -1,    -1,   196,\n+      -1,   103,    -1,  1904,    -1,    -1,  1332,    -1,    -1,    -1,\n+      -1,   231,  3030,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   484,  2822,    -1,    -1,    -1,   368,    -1,   491,   492,\n+     493,   494,   495,   496,     0,    -1,  1362,    -1,    -1,    -1,\n+      -1,  1367,    -1,  1944,    -1,  1319,  1947,    -1,   245,   168,\n+      -1,  1952,    -1,    -1,   437,    -1,   253,    -1,    -1,   442,\n+      -1,    -1,    -1,   405,   284,    -1,    -1,    -1,   265,    -1,\n+     267,    -1,  1398,  1399,    -1,  1349,  1350,  1403,  1404,    -1,\n+    1406,  1407,    -1,    -1,   203,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1365,  2264,    -1,  2894,   437,    -1,    -1,    -1,   296,\n+     219,    -1,    -1,    -1,    -1,    -1,   448,    -1,    -1,    -1,\n+     229,    -1,    -1,    -1,    -1,   516,    -1,   518,    -1,    -1,\n+     462,   522,    -1,    -1,   525,    -1,  1452,  1453,    -1,    -1,\n+      -1,  1457,    98,    -1,  1460,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   261,    -1,   486,    -1,    -1,  1473,   561,  1475,\n+     347,   989,  1478,    -1,    -1,    -1,    -1,  1483,   500,  1485,\n+     380,  1487,    -1,   282,  1490,    -1,    -1,    -1,    -1,  1495,\n+      -1,    -1,  1498,   370,  1500,    -1,    -1,   143,  1504,    -1,\n+    1506,    -1,    -1,  1509,    -1,    -1,   305,    -1,    -1,    -1,\n+      -1,   157,   389,   312,   391,    -1,   162,   394,    -1,    -1,\n+      -1,   167,    -1,    -1,  1530,    -1,    -1,    -1,    -1,  1535,\n+     176,   612,    -1,    -1,   180,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1624,\n-      -1,    -1,    -1,    -1,    -1,  2748,    -1,    -1,    -1,   484,\n-      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,     3,    -1,    -1,    -1,    -1,     8,    -1,   504,\n-      11,    -1,  1657,  1658,    15,    16,    17,    18,    19,    20,\n-      21,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,\n-      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n-      -1,    -1,    53,    -1,     8,    -1,    -1,    11,    -1,    -1,\n-      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n-      -1,    -1,    36,    -1,    -1,    -1,    40,    -1,    -1,   487,\n-     488,   489,    46,   491,   492,   493,   494,   495,   496,    53,\n-    1745,    -1,    -1,  1748,  1749,    -1,  1751,    -1,    -1,    -1,\n+    3030,    -1,    -1,   352,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1571,   212,    -1,    -1,    -1,\n+     369,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  3279,    -1,    -1,   484,    -1,   232,    -1,    -1,    -1,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1559,    -1,  1452,  1453,    -1,\n+      -1,     0,  1457,  2427,  2428,    -1,    -1,  1623,    -1,  1625,\n+     701,  1627,    -1,   500,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1637,  1638,   279,    -1,    -1,   282,    -1,   437,  1157,\n+      -1,    -1,   288,    -1,  1650,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   734,    -1,    -1,    -1,   738,   739,   740,\n+     741,    -1,    -1,  2244,    -1,    -1,    -1,    37,    -1,  1675,\n+       8,  1677,    42,    11,    -1,    -1,  2528,    15,    16,    -1,\n+     326,    19,    20,    21,    -1,    -1,  1692,  1693,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1703,  1704,  1705,\n+    1706,    -1,  1708,   349,     8,    -1,   799,    11,  1714,    98,\n+    1716,    15,    16,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1727,  1728,    -1,    -1,    -1,  1732,  1733,    -1,    99,\n+      -1,  1737,  1738,  1739,  1740,    -1,  1742,  1743,    -1,    -1,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,  1701,    -1,    53,\n+      -1,    -1,   534,    -1,   143,    -1,  1762,    -1,    -1,   405,\n+      -1,  1767,  1768,  1769,  1770,  1771,    -1,    -1,   157,    -1,\n+      -1,    -1,    -1,   162,    78,    -1,    -1,    -1,   167,  1785,\n+      -1,    -1,   564,   565,    -1,    -1,   432,   176,    -1,    -1,\n+      -1,   180,    -1,    -1,    -1,    -1,   442,    -1,   168,  3279,\n+      -1,  1319,    -1,    -1,    -1,  1650,  2620,    -1,    -1,    -1,\n+      -1,    -1,    -1,   459,    -1,   461,   462,    -1,    -1,    -1,\n+      -1,    -1,    -1,   212,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1349,  1350,   203,    -1,    -1,    -1,   141,    -1,    -1,\n+      -1,    -1,  2423,   232,    -1,    -1,    -1,  1365,    -1,   219,\n+      -1,    -1,   498,    -1,    -1,   501,   502,   503,  1812,   229,\n+      -1,   942,  1868,  1869,  1870,  1871,  1872,  1873,   172,    -1,\n+    1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,\n+      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n+     279,   261,    -1,   282,   676,    -1,   989,    -1,    -1,   288,\n+    1906,  1855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1918,  1867,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1928,    -1,  2776,    -1,    -1,   231,  1934,  2781,\n+      -1,    -1,    -1,    -1,  1940,   305,    -1,   326,    -1,  1945,\n+      -1,    -1,   312,  1897,    -1,  2759,   284,  2528,    -1,    -1,\n+    1904,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,\n+     349,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,    -1,\n+      19,    20,    21,    -1,    -1,    -1,    -1,  2829,  2830,    -1,\n+     284,    -1,   352,    -1,  1990,    -1,    -1,    -1,  1994,    -1,\n+    1944,    -1,  1998,  1947,    -1,    -1,    -1,    46,  1952,   369,\n+      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2019,  2020,    -1,   405,  2598,    -1,    -1,\n+      -1,    -1,    -1,  1868,  1869,  1870,  1871,  1872,  1873,    78,\n+    2036,  1876,  1877,  1878,  1879,  1880,  1881,  1882,  1883,  1884,\n+    1885,  1559,  2623,   432,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   442,    -1,    -1,    -1,    -1,    -1,   107,\n+     108,    -1,  1143,  2069,  1157,    -1,    -1,   437,    -1,    -1,\n+     459,    -1,   461,   462,    -1,  1156,   380,  2083,    -1,  2893,\n+    2086,    -1,    -1,    -1,  2090,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,     8,    -1,    -1,    11,  1177,    -1,  2679,    15,\n+      16,    -1,    -1,    19,    20,    21,    -1,    -1,    -1,   498,\n+      -1,    -1,   501,   502,   503,    -1,    -1,    -1,    -1,    -1,\n+      36,    -1,    -1,   172,  2130,    -1,    -1,  2133,    -1,    -1,\n+    2136,    -1,    -1,    -1,    -1,   183,   184,    -1,    -1,   188,\n+      -1,    -1,    -1,    -1,   193,    -1,  2152,    -1,    -1,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3019,  3020,    -1,\n+      -1,    -1,    -1,   955,  2019,  2020,    -1,    -1,  3030,    -1,\n+     484,    -1,   231,  1701,    -1,    -1,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,   978,    -1,    -1,   247,\n+     248,   249,   250,   251,   252,    -1,  2787,   255,   256,  2215,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2223,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1319,    -1,  2234,  2235,\n+    2236,  2237,    -1,  1314,  1315,   284,    -1,    -1,    -1,    -1,\n+    1321,  2822,  2248,    -1,  2250,    -1,    -1,  2253,    -1,    -1,\n+      -1,    -1,  2258,    -1,    -1,    -1,  1349,  1350,    -1,    -1,\n+      -1,  1043,     8,    -1,  2270,    -1,    -1,    -1,    -1,    15,\n+      16,    -1,  1365,    19,    20,    21,    -1,    -1,    -1,    -1,\n+      -1,    -1,  2288,    -1,    -1,    -1,    -1,   945,  2133,    -1,\n+    2244,    -1,    -1,    -1,  1812,    -1,  2302,  2303,    -1,  2305,\n+     216,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2894,    -1,    -1,    -1,   365,   366,    -1,\n+      -1,    -1,  1104,  1105,    -1,    -1,    -1,    -1,    -1,  2335,\n+      -1,   380,    -1,     8,    -1,    -1,    11,  1855,    -1,    -1,\n+      15,    16,    -1,    -1,    19,    20,    21,    -1,  2354,  1867,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2363,  2364,  2365,\n+      -1,    36,    -1,    -1,    -1,    -1,    -1,  2373,   284,  2375,\n+      -1,  2377,    -1,    -1,    -1,    -1,  2382,    -1,    -1,  1897,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1904,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2399,    -1,    -1,     8,    -1,    -1,    11,\n+      -1,    -1,  1483,    15,    16,    -1,    -1,    19,    20,    21,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    78,   484,    -1,    -1,    -1,    -1,\n-      -1,    -1,   491,   492,   493,   494,   495,   496,   945,    -1,\n-      -1,    -1,  1787,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  2915,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2923,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,\n-      -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2967,    -1,    -1,    -1,    -1,  2972,\n-    1855,  1856,    -1,  1858,    -1,   216,   217,    -1,   172,    -1,\n+      -1,  2427,  2428,    -1,    36,    -1,  1944,  3279,    -1,  1947,\n+      -1,    -1,   480,   481,  1952,   484,    -1,    -1,   487,   488,\n+     489,    -1,   491,   492,   493,   494,   495,   496,    -1,  3030,\n+      -1,    -1,  2458,    -1,    -1,  2461,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1559,    -1,    -1,  2423,\n+      -1,    -1,  2478,    -1,  1132,    -1,  2482,    -1,    -1,    -1,\n+    2486,  2487,  2488,    -1,    -1,    -1,  2492,  2493,  2494,    -1,\n+    2496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2515,\n+      -1,  2517,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2530,  2531,  2532,  2533,  2534,  2535,\n+    2536,  2537,  2538,  2539,    -1,    -1,    -1,    -1,   284,    -1,\n+      -1,   216,    -1,    -1,  1625,    -1,  1627,    -1,    -1,    -1,\n+      -1,    -1,  2558,    -1,    -1,    -1,  1637,    -1,  2564,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2574,    -1,\n+      -1,   487,   488,   489,  2528,   491,   492,   493,   494,   495,\n+     496,    -1,  2427,  2428,  2590,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  1675,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2609,   216,    -1,    -1,    -1,  1701,   284,\n+      -1,    -1,    -1,    -1,  2620,    -1,    -1,    -1,    -1,    -1,\n+    2626,  1403,  1404,    -1,  1406,    -1,    26,  2633,  2634,  2635,\n+    2636,    -1,    32,    -1,    -1,    -1,    -1,    -1,    -1,  2645,\n+      40,    -1,  2648,    -1,  2598,    -1,  2652,    -1,  2654,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     231,    -1,    -1,    -1,   188,  2998,    -1,    -1,    -1,   193,\n-      -1,    -1,  1887,  1888,    -1,    26,  1891,    -1,  1055,    -1,\n-      -1,    32,    -1,    -1,    -1,  3018,  3019,    -1,    -1,    40,\n-      -1,    -1,   216,   217,    -1,    -1,   267,    -1,    -1,   270,\n-      -1,    -1,    -1,    -1,  3037,  1920,    -1,   231,    -1,    60,\n-      -1,  1926,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n-      -1,    -1,  1099,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  1946,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  1956,    -1,   267,    -1,  3078,   270,    -1,    -1,    -1,\n-      -1,    -1,    -1,   104,  1131,    -1,    -1,    -1,    -1,    -1,\n-     284,    -1,    -1,   287,    -1,    -1,     8,  1982,    -1,    11,\n-      -1,    -1,  1987,    15,    16,  1990,    -1,    19,    20,    21,\n-      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,   380,\n-      -1,    53,    -1,  2028,    -1,    -1,  2031,    -1,  2033,    -1,\n+      60,    -1,  2668,    -1,    -1,    -1,    -1,    -1,    -1,  2623,\n+      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1762,    -1,    -1,    -1,    -1,  1767,  1768,  1769,  1770,\n+    1771,  2697,    -1,  2699,    -1,    -1,  1478,    -1,  3279,    -1,\n+      -1,    -1,    -1,    -1,   104,    -1,    -1,  2713,    -1,    -1,\n+      -1,    -1,  2718,    -1,    -1,    -1,    -1,    -1,  2724,  1812,\n+      -1,    -1,    -1,    -1,  1506,  2679,  2244,  1509,    -1,    -1,\n+      -1,    -1,  2738,   133,    -1,    -1,    -1,    -1,  2744,    -1,\n+      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,  2757,  2758,  2759,    -1,    -1,    -1,    -1,    -1,  2765,\n+      -1,    -1,  1855,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  1867,  2620,  2782,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2049,    -1,    78,    -1,    -1,    -1,\n-    1217,     8,    -1,    -1,    11,   196,    -1,  1224,    15,    16,\n-      17,    18,    19,    20,    21,    -1,   380,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3196,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    -1,    -1,    -1,  2089,    -1,    -1,    -1,    -1,    46,\n-      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n-      -1,  2106,  2107,    -1,   245,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   253,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2125,    78,    -1,   484,   265,    -1,   487,   488,   489,  2134,\n-     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n-     172,    -1,    -1,    -1,    -1,   286,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   296,   188,    -1,    -1,    -1,\n-      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n-     494,   495,   496,    -1,   216,   217,    -1,   501,  2193,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n-     341,    -1,    -1,    -1,   345,    -1,   347,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   370,\n-      -1,   188,    -1,    -1,   375,   267,   193,    -1,   270,    -1,\n-      -1,  2246,    -1,    -1,    -1,    -1,    -1,    -1,   389,    -1,\n-      -1,    -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,   216,\n-     217,  1428,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,  1445,    -1,\n-    1447,    -1,  1449,  1450,  1451,    -1,    -1,  1454,    -1,    -1,\n-      -1,  1458,    -1,    -1,  1461,    -1,    -1,    -1,    -1,  1466,\n-      -1,    -1,  1469,    -1,   445,    -1,    -1,    -1,    -1,    -1,\n-     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n-      -1,    -1,    -1,    -1,  1521,    -1,    -1,    -1,  1525,    -1,\n-      -1,  1528,  1529,  1530,    -1,    -1,    -1,  1534,    -1,    -1,\n-      -1,  1538,    -1,    -1,    -1,    -1,  2381,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2389,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  2398,    -1,    -1,  2401,    -1,  2403,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  2411,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2419,  2420,    -1,    -1,    -1,    -1,\n-      -1,  2426,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n-    1597,    -1,    -1,    -1,    -1,    -1,  2441,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2453,    -1,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,  2474,\n-      -1,    -1,    -1,  1640,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1656,\n-      -1,    -1,    -1,    -1,  1661,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  1452,  1453,   196,    -1,    -1,  1457,\n+    2645,    -1,    -1,    -1,  1897,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1904,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,  2669,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2787,    -1,    -1,    -1,  1918,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   245,    -1,    -1,    -1,    -1,\n+      -1,  1944,  2858,   253,  1947,    -1,    -1,    -1,    -1,  1952,\n+      -1,    -1,    -1,    -1,  2870,   265,    -1,    -1,  2822,    -1,\n+      -1,    -1,    -1,    -1,    -1,   487,   488,   489,  2884,   491,\n+     492,   493,   494,   495,   496,    -1,   286,  2893,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1677,   296,    -1,    -1,     8,\n+      -1,    -1,    11,    -1,    -1,  2423,    15,    16,    -1,    -1,\n+      -1,  1693,    -1,  2919,  2759,    -1,    -1,    -1,    -1,  2925,\n+      -1,  1703,    -1,  1705,    -1,    -1,  1708,  2933,    -1,    -1,\n+      -1,    -1,  1714,    -1,  1716,    -1,    -1,    46,    -1,    -1,\n+    2894,   341,  1600,    -1,    53,   345,  1728,   347,    -1,    -1,\n+      -1,  1733,    -1,  2959,    -1,  1737,  1738,  1739,  1740,    -1,\n+    1742,  1743,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,\n+     370,    -1,    -1,    -1,  2980,   375,    -1,    -1,    -1,  2985,\n+      -1,   652,   653,    -1,    -1,    -1,    -1,    -1,    -1,   389,\n+      -1,    -1,  1650,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  3011,    -1,    -1,    -1,    -1,\n+    2528,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,     0,    -1,  3031,  3032,    -1,    -1,    -1,\n+      -1,    -1,   141,    -1,    -1,    -1,    -1,    -1,  3044,    -1,\n+    3046,    -1,    -1,    -1,  3050,   445,   717,   718,  2893,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3064,    -1,\n+      -1,  3067,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3030,    -1,    -1,   188,\n+    2598,  3087,    -1,    -1,   193,  3091,  3092,    -1,    -1,  3095,\n+      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,\n+      -1,    -1,    15,    16,    -1,  2623,    -1,    -1,    -1,  3115,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3123,    -1,    -1,\n+      -1,    98,   231,    -1,  1906,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,\n+      53,    -1,  2223,    -1,    -1,    -1,    -1,  3153,    -1,    -1,\n+      -1,  2244,    -1,    -1,  2235,  2236,  2237,    -1,  1940,    -1,\n+      -1,  2679,    -1,  1945,    -1,    78,   143,    -1,    -1,  2250,\n+      -1,    -1,  2253,    -1,    -1,   284,    -1,  2258,    -1,    -1,\n+     157,    -1,    -1,    -1,  3190,   162,    -1,    -1,    -1,    -1,\n+     167,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   176,\n+      -1,    -1,    -1,   180,    -1,    -1,  3212,    -1,  1990,    -1,\n+    1868,  1869,  1870,  1871,  1872,  1873,  1998,    -1,  1876,  1877,\n+    1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,   141,    -1,\n+      -1,    -1,    -1,  3239,    -1,   212,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3087,    -1,    -1,    -1,  3252,  3253,  3254,  3255,\n+      -1,    -1,    -1,    -1,    -1,   232,    -1,  3263,    -1,   172,\n+      -1,    -1,    -1,    -1,   935,    -1,    -1,  3273,    -1,  2787,\n+     941,   380,    -1,   944,    -1,   188,   947,   948,   949,   950,\n+     193,    -1,  2363,  2364,  2365,    -1,    -1,    -1,    -1,  3295,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3302,    -1,    24,    -1,\n+      -1,  2083,   279,    -1,  2822,   282,    -1,    -1,    -1,    -1,\n+      -1,   288,    -1,    -1,    -1,    -1,    -1,   988,   231,    -1,\n+      -1,    -1,    -1,    -1,    -1,  3279,    -1,    -1,    -1,    -1,\n+    2423,    -1,    -1,  3339,  1005,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3353,  2130,   326,\n+      -1,    -1,  1023,    79,  2136,    -1,    -1,    -1,    -1,    -1,\n+      -1,  2019,  2020,  1034,  1035,  1036,    -1,  1038,  1039,    95,\n+      -1,   284,   349,    -1,    -1,   484,  2894,    -1,    -1,    -1,\n+     106,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1066,    -1,  2478,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  1678,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   142,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   152,    -1,   405,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2528,    -1,    -1,   164,    -1,\n+      -1,    -1,    -1,   169,    -1,    -1,    -1,  1118,    -1,    -1,\n+      -1,  1122,  1123,    -1,    -1,   432,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1133,  1134,    -1,   442,  2248,   380,    -1,    -1,\n+      -1,   197,    -1,    -1,    -1,  2133,    -1,    -1,    -1,    -1,\n+      -1,    -1,   459,  2564,   461,   462,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2598,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3030,  1184,   240,    -1,    -1,    -1,   244,    -1,\n+      -1,   498,  1193,    -1,   501,   502,   503,    -1,    -1,    -1,\n+    2623,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1217,    -1,    -1,    -1,\n+      -1,    -1,  2633,  2634,  2635,  2636,    -1,    -1,    -1,    -1,\n+       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,\n+      -1,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n+     493,   494,   495,   496,   310,    -1,  2679,    -1,    -1,    -1,\n+      -1,  2373,    -1,    -1,    -1,  2377,    -1,    -1,    46,   325,\n+    2382,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n+       8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,    -1,\n+      -1,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n+      78,    -1,   358,    -1,    -1,   361,    -1,    26,    36,    -1,\n+      -1,    -1,    -1,    32,   370,    -1,    -1,   373,    46,    -1,\n+      -1,    40,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   391,    -1,    -1,    -1,    -1,\n+      -1,    60,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   405,\n+      78,    -1,    -1,    -1,  2765,    -1,   412,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2787,   421,    -1,    -1,    -1,    -1,\n+    2482,   427,    -1,    -1,  2486,  2487,  2488,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   104,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,   454,  2822,\n+      -1,    -1,    -1,  2515,    -1,    -1,    -1,    -1,    -1,    -1,\n+     188,    -1,    -1,    -1,   133,   193,    -1,    -1,  2530,  2531,\n+    2532,  2533,  2534,  2535,  2536,  2537,  2538,  2539,    -1,    -1,\n+      -1,  3279,  1433,    -1,    -1,    -1,    -1,    -1,    -1,  2427,\n+    2428,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n+     188,    -1,    -1,    -1,  1465,   193,  1467,  1468,    -1,    -1,\n+      -1,  2894,    -1,    -1,    -1,    -1,    -1,   196,    -1,  1480,\n+    1481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1497,    -1,    -1,    -1,\n+      -1,    -1,    -1,   231,    -1,    -1,   284,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2626,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  1526,   245,  1528,    -1,    -1,\n+      -1,    -1,    -1,    -1,   253,    -1,    -1,    -1,    -1,   267,\n+    2652,    -1,   270,    -1,    -1,    -1,   265,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1554,    -1,    -1,   284,    -1,    -1,  1560,\n+    1561,  1562,  1563,  1564,  1565,  1566,  1567,   286,    -1,    -1,\n+      -1,  1572,  1573,    -1,    -1,    -1,  1577,   296,    -1,    -1,\n+    1581,    -1,    -1,  1584,  1585,  1586,  1587,  1588,  1589,  1590,\n+    1591,  1592,    -1,    -1,  1595,    -1,    -1,    -1,    -1,    -1,\n+      -1,  1602,   380,  1604,    -1,    -1,    -1,  3030,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   341,    -1,    -1,    -1,   345,  1628,   347,    -1,\n+      -1,    -1,  2620,  3044,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  2758,    -1,    -1,     0,\n+      -1,   370,   380,  3064,    -1,    -1,   375,  2645,    -1,    -1,\n+    1661,  1662,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     389,    22,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    32,    -1,    34,    35,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    47,    -1,    -1,    -1,\n+      -1,    52,    -1,    -1,    -1,    -1,   484,    -1,    -1,    -1,\n+      61,    -1,  3123,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,    -1,    73,    -1,    -1,    -1,   445,    -1,    -1,    -1,\n+      -1,    -1,    -1,    84,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3153,    -1,    -1,    96,    -1,    98,  1749,    -1,\n+      -1,  1752,  1753,    -1,  1755,    -1,   484,    -1,   109,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,  2759,   123,   124,    -1,    -1,    -1,   945,    -1,    -1,\n+      -1,    -1,   133,    -1,    -1,    -1,    -1,    -1,   139,    -1,\n+    1791,    -1,    -1,    -1,    -1,    -1,   147,    -1,   149,   150,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   163,  2925,    -1,    -1,   167,    -1,    -1,    -1,\n+      -1,  2933,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n+      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,   192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    36,    -1,  3279,   208,  1859,  1860,\n+      -1,  1862,    -1,    -1,    46,    -1,    -1,    -1,  2980,    -1,\n+      -1,    53,    -1,  2985,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   234,    -1,    -1,    -1,    -1,  1056,    -1,\n+    1891,  1892,    -1,    -1,  1895,    -1,    78,    -1,    -1,  3011,\n+      -1,    -1,    -1,    -1,    -1,  2893,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3031,\n+    3032,    -1,    -1,  1924,    -1,    -1,    -1,    -1,    -1,  1930,\n+      -1,    -1,  1100,    -1,    -1,    -1,    -1,    -1,  3050,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1950,\n+      -1,    -1,    -1,    -1,   305,   306,   307,    -1,    -1,    -1,\n+    1961,    -1,   313,    -1,  1132,   316,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3091,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     172,  1992,    -1,    -1,   345,    -1,  1997,    -1,    -1,  2000,\n+      -1,    -1,    -1,   354,    -1,    -1,   188,    -1,    -1,    -1,\n+      -1,   193,    -1,    -1,    -1,    -1,    -1,   368,    -1,    -1,\n+      -1,    -1,    -1,    -1,   375,    -1,    -1,    -1,   379,    -1,\n+      -1,    -1,    -1,    -1,   216,   217,    -1,  2038,   389,    -1,\n+    2041,    -1,  2043,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n+     401,    -1,  1220,    -1,   405,    -1,    -1,    -1,  2059,  1227,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,   424,    -1,    15,    16,    17,    18,    19,\n+      20,    21,    -1,    -1,    -1,   267,   437,    -1,   270,   440,\n+      -1,    -1,   443,    -1,    -1,    -1,    36,   448,  2099,  3087,\n+      -1,    -1,   284,    -1,    -1,   287,    46,    -1,    -1,    -1,\n+      -1,   462,    -1,    53,    -1,  2116,  2117,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2630,  2631,    -1,    -1,    -1,\n-      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    46,  2647,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n-      -1,    -1,  2657,    -1,    -1,    -1,  2661,  2662,    -1,    -1,\n-      -1,  2666,    -1,    -1,    -1,    -1,  2671,    -1,    -1,  2674,\n-    2675,    -1,    -1,    78,  2679,  2680,    -1,    -1,  2683,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  1853,    -1,    -1,    -1,\n-    2695,    -1,    -1,    -1,  1861,  1862,    -1,  1864,  1865,  1866,\n-    1867,  1868,  1869,    -1,    -1,  1872,  1873,  1874,  1875,  1876,\n-    1877,  1878,  1879,  1880,  1881,  1882,    -1,    -1,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,  2741,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n-      -1,    -1,    -1,  2768,    -1,    -1,    53,   172,    -1,    -1,\n+      -1,    -1,    -1,    -1,  2135,   486,    -1,    -1,    78,    -1,\n+      -1,    -1,    -1,  2144,    -1,    -1,    -1,    -1,    -1,   500,\n+      -1,    -1,   503,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  3273,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,\n+      -1,    15,    16,    -1,    -1,    19,    20,    21,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,  2203,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n-      -1,    78,  1959,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,   188,    -1,\n+      -1,    -1,    -1,   193,    -1,  2256,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  1431,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,\n+    1448,    -1,  1450,    -1,  1452,  1453,  1454,    -1,    -1,  1457,\n+      -1,   231,    -1,  1461,    -1,    -1,  1464,    -1,    -1,    -1,\n+      -1,  1469,   484,    -1,  1472,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,   510,    -1,\n+     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,\n+      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n+      -1,    -1,    -1,    -1,   188,    -1,  1524,    -1,    -1,   193,\n+      -1,  1529,    -1,    -1,  1532,  1533,  1534,    -1,    -1,    -1,\n+    1538,    -1,    -1,    -1,  1542,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2391,    -1,    -1,    -1,  2395,  2396,    -1,   231,    -1,    -1,\n+      -1,  2402,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2411,    -1,    -1,  2414,    -1,  2416,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2424,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,  2432,  2433,  1601,    -1,    -1,   270,    -1,  2439,    -1,\n+     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     284,    -1,    -1,  2454,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  2463,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  1644,    -1,    -1,    -1,\n+      -1,    -1,    -1,  2484,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  1660,    -1,    -1,    -1,    -1,  1665,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  1992,   231,    -1,    -1,  1996,\n-    1997,  1998,  1999,  2000,  2001,  2002,  2003,    -1,    -1,    -1,\n-      -1,    -1,  2009,  2010,    -1,  2012,  2013,  2852,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2024,    -1,    -1,\n-    2027,    -1,   267,    -1,    -1,   270,    -1,    -1,  2035,  2036,\n-    2037,  2038,  2039,  2040,  2041,  2042,  2043,  2044,    -1,   284,\n-      -1,    -1,   287,    -1,    -1,   172,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2899,    -1,    -1,    -1,    -1,    -1,\n-      -1,   188,    -1,    -1,    -1,  2072,   193,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,  2919,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2926,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,\n-     217,    -1,  2937,  2938,    -1,    -1,  2941,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  2123,    -1,  2963,    -1,\n+      -1,    -1,    -1,    -1,  1682,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n-     267,    -1,  2987,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   484,    -1,   380,   487,   488,   489,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   504,    -1,     3,    -1,    -1,    -1,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,\n+      -1,    -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,\n+      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  2198,  2199,  2200,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  3050,    -1,    24,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2640,\n+    2641,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,  2657,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,    -1,  2669,    -1,\n+      -1,    -1,  2673,  2674,    -1,    -1,    -1,  2678,    -1,    -1,\n+      -1,    -1,  2683,    -1,    -1,  2686,  2687,    -1,    -1,  1857,\n+    2691,  2692,    -1,    -1,  2695,    -1,    -1,  1865,  1866,    -1,\n+    1868,  1869,  1870,  1871,  1872,  1873,  2707,    -1,  1876,  1877,\n+    1878,  1879,  1880,  1881,  1882,  1883,  1884,  1885,  1886,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3068,    -1,    -1,    -1,  3072,    -1,    -1,\n-      -1,  3076,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n-      -1,  3086,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,    -1,   380,  3099,    -1,   501,    -1,    -1,    -1,\n-      -1,    -1,    79,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3118,    -1,    -1,    -1,    -1,    95,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   106,\n-      -1,    -1,    -1,  2300,  2301,  2302,    -1,    -1,  2305,  2306,\n-    2307,  2308,  2309,  2310,    -1,    -1,    -1,  2314,  2315,  2316,\n-    2317,  2318,  2319,  2320,  2321,  2322,  2323,    -1,    -1,    -1,\n-    3165,  2328,  2329,    -1,    -1,   142,    -1,    -1,    -1,    -1,\n-    3175,    -1,    -1,    -1,    -1,   152,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3188,    -1,    -1,    -1,   164,    -1,  2356,\n-      -1,    -1,   169,    -1,    -1,  2362,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-    3215,    -1,    -1,  2380,   501,    -1,    -1,    -1,    -1,    -1,\n-     197,    -1,    -1,  2390,    -1,    -1,  2393,    -1,  2395,    -1,\n-      -1,    -1,  2399,  2400,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  2413,  2414,  2415,  2416,\n-      -1,  2418,    -1,    -1,    -1,  2422,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   240,    -1,    -1,     8,   244,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n+       8,    -1,    -1,    11,    -1,   172,    -1,    15,    16,    17,\n+      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n+    2751,   188,    -1,    -1,    -1,    -1,   193,    -1,    36,    -1,\n+      -1,    -1,    40,    -1,    -1,    -1,    -1,    -1,    46,    -1,\n+      -1,    -1,    -1,    -1,    -1,    53,    -1,  2778,    -1,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,    -1,  1964,  1965,    -1,    -1,\n+      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,  3303,  3304,\n-      -1,    -1,    -1,    -1,    46,    -1,    -1,     8,    -1,    -1,\n-      11,    53,  2479,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,  3327,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   310,    -1,    36,    78,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,   325,    -1,\n-      -1,    -1,    53,    -1,     8,    -1,  3361,    11,    -1,    -1,\n-      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n-      -1,   358,    36,    -1,   361,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    46,   370,    -1,     8,   373,    -1,    11,    53,\n-      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n-      -1,    -1,  2579,    -1,   391,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    36,    78,    -1,    -1,    -1,   405,    -1,\n-     172,    -1,    -1,    46,    -1,   412,    -1,    -1,    -1,    -1,\n-      53,    -1,    -1,  2610,   421,    -1,   188,    -1,    -1,    -1,\n-     427,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n-      -1,   172,    -1,    -1,   216,   217,    -1,   454,    -1,    -1,\n-      -1,  2648,    -1,    -1,    -1,  2652,    -1,   188,    -1,   231,\n-      -1,    -1,   193,  2660,    -1,    -1,  2663,    -1,  2665,    -1,\n-      -1,    -1,  2669,    -1,    -1,  2672,  2673,    -1,    -1,  2676,\n-    2677,    -1,    -1,    -1,    -1,   216,   217,  2684,   172,    -1,\n-      -1,    -1,    -1,    -1,    -1,   267,    -1,  2694,   270,    -1,\n-     231,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n-      -1,    -1,   284,    -1,  2711,   287,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,\n-      -1,    -1,   216,   217,    -1,    -1,   267,    -1,    -1,   270,\n-      -1,    -1,    -1,    -1,    -1,   188,    -1,   231,    -1,    -1,\n-     193,    -1,  2749,   284,    -1,    -1,   287,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   267,    -1,    -1,   270,    -1,   231,    -1,\n+     267,    -1,    -1,   270,  2002,    -1,    -1,    -1,  2006,  2007,\n+    2008,  2009,  2010,  2011,  2012,  2013,    -1,   284,    -1,    -1,\n+     287,  2019,  2020,    -1,  2022,  2023,    -1,    -1,    -1,    -1,\n+      -1,  2862,    -1,    -1,    -1,    -1,  2034,    -1,    -1,  2037,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2045,  2046,  2047,\n+    2048,  2049,  2050,  2051,  2052,  2053,  2054,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2909,    -1,\n+     188,    -1,    -1,    -1,  2082,   193,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2929,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2936,    -1,    -1,   216,   217,\n+      -1,    -1,    -1,   380,    -1,    -1,  2947,  2948,    -1,    -1,\n+    2951,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2133,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,  2976,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n+      -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,  3000,\n+      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   380,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,   380,\n+    2208,  2209,  2210,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+      -1,     8,  3063,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n+    3081,    -1,    -1,    -1,  3085,    -1,    -1,    -1,  3089,    36,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3099,    46,\n+      -1,    -1,   380,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n+      -1,  3112,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3130,\n+      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  2310,  2311,  2312,    -1,    -1,  2315,  2316,  2317,\n+    2318,  2319,  2320,    -1,    -1,    -1,  2324,  2325,  2326,  2327,\n+    2328,  2329,  2330,  2331,  2332,  2333,    -1,    -1,    -1,    -1,\n+    2338,  2339,    -1,    -1,    -1,    -1,  3177,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3187,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2366,  3200,\n+      -1,    -1,    -1,    -1,  2372,    -1,   484,    -1,    -1,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,    -1,  2390,   501,    -1,   172,    -1,    -1,    -1,  3230,\n+      -1,    -1,    -1,    -1,    -1,  2403,    -1,    -1,  2406,    -1,\n+    2408,   188,    -1,    -1,  2412,  2413,   193,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2426,  2427,\n+    2428,  2429,    -1,  2431,    -1,    -1,    -1,  2435,    -1,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,  3317,  3318,    -1,    -1,\n+     267,  2489,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,  3343,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,  2882,  2883,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2907,  2908,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,    -1,  2925,   501,\n-      -1,    -1,  2929,    -1,  2931,  2932,  2933,   380,    -1,  2936,\n-      -1,    -1,  2939,  2940,    -1,    -1,    -1,    -1,    -1,    -1,\n-    2947,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n-     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2984,    -1,    -1,\n-      -1,    -1,    -1,  2990,    -1,    -1,    -1,    -1,    -1,    -1,\n-     484,    -1,    -1,   487,   488,   489,  3003,   491,   492,   493,\n-     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3379,     8,\n+      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,\n+      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,\n+      -1,  2589,    11,    -1,    53,    -1,    15,    16,    17,    18,\n+      19,    20,    21,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    78,\n+      -1,    -1,  2620,    -1,    -1,    -1,    -1,    46,    -1,    -1,\n+       8,    -1,    -1,    11,    53,    -1,    -1,    15,    16,    17,\n+      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    78,\n+    2658,    -1,  2660,    -1,    -1,    -1,  2664,    -1,    46,    -1,\n+      -1,    -1,    -1,    -1,  2672,    53,    -1,  2675,    -1,  2677,\n+      -1,    -1,    -1,  2681,    -1,    -1,  2684,  2685,    -1,    -1,\n+    2688,  2689,    -1,    -1,    -1,    -1,    -1,    -1,  2696,    -1,\n+      78,    -1,    -1,    -1,    -1,    -1,    -1,   484,  2706,    -1,\n+     487,   488,   489,   172,   491,   492,   493,   494,   495,   496,\n+      -1,    -1,    -1,  2721,   501,    -1,    -1,    -1,    -1,   188,\n+      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3030,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,  3056,\n+      -1,    -1,    -1,   172,    -1,    -1,    -1,   216,   217,    -1,\n+      -1,  2759,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,\n+      -1,    -1,   231,    -1,   193,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   172,    -1,    -1,   216,   217,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n+     188,   270,   231,    -1,    -1,   193,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n+      -1,   270,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n+      -1,    -1,   270,    -1,  2892,  2893,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2917,\n+    2918,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  2935,    -1,    -1,\n+      -1,  2939,    -1,  2941,  2942,  2943,    -1,    -1,  2946,    -1,\n+      -1,  2949,  2950,    -1,    -1,    -1,    -1,    -1,    -1,  2957,\n+      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3088,  3089,  3090,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-    3107,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,  3119,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2997,\n+      -1,    -1,   380,    -1,    -1,  3003,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3016,    -1,\n+      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,\n+     489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n+      -1,    -1,   501,    -1,    -1,  3043,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,\n+     489,  3069,   491,   492,   493,   494,   495,   496,    -1,    -1,\n+      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3101,  3102,  3103,   484,    -1,    -1,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,  3119,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,  3131,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,  3163,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3180,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3190,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,  3210,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3175,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  3235,    -1,\n+      -1,    -1,    -1,    -1,  3192,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,  3202,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,  3225,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,     3,     4,     5,     6,     7,     8,\n-       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,  3278,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n-      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n-      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n-      69,    70,    71,  3330,    73,    74,    75,    76,    77,    -1,\n-      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n-      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,   113,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,\n-     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,\n-     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,\n-     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,\n-      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,   462,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,   484,    -1,   486,    -1,    -1,\n-      -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,   508,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,  3250,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n       23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,\n+      33,    -1,    -1,    -1,  3292,    -1,    39,    -1,    -1,    42,\n       43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n       53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n       63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,\n       73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n+      83,    84,    85,    86,    87,    88,    89,    90,  3346,    92,\n       93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n      103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n      113,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n@@ -11811,12 +11811,12 @@ static const yytype_int16 yycheck[] =\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n      483,   484,    -1,   486,    -1,    -1,    -1,    -1,   491,   492,\n-     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n+     493,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,\n       -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n        7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,\n-      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n+      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n@@ -11825,11 +11825,11 @@ static const yytype_int16 yycheck[] =\n       97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n      107,   108,   109,   110,   111,   112,   113,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n-     127,   128,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n      147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n       -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n+     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n      177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n      187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n      197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n@@ -11842,50 +11842,50 @@ static const yytype_int16 yycheck[] =\n      267,   268,   269,   270,   271,   272,   273,   274,   275,   276,\n      277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n       -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n      317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n      327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n      347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n+     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,\n      377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n+     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,\n      407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n       -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n      427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n+     477,   478,   479,   480,   481,   482,   483,   484,    -1,   486,\n       -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,\n+      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n      507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n+      -1,    22,    23,    24,    25,    26,    27,    28,    29,    30,\n+      31,    32,    33,    -1,    -1,    -1,    37,    -1,    39,    -1,\n       -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    53,    54,    55,    56,    57,    58,    59,    60,\n+      51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n       61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n       71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n       81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n       -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n      101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n      111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n+     121,    -1,   123,   124,   125,   126,   127,   128,    -1,   130,\n      131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n      141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n      151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,\n+     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n      171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n      191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n       -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n      211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,   227,   228,   229,   230,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n      231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n@@ -11899,27 +11899,27 @@ static const yytype_int16 yycheck[] =\n      331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n+     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n      381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n      401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,   417,   418,   419,   420,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n      421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n      431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,   450,\n      451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n       -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n      481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n      491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n+     501,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n        5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,\n+      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n       -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,\n       65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n       75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n       85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n@@ -11930,13 +11930,13 @@ static const yytype_int16 yycheck[] =\n       -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n      175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n      185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n      195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n      205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n      215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n+     225,    -1,   227,   228,   229,   230,   231,    -1,   233,   234,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n@@ -11950,15 +11950,15 @@ static const yytype_int16 yycheck[] =\n       -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,\n+     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n       -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n+     415,    -1,   417,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n      435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,\n+     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n@@ -12009,16 +12009,16 @@ static const yytype_int16 yycheck[] =\n      419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n      429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n      439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+     449,   450,   451,   452,   453,   454,   455,   456,   457,    -1,\n       -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n      479,   480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,\n       -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,\n-      -1,   500,   501,    -1,    -1,    -1,   505,   506,   507,   508,\n+      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,\n        3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    38,    39,    -1,    -1,    42,\n+      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n+      33,    -1,    -1,    -1,    37,    -1,    39,    -1,    -1,    42,\n       43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n       53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n       63,    64,    65,    66,    67,    68,    69,    70,    71,    -1,\n@@ -12051,9 +12051,9 @@ static const yytype_int16 yycheck[] =\n      333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n+     363,   364,   365,   366,   367,    -1,   369,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,\n+     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n      403,   404,    -1,   406,   407,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n@@ -12064,12 +12064,12 @@ static const yytype_int16 yycheck[] =\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n      483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,\n-     493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,\n+     493,    -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,\n       -1,    -1,   505,   506,   507,   508,     3,     4,     5,     6,\n        7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      37,    -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n+      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    38,    39,    -1,    -1,    42,    43,    44,    -1,    46,\n       47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    65,    66,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n@@ -12102,8 +12102,8 @@ static const yytype_int16 yycheck[] =\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n      347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     367,    -1,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,   383,   384,   385,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n      397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n      407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n@@ -12115,7 +12115,7 @@ static const yytype_int16 yycheck[] =\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n      477,   478,   479,   480,   481,   482,   483,   484,    -1,    -1,\n       -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n-      -1,   498,    -1,   500,   501,    -1,    -1,    -1,   505,   506,\n+      -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,\n      507,   508,     3,     4,     5,     6,     7,     8,     9,    10,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n@@ -12166,24 +12166,24 @@ static const yytype_int16 yycheck[] =\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n      481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,\n      491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n-       5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,    -1,\n+     501,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n+       5,     6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n+      -1,    -1,    37,    -1,    39,    -1,    -1,    42,    43,    44,\n       -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n       55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n       65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n       75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n       85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n       95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n       -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n      125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n       -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n+     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n      175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n      185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n      195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n@@ -12193,81 +12193,81 @@ static const yytype_int16 yycheck[] =\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,\n+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n      275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n      285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,\n+      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n      315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n      325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n       -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n      345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,\n+     365,   366,   367,    -1,   369,   370,   371,   372,   373,   374,\n      375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n+      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n      415,    -1,    -1,   418,   419,   420,   421,   422,   423,   424,\n      425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,\n+     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n      445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,\n+     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n-      -1,   486,    -1,    -1,    -1,     3,     4,     5,     6,     7,\n-       8,     9,    10,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,   507,   508,    22,    23,    24,    25,    26,    27,\n-      28,    29,    30,    31,    32,    33,    -1,    -1,    -1,    -1,\n-      -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n-      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n-      -1,    59,    60,    61,    62,    63,    64,    65,    66,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n-      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n-      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n-      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n-     108,   109,   110,   111,   112,   113,   114,    -1,   116,   117,\n-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n-      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n-     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n-     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n-     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n-     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n-     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,\n-     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n-      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n-     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n-     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n-      -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n-     498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n-     508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,\n+      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n+      -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n+     505,   506,   507,   508,     3,     4,     5,     6,     7,    -1,\n+       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n+      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n+     159,   160,   161,    -1,   163,    -1,   165,   166,   167,   168,\n+     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n+     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n+     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n+     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,   305,   306,   307,    -1,\n+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,   405,   406,   407,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,   437,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,   462,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,    -1,    -1,   486,    -1,    -1,\n+      -1,     3,     4,     5,     6,     7,     8,     9,    10,   498,\n+      -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,\n       22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n       32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n       42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n@@ -12319,7 +12319,7 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,\n       -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n@@ -12333,7 +12333,7 @@ static const yytype_int16 yycheck[] =\n      136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n      146,   147,   148,   149,   150,   151,   152,   153,   154,   155,\n      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,   167,   168,   169,   170,   171,   172,   173,    -1,   175,\n+     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n       -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n      186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n      196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n@@ -12383,7 +12383,7 @@ static const yytype_int16 yycheck[] =\n      130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n      140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n      150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n+     160,   161,    -1,   163,    -1,   165,   166,   167,   168,   169,\n      170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n       -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n      190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n@@ -12417,7 +12417,7 @@ static const yytype_int16 yycheck[] =\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n      480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n       -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n-     500,   501,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n+     500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n        4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n@@ -12458,7 +12458,7 @@ static const yytype_int16 yycheck[] =\n      374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n@@ -12467,7 +12467,7 @@ static const yytype_int16 yycheck[] =\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n      484,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,\n-      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,   501,    -1,    -1,\n       -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n        8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n@@ -12508,20 +12508,20 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n      378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n      388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     398,   399,   400,   401,    -1,   403,   404,   405,   406,   407,\n      408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n      418,   419,   420,   421,   422,   423,   424,   425,   426,   427,\n      428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n      438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n      448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n-      -1,   459,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n      478,   479,   480,   481,   482,   483,   484,    -1,    -1,    -1,\n       -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,    -1,\n      498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n      508,     3,     4,     5,     6,     7,     8,     9,    10,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n       32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n       42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n       52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n@@ -12564,7 +12564,7 @@ static const yytype_int16 yycheck[] =\n      422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n       -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n       -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+     452,   453,   454,   455,   456,   457,    -1,   459,   460,    -1,\n       -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n      482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n@@ -12572,7 +12572,7 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n-      26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n+      26,    27,    28,    29,    30,    31,    32,    33,    -1,    -1,\n       -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,    -1,\n       46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    65,\n@@ -12609,7 +12609,7 @@ static const yytype_int16 yycheck[] =\n      366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n      376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n      406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n       -1,    -1,   418,   419,   420,   421,   422,   423,   424,   425,\n      426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n@@ -12711,7 +12711,7 @@ static const yytype_int16 yycheck[] =\n      374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n@@ -13036,7 +13036,7 @@ static const yytype_int16 yycheck[] =\n       82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n       92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n+     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n       -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n      132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n      142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n@@ -13051,7 +13051,7 @@ static const yytype_int16 yycheck[] =\n       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n      252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n-     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,\n+     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,\n      272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n       -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n      292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n@@ -13073,8 +13073,8 @@ static const yytype_int16 yycheck[] =\n      452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n       -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n-     492,    -1,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n+     482,   483,   484,    -1,    -1,    -1,    -1,    -1,    -1,   491,\n+     492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,    -1,\n       -1,    -1,    -1,   505,   506,   507,   508,     3,     4,     5,\n        6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,\n@@ -13086,7 +13086,7 @@ static const yytype_int16 yycheck[] =\n       76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n       86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n       96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n-     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,\n+     106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n      116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n      126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n      136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n@@ -13097,12 +13097,12 @@ static const yytype_int16 yycheck[] =\n      186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n      196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n      206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-      -1,    -1,   218,   219,   220,   221,   222,   223,   224,   225,\n+     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n       -1,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n      236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n      246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n      256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,    -1,   268,   269,    -1,   271,   272,   273,   274,   275,\n+     266,    -1,   268,   269,   270,   271,   272,   273,   274,   275,\n      276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n      286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n      296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n@@ -13123,10 +13123,10 @@ static const yytype_int16 yycheck[] =\n      446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n      456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,   484,    -1,\n-      -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,\n+     476,   477,   478,   479,   480,   481,   482,   483,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   491,   492,    -1,    -1,    -1,\n       -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,   505,\n-     506,   507,   508,     3,     4,     5,     6,     7,    -1,     9,\n+     506,   507,   508,     3,     4,     5,     6,     7,     8,     9,\n       10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n@@ -13137,7 +13137,7 @@ static const yytype_int16 yycheck[] =\n       -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n       90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n+     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n      120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n      130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n      140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n@@ -13147,13 +13147,13 @@ static const yytype_int16 yycheck[] =\n       -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n      190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n      200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n+     210,   211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,\n      220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n      230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n      240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n      250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n      260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n+      -1,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n      280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n      290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n      300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n@@ -13174,10 +13174,10 @@ static const yytype_int16 yycheck[] =\n       -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n      460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   491,   492,    -1,    -1,    -1,    -1,    -1,   498,    -1,\n+     480,   481,   482,   483,   484,    -1,    -1,    -1,    -1,    -1,\n+      -1,   491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,\n      500,    -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,\n-       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,\n+       4,     5,     6,     7,    -1,     9,    10,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n       -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n@@ -13198,7 +13198,7 @@ static const yytype_int16 yycheck[] =\n      184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n      194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n      204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,    -1,   217,   218,   219,   220,   221,   222,   223,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n      224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n@@ -13228,7 +13228,7 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,   491,   492,    -1,\n       -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n       -1,   505,   506,   507,   508,     3,     4,     5,     6,     7,\n-      -1,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,    27,\n       28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n       -1,    39,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n@@ -13248,7 +13248,7 @@ static const yytype_int16 yycheck[] =\n      178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n      188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n      198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,   217,\n      218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n      228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n      238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n@@ -13276,84 +13276,84 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n      478,   479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,\n-      -1,    -1,     3,     4,     5,     6,     7,     8,     9,    10,\n+      -1,    -1,    -1,   491,   492,    -1,    -1,    -1,    -1,    -1,\n      498,    -1,   500,    -1,    -1,    -1,    -1,   505,   506,   507,\n-     508,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,\n-      -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n-      51,    52,    -1,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    65,    66,    67,    68,    69,    70,\n-      71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n-      81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n-      -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n-     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n-     111,   112,   113,   114,    -1,   116,   117,   118,   119,   120,\n-     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n-     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n-      -1,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n-     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n-     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n-     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n-      -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n-     211,    -1,   213,    -1,   215,    -1,    -1,   218,   219,   220,\n-     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n-      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n-     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n-     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n-     261,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,\n-     271,   272,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n-     291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n-     311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n-     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n-     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n-     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n-     351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n-     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n-     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n-     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n-     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n-     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n-     451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n-     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     491,   492,   493,    -1,    -1,    -1,    -1,   498,    -1,   500,\n-      -1,    -1,    -1,    -1,   505,   506,   507,   508,     3,     4,\n-       5,     6,     7,    -1,     9,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,    24,\n+     508,     3,     4,     5,     6,     7,    -1,     9,    10,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n+      32,    33,    -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n+      62,    63,    64,    65,    66,    67,    68,    69,    70,    71,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n+     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n+     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n+      -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n+     132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n+     142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n+     192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n+      -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n+     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,\n+     272,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n+      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n+     332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n+     342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n+     382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n+     392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n+     412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n+      -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+     472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n+     482,   483,    -1,    -1,    -1,    -1,    -1,    -1,     3,     4,\n+       5,     6,     7,     8,     9,    10,   498,    -1,   500,    -1,\n+      -1,    -1,    -1,   505,   506,   507,   508,    22,    23,    24,\n       25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n       -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      -1,    46,    47,    48,    49,    50,    51,    52,    -1,    54,\n       55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      65,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      65,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n       75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n       85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n       95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n       -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n      125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n+      -1,   136,   137,   138,    -1,   140,    -1,   142,    -1,   144,\n      145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n      155,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n-     175,   176,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n+     165,   166,    -1,   168,   169,   170,   171,    -1,   173,    -1,\n+     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n+     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n      195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n      205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n+     215,    -1,    -1,   218,   219,   220,   221,   222,   223,   224,\n+     225,    -1,    -1,   228,   229,   230,    -1,    -1,   233,   234,\n      235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n      245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n      255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,    -1,   268,   269,   270,   271,   272,   273,   274,\n+     265,   266,    -1,   268,   269,    -1,   271,   272,   273,   274,\n      275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n      285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n      295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n@@ -13364,7 +13364,7 @@ static const yytype_int16 yycheck[] =\n      345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n      355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n      365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n       -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n      395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n       -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n@@ -13375,206 +13375,305 @@ static const yytype_int16 yycheck[] =\n      455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n      475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n-      -1,    -1,    -1,     3,     4,     5,     6,     7,    -1,     9,\n+      -1,    -1,    -1,    -1,    -1,    -1,   491,   492,   493,    -1,\n       -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,    -1,\n-     505,   506,    22,    23,    24,    25,    26,    27,    28,    29,\n-      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    39,\n-      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n-      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n-      60,    61,    62,    63,    64,    65,    -1,    67,    68,    69,\n-      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n-      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n-     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n-     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n-     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n-     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n-     150,   151,   152,   153,   154,   155,   156,    -1,   158,   159,\n-     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n-     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n-      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n-     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n-     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,    -1,    -1,   228,   229,\n-     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n-     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n-     270,   271,   272,   273,   274,   275,   276,   277,   278,    -1,\n-     280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,\n-     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n-     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n-     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n-     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n-     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n-     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n-     420,   421,   422,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n-     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n-      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n-     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n-     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,    -1,    -1,    -1,    -1,     3,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   498,    -1,\n-     500,    -1,    -1,    -1,    -1,   505,   506,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    40,    -1,    -1,    43,    44,\n-      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n-      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n-      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,   143,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-      -1,   156,   157,   158,   159,   160,   161,   162,   163,    -1,\n-     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n-     205,   206,   207,   208,   209,   210,   211,   212,   213,    -1,\n-     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,    -1,   230,    -1,   232,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n-     275,   276,   277,   278,   279,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,   288,   289,   290,    -1,   292,    -1,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n-     425,   426,   427,   428,   429,   430,   431,   432,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   501,    -1,    22,    23,\n+     505,   506,   507,   508,     3,     4,     5,     6,     7,    -1,\n+       9,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      39,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n+      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    65,    -1,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n+     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n+     169,   170,   171,   172,   173,    -1,   175,   176,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n+     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n+     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n+     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,    -1,    -1,    -1,    -1,     3,\n+       4,     5,     6,     7,    -1,     9,    -1,    -1,    -1,   498,\n+      -1,   500,    -1,    -1,    -1,    -1,   505,   506,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n-      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n-      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n+      -1,    -1,    -1,    -1,    -1,    39,    -1,    -1,    42,    43,\n+      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n+      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    65,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n      104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n      114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n      124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n      134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n+     154,   155,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n       -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n      204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n+      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n-     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,    -1,   268,   269,   270,   271,   272,   273,\n      274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n      314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n      324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n      334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n+     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n      364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n+     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,   423,\n      424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n+     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   500,   501,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    34,    35,    -1,    37,    -1,    -1,    -1,    -1,    42,\n-      43,    44,    -1,    46,    47,    48,    49,    50,    51,    52,\n-      53,    54,    55,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    79,    -1,    81,    82,\n-      83,    84,    85,    86,    87,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    99,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,   166,   167,   168,   169,   170,   171,   172,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-     203,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,   216,   217,   218,   219,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,   229,   230,   231,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,\n-     263,   264,   265,   266,    -1,   268,   269,   270,   271,    -1,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,   291,   292,\n-     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,    -1,   309,   310,   311,   312,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,   352,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,   380,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,   405,   406,   407,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,   437,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,   452,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,    -1,     3,   486,     5,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n+      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   498,    -1,   500,    -1,    -1,    -1,\n+      -1,   505,   506,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      -1,    40,    -1,    -1,    43,    44,    -1,    46,    47,    48,\n+      -1,    50,    51,    52,    53,    54,    -1,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      -1,    -1,    81,    82,    83,    84,    85,    86,    -1,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      -1,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,   143,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,    -1,   156,   157,   158,\n+     159,   160,   161,   162,   163,    -1,   165,    -1,    -1,    -1,\n+     169,   170,   171,    -1,   173,    -1,   175,    -1,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,    -1,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,    -1,   204,   205,   206,   207,   208,\n+     209,   210,   211,   212,   213,    -1,   215,    -1,    -1,   218,\n+      -1,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+      -1,   230,    -1,   232,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,    -1,   262,   263,   264,   265,   266,    -1,   268,\n+     269,    -1,   271,    -1,   273,   274,   275,   276,   277,   278,\n+     279,   280,   281,    -1,    -1,   284,   285,   286,    -1,   288,\n+     289,   290,    -1,   292,    -1,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,    -1,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,    -1,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,    -1,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,    -1,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n+     429,   430,   431,   432,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   501,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n+      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,\n+      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n+     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n+     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   500,   501,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    -1,    31,    32,    33,    34,    35,    -1,\n+      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,\n+      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n+      57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n+      67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n+      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n+      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n+     107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n+     117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n+     127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n+     137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n+     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n+     167,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n+     177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n+     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n+     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n+     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n+     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n+      -1,   268,   269,   270,   271,    -1,   273,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+     317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n+     327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n+     337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n+     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n+     357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n+     367,   368,   369,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n+     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,\n+     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n+     427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n+     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,\n+     467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n+     477,   478,   479,   480,   481,   482,   483,    -1,     3,   486,\n+       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   500,    -1,    -1,    -1,    22,    23,    24,\n+      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,\n+      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n+      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n+      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n+      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n+      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n+     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n+      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n+      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,    -1,\n+     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n+     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n+     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n+     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,   226,    -1,   228,   229,   230,   231,    -1,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,\n+     275,   276,   277,   278,    -1,   280,   281,    -1,   283,   284,\n+     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,    -1,   309,   310,   311,   312,   313,   314,\n+     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n+     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n+      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n+     365,   366,   367,   368,    -1,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n+     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n+     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n+     435,   436,   437,   438,   439,   440,   441,    -1,   443,   444,\n+     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n+     455,   456,   457,    -1,    -1,   460,    -1,   462,   463,   464,\n+     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,    -1,\n+      -1,   486,     3,     4,     5,    -1,    -1,    -1,     9,    -1,\n+      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n-      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,\n       -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n       51,    52,    53,    54,    55,    56,    57,    -1,    59,    60,\n-      61,    62,    63,    64,    -1,    66,    67,    68,    69,    70,\n+      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n       71,    -1,    73,    74,    75,    76,    77,    -1,    79,    -1,\n       81,    82,    83,    84,    85,    86,    87,    88,    89,    90,\n       -1,    92,    93,    94,    95,    96,    97,    -1,    99,   100,\n@@ -13583,235 +13682,331 @@ static const yytype_int16 yycheck[] =\n      121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n      131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n      141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n-     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n-     161,    -1,   163,    -1,   165,   166,   167,   168,   169,   170,\n+     151,   152,   153,   154,   155,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,   166,    -1,   168,   169,   170,\n      171,   172,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n      181,   182,   183,   184,   185,   186,   187,   188,   189,   190,\n      191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n       -1,   202,   203,   204,   205,   206,   207,   208,   209,   210,\n      211,    -1,   213,    -1,   215,   216,   217,   218,   219,   220,\n-     221,   222,   223,   224,   225,   226,    -1,   228,   229,   230,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,   229,   230,\n      231,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n      241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n      251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n      261,   262,   263,   264,   265,   266,    -1,   268,   269,   270,\n      271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n-     281,    -1,   283,   284,   285,   286,    -1,    -1,   289,   290,\n+     281,   282,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n      291,   292,   293,   294,   295,   296,   297,   298,   299,   300,\n-     301,   302,   303,   304,   305,   306,   307,    -1,   309,   310,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n      311,   312,   313,   314,   315,   316,   317,   318,    -1,   320,\n      321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n      331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n      341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n      351,   352,   353,   354,   355,   356,   357,   358,   359,   360,\n-     361,   362,   363,   364,   365,   366,   367,   368,    -1,   370,\n+     361,   362,   363,   364,   365,   366,   367,    -1,   369,   370,\n      371,   372,   373,   374,   375,   376,   377,   378,   379,   380,\n      381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n      391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n-     401,    -1,   403,   404,   405,   406,   407,   408,   409,   410,\n+     401,    -1,   403,   404,    -1,   406,   407,   408,   409,   410,\n      411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n-     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n-     431,    -1,    -1,   434,   435,   436,   437,   438,   439,   440,\n+     421,   422,   423,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n      441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n      451,   452,   453,   454,   455,   456,   457,    -1,    -1,   460,\n-      -1,   462,   463,   464,   465,   466,   467,   468,   469,   470,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n      471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n-     481,   482,   483,    -1,    -1,   486,     3,     4,     5,    -1,\n-      -1,    -1,     9,    -1,    -1,    -1,    -1,    -1,    -1,   500,\n-      -1,    -1,    -1,    -1,    -1,    22,    23,    24,    25,    26,\n-      27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n-      37,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,\n-      47,    48,    49,    50,    51,    52,    53,    54,    55,    56,\n+     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,\n+     491,   492,   493,    -1,    -1,    -1,    -1,    -1,    -1,   500,\n+      -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n+      -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    42,    43,    44,    -1,    46,    47,    48,    49,\n+      50,    51,    52,    53,    54,    55,    56,    57,    -1,    59,\n+      60,    61,    62,    63,    64,    -1,    66,    67,    68,    69,\n+      70,    71,    -1,    73,    74,    75,    76,    77,    -1,    79,\n+      -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n+      90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n+     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n+     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n+     120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n+     130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n+     140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n+     150,   151,   152,   153,   154,    -1,   156,    -1,   158,   159,\n+     160,   161,    -1,   163,    -1,   165,   166,    -1,   168,   169,\n+     170,   171,   172,   173,    -1,   175,    -1,   177,   178,   179,\n+      -1,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n+     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,\n+     200,    -1,   202,   203,   204,   205,   206,   207,   208,   209,\n+     210,   211,    -1,   213,    -1,   215,   216,   217,   218,   219,\n+     220,   221,   222,   223,   224,   225,   226,    -1,   228,   229,\n+     230,   231,    -1,   233,   234,   235,   236,   237,   238,   239,\n+     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n+     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n+     260,   261,   262,   263,   264,   265,   266,    -1,   268,   269,\n+     270,   271,    -1,   273,   274,   275,   276,   277,   278,    -1,\n+     280,   281,    -1,   283,   284,   285,   286,    -1,    -1,   289,\n+     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,\n+     300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,\n+     310,   311,   312,   313,   314,   315,   316,   317,   318,    -1,\n+     320,   321,   322,   323,   324,   325,    -1,   327,   328,   329,\n+     330,   331,   332,   333,   334,    -1,   336,   337,   338,   339,\n+     340,   341,   342,   343,   344,   345,   346,   347,   348,    -1,\n+     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n+     360,   361,   362,   363,   364,   365,   366,   367,    -1,    -1,\n+     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n+     380,   381,   382,   383,   384,    -1,   386,   387,   388,   389,\n+     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n+     400,   401,    -1,   403,   404,    -1,   406,   407,   408,   409,\n+     410,   411,   412,    -1,   414,   415,    -1,    -1,   418,   419,\n+     420,   421,   422,    -1,   424,   425,   426,   427,   428,   429,\n+     430,   431,    -1,    -1,   434,   435,   436,    -1,   438,   439,\n+     440,   441,    -1,   443,   444,   445,   446,   447,   448,   449,\n+      -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n+     460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n+     470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n+     480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     500,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n+      29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n+      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n+      59,    60,    61,    62,    63,    64,    -1,    66,    67,    68,\n+      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n+      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n+      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n+      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n+     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n+     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n+      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n+      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n+     149,   150,   151,   152,   153,   154,    -1,   156,    -1,   158,\n+     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n+     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n+     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n+     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n+     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n+     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n+     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n+     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n+     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n+     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n+     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n+     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,\n+      -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,    -1,\n+     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n+     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n+     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n+      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n+     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n+     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n+      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n+     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n+      -1,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n+     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n+     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n+     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n+     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n+     419,   420,   421,   422,    -1,   424,   425,   426,   427,   428,\n+     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n+     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n+     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n+      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n+     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n+     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,\n+      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,\n+      48,    49,    50,    51,    52,    53,    54,    55,    56,    57,\n+      -1,    59,    60,    61,    62,    63,    64,    -1,    66,    67,\n+      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n+      -1,    79,    -1,    81,    82,    83,    84,    85,    86,    87,\n+      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n+      -1,    99,   100,   101,   102,   103,   104,   105,   106,   107,\n+     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n+     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n+      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n+     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n+     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n+     158,   159,   160,   161,    -1,   163,    -1,   165,   166,    -1,\n+     168,   169,   170,   171,   172,   173,    -1,   175,    -1,   177,\n+     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n+     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n+     198,   199,   200,    -1,   202,   203,   204,   205,   206,   207,\n+     208,   209,   210,   211,    -1,   213,    -1,   215,   216,   217,\n+     218,   219,   220,   221,   222,   223,   224,   225,    -1,    -1,\n+     228,   229,   230,   231,    -1,   233,   234,   235,   236,   237,\n+     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n+     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n+     258,   259,   260,   261,   262,   263,   264,   265,   266,    -1,\n+     268,   269,   270,   271,    -1,   273,   274,   275,   276,   277,\n+     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n+      -1,   289,   290,   291,   292,   293,   294,   295,   296,   297,\n+     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n+      -1,   309,   310,   311,   312,   313,   314,   315,   316,   317,\n+     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n+     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n+     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n+     348,    -1,   350,   351,   352,   353,   354,   355,   356,   357,\n+     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n+      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n+     378,   379,   380,   381,   382,   383,   384,    -1,   386,   387,\n+     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n+     398,   399,   400,   401,    -1,   403,   404,    -1,   406,   407,\n+     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n+     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n+     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n+     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n+     448,   449,    -1,   451,   452,   453,   454,   455,   456,   457,\n+      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n+     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,\n+      27,    28,    29,    30,    31,    32,    33,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,\n+      47,    48,    -1,    50,    51,    52,    53,    54,    -1,    56,\n       57,    -1,    59,    60,    61,    62,    63,    64,    -1,    -1,\n       67,    68,    69,    70,    71,    -1,    73,    74,    75,    76,\n-      77,    -1,    79,    -1,    81,    82,    83,    84,    85,    86,\n-      87,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n-      97,    -1,    99,   100,   101,   102,   103,   104,   105,   106,\n+      77,    -1,    -1,    -1,    81,    82,    83,    84,    85,    86,\n+      -1,    88,    89,    90,    -1,    92,    93,    94,    95,    96,\n+      97,    -1,    -1,   100,   101,   102,   103,   104,   105,   106,\n      107,   108,   109,   110,   111,   112,    -1,   114,    -1,   116,\n      117,   118,   119,   120,   121,    -1,   123,   124,   125,   126,\n      127,    -1,    -1,   130,   131,   132,   133,   134,    -1,   136,\n      137,   138,    -1,   140,   141,   142,    -1,   144,   145,   146,\n-     147,   148,   149,   150,   151,   152,   153,   154,   155,   156,\n-      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,   166,\n-      -1,   168,   169,   170,   171,   172,   173,    -1,   175,    -1,\n+     147,   148,   149,   150,   151,   152,   153,   154,    -1,   156,\n+      -1,   158,   159,   160,   161,    -1,   163,    -1,   165,    -1,\n+     167,    -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,\n      177,   178,   179,    -1,   181,   182,   183,   184,   185,   186,\n-     187,   188,   189,   190,   191,   192,    -1,   194,   195,   196,\n-     197,   198,   199,   200,    -1,   202,   203,   204,   205,   206,\n-     207,   208,   209,   210,   211,    -1,   213,    -1,   215,   216,\n-     217,   218,   219,   220,   221,   222,   223,   224,   225,    -1,\n-      -1,   228,   229,   230,   231,    -1,   233,   234,   235,   236,\n+     187,    -1,   189,   190,   191,   192,    -1,   194,   195,   196,\n+     197,   198,   199,   200,    -1,   202,    -1,   204,   205,   206,\n+     207,   208,   209,   210,   211,    -1,   213,    -1,   215,    -1,\n+      -1,   218,    -1,   220,   221,   222,   223,   224,   225,    -1,\n+      -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,   236,\n      237,   238,   239,   240,   241,   242,   243,   244,   245,   246,\n      247,   248,   249,   250,   251,   252,   253,   254,   255,   256,\n-     257,   258,   259,   260,   261,   262,   263,   264,   265,   266,\n-      -1,   268,   269,   270,   271,    -1,   273,   274,   275,   276,\n-     277,   278,    -1,   280,   281,   282,    -1,   284,   285,   286,\n-      -1,    -1,   289,   290,   291,   292,   293,   294,   295,   296,\n-     297,   298,   299,   300,   301,   302,   303,   304,    -1,    -1,\n-      -1,    -1,   309,   310,   311,   312,   313,   314,   315,   316,\n+     257,   258,   259,   260,    -1,   262,   263,   264,   265,   266,\n+      -1,   268,   269,    -1,   271,    -1,   273,   274,   275,   276,\n+     277,   278,    -1,   280,   281,    -1,    -1,   284,   285,   286,\n+      -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,   296,\n+     297,   298,   299,   300,   301,   302,   303,   304,   305,   306,\n+     307,    -1,   309,   310,   311,    -1,   313,   314,   315,   316,\n      317,   318,    -1,   320,   321,   322,   323,   324,   325,    -1,\n      327,   328,   329,   330,   331,   332,   333,   334,    -1,   336,\n      337,   338,   339,   340,   341,   342,   343,   344,   345,   346,\n-     347,   348,    -1,   350,   351,   352,   353,   354,   355,   356,\n+     347,   348,    -1,   350,   351,    -1,   353,   354,   355,   356,\n      357,   358,   359,   360,   361,   362,   363,   364,   365,   366,\n-     367,    -1,   369,   370,   371,   372,   373,   374,   375,   376,\n-     377,   378,   379,   380,   381,   382,   383,   384,    -1,   386,\n+     367,   368,    -1,   370,   371,   372,   373,   374,   375,   376,\n+     377,   378,   379,    -1,   381,   382,   383,   384,    -1,   386,\n      387,   388,   389,   390,   391,   392,   393,   394,   395,   396,\n-     397,   398,   399,   400,   401,    -1,   403,   404,    -1,   406,\n-     407,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n-      -1,   418,   419,   420,   421,   422,   423,   424,   425,   426,\n+     397,   398,   399,   400,   401,    -1,   403,   404,   405,   406,\n+      -1,   408,   409,   410,   411,   412,    -1,   414,   415,    -1,\n+      -1,   418,   419,   420,   421,   422,    -1,   424,   425,   426,\n      427,   428,   429,   430,   431,    -1,    -1,   434,   435,   436,\n-      -1,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n-     447,   448,   449,    -1,   451,   452,   453,   454,   455,   456,\n-     457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n+     437,   438,   439,   440,   441,    -1,   443,   444,   445,   446,\n+     447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n+     457,    -1,    -1,   460,    -1,   462,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,\n-      -1,    -1,    -1,    -1,   491,   492,   493,    -1,    -1,    -1,\n+     477,   478,   479,   480,   481,   482,   483,     3,    -1,   486,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,\n       26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,    -1,\n-      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,    -1,\n+      46,    47,    48,    -1,    50,    51,    52,    53,    54,    -1,\n       56,    57,    -1,    59,    60,    61,    62,    63,    64,    -1,\n-      66,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n-      76,    77,    -1,    79,    -1,    81,    82,    83,    84,    85,\n-      86,    87,    88,    89,    90,    -1,    92,    93,    94,    95,\n-      96,    97,    -1,    99,   100,   101,   102,   103,   104,   105,\n+      -1,    67,    68,    69,    70,    71,    -1,    73,    74,    75,\n+      76,    77,    -1,    -1,    -1,    81,    82,    83,    84,    85,\n+      86,    -1,    88,    89,    90,    -1,    92,    93,    94,    95,\n+      96,    97,    -1,    -1,   100,   101,   102,   103,   104,   105,\n      106,   107,   108,   109,   110,   111,   112,    -1,   114,    -1,\n      116,   117,   118,   119,   120,   121,    -1,   123,   124,   125,\n      126,   127,    -1,    -1,   130,   131,   132,   133,   134,    -1,\n      136,   137,   138,    -1,   140,   141,   142,    -1,   144,   145,\n      146,   147,   148,   149,   150,   151,   152,   153,   154,    -1,\n      156,    -1,   158,   159,   160,   161,    -1,   163,    -1,   165,\n-     166,    -1,   168,   169,   170,   171,   172,   173,    -1,   175,\n+      -1,   167,    -1,   169,   170,   171,    -1,   173,    -1,   175,\n       -1,   177,   178,   179,    -1,   181,   182,   183,   184,   185,\n-     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,\n-     196,   197,   198,   199,   200,    -1,   202,   203,   204,   205,\n+     186,   187,    -1,   189,   190,   191,   192,    -1,   194,   195,\n+     196,   197,   198,   199,   200,    -1,   202,    -1,   204,   205,\n      206,   207,   208,   209,   210,   211,    -1,   213,    -1,   215,\n-     216,   217,   218,   219,   220,   221,   222,   223,   224,   225,\n-     226,    -1,   228,   229,   230,   231,    -1,   233,   234,   235,\n-     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n-     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n-     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,\n-     266,    -1,   268,   269,   270,   271,    -1,   273,   274,   275,\n-     276,   277,   278,    -1,   280,   281,    -1,   283,   284,   285,\n-     286,    -1,    -1,   289,   290,   291,   292,   293,   294,   295,\n-     296,   297,   298,   299,   300,   301,   302,   303,   304,    -1,\n-      -1,    -1,    -1,   309,   310,   311,   312,   313,   314,   315,\n+      -1,    -1,   218,    -1,   220,   221,   222,   223,   224,   225,\n+      -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,   235,\n+     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,\n+     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,\n+     256,   257,   258,   259,   260,    -1,   262,   263,   264,   265,\n+     266,    -1,   268,   269,    -1,   271,    -1,   273,   274,   275,\n+     276,   277,   278,    -1,   280,   281,    -1,    -1,   284,   285,\n+     286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,   295,\n+     296,   297,   298,   299,   300,   301,   302,   303,   304,   305,\n+     306,   307,    -1,   309,   310,   311,    -1,   313,   314,   315,\n      316,   317,   318,    -1,   320,   321,   322,   323,   324,   325,\n       -1,   327,   328,   329,   330,   331,   332,   333,   334,    -1,\n      336,   337,   338,   339,   340,   341,   342,   343,   344,   345,\n-     346,   347,   348,    -1,   350,   351,   352,   353,   354,   355,\n+     346,   347,   348,    -1,   350,   351,    -1,   353,   354,   355,\n      356,   357,   358,   359,   360,   361,   362,   363,   364,   365,\n-     366,   367,    -1,    -1,   370,   371,   372,   373,   374,   375,\n-     376,   377,   378,   379,   380,   381,   382,   383,   384,    -1,\n+     366,   367,   368,    -1,   370,   371,   372,   373,   374,   375,\n+     376,   377,   378,   379,    -1,   381,   382,   383,   384,    -1,\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n-     396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n-     406,   407,   408,   409,   410,   411,   412,    -1,   414,   415,\n+     396,   397,   398,   399,   400,   401,    -1,   403,   404,   405,\n+     406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n       -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n      426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,   452,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     436,   437,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,   462,   463,   464,   465,\n      466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,    44,\n-      -1,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n-      55,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    66,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    79,    -1,    81,    82,    83,    84,\n-      85,    86,    87,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    99,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,   166,    -1,   168,   169,   170,   171,   172,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,   203,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,   229,   230,   231,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n-     265,   266,    -1,   268,   269,   270,   271,    -1,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,   291,   292,   293,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,   352,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,   407,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,   452,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,\n+     476,   477,   478,   479,   480,   481,   482,   483,    -1,     3,\n+     486,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   500,    -1,    -1,    -1,    22,    23,\n       24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    42,    43,\n-      44,    -1,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    66,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    79,    -1,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    99,   100,   101,   102,   103,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n+      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n+      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n+      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n      104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n      114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n      124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n      134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n      154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,   166,    -1,   168,   169,   170,   171,   172,   173,\n+      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n       -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,   203,\n+     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n      204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,   229,   230,   231,    -1,   233,\n+      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,    -1,   268,   269,   270,   271,    -1,   273,\n+     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n+     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n      274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,   291,   292,   293,\n+     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,   312,   313,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n      314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n      324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n      334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,\n+     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n      364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n      384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n      394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,   407,   408,   409,   410,   411,   412,    -1,\n+     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n      414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n      424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n      434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,   452,   453,\n+     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n      454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,\n+      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n       33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n       53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n@@ -13825,7 +14020,7 @@ static const yytype_int16 yycheck[] =\n      133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n       -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n      153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,    -1,   167,    -1,   169,   170,   171,    -1,\n+     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n      173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n      183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n       -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n@@ -13839,25 +14034,25 @@ static const yytype_int16 yycheck[] =\n      273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n       -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n       -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,   305,   306,   307,    -1,   309,   310,   311,    -1,\n+     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n      313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n      323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n      333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n      343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n      353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,   368,    -1,   370,   371,   372,\n+     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n      373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n      383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n      393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,   405,   406,    -1,   408,   409,   410,   411,   412,\n+     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n       -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n       -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,   437,   438,   439,   440,   441,    -1,\n+      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n      443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,   462,\n+     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,   486,    -1,    -1,    -1,    -1,    -1,    -1,\n+     483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n       22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n       32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n@@ -13873,7 +14068,7 @@ static const yytype_int16 yycheck[] =\n      132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n      142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n      152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,   167,    -1,   169,   170,   171,\n+      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n       -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n      182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n      192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n@@ -13887,26 +14082,74 @@ static const yytype_int16 yycheck[] =\n       -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n       -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n      292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n-     302,   303,   304,   305,   306,   307,    -1,   309,   310,   311,\n+     302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n       -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n      322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n      332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n       -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,   368,    -1,   370,   371,\n+     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n      372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n      382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,   405,   406,    -1,   408,   409,   410,   411,\n+      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n      412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n      422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n-      -1,    -1,   434,   435,   436,   437,   438,   439,   440,   441,\n+      -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n       -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n       -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n-     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n+      -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,    -1,     3,   486,     5,    -1,    -1,    -1,    -1,\n+     482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,\n+      -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n+      31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,    50,\n+      51,    52,    53,    54,    -1,    56,    57,    -1,    59,    60,\n+      61,    62,    63,    64,    -1,    -1,    67,    68,    69,    70,\n+      71,    -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,\n+      81,    82,    83,    84,    85,    86,    -1,    88,    89,    90,\n+      -1,    92,    93,    94,    95,    96,    97,    -1,    -1,   100,\n+     101,   102,   103,   104,   105,   106,   107,   108,   109,   110,\n+     111,   112,    -1,   114,    -1,   116,   117,   118,   119,   120,\n+     121,    -1,   123,   124,   125,   126,   127,    -1,    -1,   130,\n+     131,   132,   133,   134,    -1,   136,   137,   138,    -1,   140,\n+     141,   142,    -1,   144,   145,   146,   147,   148,   149,   150,\n+     151,   152,   153,   154,    -1,   156,    -1,   158,   159,   160,\n+     161,    -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,\n+     171,    -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,\n+     181,   182,   183,   184,   185,   186,   187,    -1,   189,   190,\n+     191,   192,    -1,   194,   195,   196,   197,   198,   199,   200,\n+      -1,   202,    -1,   204,   205,   206,   207,   208,   209,   210,\n+     211,    -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,\n+     221,   222,   223,   224,   225,    -1,    -1,   228,    -1,   230,\n+      -1,    -1,   233,   234,   235,   236,   237,   238,   239,   240,\n+     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,\n+     251,   252,   253,   254,   255,   256,   257,   258,   259,   260,\n+      -1,   262,   263,   264,   265,   266,    -1,   268,   269,    -1,\n+     271,    -1,   273,   274,   275,   276,   277,   278,    -1,   280,\n+     281,    -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,\n+      -1,   292,    -1,   294,   295,   296,   297,   298,   299,   300,\n+     301,   302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,\n+     311,    -1,   313,   314,   315,   316,   317,   318,    -1,   320,\n+     321,   322,   323,   324,   325,    -1,   327,   328,   329,   330,\n+     331,   332,   333,   334,    -1,   336,   337,   338,   339,   340,\n+     341,   342,   343,   344,   345,   346,   347,   348,    -1,   350,\n+     351,    -1,   353,   354,   355,   356,   357,   358,   359,   360,\n+     361,   362,   363,   364,   365,   366,   367,    -1,    -1,   370,\n+     371,   372,   373,   374,   375,   376,   377,   378,   379,    -1,\n+     381,   382,   383,   384,    -1,   386,   387,   388,   389,   390,\n+     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,\n+     401,    -1,   403,   404,    -1,   406,    -1,   408,   409,   410,\n+     411,   412,    -1,   414,   415,    -1,    -1,   418,   419,   420,\n+     421,   422,    -1,   424,   425,   426,   427,   428,   429,   430,\n+     431,    -1,    -1,   434,   435,   436,    -1,   438,   439,   440,\n+     441,    -1,   443,   444,   445,   446,   447,   448,   449,    -1,\n+     451,    -1,   453,   454,   455,   456,   457,    -1,    -1,   460,\n+      -1,    -1,   463,   464,   465,   466,   467,   468,   469,   470,\n+     471,   472,   473,   474,   475,   476,   477,   478,   479,   480,\n+     481,   482,   483,     3,    -1,     5,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,\n       -1,    -1,    22,    23,    24,    25,    26,    27,    28,    29,\n       -1,    31,    32,    33,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    43,    44,    -1,    46,    47,    48,    -1,\n@@ -14001,7 +14244,7 @@ static const yytype_int16 yycheck[] =\n      449,    -1,   451,    -1,   453,   454,   455,   456,   457,    -1,\n       -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n      469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,     3,    -1,     5,    -1,    -1,\n+     479,   480,   481,   482,   483,     3,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,   500,    -1,    -1,    22,    23,    24,    25,    26,    27,\n       28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n@@ -14049,7 +14292,7 @@ static const yytype_int16 yycheck[] =\n      448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n       -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n      468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,     3,    -1,     5,    -1,\n+     478,   479,   480,   481,   482,   483,     3,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,    26,\n       27,    28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,\n@@ -14097,7 +14340,7 @@ static const yytype_int16 yycheck[] =\n      447,   448,   449,    -1,   451,    -1,   453,   454,   455,   456,\n      457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,\n      467,   468,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   480,   481,   482,   483,     3,    -1,     5,\n+     477,   478,   479,   480,   481,   482,   483,     3,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,    25,\n       26,    27,    28,    29,    -1,    31,    32,    33,    -1,    -1,\n@@ -14139,159 +14382,63 @@ static const yytype_int16 yycheck[] =\n      386,   387,   388,   389,   390,   391,   392,   393,   394,   395,\n      396,   397,   398,   399,   400,   401,    -1,   403,   404,    -1,\n      406,    -1,   408,   409,   410,   411,   412,    -1,   414,   415,\n-      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n-     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n-     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n-     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n-     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n-     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n-     476,   477,   478,   479,   480,   481,   482,   483,     3,    -1,\n-       5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,    24,\n-      25,    26,    27,    28,    29,    -1,    31,    32,    33,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,    44,\n-      -1,    46,    47,    48,    -1,    50,    51,    52,    53,    54,\n-      -1,    56,    57,    -1,    59,    60,    61,    62,    63,    64,\n-      -1,    -1,    67,    68,    69,    70,    71,    -1,    73,    74,\n-      75,    76,    77,    -1,    -1,    -1,    81,    82,    83,    84,\n-      85,    86,    -1,    88,    89,    90,    -1,    92,    93,    94,\n-      95,    96,    97,    -1,    -1,   100,   101,   102,   103,   104,\n-     105,   106,   107,   108,   109,   110,   111,   112,    -1,   114,\n-      -1,   116,   117,   118,   119,   120,   121,    -1,   123,   124,\n-     125,   126,   127,    -1,    -1,   130,   131,   132,   133,   134,\n-      -1,   136,   137,   138,    -1,   140,   141,   142,    -1,   144,\n-     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n-      -1,   156,    -1,   158,   159,   160,   161,    -1,   163,    -1,\n-     165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,    -1,\n-     175,    -1,   177,   178,   179,    -1,   181,   182,   183,   184,\n-     185,   186,   187,    -1,   189,   190,   191,   192,    -1,   194,\n-     195,   196,   197,   198,   199,   200,    -1,   202,    -1,   204,\n-     205,   206,   207,   208,   209,   210,   211,    -1,   213,    -1,\n-     215,    -1,    -1,   218,    -1,   220,   221,   222,   223,   224,\n-     225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,   234,\n-     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n-     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n-     255,   256,   257,   258,   259,   260,    -1,   262,   263,   264,\n-     265,   266,    -1,   268,   269,    -1,   271,    -1,   273,   274,\n-     275,   276,   277,   278,    -1,   280,   281,    -1,    -1,   284,\n-     285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,   294,\n-     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n-      -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,   314,\n-     315,   316,   317,   318,    -1,   320,   321,   322,   323,   324,\n-     325,    -1,   327,   328,   329,   330,   331,   332,   333,   334,\n-      -1,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n-     345,   346,   347,   348,    -1,   350,   351,    -1,   353,   354,\n-     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n-     365,   366,   367,    -1,    -1,   370,   371,   372,   373,   374,\n-     375,   376,   377,   378,   379,    -1,   381,   382,   383,   384,\n-      -1,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n-     395,   396,   397,   398,   399,   400,   401,    -1,   403,   404,\n-      -1,   406,    -1,   408,   409,   410,   411,   412,    -1,   414,\n-     415,    -1,    -1,   418,   419,   420,   421,   422,    -1,   424,\n-     425,   426,   427,   428,   429,   430,   431,    -1,    -1,   434,\n-     435,   436,    -1,   438,   439,   440,   441,    -1,   443,   444,\n-     445,   446,   447,   448,   449,    -1,   451,    -1,   453,   454,\n-     455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,\n-     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,    23,\n-      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n-      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n-      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n-      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n-      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n-      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n-      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n-     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n-     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n-     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n-     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n-      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n-      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n-     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n-     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n-     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n-      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n-     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n+      -1,    -1,   418,   419,   420,   421,   422,    -1,   424,   425,\n+     426,   427,   428,   429,   430,   431,    -1,    -1,   434,   435,\n+     436,    -1,   438,   439,   440,   441,    -1,   443,   444,   445,\n+     446,   447,   448,   449,    -1,   451,    -1,   453,   454,   455,\n+     456,   457,    -1,    -1,   460,    -1,    -1,   463,   464,   465,\n+     466,   467,   468,   469,   470,   471,   472,   473,   474,   475,\n+     476,   477,   478,   479,   480,   481,   482,   483,    -1,     3,\n+       4,     5,    -1,    -1,     8,     9,    -1,    -1,    -1,    -1,\n+      -1,    15,    16,    -1,   500,    19,    20,    21,    22,    23,\n+      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,\n+      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,\n+      44,    45,    46,    47,    48,    49,    50,    51,    52,    -1,\n+      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,\n+      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,\n+      74,    75,    76,    -1,    78,    79,    80,    81,    82,    83,\n+      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,\n+      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n+     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,\n+     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,\n+     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,\n+     144,   145,   146,   147,    -1,   149,   150,   151,   152,   153,\n+      -1,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n+     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,\n+     174,   175,   176,    -1,    -1,   179,   180,   181,   182,   183,\n+     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,\n+     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,\n+      -1,   205,   206,   207,   208,   209,   210,   211,   212,   213,\n+     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n+     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n-     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n-     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n-     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n-     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n-     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n-     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n-     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n+     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n+     264,   265,   266,   267,   268,   269,   270,   271,   272,    -1,\n+     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,\n+     284,   285,   286,   287,   288,   289,    -1,   291,   292,   293,\n+      -1,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n+     304,   305,   306,   307,   308,   309,   310,    -1,   312,   313,\n+     314,    -1,   316,   317,   318,   319,   320,   321,   322,   323,\n+     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,\n+     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,\n      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n-     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n-     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n-     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n-     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n-     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n-     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n-     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n-     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n-     474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n-       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,    22,\n-      23,    24,    25,    26,    27,    28,    29,    -1,    31,    32,\n-      33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      43,    44,    -1,    46,    47,    48,    -1,    50,    51,    52,\n-      53,    54,    -1,    56,    57,    -1,    59,    60,    61,    62,\n-      63,    64,    -1,    -1,    67,    68,    69,    70,    71,    -1,\n-      73,    74,    75,    76,    77,    -1,    -1,    -1,    81,    82,\n-      83,    84,    85,    86,    -1,    88,    89,    90,    -1,    92,\n-      93,    94,    95,    96,    97,    -1,    -1,   100,   101,   102,\n-     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,\n-      -1,   114,    -1,   116,   117,   118,   119,   120,   121,    -1,\n-     123,   124,   125,   126,   127,    -1,    -1,   130,   131,   132,\n-     133,   134,    -1,   136,   137,   138,    -1,   140,   141,   142,\n-      -1,   144,   145,   146,   147,   148,   149,   150,   151,   152,\n-     153,   154,    -1,   156,    -1,   158,   159,   160,   161,    -1,\n-     163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,\n-     173,    -1,   175,    -1,   177,   178,   179,    -1,   181,   182,\n-     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,\n-      -1,   194,   195,   196,   197,   198,   199,   200,    -1,   202,\n-      -1,   204,   205,   206,   207,   208,   209,   210,   211,    -1,\n-     213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,\n-     223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,\n-     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,\n-     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,\n-     253,   254,   255,   256,   257,   258,   259,   260,    -1,   262,\n-     263,   264,   265,   266,    -1,   268,   269,    -1,   271,    -1,\n-     273,   274,   275,   276,   277,   278,    -1,   280,   281,    -1,\n-      -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,   292,\n-      -1,   294,   295,   296,   297,   298,   299,   300,   301,   302,\n-     303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,\n-     313,   314,   315,   316,   317,   318,    -1,   320,   321,   322,\n-     323,   324,   325,    -1,   327,   328,   329,   330,   331,   332,\n-     333,   334,    -1,   336,   337,   338,   339,   340,   341,   342,\n-     343,   344,   345,   346,   347,   348,    -1,   350,   351,    -1,\n-     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,\n-     363,   364,   365,   366,   367,    -1,    -1,   370,   371,   372,\n-     373,   374,   375,   376,   377,   378,   379,    -1,   381,   382,\n-     383,   384,    -1,   386,   387,   388,   389,   390,   391,   392,\n-     393,   394,   395,   396,   397,   398,   399,   400,   401,    -1,\n-     403,   404,    -1,   406,    -1,   408,   409,   410,   411,   412,\n-      -1,   414,   415,    -1,    -1,   418,   419,   420,   421,   422,\n-      -1,   424,   425,   426,   427,   428,   429,   430,   431,    -1,\n-      -1,   434,   435,   436,    -1,   438,   439,   440,   441,    -1,\n-     443,   444,   445,   446,   447,   448,   449,    -1,   451,    -1,\n-     453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n-     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n-     473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   500,    -1,    -1,\n+     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n+     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,    -1,   401,   402,   403,\n+     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n+     414,   415,   416,   417,   418,   419,    -1,   421,    -1,   423,\n+     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,\n+     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,\n+     444,   445,   446,   447,    -1,   449,   450,   451,   452,   453,\n+     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,\n+     464,   465,   466,   467,   468,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,\n+      -1,     3,    -1,   487,   488,   489,     8,   491,   492,   493,\n+     494,   495,   496,    15,    16,    -1,    -1,    19,    20,    21,\n       22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n       32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n@@ -14338,295 +14485,286 @@ static const yytype_int16 yycheck[] =\n       -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n       -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,    -1,     3,     4,     5,    -1,    -1,     8,     9,\n-      -1,    -1,    -1,    -1,    -1,    15,    16,    -1,   500,    19,\n-      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,\n-      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,\n-      40,    41,    42,    43,    44,    45,    46,    47,    48,    49,\n-      50,    51,    52,    -1,    54,    55,    56,    57,    58,    59,\n-      60,    61,    62,    63,    64,    65,    66,    67,    68,    69,\n-      70,    71,    72,    73,    74,    75,    76,    -1,    78,    79,\n-      80,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n-      90,    91,    92,    93,    94,    95,    96,    97,    98,    99,\n-     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,   115,   116,   117,   118,   119,\n-     120,   121,   122,   123,   124,   125,   126,   127,   128,   129,\n-     130,   131,   132,   133,   134,   135,   136,   137,   138,   139,\n-     140,   141,   142,   143,   144,   145,   146,   147,    -1,   149,\n-     150,   151,   152,   153,    -1,   155,   156,   157,   158,   159,\n-     160,   161,   162,   163,   164,   165,   166,   167,   168,   169,\n-     170,   171,   172,   173,   174,   175,   176,    -1,    -1,   179,\n-     180,   181,   182,   183,   184,   185,   186,   187,   188,   189,\n-     190,   191,   192,   193,   194,   195,   196,   197,   198,   199,\n-     200,   201,   202,   203,    -1,   205,   206,   207,   208,   209,\n-     210,   211,   212,   213,   214,   215,   216,   217,   218,   219,\n-     220,   221,   222,   223,   224,   225,   226,   227,   228,   229,\n-     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,\n-     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,\n-     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,\n-     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,\n-     270,   271,   272,    -1,   274,   275,   276,   277,   278,   279,\n-     280,   281,   282,   283,   284,   285,   286,   287,   288,   289,\n-      -1,   291,   292,   293,    -1,   295,   296,   297,   298,   299,\n-     300,   301,   302,   303,   304,   305,   306,   307,   308,   309,\n-     310,    -1,   312,   313,   314,    -1,   316,   317,   318,   319,\n-     320,   321,   322,   323,   324,   325,   326,   327,   328,   329,\n-     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,\n-     340,   341,   342,   343,   344,   345,   346,   347,   348,   349,\n-     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,\n-     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,\n-     370,   371,   372,   373,   374,   375,   376,   377,   378,   379,\n-     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,\n-     390,   391,   392,   393,   394,   395,   396,   397,   398,   399,\n-      -1,   401,   402,   403,   404,   405,   406,   407,   408,   409,\n-     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,\n-      -1,   421,    -1,   423,   424,   425,   426,   427,   428,   429,\n-     430,   431,   432,   433,   434,   435,   436,   437,   438,   439,\n-     440,   441,   442,   443,   444,   445,   446,   447,    -1,   449,\n-     450,   451,   452,   453,   454,   455,   456,   457,   458,   459,\n-     460,   461,   462,   463,   464,   465,   466,   467,   468,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     480,   481,   482,   483,    -1,     3,    -1,   487,   488,   489,\n-       8,   491,   492,   493,   494,   495,   496,    15,    16,    -1,\n-      -1,    19,    20,    21,    22,    23,    24,    25,    26,    27,\n-      28,    29,    -1,    31,    32,    33,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    43,    44,    -1,    46,    47,\n-      48,    -1,    50,    51,    52,    53,    54,    -1,    56,    57,\n-      -1,    59,    60,    61,    62,    63,    64,    -1,    -1,    67,\n-      68,    69,    70,    71,    -1,    73,    74,    75,    76,    77,\n-      -1,    -1,    -1,    81,    82,    83,    84,    85,    86,    -1,\n-      88,    89,    90,    -1,    92,    93,    94,    95,    96,    97,\n-      -1,    -1,   100,   101,   102,   103,   104,   105,   106,   107,\n-     108,   109,   110,   111,   112,    -1,   114,    -1,   116,   117,\n-     118,   119,   120,   121,    -1,   123,   124,   125,   126,   127,\n-      -1,    -1,   130,   131,   132,   133,   134,    -1,   136,   137,\n-     138,    -1,   140,   141,   142,    -1,   144,   145,   146,   147,\n-     148,   149,   150,   151,   152,   153,   154,    -1,   156,    -1,\n-     158,   159,   160,   161,    -1,   163,    -1,   165,    -1,    -1,\n-      -1,   169,   170,   171,    -1,   173,    -1,   175,    -1,   177,\n-     178,   179,    -1,   181,   182,   183,   184,   185,   186,   187,\n-      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,\n-     198,   199,   200,    -1,   202,    -1,   204,   205,   206,   207,\n-     208,   209,   210,   211,    -1,   213,    -1,   215,    -1,    -1,\n-     218,    -1,   220,   221,   222,   223,   224,   225,    -1,    -1,\n-     228,    -1,   230,    -1,    -1,   233,   234,   235,   236,   237,\n-     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,\n-     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,\n-     258,   259,   260,    -1,   262,   263,   264,   265,   266,    -1,\n-     268,   269,    -1,   271,    -1,   273,   274,   275,   276,   277,\n-     278,    -1,   280,   281,    -1,    -1,   284,   285,   286,    -1,\n-      -1,   289,   290,    -1,   292,    -1,   294,   295,   296,   297,\n-     298,   299,   300,   301,   302,   303,   304,    -1,    -1,    -1,\n-      -1,   309,   310,   311,    -1,   313,   314,   315,   316,   317,\n-     318,    -1,   320,   321,   322,   323,   324,   325,    -1,   327,\n-     328,   329,   330,   331,   332,   333,   334,    -1,   336,   337,\n-     338,   339,   340,   341,   342,   343,   344,   345,   346,   347,\n-     348,    -1,   350,   351,    -1,   353,   354,   355,   356,   357,\n-     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,\n-      -1,    -1,   370,   371,   372,   373,   374,   375,   376,   377,\n-     378,   379,    -1,   381,   382,   383,   384,    -1,   386,   387,\n-     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,\n-     398,   399,   400,   401,    -1,   403,   404,    -1,   406,    -1,\n-     408,   409,   410,   411,   412,    -1,   414,   415,    -1,    -1,\n-     418,   419,   420,   421,   422,    -1,   424,   425,   426,   427,\n-     428,   429,   430,   431,    -1,    -1,   434,   435,   436,    -1,\n-     438,   439,   440,   441,    -1,   443,   444,   445,   446,   447,\n-     448,   449,    -1,   451,    -1,   453,   454,   455,   456,   457,\n-      -1,    -1,   460,    -1,    -1,   463,   464,   465,   466,   467,\n-     468,   469,   470,   471,   472,   473,   474,   475,   476,   477,\n-     478,   479,   480,   481,   482,   483,    -1,    -1,    -1,   487,\n-     488,   489,    -1,   491,   492,   493,   494,   495,   496,     8,\n+     482,   483,    -1,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,     8,    -1,    -1,    11,    -1,\n+      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n+      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,\n+      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,\n+      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n+      -1,    -1,    53,    -1,     8,    78,    -1,    11,    -1,    -1,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n+      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,\n       -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,\n-      19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,     8,    -1,    -1,    11,    -1,    -1,    36,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    46,    -1,    -1,\n-      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    36,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n-      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,     8,    78,\n-      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    78,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,\n-      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,    17,    18,    19,    20,    21,    -1,    78,    -1,\n+      19,    20,    21,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,   172,\n+      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n+     193,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,\n+      -1,    -1,   193,   216,   217,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n+      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,   172,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    46,    -1,   172,    -1,    -1,    -1,    -1,    53,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,\n-      -1,    -1,    -1,    -1,   193,   172,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   188,    -1,    -1,    -1,    -1,   193,   216,   217,    -1,\n+     231,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n+      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   284,   216,   217,   287,    -1,   267,    -1,    -1,   270,\n+      -1,    -1,    -1,   172,    -1,    -1,    -1,   231,    -1,    -1,\n+      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,   188,\n+      -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,     8,\n+      -1,    -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,\n+      19,    20,    21,   267,    -1,    -1,   270,   216,   217,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,\n+     284,    -1,   231,   287,    -1,    -1,    -1,    46,    -1,    -1,\n+      -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    78,\n+      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,\n+      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,   216,\n-     217,    -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,   188,    -1,\n-      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,   267,    -1,\n-      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   284,   216,   217,   287,    -1,\n-     267,    -1,    -1,   270,    -1,    -1,    -1,   172,    -1,    -1,\n-      -1,   231,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n-     287,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,\n-      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,\n-      15,    16,    17,    18,    19,    20,    21,   267,    -1,    -1,\n-     270,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    36,    -1,    -1,   284,    -1,   231,   287,    -1,    -1,\n-      -1,    46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   267,    78,    -1,   270,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   284,\n-      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   484,    -1,   172,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,    -1,    -1,    -1,    -1,   501,   188,\n+      -1,   380,    -1,   484,   193,    -1,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n+     501,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   484,    -1,   172,   487,   488,\n+      -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,\n+      -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,\n+      -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,\n      489,    -1,   491,   492,   493,   494,   495,   496,    -1,    -1,\n-      -1,    -1,   501,   188,    -1,   380,    -1,   484,   193,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,\n-      -1,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n-      -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,\n-      -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,   484,\n-      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,\n+      -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n+      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n+      20,    21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+       8,    -1,    -1,    11,    -1,    -1,    36,    15,    16,    17,\n+      18,    19,    20,    21,    -1,    -1,    46,    -1,    -1,    -1,\n+      -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,    36,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,\n+      -1,   380,    -1,    -1,    -1,    53,    -1,     8,    78,    -1,\n+      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,\n+      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      78,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n+      -1,    -1,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,\n-      16,    17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,\n-      36,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n+      16,    17,    18,    19,    20,    21,    -1,    78,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      46,    -1,   172,    -1,    -1,   484,    -1,    53,   487,   488,\n+     489,    -1,   491,   492,   493,   494,   495,   496,   188,    -1,\n+      -1,    -1,   501,   193,   172,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     188,    -1,    -1,    -1,    -1,   193,   216,   217,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,   216,   217,\n+      -1,   172,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   231,    -1,    -1,    -1,   188,    -1,    -1,\n+      -1,    -1,   193,    -1,    -1,    -1,    -1,   267,    -1,    -1,\n+     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   284,   216,   217,   287,    -1,   267,\n+      -1,    -1,   270,    -1,    -1,    -1,   172,    -1,    -1,    -1,\n+     231,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,   287,\n+      -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,    -1,\n+      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,\n+      16,    17,    18,    19,    20,    21,   267,    -1,    -1,   270,\n+     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      36,    -1,    -1,   284,    -1,   231,   287,    -1,    -1,    -1,\n       46,    -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,\n-      -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    46,    -1,    -1,   380,    -1,    -1,    -1,    53,\n-      -1,     8,    78,    -1,    11,    -1,    -1,    -1,    15,    16,\n-      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    36,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,\n-      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    46,    -1,   172,    -1,    -1,   484,\n-      -1,    53,   487,   488,   489,    -1,   491,   492,   493,   494,\n-     495,   496,   188,    -1,    -1,    -1,   501,   193,   172,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,\n-     216,   217,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,\n-      -1,    -1,    15,    16,    -1,   231,    19,    20,    21,    -1,\n-      -1,    -1,   216,   217,    -1,   172,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,\n-      -1,   188,    -1,    46,    -1,    -1,   193,    -1,    -1,    -1,\n-      53,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,   216,\n-     217,   287,    -1,   267,    -1,    78,   270,    -1,    -1,    -1,\n-     172,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n-     284,    -1,    -1,   287,    -1,    -1,   188,    -1,    -1,    -1,\n-      -1,   193,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-      -1,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-     267,    -1,    -1,   270,   216,   217,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    36,    -1,    -1,   284,    -1,   231,\n-     287,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,\n-      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,\n-      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,   172,\n-      -1,    -1,    -1,    -1,    36,   267,    78,    -1,   270,    -1,\n-      -1,    -1,    -1,    -1,    46,   188,   380,    -1,    -1,    -1,\n-     193,    53,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   216,   217,    -1,    78,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n-      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n+     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   267,    78,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n+      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   270,   484,    -1,\n-     172,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,   284,    -1,    -1,    -1,   501,   188,    -1,   380,    -1,\n-     484,   193,    -1,   487,   488,   489,    -1,   491,   492,   493,\n-     494,   495,   496,    -1,    -1,    -1,    -1,   501,    -1,    -1,\n-     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,   231,\n-      -1,   193,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n-     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n-      -1,    -1,   499,    -1,   216,   217,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,   231,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n-      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,   267,    -1,   499,   270,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   484,    -1,   172,   487,   488,   489,\n+      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n+      -1,   501,   188,    -1,   380,    -1,   484,   193,    -1,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,    -1,    -1,\n+     216,   217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n+     501,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n+      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n+      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,    -1,    -1,    -1,    -1,   501,    -1,    -1,    -1,    -1,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    36,\n+      15,    16,    17,    18,    19,    20,    21,    -1,    -1,    46,\n+      -1,    -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,\n+      -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    46,    -1,    -1,   380,    -1,    -1,    -1,    53,    -1,\n+       8,    78,    -1,    11,    -1,    -1,    -1,    15,    16,    17,\n+      18,    19,    20,    21,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,    36,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,\n+      -1,    -1,    -1,    -1,    -1,    53,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,\n+      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n+      78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    46,    -1,   172,    -1,    -1,   484,    -1,\n+      53,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n+     496,   188,    -1,    -1,    -1,   501,   193,   172,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,   216,\n+     217,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,\n+      -1,   216,   217,    -1,   172,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,\n+     188,    -1,    -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,\n+     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,   216,   217,\n+     287,    -1,   267,    -1,    -1,   270,    -1,    -1,    -1,   172,\n+      -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,    -1,   284,\n+      -1,    -1,   287,    -1,    -1,   188,    -1,    -1,    -1,    -1,\n+     193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,\n+      -1,    -1,   270,   216,   217,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,   231,   287,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,\n+      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n-      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n-     493,   494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n+      -1,    -1,   499,    -1,    -1,    -1,    -1,   380,    -1,   484,\n+      -1,    -1,   487,   488,   489,    -1,   491,   492,   493,   494,\n+     495,   496,    -1,    -1,   499,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,   487,\n+     488,   489,    -1,   491,   492,   493,   494,   495,   496,    -1,\n+      -1,   499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,   499,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,    -1,    -1,   499,    22,    23,\n-      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,\n-      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,\n-      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,\n-      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,\n-      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,\n-      74,    75,    76,    77,    78,    79,    80,    81,    82,    83,\n-      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,\n-      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,\n-     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,\n-     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,\n-     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,\n-     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,    -1,\n+      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,    -1,    -1,   499,    22,    23,    24,\n+      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,\n+      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,\n+      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,\n+      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,\n+      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,\n+      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,\n+      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,\n+      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,\n+     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,\n+     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,\n+     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,\n+     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,\n+     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,\n+     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,\n+     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,\n+     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,\n+     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,\n+     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,\n+     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,\n+     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,\n+     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,\n+     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,\n+     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,\n+     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,\n+     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,\n+     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,\n+     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,\n+     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,\n+     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,\n+     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,\n+     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,\n+     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,\n+     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,\n+     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,\n+     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,\n+     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,\n+     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,\n+     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,\n+     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,\n+     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,\n+     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,\n+     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,\n+     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,\n+     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,\n+     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,     3,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    22,    23,\n+      24,    25,    26,    27,    28,    29,    -1,    31,    32,    33,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    43,\n+      44,    -1,    46,    47,    48,    -1,    50,    51,    52,    53,\n+      54,    -1,    56,    57,    -1,    59,    60,    61,    62,    63,\n+      64,    -1,    -1,    67,    68,    69,    70,    71,    -1,    73,\n+      74,    75,    76,    77,    -1,    -1,    -1,    81,    82,    83,\n+      84,    85,    86,    -1,    88,    89,    90,    -1,    92,    93,\n+      94,    95,    96,    97,    -1,    -1,   100,   101,   102,   103,\n+     104,   105,   106,   107,   108,   109,   110,   111,   112,    -1,\n+     114,    -1,   116,   117,   118,   119,   120,   121,    -1,   123,\n+     124,   125,   126,   127,    -1,    -1,   130,   131,   132,   133,\n+     134,    -1,   136,   137,   138,    -1,   140,   141,   142,    -1,\n      144,   145,   146,   147,   148,   149,   150,   151,   152,   153,\n-     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,\n-     164,   165,   166,   167,   168,   169,   170,   171,   172,   173,\n-     174,   175,   176,   177,   178,   179,   180,   181,   182,   183,\n-     184,   185,   186,   187,   188,   189,   190,   191,   192,   193,\n-     194,   195,   196,   197,   198,   199,   200,   201,   202,   203,\n-     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,\n-     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,\n-     224,   225,   226,   227,   228,   229,   230,   231,   232,   233,\n+     154,    -1,   156,    -1,   158,   159,   160,   161,    -1,   163,\n+      -1,   165,    -1,    -1,    -1,   169,   170,   171,    -1,   173,\n+      -1,   175,    -1,   177,   178,   179,    -1,   181,   182,   183,\n+     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,\n+     194,   195,   196,   197,   198,   199,   200,    -1,   202,    -1,\n+     204,   205,   206,   207,   208,   209,   210,   211,    -1,   213,\n+      -1,   215,    -1,    -1,   218,    -1,   220,   221,   222,   223,\n+     224,   225,    -1,    -1,   228,    -1,   230,    -1,    -1,   233,\n      234,   235,   236,   237,   238,   239,   240,   241,   242,   243,\n      244,   245,   246,   247,   248,   249,   250,   251,   252,   253,\n-     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,\n-     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,\n-     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,\n-     284,   285,   286,   287,   288,   289,   290,   291,   292,   293,\n+     254,   255,   256,   257,   258,   259,   260,    -1,   262,   263,\n+     264,   265,   266,    -1,   268,   269,    -1,   271,    -1,   273,\n+     274,   275,   276,   277,   278,    -1,   280,   281,    -1,    -1,\n+     284,   285,   286,    -1,    -1,   289,   290,    -1,   292,    -1,\n      294,   295,   296,   297,   298,   299,   300,   301,   302,   303,\n-     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,\n-     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,\n-     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,\n-     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,\n-     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,\n+     304,    -1,    -1,    -1,    -1,   309,   310,   311,    -1,   313,\n+     314,   315,   316,   317,   318,    -1,   320,   321,   322,   323,\n+     324,   325,    -1,   327,   328,   329,   330,   331,   332,   333,\n+     334,    -1,   336,   337,   338,   339,   340,   341,   342,   343,\n+     344,   345,   346,   347,   348,    -1,   350,   351,    -1,   353,\n      354,   355,   356,   357,   358,   359,   360,   361,   362,   363,\n-     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,\n-     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,\n-     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,\n-     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,\n-     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,\n-     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,\n-     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,\n-     434,   435,   436,   437,   438,   439,   440,   441,   442,   443,\n-     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,\n-     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,\n+     364,   365,   366,   367,    -1,    -1,   370,   371,   372,   373,\n+     374,   375,   376,   377,   378,   379,    -1,   381,   382,   383,\n+     384,    -1,   386,   387,   388,   389,   390,   391,   392,   393,\n+     394,   395,   396,   397,   398,   399,   400,   401,    -1,   403,\n+     404,    -1,   406,    -1,   408,   409,   410,   411,   412,    -1,\n+     414,   415,    -1,    -1,   418,   419,   420,   421,   422,    -1,\n+     424,   425,   426,   427,   428,   429,   430,   431,    -1,    -1,\n+     434,   435,   436,    -1,   438,   439,   440,   441,    -1,   443,\n+     444,   445,   446,   447,   448,   449,    -1,   451,    -1,   453,\n+     454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,   463,\n      464,   465,   466,   467,   468,   469,   470,   471,   472,   473,\n      474,   475,   476,   477,   478,   479,   480,   481,   482,   483,\n        3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   493,\n@@ -14677,56 +14815,56 @@ static const yytype_int16 yycheck[] =\n      453,   454,   455,   456,   457,    -1,    -1,   460,    -1,    -1,\n      463,   464,   465,   466,   467,   468,   469,   470,   471,   472,\n      473,   474,   475,   476,   477,   478,   479,   480,   481,   482,\n-     483,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     483,     3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,\n      493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       22,    23,    24,    25,    26,    27,    28,    29,    -1,    31,\n-      32,    33,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    43,    44,    -1,    46,    47,    48,    -1,    50,    51,\n-      52,    53,    54,    -1,    56,    57,    -1,    59,    60,    61,\n+      32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,    -1,\n+      42,    43,    44,    -1,    46,    47,    48,    49,    50,    51,\n+      52,    53,    54,    55,    56,    57,    -1,    59,    60,    61,\n       62,    63,    64,    -1,    -1,    67,    68,    69,    70,    71,\n-      -1,    73,    74,    75,    76,    77,    -1,    -1,    -1,    81,\n-      82,    83,    84,    85,    86,    -1,    88,    89,    90,    -1,\n-      92,    93,    94,    95,    96,    97,    -1,    -1,   100,   101,\n+      -1,    73,    74,    75,    76,    77,    -1,    79,    -1,    81,\n+      82,    83,    84,    85,    86,    87,    88,    89,    90,    -1,\n+      92,    93,    94,    95,    96,    97,    -1,    99,   100,   101,\n      102,   103,   104,   105,   106,   107,   108,   109,   110,   111,\n-     112,    -1,   114,    -1,   116,   117,   118,   119,   120,   121,\n+     112,   113,   114,    -1,   116,   117,   118,   119,   120,   121,\n       -1,   123,   124,   125,   126,   127,    -1,    -1,   130,   131,\n      132,   133,   134,    -1,   136,   137,   138,    -1,   140,   141,\n      142,    -1,   144,   145,   146,   147,   148,   149,   150,   151,\n-     152,   153,   154,    -1,   156,    -1,   158,   159,   160,   161,\n-      -1,   163,    -1,   165,    -1,    -1,    -1,   169,   170,   171,\n-      -1,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n-     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,\n+     152,   153,   154,   155,   156,    -1,   158,   159,   160,   161,\n+      -1,   163,    -1,   165,   166,    -1,   168,   169,   170,   171,\n+     172,   173,    -1,   175,    -1,   177,   178,   179,    -1,   181,\n+     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,\n      192,    -1,   194,   195,   196,   197,   198,   199,   200,    -1,\n-     202,    -1,   204,   205,   206,   207,   208,   209,   210,   211,\n-      -1,   213,    -1,   215,    -1,    -1,   218,    -1,   220,   221,\n-     222,   223,   224,   225,    -1,    -1,   228,    -1,   230,    -1,\n+     202,   203,   204,   205,   206,   207,   208,   209,   210,   211,\n+      -1,   213,    -1,   215,   216,   217,   218,   219,   220,   221,\n+     222,   223,   224,   225,    -1,    -1,   228,   229,   230,   231,\n       -1,   233,   234,   235,   236,   237,   238,   239,   240,   241,\n      242,   243,   244,   245,   246,   247,   248,   249,   250,   251,\n-     252,   253,   254,   255,   256,   257,   258,   259,   260,    -1,\n-     262,   263,   264,   265,   266,    -1,   268,   269,    -1,   271,\n+     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,\n+     262,   263,   264,   265,   266,    -1,   268,   269,   270,   271,\n       -1,   273,   274,   275,   276,   277,   278,    -1,   280,   281,\n-      -1,    -1,   284,   285,   286,    -1,    -1,   289,   290,    -1,\n-     292,    -1,   294,   295,   296,   297,   298,   299,   300,   301,\n+     282,    -1,   284,   285,   286,    -1,    -1,   289,   290,   291,\n+     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,\n      302,   303,   304,    -1,    -1,    -1,    -1,   309,   310,   311,\n-      -1,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n+     312,   313,   314,   315,   316,   317,   318,    -1,   320,   321,\n      322,   323,   324,   325,    -1,   327,   328,   329,   330,   331,\n      332,   333,   334,    -1,   336,   337,   338,   339,   340,   341,\n      342,   343,   344,   345,   346,   347,   348,    -1,   350,   351,\n-      -1,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n-     362,   363,   364,   365,   366,   367,    -1,    -1,   370,   371,\n-     372,   373,   374,   375,   376,   377,   378,   379,    -1,   381,\n+     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,\n+     362,   363,   364,   365,   366,   367,    -1,   369,   370,   371,\n+     372,   373,   374,   375,   376,   377,   378,   379,   380,   381,\n      382,   383,   384,    -1,   386,   387,   388,   389,   390,   391,\n      392,   393,   394,   395,   396,   397,   398,   399,   400,   401,\n-      -1,   403,   404,    -1,   406,    -1,   408,   409,   410,   411,\n+      -1,   403,   404,    -1,   406,   407,   408,   409,   410,   411,\n      412,    -1,   414,   415,    -1,    -1,   418,   419,   420,   421,\n-     422,    -1,   424,   425,   426,   427,   428,   429,   430,   431,\n+     422,   423,   424,   425,   426,   427,   428,   429,   430,   431,\n       -1,    -1,   434,   435,   436,    -1,   438,   439,   440,   441,\n       -1,   443,   444,   445,   446,   447,   448,   449,    -1,   451,\n-      -1,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n+     452,   453,   454,   455,   456,   457,    -1,    -1,   460,    -1,\n       -1,   463,   464,   465,   466,   467,   468,   469,   470,   471,\n      472,   473,   474,   475,   476,   477,   478,   479,   480,   481,\n-     482,   483,     3,     4,     5,    -1,    -1,    -1,     9,    -1,\n-      -1,   493,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     482,   483,     3,     4,     5,    -1,    -1,    -1,     9,   491,\n+     492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    22,    23,    24,    25,    26,    27,    28,    29,    -1,\n       31,    32,    33,    -1,    -1,    -1,    37,    -1,    -1,    -1,\n       -1,    42,    43,    44,    -1,    46,    47,    48,    49,    50,\n@@ -14784,7 +14922,7 @@ static const yytype_int16 yycheck[] =\n       -1,    81,    82,    83,    84,    85,    86,    87,    88,    89,\n       90,    -1,    92,    93,    94,    95,    96,    97,    -1,    99,\n      100,   101,   102,   103,   104,   105,   106,   107,   108,   109,\n-     110,   111,   112,   113,   114,    -1,   116,   117,   118,   119,\n+     110,   111,   112,    -1,   114,    -1,   116,   117,   118,   119,\n      120,   121,    -1,   123,   124,   125,   126,   127,    -1,    -1,\n      130,   131,   132,   133,   134,    -1,   136,   137,   138,    -1,\n      140,   141,   142,    -1,   144,   145,   146,   147,   148,   149,\n@@ -14821,212 +14959,168 @@ static const yytype_int16 yycheck[] =\n       -1,   451,   452,   453,   454,   455,   456,   457,    -1,    -1,\n      460,    -1,    -1,   463,   464,   465,   466,   467,   468,   469,\n      470,   471,   472,   473,   474,   475,   476,   477,   478,   479,\n-     480,   481,   482,   483,     3,     4,     5,    -1,    -1,    -1,\n-       9,   491,   492,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    22,    23,    24,    25,    26,    27,    28,\n-      29,    -1,    31,    32,    33,    -1,    -1,    -1,    37,    -1,\n-      -1,    -1,    -1,    42,    43,    44,    -1,    46,    47,    48,\n-      49,    50,    51,    52,    53,    54,    55,    56,    57,    -1,\n-      59,    60,    61,    62,    63,    64,    -1,    -1,    67,    68,\n-      69,    70,    71,    -1,    73,    74,    75,    76,    77,    -1,\n-      79,    -1,    81,    82,    83,    84,    85,    86,    87,    88,\n-      89,    90,    -1,    92,    93,    94,    95,    96,    97,    -1,\n-      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,\n-     109,   110,   111,   112,    -1,   114,    -1,   116,   117,   118,\n-     119,   120,   121,    -1,   123,   124,   125,   126,   127,    -1,\n-      -1,   130,   131,   132,   133,   134,    -1,   136,   137,   138,\n-      -1,   140,   141,   142,    -1,   144,   145,   146,   147,   148,\n-     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,\n-     159,   160,   161,    -1,   163,    -1,   165,   166,    -1,   168,\n-     169,   170,   171,   172,   173,    -1,   175,    -1,   177,   178,\n-     179,    -1,   181,   182,   183,   184,   185,   186,   187,   188,\n-     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,\n-     199,   200,    -1,   202,   203,   204,   205,   206,   207,   208,\n-     209,   210,   211,    -1,   213,    -1,   215,   216,   217,   218,\n-     219,   220,   221,   222,   223,   224,   225,    -1,    -1,   228,\n-     229,   230,   231,    -1,   233,   234,   235,   236,   237,   238,\n-     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,\n-     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,\n-     259,   260,   261,   262,   263,   264,   265,   266,    -1,   268,\n-     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,\n-      -1,   280,   281,   282,    -1,   284,   285,   286,    -1,    -1,\n-     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,\n-     299,   300,   301,   302,   303,   304,    -1,    -1,    -1,    -1,\n-     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,\n-      -1,   320,   321,   322,   323,   324,   325,    -1,   327,   328,\n-     329,   330,   331,   332,   333,   334,    -1,   336,   337,   338,\n-     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,\n-      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,\n-     359,   360,   361,   362,   363,   364,   365,   366,   367,    -1,\n-     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,\n-     379,   380,   381,   382,   383,   384,    -1,   386,   387,   388,\n-     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,\n-     399,   400,   401,    -1,   403,   404,    -1,   406,   407,   408,\n-     409,   410,   411,   412,    -1,   414,   415,    -1,    -1,   418,\n-     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,\n-     429,   430,   431,    -1,    -1,   434,   435,   436,    -1,   438,\n-     439,   440,   441,    -1,   443,   444,   445,   446,   447,   448,\n-     449,    -1,   451,   452,   453,   454,   455,   456,   457,    -1,\n-      -1,   460,    -1,    -1,   463,   464,   465,   466,   467,   468,\n-     469,   470,   471,   472,   473,   474,   475,   476,   477,   478,\n-     479,   480,   481,   482,   483,    -1,    -1,     8,    -1,    -1,\n-      11,    -1,   491,   492,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,\n-      41,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,\n-      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,\n+     480,   481,   482,   483,    -1,    -1,     8,    -1,    -1,    11,\n+      -1,   491,   492,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    41,\n+      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,\n+      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,\n+      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,\n+     122,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,\n+      -1,    53,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    40,    -1,\n+      -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,    11,\n+     172,    53,    -1,    15,    16,    17,    18,    19,    20,    21,\n+      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,\n+      -1,   193,    -1,    -1,    36,    -1,    78,    -1,    -1,    -1,\n+     162,    -1,    -1,    -1,    46,   167,    -1,    -1,    -1,    -1,\n+     172,    53,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,   231,\n+      -1,   193,    -1,    -1,    -1,    -1,    78,    -1,    -1,   161,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,\n+      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,\n+      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+     172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,   231,\n+      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   216,   217,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,   231,\n+      -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     442,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    -1,    -1,    -1,   380,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n+      11,    -1,    -1,    -1,    15,    16,    17,    18,    19,    20,\n+      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    36,    -1,    -1,   380,    40,\n       -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,\n       11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    -1,\n-      -1,   122,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,\n+      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,\n       11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    36,    -1,    78,    -1,    40,\n+      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    40,\n       -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,    -1,\n-      11,   172,    53,    -1,    15,    16,    17,    18,    19,    20,\n-      21,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,\n-      -1,    -1,   193,    -1,    -1,    36,    -1,    78,    -1,    -1,\n-      -1,   162,    -1,    -1,    -1,    46,   167,    -1,    -1,    -1,\n-      -1,   172,    53,    -1,    -1,   216,   217,    -1,    -1,    -1,\n+      11,    -1,    53,    -1,    15,    16,    17,    18,    19,    20,\n+      21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,    36,    -1,    78,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n+      -1,   172,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,\n-     231,    -1,   193,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n-     161,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   193,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,    -1,\n       -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,\n      231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,\n      231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n+      -1,   162,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n       -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,   270,\n      231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,   380,\n+      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,\n-     231,    -1,    -1,   314,    -1,    -1,    -1,    -1,    -1,    -1,\n+     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,\n       -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   442,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   308,    -1,    -1,\n+      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,   380,\n+      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,\n+      11,    -1,    -1,    36,    15,    16,    17,    18,    19,    20,\n+      21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,   380,\n+      53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,    40,\n+      -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,    -1,\n+      -1,    -1,    53,   484,    -1,    78,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,   380,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,   380,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n-      -1,    11,    -1,    -1,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    36,    -1,    -1,   380,\n-      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,\n-      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    36,    -1,    78,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,\n-      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    36,    -1,    78,    -1,\n-      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,     8,    -1,\n-      -1,    11,    -1,    53,    -1,    15,    16,    17,    18,    19,\n-      20,    21,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n-     491,   492,   493,   494,   495,   496,    36,    -1,    78,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,\n-      -1,    -1,   172,    53,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,\n-      -1,    -1,    -1,   193,    -1,    -1,    -1,    -1,    78,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   167,    -1,    -1,\n-      -1,    -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,\n-      -1,   231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,\n-     270,   231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   162,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-      -1,    -1,   172,    -1,    -1,    -1,   216,   217,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,   188,    -1,\n-     270,   231,    -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,\n-     270,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-     380,    -1,    -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,\n-     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,\n-     380,    -1,    -1,    15,    16,    17,    18,    19,    20,    21,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,\n-      -1,    11,    -1,    -1,    36,    15,    16,    17,    18,    19,\n-      20,    21,    -1,    -1,    46,    -1,    -1,    -1,    -1,    -1,\n-     380,    53,    -1,    -1,    -1,    -1,    36,    -1,    -1,    -1,\n-      40,    -1,    -1,    -1,    -1,    -1,    46,    -1,    -1,    -1,\n-      -1,    -1,    -1,    53,   484,    -1,    78,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n-     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    78,    -1,\n+      -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,    -1,    -1,    -1,   172,\n+      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,    16,\n+      17,    18,    19,    20,    21,   188,    -1,    -1,    -1,    -1,\n+     193,   172,    -1,   484,    -1,    -1,   487,   488,   489,    36,\n+     491,   492,   493,   494,   495,   496,    -1,   188,    -1,    46,\n+      -1,    -1,   193,   216,   217,    -1,    53,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n+      -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,    -1,\n+      -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+     231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n+      -1,   284,    -1,    -1,   287,    -1,   267,    -1,    -1,   270,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,\n+      -1,    15,    16,    17,    18,    19,    20,    21,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   172,     8,    -1,    -1,    11,\n+      -1,    -1,    36,    15,    16,    -1,    -1,    19,    20,    21,\n+      -1,   188,    46,    -1,    -1,     8,   193,    -1,    11,    53,\n+      -1,    -1,    15,    16,    36,    -1,    19,    20,    21,    -1,\n+      -1,    -1,    -1,    -1,    46,    -1,    -1,   380,    -1,   216,\n+     217,    53,    -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    46,   231,    -1,    -1,    -1,    -1,   380,\n+      53,    -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,\n+     413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n+     267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,    -1,\n+     287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n-     172,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    15,\n-      16,    17,    18,    19,    20,    21,   188,    -1,    -1,    -1,\n-      -1,   193,   172,    -1,   484,    -1,    -1,   487,   488,   489,\n-      36,   491,   492,   493,   494,   495,   496,    -1,   188,    -1,\n-      46,    -1,    -1,   193,   216,   217,    -1,    53,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,\n+      -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n+     493,   494,   495,   496,   188,    -1,    -1,    -1,    -1,   193,\n+     172,    -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,\n+     491,   492,   493,   494,   495,   496,   188,    -1,    -1,   172,\n+      -1,   193,   216,   217,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,   188,    -1,   231,    -1,    -1,\n+     193,    -1,    -1,   380,   216,   217,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,\n-      -1,    -1,    -1,    -1,    -1,    -1,   216,   217,    -1,    -1,\n-      -1,    -1,    78,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   231,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   284,    -1,    -1,   287,    -1,   267,    -1,    -1,\n-     270,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   284,    -1,    -1,   287,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,    -1,\n-      -1,    -1,    15,    16,    17,    18,    19,    20,    21,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,   172,    -1,    -1,    -1,\n-      -1,    -1,    -1,    36,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,   188,    46,    -1,    -1,    -1,   193,    -1,    -1,\n-      53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n-     216,   217,    -1,    -1,    -1,    78,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,   231,    -1,    -1,    -1,    -1,\n-     380,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   413,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   267,    -1,    -1,   270,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   284,    -1,\n-      -1,   287,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   172,\n-      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n-     492,   493,   494,   495,   496,   188,    -1,    -1,    -1,    -1,\n-     193,    -1,    -1,    -1,   484,    -1,    -1,   487,   488,   489,\n-      -1,   491,   492,   493,   494,   495,   496,    -1,    -1,    -1,\n       -1,    -1,    -1,   216,   217,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   231,    -1,\n-      -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,   267,    -1,    -1,   270,    -1,   231,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,   267,    -1,    -1,   270,    -1,    -1,\n+     284,    -1,    -1,   287,    -1,   267,    -1,    -1,   270,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,   284,    -1,    -1,   287,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   284,    -1,   267,   287,    -1,   270,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,   284,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,    -1,\n+     487,   488,   489,    -1,   491,   492,   493,   494,   495,   496,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   484,    -1,\n-      -1,   487,   488,   489,    -1,   491,   492,   493,   494,   495,\n-     496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,   380,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n@@ -15035,10 +15129,10 @@ static const yytype_int16 yycheck[] =\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n       -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n-      -1,    -1,    -1,    -1,    -1,     3,    -1,     5,    -1,    -1,\n+     484,    -1,    -1,   487,   488,   489,    -1,   491,   492,   493,\n+     494,   495,   496,    -1,    -1,    -1,    -1,    -1,    -1,    -1,\n+      -1,    -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,\n+     492,   493,   494,   495,   496,     3,    -1,     5,    -1,    -1,\n       -1,   484,    -1,    -1,   487,   488,   489,    -1,   491,   492,\n      493,   494,   495,   496,    22,    23,    24,    25,    26,    27,\n       28,    29,    30,    31,    32,    33,    34,    35,    36,    37,\n@@ -17495,12 +17589,12 @@ static const yytype_uint16 yystos[] =\n      163,   167,   192,   208,   234,   305,   306,   307,   313,   316,\n      345,   354,   368,   375,   379,   389,   401,   405,   424,   437,\n      440,   443,   448,   462,   486,   500,   512,   513,   514,   515,\n-     526,   527,   529,   533,   549,   552,   553,   555,   557,   559,\n-     566,   568,   569,   617,   624,   627,   628,   645,   646,   647,\n-     648,   650,   652,   653,   657,   709,   710,   874,   877,   880,\n-     887,   888,   890,   891,   892,   899,   903,   909,   911,   916,\n-     920,   921,   922,   925,   928,   929,   932,   933,   935,   418,\n-     465,   567,   197,   361,   370,   405,   454,   106,   923,   567,\n+     526,   527,   529,   534,   550,   553,   554,   556,   558,   560,\n+     567,   569,   570,   618,   625,   628,   629,   646,   647,   648,\n+     649,   651,   653,   654,   658,   710,   711,   879,   882,   885,\n+     892,   893,   895,   896,   897,   904,   908,   914,   916,   921,\n+     925,   926,   927,   930,   933,   934,   938,   939,   941,   418,\n+     465,   568,   197,   361,   370,   405,   454,   106,   928,   568,\n        3,    22,    23,    24,    25,    26,    27,    28,    29,    31,\n       32,    33,    42,    43,    44,    46,    47,    48,    49,    50,\n       51,    52,    53,    54,    55,    56,    57,    59,    60,    61,\n@@ -17539,42 +17633,42 @@ static const yytype_uint16 yystos[] =\n      439,   440,   441,   443,   444,   445,   446,   447,   448,   449,\n      451,   452,   453,   454,   455,   456,   457,   460,   463,   464,\n      465,   466,   467,   468,   469,   470,   471,   472,   473,   474,\n-     475,   476,   477,   478,   479,   480,   481,   482,   483,   779,\n-     858,   862,   865,   938,   939,   940,     3,   171,   241,   398,\n-     862,   889,   938,   567,    55,   500,   640,     5,   106,   173,\n-     235,   287,   361,   409,   411,   427,   433,   436,   554,   615,\n-     861,   886,     5,    30,   316,   856,   862,   863,   106,   923,\n+     475,   476,   477,   478,   479,   480,   481,   482,   483,   780,\n+     863,   867,   870,   944,   945,   946,     3,   171,   241,   398,\n+     867,   894,   944,   568,    55,   500,   641,     5,   106,   173,\n+     235,   287,   361,   409,   411,   427,   433,   436,   555,   616,\n+     866,   891,     5,    30,   316,   861,   867,   868,   106,   928,\n       24,    79,    95,   106,   142,   152,   164,   169,   197,   240,\n      244,   310,   325,   358,   361,   370,   373,   391,   405,   412,\n-     421,   427,   454,   618,   619,   622,   567,   856,    98,   452,\n-     500,   515,   526,   527,   529,   549,   552,   555,   557,   559,\n-     566,   569,   617,   624,   627,   628,   645,   874,   877,   880,\n-     887,   888,   895,   899,   903,   909,   911,   916,   925,   928,\n-     932,   933,   935,   106,    73,   208,    66,    77,    79,   154,\n+     421,   427,   454,   619,   620,   623,   568,   861,    98,   452,\n+     500,   515,   526,   527,   529,   550,   553,   556,   558,   560,\n+     567,   570,   618,   625,   628,   629,   646,   879,   882,   885,\n+     892,   893,   900,   904,   908,   914,   916,   921,   930,   933,\n+     938,   939,   941,   106,    73,   208,    66,    77,    79,   154,\n      226,   273,   283,   294,   311,   357,   400,   420,   422,   426,\n-     448,   500,   646,   710,   712,   714,   724,   731,   732,   779,\n-     781,   782,   852,   862,   863,   106,   861,   862,   910,   910,\n-     862,   856,    30,   414,   418,   862,   926,   927,   930,   567,\n-      30,   128,   665,   666,   173,   235,   361,   374,   414,   904,\n-     905,   930,   567,   645,   657,   862,   931,   731,   862,   405,\n-     662,   852,   168,   500,   913,   500,   333,   658,   659,   856,\n-     658,   646,   647,     0,   503,   118,   207,   439,   143,   212,\n-     288,   432,   668,   669,   714,   714,   646,   648,   650,   504,\n-     452,   893,    30,   414,   418,   645,   931,   186,   852,   856,\n-     186,   852,   186,   731,   186,   852,   861,   500,   498,   502,\n-     833,   835,   645,   852,   186,   852,   409,   411,   409,   411,\n-     343,   186,   852,   852,   106,   169,   240,   333,   370,   405,\n-     454,   625,   197,    30,   856,   186,     3,   246,   421,   105,\n+     448,   500,   647,   711,   713,   715,   725,   732,   733,   780,\n+     782,   783,   857,   867,   868,   106,   866,   867,   915,   915,\n+     867,   861,    30,   414,   418,   867,   931,   932,   936,   568,\n+      30,   128,   666,   667,   173,   235,   361,   374,   414,   909,\n+     910,   936,   568,   646,   658,   867,   937,   732,   867,   405,\n+     663,   857,   168,   500,   918,   500,   333,   659,   660,   861,\n+     659,   647,   648,     0,   503,   118,   207,   439,   143,   212,\n+     288,   432,   669,   670,   715,   715,   647,   649,   651,   504,\n+     452,   898,    30,   414,   418,   646,   937,   186,   857,   861,\n+     186,   857,   186,   732,   186,   857,   866,   500,   498,   502,\n+     838,   840,   646,   857,   186,   857,   409,   411,   409,   411,\n+     343,   186,   857,   857,   106,   169,   240,   333,   370,   405,\n+     454,   626,   197,    30,   861,   186,     3,   246,   421,   105,\n      405,   405,   454,   364,     3,    37,    42,    49,    54,    55,\n       56,    57,    69,    70,    79,    81,    87,    99,   110,   111,\n      132,   160,   166,   168,   172,   186,   188,   203,   210,   211,\n      213,   216,   217,   219,   229,   231,   241,   260,   261,   262,\n      270,   275,   291,   293,   312,   330,   352,   356,   369,   376,\n      380,   383,   398,   407,   414,   415,   426,   432,   449,   452,\n-     623,   742,   744,   746,   748,   750,   752,   754,   755,   756,\n-     758,   759,   760,   762,   763,   866,   938,   941,   186,   620,\n-     862,   867,   186,   853,   856,   186,   856,   500,   558,   287,\n-     895,     3,    37,    42,    49,    53,    54,    55,    56,    57,\n+     624,   743,   745,   747,   749,   751,   753,   755,   756,   757,\n+     759,   760,   761,   763,   764,   871,   944,   947,   186,   621,\n+     867,   872,   186,   858,   861,   186,   861,   500,   559,   287,\n+     900,     3,    37,    42,    49,    53,    54,    55,    56,    57,\n       69,    70,    77,    79,    81,    87,    99,   110,   111,   148,\n      154,   160,   166,   168,   171,   172,   177,   178,   188,   203,\n      204,   210,   211,   213,   216,   217,   219,   229,   231,   241,\n@@ -17582,251 +17676,253 @@ static const yytype_uint16 yystos[] =\n      294,   311,   312,   315,   330,   352,   356,   369,   376,   380,\n      383,   398,   400,   407,   414,   415,   420,   422,   426,   448,\n      449,   452,   469,   470,   471,   472,   473,   474,   475,   476,\n-     477,   478,   479,   896,   898,   899,   901,   902,   938,   942,\n-     893,   861,   862,   889,   910,   500,   500,   162,   500,   646,\n-     732,   500,   500,   852,   500,   500,   167,   500,   500,   500,\n-     500,   646,   710,   714,   724,    40,   725,   726,   862,   725,\n-     368,   504,   649,    37,    42,    99,   168,   203,   219,   229,\n-     261,   305,   312,   352,   369,   437,   728,   726,    40,   725,\n-     727,   862,   486,   736,   493,   835,   861,   489,   500,   500,\n-     875,   483,   218,   502,   282,     4,     6,     7,     8,     9,\n+     477,   478,   479,   901,   903,   904,   906,   907,   944,   948,\n+     898,   866,   867,   894,   915,   500,   500,   162,   500,   647,\n+     733,   500,   500,   857,   500,   500,   167,   500,   500,   500,\n+     500,   647,   711,   715,   725,    40,   726,   727,   867,   726,\n+     368,   504,   650,    37,    42,    99,   168,   203,   219,   229,\n+     261,   305,   312,   352,   369,   437,   729,   727,    40,   726,\n+     728,   867,   486,   737,   493,   840,   866,   489,   500,   500,\n+     880,   483,   218,   502,   282,     4,     6,     7,     8,     9,\n       10,    39,    54,    56,    57,    65,    69,    70,    81,   110,\n      111,   113,   148,   155,   160,   177,   178,   210,   211,   213,\n-     260,   262,   267,   272,   275,   284,   330,   356,   383,   414,\n-     415,   423,   449,   484,   491,   492,   493,   498,   500,   505,\n-     506,   507,   508,   646,   699,   747,   750,   753,   754,   755,\n-     757,   758,   759,   762,   763,   774,   776,   777,   778,   779,\n-     780,   782,   783,   797,   798,   805,   827,   832,   842,   843,\n-     844,   858,   859,   860,   861,   862,   841,   843,   904,   904,\n-     861,   904,   483,   167,   416,   489,   502,   835,   731,   917,\n-       3,   166,   168,   452,   899,   912,   914,   166,   915,   774,\n-     811,   812,   658,   504,   500,   869,   501,   501,   514,   167,\n-     287,   536,   917,    30,   128,   663,   663,    59,   663,   157,\n-     162,   232,   279,   674,   676,   677,   702,   704,   705,   706,\n-     176,   282,   442,   282,   668,   669,   500,   852,   483,   218,\n-     148,    26,    32,   133,   286,   341,   345,   375,   445,   520,\n-     523,   524,   341,   148,    40,    60,   104,   196,   245,   253,\n-     265,   296,   341,   347,   370,   375,   389,   523,   560,   563,\n-     148,   341,   375,   523,   148,   341,   375,   523,    40,   924,\n-       3,    30,    37,    42,    49,    55,    79,    81,    87,    99,\n-     128,   166,   168,   171,   172,   188,   203,   216,   217,   219,\n-     229,   231,   241,   261,   270,   291,   293,   312,   352,   369,\n-     380,   398,   407,   426,   450,   452,   501,   774,   814,   815,\n-     864,   870,   938,   943,   774,   834,     3,    30,    34,    35,\n-      36,    38,    39,    40,    41,    45,    58,    65,    66,    72,\n-      78,    80,    91,    98,   113,   115,   122,   128,   129,   135,\n-     139,   143,   155,   157,   162,   164,   167,   174,   176,   180,\n-     193,   201,   212,   214,   226,   227,   232,   267,   272,   279,\n-     282,   283,   287,   288,   305,   306,   307,   308,   319,   326,\n-     335,   349,   368,   385,   402,   405,   413,   416,   417,   423,\n-     432,   433,   437,   442,   448,   450,   458,   459,   461,   462,\n-     857,   871,   938,   942,   944,   833,   501,   500,   604,   267,\n-     167,   106,   361,   615,   267,   878,    40,   852,   454,   186,\n-     852,   186,   852,   937,   186,   852,   186,   852,    87,   883,\n-     148,   466,    88,   125,   299,   410,   451,   761,   761,   761,\n-     500,   749,   749,   315,   500,   751,   148,   500,    69,    70,\n-     761,   749,   746,   464,   486,   500,   764,   500,   764,   500,\n-      63,   348,   504,   621,   500,    39,   745,   500,   107,   108,\n-     183,   184,   247,   248,   249,   250,   251,   252,   255,   256,\n-     365,   366,   480,   481,   500,   765,   766,   767,   768,   769,\n-     770,   771,   772,   773,   749,   148,   504,   621,   502,   868,\n-     148,   504,   621,   148,   282,   812,   343,   501,   504,     4,\n-     155,   282,   423,   491,   492,   562,   565,   860,   861,   894,\n-     896,   897,   900,   895,   500,   635,   639,   416,   774,   812,\n-     500,     3,   765,   766,   767,   768,   769,   770,   771,   772,\n-     817,   818,   861,   726,   727,   774,   852,   774,   819,   491,\n-     492,   775,   776,   798,   805,   821,   862,   500,   774,   811,\n-     822,   774,    58,   167,   227,   417,   774,   812,   825,   774,\n-     501,   863,   407,   682,   683,   500,   683,   665,   666,   714,\n-     214,   660,   219,    37,   219,   369,   728,   219,   291,   729,\n-     714,   729,   219,   728,   500,   219,   729,   219,   144,   194,\n-     716,   219,   683,   500,   863,   683,   500,   289,   562,   900,\n-     906,   908,   814,   744,   816,    40,   230,   862,   500,   498,\n-     646,   774,   831,   500,   646,   774,   500,   500,   774,   774,\n-     774,   144,   845,   846,   774,   812,   813,   646,   774,   811,\n-       9,     3,   873,   799,   800,   801,   863,   835,   500,   861,\n-     500,   860,   861,     3,     8,    11,    15,    16,    17,    18,\n-      19,    20,    21,    36,    40,    46,    53,    78,   172,   188,\n-     193,   216,   217,   231,   267,   270,   284,   287,   380,   484,\n-     487,   488,   489,   491,   492,   493,   494,   495,   496,   803,\n-     804,   805,   807,   839,   463,   784,   293,   774,   504,   660,\n-     500,   861,   836,   502,   835,   660,     3,   113,   235,   562,\n-     763,   861,   907,   102,   113,   908,   113,   908,   862,    40,\n-     862,   501,   504,   893,   504,   501,   659,   853,   854,    40,\n-     917,   187,   343,   214,   375,   648,   648,    30,   670,   671,\n-     774,    59,   648,   664,   159,   264,   690,   221,   265,   329,\n-     378,   439,     4,     9,    30,   685,   774,   491,   492,   686,\n-     687,   774,   776,   702,   703,   677,   676,   674,   675,   162,\n-     705,   277,   707,    59,   654,   655,   656,   717,   775,   843,\n-     843,   674,   702,   812,   869,   230,   852,    72,    80,    91,\n-     164,   186,   319,   433,   586,   596,   611,   862,    80,    91,\n-     528,    91,   528,   500,   416,   500,   584,   239,   436,   584,\n-      91,   504,   416,   852,   746,   562,    59,   564,   562,   562,\n-     104,   245,   253,    59,   416,   462,   486,   561,   258,   361,\n-     561,   563,   731,    91,   416,   528,   361,   852,   416,   361,\n-     862,   635,   814,   814,   815,   504,   668,   669,    13,    14,\n-     499,   510,   416,   603,   608,   862,   462,   638,   148,   861,\n-     852,   852,   333,   370,   405,   454,   625,   148,    98,   555,\n-     569,   879,   880,   933,   140,   744,   852,   267,   556,   560,\n-     267,   500,   604,    40,   267,   604,   267,   500,   626,   186,\n-     598,   862,   884,     3,   500,   813,   860,   623,   816,   761,\n-     761,    39,   745,   414,   414,   860,   860,   741,   862,   744,\n-     741,   498,   498,   860,   860,   416,   416,   416,   416,   620,\n-     867,   857,   502,   853,   856,   856,   867,   501,   895,   901,\n-       4,   860,     4,   860,   637,   644,   871,    55,   100,   119,\n-     137,   141,   163,   166,   181,   272,   280,   301,   327,   641,\n-     861,    40,   501,   774,   501,   167,   504,   501,   308,   820,\n-     501,   775,   775,    11,    15,    16,    19,    20,    21,   193,\n-     216,   284,   487,   488,   489,   491,   492,   493,   494,   495,\n-     496,   805,   775,   501,   733,   734,   781,   162,   167,   823,\n-     824,   504,   501,    40,   825,   812,   825,   825,   167,   501,\n-      40,   725,   500,     4,     9,   678,   680,   681,   862,   854,\n-     843,   841,   173,   235,   405,   409,   411,   436,   661,   852,\n-     459,   737,   714,   714,   219,   714,   282,   442,   730,   714,\n-     219,   843,   714,   714,   274,   274,   500,   714,   738,   739,\n-     863,   500,   738,   863,   504,   501,   504,   501,   504,   529,\n-     627,   645,   876,   916,   812,   813,   458,   828,   829,   774,\n+     241,   260,   262,   267,   272,   275,   284,   330,   356,   383,\n+     414,   415,   423,   449,   484,   491,   492,   493,   498,   500,\n+     505,   506,   507,   508,   647,   700,   748,   751,   754,   755,\n+     756,   758,   759,   760,   763,   764,   775,   777,   778,   779,\n+     780,   781,   783,   784,   798,   799,   810,   832,   837,   847,\n+     848,   849,   863,   864,   865,   866,   867,   846,   848,   909,\n+     909,   866,   909,   483,   167,   416,   489,   502,   840,   732,\n+     922,     3,   166,   168,   452,   904,   917,   919,   166,   920,\n+     775,   816,   817,   659,   504,   500,   874,   501,   501,   514,\n+     167,   287,   537,   922,    30,   128,   664,   664,    59,   664,\n+     157,   162,   232,   279,   675,   677,   678,   703,   705,   706,\n+     707,   176,   282,   442,   282,   669,   670,   500,   857,   406,\n+     935,   483,   218,   148,    26,    32,   133,   286,   341,   345,\n+     375,   445,   520,   523,   524,   341,   148,    40,    60,   104,\n+     196,   245,   253,   265,   296,   341,   347,   370,   375,   389,\n+     523,   561,   564,   148,   341,   375,   523,   148,   341,   375,\n+     523,    40,   929,     3,    30,    37,    42,    49,    55,    79,\n+      81,    87,    99,   128,   166,   168,   171,   172,   188,   203,\n+     216,   217,   219,   229,   231,   241,   261,   270,   291,   293,\n+     312,   352,   369,   380,   398,   407,   426,   450,   452,   501,\n+     775,   819,   820,   869,   875,   944,   949,   775,   839,     3,\n+      30,    34,    35,    36,    38,    39,    40,    41,    45,    58,\n+      65,    66,    72,    78,    80,    91,    98,   113,   115,   122,\n+     128,   129,   135,   139,   143,   155,   157,   162,   164,   167,\n+     174,   176,   180,   193,   201,   212,   214,   226,   227,   232,\n+     267,   272,   279,   282,   283,   287,   288,   305,   306,   307,\n+     308,   319,   326,   335,   349,   368,   385,   402,   405,   413,\n+     416,   417,   423,   432,   433,   437,   442,   448,   450,   458,\n+     459,   461,   462,   862,   876,   944,   948,   950,   838,   501,\n+     500,   605,   267,   167,   106,   361,   616,   267,   883,    40,\n+     857,   454,   186,   857,   186,   857,   943,   186,   857,   186,\n+     857,    87,   888,   148,   466,    88,   125,   299,   410,   451,\n+     762,   762,   762,   500,   750,   750,   315,   500,   752,   148,\n+     500,    69,    70,   762,   750,   747,   464,   486,   500,   765,\n+     500,   765,   500,    63,   348,   504,   622,   500,    39,   746,\n+     500,   107,   108,   183,   184,   247,   248,   249,   250,   251,\n+     252,   255,   256,   365,   366,   480,   481,   500,   766,   767,\n+     768,   769,   770,   771,   772,   773,   774,   750,   148,   504,\n+     622,   502,   873,   148,   504,   622,   148,   282,   817,   343,\n+     501,   504,     4,   155,   282,   423,   491,   492,   563,   566,\n+     865,   866,   899,   901,   902,   905,   900,   500,   636,   640,\n+     416,   775,   817,   500,     3,   766,   767,   768,   769,   770,\n+     771,   772,   773,   822,   823,   866,   727,   728,   775,   857,\n+     775,   824,   491,   492,   776,   777,   799,   810,   826,   867,\n+     500,   775,   816,   827,   775,    58,   167,   227,   417,   775,\n+     817,   830,   775,   501,   868,   407,   683,   684,   500,   684,\n+     666,   667,   715,   214,   661,   219,    37,   219,   369,   729,\n+     219,   291,   730,   715,   730,   219,   729,   500,   219,   730,\n+     219,   144,   194,   717,   219,   684,   500,   868,   684,   500,\n+     289,   563,   905,   911,   913,   819,   745,   821,    40,   230,\n+     867,   500,   498,   647,   775,   836,   500,   647,   508,   775,\n+     500,   500,   775,   775,   775,   144,   850,   851,   775,   817,\n+     818,   647,   775,   816,     9,     3,   878,   800,   801,   802,\n+     868,   840,   500,   866,   500,   865,   866,     3,     8,    11,\n+      15,    16,    17,    18,    19,    20,    21,    36,    40,    46,\n+      53,    78,   172,   188,   193,   216,   217,   231,   267,   270,\n+     284,   287,   380,   484,   487,   488,   489,   491,   492,   493,\n+     494,   495,   496,   808,   809,   810,   812,   844,   463,   785,\n+     293,   775,   504,   661,   500,   866,   841,   502,   840,   661,\n+       3,   113,   235,   563,   764,   866,   912,   102,   113,   913,\n+     113,   913,   867,    40,   867,   501,   504,   898,   504,   501,\n+     660,   858,   859,    40,   922,   187,   343,   214,   375,   649,\n+     649,    30,   671,   672,   775,    59,   649,   665,   159,   264,\n+     691,   221,   265,   329,   378,   439,     4,     9,    30,   686,\n+     775,   491,   492,   687,   688,   775,   777,   703,   704,   678,\n+     677,   675,   676,   162,   706,   277,   708,    59,   655,   656,\n+     657,   718,   776,   848,   848,   675,   703,   817,   874,   230,\n+     857,    72,    80,    91,   164,   186,   319,   433,   587,   597,\n+     612,   867,    80,    91,   528,    91,   528,   500,   416,   500,\n+     585,   239,   436,   585,    91,   504,   416,   857,   747,   563,\n+      59,   565,   563,   563,   104,   245,   253,    59,   416,   462,\n+     486,   562,   258,   361,   562,   564,   732,    91,   416,   528,\n+     361,   857,   416,   361,   867,   636,   819,   819,   820,   504,\n+     669,   670,    13,    14,   499,   510,   416,   604,   609,   867,\n+     462,   639,   148,   866,   857,   857,   333,   370,   405,   454,\n+     626,   148,    98,   556,   570,   884,   885,   939,   140,   745,\n+     857,   267,   557,   561,   267,   500,   605,    40,   267,   605,\n+     267,   500,   627,   186,   599,   867,   889,     3,   500,   818,\n+     865,   624,   821,   762,   762,    39,   746,   414,   414,   865,\n+     865,   742,   867,   745,   742,   498,   498,   865,   865,   416,\n+     416,   416,   416,   621,   872,   862,   502,   858,   861,   861,\n+     872,   501,   900,   906,     4,   865,     4,   865,   638,   645,\n+     876,    55,   100,   119,   137,   141,   163,   166,   181,   272,\n+     280,   301,   327,   642,   866,    40,   501,   775,   501,   167,\n+     504,   501,   308,   825,   501,   776,   776,    11,    15,    16,\n+      19,    20,    21,   193,   216,   284,   487,   488,   489,   491,\n+     492,   493,   494,   495,   496,   810,   776,   501,   734,   735,\n+     782,   162,   167,   828,   829,   504,   501,    40,   830,   817,\n+     830,   830,   167,   501,    40,   726,   500,     4,     9,   679,\n+     681,   682,   867,   859,   848,   846,   173,   235,   405,   409,\n+     411,   436,   662,   857,   459,   738,   715,   715,   219,   715,\n+     282,   442,   731,   715,   219,   848,   715,   715,   274,   274,\n+     500,   715,   739,   740,   868,   500,   739,   868,   504,   501,\n+     504,   501,   504,   529,   628,   629,   646,   881,   921,   817,\n+     818,   458,   833,   834,   775,   775,   803,   804,   805,   806,\n        8,    15,    16,    19,    20,    21,   487,   488,   489,   491,\n-     492,   493,   494,   495,   496,   803,   808,   862,   501,   812,\n-     500,   862,   343,   850,   162,   499,   501,   504,   504,   509,\n-     510,   812,   774,   773,   773,   744,   774,   774,   774,   774,\n-     774,   774,   774,   774,     5,   871,   872,   414,    45,   402,\n-     840,   867,   774,   774,   500,   646,   826,   128,   155,   267,\n-     272,   277,   423,   434,   774,   272,   500,   774,   416,    53,\n-     172,   188,   193,   231,   380,   774,   774,   774,   774,   774,\n-     774,   774,   774,   774,   774,    30,    38,   385,   802,   498,\n-     502,   838,   176,   158,   785,   356,   500,   798,   844,   167,\n-     711,   814,   833,   493,   711,   500,   861,   862,   852,   912,\n-     852,   920,   774,   504,   501,   500,   442,   919,   531,   852,\n-     500,   535,   545,   546,   548,   862,    41,   122,   672,   504,\n-     442,   672,   258,   648,   356,   357,   491,   492,   687,   689,\n-     776,   378,   221,   283,   304,   304,   504,   495,     4,   688,\n-     860,   688,   356,   357,   689,   851,   852,   271,   382,   708,\n-     500,   854,   855,   504,   176,   442,   193,   176,   214,   703,\n-     675,   501,   341,   523,   500,   186,   596,   856,   221,   267,\n-     221,   442,   500,   589,   743,   744,   856,   862,   186,   856,\n-     186,   862,    26,   133,   375,   519,   522,   580,   594,   871,\n-     856,   588,   607,   871,   856,   520,   856,   341,   375,   523,\n-     560,   562,   867,   856,   562,   867,   856,   562,   341,   375,\n-     523,   856,   856,   856,   856,   341,   375,   523,   856,   856,\n-     668,   668,   668,   450,   815,   187,   346,   667,   774,   774,\n-     774,   834,   324,   634,   501,   504,   280,   167,   416,   629,\n-     852,   167,   878,   454,   852,   852,   937,   852,   852,   852,\n-     287,   615,   500,   646,   500,   148,   148,   231,   586,   596,\n-     599,   602,   612,   614,   862,   462,   464,   591,   147,   645,\n-     148,   462,   885,   148,   501,   814,    40,   267,   282,   812,\n-     501,   501,   621,   501,   498,   483,   483,   501,   501,   501,\n-     504,   744,   501,   860,   499,   860,   501,   501,   766,   768,\n-     769,   770,   769,   770,   770,   621,   857,   621,   282,   621,\n-     501,   504,   493,   500,   562,   636,   900,    40,   633,   861,\n-     633,   267,   272,   327,   633,    59,   633,   635,   744,   501,\n-     774,   774,   774,   823,   744,   775,   775,   775,   775,   775,\n-     775,   128,   267,   277,   775,   775,   775,   775,   775,   775,\n-     775,   775,   775,   775,   501,   504,    40,   735,   774,   774,\n-     824,   823,   744,   501,   501,   501,   812,   744,   854,   304,\n-     495,   304,   357,   495,   500,   500,   501,   660,   409,   411,\n-     409,   411,   852,   662,   662,   662,   774,   176,   691,   730,\n-     730,   714,   774,   500,   714,   162,   730,   500,   721,   863,\n-     730,   501,   504,   744,   738,   501,   906,   744,   501,   499,\n-     774,   135,   829,   830,   501,   501,   502,   501,   854,   500,\n-     774,   847,   862,   774,   799,   774,   501,   501,   483,   775,\n-     775,   141,   812,   167,   128,   155,   272,   277,   423,   434,\n-     500,   141,   808,   774,   402,   840,   774,   826,   774,   416,\n-     500,   646,   774,   834,   857,   500,   500,   151,   786,   712,\n-     713,   737,   668,   846,   737,   860,   773,   869,   869,   876,\n-     713,   459,   918,   113,   295,   500,   530,   645,    40,   541,\n-     548,   504,   711,   489,   836,   485,   673,   671,   284,   803,\n-     806,   673,     4,   860,   689,   283,   439,   686,   504,   238,\n-     854,   654,    59,   843,   500,   863,    59,   258,   416,   774,\n-     267,   611,   500,   148,   500,   589,   197,   608,   609,   570,\n-      40,   171,   579,   605,   570,    26,   133,   345,   347,   375,\n-     516,   517,   518,   524,   525,   148,   621,   148,   621,   580,\n-     594,   580,   501,   504,   573,   861,   501,   504,   489,   502,\n+     492,   493,   494,   495,   496,   808,   813,   867,   501,   817,\n+     500,   867,   343,   855,   162,   499,   501,   504,   504,   509,\n+     510,   817,   775,   774,   774,   745,   775,   775,   775,   775,\n+     775,   775,   775,   775,     5,   876,   877,   414,    45,   402,\n+     845,   872,   775,   775,   500,   647,   831,   128,   155,   267,\n+     272,   277,   423,   434,   775,   272,   500,   775,   416,    53,\n+     172,   188,   193,   231,   380,   775,   775,   775,   775,   775,\n+     775,   775,   775,   775,   775,    30,    38,   385,   807,   498,\n+     502,   843,   176,   158,   786,   356,   500,   799,   849,   167,\n+     712,   819,   838,   493,   712,   500,   866,   867,   857,   917,\n+     857,   925,   775,   504,   501,   500,   442,   924,   531,   857,\n+     500,   536,   546,   547,   549,   867,    41,   122,   673,   504,\n+     442,   673,   258,   649,   356,   357,   491,   492,   688,   690,\n+     777,   378,   221,   283,   304,   304,   504,   495,     4,   689,\n+     865,   689,   356,   357,   690,   856,   857,   271,   382,   709,\n+     500,   859,   860,   504,   176,   442,   193,   176,   214,   704,\n+     676,   501,   341,   523,   500,   186,   597,   861,   221,   267,\n+     221,   442,   500,   590,   744,   745,   861,   867,   186,   861,\n+     186,   867,    26,   133,   375,   519,   522,   581,   595,   876,\n+     861,   589,   608,   876,   861,   520,   861,   341,   375,   523,\n+     561,   563,   872,   861,   563,   872,   861,   563,   341,   375,\n+     523,   861,   861,   861,   861,   341,   375,   523,   861,   861,\n+     669,   669,   669,   450,   820,   187,   346,   668,   775,   775,\n+     775,   839,   324,   635,   501,   504,   280,   167,   416,   630,\n+     857,   167,   883,   454,   857,   857,   943,   857,   857,   857,\n+     287,   616,   500,   647,   500,   148,   148,   231,   587,   597,\n+     600,   603,   613,   615,   867,   462,   464,   592,   147,   646,\n+     148,   462,   890,   148,   501,   819,    40,   267,   282,   817,\n+     501,   501,   622,   501,   498,   483,   483,   501,   501,   501,\n+     504,   745,   501,   865,   499,   865,   501,   501,   767,   769,\n+     770,   771,   770,   771,   771,   622,   862,   622,   282,   622,\n+     501,   504,   493,   500,   563,   637,   905,    40,   634,   866,\n+     634,   267,   272,   327,   634,    59,   634,   636,   745,   501,\n+     775,   775,   775,   828,   745,   776,   776,   776,   776,   776,\n+     776,   128,   267,   277,   776,   776,   776,   776,   776,   776,\n+     776,   776,   776,   776,   501,   504,    40,   736,   775,   775,\n+     829,   828,   745,   501,   501,   501,   817,   745,   859,   304,\n+     495,   304,   357,   495,   500,   500,   501,   661,   409,   411,\n+     409,   411,   857,   663,   663,   663,   775,   176,   692,   731,\n+     731,   715,   775,   500,   715,   162,   731,   500,   722,   868,\n+     731,   501,   504,   745,   739,   501,   911,   745,   501,   499,\n+     775,   135,   834,   835,   501,   510,   504,   509,   501,   502,\n+     501,   859,   500,   775,   852,   867,   775,   800,   775,   501,\n+     501,   483,   776,   776,   141,   817,   167,   128,   155,   272,\n+     277,   423,   434,   500,   141,   813,   775,   402,   845,   775,\n+     831,   775,   416,   500,   647,   775,   839,   862,   500,   500,\n+     151,   787,   713,   714,   738,   669,   851,   738,   865,   774,\n+     874,   874,   881,   714,   459,   923,    59,   532,    40,   542,\n+     549,   504,   712,   489,   841,   485,   674,   672,   284,   808,\n+     811,   674,     4,   865,   690,   283,   439,   687,   504,   238,\n+     859,   655,    59,   848,   500,   868,    59,   258,   416,   775,\n+     267,   612,   500,   148,   500,   590,   197,   609,   610,   571,\n+      40,   171,   580,   606,   571,    26,   133,   345,   347,   375,\n+     516,   517,   518,   524,   525,   148,   622,   148,   622,   581,\n+     595,   581,   501,   504,   574,   866,   501,   504,   489,   502,\n      416,   361,    91,   416,   528,   361,   416,   416,   416,   361,\n-     667,   667,   667,   815,   274,   274,   501,   499,   392,   393,\n-     643,   861,   603,   634,   167,   861,   852,   556,   500,    40,\n-     604,   626,   878,   343,   405,   550,   551,   861,   608,   852,\n-     852,   937,   852,   501,   504,   280,   584,   280,   282,   583,\n-     856,   462,   936,   852,   584,    40,   852,   501,   405,   774,\n-     148,   852,   501,   745,   860,   764,   764,   745,   862,   745,\n-     499,   499,   867,   637,   631,   642,   900,   861,   861,   272,\n-     608,   493,   608,   861,   493,   608,   861,   501,   501,   824,\n-     167,   128,   277,   500,   736,   733,   500,   501,   501,   501,\n-     862,   678,   737,   662,   662,   662,   662,   852,   852,   852,\n-      59,   180,   700,   730,   854,   500,   718,   719,   720,   777,\n-     858,   854,   162,   739,    78,   740,   501,   413,   774,   139,\n-     808,   501,   774,   847,   848,   849,    40,   193,   501,   773,\n-     774,    36,    36,   774,   501,   774,   167,   500,   816,   774,\n-     501,   141,   775,   775,   141,   141,   774,   774,   499,   510,\n-     500,   837,   669,   459,   774,   292,   790,   504,   691,   667,\n-     850,   691,   501,   501,   774,   349,   539,   448,   404,   441,\n-     540,   534,   544,   862,   282,   537,   862,   501,   504,   535,\n-     918,   774,   159,   225,   500,   673,   283,   852,   501,   855,\n-     176,   646,   647,   843,   855,   856,   856,   501,   148,   609,\n-     596,   609,   570,   598,   504,   501,   115,   201,   265,   267,\n-     595,   500,    33,    59,   616,   605,    72,    78,    91,   113,\n-     115,   201,   267,   272,   319,   335,   433,   442,   575,   576,\n-     590,   171,   113,   185,   267,   584,   561,   105,   113,   171,\n-     267,   391,   394,   563,   584,   375,   518,   427,   856,   862,\n-     522,   607,     3,    37,    42,    49,    55,    79,    81,    87,\n+     668,   668,   668,   820,   274,   274,   501,   499,   392,   393,\n+     644,   866,   604,   635,   167,   866,   857,   557,   500,    40,\n+     605,   627,   883,   343,   405,   551,   552,   866,   609,   857,\n+     857,   943,   857,   501,   504,   280,   585,   280,   282,   584,\n+     861,   462,   942,   857,   585,    40,   857,   501,   405,   775,\n+     148,   857,   501,   746,   865,   765,   765,   746,   867,   746,\n+     499,   499,   872,   638,   632,   643,   905,   866,   866,   272,\n+     609,   493,   609,   866,   493,   609,   866,   501,   501,   829,\n+     167,   128,   277,   500,   737,   734,   500,   501,   501,   501,\n+     867,   679,   738,   663,   663,   663,   663,   857,   857,   857,\n+      59,   180,   701,   731,   859,   500,   719,   720,   721,   778,\n+     863,   859,   162,   740,    78,   741,   501,   413,   775,   139,\n+     775,   803,   813,   501,   775,   852,   853,   854,    40,   193,\n+     501,   774,   775,    36,    36,   775,   501,   775,   167,   500,\n+     821,   775,   501,   141,   776,   776,   141,   141,   775,   775,\n+     499,   510,   500,   842,   670,   459,   775,   292,   791,   504,\n+     692,   668,   855,   692,   501,   501,   775,   349,   540,   258,\n+     311,   113,   295,   500,   530,   646,   867,   501,   504,   536,\n+     923,   775,   159,   225,   500,   674,   283,   857,   501,   860,\n+     176,   647,   648,   848,   860,   861,   861,   501,   148,   610,\n+     597,   610,   571,   599,   504,   501,   115,   201,   265,   267,\n+     596,   500,    33,    59,   617,   606,    72,    78,    91,   113,\n+     115,   201,   267,   272,   319,   335,   433,   442,   576,   577,\n+     591,   171,   113,   185,   267,   585,   562,   105,   113,   171,\n+     267,   391,   394,   564,   585,   375,   518,   427,   861,   867,\n+     522,   608,     3,    37,    42,    49,    55,    79,    81,    87,\n       99,   166,   168,   171,   172,   188,   203,   216,   217,   219,\n      229,   231,   241,   261,   266,   270,   284,   291,   293,   312,\n      352,   369,   376,   380,   398,   407,   426,   432,   452,   491,\n-     492,   562,   571,   610,   744,   806,   861,   864,   938,   944,\n-     871,   856,   856,   856,   856,   856,   856,   856,   856,   856,\n-     856,   501,   501,   501,   668,   561,   643,   861,   500,   602,\n-     645,   885,    40,   615,   186,   852,   501,   504,   501,   556,\n-     500,    40,   593,   591,   599,    84,   558,   105,   265,   604,\n-     645,   626,   645,   598,   442,   882,   499,   744,   621,   501,\n-     504,   608,   775,   167,   500,   816,   738,   501,   504,   501,\n-     691,   852,   852,   852,   852,    30,   101,   177,   355,   500,\n-     692,   693,   694,   695,   696,   697,   698,   774,   774,   461,\n-     787,   501,   776,   809,   810,   193,   176,   715,   719,   500,\n-     501,   721,   722,   723,   867,   774,   504,   501,   862,   774,\n-     776,   774,   774,   774,   816,   501,   774,    36,    36,   774,\n-     774,   141,   501,   834,   501,   814,   501,   774,   501,   500,\n-     791,   862,   700,   501,   700,   861,   842,   447,   501,   504,\n-     836,    89,   539,   489,   548,   539,   808,    59,   501,   501,\n-     447,   448,   651,   570,   596,   501,   501,   462,   601,   116,\n-     189,   199,   115,   444,   774,   113,    40,   500,   867,   856,\n-     775,   116,   189,   115,   272,   221,   852,   601,    86,   616,\n-     186,   272,   562,   774,   616,   272,   491,   492,   565,   862,\n-     744,   621,   621,   241,   398,   864,   868,   489,   416,   416,\n-     667,   635,   442,   630,   632,   608,   501,   936,    40,   405,\n-     774,   405,   267,   500,   861,   885,   602,   147,   645,   145,\n-     195,   583,   118,   133,   318,   936,   105,   885,   462,   934,\n-      40,   282,   862,   881,   500,   642,   775,   816,   501,   501,\n-       9,   342,   684,   700,   500,   377,   500,   501,   504,   788,\n-     789,   862,   326,   701,   504,   501,   500,   863,    59,   501,\n-     814,   193,   501,   722,   847,   499,   186,   501,   774,   774,\n-     774,   499,   501,   501,   792,   862,   787,   861,   787,   504,\n-     645,   295,   645,   534,   282,   500,   532,   774,   501,   855,\n-     855,   335,   601,   500,   592,   570,   501,   185,   500,   774,\n-     267,   576,   601,   604,   856,    40,   148,   740,   868,   495,\n-     571,   856,   856,   501,   561,   120,   501,   591,   645,   645,\n-     852,   148,    40,   501,   856,   936,    30,    83,    92,   114,\n-     185,   198,   391,   394,   587,   587,   357,   357,    40,    64,\n-      72,   235,   405,   774,   852,   500,   538,   547,   781,   862,\n-     501,   501,   500,   787,   812,   500,   812,   694,   504,    40,\n-     774,   442,   679,   776,   843,   854,   726,   668,   500,   726,\n-     774,   301,   793,   701,   701,   540,    91,   547,   129,   852,\n-     570,   597,   600,   871,   395,   456,   577,   578,   500,   572,\n-     774,   501,   243,   613,   185,   442,   521,   495,   427,   635,\n-     861,   885,   583,   934,   500,   852,   645,   591,   558,   645,\n-      72,   285,    72,   645,   882,   774,   501,   504,    78,   542,\n-     542,     9,   701,   501,   693,   501,   789,   791,   359,   501,\n-     667,   843,   499,    59,   668,   679,   679,   447,   856,   501,\n-     268,   439,   604,   501,   504,   489,   560,   501,   265,   585,\n-     168,   300,   381,   282,   581,   582,   606,   572,   774,   427,\n-      40,   500,   934,   583,   936,   934,   285,   285,   500,   501,\n-     885,   538,   867,   543,   867,   543,   501,   679,   501,   681,\n-     501,   501,   811,   328,   357,   794,   645,   737,   375,   613,\n-     600,   571,   501,   578,   199,   118,   439,   282,   606,   282,\n-     581,   645,   547,   542,   737,   672,   672,    53,   102,   429,\n-     774,   795,   796,   795,   501,   546,   582,    63,   265,   348,\n-     375,   574,   574,   934,   501,   543,   673,   673,   796,   356,\n-     161,   314,   161,   314,   737,   570,    25,   113,   272,   885,\n-     672,    36,   737,   673,   796\n+     492,   563,   572,   611,   745,   811,   866,   869,   944,   950,\n+     876,   861,   861,   861,   861,   861,   861,   861,   861,   861,\n+     861,   501,   501,   501,   669,   562,   644,   866,   500,   603,\n+     646,   890,    40,   616,   186,   857,   501,   504,   501,   557,\n+     500,    40,   594,   592,   600,    84,   559,   105,   265,   605,\n+     646,   627,   646,   599,   442,   887,   499,   745,   622,   501,\n+     504,   609,   776,   167,   500,   821,   739,   501,   504,   501,\n+     692,   857,   857,   857,   857,    30,   101,   177,   355,   500,\n+     693,   694,   695,   696,   697,   698,   699,   775,   775,   461,\n+     788,   501,   777,   814,   815,   193,   176,   716,   720,   500,\n+     501,   722,   723,   724,   872,   775,   504,   501,   867,   775,\n+     777,   775,   775,   775,   821,   501,   775,    36,    36,   775,\n+     775,   141,   501,   839,   501,   819,   501,   775,   501,   500,\n+     792,   867,   701,   501,   701,   866,   847,   448,   404,   441,\n+     541,   535,   545,   867,   282,   538,   489,   549,   540,   813,\n+      59,   501,   501,   447,   448,   652,   571,   597,   501,   501,\n+     462,   602,   116,   189,   199,   115,   444,   775,   113,    40,\n+     500,   872,   861,   776,   116,   189,   115,   272,   221,   857,\n+     602,    86,   617,   186,   272,   563,   775,   617,   272,   491,\n+     492,   566,   867,   745,   622,   622,   241,   398,   869,   873,\n+     489,   416,   416,   668,   636,   442,   631,   633,   609,   501,\n+     942,    40,   405,   775,   405,   267,   500,   866,   890,   603,\n+     147,   646,   145,   195,   584,   118,   133,   318,   942,   105,\n+     890,   462,   940,    40,   282,   867,   886,   500,   643,   776,\n+     821,   501,   501,     9,   342,   685,   701,   500,   377,   500,\n+     501,   504,   789,   790,   867,   326,   702,   504,   501,   500,\n+     868,    59,   501,   819,   193,   501,   723,   852,   499,   186,\n+     501,   775,   775,   775,   499,   501,   501,   793,   867,   788,\n+     866,   788,   504,   447,   501,   504,   841,    89,   540,   775,\n+     501,   860,   860,   335,   602,   500,   593,   571,   501,   185,\n+     500,   775,   267,   577,   602,   605,   861,    40,   148,   741,\n+     873,   495,   572,   861,   861,   501,   562,   120,   501,   592,\n+     646,   646,   857,   148,    40,   501,   861,   942,    30,    83,\n+      92,   114,   185,   198,   391,   394,   588,   588,   357,   357,\n+      40,    64,    72,   235,   405,   775,   857,   500,   539,   548,\n+     782,   867,   501,   501,   500,   788,   817,   500,   817,   695,\n+     504,    40,   775,   442,   680,   777,   848,   859,   727,   669,\n+     500,   727,   775,   301,   794,   702,   702,   646,   295,   646,\n+     535,   282,   500,   533,   857,   571,   598,   601,   876,   395,\n+     456,   578,   579,   500,   573,   775,   501,   243,   614,   185,\n+     442,   521,   495,   427,   636,   866,   890,   584,   940,   500,\n+     857,   646,   592,   559,   646,    72,   285,    72,   646,   887,\n+     775,   501,   504,    78,   543,   543,     9,   702,   501,   694,\n+     501,   790,   792,   359,   501,   668,   848,   499,    59,   669,\n+     680,   680,   541,    91,   548,   129,   605,   501,   504,   489,\n+     561,   501,   265,   586,   168,   300,   381,   282,   582,   583,\n+     607,   573,   775,   427,    40,   500,   940,   584,   942,   940,\n+     285,   285,   500,   501,   890,   539,   872,   544,   872,   544,\n+     501,   680,   501,   682,   501,   501,   816,   328,   357,   795,\n+     447,   861,   501,   268,   439,   614,   601,   572,   501,   579,\n+     199,   118,   439,   282,   607,   282,   582,   646,   548,   543,\n+     738,   673,   673,    53,   102,   429,   775,   796,   797,   796,\n+     501,   646,   738,   375,   583,    63,   265,   348,   375,   575,\n+     575,   940,   501,   544,   674,   674,   797,   356,   161,   314,\n+     161,   314,   547,   571,    25,   113,   272,   890,   673,    36,\n+     738,   738,   674,   797\n };\n \n #define yyerrok\t\t(yyerrstatus = 0)\n@@ -18669,14 +18765,14 @@ YYLTYPE yylloc;\n   switch (yyn)\n     {\n         case 2:\n-#line 487 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 491 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\tpg_yyget_extra(yyscanner)->parsetree = (yyvsp[(1) - (1)].list);\n \t\t\t;}\n     break;\n \n   case 3:\n-#line 503 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 507 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(1) - (3)].list) != NIL)\n \t\t\t\t\t{\n@@ -18691,7 +18787,7 @@ YYLTYPE yylloc;\n     break;\n \n   case 4:\n-#line 515 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 519 \"third_party/libpg_query/grammar/grammar.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(1) - (1)].node) != NULL)\n \t\t\t\t\t\t(yyval.list) = list_make1(makeRawStmt((yyvsp[(1) - (1)].node), 0));\n@@ -18701,7 +18797,7 @@ YYLTYPE yylloc;\n     break;\n \n   case 43:\n-#line 562 \"third_party/libpg_query/grammar/grammar.y\"\n+#line 566 \"third_party/libpg_query/grammar/grammar.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n@@ -19491,12 +19587,13 @@ YYLTYPE yylloc;\n   case 122:\n #line 11 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n-\t\t\t\t\t(yyvsp[(6) - (8)].istmt)->relation = (yyvsp[(5) - (8)].range);\n-\t\t\t\t\t(yyvsp[(6) - (8)].istmt)->onConflictAlias = (yyvsp[(3) - (8)].onconflictshorthand);\n-\t\t\t\t\t(yyvsp[(6) - (8)].istmt)->onConflictClause = (yyvsp[(7) - (8)].onconflict);\n-\t\t\t\t\t(yyvsp[(6) - (8)].istmt)->returningList = (yyvsp[(8) - (8)].list);\n-\t\t\t\t\t(yyvsp[(6) - (8)].istmt)->withClause = (yyvsp[(1) - (8)].with);\n-\t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(6) - (8)].istmt);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->relation = (yyvsp[(5) - (9)].range);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->onConflictAlias = (yyvsp[(3) - (9)].onconflictshorthand);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->onConflictClause = (yyvsp[(8) - (9)].onconflict);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->returningList = (yyvsp[(9) - (9)].list);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->withClause = (yyvsp[(1) - (9)].with);\n+\t\t\t\t\t(yyvsp[(7) - (9)].istmt)->insert_column_order = (yyvsp[(6) - (9)].bynameorposition);\n+\t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(7) - (9)].istmt);\n \t\t\t\t;}\n     break;\n \n@@ -19563,7 +19660,22 @@ YYLTYPE yylloc;\n     break;\n \n   case 130:\n+#line 71 \"third_party/libpg_query/grammar/statements/insert.y\"\n+    { (yyval.bynameorposition) = PG_INSERT_BY_NAME; ;}\n+    break;\n+\n+  case 131:\n+#line 72 \"third_party/libpg_query/grammar/statements/insert.y\"\n+    { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; ;}\n+    break;\n+\n+  case 132:\n #line 73 \"third_party/libpg_query/grammar/statements/insert.y\"\n+    { (yyval.bynameorposition) = PG_INSERT_BY_POSITION; ;}\n+    break;\n+\n+  case 133:\n+#line 78 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.infer) = makeNode(PGInferClause);\n \t\t\t\t\t(yyval.infer)->indexElems = (yyvsp[(2) - (4)].list);\n@@ -19573,8 +19685,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 131:\n-#line 82 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 134:\n+#line 87 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.infer) = makeNode(PGInferClause);\n \t\t\t\t\t(yyval.infer)->indexElems = NIL;\n@@ -19584,25 +19696,25 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 132:\n-#line 90 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 135:\n+#line 95 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.infer) = NULL;\n \t\t\t\t;}\n     break;\n \n-  case 133:\n-#line 97 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 136:\n+#line 102 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.with) = (yyvsp[(1) - (1)].with); ;}\n     break;\n \n-  case 134:\n-#line 98 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 137:\n+#line 103 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.with) = NULL; ;}\n     break;\n \n-  case 135:\n-#line 104 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 138:\n+#line 109 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(1) - (2)].str);\n@@ -19612,16 +19724,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 136:\n-#line 116 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 139:\n+#line 121 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyvsp[(1) - (3)].target)->val = (PGNode *) (yyvsp[(3) - (3)].node);\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (3)].target));\n \t\t\t\t;}\n     break;\n \n-  case 137:\n-#line 121 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 140:\n+#line 126 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\tint ncolumns = list_length((yyvsp[(2) - (5)].list));\n \t\t\t\t\tint i = 1;\n@@ -19644,29 +19756,29 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 138:\n-#line 146 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 141:\n+#line 151 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_REPLACE;\n \t\t\t\t;}\n     break;\n \n-  case 139:\n-#line 151 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 142:\n+#line 156 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_IGNORE;\n \t\t\t\t;}\n     break;\n \n-  case 140:\n-#line 155 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 143:\n+#line 160 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflictshorthand) = PG_ONCONFLICT_ALIAS_NONE;\n \t\t\t\t;}\n     break;\n \n-  case 141:\n-#line 162 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 144:\n+#line 167 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflict) = makeNode(PGOnConflictClause);\n \t\t\t\t\t(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;\n@@ -19677,8 +19789,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 142:\n-#line 172 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 145:\n+#line 177 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflict) = makeNode(PGOnConflictClause);\n \t\t\t\t\t(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;\n@@ -19689,15 +19801,15 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 143:\n-#line 181 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 146:\n+#line 186 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.onconflict) = NULL;\n \t\t\t\t;}\n     break;\n \n-  case 144:\n-#line 188 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 147:\n+#line 193 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.ielem) = makeNode(PGIndexElem);\n \t\t\t\t\t(yyval.ielem)->name = (yyvsp[(1) - (5)].str);\n@@ -19710,8 +19822,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 145:\n-#line 199 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 148:\n+#line 204 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.ielem) = makeNode(PGIndexElem);\n \t\t\t\t\t(yyval.ielem)->name = NULL;\n@@ -19724,8 +19836,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 146:\n-#line 210 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 149:\n+#line 215 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.ielem) = makeNode(PGIndexElem);\n \t\t\t\t\t(yyval.ielem)->name = NULL;\n@@ -19738,98 +19850,98 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 147:\n-#line 224 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 150:\n+#line 229 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 148:\n-#line 225 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 151:\n+#line 230 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 149:\n-#line 231 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 152:\n+#line 236 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.override) = PG_OVERRIDING_USER_VALUE; ;}\n     break;\n \n-  case 150:\n-#line 232 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 153:\n+#line 237 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.override) = OVERRIDING_SYSTEM_VALUE; ;}\n     break;\n \n-  case 151:\n-#line 237 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 154:\n+#line 242 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}\n     break;\n \n-  case 152:\n-#line 238 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 155:\n+#line 243 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].target)); ;}\n     break;\n \n-  case 153:\n-#line 244 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 156:\n+#line 249 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 154:\n-#line 245 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 157:\n+#line 250 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 155:\n-#line 249 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 158:\n+#line 254 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 156:\n-#line 250 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 159:\n+#line 255 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 157:\n-#line 256 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 160:\n+#line 261 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}\n     break;\n \n-  case 158:\n-#line 258 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 161:\n+#line 263 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}\n     break;\n \n-  case 159:\n-#line 263 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 162:\n+#line 268 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 160:\n-#line 264 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 163:\n+#line 269 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = list_concat((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 161:\n-#line 268 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 164:\n+#line 273 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 162:\n-#line 269 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 165:\n+#line 274 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 163:\n-#line 272 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 166:\n+#line 277 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].ielem)); ;}\n     break;\n \n-  case 164:\n-#line 273 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 167:\n+#line 278 \"third_party/libpg_query/grammar/statements/insert.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].ielem)); ;}\n     break;\n \n-  case 165:\n-#line 279 \"third_party/libpg_query/grammar/statements/insert.y\"\n+  case 168:\n+#line 284 \"third_party/libpg_query/grammar/statements/insert.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(1) - (2)].str);\n@@ -19839,7 +19951,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 166:\n+  case 169:\n #line 8 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {\n \t\t\t\t\tPGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);\n@@ -19851,7 +19963,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 167:\n+  case 170:\n #line 17 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {\n \t\t\t\t\tPGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);\n@@ -19863,7 +19975,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 168:\n+  case 171:\n #line 26 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {\n \t\t\t\t\tPGCreateTypeStmt *n = makeNode(PGCreateTypeStmt);\n@@ -19881,31 +19993,31 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 169:\n+  case 172:\n #line 46 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list);;}\n     break;\n \n-  case 170:\n+  case 173:\n #line 47 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {(yyval.list) = NIL;;}\n     break;\n \n-  case 171:\n+  case 174:\n #line 51 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])));\n \t\t\t\t;}\n     break;\n \n-  case 172:\n+  case 175:\n #line 55 \"third_party/libpg_query/grammar/statements/create_type.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), makeStringConst((yyvsp[(3) - (3)].str), (yylsp[(3) - (3)])));\n \t\t\t\t;}\n     break;\n \n-  case 173:\n+  case 176:\n #line 8 \"third_party/libpg_query/grammar/statements/pragma.y\"\n     {\n \t\t\t\t\tPGPragmaStmt *n = makeNode(PGPragmaStmt);\n@@ -19915,7 +20027,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 174:\n+  case 177:\n #line 15 \"third_party/libpg_query/grammar/statements/pragma.y\"\n     {\n \t\t\t\t\tPGPragmaStmt *n = makeNode(PGPragmaStmt);\n@@ -19926,7 +20038,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 175:\n+  case 178:\n #line 23 \"third_party/libpg_query/grammar/statements/pragma.y\"\n     {\n \t\t\t\t\tPGPragmaStmt *n = makeNode(PGPragmaStmt);\n@@ -19937,7 +20049,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 176:\n+  case 179:\n #line 10 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t\tPGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19946,7 +20058,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 177:\n+  case 180:\n #line 16 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t    PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19956,7 +20068,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 178:\n+  case 181:\n #line 23 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t\tPGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19965,7 +20077,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 179:\n+  case 182:\n #line 29 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t\tPGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19974,7 +20086,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 180:\n+  case 183:\n #line 35 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n                     PGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19984,7 +20096,7 @@ YYLTYPE yylloc;\n                 ;}\n     break;\n \n-  case 181:\n+  case 184:\n #line 42 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t\tPGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -19994,7 +20106,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 182:\n+  case 185:\n #line 49 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     {\n \t\t\t\t\tPGCreateDatabaseStmt *n = makeNode(PGCreateDatabaseStmt);\n@@ -20004,12 +20116,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 183:\n+  case 186:\n #line 59 \"third_party/libpg_query/grammar/statements/create_database.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 184:\n+  case 187:\n #line 10 \"third_party/libpg_query/grammar/statements/create_sequence.y\"\n     {\n \t\t\t\t\tPGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);\n@@ -20022,7 +20134,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 185:\n+  case 188:\n #line 20 \"third_party/libpg_query/grammar/statements/create_sequence.y\"\n     {\n \t\t\t\t\tPGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);\n@@ -20035,7 +20147,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 186:\n+  case 189:\n #line 30 \"third_party/libpg_query/grammar/statements/create_sequence.y\"\n     {\n \t\t\t\t\tPGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);\n@@ -20048,17 +20160,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 187:\n+  case 190:\n #line 42 \"third_party/libpg_query/grammar/statements/create_sequence.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 188:\n+  case 191:\n #line 43 \"third_party/libpg_query/grammar/statements/create_sequence.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 189:\n+  case 192:\n #line 8 \"third_party/libpg_query/grammar/statements/execute.y\"\n     {\n \t\t\t\t\tPGExecuteStmt *n = makeNode(PGExecuteStmt);\n@@ -20068,7 +20180,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 190:\n+  case 193:\n #line 16 \"third_party/libpg_query/grammar/statements/execute.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -20087,7 +20199,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 191:\n+  case 194:\n #line 33 \"third_party/libpg_query/grammar/statements/execute.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -20106,17 +20218,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 192:\n+  case 195:\n #line 51 \"third_party/libpg_query/grammar/statements/execute.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 193:\n+  case 196:\n #line 52 \"third_party/libpg_query/grammar/statements/execute.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 194:\n+  case 197:\n #line 10 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\tPGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);\n@@ -20127,7 +20239,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 195:\n+  case 198:\n #line 18 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\tPGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);\n@@ -20138,42 +20250,42 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 196:\n+  case 199:\n #line 29 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}\n     break;\n \n-  case 197:\n+  case 200:\n #line 30 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}\n     break;\n \n-  case 198:\n+  case 201:\n #line 34 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {;}\n     break;\n \n-  case 199:\n+  case 202:\n #line 35 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {;}\n     break;\n \n-  case 200:\n+  case 203:\n #line 36 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {;}\n     break;\n \n-  case 201:\n+  case 204:\n #line 41 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.value) = makeFloat((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 202:\n+  case 205:\n #line 42 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.value) = makeFloat((yyvsp[(2) - (2)].str)); ;}\n     break;\n \n-  case 203:\n+  case 206:\n #line 44 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.value) = makeFloat((yyvsp[(2) - (2)].str));\n@@ -20181,82 +20293,82 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 204:\n+  case 207:\n #line 48 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.value) = makeInteger((yyvsp[(1) - (1)].ival)); ;}\n     break;\n \n-  case 205:\n+  case 208:\n #line 53 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"as\", (PGNode *)(yyvsp[(2) - (2)].typnam), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 206:\n+  case 209:\n #line 57 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"cache\", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 207:\n+  case 210:\n #line 61 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"cycle\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 208:\n+  case 211:\n #line 65 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"cycle\", (PGNode *)makeInteger(false), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 209:\n+  case 212:\n #line 69 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"increment\", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 210:\n+  case 213:\n #line 73 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"maxvalue\", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 211:\n+  case 214:\n #line 77 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"minvalue\", (PGNode *)(yyvsp[(2) - (2)].value), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 212:\n+  case 215:\n #line 81 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"maxvalue\", NULL, (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 213:\n+  case 216:\n #line 85 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"minvalue\", NULL, (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 214:\n+  case 217:\n #line 89 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"owned_by\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 215:\n+  case 218:\n #line 93 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t/* not documented, only used by pg_dump */\n@@ -20264,53 +20376,53 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 216:\n+  case 219:\n #line 98 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"start\", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 217:\n+  case 220:\n #line 102 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"restart\", NULL, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 218:\n+  case 221:\n #line 106 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"restart\", (PGNode *)(yyvsp[(3) - (3)].value), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 219:\n+  case 222:\n #line 112 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {;}\n     break;\n \n-  case 220:\n+  case 223:\n #line 113 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     {;}\n     break;\n \n-  case 221:\n+  case 224:\n #line 117 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}\n     break;\n \n-  case 222:\n+  case 225:\n #line 118 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.ival) = + (yyvsp[(2) - (2)].ival); ;}\n     break;\n \n-  case 223:\n+  case 226:\n #line 119 \"third_party/libpg_query/grammar/statements/alter_sequence.y\"\n     { (yyval.ival) = - (yyvsp[(2) - (2)].ival); ;}\n     break;\n \n-  case 224:\n+  case 227:\n #line 3 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20320,7 +20432,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 225:\n+  case 228:\n #line 10 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20329,7 +20441,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 226:\n+  case 229:\n #line 16 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20338,7 +20450,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 227:\n+  case 230:\n #line 22 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20348,7 +20460,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 228:\n+  case 231:\n #line 29 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20358,7 +20470,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 229:\n+  case 232:\n #line 36 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {\n \t\t\t\t\tPGTransactionStmt *n = makeNode(PGTransactionStmt);\n@@ -20368,22 +20480,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 230:\n+  case 233:\n #line 45 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {;}\n     break;\n \n-  case 231:\n+  case 234:\n #line 46 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {;}\n     break;\n \n-  case 232:\n+  case 235:\n #line 47 \"third_party/libpg_query/grammar/statements/transaction.y\"\n     {;}\n     break;\n \n-  case 233:\n+  case 236:\n #line 3 \"third_party/libpg_query/grammar/statements/use.y\"\n     {\n \t\t\t\t\tPGUseStmt *n = makeNode(PGUseStmt);\n@@ -20392,7 +20504,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 234:\n+  case 237:\n #line 9 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGCreateStmt *n = makeNode(PGCreateStmt);\n@@ -20408,7 +20520,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 235:\n+  case 238:\n #line 24 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGCreateStmt *n = makeNode(PGCreateStmt);\n@@ -20424,7 +20536,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 236:\n+  case 239:\n #line 39 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGCreateStmt *n = makeNode(PGCreateStmt);\n@@ -20440,12 +20552,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 237:\n+  case 240:\n #line 56 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 238:\n+  case 241:\n #line 58 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t/*\n@@ -20472,77 +20584,77 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 239:\n+  case 242:\n #line 84 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 240:\n+  case 243:\n #line 85 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}\n     break;\n \n-  case 241:\n+  case 244:\n #line 86 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 242:\n+  case 245:\n #line 87 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)(yyvsp[(1) - (1)].value); ;}\n     break;\n \n-  case 243:\n+  case 246:\n #line 88 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 244:\n+  case 247:\n #line 89 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[(1) - (1)].keyword))); ;}\n     break;\n \n-  case 245:\n+  case 248:\n #line 93 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 246:\n+  case 249:\n #line 94 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 247:\n+  case 250:\n #line 99 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 248:\n+  case 251:\n #line 104 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; ;}\n     break;\n \n-  case 249:\n+  case 252:\n #line 105 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; ;}\n     break;\n \n-  case 250:\n+  case 253:\n #line 106 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; ;}\n     break;\n \n-  case 251:\n+  case 254:\n #line 107 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; ;}\n     break;\n \n-  case 252:\n+  case 255:\n #line 108 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; ;}\n     break;\n \n-  case 253:\n+  case 256:\n #line 114 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));\n@@ -20552,17 +20664,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 254:\n+  case 257:\n #line 120 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 255:\n+  case 258:\n #line 121 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 256:\n+  case 259:\n #line 123 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t/*\n@@ -20578,7 +20690,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 257:\n+  case 260:\n #line 140 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20588,7 +20700,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 258:\n+  case 261:\n #line 147 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20598,7 +20710,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 259:\n+  case 262:\n #line 154 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20611,7 +20723,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 260:\n+  case 263:\n #line 164 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20624,7 +20736,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 261:\n+  case 264:\n #line 174 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20639,7 +20751,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 262:\n+  case 265:\n #line 186 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20650,7 +20762,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 263:\n+  case 266:\n #line 194 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20662,7 +20774,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 264:\n+  case 267:\n #line 203 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20680,27 +20792,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 265:\n+  case 268:\n #line 220 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}\n     break;\n \n-  case 266:\n+  case 269:\n #line 221 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.constr) = PG_CONSTR_GENERATED_STORED; ;}\n     break;\n \n-  case 267:\n+  case 270:\n #line 225 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.constr) = (yyvsp[(1) - (1)].constr); ;}\n     break;\n \n-  case 268:\n+  case 271:\n #line 226 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.constr) = PG_CONSTR_GENERATED_VIRTUAL; ;}\n     break;\n \n-  case 269:\n+  case 272:\n #line 231 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20712,7 +20824,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 270:\n+  case 273:\n #line 240 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20738,7 +20850,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 271:\n+  case 274:\n #line 263 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20751,79 +20863,79 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 272:\n+  case 275:\n #line 277 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 273:\n+  case 276:\n #line 283 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 274:\n+  case 277:\n #line 289 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = ((yyvsp[(1) - (1)].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}\n     break;\n \n-  case 275:\n+  case 278:\n #line 291 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[(1) - (1)].ival) & 0xFF); ;}\n     break;\n \n-  case 276:\n+  case 279:\n #line 293 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = ((yyvsp[(1) - (2)].ival) << 8) | ((yyvsp[(2) - (2)].ival) & 0xFF); ;}\n     break;\n \n-  case 277:\n+  case 280:\n #line 295 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = ((yyvsp[(2) - (2)].ival) << 8) | ((yyvsp[(1) - (2)].ival) & 0xFF); ;}\n     break;\n \n-  case 278:\n+  case 281:\n #line 297 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); ;}\n     break;\n \n-  case 279:\n+  case 282:\n #line 300 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.oncommit) = ONCOMMIT_DROP; ;}\n     break;\n \n-  case 280:\n+  case 283:\n #line 301 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; ;}\n     break;\n \n-  case 281:\n+  case 284:\n #line 302 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; ;}\n     break;\n \n-  case 282:\n+  case 285:\n #line 303 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.oncommit) = PG_ONCOMMIT_NOOP; ;}\n     break;\n \n-  case 283:\n+  case 286:\n #line 308 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 284:\n+  case 287:\n #line 312 \"third_party/libpg_query/grammar/statements/create.y\"\n     {  (yyval.boolean) = true; ;}\n     break;\n \n-  case 285:\n+  case 288:\n #line 313 \"third_party/libpg_query/grammar/statements/create.y\"\n     {  (yyval.boolean) = false; ;}\n     break;\n \n-  case 286:\n+  case 289:\n #line 319 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = castNode(PGConstraint, (yyvsp[(3) - (3)].node));\n@@ -20833,67 +20945,67 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 287:\n+  case 290:\n #line 325 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 288:\n+  case 291:\n #line 330 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; ;}\n     break;\n \n-  case 289:\n+  case 292:\n #line 331 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; ;}\n     break;\n \n-  case 290:\n+  case 293:\n #line 332 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; ;}\n     break;\n \n-  case 291:\n+  case 294:\n #line 333 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; ;}\n     break;\n \n-  case 292:\n+  case 295:\n #line 334 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; ;}\n     break;\n \n-  case 293:\n+  case 296:\n #line 335 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; ;}\n     break;\n \n-  case 294:\n+  case 297:\n #line 336 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; ;}\n     break;\n \n-  case 295:\n+  case 298:\n #line 337 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; ;}\n     break;\n \n-  case 296:\n+  case 299:\n #line 343 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}\n     break;\n \n-  case 297:\n+  case 300:\n #line 344 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}\n     break;\n \n-  case 298:\n+  case 301:\n #line 348 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.str) = (yyvsp[(3) - (3)].str); ;}\n     break;\n \n-  case 299:\n+  case 302:\n #line 354 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20903,7 +21015,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 300:\n+  case 303:\n #line 361 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20913,7 +21025,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 301:\n+  case 304:\n #line 368 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20923,7 +21035,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 302:\n+  case 305:\n #line 375 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -20933,82 +21045,82 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 303:\n+  case 306:\n #line 386 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 304:\n+  case 307:\n #line 387 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = list_make1(makeDefElem(\"oids\", (PGNode *) makeInteger(true), (yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 305:\n+  case 308:\n #line 388 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = list_make1(makeDefElem(\"oids\", (PGNode *) makeInteger(false), (yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 306:\n+  case 309:\n #line 389 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 307:\n+  case 310:\n #line 393 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 308:\n+  case 311:\n #line 398 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 309:\n+  case 312:\n #line 399 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (yyvsp[(1) - (3)].ival) & ~(yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 310:\n+  case 313:\n #line 400 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 311:\n+  case 314:\n #line 405 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 312:\n+  case 315:\n #line 410 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_NOT_DEFERRABLE; ;}\n     break;\n \n-  case 313:\n+  case 316:\n #line 411 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_DEFERRABLE; ;}\n     break;\n \n-  case 314:\n+  case 317:\n #line 412 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; ;}\n     break;\n \n-  case 315:\n+  case 318:\n #line 413 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_INITIALLY_DEFERRED; ;}\n     break;\n \n-  case 316:\n+  case 319:\n #line 414 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_NOT_VALID; ;}\n     break;\n \n-  case 317:\n+  case 320:\n #line 415 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = CAS_NO_INHERIT; ;}\n     break;\n \n-  case 318:\n+  case 321:\n #line 421 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGColumnDef *n = makeNode(PGColumnDef);\n@@ -21030,7 +21142,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 319:\n+  case 322:\n #line 441 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGColumnDef *n = makeNode(PGColumnDef);\n@@ -21059,122 +21171,122 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 320:\n+  case 323:\n #line 469 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].defelt)); ;}\n     break;\n \n-  case 321:\n+  case 324:\n #line 470 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt)); ;}\n     break;\n \n-  case 322:\n+  case 325:\n #line 474 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 323:\n+  case 326:\n #line 478 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 324:\n+  case 327:\n #line 479 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 325:\n+  case 328:\n #line 480 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 326:\n+  case 329:\n #line 485 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 327:\n+  case 330:\n #line 489 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 328:\n+  case 331:\n #line 496 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 329:\n+  case 332:\n #line 497 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 330:\n+  case 333:\n #line 502 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 331:\n+  case 334:\n #line 503 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 332:\n+  case 335:\n #line 504 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 333:\n+  case 336:\n #line 509 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str));\n \t\t\t\t;}\n     break;\n \n-  case 334:\n+  case 337:\n #line 516 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 335:\n+  case 338:\n #line 517 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 336:\n+  case 339:\n #line 522 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 337:\n+  case 340:\n #line 523 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 338:\n+  case 341:\n #line 527 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = (yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 339:\n+  case 342:\n #line 533 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (3)].str), (PGNode *) (yyvsp[(3) - (3)].node), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 340:\n+  case 343:\n #line 537 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (1)].str), NULL, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 341:\n+  case 344:\n #line 541 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (5)].str), (yyvsp[(3) - (5)].str), (PGNode *) (yyvsp[(5) - (5)].node),\n@@ -21182,39 +21294,39 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 342:\n+  case 345:\n #line 546 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElemExtended((yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 343:\n+  case 346:\n #line 553 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 344:\n+  case 347:\n #line 554 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 345:\n+  case 348:\n #line 558 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 346:\n+  case 349:\n #line 559 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 347:\n+  case 350:\n #line 563 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 348:\n+  case 351:\n #line 565 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(1) - (4)].str)), (yyvsp[(2) - (4)].list)));\n@@ -21223,7 +21335,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 349:\n+  case 352:\n #line 571 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[(2) - (5)].str)), (yyvsp[(3) - (5)].list)));\n@@ -21233,7 +21345,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 350:\n+  case 353:\n #line 582 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21249,7 +21361,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 351:\n+  case 354:\n #line 596 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21265,7 +21377,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 352:\n+  case 355:\n #line 609 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21282,7 +21394,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 353:\n+  case 356:\n #line 624 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21298,7 +21410,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 354:\n+  case 357:\n #line 637 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21315,7 +21427,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 355:\n+  case 358:\n #line 652 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGConstraint *n = makeNode(PGConstraint);\n@@ -21336,28 +21448,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 356:\n+  case 359:\n #line 674 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 357:\n+  case 360:\n #line 678 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 358:\n+  case 361:\n #line 685 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t(yyval.ival) = PG_FKCONSTR_MATCH_FULL;\n \t\t\t;}\n     break;\n \n-  case 359:\n+  case 362:\n #line 689 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\tereport(ERROR,\n@@ -21368,21 +21480,21 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 360:\n+  case 363:\n #line 697 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;\n \t\t\t;}\n     break;\n \n-  case 361:\n+  case 364:\n #line 701 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;\n \t\t\t;}\n     break;\n \n-  case 362:\n+  case 365:\n #line 709 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tPGTableLikeClause *n = makeNode(PGTableLikeClause);\n@@ -21392,27 +21504,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 363:\n+  case 366:\n #line 718 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}\n     break;\n \n-  case 364:\n+  case 367:\n #line 719 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}\n     break;\n \n-  case 365:\n+  case 368:\n #line 720 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}\n     break;\n \n-  case 366:\n+  case 369:\n #line 721 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_RELPERSISTENCE_TEMP; ;}\n     break;\n \n-  case 367:\n+  case 370:\n #line 723 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n@@ -21422,7 +21534,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 368:\n+  case 371:\n #line 730 \"third_party/libpg_query/grammar/statements/create.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n@@ -21432,27 +21544,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 369:\n+  case 372:\n #line 736 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; ;}\n     break;\n \n-  case 370:\n+  case 373:\n #line 737 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = RELPERSISTENCE_PERMANENT; ;}\n     break;\n \n-  case 371:\n+  case 374:\n #line 742 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; ;}\n     break;\n \n-  case 372:\n+  case 375:\n #line 743 \"third_party/libpg_query/grammar/statements/create.y\"\n     { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; ;}\n     break;\n \n-  case 373:\n+  case 376:\n #line 10 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21465,7 +21577,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 374:\n+  case 377:\n #line 20 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21478,7 +21590,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 375:\n+  case 378:\n #line 30 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21491,7 +21603,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 376:\n+  case 379:\n #line 40 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21504,7 +21616,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 377:\n+  case 380:\n #line 50 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21517,7 +21629,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 378:\n+  case 381:\n #line 60 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21530,7 +21642,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 379:\n+  case 382:\n #line 70 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21543,7 +21655,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 380:\n+  case 383:\n #line 80 \"third_party/libpg_query/grammar/statements/drop.y\"\n     {\n \t\t\t\t\tPGDropStmt *n = makeNode(PGDropStmt);\n@@ -21556,177 +21668,177 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 381:\n+  case 384:\n #line 93 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TABLE; ;}\n     break;\n \n-  case 382:\n+  case 385:\n #line 94 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_DATABASE; ;}\n     break;\n \n-  case 383:\n+  case 386:\n #line 95 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_SEQUENCE; ;}\n     break;\n \n-  case 384:\n+  case 387:\n #line 96 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}\n     break;\n \n-  case 385:\n+  case 388:\n #line 97 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_FUNCTION; ;}\n     break;\n \n-  case 386:\n+  case 389:\n #line 98 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TABLE_MACRO; ;}\n     break;\n \n-  case 387:\n+  case 390:\n #line 99 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_VIEW; ;}\n     break;\n \n-  case 388:\n+  case 391:\n #line 100 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_MATVIEW; ;}\n     break;\n \n-  case 389:\n+  case 392:\n #line 101 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_INDEX; ;}\n     break;\n \n-  case 390:\n+  case 393:\n #line 102 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; ;}\n     break;\n \n-  case 391:\n+  case 394:\n #line 103 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_COLLATION; ;}\n     break;\n \n-  case 392:\n+  case 395:\n #line 104 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_CONVERSION; ;}\n     break;\n \n-  case 393:\n+  case 396:\n #line 105 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_SCHEMA; ;}\n     break;\n \n-  case 394:\n+  case 397:\n #line 106 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; ;}\n     break;\n \n-  case 395:\n+  case 398:\n #line 107 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TSPARSER; ;}\n     break;\n \n-  case 396:\n+  case 399:\n #line 108 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; ;}\n     break;\n \n-  case 397:\n+  case 400:\n #line 109 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; ;}\n     break;\n \n-  case 398:\n+  case 401:\n #line 110 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; ;}\n     break;\n \n-  case 399:\n+  case 402:\n #line 115 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; ;}\n     break;\n \n-  case 400:\n+  case 403:\n #line 116 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; ;}\n     break;\n \n-  case 401:\n+  case 404:\n #line 117 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_EXTENSION; ;}\n     break;\n \n-  case 402:\n+  case 405:\n #line 118 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_FDW; ;}\n     break;\n \n-  case 403:\n+  case 406:\n #line 119 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_PUBLICATION; ;}\n     break;\n \n-  case 404:\n+  case 407:\n #line 120 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; ;}\n     break;\n \n-  case 405:\n+  case 408:\n #line 125 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 406:\n+  case 409:\n #line 126 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 407:\n+  case 410:\n #line 131 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.dbehavior) = PG_DROP_CASCADE; ;}\n     break;\n \n-  case 408:\n+  case 411:\n #line 132 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.dbehavior) = PG_DROP_RESTRICT; ;}\n     break;\n \n-  case 409:\n+  case 412:\n #line 133 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ ;}\n     break;\n \n-  case 410:\n+  case 413:\n #line 138 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_POLICY; ;}\n     break;\n \n-  case 411:\n+  case 414:\n #line 139 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_RULE; ;}\n     break;\n \n-  case 412:\n+  case 415:\n #line 140 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.objtype) = PG_OBJECT_TRIGGER; ;}\n     break;\n \n-  case 413:\n+  case 416:\n #line 143 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}\n     break;\n \n-  case 414:\n+  case 417:\n #line 144 \"third_party/libpg_query/grammar/statements/drop.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}\n     break;\n \n-  case 415:\n+  case 418:\n #line 9 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21740,7 +21852,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 416:\n+  case 419:\n #line 21 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21755,7 +21867,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 417:\n+  case 420:\n #line 34 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21770,7 +21882,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 418:\n+  case 421:\n #line 47 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21784,7 +21896,7 @@ YYLTYPE yylloc;\n                          ;}\n     break;\n \n-  case 419:\n+  case 422:\n #line 59 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21798,7 +21910,7 @@ YYLTYPE yylloc;\n \t\t\t ;}\n     break;\n \n-  case 420:\n+  case 423:\n #line 71 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\tPGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);\n@@ -21812,21 +21924,21 @@ YYLTYPE yylloc;\n \t\t\t ;}\n     break;\n \n-  case 423:\n+  case 426:\n #line 92 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\t(yyval.list) = NIL;\n \t\t\t;}\n     break;\n \n-  case 424:\n+  case 427:\n #line 96 \"third_party/libpg_query/grammar/statements/create_function.y\"\n     {\n \t\t\t\t(yyval.list) = (yyvsp[(2) - (3)].list);\n \t\t\t;}\n     break;\n \n-  case 425:\n+  case 428:\n #line 12 \"third_party/libpg_query/grammar/statements/update.y\"\n     {\n \t\t\t\t\tPGUpdateStmt *n = makeNode(PGUpdateStmt);\n@@ -21840,7 +21952,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 426:\n+  case 429:\n #line 3 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\tPGCopyStmt *n = makeNode(PGCopyStmt);\n@@ -21871,7 +21983,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 427:\n+  case 430:\n #line 31 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\tPGCopyStmt *n = makeNode(PGCopyStmt);\n@@ -21893,310 +22005,310 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 428:\n+  case 431:\n #line 53 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 429:\n+  case 432:\n #line 54 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 430:\n+  case 433:\n #line 60 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"delimiter\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(2) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 431:\n+  case 434:\n #line 63 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.defelt) = NULL; ;}\n     break;\n \n-  case 432:\n+  case 435:\n #line 69 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 433:\n+  case 436:\n #line 73 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 434:\n+  case 437:\n #line 80 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {;}\n     break;\n \n-  case 435:\n+  case 438:\n #line 81 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {;}\n     break;\n \n-  case 436:\n+  case 439:\n #line 85 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {;}\n     break;\n \n-  case 437:\n+  case 440:\n #line 86 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {;}\n     break;\n \n-  case 438:\n+  case 441:\n #line 91 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 439:\n+  case 442:\n #line 92 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 440:\n+  case 443:\n #line 96 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 441:\n+  case 444:\n #line 97 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 442:\n+  case 445:\n #line 102 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 443:\n+  case 446:\n #line 103 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}\n     break;\n \n-  case 444:\n+  case 447:\n #line 104 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = (PGNode *) makeNode(PGAStar); ;}\n     break;\n \n-  case 445:\n+  case 448:\n #line 105 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 446:\n+  case 449:\n #line 106 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 447:\n+  case 450:\n #line 112 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 448:\n+  case 451:\n #line 120 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"oids\", (PGNode *)makeInteger(true), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 449:\n+  case 452:\n #line 123 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.defelt) = NULL; ;}\n     break;\n \n-  case 450:\n+  case 453:\n #line 128 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].defelt)); ;}\n     break;\n \n-  case 451:\n+  case 454:\n #line 129 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 452:\n+  case 455:\n #line 135 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"binary\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 453:\n+  case 456:\n #line 138 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.defelt) = NULL; ;}\n     break;\n \n-  case 454:\n+  case 457:\n #line 144 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"binary\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 455:\n+  case 458:\n #line 148 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"oids\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 456:\n+  case 459:\n #line 152 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"freeze\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 457:\n+  case 460:\n #line 156 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"delimiter\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 458:\n+  case 461:\n #line 160 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"null\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 459:\n+  case 462:\n #line 164 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"format\", (PGNode *)makeString(\"csv\"), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 460:\n+  case 463:\n #line 168 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"header\", (PGNode *)makeInteger(true), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 461:\n+  case 464:\n #line 172 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"quote\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 462:\n+  case 465:\n #line 176 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"escape\", (PGNode *)makeString((yyvsp[(3) - (3)].str)), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 463:\n+  case 466:\n #line 180 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_quote\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 464:\n+  case 467:\n #line 184 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_quote\", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 465:\n+  case 468:\n #line 188 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"partition_by\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 466:\n+  case 469:\n #line 192 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"partition_by\", (PGNode *)makeNode(PGAStar), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 467:\n+  case 470:\n #line 196 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_not_null\", (PGNode *)(yyvsp[(4) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 468:\n+  case 471:\n #line 200 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"force_null\", (PGNode *)(yyvsp[(3) - (3)].list), (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 469:\n+  case 472:\n #line 204 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem(\"encoding\", (PGNode *)makeString((yyvsp[(2) - (2)].str)), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 470:\n+  case 473:\n #line 211 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 471:\n+  case 474:\n #line 217 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 472:\n+  case 475:\n #line 218 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 473:\n+  case 476:\n #line 219 \"third_party/libpg_query/grammar/statements/copy.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 474:\n+  case 477:\n #line 225 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 475:\n+  case 478:\n #line 229 \"third_party/libpg_query/grammar/statements/copy.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 478:\n+  case 481:\n #line 52 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 479:\n+  case 482:\n #line 53 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 480:\n+  case 483:\n #line 68 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 481:\n+  case 484:\n #line 70 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list), NIL,\n@@ -22206,7 +22318,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 482:\n+  case 485:\n #line 77 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(3) - (4)].list),\n@@ -22217,7 +22329,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 483:\n+  case 486:\n #line 85 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].list), (yyvsp[(4) - (4)].list),\n@@ -22228,7 +22340,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 484:\n+  case 487:\n #line 93 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (2)].node), NULL, NIL,\n@@ -22239,7 +22351,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 485:\n+  case 488:\n #line 101 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].list), NIL,\n@@ -22250,7 +22362,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 486:\n+  case 489:\n #line 109 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(4) - (5)].list),\n@@ -22261,7 +22373,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 487:\n+  case 490:\n #line 117 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tinsertSelectOptions((PGSelectStmt *) (yyvsp[(2) - (5)].node), (yyvsp[(3) - (5)].list), (yyvsp[(5) - (5)].list),\n@@ -22272,24 +22384,24 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 488:\n+  case 491:\n #line 127 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 489:\n+  case 492:\n #line 128 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 490:\n+  case 493:\n #line 156 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.list) = (yyvsp[(3) - (3)].list);\n \t\t\t;}\n     break;\n \n-  case 491:\n+  case 494:\n #line 160 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -22297,7 +22409,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 492:\n+  case 495:\n #line 171 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22314,7 +22426,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 493:\n+  case 496:\n #line 187 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22332,7 +22444,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 494:\n+  case 497:\n #line 204 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22349,7 +22461,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 495:\n+  case 498:\n #line 221 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -22367,12 +22479,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 496:\n+  case 499:\n #line 235 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 497:\n+  case 500:\n #line 237 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* same as SELECT * FROM relation_expr */\n@@ -22394,35 +22506,35 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 498:\n+  case 501:\n #line 256 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_UNION_BY_NAME, (yyvsp[(3) - (5)].boolean), (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node));\n \t\t\t\t;}\n     break;\n \n-  case 499:\n+  case 502:\n #line 260 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 500:\n+  case 503:\n #line 264 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 501:\n+  case 504:\n #line 268 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[(3) - (4)].boolean), (yyvsp[(1) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 502:\n+  case 505:\n #line 272 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22434,7 +22546,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 503:\n+  case 506:\n #line 281 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22447,7 +22559,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 504:\n+  case 507:\n #line 291 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22459,7 +22571,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 505:\n+  case 508:\n #line 300 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22471,7 +22583,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 506:\n+  case 509:\n #line 309 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22484,7 +22596,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 507:\n+  case 510:\n #line 319 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22497,7 +22609,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 508:\n+  case 511:\n #line 329 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22511,7 +22623,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 509:\n+  case 512:\n #line 340 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22528,7 +22640,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 510:\n+  case 513:\n #line 354 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *res = makeNode(PGSelectStmt);\n@@ -22545,7 +22657,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 517:\n+  case 520:\n #line 383 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -22554,7 +22666,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 518:\n+  case 521:\n #line 389 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -22564,32 +22676,32 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 519:\n+  case 522:\n #line 395 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 520:\n+  case 523:\n #line 399 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 521:\n+  case 524:\n #line 400 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 522:\n+  case 525:\n #line 404 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 523:\n+  case 526:\n #line 405 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 524:\n+  case 527:\n #line 420 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22599,7 +22711,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 525:\n+  case 528:\n #line 427 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22609,7 +22721,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 526:\n+  case 529:\n #line 434 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.with) = makeNode(PGWithClause);\n@@ -22619,17 +22731,17 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 527:\n+  case 530:\n #line 443 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 528:\n+  case 531:\n #line 444 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 529:\n+  case 532:\n #line 448 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGCommonTableExpr *n = makeNode(PGCommonTableExpr);\n@@ -22641,7 +22753,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 530:\n+  case 533:\n #line 460 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.into) = makeNode(PGIntoClause);\n@@ -22654,12 +22766,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 531:\n+  case 534:\n #line 470 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.into) = NULL; ;}\n     break;\n \n-  case 532:\n+  case 535:\n #line 479 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n@@ -22667,7 +22779,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 533:\n+  case 536:\n #line 484 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n@@ -22675,7 +22787,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 534:\n+  case 537:\n #line 489 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(4) - (4)].range);\n@@ -22683,7 +22795,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 535:\n+  case 538:\n #line 494 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(4) - (4)].range);\n@@ -22691,7 +22803,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 536:\n+  case 539:\n #line 499 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n@@ -22702,7 +22814,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 537:\n+  case 540:\n #line 507 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tereport(PGWARNING,\n@@ -22713,7 +22825,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 538:\n+  case 541:\n #line 515 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(3) - (3)].range);\n@@ -22721,7 +22833,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 539:\n+  case 542:\n #line 520 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(2) - (2)].range);\n@@ -22729,7 +22841,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 540:\n+  case 543:\n #line 525 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (1)].range);\n@@ -22737,87 +22849,87 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 541:\n+  case 544:\n #line 531 \"third_party/libpg_query/grammar/statements/select.y\"\n     {;}\n     break;\n \n-  case 542:\n+  case 545:\n #line 532 \"third_party/libpg_query/grammar/statements/select.y\"\n     {;}\n     break;\n \n-  case 543:\n+  case 546:\n #line 536 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 544:\n+  case 547:\n #line 537 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 545:\n+  case 548:\n #line 538 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 546:\n+  case 549:\n #line 542 \"third_party/libpg_query/grammar/statements/select.y\"\n     { ;}\n     break;\n \n-  case 547:\n+  case 550:\n #line 549 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(NIL); ;}\n     break;\n \n-  case 548:\n+  case 551:\n #line 550 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}\n     break;\n \n-  case 549:\n+  case 552:\n #line 554 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL;;}\n     break;\n \n-  case 550:\n+  case 553:\n #line 555 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 551:\n+  case 554:\n #line 559 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true;;}\n     break;\n \n-  case 552:\n+  case 555:\n #line 560 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false;;}\n     break;\n \n-  case 553:\n+  case 556:\n #line 561 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 554:\n+  case 557:\n #line 565 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list);;}\n     break;\n \n-  case 555:\n+  case 558:\n #line 566 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 556:\n+  case 559:\n #line 570 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 557:\n+  case 560:\n #line 572 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSortBy *sort = makeNode(PGSortBy);\n@@ -22833,17 +22945,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 558:\n+  case 561:\n #line 587 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].sortby)); ;}\n     break;\n \n-  case 559:\n+  case 562:\n #line 588 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].sortby)); ;}\n     break;\n \n-  case 560:\n+  case 563:\n #line 592 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.sortby) = makeNode(PGSortBy);\n@@ -22855,7 +22967,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 561:\n+  case 564:\n #line 601 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.sortby) = makeNode(PGSortBy);\n@@ -22867,72 +22979,72 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 562:\n+  case 565:\n #line 611 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_ASC; ;}\n     break;\n \n-  case 563:\n+  case 566:\n #line 612 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_DESC; ;}\n     break;\n \n-  case 564:\n+  case 567:\n #line 613 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.sortorder) = PG_SORTBY_DEFAULT; ;}\n     break;\n \n-  case 565:\n+  case 568:\n #line 616 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; ;}\n     break;\n \n-  case 566:\n+  case 569:\n #line 617 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; ;}\n     break;\n \n-  case 567:\n+  case 570:\n #line 618 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; ;}\n     break;\n \n-  case 568:\n+  case 571:\n #line 622 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(2) - (2)].node), (yyvsp[(1) - (2)].node)); ;}\n     break;\n \n-  case 569:\n+  case 572:\n #line 623 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 570:\n+  case 573:\n #line 624 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2(NULL, (yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 571:\n+  case 574:\n #line 625 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (1)].node), NULL); ;}\n     break;\n \n-  case 572:\n+  case 575:\n #line 629 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 573:\n+  case 576:\n #line 630 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2(NULL,NULL); ;}\n     break;\n \n-  case 574:\n+  case 577:\n #line 635 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 575:\n+  case 578:\n #line 637 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* Disabled because it was too confusing, bjm 2002-02-18 */\n@@ -22944,91 +23056,91 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 576:\n+  case 579:\n #line 653 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(3) - (5)].node); ;}\n     break;\n \n-  case 577:\n+  case 580:\n #line 655 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeIntConst(1, -1); ;}\n     break;\n \n-  case 578:\n+  case 581:\n #line 660 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 579:\n+  case 582:\n #line 663 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (3)].node); ;}\n     break;\n \n-  case 580:\n+  case 583:\n #line 671 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);\n \t\t;}\n     break;\n \n-  case 581:\n+  case 584:\n #line 675 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);\n \t\t;}\n     break;\n \n-  case 582:\n+  case 585:\n #line 679 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeFloat((yyvsp[(1) - (2)].str)), true);\n \t\t;}\n     break;\n \n-  case 583:\n+  case 586:\n #line 683 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), true);\n \t\t;}\n     break;\n \n-  case 584:\n+  case 587:\n #line 687 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (1)].ival)), false);\n \t\t;}\n     break;\n \n-  case 585:\n+  case 588:\n #line 691 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleSize(makeInteger((yyvsp[(1) - (2)].ival)), false);\n \t\t;}\n     break;\n \n-  case 586:\n+  case 589:\n #line 698 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(3) - (3)].node);\n \t\t\t\t;}\n     break;\n \n-  case 587:\n+  case 590:\n #line 702 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 588:\n+  case 591:\n #line 709 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 589:\n+  case 592:\n #line 710 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 590:\n+  case 593:\n #line 715 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tint seed = (yyvsp[(5) - (5)].ival);\n@@ -23036,21 +23148,21 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 591:\n+  case 594:\n #line 720 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleOptions((yyvsp[(1) - (1)].node), NULL, NULL, (yylsp[(1) - (1)]));\n \t\t;}\n     break;\n \n-  case 592:\n+  case 595:\n #line 724 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t(yyval.node) = makeSampleOptions((yyvsp[(1) - (4)].node), (yyvsp[(3) - (4)].str), NULL, (yylsp[(1) - (4)]));\n \t\t;}\n     break;\n \n-  case 593:\n+  case 596:\n #line 728 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tint seed = (yyvsp[(5) - (6)].ival);\n@@ -23058,39 +23170,39 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 594:\n+  case 597:\n #line 736 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(2) - (2)].node);\n \t\t\t\t;}\n     break;\n \n-  case 595:\n+  case 598:\n #line 742 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 596:\n+  case 599:\n #line 743 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 597:\n+  case 600:\n #line 748 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = (yyvsp[(3) - (4)].ival); ;}\n     break;\n \n-  case 598:\n+  case 601:\n #line 749 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = -1; ;}\n     break;\n \n-  case 599:\n+  case 602:\n #line 753 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 600:\n+  case 603:\n #line 755 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* LIMIT ALL is represented as a NULL constant */\n@@ -23098,77 +23210,77 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 601:\n+  case 604:\n #line 760 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent((yyvsp[(1) - (2)].node)); ;}\n     break;\n \n-  case 602:\n+  case 605:\n #line 762 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent(makeFloatConst((yyvsp[(1) - (2)].str),(yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 603:\n+  case 606:\n #line 764 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeLimitPercent(makeIntConst((yyvsp[(1) - (2)].ival),(yylsp[(1) - (2)]))); ;}\n     break;\n \n-  case 604:\n+  case 607:\n #line 768 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 605:\n+  case 608:\n #line 788 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 606:\n+  case 609:\n #line 790 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 607:\n+  case 610:\n #line 792 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 608:\n+  case 611:\n #line 796 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival),(yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 609:\n+  case 612:\n #line 797 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str),(yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 610:\n+  case 613:\n #line 801 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 611:\n+  case 614:\n #line 802 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 612:\n+  case 615:\n #line 805 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 613:\n+  case 616:\n #line 806 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = 0; ;}\n     break;\n \n-  case 614:\n+  case 617:\n #line 831 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 615:\n+  case 618:\n #line 833 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNode *node = (PGNode *) makeGroupingSet(GROUPING_SET_ALL, NIL, (yylsp[(3) - (3)]));\n@@ -23176,145 +23288,145 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 616:\n+  case 619:\n #line 837 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 617:\n+  case 620:\n #line 841 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 618:\n+  case 621:\n #line 842 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list),(yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 619:\n+  case 622:\n #line 846 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 620:\n+  case 623:\n #line 847 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 621:\n+  case 624:\n #line 851 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 622:\n+  case 625:\n #line 852 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 623:\n+  case 626:\n #line 853 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 624:\n+  case 627:\n #line 854 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 625:\n+  case 628:\n #line 855 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 626:\n+  case 629:\n #line 860 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 627:\n+  case 630:\n #line 873 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_ROLLUP, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 628:\n+  case 631:\n #line 880 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_CUBE, (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 629:\n+  case 632:\n #line 887 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_SETS, (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 630:\n+  case 633:\n #line 893 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 631:\n+  case 634:\n #line 894 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 632:\n+  case 635:\n #line 898 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 633:\n+  case 636:\n #line 899 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 634:\n+  case 637:\n #line 903 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 635:\n+  case 638:\n #line 904 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 636:\n+  case 639:\n #line 908 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 637:\n+  case 640:\n #line 909 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 638:\n+  case 641:\n #line 913 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 639:\n+  case 642:\n #line 914 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 640:\n+  case 643:\n #line 918 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 641:\n+  case 644:\n #line 919 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 642:\n+  case 645:\n #line 924 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLockingClause *n = makeNode(PGLockingClause);\n@@ -23325,52 +23437,52 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 643:\n+  case 646:\n #line 934 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = LCS_FORUPDATE; ;}\n     break;\n \n-  case 644:\n+  case 647:\n #line 935 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; ;}\n     break;\n \n-  case 645:\n+  case 648:\n #line 936 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORSHARE; ;}\n     break;\n \n-  case 646:\n+  case 649:\n #line 937 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; ;}\n     break;\n \n-  case 647:\n+  case 650:\n #line 941 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 648:\n+  case 651:\n #line 942 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 649:\n+  case 652:\n #line 947 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = LockWaitError; ;}\n     break;\n \n-  case 650:\n+  case 653:\n #line 948 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = PGLockWaitSkip; ;}\n     break;\n \n-  case 651:\n+  case 654:\n #line 949 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.lockwaitpolicy) = PGLockWaitBlock; ;}\n     break;\n \n-  case 652:\n+  case 655:\n #line 959 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = makeNode(PGSelectStmt);\n@@ -23379,7 +23491,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 653:\n+  case 656:\n #line 965 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSelectStmt *n = (PGSelectStmt *) (yyvsp[(1) - (5)].node);\n@@ -23388,47 +23500,47 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 654:\n+  case 657:\n #line 973 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 655:\n+  case 658:\n #line 974 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (2)].node); ;}\n     break;\n \n-  case 656:\n+  case 659:\n #line 987 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 657:\n+  case 660:\n #line 988 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 658:\n+  case 661:\n #line 992 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 659:\n+  case 662:\n #line 993 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 660:\n+  case 663:\n #line 997 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 661:\n+  case 664:\n #line 998 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 662:\n+  case 665:\n #line 1005 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyvsp[(1) - (3)].range)->alias = (yyvsp[(2) - (3)].alias);\n@@ -23437,7 +23549,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 663:\n+  case 666:\n #line 1011 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = (PGRangeFunction *) (yyvsp[(1) - (3)].node);\n@@ -23448,7 +23560,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 664:\n+  case 667:\n #line 1019 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n@@ -23460,7 +23572,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 665:\n+  case 668:\n #line 1028 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = (PGRangeFunction *) (yyvsp[(2) - (3)].node);\n@@ -23471,7 +23583,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 666:\n+  case 669:\n #line 1036 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n@@ -23483,7 +23595,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 667:\n+  case 670:\n #line 1045 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeSubselect *n = makeNode(PGRangeSubselect);\n@@ -23495,14 +23607,14 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 668:\n+  case 671:\n #line 1054 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) (yyvsp[(1) - (1)].jexpr);\n \t\t\t\t;}\n     break;\n \n-  case 669:\n+  case 672:\n #line 1058 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyvsp[(2) - (4)].jexpr)->alias = (yyvsp[(4) - (4)].alias);\n@@ -23510,7 +23622,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 670:\n+  case 673:\n #line 1063 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPivotExpr *n = makeNode(PGPivotExpr);\n@@ -23523,7 +23635,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 671:\n+  case 674:\n #line 1073 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPivotExpr *n = makeNode(PGPivotExpr);\n@@ -23536,32 +23648,32 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 672:\n+  case 675:\n #line 1085 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 673:\n+  case 676:\n #line 1086 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 674:\n+  case 677:\n #line 1089 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 675:\n+  case 678:\n #line 1090 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 676:\n+  case 679:\n #line 1091 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 677:\n+  case 680:\n #line 1095 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -23571,7 +23683,7 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 678:\n+  case 681:\n #line 1103 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -23581,17 +23693,17 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 679:\n+  case 682:\n #line 1112 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 680:\n+  case 683:\n #line 1113 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 681:\n+  case 684:\n #line 1117 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -23601,7 +23713,7 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 682:\n+  case 685:\n #line 1125 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -23611,31 +23723,31 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 683:\n+  case 686:\n #line 1134 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 684:\n+  case 687:\n #line 1138 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 685:\n+  case 688:\n #line 1144 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 686:\n+  case 689:\n #line 1145 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 687:\n+  case 690:\n #line 1150 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\tPGPivot *n = makeNode(PGPivot);\n@@ -23645,28 +23757,28 @@ YYLTYPE yylloc;\n \t\t;}\n     break;\n \n-  case 688:\n+  case 691:\n #line 1159 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 689:\n+  case 692:\n #line 1163 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 690:\n+  case 693:\n #line 1188 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.jexpr) = (yyvsp[(2) - (3)].jexpr);\n \t\t\t\t;}\n     break;\n \n-  case 691:\n+  case 694:\n #line 1192 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* CROSS JOIN is same as unqualified inner join */\n@@ -23682,7 +23794,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 692:\n+  case 695:\n #line 1205 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23699,7 +23811,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 693:\n+  case 696:\n #line 1219 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* letting join_type reduce to empty doesn't work */\n@@ -23717,7 +23829,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 694:\n+  case 697:\n #line 1234 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23732,7 +23844,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 695:\n+  case 698:\n #line 1246 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* letting join_type reduce to empty doesn't work */\n@@ -23748,7 +23860,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 696:\n+  case 699:\n #line 1259 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23765,7 +23877,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 697:\n+  case 700:\n #line 1273 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGJoinExpr *n = makeNode(PGJoinExpr);\n@@ -23782,7 +23894,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 698:\n+  case 701:\n #line 1287 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* POSITIONAL JOIN is a coordinated scan */\n@@ -23798,7 +23910,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 699:\n+  case 702:\n #line 1300 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                     /* ANTI JOIN is a filter */\n@@ -23816,7 +23928,7 @@ YYLTYPE yylloc;\n                 ;}\n     break;\n \n-  case 700:\n+  case 703:\n #line 1315 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                    /* SEMI JOIN is also a filter */\n@@ -23835,7 +23947,7 @@ YYLTYPE yylloc;\n                ;}\n     break;\n \n-  case 701:\n+  case 704:\n #line 1334 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n@@ -23844,7 +23956,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 702:\n+  case 705:\n #line 1340 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n@@ -23852,7 +23964,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 703:\n+  case 706:\n #line 1345 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n@@ -23861,7 +23973,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 704:\n+  case 707:\n #line 1351 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.alias) = makeNode(PGAlias);\n@@ -23869,31 +23981,31 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 705:\n+  case 708:\n #line 1357 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.alias) = (yyvsp[(1) - (1)].alias); ;}\n     break;\n \n-  case 706:\n+  case 709:\n #line 1358 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.alias) = NULL; ;}\n     break;\n \n-  case 707:\n+  case 710:\n #line 1367 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (1)].alias), NIL);\n \t\t\t\t;}\n     break;\n \n-  case 708:\n+  case 711:\n #line 1371 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(NULL, (yyvsp[(3) - (4)].list));\n \t\t\t\t;}\n     break;\n \n-  case 709:\n+  case 712:\n #line 1375 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAlias *a = makeNode(PGAlias);\n@@ -23902,7 +24014,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 710:\n+  case 713:\n #line 1381 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAlias *a = makeNode(PGAlias);\n@@ -23911,64 +24023,64 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 711:\n+  case 714:\n #line 1387 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(NULL, NIL);\n \t\t\t\t;}\n     break;\n \n-  case 712:\n+  case 715:\n #line 1392 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_FULL; ;}\n     break;\n \n-  case 713:\n+  case 716:\n #line 1393 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_LEFT; ;}\n     break;\n \n-  case 714:\n+  case 717:\n #line 1394 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_RIGHT; ;}\n     break;\n \n-  case 715:\n+  case 718:\n #line 1395 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_SEMI; ;}\n     break;\n \n-  case 716:\n+  case 719:\n #line 1396 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_ANTI; ;}\n     break;\n \n-  case 717:\n+  case 720:\n #line 1397 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.jtype) = PG_JOIN_INNER; ;}\n     break;\n \n-  case 718:\n+  case 721:\n #line 1401 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 719:\n+  case 722:\n #line 1402 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 720:\n+  case 723:\n #line 1414 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 721:\n+  case 724:\n #line 1415 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 722:\n+  case 725:\n #line 1421 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* inheritance query, implicitly */\n@@ -23978,7 +24090,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 723:\n+  case 726:\n #line 1428 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* inheritance query, explicitly */\n@@ -23988,7 +24100,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 724:\n+  case 727:\n #line 1435 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* no inheritance */\n@@ -23998,7 +24110,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 725:\n+  case 728:\n #line 1442 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* no inheritance, SQL99-style syntax */\n@@ -24008,7 +24120,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 726:\n+  case 729:\n #line 1474 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = makeNode(PGRangeFunction);\n@@ -24022,7 +24134,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 727:\n+  case 730:\n #line 1485 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGRangeFunction *n = makeNode(PGRangeFunction);\n@@ -24036,66 +24148,66 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 728:\n+  case 731:\n #line 1498 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 729:\n+  case 732:\n #line 1502 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 730:\n+  case 733:\n #line 1503 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 731:\n+  case 734:\n #line 1506 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 732:\n+  case 735:\n #line 1507 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 733:\n+  case 736:\n #line 1510 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 734:\n+  case 737:\n #line 1511 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 735:\n+  case 738:\n #line 1516 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 736:\n+  case 739:\n #line 1517 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 737:\n+  case 740:\n #line 1523 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 738:\n+  case 741:\n #line 1527 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 739:\n+  case 742:\n #line 1533 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGColumnDef *n = makeNode(PGColumnDef);\n@@ -24116,7 +24228,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 740:\n+  case 743:\n #line 1554 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCollateClause *n = makeNode(PGCollateClause);\n@@ -24127,36 +24239,36 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 741:\n+  case 744:\n #line 1561 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 742:\n+  case 745:\n #line 1574 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n              (yyval.list) = list_make1(list_make2(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].typnam)));\n             ;}\n     break;\n \n-  case 743:\n+  case 746:\n #line 1577 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n              (yyval.list) = lappend((yyvsp[(1) - (4)].list), list_make2(makeString((yyvsp[(3) - (4)].str)), (yyvsp[(4) - (4)].typnam)));\n             ;}\n     break;\n \n-  case 746:\n+  case 749:\n #line 1584 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 747:\n+  case 750:\n #line 1585 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = NULL; ;}\n     break;\n \n-  case 748:\n+  case 751:\n #line 1588 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n@@ -24164,7 +24276,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 749:\n+  case 752:\n #line 1593 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (3)].typnam);\n@@ -24173,7 +24285,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 750:\n+  case 753:\n #line 1600 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (5)].typnam);\n@@ -24181,7 +24293,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 751:\n+  case 754:\n #line 1605 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (6)].typnam);\n@@ -24190,7 +24302,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 752:\n+  case 755:\n #line 1611 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n@@ -24198,7 +24310,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 753:\n+  case 756:\n #line 1616 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (3)].typnam);\n@@ -24207,7 +24319,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 754:\n+  case 757:\n #line 1621 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                (yyval.typnam) = SystemTypeName(\"struct\");\n@@ -24217,7 +24329,7 @@ YYLTYPE yylloc;\n                ;}\n     break;\n \n-  case 755:\n+  case 758:\n #line 1627 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n                (yyval.typnam) = SystemTypeName(\"map\");\n@@ -24227,7 +24339,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 756:\n+  case 759:\n #line 1633 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t   (yyval.typnam) = SystemTypeName(\"union\");\n@@ -24237,47 +24349,47 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 757:\n+  case 760:\n #line 1643 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeInteger(-1)); ;}\n     break;\n \n-  case 758:\n+  case 761:\n #line 1645 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = lappend((yyvsp[(1) - (4)].list), makeInteger((yyvsp[(3) - (4)].ival))); ;}\n     break;\n \n-  case 759:\n+  case 762:\n #line 1647 \"third_party/libpg_query/grammar/statements/select.y\"\n     {  (yyval.list) = NIL; ;}\n     break;\n \n-  case 760:\n+  case 763:\n #line 1651 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 761:\n+  case 764:\n #line 1652 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 762:\n+  case 765:\n #line 1653 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 763:\n+  case 766:\n #line 1654 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 764:\n+  case 767:\n #line 1655 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 765:\n+  case 768:\n #line 1657 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (2)].typnam);\n@@ -24285,7 +24397,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 766:\n+  case 769:\n #line 1662 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (4)].typnam);\n@@ -24294,27 +24406,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 767:\n+  case 770:\n #line 1681 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 768:\n+  case 771:\n #line 1682 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 769:\n+  case 772:\n #line 1683 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 770:\n+  case 773:\n #line 1684 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.typnam) = (yyvsp[(1) - (1)].typnam); ;}\n     break;\n \n-  case 771:\n+  case 774:\n #line 1696 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = makeTypeName((yyvsp[(1) - (2)].str));\n@@ -24323,17 +24435,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 772:\n+  case 775:\n #line 1709 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 773:\n+  case 776:\n #line 1710 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 774:\n+  case 777:\n #line 1717 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int4\");\n@@ -24341,7 +24453,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 775:\n+  case 778:\n #line 1722 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int4\");\n@@ -24349,7 +24461,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 776:\n+  case 779:\n #line 1727 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int2\");\n@@ -24357,7 +24469,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 777:\n+  case 780:\n #line 1732 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"int8\");\n@@ -24365,7 +24477,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 778:\n+  case 781:\n #line 1737 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float4\");\n@@ -24373,7 +24485,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 779:\n+  case 782:\n #line 1742 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(2) - (2)].typnam);\n@@ -24381,7 +24493,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 780:\n+  case 783:\n #line 1747 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float8\");\n@@ -24389,7 +24501,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 781:\n+  case 784:\n #line 1752 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n@@ -24398,7 +24510,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 782:\n+  case 785:\n #line 1758 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n@@ -24407,7 +24519,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 783:\n+  case 786:\n #line 1764 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"numeric\");\n@@ -24416,7 +24528,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 784:\n+  case 787:\n #line 1770 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"bool\");\n@@ -24424,7 +24536,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 785:\n+  case 788:\n #line 1777 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n@@ -24448,35 +24560,35 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 786:\n+  case 789:\n #line 1798 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"float4\");\n \t\t\t\t;}\n     break;\n \n-  case 787:\n+  case 790:\n #line 1808 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 788:\n+  case 791:\n #line 1812 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 789:\n+  case 792:\n #line 1820 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 790:\n+  case 793:\n #line 1824 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n@@ -24484,7 +24596,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 791:\n+  case 794:\n #line 1832 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tconst char *typname;\n@@ -24496,7 +24608,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 792:\n+  case 795:\n #line 1844 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* bit defaults to bit(1), varbit to no limit */\n@@ -24513,28 +24625,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 793:\n+  case 796:\n #line 1865 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 794:\n+  case 797:\n #line 1869 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 795:\n+  case 798:\n #line 1875 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = (yyvsp[(1) - (1)].typnam);\n \t\t\t\t;}\n     break;\n \n-  case 796:\n+  case 799:\n #line 1879 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* Length was not specified so allow to be unrestricted.\n@@ -24548,7 +24660,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 797:\n+  case 800:\n #line 1892 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName((yyvsp[(1) - (4)].conststr));\n@@ -24557,7 +24669,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 798:\n+  case 801:\n #line 1900 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName((yyvsp[(1) - (1)].conststr));\n@@ -24568,47 +24680,47 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 799:\n+  case 802:\n #line 1910 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 800:\n+  case 803:\n #line 1912 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 801:\n+  case 804:\n #line 1914 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"varchar\"; ;}\n     break;\n \n-  case 802:\n+  case 805:\n #line 1916 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 803:\n+  case 806:\n #line 1918 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(3) - (3)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 804:\n+  case 807:\n #line 1920 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = (yyvsp[(2) - (2)].boolean) ? \"varchar\": \"bpchar\"; ;}\n     break;\n \n-  case 805:\n+  case 808:\n #line 1924 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 806:\n+  case 809:\n #line 1925 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 807:\n+  case 810:\n #line 1933 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(5) - (5)].boolean))\n@@ -24620,7 +24732,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 808:\n+  case 811:\n #line 1942 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].boolean))\n@@ -24631,7 +24743,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 809:\n+  case 812:\n #line 1950 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(5) - (5)].boolean))\n@@ -24643,7 +24755,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 810:\n+  case 813:\n #line 1959 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].boolean))\n@@ -24654,7 +24766,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 811:\n+  case 814:\n #line 1970 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.typnam) = SystemTypeName(\"interval\");\n@@ -24662,62 +24774,62 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 812:\n+  case 815:\n #line 1977 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 813:\n+  case 816:\n #line 1978 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 814:\n+  case 817:\n #line 1979 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 831:\n+  case 834:\n #line 2008 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 832:\n+  case 835:\n #line 2010 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 833:\n+  case 836:\n #line 2012 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 834:\n+  case 837:\n #line 2014 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 835:\n+  case 838:\n #line 2016 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 836:\n+  case 839:\n #line 2018 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 837:\n+  case 840:\n #line 2020 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 838:\n+  case 841:\n #line 2022 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[(1) - (1)]))); ;}\n     break;\n \n-  case 839:\n+  case 842:\n #line 2024 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |\n@@ -24725,7 +24837,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 840:\n+  case 843:\n #line 2029 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n@@ -24733,7 +24845,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 841:\n+  case 844:\n #line 2034 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n@@ -24742,7 +24854,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 842:\n+  case 845:\n #line 2040 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |\n@@ -24752,7 +24864,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 843:\n+  case 846:\n #line 2047 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |\n@@ -24760,7 +24872,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 844:\n+  case 847:\n #line 2052 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |\n@@ -24769,7 +24881,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 845:\n+  case 848:\n #line 2058 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |\n@@ -24777,22 +24889,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 846:\n+  case 849:\n #line 2063 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 847:\n+  case 850:\n #line 2094 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 848:\n+  case 851:\n #line 2097 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 849:\n+  case 852:\n #line 2099 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCollateClause *n = makeNode(PGCollateClause);\n@@ -24803,7 +24915,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 850:\n+  case 853:\n #line 2107 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"timezone\"),\n@@ -24812,122 +24924,122 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 851:\n+  case 854:\n #line 2122 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 852:\n+  case 855:\n #line 2124 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 853:\n+  case 856:\n #line 2126 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 854:\n+  case 857:\n #line 2128 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"-\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 855:\n+  case 858:\n #line 2130 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"*\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 856:\n+  case 859:\n #line 2132 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"/\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 857:\n+  case 860:\n #line 2134 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"//\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 858:\n+  case 861:\n #line 2136 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"%\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 859:\n+  case 862:\n #line 2138 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"^\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 860:\n+  case 863:\n #line 2140 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"**\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 861:\n+  case 864:\n #line 2142 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 862:\n+  case 865:\n #line 2144 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 863:\n+  case 866:\n #line 2146 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 864:\n+  case 867:\n #line 2148 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 865:\n+  case 868:\n #line 2150 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 866:\n+  case 869:\n #line 2152 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 867:\n+  case 870:\n #line 2155 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 868:\n+  case 871:\n #line 2157 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 869:\n+  case 872:\n #line 2159 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}\n     break;\n \n-  case 870:\n+  case 873:\n #line 2162 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeAndExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 871:\n+  case 874:\n #line 2164 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeOrExpr((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 872:\n+  case 875:\n #line 2166 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 873:\n+  case 876:\n #line 2168 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeNotExpr((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 874:\n+  case 877:\n #line 2170 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, \"~~~\",\n@@ -24935,7 +25047,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 875:\n+  case 878:\n #line 2175 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, \"~~\",\n@@ -24943,7 +25055,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 876:\n+  case 879:\n #line 2180 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"like_escape\"),\n@@ -24953,7 +25065,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 877:\n+  case 880:\n #line 2187 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, \"!~~\",\n@@ -24961,7 +25073,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 878:\n+  case 881:\n #line 2192 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"not_like_escape\"),\n@@ -24971,7 +25083,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 879:\n+  case 882:\n #line 2199 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, \"~~*\",\n@@ -24979,7 +25091,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 880:\n+  case 883:\n #line 2204 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"ilike_escape\"),\n@@ -24989,7 +25101,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 881:\n+  case 884:\n #line 2211 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, \"!~~*\",\n@@ -24997,7 +25109,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 882:\n+  case 885:\n #line 2216 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"not_ilike_escape\"),\n@@ -25007,7 +25119,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 883:\n+  case 886:\n #line 2224 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n@@ -25018,7 +25130,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 884:\n+  case 887:\n #line 2232 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n@@ -25029,7 +25141,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 885:\n+  case 888:\n #line 2240 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n@@ -25040,7 +25152,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 886:\n+  case 889:\n #line 2248 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"similar_escape\"),\n@@ -25051,7 +25163,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 887:\n+  case 890:\n #line 2266 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n@@ -25062,7 +25174,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 888:\n+  case 891:\n #line 2274 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n@@ -25073,7 +25185,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 889:\n+  case 892:\n #line 2282 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n@@ -25084,7 +25196,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 890:\n+  case 893:\n #line 2290 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n@@ -25095,7 +25207,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 891:\n+  case 894:\n #line 2298 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNullTest *n = makeNode(PGNullTest);\n@@ -25106,7 +25218,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 892:\n+  case 895:\n #line 2306 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGLambdaFunction *n = makeNode(PGLambdaFunction);\n@@ -25117,14 +25229,14 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 893:\n+  case 896:\n #line 2314 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"->>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)]));\n \t\t\t;}\n     break;\n \n-  case 894:\n+  case 897:\n #line 2318 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif (list_length((yyvsp[(1) - (3)].list)) != 2)\n@@ -25143,7 +25255,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 895:\n+  case 898:\n #line 2334 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25154,7 +25266,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 896:\n+  case 899:\n #line 2342 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25165,7 +25277,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 897:\n+  case 900:\n #line 2350 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25176,7 +25288,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 898:\n+  case 901:\n #line 2358 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25187,7 +25299,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 899:\n+  case 902:\n #line 2366 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25198,7 +25310,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 900:\n+  case 903:\n #line 2374 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGBooleanTest *b = makeNode(PGBooleanTest);\n@@ -25209,35 +25321,35 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 901:\n+  case 904:\n #line 2382 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, \"=\", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 902:\n+  case 905:\n #line 2386 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, \"=\", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 903:\n+  case 906:\n #line 2390 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"=\", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 904:\n+  case 907:\n #line 2394 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"<>\", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));\n \t\t\t\t;}\n     break;\n \n-  case 905:\n+  case 908:\n #line 2398 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,\n@@ -25248,7 +25360,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 906:\n+  case 909:\n #line 2406 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,\n@@ -25259,7 +25371,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 907:\n+  case 910:\n #line 2414 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,\n@@ -25270,7 +25382,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 908:\n+  case 911:\n #line 2422 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,\n@@ -25281,7 +25393,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 909:\n+  case 912:\n #line 2430 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* in_expr returns a PGSubLink or a list of a_exprs */\n@@ -25304,7 +25416,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 910:\n+  case 913:\n #line 2450 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* in_expr returns a PGSubLink or a list of a_exprs */\n@@ -25329,7 +25441,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 911:\n+  case 914:\n #line 2472 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n@@ -25343,7 +25455,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 912:\n+  case 915:\n #line 2483 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(3) - (6)].subquerytype) == PG_ANY_SUBLINK)\n@@ -25353,7 +25465,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 913:\n+  case 916:\n #line 2490 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n@@ -25370,7 +25482,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 914:\n+  case 917:\n #line 2504 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -25381,7 +25493,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 915:\n+  case 918:\n #line 2512 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -25392,7 +25504,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 916:\n+  case 919:\n #line 2520 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAStar *star = makeNode(PGAStar);\n@@ -25404,140 +25516,140 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 917:\n+  case 920:\n #line 2540 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 918:\n+  case 921:\n #line 2542 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].typnam), 0, (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 919:\n+  case 922:\n #line 2544 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 920:\n+  case 923:\n #line 2546 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = doNegate((yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 921:\n+  case 924:\n #line 2548 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"+\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 922:\n+  case 925:\n #line 2550 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"-\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 923:\n+  case 926:\n #line 2552 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"*\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 924:\n+  case 927:\n #line 2554 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"/\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 925:\n+  case 928:\n #line 2556 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"//\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 926:\n+  case 929:\n #line 2558 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"%\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 927:\n+  case 930:\n #line 2560 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"^\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 928:\n+  case 931:\n #line 2562 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"**\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 929:\n+  case 932:\n #line 2564 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 930:\n+  case 933:\n #line 2566 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 931:\n+  case 934:\n #line 2568 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 932:\n+  case 935:\n #line 2570 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 933:\n+  case 936:\n #line 2572 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \">=\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 934:\n+  case 937:\n #line 2574 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, \"<>\", (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 935:\n+  case 938:\n #line 2576 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (3)].list), (yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yylsp[(2) - (3)])); ;}\n     break;\n \n-  case 936:\n+  case 939:\n #line 2578 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(1) - (2)].list), NULL, (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)])); ;}\n     break;\n \n-  case 937:\n+  case 940:\n #line 2580 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[(2) - (2)].list), (yyvsp[(1) - (2)].node), NULL, (yylsp[(2) - (2)])); ;}\n     break;\n \n-  case 938:\n+  case 941:\n #line 2582 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, \"=\", (yyvsp[(1) - (5)].node), (yyvsp[(5) - (5)].node), (yylsp[(2) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 939:\n+  case 942:\n #line 2586 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, \"=\", (yyvsp[(1) - (6)].node), (yyvsp[(6) - (6)].node), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 940:\n+  case 943:\n #line 2590 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"=\", (yyvsp[(1) - (6)].node), (PGNode *) (yyvsp[(5) - (6)].list), (yylsp[(2) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 941:\n+  case 944:\n #line 2594 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, \"<>\", (yyvsp[(1) - (7)].node), (PGNode *) (yyvsp[(6) - (7)].list), (yylsp[(2) - (7)]));\n \t\t\t\t;}\n     break;\n \n-  case 943:\n+  case 946:\n #line 2608 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"row\"), (yyvsp[(1) - (1)].list), (yylsp[(1) - (1)]));\n@@ -25545,7 +25657,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 944:\n+  case 947:\n #line 2613 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].list))\n@@ -25560,17 +25672,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 945:\n+  case 948:\n #line 2626 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 946:\n+  case 949:\n #line 2627 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 947:\n+  case 950:\n #line 2629 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGPositionalReference *n = makeNode(PGPositionalReference);\n@@ -25580,14 +25692,14 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 948:\n+  case 951:\n #line 2636 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeNamedParamRef((yyvsp[(2) - (2)].str), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 949:\n+  case 952:\n #line 2639 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGFuncCall *n = makeFuncCall(SystemFuncName(\"list_value\"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));\n@@ -25595,14 +25707,14 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 950:\n+  case 953:\n #line 2643 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t;}\n     break;\n \n-  case 951:\n+  case 954:\n #line 2647 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n@@ -25616,7 +25728,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 952:\n+  case 955:\n #line 2657 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\tPGList *func_name = list_make1(makeString(\"construct_array\"));\n@@ -25625,12 +25737,12 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 953:\n+  case 956:\n #line 2663 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 954:\n+  case 957:\n #line 2665 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n@@ -25644,7 +25756,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 955:\n+  case 958:\n #line 2676 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n@@ -25671,7 +25783,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 956:\n+  case 959:\n #line 2700 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n@@ -25685,7 +25797,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 957:\n+  case 960:\n #line 2711 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t  PGGroupingFunc *g = makeNode(PGGroupingFunc);\n@@ -25695,14 +25807,14 @@ YYLTYPE yylloc;\n \t\t\t  ;}\n     break;\n \n-  case 958:\n+  case 961:\n #line 2722 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeParamRef(0, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 959:\n+  case 962:\n #line 2726 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGParamRef *p = makeNode(PGParamRef);\n@@ -25712,14 +25824,14 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 960:\n+  case 963:\n #line 2733 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(2) - (3)].node);\n \t\t\t\t;}\n     break;\n \n-  case 961:\n+  case 964:\n #line 2737 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"struct_pack\"), (yyvsp[(2) - (3)].list), (yylsp[(2) - (3)]));\n@@ -25727,22 +25839,42 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 962:\n+  case 965:\n #line 2742 \"third_party/libpg_query/grammar/statements/select.y\"\n+    {\n+\t\t\t\t\tPGList *key_list = NULL;\n+\t\t\t\t\tPGList *value_list = NULL;\n+\t\t\t\t\tPGListCell *lc;\n+\t\t\t\t\tPGList *entry_list = (yyvsp[(3) - (4)].list);\n+\t\t\t\t\tforeach(lc, entry_list)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tPGList *l = (PGList *) lc->data.ptr_value;\n+\t\t\t\t\t\tkey_list = lappend(key_list, (PGNode *) l->head->data.ptr_value);\n+\t\t\t\t\t\tvalue_list = lappend(value_list, (PGNode *) l->tail->data.ptr_value);\n+\t\t\t\t\t}\n+\t\t\t\t\tPGNode *keys   = (PGNode *) makeFuncCall(SystemFuncName(\"list_value\"), key_list, (yylsp[(3) - (4)]));\n+\t\t\t\t\tPGNode *values = (PGNode *) makeFuncCall(SystemFuncName(\"list_value\"), value_list, (yylsp[(3) - (4)]));\n+\t\t\t\t\tPGFuncCall *f = makeFuncCall(SystemFuncName(\"map\"), list_make2(keys, values), (yylsp[(3) - (4)]));\n+\t\t\t\t\t(yyval.node) = (PGNode *) f;\n+\t\t\t\t;}\n+    break;\n+\n+  case 966:\n+#line 2759 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t\t;}\n     break;\n \n-  case 963:\n-#line 2748 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 967:\n+#line 2765 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall((yyvsp[(1) - (3)].list), NIL, (yylsp[(1) - (3)]));\n \t\t\t\t;}\n     break;\n \n-  case 964:\n-#line 2752 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 968:\n+#line 2769 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (6)].list), (yyvsp[(3) - (6)].list), (yylsp[(1) - (6)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(4) - (6)].list);\n@@ -25751,8 +25883,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 965:\n-#line 2759 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 969:\n+#line 2776 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), list_make1((yyvsp[(4) - (7)].node)), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->func_variadic = true;\n@@ -25762,8 +25894,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 966:\n-#line 2767 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 970:\n+#line 2784 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (9)].list), lappend((yyvsp[(3) - (9)].list), (yyvsp[(6) - (9)].node)), (yylsp[(1) - (9)]));\n \t\t\t\t\tn->func_variadic = true;\n@@ -25773,8 +25905,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 967:\n-#line 2775 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 971:\n+#line 2792 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(5) - (7)].list);\n@@ -25787,8 +25919,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 968:\n-#line 2786 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 972:\n+#line 2803 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = makeFuncCall((yyvsp[(1) - (7)].list), (yyvsp[(4) - (7)].list), (yylsp[(1) - (7)]));\n \t\t\t\t\tn->agg_order = (yyvsp[(5) - (7)].list);\n@@ -25798,8 +25930,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 969:\n-#line 2806 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 973:\n+#line 2823 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGFuncCall *n = (PGFuncCall *) (yyvsp[(1) - (5)].node);\n \t\t\t\t\t/*\n@@ -25837,23 +25969,23 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 970:\n-#line 2842 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 974:\n+#line 2859 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 971:\n-#line 2852 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 975:\n+#line 2869 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 972:\n-#line 2853 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 976:\n+#line 2870 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 973:\n-#line 2861 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 977:\n+#line 2878 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"pg_collation_for\"),\n \t\t\t\t\t\t\t\t\t\t\t   list_make1((yyvsp[(4) - (5)].node)),\n@@ -25861,25 +25993,25 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 974:\n-#line 2867 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 978:\n+#line 2884 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 0, (yylsp[(1) - (6)])); ;}\n     break;\n \n-  case 975:\n-#line 2869 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 979:\n+#line 2886 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = makeTypeCast((yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].typnam), 1, (yylsp[(1) - (6)])); ;}\n     break;\n \n-  case 976:\n-#line 2871 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 980:\n+#line 2888 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"date_part\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 977:\n-#line 2875 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 981:\n+#line 2892 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* overlay(A PLACING B FROM C FOR D) is converted to\n \t\t\t\t\t * overlay(A, B, C, D)\n@@ -25890,16 +26022,16 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 978:\n-#line 2884 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 982:\n+#line 2901 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* position(A in B) is converted to position(B, A) */\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"position\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 979:\n-#line 2889 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 983:\n+#line 2906 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* substring(A from B for C) is converted to\n \t\t\t\t\t * substring(A, B, C) - thomas 2000-11-28\n@@ -25908,8 +26040,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 980:\n-#line 2896 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 984:\n+#line 2913 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* TREAT(expr AS target) converts expr of a particular type to target,\n \t\t\t\t\t * which is defined to be a subtype of the original expression.\n@@ -25926,8 +26058,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 981:\n-#line 2911 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 985:\n+#line 2928 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* various trim expressions are defined in SQL\n \t\t\t\t\t * - thomas 1997-07-19\n@@ -25936,36 +26068,36 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 982:\n-#line 2918 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 986:\n+#line 2935 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"ltrim\"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 983:\n-#line 2922 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 987:\n+#line 2939 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"rtrim\"), (yyvsp[(4) - (5)].list), (yylsp[(1) - (5)]));\n \t\t\t\t;}\n     break;\n \n-  case 984:\n-#line 2926 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 988:\n+#line 2943 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(\"trim\"), (yyvsp[(3) - (4)].list), (yylsp[(1) - (4)]));\n \t\t\t\t;}\n     break;\n \n-  case 985:\n-#line 2930 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 989:\n+#line 2947 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, \"=\", (yyvsp[(3) - (6)].node), (yyvsp[(5) - (6)].node), (yylsp[(1) - (6)]));\n \t\t\t\t;}\n     break;\n \n-  case 986:\n-#line 2934 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 990:\n+#line 2951 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCoalesceExpr *c = makeNode(PGCoalesceExpr);\n \t\t\t\t\tc->args = (yyvsp[(3) - (4)].list);\n@@ -25974,8 +26106,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 987:\n-#line 2944 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 991:\n+#line 2961 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLambdaFunction *lambda = makeNode(PGLambdaFunction);\n \t\t\t\t\tlambda->lhs = makeColumnRef((yyvsp[(4) - (7)].str), NIL, (yylsp[(4) - (7)]), yyscanner);\n@@ -25986,8 +26118,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 988:\n-#line 2953 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 992:\n+#line 2970 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGLambdaFunction *lambda = makeNode(PGLambdaFunction);\n \t\t\t\t\tlambda->lhs = makeColumnRef((yyvsp[(4) - (9)].str), NIL, (yylsp[(4) - (9)]), yyscanner);\n@@ -26004,63 +26136,63 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 989:\n-#line 2974 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 993:\n+#line 2991 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(4) - (5)].list); ;}\n     break;\n \n-  case 990:\n-#line 2975 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 994:\n+#line 2992 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 991:\n-#line 2979 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 995:\n+#line 2996 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(4) - (5)].node); ;}\n     break;\n \n-  case 992:\n-#line 2980 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 996:\n+#line 2997 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(3) - (4)].node); ;}\n     break;\n \n-  case 993:\n-#line 2981 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 997:\n+#line 2998 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 994:\n-#line 2985 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 998:\n+#line 3002 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 995:\n-#line 2986 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 999:\n+#line 3003 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 996:\n-#line 2993 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1000:\n+#line 3010 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 997:\n-#line 2994 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1001:\n+#line 3011 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 998:\n-#line 2998 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1002:\n+#line 3015 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].windef)); ;}\n     break;\n \n-  case 999:\n-#line 3000 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1003:\n+#line 3017 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].windef)); ;}\n     break;\n \n-  case 1000:\n-#line 3005 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1004:\n+#line 3022 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(3) - (3)].windef);\n \t\t\t\t\tn->name = (yyvsp[(1) - (3)].str);\n@@ -26068,13 +26200,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1001:\n-#line 3013 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1005:\n+#line 3030 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.windef) = (yyvsp[(2) - (2)].windef); ;}\n     break;\n \n-  case 1002:\n-#line 3015 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1006:\n+#line 3032 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->name = (yyvsp[(2) - (2)].str);\n@@ -26089,13 +26221,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1003:\n-#line 3028 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1007:\n+#line 3045 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.windef) = NULL; ;}\n     break;\n \n-  case 1004:\n-#line 3033 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1008:\n+#line 3050 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->name = NULL;\n@@ -26111,28 +26243,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1005:\n-#line 3058 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1009:\n+#line 3075 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1006:\n-#line 3059 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1010:\n+#line 3076 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1007:\n-#line 3062 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1011:\n+#line 3079 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (3)].list); ;}\n     break;\n \n-  case 1008:\n-#line 3063 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1012:\n+#line 3080 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1009:\n-#line 3075 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1013:\n+#line 3092 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(2) - (2)].windef);\n \t\t\t\t\tn->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;\n@@ -26140,8 +26272,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1010:\n-#line 3081 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1014:\n+#line 3098 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(2) - (2)].windef);\n \t\t\t\t\tn->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;\n@@ -26149,8 +26281,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1011:\n-#line 3087 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1015:\n+#line 3104 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_DEFAULTS;\n@@ -26160,8 +26292,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1012:\n-#line 3097 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1016:\n+#line 3114 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = (yyvsp[(1) - (1)].windef);\n \t\t\t\t\t/* reject invalid cases */\n@@ -26180,8 +26312,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1013:\n-#line 3114 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1017:\n+#line 3131 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n1 = (yyvsp[(2) - (4)].windef);\n \t\t\t\t\tPGWindowDef *n2 = (yyvsp[(4) - (4)].windef);\n@@ -26220,8 +26352,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1014:\n-#line 3159 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1018:\n+#line 3176 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;\n@@ -26231,8 +26363,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1015:\n-#line 3167 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1019:\n+#line 3184 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;\n@@ -26242,8 +26374,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1016:\n-#line 3175 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1020:\n+#line 3192 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_CURRENT_ROW;\n@@ -26253,8 +26385,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1017:\n-#line 3183 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1021:\n+#line 3200 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;\n@@ -26264,8 +26396,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1018:\n-#line 3191 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1022:\n+#line 3208 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGWindowDef *n = makeNode(PGWindowDef);\n \t\t\t\t\tn->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;\n@@ -26275,28 +26407,28 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1019:\n-#line 3211 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1023:\n+#line 3228 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1020:\n-#line 3212 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1024:\n+#line 3229 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1021:\n-#line 3215 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1025:\n+#line 3232 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list);;}\n     break;\n \n-  case 1022:\n-#line 3216 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1026:\n+#line 3233 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(2) - (5)].list), (yyvsp[(4) - (5)].node)); ;}\n     break;\n \n-  case 1023:\n-#line 3220 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1027:\n+#line 3237 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26307,284 +26439,321 @@ YYLTYPE yylloc;\n \t;}\n     break;\n \n-  case 1024:\n-#line 3230 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1028:\n+#line 3247 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1025:\n-#line 3231 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1029:\n+#line 3248 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 1026:\n-#line 3235 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1030:\n+#line 3252 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1027:\n-#line 3236 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1031:\n+#line 3253 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1028:\n-#line 3240 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1032:\n+#line 3258 \"third_party/libpg_query/grammar/statements/select.y\"\n+    {\n+\t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node));\n+\t\t\t;}\n+    break;\n+\n+  case 1033:\n+#line 3264 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n+    break;\n+\n+  case 1034:\n+#line 3265 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n+    break;\n+\n+  case 1035:\n+#line 3270 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n+    break;\n+\n+  case 1036:\n+#line 3271 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n+    break;\n+\n+  case 1037:\n+#line 3276 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n+    break;\n+\n+  case 1038:\n+#line 3277 \"third_party/libpg_query/grammar/statements/select.y\"\n+    { (yyval.list) = NULL; ;}\n+    break;\n+\n+  case 1039:\n+#line 3280 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}\n     break;\n \n-  case 1029:\n-#line 3241 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1040:\n+#line 3281 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ANY_SUBLINK; ;}\n     break;\n \n-  case 1030:\n-#line 3242 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1041:\n+#line 3282 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.subquerytype) = PG_ALL_SUBLINK; ;}\n     break;\n \n-  case 1031:\n-#line 3245 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1042:\n+#line 3285 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1032:\n-#line 3246 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1043:\n+#line 3286 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) (yyvsp[(1) - (1)].conststr); ;}\n     break;\n \n-  case 1033:\n-#line 3249 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1044:\n+#line 3289 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"+\"; ;}\n     break;\n \n-  case 1034:\n-#line 3250 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1045:\n+#line 3290 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"-\"; ;}\n     break;\n \n-  case 1035:\n-#line 3251 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1046:\n+#line 3291 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"*\"; ;}\n     break;\n \n-  case 1036:\n-#line 3252 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1047:\n+#line 3292 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"/\"; ;}\n     break;\n \n-  case 1037:\n-#line 3253 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1048:\n+#line 3293 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"//\"; ;}\n     break;\n \n-  case 1038:\n-#line 3254 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1049:\n+#line 3294 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"%\"; ;}\n     break;\n \n-  case 1039:\n-#line 3255 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1050:\n+#line 3295 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"^\"; ;}\n     break;\n \n-  case 1040:\n-#line 3256 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1051:\n+#line 3296 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"**\"; ;}\n     break;\n \n-  case 1041:\n-#line 3257 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1052:\n+#line 3297 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<\"; ;}\n     break;\n \n-  case 1042:\n-#line 3258 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1053:\n+#line 3298 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \">\"; ;}\n     break;\n \n-  case 1043:\n-#line 3259 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1054:\n+#line 3299 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"=\"; ;}\n     break;\n \n-  case 1044:\n-#line 3260 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1055:\n+#line 3300 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<=\"; ;}\n     break;\n \n-  case 1045:\n-#line 3261 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1056:\n+#line 3301 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \">=\"; ;}\n     break;\n \n-  case 1046:\n-#line 3262 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1057:\n+#line 3302 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.conststr) = \"<>\"; ;}\n     break;\n \n-  case 1047:\n-#line 3266 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1058:\n+#line 3306 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1048:\n-#line 3268 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1059:\n+#line 3308 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1049:\n-#line 3273 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1060:\n+#line 3313 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1050:\n-#line 3275 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1061:\n+#line 3315 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1051:\n-#line 3280 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1062:\n+#line 3320 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1052:\n-#line 3282 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1063:\n+#line 3322 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1053:\n-#line 3284 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1064:\n+#line 3324 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~\")); ;}\n     break;\n \n-  case 1054:\n-#line 3286 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1065:\n+#line 3326 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~\")); ;}\n     break;\n \n-  case 1055:\n-#line 3288 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1066:\n+#line 3328 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~~\")); ;}\n     break;\n \n-  case 1056:\n-#line 3290 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1067:\n+#line 3330 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~~\")); ;}\n     break;\n \n-  case 1057:\n-#line 3292 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1068:\n+#line 3332 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"~~*\")); ;}\n     break;\n \n-  case 1058:\n-#line 3294 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1069:\n+#line 3334 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString(\"!~~*\")); ;}\n     break;\n \n-  case 1059:\n-#line 3308 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1070:\n+#line 3348 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1060:\n-#line 3310 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1071:\n+#line 3350 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lcons(makeString((yyvsp[(1) - (3)].str)), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 1061:\n-#line 3315 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1072:\n+#line 3355 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1062:\n-#line 3319 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1073:\n+#line 3359 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1063:\n-#line 3326 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1074:\n+#line 3366 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1064:\n-#line 3331 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1075:\n+#line 3371 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1065:\n-#line 3337 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1076:\n+#line 3377 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1066:\n-#line 3341 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1077:\n+#line 3381 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1067:\n-#line 3348 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1078:\n+#line 3388 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1068:\n-#line 3353 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1079:\n+#line 3393 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (2)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1069:\n-#line 3360 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1080:\n+#line 3400 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1070:\n-#line 3364 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1081:\n+#line 3404 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = NULL;\n \t\t\t\t;}\n     break;\n \n-  case 1071:\n-#line 3373 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1082:\n+#line 3413 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1072:\n-#line 3377 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1083:\n+#line 3417 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1073:\n-#line 3383 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1084:\n+#line 3423 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (yyvsp[(1) - (1)].node);\n \t\t\t\t;}\n     break;\n \n-  case 1074:\n-#line 3387 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1085:\n+#line 3427 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\t\t\t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26595,8 +26764,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1075:\n-#line 3396 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1086:\n+#line 3436 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGNamedArgExpr *na = makeNode(PGNamedArgExpr);\n \t\t\t\t\tna->name = (yyvsp[(1) - (3)].str);\n@@ -26607,131 +26776,131 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1076:\n-#line 3406 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1087:\n+#line 3446 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].typnam)); ;}\n     break;\n \n-  case 1077:\n-#line 3407 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1088:\n+#line 3447 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].typnam)); ;}\n     break;\n \n-  case 1078:\n-#line 3412 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1089:\n+#line 3452 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2(makeStringConst((yyvsp[(1) - (3)].str), (yylsp[(1) - (3)])), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1079:\n-#line 3415 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1090:\n+#line 3455 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1080:\n-#line 3422 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1091:\n+#line 3462 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1081:\n-#line 3423 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1092:\n+#line 3463 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"year\"; ;}\n     break;\n \n-  case 1082:\n-#line 3424 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1093:\n+#line 3464 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"month\"; ;}\n     break;\n \n-  case 1083:\n-#line 3425 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1094:\n+#line 3465 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"day\"; ;}\n     break;\n \n-  case 1084:\n-#line 3426 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1095:\n+#line 3466 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"hour\"; ;}\n     break;\n \n-  case 1085:\n-#line 3427 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1096:\n+#line 3467 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"minute\"; ;}\n     break;\n \n-  case 1086:\n-#line 3428 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1097:\n+#line 3468 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"second\"; ;}\n     break;\n \n-  case 1087:\n-#line 3429 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1098:\n+#line 3469 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"millisecond\"; ;}\n     break;\n \n-  case 1088:\n-#line 3430 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1099:\n+#line 3470 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (char*) \"microsecond\"; ;}\n     break;\n \n-  case 1089:\n-#line 3431 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1100:\n+#line 3471 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1090:\n-#line 3442 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1101:\n+#line 3482 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make4((yyvsp[(1) - (4)].node), (yyvsp[(2) - (4)].node), (yyvsp[(3) - (4)].node), (yyvsp[(4) - (4)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1091:\n-#line 3446 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1102:\n+#line 3486 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1092:\n-#line 3453 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1103:\n+#line 3493 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1093:\n-#line 3459 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1104:\n+#line 3499 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(3) - (3)].node), (yyvsp[(1) - (3)].node)); ;}\n     break;\n \n-  case 1094:\n-#line 3460 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1105:\n+#line 3500 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1095:\n-#line 3477 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1106:\n+#line 3517 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(2) - (3)].node), (yyvsp[(3) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1096:\n-#line 3481 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1107:\n+#line 3521 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* not legal per SQL99, but might as well allow it */\n \t\t\t\t\t(yyval.list) = list_make3((yyvsp[(1) - (3)].node), (yyvsp[(3) - (3)].node), (yyvsp[(2) - (3)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1097:\n-#line 3486 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1108:\n+#line 3526 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make2((yyvsp[(1) - (2)].node), (yyvsp[(2) - (2)].node));\n \t\t\t\t;}\n     break;\n \n-  case 1098:\n-#line 3490 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1109:\n+#line 3530 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/*\n \t\t\t\t\t * Since there are no cases where this syntax allows\n@@ -26748,45 +26917,45 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1099:\n-#line 3505 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1110:\n+#line 3545 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.list) = (yyvsp[(1) - (1)].list);\n \t\t\t\t;}\n     break;\n \n-  case 1100:\n-#line 3509 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1111:\n+#line 3549 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1101:\n-#line 3513 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1112:\n+#line 3553 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1102:\n-#line 3516 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1113:\n+#line 3556 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1103:\n-#line 3519 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1114:\n+#line 3559 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(3) - (3)].list), (yyvsp[(1) - (3)].node)); ;}\n     break;\n \n-  case 1104:\n-#line 3520 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1115:\n+#line 3560 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1105:\n-#line 3521 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1116:\n+#line 3561 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1106:\n-#line 3525 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1117:\n+#line 3565 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGSubLink *n = makeNode(PGSubLink);\n \t\t\t\t\tn->subselect = (yyvsp[(1) - (1)].node);\n@@ -26795,13 +26964,13 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1107:\n-#line 3531 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1118:\n+#line 3571 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (PGNode *)(yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1108:\n-#line 3542 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1119:\n+#line 3582 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCaseExpr *c = makeNode(PGCaseExpr);\n \t\t\t\t\tc->casetype = InvalidOid; /* not analyzed yet */\n@@ -26813,18 +26982,18 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1109:\n-#line 3555 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1120:\n+#line 3595 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1110:\n-#line 3556 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1121:\n+#line 3596 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1111:\n-#line 3561 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1122:\n+#line 3601 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGCaseWhen *w = makeNode(PGCaseWhen);\n \t\t\t\t\tw->expr = (PGExpr *) (yyvsp[(2) - (4)].node);\n@@ -26834,49 +27003,49 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1112:\n-#line 3571 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1123:\n+#line 3611 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1113:\n-#line 3572 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1124:\n+#line 3612 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1114:\n-#line 3575 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1125:\n+#line 3615 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 1115:\n-#line 3576 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1126:\n+#line 3616 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1116:\n-#line 3580 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1127:\n+#line 3620 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeColumnRef((yyvsp[(1) - (1)].str), NIL, (yylsp[(1) - (1)]), yyscanner);\n \t\t\t\t;}\n     break;\n \n-  case 1117:\n-#line 3584 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1128:\n+#line 3624 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeColumnRef((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].list), (yylsp[(1) - (2)]), yyscanner);\n \t\t\t\t;}\n     break;\n \n-  case 1118:\n-#line 3591 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1129:\n+#line 3631 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = (PGNode *) makeString((yyvsp[(2) - (2)].str));\n \t\t\t\t;}\n     break;\n \n-  case 1119:\n-#line 3595 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1130:\n+#line 3635 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = false;\n@@ -26886,8 +27055,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1120:\n-#line 3603 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1131:\n+#line 3643 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = true;\n@@ -26897,53 +27066,53 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1121:\n-#line 3613 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1132:\n+#line 3653 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = (yyvsp[(1) - (1)].node); ;}\n     break;\n \n-  case 1122:\n-#line 3614 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1133:\n+#line 3654 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1123:\n-#line 3618 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1134:\n+#line 3658 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1124:\n-#line 3619 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1135:\n+#line 3659 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1125:\n-#line 3623 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1136:\n+#line 3663 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1126:\n-#line 3624 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1137:\n+#line 3664 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1127:\n-#line 3628 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1138:\n+#line 3668 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1128:\n-#line 3629 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1139:\n+#line 3669 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(NULL); ;}\n     break;\n \n-  case 1129:\n-#line 3630 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1140:\n+#line 3670 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1130:\n-#line 3635 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1141:\n+#line 3675 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(3) - (3)].list)) {\n \t\t\t\t\t\tPGFuncCall *n = makeFuncCall(list_make1(makeString((yyvsp[(2) - (3)].str))), (yyvsp[(3) - (3)].list)->head->data.ptr_value ? (yyvsp[(3) - (3)].list) : NULL, (yylsp[(2) - (3)]));\n@@ -26954,8 +27123,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1131:\n-#line 3644 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1142:\n+#line 3684 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = false;\n@@ -26965,8 +27134,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1132:\n-#line 3652 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1143:\n+#line 3692 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tPGAIndices *ai = makeNode(PGAIndices);\n \t\t\t\t\tai->is_slice = true;\n@@ -26976,48 +27145,48 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1133:\n-#line 3667 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1144:\n+#line 3707 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1134:\n-#line 3668 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1145:\n+#line 3708 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (2)].list), (yyvsp[(2) - (2)].node)); ;}\n     break;\n \n-  case 1137:\n-#line 3684 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1148:\n+#line 3724 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1138:\n-#line 3685 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1149:\n+#line 3725 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1139:\n-#line 3689 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1150:\n+#line 3729 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].target)); ;}\n     break;\n \n-  case 1140:\n-#line 3690 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1151:\n+#line 3730 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].target)); ;}\n     break;\n \n-  case 1141:\n-#line 3694 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1152:\n+#line 3734 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1142:\n-#line 3695 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1153:\n+#line 3735 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1143:\n-#line 3699 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1154:\n+#line 3739 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(3) - (3)].str);\n@@ -27027,8 +27196,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1144:\n-#line 3715 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1155:\n+#line 3755 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = (yyvsp[(2) - (2)].str);\n@@ -27038,8 +27207,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1145:\n-#line 3723 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1156:\n+#line 3763 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.target) = makeNode(PGResTarget);\n \t\t\t\t\t(yyval.target)->name = NULL;\n@@ -27049,85 +27218,85 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1146:\n-#line 3732 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1157:\n+#line 3772 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1147:\n-#line 3733 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1158:\n+#line 3773 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}\n     break;\n \n-  case 1148:\n-#line 3736 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1159:\n+#line 3776 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1149:\n-#line 3737 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1160:\n+#line 3777 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1150:\n-#line 3740 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1161:\n+#line 3780 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make2((yyvsp[(1) - (3)].node), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1151:\n-#line 3744 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1162:\n+#line 3784 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].list)); ;}\n     break;\n \n-  case 1152:\n-#line 3745 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1163:\n+#line 3785 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].list)); ;}\n     break;\n \n-  case 1153:\n-#line 3749 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1164:\n+#line 3789 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1154:\n-#line 3750 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1165:\n+#line 3790 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1155:\n-#line 3753 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1166:\n+#line 3793 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(3) - (4)].list); ;}\n     break;\n \n-  case 1156:\n-#line 3754 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1167:\n+#line 3794 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 1157:\n-#line 3755 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1168:\n+#line 3795 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NULL; ;}\n     break;\n \n-  case 1158:\n-#line 3765 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1169:\n+#line 3805 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].range)); ;}\n     break;\n \n-  case 1159:\n-#line 3766 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1170:\n+#line 3806 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].range)); ;}\n     break;\n \n-  case 1160:\n-#line 3778 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1171:\n+#line 3818 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.range) = makeRangeVar(NULL, (yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1161:\n-#line 3782 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1172:\n+#line 3822 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tcheck_qualified_name((yyvsp[(2) - (2)].list), yyscanner);\n \t\t\t\t\t(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[(1) - (2)]));\n@@ -27155,75 +27324,75 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1162:\n-#line 3810 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1173:\n+#line 3850 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1163:\n-#line 3812 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1174:\n+#line 3852 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1164:\n-#line 3817 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1175:\n+#line 3857 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1165:\n-#line 3818 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1176:\n+#line 3858 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (2)].list); ;}\n     break;\n \n-  case 1166:\n-#line 3822 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1177:\n+#line 3862 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(1) - (1)].list); ;}\n     break;\n \n-  case 1167:\n-#line 3823 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1178:\n+#line 3863 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1168:\n-#line 3826 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1179:\n+#line 3866 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1169:\n-#line 3828 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1180:\n+#line 3868 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1170:\n-#line 3839 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1181:\n+#line 3879 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1171:\n-#line 3842 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1182:\n+#line 3882 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t\t(yyval.list) = check_func_name(lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)),\n \t\t\t\t\t\t\t\t\t\t\t yyscanner);\n \t\t\t\t\t;}\n     break;\n \n-  case 1172:\n-#line 3853 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1183:\n+#line 3893 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntConst((yyvsp[(1) - (1)].ival), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1173:\n-#line 3857 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1184:\n+#line 3897 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeFloatConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1174:\n-#line 3861 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1185:\n+#line 3901 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\tif ((yyvsp[(2) - (2)].list))\n \t\t\t\t\t{\n@@ -27237,15 +27406,15 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1175:\n-#line 3873 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1186:\n+#line 3913 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBitStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1176:\n-#line 3877 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1187:\n+#line 3917 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* This is a bit constant per SQL99:\n \t\t\t\t\t * Without Feature F511, \"BIT data type\",\n@@ -27256,8 +27425,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1177:\n-#line 3886 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1188:\n+#line 3926 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* generic type 'literal' syntax */\n \t\t\t\t\tPGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (2)].list));\n@@ -27266,8 +27435,8 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1178:\n-#line 3893 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1189:\n+#line 3933 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t/* generic syntax with a type modifier */\n \t\t\t\t\tPGTypeName *t = makeTypeNameFromNameList((yyvsp[(1) - (7)].list));\n@@ -27307,201 +27476,201 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1179:\n-#line 3931 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1190:\n+#line 3971 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConstCast((yyvsp[(2) - (2)].str), (yylsp[(2) - (2)]), (yyvsp[(1) - (2)].typnam));\n \t\t\t\t;}\n     break;\n \n-  case 1180:\n-#line 3935 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1191:\n+#line 3975 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(3) - (5)].node), (yylsp[(3) - (5)]), (yyvsp[(5) - (5)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1181:\n-#line 3939 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1192:\n+#line 3979 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].ival), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1182:\n-#line 3943 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1193:\n+#line 3983 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeIntervalNode((yyvsp[(2) - (3)].str), (yylsp[(2) - (3)]), (yyvsp[(3) - (3)].list));\n \t\t\t\t;}\n     break;\n \n-  case 1183:\n-#line 3947 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1194:\n+#line 3987 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBoolAConst(true, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1184:\n-#line 3951 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1195:\n+#line 3991 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeBoolAConst(false, (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1185:\n-#line 3955 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1196:\n+#line 3995 \"third_party/libpg_query/grammar/statements/select.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeNullAConst((yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1186:\n-#line 3960 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1197:\n+#line 4000 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}\n     break;\n \n-  case 1187:\n-#line 3961 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1198:\n+#line 4001 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1188:\n-#line 3977 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1199:\n+#line 4017 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1189:\n-#line 3978 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1200:\n+#line 4018 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1190:\n-#line 3979 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1201:\n+#line 4019 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1191:\n-#line 3982 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1202:\n+#line 4022 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1192:\n-#line 3983 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1203:\n+#line 4023 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1193:\n-#line 3989 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1204:\n+#line 4029 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1194:\n-#line 3990 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1205:\n+#line 4030 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1195:\n-#line 3991 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1206:\n+#line 4031 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1196:\n-#line 3994 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1207:\n+#line 4034 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1197:\n-#line 3995 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1208:\n+#line 4035 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1198:\n-#line 3996 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1209:\n+#line 4036 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1199:\n-#line 3999 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1210:\n+#line 4039 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1200:\n-#line 4000 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1211:\n+#line 4040 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1201:\n-#line 4001 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1212:\n+#line 4041 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1202:\n-#line 4004 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1213:\n+#line 4044 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(1) - (1)].str))); ;}\n     break;\n \n-  case 1203:\n-#line 4005 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1214:\n+#line 4045 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lcons(makeString((yyvsp[(1) - (2)].str)), (yyvsp[(2) - (2)].list)); ;}\n     break;\n \n-  case 1204:\n-#line 4009 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1215:\n+#line 4049 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = list_make1(makeString((yyvsp[(2) - (2)].str))); ;}\n     break;\n \n-  case 1205:\n-#line 4011 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1216:\n+#line 4051 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), makeString((yyvsp[(3) - (3)].str))); ;}\n     break;\n \n-  case 1206:\n-#line 4015 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1217:\n+#line 4055 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1207:\n-#line 4016 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1218:\n+#line 4056 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1209:\n-#line 4027 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1220:\n+#line 4067 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1210:\n-#line 4028 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1221:\n+#line 4068 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1211:\n-#line 4029 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1222:\n+#line 4069 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1212:\n-#line 4030 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1223:\n+#line 4070 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1213:\n-#line 4033 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1224:\n+#line 4073 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1214:\n-#line 4034 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1225:\n+#line 4074 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1215:\n-#line 4037 \"third_party/libpg_query/grammar/statements/select.y\"\n+  case 1226:\n+#line 4077 \"third_party/libpg_query/grammar/statements/select.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1216:\n+  case 1227:\n #line 8 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     {\n \t\t\t\t\tPGPrepareStmt *n = makeNode(PGPrepareStmt);\n@@ -27512,17 +27681,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1217:\n+  case 1228:\n #line 18 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     { (yyval.list) = (yyvsp[(2) - (3)].list); ;}\n     break;\n \n-  case 1218:\n+  case 1229:\n #line 19 \"third_party/libpg_query/grammar/statements/prepare.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1223:\n+  case 1235:\n #line 8 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27544,7 +27713,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1224:\n+  case 1236:\n #line 27 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27571,7 +27740,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1225:\n+  case 1237:\n #line 51 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tPGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);\n@@ -27593,7 +27762,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1226:\n+  case 1238:\n #line 74 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     {\n \t\t\t\t\tif ((yyloc) < 0)\t\t\t/* see comments for YYLLOC_DEFAULT */\n@@ -27602,12 +27771,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1227:\n+  case 1239:\n #line 80 \"third_party/libpg_query/grammar/statements/create_schema.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1232:\n+  case 1244:\n #line 11 \"third_party/libpg_query/grammar/statements/index.y\"\n     {\n \t\t\t\t\tPGIndexStmt *n = makeNode(PGIndexStmt);\n@@ -27633,7 +27802,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1233:\n+  case 1245:\n #line 36 \"third_party/libpg_query/grammar/statements/index.y\"\n     {\n \t\t\t\t\tPGIndexStmt *n = makeNode(PGIndexStmt);\n@@ -27659,62 +27828,62 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1234:\n+  case 1246:\n #line 62 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1235:\n+  case 1247:\n #line 66 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}\n     break;\n \n-  case 1236:\n+  case 1248:\n #line 67 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; ;}\n     break;\n \n-  case 1237:\n+  case 1249:\n #line 72 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1238:\n+  case 1250:\n #line 73 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1239:\n+  case 1251:\n #line 78 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1240:\n+  case 1252:\n #line 79 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1241:\n+  case 1253:\n #line 83 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1242:\n+  case 1254:\n #line 84 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1243:\n+  case 1255:\n #line 89 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1244:\n+  case 1256:\n #line 90 \"third_party/libpg_query/grammar/statements/index.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1245:\n+  case 1257:\n #line 8 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27726,7 +27895,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1246:\n+  case 1258:\n #line 17 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27738,7 +27907,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1247:\n+  case 1259:\n #line 26 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27750,7 +27919,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1248:\n+  case 1260:\n #line 35 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27762,7 +27931,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1249:\n+  case 1261:\n #line 44 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27774,7 +27943,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1250:\n+  case 1262:\n #line 53 \"third_party/libpg_query/grammar/statements/alter_schema.y\"\n     {\n \t\t\t\t\tPGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);\n@@ -27786,7 +27955,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1251:\n+  case 1263:\n #line 6 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     {\n \t\t\t\t\tPGCheckPointStmt *n = makeNode(PGCheckPointStmt);\n@@ -27796,7 +27965,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1252:\n+  case 1264:\n #line 13 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     {\n \t\t\t\t\tPGCheckPointStmt *n = makeNode(PGCheckPointStmt);\n@@ -27806,17 +27975,17 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1253:\n+  case 1265:\n #line 22 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1254:\n+  case 1266:\n #line 23 \"third_party/libpg_query/grammar/statements/checkpoint.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1255:\n+  case 1267:\n #line 8 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGExportStmt *n = makeNode(PGExportStmt);\n@@ -27830,7 +27999,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1256:\n+  case 1268:\n #line 20 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGExportStmt *n = makeNode(PGExportStmt);\n@@ -27844,7 +28013,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1257:\n+  case 1269:\n #line 34 \"third_party/libpg_query/grammar/statements/export.y\"\n     {\n \t\t\t\t\tPGImportStmt *n = makeNode(PGImportStmt);\n@@ -27853,7 +28022,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1258:\n+  case 1270:\n #line 10 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27863,7 +28032,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1259:\n+  case 1271:\n #line 17 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27876,7 +28045,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1260:\n+  case 1272:\n #line 27 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27886,7 +28055,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1261:\n+  case 1273:\n #line 34 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\tPGExplainStmt *n = makeNode(PGExplainStmt);\n@@ -27896,118 +28065,118 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1262:\n+  case 1274:\n #line 44 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1263:\n+  case 1275:\n #line 45 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1264:\n+  case 1276:\n #line 50 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = (PGNode *) makeString((yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 1265:\n+  case 1277:\n #line 51 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(1) - (1)].value); ;}\n     break;\n \n-  case 1266:\n+  case 1278:\n #line 52 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1297:\n+  case 1309:\n #line 90 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1298:\n+  case 1310:\n #line 91 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1299:\n+  case 1311:\n #line 92 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = pstrdup((yyvsp[(1) - (1)].keyword)); ;}\n     break;\n \n-  case 1300:\n+  case 1312:\n #line 97 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1301:\n+  case 1313:\n #line 98 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1302:\n+  case 1314:\n #line 104 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.list) = list_make1((yyvsp[(1) - (1)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 1303:\n+  case 1315:\n #line 108 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].defelt));\n \t\t\t\t;}\n     break;\n \n-  case 1304:\n+  case 1316:\n #line 115 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {;}\n     break;\n \n-  case 1305:\n+  case 1317:\n #line 116 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {;}\n     break;\n \n-  case 1306:\n+  case 1318:\n #line 121 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"true\"; ;}\n     break;\n \n-  case 1307:\n+  case 1319:\n #line 122 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"false\"; ;}\n     break;\n \n-  case 1308:\n+  case 1320:\n #line 123 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"on\"; ;}\n     break;\n \n-  case 1309:\n+  case 1321:\n #line 129 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1310:\n+  case 1322:\n #line 135 \"third_party/libpg_query/grammar/statements/explain.y\"\n     {\n \t\t\t\t\t(yyval.defelt) = makeDefElem((yyvsp[(1) - (2)].str), (yyvsp[(2) - (2)].node), (yylsp[(1) - (2)]));\n \t\t\t\t;}\n     break;\n \n-  case 1311:\n+  case 1323:\n #line 142 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1312:\n+  case 1324:\n #line 143 \"third_party/libpg_query/grammar/statements/explain.y\"\n     { (yyval.str) = (char*) \"analyze\"; ;}\n     break;\n \n-  case 1313:\n+  case 1325:\n #line 11 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(2) - (2)].vsetstmt);\n@@ -28016,7 +28185,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1314:\n+  case 1326:\n #line 17 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -28025,7 +28194,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1315:\n+  case 1327:\n #line 23 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -28034,7 +28203,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1316:\n+  case 1328:\n #line 29 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = (yyvsp[(3) - (3)].vsetstmt);\n@@ -28043,12 +28212,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1317:\n+  case 1329:\n #line 38 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {(yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt);;}\n     break;\n \n-  case 1318:\n+  case 1330:\n #line 40 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28058,7 +28227,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1319:\n+  case 1331:\n #line 48 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28072,7 +28241,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1320:\n+  case 1332:\n #line 59 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28083,7 +28252,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1321:\n+  case 1333:\n #line 71 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28094,7 +28263,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1322:\n+  case 1334:\n #line 79 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28105,7 +28274,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1323:\n+  case 1335:\n #line 87 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28115,7 +28284,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1324:\n+  case 1336:\n #line 94 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28125,31 +28294,31 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1325:\n+  case 1337:\n #line 104 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1326:\n+  case 1338:\n #line 106 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1327:\n+  case 1339:\n #line 112 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1328:\n+  case 1340:\n #line 116 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\t(yyval.node) = makeStringConst((yyvsp[(1) - (1)].str), (yylsp[(1) - (1)]));\n \t\t\t\t;}\n     break;\n \n-  case 1329:\n+  case 1341:\n #line 120 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGTypeName *t = (yyvsp[(1) - (3)].typnam);\n@@ -28167,7 +28336,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1330:\n+  case 1342:\n #line 135 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     {\n \t\t\t\t\tPGTypeName *t = (yyvsp[(1) - (5)].typnam);\n@@ -28177,32 +28346,32 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1331:\n+  case 1343:\n #line 141 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = makeAConst((yyvsp[(1) - (1)].value), (yylsp[(1) - (1)])); ;}\n     break;\n \n-  case 1332:\n+  case 1344:\n #line 142 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1333:\n+  case 1345:\n #line 143 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1334:\n+  case 1346:\n #line 147 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.list) = list_make1((yyvsp[(1) - (1)].node)); ;}\n     break;\n \n-  case 1335:\n+  case 1347:\n #line 148 \"third_party/libpg_query/grammar/statements/variable_set.y\"\n     { (yyval.list) = lappend((yyvsp[(1) - (3)].list), (yyvsp[(3) - (3)].node)); ;}\n     break;\n \n-  case 1336:\n+  case 1348:\n #line 8 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n \t\t\t\t\tPGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28212,7 +28381,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1337:\n+  case 1349:\n #line 14 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n                     PGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28222,7 +28391,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1338:\n+  case 1350:\n #line 20 \"third_party/libpg_query/grammar/statements/load.y\"\n     {\n                       PGLoadStmt *n = makeNode(PGLoadStmt);\n@@ -28232,17 +28401,17 @@ YYLTYPE yylloc;\n                 ;}\n     break;\n \n-  case 1339:\n+  case 1351:\n #line 28 \"third_party/libpg_query/grammar/statements/load.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1340:\n+  case 1352:\n #line 29 \"third_party/libpg_query/grammar/statements/load.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1341:\n+  case 1353:\n #line 9 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28259,7 +28428,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1342:\n+  case 1354:\n #line 23 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28276,7 +28445,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1343:\n+  case 1355:\n #line 37 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[(5) - (5)].node);\n@@ -28291,7 +28460,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1344:\n+  case 1356:\n #line 49 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28302,7 +28471,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1345:\n+  case 1357:\n #line 57 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28315,27 +28484,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1346:\n+  case 1358:\n #line 70 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_ANALYZE; ;}\n     break;\n \n-  case 1347:\n+  case 1359:\n #line 71 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_VERBOSE; ;}\n     break;\n \n-  case 1348:\n+  case 1360:\n #line 72 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_FREEZE; ;}\n     break;\n \n-  case 1349:\n+  case 1361:\n #line 73 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = PG_VACOPT_FULL; ;}\n     break;\n \n-  case 1350:\n+  case 1362:\n #line 75 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     {\n \t\t\t\t\tif (strcmp((yyvsp[(1) - (1)].str), \"disable_page_skipping\") == 0)\n@@ -28348,37 +28517,37 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1351:\n+  case 1363:\n #line 87 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1352:\n+  case 1364:\n #line 88 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1353:\n+  case 1365:\n #line 93 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = (yyvsp[(1) - (1)].ival); ;}\n     break;\n \n-  case 1354:\n+  case 1366:\n #line 94 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.ival) = (yyvsp[(1) - (3)].ival) | (yyvsp[(3) - (3)].ival); ;}\n     break;\n \n-  case 1355:\n+  case 1367:\n #line 98 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1356:\n+  case 1368:\n #line 99 \"third_party/libpg_query/grammar/statements/vacuum.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1357:\n+  case 1369:\n #line 9 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGDeleteStmt *n = makeNode(PGDeleteStmt);\n@@ -28391,7 +28560,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1358:\n+  case 1370:\n #line 19 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGDeleteStmt *n = makeNode(PGDeleteStmt);\n@@ -28404,14 +28573,14 @@ YYLTYPE yylloc;\n \t\t\t    ;}\n     break;\n \n-  case 1359:\n+  case 1371:\n #line 32 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\t(yyval.range) = (yyvsp[(1) - (1)].range);\n \t\t\t\t;}\n     break;\n \n-  case 1360:\n+  case 1372:\n #line 36 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGAlias *alias = makeNode(PGAlias);\n@@ -28421,7 +28590,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1361:\n+  case 1373:\n #line 43 \"third_party/libpg_query/grammar/statements/delete.y\"\n     {\n \t\t\t\t\tPGAlias *alias = makeNode(PGAlias);\n@@ -28431,27 +28600,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1362:\n+  case 1374:\n #line 53 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.node) = (yyvsp[(2) - (2)].node); ;}\n     break;\n \n-  case 1363:\n+  case 1375:\n #line 54 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.node) = NULL; ;}\n     break;\n \n-  case 1364:\n+  case 1376:\n #line 60 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.list) = (yyvsp[(2) - (2)].list); ;}\n     break;\n \n-  case 1365:\n+  case 1377:\n #line 61 \"third_party/libpg_query/grammar/statements/delete.y\"\n     { (yyval.list) = NIL; ;}\n     break;\n \n-  case 1366:\n+  case 1378:\n #line 10 \"third_party/libpg_query/grammar/statements/analyze.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28464,7 +28633,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1367:\n+  case 1379:\n #line 20 \"third_party/libpg_query/grammar/statements/analyze.y\"\n     {\n \t\t\t\t\tPGVacuumStmt *n = makeNode(PGVacuumStmt);\n@@ -28477,7 +28646,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1368:\n+  case 1380:\n #line 8 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGAttachStmt *n = makeNode(PGAttachStmt);\n@@ -28488,7 +28657,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1369:\n+  case 1381:\n #line 19 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGDetachStmt *n = makeNode(PGDetachStmt);\n@@ -28498,7 +28667,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1370:\n+  case 1382:\n #line 26 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {\n \t\t\t\t\tPGDetachStmt *n = makeNode(PGDetachStmt);\n@@ -28508,32 +28677,32 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1371:\n+  case 1383:\n #line 34 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {;}\n     break;\n \n-  case 1372:\n+  case 1384:\n #line 35 \"third_party/libpg_query/grammar/statements/attach.y\"\n     {;}\n     break;\n \n-  case 1373:\n+  case 1385:\n #line 39 \"third_party/libpg_query/grammar/statements/attach.y\"\n     { (yyval.str) = (yyvsp[(2) - (2)].str); ;}\n     break;\n \n-  case 1374:\n+  case 1386:\n #line 40 \"third_party/libpg_query/grammar/statements/attach.y\"\n     { (yyval.str) = NULL; ;}\n     break;\n \n-  case 1375:\n+  case 1387:\n #line 2 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     { (yyval.node) = (PGNode *) (yyvsp[(2) - (2)].vsetstmt); ;}\n     break;\n \n-  case 1376:\n+  case 1388:\n #line 8 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28544,7 +28713,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1377:\n+  case 1389:\n #line 16 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28554,12 +28723,12 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1378:\n+  case 1390:\n #line 26 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     { (yyval.vsetstmt) = (yyvsp[(1) - (1)].vsetstmt); ;}\n     break;\n \n-  case 1379:\n+  case 1391:\n #line 28 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28569,7 +28738,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1380:\n+  case 1392:\n #line 35 \"third_party/libpg_query/grammar/statements/variable_reset.y\"\n     {\n \t\t\t\t\tPGVariableSetStmt *n = makeNode(PGVariableSetStmt);\n@@ -28579,7 +28748,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1381:\n+  case 1393:\n #line 3 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);\n@@ -28590,7 +28759,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1382:\n+  case 1394:\n #line 10 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);\n@@ -28601,7 +28770,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1383:\n+  case 1395:\n #line 18 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28611,7 +28780,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1384:\n+  case 1396:\n #line 25 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28621,7 +28790,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1385:\n+  case 1397:\n #line 32 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28631,7 +28800,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1386:\n+  case 1398:\n #line 39 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28641,7 +28810,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1387:\n+  case 1399:\n #line 46 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28651,7 +28820,7 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1388:\n+  case 1400:\n #line 53 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     {\n \t\t\t\tPGVariableShowStmt *n = makeNode(PGVariableShowStmt);\n@@ -28661,27 +28830,27 @@ YYLTYPE yylloc;\n \t\t\t;}\n     break;\n \n-  case 1391:\n-#line 63 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+  case 1405:\n+#line 65 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = (yyvsp[(1) - (1)].str); ;}\n     break;\n \n-  case 1392:\n-#line 65 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+  case 1406:\n+#line 67 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"%s.%s\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n     break;\n \n-  case 1393:\n-#line 68 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+  case 1407:\n+#line 70 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"\\\"%s\\\"\", (yyvsp[(1) - (1)].str)); ;}\n     break;\n \n-  case 1394:\n-#line 70 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n+  case 1408:\n+#line 72 \"third_party/libpg_query/grammar/statements/variable_show.y\"\n     { (yyval.str) = psprintf(\"%s.\\\"%s\\\"\", (yyvsp[(1) - (3)].str), (yyvsp[(3) - (3)].str)); ;}\n     break;\n \n-  case 1395:\n+  case 1409:\n #line 7 \"third_party/libpg_query/grammar/statements/call.y\"\n     {\n \t\t\t\t\tPGCallStmt *n = makeNode(PGCallStmt);\n@@ -28690,7 +28859,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1396:\n+  case 1410:\n #line 10 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28705,7 +28874,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1397:\n+  case 1411:\n #line 23 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28720,7 +28889,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1398:\n+  case 1412:\n #line 36 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28735,7 +28904,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1399:\n+  case 1413:\n #line 49 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28755,7 +28924,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1400:\n+  case 1414:\n #line 67 \"third_party/libpg_query/grammar/statements/view.y\"\n     {\n \t\t\t\t\tPGViewStmt *n = makeNode(PGViewStmt);\n@@ -28775,27 +28944,27 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1401:\n+  case 1415:\n #line 87 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1402:\n+  case 1416:\n #line 88 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; ;}\n     break;\n \n-  case 1403:\n+  case 1417:\n #line 89 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; ;}\n     break;\n \n-  case 1404:\n+  case 1418:\n #line 90 \"third_party/libpg_query/grammar/statements/view.y\"\n     { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; ;}\n     break;\n \n-  case 1405:\n+  case 1419:\n #line 12 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28811,7 +28980,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1406:\n+  case 1420:\n #line 25 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28827,7 +28996,7 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1407:\n+  case 1421:\n #line 38 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\tPGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);\n@@ -28843,22 +29012,22 @@ YYLTYPE yylloc;\n \t\t\t\t;}\n     break;\n \n-  case 1408:\n+  case 1422:\n #line 54 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1409:\n+  case 1423:\n #line 55 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = false; ;}\n     break;\n \n-  case 1410:\n+  case 1424:\n #line 56 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     { (yyval.boolean) = true; ;}\n     break;\n \n-  case 1411:\n+  case 1425:\n #line 62 \"third_party/libpg_query/grammar/statements/create_as.y\"\n     {\n \t\t\t\t\t(yyval.into) = makeNode(PGIntoClause);\n@@ -28873,7 +29042,7 @@ YYLTYPE yylloc;\n \n \n /* Line 1267 of yacc.c.  */\n-#line 28877 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n+#line 29046 \"third_party/libpg_query/grammar/grammar_out.cpp\"\n       default: break;\n     }\n   YY_SYMBOL_PRINT (\"-> $$ =\", yyr1[yyn], &yyval, &yyloc);\ndiff --git a/tools/jdbc/src/jni/duckdb_java.cpp b/tools/jdbc/src/jni/duckdb_java.cpp\nindex 03e71327973d..fa6256175c0b 100644\n--- a/tools/jdbc/src/jni/duckdb_java.cpp\n+++ b/tools/jdbc/src/jni/duckdb_java.cpp\n@@ -63,6 +63,9 @@ static jmethodID J_DuckVector_init;\n static jfieldID J_DuckVector_constlen;\n static jfieldID J_DuckVector_varlen;\n \n+static jclass J_DuckArray;\n+static jmethodID J_DuckArray_init;\n+\n static jclass J_ByteBuffer;\n \n static jmethodID J_Map_entrySet;\n@@ -147,6 +150,13 @@ JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {\n \tJ_Iterator_next = env->GetMethodID(tmpLocalRef, \"next\", \"()Ljava/lang/Object;\");\n \tenv->DeleteLocalRef(tmpLocalRef);\n \n+\ttmpLocalRef = env->FindClass(\"org/duckdb/DuckDBArray\");\n+\tD_ASSERT(tmpLocalRef);\n+\tJ_DuckArray = (jclass)env->NewGlobalRef(tmpLocalRef);\n+\tJ_DuckArray_init = env->GetMethodID(J_DuckArray, \"<init>\", \"(Lorg/duckdb/DuckDBVector;II)V\");\n+\tD_ASSERT(J_DuckArray_init);\n+\tenv->DeleteLocalRef(tmpLocalRef);\n+\n \ttmpLocalRef = env->FindClass(\"java/util/Map$Entry\");\n \tJ_Entry_getKey = env->GetMethodID(tmpLocalRef, \"getKey\", \"()Ljava/lang/Object;\");\n \tJ_Entry_getValue = env->GetMethodID(tmpLocalRef, \"getValue\", \"()Ljava/lang/Object;\");\n@@ -648,7 +658,7 @@ static std::string type_to_jduckdb_type(LogicalType logical_type) {\n \t\t}\n \t} break;\n \tdefault:\n-\t\treturn std::string(\"\");\n+\t\treturn logical_type.ToString();\n \t}\n }\n \n@@ -690,6 +700,8 @@ JNIEXPORT jobject JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1meta(JNIEnv\n \t                      name_array, type_array, type_detail_array, return_type);\n }\n \n+jobject ProcessVector(JNIEnv *env, Connection *conn_ref, Vector &vec, idx_t row_count);\n+\n JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(JNIEnv *env, jclass,\n                                                                                 jobject res_ref_buf,\n                                                                                 jobject conn_ref_buf) {\n@@ -713,138 +725,167 @@ JNIEXPORT jobjectArray JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch(\n \n \tfor (idx_t col_idx = 0; col_idx < res_ref->chunk->ColumnCount(); col_idx++) {\n \t\tauto &vec = res_ref->chunk->data[col_idx];\n-\t\tauto type_str = env->NewStringUTF(vec.GetType().ToString().c_str());\n-\t\t// construct nullmask\n-\t\tauto null_array = env->NewBooleanArray(row_count);\n-\t\tjboolean *null_array_ptr = env->GetBooleanArrayElements(null_array, nullptr);\n-\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n-\t\t\tnull_array_ptr[row_idx] = FlatVector::IsNull(vec, row_idx);\n-\t\t}\n-\t\tenv->ReleaseBooleanArrayElements(null_array, null_array_ptr, 0);\n \n-\t\tauto jvec = env->NewObject(J_DuckVector, J_DuckVector_init, type_str, (int)row_count, null_array);\n+\t\tauto jvec = ProcessVector(env, conn_ref, vec, row_count);\n \n-\t\tjobject constlen_data = nullptr;\n-\t\tjobjectArray varlen_data = nullptr;\n+\t\tenv->SetObjectArrayElement(vec_array, col_idx, jvec);\n+\t}\n \n-\t\tswitch (vec.GetType().id()) {\n-\t\tcase LogicalTypeId::BOOLEAN:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(bool));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::TINYINT:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int8_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::SMALLINT:\n+\treturn vec_array;\n+}\n+jobject ProcessVector(JNIEnv *env, Connection *conn_ref, Vector &vec, idx_t row_count) {\n+\tauto type_str = env->NewStringUTF(type_to_jduckdb_type(vec.GetType()).c_str());\n+\t// construct nullmask\n+\tauto null_array = env->NewBooleanArray(row_count);\n+\tjboolean *null_unique_array = env->GetBooleanArrayElements(null_array, nullptr);\n+\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n+\t\tnull_unique_array[row_idx] = FlatVector::IsNull(vec, row_idx);\n+\t}\n+\tenv->ReleaseBooleanArrayElements(null_array, null_unique_array, 0);\n+\n+\tauto jvec = env->NewObject(J_DuckVector, J_DuckVector_init, type_str, (int)row_count, null_array);\n+\n+\tjobject constlen_data = nullptr;\n+\tjobjectArray varlen_data = nullptr;\n+\n+\tswitch (vec.GetType().id()) {\n+\tcase LogicalTypeId::BOOLEAN:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(bool));\n+\t\tbreak;\n+\tcase LogicalTypeId::TINYINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int8_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::SMALLINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int16_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::INTEGER:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int32_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::BIGINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int64_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::UTINYINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint8_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::USMALLINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint16_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::UINTEGER:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint32_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::UBIGINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint64_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::HUGEINT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::FLOAT:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(float));\n+\t\tbreak;\n+\tcase LogicalTypeId::DECIMAL: {\n+\t\tauto physical_type = vec.GetType().InternalType();\n+\n+\t\tswitch (physical_type) {\n+\t\tcase PhysicalType::INT16:\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int16_t));\n \t\t\tbreak;\n-\t\tcase LogicalTypeId::INTEGER:\n+\t\tcase PhysicalType::INT32:\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int32_t));\n \t\t\tbreak;\n-\t\tcase LogicalTypeId::BIGINT:\n+\t\tcase PhysicalType::INT64:\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int64_t));\n \t\t\tbreak;\n-\t\tcase LogicalTypeId::UTINYINT:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint8_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::USMALLINT:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint16_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::UINTEGER:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint32_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::UBIGINT:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(uint64_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::HUGEINT:\n+\t\tcase PhysicalType::INT128:\n \t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));\n \t\t\tbreak;\n-\t\tcase LogicalTypeId::FLOAT:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(float));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::DECIMAL: {\n-\t\t\tauto physical_type = vec.GetType().InternalType();\n-\n-\t\t\tswitch (physical_type) {\n-\t\t\tcase PhysicalType::INT16:\n-\t\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int16_t));\n-\t\t\t\tbreak;\n-\t\t\tcase PhysicalType::INT32:\n-\t\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int32_t));\n-\t\t\t\tbreak;\n-\t\t\tcase PhysicalType::INT64:\n-\t\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(int64_t));\n-\t\t\t\tbreak;\n-\t\t\tcase PhysicalType::INT128:\n-\t\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));\n-\t\t\t\tbreak;\n-\t\t\tdefault:\n-\t\t\t\tthrow InternalException(\"Unimplemented physical type for decimal\");\n-\t\t\t}\n-\t\t\tbreak;\n+\t\tdefault:\n+\t\t\tthrow InternalException(\"Unimplemented physical type for decimal\");\n \t\t}\n-\t\tcase LogicalTypeId::DOUBLE:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(double));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::TIME_TZ:\n-\t\tcase LogicalTypeId::TIMESTAMP_SEC:\n-\t\tcase LogicalTypeId::TIMESTAMP_MS:\n-\t\tcase LogicalTypeId::TIMESTAMP:\n-\t\tcase LogicalTypeId::TIMESTAMP_NS:\n-\t\tcase LogicalTypeId::TIMESTAMP_TZ:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(timestamp_t));\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::ENUM:\n-\t\t\tvarlen_data = env->NewObjectArray(row_count, J_String, nullptr);\n-\t\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n-\t\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tauto d_str = vec.GetValue(row_idx).ToString();\n-\t\t\t\tjstring j_str = env->NewStringUTF(d_str.c_str());\n-\t\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_str);\n+\t\tbreak;\n+\t}\n+\tcase LogicalTypeId::DOUBLE:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(double));\n+\t\tbreak;\n+\tcase LogicalTypeId::TIME_TZ:\n+\tcase LogicalTypeId::TIMESTAMP_SEC:\n+\tcase LogicalTypeId::TIMESTAMP_MS:\n+\tcase LogicalTypeId::TIMESTAMP:\n+\tcase LogicalTypeId::TIMESTAMP_NS:\n+\tcase LogicalTypeId::TIMESTAMP_TZ:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(timestamp_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::ENUM:\n+\t\tvarlen_data = env->NewObjectArray(row_count, J_String, nullptr);\n+\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n+\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::BLOB:\n-\t\t\tvarlen_data = env->NewObjectArray(row_count, J_ByteBuffer, nullptr);\n+\t\t\tauto d_str = vec.GetValue(row_idx).ToString();\n+\t\t\tjstring j_str = env->NewStringUTF(d_str.c_str());\n+\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_str);\n+\t\t}\n+\t\tbreak;\n+\tcase LogicalTypeId::BLOB:\n+\t\tvarlen_data = env->NewObjectArray(row_count, J_ByteBuffer, nullptr);\n \n-\t\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n-\t\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tauto &d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];\n-\t\t\t\tauto j_obj = env->NewDirectByteBuffer((void *)d_str.GetData(), d_str.GetSize());\n-\t\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_obj);\n+\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n+\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tbreak;\n-\t\tcase LogicalTypeId::UUID:\n-\t\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));\n-\t\t\tbreak;\n-\t\tdefault: {\n-\t\t\tVector string_vec(LogicalType::VARCHAR);\n-\t\t\tVectorOperations::Cast(*conn_ref->context, vec, string_vec, row_count);\n-\t\t\tvec.ReferenceAndSetType(string_vec);\n-\t\t\t// fall through on purpose\n+\t\t\tauto &d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];\n+\t\t\tauto j_obj = env->NewDirectByteBuffer((void *)d_str.GetData(), d_str.GetSize());\n+\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_obj);\n \t\t}\n-\t\tcase LogicalTypeId::VARCHAR:\n-\t\t\tvarlen_data = env->NewObjectArray(row_count, J_String, nullptr);\n-\t\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n-\t\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n-\t\t\t\t\tcontinue;\n-\t\t\t\t}\n-\t\t\t\tauto d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];\n-\t\t\t\tauto j_str = decode_charbuffer_to_jstring(env, d_str.GetData(), d_str.GetSize());\n-\t\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_str);\n+\t\tbreak;\n+\tcase LogicalTypeId::UUID:\n+\t\tconstlen_data = env->NewDirectByteBuffer(FlatVector::GetData(vec), row_count * sizeof(hugeint_t));\n+\t\tbreak;\n+\tcase LogicalTypeId::LIST: {\n+\t\tvarlen_data = env->NewObjectArray(row_count, J_DuckArray, nullptr);\n+\n+\t\tauto list_entries = FlatVector::GetData<list_entry_t>(vec);\n+\n+\t\tauto list_size = ListVector::GetListSize(vec);\n+\t\tauto &list_vector = ListVector::GetEntry(vec);\n+\t\tauto j_vec = ProcessVector(env, conn_ref, list_vector, list_size);\n+\n+\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n+\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n+\t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tbreak;\n-\t\t}\n \n-\t\tenv->SetObjectField(jvec, J_DuckVector_constlen, constlen_data);\n-\t\tenv->SetObjectField(jvec, J_DuckVector_varlen, varlen_data);\n+\t\t\tauto offset = list_entries[row_idx].offset;\n+\t\t\tauto limit = list_entries[row_idx].length;\n \n-\t\tenv->SetObjectArrayElement(vec_array, col_idx, jvec);\n+\t\t\tauto j_obj = env->NewObject(J_DuckArray, J_DuckArray_init, j_vec, offset, limit);\n+\n+\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_obj);\n+\t\t}\n+\t\tbreak;\n+\t}\n+\tdefault: {\n+\t\tVector string_vec(LogicalType::VARCHAR);\n+\t\tVectorOperations::Cast(*conn_ref->context, vec, string_vec, row_count);\n+\t\tvec.ReferenceAndSetType(string_vec);\n+\t\t// fall through on purpose\n+\t}\n+\tcase LogicalTypeId::VARCHAR:\n+\t\tvarlen_data = env->NewObjectArray(row_count, J_String, nullptr);\n+\t\tfor (idx_t row_idx = 0; row_idx < row_count; row_idx++) {\n+\t\t\tif (FlatVector::IsNull(vec, row_idx)) {\n+\t\t\t\tcontinue;\n+\t\t\t}\n+\t\t\tauto d_str = ((string_t *)FlatVector::GetData(vec))[row_idx];\n+\t\t\tauto j_str = decode_charbuffer_to_jstring(env, d_str.GetData(), d_str.GetSize());\n+\t\t\tenv->SetObjectArrayElement(varlen_data, row_idx, j_str);\n+\t\t}\n+\t\tbreak;\n \t}\n \n-\treturn vec_array;\n+\tenv->SetObjectField(jvec, J_DuckVector_constlen, constlen_data);\n+\tenv->SetObjectField(jvec, J_DuckVector_varlen, varlen_data);\n+\n+\treturn jvec;\n }\n \n JNIEXPORT jint JNICALL Java_org_duckdb_DuckDBNative_duckdb_1jdbc_1fetch_1size(JNIEnv *, jclass) {\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBArray.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBArray.java\nnew file mode 100644\nindex 000000000000..8702c63d41fc\n--- /dev/null\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBArray.java\n@@ -0,0 +1,83 @@\n+package org.duckdb;\n+\n+import java.sql.Array;\n+import java.sql.ResultSet;\n+import java.sql.SQLException;\n+import java.util.Map;\n+\n+import static org.duckdb.DuckDBResultSetMetaData.type_to_int;\n+\n+public class DuckDBArray implements Array {\n+    private DuckDBVector vector;\n+    int offset, length;\n+\n+    public DuckDBArray(DuckDBVector vector, int offset, int length) {\n+        this.vector = vector;\n+        this.length = length;\n+        this.offset = offset;\n+    }\n+\n+    @Override\n+    public void free() throws SQLException {\n+        // we don't own the vector, so cannot free it\n+    }\n+    @Override\n+    public Object getArray() throws SQLException {\n+        Object[] out = new Object[length];\n+        for (int i=0; i<length; i++) {\n+            out[i] = vector.getObject(offset + i);\n+        }\n+        return out;\n+    }\n+\n+    @Override\n+    public Object getArray(Map<String, Class<?>> map) throws SQLException {\n+        return getArray();\n+    }\n+\n+    @Override\n+    public Object getArray(long index, int count) throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getArray'\");\n+    }\n+\n+    @Override\n+    public Object getArray(long index, int count, Map<String, Class<?>> map) throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getArray'\");\n+    }\n+\n+    @Override\n+    public int getBaseType() throws SQLException {\n+        return type_to_int(vector.duckdb_type);\n+    }\n+\n+    @Override\n+    public String getBaseTypeName() throws SQLException {\n+        return vector.duckdb_type.name();\n+    }\n+\n+    @Override\n+    public ResultSet getResultSet() throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getResultSet'\");\n+    }\n+\n+    @Override\n+    public ResultSet getResultSet(Map<String, Class<?>> map) throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getResultSet'\");\n+    }\n+\n+    @Override\n+    public ResultSet getResultSet(long index, int count) throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getResultSet'\");\n+    }\n+\n+    @Override\n+    public ResultSet getResultSet(long index, int count, Map<String, Class<?>> map) throws SQLException {\n+        // TODO Auto-generated method stub\n+        throw new UnsupportedOperationException(\"Unimplemented method 'getResultSet'\");\n+    }\n+}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnTypeMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnTypeMetaData.java\nindex b8a7e93b371d..36d5695154e8 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnTypeMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBColumnTypeMetaData.java\n@@ -11,5 +11,11 @@ public DuckDBColumnTypeMetaData(short type_size, short width, short scale)\n \t\tthis.width = width;\n \t\tthis.scale = scale;\n \t}\n+\n+\tpublic static DuckDBColumnTypeMetaData parseColumnTypeMetadata(String columnTypeDetail) {\n+\t\tString[] split_details = columnTypeDetail.split(\";\");\n+\t\treturn new DuckDBColumnTypeMetaData(Short.parseShort(split_details[0].replace(\"DECIMAL\", \"\"))\n+\t\t\t\t, Short.parseShort(split_details[1]), Short.parseShort(split_details[2]));\n+\t}\n }\n \t\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBConnection.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBConnection.java\nindex eab4bc3a54f2..5d0c1e10ccf2 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBConnection.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBConnection.java\n@@ -105,16 +105,6 @@ public void rollback() throws SQLException {\n \t\t}\n \t}\n \n-\t/**\n-\t * This function calls the underlying C++ interrupt function which aborts all pending queries.\n-\t * It is not safe to call this function when the connection is already closed.\n-\t */\n-\tpublic synchronized void interrupt() throws SQLException {\n-\t\tif (conn_ref != null) {\n-\t\t\tDuckDBNative.duckdb_jdbc_interrupt(conn_ref);\n-\t\t}\n-\t}\n-\n \tprotected void finalize() throws Throwable {\n \t\tclose();\n \t}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\nindex 7c7d56a709c2..13a71a53dbe5 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBPreparedStatement.java\n@@ -338,9 +338,15 @@ public void setQueryTimeout(int seconds) throws SQLException {\n \t\tlogger.log(Level.FINE, \"setQueryTimeout not supported\");\n \t}\n \n+\t/**\n+\t * This function calls the underlying C++ interrupt function which aborts the query running on that connection.\n+\t * It is not safe to call this function when the connection is already closed.\n+\t */\n \t@Override\n-\tpublic void cancel() throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException(\"cancel\");\n+\tpublic synchronized void cancel() throws SQLException {\n+\t\tif (conn.conn_ref != null) {\n+\t\t\tDuckDBNative.duckdb_jdbc_interrupt(conn.conn_ref);\n+\t\t}\n \t}\n \n \t@Override\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\nindex 1803e3c4e7e9..1e38932c0e3f 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSet.java\n@@ -36,10 +36,6 @@\n import java.util.UUID;\n \n public class DuckDBResultSet implements ResultSet {\n-\n-\t// Constant to construct BigDecimals from hugeint_t\n-\tprivate final static BigDecimal ULONG_MULTIPLIER = new BigDecimal(\"18446744073709551616\");\n-\n \tprivate final DuckDBPreparedStatement stmt;\n \tprivate final DuckDBResultSetMetaData meta;\n \n@@ -159,64 +155,17 @@ public Object arrowExportStream(Object arrow_buffer_allocator, long arrow_batch_\n \t}\n \n \tpublic Object getObject(int columnIndex) throws SQLException {\n-\t\tcheck_and_null(columnIndex);\n-\t\tif (was_null) {\n+\t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tswitch (meta.column_types[columnIndex - 1]) {\n-\t\tcase BOOLEAN:\n-\t\t\treturn getBoolean(columnIndex);\n-\t\tcase TINYINT:\n-\t\t\treturn getByte(columnIndex);\n-\t\tcase SMALLINT:\n-\t\t\treturn getShort(columnIndex);\n-\t\tcase INTEGER:\n-\t\t\treturn getInt(columnIndex);\n-\t\tcase BIGINT:\n-\t\t\treturn getLong(columnIndex);\n-\t\tcase HUGEINT:\n-\t\t\treturn getHugeint(columnIndex);\n-\t\tcase UTINYINT:\n-\t\t\treturn getUint8(columnIndex);\n-\t\tcase USMALLINT:\n-\t\t\treturn getUint16(columnIndex);\n-\t\tcase UINTEGER:\n-\t\t\treturn getUint32(columnIndex);\n-\t\tcase UBIGINT:\n-\t\t\treturn getUint64(columnIndex);\n-\t\tcase FLOAT:\n-\t\t\treturn getFloat(columnIndex);\n-\t\tcase DOUBLE:\n-\t\t\treturn getDouble(columnIndex);\n-\t\tcase DECIMAL:\n-\t\t\treturn getBigDecimal(columnIndex);\n-\t\tcase TIME:\n-\t\t\treturn getTime(columnIndex);\n-\t\tcase TIME_WITH_TIME_ZONE:\n-\t\t\treturn getOffsetTime(columnIndex);\n-\t\tcase DATE:\n-\t\t\treturn getDate(columnIndex);\n-\t\tcase TIMESTAMP:\n-\t\tcase TIMESTAMP_NS:\n-\t\tcase TIMESTAMP_S:\n-\t\tcase TIMESTAMP_MS:\n-\t\t\treturn getTimestamp(columnIndex);\n-\t\tcase TIMESTAMP_WITH_TIME_ZONE:\n-\t\t\treturn getOffsetDateTime(columnIndex);\n-\t\tcase JSON:\n-\t\t\treturn getJsonObject(columnIndex);\n-\t\tcase BLOB:\n-\t\t\treturn getBlob(columnIndex);\n-\t\tcase UUID:\n-\t\t\treturn getUuid(columnIndex);\n-\t\tdefault:\n-\t\t\treturn getLazyString(columnIndex);\n-\t\t}\n-\n+\t\treturn current_chunk[columnIndex - 1].getObject(chunk_idx - 1);\n \t}\n \n \tpublic OffsetTime getOffsetTime(int columnIndex) throws SQLException {\n-\t\treturn DuckDBTimestamp.toOffsetTime(getbuf(columnIndex, 8).getLong());\n+\t\tif (check_and_null(columnIndex)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn current_chunk[columnIndex - 1].getOffsetTime(chunk_idx - 1);\n \t}\n \n \tpublic boolean wasNull() throws SQLException {\n@@ -249,7 +198,7 @@ public String getLazyString(int columnIndex) throws SQLException {\n \t}\n \n \tprivate boolean isType(int columnIndex, DuckDBColumnType... types) {\n-\t\treturn Arrays.stream(types).anyMatch(type -> meta.column_types[columnIndex - 1] == type);\n+\t\treturn Arrays.stream(types).anyMatch(type -> current_chunk[columnIndex - 1].duckdb_type == type);\n \t}\n \n \tpublic String getString(int columnIndex) throws SQLException {\n@@ -265,185 +214,88 @@ public String getString(int columnIndex) throws SQLException {\n \t\t}\n \t}\n \n-\tprivate ByteBuffer getbuf(int columnIndex, int typeWidth) throws SQLException {\n-\t\tByteBuffer buf = current_chunk[columnIndex - 1].constlen_data;\n-\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n-\t\tbuf.position((chunk_idx - 1) * typeWidth);\n-\t\treturn buf;\n-\t}\n-\n \tpublic boolean getBoolean(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn false;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.BOOLEAN)) {\n-\t\t\treturn getbuf(columnIndex, 1).get() == 1;\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).byteValue() == 1;\n-\t\t}\n-\n-\t\treturn Boolean.parseBoolean(getObject(columnIndex).toString());\n+\t\treturn current_chunk[columnIndex - 1].getBoolean(chunk_idx - 1);\n \t}\n \n \tpublic byte getByte(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TINYINT)) {\n-\t\t\treturn getbuf(columnIndex, 1).get();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).byteValue();\n-\t\t}\n-\t\treturn Byte.parseByte(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getByte(chunk_idx - 1);\n \t}\n \n \tpublic short getShort(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.SMALLINT)) {\n-\t\t\treturn getbuf(columnIndex, 2).getShort();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).shortValue();\n-\t\t}\n-\t\treturn Short.parseShort(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getShort(chunk_idx - 1);\n \t}\n \n \tpublic int getInt(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.INTEGER)) {\n-\t\t\treturn getbuf(columnIndex, 4).getInt();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).intValue();\n-\t\t}\n-\t\treturn Integer.parseInt(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getInt(chunk_idx - 1);\n \t}\n \n \tprivate short getUint8(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.UTINYINT)) {\n-\t\t\tByteBuffer buf = ByteBuffer.allocate(2);\n-\t\t\tgetbuf(columnIndex, 1).get(buf.array(), 1, 1);\n-\t\t\treturn buf.getShort();\n-\n-\t\t}\n-\t\tthrow new SQLFeatureNotSupportedException(\"getUint8\");\n+\t\treturn current_chunk[columnIndex - 1].getUint8(chunk_idx - 1);\n \t}\n \n \tprivate int getUint16(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.USMALLINT)) {\n-\t\t\tByteBuffer buf = ByteBuffer.allocate(4);\n-\t\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n-\t\t\tgetbuf(columnIndex, 2).get(buf.array(), 0, 2);\n-\t\t\treturn buf.getInt();\n-\t\t}\n-\t\tthrow new SQLFeatureNotSupportedException(\"getUint16\");\n-\n+\t\treturn current_chunk[columnIndex - 1].getUint16(chunk_idx - 1);\n \t}\n \n \tprivate long getUint32(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.UINTEGER)) {\n-\t\t\tByteBuffer buf = ByteBuffer.allocate(8);\n-\t\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n-\t\t\tgetbuf(columnIndex, 4).get(buf.array(), 0, 4);\n-\t\t\treturn buf.getLong();\n-\t\t}\n-\t\tthrow new SQLFeatureNotSupportedException(\"getUint32\");\n+\t\treturn current_chunk[columnIndex - 1].getUint32(chunk_idx - 1);\n \t}\n \n \tprivate BigInteger getUint64(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn BigInteger.ZERO;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.UBIGINT)) {\n-\t\t\tbyte[] buf_res = new byte[16];\n-\t\t\tbyte[] buf = new byte[8];\n-\t\t\tgetbuf(columnIndex, 8).get(buf);\n-\t\t\tfor (int i = 0; i < 8; i++) {\n-\t\t\t\tbuf_res[i + 8] = buf[7 - i];\n-\t\t\t}\n-\t\t\treturn new BigInteger(buf_res);\n-\t\t}\n-\t\tthrow new SQLFeatureNotSupportedException(\"getUint64\");\n+\t\treturn current_chunk[columnIndex - 1].getUint64(chunk_idx - 1);\n \t}\n \n \tpublic long getLong(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn 0;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.BIGINT)\n-\t\t\t   || isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {\n-\t\t\treturn getbuf(columnIndex, 8).getLong();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).longValue();\n-\t\t}\n-\t\treturn Long.parseLong(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getLong(chunk_idx - 1);\n \t}\n \n \tpublic BigInteger getHugeint(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn BigInteger.ZERO;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.HUGEINT)) {\n-\t\t\tbyte[] buf = new byte[16];\n-\t\t\tgetbuf(columnIndex, 16).get(buf);\n-\t\t\tfor (int i = 0; i < 8; i++) {\n-\t\t\t\tbyte keep = buf[i];\n-\t\t\t\tbuf[i] = buf[15 - i];\n-\t\t\t\tbuf[15 - i] = keep;\n-\t\t\t}\n-\t\t\treturn new BigInteger(buf);\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn new BigInteger(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getHugeint(chunk_idx - 1);\n \t}\n \n \tpublic float getFloat(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn Float.NaN;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.FLOAT)) {\n-\t\t\treturn getbuf(columnIndex, 4).getFloat();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).floatValue();\n-\t\t}\n-\t\treturn Float.parseFloat(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getFloat(chunk_idx - 1);\n \t}\n \n \tpublic double getDouble(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn Double.NaN;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.DOUBLE)) {\n-\t\t\treturn getbuf(columnIndex, 8).getDouble();\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\tif (o instanceof Number) {\n-\t\t\treturn ((Number) o).doubleValue();\n-\t\t}\n-\t\treturn Double.parseDouble(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getDouble(chunk_idx - 1);\n \t}\n \n \tpublic int findColumn(String columnLabel) throws SQLException {\n@@ -503,90 +355,42 @@ public byte[] getBytes(int columnIndex) throws SQLException {\n \t}\n \n \tpublic Date getDate(int columnIndex) throws SQLException {\n-\t\tString string_value = getLazyString(columnIndex);\n-\t\tif (string_value == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\ttry {\n-\t\t\treturn Date.valueOf(string_value);\n-\t\t} catch (Exception e) {\n-\t\t\treturn null;\n-\t\t}\n+\t\treturn check_and_null(columnIndex) ? null : current_chunk[columnIndex - 1].getDate(chunk_idx - 1);\n \t}\n \n \tpublic Time getTime(int columnIndex) throws SQLException {\n-\t\tString string_value = getLazyString(columnIndex);\n-\t\tif (string_value == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\ttry {\n-\n-\t\t\treturn Time.valueOf(getLazyString(columnIndex));\n-\t\t} catch (Exception e) {\n-\t\t\treturn null;\n-\t\t}\n+\t\treturn check_and_null(columnIndex) ? null : current_chunk[columnIndex - 1].getTime(chunk_idx - 1);\n \t}\n \n \tpublic Timestamp getTimestamp(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {\n-\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_MS)) {\n-\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(columnIndex, 8).getLong() * 1000);\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_NS)) {\n-\t\t\treturn DuckDBTimestamp.toSqlTimestampNanos(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_S)) {\n-\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(columnIndex, 8).getLong() * 1_000_000);\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn Timestamp.valueOf(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getTimestamp(chunk_idx - 1);\n \t}\n \n \tprivate LocalDateTime getLocalDateTime(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {\n-\t\t\treturn DuckDBTimestamp.toLocalDateTime(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn LocalDateTime.parse(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getLocalDateTime(chunk_idx - 1);\n \t}\n \n \tprivate OffsetDateTime getOffsetDateTime(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n-\t\t\treturn DuckDBTimestamp.toOffsetDateTime(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn OffsetDateTime.parse(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getOffsetDateTime(chunk_idx - 1);\n \t}\n \n \tpublic UUID getUuid(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\n-\t\tif (isType(columnIndex, DuckDBColumnType.UUID)) {\n-\t\t\tByteBuffer buffer = getbuf(columnIndex, 16);\n-\t\t\tlong leastSignificantBits = buffer.getLong();\n-\n-\t\t\t// Account for unsigned\n-\t\t\tlong mostSignificantBits = buffer.getLong() - Long.MAX_VALUE - 1;\n-\t\t\treturn new UUID(mostSignificantBits, leastSignificantBits);\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn UUID.fromString(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getUuid(chunk_idx - 1);\n \t}\n \n-\tstatic class DuckDBBlobResult implements Blob {\n+\tpublic static class DuckDBBlobResult implements Blob {\n \n \t\tstatic class ByteBufferBackedInputStream extends InputStream {\n \n@@ -669,6 +473,26 @@ public int setBytes(long pos, byte[] bytes, int offset, int len) throws SQLExcep\n \n \t\t}\n \n+\t\t@Override\n+\t\tpublic String toString() {\n+\t\t\treturn \"DuckDBBlobResult{\" +\n+\t\t\t\t\t\"buffer=\" + buffer +\n+\t\t\t\t\t'}';\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic boolean equals(Object o) {\n+\t\t\tif (this == o) return true;\n+\t\t\tif (o == null || getClass() != o.getClass()) return false;\n+\t\t\tDuckDBBlobResult that = (DuckDBBlobResult) o;\n+\t\t\treturn Objects.equals(buffer, that.buffer);\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic int hashCode() {\n+\t\t\treturn Objects.hash(buffer);\n+\t\t}\n+\n \t\tprivate ByteBuffer buffer;\n \n \t}\n@@ -677,11 +501,7 @@ public Blob getBlob(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.BLOB)) {\n-\t\t\treturn new DuckDBBlobResult(((ByteBuffer[]) current_chunk[columnIndex - 1].varlen_data)[chunk_idx - 1]);\n-\t\t}\n-\n-\t\tthrow new SQLFeatureNotSupportedException(\"getBlob\");\n+\t\treturn current_chunk[columnIndex - 1].getBlob(chunk_idx - 1);\n \t}\n \n \tpublic Blob getBlob(String columnLabel) throws SQLException {\n@@ -756,28 +576,7 @@ public BigDecimal getBigDecimal(int columnIndex) throws SQLException {\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.DECIMAL)) {\n-\t\t\tswitch (meta.column_types_meta[columnIndex - 1].type_size) {\n-\t\t\tcase 16:\n-\t\t\t\treturn new BigDecimal((int) getbuf(columnIndex, 2).getShort())\n-\t\t\t\t\t\t.scaleByPowerOfTen(meta.column_types_meta[columnIndex - 1].scale * -1);\n-\t\t\tcase 32:\n-\t\t\t\treturn new BigDecimal(getbuf(columnIndex, 4).getInt())\n-\t\t\t\t\t\t.scaleByPowerOfTen(meta.column_types_meta[columnIndex - 1].scale * -1);\n-\t\t\tcase 64:\n-\t\t\t\treturn new BigDecimal(getbuf(columnIndex, 8).getLong())\n-\t\t\t\t\t\t.scaleByPowerOfTen(meta.column_types_meta[columnIndex - 1].scale * -1);\n-\t\t\tcase 128:\n-\t\t\t\tByteBuffer buf = getbuf(columnIndex, 16);\n-\t\t\t\tlong lower = buf.getLong();\n-\t\t\t\tlong upper = buf.getLong();\n-\t\t\t\treturn new BigDecimal(upper).multiply(ULONG_MULTIPLIER)\n-\t\t\t\t\t\t.add(new BigDecimal(Long.toUnsignedString(lower)))\n-\t\t\t\t\t\t.scaleByPowerOfTen(meta.column_types_meta[columnIndex - 1].scale * -1);\n-\t\t\t}\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn new BigDecimal(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getBigDecimal(chunk_idx - 1);\n \t}\n \n \tpublic BigDecimal getBigDecimal(String columnLabel) throws SQLException {\n@@ -1066,7 +865,10 @@ public Clob getClob(int columnIndex) throws SQLException {\n \t}\n \n \tpublic Array getArray(int columnIndex) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException(\"getArray\");\n+\t\tif (check_and_null(columnIndex)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn current_chunk[columnIndex - 1].getArray(chunk_idx - 1);\n \t}\n \n \tpublic Object getObject(String columnLabel, Map<String, Class<?>> map) throws SQLException {\n@@ -1082,7 +884,7 @@ public Clob getClob(String columnLabel) throws SQLException {\n \t}\n \n \tpublic Array getArray(String columnLabel) throws SQLException {\n-\t\tthrow new SQLFeatureNotSupportedException(\"getArray\");\n+\t\treturn getArray(findColumn(columnLabel));\n \t}\n \n \tpublic Date getDate(int columnIndex, Calendar cal) throws SQLException {\n@@ -1105,22 +907,7 @@ public Timestamp getTimestamp(int columnIndex, Calendar cal) throws SQLException\n \t\tif (check_and_null(columnIndex)) {\n \t\t\treturn null;\n \t\t}\n-\t\t// Our raw data is already a proper count of units since the epoch\n-\t\t// So just construct the SQL Timestamp.\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP)) {\n-\t\t\treturn DuckDBTimestamp.fromMicroInstant(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_MS)) {\n-\t\t\treturn DuckDBTimestamp.fromMilliInstant(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_NS)) {\n-\t\t\treturn DuckDBTimestamp.fromNanoInstant(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tif (isType(columnIndex, DuckDBColumnType.TIMESTAMP_S)) {\n-\t\t\treturn DuckDBTimestamp.fromSecondInstant(getbuf(columnIndex, 8).getLong());\n-\t\t}\n-\t\tObject o = getObject(columnIndex);\n-\t\treturn Timestamp.valueOf(o.toString());\n+\t\treturn current_chunk[columnIndex - 1].getTimestamp(chunk_idx - 1, cal);\n \t}\n \n \tpublic Timestamp getTimestamp(String columnLabel, Calendar cal) throws SQLException {\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\nindex 151bc52c9250..35867603a766 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBResultSetMetaData.java\n@@ -1,21 +1,18 @@\n package org.duckdb;\n \n-import java.sql.Date;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.sql.ResultSetMetaData;\n import java.sql.SQLException;\n-import java.sql.SQLFeatureNotSupportedException;\n-import java.sql.Time;\n import java.sql.Timestamp;\n import java.sql.Types;\n-import java.util.ArrayList;\n-import java.time.OffsetTime;\n+import java.time.LocalDate;\n+import java.time.LocalTime;\n import java.time.OffsetDateTime;\n-import java.math.BigDecimal;\n-import java.math.BigInteger;\n+import java.time.OffsetTime;\n+import java.util.ArrayList;\n import java.util.UUID;\n \n-import org.duckdb.DuckDBResultSet.DuckDBBlobResult;\n-\n public class DuckDBResultSetMetaData implements ResultSetMetaData {\n \n \tpublic DuckDBResultSetMetaData(int param_count, int column_count, String[] column_names,\n@@ -36,10 +33,8 @@ public DuckDBResultSetMetaData(int param_count, int column_count, String[] colum\n \t\tthis.column_types = column_types_al.toArray(this.column_types);\n \n \t\tfor (String column_type_detail : this.column_types_details) {\n-\t\t\tif (!column_type_detail.equals(\"\")) {\n-\t\t\t\tString[] split_details = column_type_detail.split(\";\");\n-\t\t\t\tcolumn_types_meta.add(new DuckDBColumnTypeMetaData(Short.parseShort(split_details[0].replace(\"DECIMAL\", \"\"))\n-\t\t\t\t\t\t\t, Short.parseShort(split_details[1]), Short.parseShort(split_details[2])));\n+\t\t\tif (column_type_detail.startsWith(\"DECIMAL\")) {\n+\t\t\t\tcolumn_types_meta.add(DuckDBColumnTypeMetaData.parseColumnTypeMetadata(column_type_detail));\n \t\t\t}\n \t\t\telse { column_types_meta.add(null); }\n \t\t}\n@@ -47,14 +42,14 @@ public DuckDBResultSetMetaData(int param_count, int column_count, String[] colum\n \t}\n \n \tpublic static DuckDBColumnType TypeNameToType(String type_name) {\n-\t\tif (type_name.startsWith(\"DECIMAL\")) {\n+\t\tif (type_name.endsWith(\"[]\")) {\n+\t\t\treturn DuckDBColumnType.LIST;\n+\t\t} else if (type_name.startsWith(\"DECIMAL\")) {\n \t\t\treturn DuckDBColumnType.DECIMAL;\n \t\t} else if (type_name.equals(\"TIME WITH TIME ZONE\")) {\n \t\t\treturn DuckDBColumnType.TIME_WITH_TIME_ZONE;\n \t\t} else if (type_name.equals(\"TIMESTAMP WITH TIME ZONE\")) {\n \t\t\treturn DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE;\n-\t\t} else if (type_name.endsWith(\"[]\")) {\n-\t\t\treturn DuckDBColumnType.LIST;\n \t\t} else if (type_name.startsWith(\"STRUCT\")) {\n \t\t\treturn DuckDBColumnType.STRUCT;\n \t\t} else if (type_name.startsWith(\"MAP\")) {\n@@ -151,19 +146,15 @@ public String getColumnClassName(int column) throws SQLException {\n \t\tcase TINYINT:\n \t\t\treturn Byte.class.getName();\n \t\tcase SMALLINT:\n-\t\t\treturn Short.class.getName();\n-\t\tcase INTEGER:\n-\t\t\treturn Integer.class.getName();\n-\t\tcase BIGINT:\n-\t\t\treturn Long.class.getName();\n-\t\tcase HUGEINT:\n-\t\t\treturn BigInteger.class.getName();\n \t\tcase UTINYINT:\n \t\t\treturn Short.class.getName();\n+\t\tcase INTEGER:\n \t\tcase USMALLINT:\n \t\t\treturn Integer.class.getName();\n+\t\tcase BIGINT:\n \t\tcase UINTEGER:\n \t\t\treturn Long.class.getName();\n+\t\tcase HUGEINT:\n \t\tcase UBIGINT:\n \t\t\treturn BigInteger.class.getName();\n \t\tcase FLOAT:\n@@ -173,11 +164,11 @@ public String getColumnClassName(int column) throws SQLException {\n \t\tcase DECIMAL:\n \t\t\treturn BigDecimal.class.getName();\n \t\tcase TIME:\n-\t\t\treturn Time.class.getName();\n+\t\t\treturn LocalTime.class.getName();\n \t\tcase TIME_WITH_TIME_ZONE:\n \t\t\treturn OffsetTime.class.getName();\n \t\tcase DATE:\n-\t\t\treturn Date.class.getName();\n+\t\t\treturn LocalDate.class.getName();\n \t\tcase TIMESTAMP:\n \t\tcase TIMESTAMP_NS:\n \t\tcase TIMESTAMP_S:\n@@ -191,6 +182,8 @@ public String getColumnClassName(int column) throws SQLException {\n \t\t\treturn DuckDBResultSet.DuckDBBlobResult.class.getName();\n \t\tcase UUID:\n \t\t\treturn UUID.class.getName();\n+\t\tcase LIST:\n+\t\t\treturn DuckDBArray.class.getName();\n \t\tdefault:\n \t\t\treturn String.class.getName();\n \t\t}\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\nindex a4ebd9c0f738..d4bcdff87b32 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBTimestamp.java\n@@ -61,7 +61,7 @@ public static OffsetTime toOffsetTime(long timeMicros) {\n \t}\n \n \tprivate static LocalTime toLocalTime(long timeMicros) {\n-\t\treturn LocalTime.ofSecondOfDay(micros2seconds(timeMicros));\n+\t\treturn LocalTime.ofNanoOfDay(timeMicros * 1000);\n \t}\n \n \tpublic static OffsetDateTime toOffsetDateTime(long timeMicros) {\ndiff --git a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\nindex 1150277feaa3..76ad064a29cb 100644\n--- a/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n+++ b/tools/jdbc/src/main/java/org/duckdb/DuckDBVector.java\n@@ -1,19 +1,497 @@\n package org.duckdb;\n \n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n import java.nio.ByteBuffer;\n+import java.nio.ByteOrder;\n+import java.sql.Array;\n+import java.sql.Blob;\n+import java.sql.Date;\n+import java.sql.SQLException;\n+import java.sql.SQLFeatureNotSupportedException;\n+import java.sql.Time;\n+import java.sql.Timestamp;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.OffsetTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.TextStyle;\n+import java.time.temporal.ChronoField;\n+import java.util.Calendar;\n+import java.util.UUID;\n \n-public class DuckDBVector {\n-\t\n-\tpublic DuckDBVector(String duckdb_type, int length,  boolean[] nullmask) {\n+class DuckDBVector {\n+\t// Constant to construct BigDecimals from hugeint_t\n+\tprivate final static BigDecimal ULONG_MULTIPLIER = new BigDecimal(\"18446744073709551616\");\n+\tprivate final static DateTimeFormatter ERA_FORMAT = new DateTimeFormatterBuilder()\n+\t\t\t.appendValue(ChronoField.YEAR_OF_ERA)\n+\t\t\t.appendLiteral(\"-\")\n+\t\t\t.appendValue(ChronoField.MONTH_OF_YEAR)\n+\t\t\t.appendLiteral(\"-\")\n+\t\t\t.appendValue(ChronoField.DAY_OF_MONTH)\n+\t\t\t.appendOptional(\n+\t\t\t\t\tnew DateTimeFormatterBuilder()\n+\t\t\t\t\t\t\t.appendLiteral(\" (\")\n+\t\t\t\t\t\t\t.appendText(ChronoField.ERA, TextStyle.SHORT)\n+\t\t\t\t\t\t\t.appendLiteral(\")\")\n+\t\t\t\t\t\t\t.toFormatter()\n+\t\t\t).toFormatter();\n+\n+\tDuckDBVector(String duckdb_type, int length, boolean[] nullmask) {\n \t\tsuper();\n-\t\tthis.duckdb_type = duckdb_type;\n+\t\tthis.duckdb_type = DuckDBResultSetMetaData.TypeNameToType(duckdb_type);\n+\t\tthis.meta = this.duckdb_type == DuckDBColumnType.DECIMAL ? DuckDBColumnTypeMetaData.parseColumnTypeMetadata(duckdb_type) : null;\n \t\tthis.length = length;\n \t\tthis.nullmask = nullmask;\n \t}\n-\tprotected String duckdb_type;\n+\tprivate final DuckDBColumnTypeMetaData meta;\n+\tprotected DuckDBColumnType duckdb_type;\n \tprotected int length;\n \tprotected boolean[] nullmask;\n \tprotected ByteBuffer constlen_data = null;\n \tprotected Object[] varlen_data = null;\n \n+\tObject getObject(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tswitch (duckdb_type) {\n+\t\t\tcase BOOLEAN:\n+\t\t\t\treturn getBoolean(idx);\n+\t\t\tcase TINYINT:\n+\t\t\t\treturn getByte(idx);\n+\t\t\tcase SMALLINT:\n+\t\t\t\treturn getShort(idx);\n+\t\t\tcase INTEGER:\n+\t\t\t\treturn getInt(idx);\n+\t\t\tcase BIGINT:\n+\t\t\t\treturn getLong(idx);\n+\t\t\tcase HUGEINT:\n+\t\t\t\treturn getHugeint(idx);\n+\t\t\tcase UTINYINT:\n+\t\t\t\treturn getUint8(idx);\n+\t\t\tcase USMALLINT:\n+\t\t\t\treturn getUint16(idx);\n+\t\t\tcase UINTEGER:\n+\t\t\t\treturn getUint32(idx);\n+\t\t\tcase UBIGINT:\n+\t\t\t\treturn getUint64(idx);\n+\t\t\tcase FLOAT:\n+\t\t\t\treturn getFloat(idx);\n+\t\t\tcase DOUBLE:\n+\t\t\t\treturn getDouble(idx);\n+\t\t\tcase DECIMAL:\n+\t\t\t\treturn getBigDecimal(idx);\n+\t\t\tcase TIME:\n+\t\t\t\treturn getLocalTime(idx);\n+\t\t\tcase TIME_WITH_TIME_ZONE:\n+\t\t\t\treturn getOffsetTime(idx);\n+\t\t\tcase DATE:\n+\t\t\t\treturn getLocalDate(idx);\n+\t\t\tcase TIMESTAMP:\n+\t\t\tcase TIMESTAMP_NS:\n+\t\t\tcase TIMESTAMP_S:\n+\t\t\tcase TIMESTAMP_MS:\n+\t\t\t\treturn getTimestamp(idx);\n+\t\t\tcase TIMESTAMP_WITH_TIME_ZONE:\n+\t\t\t\treturn getOffsetDateTime(idx);\n+\t\t\tcase JSON:\n+\t\t\t\treturn getJsonObject(idx);\n+\t\t\tcase BLOB:\n+\t\t\t\treturn getBlob(idx);\n+\t\t\tcase UUID:\n+\t\t\t\treturn getUuid(idx);\n+\t\t\tcase LIST:\n+\t\t\t\treturn getArray(idx);\n+\t\t\tdefault:\n+\t\t\t\treturn getLazyString(idx);\n+\t\t}\n+\t}\n+\n+\tLocalTime getLocalTime(int idx) throws SQLException {\n+\t\tString lazyString = getLazyString(idx);\n+\n+\t\treturn lazyString == null ? null : LocalTime.parse(lazyString);\n+\t}\n+\n+\tLocalDate getLocalDate(int idx) throws SQLException {\n+\t\tString lazyString = getLazyString(idx);\n+\n+\t\tif (\"infinity\".equals(lazyString)) return LocalDate.MAX;\n+\t\telse if (\"-infinity\".equals(lazyString)) return LocalDate.MIN;\n+\n+\t\treturn lazyString == null ? null : LocalDate.from(ERA_FORMAT.parse(lazyString));\n+\t}\n+\n+\tBigDecimal getBigDecimal(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.DECIMAL)) {\n+\t\t\tswitch (meta.type_size) {\n+\t\t\t\tcase 16:\n+\t\t\t\t\treturn new BigDecimal((int) getbuf(idx, 2).getShort())\n+\t\t\t\t\t\t\t.scaleByPowerOfTen(meta.scale * -1);\n+\t\t\t\tcase 32:\n+\t\t\t\t\treturn new BigDecimal(getbuf(idx, 4).getInt())\n+\t\t\t\t\t\t\t.scaleByPowerOfTen(meta.scale * -1);\n+\t\t\t\tcase 64:\n+\t\t\t\t\treturn new BigDecimal(getbuf(idx, 8).getLong())\n+\t\t\t\t\t\t\t.scaleByPowerOfTen(meta.scale * -1);\n+\t\t\t\tcase 128:\n+\t\t\t\t\tByteBuffer buf = getbuf(idx, 16);\n+\t\t\t\t\tlong lower = buf.getLong();\n+\t\t\t\t\tlong upper = buf.getLong();\n+\t\t\t\t\treturn new BigDecimal(upper).multiply(ULONG_MULTIPLIER)\n+\t\t\t\t\t\t\t.add(new BigDecimal(Long.toUnsignedString(lower)))\n+\t\t\t\t\t\t\t.scaleByPowerOfTen(meta.scale * -1);\n+\t\t\t}\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn new BigDecimal(o.toString());\n+\t}\n+\n+\tOffsetDateTime getOffsetDateTime(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_WITH_TIME_ZONE)) {\n+\t\t\treturn DuckDBTimestamp.toOffsetDateTime(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn OffsetDateTime.parse(o.toString());\n+\t}\n+\n+\tTimestamp getTimestamp(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_MS)) {\n+\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(idx, 8).getLong() * 1000);\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_NS)) {\n+\t\t\treturn DuckDBTimestamp.toSqlTimestampNanos(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_S)) {\n+\t\t\treturn DuckDBTimestamp.toSqlTimestamp(getbuf(idx, 8).getLong() * 1_000_000);\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn Timestamp.valueOf(o.toString());\n+\t}\n+\n+\tUUID getUuid(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\n+\t\tif (isType(DuckDBColumnType.UUID)) {\n+\t\t\tByteBuffer buffer = getbuf(idx, 16);\n+\t\t\tlong leastSignificantBits = buffer.getLong();\n+\n+\t\t\t// Account for unsigned\n+\t\t\tlong mostSignificantBits = buffer.getLong() - Long.MAX_VALUE - 1;\n+\t\t\treturn new UUID(mostSignificantBits, leastSignificantBits);\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn UUID.fromString(o.toString());\n+\t}\n+\n+\tString getLazyString(int idx) {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn (String) varlen_data[idx];\n+\t}\n+\n+\tArray getArray(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.LIST)) {\n+\t\t\treturn (Array) varlen_data[idx];\n+\t\t}\n+\t\tthrow new SQLFeatureNotSupportedException(\"getArray\");\n+\t}\n+\n+\tBlob getBlob(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.BLOB)) {\n+\t\t\treturn new DuckDBResultSet.DuckDBBlobResult((ByteBuffer) varlen_data[idx]);\n+\t\t}\n+\n+\t\tthrow new SQLFeatureNotSupportedException(\"getBlob\");\n+\t}\n+\n+\tJsonNode getJsonObject(int idx) {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tString result = getLazyString(idx);\n+\t\treturn result == null ? null : new JsonNode(result);\n+\t}\n+\n+\tDate getDate(int idx) {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t// TODO: load from native format\n+\t\tString string_value = getLazyString(idx);\n+\t\tif (string_value == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn Date.valueOf(string_value);\n+\t\t} catch (Exception e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tOffsetTime getOffsetTime(int idx) {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\treturn DuckDBTimestamp.toOffsetTime(getbuf(idx, 8).getLong());\n+\t}\n+\n+\tTime getTime(int idx) {\n+\t\t// TODO: load from native format\n+\t\tString string_value = getLazyString(idx);\n+\t\tif (string_value == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn Time.valueOf(string_value);\n+\t\t} catch (Exception e) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tBoolean getBoolean(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn false;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.BOOLEAN)) {\n+\t\t\treturn getbuf(idx, 1).get() == 1;\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).byteValue() == 1;\n+\t\t}\n+\n+\t\treturn Boolean.parseBoolean(o.toString());\n+\t}\n+\n+\tprotected ByteBuffer getbuf(int idx, int typeWidth) {\n+\t\tByteBuffer buf = constlen_data;\n+\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n+\t\tbuf.position(idx * typeWidth);\n+\t\treturn buf;\n+\t}\n+\n+\tprivate boolean check_and_null(int idx) {\n+\t\treturn nullmask[idx];\n+\t}\n+\n+\tlong getLong(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.BIGINT) || isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\t\treturn getbuf(idx, 8).getLong();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).longValue();\n+\t\t}\n+\t\treturn Long.parseLong(o.toString());\n+\t}\n+\n+\tint getInt(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.INTEGER)) {\n+\t\t\treturn getbuf(idx, 4).getInt();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).intValue();\n+\t\t}\n+\t\treturn Integer.parseInt(o.toString());\n+\t}\n+\n+\tshort getUint8(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.UTINYINT)) {\n+\t\t\tByteBuffer buf = ByteBuffer.allocate(2);\n+\t\t\tgetbuf(idx, 1).get(buf.array(), 1, 1);\n+\t\t\treturn buf.getShort();\n+\t\t}\n+\t\tthrow new SQLFeatureNotSupportedException(\"getUint8\");\n+\t}\n+\n+\tlong getUint32(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.UINTEGER)) {\n+\t\t\tByteBuffer buf = ByteBuffer.allocate(8);\n+\t\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n+\t\t\tgetbuf(idx, 4).get(buf.array(), 0, 4);\n+\t\t\treturn buf.getLong();\n+\t\t}\n+\t\tthrow new SQLFeatureNotSupportedException(\"getUint32\");\n+\t}\n+\n+\tint getUint16(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.USMALLINT)) {\n+\t\t\tByteBuffer buf = ByteBuffer.allocate(4);\n+\t\t\tbuf.order(ByteOrder.LITTLE_ENDIAN);\n+\t\t\tgetbuf(idx, 2).get(buf.array(), 0, 2);\n+\t\t\treturn buf.getInt();\n+\t\t}\n+\t\tthrow new SQLFeatureNotSupportedException(\"getUint16\");\n+\t}\n+\n+\tBigInteger getUint64(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn BigInteger.ZERO;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.UBIGINT)) {\n+\t\t\tbyte[] buf_res = new byte[16];\n+\t\t\tbyte[] buf = new byte[8];\n+\t\t\tgetbuf(idx, 8).get(buf);\n+\t\t\tfor (int i = 0; i < 8; i++) {\n+\t\t\t\tbuf_res[i + 8] = buf[7 - i];\n+\t\t\t}\n+\t\t\treturn new BigInteger(buf_res);\n+\t\t}\n+\t\tthrow new SQLFeatureNotSupportedException(\"getUint64\");\n+\t}\n+\n+\tdouble getDouble(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn Double.NaN;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.DOUBLE)) {\n+\t\t\treturn getbuf(idx, 8).getDouble();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).doubleValue();\n+\t\t}\n+\t\treturn Double.parseDouble(o.toString());\n+\t}\n+\n+\tbyte getByte(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TINYINT)) {\n+\t\t\treturn getbuf(idx, 1).get();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).byteValue();\n+\t\t}\n+\t\treturn Byte.parseByte(o.toString());\n+\t}\n+\n+\tshort getShort(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn 0;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.SMALLINT)) {\n+\t\t\treturn getbuf(idx, 2).getShort();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).shortValue();\n+\t\t}\n+\t\treturn Short.parseShort(o.toString());\n+\t}\n+\n+\tBigInteger getHugeint(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn BigInteger.ZERO;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.HUGEINT)) {\n+\t\t\tbyte[] buf = new byte[16];\n+\t\t\tgetbuf(idx, 16).get(buf);\n+\t\t\tfor (int i = 0; i < 8; i++) {\n+\t\t\t\tbyte keep = buf[i];\n+\t\t\t\tbuf[i] = buf[15 - i];\n+\t\t\t\tbuf[15 - i] = keep;\n+\t\t\t}\n+\t\t\treturn new BigInteger(buf);\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn new BigInteger(o.toString());\n+\t}\n+\n+\tfloat getFloat(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn Float.NaN;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.FLOAT)) {\n+\t\t\treturn getbuf(idx, 4).getFloat();\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\tif (o instanceof Number) {\n+\t\t\treturn ((Number) o).floatValue();\n+\t\t}\n+\t\treturn Float.parseFloat(o.toString());\n+\t}\n+\n+\tprivate boolean isType(DuckDBColumnType columnType) {\n+\t\treturn duckdb_type == columnType;\n+\t}\n+\n+\tTimestamp getTimestamp(int idx, Calendar cal) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\t// Our raw data is already a proper count of units since the epoch\n+\t\t// So just construct the SQL Timestamp.\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\t\treturn DuckDBTimestamp.fromMicroInstant(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_MS)) {\n+\t\t\treturn DuckDBTimestamp.fromMilliInstant(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_NS)) {\n+\t\t\treturn DuckDBTimestamp.fromNanoInstant(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP_S)) {\n+\t\t\treturn DuckDBTimestamp.fromSecondInstant(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn Timestamp.valueOf(o.toString());\n+\t}\n+\n+\tLocalDateTime getLocalDateTime(int idx) throws SQLException {\n+\t\tif (check_and_null(idx)) {\n+\t\t\treturn null;\n+\t\t}\n+\t\tif (isType(DuckDBColumnType.TIMESTAMP)) {\n+\t\t\treturn DuckDBTimestamp.toLocalDateTime(getbuf(idx, 8).getLong());\n+\t\t}\n+\t\tObject o = getObject(idx);\n+\t\treturn LocalDateTime.parse(o.toString());\n+\t}\n }\ndiff --git a/tools/juliapkg/Project.toml b/tools/juliapkg/Project.toml\nindex ee9c9b9b80b6..80e306c88bab 100644\n--- a/tools/juliapkg/Project.toml\n+++ b/tools/juliapkg/Project.toml\n@@ -1,7 +1,7 @@\n name = \"DuckDB\"\n uuid = \"d2f5444f-75bc-4fdf-ac35-56f514c445e1\"\n authors = [\"Mark Raasveldt <mark@duckdblabs.com\", \"Hannes M\u00fchleisen <hannes@duckdblabs.com>\"]\n-version = \"0.7.1\"\n+version = \"0.8.0\"\n \n [deps]\n DBInterface = \"a10d1c49-ce27-4219-8d33-6db1a4562965\"\ndiff --git a/tools/juliapkg/src/appender.jl b/tools/juliapkg/src/appender.jl\nindex 006dbf5a2636..5ea0582d3ee6 100644\n--- a/tools/juliapkg/src/appender.jl\n+++ b/tools/juliapkg/src/appender.jl\n@@ -12,7 +12,7 @@ mutable struct Appender\n             if error_ptr == C_NULL\n                 error_message = string(\"Opening of Appender for table \\\"\", table, \"\\\" failed: unknown error\")\n             else\n-                error_message = unsafe_string(error_ptr)\n+                error_message = string(error_ptr)\n             end\n             duckdb_appender_destroy(handle)\n             throw(QueryException(error_message))\ndiff --git a/tools/nodejs/configure.py b/tools/nodejs/configure.py\nindex dc4718f05b9c..3409c8a10e57 100644\n--- a/tools/nodejs/configure.py\n+++ b/tools/nodejs/configure.py\n@@ -63,6 +63,8 @@ def find_library_path(libdir, libname):\n             cflags += ['-g']\n         if '-O0' in os.environ['DUCKDB_NODE_CFLAGS']:\n             cflags += ['-O0']\n+        if '-DNDEBUG' in os.environ['DUCKDB_NODE_CFLAGS']:\n+            defines += ['NDEBUG']\n \n     if 'DUCKDB_NODE_BUILD_CACHE' in os.environ:\n         cache = {\ndiff --git a/tools/nodejs/package.json b/tools/nodejs/package.json\nindex 110887678942..c5cd43d53b89 100644\n--- a/tools/nodejs/package.json\n+++ b/tools/nodejs/package.json\n@@ -19,7 +19,7 @@\n     \"install\": \"node-pre-gyp install --fallback-to-build\",\n     \"pretest\": \"node test/support/createdb.js\",\n     \"test\": \"mocha -R spec --timeout 480000 --expose-gc\",\n-    \"test-path\": \"mocha -R spec --timeout 480000 --exclude 'test/*.ts'\",\n+    \"test-path\": \"mocha -R spec --timeout 480000 --expose-gc --exclude 'test/*.ts'\",\n     \"pack\": \"node-pre-gyp package\"\n   },\n   \"directories\": {\ndiff --git a/tools/nodejs/src/statement.cpp b/tools/nodejs/src/statement.cpp\nindex 034e4841c2ae..d53ff976ae27 100644\n--- a/tools/nodejs/src/statement.cpp\n+++ b/tools/nodejs/src/statement.cpp\n@@ -354,24 +354,21 @@ struct RunPreparedTask : public Task {\n \t\t\tauto deleter = [](Napi::Env, void *finalizeData, void *hint) {\n \t\t\t\tdelete static_cast<std::shared_ptr<duckdb::QueryResult> *>(hint);\n \t\t\t};\n-\n \t\t\tstd::shared_ptr<duckdb::QueryResult> result_ptr = std::move(result);\n \n \t\t\tduckdb::idx_t out_idx = 1;\n-\t\t\twhile (true) {\n-\t\t\t\tauto chunk = result_ptr->Fetch();\n-\n-\t\t\t\tif (!chunk || chunk->size() == 0) {\n-\t\t\t\t\tbreak;\n+\t\t\tfor (auto &chunk : materialized_result->Collection().Chunks()) {\n+\t\t\t\tif (chunk.size() == 0) {\n+\t\t\t\t\tcontinue;\n \t\t\t\t}\n \n-\t\t\t\tD_ASSERT(chunk->ColumnCount() == 2);\n-\t\t\t\tD_ASSERT(chunk->data[0].GetType() == duckdb::LogicalType::BLOB);\n-\t\t\t\tD_ASSERT(chunk->data[1].GetType() == duckdb::LogicalType::BOOLEAN);\n+\t\t\t\tD_ASSERT(chunk.ColumnCount() == 2);\n+\t\t\t\tD_ASSERT(chunk.data[0].GetType() == duckdb::LogicalType::BLOB);\n+\t\t\t\tD_ASSERT(chunk.data[1].GetType() == duckdb::LogicalType::BOOLEAN);\n \n-\t\t\t\tfor (duckdb::idx_t row_idx = 0; row_idx < chunk->size(); row_idx++) {\n-\t\t\t\t\tduckdb::string_t blob = ((duckdb::string_t *)(chunk->data[0].GetData()))[row_idx];\n-\t\t\t\t\tbool is_header = chunk->data[1].GetData()[row_idx];\n+\t\t\t\tfor (duckdb::idx_t row_idx = 0; row_idx < chunk.size(); row_idx++) {\n+\t\t\t\t\tduckdb::string_t blob = duckdb::FlatVector::GetData<duckdb::string_t>(chunk.data[0])[row_idx];\n+\t\t\t\t\tbool is_header = chunk.data[1].GetData()[row_idx];\n \n \t\t\t\t\t// Create shared pointer to give (shared) ownership to ArrayBuffer, not that for these materialized\n \t\t\t\t\t// query results, the string data is owned by the QueryResult\n@@ -398,7 +395,12 @@ struct RunPreparedTask : public Task {\n \t\t\tresult_arr.Set(out_idx++, null_arr);\n \n \t\t\t// Confirm all rows are set\n-\t\t\tD_ASSERT(out_idx == materialized_result->RowCount() + 1);\n+\t\t\tif (materialized_result->RowCount() > 0) {\n+\t\t\t\t// Non empty results should have their\n+\t\t\t\tD_ASSERT(out_idx == materialized_result->RowCount() + 1);\n+\t\t\t} else {\n+\t\t\t\tD_ASSERT(out_idx == 2);\n+\t\t\t}\n \n \t\t\tcb.MakeCallback(statement.Value(), {env.Null(), result_arr});\n \t\t} break;\ndiff --git a/tools/odbc/include/parameter_descriptor.hpp b/tools/odbc/include/parameter_descriptor.hpp\nindex 0ea02f89cac1..fe03ca14572b 100644\n--- a/tools/odbc/include/parameter_descriptor.hpp\n+++ b/tools/odbc/include/parameter_descriptor.hpp\n@@ -63,7 +63,7 @@ class ParameterDescriptor {\n \tOdbcHandleDesc *cur_apd;\n \n \t//! a pool of allocated parameters during SQLPutData for character data\n-\tvector<duckdb::unique_ptr<char[]>> pool_allocated_ptr;\n+\tvector<duckdb::unsafe_unique_array<char>> pool_allocated_ptr;\n \t//! Index of the\n \tidx_t paramset_idx;\n \tidx_t cur_paramset_idx;\ndiff --git a/tools/odbc/parameter_descriptor.cpp b/tools/odbc/parameter_descriptor.cpp\nindex afc30c70253e..6b5d6be3a269 100644\n--- a/tools/odbc/parameter_descriptor.cpp\n+++ b/tools/odbc/parameter_descriptor.cpp\n@@ -171,7 +171,7 @@ SQLRETURN ParameterDescriptor::FillParamCharDataBuffer(DescRecord &apd_record, D\n \tsize_t offset = 0;\n \tauto sql_ind_ptr = GetSQLDescIndicatorPtr(apd_record);\n \tif (*sql_ind_ptr == SQL_DATA_AT_EXEC) {\n-\t\tpool_allocated_ptr.emplace_back(duckdb::unique_ptr<char[]>(new char[ipd_record.sql_desc_length]));\n+\t\tpool_allocated_ptr.emplace_back(duckdb::make_unsafe_uniq_array<char>(ipd_record.sql_desc_length));\n \t\tSetSQLDescDataPtr(apd_record, pool_allocated_ptr.back().get());\n \t\t*sql_ind_ptr = 0;\n \t} else {\n@@ -203,7 +203,7 @@ SQLRETURN ParameterDescriptor::FillCurParamCharSet(DescRecord &apd_record, DescR\n \n \tif (*len_ptr == SQL_DATA_AT_EXEC && pool_allocated_ptr.empty()) {\n \t\tauto alloc_size = col_size * cur_apd->header.sql_desc_array_size;\n-\t\tpool_allocated_ptr.emplace_back(duckdb::unique_ptr<char[]>(new char[alloc_size]));\n+\t\tpool_allocated_ptr.emplace_back(duckdb::make_unsafe_uniq_array<char>(alloc_size));\n \t\tSetSQLDescDataPtr(apd_record, pool_allocated_ptr.back().get());\n \t}\n \ndiff --git a/tools/pythonpkg/src/include/duckdb_python/filesystem_object.hpp b/tools/pythonpkg/src/include/duckdb_python/filesystem_object.hpp\nindex 76d4b51cf19e..807e36e09ce9 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/filesystem_object.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/filesystem_object.hpp\n@@ -20,8 +20,8 @@ class FileSystemObject : public RegisteredObject {\n \tvirtual ~FileSystemObject() {\n \t\tpy::gil_scoped_acquire acquire;\n \t\t// Assert that the 'obj' is a filesystem\n-\t\tauto &import_cache = *DuckDBPyConnection::ImportCache();\n-\t\tD_ASSERT(py::isinstance(obj, import_cache.pyduckdb().filesystem.modified_memory_filesystem()));\n+\t\tD_ASSERT(\n+\t\t    py::isinstance(obj, DuckDBPyConnection::ImportCache()->pyduckdb().filesystem.modified_memory_filesystem()));\n \t\tobj.attr(\"delete\")(filename);\n \t}\n \ndiff --git a/tools/pythonpkg/src/include/duckdb_python/pandas/pandas_scan.hpp b/tools/pythonpkg/src/include/duckdb_python/pandas/pandas_scan.hpp\nindex d9ceefa1b250..5cc7fc1c74f2 100644\n--- a/tools/pythonpkg/src/include/duckdb_python/pandas/pandas_scan.hpp\n+++ b/tools/pythonpkg/src/include/duckdb_python/pandas/pandas_scan.hpp\n@@ -52,6 +52,8 @@ struct PandasScanFunction : public TableFunction {\n \tstatic py::object PandasReplaceCopiedNames(const py::object &original_df);\n \n \tstatic void PandasBackendScanSwitch(PandasColumnBindData &bind_data, idx_t count, idx_t offset, Vector &out);\n+\n+\tstatic void PandasSerialize(FieldWriter &writer, const FunctionData *bind_data, const TableFunction &function);\n };\n \n } // namespace duckdb\ndiff --git a/tools/pythonpkg/src/pandas/analyzer.cpp b/tools/pythonpkg/src/pandas/analyzer.cpp\nindex a951d2bff2e7..847cb964dd10 100644\n--- a/tools/pythonpkg/src/pandas/analyzer.cpp\n+++ b/tools/pythonpkg/src/pandas/analyzer.cpp\n@@ -321,6 +321,8 @@ LogicalType PandasAnalyzer::GetItemType(py::handle ele, bool &can_convert) {\n \t\t// Fall back to string for unknown types\n \t\tcan_convert = false;\n \t\treturn LogicalType::VARCHAR;\n+\tdefault:\n+\t\tthrow InternalException(\"Unsupported PythonObjectType\");\n \t}\n }\n \ndiff --git a/tools/pythonpkg/src/pandas/scan.cpp b/tools/pythonpkg/src/pandas/scan.cpp\nindex ccc73e0150a3..9be4bc630145 100644\n--- a/tools/pythonpkg/src/pandas/scan.cpp\n+++ b/tools/pythonpkg/src/pandas/scan.cpp\n@@ -60,6 +60,7 @@ PandasScanFunction::PandasScanFunction()\n \tget_batch_index = PandasScanGetBatchIndex;\n \tcardinality = PandasScanCardinality;\n \ttable_scan_progress = PandasProgress;\n+\tserialize = PandasSerialize;\n \tprojection_pushdown = true;\n }\n \n@@ -233,4 +234,9 @@ py::object PandasScanFunction::PandasReplaceCopiedNames(const py::object &origin\n \treturn copy_df;\n }\n \n+void PandasScanFunction::PandasSerialize(FieldWriter &writer, const FunctionData *bind_data,\n+                                         const TableFunction &function) {\n+\tthrow NotImplementedException(\"PandasScan function cannot be serialized\");\n+}\n+\n } // namespace duckdb\ndiff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp\nindex 387046d127db..bd83ff38ad7d 100644\n--- a/tools/pythonpkg/src/pyconnection.cpp\n+++ b/tools/pythonpkg/src/pyconnection.cpp\n@@ -521,9 +521,17 @@ shared_ptr<DuckDBPyConnection> DuckDBPyConnection::Append(const string &name, co\n \t\tfor (auto &column : df_columns) {\n \t\t\tcolumn_names.push_back(std::string(py::str(column)));\n \t\t}\n-\t\tcolumns = StringUtil::Format(\"(%s)\", StringUtil::Join(column_names, \",\"));\n+\t\tcolumns += \"(\";\n+\t\tfor (idx_t i = 0; i < column_names.size(); i++) {\n+\t\t\tauto &column = column_names[i];\n+\t\t\tif (i != 0) {\n+\t\t\t\tcolumns += \", \";\n+\t\t\t}\n+\t\t\tcolumns += StringUtil::Format(\"%s\", SQLIdentifier(column));\n+\t\t}\n+\t\tcolumns += \")\";\n \t}\n-\treturn Execute(StringUtil::Format(\"INSERT INTO \\\"%s\\\"%s SELECT * FROM __append_df\", name, columns));\n+\treturn Execute(StringUtil::Format(\"INSERT INTO %s %s SELECT * FROM __append_df\", SQLIdentifier(name), columns));\n }\n \n void DuckDBPyConnection::RegisterArrowObject(const py::object &arrow_object, const string &name) {\ndiff --git a/tools/pythonpkg/src/pyrelation.cpp b/tools/pythonpkg/src/pyrelation.cpp\nindex 7a0a9c90ab61..ecdb772f9312 100644\n--- a/tools/pythonpkg/src/pyrelation.cpp\n+++ b/tools/pythonpkg/src/pyrelation.cpp\n@@ -852,7 +852,7 @@ unique_ptr<DuckDBPyRelation> DuckDBPyRelation::Map(py::function fun, Optional<py\n \tauto relation = make_uniq<DuckDBPyRelation>(rel->TableFunction(\"python_map_function\", params));\n \tauto rel_dependency = make_uniq<PythonDependencies>();\n \trel_dependency->map_function = std::move(fun);\n-\trel_dependency->py_object_list.push_back(std::move(make_uniq<RegisteredObject>(std::move(schema))));\n+\trel_dependency->py_object_list.push_back(make_uniq<RegisteredObject>(std::move(schema)));\n \trelation->rel->extra_dependencies = std::move(rel_dependency);\n \treturn relation;\n }\ndiff --git a/tools/pythonpkg/src/typing/pytype.cpp b/tools/pythonpkg/src/typing/pytype.cpp\nindex 19a16f263160..3cbd85faac6c 100644\n--- a/tools/pythonpkg/src/typing/pytype.cpp\n+++ b/tools/pythonpkg/src/typing/pytype.cpp\n@@ -289,7 +289,6 @@ void DuckDBPyType::Initialize(py::handle &m) {\n \tconnection_module.def(\"__getattr__\", &DuckDBPyType::GetAttribute, \"Get the child type by 'name'\", py::arg(\"name\"));\n \tconnection_module.def(\"__getitem__\", &DuckDBPyType::GetAttribute, \"Get the child type by 'name'\", py::arg(\"name\"));\n \n-\tauto &import_cache = *DuckDBPyConnection::ImportCache();\n \tpy::implicitly_convertible<py::object, DuckDBPyType>();\n \tpy::implicitly_convertible<py::str, DuckDBPyType>();\n \tpy::implicitly_convertible<PyGenericAlias, DuckDBPyType>();\ndiff --git a/tools/rpkg/NAMESPACE b/tools/rpkg/NAMESPACE\nindex 86d454c6e852..8c5501a23980 100644\n--- a/tools/rpkg/NAMESPACE\n+++ b/tools/rpkg/NAMESPACE\n@@ -6,7 +6,6 @@ S3method(names,duckdb_relation)\n S3method(print,duckdb_explain)\n S3method(print,duckdb_expr)\n S3method(print,duckdb_relation)\n-export(default_connection)\n export(duckdb)\n export(duckdb_fetch_arrow)\n export(duckdb_fetch_record_batch)\n@@ -23,7 +22,6 @@ export(duckdb_unregister)\n export(duckdb_unregister_arrow)\n export(read_csv_duckdb)\n export(simulate_duckdb)\n-export(sql)\n export(translate_duckdb)\n exportClasses(duckdb_connection)\n exportClasses(duckdb_driver)\ndiff --git a/tools/rpkg/R/sql.R b/tools/rpkg/R/sql.R\nindex 43c96b6b0d77..d15a876f6974 100644\n--- a/tools/rpkg/R/sql.R\n+++ b/tools/rpkg/R/sql.R\n@@ -5,7 +5,7 @@\n #' @param sql A SQL string\n #' @param conn An optional connection, defaults to built-in default\n #' @return A data frame with the query result\n-#' @export\n+#' @noRd\n #' @examples\n #' print(duckdb::sql(\"SELECT 42\"))\n \n@@ -21,7 +21,7 @@ default_duckdb_connection <- new.env(parent=emptyenv())\n #' `default_connection()` returns a default, built-in connection\n #'\n #' @return A DuckDB connection object\n-#' @export\n+#' @noRd\n #' @examples\n #' conn <- default_connection()\n #' print(duckdb::sql(\"SELECT 42\", conn=conn))\ndiff --git a/tools/rpkg/man/default_connection.Rd b/tools/rpkg/man/default_connection.Rd\ndeleted file mode 100644\nindex 1944eae2309d..000000000000\n--- a/tools/rpkg/man/default_connection.Rd\n+++ /dev/null\n@@ -1,18 +0,0 @@\n-% Generated by roxygen2: do not edit by hand\n-% Please edit documentation in R/sql.R\n-\\name{default_connection}\n-\\alias{default_connection}\n-\\title{Get the default connection}\n-\\usage{\n-default_connection()\n-}\n-\\value{\n-A DuckDB connection object\n-}\n-\\description{\n-\\code{default_connection()} returns a default, built-in connection\n-}\n-\\examples{\n-conn <- default_connection()\n-print(duckdb::sql(\"SELECT 42\", conn=conn))\n-}\ndiff --git a/tools/rpkg/man/sql.Rd b/tools/rpkg/man/sql.Rd\ndeleted file mode 100644\nindex 4575cbc683e0..000000000000\n--- a/tools/rpkg/man/sql.Rd\n+++ /dev/null\n@@ -1,22 +0,0 @@\n-% Generated by roxygen2: do not edit by hand\n-% Please edit documentation in R/sql.R\n-\\name{sql}\n-\\alias{sql}\n-\\title{Run a SQL query}\n-\\usage{\n-sql(sql, conn = default_connection())\n-}\n-\\arguments{\n-\\item{sql}{A SQL string}\n-\n-\\item{conn}{An optional connection, defaults to built-in default}\n-}\n-\\value{\n-A data frame with the query result\n-}\n-\\description{\n-\\code{sql()} runs an arbitrary SQL query and returns a data.frame the query results\n-}\n-\\examples{\n-print(duckdb::sql(\"SELECT 42\"))\n-}\ndiff --git a/tools/rpkg/rconfigure.py b/tools/rpkg/rconfigure.py\nindex d123f96cf65f..8e6c39fa43c7 100644\n--- a/tools/rpkg/rconfigure.py\n+++ b/tools/rpkg/rconfigure.py\n@@ -123,6 +123,7 @@ def open_utf8(fpath, flags):\n with open_utf8(os.path.join('src', 'Makevars.in'), 'r') as f:\n     text = f.read()\n \n+include_list += \" -DDUCKDB_OVERRIDE_PLATFORM_POSTFIX=_rtools\"\n text = text.replace('{{ SOURCES }}', object_list)\n text = text.replace('{{ INCLUDES }}', include_list)\n text = text.replace('{{ LINK_FLAGS }}', \"-lws2_32\")\ndiff --git a/tools/rpkg/src/include/typesr.hpp b/tools/rpkg/src/include/typesr.hpp\nindex 3bc6aab47802..8adaafcb160b 100644\n--- a/tools/rpkg/src/include/typesr.hpp\n+++ b/tools/rpkg/src/include/typesr.hpp\n@@ -3,8 +3,8 @@\n namespace duckdb {\n \n struct DuckDBAltrepStringWrapper {\n-\tduckdb::unique_ptr<string_t[]> string_data;\n-\tduckdb::unique_ptr<bool[]> mask_data;\n+\tduckdb::unsafe_unique_array<string_t> string_data;\n+\tduckdb::unsafe_unique_array<bool> mask_data;\n \tStringHeap heap;\n \tidx_t length;\n };\n@@ -13,7 +13,7 @@ struct DuckDBAltrepListEntryWrapper {\n \tDuckDBAltrepListEntryWrapper(idx_t max_length);\n \tvoid Reset(idx_t offset_p, idx_t length_p);\n \tidx_t length;\n-\tduckdb::unique_ptr<data_t[]> data;\n+\tduckdb::unsafe_unique_array<data_t> data;\n };\n \n enum class RType {\ndiff --git a/tools/shell/shell.c b/tools/shell/shell.c\nindex 97d367306f01..0ff542a1ed48 100644\n--- a/tools/shell/shell.c\n+++ b/tools/shell/shell.c\n@@ -1478,413 +1478,413 @@ struct SHA3Context {\n /*\n ** A single step of the Keccak mixing function for a 1600-bit state\n */\n-static void KeccakF1600Step(SHA3Context *p){\n-  int i;\n-  u64 b0, b1, b2, b3, b4;\n-  u64 c0, c1, c2, c3, c4;\n-  u64 d0, d1, d2, d3, d4;\n-  static const u64 RC[] = {\n-    0x0000000000000001ULL,  0x0000000000008082ULL,\n-    0x800000000000808aULL,  0x8000000080008000ULL,\n-    0x000000000000808bULL,  0x0000000080000001ULL,\n-    0x8000000080008081ULL,  0x8000000000008009ULL,\n-    0x000000000000008aULL,  0x0000000000000088ULL,\n-    0x0000000080008009ULL,  0x000000008000000aULL,\n-    0x000000008000808bULL,  0x800000000000008bULL,\n-    0x8000000000008089ULL,  0x8000000000008003ULL,\n-    0x8000000000008002ULL,  0x8000000000000080ULL,\n-    0x000000000000800aULL,  0x800000008000000aULL,\n-    0x8000000080008081ULL,  0x8000000000008080ULL,\n-    0x0000000080000001ULL,  0x8000000080008008ULL\n-  };\n-# define a00 (p->u.s[0])\n-# define a01 (p->u.s[1])\n-# define a02 (p->u.s[2])\n-# define a03 (p->u.s[3])\n-# define a04 (p->u.s[4])\n-# define a10 (p->u.s[5])\n-# define a11 (p->u.s[6])\n-# define a12 (p->u.s[7])\n-# define a13 (p->u.s[8])\n-# define a14 (p->u.s[9])\n-# define a20 (p->u.s[10])\n-# define a21 (p->u.s[11])\n-# define a22 (p->u.s[12])\n-# define a23 (p->u.s[13])\n-# define a24 (p->u.s[14])\n-# define a30 (p->u.s[15])\n-# define a31 (p->u.s[16])\n-# define a32 (p->u.s[17])\n-# define a33 (p->u.s[18])\n-# define a34 (p->u.s[19])\n-# define a40 (p->u.s[20])\n-# define a41 (p->u.s[21])\n-# define a42 (p->u.s[22])\n-# define a43 (p->u.s[23])\n-# define a44 (p->u.s[24])\n-# define ROL64(a,x) ((a<<x)|(a>>(64-x)))\n-\n-  for(i=0; i<24; i+=4){\n-    c0 = a00^a10^a20^a30^a40;\n-    c1 = a01^a11^a21^a31^a41;\n-    c2 = a02^a12^a22^a32^a42;\n-    c3 = a03^a13^a23^a33^a43;\n-    c4 = a04^a14^a24^a34^a44;\n-    d0 = c4^ROL64(c1, 1);\n-    d1 = c0^ROL64(c2, 1);\n-    d2 = c1^ROL64(c3, 1);\n-    d3 = c2^ROL64(c4, 1);\n-    d4 = c3^ROL64(c0, 1);\n-\n-    b0 = (a00^d0);\n-    b1 = ROL64((a11^d1), 44);\n-    b2 = ROL64((a22^d2), 43);\n-    b3 = ROL64((a33^d3), 21);\n-    b4 = ROL64((a44^d4), 14);\n-    a00 =   b0 ^((~b1)&  b2 );\n-    a00 ^= RC[i];\n-    a11 =   b1 ^((~b2)&  b3 );\n-    a22 =   b2 ^((~b3)&  b4 );\n-    a33 =   b3 ^((~b4)&  b0 );\n-    a44 =   b4 ^((~b0)&  b1 );\n-\n-    b2 = ROL64((a20^d0), 3);\n-    b3 = ROL64((a31^d1), 45);\n-    b4 = ROL64((a42^d2), 61);\n-    b0 = ROL64((a03^d3), 28);\n-    b1 = ROL64((a14^d4), 20);\n-    a20 =   b0 ^((~b1)&  b2 );\n-    a31 =   b1 ^((~b2)&  b3 );\n-    a42 =   b2 ^((~b3)&  b4 );\n-    a03 =   b3 ^((~b4)&  b0 );\n-    a14 =   b4 ^((~b0)&  b1 );\n-\n-    b4 = ROL64((a40^d0), 18);\n-    b0 = ROL64((a01^d1), 1);\n-    b1 = ROL64((a12^d2), 6);\n-    b2 = ROL64((a23^d3), 25);\n-    b3 = ROL64((a34^d4), 8);\n-    a40 =   b0 ^((~b1)&  b2 );\n-    a01 =   b1 ^((~b2)&  b3 );\n-    a12 =   b2 ^((~b3)&  b4 );\n-    a23 =   b3 ^((~b4)&  b0 );\n-    a34 =   b4 ^((~b0)&  b1 );\n-\n-    b1 = ROL64((a10^d0), 36);\n-    b2 = ROL64((a21^d1), 10);\n-    b3 = ROL64((a32^d2), 15);\n-    b4 = ROL64((a43^d3), 56);\n-    b0 = ROL64((a04^d4), 27);\n-    a10 =   b0 ^((~b1)&  b2 );\n-    a21 =   b1 ^((~b2)&  b3 );\n-    a32 =   b2 ^((~b3)&  b4 );\n-    a43 =   b3 ^((~b4)&  b0 );\n-    a04 =   b4 ^((~b0)&  b1 );\n-\n-    b3 = ROL64((a30^d0), 41);\n-    b4 = ROL64((a41^d1), 2);\n-    b0 = ROL64((a02^d2), 62);\n-    b1 = ROL64((a13^d3), 55);\n-    b2 = ROL64((a24^d4), 39);\n-    a30 =   b0 ^((~b1)&  b2 );\n-    a41 =   b1 ^((~b2)&  b3 );\n-    a02 =   b2 ^((~b3)&  b4 );\n-    a13 =   b3 ^((~b4)&  b0 );\n-    a24 =   b4 ^((~b0)&  b1 );\n-\n-    c0 = a00^a20^a40^a10^a30;\n-    c1 = a11^a31^a01^a21^a41;\n-    c2 = a22^a42^a12^a32^a02;\n-    c3 = a33^a03^a23^a43^a13;\n-    c4 = a44^a14^a34^a04^a24;\n-    d0 = c4^ROL64(c1, 1);\n-    d1 = c0^ROL64(c2, 1);\n-    d2 = c1^ROL64(c3, 1);\n-    d3 = c2^ROL64(c4, 1);\n-    d4 = c3^ROL64(c0, 1);\n-\n-    b0 = (a00^d0);\n-    b1 = ROL64((a31^d1), 44);\n-    b2 = ROL64((a12^d2), 43);\n-    b3 = ROL64((a43^d3), 21);\n-    b4 = ROL64((a24^d4), 14);\n-    a00 =   b0 ^((~b1)&  b2 );\n-    a00 ^= RC[i+1];\n-    a31 =   b1 ^((~b2)&  b3 );\n-    a12 =   b2 ^((~b3)&  b4 );\n-    a43 =   b3 ^((~b4)&  b0 );\n-    a24 =   b4 ^((~b0)&  b1 );\n-\n-    b2 = ROL64((a40^d0), 3);\n-    b3 = ROL64((a21^d1), 45);\n-    b4 = ROL64((a02^d2), 61);\n-    b0 = ROL64((a33^d3), 28);\n-    b1 = ROL64((a14^d4), 20);\n-    a40 =   b0 ^((~b1)&  b2 );\n-    a21 =   b1 ^((~b2)&  b3 );\n-    a02 =   b2 ^((~b3)&  b4 );\n-    a33 =   b3 ^((~b4)&  b0 );\n-    a14 =   b4 ^((~b0)&  b1 );\n-\n-    b4 = ROL64((a30^d0), 18);\n-    b0 = ROL64((a11^d1), 1);\n-    b1 = ROL64((a42^d2), 6);\n-    b2 = ROL64((a23^d3), 25);\n-    b3 = ROL64((a04^d4), 8);\n-    a30 =   b0 ^((~b1)&  b2 );\n-    a11 =   b1 ^((~b2)&  b3 );\n-    a42 =   b2 ^((~b3)&  b4 );\n-    a23 =   b3 ^((~b4)&  b0 );\n-    a04 =   b4 ^((~b0)&  b1 );\n-\n-    b1 = ROL64((a20^d0), 36);\n-    b2 = ROL64((a01^d1), 10);\n-    b3 = ROL64((a32^d2), 15);\n-    b4 = ROL64((a13^d3), 56);\n-    b0 = ROL64((a44^d4), 27);\n-    a20 =   b0 ^((~b1)&  b2 );\n-    a01 =   b1 ^((~b2)&  b3 );\n-    a32 =   b2 ^((~b3)&  b4 );\n-    a13 =   b3 ^((~b4)&  b0 );\n-    a44 =   b4 ^((~b0)&  b1 );\n-\n-    b3 = ROL64((a10^d0), 41);\n-    b4 = ROL64((a41^d1), 2);\n-    b0 = ROL64((a22^d2), 62);\n-    b1 = ROL64((a03^d3), 55);\n-    b2 = ROL64((a34^d4), 39);\n-    a10 =   b0 ^((~b1)&  b2 );\n-    a41 =   b1 ^((~b2)&  b3 );\n-    a22 =   b2 ^((~b3)&  b4 );\n-    a03 =   b3 ^((~b4)&  b0 );\n-    a34 =   b4 ^((~b0)&  b1 );\n-\n-    c0 = a00^a40^a30^a20^a10;\n-    c1 = a31^a21^a11^a01^a41;\n-    c2 = a12^a02^a42^a32^a22;\n-    c3 = a43^a33^a23^a13^a03;\n-    c4 = a24^a14^a04^a44^a34;\n-    d0 = c4^ROL64(c1, 1);\n-    d1 = c0^ROL64(c2, 1);\n-    d2 = c1^ROL64(c3, 1);\n-    d3 = c2^ROL64(c4, 1);\n-    d4 = c3^ROL64(c0, 1);\n-\n-    b0 = (a00^d0);\n-    b1 = ROL64((a21^d1), 44);\n-    b2 = ROL64((a42^d2), 43);\n-    b3 = ROL64((a13^d3), 21);\n-    b4 = ROL64((a34^d4), 14);\n-    a00 =   b0 ^((~b1)&  b2 );\n-    a00 ^= RC[i+2];\n-    a21 =   b1 ^((~b2)&  b3 );\n-    a42 =   b2 ^((~b3)&  b4 );\n-    a13 =   b3 ^((~b4)&  b0 );\n-    a34 =   b4 ^((~b0)&  b1 );\n-\n-    b2 = ROL64((a30^d0), 3);\n-    b3 = ROL64((a01^d1), 45);\n-    b4 = ROL64((a22^d2), 61);\n-    b0 = ROL64((a43^d3), 28);\n-    b1 = ROL64((a14^d4), 20);\n-    a30 =   b0 ^((~b1)&  b2 );\n-    a01 =   b1 ^((~b2)&  b3 );\n-    a22 =   b2 ^((~b3)&  b4 );\n-    a43 =   b3 ^((~b4)&  b0 );\n-    a14 =   b4 ^((~b0)&  b1 );\n-\n-    b4 = ROL64((a10^d0), 18);\n-    b0 = ROL64((a31^d1), 1);\n-    b1 = ROL64((a02^d2), 6);\n-    b2 = ROL64((a23^d3), 25);\n-    b3 = ROL64((a44^d4), 8);\n-    a10 =   b0 ^((~b1)&  b2 );\n-    a31 =   b1 ^((~b2)&  b3 );\n-    a02 =   b2 ^((~b3)&  b4 );\n-    a23 =   b3 ^((~b4)&  b0 );\n-    a44 =   b4 ^((~b0)&  b1 );\n-\n-    b1 = ROL64((a40^d0), 36);\n-    b2 = ROL64((a11^d1), 10);\n-    b3 = ROL64((a32^d2), 15);\n-    b4 = ROL64((a03^d3), 56);\n-    b0 = ROL64((a24^d4), 27);\n-    a40 =   b0 ^((~b1)&  b2 );\n-    a11 =   b1 ^((~b2)&  b3 );\n-    a32 =   b2 ^((~b3)&  b4 );\n-    a03 =   b3 ^((~b4)&  b0 );\n-    a24 =   b4 ^((~b0)&  b1 );\n-\n-    b3 = ROL64((a20^d0), 41);\n-    b4 = ROL64((a41^d1), 2);\n-    b0 = ROL64((a12^d2), 62);\n-    b1 = ROL64((a33^d3), 55);\n-    b2 = ROL64((a04^d4), 39);\n-    a20 =   b0 ^((~b1)&  b2 );\n-    a41 =   b1 ^((~b2)&  b3 );\n-    a12 =   b2 ^((~b3)&  b4 );\n-    a33 =   b3 ^((~b4)&  b0 );\n-    a04 =   b4 ^((~b0)&  b1 );\n-\n-    c0 = a00^a30^a10^a40^a20;\n-    c1 = a21^a01^a31^a11^a41;\n-    c2 = a42^a22^a02^a32^a12;\n-    c3 = a13^a43^a23^a03^a33;\n-    c4 = a34^a14^a44^a24^a04;\n-    d0 = c4^ROL64(c1, 1);\n-    d1 = c0^ROL64(c2, 1);\n-    d2 = c1^ROL64(c3, 1);\n-    d3 = c2^ROL64(c4, 1);\n-    d4 = c3^ROL64(c0, 1);\n-\n-    b0 = (a00^d0);\n-    b1 = ROL64((a01^d1), 44);\n-    b2 = ROL64((a02^d2), 43);\n-    b3 = ROL64((a03^d3), 21);\n-    b4 = ROL64((a04^d4), 14);\n-    a00 =   b0 ^((~b1)&  b2 );\n-    a00 ^= RC[i+3];\n-    a01 =   b1 ^((~b2)&  b3 );\n-    a02 =   b2 ^((~b3)&  b4 );\n-    a03 =   b3 ^((~b4)&  b0 );\n-    a04 =   b4 ^((~b0)&  b1 );\n-\n-    b2 = ROL64((a10^d0), 3);\n-    b3 = ROL64((a11^d1), 45);\n-    b4 = ROL64((a12^d2), 61);\n-    b0 = ROL64((a13^d3), 28);\n-    b1 = ROL64((a14^d4), 20);\n-    a10 =   b0 ^((~b1)&  b2 );\n-    a11 =   b1 ^((~b2)&  b3 );\n-    a12 =   b2 ^((~b3)&  b4 );\n-    a13 =   b3 ^((~b4)&  b0 );\n-    a14 =   b4 ^((~b0)&  b1 );\n-\n-    b4 = ROL64((a20^d0), 18);\n-    b0 = ROL64((a21^d1), 1);\n-    b1 = ROL64((a22^d2), 6);\n-    b2 = ROL64((a23^d3), 25);\n-    b3 = ROL64((a24^d4), 8);\n-    a20 =   b0 ^((~b1)&  b2 );\n-    a21 =   b1 ^((~b2)&  b3 );\n-    a22 =   b2 ^((~b3)&  b4 );\n-    a23 =   b3 ^((~b4)&  b0 );\n-    a24 =   b4 ^((~b0)&  b1 );\n-\n-    b1 = ROL64((a30^d0), 36);\n-    b2 = ROL64((a31^d1), 10);\n-    b3 = ROL64((a32^d2), 15);\n-    b4 = ROL64((a33^d3), 56);\n-    b0 = ROL64((a34^d4), 27);\n-    a30 =   b0 ^((~b1)&  b2 );\n-    a31 =   b1 ^((~b2)&  b3 );\n-    a32 =   b2 ^((~b3)&  b4 );\n-    a33 =   b3 ^((~b4)&  b0 );\n-    a34 =   b4 ^((~b0)&  b1 );\n-\n-    b3 = ROL64((a40^d0), 41);\n-    b4 = ROL64((a41^d1), 2);\n-    b0 = ROL64((a42^d2), 62);\n-    b1 = ROL64((a43^d3), 55);\n-    b2 = ROL64((a44^d4), 39);\n-    a40 =   b0 ^((~b1)&  b2 );\n-    a41 =   b1 ^((~b2)&  b3 );\n-    a42 =   b2 ^((~b3)&  b4 );\n-    a43 =   b3 ^((~b4)&  b0 );\n-    a44 =   b4 ^((~b0)&  b1 );\n-  }\n-}\n+//static void KeccakF1600Step(SHA3Context *p){\n+//  int i;\n+//  u64 b0, b1, b2, b3, b4;\n+//  u64 c0, c1, c2, c3, c4;\n+//  u64 d0, d1, d2, d3, d4;\n+//  static const u64 RC[] = {\n+//    0x0000000000000001ULL,  0x0000000000008082ULL,\n+//    0x800000000000808aULL,  0x8000000080008000ULL,\n+//    0x000000000000808bULL,  0x0000000080000001ULL,\n+//    0x8000000080008081ULL,  0x8000000000008009ULL,\n+//    0x000000000000008aULL,  0x0000000000000088ULL,\n+//    0x0000000080008009ULL,  0x000000008000000aULL,\n+//    0x000000008000808bULL,  0x800000000000008bULL,\n+//    0x8000000000008089ULL,  0x8000000000008003ULL,\n+//    0x8000000000008002ULL,  0x8000000000000080ULL,\n+//    0x000000000000800aULL,  0x800000008000000aULL,\n+//    0x8000000080008081ULL,  0x8000000000008080ULL,\n+//    0x0000000080000001ULL,  0x8000000080008008ULL\n+//  };\n+//# define a00 (p->u.s[0])\n+//# define a01 (p->u.s[1])\n+//# define a02 (p->u.s[2])\n+//# define a03 (p->u.s[3])\n+//# define a04 (p->u.s[4])\n+//# define a10 (p->u.s[5])\n+//# define a11 (p->u.s[6])\n+//# define a12 (p->u.s[7])\n+//# define a13 (p->u.s[8])\n+//# define a14 (p->u.s[9])\n+//# define a20 (p->u.s[10])\n+//# define a21 (p->u.s[11])\n+//# define a22 (p->u.s[12])\n+//# define a23 (p->u.s[13])\n+//# define a24 (p->u.s[14])\n+//# define a30 (p->u.s[15])\n+//# define a31 (p->u.s[16])\n+//# define a32 (p->u.s[17])\n+//# define a33 (p->u.s[18])\n+//# define a34 (p->u.s[19])\n+//# define a40 (p->u.s[20])\n+//# define a41 (p->u.s[21])\n+//# define a42 (p->u.s[22])\n+//# define a43 (p->u.s[23])\n+//# define a44 (p->u.s[24])\n+//# define ROL64(a,x) ((a<<x)|(a>>(64-x)))\n+//\n+//  for(i=0; i<24; i+=4){\n+//    c0 = a00^a10^a20^a30^a40;\n+//    c1 = a01^a11^a21^a31^a41;\n+//    c2 = a02^a12^a22^a32^a42;\n+//    c3 = a03^a13^a23^a33^a43;\n+//    c4 = a04^a14^a24^a34^a44;\n+//    d0 = c4^ROL64(c1, 1);\n+//    d1 = c0^ROL64(c2, 1);\n+//    d2 = c1^ROL64(c3, 1);\n+//    d3 = c2^ROL64(c4, 1);\n+//    d4 = c3^ROL64(c0, 1);\n+//\n+//    b0 = (a00^d0);\n+//    b1 = ROL64((a11^d1), 44);\n+//    b2 = ROL64((a22^d2), 43);\n+//    b3 = ROL64((a33^d3), 21);\n+//    b4 = ROL64((a44^d4), 14);\n+//    a00 =   b0 ^((~b1)&  b2 );\n+//    a00 ^= RC[i];\n+//    a11 =   b1 ^((~b2)&  b3 );\n+//    a22 =   b2 ^((~b3)&  b4 );\n+//    a33 =   b3 ^((~b4)&  b0 );\n+//    a44 =   b4 ^((~b0)&  b1 );\n+//\n+//    b2 = ROL64((a20^d0), 3);\n+//    b3 = ROL64((a31^d1), 45);\n+//    b4 = ROL64((a42^d2), 61);\n+//    b0 = ROL64((a03^d3), 28);\n+//    b1 = ROL64((a14^d4), 20);\n+//    a20 =   b0 ^((~b1)&  b2 );\n+//    a31 =   b1 ^((~b2)&  b3 );\n+//    a42 =   b2 ^((~b3)&  b4 );\n+//    a03 =   b3 ^((~b4)&  b0 );\n+//    a14 =   b4 ^((~b0)&  b1 );\n+//\n+//    b4 = ROL64((a40^d0), 18);\n+//    b0 = ROL64((a01^d1), 1);\n+//    b1 = ROL64((a12^d2), 6);\n+//    b2 = ROL64((a23^d3), 25);\n+//    b3 = ROL64((a34^d4), 8);\n+//    a40 =   b0 ^((~b1)&  b2 );\n+//    a01 =   b1 ^((~b2)&  b3 );\n+//    a12 =   b2 ^((~b3)&  b4 );\n+//    a23 =   b3 ^((~b4)&  b0 );\n+//    a34 =   b4 ^((~b0)&  b1 );\n+//\n+//    b1 = ROL64((a10^d0), 36);\n+//    b2 = ROL64((a21^d1), 10);\n+//    b3 = ROL64((a32^d2), 15);\n+//    b4 = ROL64((a43^d3), 56);\n+//    b0 = ROL64((a04^d4), 27);\n+//    a10 =   b0 ^((~b1)&  b2 );\n+//    a21 =   b1 ^((~b2)&  b3 );\n+//    a32 =   b2 ^((~b3)&  b4 );\n+//    a43 =   b3 ^((~b4)&  b0 );\n+//    a04 =   b4 ^((~b0)&  b1 );\n+//\n+//    b3 = ROL64((a30^d0), 41);\n+//    b4 = ROL64((a41^d1), 2);\n+//    b0 = ROL64((a02^d2), 62);\n+//    b1 = ROL64((a13^d3), 55);\n+//    b2 = ROL64((a24^d4), 39);\n+//    a30 =   b0 ^((~b1)&  b2 );\n+//    a41 =   b1 ^((~b2)&  b3 );\n+//    a02 =   b2 ^((~b3)&  b4 );\n+//    a13 =   b3 ^((~b4)&  b0 );\n+//    a24 =   b4 ^((~b0)&  b1 );\n+//\n+//    c0 = a00^a20^a40^a10^a30;\n+//    c1 = a11^a31^a01^a21^a41;\n+//    c2 = a22^a42^a12^a32^a02;\n+//    c3 = a33^a03^a23^a43^a13;\n+//    c4 = a44^a14^a34^a04^a24;\n+//    d0 = c4^ROL64(c1, 1);\n+//    d1 = c0^ROL64(c2, 1);\n+//    d2 = c1^ROL64(c3, 1);\n+//    d3 = c2^ROL64(c4, 1);\n+//    d4 = c3^ROL64(c0, 1);\n+//\n+//    b0 = (a00^d0);\n+//    b1 = ROL64((a31^d1), 44);\n+//    b2 = ROL64((a12^d2), 43);\n+//    b3 = ROL64((a43^d3), 21);\n+//    b4 = ROL64((a24^d4), 14);\n+//    a00 =   b0 ^((~b1)&  b2 );\n+//    a00 ^= RC[i+1];\n+//    a31 =   b1 ^((~b2)&  b3 );\n+//    a12 =   b2 ^((~b3)&  b4 );\n+//    a43 =   b3 ^((~b4)&  b0 );\n+//    a24 =   b4 ^((~b0)&  b1 );\n+//\n+//    b2 = ROL64((a40^d0), 3);\n+//    b3 = ROL64((a21^d1), 45);\n+//    b4 = ROL64((a02^d2), 61);\n+//    b0 = ROL64((a33^d3), 28);\n+//    b1 = ROL64((a14^d4), 20);\n+//    a40 =   b0 ^((~b1)&  b2 );\n+//    a21 =   b1 ^((~b2)&  b3 );\n+//    a02 =   b2 ^((~b3)&  b4 );\n+//    a33 =   b3 ^((~b4)&  b0 );\n+//    a14 =   b4 ^((~b0)&  b1 );\n+//\n+//    b4 = ROL64((a30^d0), 18);\n+//    b0 = ROL64((a11^d1), 1);\n+//    b1 = ROL64((a42^d2), 6);\n+//    b2 = ROL64((a23^d3), 25);\n+//    b3 = ROL64((a04^d4), 8);\n+//    a30 =   b0 ^((~b1)&  b2 );\n+//    a11 =   b1 ^((~b2)&  b3 );\n+//    a42 =   b2 ^((~b3)&  b4 );\n+//    a23 =   b3 ^((~b4)&  b0 );\n+//    a04 =   b4 ^((~b0)&  b1 );\n+//\n+//    b1 = ROL64((a20^d0), 36);\n+//    b2 = ROL64((a01^d1), 10);\n+//    b3 = ROL64((a32^d2), 15);\n+//    b4 = ROL64((a13^d3), 56);\n+//    b0 = ROL64((a44^d4), 27);\n+//    a20 =   b0 ^((~b1)&  b2 );\n+//    a01 =   b1 ^((~b2)&  b3 );\n+//    a32 =   b2 ^((~b3)&  b4 );\n+//    a13 =   b3 ^((~b4)&  b0 );\n+//    a44 =   b4 ^((~b0)&  b1 );\n+//\n+//    b3 = ROL64((a10^d0), 41);\n+//    b4 = ROL64((a41^d1), 2);\n+//    b0 = ROL64((a22^d2), 62);\n+//    b1 = ROL64((a03^d3), 55);\n+//    b2 = ROL64((a34^d4), 39);\n+//    a10 =   b0 ^((~b1)&  b2 );\n+//    a41 =   b1 ^((~b2)&  b3 );\n+//    a22 =   b2 ^((~b3)&  b4 );\n+//    a03 =   b3 ^((~b4)&  b0 );\n+//    a34 =   b4 ^((~b0)&  b1 );\n+//\n+//    c0 = a00^a40^a30^a20^a10;\n+//    c1 = a31^a21^a11^a01^a41;\n+//    c2 = a12^a02^a42^a32^a22;\n+//    c3 = a43^a33^a23^a13^a03;\n+//    c4 = a24^a14^a04^a44^a34;\n+//    d0 = c4^ROL64(c1, 1);\n+//    d1 = c0^ROL64(c2, 1);\n+//    d2 = c1^ROL64(c3, 1);\n+//    d3 = c2^ROL64(c4, 1);\n+//    d4 = c3^ROL64(c0, 1);\n+//\n+//    b0 = (a00^d0);\n+//    b1 = ROL64((a21^d1), 44);\n+//    b2 = ROL64((a42^d2), 43);\n+//    b3 = ROL64((a13^d3), 21);\n+//    b4 = ROL64((a34^d4), 14);\n+//    a00 =   b0 ^((~b1)&  b2 );\n+//    a00 ^= RC[i+2];\n+//    a21 =   b1 ^((~b2)&  b3 );\n+//    a42 =   b2 ^((~b3)&  b4 );\n+//    a13 =   b3 ^((~b4)&  b0 );\n+//    a34 =   b4 ^((~b0)&  b1 );\n+//\n+//    b2 = ROL64((a30^d0), 3);\n+//    b3 = ROL64((a01^d1), 45);\n+//    b4 = ROL64((a22^d2), 61);\n+//    b0 = ROL64((a43^d3), 28);\n+//    b1 = ROL64((a14^d4), 20);\n+//    a30 =   b0 ^((~b1)&  b2 );\n+//    a01 =   b1 ^((~b2)&  b3 );\n+//    a22 =   b2 ^((~b3)&  b4 );\n+//    a43 =   b3 ^((~b4)&  b0 );\n+//    a14 =   b4 ^((~b0)&  b1 );\n+//\n+//    b4 = ROL64((a10^d0), 18);\n+//    b0 = ROL64((a31^d1), 1);\n+//    b1 = ROL64((a02^d2), 6);\n+//    b2 = ROL64((a23^d3), 25);\n+//    b3 = ROL64((a44^d4), 8);\n+//    a10 =   b0 ^((~b1)&  b2 );\n+//    a31 =   b1 ^((~b2)&  b3 );\n+//    a02 =   b2 ^((~b3)&  b4 );\n+//    a23 =   b3 ^((~b4)&  b0 );\n+//    a44 =   b4 ^((~b0)&  b1 );\n+//\n+//    b1 = ROL64((a40^d0), 36);\n+//    b2 = ROL64((a11^d1), 10);\n+//    b3 = ROL64((a32^d2), 15);\n+//    b4 = ROL64((a03^d3), 56);\n+//    b0 = ROL64((a24^d4), 27);\n+//    a40 =   b0 ^((~b1)&  b2 );\n+//    a11 =   b1 ^((~b2)&  b3 );\n+//    a32 =   b2 ^((~b3)&  b4 );\n+//    a03 =   b3 ^((~b4)&  b0 );\n+//    a24 =   b4 ^((~b0)&  b1 );\n+//\n+//    b3 = ROL64((a20^d0), 41);\n+//    b4 = ROL64((a41^d1), 2);\n+//    b0 = ROL64((a12^d2), 62);\n+//    b1 = ROL64((a33^d3), 55);\n+//    b2 = ROL64((a04^d4), 39);\n+//    a20 =   b0 ^((~b1)&  b2 );\n+//    a41 =   b1 ^((~b2)&  b3 );\n+//    a12 =   b2 ^((~b3)&  b4 );\n+//    a33 =   b3 ^((~b4)&  b0 );\n+//    a04 =   b4 ^((~b0)&  b1 );\n+//\n+//    c0 = a00^a30^a10^a40^a20;\n+//    c1 = a21^a01^a31^a11^a41;\n+//    c2 = a42^a22^a02^a32^a12;\n+//    c3 = a13^a43^a23^a03^a33;\n+//    c4 = a34^a14^a44^a24^a04;\n+//    d0 = c4^ROL64(c1, 1);\n+//    d1 = c0^ROL64(c2, 1);\n+//    d2 = c1^ROL64(c3, 1);\n+//    d3 = c2^ROL64(c4, 1);\n+//    d4 = c3^ROL64(c0, 1);\n+//\n+//    b0 = (a00^d0);\n+//    b1 = ROL64((a01^d1), 44);\n+//    b2 = ROL64((a02^d2), 43);\n+//    b3 = ROL64((a03^d3), 21);\n+//    b4 = ROL64((a04^d4), 14);\n+//    a00 =   b0 ^((~b1)&  b2 );\n+//    a00 ^= RC[i+3];\n+//    a01 =   b1 ^((~b2)&  b3 );\n+//    a02 =   b2 ^((~b3)&  b4 );\n+//    a03 =   b3 ^((~b4)&  b0 );\n+//    a04 =   b4 ^((~b0)&  b1 );\n+//\n+//    b2 = ROL64((a10^d0), 3);\n+//    b3 = ROL64((a11^d1), 45);\n+//    b4 = ROL64((a12^d2), 61);\n+//    b0 = ROL64((a13^d3), 28);\n+//    b1 = ROL64((a14^d4), 20);\n+//    a10 =   b0 ^((~b1)&  b2 );\n+//    a11 =   b1 ^((~b2)&  b3 );\n+//    a12 =   b2 ^((~b3)&  b4 );\n+//    a13 =   b3 ^((~b4)&  b0 );\n+//    a14 =   b4 ^((~b0)&  b1 );\n+//\n+//    b4 = ROL64((a20^d0), 18);\n+//    b0 = ROL64((a21^d1), 1);\n+//    b1 = ROL64((a22^d2), 6);\n+//    b2 = ROL64((a23^d3), 25);\n+//    b3 = ROL64((a24^d4), 8);\n+//    a20 =   b0 ^((~b1)&  b2 );\n+//    a21 =   b1 ^((~b2)&  b3 );\n+//    a22 =   b2 ^((~b3)&  b4 );\n+//    a23 =   b3 ^((~b4)&  b0 );\n+//    a24 =   b4 ^((~b0)&  b1 );\n+//\n+//    b1 = ROL64((a30^d0), 36);\n+//    b2 = ROL64((a31^d1), 10);\n+//    b3 = ROL64((a32^d2), 15);\n+//    b4 = ROL64((a33^d3), 56);\n+//    b0 = ROL64((a34^d4), 27);\n+//    a30 =   b0 ^((~b1)&  b2 );\n+//    a31 =   b1 ^((~b2)&  b3 );\n+//    a32 =   b2 ^((~b3)&  b4 );\n+//    a33 =   b3 ^((~b4)&  b0 );\n+//    a34 =   b4 ^((~b0)&  b1 );\n+//\n+//    b3 = ROL64((a40^d0), 41);\n+//    b4 = ROL64((a41^d1), 2);\n+//    b0 = ROL64((a42^d2), 62);\n+//    b1 = ROL64((a43^d3), 55);\n+//    b2 = ROL64((a44^d4), 39);\n+//    a40 =   b0 ^((~b1)&  b2 );\n+//    a41 =   b1 ^((~b2)&  b3 );\n+//    a42 =   b2 ^((~b3)&  b4 );\n+//    a43 =   b3 ^((~b4)&  b0 );\n+//    a44 =   b4 ^((~b0)&  b1 );\n+//  }\n+//}\n \n /*\n ** Initialize a new hash.  iSize determines the size of the hash\n ** in bits and should be one of 224, 256, 384, or 512.  Or iSize\n ** can be zero to use the default hash size of 256 bits.\n */\n-static void SHA3Init(SHA3Context *p, int iSize){\n-  memset(p, 0, sizeof(*p));\n-  if( iSize>=128 && iSize<=512 ){\n-    p->nRate = (1600 - ((iSize + 31)&~31)*2)/8;\n-  }else{\n-    p->nRate = (1600 - 2*256)/8;\n-  }\n-#if SHA3_BYTEORDER==1234\n-  /* Known to be little-endian at compile-time. No-op */\n-#elif SHA3_BYTEORDER==4321\n-  p->ixMask = 7;  /* Big-endian */\n-#else\n-  {\n-    static unsigned int one = 1;\n-    if( 1==*(unsigned char*)&one ){\n-      /* Little endian.  No byte swapping. */\n-      p->ixMask = 0;\n-    }else{\n-      /* Big endian.  Byte swap. */\n-      p->ixMask = 7;\n-    }\n-  }\n-#endif\n-}\n+//static void SHA3Init(SHA3Context *p, int iSize){\n+//  memset(p, 0, sizeof(*p));\n+//  if( iSize>=128 && iSize<=512 ){\n+//    p->nRate = (1600 - ((iSize + 31)&~31)*2)/8;\n+//  }else{\n+//    p->nRate = (1600 - 2*256)/8;\n+//  }\n+//#if SHA3_BYTEORDER==1234\n+//  /* Known to be little-endian at compile-time. No-op */\n+//#elif SHA3_BYTEORDER==4321\n+//  p->ixMask = 7;  /* Big-endian */\n+//#else\n+//  {\n+//    static unsigned int one = 1;\n+//    if( 1==*(unsigned char*)&one ){\n+//      /* Little endian.  No byte swapping. */\n+//      p->ixMask = 0;\n+//    }else{\n+//      /* Big endian.  Byte swap. */\n+//      p->ixMask = 7;\n+//    }\n+//  }\n+//#endif\n+//}\n \n /*\n ** Make consecutive calls to the SHA3Update function to add new content\n ** to the hash\n */\n-static void SHA3Update(\n-  SHA3Context *p,\n-  const unsigned char *aData,\n-  unsigned int nData\n-){\n-  unsigned int i = 0;\n-#if SHA3_BYTEORDER==1234\n-  if( (p->nLoaded % 8)==0 && ((aData - (const unsigned char*)0)&7)==0 ){\n-    for(; i+7<nData; i+=8){\n-      p->u.s[p->nLoaded/8] ^= *(u64*)&aData[i];\n-      p->nLoaded += 8;\n-      if( p->nLoaded>=p->nRate ){\n-        KeccakF1600Step(p);\n-        p->nLoaded = 0;\n-      }\n-    }\n-  }\n-#endif\n-  for(; i<nData; i++){\n-#if SHA3_BYTEORDER==1234\n-    p->u.x[p->nLoaded] ^= aData[i];\n-#elif SHA3_BYTEORDER==4321\n-    p->u.x[p->nLoaded^0x07] ^= aData[i];\n-#else\n-    p->u.x[p->nLoaded^p->ixMask] ^= aData[i];\n-#endif\n-    p->nLoaded++;\n-    if( p->nLoaded==p->nRate ){\n-      KeccakF1600Step(p);\n-      p->nLoaded = 0;\n-    }\n-  }\n-}\n+//static void SHA3Update(\n+//  SHA3Context *p,\n+//  const unsigned char *aData,\n+//  unsigned int nData\n+//){\n+//  unsigned int i = 0;\n+//#if SHA3_BYTEORDER==1234\n+//  if( (p->nLoaded % 8)==0 && ((aData - (const unsigned char*)0)&7)==0 ){\n+//    for(; i+7<nData; i+=8){\n+//      p->u.s[p->nLoaded/8] ^= *(u64*)&aData[i];\n+//      p->nLoaded += 8;\n+//      if( p->nLoaded>=p->nRate ){\n+//        KeccakF1600Step(p);\n+//        p->nLoaded = 0;\n+//      }\n+//    }\n+//  }\n+//#endif\n+//  for(; i<nData; i++){\n+//#if SHA3_BYTEORDER==1234\n+//    p->u.x[p->nLoaded] ^= aData[i];\n+//#elif SHA3_BYTEORDER==4321\n+//    p->u.x[p->nLoaded^0x07] ^= aData[i];\n+//#else\n+//    p->u.x[p->nLoaded^p->ixMask] ^= aData[i];\n+//#endif\n+//    p->nLoaded++;\n+//    if( p->nLoaded==p->nRate ){\n+//      KeccakF1600Step(p);\n+//      p->nLoaded = 0;\n+//    }\n+//  }\n+//}\n \n /*\n ** After all content has been added, invoke SHA3Final() to compute\n ** the final hash.  The function returns a pointer to the binary\n ** hash value.\n */\n-static unsigned char *SHA3Final(SHA3Context *p){\n-  unsigned int i;\n-  if( p->nLoaded==p->nRate-1 ){\n-    const unsigned char c1 = 0x86;\n-    SHA3Update(p, &c1, 1);\n-  }else{\n-    const unsigned char c2 = 0x06;\n-    const unsigned char c3 = 0x80;\n-    SHA3Update(p, &c2, 1);\n-    p->nLoaded = p->nRate - 1;\n-    SHA3Update(p, &c3, 1);\n-  }\n-  for(i=0; i<p->nRate; i++){\n-    p->u.x[i+p->nRate] = p->u.x[i^p->ixMask];\n-  }\n-  return &p->u.x[p->nRate];\n-}\n+//static unsigned char *SHA3Final(SHA3Context *p){\n+//  unsigned int i;\n+//  if( p->nLoaded==p->nRate-1 ){\n+//    const unsigned char c1 = 0x86;\n+//    SHA3Update(p, &c1, 1);\n+//  }else{\n+//    const unsigned char c2 = 0x06;\n+//    const unsigned char c3 = 0x80;\n+//    SHA3Update(p, &c2, 1);\n+//    p->nLoaded = p->nRate - 1;\n+//    SHA3Update(p, &c3, 1);\n+//  }\n+//  for(i=0; i<p->nRate; i++){\n+//    p->u.x[i+p->nRate] = p->u.x[i^p->ixMask];\n+//  }\n+//  return &p->u.x[p->nRate];\n+//}\n /* End of the hashing logic\n *****************************************************************************/\n \n@@ -1897,52 +1897,52 @@ static unsigned char *SHA3Final(SHA3Context *p){\n ** and the string is hashed without the trailing 0x00 terminator.  The hash\n ** of a NULL value is NULL.\n */\n-static void sha3Func(\n-  sqlite3_context *context,\n-  int argc,\n-  sqlite3_value **argv\n-){\n-  SHA3Context cx;\n-  int eType = sqlite3_value_type(argv[0]);\n-  int nByte = sqlite3_value_bytes(argv[0]);\n-  int iSize;\n-  if( argc==1 ){\n-    iSize = 256;\n-  }else{\n-    iSize = sqlite3_value_int(argv[1]);\n-    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n-      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n-                                    \"384 512\", -1);\n-      return;\n-    }\n-  }\n-  if( eType==SQLITE_NULL ) return;\n-  SHA3Init(&cx, iSize);\n-  if( eType==SQLITE_BLOB ){\n-    SHA3Update(&cx, sqlite3_value_blob(argv[0]), nByte);\n-  }else{\n-    SHA3Update(&cx, sqlite3_value_text(argv[0]), nByte);\n-  }\n-  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n-}\n+//static void sha3Func(\n+//  sqlite3_context *context,\n+//  int argc,\n+//  sqlite3_value **argv\n+//){\n+//  SHA3Context cx;\n+//  int eType = sqlite3_value_type(argv[0]);\n+//  int nByte = sqlite3_value_bytes(argv[0]);\n+//  int iSize;\n+//  if( argc==1 ){\n+//    iSize = 256;\n+//  }else{\n+//    iSize = sqlite3_value_int(argv[1]);\n+//    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n+//      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n+//                                    \"384 512\", -1);\n+//      return;\n+//    }\n+//  }\n+//  if( eType==SQLITE_NULL ) return;\n+//  SHA3Init(&cx, iSize);\n+//  if( eType==SQLITE_BLOB ){\n+//    SHA3Update(&cx, sqlite3_value_blob(argv[0]), nByte);\n+//  }else{\n+//    SHA3Update(&cx, sqlite3_value_text(argv[0]), nByte);\n+//  }\n+//  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n+//}\n \n /* Compute a string using sqlite3_vsnprintf() with a maximum length\n ** of 50 bytes and add it to the hash.\n */\n-static void hash_step_vformat(\n-  SHA3Context *p,                 /* Add content to this context */\n-  const char *zFormat,\n-  ...\n-){\n-  va_list ap;\n-  int n;\n-  char zBuf[50];\n-  va_start(ap, zFormat);\n-  sqlite3_vsnprintf(sizeof(zBuf),zBuf,zFormat,ap);\n-  va_end(ap);\n-  n = (int)strlen(zBuf);\n-  SHA3Update(p, (unsigned char*)zBuf, n);\n-}\n+//static void hash_step_vformat(\n+//  SHA3Context *p,                 /* Add content to this context */\n+//  const char *zFormat,\n+//  ...\n+//){\n+//  va_list ap;\n+//  int n;\n+//  char zBuf[50];\n+//  va_start(ap, zFormat);\n+//  sqlite3_vsnprintf(sizeof(zBuf),zBuf,zFormat,ap);\n+//  va_end(ap);\n+//  n = (int)strlen(zBuf);\n+//  SHA3Update(p, (unsigned char*)zBuf, n);\n+//}\n \n /*\n ** Implementation of the sha3_query(SQL,SIZE) function.\n@@ -1976,115 +1976,115 @@ static void hash_step_vformat(\n ** one for each column in the result set.  Segments are concatentated directly\n ** with no delimiters of any kind.\n */\n-static void sha3QueryFunc(\n-  sqlite3_context *context,\n-  int argc,\n-  sqlite3_value **argv\n-){\n-  sqlite3 *db = sqlite3_context_db_handle(context);\n-  const char *zSql = (const char*)sqlite3_value_text(argv[0]);\n-  sqlite3_stmt *pStmt = 0;\n-  int nCol;                   /* Number of columns in the result set */\n-  int i;                      /* Loop counter */\n-  int rc;\n-  int n;\n-  const char *z;\n-  SHA3Context cx;\n-  int iSize;\n-\n-  if( argc==1 ){\n-    iSize = 256;\n-  }else{\n-    iSize = sqlite3_value_int(argv[1]);\n-    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n-      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n-                                    \"384 512\", -1);\n-      return;\n-    }\n-  }\n-  if( zSql==0 ) return;\n-  SHA3Init(&cx, iSize);\n-  while( zSql[0] ){\n-    rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zSql);\n-    if( rc ){\n-      char *zMsg = sqlite3_mprintf(\"error SQL statement [%s]: %s\",\n-                                   zSql, sqlite3_errmsg(db));\n-      sqlite3_finalize(pStmt);\n-      sqlite3_result_error(context, zMsg, -1);\n-      sqlite3_free(zMsg);\n-      return;\n-    }\n-    if( !sqlite3_stmt_readonly(pStmt) ){\n-      char *zMsg = sqlite3_mprintf(\"non-query: [%s]\", sqlite3_sql(pStmt));\n-      sqlite3_finalize(pStmt);\n-      sqlite3_result_error(context, zMsg, -1);\n-      sqlite3_free(zMsg);\n-      return;\n-    }\n-    nCol = sqlite3_column_count(pStmt);\n-    z = sqlite3_sql(pStmt);\n-    n = (int)strlen(z);\n-    hash_step_vformat(&cx,\"S%d:\",n);\n-    SHA3Update(&cx,(unsigned char*)z,n);\n-\n-    /* Compute a hash over the result of the query */\n-    while( SQLITE_ROW==sqlite3_step(pStmt) ){\n-      SHA3Update(&cx,(const unsigned char*)\"R\",1);\n-      for(i=0; i<nCol; i++){\n-        switch( sqlite3_column_type(pStmt,i) ){\n-          case SQLITE_NULL: {\n-            SHA3Update(&cx, (const unsigned char*)\"N\",1);\n-            break;\n-          }\n-          case SQLITE_INTEGER: {\n-            sqlite3_uint64 u;\n-            int j;\n-            unsigned char x[9];\n-            sqlite3_int64 v = sqlite3_column_int64(pStmt,i);\n-            memcpy(&u, &v, 8);\n-            for(j=8; j>=1; j--){\n-              x[j] = u & 0xff;\n-              u >>= 8;\n-            }\n-            x[0] = 'I';\n-            SHA3Update(&cx, x, 9);\n-            break;\n-          }\n-          case SQLITE_FLOAT: {\n-            sqlite3_uint64 u;\n-            int j;\n-            unsigned char x[9];\n-            double r = sqlite3_column_double(pStmt,i);\n-            memcpy(&u, &r, 8);\n-            for(j=8; j>=1; j--){\n-              x[j] = u & 0xff;\n-              u >>= 8;\n-            }\n-            x[0] = 'F';\n-            SHA3Update(&cx,x,9);\n-            break;\n-          }\n-          case SQLITE_TEXT: {\n-            int n2 = sqlite3_column_bytes(pStmt, i);\n-            const unsigned char *z2 = sqlite3_column_text(pStmt, i);\n-            hash_step_vformat(&cx,\"T%d:\",n2);\n-            SHA3Update(&cx, z2, n2);\n-            break;\n-          }\n-          case SQLITE_BLOB: {\n-            int n2 = sqlite3_column_bytes(pStmt, i);\n-            const unsigned char *z2 = sqlite3_column_blob(pStmt, i);\n-            hash_step_vformat(&cx,\"B%d:\",n2);\n-            SHA3Update(&cx, z2, n2);\n-            break;\n-          }\n-        }\n-      }\n-    }\n-    sqlite3_finalize(pStmt);\n-  }\n-  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n-}\n+//static void sha3QueryFunc(\n+//  sqlite3_context *context,\n+//  int argc,\n+//  sqlite3_value **argv\n+//){\n+//  sqlite3 *db = sqlite3_context_db_handle(context);\n+//  const char *zSql = (const char*)sqlite3_value_text(argv[0]);\n+//  sqlite3_stmt *pStmt = 0;\n+//  int nCol;                   /* Number of columns in the result set */\n+//  int i;                      /* Loop counter */\n+//  int rc;\n+//  int n;\n+//  const char *z;\n+//  SHA3Context cx;\n+//  int iSize;\n+//\n+//  if( argc==1 ){\n+//    iSize = 256;\n+//  }else{\n+//    iSize = sqlite3_value_int(argv[1]);\n+//    if( iSize!=224 && iSize!=256 && iSize!=384 && iSize!=512 ){\n+//      sqlite3_result_error(context, \"SHA3 size should be one of: 224 256 \"\n+//                                    \"384 512\", -1);\n+//      return;\n+//    }\n+//  }\n+//  if( zSql==0 ) return;\n+//  SHA3Init(&cx, iSize);\n+//  while( zSql[0] ){\n+//    rc = sqlite3_prepare_v2(db, zSql, -1, &pStmt, &zSql);\n+//    if( rc ){\n+//      char *zMsg = sqlite3_mprintf(\"error SQL statement [%s]: %s\",\n+//                                   zSql, sqlite3_errmsg(db));\n+//      sqlite3_finalize(pStmt);\n+//      sqlite3_result_error(context, zMsg, -1);\n+//      sqlite3_free(zMsg);\n+//      return;\n+//    }\n+//    if( !sqlite3_stmt_readonly(pStmt) ){\n+//      char *zMsg = sqlite3_mprintf(\"non-query: [%s]\", sqlite3_sql(pStmt));\n+//      sqlite3_finalize(pStmt);\n+//      sqlite3_result_error(context, zMsg, -1);\n+//      sqlite3_free(zMsg);\n+//      return;\n+//    }\n+//    nCol = sqlite3_column_count(pStmt);\n+//    z = sqlite3_sql(pStmt);\n+//    n = (int)strlen(z);\n+//    hash_step_vformat(&cx,\"S%d:\",n);\n+//    SHA3Update(&cx,(unsigned char*)z,n);\n+//\n+//    /* Compute a hash over the result of the query */\n+//    while( SQLITE_ROW==sqlite3_step(pStmt) ){\n+//      SHA3Update(&cx,(const unsigned char*)\"R\",1);\n+//      for(i=0; i<nCol; i++){\n+//        switch( sqlite3_column_type(pStmt,i) ){\n+//          case SQLITE_NULL: {\n+//            SHA3Update(&cx, (const unsigned char*)\"N\",1);\n+//            break;\n+//          }\n+//          case SQLITE_INTEGER: {\n+//            sqlite3_uint64 u;\n+//            int j;\n+//            unsigned char x[9];\n+//            sqlite3_int64 v = sqlite3_column_int64(pStmt,i);\n+//            memcpy(&u, &v, 8);\n+//            for(j=8; j>=1; j--){\n+//              x[j] = u & 0xff;\n+//              u >>= 8;\n+//            }\n+//            x[0] = 'I';\n+//            SHA3Update(&cx, x, 9);\n+//            break;\n+//          }\n+//          case SQLITE_FLOAT: {\n+//            sqlite3_uint64 u;\n+//            int j;\n+//            unsigned char x[9];\n+//            double r = sqlite3_column_double(pStmt,i);\n+//            memcpy(&u, &r, 8);\n+//            for(j=8; j>=1; j--){\n+//              x[j] = u & 0xff;\n+//              u >>= 8;\n+//            }\n+//            x[0] = 'F';\n+//            SHA3Update(&cx,x,9);\n+//            break;\n+//          }\n+//          case SQLITE_TEXT: {\n+//            int n2 = sqlite3_column_bytes(pStmt, i);\n+//            const unsigned char *z2 = sqlite3_column_text(pStmt, i);\n+//            hash_step_vformat(&cx,\"T%d:\",n2);\n+//            SHA3Update(&cx, z2, n2);\n+//            break;\n+//          }\n+//          case SQLITE_BLOB: {\n+//            int n2 = sqlite3_column_bytes(pStmt, i);\n+//            const unsigned char *z2 = sqlite3_column_blob(pStmt, i);\n+//            hash_step_vformat(&cx,\"B%d:\",n2);\n+//            SHA3Update(&cx, z2, n2);\n+//            break;\n+//          }\n+//        }\n+//      }\n+//    }\n+//    sqlite3_finalize(pStmt);\n+//  }\n+//  sqlite3_result_blob(context, SHA3Final(&cx), iSize/8, SQLITE_TRANSIENT);\n+//}\n \n \n #ifdef _WIN32\n@@ -2095,28 +2095,29 @@ int sqlite3_shathree_init(\n   char **pzErrMsg,\n   const sqlite3_api_routines *pApi\n ){\n-  int rc = SQLITE_OK;\n-  SQLITE_EXTENSION_INIT2(pApi);\n-  (void)pzErrMsg;  /* Unused parameter */\n-  rc = sqlite3_create_function(db, \"sha3\", 1,\n-                      SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,\n-                      0, sha3Func, 0, 0);\n-  if( rc==SQLITE_OK ){\n-    rc = sqlite3_create_function(db, \"sha3\", 2,\n-                      SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,\n-                      0, sha3Func, 0, 0);\n-  }\n-  if( rc==SQLITE_OK ){\n-    rc = sqlite3_create_function(db, \"sha3_query\", 1,\n-                      SQLITE_UTF8 | SQLITE_DIRECTONLY,\n-                      0, sha3QueryFunc, 0, 0);\n-  }\n-  if( rc==SQLITE_OK ){\n-    rc = sqlite3_create_function(db, \"sha3_query\", 2,\n-                      SQLITE_UTF8 | SQLITE_DIRECTONLY,\n-                      0, sha3QueryFunc, 0, 0);\n-  }\n-  return rc;\n+  return SQLITE_OK;\n+//  int rc = SQLITE_OK;\n+//  SQLITE_EXTENSION_INIT2(pApi);\n+//  (void)pzErrMsg;  /* Unused parameter */\n+//  rc = sqlite3_create_function(db, \"sha3\", 1,\n+//                      SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,\n+//                      0, sha3Func, 0, 0);\n+//  if( rc==SQLITE_OK ){\n+//    rc = sqlite3_create_function(db, \"sha3\", 2,\n+//                      SQLITE_UTF8 | SQLITE_INNOCUOUS | SQLITE_DETERMINISTIC,\n+//                      0, sha3Func, 0, 0);\n+//  }\n+//  if( rc==SQLITE_OK ){\n+//    rc = sqlite3_create_function(db, \"sha3_query\", 1,\n+//                      SQLITE_UTF8 | SQLITE_DIRECTONLY,\n+//                      0, sha3QueryFunc, 0, 0);\n+//  }\n+//  if( rc==SQLITE_OK ){\n+//    rc = sqlite3_create_function(db, \"sha3_query\", 2,\n+//                      SQLITE_UTF8 | SQLITE_DIRECTONLY,\n+//                      0, sha3QueryFunc, 0, 0);\n+//  }\n+//  return rc;\n }\n \n /************************* End ../ext/misc/shathree.c ********************/\n@@ -13579,12 +13580,6 @@ static const char *(azHelp[]) = {\n   \"   See also:\",\n   \"      http://sqlite.org/cli.html#sqlar_archive_support\",\n #endif\n-#ifndef SQLITE_OMIT_AUTHORIZATION\n-  \".auth ON|OFF             Show authorizer callbacks\",\n-#endif\n-  \".backup ?DB? FILE        Backup DB (default \\\"main\\\") to FILE\",\n-  \"       --append            Use the appendvfs\",\n-  \"       --async             Write to FILE without journal and fsync()\",\n   \".bail on|off             Stop after hitting an error.  Default OFF\",\n   \".binary on|off           Turn binary output on or off.  Default OFF\",\n   \".cd DIRECTORY            Change the working directory to DIRECTORY\",\n@@ -13598,8 +13593,6 @@ static const char *(azHelp[]) = {\n   \"     brightyellow|brightblue|brightmagenta|brightcyan|brightwhite\",\n   \".constantcode ?CODE?     Sets the syntax highlighting terminal code used for constant values\",\n   \".databases               List names and files of attached databases\",\n-  \".dbconfig ?op? ?val?     List or change sqlite3_db_config() options\",\n-  \".dbinfo ?DB?             Show status information about the database\",\n   \".dump ?TABLE?            Render database content as SQL\",\n   \"   Options:\",\n   \"     --preserve-rowids      Include ROWID values in the output\",\n@@ -13607,7 +13600,6 @@ static const char *(azHelp[]) = {\n   \"   TABLE is a LIKE pattern for the tables to dump\",\n   \"   Additional LIKE patterns can be given in subsequent arguments\",\n   \".echo on|off             Turn command echo on or off\",\n-  \".eqp on|off|full|...     Enable or disable automatic EXPLAIN QUERY PLAN\",\n   \"   Other Modes:\",\n #ifdef SQLITE_DEBUG\n   \"      test                  Show raw EXPLAIN QUERY PLAN output\",\n@@ -13617,11 +13609,7 @@ static const char *(azHelp[]) = {\n   \".excel                   Display the output of next command in spreadsheet\",\n   \"   --bom                   Put a UTF8 byte-order mark on intermediate file\",\n   \".exit ?CODE?             Exit this program with return-code CODE\",\n-  \".expert                  EXPERIMENTAL. Suggest indexes for queries\",\n   \".explain ?on|off|auto?   Change the EXPLAIN formatting mode.  Default: auto\",\n-  \".filectrl CMD ...        Run various sqlite3_file_control() operations\",\n-  \"   --schema SCHEMA         Use SCHEMA instead of \\\"main\\\"\",\n-  \"   --help                  Show CMD details\",\n   \".fullschema ?--indent?   Show schema and the content of sqlite_stat tables\",\n   \".headers on|off          Turn display of headers on or off\",\n   \".help ?-all? ?PATTERN?   Show help text for PATTERN\",\n@@ -13639,9 +13627,6 @@ static const char *(azHelp[]) = {\n   \"        from the \\\".mode\\\" output mode\",\n   \"     *  If FILE begins with \\\"|\\\" then it is a command that generates the\",\n   \"        input text.\",\n-#ifndef SQLITE_OMIT_TEST_CONTROL\n-  \".imposter INDEX TABLE    Create imposter table TABLE on index INDEX\",\n-#endif\n   \".indexes ?TABLE?         Show names of indexes\",\n   \"                           If TABLE is specified, only show indexes for\",\n   \"                           tables matching TABLE using the LIKE operator.\",\n@@ -13653,7 +13638,6 @@ static const char *(azHelp[]) = {\n   \"     red|green|yellow|blue|magenta|cyan|white|brightblack|brightred|brightgreen\",\n   \"     brightyellow|brightblue|brightmagenta|brightcyan|brightwhite\",\n   \".keywordcode ?CODE?      Sets the syntax highlighting terminal code used for keywords\",\n-  \".limit ?LIMIT? ?VAL?     Display or change the value of an SQLITE_LIMIT\",\n   \".lint OPTIONS            Report potential schema issues.\",\n   \"     Options:\",\n   \"        fkey-indexes     Find missing foreign key indexes\",\n@@ -13718,13 +13702,6 @@ static const char *(azHelp[]) = {\n   \"                           PARAMETER should start with one of: $ : @ ?\",\n   \"   unset PARAMETER         Remove PARAMETER from the binding table\",\n   \".print STRING...         Print literal STRING\",\n-#ifndef SQLITE_OMIT_PROGRESS_CALLBACK\n-  \".progress N              Invoke progress handler after every N opcodes\",\n-  \"   --limit N                 Interrupt after N progress callbacks\",\n-  \"   --once                    Do no more than one progress interrupt\",\n-  \"   --quiet|-q                No output except at interrupts\",\n-  \"   --reset                   Reset the count for each input and interrupt\",\n-#endif\n   \".prompt MAIN CONTINUE    Replace the standard prompts\",\n   \".quit                    Exit this program\",\n   \".read FILE               Read input from FILE\",\n@@ -13736,17 +13713,10 @@ static const char *(azHelp[]) = {\n   \"   --no-rowids              Do not attempt to recover rowid values\",\n   \"                            that are not also INTEGER PRIMARY KEYs\",\n #endif\n-  \".restore ?DB? FILE       Restore content of DB (default \\\"main\\\") from FILE\",\n   \".rows                    Row-wise rendering of query results (default)\",\n-  \".save FILE               Write in-memory database into FILE\",\n-  \".scanstats on|off        Turn sqlite3_stmt_scanstatus() metrics on or off\",\n   \".schema ?PATTERN?        Show the CREATE statements matching PATTERN\",\n   \"     Options:\",\n   \"         --indent            Try to pretty-print the schema\",\n-  \".selftest ?OPTIONS?      Run tests defined in the SELFTEST table\",\n-  \"    Options:\",\n-  \"       --init               Create a new SELFTEST table\",\n-  \"       -v                   Verbose output\",\n   \".separator COL ?ROW?     Change the column and row separators\",\n #if defined(SQLITE_ENABLE_SESSION)\n   \".session ?NAME? CMD ...  Create or control sessions\",\n@@ -13775,39 +13745,16 @@ static const char *(azHelp[]) = {\n   \".shell CMD ARGS...       Run CMD ARGS... in a system shell\",\n #endif\n   \".show                    Show the current values for various settings\",\n-  \".stats ?on|off?          Show stats or turn stats on or off\",\n #ifndef SQLITE_NOHAVE_SYSTEM\n   \".system CMD ARGS...      Run CMD ARGS... in a system shell\",\n #endif\n   \".tables ?TABLE?          List names of tables matching LIKE pattern TABLE\",\n   \".testcase NAME           Begin redirecting output to 'testcase-out.txt'\",\n-  \".testctrl CMD ...        Run various sqlite3_test_control() operations\",\n-  \"                           Run \\\".testctrl\\\" with no arguments for details\",\n-  \".timeout MS              Try opening locked tables for MS milliseconds\",\n   \".timer on|off            Turn SQL timer on or off\",\n-#ifndef SQLITE_OMIT_TRACE\n-  \".trace ?OPTIONS?         Output each SQL statement as it is run\",\n-  \"    FILE                    Send output to FILE\",\n-  \"    stdout                  Send output to stdout\",\n-  \"    stderr                  Send output to stderr\",\n-  \"    off                     Disable tracing\",\n-  \"    --expanded              Expand query parameters\",\n-#ifdef SQLITE_ENABLE_NORMALIZE\n-  \"    --normalized            Normal the SQL statements\",\n-#endif\n-  \"    --plain                 Show SQL as it is input\",\n-  \"    --stmt                  Trace statement execution (SQLITE_TRACE_STMT)\",\n-  \"    --profile               Profile statements (SQLITE_TRACE_PROFILE)\",\n-  \"    --row                   Trace each row (SQLITE_TRACE_ROW)\",\n-  \"    --close                 Trace connection close (SQLITE_TRACE_CLOSE)\",\n-#endif /* SQLITE_OMIT_TRACE */\n #ifdef SQLITE_DEBUG\n   \".unmodule NAME ...       Unregister virtual table modules\",\n   \"    --allexcept             Unregister everything except those named\",\n #endif\n-  \".vfsinfo ?AUX?           Information about the top-level VFS\",\n-  \".vfslist                 List all available VFSes\",\n-  \".vfsname ?AUX?           Print the name of the VFS stack\",\n   \".width NUM1 NUM2 ...     Set minimum column widths for columnar output\",\n   \"     Negative values right-justify\",\n };\n@@ -20350,13 +20297,10 @@ static const char zOptions[] =\n   \"   -json                set output mode to 'json'\\n\"\n   \"   -line                set output mode to 'line'\\n\"\n   \"   -list                set output mode to 'list'\\n\"\n-  \"   -lookaside SIZE N    use N entries of SZ bytes for lookaside memory\\n\"\n   \"   -markdown            set output mode to 'markdown'\\n\"\n #if defined(SQLITE_ENABLE_DESERIALIZE)\n   \"   -maxsize N           maximum size for a --deserialize database\\n\"\n #endif\n-  \"   -memtrace            trace all memory allocations and deallocations\\n\"\n-  \"   -mmap N              default mmap size set to N\\n\"\n #ifdef SQLITE_ENABLE_MULTIPLEX\n   \"   -multiplex           enable the multiplexor VFS\\n\"\n #endif\n@@ -20364,7 +20308,6 @@ static const char zOptions[] =\n   \"   -nofollow            refuse to open symbolic links to database files\\n\"\n   \"   -no-stdin            exit after processing options instead of reading stdin\\n\"\n   \"   -nullvalue TEXT      set text string for NULL values. Default ''\\n\"\n-  \"   -pagecache SIZE N    use N slots of SZ bytes each for page cache memory\\n\"\n   \"   -quote               set output mode to 'quote'\\n\"\n   \"   -readonly            open the database read-only\\n\"\n   \"   -s COMMAND           run \\\"COMMAND\\\" and exit\\n\"\n@@ -20376,10 +20319,6 @@ static const char zOptions[] =\n   \"   -table               set output mode to 'table'\\n\"\n   \"   -unsigned            allow loading of unsigned extensions\\n\"\n   \"   -version             show DuckDB version\\n\"\n-  \"   -vfs NAME            use NAME as the default VFS\\n\"\n-#ifdef SQLITE_ENABLE_VFSTRACE\n-  \"   -vfstrace            enable tracing of all VFS calls\\n\"\n-#endif\n #ifdef SQLITE_HAVE_ZLIB\n   \"   -zip                 open the file as a ZIP Archive\\n\"\n #endif\ndiff --git a/tools/sqlite3_api_wrapper/CMakeLists.txt b/tools/sqlite3_api_wrapper/CMakeLists.txt\nindex aa48ffeb4902..d46c676920af 100644\n--- a/tools/sqlite3_api_wrapper/CMakeLists.txt\n+++ b/tools/sqlite3_api_wrapper/CMakeLists.txt\n@@ -13,7 +13,10 @@ include_directories(../../third_party/utf8proc/include)\n set(SQLITE_API_WRAPPER_FILES sqlite3_api_wrapper.cpp ${ALL_OBJECT_FILES})\n \n add_library(sqlite3_api_wrapper_static STATIC ${SQLITE_API_WRAPPER_FILES})\n-target_link_libraries(sqlite3_api_wrapper_static duckdb_static duckdb_utf8proc)\n+target_link_libraries(sqlite3_api_wrapper_static duckdb_static)\n+if(NOT AMALGAMATION_BUILD)\n+  target_link_libraries(sqlite3_api_wrapper_static duckdb_utf8proc)\n+endif()\n link_threads(sqlite3_api_wrapper_static)\n \n if(NOT WIN32)\ndiff --git a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\nindex a7e88d8020f0..f839fe0ff97b 100644\n--- a/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\n+++ b/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp\n@@ -38,7 +38,7 @@ static char *sqlite3_strdup(const char *str);\n \n struct sqlite3_string_buffer {\n \t//! String data\n-\tduckdb::unique_ptr<char[]> data;\n+\tduckdb::unsafe_unique_array<char> data;\n \t//! String length\n \tint data_len;\n };\n@@ -559,7 +559,7 @@ const unsigned char *sqlite3_column_text(sqlite3_stmt *pStmt, int iCol) {\n \t\tif (!entry.data) {\n \t\t\t// not initialized yet, convert the value and initialize it\n \t\t\tauto &str_val = StringValue::Get(val);\n-\t\t\tentry.data = duckdb::unique_ptr<char[]>(new char[str_val.size() + 1]);\n+\t\t\tentry.data = duckdb::make_unsafe_uniq_array<char>(str_val.size() + 1);\n \t\t\tmemcpy(entry.data.get(), str_val.c_str(), str_val.size() + 1);\n \t\t\tentry.data_len = str_val.length();\n \t\t}\n@@ -584,7 +584,7 @@ const void *sqlite3_column_blob(sqlite3_stmt *pStmt, int iCol) {\n \t\tif (!entry.data) {\n \t\t\t// not initialized yet, convert the value and initialize it\n \t\t\tauto &str_val = StringValue::Get(val);\n-\t\t\tentry.data = duckdb::unique_ptr<char[]>(new char[str_val.size() + 1]);\n+\t\t\tentry.data = duckdb::make_unsafe_uniq_array<char>(str_val.size() + 1);\n \t\t\tmemcpy(entry.data.get(), str_val.c_str(), str_val.size() + 1);\n \t\t\tentry.data_len = str_val.length();\n \t\t}\ndiff --git a/tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp b/tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp\nindex f55891f714ff..30fc5b0812dc 100644\n--- a/tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp\n+++ b/tools/sqlite3_api_wrapper/sqlite3_udf_api/cast_sqlite.cpp\n@@ -48,7 +48,7 @@ void CastSQLite::InputVectorsToVarchar(DataChunk &data_chunk, DataChunk &new_chu\n \n VectorType CastSQLite::ToVectorsSQLiteValue(DataChunk &data_chunk, Vector &result,\n                                             vector<unique_ptr<vector<sqlite3_value>>> &vec_sqlite_values,\n-                                            duckdb::unique_ptr<UnifiedVectorFormat[]> vec_data) {\n+                                            duckdb::unsafe_unique_array<UnifiedVectorFormat> vec_data) {\n \tVectorType result_vec_type = VectorType::CONSTANT_VECTOR;\n \n \t// Casting input data to sqlite_value\ndiff --git a/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/cast_sqlite.hpp b/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/cast_sqlite.hpp\nindex 5dd340861a0e..4879e6984f4c 100644\n--- a/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/cast_sqlite.hpp\n+++ b/tools/sqlite3_api_wrapper/sqlite3_udf_api/include/cast_sqlite.hpp\n@@ -27,7 +27,7 @@ struct CastSQLite {\n \n \tstatic VectorType ToVectorsSQLiteValue(DataChunk &data_chunk, Vector &result,\n \t                                       vector<unique_ptr<vector<sqlite3_value>>> &vec_sqlites,\n-\t                                       duckdb::unique_ptr<UnifiedVectorFormat[]> vec_data);\n+\t                                       duckdb::unsafe_unique_array<UnifiedVectorFormat> vec_data);\n \n \tstatic unique_ptr<vector<sqlite3_value>> ToVector(LogicalType type, UnifiedVectorFormat &vec_data, idx_t size,\n \t                                                  Vector &result);\ndiff --git a/tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp b/tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp\nindex 0e950caddd08..f9008f36f07c 100644\n--- a/tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp\n+++ b/tools/sqlite3_api_wrapper/sqlite3_udf_api/sqlite3_udf_wrapper.cpp\n@@ -11,7 +11,7 @@ duckdb::scalar_function_t duckdb::SQLiteUDFWrapper::CreateSQLiteScalarFunction(d\n \t\tCastSQLite::InputVectorsToVarchar(args, cast_chunk);\n \n \t\t// ToUnifiedFormat all input colunms\n-\t\tduckdb::unique_ptr<UnifiedVectorFormat[]> vec_data = cast_chunk.ToUnifiedFormat();\n+\t\tauto vec_data = cast_chunk.ToUnifiedFormat();\n \n \t\t// Vector of sqlite3_value for all input columns\n \t\tvector<unique_ptr<vector<sqlite3_value>>> vec_sqlite(cast_chunk.ColumnCount());\ndiff --git a/tools/swift/duckdb-swift/Sources/DuckDB/CodingUserInfoKeys.swift b/tools/swift/duckdb-swift/Sources/DuckDB/CodingUserInfoKeys.swift\nnew file mode 100644\nindex 000000000000..4fc308007be9\n--- /dev/null\n+++ b/tools/swift/duckdb-swift/Sources/DuckDB/CodingUserInfoKeys.swift\n@@ -0,0 +1,52 @@\n+//\n+//  DuckDB\n+//  https://github.com/duckdb/duckdb-swift\n+//\n+//  Copyright \u00a9 2018-2023 Stichting DuckDB Foundation\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files (the \"Software\"), to\n+//  deal in the Software without restriction, including without limitation the\n+//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n+//  sell copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions:\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n+//  IN THE SOFTWARE.\n+\n+public struct CodingUserInfoKeys {\n+  /// This key is set on the `userInfo` dictionary of the `Decoder` that is\n+  /// used when transforming data into a `Decodable`. The value is the ``LogicalType``\n+  /// of the element being decoded. This can be used to implement dynamic decoding\n+  /// behavior based on the underlying database type.\n+  ///\n+  /// For example:\n+  /// ```swift\n+  ///  struct DynamicDecodable: Decodable {\n+  ///   init(from decoder: Decoder) throws {\n+  ///      guard let logicalType = decoder.userInfo[CodingUserInfoKeys.logicalType] as? LogicalType else {\n+  ///       throw Error.expectedLogicalType\n+  ///      }\n+  ///      switch logicalType.dataType {\n+  ///        case .list:\n+  ///          let unkeyedContainer = try decoder.unkeyedContainer()\n+  ///          ...\n+  ///        case .map, .struct:\n+  ///          let keyedContainer = try decoder.container(keyedBy: AnyCodingKey.self)\n+  ///          ...\n+  ///      }\n+  ///    }\n+  ///  }\n+  ///\n+  ///  let column = result[0].cast(to: DynamicDecodable.self)\n+  ///  ```\n+  public static let logicalTypeCodingUserInfoKey = CodingUserInfoKey(rawValue: \"logicalType\")!\n+}\ndiff --git a/tools/swift/duckdb-swift/Sources/DuckDB/Internal/Vector.swift b/tools/swift/duckdb-swift/Sources/DuckDB/Internal/Vector.swift\nindex 834bfe1a246c..d4121ebb3626 100644\n--- a/tools/swift/duckdb-swift/Sources/DuckDB/Internal/Vector.swift\n+++ b/tools/swift/duckdb-swift/Sources/DuckDB/Internal/Vector.swift\n@@ -258,6 +258,7 @@ extension Vector: Collection {\n extension Vector.Element {\n   \n   var dataType: DatabaseType { vector.logicalType.dataType }\n+  var logicalType: LogicalType { vector.logicalType }\n   \n   func unwrapNull() -> Bool { vector.unwrapNull(at: index) }\n   func unwrap(_ type: Int.Type) throws -> Int { try vector.unwrap(type, at: index) }\ndiff --git a/tools/swift/duckdb-swift/Sources/DuckDB/Internal/VectorElementDecoder.swift b/tools/swift/duckdb-swift/Sources/DuckDB/Internal/VectorElementDecoder.swift\nindex 6b5e8699dc51..02e71ae27fc3 100644\n--- a/tools/swift/duckdb-swift/Sources/DuckDB/Internal/VectorElementDecoder.swift\n+++ b/tools/swift/duckdb-swift/Sources/DuckDB/Internal/VectorElementDecoder.swift\n@@ -57,12 +57,13 @@ fileprivate struct VectorElementDataDecoder: Decoder {\n   }\n   \n   let codingPath: [CodingKey]\n-  let userInfo = [CodingUserInfoKey : Any]()\n   let element: Vector.Element\n+  let userInfo: [CodingUserInfoKey : Any]\n   \n   init(element: Vector.Element, codingPath: [CodingKey] = []) {\n     self.codingPath = codingPath\n     self.element = element\n+    self.userInfo = [CodingUserInfoKeys.logicalTypeCodingUserInfoKey: element.logicalType]\n   }\n   \n   func container<Key: CodingKey>(keyedBy type: Key.Type) throws -> KeyedDecodingContainer<Key> {\ndiff --git a/tools/swift/duckdb-swift/Tests/DuckDBTests/CodingUserInfoKeysTests.swift b/tools/swift/duckdb-swift/Tests/DuckDBTests/CodingUserInfoKeysTests.swift\nnew file mode 100644\nindex 000000000000..dfd260fc9d87\n--- /dev/null\n+++ b/tools/swift/duckdb-swift/Tests/DuckDBTests/CodingUserInfoKeysTests.swift\n@@ -0,0 +1,47 @@\n+//\n+//  DuckDB\n+//  https://github.com/duckdb/duckdb-swift\n+//\n+//  Copyright \u00a9 2018-2023 Stichting DuckDB Foundation\n+//\n+//  Permission is hereby granted, free of charge, to any person obtaining a copy\n+//  of this software and associated documentation files (the \"Software\"), to\n+//  deal in the Software without restriction, including without limitation the\n+//  rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n+//  sell copies of the Software, and to permit persons to whom the Software is\n+//  furnished to do so, subject to the following conditions:\n+//\n+//  The above copyright notice and this permission notice shall be included in\n+//  all copies or substantial portions of the Software.\n+//\n+//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n+//  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n+//  IN THE SOFTWARE.\n+\n+import XCTest\n+@testable import DuckDB\n+\n+final class CodingUserInfoKeysTests: XCTestCase {\n+  func test_logical_type() throws {\n+    let connection = try Database(store: .inMemory).connect()\n+    try connection.execute(\"\"\"\n+      CREATE TABLE t1(int_list INT[]);\n+      INSERT INTO t1 VALUES ([1, 2, 3]);\n+    \"\"\")\n+    let result = try connection.query(\"SELECT * FROM t1;\")\n+    let column = result[0].cast(to: TestDynamicDecodable.self)\n+    XCTAssertEqual(column[0]?.logicalType?.dataType, .list)\n+  }\n+}\n+\n+struct TestDynamicDecodable: Decodable {\n+  let logicalType: LogicalType?\n+\n+  init(from decoder: Decoder) throws {\n+    self.logicalType = decoder.userInfo[CodingUserInfoKeys.logicalTypeCodingUserInfoKey] as? LogicalType\n+  }\n+}\n",
  "test_patch": "diff --git a/data/parquet-testing/invalid.parquet b/data/parquet-testing/invalid.parquet\nnew file mode 100644\nindex 000000000000..e1eb3a807038\nBinary files /dev/null and b/data/parquet-testing/invalid.parquet differ\ndiff --git a/test/api/CMakeLists.txt b/test/api/CMakeLists.txt\nindex bbb7c5ff2aef..30f528f11009 100644\n--- a/test/api/CMakeLists.txt\n+++ b/test/api/CMakeLists.txt\n@@ -22,7 +22,8 @@ set(TEST_API_OBJECTS\n     test_dbdir.cpp\n     test_progress_bar.cpp\n     test_threads.cpp\n-    test_windows_header_compatibility.cpp)\n+    test_windows_header_compatibility.cpp\n+    test_windows_unicode_path.cpp)\n \n if(NOT WIN32)\n   set(TEST_API_OBJECTS ${TEST_API_OBJECTS} test_read_only.cpp)\ndiff --git a/test/api/test_prepared_api.cpp b/test/api/test_prepared_api.cpp\nindex df2b232f17d6..e2d1f6085fd7 100644\n--- a/test/api/test_prepared_api.cpp\n+++ b/test/api/test_prepared_api.cpp\n@@ -320,7 +320,7 @@ TEST_CASE(\"Test BLOB with PreparedStatement\", \"[api]\") {\n \n \t// Creating a blob buffer with almost ALL ASCII chars\n \tuint8_t num_chars = 256 - 5; // skipping: '\\0', '\\n', '\\15', ',', '\\32'\n-\tduckdb::unique_ptr<char[]> blob_chars(new char[num_chars]);\n+\tauto blob_chars = make_unsafe_uniq_array<char>(num_chars);\n \tchar ch = '\\0';\n \tidx_t buf_idx = 0;\n \tfor (idx_t i = 0; i < 255; ++i, ++ch) {\ndiff --git a/test/api/test_windows_unicode_path.cpp b/test/api/test_windows_unicode_path.cpp\nnew file mode 100644\nindex 000000000000..2cd9aa36e4d1\n--- /dev/null\n+++ b/test/api/test_windows_unicode_path.cpp\n@@ -0,0 +1,53 @@\n+#include \"catch.hpp\"\n+#include \"test_helpers.hpp\"\n+#include \"duckdb.hpp\"\n+#include \"duckdb/main/db_instance_cache.hpp\"\n+\n+using namespace duckdb;\n+using namespace std;\n+\n+void TestConnectToDatabase(const string &path, bool create_table = false) {\n+\t// connect to the database using the standard syntax\n+\t{\n+\t\tDuckDB db(path);\n+\t\tConnection con(db);\n+\t\tif (create_table) {\n+\t\t\tREQUIRE_NO_FAIL(con.Query(\"CREATE TABLE test AS SELECT * FROM range(10) t(i)\"));\n+\t\t}\n+\n+\t\tauto result = con.Query(\"SELECT SUM(i) FROM test\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {45}));\n+\t}\n+\n+\t// connect to the database using the db instance cache\n+\t{\n+\t\tDBInstanceCache cache;\n+\t\tDBConfig config;\n+\t\tauto db = cache.CreateInstance(path, config);\n+\t\tConnection con(*db);\n+\n+\t\tauto result = con.Query(\"SELECT SUM(i) FROM test\");\n+\t\tREQUIRE(CHECK_COLUMN(result, 0, {45}));\n+\t}\n+}\n+\n+TEST_CASE(\"Issue #6931 - test windows unicode path\", \"[windows]\") {\n+\tstring dirname = \"Mosegu\u00ed_i_Gonz\u00e1lez\";\n+\tauto test_directory = TestDirectoryPath() + \"/\" + dirname;\n+\tauto current_directory = TestGetCurrentDirectory();\n+\tTestCreateDirectory(test_directory);\n+\tTestChangeDirectory(test_directory);\n+\n+\t// relative path INSIDE folder with accents\n+\tTestConnectToDatabase(\"test.db\", true);\n+\n+\tTestChangeDirectory(\"..\");\n+\t// relative path TOWARDS folder with accents\n+\tTestConnectToDatabase(dirname + \"/\" + \"test.db\");\n+\n+\t// absolute path with folder with accents\n+\tTestConnectToDatabase(current_directory + \"/\" + test_directory + \"/\" + \"test.db\");\n+\n+\t// revert current working directory\n+\tTestChangeDirectory(current_directory);\n+}\ndiff --git a/test/fuzzer/fuzz_not_operator.test b/test/fuzzer/fuzz_not_operator.test\nnew file mode 100644\nindex 000000000000..d329a7368de3\n--- /dev/null\n+++ b/test/fuzzer/fuzz_not_operator.test\n@@ -0,0 +1,16 @@\n+# name: test/fuzzer/fuzz_not_operator.test\n+# group: [fuzzer]\n+\n+statement ok\n+pragma enable_verification\n+\n+# Because 2060771621 + -2134619525 becomes bigger than INTEGER (detected type for the constants)\n+# previously we would wrongfully strip the where clause and return an empty set.\n+query I\n+SELECT i FROM (select 1) tbl(i) WHERE ( 2060771621 != i + -2134619525 )\n+----\n+1\n+\n+query I\n+select i FROM (select 4195391146) tbl(i) WHERE ( 2060771621 != i + -2134619525)\n+----\ndiff --git a/test/fuzzer/pedro/art_concatenate_prefix.test b/test/fuzzer/pedro/art_concatenate_prefix.test\nnew file mode 100644\nindex 000000000000..114fd2b2e57e\n--- /dev/null\n+++ b/test/fuzzer/pedro/art_concatenate_prefix.test\n@@ -0,0 +1,15 @@\n+# name: test/fuzzer/pedro/art_concatenate_prefix.test\n+# description: Issue #7128, number 14\n+# group: [pedro]\n+\n+statement ok\n+CREATE TABLE t0(c0 INT);\n+\n+statement ok\n+CREATE INDEX i0 ON t0 (c0, (BLOB '\\xE7\\x1F\\x8B&\\xF0'));\n+\n+statement ok\n+INSERT INTO t0 VALUES (-2041046163),(35016222);\n+\n+statement ok\n+TRUNCATE t0;\n\\ No newline at end of file\ndiff --git a/test/helpers/test_helpers.cpp b/test/helpers/test_helpers.cpp\nindex faaeb51ab350..265e7a4153cf 100644\n--- a/test/helpers/test_helpers.cpp\n+++ b/test/helpers/test_helpers.cpp\n@@ -60,6 +60,10 @@ void TestChangeDirectory(string path) {\n \tFileSystem::SetWorkingDirectory(path);\n }\n \n+string TestGetCurrentDirectory() {\n+\treturn FileSystem::GetWorkingDirectory();\n+}\n+\n void DeleteDatabase(string path) {\n \tif (!custom_test_directory.empty()) {\n \t\treturn;\ndiff --git a/test/include/test_helpers.hpp b/test/include/test_helpers.hpp\nindex 2ced3f07cf38..3444f01d3216 100644\n--- a/test/include/test_helpers.hpp\n+++ b/test/include/test_helpers.hpp\n@@ -37,6 +37,7 @@ void TestDeleteDirectory(string path);\n void TestCreateDirectory(string path);\n void TestDeleteFile(string path);\n void TestChangeDirectory(string path);\n+string TestGetCurrentDirectory();\n string TestDirectoryPath();\n string TestCreatePath(string suffix);\n unique_ptr<DBConfig> GetTestConfig();\ndiff --git a/test/optimizer/joins/tpcds_nofail.test_slow b/test/optimizer/joins/tpcds_nofail.test_slow\nnew file mode 100644\nindex 000000000000..3a400e52be99\n--- /dev/null\n+++ b/test/optimizer/joins/tpcds_nofail.test_slow\n@@ -0,0 +1,31 @@\n+# name: test/optimizer/joins/tpcds_nofail.test_slow\n+# description: This query should not fail\n+# group: [joins]\n+\n+require tpcds\n+\n+statement ok\n+CALL dsdgen(sf=0.01);\n+\n+statement ok\n+select count(*)\n+FROM store_sales\n+,store_returns\n+,date_dim d1\n+,date_dim d2\n+,store\n+,customer\n+,customer_address ad1\n+,customer_address ad2\n+,item\n+WHERE ss_store_sk = s_store_sk AND\n+ss_sold_date_sk = d1.d_date_sk AND\n+ss_customer_sk = c_customer_sk AND\n+ss_addr_sk = ad1.ca_address_sk and\n+ss_item_sk = 94922 and\n+ss_item_sk = sr_item_sk and\n+ss_ticket_number = sr_ticket_number and\n+c_current_addr_sk = ad2.ca_address_sk and\n+c_first_sales_date_sk = d2.d_date_sk\n+;\n+\ndiff --git a/test/optimizer/unnest_rewriter.test b/test/optimizer/unnest_rewriter.test\nindex fde0352df469..dfe8f5cc9ac6 100644\n--- a/test/optimizer/unnest_rewriter.test\n+++ b/test/optimizer/unnest_rewriter.test\n@@ -126,4 +126,25 @@ logical_opt\t<REGEX>:.*DELIM_JOIN.*SINGLE.*\n query II\n EXPLAIN select * from (select [42, 43, 44]) t(a), (select unnest(t.a)) t2(b) where b=43;\n ----\n-logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n\\ No newline at end of file\n+logical_opt\t<!REGEX>:.*DELIM_JOIN.*\n+\n+# test issue #7444\n+\n+statement ok\n+CREATE TABLE with_array(foo INT, arr DOUBLE[]);\n+\n+statement ok\n+INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\n+\n+query IIII\n+SELECT foo, arr, u1, u2 FROM with_array,\n+(SELECT UNNEST(with_array.arr) AS u1,\n+UNNEST(generate_series(1, len(with_array.arr), 1)) AS u2)\n+ORDER BY foo, u2;\n+----\n+1\t[1.0, 2.0, 3.0]\t1.0\t1\n+1\t[1.0, 2.0, 3.0]\t2.0\t2\n+1\t[1.0, 2.0, 3.0]\t3.0\t3\n+2\t[4.0, 5.0, 6.0]\t4.0\t1\n+2\t[4.0, 5.0, 6.0]\t5.0\t2\n+2\t[4.0, 5.0, 6.0]\t6.0\t3\n\\ No newline at end of file\ndiff --git a/test/parallel_csv/test_parallel_csv.cpp b/test/parallel_csv/test_parallel_csv.cpp\nindex f3ed16e9779e..f8d5c37c00c9 100644\n--- a/test/parallel_csv/test_parallel_csv.cpp\n+++ b/test/parallel_csv/test_parallel_csv.cpp\n@@ -79,7 +79,8 @@ bool RunSingleConfiguration(std::string csv_file, idx_t threads, idx_t buffer_si\n \tDuckDB db(nullptr);\n \tConnection con(db);\n \t// Set max line length to 0 when starting a ST CSV Read\n-\tcon.context->client_data->max_line_length = 0;\n+\tcon.context->client_data->debug_set_max_line_length = true;\n+\tcon.context->client_data->debug_max_line_length = 0;\n \tduckdb::unique_ptr<MaterializedQueryResult> single_threaded_res;\n \tColumnDataCollection *ground_truth = nullptr;\n \tbool single_threaded_passed;\n@@ -109,7 +110,8 @@ bool RunFull(std::string &path, duckdb::Connection &conn, std::set<std::string>\n \t}\n \n \t// Set max line length to 0 when starting a ST CSV Read\n-\tconn.context->client_data->max_line_length = 0;\n+\tconn.context->client_data->debug_set_max_line_length = true;\n+\tconn.context->client_data->debug_max_line_length = 0;\n \tduckdb::unique_ptr<MaterializedQueryResult> single_threaded_res;\n \tColumnDataCollection *ground_truth = nullptr;\n \tsingle_threaded_res =\n@@ -121,7 +123,7 @@ bool RunFull(std::string &path, duckdb::Connection &conn, std::set<std::string>\n \t\tground_truth = &single_threaded_res->Collection();\n \t}\n \t// For parallel CSV Reading the buffer must be at least the size of the biggest line in the File.\n-\tidx_t min_buffer_size = conn.context->client_data->max_line_length + 2;\n+\tidx_t min_buffer_size = conn.context->client_data->debug_max_line_length + 2;\n \t// So our tests don't take infinite time, we will go till a max buffer size of 5 positions higher than the minimum.\n \tidx_t max_buffer_size = min_buffer_size + 5;\n \t// Let's go from 1 to 8 threads.\ndiff --git a/test/parquet/invalid_parquet.test b/test/parquet/invalid_parquet.test\nnew file mode 100644\nindex 000000000000..a365e02e3c11\n--- /dev/null\n+++ b/test/parquet/invalid_parquet.test\n@@ -0,0 +1,21 @@\n+# name: test/parquet/invalid_parquet.test\n+# description: Test Parquet Reader on data/parquet-testing/invalid.parquet\n+# group: [parquet]\n+\n+require parquet\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement error\n+SELECT * FROM parquet_scan('data/parquet-testing/invalid.parquet') limit 50;\n+----\n+Invalid Input Error: Invalid string encoding found in Parquet file: value \"TREL\\xC3\" is not valid UTF8!\n+\n+statement ok\n+pragma disable_optimizer\n+\n+statement error\n+SELECT * FROM parquet_scan('data/parquet-testing/invalid.parquet') limit 50;\n+----\n+Invalid Input Error: Invalid string encoding found in Parquet file: value \"TREL\\xC3\" is not valid UTF8!\ndiff --git a/test/sql/attach/attach_home_directory.test b/test/sql/attach/attach_home_directory.test\nnew file mode 100644\nindex 000000000000..60e4bac777db\n--- /dev/null\n+++ b/test/sql/attach/attach_home_directory.test\n@@ -0,0 +1,37 @@\n+# name: test/sql/attach/attach_home_directory.test\n+# description: Test resolution of ATTACH with home directory\n+# group: [attach]\n+\n+# FIXME: ATTACH does not correctly receive the FileOpener of the client\n+mode skip\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+ATTACH '__TEST_DIR__/home_dir.db' AS s1\n+\n+statement ok\n+CREATE TABLE s1.integers AS FROM range(10) t(i);\n+\n+query I\n+SELECT SUM(i) FROM s1.integers\n+----\n+45\n+\n+statement ok\n+DETACH s1\n+\n+statement ok\n+SET home_directory='__TEST_DIR__'\n+\n+statement ok\n+ATTACH '~/home_dir.db' AS s1\n+\n+query I\n+SELECT SUM(i) FROM s1.integers\n+----\n+45\n+\n+statement ok\n+DETACH s1\ndiff --git a/test/sql/attach/attach_index.test b/test/sql/attach/attach_index.test\nnew file mode 100644\nindex 000000000000..eebca517eb40\n--- /dev/null\n+++ b/test/sql/attach/attach_index.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/attach/attach_index.test\n+# description: Issue #6666 - ATTACH fails on duckdb database with INDEX\n+# group: [attach]\n+\n+# USE memory is no longer correct when we load a different database\n+require noforcestorage\n+\n+require skip_reload\n+\n+statement ok\n+ATTACH '__TEST_DIR__/index_db.db'\n+\n+statement ok\n+USE index_db\n+\n+statement ok\n+CREATE TABLE tbl_a (a_id INTEGER PRIMARY KEY, value VARCHAR NOT NULL)\n+\n+statement ok\n+CREATE INDEX idx_tbl_a ON tbl_a (value)\n+\n+statement ok\n+INSERT INTO tbl_a VALUES(1, 'x')\n+\n+statement ok\n+INSERT INTO tbl_a VALUES(2, 'y')\n+\n+query II\n+SELECT * FROM tbl_a WHERE a_id=2\n+----\n+2\ty\n+\n+statement ok\n+USE memory\n+\n+statement ok\n+DETACH index_db\n+\n+statement ok\n+ATTACH '__TEST_DIR__/index_db.db'\n+\n+query II\n+SELECT * FROM index_db.tbl_a WHERE a_id=2\n+----\n+2\ty\ndiff --git a/test/sql/attach/attach_show_all_tables.test b/test/sql/attach/attach_show_all_tables.test\nnew file mode 100644\nindex 000000000000..669fa7f19c04\n--- /dev/null\n+++ b/test/sql/attach/attach_show_all_tables.test\n@@ -0,0 +1,30 @@\n+# name: test/sql/attach/attach_show_all_tables.test\n+# description: Test various DDL statements on an attached database\n+# group: [attach]\n+\n+require noforcestorage\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+ATTACH DATABASE ':memory:' AS new_database;\n+\n+statement ok\n+CREATE SCHEMA new_database.s1;\n+\n+statement ok\n+CREATE TABLE tbl(a INTEGER);\n+\n+statement ok\n+CREATE TABLE new_database.tbl(b INTEGER);\n+\n+statement ok\n+CREATE TABLE new_database.s1.tbl(c INTEGER);\n+\n+query IIIIII\n+SHOW ALL TABLES\n+----\n+memory\tmain\ttbl\t[a]\t[INTEGER]\tfalse\n+new_database\tmain\ttbl\t[b]\t[INTEGER]\tfalse\n+new_database\ts1\ttbl\t[c]\t[INTEGER]\tfalse\ndiff --git a/test/sql/catalog/drop_create_rollback.test b/test/sql/catalog/drop_create_rollback.test\nnew file mode 100644\nindex 000000000000..85941574fa69\n--- /dev/null\n+++ b/test/sql/catalog/drop_create_rollback.test\n@@ -0,0 +1,29 @@\n+# name: test/sql/catalog/drop_create_rollback.test\n+# description: Issue #7274 - crash when recreating table with different case sensitivity but the same name\n+# group: [catalog]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t1 (c1 CHAR(5));\n+\n+statement ok\n+BEGIN TRANSACTION;\n+\n+statement ok\n+DROP TABLE IF EXISTS t1;\n+\n+statement ok\n+CREATE TABLE T1 (C2 CHAR(5));\n+\n+statement ok\n+SELECT C2 FROM T1;\n+\n+statement ok\n+ROLLBACK;\n+\n+statement error\n+SELECT C2 FROM T1;\n+----\n+c1\ndiff --git a/test/sql/copy/csv/batched_write/batch_json_mixed_batches.test_slow b/test/sql/copy/csv/batched_write/batch_json_mixed_batches.test_slow\nnew file mode 100644\nindex 000000000000..37125bb1740c\n--- /dev/null\n+++ b/test/sql/copy/csv/batched_write/batch_json_mixed_batches.test_slow\n@@ -0,0 +1,158 @@\n+# name: test/sql/copy/csv/batched_write/batch_json_mixed_batches.test_slow\n+# description: Test batch CSV write with mixed batches\n+# group: [batched_write]\n+\n+require parquet\n+\n+require json\n+\n+statement ok\n+COPY (FROM range(100000) tbl(i)) TO '__TEST_DIR__/mix_batches_small.parquet' (ROW_GROUP_SIZE 5000)\n+\n+statement ok\n+COPY (FROM range(100000, 400000) tbl(i)) TO '__TEST_DIR__/mix_batches_large.parquet' (ROW_GROUP_SIZE 200000)\n+\n+statement ok\n+COPY (FROM range(400000, 700000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd.parquet' (ROW_GROUP_SIZE 999)\n+\n+statement ok\n+COPY (FROM range(700000, 1000000) tbl(i)) TO '__TEST_DIR__/mix_batches_odd_again.parquet' (ROW_GROUP_SIZE 99979)\n+\n+# create views that read the batches\n+statement ok\n+CREATE VIEW v1 AS SELECT * FROM parquet_scan(['__TEST_DIR__/mix_batches_small.parquet', '__TEST_DIR__/mix_batches_large.parquet', '__TEST_DIR__/mix_batches_odd.parquet',  '__TEST_DIR__/mix_batches_odd_again.parquet'])\n+\n+statement ok\n+CREATE VIEW v2 AS FROM v1 WHERE (i//10000)%2=0;\n+\n+statement ok\n+CREATE VIEW v3 AS FROM v1 WHERE (i//10000)%2=0 OR (i>200000 AND i < 400000) OR (i>600000 AND i < 800000);\n+\n+# empty table\n+statement ok\n+CREATE VIEW v4 AS FROM v1 WHERE i>998 AND i<1000 AND i%2=0\n+\n+foreach ARRAY_SETTING TRUE FALSE\n+\n+query I\n+COPY v1 TO '__TEST_DIR__/mixed_batches_v1.json' (ARRAY ${ARRAY_SETTING})\n+----\n+1000000\n+\n+query I\n+CREATE TABLE mixed_batches_v1 AS FROM '__TEST_DIR__/mixed_batches_v1.json'\n+----\n+1000000\n+\n+foreach table v1 mixed_batches_v1\n+\n+query IIIII\n+SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM ${table}\n+----\n+499999500000\t0\t999999\t1000000\t1000000\n+\n+query I\n+SELECT * FROM ${table} LIMIT 5 OFFSET 99998\n+----\n+99998\n+99999\n+100000\n+100001\n+100002\n+\n+endloop\n+\n+# now do the same, but filter out half of the values\n+query I\n+COPY v2 TO '__TEST_DIR__/mixed_batches_v2.json' (ARRAY ${ARRAY_SETTING})\n+----\n+500000\n+\n+query I\n+CREATE TABLE mixed_batches_v2 AS FROM '__TEST_DIR__/mixed_batches_v2.json'\n+----\n+500000\n+\n+foreach table v2 mixed_batches_v2\n+\n+query IIIII\n+SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM ${table}\n+----\n+247499750000\t0\t989999\t500000\t500000\n+\n+query I\n+SELECT * FROM ${table} LIMIT 5 OFFSET 99998\n+----\n+189998\n+189999\n+200000\n+200001\n+200002\n+\n+endloop\n+\n+# do it again, but this time only filter out SOME small batches\n+query I\n+COPY v3 TO '__TEST_DIR__/mixed_batches_v3.json' (ARRAY ${ARRAY_SETTING})\n+----\n+700000\n+\n+query I\n+CREATE TABLE mixed_batches_v3 AS FROM '__TEST_DIR__/mixed_batches_v3.json'\n+----\n+700000\n+\n+foreach table v3 mixed_batches_v3\n+\n+query IIIII\n+SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM ${table}\n+----\n+348499650000\t0\t989999\t700000\t700000\n+\n+query I\n+SELECT * FROM ${table} LIMIT 5 OFFSET 9999\n+----\n+9999\n+20000\n+20001\n+20002\n+20003\n+\n+endloop\n+\n+query I\n+COPY v4 TO 'mixed_batches_v4.json' (ARRAY ${ARRAY_SETTING})\n+----\n+0\n+\n+query I\n+CREATE TABLE mixed_batches_v4 AS SELECT i::BIGINT as i FROM 'mixed_batches_v4.json' t(i)\n+----\n+0\n+\n+foreach table v4 mixed_batches_v4\n+\n+query IIIII\n+SELECT SUM(i), MIN(i), MAX(i), COUNT(i), COUNT(*) FROM ${table}\n+----\n+NULL\tNULL\tNULL\t0\t0\n+\n+query I\n+SELECT * FROM ${table} LIMIT 5\n+----\n+\n+endloop\n+\n+statement ok\n+DROP TABLE mixed_batches_v1\n+\n+statement ok\n+DROP TABLE mixed_batches_v2\n+\n+statement ok\n+DROP TABLE mixed_batches_v3\n+\n+statement ok\n+DROP TABLE mixed_batches_v4\n+\n+endloop\ndiff --git a/test/sql/copy/csv/batched_write/csv_write_memory_limit.test_slow b/test/sql/copy/csv/batched_write/csv_write_memory_limit.test_slow\nindex 33613ccac64a..c2ce6f2c8d46 100644\n--- a/test/sql/copy/csv/batched_write/csv_write_memory_limit.test_slow\n+++ b/test/sql/copy/csv/batched_write/csv_write_memory_limit.test_slow\n@@ -4,6 +4,8 @@\n \n require parquet\n \n+require 64bit\n+\n # 100M rows, 2 BIGINT columns = 1.6GB uncompressed\n statement ok\n COPY (SELECT i, i // 5 AS j FROM range(100000000) t(i)) TO '__TEST_DIR__/large_integers.parquet'\ndiff --git a/test/sql/copy/csv/copy_to_overwrite.test b/test/sql/copy/csv/copy_to_overwrite.test\nnew file mode 100644\nindex 000000000000..b3fb3eed571b\n--- /dev/null\n+++ b/test/sql/copy/csv/copy_to_overwrite.test\n@@ -0,0 +1,67 @@\n+# name: test/sql/copy/csv/copy_to_overwrite.test\n+# description: Test copy to overwriting behavior\n+# group: [csv]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+SET threads=1;\n+\n+# run with and without preservation of insertion order\n+loop i 0 2\n+\n+statement ok\n+COPY (SELECT * FROM range(5) t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv' (HEADER)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/copy_to_overwrite.csv'\n+----\n+0\n+1\n+2\n+3\n+4\n+\n+statement ok\n+COPY (SELECT * FROM range(5, 10) t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv' (HEADER)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/copy_to_overwrite.csv'\n+----\n+5\n+6\n+7\n+8\n+9\n+\n+# gzip\n+statement ok\n+COPY (SELECT * FROM range(5) t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' (HEADER)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/copy_to_overwrite.csv.gz'\n+----\n+0\n+1\n+2\n+3\n+4\n+\n+statement ok\n+COPY (SELECT * FROM range(5, 10) t(i)) TO '__TEST_DIR__/copy_to_overwrite.csv.gz' (HEADER)\n+\n+query I\n+SELECT * FROM '__TEST_DIR__/copy_to_overwrite.csv.gz'\n+----\n+5\n+6\n+7\n+8\n+9\n+\n+statement ok\n+SET preserve_insertion_order=false\n+\n+endloop\n+\ndiff --git a/test/sql/copy/csv/csv_decimal_separator.test b/test/sql/copy/csv/csv_decimal_separator.test\nindex ad36e886d443..fbaca38a76be 100644\n--- a/test/sql/copy/csv/csv_decimal_separator.test\n+++ b/test/sql/copy/csv/csv_decimal_separator.test\n@@ -2,18 +2,21 @@\n # description: Support decimal separators\n # group: [csv]\n \n-#FIXME: ADD LINE BACK FOR CSV MULTITHREADING ERROR\n-\n require vector_size 512\n \n statement ok\n PRAGMA enable_verification\n \n-# period-separated decimal doesn't parse \n+# period-separated decimal doesn't parse\n statement error\n CREATE TABLE decimal_separators AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'double', 'periods': 'double'}, delim=';', decimal_separator=',')\n ----\n-Could not cast string to double: \"1.1\" in column \"periods\"\n+Invalid Input Error: Could not cast string to double: \"1.1\" in column \"periods\", at line 2.\n+\n+statement error\n+CREATE TABLE decimal_separators AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'double', 'periods': 'double'}, delim=';', decimal_separator=',', parallel = false)\n+----\n+Invalid Input Error: Could not cast string to double: \"1.1\" in column \"periods\", at line 2.\n \n statement ok\n CREATE TABLE decimal_separators AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'double'}, delim=';', decimal_separator=',')\n@@ -42,13 +45,23 @@ Could not convert string \"1,1\" to DECIMAL(18,3) in column \"commas\"\n statement error\n CREATE TABLE decimal_separators2 AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'double', 'periods': 'decimal'}, delim=';', decimal_separator='.')\n ----\n-Could not convert string '1,1' to DOUBLE in column \"commas\"\n+Invalid Input Error: Could not convert string '1,1' to DOUBLE in column \"commas\", at line 2.\n+\n+statement error\n+CREATE TABLE decimal_separators2 AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'double', 'periods': 'decimal'}, delim=';', decimal_separator='.', parallel = false)\n+----\n+Invalid Input Error: Could not convert string '1,1' to DOUBLE in column \"commas\", at line 2.\n \n # reading the commas column as float fails when decimal separator is set to '.'\n statement error\n CREATE TABLE decimal_separators2 AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'float', 'periods': 'decimal'}, delim=';', decimal_separator='.')\n ----\n-Could not convert string '1,1' to FLOAT in column \"commas\"\n+Invalid Input Error: Could not convert string '1,1' to FLOAT in column \"commas\", at line 2.\n+\n+statement error\n+CREATE TABLE decimal_separators2 AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'float', 'periods': 'decimal'}, delim=';', decimal_separator='.', parallel = false)\n+----\n+Invalid Input Error: Could not convert string '1,1' to FLOAT in column \"commas\", at line 2.\n \n statement ok\n CREATE TABLE decimal_separators2 AS SELECT * FROM read_csv_auto('data/csv/decimal_separators/decimal_separators.csv', header=1, column_types={'commas': 'decimal'}, delim=';', decimal_separator=',')\n@@ -107,4 +120,9 @@ Binder Error: Unsupported parameter for DECIMAL_SEPARATOR: should be '.' or ','\n statement error\n SELECT * FROM read_csv_auto('data/csv/decimal_separators/mixed_format_fail.csv', header=true, column_types={'foo': 'double'}, decimal_separator=',', skip=0)\n ----\n-Could not cast string to double: \"5.25\" in column \"foo\"\n\\ No newline at end of file\n+Invalid Input Error: Could not cast string to double: \"5.25\" in column \"foo\", at line 4.\n+\n+statement error\n+SELECT * FROM read_csv_auto('data/csv/decimal_separators/mixed_format_fail.csv', header=true, column_types={'foo': 'double'}, decimal_separator=',', skip=0, parallel = false)\n+----\n+Invalid Input Error: Could not cast string to double: \"5.25\" in column \"foo\", at line 4.\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/csv_error_message.test b/test/sql/copy/csv/csv_error_message.test\nindex 083ada9ba3e4..e9ce89af2656 100644\n--- a/test/sql/copy/csv/csv_error_message.test\n+++ b/test/sql/copy/csv/csv_error_message.test\n@@ -2,7 +2,6 @@\n # description: Various CSV reader error messages\n # group: [csv]\n \n-#FIXME: ADD LINE BACK FOR CSV MULTITHREADING ERROR\n statement ok\n PRAGMA enable_verification\n \n@@ -11,11 +10,23 @@ COPY (SELECT i::VARCHAR i FROM range(103) tbl(i) UNION ALL SELECT 'hello') TO '_\n \n statement error\n SELECT * FROM read_csv('__TEST_DIR__/int_parse_error.csv', columns={'i': 'INT'}, header=True)\n+----\n+line 105\n \n+statement error\n+SELECT * FROM read_csv('__TEST_DIR__/int_parse_error.csv', columns={'i': 'INT'}, header=True, parallel = false)\n+----\n+line 105\n \n statement ok\n COPY (SELECT i::VARCHAR i FROM range(103) tbl(i) UNION ALL SELECT 'hello') TO '__TEST_DIR__/int_parse_error.csv' (HEADER 0, DELIMITER '|')\n \n statement error\n SELECT * FROM read_csv('__TEST_DIR__/int_parse_error.csv', columns={'i': 'INT'}, header=False)\n+----\n+line 104\n \n+statement error\n+SELECT * FROM read_csv('__TEST_DIR__/int_parse_error.csv', columns={'i': 'INT'}, header=False, parallel = false)\n+----\n+line 104\ndiff --git a/test/sql/copy/csv/csv_roundtrip_single_null.test b/test/sql/copy/csv/csv_roundtrip_single_null.test\nnew file mode 100644\nindex 000000000000..a57bc41421a2\n--- /dev/null\n+++ b/test/sql/copy/csv/csv_roundtrip_single_null.test\n@@ -0,0 +1,22 @@\n+# name: test/sql/copy/csv/csv_roundtrip_single_null.test\n+# description: Round-trip a single NULL value\n+# group: [csv]\n+\n+require vector_size 512\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+COPY (SELECT NULL) TO '__TEST_DIR__/single_null.csv' (HEADER 0)\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER);\n+\n+statement ok\n+COPY integers FROM '__TEST_DIR__/single_null.csv' (HEADER 0)\n+\n+query I\n+FROM integers\n+----\n+NULL\ndiff --git a/test/sql/copy/csv/csv_windows_mixed_separators.test b/test/sql/copy/csv/csv_windows_mixed_separators.test\nnew file mode 100644\nindex 000000000000..765c24f35627\n--- /dev/null\n+++ b/test/sql/copy/csv/csv_windows_mixed_separators.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/copy/csv/csv_windows_mixed_separators.test\n+# description: Test mixed separators on Windows\n+# group: [csv]\n+\n+require windows\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# \\  and / are interchangeable on Windows\n+query I\n+SELECT * FROM 'test\\sql/copy\\csv/data\\test/date.csv'\n+----\n+2019-06-05\n+\n+query I\n+SELECT * FROM glob('test\\sql/copy\\csv\\data/test/*.csv') t(g) WHERE g LIKE '%date.csv'\n+----\n+test\\sql\\copy\\csv\\data\\test\\date.csv\n+\n+# also for attach\n+statement ok\n+ATTACH '__TEST_DIR__/windows_test.db' AS s1\n+\n+statement  ok\n+CREATE TABLE s1.tbl AS SELECT * FROM range(10) t(i);\n+\n+query I\n+SELECT SUM(i) FROM s1.tbl\n+----\n+45\n+\n+statement ok\n+DETACH s1\n+\n+statement ok\n+ATTACH '__TEST_DIR__\\windows_test.db' AS s1\n+\n+query I\n+SELECT SUM(i) FROM s1.tbl\n+----\n+45\n+\n+statement ok\n+DETACH s1\ndiff --git a/test/sql/copy/csv/glob/copy_csv_glob_s3.test b/test/sql/copy/csv/glob/copy_csv_glob_s3.test\nindex c6240db8a0a1..a59385cb2e3d 100644\n--- a/test/sql/copy/csv/glob/copy_csv_glob_s3.test\n+++ b/test/sql/copy/csv/glob/copy_csv_glob_s3.test\n@@ -24,9 +24,17 @@ set ignore_error_messages\n # copy files to S3 before beginning tests\n statement ok\n COPY (select * from 'test/sql/copy/csv/data/glob/a1/a1.csv') to 's3://test-bucket/copy_csv_glob_s3/copy/a1/a1.csv';\n+\n+statement ok\n COPY (select * from 'test/sql/copy/csv/data/glob/a2/a2.csv') to 's3://test-bucket/copy_csv_glob_s3/copy/a2/a2.csv';\n+\n+statement ok\n COPY (select * from 'test/sql/copy/csv/data/glob/a3/b1.csv') to 's3://test-bucket/copy_csv_glob_s3/copy/a3/b1.csv';\n+\n+statement ok\n COPY (select null) to 's3://test-bucket/glob/copy/empty/empty.csv';\n+\n+statement ok\n COPY (select * from 'test/sql/copy/csv/data/glob/i1/integer.csv') to 's3://test-bucket/copy_csv_glob_s3/copy/empty/integer.csv';\n \n statement ok\ndiff --git a/test/sql/copy/csv/glob/read_csv_glob_crawl.test b/test/sql/copy/csv/glob/read_csv_glob_crawl.test\nindex d1515ce6ba82..f5bcd8fb9ba4 100644\n--- a/test/sql/copy/csv/glob/read_csv_glob_crawl.test\n+++ b/test/sql/copy/csv/glob/read_csv_glob_crawl.test\n@@ -172,14 +172,6 @@ FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/hidden/**');\n 42\t42\n 42\t42\n \n-# symlink test: symlinks will not be searched\n-query I\n-FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/.symbolic_link/**');\n-----\n--42\n-\n-\n-\n #  additional tests\n statement ok\n CREATE TABLE t0 AS SELECT (i%2) AS c_2, (i%3) AS c_3, (i*i) AS c_pow FROM RANGE(0,10) tbl(i);\n@@ -312,12 +304,15 @@ select count(*) from glob('__TEST_DIR__/partitioned0/c_2=0/**/data_0.csv')\n ----\n 3\n \n+require notwindows\n \n+# symlink test: symlinks will not be searched\n+query I\n+FROM read_csv_auto('test/sql/copy/csv/data/glob/crawl/.symbolic_link/**');\n+----\n+-42\n \n \n-\n-require notwindows\n-\n statement error\n SELECT sum(column0) FROM read_csv('test/sql/copy/csv/data/glob/crawl/d/**/', auto_detect=1);\n ----\ndiff --git a/test/sql/copy/csv/parallel/csv_parallel_buffer_size.test b/test/sql/copy/csv/parallel/csv_parallel_buffer_size.test\nindex a6c15183e173..af7bec63db39 100644\n--- a/test/sql/copy/csv/parallel/csv_parallel_buffer_size.test\n+++ b/test/sql/copy/csv/parallel/csv_parallel_buffer_size.test\n@@ -12,27 +12,27 @@ statement ok\n pragma threads=${thr}\n \n statement error\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=5)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=5, parallel=True)\n ----\n Line does not fit in one buffer\n \n query III\n-SELECT sum(a), sum(b), sum(c) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30)\n+SELECT sum(a), sum(b), sum(c) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30, parallel=True)\n ----\n 111111111\t51866\t3195\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30, parallel=True)\n ----\n 111111111\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/multi_column_integer_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER'), auto_detect='true', delim = '|', buffer_size=30, parallel=True)\n ----\n 111111111\n \n query IIII\n-select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=25)\n+select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=25, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -45,7 +45,7 @@ select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  C\n 100000000\t15519\t785\tp9\n \n query IIII\n-select * from read_csv('test/sql/copy/csv/data/test/multi_column_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=25)\n+select * from read_csv('test/sql/copy/csv/data/test/multi_column_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=25, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -58,34 +58,34 @@ select * from read_csv('test/sql/copy/csv/data/test/multi_column_string_rn.csv',\n 100000000\t15519\t785\tp9\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|')\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', parallel=True)\n ----\n 111\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60, parallel=True)\n ----\n 111\n \n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn_exc.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|')\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn_exc.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', parallel=True)\n ----\n 111\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn_exc.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string_rn_exc.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60, parallel=True)\n ----\n 111\n \n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|')\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', parallel=True)\n ----\n 111\n \n query I\n-SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60)\n+SELECT sum(a) FROM read_csv('test/sql/copy/csv/data/test/new_line_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='true', delim = '|', buffer_size=60, parallel=True)\n ----\n 111\n \ndiff --git a/test/sql/copy/csv/parallel/csv_parallel_new_line.test b/test/sql/copy/csv/parallel/csv_parallel_new_line.test\nindex c16ef3ce6154..393f4d5124fd 100644\n--- a/test/sql/copy/csv/parallel/csv_parallel_new_line.test\n+++ b/test/sql/copy/csv/parallel/csv_parallel_new_line.test\n@@ -17,7 +17,7 @@ pragma threads=${thr}\n \n # Test read_csv auto with \\n\n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv', buffer_size=${i})\n+select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv', buffer_size=${i}, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -31,7 +31,7 @@ select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv\n \n # Test read_csv auto with \\r\n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_r.csv', buffer_size=${i})\n+select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_r.csv', buffer_size=${i}, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -45,7 +45,7 @@ select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_r.c\n \n # Test read_csv auto with mix \\r and \\n\n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_mix_r_n.csv', buffer_size=${i})\n+select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_mix_r_n.csv', buffer_size=${i}, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -60,7 +60,7 @@ select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_mix\n \n # Test read_csv auto with \\r\\n\n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string_rn.csv', buffer_size=${i}, header=False)\n+select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string_rn.csv', buffer_size=${i}, header=False, parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -78,7 +78,7 @@ endloop\n \n # Test read_csv auto with mix \\r, \\n and \\r\\n (This must always run single threaded)\n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_mix.csv')\n+select * from read_csv_auto('test/sql/copy/csv/data/auto/multi_column_string_mix.csv', parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -100,12 +100,12 @@ statement ok\n pragma threads=${thr}\n \n statement error\n-select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='false', delim = '|', new_line = '\\r\\n')\n+select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='false', delim = '|', new_line = '\\r\\n', parallel=True)\n \n \n # Test read_csv with user defined variable\n query IIII\n-select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='false', delim = '|', new_line = '\\n')\n+select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  COLUMNS=STRUCT_PACK(a := 'INTEGER', b := 'INTEGER', c := 'INTEGER', d := 'VARCHAR'), auto_detect='false', delim = '|', new_line = '\\n', parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -118,10 +118,10 @@ select * from read_csv('test/sql/copy/csv/data/test/multi_column_string.csv',  C\n 100000000\t15519\t785\tp9\n \n statement error\n-select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',  new_line = '\\r\\n')\n+select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',  new_line = '\\r\\n', parallel=True)\n \n query IIII\n-select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',   new_line = '\\n')\n+select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',   new_line = '\\n', parallel=True)\n ----\n 1\t6370\t371\tp1\n 10\t214\t465\tp2\n@@ -134,6 +134,6 @@ select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv\n 100000000\t15519\t785\tp9\n \n statement error\n-select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',  new_line = 'not_valid')\n+select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string.csv',  new_line = 'not_valid', parallel=True)\n \n endloop\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/parallel/test_parallel_csv.test b/test/sql/copy/csv/parallel/test_parallel_csv.test\nnew file mode 100644\nindex 000000000000..d700b1a04b5c\n--- /dev/null\n+++ b/test/sql/copy/csv/parallel/test_parallel_csv.test\n@@ -0,0 +1,289 @@\n+# name: test/sql/copy/csv/parallel/test_parallel_csv.test\n+# description: Test parallel read CSV function on ghub bugs\n+# group: [parallel]\n+\n+# force parallelism of the queries\n+statement ok\n+PRAGMA verify_parallelism\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+\n+query III\n+select * from read_csv_auto('data/csv/dirty_line.csv', parallel = true)\n+----\n+1.5\ta\t3\n+2.5\tb\t4\n+\n+query II\n+explain select * from read_csv_auto('data/csv/dirty_line.csv', parallel = true)\n+----\n+physical_plan\t<REGEX>:.*MULTI.*\n+\n+\n+query III\n+select * from read_csv_auto('data/csv/dirty_line.csv', parallel = false)\n+----\n+1.5\ta\t3\n+2.5\tb\t4\n+\n+query II\n+select * from read_csv_auto('data/csv/null_string.csv', parallel = true, nullstr=\"null\")\n+----\n+1\tNULL\n+NULL\t2\n+\n+query II\n+select * from read_csv_auto('data/csv/null_string.csv', parallel = true)\n+----\n+a\tb\n+1\tnull\n+null\t2\n+\n+\n+query II\n+explain select * from read_csv_auto('data/csv/null_string.csv', parallel = true, nullstr=\"null\")\n+----\n+physical_plan\t<REGEX>:.*MULTI.*\n+\n+\n+query II\n+select * from read_csv_auto('data/csv/null_string.csv', parallel = false, nullstr=\"null\")\n+----\n+1\tNULL\n+NULL\t2\n+\n+\n+query IIIIIIIIII\n+select * from read_csv_auto('data/csv/aws_locations.csv', parallel = true)\n+----\n+IAD\tWashington\tDistrict of Columbia\tUnited States\tUS\t20\t38.94449997\t-77.45580292\tNorth America\tUnited States, Mexico, & Canada\n+ORD\tChicago\tIllinois\tUnited States\tUS\t20\t41.978611\t-87.904722\tNorth America\tUnited States, Mexico, & Canada\n+JFK\tNew York\tNew York\tUnited States\tUS\t8\t40.639801\t-73.7789\tNorth America\tUnited States, Mexico, & Canada\n+ATL\tAtlanta\tGeorgia\tUnited States\tUS\t17\t33.6367\t-84.428101\tNorth America\tUnited States, Mexico, & Canada\n+LAX\tLos Angeles\tCalifornia\tUnited States\tUS\t15\t33.942501\t-118.407997\tNorth America\tUnited States, Mexico, & Canada\n+MIA\tMiami\tFlorida\tUnited States\tUS\t11\t25.79319953918457\t-80.29060363769531\tNorth America\tUnited States, Mexico, & Canada\n+DFW\tDallas-Fort Worth\tTexas\tUnited States\tUS\t18\t32.896801\t-97.038002\tNorth America\tUnited States, Mexico, & Canada\n+IAH\tHouston\tTexas\tUnited States\tUS\t6\t29.984399795532227\t-95.34140014648438\tNorth America\tUnited States, Mexico, & Canada\n+SFO\tSan Francisco\tCalifornia\tUnited States\tUS\t8\t37.61899948120117\t-122.375\tNorth America\tUnited States, Mexico, & Canada\n+BOS\tBoston\tMassachusetts\tUnited States\tUS\t5\t42.36429977\t-71.00520325\tNorth America\tUnited States, Mexico, & Canada\n+DEN\tDenver\tColorado\tUnited States\tUS\t6\t39.861698150635\t-104.672996521\tNorth America\tUnited States, Mexico, & Canada\n+PDX\tPortland\tOregon\tUnited States\tUS\t2\t45.58869934\t-122.5979996\tNorth America\tUnited States, Mexico, & Canada\n+SEA\tSeattle\tWashington\tUnited States\tUS\t6\t47.448889\t-122.309444\tNorth America\tUnited States, Mexico, & Canada\n+MSP\tMinneapolis\tMinnesota\tUnited States\tUS\t4\t44.882\t-93.221802\tNorth America\tUnited States, Mexico, & Canada\n+PHX\tPhoenix\tArizona\tUnited States\tUS\t3\t33.43429946899414\t-112.01200103759766\tNorth America\tUnited States, Mexico, & Canada\n+PHL\tPhiladelphia\tPennsylvania\tUnited States\tUS\t2\t39.87189865112305\t-75.24109649658203\tNorth America\tUnited States, Mexico, & Canada\n+SLC\tSalt Lake City\tUtah\tUnited States\tUS\t1\t40.78839874267578\t-111.97799682617188\tNorth America\tUnited States, Mexico, & Canada\n+BNA\tNashville\tTennessee\tUnited States\tUS\t2\t36.1245002746582\t-86.6781997680664\tNorth America\tUnited States, Mexico, & Canada\n+DTW\tDetroit\tMichigan\tUnited States\tUS\t2\t42.212398529052734\t-83.35340118408203\tNorth America\tUnited States, Mexico, & Canada\n+TPA\tTampa\tFlorida\tUnited States\tUS\t2\t27.975500106811523\t-82.533203125\tNorth America\tUnited States, Mexico, & Canada\n+EWR\tNewark\tNew Jersey\tUnited States\tUS\t10\t40.692501068115234\t-74.168701171875\tNorth America\tUnited States, Mexico, & Canada\n+CMH\tColumbus\tOhio\tUnited States\tUS\t2\t39.998001\t-82.891899\tNorth America\tUnited States, Mexico, & Canada\n+MCI\tKansas City\tMissouri\tUnited States\tUS\t2\t39.2976\t-94.713898\tNorth America\tUnited States, Mexico, & Canada\n+QRO\tQueretaro\tNULL\tNorth America\tMX\t1\t20.6173\t-100.185997\tundefined\tnull\n+FRA\tFrankfurt am Main\tNULL\tGermany\tDE\t17\t50.033333\t8.570556\tEurope\tEurope & Israel\n+DUS\tD\u00fcsseldorf\tNULL\tGermany\tDE\t3\t51.289501\t6.76678\tEurope\tEurope & Israel\n+HAM\tHamburg\tNULL\tGermany\tDE\t6\t53.630401611328\t9.9882297515869\tEurope\tEurope & Israel\n+MUC\tMunich\tNULL\tGermany\tDE\t4\t48.353802\t11.7861\tEurope\tEurope & Israel\n+TXL\tBerlin\tNULL\tGermany\tDE\t5\t52.559722\t13.287778\tEurope\tEurope & Israel\n+CDG\tParis\tNULL\tFrance\tFR\t11\t49.012798\t2.55\tEurope\tEurope & Israel\n+MRS\tMarseille\tNULL\tFrance\tFR\t6\t43.439271922\t5.22142410278\tEurope\tEurope & Israel\n+MXP\tMilan\tNULL\tItaly\tIT\t9\t45.6306\t8.72811\tEurope\tEurope & Israel\n+FCO\tRome\tNULL\tItaly\tIT\t6\t41.8002778\t12.2388889\tEurope\tEurope & Israel\n+PMO\tPalermo\tNULL\tItaly\tIT\t1\t38.175999\t13.091\tEurope\tEurope & Israel\n+AMS\tAmsterdam\tNULL\tNetherlands\tNL\t5\t52.308601\t4.76389\tEurope\tEurope & Israel\n+MAN\tManchester\tNULL\tUK\tGB\t5\t53.35369873046875\t-2.2749500274658203\tEurope\tEurope & Israel\n+LHR\tLondon\tNULL\tUK\tGB\t25\t51.4775\t-0.461389\tEurope\tEurope & Israel\n+DUB\tDublin\tNULL\tIreland\tIE\t2\t53.421299\t-6.27007\tEurope\tEurope & Israel\n+VIE\tVienna\tNULL\tAustria\tAT\t3\t48.110298156738\t16.569700241089\tEurope\tEurope & Israel\n+ARN\tStockholm\tNULL\tSweden\tSE\t4\t59.651901245117\t17.918600082397\tEurope\tEurope & Israel\n+CPH\tCopenhagen\tNULL\tDenmark\tDK\t3\t55.617900848389\t12.656000137329\tEurope\tEurope & Israel\n+HEL\tHelsinki\tNULL\tFinland\tFI\t4\t60.317199707031\t24.963300704956\tEurope\tEurope & Israel\n+ATH\tAthens\tNULL\tGreece\tGR\t1\t37.9364013672\t23.9444999695\tEurope\tEurope & Israel\n+BRU\tBrussels\tNULL\tBelgium\tBE\t1\t50.901401519800004\t4.48443984985\tEurope\tEurope & Israel\n+BUD\tBudapest\tNULL\tHungary\tHU\t1\t47.42976\t19.261093\tEurope\tEurope & Israel\n+LIS\tLisbon\tNULL\tPortugal\tPT\t1\t38.7813\t-9.13592\tEurope\tEurope & Israel\n+OSL\tOslo\tNULL\tNorway\tNO\t2\t60.193901062012\t11.100399971008\tEurope\tEurope & Israel\n+OTP\tBucharest\tNULL\tRomania\tRO\t1\t44.5711111\t26.085\tEurope\tEurope & Israel\n+PRG\tPrague\tNULL\tCzech Republic\tCZ\t1\t50.1008\t14.26\tEurope\tEurope & Israel\n+SOF\tSofia\tNULL\tBulgaria\tBG\t1\t42.696693420410156\t23.411436080932617\tEurope\tEurope & Israel\n+WAW\tWarsaw\tNULL\tPoland\tPL\t3\t52.165833\t20.967222\tEurope\tEurope & Israel\n+ZAG\tZagreb\tNULL\tCroatia\tHR\t1\t45.7429008484\t16.0687999725\tEurope\tEurope & Israel\n+ZRH\tZurich\tNULL\tSwitzerland\tCH\t2\t47.464699\t8.54917\tEurope\tEurope & Israel\n+BCN\tBarcelona\tNULL\tSpain\tES\t2\t41.2971\t2.07846\tEurope\tEurope & Israel\n+MAD\tMadrid\tNULL\tSpain\tES\t10\t40.471926\t-3.56264\tEurope\tEurope & Israel\n+DEL\tNew Delhi\tNULL\tIndia\tIN\t14\t28.5665\t77.103104\tAsia\tIndia\n+MAA\tChennai\tNULL\tIndia\tIN\t8\t12.990005493164062\t80.16929626464844\tAsia\tIndia\n+BOM\tMumbai\tNULL\tIndia\tIN\t8\t19.0886993408\t72.8678970337\tAsia\tIndia\n+PNQ\tPune\tNULL\tIndia\tIN\t4\t18.58209991455078\t73.9197006225586\tAsia\tIndia\n+BLR\tBangalore\tNULL\tIndia\tIN\t5\t13.1979\t77.706299\tAsia\tIndia\n+HYD\tHyderabad\tNULL\tIndia\tIN\t5\t17.231318\t78.429855\tAsia\tIndia\n+SIN\tSingapore\tNULL\tSingapore\tSG\t7\t1.35019\t103.994003\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+KIX\tOsaka\tNULL\tJapan\tJP\t5\t34.42729949951172\t135.24400329589844\tAsia\tJapan\n+NRT\tTokyo\tNULL\tJapan\tJP\t22\t35.764702\t140.386002\tAsia\tJapan\n+TPE\tTaoyuan\tNULL\tTaiwan\tTW\t3\t25.0777\t121.233002\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+ICN\tSeoul\tNULL\tKorea\tKR\t8\t37.46910095214844\t126.45099639892578\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+BKK\tBangkok\tNULL\tThailand\tTH\t2\t13.689999\t100.750114\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+CCU\tKolkata\tNULL\tIndia\tIN\t2\t22.654699325561523\t88.44670104980469\tAsia\tIndia\n+CGK\tJakarta\tNULL\tIndonesia\tID\t5\t-6.1255698204\t106.65599823\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+KUL\tKuala Lumpur\tNULL\tMalaysia\tMY\t2\t2.745579957962\t101.70999908447\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+MNL\tManila\tNULL\tPhilippines\tPH\t1\t14.5086\t121.019997\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+HAN\tHanoi\tNULL\tVietnam\tVN\t1\t21.221200942993164\t105.80699920654297\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+SGN\tHo Chi Minh City\tNULL\tVietnam\tVN\t1\t10.8187999725\t106.652000427\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+SYD\tSydney\tNULL\tAustralia\tAU\t4\t-33.94609832763672\t151.177001953125\tAustralia & New Zealand\tAustralia & New Zealand\n+AKL\tAuckland\tNULL\tNew Zealand\tNZ\t2\t-37.008098602299995\t174.792007446\tAustralia & New Zealand\tAustralia & New Zealand\n+MEL\tMelbourne\tNULL\tAustralia\tAU\t3\t-37.673302\t144.843002\tAustralia & New Zealand\tAustralia & New Zealand\n+PER\tPerth\tNULL\tAustralia\tAU\t1\t-31.94029998779297\t115.96700286865234\tAustralia & New Zealand\tAustralia & New Zealand\n+GRU\tSao Paulo\tNULL\tBrazil\tBR\t8\t-23.435556\t-46.473056\tSouth America\tSouth America\n+GIG\tRio De Janeiro\tNULL\tBrazil\tBR\t5\t-22.8099994659\t-43.2505569458\tSouth America\tSouth America\n+FOR\tFortaleza\tNULL\tBrazil\tBR\t4\t-3.776279926300049\t-38.53260040283203\tSouth America\tSouth America\n+BOG\tBogota\tNULL\tColombia\tCO\t3\t4.70159\t-74.1469\tSouth America\tSouth America\n+EZE\tBuenos Aires\tNULL\tArgentina\tAR\t2\t-34.8222\t-58.5358\tSouth America\tSouth America\n+SCL\tSantiago\tNULL\tChile\tCL\t3\t-33.393001556396484\t-70.78579711914062\tSouth America\tSouth America\n+LIM\tLima\tNULL\tPeru\tPE\t2\t-12.0219\t-77.114305\tSouth America\tSouth America\n+TLV\tTel Aviv\tNULL\tIsrael\tIL\t2\t32.01139831542969\t34.88669967651367\tMiddle East\tEurope & Israel\n+BAH\tManama\tNULL\tBahrain\tBH\t2\t26.27079963684082\t50.63359832763672\tMiddle East\tSouth Africa, Kenya, & Middle East\n+DXB\tDubai\tNULL\tUAE\tAE\t1\t25.2527999878\t55.3643989563\tMiddle East\tSouth Africa, Kenya, & Middle East\n+FJR\tFujairah\tNULL\tUAE\tAE\t3\t25.112222\t56.324167\tMiddle East\tSouth Africa, Kenya, & Middle East\n+MCT\tMuscat\tNULL\tOman\tOM\t1\t23.593299865722656\t58.284400939941406\tMiddle East\tSouth Africa, Kenya, & Middle East\n+CPT\tCape Town\tNULL\tSouth Africa\tZA\t1\t-33.9648017883\t18.6016998291\tAfrica\tSouth Africa, Kenya, & Middle East\n+JNB\tJohannesburg\tNULL\tSouth Africa\tZA\t1\t-26.1392\t28.246\tAfrica\tSouth Africa, Kenya, & Middle East\n+NBO\tNairobi\tNULL\tKenya\tKE\t1\t-1.31923997402\t36.9277992249\tAfrica\tSouth Africa, Kenya, & Middle East\n+PVG\tShanghai\tNULL\tChina\tCN\t1\t31.143400192260742\t121.80500030517578\tChina\tChina\n+SZX\tShenzhen\tNULL\tChina\tCN\t1\t22.639299392700195\t113.81099700927734\tChina\tChina\n+ZHY\tZhongwei\tNULL\tChina\tCN\t1\t37.572778\t105.154444\tChina\tChina\n+PEK\tBeijing\tNULL\tChina\tCN\t1\t40.080101013183594\t116.58499908447266\tChina\tChina\n+HKG\tHong Kong\tNULL\tChina\tHK\t4\t22.308901\t113.915001\tChina\tChina\n+CMH\tColumbus\tOhio\tUnited States\tUS\t1\t39.998056\t-82.891944\tNorth America\tUnited States, Mexico, & Canada\n+HIO\tHillsboro\tOregon\tUnited States\tUS\t1\t45.540394\t-122.949825\tNorth America\tUnited States, Mexico, & Canada\n+TPA\tTampa\tFlorida\tUnited States\tUS\t1\t27.979722\t-82.534722\tNorth America\tUnited States, Mexico, & Canada\n+PNQ\tPune\tMaharashtra\tIndia\tIN\t1\t18.582222\t73.919722\tAsia\tIndia\n+MCT\tMuscat\tMuscat\tOman\tOM\t1\t23.6015386\t58.2899376\tMiddle East\tSouth Africa, Kenya, & Middle East\n+\n+query II\n+explain select * from read_csv_auto('data/csv/aws_locations.csv', parallel = true)\n+----\n+physical_plan\t<REGEX>:.*MULTI.*\n+\n+\n+query IIIIIIIIII\n+select * from read_csv_auto('data/csv/aws_locations.csv', parallel = false)\n+----\n+IAD\tWashington\tDistrict of Columbia\tUnited States\tUS\t20\t38.94449997\t-77.45580292\tNorth America\tUnited States, Mexico, & Canada\n+ORD\tChicago\tIllinois\tUnited States\tUS\t20\t41.978611\t-87.904722\tNorth America\tUnited States, Mexico, & Canada\n+JFK\tNew York\tNew York\tUnited States\tUS\t8\t40.639801\t-73.7789\tNorth America\tUnited States, Mexico, & Canada\n+ATL\tAtlanta\tGeorgia\tUnited States\tUS\t17\t33.6367\t-84.428101\tNorth America\tUnited States, Mexico, & Canada\n+LAX\tLos Angeles\tCalifornia\tUnited States\tUS\t15\t33.942501\t-118.407997\tNorth America\tUnited States, Mexico, & Canada\n+MIA\tMiami\tFlorida\tUnited States\tUS\t11\t25.79319953918457\t-80.29060363769531\tNorth America\tUnited States, Mexico, & Canada\n+DFW\tDallas-Fort Worth\tTexas\tUnited States\tUS\t18\t32.896801\t-97.038002\tNorth America\tUnited States, Mexico, & Canada\n+IAH\tHouston\tTexas\tUnited States\tUS\t6\t29.984399795532227\t-95.34140014648438\tNorth America\tUnited States, Mexico, & Canada\n+SFO\tSan Francisco\tCalifornia\tUnited States\tUS\t8\t37.61899948120117\t-122.375\tNorth America\tUnited States, Mexico, & Canada\n+BOS\tBoston\tMassachusetts\tUnited States\tUS\t5\t42.36429977\t-71.00520325\tNorth America\tUnited States, Mexico, & Canada\n+DEN\tDenver\tColorado\tUnited States\tUS\t6\t39.861698150635\t-104.672996521\tNorth America\tUnited States, Mexico, & Canada\n+PDX\tPortland\tOregon\tUnited States\tUS\t2\t45.58869934\t-122.5979996\tNorth America\tUnited States, Mexico, & Canada\n+SEA\tSeattle\tWashington\tUnited States\tUS\t6\t47.448889\t-122.309444\tNorth America\tUnited States, Mexico, & Canada\n+MSP\tMinneapolis\tMinnesota\tUnited States\tUS\t4\t44.882\t-93.221802\tNorth America\tUnited States, Mexico, & Canada\n+PHX\tPhoenix\tArizona\tUnited States\tUS\t3\t33.43429946899414\t-112.01200103759766\tNorth America\tUnited States, Mexico, & Canada\n+PHL\tPhiladelphia\tPennsylvania\tUnited States\tUS\t2\t39.87189865112305\t-75.24109649658203\tNorth America\tUnited States, Mexico, & Canada\n+SLC\tSalt Lake City\tUtah\tUnited States\tUS\t1\t40.78839874267578\t-111.97799682617188\tNorth America\tUnited States, Mexico, & Canada\n+BNA\tNashville\tTennessee\tUnited States\tUS\t2\t36.1245002746582\t-86.6781997680664\tNorth America\tUnited States, Mexico, & Canada\n+DTW\tDetroit\tMichigan\tUnited States\tUS\t2\t42.212398529052734\t-83.35340118408203\tNorth America\tUnited States, Mexico, & Canada\n+TPA\tTampa\tFlorida\tUnited States\tUS\t2\t27.975500106811523\t-82.533203125\tNorth America\tUnited States, Mexico, & Canada\n+EWR\tNewark\tNew Jersey\tUnited States\tUS\t10\t40.692501068115234\t-74.168701171875\tNorth America\tUnited States, Mexico, & Canada\n+CMH\tColumbus\tOhio\tUnited States\tUS\t2\t39.998001\t-82.891899\tNorth America\tUnited States, Mexico, & Canada\n+MCI\tKansas City\tMissouri\tUnited States\tUS\t2\t39.2976\t-94.713898\tNorth America\tUnited States, Mexico, & Canada\n+QRO\tQueretaro\tNULL\tNorth America\tMX\t1\t20.6173\t-100.185997\tundefined\tnull\n+FRA\tFrankfurt am Main\tNULL\tGermany\tDE\t17\t50.033333\t8.570556\tEurope\tEurope & Israel\n+DUS\tD\u00fcsseldorf\tNULL\tGermany\tDE\t3\t51.289501\t6.76678\tEurope\tEurope & Israel\n+HAM\tHamburg\tNULL\tGermany\tDE\t6\t53.630401611328\t9.9882297515869\tEurope\tEurope & Israel\n+MUC\tMunich\tNULL\tGermany\tDE\t4\t48.353802\t11.7861\tEurope\tEurope & Israel\n+TXL\tBerlin\tNULL\tGermany\tDE\t5\t52.559722\t13.287778\tEurope\tEurope & Israel\n+CDG\tParis\tNULL\tFrance\tFR\t11\t49.012798\t2.55\tEurope\tEurope & Israel\n+MRS\tMarseille\tNULL\tFrance\tFR\t6\t43.439271922\t5.22142410278\tEurope\tEurope & Israel\n+MXP\tMilan\tNULL\tItaly\tIT\t9\t45.6306\t8.72811\tEurope\tEurope & Israel\n+FCO\tRome\tNULL\tItaly\tIT\t6\t41.8002778\t12.2388889\tEurope\tEurope & Israel\n+PMO\tPalermo\tNULL\tItaly\tIT\t1\t38.175999\t13.091\tEurope\tEurope & Israel\n+AMS\tAmsterdam\tNULL\tNetherlands\tNL\t5\t52.308601\t4.76389\tEurope\tEurope & Israel\n+MAN\tManchester\tNULL\tUK\tGB\t5\t53.35369873046875\t-2.2749500274658203\tEurope\tEurope & Israel\n+LHR\tLondon\tNULL\tUK\tGB\t25\t51.4775\t-0.461389\tEurope\tEurope & Israel\n+DUB\tDublin\tNULL\tIreland\tIE\t2\t53.421299\t-6.27007\tEurope\tEurope & Israel\n+VIE\tVienna\tNULL\tAustria\tAT\t3\t48.110298156738\t16.569700241089\tEurope\tEurope & Israel\n+ARN\tStockholm\tNULL\tSweden\tSE\t4\t59.651901245117\t17.918600082397\tEurope\tEurope & Israel\n+CPH\tCopenhagen\tNULL\tDenmark\tDK\t3\t55.617900848389\t12.656000137329\tEurope\tEurope & Israel\n+HEL\tHelsinki\tNULL\tFinland\tFI\t4\t60.317199707031\t24.963300704956\tEurope\tEurope & Israel\n+ATH\tAthens\tNULL\tGreece\tGR\t1\t37.9364013672\t23.9444999695\tEurope\tEurope & Israel\n+BRU\tBrussels\tNULL\tBelgium\tBE\t1\t50.901401519800004\t4.48443984985\tEurope\tEurope & Israel\n+BUD\tBudapest\tNULL\tHungary\tHU\t1\t47.42976\t19.261093\tEurope\tEurope & Israel\n+LIS\tLisbon\tNULL\tPortugal\tPT\t1\t38.7813\t-9.13592\tEurope\tEurope & Israel\n+OSL\tOslo\tNULL\tNorway\tNO\t2\t60.193901062012\t11.100399971008\tEurope\tEurope & Israel\n+OTP\tBucharest\tNULL\tRomania\tRO\t1\t44.5711111\t26.085\tEurope\tEurope & Israel\n+PRG\tPrague\tNULL\tCzech Republic\tCZ\t1\t50.1008\t14.26\tEurope\tEurope & Israel\n+SOF\tSofia\tNULL\tBulgaria\tBG\t1\t42.696693420410156\t23.411436080932617\tEurope\tEurope & Israel\n+WAW\tWarsaw\tNULL\tPoland\tPL\t3\t52.165833\t20.967222\tEurope\tEurope & Israel\n+ZAG\tZagreb\tNULL\tCroatia\tHR\t1\t45.7429008484\t16.0687999725\tEurope\tEurope & Israel\n+ZRH\tZurich\tNULL\tSwitzerland\tCH\t2\t47.464699\t8.54917\tEurope\tEurope & Israel\n+BCN\tBarcelona\tNULL\tSpain\tES\t2\t41.2971\t2.07846\tEurope\tEurope & Israel\n+MAD\tMadrid\tNULL\tSpain\tES\t10\t40.471926\t-3.56264\tEurope\tEurope & Israel\n+DEL\tNew Delhi\tNULL\tIndia\tIN\t14\t28.5665\t77.103104\tAsia\tIndia\n+MAA\tChennai\tNULL\tIndia\tIN\t8\t12.990005493164062\t80.16929626464844\tAsia\tIndia\n+BOM\tMumbai\tNULL\tIndia\tIN\t8\t19.0886993408\t72.8678970337\tAsia\tIndia\n+PNQ\tPune\tNULL\tIndia\tIN\t4\t18.58209991455078\t73.9197006225586\tAsia\tIndia\n+BLR\tBangalore\tNULL\tIndia\tIN\t5\t13.1979\t77.706299\tAsia\tIndia\n+HYD\tHyderabad\tNULL\tIndia\tIN\t5\t17.231318\t78.429855\tAsia\tIndia\n+SIN\tSingapore\tNULL\tSingapore\tSG\t7\t1.35019\t103.994003\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+KIX\tOsaka\tNULL\tJapan\tJP\t5\t34.42729949951172\t135.24400329589844\tAsia\tJapan\n+NRT\tTokyo\tNULL\tJapan\tJP\t22\t35.764702\t140.386002\tAsia\tJapan\n+TPE\tTaoyuan\tNULL\tTaiwan\tTW\t3\t25.0777\t121.233002\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+ICN\tSeoul\tNULL\tKorea\tKR\t8\t37.46910095214844\t126.45099639892578\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+BKK\tBangkok\tNULL\tThailand\tTH\t2\t13.689999\t100.750114\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+CCU\tKolkata\tNULL\tIndia\tIN\t2\t22.654699325561523\t88.44670104980469\tAsia\tIndia\n+CGK\tJakarta\tNULL\tIndonesia\tID\t5\t-6.1255698204\t106.65599823\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+KUL\tKuala Lumpur\tNULL\tMalaysia\tMY\t2\t2.745579957962\t101.70999908447\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+MNL\tManila\tNULL\tPhilippines\tPH\t1\t14.5086\t121.019997\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+HAN\tHanoi\tNULL\tVietnam\tVN\t1\t21.221200942993164\t105.80699920654297\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+SGN\tHo Chi Minh City\tNULL\tVietnam\tVN\t1\t10.8187999725\t106.652000427\tAsia\tHong Kong, Indonesia, Philippines, Singapore, South Korea, Taiwan, & Thailand\n+SYD\tSydney\tNULL\tAustralia\tAU\t4\t-33.94609832763672\t151.177001953125\tAustralia & New Zealand\tAustralia & New Zealand\n+AKL\tAuckland\tNULL\tNew Zealand\tNZ\t2\t-37.008098602299995\t174.792007446\tAustralia & New Zealand\tAustralia & New Zealand\n+MEL\tMelbourne\tNULL\tAustralia\tAU\t3\t-37.673302\t144.843002\tAustralia & New Zealand\tAustralia & New Zealand\n+PER\tPerth\tNULL\tAustralia\tAU\t1\t-31.94029998779297\t115.96700286865234\tAustralia & New Zealand\tAustralia & New Zealand\n+GRU\tSao Paulo\tNULL\tBrazil\tBR\t8\t-23.435556\t-46.473056\tSouth America\tSouth America\n+GIG\tRio De Janeiro\tNULL\tBrazil\tBR\t5\t-22.8099994659\t-43.2505569458\tSouth America\tSouth America\n+FOR\tFortaleza\tNULL\tBrazil\tBR\t4\t-3.776279926300049\t-38.53260040283203\tSouth America\tSouth America\n+BOG\tBogota\tNULL\tColombia\tCO\t3\t4.70159\t-74.1469\tSouth America\tSouth America\n+EZE\tBuenos Aires\tNULL\tArgentina\tAR\t2\t-34.8222\t-58.5358\tSouth America\tSouth America\n+SCL\tSantiago\tNULL\tChile\tCL\t3\t-33.393001556396484\t-70.78579711914062\tSouth America\tSouth America\n+LIM\tLima\tNULL\tPeru\tPE\t2\t-12.0219\t-77.114305\tSouth America\tSouth America\n+TLV\tTel Aviv\tNULL\tIsrael\tIL\t2\t32.01139831542969\t34.88669967651367\tMiddle East\tEurope & Israel\n+BAH\tManama\tNULL\tBahrain\tBH\t2\t26.27079963684082\t50.63359832763672\tMiddle East\tSouth Africa, Kenya, & Middle East\n+DXB\tDubai\tNULL\tUAE\tAE\t1\t25.2527999878\t55.3643989563\tMiddle East\tSouth Africa, Kenya, & Middle East\n+FJR\tFujairah\tNULL\tUAE\tAE\t3\t25.112222\t56.324167\tMiddle East\tSouth Africa, Kenya, & Middle East\n+MCT\tMuscat\tNULL\tOman\tOM\t1\t23.593299865722656\t58.284400939941406\tMiddle East\tSouth Africa, Kenya, & Middle East\n+CPT\tCape Town\tNULL\tSouth Africa\tZA\t1\t-33.9648017883\t18.6016998291\tAfrica\tSouth Africa, Kenya, & Middle East\n+JNB\tJohannesburg\tNULL\tSouth Africa\tZA\t1\t-26.1392\t28.246\tAfrica\tSouth Africa, Kenya, & Middle East\n+NBO\tNairobi\tNULL\tKenya\tKE\t1\t-1.31923997402\t36.9277992249\tAfrica\tSouth Africa, Kenya, & Middle East\n+PVG\tShanghai\tNULL\tChina\tCN\t1\t31.143400192260742\t121.80500030517578\tChina\tChina\n+SZX\tShenzhen\tNULL\tChina\tCN\t1\t22.639299392700195\t113.81099700927734\tChina\tChina\n+ZHY\tZhongwei\tNULL\tChina\tCN\t1\t37.572778\t105.154444\tChina\tChina\n+PEK\tBeijing\tNULL\tChina\tCN\t1\t40.080101013183594\t116.58499908447266\tChina\tChina\n+HKG\tHong Kong\tNULL\tChina\tHK\t4\t22.308901\t113.915001\tChina\tChina\n+CMH\tColumbus\tOhio\tUnited States\tUS\t1\t39.998056\t-82.891944\tNorth America\tUnited States, Mexico, & Canada\n+HIO\tHillsboro\tOregon\tUnited States\tUS\t1\t45.540394\t-122.949825\tNorth America\tUnited States, Mexico, & Canada\n+TPA\tTampa\tFlorida\tUnited States\tUS\t1\t27.979722\t-82.534722\tNorth America\tUnited States, Mexico, & Canada\n+PNQ\tPune\tMaharashtra\tIndia\tIN\t1\t18.582222\t73.919722\tAsia\tIndia\n+MCT\tMuscat\tMuscat\tOman\tOM\t1\t23.6015386\t58.2899376\tMiddle East\tSouth Africa, Kenya, & Middle East\n+\n+require httpfs\n+\n+query II\n+select * from read_csv_auto(\"https://duckdb-public-gzip-test.s3.us-east-2.amazonaws.com/test.csv\");\n+----\n+'foo'\t'bar'\n+foo\tbar\n+\n+\n+query II\n+from read_csv_auto(\"https://duckdb-public-gzip-test.s3.us-east-2.amazonaws.com/test.csv.gz\");\n+----\n+'foo'\t'bar'\n+foo\tbar\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/parallel/test_parallel_error_messages.test b/test/sql/copy/csv/parallel/test_parallel_error_messages.test\nnew file mode 100644\nindex 000000000000..9d33df150049\n--- /dev/null\n+++ b/test/sql/copy/csv/parallel/test_parallel_error_messages.test\n@@ -0,0 +1,136 @@\n+# name: test/sql/copy/csv/parallel/test_parallel_error_messages.test\n+# description: Test auto-detect with plus symbols\n+# group: [parallel]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+PRAGMA verify_parallelism\n+\n+statement ok\n+SET threads=4\n+\n+statement error\n+SELECT * FROM read_csv('data/csv/missing_column.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 7\n+\n+loop i 0 100\n+\n+statement error\n+SELECT * FROM read_csv('data/csv/wrongtype.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 8\n+\n+endloop\n+\n+statement error\n+SELECT * FROM read_csv('data/csv/wrongtype.csv', parallel=false, sep=',', columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 8\n+\n+# the first error is on line 10002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes.csv', parallel=false, sep=',', columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+# the first error is on line 10002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes.csv', parallel=false, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+# the first error is on line 10002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes_rn.csv', parallel=false, sep=',', columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+# the first error is on line 10001\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes_rn.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+statement error\n+SELECT * FROM read_csv('data/csv/error/mixedtypes_rn.csv', parallel=false, sep=',', buffer_size=100, columns={'h1': int, 'h2': varchar}, header=True)\n+----\n+line 10002\n+\n+# FIXME: these very spuriously succeed in parsing\n+#statement error\n+#SELECT * FROM read_csv('data/csv/error/quotednewlines.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': varchar, 'h2': varchar}, header=True)\n+#----\n+#not supported for multithreading\n+#\n+#statement error\n+#SELECT * FROM read_csv('data/csv/error/quotednewlines.csv', parallel=true, sep=',', buffer_size=200, columns={'h1': int, 'h2': varchar}, header=True)\n+#----\n+#not supported for multithreading\n+\n+# Let's do an All-Type error testing\n+foreach type bool int bigint hugeint float double 'decimal(4,1)' 'decimal(8,1)' 'decimal(12,1)' 'decimal(18,1)'\n+\n+# the first error is on line 3001\n+statement error\n+SELECT * FROM read_csv('data/csv/error/csv_error.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': ${type}, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3001\n+statement error\n+SELECT * FROM read_csv('data/csv/error/csv_error.csv', parallel=false, sep=',', buffer_size=100, columns={'h1': ${type}, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+endloop\n+\n+\n+# the first error is on line 3001\n+statement error\n+SELECT * FROM read_csv('data/csv/error/date.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': date, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3001\n+statement error\n+SELECT * FROM read_csv('data/csv/error/date.csv', parallel=false, sep=',', buffer_size=100, columns={'h1': date, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/time.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': time, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/time.csv', parallel=false, sep=',', buffer_size=100, columns={'h1': time, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3002\n+statement error\n+SELECT * FROM read_csv('data/csv/error/timestamp.csv', parallel=true, sep=',', buffer_size=200, columns={'h1': timestamp, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3000\n+statement error\n+SELECT * FROM read_csv('data/csv/error/timestamp.csv', parallel=false, sep=',', columns={'h1': timestamp, 'h2': varchar}, header=True)\n+----\n+line 3002\n+\n+# the first error is on line 3000\n+statement error\n+SELECT * FROM read_csv('data/csv/error/timestamp.csv', parallel=true, sep=',', buffer_size=100, columns={'h1': timestamp, 'h2': varchar}, header=True)\n+----\n+line 3002\ndiff --git a/test/sql/copy/csv/parallel/test_parallel_option.test b/test/sql/copy/csv/parallel/test_parallel_option.test\nindex d499e468db58..88c1f66ab9f8 100644\n--- a/test/sql/copy/csv/parallel/test_parallel_option.test\n+++ b/test/sql/copy/csv/parallel/test_parallel_option.test\n@@ -6,6 +6,9 @@\n statement ok\n PRAGMA verify_parallelism\n \n+statement ok\n+SET threads=4;\n+\n # By default runs multi-threaded\n query II\n explain  select * from read_csv_auto('test/sql/copy/csv/data/test/multi_column_string_rn.csv')\ndiff --git a/test/sql/copy/csv/test_abac.test b/test/sql/copy/csv/test_abac.test\nindex d87954f4d76f..e03bc19a4bdc 100644\n--- a/test/sql/copy/csv/test_abac.test\n+++ b/test/sql/copy/csv/test_abac.test\n@@ -175,7 +175,7 @@ CREATE TABLE abac_tbl (a VARCHAR);\n statement error\n COPY abac_tbl FROM 'test/sql/copy/csv/data/abac/unterminated_escape.csv' (QUOTE '\"', ESCAPE '''', AUTO_DETECT FALSE);\n ----\n-1\n+0\n \n statement ok\n DROP TABLE abac_tbl\n@@ -187,7 +187,7 @@ CREATE TABLE abac_tbl (a VARCHAR);\n statement error\n COPY abac_tbl FROM 'test/sql/copy/csv/data/abac/complex_unterminated_quote.csv' (QUOTE 'ABABAC', AUTO_DETECT FALSE);\n ----\n-1\n+0\n \n statement ok\n DROP TABLE abac_tbl\ndiff --git a/test/sql/copy/csv/test_copy_gzip.test b/test/sql/copy/csv/test_copy_gzip.test\nindex c1fe76dda8f0..e4ee7e630790 100644\n--- a/test/sql/copy/csv/test_copy_gzip.test\n+++ b/test/sql/copy/csv/test_copy_gzip.test\n@@ -37,3 +37,15 @@ SELECT l_partkey FROM lineitem WHERE l_orderkey=1 ORDER BY l_linenumber\n 2132\n 24027\n 15635\n+\n+# round trip\n+statement ok\n+COPY lineitem TO '__TEST_DIR__/lineitem1k.csv.gz' (DELIMITER '|', HEADER);\n+\n+statement ok\n+CREATE TABLE lineitem_rt AS FROM '__TEST_DIR__/lineitem1k.csv.gz';\n+\n+query I\n+SELECT COUNT(*) FROM (FROM lineitem EXCEPT FROM lineitem_rt)\n+----\n+0\ndiff --git a/test/sql/copy/csv/test_csv_httpfs_prepared.test b/test/sql/copy/csv/test_csv_httpfs_prepared.test\nnew file mode 100644\nindex 000000000000..228466101909\n--- /dev/null\n+++ b/test/sql/copy/csv/test_csv_httpfs_prepared.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/copy/csv/test_csv_httpfs_prepared.test\n+# description: CSV Reading From HTTPFS in Prepared Statements\n+# group: [csv]\n+\n+require httpfs\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+PREPARE boaz_bug AS from read_csv_auto('https://github.com/duckdb/duckdb/raw/master/data/csv/customer.csv')\n+\n+query IIIIIIIIIIIIIIIIII\n+EXECUTE boaz_bug\n+----\n+1\tAAAAAAAABAAAAAAA\t980124\t7135\t32946\t2452238\t2452208\tMr.\tJavier\tLewis\tY\t9\t12\t1936\tCHILE\tNULL\tJavier.Lewis@VFAxlnZEvOx.org\t2452508\n+2\tAAAAAAAACAAAAAAA\t819667\t1461\t31655\t2452318\t2452288\tDr.\tAmy\tMoses\tY\t9\t4\t1966\tTOGO\tNULL\tAmy.Moses@Ovk9KjHH.com\t2452318\n+3\tAAAAAAAADAAAAAAA\t1473522\t6247\t48572\t2449130\t2449100\tMiss\tLatisha\tHamilton\tY\t18\t9\t1979\tNIUE\tNULL\tLatisha.Hamilton@V.com\t2452313\n+4\tAAAAAAAAEAAAAAAA\t1703214\t3986\t39558\t2450030\t2450000\tDr.\tMichael\tWhite\tY\t7\t6\t1983\tMEXICO\tNULL\tMichael.White@i.org\t2452361\n+5\tAAAAAAAAFAAAAAAA\t953372\t4470\t36368\t2449438\t2449408\tSir\tRobert\tMoran\tN\t8\t5\t1956\tFIJI\tNULL\tRobert.Moran@Hh.edu\t2452469\n+6\tAAAAAAAAGAAAAAAA\t213219\t6374\t27082\t2451883\t2451853\tMs.\tBrunilda\tSharp\tY\t4\t12\t1925\tSURINAME\tNULL\tBrunilda.Sharp@T3pylZEUQjm.org\t2452430\n+7\tAAAAAAAAHAAAAAAA\t68377\t3219\t44814\t2451438\t2451408\tMs.\tFonda\tWiles\tN\t24\t4\t1985\tGAMBIA\tNULL\tFonda.Wiles@S9KnyEtz9hv.org\t2452360\n+8\tAAAAAAAAIAAAAAAA\t1215897\t2471\t16598\t2449406\t2449376\tSir\tOllie\tShipman\tN\t26\t12\t1938\tKOREA, REPUBLIC OF\tNULL\tOllie.Shipman@be.org\t2452334\n+9\tAAAAAAAAJAAAAAAA\t1168667\t1404\t49388\t2452275\t2452245\tSir\tKarl\tGilbert\tN\t26\t10\t1966\tMONTSERRAT\tNULL\tKarl.Gilbert@Crg5KyP2IxX9C4d6.edu\t2452454\n+10\tAAAAAAAAKAAAAAAA\t1207553\t5143\t19580\t2451353\t2451323\tMs.\tAlbert\tBrunson\tN\t15\t10\t1973\tJORDAN\tNULL\tAlbert.Brunson@62.com\t2452641\n+\n+statement ok\n+DEALLOCATE boaz_bug\n+\n+statement error\n+EXECUTE boaz_bug\n+\n+# Recreate prepared statement with different file\n+\n+statement ok\n+PREPARE boaz_bug AS SELECT * from read_csv_auto('https://www.data.gouv.fr/fr/datasets/r/6d186965-f41b-41f3-9b23-88241cc6890c') order by all limit 5;\n+\n+query IIIIII\n+EXECUTE boaz_bug\n+----\n+2020\tAllemagne\tGermany\t26.1\t53196.069\t200601.2\n+2020\tAutriche\tAustria\t18.0\t4723.5\t26215.8\n+2020\tBelgique\tBelgium\t28.999999999999996\t9436.1\t32553.0\n+2020\tBulgarie\tBulgaria\t11.600000000000001\t1124.1\t9698.7\n+2020\tChypre\tCyprus\t0.0\t0.0\t1627.6\ndiff --git a/test/sql/copy/csv/test_export_force_quotes.test b/test/sql/copy/csv/test_export_force_quotes.test\nnew file mode 100644\nindex 000000000000..f3eb2c23e569\n--- /dev/null\n+++ b/test/sql/copy/csv/test_export_force_quotes.test\n@@ -0,0 +1,26 @@\n+# name: test/sql/copy/csv/test_export_force_quotes.test\n+# description: Test long value with escapes\n+# group: [csv]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table integers(i int);\n+\n+statement ok\n+insert into integers values (42);\n+\n+statement ok\n+export database '__TEST_DIR__/test_export' (force_quote *);\n+\n+statement ok\n+drop table integers;\n+\n+statement ok\n+import database '__TEST_DIR__/test_export';\n+\n+query I\n+select * from integers;\n+----\n+42\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/test_max_line_size.test_slow b/test/sql/copy/csv/test_max_line_size.test_slow\nindex 76cc0c329fa1..2fc9d17d8a63 100644\n--- a/test/sql/copy/csv/test_max_line_size.test_slow\n+++ b/test/sql/copy/csv/test_max_line_size.test_slow\n@@ -2,8 +2,6 @@\n # description: Test lines that exceed the maximum line size\n # group: [csv]\n \n-#FIXME: ADD LINE BACK FOR CSV MULTITHREADING ERROR\n-\n # generate CSV file with some long strings some exceeding the maximum line size\n statement ok\n CREATE TABLE test_base (a INT, b VARCHAR, c INT);\n@@ -24,7 +22,8 @@ CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);\n # size by a small margin as the calculation is an estimate based on reads before parsing.\n statement error\n COPY test FROM '__TEST_DIR__/test.csv';\n-\n+----\n+line 2\n \n # we can override the max line size\n statement ok\ndiff --git a/test/sql/copy/csv/test_mixed_line_endings.test b/test/sql/copy/csv/test_mixed_line_endings.test\nindex 6975ea2b5d7f..894a47029052 100644\n--- a/test/sql/copy/csv/test_mixed_line_endings.test\n+++ b/test/sql/copy/csv/test_mixed_line_endings.test\n@@ -7,8 +7,9 @@\n statement ok\n CREATE TABLE test (a INTEGER, b VARCHAR, c INTEGER);\n \n+\n query I\n-COPY test FROM 'test/sql/copy/csv/data/test/mixed_line_endings.csv';\n+insert into test select * from read_csv_auto('test/sql/copy/csv/data/test/mixed_line_endings.csv');\n ----\n 3\n \ndiff --git a/test/sql/copy/csv/test_replacement_scan_alias.test b/test/sql/copy/csv/test_replacement_scan_alias.test\nindex 798d67834359..62bc2f31e55c 100644\n--- a/test/sql/copy/csv/test_replacement_scan_alias.test\n+++ b/test/sql/copy/csv/test_replacement_scan_alias.test\n@@ -2,9 +2,9 @@\n # description: Test replacement scan aliases\n # group: [csv]\n \n-# implicit alias is equal to the table name\n+# implicit alias is equal to the file name\n statement ok\n-select \"test/sql/copy/csv/data/abac/abac.csv\".column0 from 'test/sql/copy/csv/data/abac/abac.csv';\n+select abac.column0 from 'test/sql/copy/csv/data/abac/abac.csv';\n \n statement ok\n select * from 'test/sql/copy/csv/data/test/dateformat.csv';\n@@ -18,3 +18,13 @@ select mytbl.column0 from 'test/sql/copy/csv/data/abac/abac.csv' mytbl;\n \n statement ok\n select mytbl.mycol from 'test/sql/copy/csv/data/abac/abac.csv' mytbl(mycol);\n+\n+require parquet\n+\n+statement ok\n+select blob.ids from 'data/parquet-testing/blob.parquet'\n+\n+require json\n+\n+statement ok\n+select example_n.id from 'data/json/example_n.ndjson'\n\\ No newline at end of file\ndiff --git a/test/sql/copy/csv/test_union_by_name.test b/test/sql/copy/csv/test_union_by_name.test\nindex bbe0dec94a2b..2387633f27f9 100644\n--- a/test/sql/copy/csv/test_union_by_name.test\n+++ b/test/sql/copy/csv/test_union_by_name.test\n@@ -67,7 +67,7 @@ BIGINT\tBIGINT\tBIGINT\n statement error\n SELECT * FROM read_csv_auto(['data/csv/union-by-name/ubn1.csv', 'data/csv/union-by-name/ubn2.csv', 'data/csv/union-by-name/ubn3.csv', 'data/csv/union-by-name/ubn4.csv'])\n ----\n-Error in file \"data/csv/union-by-name/ubn2.csv\"\n+Error in file\n \n query IIIII\n SELECT  a, b, c, ts, k  \ndiff --git a/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow b/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\nindex 4d63f542fda2..421e0343983b 100644\n--- a/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\n+++ b/test/sql/copy/parquet/batched_write/parquet_write_memory_limit.test_slow\n@@ -4,6 +4,8 @@\n \n require parquet\n \n+require 64bit\n+\n # 100M rows, 2 BIGINT columns = 1.6GB uncompressed\n statement ok\n COPY (SELECT i, i // 5 AS j FROM range(100000000) t(i)) TO '__TEST_DIR__/large_integers.parquet'\ndiff --git a/test/sql/copy/s3/README.md b/test/sql/copy/s3/README.md\nindex 4216bacaec80..2c4f07ad8f83 100644\n--- a/test/sql/copy/s3/README.md\n+++ b/test/sql/copy/s3/README.md\n@@ -24,7 +24,7 @@ Then run the test server in the back-ground using Docker. Note that Docker must\n \n \n ```bash\n- ./scripts/run_s3_test_server.sh\n+./scripts/run_s3_test_server.sh\n ```\n \n Now set up the following environment variables to enable running of the tests.\ndiff --git a/test/sql/function/list/array_to_string.test b/test/sql/function/list/array_to_string.test\nnew file mode 100644\nindex 000000000000..d752684dc41d\n--- /dev/null\n+++ b/test/sql/function/list/array_to_string.test\n@@ -0,0 +1,45 @@\n+# name: test/sql/function/list/array_to_string.test\n+# description: Test array_to_string function\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+SELECT array_to_string([1,2,3], '')\n+----\n+123\n+\n+query I\n+SELECT array_to_string([1,2,3], '-')\n+----\n+1-2-3\n+\n+query I\n+SELECT array_to_string(NULL, '-')\n+----\n+NULL\n+\n+query I\n+SELECT array_to_string([1, 2, 3], NULL)\n+----\n+1,2,3\n+\n+\n+query I\n+SELECT array_to_string([], '-')\n+----\n+NULL\n+\n+query I\n+SELECT array_to_string([i, i + 1], '-') FROM range(6) t(i) WHERE i<=2 OR i>4\n+----\n+0-1\n+1-2\n+2-3\n+5-6\n+\n+statement error\n+SELECT array_to_string([1, 2, 3], k) FROM repeat(',', 5) t(k)\n+----\n+Separator argument to StringAgg must be a constant\ndiff --git a/test/sql/function/list/flatten.test b/test/sql/function/list/flatten.test\nindex a492799806e7..f6131ed5ed44 100644\n--- a/test/sql/function/list/flatten.test\n+++ b/test/sql/function/list/flatten.test\n@@ -98,12 +98,21 @@ statement ok\n CREATE TABLE nums AS SELECT range % 8 i, range j FROM range(16)\n \n statement ok\n-CREATE TABLE lists AS SELECT i % 4 i, list(j) j FROM nums GROUP BY i\n+CREATE TABLE lists AS SELECT i % 4 i, list(j ORDER BY rowid) j FROM nums GROUP BY i\n \n statement ok\n-CREATE TABLE nested_lists AS SELECT i, list(j) j FROM lists GROUP BY i\n+CREATE TABLE nested_lists AS SELECT i, list(j ORDER BY rowid) j FROM lists GROUP BY i\n \n query II\n+FROM nested_lists\n+----\n+0\t[[0, 8], [4, 12]]\n+1\t[[1, 9], [5, 13]]\n+2\t[[2, 10], [6, 14]]\n+3\t[[3, 11], [7, 15]]\n+\n+\n+query II rowsort\n SELECT i, flatten(j) FROM nested_lists\n ----\n 0\t[0, 8, 4, 12]\ndiff --git a/test/sql/function/list/lambdas/filter.test b/test/sql/function/list/lambdas/filter.test\nindex 1f1c920feda9..da3da080e45e 100644\n--- a/test/sql/function/list/lambdas/filter.test\n+++ b/test/sql/function/list/lambdas/filter.test\n@@ -233,4 +233,9 @@ SELECT list_apply([[5,6]], x -> list_filter(x, y -> y));\n statement error\n SELECT list_transform([['abc']], x -> list_filter(x, y -> y));\n ----\n-Conversion Error: Could not convert string 'abc' to BOOL\n\\ No newline at end of file\n+Conversion Error: Could not convert string 'abc' to BOOL\n+\n+query II\n+select [[y] for y in range(5)] as c, [x for x in c if x IS NOT NULL];\n+----\n+[[0], [1], [2], [3], [4]]\t[[0], [1], [2], [3], [4]]\ndiff --git a/test/sql/function/list/lambdas/filter_vector_types.test b/test/sql/function/list/lambdas/filter_vector_types.test\nnew file mode 100644\nindex 000000000000..e711632d73de\n--- /dev/null\n+++ b/test/sql/function/list/lambdas/filter_vector_types.test\n@@ -0,0 +1,38 @@\n+# name: test/sql/function/list/lambdas/filter_vector_types.test\n+# description: Test list_filter function with 'test_vector_types'\n+# group: [lambdas]\n+\n+require vector_size 2048\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+query I\n+select [x for x in c if x IS NOT NULL] FROM test_vector_types(NULL::INT[], false) t(c);\n+----\n+[-2147483648, 2147483647]\n+[]\n+[]\n+[-2147483648, 2147483647]\n+[-2147483648, 2147483647]\n+[-2147483648, 2147483647]\n+[]\n+[]\n+[3, 5]\n+[]\n+[7]\n+\n+query I\n+select [x for x in c if x IS NULL] FROM test_vector_types(NULL::INT[], false) t(c);\n+----\n+[]\n+[]\n+[NULL]\n+[]\n+[]\n+[]\n+[]\n+[NULL]\n+[]\n+[]\n+[]\ndiff --git a/test/sql/function/list/list_concat.test b/test/sql/function/list/list_concat.test\nindex 301f7b4ab49e..fa84873b110c 100644\n--- a/test/sql/function/list/list_concat.test\n+++ b/test/sql/function/list/list_concat.test\n@@ -117,7 +117,7 @@ CREATE TABLE test AS SELECT range % 4 i, range j, range k FROM range(16)\n statement ok\n CREATE TABLE lists AS SELECT i, list(j) j, list(k) k FROM test GROUP BY i\n \n-query II\n+query II rowsort\n SELECT i, list_concat(j, k) FROM lists\n ----\n 0\t[0, 4, 8, 12, 0, 4, 8, 12]\n@@ -144,7 +144,7 @@ SELECT list_append(NULL, 3)\n ----\n [3]\n \n-query II\n+query II rowsort\n SELECT i, list_append(list_concat(j, k), i) FROM lists\n ----\n 0\t[0, 4, 8, 12, 0, 4, 8, 12, 0]\ndiff --git a/test/sql/index/art/art_issue_7349.test b/test/sql/index/art/art_issue_7349.test\nnew file mode 100644\nindex 000000000000..845f30a23764\n--- /dev/null\n+++ b/test/sql/index/art/art_issue_7349.test\n@@ -0,0 +1,82 @@\n+# name: test/sql/index/art/art_issue_7349.test\n+# description: Test ensuring that we do not rollback twice when throwing an exception during commit\n+# group: [art]\n+\n+# setting up the different tables and the UNIQUE index\n+\n+statement ok\n+CREATE TABLE td(tz VARCHAR(30) NOT NULL);\n+\n+statement ok\n+CREATE UNIQUE INDEX sqlsim0 ON td(tz);\n+\n+statement ok\n+CREATE TABLE tab0(c2 DATE NOT NULL);\n+\n+statement ok\n+CREATE TABLE tab1(c2 DATE NOT NULL);\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+# testing different orders of appending values\n+\n+# interleaved (original issue example)\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n+\n+# three tables\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO tab1 VALUES('2006-12-25');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n+\n+# other table first\n+\n+statement ok\n+START TRANSACTION;\n+\n+statement ok\n+INSERT INTO tab0 VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES('2006-12-25');\n+\n+statement ok\n+INSERT INTO td VALUES (date '2008-02-29');\n+\n+statement error\n+COMMIT TRANSACTION;\n+----\n+TransactionContext Error: Failed to commit: Constraint Error: PRIMARY KEY or UNIQUE constraint violated: duplicate key \"2008-02-29\"\n\\ No newline at end of file\ndiff --git a/test/sql/index/art/test_art_create_index.test b/test/sql/index/art/test_art_create_index.test\nindex 7c01a1fd4ddb..9f88af5dc60d 100644\n--- a/test/sql/index/art/test_art_create_index.test\n+++ b/test/sql/index/art/test_art_create_index.test\n@@ -3,6 +3,8 @@\n # group: [art]\n \n # test to reproduce issue #4976\n+statement ok\n+PRAGMA enable_verification\n \n statement ok\n CREATE TABLE t0(c0 DOUBLE, c1 TIMESTAMP DEFAULT(TIMESTAMP '1970-01-04 12:58:32'));\n@@ -14,4 +16,4 @@ statement ok\n INSERT INTO t0(c0) VALUES (DEFAULT);\n \n statement ok\n-CREATE INDEX i2 ON t0(c1, c0);\n\\ No newline at end of file\n+CREATE INDEX i2 ON t0(c1, c0);\ndiff --git a/test/sql/index/art/test_art_index_join_with_nulls.test b/test/sql/index/art/test_art_index_join_with_nulls.test\nnew file mode 100644\nindex 000000000000..930c648e4fe5\n--- /dev/null\n+++ b/test/sql/index/art/test_art_index_join_with_nulls.test\n@@ -0,0 +1,63 @@\n+# name: test/sql/index/art/test_art_index_join_with_nulls.test\n+# description: Test that we reset keys correctly during index joins\n+# group: [art]\n+\n+# this tests contains the reproducible example of issue 7267 in a reduced size\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE addresses (address int, state string);\n+\n+statement ok\n+INSERT INTO addresses SELECT range, 'GA' FROM range(3000);\n+\n+statement ok\n+CREATE TABLE demos (demo int primary key);\n+\n+statement ok\n+INSERT INTO demos SELECT range FROM range(100000);\n+\n+statement ok\n+CREATE TABLE customers (customer int, cdemo int, caddress int);\n+\n+statement ok\n+INSERT INTO customers SELECT range, range, range FROM range(4953);\n+\n+# set 200 cdemo values to NULL\n+\n+loop i 0 200\n+\n+statement ok\n+UPDATE customers SET cdemo = NULL WHERE customer = (${i} * 24.5)::INTEGER;\n+\n+endloop\n+\n+# verify our NULLs\n+\n+query I\n+SELECT COUNT(customer) FROM customers WHERE cdemo IS NULL;\n+----\n+200\n+\n+query I\n+SELECT COUNT(c.customer)\n+FROM customers c\n+INNER JOIN addresses ca ON c.caddress = ca.address\n+INNER JOIN demos d ON c.cdemo = d.demo\n+WHERE ca.state ='GA';\n+----\n+2877\n+\n+statement ok\n+PRAGMA threads=1;\n+\n+query I\n+SELECT COUNT(c.customer)\n+FROM customers c\n+INNER JOIN addresses ca ON c.caddress = ca.address\n+INNER JOIN demos d ON c.cdemo = d.demo\n+WHERE ca.state ='GA';\n+----\n+2877\n\\ No newline at end of file\ndiff --git a/test/sql/insert/insert_by_name.test b/test/sql/insert/insert_by_name.test\nnew file mode 100644\nindex 000000000000..a879a649afd6\n--- /dev/null\n+++ b/test/sql/insert/insert_by_name.test\n@@ -0,0 +1,97 @@\n+# name: test/sql/insert/insert_by_name.test\n+# description: Test parallel insert from many groups\n+# group: [insert]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE integers(i INTEGER, j INTEGER);\n+\n+# partial names\n+# i=NULL, j=42\n+statement ok\n+INSERT INTO integers BY NAME SELECT 42 AS j\n+\n+# i=84, j=NULL\n+statement ok\n+INSERT INTO integers BY NAME SELECT 84 AS i\n+\n+# re-ordered names\n+# i=9, j=99\n+statement ok\n+INSERT INTO integers BY NAME SELECT 99 AS j, 9 AS i\n+\n+# i=1, j=10\n+statement ok\n+INSERT INTO integers BY POSITION SELECT 1 AS j, 10 AS i\n+\n+query II\n+FROM integers\n+----\n+NULL\t42\n+84\tNULL\n+9\t99\n+1\t10\n+\n+# column that needs to be quoted\n+statement ok\n+CREATE TABLE \"My Table\"(\"My Column 1\" INT, \"My Column 2\" INT);\n+\n+statement ok\n+INSERT INTO \"My Table\" BY NAME SELECT 1 AS \"My Column 2\"\n+\n+query II\n+FROM \"My Table\"\n+----\n+NULL\t1\n+\n+# name does not exist\n+statement error\n+INSERT INTO integers BY NAME SELECT 1 AS xxx\n+----\n+xxx\n+\n+# duplicate names\n+statement error\n+INSERT INTO integers BY NAME SELECT 1 AS i, 2 AS i\n+----\n+i\n+\n+statement error\n+INSERT INTO integers (i, i) SELECT 1, 2\n+----\n+i\n+\n+# rowid\n+statement error\n+INSERT INTO integers BY NAME SELECT 1 AS rowid\n+----\n+rowid\n+\n+# generated column\n+statement ok\n+CREATE TABLE tbl (\n+\tprice INTEGER,\n+\ttotal_price AS ((price)::DATE)\n+);\n+\n+statement error\n+INSERT INTO tbl BY NAME SELECT 1 AS total_price\n+----\n+generated\n+\n+# insert by name with values list\n+statement error\n+INSERT INTO integers BY NAME VALUES (42, 84);\n+----\n+INSERT BY NAME\n+\n+# insert by name with columns list\n+statement error\n+INSERT INTO integers BY NAME (i) SELECT 1 AS j\n+----\n+explicit column list\n+\n+statement ok\n+INSERT INTO integers BY POSITION VALUES (42, 84);\ndiff --git a/test/sql/join/test_nested_payloads.test b/test/sql/join/test_nested_payloads.test\nindex 66eb23edf0af..5922aba200dd 100644\n--- a/test/sql/join/test_nested_payloads.test\n+++ b/test/sql/join/test_nested_payloads.test\n@@ -382,3 +382,18 @@ query III\n SELECT fk, pk, p FROM integers FULL OUTER JOIN longlists ON integers.fk=longlists.pk ORDER BY fk, pk\n ----\n 21 values hashing to 397312e04f9a44a70a2672865240afb0\n+\n+statement ok\n+CREATE TABLE all_types(\"varchar\" VARCHAR, nested_int_array INTEGER[][]);;\n+\n+statement ok\n+INSERT INTO all_types VALUES('b',[[], NULL, [], [NULL]]);\n+\n+# duckdb-fuzzer issue #132\n+query T\n+SELECT ref_1.nested_int_array AS c0\n+FROM all_types AS ref_1\n+INNER JOIN (SELECT NULL AS c8 FROM range(3)) AS subq_1 ON (ref_1.\"varchar\" = ref_1.\"varchar\")\n+INNER JOIN range(3) AS ref_4(time_tz) ON (subq_1.c8 = ref_4.time_tz);\n+----\n+\ndiff --git a/test/sql/json/json_empty_array.test b/test/sql/json/json_empty_array.test\nnew file mode 100644\nindex 000000000000..f7987fc0149a\n--- /dev/null\n+++ b/test/sql/json/json_empty_array.test\n@@ -0,0 +1,49 @@\n+# name: test/sql/json/json_empty_array.test\n+# description: Read json files with empty arrays\n+# group: [json]\n+\n+require json\n+\n+statement ok\n+pragma enable_verification\n+\n+# empty file\n+query I\n+select * from 'data/json/empty.ndjson'\n+----\n+\n+query I\n+select * from 'data/json/whitespace_only.json'\n+----\n+\n+# empty array\n+query I\n+SELECT * FROM read_json_auto('data/json/empty_array.json')\n+----\n+\n+query I\n+SELECT * FROM read_json_auto('data/json/empty_no_newline.json')\n+----\n+\n+# malformed files\n+statement error\n+SELECT * FROM read_json_auto('data/json/malformed/empty_array_malformed.json')\n+----\n+Missing closing brace\n+\n+statement error\n+SELECT * FROM read_json_auto('data/json/malformed/empty_array_trailing.json', format='array')\n+----\n+Empty array with trailing data when parsing JSON array\n+\n+statement error\n+SELECT * FROM read_json_auto('data/json/malformed/array_comma_malformed.json', format='array')\n+----\n+Malformed JSON\n+\n+query I\n+SELECT * FROM read_json_auto('data/json/array_of_empty_arrays.json', format='array')\n+----\n+[]\n+[]\n+[]\ndiff --git a/test/sql/json/json_multi_file_reader.test b/test/sql/json/json_multi_file_reader.test\nnew file mode 100644\nindex 000000000000..e065ebe24e6c\n--- /dev/null\n+++ b/test/sql/json/json_multi_file_reader.test\n@@ -0,0 +1,120 @@\n+# name: test/sql/json/json_multi_file_reader.test\n+# description: Test MultiFileReader integration in JSON reader\n+# group: [json]\n+\n+require json\n+\n+statement ok\n+create table test as SELECT to_json([i%4]) as j FROM range(0,20) as tbl(i)\n+\n+# FIXME: we can't do partitioned JSON writes yet because the column we partition by is packed into a to_json\n+# because we just push an expression and then use the csv writer, this uses the csv writer for now\n+statement ok\n+COPY test TO '__TEST_DIR__/json_part' (FORMAT csv, quote '', PARTITION_BY (j));\n+\n+# some tests for read_json first\n+query III\n+select * exclude (filename), replace(filename, '\\', '/') as filename from read_json_auto('data/json/example_*.ndjson', filename=true) order by all\n+----\n+1\tO Brother, Where Art Thou?\tdata/json/example_n.ndjson\n+1\tO Brother, Where Art Thou?\tdata/json/example_r.ndjson\n+1\tO Brother, Where Art Thou?\tdata/json/example_rn.ndjson\n+2\tHome for the Holidays\tdata/json/example_n.ndjson\n+2\tHome for the Holidays\tdata/json/example_r.ndjson\n+2\tHome for the Holidays\tdata/json/example_rn.ndjson\n+3\tThe Firm\tdata/json/example_n.ndjson\n+3\tThe Firm\tdata/json/example_r.ndjson\n+3\tThe Firm\tdata/json/example_rn.ndjson\n+4\tBroadcast News\tdata/json/example_n.ndjson\n+4\tBroadcast News\tdata/json/example_r.ndjson\n+4\tBroadcast News\tdata/json/example_rn.ndjson\n+5\tRaising Arizona\tdata/json/example_n.ndjson\n+5\tRaising Arizona\tdata/json/example_r.ndjson\n+5\tRaising Arizona\tdata/json/example_rn.ndjson\n+\n+query III\n+select * from read_json_auto(['data/json/example_n.ndjson', 'data/json/top_level_array.json'], union_by_name=true) order by all\n+----\n+1\tO Brother, Where Art Thou?\tNULL\n+2\tHome for the Holidays\tNULL\n+3\tThe Firm\tNULL\n+4\tBroadcast News\tNULL\n+5\tRaising Arizona\tNULL\n+NULL\tNULL\tcancelled\n+NULL\tNULL\tcancelled\n+\n+# despite not being able to do partitioned writes, we can do partitioned json reads already!\n+query II\n+SELECT j, count(*) FROM read_json_auto('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING=1) group by j order by j;\n+----\n+[0]\t5\n+[1]\t5\n+[2]\t5\n+[3]\t5\n+\n+# also test read_json_objects\n+query II\n+select * exclude (filename), replace(filename, '\\', '/') as filename from read_json_objects_auto('data/json/example_*.ndjson', filename=true) order by all\n+----\n+{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\tdata/json/example_n.ndjson\n+{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\tdata/json/example_r.ndjson\n+{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\tdata/json/example_rn.ndjson\n+{\"id\":2,\"name\":\"Home for the Holidays\"}\tdata/json/example_n.ndjson\n+{\"id\":2,\"name\":\"Home for the Holidays\"}\tdata/json/example_r.ndjson\n+{\"id\":2,\"name\":\"Home for the Holidays\"}\tdata/json/example_rn.ndjson\n+{\"id\":3,\"name\":\"The Firm\"}\tdata/json/example_n.ndjson\n+{\"id\":3,\"name\":\"The Firm\"}\tdata/json/example_r.ndjson\n+{\"id\":3,\"name\":\"The Firm\"}\tdata/json/example_rn.ndjson\n+{\"id\":4,\"name\":\"Broadcast News\"}\tdata/json/example_n.ndjson\n+{\"id\":4,\"name\":\"Broadcast News\"}\tdata/json/example_r.ndjson\n+{\"id\":4,\"name\":\"Broadcast News\"}\tdata/json/example_rn.ndjson\n+{\"id\":5,\"name\":\"Raising Arizona\"}\tdata/json/example_n.ndjson\n+{\"id\":5,\"name\":\"Raising Arizona\"}\tdata/json/example_r.ndjson\n+{\"id\":5,\"name\":\"Raising Arizona\"}\tdata/json/example_rn.ndjson\n+\n+query I\n+select * from read_json_objects_auto(['data/json/example_n.ndjson', 'data/json/top_level_array.json'], union_by_name=true) order by all\n+----\n+{\"conclusion\":\"cancelled\"}\n+{\"conclusion\":\"cancelled\"}\n+{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n+{\"id\":2,\"name\":\"Home for the Holidays\"}\n+{\"id\":3,\"name\":\"The Firm\"}\n+{\"id\":4,\"name\":\"Broadcast News\"}\n+{\"id\":5,\"name\":\"Raising Arizona\"}\n+\n+query II\n+select j, count(*) from read_json_objects_auto('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING=1) group by j order by j\n+----\n+[0]\t5\n+[1]\t5\n+[2]\t5\n+[3]\t5\n+\n+# also test the filter pushdown\n+query II\n+SELECT j, count(*)\n+FROM read_json_auto('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING=1)\n+where j='[2]'\n+group by j\n+order by j;\n+----\n+[2]\t5\n+\n+query II\n+SELECT j, count(*)\n+FROM read_json_auto('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING=1)\n+where j>'[2]'\n+group by j\n+order by j;\n+----\n+[3]\t5\n+\n+query II\n+SELECT j, count(*)\n+FROM read_json_auto('__TEST_DIR__/json_part/j=*/*.csv', HIVE_PARTITIONING=1)\n+where sqrt(j[2]::int) > 1.5\n+group by j\n+order by j;\n+----\n+[3]\t5\ndiff --git a/test/sql/json/json_nested_casts.test b/test/sql/json/json_nested_casts.test\nindex 0031c9045f0a..eee21f61ee08 100644\n--- a/test/sql/json/json_nested_casts.test\n+++ b/test/sql/json/json_nested_casts.test\n@@ -95,3 +95,294 @@ query I\n SELECT '42'::UNION(u VARCHAR)::JSON\n ----\n 42\n+\n+# we support our nested to and from JSON (just calls to_json and from_json - well tested)\n+query I\n+SELECT {duck: 42}::JSON\n+----\n+{\"duck\":42}\n+\n+query I\n+SELECT '{\"duck\":42}'::JSON::STRUCT(duck INTEGER)\n+----\n+{'duck': 42}\n+\n+query I\n+SELECT ['duck']::JSON\n+----\n+[\"duck\"]\n+\n+query I\n+SELECT '[\"duck\"]'::JSON::VARCHAR[]\n+----\n+[duck]\n+\n+query I\n+SELECT MAP(['duck'], [42])::JSON\n+----\n+{\"duck\":42}\n+\n+query I\n+SELECT '{\"duck\":42}'::JSON::MAP(VARCHAR, INTEGER)\n+----\n+{duck=42}\n+\n+# casting should be strict\n+statement error\n+SELECT '{\"duck\":42}'::JSON::STRUCT(goose INTEGER)\n+----\n+Conversion Error\n+\n+statement error\n+SELECT '[\"a\", \"b\", \"c\"]'::JSON::INT[]\n+----\n+Conversion Error\n+\n+statement error\n+SELECT '{\"duck\":42}'::JSON::MAP(INTEGER, INTEGER)\n+----\n+Conversion Error\n+\n+# however, when we encounter a conversion error in a nested type with TRY, only that becomes NULL\n+query I\n+SELECT TRY_CAST('{\"duck\":42}'::JSON AS STRUCT(goose INTEGER))\n+----\n+{'goose': NULL}\n+\n+query I\n+SELECT TRY_CAST('[\"a\", \"b\", \"c\"]'::JSON AS INT[])\n+----\n+[NULL, NULL, NULL]\n+\n+# map keys cannot be NULL\n+statement error\n+SELECT TRY_CAST('{\"duck\":42}'::JSON AS MAP(INTEGER, INTEGER))\n+----\n+Conversion Error\n+\n+# but values can\n+query I\n+SELECT TRY_CAST('{\"42\":\"duck\"}'::JSON AS MAP(INTEGER, INTEGER))\n+----\n+{42=NULL}\n+\n+# we can also cast implicitly to our types\n+statement ok\n+CREATE TABLE structs (v STRUCT(duck INTEGER))\n+\n+statement ok\n+CREATE TABLE lists (v VARCHAR[])\n+\n+statement ok\n+CREATE table maps (v MAP(VARCHAR, INTEGER))\n+\n+statement ok\n+INSERT INTO structs VALUES ('{\"duck\":42}'::JSON)\n+\n+statement ok\n+INSERT INTO lists VALUES ('[\"duck\"]'::JSON)\n+\n+statement ok\n+INSERT INTO maps VALUES ('{\"duck\":42}'::JSON)\n+\n+query I\n+SELECT * FROM structs\n+----\n+{'duck': 42}\n+\n+query I\n+SELECT * FROM lists\n+----\n+[duck]\n+\n+query I\n+SELECT * FROM maps\n+----\n+{duck=42}\n+\n+# and back to JSON\n+statement ok\n+CREATE TABLE jsons (j JSON)\n+\n+statement ok\n+INSERT INTO jsons SELECT * FROM structs\n+\n+statement ok\n+INSERT INTO jsons SELECT * FROM lists\n+\n+statement ok\n+INSERT INTO jsons SELECT * FROM maps\n+\n+query I\n+SELECT * FROM jsons\n+----\n+{\"duck\":42}\n+[\"duck\"]\n+{\"duck\":42}\n+\n+# test_all_types roundtrip, excludes:\n+# 1. varchar (special case - input is not valid JSON)\n+# 2. blob - contains '\\0'\n+# 3. bit - contains '\\0'\n+# 4. medium_enum - don't want to create this enum\n+# 5. large_enum - don't want to create this enum\n+# and casts DECIMALs with large precision to DOUBLE because JSON can only deal with DOUBLE, and we lose some precision\n+statement ok\n+create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');\n+\n+query I nosort q0\n+select bool,\n+       tinyint,\n+       smallint,\n+       int,\n+       bigint,\n+       hugeint,\n+       utinyint,\n+       usmallint,\n+       uint,\n+       ubigint,\n+       date,\n+       time,\n+       timestamp,\n+       timestamp_s,\n+       timestamp_ms,\n+       timestamp_ns,\n+       time_tz,\n+       timestamp_tz,\n+       float,\n+       double,\n+       dec_4_1,\n+       dec_9_4,\n+       dec_18_6::DOUBLE as dec_18_6,\n+       dec38_10::DOUBLE as dec38_10,\n+       uuid,\n+       interval,\n+       small_enum,\n+       int_array,\n+       double_array,\n+       date_array,\n+       timestamp_array,\n+       timestamptz_array,\n+       varchar_array,\n+       nested_int_array,\n+       struct,\n+       struct_of_arrays,\n+       array_of_structs,\n+       map,\n+from test_all_types()\n+----\n+\n+\n+statement ok\n+create table all_types_json as\n+select bool::JSON as bool,\n+       tinyint::JSON as tinyint,\n+       smallint::JSON as smallint,\n+       int::JSON as int,\n+       bigint::JSON as bigint,\n+       hugeint::JSON as hugeint,\n+       utinyint::JSON as utinyint,\n+       usmallint::JSON as usmallint,\n+       uint::JSON as uint,\n+       ubigint::JSON as ubigint,\n+       date::JSON as date,\n+       time::JSON as time,\n+       timestamp::JSON as timestamp,\n+       timestamp_s::JSON as timestamp_s,\n+       timestamp_ms::JSON as timestamp_ms,\n+       timestamp_ns::JSON as timestamp_ns,\n+       time_tz::JSON as time_tz,\n+       timestamp_tz::JSON as timestamp_tz,\n+       float::JSON as float,\n+       double::JSON as double,\n+       dec_4_1::JSON as dec_4_1,\n+       dec_9_4::JSON as dec_9_4,\n+       dec_18_6::DOUBLE::JSON as dec_18_6,\n+       dec38_10::DOUBLE::JSON as dec38_10,\n+       uuid::JSON as uuid,\n+       interval::JSON as interval,\n+       small_enum::JSON as small_enum,\n+       int_array::JSON as int_array,\n+       double_array::JSON as double_array,\n+       date_array::JSON as date_array,\n+       timestamp_array::JSON as timestamp_array,\n+       timestamptz_array::JSON as timestamptz_array,\n+       varchar_array::JSON as varchar_array,\n+       nested_int_array::JSON as nested_int_array,\n+       struct::JSON as struct,\n+       struct_of_arrays::JSON as struct_of_arrays,\n+       array_of_structs::JSON as array_of_structs,\n+       map::JSON as map,\n+from test_all_types()\n+\n+statement ok\n+create table roundtrip as\n+select bool::BOOLEAN as bool,\n+       tinyint::TINYINT as tinyint,\n+       smallint::SMALLINT as smallint,\n+       int::INTEGER as int,\n+       bigint::BIGINT as bigint,\n+       hugeint::HUGEINT as hugeint,\n+       utinyint::UTINYINT as utinyint,\n+       usmallint::USMALLINT as usmallint,\n+       uint::UINTEGER as uint,\n+       ubigint::UBIGINT as ubigint,\n+       date::DATE as date,\n+       time::TIME as time,\n+       timestamp::TIMESTAMP as timestamp,\n+       timestamp_s::TIMESTAMP_S as timestamp_s,\n+       timestamp_ms::TIMESTAMP_MS as timestamp_ms,\n+       timestamp_ns::TIMESTAMP_NS as timestamp_ns,\n+       time_tz::TIME WITH TIME ZONE as time_tz,\n+       timestamp_tz::TIMESTAMP WITH TIME ZONE as timestamp_tz,\n+       float::FLOAT as float,\n+       double::DOUBLE as double,\n+       dec_4_1::DECIMAL(4,1) as dec_4_1,\n+       dec_9_4::DECIMAL(9,4) as dec_9_4,\n+       dec_18_6::DOUBLE as dec_18_6,\n+       dec38_10::DOUBLE as dec38_10,\n+       uuid::UUID as uuid,\n+       interval::INTERVAL as interval,\n+       small_enum::small_enum as small_enum,\n+       int_array::INTEGER[] as int_array,\n+       double_array::DOUBLE[] as double_array,\n+       date_array::DATE[] as date_array,\n+       timestamp_array::TIMESTAMP[] as timestamp_array,\n+       timestamptz_array::TIMESTAMP WITH TIME ZONE[] as timestamptz_array,\n+       varchar_array::VARCHAR[] as varchar_array,\n+       nested_int_array::INTEGER[][] as nested_int_array,\n+       struct::STRUCT(a INTEGER, b VARCHAR) as struct,\n+       struct_of_arrays::STRUCT(a INTEGER[], b VARCHAR[]) as struct_of_arrays,\n+       array_of_structs::STRUCT(a INTEGER, b VARCHAR)[] as array_of_structs,\n+       map::MAP(VARCHAR, VARCHAR) as map\n+from all_types_json\n+\n+query I nosort q0\n+select * from roundtrip\n+----\n+\n+\n+# also check that we handle vector types properly\n+foreach all_flat true false\n+\n+query I nosort q1\n+select v from test_vector_types(null::int[], ${all_flat}) tbl(v)\n+----\n+\n+\n+query I nosort q1\n+select v::JSON::INT[] from test_vector_types(null::int[], ${all_flat}) tbl(v)\n+----\n+\n+\n+query I nosort q2\n+select v from test_vector_types(NULL::ROW(i INTEGER, j VARCHAR), ${all_flat}) tbl(v)\n+----\n+\n+\n+query I nosort q2\n+select v::JSON::ROW(i INTEGER, j VARCHAR) from test_vector_types(NULL::ROW(i INTEGER, j VARCHAR), ${all_flat}) tbl(v)\n+----\n+\n+\n+endloop\ndiff --git a/test/sql/json/read_json.test b/test/sql/json/read_json.test\nindex 74853ee16531..0c5ff9b6b3ec 100644\n--- a/test/sql/json/read_json.test\n+++ b/test/sql/json/read_json.test\n@@ -10,11 +10,18 @@ pragma enable_verification\n statement error\n SELECT * FROM read_json('data/json/example_n.ndjson')\n ----\n-Binder Error: read_json \"columns\" parameter is required\n+Binder Error\n \n-query II\n+# read_json assumes array of obj\n+statement error\n SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n ----\n+Invalid Input Error: Expected top-level JSON array\n+\n+# read_ndjson works\n+query II\n+SELECT * FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n+----\n 1\tO Brother, Where Art Thou?\n 2\tHome for the Holidays\n 3\tThe Firm\n@@ -23,7 +30,7 @@ SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', na\n \n # We can also read only one of the columns\n query I\n-SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER'})\n+SELECT * FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER'})\n ----\n 1\n 2\n@@ -32,7 +39,7 @@ SELECT * FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER'})\n 5\n \n query I\n-SELECT * FROM read_json('data/json/example_n.ndjson', columns={name: 'VARCHAR'})\n+SELECT * FROM read_ndjson('data/json/example_n.ndjson', columns={name: 'VARCHAR'})\n ----\n O Brother, Where Art Thou?\n Home for the Holidays\n@@ -51,15 +58,6 @@ NULL\tNULL\n 5\tRaising Arizona\n \n # some of these values don't have \"name\"\n-query II\n-SELECT * FROM read_json('data/json/different_schemas.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n-----\n-1\tO Brother, Where Art Thou?\n-2\tNULL\n-3\tThe Firm\n-4\tNULL\n-5\tRaising Arizona\n-\n query II\n SELECT * FROM read_ndjson('data/json/different_schemas.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n ----\n@@ -71,7 +69,7 @@ SELECT * FROM read_ndjson('data/json/different_schemas.ndjson', columns={id: 'IN\n \n # test projection pushdown (unstructured json)\n query I\n-SELECT id FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n+SELECT id FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'}, format='unstructured')\n ----\n 1\n 2\n@@ -80,7 +78,7 @@ SELECT id FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', n\n 5\n \n query I\n-SELECT name FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n+SELECT name FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'}, format='unstructured')\n ----\n O Brother, Where Art Thou?\n Home for the Holidays\n@@ -90,7 +88,7 @@ Raising Arizona\n \n # test projection pushdown (newline-delimited json)\n query I\n-SELECT id FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n+SELECT id FROM read_json('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'}, format='newline_delimited')\n ----\n 1\n 2\n@@ -99,7 +97,7 @@ SELECT id FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER',\n 5\n \n query I\n-SELECT name FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'})\n+SELECT name FROM read_ndjson('data/json/example_n.ndjson', columns={id: 'INTEGER', name: 'VARCHAR'}, format='nd')\n ----\n O Brother, Where Art Thou?\n Home for the Holidays\n@@ -126,6 +124,46 @@ SELECT * FROM 'data/json/example_n.ndjson'\n 4\tBroadcast News\n 5\tRaising Arizona\n \n+# we can detect at varying levels, level 0 is just JSON\n+query I\n+SELECT * FROM read_json_auto('data/json/with_list.json', maximum_depth=0)\n+----\n+{\"id\":1,\"name\":[\"O\",\"Brother,\",\"Where\",\"Art\",\"Thou?\"]}\n+{\"id\":2,\"name\":[\"Home\",\"for\",\"the\",\"Holidays\"]}\n+{\"id\":3,\"name\":[\"The\",\"Firm\"]}\n+{\"id\":4,\"name\":[\"Broadcast\",\"News\"]}\n+{\"id\":5,\"name\":[\"Raising\",\"Arizona\"]}\n+\n+# at level one we get JSON and JSON\n+query II\n+SELECT * FROM read_json_auto('data/json/with_list.json', maximum_depth=1)\n+----\n+1\t[\"O\",\"Brother,\",\"Where\",\"Art\",\"Thou?\"]\n+2\t[\"Home\",\"for\",\"the\",\"Holidays\"]\n+3\t[\"The\",\"Firm\"]\n+4\t[\"Broadcast\",\"News\"]\n+5\t[\"Raising\",\"Arizona\"]\n+\n+# at level 2 we get BIGINT and JSON[]\n+query II\n+SELECT * FROM read_json_auto('data/json/with_list.json', maximum_depth=2)\n+----\n+1\t[\"O\", \"Brother,\", \"Where\", \"Art\", \"Thou?\"]\n+2\t[\"Home\", \"for\", \"the\", \"Holidays\"]\n+3\t[\"The\", \"Firm\"]\n+4\t[\"Broadcast\", \"News\"]\n+5\t[\"Raising\", \"Arizona\"]\n+\n+# at level 3 it's fully detected, and we get BIGINT and VARCHAR[]\n+query II\n+SELECT * FROM read_json_auto('data/json/with_list.json', maximum_depth=3)\n+----\n+1\t[O, Brother,, Where, Art, Thou?]\n+2\t[Home, for, the, Holidays]\n+3\t[The, Firm]\n+4\t[Broadcast, News]\n+5\t[Raising, Arizona]\n+\n # we can detect lists too\n query III\n SELECT id, typeof(name), unnest(name) FROM 'data/json/with_list.json'\n@@ -146,9 +184,9 @@ SELECT id, typeof(name), unnest(name) FROM 'data/json/with_list.json'\n 5\tVARCHAR[]\tRaising\n 5\tVARCHAR[]\tArizona\n \n-# with depth 1 we don't bother detecting inside of the list - defaults to JSON\n+# with depth 2 we don't bother detecting inside of the list - defaults to JSON\n query III\n-SELECT id, typeof(name), unnest(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=1)\n+SELECT id, typeof(name), unnest(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=2)\n ----\n 1\tJSON[]\t\"O\"\n 1\tJSON[]\t\"Brother,\"\n@@ -168,7 +206,7 @@ SELECT id, typeof(name), unnest(name) FROM read_json_auto('data/json/with_list.j\n \n # with depth 0 we don't bother detecting anything, everything defaults to JSON (even the \"id\" column in this case)\n query II\n-SELECT typeof(id), typeof(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=0)\n+SELECT typeof(id), typeof(name) FROM read_json_auto('data/json/with_list.json', maximum_depth=1)\n ----\n JSON\tJSON\n JSON\tJSON\n@@ -188,44 +226,44 @@ ae24e69e-e0bf-4e85-9848-27d35df85b8b\tUUID\n \n # top-level array of values\n query I\n-select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'}, json_format='array_of_records')\n+select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'})\n ----\n cancelled\n cancelled\n \n query I\n-select * from read_json('data/json/top_level_array.json', auto_detect=true, json_format='array_of_records')\n+select * from read_json('data/json/top_level_array.json', auto_detect=true)\n ----\n cancelled\n cancelled\n \n # if we try to read it with 'unstructured', we get an error\n statement error\n-select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'}, lines='false')\n+select * from read_json('data/json/top_level_array.json', columns={conclusion: 'VARCHAR'}, format='unstructured')\n ----\n-Invalid Input Error: JSON transform error in file \"data/json/top_level_array.json\", in object 1: Expected OBJECT, but got ARRAY\n+Invalid Input Error: JSON transform error in file \"data/json/top_level_array.json\", in record/value 1: Expected OBJECT, but got ARRAY\n \n # if we try to read an ndjson file as if it is an array of values, we get an error\n statement error\n-select * from read_json_auto('data/json/example_n.ndjson', json_format='array_of_records')\n+select * from read_json_auto('data/json/example_n.ndjson', format='array')\n ----\n-Invalid Input Error: JSON transform error in file \"data/json/example_n.ndjson\", in line 1: Expected JSON ARRAY but got OBJECT\n+Invalid Input Error: Expected top-level JSON array\n \n # test that we can read a list of longer than STANDARD_VECTOR_SIZE properly\n statement ok\n copy (select list(to_json({duck: 42})) from range(10000)) to '__TEST_DIR__/my_file.json' (format csv, quote '')\n \n query T\n-select count(*) from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, json_format='array_of_records')\n+select count(*) from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, format='array')\n ----\n 10000\n \n query T\n-select sum(duck) = 42*10000 from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, json_format='array_of_records')\n+select sum(duck) = 42*10000 from read_json('__TEST_DIR__/my_file.json', columns={duck: 'INTEGER'}, format='array')\n ----\n true\n \n-# read_json_auto also understands array of values\n+# read_json_auto also understands ARRAY format\n query T\n select count(*) from '__TEST_DIR__/my_file.json'\n ----\n@@ -236,7 +274,7 @@ select sum(duck) = 42*10000 from '__TEST_DIR__/my_file.json'\n ----\n true\n \n-# what if we do an array of non-values?\n+# what if we do an array of non-records?\n statement ok\n copy (select list(range) from range(10)) to '__TEST_DIR__/my_file.json' (format csv, quote '')\n \n@@ -254,8 +292,62 @@ select * from '__TEST_DIR__/my_file.json'\n 8\n 9\n \n+# fails because it's not records\n+statement error\n+select * from read_json('__TEST_DIR__/my_file.json', format='array', columns={range: 'INTEGER'})\n+----\n+Invalid Input Error: JSON transform error\n+\n+# fails because it's not records\n+statement error\n+select * from read_json_auto('__TEST_DIR__/my_file.json', format='array', records='true')\n+----\n+Binder Error: json_read expected records\n+\n+query T\n+select * from read_json('__TEST_DIR__/my_file.json', format='auto', records='false', auto_detect=true)\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# need to supply columns\n+statement error\n+select * from read_json('__TEST_DIR__/my_file.json', format='auto', records='false', auto_detect=false)\n+----\n+Binder Error\n+\n+# read as unstructured values, so we just get the array\n+query T\n+select * from read_json('__TEST_DIR__/my_file.json', format='unstructured', records='false', auto_detect=true)\n+----\n+[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n+\n+# array of non-records\n+query T\n+select * from read_json('__TEST_DIR__/my_file.json', format='array', records='false', auto_detect=true)\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# also works with auto\n query T\n-select * from read_json('__TEST_DIR__/my_file.json', json_format='array_of_values', columns={range: 'INTEGER'})\n+select * from read_json('__TEST_DIR__/my_file.json', format='array', records='auto', auto_detect=true)\n ----\n 0\n 1\n@@ -268,13 +360,44 @@ select * from read_json('__TEST_DIR__/my_file.json', json_format='array_of_value\n 8\n 9\n \n-# fails because it's not an array of records\n+# issue 6646, this is not an array, but we try to read it as one\n statement error\n-select * from read_json_auto('__TEST_DIR__/my_file.json', json_format='array_of_records')\n+select json_structure(json ->> '$.metadata') as structure,\n+from read_json('data/json/issue.json', format='array', columns={'json': 'JSON'}, maximum_object_size=104857600)\n+limit 1;\n+----\n+Invalid Input Error: Expected top-level JSON array\n+\n+# let's try a variation\n+statement error\n+select json_structure(json ->> '$.metadata') as structure,\n+from read_json('data/json/issue.json', format='array', records='false', columns={'json': 'JSON'}, maximum_object_size=104857600)\n+limit 1;\n+----\n+Invalid Input Error: Expected top-level JSON array\n+\n+# we can parse it as unstructured values, and give it a different col name\n+query I\n+select json_structure(my_json ->> '$.metadata') as structure,\n+from read_json('data/json/issue.json', format='unstructured', records='false', columns={'my_json': 'JSON'}, maximum_object_size=104857600)\n+limit 1;\n+----\n+{\"argv\":[\"VARCHAR\"],\"dag\":{\"dag_size\":\"VARCHAR\",\"tasks\":{\"load_oscar\":{\"status\":\"VARCHAR\",\"type\":\"VARCHAR\",\"upstream\":\"VARCHAR\",\"products\":{\"nb\":\"VARCHAR\"}},\"load_weather\":{\"status\":\"VARCHAR\",\"type\":\"VARCHAR\",\"upstream\":\"VARCHAR\",\"products\":{\"nb\":\"VARCHAR\"}},\"compress\":{\"status\":\"VARCHAR\",\"type\":\"VARCHAR\",\"upstream\":{\"load_oscar\":\"VARCHAR\"},\"products\":{\"nb\":\"VARCHAR\"}}}}}\n \n statement ok\n pragma disable_verification\n \n+# test that we can read a JSON list that spans more than one buffer size\n+# the JSON is 55 bytes, and the minimum buffer size is 2097152\n+# let's do 50k to be safe\n+statement ok\n+copy (select list(to_json({this_is_a_very_long_field_name_yes_very_much_so:42})) from range(50000)) to '__TEST_DIR__/my_file.json' (format csv, quote '')\n+\n+query T\n+select sum(this_is_a_very_long_field_name_yes_very_much_so) = 42 * 50000 from '__TEST_DIR__/my_file.json'\n+----\n+true\n+\n require httpfs\n \n query II\ndiff --git a/test/sql/json/read_json_auto.test_slow b/test/sql/json/read_json_auto.test_slow\nindex eb4acc620040..161ea2b194bd 100644\n--- a/test/sql/json/read_json_auto.test_slow\n+++ b/test/sql/json/read_json_auto.test_slow\n@@ -2,11 +2,11 @@\n # description: Read json files - schema detection\n # group: [json]\n \n+require json\n+\n statement ok\n pragma enable_verification\n \n-require json\n-\n # some arrow tests (python/pyarrow/tests/test_json.py) on their github\n # these are very similar to the pandas tests, so let's not copy those\n # instead of adding all of these files to data/test we just create them on the fly here\n@@ -110,6 +110,13 @@ select * from read_json_auto('data/json/top_level_array.json', maximum_depth=1)\n \"cancelled\"\n \"cancelled\"\n \n+# if we read this with records='false', we get the struct instead of the unpacked columns\n+query I\n+select typeof(json) from read_json_auto('data/json/top_level_array.json', records='false')\n+----\n+STRUCT(conclusion VARCHAR)\n+STRUCT(conclusion VARCHAR)\n+\n # however, if there are multiple top-level arrays, we default to reading them as lists\n query I\n select * from 'data/json/top_level_two_arrays.json'\n@@ -117,6 +124,11 @@ select * from 'data/json/top_level_two_arrays.json'\n [{'conclusion': cancelled}, {'conclusion': cancelled}]\n [{'conclusion': cancelled}, {'conclusion': cancelled}]\n \n+# if we read a top-level array as if it is a record, then we get an error\n+statement error\n+select * from read_json_auto('data/json/top_level_array.json', format='unstructured', records='true')\n+----\n+Binder Error: json_read expected records\n \n # issue Mark found when analyzing a JSON dump of our CI - projection pushdown wasn't working properly\n statement ok\n@@ -174,13 +186,13 @@ require httpfs\n \n # this is one big object - yyjson uses it as a benchmark\n query II\n-select typeof(\"type\"), typeof(features) from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=2);\n+select typeof(\"type\"), typeof(features) from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=3);\n ----\n VARCHAR\tSTRUCT(\"type\" JSON, properties JSON, geometry JSON)[]\n \n # let's crank up maximum_depth and see if we can fully unnest this big object\n query II\n-select typeof(\"type\"), typeof(features) from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=7);\n+select typeof(\"type\"), typeof(features) from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=8);\n ----\n VARCHAR\tSTRUCT(\"type\" VARCHAR, properties STRUCT(\"name\" VARCHAR), geometry STRUCT(\"type\" VARCHAR, coordinates DOUBLE[][][]))[]\n \n@@ -189,6 +201,6 @@ VARCHAR\tSTRUCT(\"type\" VARCHAR, properties STRUCT(\"name\" VARCHAR), geometry STRUC\n # the \"coordinates\" array in \"features.geometry\" is huge, let's just check the length - not all the values\n query IIIII\n select type, features[1].type, features[1].properties.name, features[1].geometry.type, length(features[1].geometry.coordinates)\n-from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=7);\n+from read_json_auto('https://github.com/duckdb/duckdb-data/releases/download/v1.0/canada.json', maximum_object_size=4194304, maximum_depth=8);\n ----\n FeatureCollection\tFeature\tCanada\tPolygon\t480\ndiff --git a/test/sql/json/read_json_dates.test b/test/sql/json/read_json_dates.test\nindex 25229640dc6c..135871cbc3ee 100644\n--- a/test/sql/json/read_json_dates.test\n+++ b/test/sql/json/read_json_dates.test\n@@ -2,10 +2,16 @@\n # description: Read json files - date detection\n # group: [json]\n \n+require json\n+\n statement ok\n pragma enable_verification\n \n-require json\n+# issue #6774\n+query I\n+select * from read_json_auto('data/json/simple_timestamp.json', columns={\"ts\": \"TIMESTAMP[]\"});\n+----\n+[2022-06-01 06:41:58, 2021-08-21 08:26:55.5, 2009-11-15 21:58:54.636]\n \n # create date and timestamp tables\n statement ok\n@@ -14,6 +20,27 @@ create table date_test as select '1996/03/27'::DATE d\n statement ok\n create table timestamp_test as select '1996-03-27 07:42:33'::TIMESTAMP t\n \n+# cannot be empty\n+statement error\n+copy (select d from date_test) to '__TEST_DIR__/my_file.json' (dateformat)\n+----\n+Binder Error\n+\n+statement error\n+copy (select d from date_test) to '__TEST_DIR__/my_file.json' (timestampformat)\n+----\n+Binder Error\n+\n+statement error\n+copy date_test from '__TEST_DIR__/my_file.json' (dateformat)\n+----\n+Binder Error\n+\n+statement error\n+copy date_test from '__TEST_DIR__/my_file.json' (timestampformat)\n+----\n+Binder Error\n+\n # test all supported date formats\n foreach date_format '%m-%d-%Y' '%m-%d-%y' '%d-%m-%Y' '%d-%m-%y' '%Y-%m-%d' '%y-%m-%d'\n \n@@ -26,9 +53,9 @@ select typeof(d), d from '__TEST_DIR__/my_file.json'\n ----\n DATE\t1996-03-27\n \n-# forced format read_json\n+# forced format read_ndjson\n query II\n-select typeof(d), d from read_json('__TEST_DIR__/my_file.json', columns={d: 'DATE'}, dateformat=${date_format})\n+select typeof(d), d from read_ndjson('__TEST_DIR__/my_file.json', columns={d: 'DATE'}, dateformat=${date_format})\n ----\n DATE\t1996-03-27\n \n@@ -61,9 +88,9 @@ select typeof(t), t from '__TEST_DIR__/my_file.json'\n ----\n TIMESTAMP\t1996-03-27 07:42:33\n \n-# forced format read_json\n+# forced format read_ndjson\n query II\n-select typeof(t), t from read_json('__TEST_DIR__/my_file.json', columns={t: 'TIMESTAMP'}, timestamp_format=${a} ${b} ${c})\n+select typeof(t), t from read_ndjson('__TEST_DIR__/my_file.json', columns={t: 'TIMESTAMP'}, timestamp_format=${a} ${b} ${c})\n ----\n TIMESTAMP\t1996-03-27 07:42:33\n \ndiff --git a/test/sql/json/read_json_many_files.test_slow b/test/sql/json/read_json_many_files.test_slow\nindex 7b0c5ffaab47..345a9f67f44f 100644\n--- a/test/sql/json/read_json_many_files.test_slow\n+++ b/test/sql/json/read_json_many_files.test_slow\n@@ -18,3 +18,16 @@ query T\n select count(*) from read_json_auto('__TEST_DIR__/input*.json');\n ----\n 6000\n+\n+# also test gzipped (issue #6588)\n+loop i 0 2000\n+\n+statement ok\n+copy input to '__TEST_DIR__/input${i}.json.gz';\n+\n+endloop\n+\n+query T\n+select count(*) from read_json_auto('__TEST_DIR__/input*.json.gz');\n+----\n+6000\n\\ No newline at end of file\ndiff --git a/test/sql/json/read_json_objects.test b/test/sql/json/read_json_objects.test\nindex 4ccd98e0f8d5..59eccc171ef5 100644\n--- a/test/sql/json/read_json_objects.test\n+++ b/test/sql/json/read_json_objects.test\n@@ -13,7 +13,7 @@ require json\n statement error\n select * from read_json_objects('data/json/unterminated_quotes.ndjson')\n ----\n-Invalid Input Error: Malformed JSON in file \"data/json/unterminated_quotes.ndjson\"\n+Invalid Input Error: Expected top-level JSON array\n \n # now it should work!\n query I\n@@ -27,7 +27,7 @@ SELECT * FROM read_csv('data/json/example_n.ndjson', columns={'json': 'JSON'}, d\n \n # example_n is with regular \\n newlines\n query I\n-SELECT * FROM read_json_objects('data/json/example_n.ndjson')\n+SELECT * FROM read_ndjson_objects('data/json/example_n.ndjson')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -35,6 +35,12 @@ SELECT * FROM read_json_objects('data/json/example_n.ndjson')\n {\"id\":4,\"name\":\"Broadcast News\"}\n {\"id\":5,\"name\":\"Raising Arizona\"}\n \n+# this one does not have the 'records' param\n+statement error\n+SELECT * FROM read_ndjson_objects('data/json/example_n.ndjson', records='false')\n+----\n+Binder Error: Invalid named parameter\n+\n query I\n SELECT * FROM read_ndjson_objects('data/json/example_n.ndjson')\n ----\n@@ -46,7 +52,7 @@ SELECT * FROM read_ndjson_objects('data/json/example_n.ndjson')\n \n # we can auto-detect that it's newline-delimited\n query I\n-SELECT * FROM read_json_objects('data/json/example_n.ndjson', lines='auto')\n+SELECT * FROM read_json_objects('data/json/example_n.ndjson', format='auto')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -54,9 +60,9 @@ SELECT * FROM read_json_objects('data/json/example_n.ndjson', lines='auto')\n {\"id\":4,\"name\":\"Broadcast News\"}\n {\"id\":5,\"name\":\"Raising Arizona\"}\n \n-# example_r is with \\r newlines - works with read_json_objects\n+# example_r is with \\r newlines - works with unstructured\n query I\n-SELECT * FROM read_json_objects('data/json/example_r.ndjson')\n+SELECT * FROM read_json_objects('data/json/example_r.ndjson', format='unstructured')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -66,7 +72,7 @@ SELECT * FROM read_json_objects('data/json/example_r.ndjson')\n \n # we can detect that it's not newline-delimited\n query I\n-SELECT * FROM read_json_objects('data/json/example_r.ndjson', lines='auto')\n+SELECT * FROM read_json_objects('data/json/example_r.ndjson', format='auto')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -82,7 +88,7 @@ Invalid Input Error: Malformed JSON in file \"data/json/example_r.ndjson\"\n \n # example_rn is with \\r\\n newlines\n query I\n-SELECT * FROM read_json_objects('data/json/example_rn.ndjson')\n+SELECT * FROM read_ndjson_objects('data/json/example_rn.ndjson')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -101,7 +107,7 @@ SELECT * FROM read_ndjson_objects('data/json/example_rn.ndjson')\n \n # same but gzipped\n query I\n-SELECT * FROM read_json_objects('data/json/example_rn.ndjson.gz')\n+SELECT * FROM read_ndjson_objects('data/json/example_rn.ndjson.gz')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -110,7 +116,7 @@ SELECT * FROM read_json_objects('data/json/example_rn.ndjson.gz')\n {\"id\":5,\"name\":\"Raising Arizona\"}\n \n query I\n-SELECT * FROM read_ndjson_objects('data/json/example_rn.ndjson.gz')\n+SELECT * FROM read_json_objects('data/json/example_rn.ndjson.gz', format='nd')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -120,7 +126,7 @@ SELECT * FROM read_ndjson_objects('data/json/example_rn.ndjson.gz')\n \n # multi-file scan\n query I\n-SELECT count(*) from read_json_objects(['data/json/example_n.ndjson', 'data/json/example_r.ndjson', 'data/json/example_rn.ndjson'])\n+SELECT count(*) from read_json_objects(['data/json/example_n.ndjson', 'data/json/example_r.ndjson', 'data/json/example_rn.ndjson'], format='auto')\n ----\n 15\n \n@@ -131,7 +137,7 @@ SELECT count(*) from read_ndjson_objects(['data/json/example_n.ndjson', 'data/js\n \n # globbing\n query I\n-SELECT count(*) from read_json_objects('data/json/example_*.ndjson')\n+SELECT count(*) from read_json_objects('data/json/example_*.ndjson', format='auto')\n ----\n 15\n \n@@ -144,7 +150,7 @@ require httpfs\n \n # same file but hosted on github\n query I\n-select * from read_json_objects('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson')\n+select * from read_json_objects('https://github.com/duckdb/duckdb-data/releases/download/v1.0/example_rn.ndjson', format='nd')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -172,7 +178,7 @@ select * from read_ndjson_objects('data/json/empty.ndjson')\n \n # invalid json stuff\n statement error\n-select * from read_json_objects('data/json/unterminated_quotes.ndjson')\n+select * from read_json_objects('data/json/unterminated_quotes.ndjson', format='nd')\n ----\n Invalid Input Error: Malformed JSON in file \"data/json/unterminated_quotes.ndjson\"\n \n@@ -183,7 +189,7 @@ Invalid Input Error: Malformed JSON in file \"data/json/unterminated_quotes.ndjso\n \n # we can auto-detect and ignore the error (becomes NULL)\n query I\n-select * from read_ndjson_objects('data/json/unterminated_quotes.ndjson', lines='auto', ignore_errors=true)\n+select * from read_json_objects('data/json/unterminated_quotes.ndjson', format='auto', ignore_errors=true)\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -193,7 +199,7 @@ NULL\n \n # multiple values per line (works for read_json_objects)\n query I\n-select * from read_json_objects('data/json/multiple_objects_per_line.ndjson')\n+select * from read_json_objects('data/json/multiple_objects_per_line.ndjson', format='unstructured')\n ----\n {\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n {\"id\":2,\"name\":\"Home for the Holidays\"}\n@@ -211,7 +217,7 @@ Invalid Input Error: Malformed JSON in file \"data/json/multiple_objects_per_line\n statement error\n select * from read_json_objects('data/csv/tpcds_14.csv')\n ----\n-Invalid Input Error: Malformed JSON in file \"data/csv/tpcds_14.csv\"\n+Invalid Input Error: Expected top-level JSON array\n \n statement error\n select * from read_ndjson_objects('data/csv/tpcds_14.csv')\n@@ -222,9 +228,29 @@ Invalid Input Error: Malformed JSON in file \"data/csv/tpcds_14.csv\"\n statement error\n select * from read_json_objects('data/parquet-testing/blob.parquet')\n ----\n-Invalid Input Error: Malformed JSON in file \"data/parquet-testing/blob.parquet\"\n+Invalid Input Error: Expected top-level JSON array\n \n statement error\n select * from read_ndjson_objects('data/parquet-testing/blob.parquet')\n ----\n Invalid Input Error: Malformed JSON in file \"data/parquet-testing/blob.parquet\"\n+\n+# we can also read the objects from a JSON array (not newline-delimited)\n+query I\n+select * from read_json_objects('data/json/top_level_array.json')\n+----\n+{\"conclusion\":\"cancelled\"}\n+{\"conclusion\":\"cancelled\"}\n+\n+# and auto-detect it\n+query I\n+select * from read_json_objects('data/json/top_level_array.json', format='auto')\n+----\n+{\"conclusion\":\"cancelled\"}\n+{\"conclusion\":\"cancelled\"}\n+\n+# the file only has one line, so if we read this as ndjson, we just get the array\n+query I\n+select * from read_json_objects('data/json/top_level_array.json', format='nd')\n+----\n+[{\"conclusion\":\"cancelled\"}, {\"conclusion\":\"cancelled\"}]\ndiff --git a/test/sql/json/test_json_copy.test_slow b/test/sql/json/test_json_copy.test_slow\nindex a0f01d979206..da6a34dfffdd 100644\n--- a/test/sql/json/test_json_copy.test_slow\n+++ b/test/sql/json/test_json_copy.test_slow\n@@ -4,6 +4,55 @@\n \n require json\n \n+# test writing all types to file\n+statement ok\n+create type small_enum as enum ('DUCK_DUCK_ENUM', 'GOOSE');\n+\n+query I nosort q0\n+select * exclude (varchar, blob, bit, medium_enum, large_enum, hugeint)\n+         replace (dec_18_6::DOUBLE as dec_18_6, dec38_10::DOUBLE as dec38_10)\n+from test_all_types()\n+----\n+\n+statement ok\n+copy (\n+select * exclude (varchar, blob, bit, medium_enum, large_enum, hugeint)\n+         replace (dec_18_6::DOUBLE as dec_18_6, dec38_10::DOUBLE as dec38_10)\n+from test_all_types()\n+) to '__TEST_DIR__/all_types.ndjson'\n+\n+statement ok\n+create table roundtrip as\n+select * exclude (varchar, blob, bit, medium_enum, large_enum, hugeint)\n+         replace (dec_18_6::DOUBLE as dec_18_6, dec38_10::DOUBLE as dec38_10)\n+from test_all_types()\n+limit 0\n+\n+statement ok\n+copy roundtrip from '__TEST_DIR__/all_types.ndjson'\n+\n+query I nosort q0\n+select * from roundtrip\n+----\n+\n+statement ok\n+delete from roundtrip\n+\n+statement ok\n+copy (\n+select * exclude (varchar, blob, bit, medium_enum, large_enum, hugeint)\n+         replace (dec_18_6::DOUBLE as dec_18_6, dec38_10::DOUBLE as dec38_10)\n+from test_all_types()\n+) to '__TEST_DIR__/all_types.json' (array true)\n+\n+statement ok\n+copy roundtrip from '__TEST_DIR__/all_types.json' (array true)\n+\n+query I nosort q0\n+select * from roundtrip\n+----\n+\n+\n # test issue #6305\n statement ok\n copy (\n@@ -88,6 +137,84 @@ select * from '__TEST_DIR__/out.json'\n ----\n 42\t43\n \n+statement ok\n+create table conclusions (conclusion varchar)\n+\n+# this doesn't work because we assume NDJSON records\n+statement error\n+copy conclusions from 'data/json/top_level_array.json'\n+\n+# but works if we tell it to auto-detect\n+statement ok\n+copy conclusions from 'data/json/top_level_array.json' (AUTO_DETECT TRUE)\n+\n+statement ok\n+delete from conclusions;\n+\n+# and also if we say it's an array\n+statement ok\n+copy conclusions from 'data/json/top_level_array.json' (ARRAY TRUE)\n+\n+query I\n+select * from conclusions\n+----\n+cancelled\n+cancelled\n+\n+# same with ARRAY FALSE\n+statement error\n+copy conclusions from 'data/json/top_level_array.json' (ARRAY FALSE)\n+----\n+Invalid Input Error\n+\n+# we can also write JSON arrays instead of newline-delimited\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.json' (ARRAY TRUE)\n+\n+query T\n+select * from read_json_auto('__TEST_DIR__/my.json', format='array')\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# compression stuff (cannot be empty)\n+statement error\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.json' (COMPRESSION)\n+----\n+Binder Error\n+\n+statement ok\n+copy (select range as i from range(10)) to '__TEST_DIR__/my.json' (COMPRESSION GZIP)\n+\n+statement ok\n+create table my_range (i bigint)\n+\n+statement ok\n+copy my_range from '__TEST_DIR__/my.json' (COMPRESSION GZIP)\n+\n+query I\n+select * from my_range\n+----\n+0\n+1\n+2\n+3\n+4\n+5\n+6\n+7\n+8\n+9\n+\n+# and now for the grand benchmark\n require tpch\n \n statement ok\n@@ -96,12 +223,42 @@ start transaction\n statement ok\n call dbgen(sf=1)\n \n+# export lineitem as array (ARRAY does not need TRUE to be passed)\n+statement ok\n+COPY lineitem TO '__TEST_DIR__/lineitem.json' (ARRAY)\n+\n+# also export the whole thing\n statement ok\n EXPORT DATABASE '__TEST_DIR__/export_json_test' (FORMAT JSON)\n \n statement ok\n rollback\n \n+# test the array first\n+statement ok\n+start transaction\n+\n+statement ok\n+call dbgen(sf=0)\n+\n+# lineitem json is ~2GB so this test that we can do streaming reads of json arrays\n+statement ok\n+set memory_limit='1gb'\n+\n+statement ok\n+COPY lineitem from '__TEST_DIR__/lineitem.json' (ARRAY)\n+\n+statement ok\n+reset memory_limit\n+\n+query I\n+PRAGMA tpch(1)\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q01.csv\n+\n+statement ok\n+rollback\n+\n statement ok\n start transaction\n \n@@ -133,7 +290,7 @@ statement ok\n rollback\n \n statement ok\n-CREATE VIEW lineitem AS SELECT * FROM read_json(\n+CREATE VIEW lineitem AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/lineitem.json',\n \tcolumns={\n \t\tl_orderkey: 'INTEGER',\n@@ -156,7 +313,7 @@ CREATE VIEW lineitem AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW orders AS SELECT * FROM read_json(\n+CREATE VIEW orders AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/orders.json',\n \tcolumns={\n \t    o_orderkey: 'INTEGER',\n@@ -172,7 +329,7 @@ CREATE VIEW orders AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW partsupp AS SELECT * FROM read_json(\n+CREATE VIEW partsupp AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/partsupp.json',\n \tcolumns={\n \t\tps_partkey: 'INTEGER',\n@@ -184,7 +341,7 @@ CREATE VIEW partsupp AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW part AS SELECT * FROM read_json(\n+CREATE VIEW part AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/part.json',\n \tcolumns={\n \t\tp_partkey: 'INTEGER',\n@@ -200,7 +357,7 @@ CREATE VIEW part AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW customer AS SELECT * FROM read_json(\n+CREATE VIEW customer AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/customer.json',\n \tcolumns={\n \t\tc_custkey: 'INTEGER',\n@@ -215,7 +372,7 @@ CREATE VIEW customer AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW supplier AS SELECT * FROM read_json(\n+CREATE VIEW supplier AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/supplier.json',\n \tcolumns={\n \t\ts_suppkey: 'INTEGER',\n@@ -229,7 +386,7 @@ CREATE VIEW supplier AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW nation AS SELECT * FROM read_json(\n+CREATE VIEW nation AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/nation.json',\n \tcolumns={\n \t\tn_nationkey: 'INTEGER',\n@@ -240,7 +397,7 @@ CREATE VIEW nation AS SELECT * FROM read_json(\n );\n \n statement ok\n-CREATE VIEW region AS SELECT * FROM read_json(\n+CREATE VIEW region AS SELECT * FROM read_ndjson(\n \t'__TEST_DIR__/export_json_test/region.json',\n \tcolumns={\n \t\tr_regionkey: 'INTEGER',\ndiff --git a/test/sql/json/test_json_extract.test b/test/sql/json/test_json_extract.test\nindex 79bc904193d9..e61cb09fad30 100644\n--- a/test/sql/json/test_json_extract.test\n+++ b/test/sql/json/test_json_extract.test\n@@ -7,6 +7,27 @@ require json\n statement ok\n pragma enable_verification\n \n+# should go to our NULL\n+query T\n+select json_extract('{\"foo\": null}', '$.foo')\n+----\n+NULL\n+\n+query T\n+select json_extract('{\"foo\": null}', '$.foo.bar')\n+----\n+NULL\n+\n+query T\n+select json_extract('null', '$')\n+----\n+NULL\n+\n+query T\n+select json_extract('[null]', '$[0]')\n+----\n+NULL\n+\n query T\n select json_extract('{\"my_field\": {\"my_nested_field\": [\"goose\", \"duck\"]}}', '/my_field/my_nested_field/1')\n ----\ndiff --git a/test/sql/json/tpch_round_trip.test_slow b/test/sql/json/tpch_round_trip.test_slow\nindex 3c7e6be849e3..b8071abbe2e9 100644\n--- a/test/sql/json/tpch_round_trip.test_slow\n+++ b/test/sql/json/tpch_round_trip.test_slow\n@@ -2,23 +2,24 @@\n # description: TPCH JSON round trip\n # group: [json]\n \n-# TODO: implement COPY functions for JSON and do all tables more easily, we just do Q1 for now with from_json\n-\n require tpch\n \n require json\n \n+statement ok\n+start transaction;\n+\n statement ok\n call dbgen(sf=1)\n \n statement ok\n-copy (select to_json(lineitem) from lineitem) to '__TEST_DIR__/lineitem.json' (format csv, quote '')\n+copy lineitem to '__TEST_DIR__/lineitem.json'\n \n statement ok\n-drop table lineitem\n+rollback;\n \n statement ok\n-create table lineitem_struct as select from_json(json, '{\n+create view lineitem_struct as select from_json(json, '{\n \"l_orderkey\":\"INTEGER\",\n \"l_partkey\":\"INTEGER\",\n \"l_suppkey\":\"INTEGER\",\ndiff --git a/test/sql/parallelism/interquery/test_concurrent_index.cpp b/test/sql/parallelism/interquery/test_concurrent_index.cpp\nindex 6e6b47f165e6..82562552292a 100644\n--- a/test/sql/parallelism/interquery/test_concurrent_index.cpp\n+++ b/test/sql/parallelism/interquery/test_concurrent_index.cpp\n@@ -81,8 +81,9 @@ static void append_to_integers(DuckDB *db, idx_t threadnr) {\n }\n \n TEST_CASE(\"Concurrent writes during index creation\", \"[index][.]\") {\n-\t// FIXME: this breaks sporadically on CI\n+\t// FIXME: this is extremely slow due to an overhead in calls to the index vacuum operation (#7406)\n \treturn;\n+\n \tduckdb::unique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n \tConnection con(db);\n@@ -355,8 +356,9 @@ static void join_integers(Connection *con, bool *index_join_success, idx_t threa\n }\n \n TEST_CASE(\"Concurrent appends during index join\", \"[interquery][.]\") {\n-\t// FIXME: this test occassionally fails in the CI, likely due to a race condition in the index code\n+\t// FIXME: this is extremely slow due to an overhead in calls to the index vacuum operation (#7406)\n \treturn;\n+\n \tduckdb::unique_ptr<QueryResult> result;\n \tDuckDB db(nullptr);\n \tConnection con(db);\ndiff --git a/test/sql/parser/test_columns_lists.test b/test/sql/parser/test_columns_lists.test\nindex a495f0a6b1e7..0cbd743dc443 100644\n--- a/test/sql/parser/test_columns_lists.test\n+++ b/test/sql/parser/test_columns_lists.test\n@@ -15,35 +15,35 @@ SELECT COLUMNS([x for x in *]) FROM integers\n 13\t14\n \n query I\n-SELECT COLUMNS([x for x in (*) if x <> 'integers.i']) FROM integers\n+SELECT COLUMNS([x for x in (*) if x <> 'i']) FROM integers\n ----\n 84\n 14\n \n # short-hand, allow directly specifying the lambda\n query I\n-SELECT COLUMNS(x -> x <> 'integers.i') FROM integers\n+SELECT COLUMNS(x -> x <> 'i') FROM integers\n ----\n 84\n 14\n \n query I\n-SELECT COLUMNS([x for x in (*) if x SIMILAR TO '.*i']) FROM integers\n+SELECT COLUMNS([x for x in (*) if x SIMILAR TO 'i']) FROM integers\n ----\n 42\n 13\n \n-query II\n+query I\n SELECT COLUMNS(['i', 'i']) FROM integers\n ----\n-42\t42\n-13\t13\n+42\n+13\n \n-query II\n+query I\n SELECT COLUMNS(list_concat(['i'], ['i'])) FROM integers\n ----\n-42\t42\n-13\t13\n+42\n+13\n \n # star with exclude\n query I\n@@ -79,7 +79,7 @@ STAR expression is only allowed as the root element of an expression\n \n # empty lambda\n statement error\n-SELECT COLUMNS([x for x in (*) if x = 'integers.k']) FROM integers\n+SELECT COLUMNS([x for x in (*) if x = 'k']) FROM integers\n ----\n resulted in an empty set of columns\n \n@@ -87,22 +87,17 @@ resulted in an empty set of columns\n statement error\n SELECT COLUMNS(['k']) FROM integers\n ----\n-not found in FROM clause\n-\n-statement error\n-SELECT COLUMNS(['integers2.i']) FROM integers\n-----\n-\"integers2\" not found\n+not found in the FROM clause\n \n # COLUMNS and joins\n query I\n-SELECT COLUMNS([x for x in (*) if x LIKE '%i']) FROM integers i1 JOIN integers i2 USING (i)\n+SELECT COLUMNS([x for x in (*) if x LIKE 'i']) FROM integers i1 JOIN integers i2 USING (i)\n ----\n 42\n 13\n \n query II\n-SELECT COLUMNS([x for x in (*) if x LIKE '%i']) FROM integers i1 JOIN integers i2 ON (i1.i=i2.i)\n+SELECT COLUMNS([x for x in (*) if x LIKE 'i']) FROM integers i1 JOIN integers i2 ON (i1.i=i2.i)\n ----\n 42\t42\n 13\t13\ndiff --git a/test/sql/pragma/test_pragma_database_size.test b/test/sql/pragma/test_pragma_database_size.test\nindex 28932586cccd..f0eaca17670d 100644\n--- a/test/sql/pragma/test_pragma_database_size.test\n+++ b/test/sql/pragma/test_pragma_database_size.test\n@@ -2,5 +2,32 @@\n # description: Test PRAGMA database_size\n # group: [pragma]\n \n+require skip_reload\n+\n statement ok\n PRAGMA database_size;\n+\n+statement ok\n+ATTACH '__TEST_DIR__/db_size.db' AS db1\n+\n+statement ok\n+CREATE TABLE db1.integers AS FROM range(1000000);\n+\n+statement ok\n+DROP TABLE db1.integers\n+\n+query I\n+SELECT free_blocks>0 FROM pragma_database_size() WHERE database_name='db1';\n+----\n+true\n+\n+statement ok\n+DETACH db1\n+\n+statement ok\n+ATTACH '__TEST_DIR__/db_size.db' AS db1 (READ_ONLY)\n+\n+query I\n+SELECT free_blocks>0 FROM pragma_database_size() WHERE database_name='db1';\n+----\n+true\ndiff --git a/test/sql/pragma/test_show_tables.test b/test/sql/pragma/test_show_tables.test\nindex ad5fb0e1e337..17a2bf825cbe 100644\n--- a/test/sql/pragma/test_show_tables.test\n+++ b/test/sql/pragma/test_show_tables.test\n@@ -20,9 +20,15 @@ CREATE SCHEMA s1;\n statement ok\n CREATE TABLE s1.tbl(i INTEGER UNIQUE);\n \n+statement ok\n+CREATE INDEX my_index ON s1.tbl(i);\n+\n statement ok\n CREATE TABLE tbl(i INTEGER PRIMARY KEY);\n \n+statement ok\n+CREATE INDEX not_a_table ON tbl(i);\n+\n # We test that right table is described (from s1 schema)\n # column_name | column_type | null | key | default | extra\n query TTTITI\n@@ -30,6 +36,10 @@ DESCRIBE s1.tbl;\n ----\n i\tINTEGER\tYES\tUNI\tNULL\tNULL\n \n+# We test that the index can't be described\n+statement error\n+DESCRIBE my_index;\n+\n # We test that right table is described (from main schema)\n # column_name | column_type | null | key | default | extra\n query TTTITI\ndiff --git a/test/sql/prepared/prepare_copy.test b/test/sql/prepared/prepare_copy.test\nnew file mode 100644\nindex 000000000000..7f6267d29be0\n--- /dev/null\n+++ b/test/sql/prepared/prepare_copy.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/prepared/prepare_copy.test\n+# group: [prepared]\n+\n+statement ok\n+pragma enable_verification;\n+\n+statement ok\n+PREPARE q1 AS\n+\tCOPY (\n+\t\tselect $1 as 'col'\n+\t) to '__TEST_DIR__/res.csv' (\n+\t\tFORMAT csv,\n+\t\theader true\n+\t);\n+\n+statement ok\n+execute q1 (42);\n+\n+query I\n+select i from '__TEST_DIR__/res.csv' tbl(i);\n+----\n+42\n+\n+# Can't use a prepared parameter for the destination\n+\n+statement error\n+PREPARE q2 AS\n+\tCOPY (\n+\t\tselect 42 as 'col'\n+\t) to $1 (\n+\t\tFORMAT csv,\n+\t\theader true\n+\t);\n+----\n+Parser Error: syntax error at or near \"$1\"\ndiff --git a/test/sql/settings/set_schema_temp_main.test b/test/sql/settings/set_schema_temp_main.test\nnew file mode 100644\nindex 000000000000..36159dbf6071\n--- /dev/null\n+++ b/test/sql/settings/set_schema_temp_main.test\n@@ -0,0 +1,25 @@\n+# name: test/sql/settings/set_schema_temp_main.test\n+# group: [settings]\n+\n+statement ok\n+pragma enable_verification;\n+\n+statement error\n+CREATE SCHEMA temp.s1;\n+----\n+Cannot create non-temporary entry \"s1\" in temporary catalog\n+\n+statement error\n+CREATE SCHEMA system.s1;\n+----\n+Cannot create schema in system catalog\n+\n+statement error\n+set schema = 'temp';\n+----\n+SET schema cannot be set to internal schema \"temp\"\n+\n+statement error\n+set schema = 'system';\n+----\n+SET schema cannot be set to internal schema \"system\"\ndiff --git a/test/sql/show_select/test_describe_all.test b/test/sql/show_select/test_describe_all.test\nindex d8ed51f2429f..5f621570248b 100644\n--- a/test/sql/show_select/test_describe_all.test\n+++ b/test/sql/show_select/test_describe_all.test\n@@ -2,6 +2,8 @@\n # description: Test describe all\n # group: [show_select]\n \n+require noforcestorage\n+\n statement ok\n PRAGMA enable_verification\n \n@@ -11,10 +13,10 @@ CREATE TABLE integers(i INTEGER, j INTEGER, a INTEGER);\n statement ok\n DESCRIBE;\n \n-query IIII\n+query IIIIII\n DESCRIBE\n ----\n-integers\t[i, j, a]\t[INTEGER, INTEGER, INTEGER]\tfalse\n+memory\tmain\tintegers\t[i, j, a]\t[INTEGER, INTEGER, INTEGER]\tfalse\n \n # issue #6393\n statement ok\n@@ -23,7 +25,7 @@ DROP TABLE integers\n statement ok\n create table t(plant text, dt date, mwh bigint);\n \n-query IIII\n+query IIIIII\n DESCRIBE;\n ----\n-t\t[plant, dt, mwh]\t[VARCHAR, DATE, BIGINT]\tfalse\n+memory\tmain\tt\t[plant, dt, mwh]\t[VARCHAR, DATE, BIGINT]\tfalse\ndiff --git a/test/sql/storage_version/storage_version.db b/test/sql/storage_version/storage_version.db\nindex f200264dd69f..4881560e1ef6 100644\nBinary files a/test/sql/storage_version/storage_version.db and b/test/sql/storage_version/storage_version.db differ\ndiff --git a/test/sql/tpch/gzip_csv_auto_detect.test_slow b/test/sql/tpch/gzip_csv_auto_detect.test_slow\nnew file mode 100644\nindex 000000000000..4998ecc1b13e\n--- /dev/null\n+++ b/test/sql/tpch/gzip_csv_auto_detect.test_slow\n@@ -0,0 +1,27 @@\n+# name: test/sql/tpch/gzip_csv_auto_detect.test_slow\n+# description: Issue #7377 - DuckDB significantly exceeds memory_limit when ingesting .csv.gz file with sample_size=-1\n+# group: [tpch]\n+\n+require tpch\n+\n+# write lineitem to lineitem.csv.gz\n+statement ok\n+CALL dbgen(sf=1);\n+\n+statement ok\n+COPY lineitem TO '__TEST_DIR__/lineitem.csv.gz' (HEADER)\n+\n+load __TEST_DIR__/store_tpch_auto_detect.db\n+\n+# now read the gzip compressed file with sample_size=-1\n+statement ok\n+SET memory_limit='500MB';\n+\n+statement ok\n+CREATE OR REPLACE TABLE lineitem AS (SELECT * FROM read_csv_auto(['__TEST_DIR__/lineitem.csv.gz'], sample_size=-1));\n+\n+# run Q01 to verify the file was loaded correctly\n+query I\n+PRAGMA tpch(1)\n+----\n+<FILE>:extension/tpch/dbgen/answers/sf1/q01.csv\ndiff --git a/test/sql/types/interval/test_interval_between.test b/test/sql/types/interval/test_interval_between.test\nnew file mode 100644\nindex 000000000000..3c0a967038eb\n--- /dev/null\n+++ b/test/sql/types/interval/test_interval_between.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/types/interval/test_interval_between.test\n+# group: [interval]\n+\n+query I nosort q1\n+WITH d(y) AS (\n+\tSELECT UNNEST(range(\n+\t\t'2023-05-11 4:00:00'::TIMESTAMP,\n+\t\t'2023-05-11 4:00:00'::TIMESTAMP + TO_DAYS(7),\n+\t\tTO_HOURS(6)\n+\t))\n+)\n+SELECT\n+\ty,\n+\ty - ('2023-05-11 4:00:00'::TIMESTAMP) AS x\n+FROM d\n+WHERE\n+\tx BETWEEN TO_HOURS(-44) AND TO_HOURS(44)\n+----\n+\n+# Verify that `x BETWEEN lhs AND rhs` is equivalent to `x >= lhs AND x <= rhs`\n+query I nosort q1\n+WITH d(y) AS (\n+\tSELECT UNNEST(range(\n+\t\t'2023-05-11 4:00:00'::TIMESTAMP,\n+\t\t'2023-05-11 4:00:00'::TIMESTAMP + TO_DAYS(7),\n+\t\tTO_HOURS(6)\n+\t))\n+)\n+SELECT\n+\ty,\n+\ty - ('2023-05-11 4:00:00'::TIMESTAMP) AS x\n+FROM d\n+WHERE\n+\tx >= TO_HOURS(-44) AND x <= TO_HOURS(44)\n+----\ndiff --git a/test/sql/types/nested/map/test_map_constant.test b/test/sql/types/nested/map/test_map_constant.test\nnew file mode 100644\nindex 000000000000..87b47c263fcf\n--- /dev/null\n+++ b/test/sql/types/nested/map/test_map_constant.test\n@@ -0,0 +1,50 @@\n+# name: test/sql/types/nested/map/test_map_constant.test\n+# description: Test map constants\n+# group: [map]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+# empty map\n+query I\n+SELECT MAP {};\n+----\n+{}\n+\n+# case sensitive key-value\n+query I\n+SELECT MAP { 'hello': 'world', 'HELLO': 'WORLD' };\n+----\n+{hello=world, HELLO=WORLD}\n+\n+# integer keys\n+query I\n+SELECT MAP { 1: 'a', 2: 'b' };\n+----\n+{1=a, 2=b}\n+\n+# non-constant keys\n+query I\n+SELECT MAP { i: 'a' || i } FROM range(5) t(i);\n+----\n+{0=a0}\n+{1=a1}\n+{2=a2}\n+{3=a3}\n+{4=a4}\n+\n+# lists\n+query I\n+SELECT MAP { [i]: [i + 1] } FROM range(5) t(i);\n+----\n+{[0]=[1]}\n+{[1]=[2]}\n+{[2]=[3]}\n+{[3]=[4]}\n+{[4]=[5]}\n+\n+\n+statement error\n+SELECT MAP { NULL: 'a' || i } FROM range(5) t(i);\n+----\n+Map keys can not be NULL\ndiff --git a/test/sql/update/string_update_transaction_local_7348.test b/test/sql/update/string_update_transaction_local_7348.test\nnew file mode 100644\nindex 000000000000..ed27991fc6f1\n--- /dev/null\n+++ b/test/sql/update/string_update_transaction_local_7348.test\n@@ -0,0 +1,35 @@\n+# name: test/sql/update/string_update_transaction_local_7348.test\n+# description: Issue #7348 - crash when updating transaction local storage\n+# group: [update]\n+\n+statement ok\n+BEGIN;\n+\n+statement ok\n+CREATE TABLE t1(a VARCHAR(256) PRIMARY KEY, b INTEGER);\n+\n+statement ok\n+INSERT INTO t1 VALUES('    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 2+1);\n+\n+statement ok\n+INSERT INTO t1 VALUES('   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 18);\n+\n+statement ok\n+INSERT INTO t1 SELECT b, b+1 FROM t1 WHERE b<5;\n+\n+query II\n+FROM t1\n+----\n+    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t3\n+   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t18\n+3\t4\n+\n+statement ok\n+UPDATE t1 SET a = CONCAT(a, 'x') WHERE b%2=0;\n+\n+query II\n+FROM t1\n+----\n+    4-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\t3\n+   34-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZx\t18\n+3x\t4\ndiff --git a/test/sqlite/result_helper.cpp b/test/sqlite/result_helper.cpp\nindex 7400705da7d0..bdf13b72ccc7 100644\n--- a/test/sqlite/result_helper.cpp\n+++ b/test/sqlite/result_helper.cpp\n@@ -300,7 +300,7 @@ vector<string> TestResultHelper::LoadResultFromFile(string fname, vector<string>\n \t\tif (i > 0) {\n \t\t\tstruct_definition += \", \";\n \t\t}\n-\t\tstruct_definition += KeywordHelper::WriteOptionallyQuoted(names[i]) + \" := 'VARCHAR'\";\n+\t\tstruct_definition += StringUtil::Format(\"%s := VARCHAR\", SQLIdentifier(names[i]));\n \t}\n \tstruct_definition += \")\";\n \ndiff --git a/test/sqlite/sqllogic_command.cpp b/test/sqlite/sqllogic_command.cpp\nindex 592b70b5d9f1..d18352bcad8b 100644\n--- a/test/sqlite/sqllogic_command.cpp\n+++ b/test/sqlite/sqllogic_command.cpp\n@@ -272,9 +272,8 @@ void RestartCommand::ExecuteInternal(ExecuteContext &context) const {\n \trunner.con->context->client_data->catalog_search_path->Set(catalog_search_paths);\n \trunner.con->Commit();\n \tif (!low_query_writer_path.empty()) {\n-\t\trunner.con->context->client_data->log_query_writer =\n-\t\t    make_uniq<BufferedFileWriter>(FileSystem::GetFileSystem(*runner.con->context), low_query_writer_path,\n-\t\t                                  1 << 1 | 1 << 5, runner.con->context->client_data->file_opener.get());\n+\t\trunner.con->context->client_data->log_query_writer = make_uniq<BufferedFileWriter>(\n+\t\t    FileSystem::GetFileSystem(*runner.con->context), low_query_writer_path, 1 << 1 | 1 << 5);\n \t}\n }\n \ndiff --git a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\nindex 7a56e30f6b52..70504c512ab5 100644\n--- a/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n+++ b/tools/jdbc/src/test/java/org/duckdb/test/TestDuckDBJDBC.java\n@@ -1,5 +1,18 @@\n package org.duckdb.test;\n \n+import org.duckdb.DuckDBAppender;\n+import org.duckdb.DuckDBColumnType;\n+import org.duckdb.DuckDBConnection;\n+import org.duckdb.DuckDBDriver;\n+import org.duckdb.DuckDBNative;\n+import org.duckdb.DuckDBResultSet;\n+import org.duckdb.DuckDBResultSetMetaData;\n+import org.duckdb.DuckDBTimestamp;\n+import org.duckdb.JsonNode;\n+\n+import javax.sql.rowset.CachedRowSet;\n+import javax.sql.rowset.RowSetProvider;\n+import java.lang.reflect.InvocationTargetException;\n import java.lang.reflect.Method;\n import java.math.BigDecimal;\n import java.math.BigInteger;\n@@ -7,6 +20,7 @@\n import java.nio.charset.StandardCharsets;\n import java.nio.file.Files;\n import java.nio.file.Path;\n+import java.sql.Array;\n import java.sql.Blob;\n import java.sql.Connection;\n import java.sql.DatabaseMetaData;\n@@ -21,30 +35,48 @@\n import java.sql.Time;\n import java.sql.Timestamp;\n import java.sql.Types;\n-import java.time.*;\n+import java.time.Duration;\n+import java.time.Instant;\n+import java.time.LocalDate;\n+import java.time.LocalDateTime;\n+import java.time.LocalTime;\n+import java.time.OffsetDateTime;\n+import java.time.OffsetTime;\n+import java.time.ZoneOffset;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeFormatterBuilder;\n+import java.time.format.ResolverStyle;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Calendar;\n import java.util.Comparator;\n import java.util.GregorianCalendar;\n+import java.util.HashMap;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.ListIterator;\n import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n import java.util.Properties;\n import java.util.TimeZone;\n import java.util.UUID;\n-import javax.sql.rowset.RowSetProvider;\n-import javax.sql.rowset.CachedRowSet;\n-\n-import org.duckdb.DuckDBAppender;\n-import org.duckdb.DuckDBConnection;\n-import org.duckdb.DuckDBDriver;\n-import org.duckdb.DuckDBResultSet;\n-import org.duckdb.DuckDBTimestamp;\n-import org.duckdb.DuckDBColumnType;\n-import org.duckdb.DuckDBResultSetMetaData;\n-import org.duckdb.DuckDBNative;\n-import org.duckdb.JsonNode;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n+import java.util.logging.Logger;\n+\n+import static java.time.format.DateTimeFormatter.ISO_LOCAL_TIME;\n+import static java.time.temporal.ChronoField.DAY_OF_MONTH;\n+import static java.time.temporal.ChronoField.MILLI_OF_SECOND;\n+import static java.time.temporal.ChronoField.MONTH_OF_YEAR;\n+import static java.time.temporal.ChronoField.OFFSET_SECONDS;\n+import static java.time.temporal.ChronoField.YEAR_OF_ERA;\n+import static java.util.Arrays.asList;\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n \n public class TestDuckDBJDBC {\n \n@@ -62,11 +94,11 @@ private static void assertFalse(boolean val) throws Exception {\n \t\tassertTrue(!val);\n \t}\n \n-\tprivate static void assertEquals(Object a, Object b) throws Exception {\n-\t\tif (a == null && b == null) {\n-\t\t\treturn;\n-\t\t}\n-\t\tassertTrue(a.equals(b), String.format(\"\\\"%s\\\" should equal \\\"%s\\\"\", a, b));\n+\tprivate static void assertEquals(Object actual, Object expected) throws Exception {\n+\t\tFunction<Object, String> getClass = (Object a) -> a == null ? \"null\" : a.getClass().toString();\n+\n+\t\tString message = String.format(\"\\\"%s\\\" (of %s) should equal \\\"%s\\\" (of %s)\", actual, getClass.apply(actual), expected, getClass.apply(expected));\n+\t\tassertTrue(Objects.equals(actual, expected), message);\n \t}\n \n \tprivate static void assertNull(Object a) throws Exception {\n@@ -88,12 +120,12 @@ private static void fail(String s) throws Exception {\n \tprivate static <T extends Throwable> String assertThrows(Thrower thrower, Class<T> exception) throws Exception {\n \t\ttry {\n \t\t\tthrower.run();\n-\t\t\tfail(\"Expected to throw \" + exception.getName());\n-\t\t\treturn null;\n \t\t} catch (Throwable e) {\n \t\t\tassertEquals(e.getClass(), exception);\n \t\t\treturn e.getMessage();\n \t\t}\n+\t\tfail(\"Expected to throw \" + exception.getName());\n+\t\treturn null;\n \t}\n \n \tstatic {\n@@ -478,6 +510,19 @@ public static void test_timestamp_as_long() throws Exception {\n \t\tconn.close();\n \t}\n \n+    public static void test_consecutive_timestamps() throws Exception {\n+    \tlong expected = 986860800000L;\n+        try (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement()) {\n+            try (ResultSet rs = stmt.executeQuery(\"select range from range(TIMESTAMP '2001-04-10', TIMESTAMP '2001-04-11', INTERVAL 30 MINUTE)\")) {\n+                while (rs.next()) {\n+                    Timestamp actual = rs.getTimestamp(1, Calendar.getInstance());\n+                    assertEquals(expected, actual.getTime());\n+                    expected += 30 * 60 * 1_000;\n+                }\n+            }\n+        }\n+    }\n+\n \tpublic static void test_throw_wrong_datatype() throws Exception {\n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\tStatement stmt = conn.createStatement();\n@@ -1592,12 +1637,12 @@ public static void test_temporal_types() throws Exception {\n \t\tassertEquals(rs.getObject(\"ts\"), Timestamp.valueOf(\"2019-11-26 21:11:00\"));\n \t\tassertEquals(rs.getTimestamp(\"ts\"), Timestamp.valueOf(\"2019-11-26 21:11:00\"));\n \n-\t\tassertEquals(rs.getObject(\"dt\"), Date.valueOf(\"2019-11-26\"));\n+\t\tassertEquals(rs.getObject(\"dt\"), LocalDate.parse(\"2019-11-26\"));\n \t\tassertEquals(rs.getDate(\"dt\"), Date.valueOf(\"2019-11-26\"));\n \n \t\tassertEquals(rs.getObject(\"iv\"), \"5 days\");\n \n-\t\tassertEquals(rs.getObject(\"te\"), Time.valueOf(\"21:11:00\"));\n+\t\tassertEquals(rs.getObject(\"te\"), LocalTime.parse(\"21:11:00\"));\n \t\tassertEquals(rs.getTime(\"te\"), Time.valueOf(\"21:11:00\"));\n \n \t\tassertFalse(rs.next());\n@@ -1990,7 +2035,7 @@ public static void test_get_tables_param_binding_for_table_types() throws Except\n \n \tpublic static void test_get_table_types() throws Exception {\n \t\tString[] tableTypesArray = new String[]{\"BASE TABLE\", \"LOCAL TEMPORARY\", \"VIEW\"};\n-\t\tList<String> tableTypesList = new ArrayList<String>(Arrays.asList(tableTypesArray));\n+\t\tList<String> tableTypesList = new ArrayList<>(asList(tableTypesArray));\n \t\ttableTypesList.sort(Comparator.naturalOrder());\n \n \t\tConnection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n@@ -2669,7 +2714,7 @@ public static void test_json() throws Exception {\n \t\t\tassertEquals(rs.getMetaData().getColumnType(1), Types.JAVA_OBJECT);\n \t\t\tJsonNode jsonNode = (JsonNode) rs.getObject(1);\n \t\t\tassertTrue(jsonNode.isArray());\n-\t\t\tassertEquals(jsonNode.toString(), \"[1, 5]\");\n+\t\t\tassertEquals(jsonNode.toString(), \"[1,5]\");\n \t\t}\n \n \t\ttry (Statement stmt = conn.createStatement()) {\n@@ -3211,13 +3256,48 @@ public static void test_union() throws Exception {\n \n \tpublic static void test_list() throws Exception {\n \t\ttry (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n-\t\t\t PreparedStatement statement = connection.prepareStatement(\"select [1]\")) {\n-\t\t\tResultSet rs = statement.executeQuery();\n-\t\t\tassertTrue(rs.next());\n-\t\t\tassertEquals(rs.getObject(1), \"[1]\");\n+\t\t\t Statement statement = connection.createStatement()) {\n+\t\t\ttry (ResultSet rs = statement.executeQuery(\"select [1]\")) {\n+\t\t\t\tassertTrue(rs.next());\n+\t\t\t\tassertEquals(arrayToList(rs.getArray(1)), singletonList(1));\n+\t\t\t}\n+\t\t\ttry (ResultSet rs = statement.executeQuery(\"select unnest([[1], [42, 69]])\")) {\n+\t\t\t\tassertTrue(rs.next());\n+\t\t\t\tassertEquals(arrayToList(rs.getArray(1)), singletonList(1));\n+\t\t\t\tassertTrue(rs.next());\n+\t\t\t\tassertEquals(arrayToList(rs.getArray(1)), asList(42, 69));\n+\t\t\t}\n+\t\t\ttry (ResultSet rs = statement.executeQuery(\"select unnest([[[42], [69]]])\")) {\n+\t\t\t\tassertTrue(rs.next());\n+\n+\t\t\t\tList<List<Integer>> expected = asList(singletonList(42), singletonList(69));\n+\t\t\t\tList<Array> actual = arrayToList(rs.getArray(1));\n+\n+\t\t\t\tfor (int i=0; i<actual.size(); i++) {\n+\t\t\t\t\tassertEquals(actual.get(i), expected.get(i));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\ttry (ResultSet rs = statement.executeQuery(\"select unnest([[], [69]])\")) {\n+\t\t\t\tassertTrue(rs.next());\n+\t\t\t\tassertTrue(arrayToList(rs.getArray(1)).isEmpty());\n+\t\t\t}\n \t\t}\n \t}\n \n+\tprivate static <T> List<T> arrayToList(Array actual) throws SQLException {\n+\t\t@SuppressWarnings(\"unchecked\")\n+\t\tT[] array = (T[]) actual.getArray();\n+\t\tList<Object> out = new ArrayList<>();\n+\t\tfor (T t : array) {\n+\t\t\tif (t instanceof Array) {\n+\t\t\t\tout.add(arrayToList((Array) t));\n+\t\t\t} else {\n+\t\t\t\tout.add(t);\n+\t\t\t}\n+\t\t}\n+\t\treturn (List<T>) out;\n+\t}\n+\n \tpublic static void test_map() throws Exception {\n \t\ttry (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n \t\t\t PreparedStatement statement = connection.prepareStatement(\"select map([100, 5], ['a', 'b'])\")) {\n@@ -3267,9 +3347,6 @@ public static void test_getColumnClassName() throws Exception {\n \t\t\t\trs.next();\n \t\t\t\tfor (int i=1; i<=rsmd.getColumnCount(); i++) {\n \t\t\t\t\tObject value = rs.getObject(i);\n-\t\t\t\t\tif (value == null) {\n-\t\t\t\t\t\tcontinue; // FIXME: when we add a complete test_all_types() test\n-\t\t\t\t\t}\n \n \t\t\t\t\tassertEquals(\n \t\t\t\t\t\trsmd.getColumnClassName(i),\n@@ -3289,6 +3366,215 @@ public static void test_update_count() throws Exception {\n \t\t}\n \t}\n \n+\t// https://github.com/duckdb/duckdb/issues/7218\n+\tpublic static void test_unknown_result_type() throws Exception {\n+\t\ttry (Connection connection = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\t PreparedStatement p = connection.prepareStatement(\"select generate_series.generate_series from generate_series(?, ?) order by 1\")) {\n+\t\t\tp.setInt(1, 0);\n+\t\t\tp.setInt(2, 1);\n+\t\n+\t\t\ttry (ResultSet rs = p.executeQuery()) {\n+\t\t\t\trs.next();\n+\t\t\t\tassertEquals(rs.getInt(1), 0);\n+\t\t\t\trs.next();\n+\t\t\t\tassertEquals(rs.getInt(1), 1);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tstatic List<Object> trio(Object... max) {\n+\t\treturn asList(emptyList(), asList(max), null);\n+\t}\n+\n+\tstatic DuckDBResultSet.DuckDBBlobResult blobOf(String source) {\n+\t\treturn new DuckDBResultSet.DuckDBBlobResult(ByteBuffer.wrap(source.getBytes()));\n+\t}\n+\n+\tprivate static final DateTimeFormatter FORMAT_DATE = new DateTimeFormatterBuilder()\n+\t\t\t.parseCaseInsensitive()\n+\t\t\t.appendValue(YEAR_OF_ERA)\n+\t\t\t.appendLiteral('-')\n+\t\t\t.appendValue(MONTH_OF_YEAR, 2)\n+\t\t\t.appendLiteral('-')\n+\t\t\t.appendValue(DAY_OF_MONTH, 2)\n+\t\t\t.toFormatter()\n+\t\t\t.withResolverStyle(ResolverStyle.LENIENT);\n+\tpublic static final DateTimeFormatter FORMAT_DATETIME = new DateTimeFormatterBuilder()\n+\t\t\t.append(FORMAT_DATE)\n+\t\t\t.appendLiteral('T')\n+\t\t\t.append(ISO_LOCAL_TIME)\n+\t\t\t.toFormatter()\n+\t\t\t.withResolverStyle(ResolverStyle.LENIENT);\n+\tpublic static final DateTimeFormatter FORMAT_TZ = new DateTimeFormatterBuilder()\n+\t\t\t.append(FORMAT_DATETIME)\n+\t\t\t.appendLiteral('+')\n+\t\t\t.appendValue(OFFSET_SECONDS)\n+\t\t\t.toFormatter()\n+\t\t\t.withResolverStyle(ResolverStyle.LENIENT);\n+\n+\tstatic Map<String, List<Object>> correct_answer_map = new HashMap<>();\n+\tstatic {\n+\t\tcorrect_answer_map.put(\"int_array\", trio(\n+\t\t\t\t42, 999, null, null, -42\n+\t\t));\n+\t\tcorrect_answer_map.put(\"double_array\", trio(\n+\t\t\t\t42.0, Double.NaN, Double.POSITIVE_INFINITY, Double.NEGATIVE_INFINITY, null, -42.0\n+\t\t));\n+\t\tcorrect_answer_map.put(\"date_array\", trio(\n+\t\t\t\tLocalDate.parse(\"1970-01-01\"),\n+\t\t\t\tLocalDate.parse(\"999999999-12-31\", FORMAT_DATE),\n+\t\t\t\tLocalDate.parse(\"-999999999-01-01\", FORMAT_DATE),\n+\t\t\t\tnull,\n+\t\t\t\tLocalDate.parse(\"2022-05-12\")\n+\t\t));\n+\t\tcorrect_answer_map.put(\"timestamp_array\", trio(\n+\t\t\t\tTimestamp.valueOf(\"1970-01-01 00:00:00.0\"),\n+\t\t\t\tDuckDBTimestamp.toSqlTimestamp(9223372036854775807L),\n+\t\t\t\tDuckDBTimestamp.toSqlTimestamp(-9223372036854775807L),\n+\t\t\t\tnull,\n+\t\t\t\tTimestamp.valueOf(\"2022-05-12 16:23:45.0\")\n+\t\t));\n+\t\tcorrect_answer_map.put(\"timestamptz_array\", trio(\n+\t\t\t\tOffsetDateTime.parse(\"1970-01-01T00:00Z\"),\n+\t\t\t\tOffsetDateTime.parse(\"+294247-01-10T04:00:54.775807Z\"),\n+\t\t\t\tOffsetDateTime.parse(\"-290308-12-21T19:59:05.224193Z\"),\n+\t\t\t\tnull,\n+\t\t\t\tOffsetDateTime.parse(\"2022-05-12T23:23:45Z\")\n+\t\t));\n+\t\tcorrect_answer_map.put(\"varchar_array\", trio(\n+\t\t\t\t\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\",\n+\t\t\t\t\"goose\",\n+\t\t\t\tnull,\n+\t\t\t\t\"\"\n+\t\t));\n+\t\tcorrect_answer_map.put(\"nested_int_array\", trio(\n+\t\t\t\temptyList(),\n+\t\t\t\tasList(42, 999, null, null, -42),\n+\t\t\t\tnull,\n+\t\t\t\temptyList(),\n+\t\t\t\tasList(42, 999, null, null, -42)\n+\t\t));\n+\t\tcorrect_answer_map.put(\"struct_of_arrays\", asList(\n+\t\t\t\t\"{'a': NULL, 'b': NULL}\", \"{'a': [42, 999, NULL, NULL, -42], 'b': [\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86, goose, NULL, ]}\", null\n+\t\t));\n+\t\tcorrect_answer_map.put(\"array_of_structs\", trio(\n+\t\t\t\t\"{'a': NULL, 'b': NULL}\", \"{'a': 42, 'b': \ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86}\", null\n+\t\t));\n+\t\tcorrect_answer_map.put(\"bool\", asList(false, true, null));\n+\t\tcorrect_answer_map.put(\"tinyint\", asList((byte) -128, (byte) 127, null));\n+\t\tcorrect_answer_map.put(\"smallint\", asList((short) -32768, (short) 32767, null));\n+\t\tcorrect_answer_map.put(\"int\", asList(-2147483648, 2147483647, null));\n+\t\tcorrect_answer_map.put(\"bigint\", asList(-9223372036854775808L, 9223372036854775807L, null));\n+\t\tcorrect_answer_map.put(\"hugeint\", asList(new BigInteger(\"-170141183460469231731687303715884105727\"), new BigInteger(\"170141183460469231731687303715884105727\"), null));\n+\t\tcorrect_answer_map.put(\"utinyint\", asList((short) 0, (short) 255, null));\n+\t\tcorrect_answer_map.put(\"usmallint\", asList(0, 65535, null));\n+\t\tcorrect_answer_map.put(\"uint\", asList(0L, 4294967295L, null));\n+\t\tcorrect_answer_map.put(\"ubigint\", asList(BigInteger.ZERO, new BigInteger(\"18446744073709551615\"), null));\n+\t\tcorrect_answer_map.put(\"time\", asList(LocalTime.of(0, 0), LocalTime.parse(\"23:59:59.999999\"), null));\n+\t\tcorrect_answer_map.put(\"float\", asList(-3.4028234663852886e+38f, 3.4028234663852886e+38f, null));\n+\t\tcorrect_answer_map.put(\"double\", asList(-1.7976931348623157e+308d, 1.7976931348623157e+308d, null));\n+\t\tcorrect_answer_map.put(\"dec_4_1\", asList(new BigDecimal(\"-999.9\"), (new BigDecimal(\"999.9\")), null));\n+\t\tcorrect_answer_map.put(\"dec_9_4\", asList(new BigDecimal(\"-99999.9999\"), (new BigDecimal(\"99999.9999\")), null));\n+\t\tcorrect_answer_map.put(\"dec_18_6\", asList(new BigDecimal(\"-999999999999.999999\"), (new BigDecimal(\"999999999999.999999\")), null));\n+\t\tcorrect_answer_map.put(\"dec38_10\", asList(new BigDecimal(\"-9999999999999999999999999999.9999999999\"), (new BigDecimal(\"9999999999999999999999999999.9999999999\")), null));\n+\t\tcorrect_answer_map.put(\"uuid\", asList(UUID.fromString(\"00000000-0000-0000-0000-000000000001\"), (UUID.fromString(\"ffffffff-ffff-ffff-ffff-ffffffffffff\")), null));\n+\t\tcorrect_answer_map.put(\"varchar\", asList(\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goo\\u0000se\", null));\n+\t\tcorrect_answer_map.put(\"json\", asList(\"\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\", \"goose\", null));\n+\t\tcorrect_answer_map.put(\"blob\", asList(blobOf(\"thisisalongblob\\u0000withnullbytes\"), blobOf(\"\\u0000\\u0000\\u0000a\"), null));\n+\t\tcorrect_answer_map.put(\"bit\", asList(\"0010001001011100010101011010111\", \"10101\", null));\n+\t\tcorrect_answer_map.put(\"small_enum\", asList(\"DUCK_DUCK_ENUM\", \"GOOSE\", null));\n+\t\tcorrect_answer_map.put(\"medium_enum\", asList(\"enum_0\", \"enum_299\", null));\n+\t\tcorrect_answer_map.put(\"large_enum\", asList(\"enum_0\", \"enum_69999\", null));\n+\t\tcorrect_answer_map.put(\"struct\", asList(\"{'a': NULL, 'b': NULL}\", \"{'a': 42, 'b': \ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86}\", null));\n+\t\tcorrect_answer_map.put(\"map\", asList(\"{}\", \"{key1=\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86\ud83e\udd86, key2=goose}\", null));\n+\t\tcorrect_answer_map.put(\"time_tz\", asList(OffsetTime.parse(\"00:00+00:00\"), OffsetTime.parse(\"23:59:59.999999+00:00\"), null));\n+\t\tcorrect_answer_map.put(\"interval\", asList(\"00:00:00\", \"83 years 3 months 999 days 00:16:39.999999\", null));\n+\t\tcorrect_answer_map.put(\"timestamp\", asList(DuckDBTimestamp.toSqlTimestamp(-9223372022400000000L), DuckDBTimestamp.toSqlTimestamp(9223372036854775807L), null));\n+\t\tcorrect_answer_map.put(\"date\", asList(LocalDate.of(-5877641, 6, 25), LocalDate.of(5881580, 7, 10), null));\n+\t\tcorrect_answer_map.put(\"timestamp_s\", asList(\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.of(-290308, 12, 22, 0, 0)),\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.of(294247,1,10,4,0, 54)),\n+\t\t\t\tnull\n+\t\t));\n+\t\tcorrect_answer_map.put(\"timestamp_ns\", asList(\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.parse(\"1677-09-21T00:12:43.145225\")),\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.parse(\"2262-04-11T23:47:16.854775\")),\n+\t\t\t\tnull\n+\t\t));\n+\t\tcorrect_answer_map.put(\"timestamp_ms\", asList(\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.of(-290308, 12, 22, 0, 0, 0)),\n+\t\t\t\tTimestamp.valueOf(LocalDateTime.of(294247, 1, 10, 4, 0, 54, 775000000)),\n+\t\t\t\tnull\n+\t\t));\n+\t\tcorrect_answer_map.put(\"timestamp_tz\", asList(\n+\t\t\t\tOffsetDateTime.of(LocalDateTime.of(-290308, 12, 22, 0, 0, 0), ZoneOffset.UTC),\n+\t\t\t\tOffsetDateTime.of(LocalDateTime.of(294247, 1, 10, 4, 0, 54, 776806000), ZoneOffset.UTC),\n+\t\t\t\tnull\n+\t\t));\n+\t}\n+\n+\tpublic static void test_all_types() throws Exception {\n+\t\tLogger logger = Logger.getAnonymousLogger();\n+\n+\t\ttry (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\");\n+\t\t\t PreparedStatement stmt = conn.prepareStatement(\"select * from test_all_types()\")) {\n+\t\t\tconn.createStatement().execute(\"set timezone = 'UTC'\");\n+\n+\t\t\ttry (ResultSet rs = stmt.executeQuery()) {\n+\t\t\t\tResultSetMetaData metaData = rs.getMetaData();\n+\n+\t\t\t\tint rowIdx = 0;\n+\t\t\t\twhile (rs.next()) {\n+\t\t\t\t\tfor (int i = 0; i<metaData.getColumnCount(); i++) {\n+\t\t\t\t\t\tString columnName = metaData.getColumnName(i + 1);\n+\t\t\t\t\t\tList<Object> answers = correct_answer_map.get(columnName);\n+\t\t\t\t\t\tObject expected = answers.get(rowIdx);\n+\n+\t\t\t\t\t\tObject actual = rs.getObject(i + 1);\n+\t\t\t\t\t\tif (actual instanceof Array) {\n+\t\t\t\t\t\t\tactual = arrayToList((Array) actual);\n+\t\t\t\t\t\t}\n+\n+\t\t\t\t\t\tif (actual instanceof Timestamp && expected instanceof Timestamp) {\n+\t\t\t\t\t\t\tassertEquals(((Timestamp) actual).getTime(), ((Timestamp) expected).getTime(), 500);\n+\t\t\t\t\t\t} else if (actual instanceof OffsetDateTime && expected instanceof OffsetDateTime) {\n+\t\t\t\t\t\t\tassertEquals(((OffsetDateTime) actual).getLong(MILLI_OF_SECOND), ((OffsetDateTime) expected).getLong(MILLI_OF_SECOND), 5000);\n+\t\t\t\t\t\t} else if (actual instanceof List) {\n+\t\t\t\t\t\t\tassertListsEqual((List) actual, (List)expected);\n+\t\t\t\t\t\t} else {\n+\t\t\t\t\t\t\tassertEquals(actual, expected);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t\trowIdx++;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static <T> void assertListsEqual(List<T> actual, List<T> expected) throws Exception {\n+\t\tassertEquals(actual.size(), expected.size());\n+\n+\t\tListIterator<T> itera = actual.listIterator();\n+\t\tListIterator<T> itere = expected.listIterator();\n+\n+\t\twhile (itera.hasNext()) {\n+\t\t\tassertEquals(itera.next(), itere.next());\n+\t\t}\n+\t}\n+\n+\tpublic static void test_cancel() throws Exception {\n+\t\tExecutorService service = Executors.newFixedThreadPool(1);\n+\t\ttry (Connection conn = DriverManager.getConnection(\"jdbc:duckdb:\"); Statement stmt = conn.createStatement()) {\n+\t\t\tFuture<String> thread = service.submit(() -> assertThrows(() ->\n+\t\t\t\tstmt.execute(\"select count(*) from range(10000000) t1, range(1000000) t2;\"), SQLException.class)\n+\t\t\t);\n+\t\t\tThread.sleep(500); // wait for query to start running\n+\t\t\tstmt.cancel();\n+\t\t\tString message = thread.get(1, TimeUnit.SECONDS);\n+\t\t\tassertEquals(message, \"INTERRUPT Error: Interrupted!\");\n+\t\t}\n+\t}\n+\n \tpublic static void main(String[] args) throws Exception {\n \t\t// Woo I can do reflection too, take this, JUnit!\n \t\tMethod[] methods = TestDuckDBJDBC.class.getMethods();\n@@ -3319,6 +3605,9 @@ public int compare(Method o1, Method o2) {\n \t\t\t\t\tm.invoke(null);\n \t\t\t\t\tSystem.out.println(\"success in \" + Duration.between(start, LocalDateTime.now()).getSeconds() + \" seconds\");\n \t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\tif (t instanceof InvocationTargetException) {\n+\t\t\t\t\t\tt = t.getCause();\n+\t\t\t\t\t}\n \t\t\t\t\tSystem.out.println(\"failed with \" + t);\n \t\t\t\t\tt.printStackTrace(System.out);\n \t\t\t\t\tanyFailed = true;\ndiff --git a/tools/pythonpkg/tests/extensions/json/data/example.json b/tools/pythonpkg/tests/extensions/json/data/example.json\nindex c2f4213ac737..40c5290bfa94 100644\n--- a/tools/pythonpkg/tests/extensions/json/data/example.json\n+++ b/tools/pythonpkg/tests/extensions/json/data/example.json\n@@ -1,5 +1,7 @@\n-{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"}\n-{\"id\":2,\"name\":\"Home for the Holidays\"}\n-{\"id\":3,\"name\":\"The Firm\"}\n-{\"id\":4,\"name\":\"Broadcast News\"}\n-{\"id\":5,\"name\":\"Raising Arizona\"}\n\\ No newline at end of file\n+[\n+\t{\"id\":1,\"name\":\"O Brother, Where Art Thou?\"},\n+\t{\"id\":2,\"name\":\"Home for the Holidays\"},\n+\t{\"id\":3,\"name\":\"The Firm\"},\n+\t{\"id\":4,\"name\":\"Broadcast News\"},\n+\t{\"id\":5,\"name\":\"Raising Arizona\"}\n+]\ndiff --git a/tools/pythonpkg/tests/extensions/test_httpfs.py b/tools/pythonpkg/tests/extensions/test_httpfs.py\nindex f78c4d6e1ef0..fc9087dde53b 100644\n--- a/tools/pythonpkg/tests/extensions/test_httpfs.py\n+++ b/tools/pythonpkg/tests/extensions/test_httpfs.py\n@@ -10,36 +10,42 @@\n     reason='httpfs extension not available'\n )\n \n-@pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n-def test_httpfs(require, pandas):\n-    connection = require('httpfs')\n-    try:\n-        connection.execute(\"SELECT id, first_name, last_name FROM PARQUET_SCAN('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/userdata1.parquet') LIMIT 3;\")\n-    except RuntimeError as e:\n-        # Test will ignore result if it fails due to networking issues while running the test.\n-        if (str(e).startswith(\"HTTP HEAD error\")):\n-            return\n-        elif (str(e).startswith(\"Unable to connect\")):\n-            return\n-        else:\n-            raise e\n+class TestHTTPFS(object):\n+\tdef test_read_json_httpfs(self, require):\n+\t\tconnection = require('httpfs')\n+\t\tres = connection.read_json('https://jsonplaceholder.typicode.com/todos')\n+\t\tassert len(res.types) == 4\n \n-    result_df = connection.fetchdf()\n-    exp_result = pandas.DataFrame({\n-        'id': pandas.Series([1, 2, 3], dtype=\"int32\"),\n-        'first_name': ['Amanda', 'Albert', 'Evelyn'],\n-        'last_name': ['Jordan', 'Freeman', 'Morgan']\n-    })\n-    pandas.testing.assert_frame_equal(result_df, exp_result)\n+\t@pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n+\tdef test_httpfs(self, require, pandas):\n+\t\tconnection = require('httpfs')\n+\t\ttry:\n+\t\t\tconnection.execute(\"SELECT id, first_name, last_name FROM PARQUET_SCAN('https://raw.githubusercontent.com/cwida/duckdb/master/data/parquet-testing/userdata1.parquet') LIMIT 3;\")\n+\t\texcept RuntimeError as e:\n+\t\t\t# Test will ignore result if it fails due to networking issues while running the test.\n+\t\t\tif (str(e).startswith(\"HTTP HEAD error\")):\n+\t\t\t\treturn\n+\t\t\telif (str(e).startswith(\"Unable to connect\")):\n+\t\t\t\treturn\n+\t\t\telse:\n+\t\t\t\traise e\n \n-def test_http_exception(require):\n-    connection = require('httpfs')\n+\t\tresult_df = connection.fetchdf()\n+\t\texp_result = pandas.DataFrame({\n+\t\t\t'id': pandas.Series([1, 2, 3], dtype=\"int32\"),\n+\t\t\t'first_name': ['Amanda', 'Albert', 'Evelyn'],\n+\t\t\t'last_name': ['Jordan', 'Freeman', 'Morgan']\n+\t\t})\n+\t\tpandas.testing.assert_frame_equal(result_df, exp_result)\n \n-    with raises(duckdb.HTTPException) as exc:\n-        connection.execute(\"SELECT * FROM PARQUET_SCAN('https://example.com/userdata1.parquet')\")\n+\tdef test_http_exception(self, require):\n+\t\tconnection = require('httpfs')\n \n-    value = exc.value\n-    assert value.status_code == 404\n-    assert value.reason == 'Not Found'\n-    assert value.body == ''\n-    assert 'Content-Length' in value.headers\n+\t\twith raises(duckdb.HTTPException) as exc:\n+\t\t\tconnection.execute(\"SELECT * FROM PARQUET_SCAN('https://example.com/userdata1.parquet')\")\n+\n+\t\tvalue = exc.value\n+\t\tassert value.status_code == 404\n+\t\tassert value.reason == 'Not Found'\n+\t\tassert value.body == ''\n+\t\tassert 'Content-Length' in value.headers\ndiff --git a/tools/pythonpkg/tests/fast/pandas/test_append_df.py b/tools/pythonpkg/tests/fast/pandas/test_append_df.py\nindex 9ad0ffb71eea..51faeb37214e 100644\n--- a/tools/pythonpkg/tests/fast/pandas/test_append_df.py\n+++ b/tools/pythonpkg/tests/fast/pandas/test_append_df.py\n@@ -29,7 +29,20 @@ def test_append_by_name(self, pandas):\n         con.append('tbl', df_in, by_name=True)\n         res = con.table('tbl').fetchall()\n         assert res == [(4, False, 'duck'), (2, True, 'db')]\n-    \n+\n+    @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n+    def test_append_by_name_quoted(self, pandas):\n+        con = duckdb.connect()\n+        con.execute(\"\"\"\n+            create table tbl (\"needs to be quoted\" integer, other varchar)\n+        \"\"\")\n+        df_in = pandas.DataFrame({\n+            \"needs to be quoted\": [1,2,3]\n+        })\n+        con.append('tbl', df_in, by_name=True)\n+        res = con.table('tbl').fetchall()\n+        assert res == [(1, None), (2, None), (3, None)]\n+\n     @pytest.mark.parametrize('pandas', [NumpyPandas(), ArrowPandas()])\n     def test_append_by_name_no_exact_match(self, pandas):\n         con = duckdb.connect()\ndiff --git a/tools/pythonpkg/tests/fast/test_replacement_scan.py b/tools/pythonpkg/tests/fast/test_replacement_scan.py\nindex cc2849cae2eb..d2ff85a7dcb1 100644\n--- a/tools/pythonpkg/tests/fast/test_replacement_scan.py\n+++ b/tools/pythonpkg/tests/fast/test_replacement_scan.py\n@@ -26,6 +26,19 @@ def test_replacement_scan_relapi(self):\n \t\tassert (type(pyrel3) == duckdb.DuckDBPyRelation)\n \t\tassert (pyrel3.fetchall() == [(142,), (184,)])\n \n+\tdef test_replacement_scan_alias(self):\n+\t\tpyrel1 = duckdb.query('from (values (1, 2)) t(i, j)')\n+\t\tpyrel2 = duckdb.query('from (values (1, 10)) t(i, k)')\n+\t\tpyrel3 = duckdb.query('from pyrel1 join pyrel2 using(i)')\n+\t\tassert (type(pyrel3) == duckdb.DuckDBPyRelation)\n+\t\tassert (pyrel3.fetchall() == [(1, 2, 10)])\n+\n+\tdef test_replacement_scan_pandas_alias(self):\n+\t\tdf1 = duckdb.query('from (values (1, 2)) t(i, j)').df()\n+\t\tdf2 = duckdb.query('from (values (1, 10)) t(i, k)').df()\n+\t\tdf3 = duckdb.query('from df1 join df2 using(i)')\n+\t\tassert (df3.fetchall() == [(1, 2, 10)])\n+\n \tdef test_replacement_scan_fail(self, duckdb_cursor):\n \t\trandom_object = \"I love salmiak rondos\"\n \t\tcon = duckdb.connect()\ndiff --git a/tools/pythonpkg/tests/fast/test_windows_abs_path.py b/tools/pythonpkg/tests/fast/test_windows_abs_path.py\nnew file mode 100644\nindex 000000000000..fb73e3ed5bdb\n--- /dev/null\n+++ b/tools/pythonpkg/tests/fast/test_windows_abs_path.py\n@@ -0,0 +1,68 @@\n+import duckdb\n+import pytest\n+import os\n+import shutil\n+\n+class TestWindowsAbsPath(object):\n+    def test_windows_path_accent(self):\n+        if os.name != 'nt':\n+            return\n+        current_directory = os.getcwd()\n+        test_dir = os.path.join(current_directory, 't\u00e9st')\n+        if os.path.isdir(test_dir):\n+            shutil.rmtree(test_dir)\n+        os.mkdir(test_dir)\n+\n+        dbname = 'test.db'\n+        dbpath = os.path.join(test_dir, dbname)\n+        con = duckdb.connect(dbpath)\n+        con.execute(\"CREATE OR REPLACE TABLE int AS SELECT * FROM range(10) t(i)\")\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        os.chdir('t\u00e9st')\n+        dbpath = os.path.join('..',  dbpath)\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        con = duckdb.connect(dbname)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        os.chdir('..')\n+\n+    def test_windows_abs_path(self):\n+        if os.name != 'nt':\n+            return\n+        current_directory = os.getcwd()\n+        dbpath = os.path.join(current_directory, 'test.db')\n+        con = duckdb.connect(dbpath)\n+        con.execute(\"CREATE OR REPLACE TABLE int AS SELECT * FROM range(10) t(i)\")\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        assert dbpath[1] == ':'\n+        # remove the drive separator and reconnect\n+        dbpath = dbpath[2:]\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\n+\n+        # forward slashes work as well\n+        dbpath = dbpath.replace('\\\\', '/')\n+        con = duckdb.connect(dbpath)\n+        res = con.execute(\"SELECT COUNT(*) FROM int\").fetchall()\n+        assert res[0][0] == 10\n+        del res\n+        del con\ndiff --git a/tools/shell/shell-test.py b/tools/shell/shell-test.py\nindex cd0582701d68..724522ff8e20 100644\n--- a/tools/shell/shell-test.py\n+++ b/tools/shell/shell-test.py\n@@ -1025,7 +1025,7 @@ def tf():\n           out='''web,8006004,844.21,21''')\n \n      test('''create table mytable as select * from\n-read_json_objects('/dev/stdin');\n+read_ndjson_objects('/dev/stdin');\n select * from mytable;\n           ''',\n           extra_commands=['-list', ':memory:'],\n",
  "problem_statement": "PRAGMA database_size in read-only CLI mode does not calculate free/used blocks correctly\n### What happens?\r\n\r\nIt looks like read-only mode, at least with the CLI, ends up not calculating free/used blocks correctly.  The JDBC driver appears to do it correctly.\r\n\r\n```\r\n$ duckdb example.db \"pragma database_size;\"\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 database_size \u2502 block_size \u2502 total_blocks \u2502 used_blocks \u2502 free_blocks \u2502 wal_size \u2502 memory_usage \u2502 memory_limit \u2502\r\n\u2502    varchar    \u2502   int64    \u2502    int64     \u2502    int64    \u2502    int64    \u2502 varchar  \u2502   varchar    \u2502   varchar    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 4.7MB         \u2502     262144 \u2502           18 \u2502          12 \u2502           6 \u2502 0 bytes  \u2502 0 bytes      \u2502 27.4GB       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n$ duckdb -readonly example.db \"pragma database_size;\"\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502 database_size \u2502 block_size \u2502 total_blocks \u2502 used_blocks \u2502 free_blocks \u2502 wal_size \u2502 memory_usage \u2502 memory_limit \u2502\r\n\u2502    varchar    \u2502   int64    \u2502    int64     \u2502    int64    \u2502    int64    \u2502 varchar  \u2502   varchar    \u2502   varchar    \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 4.7MB         \u2502     262144 \u2502           18 \u2502          18 \u2502           0 \u2502 0 bytes  \u2502 0 bytes      \u2502 27.4GB       \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\n### To Reproduce\r\n\r\nCompare:\r\n`duckdb -readonly example.db \"pragma database_size;\"`\r\nto\r\n`duckdb example.db \"pragma database_size;\"`\r\n\r\n### OS:\r\n\r\nMac OSX AMD64\r\n\r\n### DuckDB Version:\r\n\r\n0.6.1\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nPaul Ellsworth\r\n\r\n### Affiliation:\r\n\r\nTenable, Inc.\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\n- [X] I agree\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] I agree\nMultiple unnests in lateral join error - failed to bind column reference\n### What happens?\n\nUsing multiple `UNNEST` clauses in a lateral join will cause a \"failed to bind column reference\" error.\r\n\n\n### To Reproduce\n\n\r\n```sql\r\nD CREATE TABLE with_array(foo INT, arr DOUBLE[]);\r\nD INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\r\nD SELECT * FROM with_array, (SELECT UNNEST(with_array.arr), UNNEST(generate_series(1, len(with_array.arr), 1)));\r\n-- Failed to bind column reference \"UNNEST(generate_series(CAST(1 AS BIGINT), len(arr), CAST(1 AS BIGINT)))\" [8.1] (bindings: [0.0 0.1 8.0])\r\n```\r\n\r\nDisabling the optimizer makes this work as intended - it is likely related to the unnest rewriter optimizer.\r\n\r\n```sql\r\npragma disable_optimizer;\r\nD CREATE TABLE with_array(foo INT, arr DOUBLE[]);\r\nD INSERT INTO with_array VALUES(1, [1,2,3]), (2, [4,5,6]);\r\nD SELECT * FROM with_array, (SELECT UNNEST(with_array.arr), UNNEST(generate_series(1, len(with_array.arr), 1)));\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  foo  \u2502       arr       \u2502 unnest(with_array.arr) \u2502 unnest(generate_series(1, len(with_array.arr), 1)) \u2502\r\n\u2502 int32 \u2502    double[]     \u2502         double         \u2502                       int64                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    3.0 \u2502                                                  3 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    6.0 \u2502                                                  3 \u2502\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    2.0 \u2502                                                  2 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    5.0 \u2502                                                  2 \u2502\r\n\u2502     1 \u2502 [1.0, 2.0, 3.0] \u2502                    1.0 \u2502                                                  1 \u2502\r\n\u2502     2 \u2502 [4.0, 5.0, 6.0] \u2502                    4.0 \u2502                                                  1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\n\n### OS:\n\nMacOS\n\n### DuckDB Version:\n\nLatest\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMark Raasveldt\n\n### Affiliation:\n\nDuckDB Labs\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nString split benchmark wrong result\n### What happens?\n\nIn the latest commit, string split benchmark result is incorrect, including `benchmark/micro/list/string_split.benchmark`,  `benchmark/micro/list/string_split_regexp.benchmark`, `benchmark/micro/list/string_split_unicode.benchmark`\n\n### To Reproduce\n\n```\r\n./benchmark/benchmark_runner benchmark/micro/list/string_split.benchmark\r\nname    run     timing\r\nbenchmark/micro/list/string_split.benchmark     1       INCORRECT\r\nINCORRECT RESULT: Error in result on row 1 column 1: expected value \"27124176\" but got value \"27116609\"\r\nObtained result:\r\nsum(length(str_split(l_comment, ' ')))\r\nHUGEINT\r\n[ Rows: 1]\r\n27116609\r\n```\n\n### OS:\n\nubuntu 20.04\n\n### DuckDB Version:\n\nv0.7.2-dev3561\n\n### DuckDB Client:\n\nbinary\n\n### Full Name:\n\nKe Xu\n\n### Affiliation:\n\nSoutheast University\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n\n",
  "created_at": "2023-05-16T09:28:44Z"
}