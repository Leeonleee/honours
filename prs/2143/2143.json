{
  "repo": "duckdb/duckdb",
  "pull_number": 2143,
  "instance_id": "duckdb__duckdb-2143",
  "issue_numbers": [
    "1986"
  ],
  "base_commit": "28a76d091aa1c23b0e1f72a2c8e9d8563c5f1c4f",
  "patch": "diff --git a/src/execution/operator/projection/physical_unnest.cpp b/src/execution/operator/projection/physical_unnest.cpp\nindex 5ab4c758bc1c..654958c1fc46 100644\n--- a/src/execution/operator/projection/physical_unnest.cpp\n+++ b/src/execution/operator/projection/physical_unnest.cpp\n@@ -201,7 +201,7 @@ void PhysicalUnnest::GetChunkInternal(ExecutionContext &context, DataChunk &chun\n \t\t\t\tint64_t list_length;\n \t\t\t\t// deal with NULL values\n \t\t\t\tif (!vdata.validity.RowIsValid(current_idx)) {\n-\t\t\t\t\tlist_length = 1;\n+\t\t\t\t\tlist_length = 0;\n \t\t\t\t} else {\n \t\t\t\t\tauto list_data = (list_entry_t *)vdata.data;\n \t\t\t\t\tauto list_entry = list_data[current_idx];\ndiff --git a/src/main/query_profiler.cpp b/src/main/query_profiler.cpp\nindex dda657b80128..945dbe09b316 100644\n--- a/src/main/query_profiler.cpp\n+++ b/src/main/query_profiler.cpp\n@@ -241,10 +241,11 @@ void QueryProfiler::Flush(OperatorProfiler &profiler) {\n \t\t\tif (!info) {\n \t\t\t\tcontinue;\n \t\t\t}\n-\t\t\tif (int(entry->second->info.executors_info.size()) <= info->id) {\n-\t\t\t\tentry->second->info.executors_info.resize(info->id + 1);\n+\t\t\tauto info_id = info->id;\n+\t\t\tif (int(entry->second->info.executors_info.size()) <= info_id) {\n+\t\t\t\tentry->second->info.executors_info.resize(info_id + 1);\n \t\t\t}\n-\t\t\tentry->second->info.executors_info[info->id] = move(info);\n+\t\t\tentry->second->info.executors_info[info_id] = move(info);\n \t\t}\n \t}\n }\ndiff --git a/src/storage/table/row_group.cpp b/src/storage/table/row_group.cpp\nindex 996fc18d460f..bfb028909363 100644\n--- a/src/storage/table/row_group.cpp\n+++ b/src/storage/table/row_group.cpp\n@@ -39,7 +39,8 @@ RowGroup::RowGroup(DatabaseInstance &db, DataTableInfo &table_info, const vector\n \n \t// set up the statistics\n \tfor (auto &stats : pointer.statistics) {\n-\t\tthis->stats.push_back(make_shared<SegmentStatistics>(stats->type, move(stats)));\n+\t\tauto stats_type = stats->type;\n+\t\tthis->stats.push_back(make_shared<SegmentStatistics>(stats_type, move(stats)));\n \t}\n \tthis->version_info = move(pointer.versions);\n \n",
  "test_patch": "diff --git a/test/sql/function/string/test_string_split.test b/test/sql/function/string/test_string_split.test\nindex b487d3d4acb3..56da14e61499 100644\n--- a/test/sql/function/string/test_string_split.test\n+++ b/test/sql/function/string/test_string_split.test\n@@ -7,7 +7,7 @@ PRAGMA enable_verification\n \n # test unnesting of null values a bit\n query T\n-SELECT UNNEST(string_split(NULL, NULL))\n+SELECT string_split(NULL, NULL)\n ----\n NULL\n \n@@ -30,7 +30,6 @@ SELECT UNNEST(string_split(s, 'b')) FROM strings_with_null\n ----\n a\n a\n-NULL\n a\n a\n a\n@@ -38,7 +37,6 @@ a\n query T\n SELECT UNNEST(string_split(NULL, ' ')) IS NULL LIMIT 5\n ----\n-1\n \n query T\n SELECT UNNEST(string_split('\u00fc\u00fc\u00fc\u00fc\u00fc', '\u25cc\u0308'))\ndiff --git a/test/sql/order/test_order_variable_size_payload.test_coverage b/test/sql/order/test_order_variable_size_payload.test_coverage\nindex 6bd2a526d21d..f3554bac5f34 100644\n--- a/test/sql/order/test_order_variable_size_payload.test_coverage\n+++ b/test/sql/order/test_order_variable_size_payload.test_coverage\n@@ -189,7 +189,6 @@ NULL\t{'i': NULL, 's': }\n 1\t{'i': 1, 's': a}\n 1\t{'i': 1, 's': a}\n 1\t{'i': 1, 's': }\n-2\t{'i': 2, 's': NULL}\n 3\t{'i': 3, 's': a}\n 3\t{'i': 3, 's': a}\n 3\t{'i': 3, 's': a}\ndiff --git a/test/sql/types/list/large_list_storage.test_slow b/test/sql/types/list/large_list_storage.test_slow\nindex bef42e57a608..ab059fd86898 100644\n--- a/test/sql/types/list/large_list_storage.test_slow\n+++ b/test/sql/types/list/large_list_storage.test_slow\n@@ -40,7 +40,7 @@ SELECT COUNT(*) FROM a\n query IIII\n SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) tbl(i)\n ----\n-30008\t0\t99999999\t30007\n+30007\t0\t99999999\t30007\n \n # bigly list that spans multiple pages\n statement ok\n@@ -49,7 +49,7 @@ INSERT INTO a SELECT LIST(i) FROM range(200000) tbl(i)\n query IIII\n SELECT COUNT(*), MIN(i), MAX(i), COUNT(i) FROM (SELECT UNNEST(b) FROM a) tbl(i)\n ----\n-230008\t0\t99999999\t230007\n+230007\t0\t99999999\t230007\n \n # several bigly lists with null values\n statement ok\ndiff --git a/test/sql/types/list/list_of_struct.test b/test/sql/types/list/list_of_struct.test\nindex bee650e5e213..371f3e3092a3 100644\n--- a/test/sql/types/list/list_of_struct.test\n+++ b/test/sql/types/list/list_of_struct.test\n@@ -38,7 +38,6 @@ SELECT UNNEST(l) FROM a\n {'a': 3, 'b': hello}\n NULL\n {'a': NULL, 'b': thisisalongstring}\n-NULL\n {'a': 17, 'b': world}\n \n # list of nested structs with lists\n@@ -104,7 +103,6 @@ NULL\n {'a': {'a1': [NULL, 4, 5], 'a2': NULL}, 'b': thisisalongstring}\n {'a': {'a1': NULL, 'a2': 22}, 'b': NULL}\n {'a': NULL, 'b': aaaaaaaaaaaaaaaaaaaaaaaa}\n-NULL\n {'a': {'a1': [6, 7, 8, 9], 'a2': 17}, 'b': world1}\n NULL\n {'a': {'a1': [10, 11, 12], 'a2': 22}, 'b': world2}\n@@ -117,7 +115,6 @@ NULL\n {'a1': [NULL, 4, 5], 'a2': NULL}\n {'a1': NULL, 'a2': 22}\n NULL\n-NULL\n {'a1': [6, 7, 8, 9], 'a2': 17}\n NULL\n {'a1': [10, 11, 12], 'a2': 22}\n@@ -130,7 +127,6 @@ NULL\n [NULL, 4, 5]\n NULL\n NULL\n-NULL\n [6, 7, 8, 9]\n NULL\n [10, 11, 12]\ndiff --git a/test/sql/types/list/unnest_complex_types.test b/test/sql/types/list/unnest_complex_types.test\nindex 616343e051d7..397a9159a2a1 100644\n--- a/test/sql/types/list/unnest_complex_types.test\n+++ b/test/sql/types/list/unnest_complex_types.test\n@@ -35,7 +35,6 @@ SELECT UNNEST(i) FROM (VALUES ([[1, 2, 3], [4, 5]]), (NULL), ([[6, 7], NULL, [8,\n ----\n [1, 2, 3]\n [4, 5]\n-NULL\n [6, 7]\n NULL\n [8, 9, NULL]\n@@ -60,7 +59,6 @@ SELECT UNNEST(i) FROM (VALUES ([{'a': 10, 'b': 1}, {'a': 11, 'b': 2}]), (NULL),\n ----\n {'a': 10, 'b': 1}\n {'a': 11, 'b': 2}\n-NULL\n {'a': 12, 'b': 3}\n NULL\n {'a': NULL, 'b': NULL}\n@@ -71,7 +69,6 @@ SELECT UNNEST(i) FROM (VALUES ([{'a': {'a1': 7, 'a2': NULL}, 'b': 1}, {'a': {'a1\n ----\n {'a': {'a1': 7, 'a2': NULL}, 'b': 1}\n {'a': {'a1': 9, 'a2': 10}, 'b': 2}\n-NULL\n {'a': {'a1': 11, 'a2': 12}, 'b': 3}\n NULL\n {'a': NULL, 'b': NULL}\ndiff --git a/test/sql/types/list/unnest_null_empty.test b/test/sql/types/list/unnest_null_empty.test\nnew file mode 100644\nindex 000000000000..477a1e16bf4a\n--- /dev/null\n+++ b/test/sql/types/list/unnest_null_empty.test\n@@ -0,0 +1,47 @@\n+# name: test/sql/types/list/unnest_null_empty.test\n+# description: Test unnest semantics with NULL and empty lists\n+# group: [list]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE people(id INTEGER, name VARCHAR, address VARCHAR[]);\n+\n+statement ok\n+insert into people values (1, 'Zuckerberg', ARRAY['New York']);\n+\n+statement ok\n+insert into people values (2, 'Bezos', ARRAY['Washington', 'Space']);\n+\n+statement ok\n+insert into people values (3, 'Tim', NULL);\n+\n+statement ok\n+insert into people values (4, 'Elvis', ARRAY[NULL, NULL, NULL]);\n+\n+statement ok\n+insert into people values (5, 'Mark', ARRAY[]::VARCHAR[]);\n+\n+query II\n+SELECT name, UNNEST(address) FROM people;\n+----\n+Zuckerberg\tNew York\n+Bezos\tWashington\n+Bezos\tSpace\n+Elvis\tNULL\n+Elvis\tNULL\n+Elvis\tNULL\n+\n+# and with multiple unnests\n+query III\n+SELECT name, UNNEST(address), UNNEST([1]) FROM people;\n+----\n+Zuckerberg\tNew York\t1\n+Bezos\tWashington\t1\n+Bezos\tSpace\tNULL\n+Tim\tNULL\t1\n+Elvis\tNULL\t1\n+Elvis\tNULL\tNULL\n+Elvis\tNULL\tNULL\n+Mark\tNULL\t1\n",
  "problem_statement": "UNNEST on NULL Lists\nCurrently this is inconsistent with Postgres, we probably want this to be consistent.\r\n\r\n```sql\r\nCREATE TABLE people(id INTEGER, name VARCHAR, address VARCHAR[]);\r\ninsert into people values (1, 'Zuckerberg', ARRAY['New York']);\r\ninsert into people values (2, 'Bezos', ARRAY['Washington', 'Space']);\r\ninsert into people values (3, 'Tim', NULL);\r\ninsert into people values (4, 'Elvis', ARRAY[NULL, NULL, NULL]);\r\ninsert into people values (5, 'Mark', ARRAY[]::VARCHAR[]);\r\n\r\n-- current result:\r\nSELECT name, UNNEST(address) FROM people;\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    name    \u2502 unnest(address) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 Zuckerberg \u2502 New York        \u2502\r\n\u2502 Bezos      \u2502 Washington      \u2502\r\n\u2502 Bezos      \u2502 Space           \u2502\r\n\u2502 Tim        \u2502 NULL            \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n-- postgres/desired result\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502    name    \u2502 unnest(address) \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 Zuckerberg \u2502 New York        \u2502\r\n\u2502 Bezos      \u2502 Washington      \u2502\r\n\u2502 Bezos      \u2502 Space           \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2502 Elvis      \u2502 NULL            \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\n",
  "hints_text": "",
  "created_at": "2021-08-12T10:51:20Z"
}