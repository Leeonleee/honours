{
  "repo": "duckdb/duckdb",
  "pull_number": 3356,
  "instance_id": "duckdb__duckdb-3356",
  "issue_numbers": [
    "3350",
    "3350"
  ],
  "base_commit": "7c5ba6c0e1521a76a6644a4525dd6f393215baed",
  "patch": "diff --git a/src/execution/operator/join/physical_comparison_join.cpp b/src/execution/operator/join/physical_comparison_join.cpp\nindex 15409c976e2f..c13a971f0b41 100644\n--- a/src/execution/operator/join/physical_comparison_join.cpp\n+++ b/src/execution/operator/join/physical_comparison_join.cpp\n@@ -27,7 +27,7 @@ string PhysicalComparisonJoin::ParamsToString() const {\n \tstring extra_info = JoinTypeToString(join_type) + \"\\n\";\n \tfor (auto &it : conditions) {\n \t\tstring op = ExpressionTypeToOperator(it.comparison);\n-\t\textra_info += it.left->GetName() + op + it.right->GetName() + \"\\n\";\n+\t\textra_info += it.left->GetName() + \" \" + op + \" \" + it.right->GetName() + \"\\n\";\n \t}\n \treturn extra_info;\n }\ndiff --git a/src/optimizer/statistics/operator/propagate_join.cpp b/src/optimizer/statistics/operator/propagate_join.cpp\nindex 42d98f7f9eb6..3054cff8e598 100644\n--- a/src/optimizer/statistics/operator/propagate_join.cpp\n+++ b/src/optimizer/statistics/operator/propagate_join.cpp\n@@ -168,11 +168,17 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalJoin\n \t}\n \n \tauto join_type = join.join_type;\n+\t// depending on the join type, we might need to alter the statistics\n+\t// LEFT, FULL, RIGHT OUTER and SINGLE joins can introduce null values\n+\t// this requires us to alter the statistics after this point in the query plan\n+\tbool adds_null_on_left = IsRightOuterJoin(join_type);\n+\tbool adds_null_on_right = IsLeftOuterJoin(join_type) || join_type == JoinType::SINGLE;\n+\n \tvector<ColumnBinding> left_bindings, right_bindings;\n-\tif (IsRightOuterJoin(join_type)) {\n+\tif (adds_null_on_left) {\n \t\tleft_bindings = join.children[0]->GetColumnBindings();\n \t}\n-\tif (IsLeftOuterJoin(join_type)) {\n+\tif (adds_null_on_right) {\n \t\tright_bindings = join.children[1]->GetColumnBindings();\n \t}\n \n@@ -188,10 +194,7 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalJoin\n \t\tbreak;\n \t}\n \n-\t// now depending on the join type, we might need to alter the statistics\n-\t// LEFT, FULL and RIGHT OUTER joins can introduce null values\n-\t// this requires us to alter the statistics after this point in the query plan\n-\tif (IsLeftOuterJoin(join_type)) {\n+\tif (adds_null_on_right) {\n \t\t// left or full outer join: set IsNull() to true for all rhs statistics\n \t\tfor (auto &binding : right_bindings) {\n \t\t\tauto stats = statistics_map.find(binding);\n@@ -200,7 +203,7 @@ unique_ptr<NodeStatistics> StatisticsPropagator::PropagateStatistics(LogicalJoin\n \t\t\t}\n \t\t}\n \t}\n-\tif (IsRightOuterJoin(join_type)) {\n+\tif (adds_null_on_left) {\n \t\t// right or full outer join: set IsNull() to true for all lhs statistics\n \t\tfor (auto &binding : left_bindings) {\n \t\t\tauto stats = statistics_map.find(binding);\n",
  "test_patch": "diff --git a/test/issues/fuzz/encode_string_data_crash.test b/test/issues/fuzz/encode_string_data_crash.test\nnew file mode 100644\nindex 000000000000..5320f7cf8a98\n--- /dev/null\n+++ b/test/issues/fuzz/encode_string_data_crash.test\n@@ -0,0 +1,38 @@\n+# name: test/issues/fuzz/encode_string_data_crash.test\n+# description: Issue #3350: SEGV in duckdb::EncodeStringDataPrefix\n+# group: [fuzz]\n+\n+require vector_size 512\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE strings(b REAL, a INTEGER);\n+\n+statement ok\n+INSERT INTO strings VALUES\n+  (5, 10), (10, 20), (13, 26), (13, 26),\n+  (15, 30), (20, 40), (22,80), (30, 90);\n+\n+statement ok\n+CREATE TABLE id(c TEXT, strings_with_null INTEGER);\n+\n+statement ok\n+INSERT INTO id VALUES('c', NULL);\n+\n+query I\n+SELECT sum(a) OVER (\n+    PARTITION BY (\n+SELECT c FROM id WHERE strings_with_null=a\n+    ) ORDER BY a\n+  ) FROM strings;\n+----\n+10\n+30\n+82\n+82\n+112\n+152\n+232\n+322\n",
  "problem_statement": "SEGV in duckdb::EncodeStringDataPrefix\n#### What happens?\r\nSEGV in duckdb::EncodeStringDataPrefix(unsigned char*, duckdb::string_t, unsigned long) /root/duckdb/src/common/radix.cpp:162:2\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE strings(b REAL, a INTEGER);\r\nINSERT INTO strings VALUES\r\n  (5, 10), (10, 20), (13, 26), (13, 26),\r\n  (15, 30), (20, 40), (22,80), (30, 90);\r\nCREATE TABLE id(c TEXT, strings_with_null INTEGER);\r\nINSERT INTO id VALUES('c', NULL);\r\nSELECT sum(a) OVER (\r\n    PARTITION BY (\r\nSELECT c FROM id WHERE strings_with_null=a\r\n    ) ORDER BY a\r\n  ) FROM strings;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1395 80ae1e12d\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n#### ASAN detail\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==39778==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x000001ab00b2 bp 0x7fff4c997350 sp 0x7fff4c996b08 T0)\r\n==39778==The signal is caused by a READ memory access.\r\n==39778==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.\r\n    #0 0x1ab00b2 in __asan::QuickCheckForUnpoisonedRegion(unsigned long, unsigned long) (/root/bld_asan/duckdb+0x1ab00b2)\r\n    #1 0x1aaff6a in __asan_memcpy (/root/bld_asan/duckdb+0x1aaff6a)\r\n    #2 0x2a4349e in duckdb::EncodeStringDataPrefix(unsigned char*, duckdb::string_t, unsigned long) /root/duckdb/src/common/radix.cpp:162:2\r\n    #3 0x56835b7 in duckdb::RadixScatterStringVector(duckdb::VectorData&, duckdb::SelectionVector const&, unsigned long, unsigned char**, bool, bool, bool, unsigned long, unsigned long) /root/duckdb/src/common/row_operations/row_radix_scatter.cpp:87:4\r\n    #4 0x56877bc in duckdb::RowOperations::RadixScatter(duckdb::Vector&, unsigned long, duckdb::SelectionVector const&, unsigned long, unsigned char**, bool, bool, bool, unsigned long, unsigned long, unsigned long) /root/duckdb/src/common/row_operations/row_radix_scatter.cpp:269:3\r\n    #5 0x57be86a in duckdb::LocalSortState::SinkChunk(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb/src/common/sort/sort_state.cpp:165:3\r\n    #6 0x5cbcd86 in duckdb::SortCollectionForPartition(duckdb::WindowOperatorState&, duckdb::BoundWindowExpression*, duckdb::ChunkCollection&, duckdb::ChunkCollection&, duckdb::ChunkCollection*, unsigned long, unsigned long) /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:403:20\r\n    #7 0x5cb68d4 in duckdb::GeneratePartition(duckdb::WindowOperatorState&, duckdb::WindowGlobalState&, unsigned long) /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:1221:3\r\n    #8 0x5cb5208 in duckdb::PhysicalWindow::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:1376:4\r\n    #9 0x3826288 in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:316:19\r\n    #10 0x3818efd in duckdb::PipelineExecutor::ExecutePull(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:194:5\r\n    #11 0x3818538 in duckdb::Executor::FetchChunk() /root/duckdb/src/parallel/executor.cpp:729:18\r\n    #12 0x3588278 in duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) /root/duckdb/src/main/client_context.cpp:96:25\r\n    #13 0x3588038 in duckdb::ClientContext::Fetch(duckdb::ClientContextLock&, duckdb::StreamQueryResult&) /root/duckdb/src/main/client_context.cpp:88:9\r\n    #14 0x35fe8a5 in duckdb::StreamQueryResult::FetchRaw() /root/duckdb/src/main/stream_query_result.cpp:47:20\r\n    #15 0x35f44b1 in duckdb::QueryResult::Fetch() /root/duckdb/src/main/query_result.cpp:50:15\r\n    #16 0x1c1023e in duckdb::QueryResult::TryFetch(std::unique_ptr<duckdb::DataChunk, std::default_delete<duckdb::DataChunk> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) /root/duckdb/src/include/duckdb/main/query_result.hpp:85:13\r\n    #17 0x1bf98f6 in sqlite3_step /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:229:23\r\n    #18 0x1bd32da in exec_prepared_stmt_columnar /root/duckdb/tools/shell/shell.c:12710:8\r\n    #19 0x1bd0f53 in exec_prepared_stmt /root/duckdb/tools/shell/shell.c:12886:5\r\n    #20 0x1b396ab in shell_exec /root/duckdb/tools/shell/shell.c:13204:7\r\n    #21 0x1bdc4ca in runOneSqlLine /root/duckdb/tools/shell/shell.c:19991:8\r\n    #22 0x1b3c71d in process_input /root/duckdb/tools/shell/shell.c:20106:17\r\n    #23 0x1b03651 in main /root/duckdb/tools/shell/shell.c:20908:12\r\n    #24 0x7f387b7510b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #25 0x1a3597d in _start (/root/bld_asan/duckdb+0x1a3597d)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV (/root/bld_asan/duckdb+0x1ab00b2) in __asan::QuickCheckForUnpoisonedRegion(unsigned long, unsigned long)\r\n==39778==ABORTING\r\n```\r\n\nSEGV in duckdb::EncodeStringDataPrefix\n#### What happens?\r\nSEGV in duckdb::EncodeStringDataPrefix(unsigned char*, duckdb::string_t, unsigned long) /root/duckdb/src/common/radix.cpp:162:2\r\n\r\n#### To Reproduce\r\n```sql\r\nCREATE TABLE strings(b REAL, a INTEGER);\r\nINSERT INTO strings VALUES\r\n  (5, 10), (10, 20), (13, 26), (13, 26),\r\n  (15, 30), (20, 40), (22,80), (30, 90);\r\nCREATE TABLE id(c TEXT, strings_with_null INTEGER);\r\nINSERT INTO id VALUES('c', NULL);\r\nSELECT sum(a) OVER (\r\n    PARTITION BY (\r\nSELECT c FROM id WHERE strings_with_null=a\r\n    ) ORDER BY a\r\n  ) FROM strings;\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: linux\r\n - DuckDB Version: v0.3.3-dev1395 80ae1e12d\r\n - DuckDB Client: /usr/local/bin/duckdb\r\n\r\n#### Before Submitting\r\n\r\n- [x] **Have you tried this on the latest `master` branch?**\r\n* **Python**: `pip install duckdb --upgrade --pre`\r\n* **R**: `install.packages(\"https://github.com/duckdb/duckdb/releases/download/master-builds/duckdb_r_src.tar.gz\", repos = NULL)`\r\n* **Other Platforms**: You can find binaries [here](https://github.com/duckdb/duckdb/releases/tag/master-builds) or compile from source.\r\n\r\n- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**\r\n\r\n#### ASAN detail\r\n\r\n```\r\nAddressSanitizer:DEADLYSIGNAL\r\n=================================================================\r\n==39778==ERROR: AddressSanitizer: SEGV on unknown address (pc 0x000001ab00b2 bp 0x7fff4c997350 sp 0x7fff4c996b08 T0)\r\n==39778==The signal is caused by a READ memory access.\r\n==39778==Hint: this fault was caused by a dereference of a high value address (see register values below).  Disassemble the provided pc to learn which register was used.\r\n    #0 0x1ab00b2 in __asan::QuickCheckForUnpoisonedRegion(unsigned long, unsigned long) (/root/bld_asan/duckdb+0x1ab00b2)\r\n    #1 0x1aaff6a in __asan_memcpy (/root/bld_asan/duckdb+0x1aaff6a)\r\n    #2 0x2a4349e in duckdb::EncodeStringDataPrefix(unsigned char*, duckdb::string_t, unsigned long) /root/duckdb/src/common/radix.cpp:162:2\r\n    #3 0x56835b7 in duckdb::RadixScatterStringVector(duckdb::VectorData&, duckdb::SelectionVector const&, unsigned long, unsigned char**, bool, bool, bool, unsigned long, unsigned long) /root/duckdb/src/common/row_operations/row_radix_scatter.cpp:87:4\r\n    #4 0x56877bc in duckdb::RowOperations::RadixScatter(duckdb::Vector&, unsigned long, duckdb::SelectionVector const&, unsigned long, unsigned char**, bool, bool, bool, unsigned long, unsigned long, unsigned long) /root/duckdb/src/common/row_operations/row_radix_scatter.cpp:269:3\r\n    #5 0x57be86a in duckdb::LocalSortState::SinkChunk(duckdb::DataChunk&, duckdb::DataChunk&) /root/duckdb/src/common/sort/sort_state.cpp:165:3\r\n    #6 0x5cbcd86 in duckdb::SortCollectionForPartition(duckdb::WindowOperatorState&, duckdb::BoundWindowExpression*, duckdb::ChunkCollection&, duckdb::ChunkCollection&, duckdb::ChunkCollection*, unsigned long, unsigned long) /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:403:20\r\n    #7 0x5cb68d4 in duckdb::GeneratePartition(duckdb::WindowOperatorState&, duckdb::WindowGlobalState&, unsigned long) /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:1221:3\r\n    #8 0x5cb5208 in duckdb::PhysicalWindow::GetData(duckdb::ExecutionContext&, duckdb::DataChunk&, duckdb::GlobalSourceState&, duckdb::LocalSourceState&) const /root/duckdb/src/execution/operator/aggregate/physical_window.cpp:1376:4\r\n    #9 0x3826288 in duckdb::PipelineExecutor::FetchFromSource(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:316:19\r\n    #10 0x3818efd in duckdb::PipelineExecutor::ExecutePull(duckdb::DataChunk&) /root/duckdb/src/parallel/pipeline_executor.cpp:194:5\r\n    #11 0x3818538 in duckdb::Executor::FetchChunk() /root/duckdb/src/parallel/executor.cpp:729:18\r\n    #12 0x3588278 in duckdb::ClientContext::FetchInternal(duckdb::ClientContextLock&, duckdb::Executor&, duckdb::BaseQueryResult&) /root/duckdb/src/main/client_context.cpp:96:25\r\n    #13 0x3588038 in duckdb::ClientContext::Fetch(duckdb::ClientContextLock&, duckdb::StreamQueryResult&) /root/duckdb/src/main/client_context.cpp:88:9\r\n    #14 0x35fe8a5 in duckdb::StreamQueryResult::FetchRaw() /root/duckdb/src/main/stream_query_result.cpp:47:20\r\n    #15 0x35f44b1 in duckdb::QueryResult::Fetch() /root/duckdb/src/main/query_result.cpp:50:15\r\n    #16 0x1c1023e in duckdb::QueryResult::TryFetch(std::unique_ptr<duckdb::DataChunk, std::default_delete<duckdb::DataChunk> >&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&) /root/duckdb/src/include/duckdb/main/query_result.hpp:85:13\r\n    #17 0x1bf98f6 in sqlite3_step /root/duckdb/tools/sqlite3_api_wrapper/sqlite3_api_wrapper.cpp:229:23\r\n    #18 0x1bd32da in exec_prepared_stmt_columnar /root/duckdb/tools/shell/shell.c:12710:8\r\n    #19 0x1bd0f53 in exec_prepared_stmt /root/duckdb/tools/shell/shell.c:12886:5\r\n    #20 0x1b396ab in shell_exec /root/duckdb/tools/shell/shell.c:13204:7\r\n    #21 0x1bdc4ca in runOneSqlLine /root/duckdb/tools/shell/shell.c:19991:8\r\n    #22 0x1b3c71d in process_input /root/duckdb/tools/shell/shell.c:20106:17\r\n    #23 0x1b03651 in main /root/duckdb/tools/shell/shell.c:20908:12\r\n    #24 0x7f387b7510b2 in __libc_start_main /build/glibc-sMfBJT/glibc-2.31/csu/../csu/libc-start.c:308:16\r\n    #25 0x1a3597d in _start (/root/bld_asan/duckdb+0x1a3597d)\r\n\r\nAddressSanitizer can not provide additional info.\r\nSUMMARY: AddressSanitizer: SEGV (/root/bld_asan/duckdb+0x1ab00b2) in __asan::QuickCheckForUnpoisonedRegion(unsigned long, unsigned long)\r\n==39778==ABORTING\r\n```\r\n\n",
  "hints_text": "\n",
  "created_at": "2022-04-02T11:58:03Z"
}