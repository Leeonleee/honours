diff --git a/benchmark/micro/case/big_case.benchmark b/benchmark/micro/case/big_case.benchmark
new file mode 100644
index 000000000000..9f82be6fd841
--- /dev/null
+++ b/benchmark/micro/case/big_case.benchmark
@@ -0,0 +1,1018 @@
+# name: benchmark/micro/case/big_case.benchmark
+# description: Big case benchmark
+# group: [case]
+
+name Big case
+group case
+
+load
+CREATE TABLE integers AS SELECT i%2000 i FROM range(10000000) tbl(i);
+
+run
+SELECT SUM(
+CASE i
+WHEN 0 THEN 0
+WHEN 1 THEN 1
+WHEN 2 THEN 2
+WHEN 3 THEN 3
+WHEN 4 THEN 4
+WHEN 5 THEN 5
+WHEN 6 THEN 6
+WHEN 7 THEN 7
+WHEN 8 THEN 8
+WHEN 9 THEN 9
+WHEN 10 THEN 10
+WHEN 11 THEN 11
+WHEN 12 THEN 12
+WHEN 13 THEN 13
+WHEN 14 THEN 14
+WHEN 15 THEN 15
+WHEN 16 THEN 16
+WHEN 17 THEN 17
+WHEN 18 THEN 18
+WHEN 19 THEN 19
+WHEN 20 THEN 20
+WHEN 21 THEN 21
+WHEN 22 THEN 22
+WHEN 23 THEN 23
+WHEN 24 THEN 24
+WHEN 25 THEN 25
+WHEN 26 THEN 26
+WHEN 27 THEN 27
+WHEN 28 THEN 28
+WHEN 29 THEN 29
+WHEN 30 THEN 30
+WHEN 31 THEN 31
+WHEN 32 THEN 32
+WHEN 33 THEN 33
+WHEN 34 THEN 34
+WHEN 35 THEN 35
+WHEN 36 THEN 36
+WHEN 37 THEN 37
+WHEN 38 THEN 38
+WHEN 39 THEN 39
+WHEN 40 THEN 40
+WHEN 41 THEN 41
+WHEN 42 THEN 42
+WHEN 43 THEN 43
+WHEN 44 THEN 44
+WHEN 45 THEN 45
+WHEN 46 THEN 46
+WHEN 47 THEN 47
+WHEN 48 THEN 48
+WHEN 49 THEN 49
+WHEN 50 THEN 50
+WHEN 51 THEN 51
+WHEN 52 THEN 52
+WHEN 53 THEN 53
+WHEN 54 THEN 54
+WHEN 55 THEN 55
+WHEN 56 THEN 56
+WHEN 57 THEN 57
+WHEN 58 THEN 58
+WHEN 59 THEN 59
+WHEN 60 THEN 60
+WHEN 61 THEN 61
+WHEN 62 THEN 62
+WHEN 63 THEN 63
+WHEN 64 THEN 64
+WHEN 65 THEN 65
+WHEN 66 THEN 66
+WHEN 67 THEN 67
+WHEN 68 THEN 68
+WHEN 69 THEN 69
+WHEN 70 THEN 70
+WHEN 71 THEN 71
+WHEN 72 THEN 72
+WHEN 73 THEN 73
+WHEN 74 THEN 74
+WHEN 75 THEN 75
+WHEN 76 THEN 76
+WHEN 77 THEN 77
+WHEN 78 THEN 78
+WHEN 79 THEN 79
+WHEN 80 THEN 80
+WHEN 81 THEN 81
+WHEN 82 THEN 82
+WHEN 83 THEN 83
+WHEN 84 THEN 84
+WHEN 85 THEN 85
+WHEN 86 THEN 86
+WHEN 87 THEN 87
+WHEN 88 THEN 88
+WHEN 89 THEN 89
+WHEN 90 THEN 90
+WHEN 91 THEN 91
+WHEN 92 THEN 92
+WHEN 93 THEN 93
+WHEN 94 THEN 94
+WHEN 95 THEN 95
+WHEN 96 THEN 96
+WHEN 97 THEN 97
+WHEN 98 THEN 98
+WHEN 99 THEN 99
+WHEN 100 THEN 100
+WHEN 101 THEN 101
+WHEN 102 THEN 102
+WHEN 103 THEN 103
+WHEN 104 THEN 104
+WHEN 105 THEN 105
+WHEN 106 THEN 106
+WHEN 107 THEN 107
+WHEN 108 THEN 108
+WHEN 109 THEN 109
+WHEN 110 THEN 110
+WHEN 111 THEN 111
+WHEN 112 THEN 112
+WHEN 113 THEN 113
+WHEN 114 THEN 114
+WHEN 115 THEN 115
+WHEN 116 THEN 116
+WHEN 117 THEN 117
+WHEN 118 THEN 118
+WHEN 119 THEN 119
+WHEN 120 THEN 120
+WHEN 121 THEN 121
+WHEN 122 THEN 122
+WHEN 123 THEN 123
+WHEN 124 THEN 124
+WHEN 125 THEN 125
+WHEN 126 THEN 126
+WHEN 127 THEN 127
+WHEN 128 THEN 128
+WHEN 129 THEN 129
+WHEN 130 THEN 130
+WHEN 131 THEN 131
+WHEN 132 THEN 132
+WHEN 133 THEN 133
+WHEN 134 THEN 134
+WHEN 135 THEN 135
+WHEN 136 THEN 136
+WHEN 137 THEN 137
+WHEN 138 THEN 138
+WHEN 139 THEN 139
+WHEN 140 THEN 140
+WHEN 141 THEN 141
+WHEN 142 THEN 142
+WHEN 143 THEN 143
+WHEN 144 THEN 144
+WHEN 145 THEN 145
+WHEN 146 THEN 146
+WHEN 147 THEN 147
+WHEN 148 THEN 148
+WHEN 149 THEN 149
+WHEN 150 THEN 150
+WHEN 151 THEN 151
+WHEN 152 THEN 152
+WHEN 153 THEN 153
+WHEN 154 THEN 154
+WHEN 155 THEN 155
+WHEN 156 THEN 156
+WHEN 157 THEN 157
+WHEN 158 THEN 158
+WHEN 159 THEN 159
+WHEN 160 THEN 160
+WHEN 161 THEN 161
+WHEN 162 THEN 162
+WHEN 163 THEN 163
+WHEN 164 THEN 164
+WHEN 165 THEN 165
+WHEN 166 THEN 166
+WHEN 167 THEN 167
+WHEN 168 THEN 168
+WHEN 169 THEN 169
+WHEN 170 THEN 170
+WHEN 171 THEN 171
+WHEN 172 THEN 172
+WHEN 173 THEN 173
+WHEN 174 THEN 174
+WHEN 175 THEN 175
+WHEN 176 THEN 176
+WHEN 177 THEN 177
+WHEN 178 THEN 178
+WHEN 179 THEN 179
+WHEN 180 THEN 180
+WHEN 181 THEN 181
+WHEN 182 THEN 182
+WHEN 183 THEN 183
+WHEN 184 THEN 184
+WHEN 185 THEN 185
+WHEN 186 THEN 186
+WHEN 187 THEN 187
+WHEN 188 THEN 188
+WHEN 189 THEN 189
+WHEN 190 THEN 190
+WHEN 191 THEN 191
+WHEN 192 THEN 192
+WHEN 193 THEN 193
+WHEN 194 THEN 194
+WHEN 195 THEN 195
+WHEN 196 THEN 196
+WHEN 197 THEN 197
+WHEN 198 THEN 198
+WHEN 199 THEN 199
+WHEN 200 THEN 200
+WHEN 201 THEN 201
+WHEN 202 THEN 202
+WHEN 203 THEN 203
+WHEN 204 THEN 204
+WHEN 205 THEN 205
+WHEN 206 THEN 206
+WHEN 207 THEN 207
+WHEN 208 THEN 208
+WHEN 209 THEN 209
+WHEN 210 THEN 210
+WHEN 211 THEN 211
+WHEN 212 THEN 212
+WHEN 213 THEN 213
+WHEN 214 THEN 214
+WHEN 215 THEN 215
+WHEN 216 THEN 216
+WHEN 217 THEN 217
+WHEN 218 THEN 218
+WHEN 219 THEN 219
+WHEN 220 THEN 220
+WHEN 221 THEN 221
+WHEN 222 THEN 222
+WHEN 223 THEN 223
+WHEN 224 THEN 224
+WHEN 225 THEN 225
+WHEN 226 THEN 226
+WHEN 227 THEN 227
+WHEN 228 THEN 228
+WHEN 229 THEN 229
+WHEN 230 THEN 230
+WHEN 231 THEN 231
+WHEN 232 THEN 232
+WHEN 233 THEN 233
+WHEN 234 THEN 234
+WHEN 235 THEN 235
+WHEN 236 THEN 236
+WHEN 237 THEN 237
+WHEN 238 THEN 238
+WHEN 239 THEN 239
+WHEN 240 THEN 240
+WHEN 241 THEN 241
+WHEN 242 THEN 242
+WHEN 243 THEN 243
+WHEN 244 THEN 244
+WHEN 245 THEN 245
+WHEN 246 THEN 246
+WHEN 247 THEN 247
+WHEN 248 THEN 248
+WHEN 249 THEN 249
+WHEN 250 THEN 250
+WHEN 251 THEN 251
+WHEN 252 THEN 252
+WHEN 253 THEN 253
+WHEN 254 THEN 254
+WHEN 255 THEN 255
+WHEN 256 THEN 256
+WHEN 257 THEN 257
+WHEN 258 THEN 258
+WHEN 259 THEN 259
+WHEN 260 THEN 260
+WHEN 261 THEN 261
+WHEN 262 THEN 262
+WHEN 263 THEN 263
+WHEN 264 THEN 264
+WHEN 265 THEN 265
+WHEN 266 THEN 266
+WHEN 267 THEN 267
+WHEN 268 THEN 268
+WHEN 269 THEN 269
+WHEN 270 THEN 270
+WHEN 271 THEN 271
+WHEN 272 THEN 272
+WHEN 273 THEN 273
+WHEN 274 THEN 274
+WHEN 275 THEN 275
+WHEN 276 THEN 276
+WHEN 277 THEN 277
+WHEN 278 THEN 278
+WHEN 279 THEN 279
+WHEN 280 THEN 280
+WHEN 281 THEN 281
+WHEN 282 THEN 282
+WHEN 283 THEN 283
+WHEN 284 THEN 284
+WHEN 285 THEN 285
+WHEN 286 THEN 286
+WHEN 287 THEN 287
+WHEN 288 THEN 288
+WHEN 289 THEN 289
+WHEN 290 THEN 290
+WHEN 291 THEN 291
+WHEN 292 THEN 292
+WHEN 293 THEN 293
+WHEN 294 THEN 294
+WHEN 295 THEN 295
+WHEN 296 THEN 296
+WHEN 297 THEN 297
+WHEN 298 THEN 298
+WHEN 299 THEN 299
+WHEN 300 THEN 300
+WHEN 301 THEN 301
+WHEN 302 THEN 302
+WHEN 303 THEN 303
+WHEN 304 THEN 304
+WHEN 305 THEN 305
+WHEN 306 THEN 306
+WHEN 307 THEN 307
+WHEN 308 THEN 308
+WHEN 309 THEN 309
+WHEN 310 THEN 310
+WHEN 311 THEN 311
+WHEN 312 THEN 312
+WHEN 313 THEN 313
+WHEN 314 THEN 314
+WHEN 315 THEN 315
+WHEN 316 THEN 316
+WHEN 317 THEN 317
+WHEN 318 THEN 318
+WHEN 319 THEN 319
+WHEN 320 THEN 320
+WHEN 321 THEN 321
+WHEN 322 THEN 322
+WHEN 323 THEN 323
+WHEN 324 THEN 324
+WHEN 325 THEN 325
+WHEN 326 THEN 326
+WHEN 327 THEN 327
+WHEN 328 THEN 328
+WHEN 329 THEN 329
+WHEN 330 THEN 330
+WHEN 331 THEN 331
+WHEN 332 THEN 332
+WHEN 333 THEN 333
+WHEN 334 THEN 334
+WHEN 335 THEN 335
+WHEN 336 THEN 336
+WHEN 337 THEN 337
+WHEN 338 THEN 338
+WHEN 339 THEN 339
+WHEN 340 THEN 340
+WHEN 341 THEN 341
+WHEN 342 THEN 342
+WHEN 343 THEN 343
+WHEN 344 THEN 344
+WHEN 345 THEN 345
+WHEN 346 THEN 346
+WHEN 347 THEN 347
+WHEN 348 THEN 348
+WHEN 349 THEN 349
+WHEN 350 THEN 350
+WHEN 351 THEN 351
+WHEN 352 THEN 352
+WHEN 353 THEN 353
+WHEN 354 THEN 354
+WHEN 355 THEN 355
+WHEN 356 THEN 356
+WHEN 357 THEN 357
+WHEN 358 THEN 358
+WHEN 359 THEN 359
+WHEN 360 THEN 360
+WHEN 361 THEN 361
+WHEN 362 THEN 362
+WHEN 363 THEN 363
+WHEN 364 THEN 364
+WHEN 365 THEN 365
+WHEN 366 THEN 366
+WHEN 367 THEN 367
+WHEN 368 THEN 368
+WHEN 369 THEN 369
+WHEN 370 THEN 370
+WHEN 371 THEN 371
+WHEN 372 THEN 372
+WHEN 373 THEN 373
+WHEN 374 THEN 374
+WHEN 375 THEN 375
+WHEN 376 THEN 376
+WHEN 377 THEN 377
+WHEN 378 THEN 378
+WHEN 379 THEN 379
+WHEN 380 THEN 380
+WHEN 381 THEN 381
+WHEN 382 THEN 382
+WHEN 383 THEN 383
+WHEN 384 THEN 384
+WHEN 385 THEN 385
+WHEN 386 THEN 386
+WHEN 387 THEN 387
+WHEN 388 THEN 388
+WHEN 389 THEN 389
+WHEN 390 THEN 390
+WHEN 391 THEN 391
+WHEN 392 THEN 392
+WHEN 393 THEN 393
+WHEN 394 THEN 394
+WHEN 395 THEN 395
+WHEN 396 THEN 396
+WHEN 397 THEN 397
+WHEN 398 THEN 398
+WHEN 399 THEN 399
+WHEN 400 THEN 400
+WHEN 401 THEN 401
+WHEN 402 THEN 402
+WHEN 403 THEN 403
+WHEN 404 THEN 404
+WHEN 405 THEN 405
+WHEN 406 THEN 406
+WHEN 407 THEN 407
+WHEN 408 THEN 408
+WHEN 409 THEN 409
+WHEN 410 THEN 410
+WHEN 411 THEN 411
+WHEN 412 THEN 412
+WHEN 413 THEN 413
+WHEN 414 THEN 414
+WHEN 415 THEN 415
+WHEN 416 THEN 416
+WHEN 417 THEN 417
+WHEN 418 THEN 418
+WHEN 419 THEN 419
+WHEN 420 THEN 420
+WHEN 421 THEN 421
+WHEN 422 THEN 422
+WHEN 423 THEN 423
+WHEN 424 THEN 424
+WHEN 425 THEN 425
+WHEN 426 THEN 426
+WHEN 427 THEN 427
+WHEN 428 THEN 428
+WHEN 429 THEN 429
+WHEN 430 THEN 430
+WHEN 431 THEN 431
+WHEN 432 THEN 432
+WHEN 433 THEN 433
+WHEN 434 THEN 434
+WHEN 435 THEN 435
+WHEN 436 THEN 436
+WHEN 437 THEN 437
+WHEN 438 THEN 438
+WHEN 439 THEN 439
+WHEN 440 THEN 440
+WHEN 441 THEN 441
+WHEN 442 THEN 442
+WHEN 443 THEN 443
+WHEN 444 THEN 444
+WHEN 445 THEN 445
+WHEN 446 THEN 446
+WHEN 447 THEN 447
+WHEN 448 THEN 448
+WHEN 449 THEN 449
+WHEN 450 THEN 450
+WHEN 451 THEN 451
+WHEN 452 THEN 452
+WHEN 453 THEN 453
+WHEN 454 THEN 454
+WHEN 455 THEN 455
+WHEN 456 THEN 456
+WHEN 457 THEN 457
+WHEN 458 THEN 458
+WHEN 459 THEN 459
+WHEN 460 THEN 460
+WHEN 461 THEN 461
+WHEN 462 THEN 462
+WHEN 463 THEN 463
+WHEN 464 THEN 464
+WHEN 465 THEN 465
+WHEN 466 THEN 466
+WHEN 467 THEN 467
+WHEN 468 THEN 468
+WHEN 469 THEN 469
+WHEN 470 THEN 470
+WHEN 471 THEN 471
+WHEN 472 THEN 472
+WHEN 473 THEN 473
+WHEN 474 THEN 474
+WHEN 475 THEN 475
+WHEN 476 THEN 476
+WHEN 477 THEN 477
+WHEN 478 THEN 478
+WHEN 479 THEN 479
+WHEN 480 THEN 480
+WHEN 481 THEN 481
+WHEN 482 THEN 482
+WHEN 483 THEN 483
+WHEN 484 THEN 484
+WHEN 485 THEN 485
+WHEN 486 THEN 486
+WHEN 487 THEN 487
+WHEN 488 THEN 488
+WHEN 489 THEN 489
+WHEN 490 THEN 490
+WHEN 491 THEN 491
+WHEN 492 THEN 492
+WHEN 493 THEN 493
+WHEN 494 THEN 494
+WHEN 495 THEN 495
+WHEN 496 THEN 496
+WHEN 497 THEN 497
+WHEN 498 THEN 498
+WHEN 499 THEN 499
+WHEN 500 THEN 500
+WHEN 501 THEN 501
+WHEN 502 THEN 502
+WHEN 503 THEN 503
+WHEN 504 THEN 504
+WHEN 505 THEN 505
+WHEN 506 THEN 506
+WHEN 507 THEN 507
+WHEN 508 THEN 508
+WHEN 509 THEN 509
+WHEN 510 THEN 510
+WHEN 511 THEN 511
+WHEN 512 THEN 512
+WHEN 513 THEN 513
+WHEN 514 THEN 514
+WHEN 515 THEN 515
+WHEN 516 THEN 516
+WHEN 517 THEN 517
+WHEN 518 THEN 518
+WHEN 519 THEN 519
+WHEN 520 THEN 520
+WHEN 521 THEN 521
+WHEN 522 THEN 522
+WHEN 523 THEN 523
+WHEN 524 THEN 524
+WHEN 525 THEN 525
+WHEN 526 THEN 526
+WHEN 527 THEN 527
+WHEN 528 THEN 528
+WHEN 529 THEN 529
+WHEN 530 THEN 530
+WHEN 531 THEN 531
+WHEN 532 THEN 532
+WHEN 533 THEN 533
+WHEN 534 THEN 534
+WHEN 535 THEN 535
+WHEN 536 THEN 536
+WHEN 537 THEN 537
+WHEN 538 THEN 538
+WHEN 539 THEN 539
+WHEN 540 THEN 540
+WHEN 541 THEN 541
+WHEN 542 THEN 542
+WHEN 543 THEN 543
+WHEN 544 THEN 544
+WHEN 545 THEN 545
+WHEN 546 THEN 546
+WHEN 547 THEN 547
+WHEN 548 THEN 548
+WHEN 549 THEN 549
+WHEN 550 THEN 550
+WHEN 551 THEN 551
+WHEN 552 THEN 552
+WHEN 553 THEN 553
+WHEN 554 THEN 554
+WHEN 555 THEN 555
+WHEN 556 THEN 556
+WHEN 557 THEN 557
+WHEN 558 THEN 558
+WHEN 559 THEN 559
+WHEN 560 THEN 560
+WHEN 561 THEN 561
+WHEN 562 THEN 562
+WHEN 563 THEN 563
+WHEN 564 THEN 564
+WHEN 565 THEN 565
+WHEN 566 THEN 566
+WHEN 567 THEN 567
+WHEN 568 THEN 568
+WHEN 569 THEN 569
+WHEN 570 THEN 570
+WHEN 571 THEN 571
+WHEN 572 THEN 572
+WHEN 573 THEN 573
+WHEN 574 THEN 574
+WHEN 575 THEN 575
+WHEN 576 THEN 576
+WHEN 577 THEN 577
+WHEN 578 THEN 578
+WHEN 579 THEN 579
+WHEN 580 THEN 580
+WHEN 581 THEN 581
+WHEN 582 THEN 582
+WHEN 583 THEN 583
+WHEN 584 THEN 584
+WHEN 585 THEN 585
+WHEN 586 THEN 586
+WHEN 587 THEN 587
+WHEN 588 THEN 588
+WHEN 589 THEN 589
+WHEN 590 THEN 590
+WHEN 591 THEN 591
+WHEN 592 THEN 592
+WHEN 593 THEN 593
+WHEN 594 THEN 594
+WHEN 595 THEN 595
+WHEN 596 THEN 596
+WHEN 597 THEN 597
+WHEN 598 THEN 598
+WHEN 599 THEN 599
+WHEN 600 THEN 600
+WHEN 601 THEN 601
+WHEN 602 THEN 602
+WHEN 603 THEN 603
+WHEN 604 THEN 604
+WHEN 605 THEN 605
+WHEN 606 THEN 606
+WHEN 607 THEN 607
+WHEN 608 THEN 608
+WHEN 609 THEN 609
+WHEN 610 THEN 610
+WHEN 611 THEN 611
+WHEN 612 THEN 612
+WHEN 613 THEN 613
+WHEN 614 THEN 614
+WHEN 615 THEN 615
+WHEN 616 THEN 616
+WHEN 617 THEN 617
+WHEN 618 THEN 618
+WHEN 619 THEN 619
+WHEN 620 THEN 620
+WHEN 621 THEN 621
+WHEN 622 THEN 622
+WHEN 623 THEN 623
+WHEN 624 THEN 624
+WHEN 625 THEN 625
+WHEN 626 THEN 626
+WHEN 627 THEN 627
+WHEN 628 THEN 628
+WHEN 629 THEN 629
+WHEN 630 THEN 630
+WHEN 631 THEN 631
+WHEN 632 THEN 632
+WHEN 633 THEN 633
+WHEN 634 THEN 634
+WHEN 635 THEN 635
+WHEN 636 THEN 636
+WHEN 637 THEN 637
+WHEN 638 THEN 638
+WHEN 639 THEN 639
+WHEN 640 THEN 640
+WHEN 641 THEN 641
+WHEN 642 THEN 642
+WHEN 643 THEN 643
+WHEN 644 THEN 644
+WHEN 645 THEN 645
+WHEN 646 THEN 646
+WHEN 647 THEN 647
+WHEN 648 THEN 648
+WHEN 649 THEN 649
+WHEN 650 THEN 650
+WHEN 651 THEN 651
+WHEN 652 THEN 652
+WHEN 653 THEN 653
+WHEN 654 THEN 654
+WHEN 655 THEN 655
+WHEN 656 THEN 656
+WHEN 657 THEN 657
+WHEN 658 THEN 658
+WHEN 659 THEN 659
+WHEN 660 THEN 660
+WHEN 661 THEN 661
+WHEN 662 THEN 662
+WHEN 663 THEN 663
+WHEN 664 THEN 664
+WHEN 665 THEN 665
+WHEN 666 THEN 666
+WHEN 667 THEN 667
+WHEN 668 THEN 668
+WHEN 669 THEN 669
+WHEN 670 THEN 670
+WHEN 671 THEN 671
+WHEN 672 THEN 672
+WHEN 673 THEN 673
+WHEN 674 THEN 674
+WHEN 675 THEN 675
+WHEN 676 THEN 676
+WHEN 677 THEN 677
+WHEN 678 THEN 678
+WHEN 679 THEN 679
+WHEN 680 THEN 680
+WHEN 681 THEN 681
+WHEN 682 THEN 682
+WHEN 683 THEN 683
+WHEN 684 THEN 684
+WHEN 685 THEN 685
+WHEN 686 THEN 686
+WHEN 687 THEN 687
+WHEN 688 THEN 688
+WHEN 689 THEN 689
+WHEN 690 THEN 690
+WHEN 691 THEN 691
+WHEN 692 THEN 692
+WHEN 693 THEN 693
+WHEN 694 THEN 694
+WHEN 695 THEN 695
+WHEN 696 THEN 696
+WHEN 697 THEN 697
+WHEN 698 THEN 698
+WHEN 699 THEN 699
+WHEN 700 THEN 700
+WHEN 701 THEN 701
+WHEN 702 THEN 702
+WHEN 703 THEN 703
+WHEN 704 THEN 704
+WHEN 705 THEN 705
+WHEN 706 THEN 706
+WHEN 707 THEN 707
+WHEN 708 THEN 708
+WHEN 709 THEN 709
+WHEN 710 THEN 710
+WHEN 711 THEN 711
+WHEN 712 THEN 712
+WHEN 713 THEN 713
+WHEN 714 THEN 714
+WHEN 715 THEN 715
+WHEN 716 THEN 716
+WHEN 717 THEN 717
+WHEN 718 THEN 718
+WHEN 719 THEN 719
+WHEN 720 THEN 720
+WHEN 721 THEN 721
+WHEN 722 THEN 722
+WHEN 723 THEN 723
+WHEN 724 THEN 724
+WHEN 725 THEN 725
+WHEN 726 THEN 726
+WHEN 727 THEN 727
+WHEN 728 THEN 728
+WHEN 729 THEN 729
+WHEN 730 THEN 730
+WHEN 731 THEN 731
+WHEN 732 THEN 732
+WHEN 733 THEN 733
+WHEN 734 THEN 734
+WHEN 735 THEN 735
+WHEN 736 THEN 736
+WHEN 737 THEN 737
+WHEN 738 THEN 738
+WHEN 739 THEN 739
+WHEN 740 THEN 740
+WHEN 741 THEN 741
+WHEN 742 THEN 742
+WHEN 743 THEN 743
+WHEN 744 THEN 744
+WHEN 745 THEN 745
+WHEN 746 THEN 746
+WHEN 747 THEN 747
+WHEN 748 THEN 748
+WHEN 749 THEN 749
+WHEN 750 THEN 750
+WHEN 751 THEN 751
+WHEN 752 THEN 752
+WHEN 753 THEN 753
+WHEN 754 THEN 754
+WHEN 755 THEN 755
+WHEN 756 THEN 756
+WHEN 757 THEN 757
+WHEN 758 THEN 758
+WHEN 759 THEN 759
+WHEN 760 THEN 760
+WHEN 761 THEN 761
+WHEN 762 THEN 762
+WHEN 763 THEN 763
+WHEN 764 THEN 764
+WHEN 765 THEN 765
+WHEN 766 THEN 766
+WHEN 767 THEN 767
+WHEN 768 THEN 768
+WHEN 769 THEN 769
+WHEN 770 THEN 770
+WHEN 771 THEN 771
+WHEN 772 THEN 772
+WHEN 773 THEN 773
+WHEN 774 THEN 774
+WHEN 775 THEN 775
+WHEN 776 THEN 776
+WHEN 777 THEN 777
+WHEN 778 THEN 778
+WHEN 779 THEN 779
+WHEN 780 THEN 780
+WHEN 781 THEN 781
+WHEN 782 THEN 782
+WHEN 783 THEN 783
+WHEN 784 THEN 784
+WHEN 785 THEN 785
+WHEN 786 THEN 786
+WHEN 787 THEN 787
+WHEN 788 THEN 788
+WHEN 789 THEN 789
+WHEN 790 THEN 790
+WHEN 791 THEN 791
+WHEN 792 THEN 792
+WHEN 793 THEN 793
+WHEN 794 THEN 794
+WHEN 795 THEN 795
+WHEN 796 THEN 796
+WHEN 797 THEN 797
+WHEN 798 THEN 798
+WHEN 799 THEN 799
+WHEN 800 THEN 800
+WHEN 801 THEN 801
+WHEN 802 THEN 802
+WHEN 803 THEN 803
+WHEN 804 THEN 804
+WHEN 805 THEN 805
+WHEN 806 THEN 806
+WHEN 807 THEN 807
+WHEN 808 THEN 808
+WHEN 809 THEN 809
+WHEN 810 THEN 810
+WHEN 811 THEN 811
+WHEN 812 THEN 812
+WHEN 813 THEN 813
+WHEN 814 THEN 814
+WHEN 815 THEN 815
+WHEN 816 THEN 816
+WHEN 817 THEN 817
+WHEN 818 THEN 818
+WHEN 819 THEN 819
+WHEN 820 THEN 820
+WHEN 821 THEN 821
+WHEN 822 THEN 822
+WHEN 823 THEN 823
+WHEN 824 THEN 824
+WHEN 825 THEN 825
+WHEN 826 THEN 826
+WHEN 827 THEN 827
+WHEN 828 THEN 828
+WHEN 829 THEN 829
+WHEN 830 THEN 830
+WHEN 831 THEN 831
+WHEN 832 THEN 832
+WHEN 833 THEN 833
+WHEN 834 THEN 834
+WHEN 835 THEN 835
+WHEN 836 THEN 836
+WHEN 837 THEN 837
+WHEN 838 THEN 838
+WHEN 839 THEN 839
+WHEN 840 THEN 840
+WHEN 841 THEN 841
+WHEN 842 THEN 842
+WHEN 843 THEN 843
+WHEN 844 THEN 844
+WHEN 845 THEN 845
+WHEN 846 THEN 846
+WHEN 847 THEN 847
+WHEN 848 THEN 848
+WHEN 849 THEN 849
+WHEN 850 THEN 850
+WHEN 851 THEN 851
+WHEN 852 THEN 852
+WHEN 853 THEN 853
+WHEN 854 THEN 854
+WHEN 855 THEN 855
+WHEN 856 THEN 856
+WHEN 857 THEN 857
+WHEN 858 THEN 858
+WHEN 859 THEN 859
+WHEN 860 THEN 860
+WHEN 861 THEN 861
+WHEN 862 THEN 862
+WHEN 863 THEN 863
+WHEN 864 THEN 864
+WHEN 865 THEN 865
+WHEN 866 THEN 866
+WHEN 867 THEN 867
+WHEN 868 THEN 868
+WHEN 869 THEN 869
+WHEN 870 THEN 870
+WHEN 871 THEN 871
+WHEN 872 THEN 872
+WHEN 873 THEN 873
+WHEN 874 THEN 874
+WHEN 875 THEN 875
+WHEN 876 THEN 876
+WHEN 877 THEN 877
+WHEN 878 THEN 878
+WHEN 879 THEN 879
+WHEN 880 THEN 880
+WHEN 881 THEN 881
+WHEN 882 THEN 882
+WHEN 883 THEN 883
+WHEN 884 THEN 884
+WHEN 885 THEN 885
+WHEN 886 THEN 886
+WHEN 887 THEN 887
+WHEN 888 THEN 888
+WHEN 889 THEN 889
+WHEN 890 THEN 890
+WHEN 891 THEN 891
+WHEN 892 THEN 892
+WHEN 893 THEN 893
+WHEN 894 THEN 894
+WHEN 895 THEN 895
+WHEN 896 THEN 896
+WHEN 897 THEN 897
+WHEN 898 THEN 898
+WHEN 899 THEN 899
+WHEN 900 THEN 900
+WHEN 901 THEN 901
+WHEN 902 THEN 902
+WHEN 903 THEN 903
+WHEN 904 THEN 904
+WHEN 905 THEN 905
+WHEN 906 THEN 906
+WHEN 907 THEN 907
+WHEN 908 THEN 908
+WHEN 909 THEN 909
+WHEN 910 THEN 910
+WHEN 911 THEN 911
+WHEN 912 THEN 912
+WHEN 913 THEN 913
+WHEN 914 THEN 914
+WHEN 915 THEN 915
+WHEN 916 THEN 916
+WHEN 917 THEN 917
+WHEN 918 THEN 918
+WHEN 919 THEN 919
+WHEN 920 THEN 920
+WHEN 921 THEN 921
+WHEN 922 THEN 922
+WHEN 923 THEN 923
+WHEN 924 THEN 924
+WHEN 925 THEN 925
+WHEN 926 THEN 926
+WHEN 927 THEN 927
+WHEN 928 THEN 928
+WHEN 929 THEN 929
+WHEN 930 THEN 930
+WHEN 931 THEN 931
+WHEN 932 THEN 932
+WHEN 933 THEN 933
+WHEN 934 THEN 934
+WHEN 935 THEN 935
+WHEN 936 THEN 936
+WHEN 937 THEN 937
+WHEN 938 THEN 938
+WHEN 939 THEN 939
+WHEN 940 THEN 940
+WHEN 941 THEN 941
+WHEN 942 THEN 942
+WHEN 943 THEN 943
+WHEN 944 THEN 944
+WHEN 945 THEN 945
+WHEN 946 THEN 946
+WHEN 947 THEN 947
+WHEN 948 THEN 948
+WHEN 949 THEN 949
+WHEN 950 THEN 950
+WHEN 951 THEN 951
+WHEN 952 THEN 952
+WHEN 953 THEN 953
+WHEN 954 THEN 954
+WHEN 955 THEN 955
+WHEN 956 THEN 956
+WHEN 957 THEN 957
+WHEN 958 THEN 958
+WHEN 959 THEN 959
+WHEN 960 THEN 960
+WHEN 961 THEN 961
+WHEN 962 THEN 962
+WHEN 963 THEN 963
+WHEN 964 THEN 964
+WHEN 965 THEN 965
+WHEN 966 THEN 966
+WHEN 967 THEN 967
+WHEN 968 THEN 968
+WHEN 969 THEN 969
+WHEN 970 THEN 970
+WHEN 971 THEN 971
+WHEN 972 THEN 972
+WHEN 973 THEN 973
+WHEN 974 THEN 974
+WHEN 975 THEN 975
+WHEN 976 THEN 976
+WHEN 977 THEN 977
+WHEN 978 THEN 978
+WHEN 979 THEN 979
+WHEN 980 THEN 980
+WHEN 981 THEN 981
+WHEN 982 THEN 982
+WHEN 983 THEN 983
+WHEN 984 THEN 984
+WHEN 985 THEN 985
+WHEN 986 THEN 986
+WHEN 987 THEN 987
+WHEN 988 THEN 988
+WHEN 989 THEN 989
+WHEN 990 THEN 990
+WHEN 991 THEN 991
+WHEN 992 THEN 992
+WHEN 993 THEN 993
+WHEN 994 THEN 994
+WHEN 995 THEN 995
+WHEN 996 THEN 996
+WHEN 997 THEN 997
+WHEN 998 THEN 998
+WHEN 999 THEN 999
+ELSE NULL END
+) FROM integers;
+
+result I
+2497500000
diff --git a/benchmark/micro/case/integer_case_alternate.benchmark b/benchmark/micro/case/integer_case_alternate.benchmark
new file mode 100644
index 000000000000..9f1e8c1e9260
--- /dev/null
+++ b/benchmark/micro/case/integer_case_alternate.benchmark
@@ -0,0 +1,15 @@
+# name: benchmark/micro/case/integer_case_alternate.benchmark
+# description: Case benchmark
+# group: [case]
+
+name Simple case with integers
+group case
+
+load
+CREATE TABLE integers AS SELECT * FROM range(100000000) tbl(i);
+
+run
+SELECT SUM(CASE WHEN i%2=0 THEN 1 ELSE 0 END) FROM integers;
+
+result I
+50000000
diff --git a/benchmark/micro/case/integer_case_predictable.benchmark b/benchmark/micro/case/integer_case_predictable.benchmark
new file mode 100644
index 000000000000..79522c9e59b8
--- /dev/null
+++ b/benchmark/micro/case/integer_case_predictable.benchmark
@@ -0,0 +1,15 @@
+# name: benchmark/micro/case/integer_case_predictable.benchmark
+# description: Case benchmark
+# group: [case]
+
+name Predictable case with integers
+group case
+
+load
+CREATE TABLE integers AS SELECT * FROM range(100000000) tbl(i);
+
+run
+SELECT SUM(CASE WHEN i<50000000 THEN 1 ELSE 0 END) FROM integers;
+
+result I
+50000000
diff --git a/src/execution/expression_executor/execute_case.cpp b/src/execution/expression_executor/execute_case.cpp
index 9eff84a0419f..980d10cf69e4 100644
--- a/src/execution/expression_executor/execute_case.cpp
+++ b/src/execution/expression_executor/execute_case.cpp
@@ -17,9 +17,11 @@ struct CaseExpressionState : public ExpressionState {
 unique_ptr<ExpressionState> ExpressionExecutor::InitializeState(const BoundCaseExpression &expr,
                                                                 ExpressionExecutorState &root) {
 	auto result = make_unique<CaseExpressionState>(expr, root);
-	result->AddChild(expr.check.get());
-	result->AddChild(expr.result_if_true.get());
-	result->AddChild(expr.result_if_false.get());
+	for (auto &case_check : expr.case_checks) {
+		result->AddChild(case_check.when_expr.get());
+		result->AddChild(case_check.then_expr.get());
+	}
+	result->AddChild(expr.else_expr.get());
 	result->Finalize();
 	return move(result);
 }
@@ -29,39 +31,64 @@ void ExpressionExecutor::Execute(const BoundCaseExpression &expr, ExpressionStat
 	auto state = (CaseExpressionState *)state_p;
 
 	state->intermediate_chunk.Reset();
-	auto &res_true = state->intermediate_chunk.data[1];
-	auto &res_false = state->intermediate_chunk.data[2];
-
-	auto check_state = state->child_states[0].get();
-	auto res_true_state = state->child_states[1].get();
-	auto res_false_state = state->child_states[2].get();
 
 	// first execute the check expression
-	auto &true_sel = state->true_sel;
-	auto &false_sel = state->false_sel;
-	idx_t tcount = Select(*expr.check, check_state, sel, count, &true_sel, &false_sel);
-	idx_t fcount = count - tcount;
-	if (fcount == 0) {
-		// everything is true, only execute TRUE side
-		Execute(*expr.result_if_true, res_true_state, sel, count, result);
-	} else if (tcount == 0) {
-		// everything is false, only execute FALSE side
-		Execute(*expr.result_if_false, res_false_state, sel, count, result);
-	} else {
-		// have to execute both and mix and match
-		Execute(*expr.result_if_true, res_true_state, &true_sel, tcount, res_true);
-		Execute(*expr.result_if_false, res_false_state, &false_sel, fcount, res_false);
-
-		FillSwitch(res_true, result, true_sel, tcount);
-		FillSwitch(res_false, result, false_sel, fcount);
-		if (sel) {
-			result.Slice(*sel, count);
+	auto current_true_sel = &state->true_sel;
+	auto current_false_sel = &state->false_sel;
+	auto current_sel = sel;
+	idx_t current_count = count;
+	for (idx_t i = 0; i < expr.case_checks.size(); i++) {
+		auto &case_check = expr.case_checks[i];
+		auto &intermediate_result = state->intermediate_chunk.data[i * 2 + 1];
+		auto check_state = state->child_states[i * 2].get();
+		auto then_state = state->child_states[i * 2 + 1].get();
+
+		idx_t tcount =
+		    Select(*case_check.when_expr, check_state, current_sel, current_count, current_true_sel, current_false_sel);
+		if (tcount == 0) {
+			// everything is false: do nothing
+			continue;
+		}
+		idx_t fcount = current_count - tcount;
+		if (fcount == 0 && current_count == count) {
+			// everything is true in the first CHECK statement
+			// we can skip the entire case and only execute the TRUE side
+			Execute(*case_check.then_expr, then_state, sel, count, result);
+			return;
+		} else {
+			// we need to execute and then fill in the desired tuples in the result
+			Execute(*case_check.then_expr, then_state, current_true_sel, tcount, intermediate_result);
+			FillSwitch(intermediate_result, result, *current_true_sel, tcount);
+		}
+		// continue with the false tuples
+		current_sel = current_false_sel;
+		current_count = fcount;
+		if (fcount == 0) {
+			// everything is true: we are done
+			break;
+		}
+	}
+	if (current_count > 0) {
+		auto else_state = state->child_states.back().get();
+		if (current_count == count) {
+			// everything was false, we can just evaluate the else expression directly
+			Execute(*expr.else_expr, else_state, sel, count, result);
+			return;
+		} else {
+			auto &intermediate_result = state->intermediate_chunk.data[expr.case_checks.size() * 2];
+
+			D_ASSERT(current_sel);
+			Execute(*expr.else_expr, else_state, current_sel, current_count, intermediate_result);
+			FillSwitch(intermediate_result, result, *current_sel, current_count);
 		}
 	}
+	if (sel) {
+		result.Slice(*sel, count);
+	}
 }
 
 template <class T>
-void TemplatedFillLoop(Vector &vector, Vector &result, SelectionVector &sel, sel_t count) {
+void TemplatedFillLoop(Vector &vector, Vector &result, const SelectionVector &sel, sel_t count) {
 	result.SetVectorType(VectorType::FLAT_VECTOR);
 	auto res = FlatVector::GetData<T>(result);
 	auto &result_mask = FlatVector::Validity(result);
@@ -90,7 +117,7 @@ void TemplatedFillLoop(Vector &vector, Vector &result, SelectionVector &sel, sel
 	}
 }
 
-void ValidityFillLoop(Vector &vector, Vector &result, SelectionVector &sel, sel_t count) {
+void ValidityFillLoop(Vector &vector, Vector &result, const SelectionVector &sel, sel_t count) {
 	result.SetVectorType(VectorType::FLAT_VECTOR);
 	auto &result_mask = FlatVector::Validity(result);
 	if (vector.GetVectorType() == VectorType::CONSTANT_VECTOR) {
@@ -111,7 +138,7 @@ void ValidityFillLoop(Vector &vector, Vector &result, SelectionVector &sel, sel_
 	}
 }
 
-void ExpressionExecutor::FillSwitch(Vector &vector, Vector &result, SelectionVector &sel, sel_t count) {
+void ExpressionExecutor::FillSwitch(Vector &vector, Vector &result, const SelectionVector &sel, sel_t count) {
 	switch (result.GetType().InternalType()) {
 	case PhysicalType::BOOL:
 	case PhysicalType::INT8:
diff --git a/src/include/duckdb/execution/expression_executor.hpp b/src/include/duckdb/execution/expression_executor.hpp
index 326f01c7a061..82154771a747 100644
--- a/src/include/duckdb/execution/expression_executor.hpp
+++ b/src/include/duckdb/execution/expression_executor.hpp
@@ -134,7 +134,7 @@ class ExpressionExecutor {
 	//! Verify that the output of a step in the ExpressionExecutor is correct
 	void Verify(const Expression &expr, Vector &result, idx_t count);
 
-	void FillSwitch(Vector &vector, Vector &result, SelectionVector &sel, sel_t count);
+	void FillSwitch(Vector &vector, Vector &result, const SelectionVector &sel, sel_t count);
 
 private:
 	//! The states of the expression executor; this holds any intermediates and temporary states of expressions
diff --git a/src/include/duckdb/optimizer/matcher/expression_matcher.hpp b/src/include/duckdb/optimizer/matcher/expression_matcher.hpp
index dfa2fdd8152b..91145e3de24f 100644
--- a/src/include/duckdb/optimizer/matcher/expression_matcher.hpp
+++ b/src/include/duckdb/optimizer/matcher/expression_matcher.hpp
@@ -60,12 +60,6 @@ class CaseExpressionMatcher : public ExpressionMatcher {
 public:
 	CaseExpressionMatcher() : ExpressionMatcher(ExpressionClass::BOUND_CASE) {
 	}
-	//! The check expression to match (if any)
-	unique_ptr<ExpressionMatcher> check;
-	//! The result_if_true expression to match (if any)
-	unique_ptr<ExpressionMatcher> result_if_true;
-	//! The result_if_false expression to match (if any)
-	unique_ptr<ExpressionMatcher> result_if_false;
 
 	bool Match(Expression *expr_, vector<Expression *> &bindings) override;
 };
diff --git a/src/include/duckdb/planner/expression/bound_case_expression.hpp b/src/include/duckdb/planner/expression/bound_case_expression.hpp
index 2407709f8ffe..16d1bef1b44b 100644
--- a/src/include/duckdb/planner/expression/bound_case_expression.hpp
+++ b/src/include/duckdb/planner/expression/bound_case_expression.hpp
@@ -12,15 +12,19 @@
 
 namespace duckdb {
 
+struct BoundCaseCheck {
+	unique_ptr<Expression> when_expr;
+	unique_ptr<Expression> then_expr;
+};
+
 class BoundCaseExpression : public Expression {
 public:
 	BoundCaseExpression(LogicalType type);
-	BoundCaseExpression(unique_ptr<Expression> check, unique_ptr<Expression> res_if_true,
-	                    unique_ptr<Expression> res_if_false);
+	BoundCaseExpression(unique_ptr<Expression> when_expr, unique_ptr<Expression> then_expr,
+	                    unique_ptr<Expression> else_expr);
 
-	unique_ptr<Expression> check;
-	unique_ptr<Expression> result_if_true;
-	unique_ptr<Expression> result_if_false;
+	vector<BoundCaseCheck> case_checks;
+	unique_ptr<Expression> else_expr;
 
 public:
 	string ToString() const override;
diff --git a/src/optimizer/expression_heuristics.cpp b/src/optimizer/expression_heuristics.cpp
index c29a7fb5ae9a..87aa8566c76a 100644
--- a/src/optimizer/expression_heuristics.cpp
+++ b/src/optimizer/expression_heuristics.cpp
@@ -61,7 +61,13 @@ idx_t ExpressionHeuristics::ExpressionCost(BoundBetweenExpression &expr) {
 
 idx_t ExpressionHeuristics::ExpressionCost(BoundCaseExpression &expr) {
 	// CASE WHEN check THEN result_if_true ELSE result_if_false END
-	return Cost(*expr.check) + Cost(*expr.result_if_true) + Cost(*expr.result_if_false) + 5;
+	idx_t case_cost = 0;
+	for (auto &case_check : expr.case_checks) {
+		case_cost += Cost(*case_check.then_expr);
+		case_cost += Cost(*case_check.when_expr);
+	}
+	case_cost += Cost(*expr.else_expr);
+	return case_cost;
 }
 
 idx_t ExpressionHeuristics::ExpressionCost(BoundCastExpression &expr) {
diff --git a/src/optimizer/matcher/expression_matcher.cpp b/src/optimizer/matcher/expression_matcher.cpp
index 695eb05b7d02..fc8a30bd4c62 100644
--- a/src/optimizer/matcher/expression_matcher.cpp
+++ b/src/optimizer/matcher/expression_matcher.cpp
@@ -30,16 +30,6 @@ bool CaseExpressionMatcher::Match(Expression *expr_p, vector<Expression *> &bind
 	if (!ExpressionMatcher::Match(expr_p, bindings)) {
 		return false;
 	}
-	auto expr = (BoundCaseExpression *)expr_p;
-	if (check && !check->Match(expr->check.get(), bindings)) {
-		return false;
-	}
-	if (result_if_true && !result_if_true->Match(expr->result_if_true.get(), bindings)) {
-		return false;
-	}
-	if (result_if_false && !result_if_false->Match(expr->result_if_false.get(), bindings)) {
-		return false;
-	}
 	return true;
 }
 
diff --git a/src/optimizer/rule/case_simplification.cpp b/src/optimizer/rule/case_simplification.cpp
index 8247649baf68..893459a74e2d 100644
--- a/src/optimizer/rule/case_simplification.cpp
+++ b/src/optimizer/rule/case_simplification.cpp
@@ -8,27 +8,40 @@ namespace duckdb {
 CaseSimplificationRule::CaseSimplificationRule(ExpressionRewriter &rewriter) : Rule(rewriter) {
 	// match on a CaseExpression that has a ConstantExpression as a check
 	auto op = make_unique<CaseExpressionMatcher>();
-	op->check = make_unique<FoldableConstantMatcher>();
 	root = move(op);
 }
 
 unique_ptr<Expression> CaseSimplificationRule::Apply(LogicalOperator &op, vector<Expression *> &bindings,
                                                      bool &changes_made, bool is_root) {
 	auto root = (BoundCaseExpression *)bindings[0];
-	auto constant_expr = bindings[1];
-	// the constant_expr is a scalar expression that we have to fold
-	D_ASSERT(constant_expr->IsFoldable());
+	for (idx_t i = 0; i < root->case_checks.size(); i++) {
+		auto &case_check = root->case_checks[i];
+		if (case_check.when_expr->IsFoldable()) {
+			// the WHEN check is a foldable expression
+			// use an ExpressionExecutor to execute the expression
+			auto constant_value = ExpressionExecutor::EvaluateScalar(*case_check.when_expr);
 
-	// use an ExpressionExecutor to execute the expression
-	auto constant_value = ExpressionExecutor::EvaluateScalar(*constant_expr);
-
-	// fold based on the constant condition
-	auto condition = constant_value.CastAs(LogicalType::BOOLEAN);
-	if (condition.is_null || !condition.value_.boolean) {
-		return move(root->result_if_false);
-	} else {
-		return move(root->result_if_true);
+			// fold based on the constant condition
+			auto condition = constant_value.CastAs(LogicalType::BOOLEAN);
+			if (condition.is_null || !condition.value_.boolean) {
+				// the condition is always false: remove this case check
+				root->case_checks.erase(root->case_checks.begin() + i);
+				i--;
+			} else {
+				// the condition is always true
+				// move the THEN clause to the ELSE of the case
+				root->else_expr = move(case_check.then_expr);
+				// remove this case check and any case checks after this one
+				root->case_checks.erase(root->case_checks.begin() + i, root->case_checks.end());
+				break;
+			}
+		}
+	}
+	if (root->case_checks.empty()) {
+		// no case checks left: return the ELSE expression
+		return move(root->else_expr);
 	}
+	return nullptr;
 }
 
 } // namespace duckdb
diff --git a/src/optimizer/statistics/expression/propagate_case.cpp b/src/optimizer/statistics/expression/propagate_case.cpp
index e6d726918d67..7586b9a42df9 100644
--- a/src/optimizer/statistics/expression/propagate_case.cpp
+++ b/src/optimizer/statistics/expression/propagate_case.cpp
@@ -6,15 +6,17 @@ namespace duckdb {
 unique_ptr<BaseStatistics> StatisticsPropagator::PropagateExpression(BoundCaseExpression &bound_case,
                                                                      unique_ptr<Expression> *expr_ptr) {
 	// propagate in all the children
-	auto check_stats = PropagateExpression(bound_case.check);
-	auto res_if_true_stats = PropagateExpression(bound_case.result_if_true);
-	auto res_if_false_stats = PropagateExpression(bound_case.result_if_false);
-	// for a case statement, the resulting stats are the merged stats of the two children
-	if (!res_if_true_stats || !res_if_false_stats) {
-		return nullptr;
+	auto result_stats = PropagateExpression(bound_case.else_expr);
+	for (auto &case_check : bound_case.case_checks) {
+		PropagateExpression(case_check.when_expr);
+		auto then_stats = PropagateExpression(case_check.then_expr);
+		if (!then_stats) {
+			result_stats.reset();
+		} else if (result_stats) {
+			result_stats->Merge(*then_stats);
+		}
 	}
-	res_if_true_stats->Merge(*res_if_false_stats);
-	return res_if_true_stats;
+	return result_stats;
 }
 
 } // namespace duckdb
diff --git a/src/planner/binder/expression/bind_case_expression.cpp b/src/planner/binder/expression/bind_case_expression.cpp
index ff895e73c215..dd9169dd9bc1 100644
--- a/src/planner/binder/expression/bind_case_expression.cpp
+++ b/src/planner/binder/expression/bind_case_expression.cpp
@@ -25,32 +25,19 @@ BindResult ExpressionBinder::BindExpression(CaseExpression &expr, idx_t depth) {
 	}
 	ExpressionBinder::ResolveParameterType(return_type);
 
-	// now rewrite the case into a chain of cases
-
-	// CASE WHEN e1 THEN r1 WHEN w2 THEN r2 ELSE r3 is rewritten to
-	// CASE WHEN e1 THEN r1 ELSE CASE WHEN e2 THEN r2 ELSE r3
-
-	auto root = make_unique<BoundCaseExpression>(return_type);
-	auto current_root = root.get();
+	// bind all the individual components of the CASE statement
+	auto result = make_unique<BoundCaseExpression>(return_type);
 	for (idx_t i = 0; i < expr.case_checks.size(); i++) {
 		auto &check = expr.case_checks[i];
 		auto &when_expr = (BoundExpression &)*check.when_expr;
 		auto &then_expr = (BoundExpression &)*check.then_expr;
-		current_root->check = BoundCastExpression::AddCastToType(move(when_expr.expr), LogicalType::BOOLEAN);
-		current_root->result_if_true = BoundCastExpression::AddCastToType(move(then_expr.expr), return_type);
-		if (i + 1 == expr.case_checks.size()) {
-			// finished all cases
-			// res_false is the default result
-			auto &else_expr = (BoundExpression &)*expr.else_expr;
-			current_root->result_if_false = BoundCastExpression::AddCastToType(move(else_expr.expr), return_type);
-		} else {
-			// more cases remain, create a case statement within the FALSE branch
-			auto next_case = make_unique<BoundCaseExpression>(return_type);
-			auto case_ptr = next_case.get();
-			current_root->result_if_false = move(next_case);
-			current_root = case_ptr;
-		}
+		BoundCaseCheck result_check;
+		result_check.when_expr = BoundCastExpression::AddCastToType(move(when_expr.expr), LogicalType::BOOLEAN);
+		result_check.then_expr = BoundCastExpression::AddCastToType(move(then_expr.expr), return_type);
+		result->case_checks.push_back(move(result_check));
 	}
-	return BindResult(move(root));
+	auto &else_expr = (BoundExpression &)*expr.else_expr;
+	result->else_expr = BoundCastExpression::AddCastToType(move(else_expr.expr), return_type);
+	return BindResult(move(result));
 }
 } // namespace duckdb
diff --git a/src/planner/expression/bound_case_expression.cpp b/src/planner/expression/bound_case_expression.cpp
index 54d8509d8977..e5908857be06 100644
--- a/src/planner/expression/bound_case_expression.cpp
+++ b/src/planner/expression/bound_case_expression.cpp
@@ -6,36 +6,58 @@ BoundCaseExpression::BoundCaseExpression(LogicalType type)
     : Expression(ExpressionType::CASE_EXPR, ExpressionClass::BOUND_CASE, move(type)) {
 }
 
-BoundCaseExpression::BoundCaseExpression(unique_ptr<Expression> check, unique_ptr<Expression> res_if_true,
-                                         unique_ptr<Expression> res_if_false)
-    : Expression(ExpressionType::CASE_EXPR, ExpressionClass::BOUND_CASE, res_if_true->return_type), check(move(check)),
-      result_if_true(move(res_if_true)), result_if_false(move(res_if_false)) {
+BoundCaseExpression::BoundCaseExpression(unique_ptr<Expression> when_expr, unique_ptr<Expression> then_expr,
+                                         unique_ptr<Expression> else_expr_p)
+    : Expression(ExpressionType::CASE_EXPR, ExpressionClass::BOUND_CASE, then_expr->return_type),
+      else_expr(move(else_expr_p)) {
+	BoundCaseCheck check;
+	check.when_expr = move(when_expr);
+	check.then_expr = move(then_expr);
+	case_checks.push_back(move(check));
 }
 
 string BoundCaseExpression::ToString() const {
-	return "CASE WHEN (" + check->GetName() + ") THEN (" + result_if_true->GetName() + ") ELSE (" +
-	       result_if_false->GetName() + ")";
+	string result = "CASE";
+	for (auto &check : case_checks) {
+		result += " WHEN (" + check.when_expr->ToString() + ")";
+		result += " THEN (" + check.then_expr->ToString() + ")";
+	}
+	result += " ELSE (" + else_expr->ToString() + ")";
+	return result;
 }
 
 bool BoundCaseExpression::Equals(const BaseExpression *other_p) const {
 	if (!Expression::Equals(other_p)) {
 		return false;
 	}
-	auto other = (BoundCaseExpression *)other_p;
-	if (!Expression::Equals(check.get(), other->check.get())) {
+	auto &other = (BoundCaseExpression &)*other_p;
+	if (case_checks.size() != other.case_checks.size()) {
 		return false;
 	}
-	if (!Expression::Equals(result_if_true.get(), other->result_if_true.get())) {
-		return false;
+	for (idx_t i = 0; i < case_checks.size(); i++) {
+		if (!Expression::Equals(case_checks[i].when_expr.get(), other.case_checks[i].when_expr.get())) {
+			return false;
+		}
+		if (!Expression::Equals(case_checks[i].then_expr.get(), other.case_checks[i].then_expr.get())) {
+			return false;
+		}
 	}
-	if (!Expression::Equals(result_if_false.get(), other->result_if_false.get())) {
+	if (!Expression::Equals(else_expr.get(), other.else_expr.get())) {
 		return false;
 	}
 	return true;
 }
 
 unique_ptr<Expression> BoundCaseExpression::Copy() {
-	auto new_case = make_unique<BoundCaseExpression>(check->Copy(), result_if_true->Copy(), result_if_false->Copy());
+	auto new_case = make_unique<BoundCaseExpression>(return_type);
+	for (auto &check : case_checks) {
+		BoundCaseCheck new_check;
+		new_check.when_expr = check.when_expr->Copy();
+		new_check.then_expr = check.then_expr->Copy();
+		new_case->case_checks.push_back(move(new_check));
+	}
+	new_case->else_expr = else_expr->Copy();
+
 	new_case->CopyProperties(*this);
 	return move(new_case);
 }
diff --git a/src/planner/expression_iterator.cpp b/src/planner/expression_iterator.cpp
index e0e35470528d..5077105ee916 100644
--- a/src/planner/expression_iterator.cpp
+++ b/src/planner/expression_iterator.cpp
@@ -39,9 +39,11 @@ void ExpressionIterator::EnumerateChildren(Expression &expr,
 	}
 	case ExpressionClass::BOUND_CASE: {
 		auto &case_expr = (BoundCaseExpression &)expr;
-		callback(case_expr.check);
-		callback(case_expr.result_if_true);
-		callback(case_expr.result_if_false);
+		for (auto &case_check : case_expr.case_checks) {
+			callback(case_check.when_expr);
+			callback(case_check.then_expr);
+		}
+		callback(case_expr.else_expr);
 		break;
 	}
 	case ExpressionClass::BOUND_CAST: {
