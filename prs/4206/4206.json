{
  "repo": "duckdb/duckdb",
  "pull_number": 4206,
  "instance_id": "duckdb__duckdb-4206",
  "issue_numbers": [
    "4202",
    "4202"
  ],
  "base_commit": "992ed9983156b171e7fd197e9a28a8578eb91d1d",
  "patch": "diff --git a/src/optimizer/rule/comparison_simplification.cpp b/src/optimizer/rule/comparison_simplification.cpp\nindex e4c16f1e6a98..f40e45d075ba 100644\n--- a/src/optimizer/rule/comparison_simplification.cpp\n+++ b/src/optimizer/rule/comparison_simplification.cpp\n@@ -37,7 +37,8 @@ unique_ptr<Expression> ComparisonSimplificationRule::Apply(LogicalOperator &op,\n \t\t//! Here we check if we can apply the expression on the constant side\n \t\tauto cast_expression = (BoundCastExpression *)column_ref_expr;\n \t\tauto target_type = cast_expression->source_type();\n-\t\tif (!BoundCastExpression::CastIsInvertible(target_type, cast_expression->return_type)) {\n+\t\tif (!BoundCastExpression::CastIsInvertible(target_type, cast_expression->return_type) ||\n+\t\t    !BoundCastExpression::CastIsInvertible(cast_expression->return_type, target_type)) {\n \t\t\treturn nullptr;\n \t\t}\n \t\tauto new_constant = constant_value.TryCastAs(target_type);\n",
  "test_patch": "diff --git a/test/sql/function/date/date_trunc_4202.test b/test/sql/function/date/date_trunc_4202.test\nnew file mode 100644\nindex 000000000000..d8758afabcca\n--- /dev/null\n+++ b/test/sql/function/date/date_trunc_4202.test\n@@ -0,0 +1,28 @@\n+# name: test/sql/function/date/date_trunc_4202.test\n+# description: Issue #4202: Suspect behavior when comparing dates and timestamps\n+# group: [date]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create table t1 (date timestamp);\n+\n+statement ok\n+insert into t1 values ('2016-12-16T00:00:00.000Z');\n+\n+statement ok\n+insert into t1 values ('2020-02-17T23:59:59.998Z');\n+\n+statement ok\n+insert into t1 values ('2020-02-17T23:59:59.999Z');\n+\n+statement ok\n+insert into t1 values ('2020-02-18T00:00:00.000Z');\n+\n+query I\n+select * from t1 WHERE (date_trunc('DAY', T1.date) < ('2020-02-17T23:59:59.999Z'::timestamp)) ORDER BY 1;\n+----\n+2016-12-16 00:00:00\n+2020-02-17 23:59:59.998\n+2020-02-17 23:59:59.999\n\\ No newline at end of file\n",
  "problem_statement": "Suspect behavior when comparing dates and timestamps\n### What happens?\n\nWhen comparing dates and timestamps in a `where` clause the returned results don't match expectations. I'm not entirely sure this is a bug or if certain parts of this are behaving as expected.\n\n### To Reproduce\n\n```sql\r\ncreate table t1 (date timestamp);\r\ninsert into t1 values ('2016-12-16T00:00:00.000Z');\r\ninsert into t1 values ('2020-02-17T23:59:59.998Z');\r\ninsert into t1 values ('2020-02-17T23:59:59.999Z');\r\ninsert into t1 values ('2020-02-18T00:00:00.000Z');\r\n```\r\n\r\nCompare a date and a timestamp\r\n```sql\r\nselect * from t1 WHERE (date_trunc('DAY', T1.date) < ('2020-02-17T23:59:59.999Z'::timestamp));\r\n```\r\nOutput\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        date         \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2016-12-16 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nFor this part, I'm not sure this is a bug. However, my intuition (for whatever that's worth) says that the `.998` timestamp should also be included in the results here.\r\n\r\nCompare a date (casted to a timestamp) and a timestamp.\r\n```sql\r\nselect * from t1 WHERE (date_trunc('DAY', T1.date)::timestamp) < ('2020-02-17T23:59:59.999Z'::timestamp);\r\n```\r\nOutput\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        date         \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2016-12-16 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThis does appear to be a bug.\r\n\r\nHowever, if I'm totally off-base with these, please close this bug report.\n\n### OS:\n\nMacOS, Linux\n\n### DuckDB Version:\n\n0.4.0\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMichael Albers\n\n### Affiliation:\n\nMode Analytics\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\nSuspect behavior when comparing dates and timestamps\n### What happens?\n\nWhen comparing dates and timestamps in a `where` clause the returned results don't match expectations. I'm not entirely sure this is a bug or if certain parts of this are behaving as expected.\n\n### To Reproduce\n\n```sql\r\ncreate table t1 (date timestamp);\r\ninsert into t1 values ('2016-12-16T00:00:00.000Z');\r\ninsert into t1 values ('2020-02-17T23:59:59.998Z');\r\ninsert into t1 values ('2020-02-17T23:59:59.999Z');\r\ninsert into t1 values ('2020-02-18T00:00:00.000Z');\r\n```\r\n\r\nCompare a date and a timestamp\r\n```sql\r\nselect * from t1 WHERE (date_trunc('DAY', T1.date) < ('2020-02-17T23:59:59.999Z'::timestamp));\r\n```\r\nOutput\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        date         \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2016-12-16 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nFor this part, I'm not sure this is a bug. However, my intuition (for whatever that's worth) says that the `.998` timestamp should also be included in the results here.\r\n\r\nCompare a date (casted to a timestamp) and a timestamp.\r\n```sql\r\nselect * from t1 WHERE (date_trunc('DAY', T1.date)::timestamp) < ('2020-02-17T23:59:59.999Z'::timestamp);\r\n```\r\nOutput\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502        date         \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 2016-12-16 00:00:00 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nThis does appear to be a bug.\r\n\r\nHowever, if I'm totally off-base with these, please close this bug report.\n\n### OS:\n\nMacOS, Linux\n\n### DuckDB Version:\n\n0.4.0\n\n### DuckDB Client:\n\nCLI\n\n### Full Name:\n\nMichael Albers\n\n### Affiliation:\n\nMode Analytics\n\n### Have you tried this on the latest `master` branch?\n\n- [X] I agree\n\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\n\n- [X] I agree\n",
  "hints_text": "\n",
  "created_at": "2022-07-26T07:56:10Z"
}