You will be provided with a partial code base and an issue statement explaining a problem to resolve.
In your output, give nothing but the code (no markdown) so that your output can be copy pasted and run immediately with no changes

<issue>
write CSV with tab delimiter outputs 'value1\tvalue2'
#### What happens?

```
CREATE TABLE people(id INTEGER, name VARCHAR);
INSERT INTO people VALUES (1, 'Mark'), (2, 'Hannes');
COPY (SELECT * FROM people) TO 'test.csv' WITH (HEADER 1, DELIMITER '\t');
```

#### To Reproduce
see above
#### Environment (please complete the following information):
 - OS: Singularity container 
```
 sudo singularity build --sandbox duckdb_0.3.1_python/ docker://python:3.9
```
 - DuckDB Version: 0.3.1 (also 0.2.9)
 - DuckDB Client: CLI

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?** NO


- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Detected on  a real data, confirmed with using the code provided above. 



write CSV with tab delimiter outputs 'value1\tvalue2'
#### What happens?

```
CREATE TABLE people(id INTEGER, name VARCHAR);
INSERT INTO people VALUES (1, 'Mark'), (2, 'Hannes');
COPY (SELECT * FROM people) TO 'test.csv' WITH (HEADER 1, DELIMITER '\t');
```

#### To Reproduce
see above
#### Environment (please complete the following information):
 - OS: Singularity container 
```
 sudo singularity build --sandbox duckdb_0.3.1_python/ docker://python:3.9
```
 - DuckDB Version: 0.3.1 (also 0.2.9)
 - DuckDB Client: CLI

#### Before Submitting

- [ ] **Have you tried this on the latest `master` branch?** NO


- [x] **Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?**

Detected on  a real data, confirmed with using the code provided above. 




</issue>
<code>
[start of README.md]
1: <div align="center">
2:   <img src="https://duckdb.org/images/DuckDB_Logo_dl.png" height="50">
3: </div>
4: <p>&nbsp;</p>
5: 
6: <p align="center">
7:   <a href="https://github.com/duckdb/duckdb/actions">
8:     <img src="https://github.com/cwida/duckdb/workflows/.github/workflows/main.yml/badge.svg?branch=master" alt=".github/workflows/main.yml">
9:   </a>
10:   <a href="https://www.codefactor.io/repository/github/cwida/duckdb">
11:     <img src="https://www.codefactor.io/repository/github/cwida/duckdb/badge" alt="CodeFactor"/>
12:   </a>
13:   <a href="https://app.codecov.io/gh/duckdb/duckdb">
14:     <img src="https://codecov.io/gh/duckdb/duckdb/branch/master/graph/badge.svg?token=FaxjcfFghN" alt="codecov"/>
15:   </a>
16: </p>
17: 
18: ## DuckDB
19: DuckDB is a high-performance analytical database system. It is designed to be fast, reliable and easy to use. DuckDB provides a rich SQL dialect, with support far beyond basic SQL. DuckDB supports arbitrary and nested correlated subqueries, window functions, collations, complex types (arrays, structs), and more. For more information on the goals of DuckDB, please refer to [the Why DuckDB page on our website](https://duckdb.org/docs/why_duckdb.html).
20: 
21: ## Installation
22: If you want to install and use DuckDB, please see [our website](https://www.duckdb.org) for installation and usage instructions.
23: 
24: ## Data Import
25: For CSV files and Parquet files, data import is as simple as referencing the file in the FROM clause:
26: 
27: ```sql
28: SELECT * FROM 'myfile.csv';
29: SELECT * FROM 'myfile.parquet';
30: ```
31: 
32: Refer to our [Data Import](https://duckdb.org/docs/data/overview) section for more information.
33: 
34: ## SQL Reference
35: The [website](https://duckdb.org/docs/sql/introduction) contains a reference of functions and SQL constructs available in DuckDB.
36: 
37: ## Development
38: For development, DuckDB requires [CMake](https://cmake.org), Python3 and a `C++11` compliant compiler. Run `make` in the root directory to compile the sources. For development, use `make debug` to build a non-optimized debug version. You should run `make unit` and `make allunit` to verify that your version works properly after making changes. To test performance, you can run several standard benchmarks from the root directory by executing `./build/release/benchmark/benchmark_runner`.
39: 
40: Please also refer to our [Contribution Guide](CONTRIBUTING.md).
41: 
42: 
[end of README.md]
[start of src/execution/operator/persistent/buffered_csv_reader.cpp]
1: #include "duckdb/execution/operator/persistent/buffered_csv_reader.hpp"
2: 
3: #include "duckdb/catalog/catalog_entry/table_catalog_entry.hpp"
4: #include "duckdb/common/file_system.hpp"
5: #include "duckdb/common/string_util.hpp"
6: #include "duckdb/common/to_string.hpp"
7: #include "duckdb/common/types/cast_helpers.hpp"
8: #include "duckdb/common/vector_operations/unary_executor.hpp"
9: #include "duckdb/common/vector_operations/vector_operations.hpp"
10: #include "duckdb/function/scalar/strftime.hpp"
11: #include "duckdb/main/database.hpp"
12: #include "duckdb/parser/column_definition.hpp"
13: #include "duckdb/storage/data_table.hpp"
14: #include "utf8proc_wrapper.hpp"
15: #include "utf8proc.hpp"
16: #include "duckdb/parser/keyword_helper.hpp"
17: 
18: #include <algorithm>
19: #include <cctype>
20: #include <cstring>
21: #include <fstream>
22: 
23: namespace duckdb {
24: 
25: static string GetLineNumberStr(idx_t linenr, bool linenr_estimated) {
26: 	string estimated = (linenr_estimated ? string(" (estimated)") : string(""));
27: 	return to_string(linenr + 1) + estimated;
28: }
29: 
30: static bool StartsWithNumericDate(string &separator, const string_t &value) {
31: 	auto begin = value.GetDataUnsafe();
32: 	auto end = begin + value.GetSize();
33: 
34: 	//	StrpTimeFormat::Parse will skip whitespace, so we can too
35: 	auto field1 = std::find_if_not(begin, end, StringUtil::CharacterIsSpace);
36: 	if (field1 == end) {
37: 		return false;
38: 	}
39: 
40: 	//	first numeric field must start immediately
41: 	if (!StringUtil::CharacterIsDigit(*field1)) {
42: 		return false;
43: 	}
44: 	auto literal1 = std::find_if_not(field1, end, StringUtil::CharacterIsDigit);
45: 	if (literal1 == end) {
46: 		return false;
47: 	}
48: 
49: 	//	second numeric field must exist
50: 	auto field2 = std::find_if(literal1, end, StringUtil::CharacterIsDigit);
51: 	if (field2 == end) {
52: 		return false;
53: 	}
54: 	auto literal2 = std::find_if_not(field2, end, StringUtil::CharacterIsDigit);
55: 	if (literal2 == end) {
56: 		return false;
57: 	}
58: 
59: 	//	third numeric field must exist
60: 	auto field3 = std::find_if(literal2, end, StringUtil::CharacterIsDigit);
61: 	if (field3 == end) {
62: 		return false;
63: 	}
64: 
65: 	//	second literal must match first
66: 	if (((field3 - literal2) != (field2 - literal1)) || strncmp(literal1, literal2, (field2 - literal1)) != 0) {
67: 		return false;
68: 	}
69: 
70: 	//	copy the literal as the separator, escaping percent signs
71: 	separator.clear();
72: 	while (literal1 < field2) {
73: 		const auto literal_char = *literal1++;
74: 		if (literal_char == '%') {
75: 			separator.push_back(literal_char);
76: 		}
77: 		separator.push_back(literal_char);
78: 	}
79: 
80: 	return true;
81: }
82: 
83: string GenerateDateFormat(const string &separator, const char *format_template) {
84: 	string format_specifier = format_template;
85: 
86: 	//	replace all dashes with the separator
87: 	for (auto pos = std::find(format_specifier.begin(), format_specifier.end(), '-'); pos != format_specifier.end();
88: 	     pos = std::find(pos + separator.size(), format_specifier.end(), '-')) {
89: 		format_specifier.replace(pos, pos + 1, separator);
90: 	}
91: 
92: 	return format_specifier;
93: }
94: 
95: TextSearchShiftArray::TextSearchShiftArray() {
96: }
97: 
98: TextSearchShiftArray::TextSearchShiftArray(string search_term) : length(search_term.size()) {
99: 	if (length > 255) {
100: 		throw Exception("Size of delimiter/quote/escape in CSV reader is limited to 255 bytes");
101: 	}
102: 	// initialize the shifts array
103: 	shifts = unique_ptr<uint8_t[]>(new uint8_t[length * 255]);
104: 	memset(shifts.get(), 0, length * 255 * sizeof(uint8_t));
105: 	// iterate over each of the characters in the array
106: 	for (idx_t main_idx = 0; main_idx < length; main_idx++) {
107: 		uint8_t current_char = (uint8_t)search_term[main_idx];
108: 		// now move over all the remaining positions
109: 		for (idx_t i = main_idx; i < length; i++) {
110: 			bool is_match = true;
111: 			// check if the prefix matches at this position
112: 			// if it does, we move to this position after encountering the current character
113: 			for (idx_t j = 0; j < main_idx; j++) {
114: 				if (search_term[i - main_idx + j] != search_term[j]) {
115: 					is_match = false;
116: 				}
117: 			}
118: 			if (!is_match) {
119: 				continue;
120: 			}
121: 			shifts[i * 255 + current_char] = main_idx + 1;
122: 		}
123: 	}
124: }
125: 
126: BufferedCSVReader::BufferedCSVReader(FileSystem &fs_p, FileOpener *opener_p, BufferedCSVReaderOptions options_p,
127:                                      const vector<LogicalType> &requested_types)
128:     : fs(fs_p), opener(opener_p), options(move(options_p)), buffer_size(0), position(0), start(0) {
129: 	file_handle = OpenCSV(options);
130: 	Initialize(requested_types);
131: }
132: 
133: BufferedCSVReader::BufferedCSVReader(ClientContext &context, BufferedCSVReaderOptions options_p,
134:                                      const vector<LogicalType> &requested_types)
135:     : BufferedCSVReader(FileSystem::GetFileSystem(context), FileSystem::GetFileOpener(context), move(options_p),
136:                         requested_types) {
137: }
138: 
139: void BufferedCSVReader::Initialize(const vector<LogicalType> &requested_types) {
140: 	PrepareComplexParser();
141: 	if (options.auto_detect) {
142: 		sql_types = SniffCSV(requested_types);
143: 		if (sql_types.empty()) {
144: 			throw Exception("Failed to detect column types from CSV: is the file a valid CSV file?");
145: 		}
146: 		if (cached_chunks.empty()) {
147: 			JumpToBeginning(options.skip_rows, options.header);
148: 		}
149: 	} else {
150: 		sql_types = requested_types;
151: 		ResetBuffer();
152: 		SkipRowsAndReadHeader(options.skip_rows, options.header);
153: 	}
154: 	InitParseChunk(sql_types.size());
155: }
156: 
157: void BufferedCSVReader::PrepareComplexParser() {
158: 	delimiter_search = TextSearchShiftArray(options.delimiter);
159: 	escape_search = TextSearchShiftArray(options.escape);
160: 	quote_search = TextSearchShiftArray(options.quote);
161: }
162: 
163: unique_ptr<FileHandle> BufferedCSVReader::OpenCSV(const BufferedCSVReaderOptions &options) {
164: 	this->compression = FileCompressionType::UNCOMPRESSED;
165: 	if (options.compression == "infer" || options.compression == "auto") {
166: 		this->compression = FileCompressionType::AUTO_DETECT;
167: 	} else if (options.compression == "gzip") {
168: 		this->compression = FileCompressionType::GZIP;
169: 	}
170: 
171: 	auto result = fs.OpenFile(options.file_path.c_str(), FileFlags::FILE_FLAGS_READ, FileLockType::NO_LOCK,
172: 	                          this->compression, this->opener);
173: 	plain_file_source = result->OnDiskFile() && result->CanSeek();
174: 	file_size = result->GetFileSize();
175: 	return result;
176: }
177: 
178: // Helper function to generate column names
179: static string GenerateColumnName(const idx_t total_cols, const idx_t col_number, const string &prefix = "column") {
180: 	int max_digits = NumericHelper::UnsignedLength(total_cols - 1);
181: 	int digits = NumericHelper::UnsignedLength(col_number);
182: 	string leading_zeros = string(max_digits - digits, '0');
183: 	string value = to_string(col_number);
184: 	return string(prefix + leading_zeros + value);
185: }
186: 
187: // Helper function for UTF-8 aware space trimming
188: static string TrimWhitespace(const string &col_name) {
189: 	utf8proc_int32_t codepoint;
190: 	auto str = reinterpret_cast<const utf8proc_uint8_t *>(col_name.c_str());
191: 	idx_t size = col_name.size();
192: 	// Find the first character that is not left trimmed
193: 	idx_t begin = 0;
194: 	while (begin < size) {
195: 		auto bytes = utf8proc_iterate(str + begin, size - begin, &codepoint);
196: 		D_ASSERT(bytes > 0);
197: 		if (utf8proc_category(codepoint) != UTF8PROC_CATEGORY_ZS) {
198: 			break;
199: 		}
200: 		begin += bytes;
201: 	}
202: 
203: 	// Find the last character that is not right trimmed
204: 	idx_t end;
205: 	end = begin;
206: 	for (auto next = begin; next < col_name.size();) {
207: 		auto bytes = utf8proc_iterate(str + next, size - next, &codepoint);
208: 		D_ASSERT(bytes > 0);
209: 		next += bytes;
210: 		if (utf8proc_category(codepoint) != UTF8PROC_CATEGORY_ZS) {
211: 			end = next;
212: 		}
213: 	}
214: 
215: 	// return the trimmed string
216: 	return col_name.substr(begin, end - begin);
217: }
218: 
219: static string NormalizeColumnName(const string &col_name) {
220: 	// normalize UTF8 characters to NFKD
221: 	auto nfkd = utf8proc_NFKD((const utf8proc_uint8_t *)col_name.c_str(), col_name.size());
222: 	const string col_name_nfkd = string((const char *)nfkd, strlen((const char *)nfkd));
223: 	free(nfkd);
224: 
225: 	// only keep ASCII characters 0-9 a-z A-Z and replace spaces with regular whitespace
226: 	string col_name_ascii = "";
227: 	for (idx_t i = 0; i < col_name_nfkd.size(); i++) {
228: 		if (col_name_nfkd[i] == '_' || (col_name_nfkd[i] >= '0' && col_name_nfkd[i] <= '9') ||
229: 		    (col_name_nfkd[i] >= 'A' && col_name_nfkd[i] <= 'Z') ||
230: 		    (col_name_nfkd[i] >= 'a' && col_name_nfkd[i] <= 'z')) {
231: 			col_name_ascii += col_name_nfkd[i];
232: 		} else if (StringUtil::CharacterIsSpace(col_name_nfkd[i])) {
233: 			col_name_ascii += " ";
234: 		}
235: 	}
236: 
237: 	// trim whitespace and replace remaining whitespace by _
238: 	string col_name_trimmed = TrimWhitespace(col_name_ascii);
239: 	string col_name_cleaned = "";
240: 	bool in_whitespace = false;
241: 	for (idx_t i = 0; i < col_name_trimmed.size(); i++) {
242: 		if (col_name_trimmed[i] == ' ') {
243: 			if (!in_whitespace) {
244: 				col_name_cleaned += "_";
245: 				in_whitespace = true;
246: 			}
247: 		} else {
248: 			col_name_cleaned += col_name_trimmed[i];
249: 			in_whitespace = false;
250: 		}
251: 	}
252: 
253: 	// don't leave string empty; if not empty, make lowercase
254: 	if (col_name_cleaned.empty()) {
255: 		col_name_cleaned = "_";
256: 	} else {
257: 		col_name_cleaned = StringUtil::Lower(col_name_cleaned);
258: 	}
259: 
260: 	// prepend _ if name starts with a digit or is a reserved keyword
261: 	if (KeywordHelper::IsKeyword(col_name_cleaned) || (col_name_cleaned[0] >= '0' && col_name_cleaned[0] <= '9')) {
262: 		col_name_cleaned = "_" + col_name_cleaned;
263: 	}
264: 	return col_name_cleaned;
265: }
266: 
267: void BufferedCSVReader::ResetBuffer() {
268: 	buffer.reset();
269: 	buffer_size = 0;
270: 	position = 0;
271: 	start = 0;
272: 	cached_buffers.clear();
273: }
274: 
275: void BufferedCSVReader::ResetStream() {
276: 	if (!file_handle->CanSeek()) {
277: 		// seeking to the beginning appears to not be supported in all compiler/os-scenarios,
278: 		// so we have to create a new stream source here for now
279: 		file_handle->Reset();
280: 	} else {
281: 		file_handle->Seek(0);
282: 	}
283: 	linenr = 0;
284: 	linenr_estimated = false;
285: 	bytes_per_line_avg = 0;
286: 	sample_chunk_idx = 0;
287: 	jumping_samples = false;
288: }
289: 
290: void BufferedCSVReader::InitParseChunk(idx_t num_cols) {
291: 	// adapt not null info
292: 	if (options.force_not_null.size() != num_cols) {
293: 		options.force_not_null.resize(num_cols, false);
294: 	}
295: 	if (num_cols == parse_chunk.ColumnCount()) {
296: 		parse_chunk.Reset();
297: 	} else {
298: 		parse_chunk.Destroy();
299: 
300: 		// initialize the parse_chunk with a set of VARCHAR types
301: 		vector<LogicalType> varchar_types(num_cols, LogicalType::VARCHAR);
302: 		parse_chunk.Initialize(varchar_types);
303: 	}
304: }
305: 
306: void BufferedCSVReader::JumpToBeginning(idx_t skip_rows = 0, bool skip_header = false) {
307: 	ResetBuffer();
308: 	ResetStream();
309: 	SkipRowsAndReadHeader(skip_rows, skip_header);
310: 	sample_chunk_idx = 0;
311: 	bytes_in_chunk = 0;
312: 	end_of_file_reached = false;
313: 	bom_checked = false;
314: }
315: 
316: void BufferedCSVReader::SkipRowsAndReadHeader(idx_t skip_rows, bool skip_header) {
317: 	for (idx_t i = 0; i < skip_rows; i++) {
318: 		// ignore skip rows
319: 		string read_line = file_handle->ReadLine();
320: 		linenr++;
321: 	}
322: 
323: 	if (skip_header) {
324: 		// ignore the first line as a header line
325: 		InitParseChunk(sql_types.size());
326: 		ParseCSV(ParserMode::PARSING_HEADER);
327: 	}
328: }
329: 
330: bool BufferedCSVReader::JumpToNextSample() {
331: 	// get bytes contained in the previously read chunk
332: 	idx_t remaining_bytes_in_buffer = buffer_size - start;
333: 	bytes_in_chunk -= remaining_bytes_in_buffer;
334: 	if (remaining_bytes_in_buffer == 0) {
335: 		return false;
336: 	}
337: 
338: 	// assess if it makes sense to jump, based on size of the first chunk relative to size of the entire file
339: 	if (sample_chunk_idx == 0) {
340: 		idx_t bytes_first_chunk = bytes_in_chunk;
341: 		double chunks_fit = (file_size / (double)bytes_first_chunk);
342: 		jumping_samples = chunks_fit >= options.sample_chunks;
343: 
344: 		// jump back to the beginning
345: 		JumpToBeginning(options.skip_rows, options.header);
346: 		sample_chunk_idx++;
347: 		return true;
348: 	}
349: 
350: 	if (end_of_file_reached || sample_chunk_idx >= options.sample_chunks) {
351: 		return false;
352: 	}
353: 
354: 	// if we deal with any other sources than plaintext files, jumping_samples can be tricky. In that case
355: 	// we just read x continuous chunks from the stream TODO: make jumps possible for zipfiles.
356: 	if (!plain_file_source || !jumping_samples) {
357: 		sample_chunk_idx++;
358: 		return true;
359: 	}
360: 
361: 	// update average bytes per line
362: 	double bytes_per_line = bytes_in_chunk / (double)options.sample_chunk_size;
363: 	bytes_per_line_avg = ((bytes_per_line_avg * (sample_chunk_idx)) + bytes_per_line) / (sample_chunk_idx + 1);
364: 
365: 	// if none of the previous conditions were met, we can jump
366: 	idx_t partition_size = (idx_t)round(file_size / (double)options.sample_chunks);
367: 
368: 	// calculate offset to end of the current partition
369: 	int64_t offset = partition_size - bytes_in_chunk - remaining_bytes_in_buffer;
370: 	auto current_pos = file_handle->SeekPosition();
371: 
372: 	if (current_pos + offset < file_size) {
373: 		// set position in stream and clear failure bits
374: 		file_handle->Seek(current_pos + offset);
375: 
376: 		// estimate linenr
377: 		linenr += (idx_t)round((offset + remaining_bytes_in_buffer) / bytes_per_line_avg);
378: 		linenr_estimated = true;
379: 	} else {
380: 		// seek backwards from the end in last chunk and hope to catch the end of the file
381: 		// TODO: actually it would be good to make sure that the end of file is being reached, because
382: 		// messy end-lines are quite common. For this case, however, we first need a skip_end detection anyways.
383: 		file_handle->Seek(file_size - bytes_in_chunk);
384: 
385: 		// estimate linenr
386: 		linenr = (idx_t)round((file_size - bytes_in_chunk) / bytes_per_line_avg);
387: 		linenr_estimated = true;
388: 	}
389: 
390: 	// reset buffers and parse chunk
391: 	ResetBuffer();
392: 
393: 	// seek beginning of next line
394: 	// FIXME: if this jump ends up in a quoted linebreak, we will have a problem
395: 	string read_line = file_handle->ReadLine();
396: 	linenr++;
397: 
398: 	sample_chunk_idx++;
399: 
400: 	return true;
401: }
402: 
403: void BufferedCSVReader::SetDateFormat(const string &format_specifier, const LogicalTypeId &sql_type) {
404: 	options.has_format[sql_type] = true;
405: 	auto &date_format = options.date_format[sql_type];
406: 	date_format.format_specifier = format_specifier;
407: 	StrTimeFormat::ParseFormatSpecifier(date_format.format_specifier, date_format);
408: }
409: 
410: bool BufferedCSVReader::TryCastValue(const Value &value, const LogicalType &sql_type) {
411: 	if (options.has_format[LogicalTypeId::DATE] && sql_type.id() == LogicalTypeId::DATE) {
412: 		date_t result;
413: 		string error_message;
414: 		return options.date_format[LogicalTypeId::DATE].TryParseDate(string_t(value.str_value), result, error_message);
415: 	} else if (options.has_format[LogicalTypeId::TIMESTAMP] && sql_type.id() == LogicalTypeId::TIMESTAMP) {
416: 		timestamp_t result;
417: 		string error_message;
418: 		return options.date_format[LogicalTypeId::TIMESTAMP].TryParseTimestamp(string_t(value.str_value), result,
419: 		                                                                       error_message);
420: 	} else {
421: 		Value new_value;
422: 		string error_message;
423: 		return value.TryCastAs(sql_type, new_value, &error_message, true);
424: 	}
425: }
426: 
427: struct TryCastDateOperator {
428: 	static bool Operation(BufferedCSVReaderOptions &options, string_t input, date_t &result, string &error_message) {
429: 		return options.date_format[LogicalTypeId::DATE].TryParseDate(input, result, error_message);
430: 	}
431: };
432: 
433: struct TryCastTimestampOperator {
434: 	static bool Operation(BufferedCSVReaderOptions &options, string_t input, timestamp_t &result,
435: 	                      string &error_message) {
436: 		return options.date_format[LogicalTypeId::TIMESTAMP].TryParseTimestamp(input, result, error_message);
437: 	}
438: };
439: 
440: template <class OP, class T>
441: static bool TemplatedTryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector,
442:                                        idx_t count, string &error_message) {
443: 	D_ASSERT(input_vector.GetType().id() == LogicalTypeId::VARCHAR);
444: 	bool all_converted = true;
445: 	UnaryExecutor::Execute<string_t, T>(input_vector, result_vector, count, [&](string_t input) {
446: 		T result;
447: 		if (!OP::Operation(options, input, result, error_message)) {
448: 			all_converted = false;
449: 		}
450: 		return result;
451: 	});
452: 	return all_converted;
453: }
454: 
455: bool TryCastDateVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,
456:                        string &error_message) {
457: 	return TemplatedTryCastDateVector<TryCastDateOperator, date_t>(options, input_vector, result_vector, count,
458: 	                                                               error_message);
459: }
460: 
461: bool TryCastTimestampVector(BufferedCSVReaderOptions &options, Vector &input_vector, Vector &result_vector, idx_t count,
462:                             string &error_message) {
463: 	return TemplatedTryCastDateVector<TryCastTimestampOperator, timestamp_t>(options, input_vector, result_vector,
464: 	                                                                         count, error_message);
465: }
466: 
467: bool BufferedCSVReader::TryCastVector(Vector &parse_chunk_col, idx_t size, const LogicalType &sql_type) {
468: 	// try vector-cast from string to sql_type
469: 	Vector dummy_result(sql_type);
470: 	if (options.has_format[LogicalTypeId::DATE] && sql_type == LogicalTypeId::DATE) {
471: 		// use the date format to cast the chunk
472: 		string error_message;
473: 		return TryCastDateVector(options, parse_chunk_col, dummy_result, size, error_message);
474: 	} else if (options.has_format[LogicalTypeId::TIMESTAMP] && sql_type == LogicalTypeId::TIMESTAMP) {
475: 		// use the timestamp format to cast the chunk
476: 		string error_message;
477: 		return TryCastTimestampVector(options, parse_chunk_col, dummy_result, size, error_message);
478: 	} else {
479: 		// target type is not varchar: perform a cast
480: 		string error_message;
481: 		return VectorOperations::TryCast(parse_chunk_col, dummy_result, size, &error_message, true);
482: 	}
483: }
484: 
485: enum class QuoteRule : uint8_t { QUOTES_RFC = 0, QUOTES_OTHER = 1, NO_QUOTES = 2 };
486: 
487: void BufferedCSVReader::DetectDialect(const vector<LogicalType> &requested_types,
488:                                       BufferedCSVReaderOptions &original_options,
489:                                       vector<BufferedCSVReaderOptions> &info_candidates, idx_t &best_num_cols) {
490: 	// set up the candidates we consider for delimiter and quote rules based on user input
491: 	vector<string> delim_candidates;
492: 	vector<QuoteRule> quoterule_candidates;
493: 	vector<vector<string>> quote_candidates_map;
494: 	vector<vector<string>> escape_candidates_map = {{""}, {"\\"}, {""}};
495: 
496: 	if (options.has_delimiter) {
497: 		// user provided a delimiter: use that delimiter
498: 		delim_candidates = {options.delimiter};
499: 	} else {
500: 		// no delimiter provided: try standard/common delimiters
501: 		delim_candidates = {",", "|", ";", "\t"};
502: 	}
503: 	if (options.has_quote) {
504: 		// user provided quote: use that quote rule
505: 		quote_candidates_map = {{options.quote}, {options.quote}, {options.quote}};
506: 	} else {
507: 		// no quote rule provided: use standard/common quotes
508: 		quote_candidates_map = {{"\""}, {"\"", "'"}, {""}};
509: 	}
510: 	if (options.has_escape) {
511: 		// user provided escape: use that escape rule
512: 		if (options.escape.empty()) {
513: 			quoterule_candidates = {QuoteRule::QUOTES_RFC};
514: 		} else {
515: 			quoterule_candidates = {QuoteRule::QUOTES_OTHER};
516: 		}
517: 		escape_candidates_map[static_cast<uint8_t>(quoterule_candidates[0])] = {options.escape};
518: 	} else {
519: 		// no escape provided: try standard/common escapes
520: 		quoterule_candidates = {QuoteRule::QUOTES_RFC, QuoteRule::QUOTES_OTHER, QuoteRule::NO_QUOTES};
521: 	}
522: 
523: 	idx_t best_consistent_rows = 0;
524: 	for (auto quoterule : quoterule_candidates) {
525: 		const auto &quote_candidates = quote_candidates_map[static_cast<uint8_t>(quoterule)];
526: 		for (const auto &quote : quote_candidates) {
527: 			for (const auto &delim : delim_candidates) {
528: 				const auto &escape_candidates = escape_candidates_map[static_cast<uint8_t>(quoterule)];
529: 				for (const auto &escape : escape_candidates) {
530: 					BufferedCSVReaderOptions sniff_info = original_options;
531: 					sniff_info.delimiter = delim;
532: 					sniff_info.quote = quote;
533: 					sniff_info.escape = escape;
534: 
535: 					options = sniff_info;
536: 					PrepareComplexParser();
537: 
538: 					JumpToBeginning(original_options.skip_rows);
539: 					sniffed_column_counts.clear();
540: 					if (!TryParseCSV(ParserMode::SNIFFING_DIALECT)) {
541: 						continue;
542: 					}
543: 
544: 					idx_t start_row = original_options.skip_rows;
545: 					idx_t consistent_rows = 0;
546: 					idx_t num_cols = 0;
547: 
548: 					for (idx_t row = 0; row < sniffed_column_counts.size(); row++) {
549: 						if (sniffed_column_counts[row] == num_cols) {
550: 							consistent_rows++;
551: 						} else {
552: 							num_cols = sniffed_column_counts[row];
553: 							start_row = row + original_options.skip_rows;
554: 							consistent_rows = 1;
555: 						}
556: 					}
557: 
558: 					// some logic
559: 					bool more_values = (consistent_rows > best_consistent_rows && num_cols >= best_num_cols);
560: 					bool single_column_before = best_num_cols < 2 && num_cols > best_num_cols;
561: 					bool rows_consistent =
562: 					    start_row + consistent_rows - original_options.skip_rows == sniffed_column_counts.size();
563: 					bool more_than_one_row = (consistent_rows > 1);
564: 					bool more_than_one_column = (num_cols > 1);
565: 					bool start_good = !info_candidates.empty() && (start_row <= info_candidates.front().skip_rows);
566: 
567: 					if (!requested_types.empty() && requested_types.size() != num_cols) {
568: 						continue;
569: 					} else if ((more_values || single_column_before) && rows_consistent) {
570: 						sniff_info.skip_rows = start_row;
571: 						sniff_info.num_cols = num_cols;
572: 						best_consistent_rows = consistent_rows;
573: 						best_num_cols = num_cols;
574: 
575: 						info_candidates.clear();
576: 						info_candidates.push_back(sniff_info);
577: 					} else if (more_than_one_row && more_than_one_column && start_good && rows_consistent) {
578: 						bool same_quote_is_candidate = false;
579: 						for (auto &info_candidate : info_candidates) {
580: 							if (quote.compare(info_candidate.quote) == 0) {
581: 								same_quote_is_candidate = true;
582: 							}
583: 						}
584: 						if (!same_quote_is_candidate) {
585: 							sniff_info.skip_rows = start_row;
586: 							sniff_info.num_cols = num_cols;
587: 							info_candidates.push_back(sniff_info);
588: 						}
589: 					}
590: 				}
591: 			}
592: 		}
593: 	}
594: }
595: 
596: void BufferedCSVReader::DetectCandidateTypes(const vector<LogicalType> &type_candidates,
597:                                              const map<LogicalTypeId, vector<const char *>> &format_template_candidates,
598:                                              const vector<BufferedCSVReaderOptions> &info_candidates,
599:                                              BufferedCSVReaderOptions &original_options, idx_t best_num_cols,
600:                                              vector<vector<LogicalType>> &best_sql_types_candidates,
601:                                              std::map<LogicalTypeId, vector<string>> &best_format_candidates,
602:                                              DataChunk &best_header_row) {
603: 	BufferedCSVReaderOptions best_options;
604: 	idx_t min_varchar_cols = best_num_cols + 1;
605: 
606: 	// check which info candidate leads to minimum amount of non-varchar columns...
607: 	for (const auto &t : format_template_candidates) {
608: 		best_format_candidates[t.first].clear();
609: 	}
610: 	for (auto &info_candidate : info_candidates) {
611: 		options = info_candidate;
612: 		vector<vector<LogicalType>> info_sql_types_candidates(options.num_cols, type_candidates);
613: 		std::map<LogicalTypeId, bool> has_format_candidates;
614: 		std::map<LogicalTypeId, vector<string>> format_candidates;
615: 		for (const auto &t : format_template_candidates) {
616: 			has_format_candidates[t.first] = false;
617: 			format_candidates[t.first].clear();
618: 		}
619: 
620: 		// set all sql_types to VARCHAR so we can do datatype detection based on VARCHAR values
621: 		sql_types.clear();
622: 		sql_types.assign(options.num_cols, LogicalType::VARCHAR);
623: 
624: 		// jump to beginning and skip potential header
625: 		JumpToBeginning(options.skip_rows, true);
626: 		DataChunk header_row;
627: 		header_row.Initialize(sql_types);
628: 		parse_chunk.Copy(header_row);
629: 
630: 		if (header_row.size() == 0) {
631: 			continue;
632: 		}
633: 
634: 		// init parse chunk and read csv with info candidate
635: 		InitParseChunk(sql_types.size());
636: 		ParseCSV(ParserMode::SNIFFING_DATATYPES);
637: 		for (idx_t row_idx = 0; row_idx <= parse_chunk.size(); row_idx++) {
638: 			bool is_header_row = row_idx == 0;
639: 			idx_t row = row_idx - 1;
640: 			for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
641: 				auto &col_type_candidates = info_sql_types_candidates[col];
642: 				while (col_type_candidates.size() > 1) {
643: 					const auto &sql_type = col_type_candidates.back();
644: 					// try cast from string to sql_type
645: 					Value dummy_val;
646: 					if (is_header_row) {
647: 						dummy_val = header_row.GetValue(col, 0);
648: 					} else {
649: 						dummy_val = parse_chunk.GetValue(col, row);
650: 					}
651: 					// try formatting for date types if the user did not specify one and it starts with numeric values.
652: 					string separator;
653: 					if (has_format_candidates.count(sql_type.id()) && !original_options.has_format[sql_type.id()] &&
654: 					    StartsWithNumericDate(separator, dummy_val.str_value)) {
655: 						// generate date format candidates the first time through
656: 						auto &type_format_candidates = format_candidates[sql_type.id()];
657: 						const auto had_format_candidates = has_format_candidates[sql_type.id()];
658: 						if (!has_format_candidates[sql_type.id()]) {
659: 							has_format_candidates[sql_type.id()] = true;
660: 							// order by preference
661: 							auto entry = format_template_candidates.find(sql_type.id());
662: 							if (entry != format_template_candidates.end()) {
663: 								const auto &format_template_list = entry->second;
664: 								for (const auto &t : format_template_list) {
665: 									const auto format_string = GenerateDateFormat(separator, t);
666: 									// don't parse ISO 8601
667: 									if (format_string.find("%Y-%m-%d") == string::npos) {
668: 										type_format_candidates.emplace_back(format_string);
669: 									}
670: 								}
671: 							}
672: 							//	initialise the first candidate
673: 							options.has_format[sql_type.id()] = true;
674: 							//	all formats are constructed to be valid
675: 							SetDateFormat(type_format_candidates.back(), sql_type.id());
676: 						}
677: 						// check all formats and keep the first one that works
678: 						StrpTimeFormat::ParseResult result;
679: 						auto save_format_candidates = type_format_candidates;
680: 						while (!type_format_candidates.empty()) {
681: 							//	avoid using exceptions for flow control...
682: 							auto &current_format = options.date_format[sql_type.id()];
683: 							if (current_format.Parse(dummy_val.str_value, result)) {
684: 								break;
685: 							}
686: 							//	doesn't work - move to the next one
687: 							type_format_candidates.pop_back();
688: 							options.has_format[sql_type.id()] = (!type_format_candidates.empty());
689: 							if (!type_format_candidates.empty()) {
690: 								SetDateFormat(type_format_candidates.back(), sql_type.id());
691: 							}
692: 						}
693: 						//	if none match, then this is not a value of type sql_type,
694: 						if (type_format_candidates.empty()) {
695: 							//	so restore the candidates that did work.
696: 							//	or throw them out if they were generated by this value.
697: 							if (had_format_candidates) {
698: 								type_format_candidates.swap(save_format_candidates);
699: 								if (!type_format_candidates.empty()) {
700: 									SetDateFormat(type_format_candidates.back(), sql_type.id());
701: 								}
702: 							} else {
703: 								has_format_candidates[sql_type.id()] = false;
704: 							}
705: 						}
706: 					}
707: 					// try cast from string to sql_type
708: 					if (TryCastValue(dummy_val, sql_type)) {
709: 						break;
710: 					} else {
711: 						col_type_candidates.pop_back();
712: 					}
713: 				}
714: 			}
715: 			// reset type detection, because first row could be header,
716: 			// but only do it if csv has more than one line (including header)
717: 			if (parse_chunk.size() > 0 && is_header_row) {
718: 				info_sql_types_candidates = vector<vector<LogicalType>>(options.num_cols, type_candidates);
719: 				for (auto &f : format_candidates) {
720: 					f.second.clear();
721: 				}
722: 				for (auto &h : has_format_candidates) {
723: 					h.second = false;
724: 				}
725: 			}
726: 		}
727: 
728: 		idx_t varchar_cols = 0;
729: 		for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
730: 			auto &col_type_candidates = info_sql_types_candidates[col];
731: 			// check number of varchar columns
732: 			const auto &col_type = col_type_candidates.back();
733: 			if (col_type == LogicalType::VARCHAR) {
734: 				varchar_cols++;
735: 			}
736: 		}
737: 
738: 		// it's good if the dialect creates more non-varchar columns, but only if we sacrifice < 30% of best_num_cols.
739: 		if (varchar_cols < min_varchar_cols && parse_chunk.ColumnCount() > (best_num_cols * 0.7)) {
740: 			// we have a new best_options candidate
741: 			best_options = info_candidate;
742: 			min_varchar_cols = varchar_cols;
743: 			best_sql_types_candidates = info_sql_types_candidates;
744: 			best_format_candidates = format_candidates;
745: 			best_header_row.Destroy();
746: 			auto header_row_types = header_row.GetTypes();
747: 			best_header_row.Initialize(header_row_types);
748: 			header_row.Copy(best_header_row);
749: 		}
750: 	}
751: 
752: 	options = best_options;
753: 	for (const auto &best : best_format_candidates) {
754: 		if (!best.second.empty()) {
755: 			SetDateFormat(best.second.back(), best.first);
756: 		}
757: 	}
758: }
759: 
760: void BufferedCSVReader::DetectHeader(const vector<vector<LogicalType>> &best_sql_types_candidates,
761:                                      const DataChunk &best_header_row) {
762: 	// information for header detection
763: 	bool first_row_consistent = true;
764: 	bool first_row_nulls = false;
765: 
766: 	// check if header row is all null and/or consistent with detected column data types
767: 	first_row_nulls = true;
768: 	for (idx_t col = 0; col < best_sql_types_candidates.size(); col++) {
769: 		auto dummy_val = best_header_row.GetValue(col, 0);
770: 		if (!dummy_val.is_null) {
771: 			first_row_nulls = false;
772: 		}
773: 
774: 		// try cast to sql_type of column
775: 		const auto &sql_type = best_sql_types_candidates[col].back();
776: 		if (!TryCastValue(dummy_val, sql_type)) {
777: 			first_row_consistent = false;
778: 		}
779: 	}
780: 
781: 	// update parser info, and read, generate & set col_names based on previous findings
782: 	if (((!first_row_consistent || first_row_nulls) && !options.has_header) || (options.has_header && options.header)) {
783: 		options.header = true;
784: 		unordered_map<string, idx_t> name_collision_count;
785: 		// get header names from CSV
786: 		for (idx_t col = 0; col < options.num_cols; col++) {
787: 			const auto &val = best_header_row.GetValue(col, 0);
788: 			string col_name = val.ToString();
789: 
790: 			// generate name if field is empty
791: 			if (col_name.empty() || val.is_null) {
792: 				col_name = GenerateColumnName(options.num_cols, col);
793: 			}
794: 
795: 			// normalize names or at least trim whitespace
796: 			if (options.normalize_names) {
797: 				col_name = NormalizeColumnName(col_name);
798: 			} else {
799: 				col_name = TrimWhitespace(col_name);
800: 			}
801: 
802: 			// avoid duplicate header names
803: 			const string col_name_raw = col_name;
804: 			while (name_collision_count.find(col_name) != name_collision_count.end()) {
805: 				name_collision_count[col_name] += 1;
806: 				col_name = col_name + "_" + to_string(name_collision_count[col_name]);
807: 			}
808: 
809: 			col_names.push_back(col_name);
810: 			name_collision_count[col_name] = 0;
811: 		}
812: 
813: 	} else {
814: 		options.header = false;
815: 		idx_t total_columns = parse_chunk.ColumnCount();
816: 		for (idx_t col = 0; col < total_columns; col++) {
817: 			string column_name = GenerateColumnName(total_columns, col);
818: 			col_names.push_back(column_name);
819: 		}
820: 	}
821: }
822: 
823: vector<LogicalType> BufferedCSVReader::RefineTypeDetection(const vector<LogicalType> &type_candidates,
824:                                                            const vector<LogicalType> &requested_types,
825:                                                            vector<vector<LogicalType>> &best_sql_types_candidates,
826:                                                            map<LogicalTypeId, vector<string>> &best_format_candidates) {
827: 	// for the type refine we set the SQL types to VARCHAR for all columns
828: 	sql_types.clear();
829: 	sql_types.assign(options.num_cols, LogicalType::VARCHAR);
830: 
831: 	vector<LogicalType> detected_types;
832: 
833: 	// if data types were provided, exit here if number of columns does not match
834: 	if (!requested_types.empty()) {
835: 		if (requested_types.size() != options.num_cols) {
836: 			throw InvalidInputException(
837: 			    "Error while determining column types: found %lld columns but expected %d. (%s)", options.num_cols,
838: 			    requested_types.size(), options.toString());
839: 		} else {
840: 			detected_types = requested_types;
841: 		}
842: 	} else if (options.all_varchar) {
843: 		// return all types varchar
844: 		detected_types = sql_types;
845: 	} else {
846: 		// jump through the rest of the file and continue to refine the sql type guess
847: 		while (JumpToNextSample()) {
848: 			InitParseChunk(sql_types.size());
849: 			// if jump ends up a bad line, we just skip this chunk
850: 			if (!TryParseCSV(ParserMode::SNIFFING_DATATYPES)) {
851: 				continue;
852: 			}
853: 			for (idx_t col = 0; col < parse_chunk.ColumnCount(); col++) {
854: 				vector<LogicalType> &col_type_candidates = best_sql_types_candidates[col];
855: 				while (col_type_candidates.size() > 1) {
856: 					const auto &sql_type = col_type_candidates.back();
857: 					//	narrow down the date formats
858: 					if (best_format_candidates.count(sql_type.id())) {
859: 						auto &best_type_format_candidates = best_format_candidates[sql_type.id()];
860: 						auto save_format_candidates = best_type_format_candidates;
861: 						while (!best_type_format_candidates.empty()) {
862: 							if (TryCastVector(parse_chunk.data[col], parse_chunk.size(), sql_type)) {
863: 								break;
864: 							}
865: 							//	doesn't work - move to the next one
866: 							best_type_format_candidates.pop_back();
867: 							options.has_format[sql_type.id()] = (!best_type_format_candidates.empty());
868: 							if (!best_type_format_candidates.empty()) {
869: 								SetDateFormat(best_type_format_candidates.back(), sql_type.id());
870: 							}
871: 						}
872: 						//	if none match, then this is not a column of type sql_type,
873: 						if (best_type_format_candidates.empty()) {
874: 							//	so restore the candidates that did work.
875: 							best_type_format_candidates.swap(save_format_candidates);
876: 							if (!best_type_format_candidates.empty()) {
877: 								SetDateFormat(best_type_format_candidates.back(), sql_type.id());
878: 							}
879: 						}
880: 					}
881: 
882: 					if (TryCastVector(parse_chunk.data[col], parse_chunk.size(), sql_type)) {
883: 						break;
884: 					} else {
885: 						col_type_candidates.pop_back();
886: 					}
887: 				}
888: 			}
889: 
890: 			if (!jumping_samples) {
891: 				if ((sample_chunk_idx)*options.sample_chunk_size <= options.buffer_size) {
892: 					// cache parse chunk
893: 					// create a new chunk and fill it with the remainder
894: 					auto chunk = make_unique<DataChunk>();
895: 					auto parse_chunk_types = parse_chunk.GetTypes();
896: 					chunk->Move(parse_chunk);
897: 					cached_chunks.push(move(chunk));
898: 				} else {
899: 					while (!cached_chunks.empty()) {
900: 						cached_chunks.pop();
901: 					}
902: 				}
903: 			}
904: 		}
905: 
906: 		// set sql types
907: 		for (auto &best_sql_types_candidate : best_sql_types_candidates) {
908: 			LogicalType d_type = best_sql_types_candidate.back();
909: 			if (best_sql_types_candidate.size() == type_candidates.size()) {
910: 				d_type = LogicalType::VARCHAR;
911: 			}
912: 			detected_types.push_back(d_type);
913: 		}
914: 	}
915: 
916: 	return detected_types;
917: }
918: 
919: vector<LogicalType> BufferedCSVReader::SniffCSV(const vector<LogicalType> &requested_types) {
920: 	for (auto &type : requested_types) {
921: 		// auto detect for blobs not supported: there may be invalid UTF-8 in the file
922: 		if (type.id() == LogicalTypeId::BLOB) {
923: 			return requested_types;
924: 		}
925: 	}
926: 
927: 	// #######
928: 	// ### dialect detection
929: 	// #######
930: 	BufferedCSVReaderOptions original_options = options;
931: 	vector<BufferedCSVReaderOptions> info_candidates;
932: 	idx_t best_num_cols = 0;
933: 
934: 	DetectDialect(requested_types, original_options, info_candidates, best_num_cols);
935: 
936: 	// if no dialect candidate was found, then file was most likely empty and we throw an exception
937: 	if (info_candidates.empty()) {
938: 		throw InvalidInputException(
939: 		    "Error in file \"%s\": CSV options could not be auto-detected. Consider setting parser options manually.",
940: 		    options.file_path);
941: 	}
942: 
943: 	// #######
944: 	// ### type detection (initial)
945: 	// #######
946: 	// type candidates, ordered by descending specificity (~ from high to low)
947: 	vector<LogicalType> type_candidates = {
948: 	    LogicalType::VARCHAR, LogicalType::TIMESTAMP,
949: 	    LogicalType::DATE,    LogicalType::TIME,
950: 	    LogicalType::DOUBLE,  /* LogicalType::FLOAT,*/ LogicalType::BIGINT,
951: 	    LogicalType::INTEGER, /*LogicalType::SMALLINT, LogicalType::TINYINT,*/ LogicalType::BOOLEAN,
952: 	    LogicalType::SQLNULL};
953: 	// format template candidates, ordered by descending specificity (~ from high to low)
954: 	std::map<LogicalTypeId, vector<const char *>> format_template_candidates = {
955: 	    {LogicalTypeId::DATE, {"%m-%d-%Y", "%m-%d-%y", "%d-%m-%Y", "%d-%m-%y", "%Y-%m-%d", "%y-%m-%d"}},
956: 	    {LogicalTypeId::TIMESTAMP,
957: 	     {"%Y-%m-%d %H:%M:%S.%f", "%m-%d-%Y %I:%M:%S %p", "%m-%d-%y %I:%M:%S %p", "%d-%m-%Y %H:%M:%S",
958: 	      "%d-%m-%y %H:%M:%S", "%Y-%m-%d %H:%M:%S", "%y-%m-%d %H:%M:%S"}},
959: 	};
960: 	vector<vector<LogicalType>> best_sql_types_candidates;
961: 	map<LogicalTypeId, vector<string>> best_format_candidates;
962: 	DataChunk best_header_row;
963: 	DetectCandidateTypes(type_candidates, format_template_candidates, info_candidates, original_options, best_num_cols,
964: 	                     best_sql_types_candidates, best_format_candidates, best_header_row);
965: 
966: 	// #######
967: 	// ### header detection
968: 	// #######
969: 	DetectHeader(best_sql_types_candidates, best_header_row);
970: 
971: 	// #######
972: 	// ### type detection (refining)
973: 	// #######
974: 	return RefineTypeDetection(type_candidates, requested_types, best_sql_types_candidates, best_format_candidates);
975: }
976: 
977: bool BufferedCSVReader::TryParseComplexCSV(DataChunk &insert_chunk, string &error_message) {
978: 	// used for parsing algorithm
979: 	bool finished_chunk = false;
980: 	idx_t column = 0;
981: 	vector<idx_t> escape_positions;
982: 	uint8_t delimiter_pos = 0, escape_pos = 0, quote_pos = 0;
983: 	idx_t offset = 0;
984: 
985: 	// read values into the buffer (if any)
986: 	if (position >= buffer_size) {
987: 		if (!ReadBuffer(start)) {
988: 			return true;
989: 		}
990: 	}
991: 	// start parsing the first value
992: 	start = position;
993: 	goto value_start;
994: value_start:
995: 	/* state: value_start */
996: 	// this state parses the first characters of a value
997: 	offset = 0;
998: 	delimiter_pos = 0;
999: 	quote_pos = 0;
1000: 	do {
1001: 		idx_t count = 0;
1002: 		for (; position < buffer_size; position++) {
1003: 			quote_search.Match(quote_pos, buffer[position]);
1004: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1005: 			count++;
1006: 			if (delimiter_pos == options.delimiter.size()) {
1007: 				// found a delimiter, add the value
1008: 				offset = options.delimiter.size() - 1;
1009: 				goto add_value;
1010: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1011: 				// found a newline, add the row
1012: 				goto add_row;
1013: 			}
1014: 			if (count > quote_pos) {
1015: 				// did not find a quote directly at the start of the value, stop looking for the quote now
1016: 				goto normal;
1017: 			}
1018: 			if (quote_pos == options.quote.size()) {
1019: 				// found a quote, go to quoted loop and skip the initial quote
1020: 				start += options.quote.size();
1021: 				goto in_quotes;
1022: 			}
1023: 		}
1024: 	} while (ReadBuffer(start));
1025: 	// file ends while scanning for quote/delimiter, go to final state
1026: 	goto final_state;
1027: normal:
1028: 	/* state: normal parsing state */
1029: 	// this state parses the remainder of a non-quoted value until we reach a delimiter or newline
1030: 	position++;
1031: 	do {
1032: 		for (; position < buffer_size; position++) {
1033: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1034: 			if (delimiter_pos == options.delimiter.size()) {
1035: 				offset = options.delimiter.size() - 1;
1036: 				goto add_value;
1037: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1038: 				goto add_row;
1039: 			}
1040: 		}
1041: 	} while (ReadBuffer(start));
1042: 	goto final_state;
1043: add_value:
1044: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1045: 	// increase position by 1 and move start to the new position
1046: 	offset = 0;
1047: 	start = ++position;
1048: 	if (position >= buffer_size && !ReadBuffer(start)) {
1049: 		// file ends right after delimiter, go to final state
1050: 		goto final_state;
1051: 	}
1052: 	goto value_start;
1053: add_row : {
1054: 	// check type of newline (\r or \n)
1055: 	bool carriage_return = buffer[position] == '\r';
1056: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1057: 	finished_chunk = AddRow(insert_chunk, column);
1058: 	// increase position by 1 and move start to the new position
1059: 	offset = 0;
1060: 	start = ++position;
1061: 	if (position >= buffer_size && !ReadBuffer(start)) {
1062: 		// file ends right after newline, go to final state
1063: 		goto final_state;
1064: 	}
1065: 	if (carriage_return) {
1066: 		// \r newline, go to special state that parses an optional \n afterwards
1067: 		goto carriage_return;
1068: 	} else {
1069: 		// \n newline, move to value start
1070: 		if (finished_chunk) {
1071: 			return true;
1072: 		}
1073: 		goto value_start;
1074: 	}
1075: }
1076: in_quotes:
1077: 	/* state: in_quotes */
1078: 	// this state parses the remainder of a quoted value
1079: 	quote_pos = 0;
1080: 	escape_pos = 0;
1081: 	position++;
1082: 	do {
1083: 		for (; position < buffer_size; position++) {
1084: 			quote_search.Match(quote_pos, buffer[position]);
1085: 			escape_search.Match(escape_pos, buffer[position]);
1086: 			if (quote_pos == options.quote.size()) {
1087: 				goto unquote;
1088: 			} else if (escape_pos == options.escape.size()) {
1089: 				escape_positions.push_back(position - start - (options.escape.size() - 1));
1090: 				goto handle_escape;
1091: 			}
1092: 		}
1093: 	} while (ReadBuffer(start));
1094: 	// still in quoted state at the end of the file, error:
1095: 	error_message = StringUtil::Format("Error in file \"%s\" on line %s: unterminated quotes. (%s)", options.file_path,
1096: 	                                   GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1097: 	return false;
1098: unquote:
1099: 	/* state: unquote */
1100: 	// this state handles the state directly after we unquote
1101: 	// in this state we expect either another quote (entering the quoted state again, and escaping the quote)
1102: 	// or a delimiter/newline, ending the current value and moving on to the next value
1103: 	delimiter_pos = 0;
1104: 	quote_pos = 0;
1105: 	position++;
1106: 	if (position >= buffer_size && !ReadBuffer(start)) {
1107: 		// file ends right after unquote, go to final state
1108: 		offset = options.quote.size();
1109: 		goto final_state;
1110: 	}
1111: 	if (StringUtil::CharacterIsNewline(buffer[position])) {
1112: 		// quote followed by newline, add row
1113: 		offset = options.quote.size();
1114: 		goto add_row;
1115: 	}
1116: 	do {
1117: 		idx_t count = 0;
1118: 		for (; position < buffer_size; position++) {
1119: 			quote_search.Match(quote_pos, buffer[position]);
1120: 			delimiter_search.Match(delimiter_pos, buffer[position]);
1121: 			count++;
1122: 			if (count > delimiter_pos && count > quote_pos) {
1123: 				error_message = StringUtil::Format(
1124: 				    "Error in file \"%s\" on line %s: quote should be followed by end of value, end "
1125: 				    "of row or another quote. (%s)",
1126: 				    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1127: 				return false;
1128: 			}
1129: 			if (delimiter_pos == options.delimiter.size()) {
1130: 				// quote followed by delimiter, add value
1131: 				offset = options.quote.size() + options.delimiter.size() - 1;
1132: 				goto add_value;
1133: 			} else if (quote_pos == options.quote.size() &&
1134: 			           (options.escape.empty() || options.escape == options.quote)) {
1135: 				// quote followed by quote, go back to quoted state and add to escape
1136: 				escape_positions.push_back(position - start - (options.quote.size() - 1));
1137: 				goto in_quotes;
1138: 			}
1139: 		}
1140: 	} while (ReadBuffer(start));
1141: 	error_message = StringUtil::Format(
1142: 	    "Error in file \"%s\" on line %s: quote should be followed by end of value, end of row or another quote. (%s)",
1143: 	    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1144: 	return false;
1145: handle_escape:
1146: 	escape_pos = 0;
1147: 	quote_pos = 0;
1148: 	position++;
1149: 	do {
1150: 		idx_t count = 0;
1151: 		for (; position < buffer_size; position++) {
1152: 			quote_search.Match(quote_pos, buffer[position]);
1153: 			escape_search.Match(escape_pos, buffer[position]);
1154: 			count++;
1155: 			if (count > escape_pos && count > quote_pos) {
1156: 				error_message = StringUtil::Format(
1157: 				    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)",
1158: 				    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1159: 				return false;
1160: 			}
1161: 			if (quote_pos == options.quote.size() || escape_pos == options.escape.size()) {
1162: 				// found quote or escape: move back to quoted state
1163: 				goto in_quotes;
1164: 			}
1165: 		}
1166: 	} while (ReadBuffer(start));
1167: 	error_message =
1168: 	    StringUtil::Format("Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)",
1169: 	                       options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1170: 	return false;
1171: carriage_return:
1172: 	/* state: carriage_return */
1173: 	// this stage optionally skips a newline (\n) character, which allows \r\n to be interpreted as a single line
1174: 	if (buffer[position] == '\n') {
1175: 		// newline after carriage return: skip
1176: 		start = ++position;
1177: 		if (position >= buffer_size && !ReadBuffer(start)) {
1178: 			// file ends right after newline, go to final state
1179: 			goto final_state;
1180: 		}
1181: 	}
1182: 	if (finished_chunk) {
1183: 		return true;
1184: 	}
1185: 	goto value_start;
1186: final_state:
1187: 	if (finished_chunk) {
1188: 		return true;
1189: 	}
1190: 	if (column > 0 || position > start) {
1191: 		// remaining values to be added to the chunk
1192: 		AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1193: 		finished_chunk = AddRow(insert_chunk, column);
1194: 	}
1195: 	// final stage, only reached after parsing the file is finished
1196: 	// flush the parsed chunk and finalize parsing
1197: 	if (mode == ParserMode::PARSING) {
1198: 		Flush(insert_chunk);
1199: 	}
1200: 
1201: 	end_of_file_reached = true;
1202: 	return true;
1203: }
1204: 
1205: bool BufferedCSVReader::TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message) {
1206: 	// used for parsing algorithm
1207: 	bool finished_chunk = false;
1208: 	idx_t column = 0;
1209: 	idx_t offset = 0;
1210: 	vector<idx_t> escape_positions;
1211: 
1212: 	// read values into the buffer (if any)
1213: 	if (position >= buffer_size) {
1214: 		if (!ReadBuffer(start)) {
1215: 			return true;
1216: 		}
1217: 	}
1218: 	// start parsing the first value
1219: 	goto value_start;
1220: value_start:
1221: 	offset = 0;
1222: 	/* state: value_start */
1223: 	// this state parses the first character of a value
1224: 	if (buffer[position] == options.quote[0]) {
1225: 		// quote: actual value starts in the next position
1226: 		// move to in_quotes state
1227: 		start = position + 1;
1228: 		goto in_quotes;
1229: 	} else {
1230: 		// no quote, move to normal parsing state
1231: 		start = position;
1232: 		goto normal;
1233: 	}
1234: normal:
1235: 	/* state: normal parsing state */
1236: 	// this state parses the remainder of a non-quoted value until we reach a delimiter or newline
1237: 	do {
1238: 		for (; position < buffer_size; position++) {
1239: 			if (buffer[position] == options.delimiter[0]) {
1240: 				// delimiter: end the value and add it to the chunk
1241: 				goto add_value;
1242: 			} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1243: 				// newline: add row
1244: 				goto add_row;
1245: 			}
1246: 		}
1247: 	} while (ReadBuffer(start));
1248: 	// file ends during normal scan: go to end state
1249: 	goto final_state;
1250: add_value:
1251: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1252: 	// increase position by 1 and move start to the new position
1253: 	offset = 0;
1254: 	start = ++position;
1255: 	if (position >= buffer_size && !ReadBuffer(start)) {
1256: 		// file ends right after delimiter, go to final state
1257: 		goto final_state;
1258: 	}
1259: 	goto value_start;
1260: add_row : {
1261: 	// check type of newline (\r or \n)
1262: 	bool carriage_return = buffer[position] == '\r';
1263: 	AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1264: 	finished_chunk = AddRow(insert_chunk, column);
1265: 	// increase position by 1 and move start to the new position
1266: 	offset = 0;
1267: 	start = ++position;
1268: 	if (position >= buffer_size && !ReadBuffer(start)) {
1269: 		// file ends right after delimiter, go to final state
1270: 		goto final_state;
1271: 	}
1272: 	if (carriage_return) {
1273: 		// \r newline, go to special state that parses an optional \n afterwards
1274: 		goto carriage_return;
1275: 	} else {
1276: 		// \n newline, move to value start
1277: 		if (finished_chunk) {
1278: 			return true;
1279: 		}
1280: 		goto value_start;
1281: 	}
1282: }
1283: in_quotes:
1284: 	/* state: in_quotes */
1285: 	// this state parses the remainder of a quoted value
1286: 	position++;
1287: 	do {
1288: 		for (; position < buffer_size; position++) {
1289: 			if (buffer[position] == options.quote[0]) {
1290: 				// quote: move to unquoted state
1291: 				goto unquote;
1292: 			} else if (buffer[position] == options.escape[0]) {
1293: 				// escape: store the escaped position and move to handle_escape state
1294: 				escape_positions.push_back(position - start);
1295: 				goto handle_escape;
1296: 			}
1297: 		}
1298: 	} while (ReadBuffer(start));
1299: 	// still in quoted state at the end of the file, error:
1300: 	throw InvalidInputException("Error in file \"%s\" on line %s: unterminated quotes. (%s)", options.file_path,
1301: 	                            GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1302: unquote:
1303: 	/* state: unquote */
1304: 	// this state handles the state directly after we unquote
1305: 	// in this state we expect either another quote (entering the quoted state again, and escaping the quote)
1306: 	// or a delimiter/newline, ending the current value and moving on to the next value
1307: 	position++;
1308: 	if (position >= buffer_size && !ReadBuffer(start)) {
1309: 		// file ends right after unquote, go to final state
1310: 		offset = 1;
1311: 		goto final_state;
1312: 	}
1313: 	if (buffer[position] == options.quote[0] && (options.escape.empty() || options.escape[0] == options.quote[0])) {
1314: 		// escaped quote, return to quoted state and store escape position
1315: 		escape_positions.push_back(position - start);
1316: 		goto in_quotes;
1317: 	} else if (buffer[position] == options.delimiter[0]) {
1318: 		// delimiter, add value
1319: 		offset = 1;
1320: 		goto add_value;
1321: 	} else if (StringUtil::CharacterIsNewline(buffer[position])) {
1322: 		offset = 1;
1323: 		goto add_row;
1324: 	} else {
1325: 		error_message = StringUtil::Format(
1326: 		    "Error in file \"%s\" on line %s: quote should be followed by end of value, end of "
1327: 		    "row or another quote. (%s)",
1328: 		    options.file_path, GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1329: 		return false;
1330: 	}
1331: handle_escape:
1332: 	/* state: handle_escape */
1333: 	// escape should be followed by a quote or another escape character
1334: 	position++;
1335: 	if (position >= buffer_size && !ReadBuffer(start)) {
1336: 		error_message = StringUtil::Format(
1337: 		    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)", options.file_path,
1338: 		    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1339: 		return false;
1340: 	}
1341: 	if (buffer[position] != options.quote[0] && buffer[position] != options.escape[0]) {
1342: 		error_message = StringUtil::Format(
1343: 		    "Error in file \"%s\" on line %s: neither QUOTE nor ESCAPE is proceeded by ESCAPE. (%s)", options.file_path,
1344: 		    GetLineNumberStr(linenr, linenr_estimated).c_str(), options.toString());
1345: 		return false;
1346: 	}
1347: 	// escape was followed by quote or escape, go back to quoted state
1348: 	goto in_quotes;
1349: carriage_return:
1350: 	/* state: carriage_return */
1351: 	// this stage optionally skips a newline (\n) character, which allows \r\n to be interpreted as a single line
1352: 	if (buffer[position] == '\n') {
1353: 		// newline after carriage return: skip
1354: 		// increase position by 1 and move start to the new position
1355: 		start = ++position;
1356: 		if (position >= buffer_size && !ReadBuffer(start)) {
1357: 			// file ends right after delimiter, go to final state
1358: 			goto final_state;
1359: 		}
1360: 	}
1361: 	if (finished_chunk) {
1362: 		return true;
1363: 	}
1364: 	goto value_start;
1365: final_state:
1366: 	if (finished_chunk) {
1367: 		return true;
1368: 	}
1369: 
1370: 	if (column > 0 || position > start) {
1371: 		// remaining values to be added to the chunk
1372: 		AddValue(buffer.get() + start, position - start - offset, column, escape_positions);
1373: 		finished_chunk = AddRow(insert_chunk, column);
1374: 	}
1375: 
1376: 	// final stage, only reached after parsing the file is finished
1377: 	// flush the parsed chunk and finalize parsing
1378: 	if (mode == ParserMode::PARSING) {
1379: 		Flush(insert_chunk);
1380: 	}
1381: 
1382: 	end_of_file_reached = true;
1383: 	return true;
1384: }
1385: 
1386: bool BufferedCSVReader::ReadBuffer(idx_t &start) {
1387: 	auto old_buffer = move(buffer);
1388: 
1389: 	// the remaining part of the last buffer
1390: 	idx_t remaining = buffer_size - start;
1391: 	idx_t buffer_read_size = INITIAL_BUFFER_SIZE;
1392: 	while (remaining > buffer_read_size) {
1393: 		buffer_read_size *= 2;
1394: 	}
1395: 	if (remaining + buffer_read_size > MAXIMUM_CSV_LINE_SIZE) {
1396: 		throw InvalidInputException("Maximum line size of %llu bytes exceeded!", MAXIMUM_CSV_LINE_SIZE);
1397: 	}
1398: 	buffer = unique_ptr<char[]>(new char[buffer_read_size + remaining + 1]);
1399: 	buffer_size = remaining + buffer_read_size;
1400: 	if (remaining > 0) {
1401: 		// remaining from last buffer: copy it here
1402: 		memcpy(buffer.get(), old_buffer.get() + start, remaining);
1403: 	}
1404: 	idx_t read_count = file_handle->Read(buffer.get() + remaining, buffer_read_size);
1405: 
1406: 	bytes_in_chunk += read_count;
1407: 	buffer_size = remaining + read_count;
1408: 	buffer[buffer_size] = '\0';
1409: 	if (old_buffer) {
1410: 		cached_buffers.push_back(move(old_buffer));
1411: 	}
1412: 	start = 0;
1413: 	position = remaining;
1414: 	if (!bom_checked) {
1415: 		bom_checked = true;
1416: 		if (read_count >= 3 && buffer[0] == '\xEF' && buffer[1] == '\xBB' && buffer[2] == '\xBF') {
1417: 			position += 3;
1418: 		}
1419: 	}
1420: 
1421: 	return read_count > 0;
1422: }
1423: 
1424: void BufferedCSVReader::ParseCSV(DataChunk &insert_chunk) {
1425: 	// if no auto-detect or auto-detect with jumping samples, we have nothing cached and start from the beginning
1426: 	if (cached_chunks.empty()) {
1427: 		cached_buffers.clear();
1428: 	} else {
1429: 		auto &chunk = cached_chunks.front();
1430: 		parse_chunk.Move(*chunk);
1431: 		cached_chunks.pop();
1432: 		Flush(insert_chunk);
1433: 		return;
1434: 	}
1435: 
1436: 	string error_message;
1437: 	if (!TryParseCSV(ParserMode::PARSING, insert_chunk, error_message)) {
1438: 		throw InvalidInputException(error_message);
1439: 	}
1440: }
1441: 
1442: bool BufferedCSVReader::TryParseCSV(ParserMode mode) {
1443: 	DataChunk dummy_chunk;
1444: 	string error_message;
1445: 	return TryParseCSV(mode, dummy_chunk, error_message);
1446: }
1447: 
1448: void BufferedCSVReader::ParseCSV(ParserMode mode) {
1449: 	DataChunk dummy_chunk;
1450: 	string error_message;
1451: 	if (!TryParseCSV(mode, dummy_chunk, error_message)) {
1452: 		throw InvalidInputException(error_message);
1453: 	}
1454: }
1455: 
1456: bool BufferedCSVReader::TryParseCSV(ParserMode parser_mode, DataChunk &insert_chunk, string &error_message) {
1457: 	mode = parser_mode;
1458: 
1459: 	if (options.quote.size() <= 1 && options.escape.size() <= 1 && options.delimiter.size() == 1) {
1460: 		return TryParseSimpleCSV(insert_chunk, error_message);
1461: 	} else {
1462: 		return TryParseComplexCSV(insert_chunk, error_message);
1463: 	}
1464: }
1465: 
1466: void BufferedCSVReader::AddValue(char *str_val, idx_t length, idx_t &column, vector<idx_t> &escape_positions) {
1467: 	if (length == 0 && column == 0) {
1468: 		row_empty = true;
1469: 	} else {
1470: 		row_empty = false;
1471: 	}
1472: 
1473: 	if (!sql_types.empty() && column == sql_types.size() && length == 0) {
1474: 		// skip a single trailing delimiter in last column
1475: 		return;
1476: 	}
1477: 	if (mode == ParserMode::SNIFFING_DIALECT) {
1478: 		column++;
1479: 		return;
1480: 	}
1481: 	if (column >= sql_types.size()) {
1482: 		throw InvalidInputException("Error on line %s: expected %lld values per row, but got more. (%s)",
1483: 		                            GetLineNumberStr(linenr, linenr_estimated).c_str(), sql_types.size(),
1484: 		                            options.toString());
1485: 	}
1486: 
1487: 	// insert the line number into the chunk
1488: 	idx_t row_entry = parse_chunk.size();
1489: 
1490: 	str_val[length] = '\0';
1491: 
1492: 	// test against null string
1493: 	if (!options.force_not_null[column] && strcmp(options.null_str.c_str(), str_val) == 0) {
1494: 		FlatVector::SetNull(parse_chunk.data[column], row_entry, true);
1495: 	} else {
1496: 		auto &v = parse_chunk.data[column];
1497: 		auto parse_data = FlatVector::GetData<string_t>(v);
1498: 		if (!escape_positions.empty()) {
1499: 			// remove escape characters (if any)
1500: 			string old_val = str_val;
1501: 			string new_val = "";
1502: 			idx_t prev_pos = 0;
1503: 			for (idx_t i = 0; i < escape_positions.size(); i++) {
1504: 				idx_t next_pos = escape_positions[i];
1505: 				new_val += old_val.substr(prev_pos, next_pos - prev_pos);
1506: 
1507: 				if (options.escape.empty() || options.escape == options.quote) {
1508: 					prev_pos = next_pos + options.quote.size();
1509: 				} else {
1510: 					prev_pos = next_pos + options.escape.size();
1511: 				}
1512: 			}
1513: 			new_val += old_val.substr(prev_pos, old_val.size() - prev_pos);
1514: 			escape_positions.clear();
1515: 			parse_data[row_entry] = StringVector::AddStringOrBlob(v, string_t(new_val));
1516: 		} else {
1517: 			parse_data[row_entry] = string_t(str_val, length);
1518: 		}
1519: 	}
1520: 
1521: 	// move to the next column
1522: 	column++;
1523: }
1524: 
1525: bool BufferedCSVReader::AddRow(DataChunk &insert_chunk, idx_t &column) {
1526: 	linenr++;
1527: 
1528: 	if (row_empty) {
1529: 		row_empty = false;
1530: 		if (sql_types.size() != 1) {
1531: 			column = 0;
1532: 			return false;
1533: 		}
1534: 	}
1535: 
1536: 	if (column < sql_types.size() && mode != ParserMode::SNIFFING_DIALECT) {
1537: 		throw InvalidInputException("Error on line %s: expected %lld values per row, but got %d. (%s)",
1538: 		                            GetLineNumberStr(linenr, linenr_estimated).c_str(), sql_types.size(), column,
1539: 		                            options.toString());
1540: 	}
1541: 
1542: 	if (mode == ParserMode::SNIFFING_DIALECT) {
1543: 		sniffed_column_counts.push_back(column);
1544: 
1545: 		if (sniffed_column_counts.size() == options.sample_chunk_size) {
1546: 			return true;
1547: 		}
1548: 	} else {
1549: 		parse_chunk.SetCardinality(parse_chunk.size() + 1);
1550: 	}
1551: 
1552: 	if (mode == ParserMode::PARSING_HEADER) {
1553: 		return true;
1554: 	}
1555: 
1556: 	if (mode == ParserMode::SNIFFING_DATATYPES && parse_chunk.size() == options.sample_chunk_size) {
1557: 		return true;
1558: 	}
1559: 
1560: 	if (mode == ParserMode::PARSING && parse_chunk.size() == STANDARD_VECTOR_SIZE) {
1561: 		Flush(insert_chunk);
1562: 		return true;
1563: 	}
1564: 
1565: 	column = 0;
1566: 	return false;
1567: }
1568: 
1569: void BufferedCSVReader::Flush(DataChunk &insert_chunk) {
1570: 	if (parse_chunk.size() == 0) {
1571: 		return;
1572: 	}
1573: 	// convert the columns in the parsed chunk to the types of the table
1574: 	insert_chunk.SetCardinality(parse_chunk);
1575: 	for (idx_t col_idx = 0; col_idx < sql_types.size(); col_idx++) {
1576: 		if (sql_types[col_idx].id() == LogicalTypeId::VARCHAR) {
1577: 			// target type is varchar: no need to convert
1578: 			// just test that all strings are valid utf-8 strings
1579: 			auto parse_data = FlatVector::GetData<string_t>(parse_chunk.data[col_idx]);
1580: 			for (idx_t i = 0; i < parse_chunk.size(); i++) {
1581: 				if (!FlatVector::IsNull(parse_chunk.data[col_idx], i)) {
1582: 					auto s = parse_data[i];
1583: 					auto utf_type = Utf8Proc::Analyze(s.GetDataUnsafe(), s.GetSize());
1584: 					if (utf_type == UnicodeType::INVALID) {
1585: 						string col_name = to_string(col_idx);
1586: 						if (col_idx < col_names.size()) {
1587: 							col_name = "\"" + col_names[col_idx] + "\"";
1588: 						}
1589: 						throw InvalidInputException("Error in file \"%s\" between line %llu and %llu in column \"%s\": "
1590: 						                            "file is not valid UTF8. Parser options: %s",
1591: 						                            options.file_path, linenr - parse_chunk.size(), linenr, col_name,
1592: 						                            options.toString());
1593: 					}
1594: 				}
1595: 			}
1596: 			insert_chunk.data[col_idx].Reference(parse_chunk.data[col_idx]);
1597: 		} else {
1598: 			string error_message;
1599: 			bool success;
1600: 			if (options.has_format[LogicalTypeId::DATE] && sql_types[col_idx].id() == LogicalTypeId::DATE) {
1601: 				// use the date format to cast the chunk
1602: 				success = TryCastDateVector(options, parse_chunk.data[col_idx], insert_chunk.data[col_idx],
1603: 				                            parse_chunk.size(), error_message);
1604: 			} else if (options.has_format[LogicalTypeId::TIMESTAMP] &&
1605: 			           sql_types[col_idx].id() == LogicalTypeId::TIMESTAMP) {
1606: 				// use the date format to cast the chunk
1607: 				success = TryCastTimestampVector(options, parse_chunk.data[col_idx], insert_chunk.data[col_idx],
1608: 				                                 parse_chunk.size(), error_message);
1609: 			} else {
1610: 				// target type is not varchar: perform a cast
1611: 				success = VectorOperations::TryCast(parse_chunk.data[col_idx], insert_chunk.data[col_idx],
1612: 				                                    parse_chunk.size(), &error_message);
1613: 			}
1614: 			if (!success) {
1615: 				string col_name = to_string(col_idx);
1616: 				if (col_idx < col_names.size()) {
1617: 					col_name = "\"" + col_names[col_idx] + "\"";
1618: 				}
1619: 
1620: 				if (options.auto_detect) {
1621: 					throw InvalidInputException("%s in column %s, between line %llu and %llu. Parser "
1622: 					                            "options: %s. Consider either increasing the sample size "
1623: 					                            "(SAMPLE_SIZE=X [X rows] or SAMPLE_SIZE=-1 [all rows]), "
1624: 					                            "or skipping column conversion (ALL_VARCHAR=1)",
1625: 					                            error_message, col_name, linenr - parse_chunk.size() + 1, linenr,
1626: 					                            options.toString());
1627: 				} else {
1628: 					throw InvalidInputException("%s between line %llu and %llu in column %s. Parser options: %s ",
1629: 					                            error_message, linenr - parse_chunk.size(), linenr, col_name,
1630: 					                            options.toString());
1631: 				}
1632: 			}
1633: 		}
1634: 	}
1635: 	parse_chunk.Reset();
1636: }
1637: } // namespace duckdb
[end of src/execution/operator/persistent/buffered_csv_reader.cpp]
[start of src/function/table/copy_csv.cpp]
1: #include "duckdb/function/table/read_csv.hpp"
2: #include "duckdb/execution/operator/persistent/buffered_csv_reader.hpp"
3: #include "duckdb/common/serializer/buffered_serializer.hpp"
4: #include "duckdb/function/copy_function.hpp"
5: #include "duckdb/parser/parsed_data/copy_info.hpp"
6: #include "duckdb/common/string_util.hpp"
7: #include "duckdb/common/file_system.hpp"
8: #include "duckdb/common/types/string_type.hpp"
9: #include "duckdb/common/vector_operations/vector_operations.hpp"
10: #include "duckdb/function/scalar/string_functions.hpp"
11: #include "duckdb/common/windows_undefs.hpp"
12: #include <limits>
13: 
14: namespace duckdb {
15: 
16: void SubstringDetection(string &str_1, string &str_2, const string &name_str_1, const string &name_str_2) {
17: 	if (str_1.empty() || str_2.empty()) {
18: 		return;
19: 	}
20: 	if (str_1.find(str_2) != string::npos || str_2.find(str_1) != std::string::npos) {
21: 		throw BinderException("%s must not appear in the %s specification and vice versa", name_str_1, name_str_2);
22: 	}
23: }
24: 
25: static bool ParseBoolean(vector<Value> &set) {
26: 	if (set.empty()) {
27: 		// no option specified: default to true
28: 		return true;
29: 	}
30: 	if (set.size() > 1) {
31: 		throw BinderException("Expected a single argument as a boolean value (e.g. TRUE or 1)");
32: 	}
33: 	if (set[0].type() == LogicalType::FLOAT || set[0].type() == LogicalType::DOUBLE ||
34: 	    set[0].type().id() == LogicalTypeId::DECIMAL) {
35: 		throw BinderException("Expected a boolean value (e.g. TRUE or 1)");
36: 	}
37: 	return set[0].CastAs(LogicalType::BOOLEAN).value_.boolean;
38: }
39: 
40: static string ParseString(vector<Value> &set) {
41: 	if (set.size() != 1) {
42: 		// no option specified or multiple options specified
43: 		throw BinderException("Expected a single argument as a string value");
44: 	}
45: 	if (set[0].type().id() != LogicalTypeId::VARCHAR) {
46: 		throw BinderException("Expected a string argument!");
47: 	}
48: 	return set[0].GetValue<string>();
49: }
50: 
51: static int64_t ParseInteger(vector<Value> &set) {
52: 	if (set.size() != 1) {
53: 		// no option specified or multiple options specified
54: 		throw BinderException("Expected a single argument as a integer value");
55: 	}
56: 	return set[0].GetValue<int64_t>();
57: }
58: 
59: //===--------------------------------------------------------------------===//
60: // Bind
61: //===--------------------------------------------------------------------===//
62: static bool ParseBaseOption(BufferedCSVReaderOptions &options, string &loption, vector<Value> &set) {
63: 	if (StringUtil::StartsWith(loption, "delim") || StringUtil::StartsWith(loption, "sep")) {
64: 		options.delimiter = ParseString(set);
65: 		options.has_delimiter = true;
66: 		if (options.delimiter.length() == 0) {
67: 			throw BinderException("DELIM or SEP must not be empty");
68: 		}
69: 	} else if (loption == "quote") {
70: 		options.quote = ParseString(set);
71: 		options.has_quote = true;
72: 	} else if (loption == "escape") {
73: 		options.escape = ParseString(set);
74: 		options.has_escape = true;
75: 	} else if (loption == "header") {
76: 		options.header = ParseBoolean(set);
77: 		options.has_header = true;
78: 	} else if (loption == "null") {
79: 		options.null_str = ParseString(set);
80: 	} else if (loption == "encoding") {
81: 		auto encoding = StringUtil::Lower(ParseString(set));
82: 		if (encoding != "utf8" && encoding != "utf-8") {
83: 			throw BinderException("Copy is only supported for UTF-8 encoded files, ENCODING 'UTF-8'");
84: 		}
85: 	} else if (loption == "compression") {
86: 		options.compression = ParseString(set);
87: 		if (!(options.compression == "infer" || options.compression == "gzip" || options.compression == "none" ||
88: 		      options.compression.empty())) {
89: 			throw BinderException("read_csv currently only supports 'gzip' compression.");
90: 		}
91: 	} else if (loption == "skip") {
92: 		options.skip_rows = ParseInteger(set);
93: 	} else {
94: 		// unrecognized option in base CSV
95: 		return false;
96: 	}
97: 	return true;
98: }
99: 
100: void BaseCSVData::Finalize() {
101: 	// verify that the options are correct in the final pass
102: 	if (options.escape.empty()) {
103: 		options.escape = options.quote;
104: 	}
105: 	// escape and delimiter must not be substrings of each other
106: 	if (options.has_delimiter && options.has_escape) {
107: 		SubstringDetection(options.delimiter, options.escape, "DELIMITER", "ESCAPE");
108: 	}
109: 	// delimiter and quote must not be substrings of each other
110: 	if (options.has_quote && options.has_delimiter) {
111: 		SubstringDetection(options.quote, options.delimiter, "DELIMITER", "QUOTE");
112: 	}
113: 	// escape and quote must not be substrings of each other (but can be the same)
114: 	if (options.quote != options.escape && options.has_quote && options.has_escape) {
115: 		SubstringDetection(options.quote, options.escape, "QUOTE", "ESCAPE");
116: 	}
117: 	if (!options.null_str.empty()) {
118: 		// null string and delimiter must not be substrings of each other
119: 		if (options.has_delimiter) {
120: 			SubstringDetection(options.delimiter, options.null_str, "DELIMITER", "NULL");
121: 		}
122: 		// quote/escape and nullstr must not be substrings of each other
123: 		if (options.has_quote) {
124: 			SubstringDetection(options.quote, options.null_str, "QUOTE", "NULL");
125: 		}
126: 		if (options.has_escape) {
127: 			SubstringDetection(options.escape, options.null_str, "ESCAPE", "NULL");
128: 		}
129: 	}
130: }
131: 
132: static vector<bool> ParseColumnList(vector<Value> &set, vector<string> &names) {
133: 	vector<bool> result;
134: 	if (set.empty()) {
135: 		throw BinderException("Expected a column list or * as parameter");
136: 	}
137: 	if (set.size() == 1 && set[0].type().id() == LogicalTypeId::VARCHAR && set[0].GetValue<string>() == "*") {
138: 		// *, force_not_null on all columns
139: 		result.resize(names.size(), true);
140: 	} else {
141: 		// list of options: parse the list
142: 		unordered_map<string, bool> option_map;
143: 		for (idx_t i = 0; i < set.size(); i++) {
144: 			option_map[set[i].ToString()] = false;
145: 		}
146: 		result.resize(names.size(), false);
147: 		for (idx_t i = 0; i < names.size(); i++) {
148: 			auto entry = option_map.find(names[i]);
149: 			if (entry != option_map.end()) {
150: 				result[i] = true;
151: 				entry->second = true;
152: 			}
153: 		}
154: 		for (auto &entry : option_map) {
155: 			if (!entry.second) {
156: 				throw BinderException("Column %s not found in table", entry.first.c_str());
157: 			}
158: 		}
159: 	}
160: 	return result;
161: }
162: 
163: static unique_ptr<FunctionData> WriteCSVBind(ClientContext &context, CopyInfo &info, vector<string> &names,
164:                                              vector<LogicalType> &sql_types) {
165: 	auto bind_data = make_unique<WriteCSVData>(info.file_path, sql_types, names);
166: 
167: 	// check all the options in the copy info
168: 	for (auto &option : info.options) {
169: 		auto loption = StringUtil::Lower(option.first);
170: 		auto &set = option.second;
171: 		if (ParseBaseOption(bind_data->options, loption, set)) {
172: 			// parsed option in base CSV options: continue
173: 			continue;
174: 		} else if (loption == "force_quote") {
175: 			bind_data->force_quote = ParseColumnList(set, names);
176: 		} else {
177: 			throw NotImplementedException("Unrecognized option for CSV: %s", option.first.c_str());
178: 		}
179: 	}
180: 	// verify the parsed options
181: 	if (bind_data->force_quote.empty()) {
182: 		// no FORCE_QUOTE specified: initialize to false
183: 		bind_data->force_quote.resize(names.size(), false);
184: 	}
185: 	bind_data->Finalize();
186: 	bind_data->is_simple = bind_data->options.delimiter.size() == 1 && bind_data->options.escape.size() == 1 &&
187: 	                       bind_data->options.quote.size() == 1;
188: 	return move(bind_data);
189: }
190: 
191: static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, CopyInfo &info, vector<string> &expected_names,
192:                                             vector<LogicalType> &expected_types) {
193: 	auto bind_data = make_unique<ReadCSVData>();
194: 	bind_data->sql_types = expected_types;
195: 
196: 	string file_pattern = info.file_path;
197: 
198: 	auto &fs = FileSystem::GetFileSystem(context);
199: 	bind_data->files = fs.Glob(file_pattern);
200: 	if (bind_data->files.empty()) {
201: 		throw IOException("No files found that match the pattern \"%s\"", file_pattern);
202: 	}
203: 
204: 	auto &options = bind_data->options;
205: 
206: 	// check all the options in the copy info
207: 	for (auto &option : info.options) {
208: 		auto loption = StringUtil::Lower(option.first);
209: 		auto &set = option.second;
210: 		if (loption == "auto_detect") {
211: 			options.auto_detect = ParseBoolean(set);
212: 		} else if (ParseBaseOption(options, loption, set)) {
213: 			// parsed option in base CSV options: continue
214: 			continue;
215: 		} else if (loption == "sample_size") {
216: 			int64_t sample_size = ParseInteger(set);
217: 			if (sample_size < 1 && sample_size != -1) {
218: 				throw BinderException("Unsupported parameter for SAMPLE_SIZE: cannot be smaller than 1");
219: 			}
220: 			if (sample_size == -1) {
221: 				options.sample_chunks = std::numeric_limits<uint64_t>::max();
222: 				options.sample_chunk_size = STANDARD_VECTOR_SIZE;
223: 			} else if (sample_size <= STANDARD_VECTOR_SIZE) {
224: 				options.sample_chunk_size = sample_size;
225: 				options.sample_chunks = 1;
226: 			} else {
227: 				options.sample_chunk_size = STANDARD_VECTOR_SIZE;
228: 				options.sample_chunks = sample_size / STANDARD_VECTOR_SIZE;
229: 			}
230: 		} else if (loption == "sample_chunk_size") {
231: 			options.sample_chunk_size = ParseInteger(set);
232: 			if (options.sample_chunk_size > STANDARD_VECTOR_SIZE) {
233: 				throw BinderException(
234: 				    "Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be bigger than STANDARD_VECTOR_SIZE %d",
235: 				    STANDARD_VECTOR_SIZE);
236: 			} else if (options.sample_chunk_size < 1) {
237: 				throw BinderException("Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be smaller than 1");
238: 			}
239: 		} else if (loption == "sample_chunks") {
240: 			options.sample_chunks = ParseInteger(set);
241: 			if (options.sample_chunks < 1) {
242: 				throw BinderException("Unsupported parameter for SAMPLE_CHUNKS: cannot be smaller than 1");
243: 			}
244: 		} else if (loption == "force_not_null") {
245: 			options.force_not_null = ParseColumnList(set, expected_names);
246: 		} else if (loption == "date_format" || loption == "dateformat") {
247: 			string format = ParseString(set);
248: 			auto &date_format = options.date_format[LogicalTypeId::DATE];
249: 			string error = StrTimeFormat::ParseFormatSpecifier(format, date_format);
250: 			date_format.format_specifier = format;
251: 			if (!error.empty()) {
252: 				throw InvalidInputException("Could not parse DATEFORMAT: %s", error.c_str());
253: 			}
254: 			options.has_format[LogicalTypeId::DATE] = true;
255: 		} else if (loption == "timestamp_format" || loption == "timestampformat") {
256: 			string format = ParseString(set);
257: 			auto &timestamp_format = options.date_format[LogicalTypeId::TIMESTAMP];
258: 			string error = StrTimeFormat::ParseFormatSpecifier(format, timestamp_format);
259: 			timestamp_format.format_specifier = format;
260: 			if (!error.empty()) {
261: 				throw InvalidInputException("Could not parse TIMESTAMPFORMAT: %s", error.c_str());
262: 			}
263: 			options.has_format[LogicalTypeId::TIMESTAMP] = true;
264: 		} else {
265: 			throw NotImplementedException("Unrecognized option for CSV: %s", option.first.c_str());
266: 		}
267: 	}
268: 	// verify the parsed options
269: 	if (options.force_not_null.empty()) {
270: 		// no FORCE_QUOTE specified: initialize to false
271: 		options.force_not_null.resize(expected_types.size(), false);
272: 	}
273: 	bind_data->Finalize();
274: 	return move(bind_data);
275: }
276: 
277: //===--------------------------------------------------------------------===//
278: // Helper writing functions
279: //===--------------------------------------------------------------------===//
280: static string AddEscapes(string &to_be_escaped, const string &escape, const string &val) {
281: 	idx_t i = 0;
282: 	string new_val = "";
283: 	idx_t found = val.find(to_be_escaped);
284: 
285: 	while (found != string::npos) {
286: 		while (i < found) {
287: 			new_val += val[i];
288: 			i++;
289: 		}
290: 		new_val += escape;
291: 		found = val.find(to_be_escaped, found + escape.length());
292: 	}
293: 	while (i < val.length()) {
294: 		new_val += val[i];
295: 		i++;
296: 	}
297: 	return new_val;
298: }
299: 
300: static bool RequiresQuotes(WriteCSVData &csv_data, const char *str, idx_t len) {
301: 	auto &options = csv_data.options;
302: 	// check if the string is equal to the null string
303: 	if (len == options.null_str.size() && memcmp(str, options.null_str.c_str(), len) == 0) {
304: 		return true;
305: 	}
306: 	if (csv_data.is_simple) {
307: 		// simple CSV: check for newlines, quotes and delimiter all at once
308: 		for (idx_t i = 0; i < len; i++) {
309: 			if (str[i] == '\n' || str[i] == '\r' || str[i] == options.quote[0] || str[i] == options.delimiter[0]) {
310: 				// newline, write a quoted string
311: 				return true;
312: 			}
313: 		}
314: 		// no newline, quote or delimiter in the string
315: 		// no quoting or escaping necessary
316: 		return false;
317: 	} else {
318: 		// CSV with complex quotes/delimiter (multiple bytes)
319: 
320: 		// first check for \n, \r, \n\r in string
321: 		for (idx_t i = 0; i < len; i++) {
322: 			if (str[i] == '\n' || str[i] == '\r') {
323: 				// newline, write a quoted string
324: 				return true;
325: 			}
326: 		}
327: 
328: 		// check for delimiter
329: 		if (ContainsFun::Find((const unsigned char *)str, len, (const unsigned char *)options.delimiter.c_str(),
330: 		                      options.delimiter.size()) != INVALID_INDEX) {
331: 			return true;
332: 		}
333: 		// check for quote
334: 		if (ContainsFun::Find((const unsigned char *)str, len, (const unsigned char *)options.quote.c_str(),
335: 		                      options.quote.size()) != INVALID_INDEX) {
336: 			return true;
337: 		}
338: 		return false;
339: 	}
340: }
341: 
342: static void WriteQuotedString(Serializer &serializer, WriteCSVData &csv_data, const char *str, idx_t len,
343:                               bool force_quote) {
344: 	auto &options = csv_data.options;
345: 	if (!force_quote) {
346: 		// force quote is disabled: check if we need to add quotes anyway
347: 		force_quote = RequiresQuotes(csv_data, str, len);
348: 	}
349: 	if (force_quote) {
350: 		// quoting is enabled: we might need to escape things in the string
351: 		bool requires_escape = false;
352: 		if (csv_data.is_simple) {
353: 			// simple CSV
354: 			// do a single loop to check for a quote or escape value
355: 			for (idx_t i = 0; i < len; i++) {
356: 				if (str[i] == options.quote[0] || str[i] == options.escape[0]) {
357: 					requires_escape = true;
358: 					break;
359: 				}
360: 			}
361: 		} else {
362: 			// complex CSV
363: 			// check for quote or escape separately
364: 			if (ContainsFun::Find((const unsigned char *)str, len, (const unsigned char *)options.quote.c_str(),
365: 			                      options.quote.size()) != INVALID_INDEX) {
366: 				requires_escape = true;
367: 			} else if (ContainsFun::Find((const unsigned char *)str, len, (const unsigned char *)options.escape.c_str(),
368: 			                             options.escape.size()) != INVALID_INDEX) {
369: 				requires_escape = true;
370: 			}
371: 		}
372: 		if (!requires_escape) {
373: 			// fast path: no need to escape anything
374: 			serializer.WriteBufferData(options.quote);
375: 			serializer.WriteData((const_data_ptr_t)str, len);
376: 			serializer.WriteBufferData(options.quote);
377: 			return;
378: 		}
379: 
380: 		// slow path: need to add escapes
381: 		string new_val(str, len);
382: 		new_val = AddEscapes(options.escape, options.escape, new_val);
383: 		if (options.escape != options.quote) {
384: 			// need to escape quotes separately
385: 			new_val = AddEscapes(options.quote, options.escape, new_val);
386: 		}
387: 		serializer.WriteBufferData(options.quote);
388: 		serializer.WriteBufferData(new_val);
389: 		serializer.WriteBufferData(options.quote);
390: 	} else {
391: 		serializer.WriteData((const_data_ptr_t)str, len);
392: 	}
393: }
394: 
395: //===--------------------------------------------------------------------===//
396: // Sink
397: //===--------------------------------------------------------------------===//
398: struct LocalReadCSVData : public LocalFunctionData {
399: 	//! The thread-local buffer to write data into
400: 	BufferedSerializer serializer;
401: 	//! A chunk with VARCHAR columns to cast intermediates into
402: 	DataChunk cast_chunk;
403: };
404: 
405: struct GlobalWriteCSVData : public GlobalFunctionData {
406: 	GlobalWriteCSVData(FileSystem &fs, const string &file_path, FileOpener *opener) : fs(fs) {
407: 		handle = fs.OpenFile(file_path, FileFlags::FILE_FLAGS_WRITE | FileFlags::FILE_FLAGS_FILE_CREATE_NEW,
408: 		                     FileLockType::WRITE_LOCK, FileSystem::DEFAULT_COMPRESSION, opener);
409: 	}
410: 
411: 	void WriteData(const_data_ptr_t data, idx_t size) {
412: 		lock_guard<mutex> flock(lock);
413: 		fs.Write(*handle, (void *)data, size);
414: 	}
415: 
416: 	FileSystem &fs;
417: 	//! The mutex for writing to the physical file
418: 	mutex lock;
419: 	//! The file handle to write to
420: 	unique_ptr<FileHandle> handle;
421: };
422: 
423: static unique_ptr<LocalFunctionData> WriteCSVInitializeLocal(ClientContext &context, FunctionData &bind_data) {
424: 	auto &csv_data = (WriteCSVData &)bind_data;
425: 	auto local_data = make_unique<LocalReadCSVData>();
426: 
427: 	// create the chunk with VARCHAR types
428: 	vector<LogicalType> types;
429: 	types.resize(csv_data.names.size(), LogicalType::VARCHAR);
430: 
431: 	local_data->cast_chunk.Initialize(types);
432: 	return move(local_data);
433: }
434: 
435: static unique_ptr<GlobalFunctionData> WriteCSVInitializeGlobal(ClientContext &context, FunctionData &bind_data) {
436: 	auto &csv_data = (WriteCSVData &)bind_data;
437: 	auto &options = csv_data.options;
438: 	auto global_data = make_unique<GlobalWriteCSVData>(FileSystem::GetFileSystem(context), csv_data.files[0],
439: 	                                                   FileSystem::GetFileOpener(context));
440: 
441: 	if (options.header) {
442: 		BufferedSerializer serializer;
443: 		// write the header line to the file
444: 		for (idx_t i = 0; i < csv_data.names.size(); i++) {
445: 			if (i != 0) {
446: 				serializer.WriteBufferData(options.delimiter);
447: 			}
448: 			WriteQuotedString(serializer, csv_data, csv_data.names[i].c_str(), csv_data.names[i].size(), false);
449: 		}
450: 		serializer.WriteBufferData(csv_data.newline);
451: 
452: 		global_data->WriteData(serializer.blob.data.get(), serializer.blob.size);
453: 	}
454: 	return move(global_data);
455: }
456: 
457: static void WriteCSVSink(ClientContext &context, FunctionData &bind_data, GlobalFunctionData &gstate,
458:                          LocalFunctionData &lstate, DataChunk &input) {
459: 	auto &csv_data = (WriteCSVData &)bind_data;
460: 	auto &options = csv_data.options;
461: 	auto &local_data = (LocalReadCSVData &)lstate;
462: 	auto &global_state = (GlobalWriteCSVData &)gstate;
463: 
464: 	// write data into the local buffer
465: 
466: 	// first cast the columns of the chunk to varchar
467: 	auto &cast_chunk = local_data.cast_chunk;
468: 	cast_chunk.SetCardinality(input);
469: 	for (idx_t col_idx = 0; col_idx < input.ColumnCount(); col_idx++) {
470: 		if (csv_data.sql_types[col_idx].id() == LogicalTypeId::VARCHAR) {
471: 			// VARCHAR, just create a reference
472: 			cast_chunk.data[col_idx].Reference(input.data[col_idx]);
473: 		} else {
474: 			// non varchar column, perform the cast
475: 			VectorOperations::Cast(input.data[col_idx], cast_chunk.data[col_idx], input.size());
476: 		}
477: 	}
478: 
479: 	cast_chunk.Normalify();
480: 	auto &writer = local_data.serializer;
481: 	// now loop over the vectors and output the values
482: 	for (idx_t row_idx = 0; row_idx < cast_chunk.size(); row_idx++) {
483: 		// write values
484: 		for (idx_t col_idx = 0; col_idx < cast_chunk.ColumnCount(); col_idx++) {
485: 			if (col_idx != 0) {
486: 				writer.WriteBufferData(options.delimiter);
487: 			}
488: 			if (FlatVector::IsNull(cast_chunk.data[col_idx], row_idx)) {
489: 				// write null value
490: 				writer.WriteBufferData(options.null_str);
491: 				continue;
492: 			}
493: 
494: 			// non-null value, fetch the string value from the cast chunk
495: 			auto str_data = FlatVector::GetData<string_t>(cast_chunk.data[col_idx]);
496: 			auto str_value = str_data[row_idx];
497: 			// FIXME: we could gain some performance here by checking for certain types if they ever require quotes
498: 			// (e.g. integers only require quotes if the delimiter is a number, decimals only require quotes if the
499: 			// delimiter is a number or "." character)
500: 			WriteQuotedString(writer, csv_data, str_value.GetDataUnsafe(), str_value.GetSize(),
501: 			                  csv_data.force_quote[col_idx]);
502: 		}
503: 		writer.WriteBufferData(csv_data.newline);
504: 	}
505: 	// check if we should flush what we have currently written
506: 	if (writer.blob.size >= csv_data.flush_size) {
507: 		global_state.WriteData(writer.blob.data.get(), writer.blob.size);
508: 		writer.Reset();
509: 	}
510: }
511: 
512: //===--------------------------------------------------------------------===//
513: // Combine
514: //===--------------------------------------------------------------------===//
515: static void WriteCSVCombine(ClientContext &context, FunctionData &bind_data, GlobalFunctionData &gstate,
516:                             LocalFunctionData &lstate) {
517: 	auto &local_data = (LocalReadCSVData &)lstate;
518: 	auto &global_state = (GlobalWriteCSVData &)gstate;
519: 	auto &writer = local_data.serializer;
520: 	// flush the local writer
521: 	if (writer.blob.size > 0) {
522: 		global_state.WriteData(writer.blob.data.get(), writer.blob.size);
523: 		writer.Reset();
524: 	}
525: }
526: 
527: void CSVCopyFunction::RegisterFunction(BuiltinFunctions &set) {
528: 	CopyFunction info("csv");
529: 	info.copy_to_bind = WriteCSVBind;
530: 	info.copy_to_initialize_local = WriteCSVInitializeLocal;
531: 	info.copy_to_initialize_global = WriteCSVInitializeGlobal;
532: 	info.copy_to_sink = WriteCSVSink;
533: 	info.copy_to_combine = WriteCSVCombine;
534: 
535: 	info.copy_from_bind = ReadCSVBind;
536: 	info.copy_from_function = ReadCSVTableFunction::GetFunction();
537: 
538: 	info.extension = "csv";
539: 
540: 	set.AddFunction(info);
541: }
542: 
543: } // namespace duckdb
[end of src/function/table/copy_csv.cpp]
[start of src/function/table/read_csv.cpp]
1: #include "duckdb/function/table/read_csv.hpp"
2: #include "duckdb/execution/operator/persistent/buffered_csv_reader.hpp"
3: #include "duckdb/function/function_set.hpp"
4: #include "duckdb/main/client_context.hpp"
5: #include "duckdb/main/database.hpp"
6: #include "duckdb/common/string_util.hpp"
7: #include "duckdb/main/config.hpp"
8: #include "duckdb/parser/expression/constant_expression.hpp"
9: #include "duckdb/parser/expression/function_expression.hpp"
10: #include "duckdb/parser/tableref/table_function_ref.hpp"
11: #include "duckdb/common/windows_undefs.hpp"
12: 
13: #include <limits>
14: 
15: namespace duckdb {
16: 
17: static unique_ptr<FunctionData> ReadCSVBind(ClientContext &context, vector<Value> &inputs,
18:                                             unordered_map<string, Value> &named_parameters,
19:                                             vector<LogicalType> &input_table_types, vector<string> &input_table_names,
20:                                             vector<LogicalType> &return_types, vector<string> &names) {
21: 	auto result = make_unique<ReadCSVData>();
22: 	auto &options = result->options;
23: 
24: 	string file_pattern = inputs[0].str_value;
25: 
26: 	auto &fs = FileSystem::GetFileSystem(context);
27: 	result->files = fs.Glob(file_pattern);
28: 	if (result->files.empty()) {
29: 		throw IOException("No files found that match the pattern \"%s\"", file_pattern);
30: 	}
31: 
32: 	for (auto &kv : named_parameters) {
33: 		if (kv.first == "auto_detect") {
34: 			options.auto_detect = kv.second.value_.boolean;
35: 		} else if (kv.first == "sep" || kv.first == "delim") {
36: 			options.delimiter = kv.second.str_value;
37: 			options.has_delimiter = true;
38: 		} else if (kv.first == "header") {
39: 			options.header = kv.second.value_.boolean;
40: 			options.has_header = true;
41: 		} else if (kv.first == "quote") {
42: 			options.quote = kv.second.str_value;
43: 			options.has_quote = true;
44: 		} else if (kv.first == "escape") {
45: 			options.escape = kv.second.str_value;
46: 			options.has_escape = true;
47: 		} else if (kv.first == "nullstr") {
48: 			options.null_str = kv.second.str_value;
49: 		} else if (kv.first == "sample_size") {
50: 			int64_t sample_size = kv.second.GetValue<int64_t>();
51: 			if (sample_size < 1 && sample_size != -1) {
52: 				throw BinderException("Unsupported parameter for SAMPLE_SIZE: cannot be smaller than 1");
53: 			}
54: 			if (sample_size == -1) {
55: 				options.sample_chunks = std::numeric_limits<uint64_t>::max();
56: 				options.sample_chunk_size = STANDARD_VECTOR_SIZE;
57: 			} else if (sample_size <= STANDARD_VECTOR_SIZE) {
58: 				options.sample_chunk_size = sample_size;
59: 				options.sample_chunks = 1;
60: 			} else {
61: 				options.sample_chunk_size = STANDARD_VECTOR_SIZE;
62: 				options.sample_chunks = sample_size / STANDARD_VECTOR_SIZE;
63: 			}
64: 		} else if (kv.first == "sample_chunk_size") {
65: 			options.sample_chunk_size = kv.second.GetValue<int64_t>();
66: 			if (options.sample_chunk_size > STANDARD_VECTOR_SIZE) {
67: 				throw BinderException(
68: 				    "Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be bigger than STANDARD_VECTOR_SIZE %d",
69: 				    STANDARD_VECTOR_SIZE);
70: 			} else if (options.sample_chunk_size < 1) {
71: 				throw BinderException("Unsupported parameter for SAMPLE_CHUNK_SIZE: cannot be smaller than 1");
72: 			}
73: 		} else if (kv.first == "sample_chunks") {
74: 			options.sample_chunks = kv.second.GetValue<int64_t>();
75: 			if (options.sample_chunks < 1) {
76: 				throw BinderException("Unsupported parameter for SAMPLE_CHUNKS: cannot be smaller than 1");
77: 			}
78: 		} else if (kv.first == "all_varchar") {
79: 			options.all_varchar = kv.second.value_.boolean;
80: 		} else if (kv.first == "dateformat") {
81: 			options.has_format[LogicalTypeId::DATE] = true;
82: 			auto &date_format = options.date_format[LogicalTypeId::DATE];
83: 			date_format.format_specifier = kv.second.str_value;
84: 			string error = StrTimeFormat::ParseFormatSpecifier(date_format.format_specifier, date_format);
85: 			if (!error.empty()) {
86: 				throw InvalidInputException("Could not parse DATEFORMAT: %s", error.c_str());
87: 			}
88: 		} else if (kv.first == "timestampformat") {
89: 			options.has_format[LogicalTypeId::TIMESTAMP] = true;
90: 			auto &timestamp_format = options.date_format[LogicalTypeId::TIMESTAMP];
91: 			timestamp_format.format_specifier = kv.second.str_value;
92: 			string error = StrTimeFormat::ParseFormatSpecifier(timestamp_format.format_specifier, timestamp_format);
93: 			if (!error.empty()) {
94: 				throw InvalidInputException("Could not parse TIMESTAMPFORMAT: %s", error.c_str());
95: 			}
96: 		} else if (kv.first == "normalize_names") {
97: 			options.normalize_names = kv.second.value_.boolean;
98: 		} else if (kv.first == "columns") {
99: 			auto &child_type = kv.second.type();
100: 			if (child_type.id() != LogicalTypeId::STRUCT) {
101: 				throw BinderException("read_csv columns requires a a struct as input");
102: 			}
103: 			D_ASSERT(StructType::GetChildCount(child_type) == kv.second.struct_value.size());
104: 			for (idx_t i = 0; i < kv.second.struct_value.size(); i++) {
105: 				auto &name = StructType::GetChildName(child_type, i);
106: 				auto &val = kv.second.struct_value[i];
107: 				names.push_back(name);
108: 				if (val.type().id() != LogicalTypeId::VARCHAR) {
109: 					throw BinderException("read_csv requires a type specification as string");
110: 				}
111: 				return_types.emplace_back(TransformStringToLogicalType(val.str_value.c_str()));
112: 			}
113: 			if (names.empty()) {
114: 				throw BinderException("read_csv requires at least a single column as input!");
115: 			}
116: 		} else if (kv.first == "compression") {
117: 			options.compression = kv.second.str_value;
118: 		} else if (kv.first == "filename") {
119: 			result->include_file_name = kv.second.value_.boolean;
120: 		} else if (kv.first == "skip") {
121: 			options.skip_rows = kv.second.GetValue<int64_t>();
122: 		}
123: 	}
124: 	if (!options.auto_detect && return_types.empty()) {
125: 		throw BinderException("read_csv requires columns to be specified. Use read_csv_auto or set read_csv(..., "
126: 		                      "AUTO_DETECT=TRUE) to automatically guess columns.");
127: 	}
128: 	if (!(options.compression == "infer" || options.compression == "gzip" || options.compression == "none" ||
129: 	      options.compression.empty())) {
130: 		throw BinderException("read_csv currently only supports 'gzip' compression.");
131: 	}
132: 	if (options.auto_detect) {
133: 		options.file_path = result->files[0];
134: 		auto initial_reader = make_unique<BufferedCSVReader>(context, options);
135: 
136: 		return_types.assign(initial_reader->sql_types.begin(), initial_reader->sql_types.end());
137: 		if (names.empty()) {
138: 			names.assign(initial_reader->col_names.begin(), initial_reader->col_names.end());
139: 		} else {
140: 			D_ASSERT(return_types.size() == names.size());
141: 		}
142: 		result->initial_reader = move(initial_reader);
143: 	} else {
144: 		result->sql_types = return_types;
145: 		D_ASSERT(return_types.size() == names.size());
146: 	}
147: 	if (result->include_file_name) {
148: 		return_types.push_back(LogicalType::VARCHAR);
149: 		names.emplace_back("filename");
150: 	}
151: 	return move(result);
152: }
153: 
154: struct ReadCSVOperatorData : public FunctionOperatorData {
155: 	//! The CSV reader
156: 	unique_ptr<BufferedCSVReader> csv_reader;
157: 	//! The index of the next file to read (i.e. current file + 1)
158: 	idx_t file_index;
159: };
160: 
161: static unique_ptr<FunctionOperatorData> ReadCSVInit(ClientContext &context, const FunctionData *bind_data_p,
162:                                                     const vector<column_t> &column_ids,
163:                                                     TableFilterCollection *filters) {
164: 	auto &bind_data = (ReadCSVData &)*bind_data_p;
165: 	auto result = make_unique<ReadCSVOperatorData>();
166: 	if (bind_data.initial_reader) {
167: 		result->csv_reader = move(bind_data.initial_reader);
168: 	} else {
169: 		bind_data.options.file_path = bind_data.files[0];
170: 		result->csv_reader = make_unique<BufferedCSVReader>(context, bind_data.options, bind_data.sql_types);
171: 	}
172: 	bind_data.bytes_read = 0;
173: 	bind_data.file_size = result->csv_reader->file_size;
174: 	result->file_index = 1;
175: 	return move(result);
176: }
177: 
178: static unique_ptr<FunctionData> ReadCSVAutoBind(ClientContext &context, vector<Value> &inputs,
179:                                                 unordered_map<string, Value> &named_parameters,
180:                                                 vector<LogicalType> &input_table_types,
181:                                                 vector<string> &input_table_names, vector<LogicalType> &return_types,
182:                                                 vector<string> &names) {
183: 	named_parameters["auto_detect"] = Value::BOOLEAN(true);
184: 	return ReadCSVBind(context, inputs, named_parameters, input_table_types, input_table_names, return_types, names);
185: }
186: 
187: static void ReadCSVFunction(ClientContext &context, const FunctionData *bind_data_p,
188:                             FunctionOperatorData *operator_state, DataChunk *input, DataChunk &output) {
189: 	auto &bind_data = (ReadCSVData &)*bind_data_p;
190: 	auto &data = (ReadCSVOperatorData &)*operator_state;
191: 	do {
192: 		data.csv_reader->ParseCSV(output);
193: 		bind_data.bytes_read = data.csv_reader->bytes_in_chunk;
194: 		if (output.size() == 0 && data.file_index < bind_data.files.size()) {
195: 			// exhausted this file, but we have more files we can read
196: 			// open the next file and increment the counter
197: 			bind_data.options.file_path = bind_data.files[data.file_index];
198: 			data.csv_reader = make_unique<BufferedCSVReader>(context, bind_data.options, data.csv_reader->sql_types);
199: 			data.file_index++;
200: 		} else {
201: 			break;
202: 		}
203: 	} while (true);
204: 	if (bind_data.include_file_name) {
205: 		auto &col = output.data.back();
206: 		col.SetValue(0, Value(data.csv_reader->options.file_path));
207: 		col.SetVectorType(VectorType::CONSTANT_VECTOR);
208: 	}
209: }
210: 
211: static void ReadCSVAddNamedParameters(TableFunction &table_function) {
212: 	table_function.named_parameters["sep"] = LogicalType::VARCHAR;
213: 	table_function.named_parameters["delim"] = LogicalType::VARCHAR;
214: 	table_function.named_parameters["quote"] = LogicalType::VARCHAR;
215: 	table_function.named_parameters["escape"] = LogicalType::VARCHAR;
216: 	table_function.named_parameters["nullstr"] = LogicalType::VARCHAR;
217: 	table_function.named_parameters["columns"] = LogicalType::ANY;
218: 	table_function.named_parameters["header"] = LogicalType::BOOLEAN;
219: 	table_function.named_parameters["auto_detect"] = LogicalType::BOOLEAN;
220: 	table_function.named_parameters["sample_size"] = LogicalType::BIGINT;
221: 	table_function.named_parameters["sample_chunk_size"] = LogicalType::BIGINT;
222: 	table_function.named_parameters["sample_chunks"] = LogicalType::BIGINT;
223: 	table_function.named_parameters["all_varchar"] = LogicalType::BOOLEAN;
224: 	table_function.named_parameters["dateformat"] = LogicalType::VARCHAR;
225: 	table_function.named_parameters["timestampformat"] = LogicalType::VARCHAR;
226: 	table_function.named_parameters["normalize_names"] = LogicalType::BOOLEAN;
227: 	table_function.named_parameters["compression"] = LogicalType::VARCHAR;
228: 	table_function.named_parameters["filename"] = LogicalType::BOOLEAN;
229: 	table_function.named_parameters["skip"] = LogicalType::BIGINT;
230: }
231: 
232: int CSVReaderProgress(ClientContext &context, const FunctionData *bind_data_p) {
233: 	auto &bind_data = (ReadCSVData &)*bind_data_p;
234: 	if (bind_data.file_size == 0) {
235: 		return 100;
236: 	}
237: 	auto percentage = bind_data.bytes_read * 100 / bind_data.file_size;
238: 	return percentage;
239: }
240: 
241: TableFunction ReadCSVTableFunction::GetFunction() {
242: 	TableFunction read_csv("read_csv", {LogicalType::VARCHAR}, ReadCSVFunction, ReadCSVBind, ReadCSVInit);
243: 	read_csv.table_scan_progress = CSVReaderProgress;
244: 	ReadCSVAddNamedParameters(read_csv);
245: 	return read_csv;
246: }
247: 
248: void ReadCSVTableFunction::RegisterFunction(BuiltinFunctions &set) {
249: 	set.AddFunction(ReadCSVTableFunction::GetFunction());
250: 
251: 	TableFunction read_csv_auto("read_csv_auto", {LogicalType::VARCHAR}, ReadCSVFunction, ReadCSVAutoBind, ReadCSVInit);
252: 	read_csv_auto.table_scan_progress = CSVReaderProgress;
253: 	ReadCSVAddNamedParameters(read_csv_auto);
254: 	set.AddFunction(read_csv_auto);
255: }
256: 
257: unique_ptr<TableFunctionRef> ReadCSVReplacement(const string &table_name, void *data) {
258: 	auto lower_name = StringUtil::Lower(table_name);
259: 	if (!StringUtil::EndsWith(lower_name, ".csv") && !StringUtil::EndsWith(lower_name, ".tsv") &&
260: 	    !StringUtil::EndsWith(lower_name, ".csv.gz")) {
261: 		return nullptr;
262: 	}
263: 	auto table_function = make_unique<TableFunctionRef>();
264: 	vector<unique_ptr<ParsedExpression>> children;
265: 	children.push_back(make_unique<ConstantExpression>(Value(table_name)));
266: 	table_function->function = make_unique<FunctionExpression>("read_csv_auto", move(children));
267: 	return table_function;
268: }
269: 
270: void BuiltinFunctions::RegisterReadFunctions() {
271: 	CSVCopyFunction::RegisterFunction(*this);
272: 	ReadCSVTableFunction::RegisterFunction(*this);
273: 
274: 	auto &config = DBConfig::GetConfig(context);
275: 	config.replacement_scans.emplace_back(ReadCSVReplacement);
276: }
277: 
278: } // namespace duckdb
[end of src/function/table/read_csv.cpp]
[start of src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp]
1: //===----------------------------------------------------------------------===//
2: //                         DuckDB
3: //
4: // duckdb/execution/operator/persistent/buffered_csv_reader.hpp
5: //
6: //
7: //===----------------------------------------------------------------------===//
8: 
9: #pragma once
10: 
11: #include "duckdb/execution/physical_operator.hpp"
12: #include "duckdb/parser/parsed_data/copy_info.hpp"
13: #include "duckdb/function/scalar/strftime.hpp"
14: #include "duckdb/common/types/chunk_collection.hpp"
15: #include "duckdb/common/enums/file_compression_type.hpp"
16: #include "duckdb/common/map.hpp"
17: 
18: #include <sstream>
19: #include <queue>
20: 
21: namespace duckdb {
22: struct CopyInfo;
23: struct FileHandle;
24: struct StrpTimeFormat;
25: 
26: class FileOpener;
27: class FileSystem;
28: 
29: //! The shifts array allows for linear searching of multi-byte values. For each position, it determines the next
30: //! position given that we encounter a byte with the given value.
31: /*! For example, if we have a string "ABAC", the shifts array will have the following values:
32:  *  [0] --> ['A'] = 1, all others = 0
33:  *  [1] --> ['B'] = 2, ['A'] = 1, all others = 0
34:  *  [2] --> ['A'] = 3, all others = 0
35:  *  [3] --> ['C'] = 4 (match), 'B' = 2, 'A' = 1, all others = 0
36:  * Suppose we then search in the following string "ABABAC", our progression will be as follows:
37:  * 'A' -> [1], 'B' -> [2], 'A' -> [3], 'B' -> [2], 'A' -> [3], 'C' -> [4] (match!)
38:  */
39: struct TextSearchShiftArray {
40: 	TextSearchShiftArray();
41: 	explicit TextSearchShiftArray(string search_term);
42: 
43: 	inline bool Match(uint8_t &position, uint8_t byte_value) {
44: 		if (position >= length) {
45: 			return false;
46: 		}
47: 		position = shifts[position * 255 + byte_value];
48: 		return position == length;
49: 	}
50: 
51: 	idx_t length;
52: 	unique_ptr<uint8_t[]> shifts;
53: };
54: 
55: struct BufferedCSVReaderOptions {
56: 	//! The file path of the CSV file to read
57: 	string file_path;
58: 	//! Whether file is compressed or not, and if so which compression type
59: 	//! ("infer" (default; infer from file extention), "gzip", "none")
60: 	string compression = "infer";
61: 	//! Whether or not to automatically detect dialect and datatypes
62: 	bool auto_detect = false;
63: 	//! Whether or not a delimiter was defined by the user
64: 	bool has_delimiter = false;
65: 	//! Delimiter to separate columns within each line
66: 	string delimiter = ",";
67: 	//! Whether or not a quote sign was defined by the user
68: 	bool has_quote = false;
69: 	//! Quote used for columns that contain reserved characters, e.g., delimiter
70: 	string quote = "\"";
71: 	//! Whether or not an escape character was defined by the user
72: 	bool has_escape = false;
73: 	//! Escape character to escape quote character
74: 	string escape;
75: 	//! Whether or not a header information was given by the user
76: 	bool has_header = false;
77: 	//! Whether or not the file has a header line
78: 	bool header = false;
79: 	//! Whether or not header names shall be normalized
80: 	bool normalize_names = false;
81: 	//! How many leading rows to skip
82: 	idx_t skip_rows = 0;
83: 	//! Expected number of columns
84: 	idx_t num_cols = 0;
85: 	//! Specifies the string that represents a null value
86: 	string null_str;
87: 	//! True, if column with that index must skip null check
88: 	vector<bool> force_not_null;
89: 	//! Size of sample chunk used for dialect and type detection
90: 	idx_t sample_chunk_size = STANDARD_VECTOR_SIZE;
91: 	//! Number of sample chunks used for type detection
92: 	idx_t sample_chunks = 10;
93: 	//! Number of samples to buffer
94: 	idx_t buffer_size = STANDARD_VECTOR_SIZE * 100;
95: 	//! Consider all columns to be of type varchar
96: 	bool all_varchar = false;
97: 	//! The date format to use (if any is specified)
98: 	std::map<LogicalTypeId, StrpTimeFormat> date_format = {{LogicalTypeId::DATE, {}}, {LogicalTypeId::TIMESTAMP, {}}};
99: 	//! Whether or not a type format is specified
100: 	std::map<LogicalTypeId, bool> has_format = {{LogicalTypeId::DATE, false}, {LogicalTypeId::TIMESTAMP, false}};
101: 
102: 	std::string toString() const {
103: 		return "DELIMITER='" + delimiter + (has_delimiter ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
104: 		       ", QUOTE='" + quote + (has_quote ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
105: 		       ", ESCAPE='" + escape + (has_escape ? "'" : (auto_detect ? "' (auto detected)" : "' (default)")) +
106: 		       ", HEADER=" + std::to_string(header) +
107: 		       (has_header ? "" : (auto_detect ? " (auto detected)" : "' (default)")) +
108: 		       ", SAMPLE_SIZE=" + std::to_string(sample_chunk_size * sample_chunks) +
109: 		       ", ALL_VARCHAR=" + std::to_string(all_varchar);
110: 	}
111: };
112: 
113: enum class ParserMode : uint8_t { PARSING = 0, SNIFFING_DIALECT = 1, SNIFFING_DATATYPES = 2, PARSING_HEADER = 3 };
114: 
115: //! Buffered CSV reader is a class that reads values from a stream and parses them as a CSV file
116: class BufferedCSVReader {
117: 	//! Initial buffer read size; can be extended for long lines
118: 	static constexpr idx_t INITIAL_BUFFER_SIZE = 16384;
119: 	//! Maximum CSV line size: specified because if we reach this amount, we likely have the wrong delimiters
120: 	static constexpr idx_t MAXIMUM_CSV_LINE_SIZE = 1048576;
121: 	ParserMode mode;
122: 
123: public:
124: 	BufferedCSVReader(ClientContext &context, BufferedCSVReaderOptions options,
125: 	                  const vector<LogicalType> &requested_types = vector<LogicalType>());
126: 
127: 	BufferedCSVReader(FileSystem &fs, FileOpener *opener, BufferedCSVReaderOptions options,
128: 	                  const vector<LogicalType> &requested_types = vector<LogicalType>());
129: 
130: 	FileSystem &fs;
131: 	FileOpener *opener;
132: 	BufferedCSVReaderOptions options;
133: 	vector<LogicalType> sql_types;
134: 	vector<string> col_names;
135: 	unique_ptr<FileHandle> file_handle;
136: 	bool plain_file_source = false;
137: 	idx_t file_size = 0;
138: 	FileCompressionType compression = FileCompressionType::UNCOMPRESSED;
139: 
140: 	unique_ptr<char[]> buffer;
141: 	idx_t buffer_size;
142: 	idx_t position;
143: 	idx_t start = 0;
144: 
145: 	idx_t linenr = 0;
146: 	bool linenr_estimated = false;
147: 
148: 	vector<idx_t> sniffed_column_counts;
149: 	bool row_empty = false;
150: 	idx_t sample_chunk_idx = 0;
151: 	bool jumping_samples = false;
152: 	bool end_of_file_reached = false;
153: 	bool bom_checked = false;
154: 
155: 	idx_t bytes_in_chunk = 0;
156: 	double bytes_per_line_avg = 0;
157: 
158: 	vector<unique_ptr<char[]>> cached_buffers;
159: 
160: 	TextSearchShiftArray delimiter_search, escape_search, quote_search;
161: 
162: 	DataChunk parse_chunk;
163: 
164: 	std::queue<unique_ptr<DataChunk>> cached_chunks;
165: 
166: public:
167: 	//! Extract a single DataChunk from the CSV file and stores it in insert_chunk
168: 	void ParseCSV(DataChunk &insert_chunk);
169: 
170: private:
171: 	//! Initialize Parser
172: 	void Initialize(const vector<LogicalType> &requested_types);
173: 	//! Initializes the parse_chunk with varchar columns and aligns info with new number of cols
174: 	void InitParseChunk(idx_t num_cols);
175: 	//! Initializes the TextSearchShiftArrays for complex parser
176: 	void PrepareComplexParser();
177: 	//! Try to parse a single datachunk from the file. Throws an exception if anything goes wrong.
178: 	void ParseCSV(ParserMode mode);
179: 	//! Try to parse a single datachunk from the file. Returns whether or not the parsing is successful
180: 	bool TryParseCSV(ParserMode mode);
181: 	//! Extract a single DataChunk from the CSV file and stores it in insert_chunk
182: 	bool TryParseCSV(ParserMode mode, DataChunk &insert_chunk, string &error_message);
183: 	//! Sniffs CSV dialect and determines skip rows, header row, column types and column names
184: 	vector<LogicalType> SniffCSV(const vector<LogicalType> &requested_types);
185: 	//! Change the date format for the type to the string
186: 	void SetDateFormat(const string &format_specifier, const LogicalTypeId &sql_type);
187: 	//! Try to cast a string value to the specified sql type
188: 	bool TryCastValue(const Value &value, const LogicalType &sql_type);
189: 	//! Try to cast a vector of values to the specified sql type
190: 	bool TryCastVector(Vector &parse_chunk_col, idx_t size, const LogicalType &sql_type);
191: 	//! Skips skip_rows, reads header row from input stream
192: 	void SkipRowsAndReadHeader(idx_t skip_rows, bool skip_header);
193: 	//! Jumps back to the beginning of input stream and resets necessary internal states
194: 	void JumpToBeginning(idx_t skip_rows, bool skip_header);
195: 	//! Jumps back to the beginning of input stream and resets necessary internal states
196: 	bool JumpToNextSample();
197: 	//! Resets the buffer
198: 	void ResetBuffer();
199: 	//! Resets the steam
200: 	void ResetStream();
201: 
202: 	//! Parses a CSV file with a one-byte delimiter, escape and quote character
203: 	bool TryParseSimpleCSV(DataChunk &insert_chunk, string &error_message);
204: 	//! Parses more complex CSV files with multi-byte delimiters, escapes or quotes
205: 	bool TryParseComplexCSV(DataChunk &insert_chunk, string &error_message);
206: 
207: 	//! Adds a value to the current row
208: 	void AddValue(char *str_val, idx_t length, idx_t &column, vector<idx_t> &escape_positions);
209: 	//! Adds a row to the insert_chunk, returns true if the chunk is filled as a result of this row being added
210: 	bool AddRow(DataChunk &insert_chunk, idx_t &column);
211: 	//! Finalizes a chunk, parsing all values that have been added so far and adding them to the insert_chunk
212: 	void Flush(DataChunk &insert_chunk);
213: 	//! Reads a new buffer from the CSV file if the current one has been exhausted
214: 	bool ReadBuffer(idx_t &start);
215: 
216: 	unique_ptr<FileHandle> OpenCSV(const BufferedCSVReaderOptions &options);
217: 
218: 	//! First phase of auto detection: detect CSV dialect (i.e. delimiter, quote rules, etc)
219: 	void DetectDialect(const vector<LogicalType> &requested_types, BufferedCSVReaderOptions &original_options,
220: 	                   vector<BufferedCSVReaderOptions> &info_candidates, idx_t &best_num_cols);
221: 	//! Second phase of auto detection: detect candidate types for each column
222: 	void DetectCandidateTypes(const vector<LogicalType> &type_candidates,
223: 	                          const map<LogicalTypeId, vector<const char *>> &format_template_candidates,
224: 	                          const vector<BufferedCSVReaderOptions> &info_candidates,
225: 	                          BufferedCSVReaderOptions &original_options, idx_t best_num_cols,
226: 	                          vector<vector<LogicalType>> &best_sql_types_candidates,
227: 	                          std::map<LogicalTypeId, vector<string>> &best_format_candidates,
228: 	                          DataChunk &best_header_row);
229: 	//! Third phase of auto detection: detect header of CSV file
230: 	void DetectHeader(const vector<vector<LogicalType>> &best_sql_types_candidates, const DataChunk &best_header_row);
231: 	//! Fourth phase of auto detection: refine the types of each column and select which types to use for each column
232: 	vector<LogicalType> RefineTypeDetection(const vector<LogicalType> &type_candidates,
233: 	                                        const vector<LogicalType> &requested_types,
234: 	                                        vector<vector<LogicalType>> &best_sql_types_candidates,
235: 	                                        map<LogicalTypeId, vector<string>> &best_format_candidates);
236: };
237: 
238: } // namespace duckdb
[end of src/include/duckdb/execution/operator/persistent/buffered_csv_reader.hpp]
</code>
Here is an example of a patch file. It consists of changes to the code base. It specifies the file names, the line numbers of each change, and the removed and added lines. A single patch file can contain changes to multiple files.
<patch>
--- a/file.cpp
+++ b/file.cpp
@@ -3,35 +3,44 @@
 #include <cstdlib>
 
 int euclidean(int a, int b) {
-    while (b) {
-        int temp = b;
-        b = a % b;
-        a = temp;
+    if (b == 0) {
+        return a;
     }
-    return a;
+    return euclidean(b, a % b);
 }
 
 std::vector<std::pair<int, int>> bresenham(int x0, int y0, int x1, int y1) {
     std::vector<std::pair<int, int>> points;
     int dx = abs(x1 - x0);
     int dy = abs(y1 - y0);
+    int x = x0, y = y0;
     int sx = (x0 < x1) ? 1 : -1;
     int sy = (y0 < y1) ? 1 : -1;
-    int err = dx - dy;
 
-    while (true) {
-        points.emplace_back(x0, y0);
-        if (x0 == x1 && y0 == y1) break;
-        int e2 = 2 * err;
-        if (e2 > -dy) {
+    if (dx > dy) {
+        int err = dx / 2;
+        while (x != x1) {
+            points.emplace_back(x, y);
             err -= dy;
-            x0 += sx;
+            if (err < 0) {
+                y += sy;
+                err += dx;
+            }
+            x += sx;
         }
-        if (e2 < dx) {
-            err += dx;
-            y0 += sy;
+    } else {
+        int err = dy / 2;
+        while (y != y1) {
+            points.emplace_back(x, y);
+            err -= dx;
+            if (err < 0) {
+                x += sx;
+                err += dy;
+            }
+            y += sy;
         }
     }
 
+    points.emplace_back(x, y);
     return points;
 }

</patch>

I need you to solve the provided issue by generating a single patch file that I can apply directly to this repository using git apply.
Please respond with a single patch file in the format shown above.
Make sure to only include the patch file contents so that the contents of your output can be copied into a patch file and applied directly

Respond below: