diff --git a/src/include/duckdb/main/client_context.hpp b/src/include/duckdb/main/client_context.hpp
index b7aa81fc3cf6..c03e38ae0636 100644
--- a/src/include/duckdb/main/client_context.hpp
+++ b/src/include/duckdb/main/client_context.hpp
@@ -94,6 +94,7 @@ class ClientContext : public enable_shared_from_this<ClientContext> {
 
 	//! Interrupt execution of a query
 	DUCKDB_API void Interrupt();
+	DUCKDB_API void CancelTransaction();
 
 	//! Enable query profiling
 	DUCKDB_API void EnableProfiling();
diff --git a/src/main/client_context.cpp b/src/main/client_context.cpp
index f98ee9753f32..a413a4ef0812 100644
--- a/src/main/client_context.cpp
+++ b/src/main/client_context.cpp
@@ -1030,6 +1030,11 @@ void ClientContext::Interrupt() {
 	interrupted = true;
 }
 
+void ClientContext::CancelTransaction() {
+	auto lock = LockContext();
+	InitialCleanup(*lock);
+}
+
 void ClientContext::EnableProfiling() {
 	auto lock = LockContext();
 	auto &client_config = ClientConfig::GetConfig(*this);
diff --git a/tools/pythonpkg/src/pyconnection.cpp b/tools/pythonpkg/src/pyconnection.cpp
index 05586c7c4d80..8fffa355fce3 100644
--- a/tools/pythonpkg/src/pyconnection.cpp
+++ b/tools/pythonpkg/src/pyconnection.cpp
@@ -376,8 +376,7 @@ DuckDBPyConnection::RegisterScalarUDF(const string &name, const py::function &ud
 	auto &context = *connection.context;
 
 	if (context.transaction.HasActiveTransaction()) {
-		throw InvalidInputException(
-		    "This function can not be called with an active transaction!, commit or abort the existing one first");
+		context.CancelTransaction();
 	}
 	if (registered_functions.find(name) != registered_functions.end()) {
 		throw NotImplementedException("A function by the name of '%s' is already created, creating multiple "
