{
  "repo": "duckdb/duckdb",
  "pull_number": 13687,
  "instance_id": "duckdb__duckdb-13687",
  "issue_numbers": [
    "13684"
  ],
  "base_commit": "5896c638099998449f06ce1a61e6c01045ba4a7f",
  "patch": "diff --git a/extension/json/json_functions/json_serialize_sql.cpp b/extension/json/json_functions/json_serialize_sql.cpp\nindex 17fd333647a3..2873eba31bec 100644\n--- a/extension/json/json_functions/json_serialize_sql.cpp\n+++ b/extension/json/json_functions/json_serialize_sql.cpp\n@@ -196,7 +196,11 @@ static unique_ptr<SelectStatement> DeserializeSelectStatement(string_t input, yy\n \t}\n \tauto stmt_json = yyjson_arr_get(statements, 0);\n \tJsonDeserializer deserializer(stmt_json, doc);\n-\treturn SelectStatement::Deserialize(deserializer);\n+\tauto stmt = SelectStatement::Deserialize(deserializer);\n+\tif (!stmt->node) {\n+\t\tthrow ParserException(\"Error parsing json: no select node found in json\");\n+\t}\n+\treturn stmt;\n }\n \n //----------------------------------------------------------------------\n",
  "test_patch": "diff --git a/test/sql/json/test_json_serialize_sql.test b/test/sql/json/test_json_serialize_sql.test\nindex d870c0c34c80..07c29f2db0d9 100644\n--- a/test/sql/json/test_json_serialize_sql.test\n+++ b/test/sql/json/test_json_serialize_sql.test\n@@ -90,3 +90,14 @@ query II\n SELECT * FROM json_execute_serialized_sql(json_serialize_sql('WITH a(i) as (SELECT 1) SELECT a1.i as i1, a2.i as i2 FROM a as a1, a as a2'));\n ----\n 1\t1\n+\n+# Missing select nodes should throw an error\n+statement error\n+SELECT json_deserialize_sql('{ \"statements\": [ {\"expression_class\": \"BOUND_COMPARISON\"}]}');\n+----\n+Parser Error: Error parsing json: no select node found in json\n+\n+statement error\n+SELECT * FROM json_execute_serialized_sql('{ \"statements\": [ {\"expression_class\": \"BOUND_COMPARISON\"}]}');\n+----\n+Parser Error: Error parsing json: no select node found in json\n\\ No newline at end of file\n",
  "problem_statement": "json_deserialize_sql(): Error: Attempted to dereference unique_ptr that is NULL\n### What happens?\r\n\r\nPlaying around with `json_deserialize_sql()` with some malformed JSON leads to this error:\r\n\r\n```\r\nduckdb.duckdb.InvalidInputException: Invalid Input Error: Attempting to execute an unsuccessful or closed pending query result\r\nError: INTERNAL Error: Attempted to dereference unique_ptr that is NULL!\r\nThis error signals an assertion failure within DuckDB. This usually occurs due to unexpected conditions or errors in the program's logic.\r\nFor more information, see https://duckdb.org/docs/dev/internal_errors\r\n```\r\n\r\n\r\nI know that the JSON that I've provided isn't actually a valid serialized statement, I was just testing the capabilities if it would the `json_deserialize_sql()` would deserialize a part of a statement.\r\n\r\n\r\n\r\n### To Reproduce\r\n\r\n```python\r\nimport duckdb\r\nimport json\r\n\r\ncon = duckdb.connect(\":memory:\")\r\n\r\nfilter_json = {\r\n    \"expression_class\": \"BOUND_COMPARISON\",\r\n    \"type\": \"COMPARE_EQUAL\",\r\n    \"left\": {\r\n        \"expression_class\": \"BOUND_COLUMN_REF\",\r\n        \"type\": \"BOUND_COLUMN_REF\",\r\n        \"alias\": \"r\",\r\n        \"return_type\": {\"id\": \"VARCHAR\"},\r\n    },\r\n    \"right\": {\r\n        \"expression_class\": \"BOUND_CONSTANT\",\r\n        \"type\": \"VALUE_CONSTANT\",\r\n        \"value\": {\r\n            \"type\": {\"id\": \"VARCHAR\"},\r\n            \"is_null\": False,\r\n            \"value\": \"u\",\r\n        },\r\n    },\r\n}\r\n\r\nresult = con.execute(\r\n    \"select json_deserialize_sql(?)\", [json.dumps({\"statements\": [filter_json]})]\r\n).fetchall()\r\n```\r\n\r\n### OS:\r\n\r\nMac OS X\r\n\r\n### DuckDB Version:\r\n\r\nv1.0.0 1f98600c2c\r\n\r\n### DuckDB Client:\r\n\r\nPython\r\n\r\n### Full Name:\r\n\r\nRusty Conover\r\n\r\n### Affiliation:\r\n\r\nself\r\n\r\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\r\n\r\nI have tested with a stable release\r\n\r\n### Did you include all relevant data sets for reproducing the issue?\r\n\r\nYes\r\n\r\n### Did you include all code required to reproduce the issue?\r\n\r\n- [X] Yes, I have\r\n\r\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-09-02T09:25:03Z"
}