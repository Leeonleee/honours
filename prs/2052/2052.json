{
  "repo": "duckdb/duckdb",
  "pull_number": 2052,
  "instance_id": "duckdb__duckdb-2052",
  "issue_numbers": [
    "2040"
  ],
  "base_commit": "05e97b8b8a98723f4aa87fe23a9da0b6197e96a8",
  "patch": "diff --git a/src/planner/binder/statement/bind_copy.cpp b/src/planner/binder/statement/bind_copy.cpp\nindex 1ef05bc2447b..86f7b788fe97 100644\n--- a/src/planner/binder/statement/bind_copy.cpp\n+++ b/src/planner/binder/statement/bind_copy.cpp\n@@ -126,6 +126,7 @@ BoundStatement Binder::Bind(CopyStatement &stmt) {\n \t\t}\n \t\tstmt.select_statement = move(statement);\n \t}\n+\tthis->allow_stream_result = false;\n \tif (stmt.info->is_from) {\n \t\treturn BindCopyFrom(stmt);\n \t} else {\ndiff --git a/src/planner/binder/statement/bind_create_table.cpp b/src/planner/binder/statement/bind_create_table.cpp\nindex 65f98745fa1c..7db13a88bca0 100644\n--- a/src/planner/binder/statement/bind_create_table.cpp\n+++ b/src/planner/binder/statement/bind_create_table.cpp\n@@ -156,6 +156,7 @@ unique_ptr<BoundCreateTableInfo> Binder::BindCreateTableInfo(unique_ptr<CreateIn\n \tfor (auto &column : base.columns) {\n \t\tExpressionBinder::TestCollation(context, StringType::GetCollation(column.type));\n \t}\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_delete.cpp b/src/planner/binder/statement/bind_delete.cpp\nindex 382088bac8a9..6e41bcca42a2 100644\n--- a/src/planner/binder/statement/bind_delete.cpp\n+++ b/src/planner/binder/statement/bind_delete.cpp\n@@ -78,6 +78,7 @@ BoundStatement Binder::Bind(DeleteStatement &stmt) {\n \tresult.plan = move(del);\n \tresult.names = {\"Count\"};\n \tresult.types = {LogicalType::BIGINT};\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_drop.cpp b/src/planner/binder/statement/bind_drop.cpp\nindex 6307771846f3..6df2d1367db5 100644\n--- a/src/planner/binder/statement/bind_drop.cpp\n+++ b/src/planner/binder/statement/bind_drop.cpp\n@@ -43,6 +43,7 @@ BoundStatement Binder::Bind(DropStatement &stmt) {\n \tresult.plan = make_unique<LogicalSimple>(LogicalOperatorType::LOGICAL_DROP, move(stmt.info));\n \tresult.names = {\"Success\"};\n \tresult.types = {LogicalType::BOOLEAN};\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_export.cpp b/src/planner/binder/statement/bind_export.cpp\nindex 89c22d8644f5..257999e49a59 100644\n--- a/src/planner/binder/statement/bind_export.cpp\n+++ b/src/planner/binder/statement/bind_export.cpp\n@@ -135,6 +135,7 @@ BoundStatement Binder::Bind(ExportStatement &stmt) {\n \t}\n \n \tresult.plan = move(export_node);\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_insert.cpp b/src/planner/binder/statement/bind_insert.cpp\nindex 2de3e3f8ddd4..09d42e241475 100644\n--- a/src/planner/binder/statement/bind_insert.cpp\n+++ b/src/planner/binder/statement/bind_insert.cpp\n@@ -125,6 +125,7 @@ BoundStatement Binder::Bind(InsertStatement &stmt) {\n \tinsert->AddChild(move(root));\n \n \tresult.plan = move(insert);\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_load.cpp b/src/planner/binder/statement/bind_load.cpp\nindex 7ca567e83dc8..6f24cc3bc78d 100644\n--- a/src/planner/binder/statement/bind_load.cpp\n+++ b/src/planner/binder/statement/bind_load.cpp\n@@ -11,6 +11,7 @@ BoundStatement Binder::Bind(LoadStatement &stmt) {\n \tresult.names = {\"Success\"};\n \n \tresult.plan = make_unique<LogicalSimple>(LogicalOperatorType::LOGICAL_LOAD, move(stmt.info));\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \ndiff --git a/src/planner/binder/statement/bind_update.cpp b/src/planner/binder/statement/bind_update.cpp\nindex 55d2aec65cfe..5a1450e51d7c 100644\n--- a/src/planner/binder/statement/bind_update.cpp\n+++ b/src/planner/binder/statement/bind_update.cpp\n@@ -205,6 +205,7 @@ BoundStatement Binder::Bind(UpdateStatement &stmt) {\n \tresult.names = {\"Count\"};\n \tresult.types = {LogicalType::BIGINT};\n \tresult.plan = move(update);\n+\tthis->allow_stream_result = false;\n \treturn result;\n }\n \n",
  "test_patch": "diff --git a/test/sql/index/art/test_create_unique_index.test b/test/sql/index/art/test_create_unique_index.test\nnew file mode 100644\nindex 000000000000..e6696d3c77cf\n--- /dev/null\n+++ b/test/sql/index/art/test_create_unique_index.test\n@@ -0,0 +1,23 @@\n+# name: test/sql/index/art/test_create_unique_index.test\n+# description: CREATE UNIQUE INDEX\n+# group: [art]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+CREATE TABLE t0(c0 INTEGER);\n+\n+statement ok\n+CREATE UNIQUE INDEX i0 ON t0(c0);\n+\n+statement ok\n+INSERT INTO t0(c0) VALUES (1);\n+\n+statement error\n+INSERT INTO t0(c0) VALUES (1);\n+\n+query I\n+SELECT * FROM t0 WHERE t0.c0 = 1;\n+----\n+1\n",
  "problem_statement": "No error displayed after an INSERT violates a UNIQUE constraint\nCreating a unique index then inserting duplicates doesn't show any error. See related #514\r\n\r\n```CREATE TABLE t0(c0 INT);\r\nCREATE UNIQUE INDEX i0 ON t0(c0);\r\nINSERT INTO t0(c0) VALUES (1);\r\nINSERT INTO t0(c0) VALUES (1); -- expected error, actual no error\r\nSELECT * FROM t0 WHERE t0.c0 = 1; -- as expected : expected: {1}, actual: {1}\r\n```\r\nHowever, if we create the table with the unique constraints, then constraint error is printed as it should.\n",
  "hints_text": "",
  "created_at": "2021-07-27T09:18:19Z"
}