{
  "repo": "duckdb/duckdb",
  "pull_number": 15249,
  "instance_id": "duckdb__duckdb-15249",
  "issue_numbers": [
    "14950"
  ],
  "base_commit": "82abc6a40de7ed102c86d12ed5ec09bfa207d559",
  "patch": "diff --git a/src/parser/parser.cpp b/src/parser/parser.cpp\nindex ca7e1a71145f..77ad899f1ff4 100644\n--- a/src/parser/parser.cpp\n+++ b/src/parser/parser.cpp\n@@ -369,25 +369,36 @@ vector<SimplifiedToken> Parser::TokenizeError(const string &error_msg) {\n \n \t// now iterate over the\n \tbool in_quotes = false;\n+\tchar quote_char = '\\0';\n \tfor (idx_t i = error_start; i < error_end; i++) {\n-\t\tif (error_msg[i] == '\"' || error_msg[i] == '\\'') {\n-\t\t\tSimplifiedToken token;\n-\t\t\ttoken.start = i;\n-\t\t\tif (!in_quotes) {\n-\t\t\t\ttoken.type = SimplifiedTokenType::SIMPLIFIED_TOKEN_STRING_CONSTANT;\n-\t\t\t\ttoken.start++;\n-\t\t\t} else {\n+\t\tif (in_quotes) {\n+\t\t\t// in a quote - look for the quote character\n+\t\t\tif (error_msg[i] == quote_char) {\n+\t\t\t\tSimplifiedToken token;\n+\t\t\t\ttoken.start = i;\n \t\t\t\ttoken.type = SimplifiedTokenType::SIMPLIFIED_TOKEN_IDENTIFIER;\n+\t\t\t\ttokens.push_back(token);\n+\t\t\t\tin_quotes = false;\n+\t\t\t}\n+\t\t\tif (StringUtil::CharacterIsNewline(error_msg[i])) {\n+\t\t\t\t// found a newline in a quote, abort the quoted state entirely\n+\t\t\t\ttokens.pop_back();\n+\t\t\t\tin_quotes = false;\n \t\t\t}\n+\t\t} else if (error_msg[i] == '\"' || error_msg[i] == '\\'') {\n+\t\t\t// not quoted and found a quote - enter the quoted state\n+\t\t\tSimplifiedToken token;\n+\t\t\ttoken.start = i;\n+\t\t\ttoken.type = SimplifiedTokenType::SIMPLIFIED_TOKEN_STRING_CONSTANT;\n+\t\t\ttoken.start++;\n \t\t\ttokens.push_back(token);\n-\t\t\tin_quotes = !in_quotes;\n+\t\t\tquote_char = error_msg[i];\n+\t\t\tin_quotes = true;\n \t\t}\n \t}\n-\tif (in_quotes && error_end < error_msg.size()) {\n-\t\tSimplifiedToken token;\n-\t\ttoken.start = error_end;\n-\t\ttoken.type = SimplifiedTokenType::SIMPLIFIED_TOKEN_IDENTIFIER;\n-\t\ttokens.push_back(token);\n+\tif (in_quotes) {\n+\t\t// unterminated quotes at the end of the error - pop back the quoted state\n+\t\ttokens.pop_back();\n \t}\n \tif (line_pos.IsValid()) {\n \t\tSimplifiedToken token;\ndiff --git a/tools/shell/shell_renderer.cpp b/tools/shell/shell_renderer.cpp\nindex d597583b8fd7..43ba0b58e972 100644\n--- a/tools/shell/shell_renderer.cpp\n+++ b/tools/shell/shell_renderer.cpp\n@@ -331,7 +331,7 @@ class ModeExplainRenderer : public RowRenderer {\n \tvoid RenderRow(RowResult &result) override {\n \t\tauto &data = result.data;\n \t\tif (data.size() != 2) {\n-\t\t\tthrow std::runtime_error(\"Invalid usage of explain renderer - must have two data points per row\");\n+\t\t\treturn;\n \t\t}\n \t\tif (strcmp(data[0], \"logical_plan\") == 0 || strcmp(data[0], \"logical_opt\") == 0 ||\n \t\t    strcmp(data[0], \"physical_plan\") == 0) {\n",
  "test_patch": "diff --git a/tools/shell/tests/test_errors.py b/tools/shell/tests/test_errors.py\nindex e0bbdf142950..378302826c02 100644\n--- a/tools/shell/tests/test_errors.py\n+++ b/tools/shell/tests/test_errors.py\n@@ -63,3 +63,33 @@ def test_long_error(shell):\n     result = test.run()\n     result.check_stderr('\\x1b[33m+(DATE, TIMESTAMP)\\x1b[0m')\n     result.check_stderr('\\x1b[32mCAST\\x1b[0m')\n+\n+@pytest.mark.skipif(os.name == 'nt', reason=\"Windows highlighting does not use shell escapes\")\n+def test_single_quotes_in_error(shell):\n+    test = (\n+        ShellTest(shell)\n+        .statement(\".highlight_errors on\")\n+        .statement(\"select \\\"I'm an error\\\"\")\n+    )\n+    result = test.run()\n+    result.check_stderr('\"\\x1b[33mI\\'m an error\\x1b[0m')\n+\n+@pytest.mark.skipif(os.name == 'nt', reason=\"Windows highlighting does not use shell escapes\")\n+def test_double_quotes_in_error(shell):\n+    test = (\n+        ShellTest(shell)\n+        .statement(\".highlight_errors on\")\n+        .statement(\"select error('''I\\\"m an error''')\")\n+    )\n+    result = test.run()\n+    result.check_stderr('\\x1b[33mI\"m an error\\x1b[0m')\n+\n+@pytest.mark.skipif(os.name == 'nt', reason=\"Windows highlighting does not use shell escapes\")\n+def test_unterminated_quote(shell):\n+    test = (\n+        ShellTest(shell)\n+        .statement(\".highlight_errors on\")\n+        .statement(\"select error('I''m an error')\")\n+    )\n+    result = test.run()\n+    result.check_stderr('I\\'m an error')\ndiff --git a/tools/shell/tests/test_explain.py b/tools/shell/tests/test_explain.py\nnew file mode 100644\nindex 000000000000..2f2826069fdd\n--- /dev/null\n+++ b/tools/shell/tests/test_explain.py\n@@ -0,0 +1,15 @@\n+# fmt: off\n+\n+import pytest\n+import subprocess\n+import sys\n+from typing import List\n+from conftest import ShellTest\n+import os\n+\n+def test_invalid_explain(shell):\n+    test = (\n+        ShellTest(shell)\n+        .statement(\"EXPLAIN SELECT 'any_string' IN ?;\")\n+    )\n+    result = test.run()\n",
  "problem_statement": "DuckDB uncaught exception when using SELECT with EXPLAIN\n### What happens?\n\nThe latest version of the DuckDB (latest main: v1.1.4-dev2210 1a3d614f0e) crashes when running the following SQL statement: \r\n\r\n```sql\r\nEXPLAIN SELECT 'any_string' IN ?;\r\n```\r\n\r\nHere is the stack trace from v1.1.4-dev2210 1a3d614f0e: \r\n\r\n```\r\n#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50\r\n#1  0x0000ffffb6c41aac in __GI_abort () at abort.c:79\r\n#2  0x0000ffffb6f048bc in __gnu_cxx::__verbose_terminate_handler() () from /lib/aarch64-linux-gnu/libstdc++.so.6\r\n#3  0x0000ffffb6f0220c in ?? () from /lib/aarch64-linux-gnu/libstdc++.so.6\r\n#4  0x0000ffffb6f02270 in std::terminate() () from /lib/aarch64-linux-gnu/libstdc++.so.6\r\n#5  0x0000ffffb6f02564 in __cxa_throw () from /lib/aarch64-linux-gnu/libstdc++.so.6\r\n#6  0x0000000000498f34 in duckdb_shell::ModeExplainRenderer::RenderRow (this=<optimized out>, result=...) at ../../tools/shell/shell_renderer.cpp:334\r\n#7  0x0000000000469e68 in duckdb_shell::ShellState::RenderRow (this=<optimized out>, renderer=..., result=...) at ../../tools/shell/shell.cpp:1294\r\n#8  0x000000000046e500 in duckdb_shell::ShellState::ExecutePreparedStatement (this=0xfffff8effda8, pStmt=0x14fb34d0) at ../../tools/shell/shell.cpp:1722\r\n#9  0x000000000046ef64 in duckdb_shell::ShellState::ExecuteSQL (this=<optimized out>, zSql=0x14d62830 \"EXPLAIN SELECT 'any_string' IN ?;\", pzErrMsg=<optimized out>) at ../../tools/shell/shell.cpp:1788\r\n#10 0x0000000000484a84 in duckdb_shell::ShellState::RunOneSqlLine (this=0xfffff8effda8, zSql=0x14d62830 \"EXPLAIN SELECT 'any_string' IN ?;\") at ../../tools/shell/shell.cpp:4318\r\n#11 0x000000000047f3cc in duckdb_shell::ShellState::ProcessInput (this=<optimized out>) at ../../tools/shell/shell.cpp:4433\r\n#12 0x0000000000488b48 in main (argc=1, argv=0xfffff8f000f8) at ../../tools/shell/shell.cpp:5032\r\n```\r\n\r\nThe bug is NOT reproducible on the latest release: 19864453f7, only reproducible on the latest main. Must be introduced recently. \n\n### To Reproduce\n\n### To Reproduce\r\n\r\n1. Clone the DuckDB Git from the official repo.\r\n2. Checkout to the latest main (1a3d614f0e).\r\n3. Compile the DuckDB binary by using either `make reldebug` or `make debug`.\r\n4. Run the compiled DuckDB and input the following SQL:\r\n\r\n```\r\nEXPLAIN SELECT 'any_string' IN ?;\r\n```\n\n### OS:\n\nUbuntu 20.04 LTS ARM 64\n\n### DuckDB Version:\n\n v1.1.4-dev2210 1a3d614f0e\n\n### DuckDB Client:\n\ncli\n\n### Hardware:\n\n_No response_\n\n### Full Name:\n\nYu Liang\n\n### Affiliation:\n\nPennsylvania State University\n\n### What is the latest build you tested with? If possible, we recommend testing with the latest nightly build.\n\nI have tested with a source build\n\n### Did you include all relevant data sets for reproducing the issue?\n\nYes\n\n### Did you include all code required to reproduce the issue?\n\n- [X] Yes, I have\n\n### Did you include all relevant configuration (e.g., CPU architecture, Python version, Linux distribution) to reproduce the issue?\n\n- [X] Yes, I have\n",
  "hints_text": "",
  "created_at": "2024-12-10T15:12:06Z"
}