{
  "repo": "duckdb/duckdb",
  "pull_number": 391,
  "instance_id": "duckdb__duckdb-391",
  "issue_numbers": [
    "389"
  ],
  "base_commit": "57b2d0f995fcd81c3de2e0d839c76f91fe6a8668",
  "patch": "diff --git a/tools/pythonpkg/cursor.cpp b/tools/pythonpkg/cursor.cpp\nindex da3e47180bbe..9554d5656712 100644\n--- a/tools/pythonpkg/cursor.cpp\n+++ b/tools/pythonpkg/cursor.cpp\n@@ -504,7 +504,9 @@ PyObject *duckdb_cursor_fetchnumpy(duckdb_Cursor *self) {\n \t\t\t\t\tint64_t *array_data_ptr = reinterpret_cast<int64_t *>(array_data + (offset * duckdb_type_size));\n \t\t\t\t\tduckdb::timestamp_t *chunk_data_ptr = reinterpret_cast<int64_t *>(chunk->data[col_idx].data);\n \t\t\t\t\tfor (size_t chunk_idx = 0; chunk_idx < chunk->size(); chunk_idx++) {\n-\t\t\t\t\t\tarray_data_ptr[chunk_idx] = duckdb::Timestamp::GetEpoch(chunk_data_ptr[chunk_idx]) * 1000;\n+\t\t\t\t\t\t//array_data_ptr[chunk_idx] = duckdb::Timestamp::GetEpoch(chunk_data_ptr[chunk_idx]) * 1000;\n+\t\t\t\t\t\tauto timestamp = chunk_data_ptr[chunk_idx];\n+\t\t\t\t\t\tarray_data_ptr[chunk_idx] = duckdb::Date::Epoch(duckdb::Timestamp::GetDate(timestamp)) * 1000 + (int64_t)(duckdb::Timestamp::GetTime(timestamp));\n \t\t\t\t\t}\n \t\t\t\t\tbreak;\n \t\t\t\t}    // else fall-through-to-default\ndiff --git a/tools/pythonpkg/setup.py b/tools/pythonpkg/setup.py\nindex 5a716ccb53b9..f60b8b8660fc 100755\n--- a/tools/pythonpkg/setup.py\n+++ b/tools/pythonpkg/setup.py\n@@ -27,7 +27,7 @@\n \n \n includes = [numpy.get_include(), '.']\n-sources = ['duckdb.cpp', 'connection.cpp', 'cursor.cpp', 'module.cpp']\n+sources = ['connection.cpp', 'cursor.cpp', 'module.cpp', 'duckdb.cpp']\n \n toolchain_args = ['-std=c++11', '-Wall']\n \ndiff --git a/tools/rpkg/DESCRIPTION b/tools/rpkg/DESCRIPTION\nindex f54a679abec6..af81f262e904 100644\n--- a/tools/rpkg/DESCRIPTION\n+++ b/tools/rpkg/DESCRIPTION\n@@ -1,6 +1,6 @@\n Package: duckdb\n Title: DBI Package for DuckDB\n-Version: 0.1.1\n+Version: 0.1.2\n Author: Hannes Muehleisen <hannes@cwi.nl>\n Maintainer: Hannes Muehleisen <hannes@cwi.nl>\n Description: TODO\n",
  "test_patch": "diff --git a/tools/pythonpkg/tests/test_dbapi07.py b/tools/pythonpkg/tests/test_dbapi07.py\nnew file mode 100644\nindex 000000000000..951d6bf81db1\n--- /dev/null\n+++ b/tools/pythonpkg/tests/test_dbapi07.py\n@@ -0,0 +1,9 @@\n+# timestamp ms precision\n+\n+import numpy \n+\n+\n+class TestNumpyTimestampMilliseconds(object):\n+    def test_numpy_timestamp(self, duckdb_cursor):\n+        res = duckdb_cursor.execute(\"SELECT TIMESTAMP '2020-01-10 00:00:00.500' as test_time\").fetchnumpy()\n+        assert res['test_time'] == numpy.datetime64('2020-01-10 00:00:00.500')\n",
  "problem_statement": "Sub-second precision for TIMESTAMP\nI was just wondering if someone could answer some questions around the timestamp type in duckdb?\r\n\r\nUsing fetchall:\r\n```\r\n>>> print(cursor.execute(\"SELECT TIMESTAMP '2020-01-10 00:00:00.500' as test_time\").fetchall())\r\n[[3168822576022004]]\r\n```\r\n\r\nSimple question... If I am creating a TIMESTAMP column, how would I convert the stored number back to a python datetime?\r\n\r\nUsing fetchnumpy:\r\n```\r\n>>> print(cursor.execute(\"SELECT TIMESTAMP '2020-01-10 00:00:00.500' as test_time\").fetchnumpy())\r\n{'test_time': masked_array(data=['2020-01-10T00:00:00.000'],\r\n             mask=False,\r\n       fill_value=numpy.datetime64('NaT'),\r\n            dtype='datetime64[ms]')}\r\n```\r\nLooks like it is truncating the millisecond part of the timestamp.  Is that correct?\r\n\r\nI received the same result using 0.1.1 and 0.1.2\r\n\n",
  "hints_text": "",
  "created_at": "2020-01-14T09:56:57Z"
}