{
  "repo": "duckdb/duckdb",
  "pull_number": 4160,
  "instance_id": "duckdb__duckdb-4160",
  "issue_numbers": [
    "3979"
  ],
  "base_commit": "d2b7d8ac605a2982695dfc8001739e2e36105c59",
  "patch": "diff --git a/tools/nodejs/src/connection.cpp b/tools/nodejs/src/connection.cpp\nindex 821c2a12ea10..e65c8a5e5ece 100644\n--- a/tools/nodejs/src/connection.cpp\n+++ b/tools/nodejs/src/connection.cpp\n@@ -321,19 +321,25 @@ struct ExecTask : public Task {\n \t\tauto &connection = Get<Connection>();\n \n \t\tsuccess = true;\n-\t\tauto statements = connection.connection->ExtractStatements(sql);\n-\t\tif (statements.empty()) {\n-\t\t\treturn;\n-\t\t}\n+\t\ttry {\n+\t\t\tauto statements = connection.connection->ExtractStatements(sql);\n+\t\t\tif (statements.empty()) {\n+\t\t\t\treturn;\n+\t\t\t}\n \n-\t\t// thanks Mark\n-\t\tfor (duckdb::idx_t i = 0; i < statements.size(); i++) {\n-\t\t\tauto res = connection.connection->Query(move(statements[i]));\n-\t\t\tif (!res->success) {\n-\t\t\t\tsuccess = false;\n-\t\t\t\terror = res->error;\n-\t\t\t\tbreak;\n+\t\t\t// thanks Mark\n+\t\t\tfor (duckdb::idx_t i = 0; i < statements.size(); i++) {\n+\t\t\t\tauto res = connection.connection->Query(move(statements[i]));\n+\t\t\t\tif (!res->success) {\n+\t\t\t\t\tsuccess = false;\n+\t\t\t\t\terror = res->error;\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n+\t\t} catch (duckdb::ParserException &e) {\n+\t\t\tsuccess = false;\n+\t\t\terror = e.what();\n+\t\t\treturn;\n \t\t}\n \t}\n \n",
  "test_patch": "diff --git a/tools/nodejs/test/syntax_error.test.js b/tools/nodejs/test/syntax_error.test.js\nnew file mode 100644\nindex 000000000000..05bf386947c3\n--- /dev/null\n+++ b/tools/nodejs/test/syntax_error.test.js\n@@ -0,0 +1,16 @@\n+var duckdb = require('..');\n+var assert = require('assert');\n+\n+describe('exec', function() {\n+    var db;\n+    before(function(done) {\n+        db = new duckdb.Database(':memory:', done);\n+    });\n+\n+    it(\"doesn't crash on a syntax error\", function(done) {\n+        db.exec(\"syntax error\", function(err) {\n+            assert.notEqual(err, null, \"Expected an error\")\n+            done();\n+        });\n+    });\n+});\n",
  "problem_statement": "Node bindings crash on parser errors\n#### What happens?\r\nSimilar to https://github.com/duckdb/duckdb/issues/3743, the node bindings on version 0.4.0 crash on various syntax errors.\r\n\r\n#### To Reproduce\r\n```\r\nconst duckdb = require(\"duckdb\");\r\nvar db = new duckdb.Database(\":memory:\");\r\n\r\ntry {\r\n  db.exec(`SELECT 18'`);\r\n} catch (e) {\r\n  console.log(\"caught!\", e);\r\n}\r\n```\r\n\r\n```\r\n$ node index.js\r\nlibc++abi: terminating with uncaught exception of type duckdb::ParserException: Parser Error: unterminated quoted string at or near \"'\"\r\nLINE 1: SELECT 18'\r\n                 ^\r\n[1]    20231 abort      node index.js\r\n```\r\n\r\nor alternatively:\r\n```\r\nconst duckdb = require('duckdb');\r\nvar db = new duckdb.Database(':memory:');\r\n\r\ntry {\r\n  db.exec(`syntax`);\r\n} catch (e) {\r\n  console.log('caught!', e);\r\n}\r\n```\r\n\r\n```\r\n$ node index.js\r\nlibc++abi: terminating with uncaught exception of type duckdb::ParserException: Parser Error: syntax error at or near \"syntax\"\r\nLINE 1: syntax\r\n        ^\r\n[1]    20539 abort      node index.js\r\n```\r\n\r\n#### Environment (please complete the following information):\r\n - OS: Mac OS 12.2.1\r\n - DuckDB Version: 0.4.0\r\n - DuckDB Client: node\r\n\r\n#### Identity Disclosure:\r\n - Full Name: Jessica Zhu\r\n - Affiliation: Watershed\r\n\r\nIf the above is not given and is not obvious from your GitHub profile page, we might close your issue without further review. Please refer to the [reasoning behind this rule](https://berthub.eu/articles/posts/anonymous-help/) if you have questions.\n",
  "hints_text": "",
  "created_at": "2022-07-19T03:26:38Z"
}