{
  "repo": "duckdb/duckdb",
  "pull_number": 9814,
  "instance_id": "duckdb__duckdb-9814",
  "issue_numbers": [
    "8500",
    "8500"
  ],
  "base_commit": "275f4a7e9564db08cc3cda211e1f63a7967308cf",
  "patch": "diff --git a/src/function/function_binder.cpp b/src/function/function_binder.cpp\nindex 8e7e84a4e226..8b57bf92f35d 100644\n--- a/src/function/function_binder.cpp\n+++ b/src/function/function_binder.cpp\n@@ -51,7 +51,12 @@ int64_t FunctionBinder::BindFunctionCost(const SimpleFunction &func, const vecto\n \t\treturn -1;\n \t}\n \tint64_t cost = 0;\n+\tbool has_parameter = false;\n \tfor (idx_t i = 0; i < arguments.size(); i++) {\n+\t\tif (arguments[i].id() == LogicalTypeId::UNKNOWN) {\n+\t\t\thas_parameter = true;\n+\t\t\tcontinue;\n+\t\t}\n \t\tint64_t cast_cost = CastFunctionSet::Get(context).ImplicitCastCost(arguments[i], func.arguments[i]);\n \t\tif (cast_cost >= 0) {\n \t\t\t// we can implicitly cast, add the cost to the total cost\n@@ -61,6 +66,10 @@ int64_t FunctionBinder::BindFunctionCost(const SimpleFunction &func, const vecto\n \t\t\treturn -1;\n \t\t}\n \t}\n+\tif (has_parameter) {\n+\t\t// all arguments are implicitly castable and there is a parameter - return 0 as cost\n+\t\treturn 0;\n+\t}\n \treturn cost;\n }\n \n",
  "test_patch": "diff --git a/test/sql/prepared/test_prepare_issue_8500.test b/test/sql/prepared/test_prepare_issue_8500.test\nnew file mode 100644\nindex 000000000000..1f77e0649a77\n--- /dev/null\n+++ b/test/sql/prepared/test_prepare_issue_8500.test\n@@ -0,0 +1,11 @@\n+# name: test/sql/prepared/test_prepare_issue_8500.test\n+# description: Issue #8500 - Prepared statement results in INTERVAL type\n+# group: [prepared]\n+\n+statement ok\n+PREPARE S1 AS SELECT (? / 1) + 1;\n+\n+query I\n+EXECUTE S1(42)\n+----\n+43\n",
  "problem_statement": "Prepared statement results in INTERVAL type\n### What happens?\r\n\r\nA prepared statement containing `(? / x)` where `x` is an integer results in an expression of type `INTERVAL`.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nPREPARE S1 AS SELECT (? / 1) + 1;\r\n```\r\n\r\nResults in:\r\n```\r\nBinder Error: No function matches the given name and argument types '+(INTERVAL, INTEGER)'. You might need to add explicit type casts.\r\n        Candidate functions:\r\n        +(TINYINT) -> TINYINT\r\n        +(TINYINT, TINYINT) -> TINYINT\r\n        +(SMALLINT) -> SMALLINT\r\n        +(SMALLINT, SMALLINT) -> SMALLINT\r\n        +(INTEGER) -> INTEGER\r\n        +(INTEGER, INTEGER) -> INTEGER\r\n        +(BIGINT) -> BIGINT\r\n        +(BIGINT, BIGINT) -> BIGINT\r\n        +(HUGEINT) -> HUGEINT\r\n        +(HUGEINT, HUGEINT) -> HUGEINT\r\n        +(FLOAT) -> FLOAT\r\n        +(FLOAT, FLOAT) -> FLOAT\r\n        +(DOUBLE) -> DOUBLE\r\n        +(DOUBLE, DOUBLE) -> DOUBLE\r\n        +(DECIMAL) -> DECIMAL\r\n        +(DECIMAL, DECIMAL) -> DECIMAL\r\n        +(UTINYINT) -> UTINYINT\r\n        +(UTINYINT, UTINYINT) -> UTINYINT\r\n        +(USMALLINT) -> USMALLINT\r\n        +(USMALLINT, USMALLINT) -> USMALLINT\r\n        +(UINTEGER) -> UINTEGER\r\n        +(UINTEGER, UINTEGER) -> UINTEGER\r\n        +(UBIGINT) -> UBIGINT\r\n        +(UBIGINT, UBIGINT) -> UBIGINT\r\n        +(DATE, INTEGER) -> DATE\r\n        +(INTEGER, DATE) -> DATE\r\n        +(INTERVAL, INTERVAL) -> INTERVAL\r\n        +(DATE, INTERVAL) -> DATE\r\n        +(INTERVAL, DATE) -> DATE\r\n        +(TIME, INTERVAL) -> TIME\r\n        +(INTERVAL, TIME) -> TIME\r\n        +(TIMESTAMP, INTERVAL) -> TIMESTAMP\r\n        +(INTERVAL, TIMESTAMP) -> TIMESTAMP\r\n        +(TIME, DATE) -> TIMESTAMP\r\n        +(DATE, TIME) -> TIMESTAMP\r\n        +(ANY[], ANY[]) -> ANY[]\r\n```\r\n\r\n### OS:\r\n\r\nmacOS aarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.8.1 and v0.8.2-dev1781\r\n\r\n### DuckDB Client:\r\n\r\nPython and shell.duckdb.org\r\n\r\n### Full Name:\r\n\r\nNicolas Camenisch\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\nI have not tested with any build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nPrepared statement results in INTERVAL type\n### What happens?\r\n\r\nA prepared statement containing `(? / x)` where `x` is an integer results in an expression of type `INTERVAL`.\r\n\r\n### To Reproduce\r\n\r\n```sql\r\nPREPARE S1 AS SELECT (? / 1) + 1;\r\n```\r\n\r\nResults in:\r\n```\r\nBinder Error: No function matches the given name and argument types '+(INTERVAL, INTEGER)'. You might need to add explicit type casts.\r\n        Candidate functions:\r\n        +(TINYINT) -> TINYINT\r\n        +(TINYINT, TINYINT) -> TINYINT\r\n        +(SMALLINT) -> SMALLINT\r\n        +(SMALLINT, SMALLINT) -> SMALLINT\r\n        +(INTEGER) -> INTEGER\r\n        +(INTEGER, INTEGER) -> INTEGER\r\n        +(BIGINT) -> BIGINT\r\n        +(BIGINT, BIGINT) -> BIGINT\r\n        +(HUGEINT) -> HUGEINT\r\n        +(HUGEINT, HUGEINT) -> HUGEINT\r\n        +(FLOAT) -> FLOAT\r\n        +(FLOAT, FLOAT) -> FLOAT\r\n        +(DOUBLE) -> DOUBLE\r\n        +(DOUBLE, DOUBLE) -> DOUBLE\r\n        +(DECIMAL) -> DECIMAL\r\n        +(DECIMAL, DECIMAL) -> DECIMAL\r\n        +(UTINYINT) -> UTINYINT\r\n        +(UTINYINT, UTINYINT) -> UTINYINT\r\n        +(USMALLINT) -> USMALLINT\r\n        +(USMALLINT, USMALLINT) -> USMALLINT\r\n        +(UINTEGER) -> UINTEGER\r\n        +(UINTEGER, UINTEGER) -> UINTEGER\r\n        +(UBIGINT) -> UBIGINT\r\n        +(UBIGINT, UBIGINT) -> UBIGINT\r\n        +(DATE, INTEGER) -> DATE\r\n        +(INTEGER, DATE) -> DATE\r\n        +(INTERVAL, INTERVAL) -> INTERVAL\r\n        +(DATE, INTERVAL) -> DATE\r\n        +(INTERVAL, DATE) -> DATE\r\n        +(TIME, INTERVAL) -> TIME\r\n        +(INTERVAL, TIME) -> TIME\r\n        +(TIMESTAMP, INTERVAL) -> TIMESTAMP\r\n        +(INTERVAL, TIMESTAMP) -> TIMESTAMP\r\n        +(TIME, DATE) -> TIMESTAMP\r\n        +(DATE, TIME) -> TIMESTAMP\r\n        +(ANY[], ANY[]) -> ANY[]\r\n```\r\n\r\n### OS:\r\n\r\nmacOS aarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.8.1 and v0.8.2-dev1781\r\n\r\n### DuckDB Client:\r\n\r\nPython and shell.duckdb.org\r\n\r\n### Full Name:\r\n\r\nNicolas Camenisch\r\n\r\n### Affiliation:\r\n\r\nNone\r\n\r\n### Have you tried this on the latest `master` branch?\r\n\r\nI have not tested with any build\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "However, if you explicitly cast the parameter to a different type, the query succeeds.\r\n```sql\r\nPREPARE S1 AS SELECT (CAST(? as INTEGER) / 1) + 1;\r\n```\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.\nHowever, if you explicitly cast the parameter to a different type, the query succeeds.\r\n```sql\r\nPREPARE S1 AS SELECT (CAST(? as INTEGER) / 1) + 1;\r\n```\nThis issue is stale because it has been open 90 days with no activity. Remove stale label or comment or this will be closed in 30 days.",
  "created_at": "2023-11-27T13:54:37Z"
}