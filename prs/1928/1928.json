{
  "repo": "duckdb/duckdb",
  "pull_number": 1928,
  "instance_id": "duckdb__duckdb-1928",
  "issue_numbers": [
    "1926"
  ],
  "base_commit": "a0f2562596cb559057de12bf17e8384cd4981401",
  "patch": "diff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp\nindex 39b980794d3a..dd2838f6b0f3 100644\n--- a/src/include/duckdb/planner/binder.hpp\n+++ b/src/include/duckdb/planner/binder.hpp\n@@ -123,7 +123,20 @@ class Binder : public std::enable_shared_from_this<Binder> {\n \n \tstring FormatError(ParsedExpression &expr_context, const string &message);\n \tstring FormatError(TableRef &ref_context, const string &message);\n-\tstring FormatError(idx_t query_location, const string &message);\n+\n+\tstring FormatErrorRecursive(idx_t query_location, const string &message, vector<ExceptionFormatValue> &values);\n+\ttemplate <class T, typename... Args>\n+\tstring FormatErrorRecursive(idx_t query_location, const string &msg, vector<ExceptionFormatValue> &values, T param,\n+\t                            Args... params) {\n+\t\tvalues.push_back(ExceptionFormatValue::CreateFormatValue<T>(param));\n+\t\treturn FormatErrorRecursive(query_location, msg, values, params...);\n+\t}\n+\n+\ttemplate <typename... Args>\n+\tstring FormatError(idx_t query_location, const string &msg, Args... params) {\n+\t\tvector<ExceptionFormatValue> values;\n+\t\treturn FormatErrorRecursive(query_location, msg, values, params...);\n+\t}\n \n private:\n \t//! The parent binder (if any)\ndiff --git a/src/parser/query_error_context.cpp b/src/parser/query_error_context.cpp\nindex ef487e193f8d..9cabcfbdf6e1 100644\n--- a/src/parser/query_error_context.cpp\n+++ b/src/parser/query_error_context.cpp\n@@ -110,7 +110,7 @@ string QueryErrorContext::Format(const string &query, const string &error_messag\n }\n \n string QueryErrorContext::FormatErrorRecursive(const string &msg, vector<ExceptionFormatValue> &values) {\n-\tstring error_message = ExceptionFormatValue::Format(msg, values);\n+\tstring error_message = values.empty() ? msg : ExceptionFormatValue::Format(msg, values);\n \tif (!statement || query_location >= statement->query.size()) {\n \t\t// no statement provided or query location out of range\n \t\treturn error_message;\ndiff --git a/src/planner/binder.cpp b/src/planner/binder.cpp\nindex aa7f56c191b3..0216ca2522a5 100644\n--- a/src/planner/binder.cpp\n+++ b/src/planner/binder.cpp\n@@ -286,9 +286,9 @@ string Binder::FormatError(TableRef &ref_context, const string &message) {\n \treturn FormatError(ref_context.query_location, message);\n }\n \n-string Binder::FormatError(idx_t query_location, const string &message) {\n+string Binder::FormatErrorRecursive(idx_t query_location, const string &message, vector<ExceptionFormatValue> &values) {\n \tQueryErrorContext context(root_statement, query_location);\n-\treturn context.FormatError(message);\n+\treturn context.FormatErrorRecursive(message, values);\n }\n \n } // namespace duckdb\ndiff --git a/src/planner/binder/expression/bind_columnref_expression.cpp b/src/planner/binder/expression/bind_columnref_expression.cpp\nindex 9794b87d29af..2072f9cf9121 100644\n--- a/src/planner/binder/expression/bind_columnref_expression.cpp\n+++ b/src/planner/binder/expression/bind_columnref_expression.cpp\n@@ -40,9 +40,9 @@ BindResult ExpressionBinder::BindExpression(ColumnRefExpression &colref, idx_t d\n \t\tif (colref.table_name.empty()) {\n \t\t\tauto similar_bindings = binder.bind_context.GetSimilarBindings(colref.column_name);\n \t\t\tstring candidate_str = StringUtil::CandidatesMessage(similar_bindings, \"Candidate bindings\");\n-\t\t\treturn BindResult(\n-\t\t\t    binder.FormatError(colref, StringUtil::Format(\"Referenced column \\\"%s\\\" not found in FROM clause!%s\",\n-\t\t\t                                                  colref.column_name.c_str(), candidate_str)));\n+\t\t\treturn BindResult(binder.FormatError(colref.query_location,\n+\t\t\t                                     \"Referenced column \\\"%s\\\" not found in FROM clause!%s\",\n+\t\t\t                                     colref.column_name.c_str(), candidate_str));\n \t\t}\n \t}\n \t// if it was a macro parameter, let macro_binding bind it to the argument\n",
  "test_patch": "diff --git a/test/sql/error/escape_percent_sign.test b/test/sql/error/escape_percent_sign.test\nnew file mode 100644\nindex 000000000000..a63b2e7f160d\n--- /dev/null\n+++ b/test/sql/error/escape_percent_sign.test\n@@ -0,0 +1,10 @@\n+# name: test/sql/error/escape_percent_sign.test\n+# description: Issue 1926: Exception messages need to escape percent signs\n+# group: [error]\n+\n+statement ok\n+CREATE VIEW list_int AS\n+SELECT case when i%2 <> 0 then [1] else NULL end FROM range(10000) tbl(i);\n+\n+statement error\n+select count(*) from list_int where l is distinct from NULL;\n",
  "problem_statement": "Exception messages need to escape percent signs\n**What does happen?**\r\nError messages with percent signs are not being escaped, which can cause `printf` to throw an argument not found exception.\r\n\r\n**What should happen?**\r\nDescribe what you expect DuckDB to do instead.\r\n\r\n**To Reproduce**\r\nSteps to reproduce the behavior. Bonus points if those are only SQL queries.\r\n1. \r\n```sql\r\nCREATE VIEW list_int AS\r\nSELECT case when i%2 <> 0 then [1] else NULL end FROM range(10000) tbl(i);\r\n```\r\n2. \r\n```sql\r\nselect count(*) from list_int where l is distinct from NULL;\r\n```\r\n\r\nExpected: Error message referencing anonymous column with embedded `%2`\r\nActual: `argument index out of range`\r\n\r\n**Environment (please complete the following information):**\r\n - OS: [OSX]\r\n - DuckDB Version [26]\r\n\r\n**Before submitting**\r\n- [x] Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n- [x] Have you tried this on the latest `master` branch? In case you cannot compile, you may find some binaries here: https://github.com/duckdb/duckdb/releases/tag/master-builds\r\n\n",
  "hints_text": "",
  "created_at": "2021-06-29T09:16:13Z"
}