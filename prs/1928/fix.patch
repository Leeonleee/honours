diff --git a/src/include/duckdb/planner/binder.hpp b/src/include/duckdb/planner/binder.hpp
index 39b980794d3a..dd2838f6b0f3 100644
--- a/src/include/duckdb/planner/binder.hpp
+++ b/src/include/duckdb/planner/binder.hpp
@@ -123,7 +123,20 @@ class Binder : public std::enable_shared_from_this<Binder> {
 
 	string FormatError(ParsedExpression &expr_context, const string &message);
 	string FormatError(TableRef &ref_context, const string &message);
-	string FormatError(idx_t query_location, const string &message);
+
+	string FormatErrorRecursive(idx_t query_location, const string &message, vector<ExceptionFormatValue> &values);
+	template <class T, typename... Args>
+	string FormatErrorRecursive(idx_t query_location, const string &msg, vector<ExceptionFormatValue> &values, T param,
+	                            Args... params) {
+		values.push_back(ExceptionFormatValue::CreateFormatValue<T>(param));
+		return FormatErrorRecursive(query_location, msg, values, params...);
+	}
+
+	template <typename... Args>
+	string FormatError(idx_t query_location, const string &msg, Args... params) {
+		vector<ExceptionFormatValue> values;
+		return FormatErrorRecursive(query_location, msg, values, params...);
+	}
 
 private:
 	//! The parent binder (if any)
diff --git a/src/parser/query_error_context.cpp b/src/parser/query_error_context.cpp
index ef487e193f8d..9cabcfbdf6e1 100644
--- a/src/parser/query_error_context.cpp
+++ b/src/parser/query_error_context.cpp
@@ -110,7 +110,7 @@ string QueryErrorContext::Format(const string &query, const string &error_messag
 }
 
 string QueryErrorContext::FormatErrorRecursive(const string &msg, vector<ExceptionFormatValue> &values) {
-	string error_message = ExceptionFormatValue::Format(msg, values);
+	string error_message = values.empty() ? msg : ExceptionFormatValue::Format(msg, values);
 	if (!statement || query_location >= statement->query.size()) {
 		// no statement provided or query location out of range
 		return error_message;
diff --git a/src/planner/binder.cpp b/src/planner/binder.cpp
index aa7f56c191b3..0216ca2522a5 100644
--- a/src/planner/binder.cpp
+++ b/src/planner/binder.cpp
@@ -286,9 +286,9 @@ string Binder::FormatError(TableRef &ref_context, const string &message) {
 	return FormatError(ref_context.query_location, message);
 }
 
-string Binder::FormatError(idx_t query_location, const string &message) {
+string Binder::FormatErrorRecursive(idx_t query_location, const string &message, vector<ExceptionFormatValue> &values) {
 	QueryErrorContext context(root_statement, query_location);
-	return context.FormatError(message);
+	return context.FormatErrorRecursive(message, values);
 }
 
 } // namespace duckdb
diff --git a/src/planner/binder/expression/bind_columnref_expression.cpp b/src/planner/binder/expression/bind_columnref_expression.cpp
index 9794b87d29af..2072f9cf9121 100644
--- a/src/planner/binder/expression/bind_columnref_expression.cpp
+++ b/src/planner/binder/expression/bind_columnref_expression.cpp
@@ -40,9 +40,9 @@ BindResult ExpressionBinder::BindExpression(ColumnRefExpression &colref, idx_t d
 		if (colref.table_name.empty()) {
 			auto similar_bindings = binder.bind_context.GetSimilarBindings(colref.column_name);
 			string candidate_str = StringUtil::CandidatesMessage(similar_bindings, "Candidate bindings");
-			return BindResult(
-			    binder.FormatError(colref, StringUtil::Format("Referenced column \"%s\" not found in FROM clause!%s",
-			                                                  colref.column_name.c_str(), candidate_str)));
+			return BindResult(binder.FormatError(colref.query_location,
+			                                     "Referenced column \"%s\" not found in FROM clause!%s",
+			                                     colref.column_name.c_str(), candidate_str));
 		}
 	}
 	// if it was a macro parameter, let macro_binding bind it to the argument
