{
  "repo": "duckdb/duckdb",
  "pull_number": 9654,
  "instance_id": "duckdb__duckdb-9654",
  "issue_numbers": [
    "9308",
    "9308"
  ],
  "base_commit": "1f04c207eb67711acd89265fba210c57716d9f3f",
  "patch": "diff --git a/src/optimizer/statistics/operator/propagate_join.cpp b/src/optimizer/statistics/operator/propagate_join.cpp\nindex d1d7bd5b7a11..810d0054e105 100644\n--- a/src/optimizer/statistics/operator/propagate_join.cpp\n+++ b/src/optimizer/statistics/operator/propagate_join.cpp\n@@ -108,10 +108,6 @@ void StatisticsPropagator::PropagateStatistics(LogicalComparisonJoin &join, uniq\n \t\t\t\t\t\t*node_ptr = std::move(cross_product);\n \t\t\t\t\t\treturn;\n \t\t\t\t\t}\n-\t\t\t\t\tcase JoinType::ANTI:\n-\t\t\t\t\t\t// anti join on true: empty result\n-\t\t\t\t\t\tReplaceWithEmptyResult(*node_ptr);\n-\t\t\t\t\t\treturn;\n \t\t\t\t\tdefault:\n \t\t\t\t\t\t// we don't handle mark/single join here yet\n \t\t\t\t\t\tbreak;\n",
  "test_patch": "diff --git a/test/sql/subquery/exists/test_issue_9308.test b/test/sql/subquery/exists/test_issue_9308.test\nnew file mode 100644\nindex 000000000000..4c37187e18b4\n--- /dev/null\n+++ b/test/sql/subquery/exists/test_issue_9308.test\n@@ -0,0 +1,25 @@\n+# name: test/sql/subquery/exists/test_issue_9308.test\n+# description: Issue #9308: wrong result: NOT EXISTS predicate with correlated non-equality comparison\n+# group: [exists]\n+\n+statement ok\n+PRAGMA enable_verification\n+\n+statement ok\n+create or replace table t1(c1 int64);\n+\n+statement ok\n+insert into t1 values (1);\n+\n+statement ok\n+create or replace table t2(c1 int64);\n+\n+query II\n+select c1, not exists (select 1 from t2 where t1.c1 <= t2.c1) from t1;\n+----\n+1\ttrue\n+\n+query I\n+select c1 from t1 where not exists (select 1 from t2 where t1.c1 <= t2.c1);\n+----\n+1\n",
  "problem_statement": "wrong result: NOT EXISTS predicate with correlated non-equality comparison\n### What happens?\r\n\r\nA query with a correlated non-equality comparison in WHERE NOT EXISTS is not returned by the outer SELECT despite matching no rows in the correlated subquery.  See reproduction.\r\n\r\n### To Reproduce\r\n\r\n```\r\ncreate or replace table t1(c1 int64);\r\ninsert into t1 values (1);\r\ncreate or replace table t2(c1 int64);\r\n-- shows that the \"not exists\" expression evaluates to true\r\nselect c1, not exists (select 1 from t2 where t1.c1 <= t2.c1) from t1; \r\n-- 0 rows appear in the output\r\nselect c1 from t1 where not exists (select 1 from t2 where t1.c1 <= t2.c1);\r\n```\r\n\r\nThe first SELECT produces:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502 (NOT EXISTS(SELECT 1 FROM t2 WHERE (t1.c1 <= t2.c1))) \u2502\r\n\u2502 int64 \u2502                        boolean                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 true                                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nshowing that the NOT EXISTS evaluates to true\r\n\r\nThe 2nd select results in:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   c1   \u2502\r\n\u2502 int64  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI believe this should return the 1 row.\r\n\r\n### OS:\r\n\r\naarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.9.1, main branch (downloaded Oct 11, 2023)\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nSteven Pelley\r\n\r\n### Affiliation:\r\n\r\nindependent\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested on the latest `main` branch\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\nwrong result: NOT EXISTS predicate with correlated non-equality comparison\n### What happens?\r\n\r\nA query with a correlated non-equality comparison in WHERE NOT EXISTS is not returned by the outer SELECT despite matching no rows in the correlated subquery.  See reproduction.\r\n\r\n### To Reproduce\r\n\r\n```\r\ncreate or replace table t1(c1 int64);\r\ninsert into t1 values (1);\r\ncreate or replace table t2(c1 int64);\r\n-- shows that the \"not exists\" expression evaluates to true\r\nselect c1, not exists (select 1 from t2 where t1.c1 <= t2.c1) from t1; \r\n-- 0 rows appear in the output\r\nselect c1 from t1 where not exists (select 1 from t2 where t1.c1 <= t2.c1);\r\n```\r\n\r\nThe first SELECT produces:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502 (NOT EXISTS(SELECT 1 FROM t2 WHERE (t1.c1 <= t2.c1))) \u2502\r\n\u2502 int64 \u2502                        boolean                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 true                                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\nshowing that the NOT EXISTS evaluates to true\r\n\r\nThe 2nd select results in:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502   c1   \u2502\r\n\u2502 int64  \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502 0 rows \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI believe this should return the 1 row.\r\n\r\n### OS:\r\n\r\naarch64\r\n\r\n### DuckDB Version:\r\n\r\n0.9.1, main branch (downloaded Oct 11, 2023)\r\n\r\n### DuckDB Client:\r\n\r\nCLI\r\n\r\n### Full Name:\r\n\r\nSteven Pelley\r\n\r\n### Affiliation:\r\n\r\nindependent\r\n\r\n### Have you tried this on the latest `main` branch?\r\n\r\nI have tested on the latest `main` branch\r\n\r\n### Have you tried the steps to reproduce? Do they include all relevant data and configuration? Does the issue you report still appear there?\r\n\r\n- [X] Yes, I have\n",
  "hints_text": "Thanks for reporting this and especially thanks for making it easy to reproduce.\nIt may also be worth noting that this issue only seems to manifest when the table that's queried by the inner SELECT is empty. The behavior in this case is correct: \r\n\r\n```\r\ncreate or replace table t1(c1 int64);\r\ninsert into t1 values (1);\r\ncreate or replace table t2(c1 int64);\r\ninsert into t2 values (0);\r\n-- shows that the \"not exists\" expression evaluates to true\r\nselect c1, not exists (select 1 from t2 where t1.c1 <= t2.c1) from t1; \r\n-- 1 row appears in the output as long as t2 is not empty\r\nselect c1 from t1 where not exists (select 1 from t2 where t1.c1 <= t2.c1);\r\n```\r\n\r\nThe 1st result is the same: \r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502 (NOT EXISTS(SELECT 1 FROM t2 WHERE (t1.c1 <= t2.c1))) \u2502\r\n\u2502 int64 \u2502                        boolean                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 true                                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThe 2nd result is correct:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI also tested this with multiple rows in t1\u2014if t2 is empty the WHERE NOT EXISTS query will always result in 0 rows.\nThanks for reporting this and especially thanks for making it easy to reproduce.\nIt may also be worth noting that this issue only seems to manifest when the table that's queried by the inner SELECT is empty. The behavior in this case is correct: \r\n\r\n```\r\ncreate or replace table t1(c1 int64);\r\ninsert into t1 values (1);\r\ncreate or replace table t2(c1 int64);\r\ninsert into t2 values (0);\r\n-- shows that the \"not exists\" expression evaluates to true\r\nselect c1, not exists (select 1 from t2 where t1.c1 <= t2.c1) from t1; \r\n-- 1 row appears in the output as long as t2 is not empty\r\nselect c1 from t1 where not exists (select 1 from t2 where t1.c1 <= t2.c1);\r\n```\r\n\r\nThe 1st result is the same: \r\n\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502 (NOT EXISTS(SELECT 1 FROM t2 WHERE (t1.c1 <= t2.c1))) \u2502\r\n\u2502 int64 \u2502                        boolean                        \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u253c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502 true                                                  \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nThe 2nd result is correct:\r\n```\r\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\r\n\u2502  c1   \u2502\r\n\u2502 int64 \u2502\r\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\r\n\u2502     1 \u2502\r\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\r\n```\r\n\r\nI also tested this with multiple rows in t1\u2014if t2 is empty the WHERE NOT EXISTS query will always result in 0 rows.",
  "created_at": "2023-11-13T11:50:23Z"
}